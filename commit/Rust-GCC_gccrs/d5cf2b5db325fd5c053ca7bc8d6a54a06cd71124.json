{"sha": "d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjZjJiNWRiMzI1ZmQ1YzA1M2NhN2JjOGQ2YTU0YTA2Y2Q3MTEyNA==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-05-20T18:21:39Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2021-06-28T16:47:21Z"}, "message": "Enable BTF generation in the BPF backend\n\nThis patch changes the BPF GCC backend in order to use the DWARF debug\nhooks and therefore enables the user to generate BTF debugging\ninformation with -gbtf.  Generating BTF is crucial when compiling BPF\nprograms, since the CO-RE (compile-once, run-everwhere) mechanism\nused by the kernel BPF loader relies on it.\n\nNote that since in eBPF it is not possible to unwind frames due to the\nrestrictive nature of the target architecture, we are disabling the\ngeneration of CFA in this target.\n\n2021-06-28  David Faust <david.faust@oracle.com>\n\n\t* config/bpf/bpf.c (bpf_expand_prologue): Do not mark insns as\n\tframe related.\n\t(bpf_expand_epilogue): Likewise.\n\t* config/bpf/bpf.h (DWARF2_FRAME_INFO): Define to 0.\n\tDo not define DBX_DEBUGGING_INFO.", "tree": {"sha": "20263bd75b4a944a9aaf3119caac662a9e450c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20263bd75b4a944a9aaf3119caac662a9e450c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824a6a52a6c2892c8d4a4a889a425bdaf207634f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824a6a52a6c2892c8d4a4a889a425bdaf207634f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824a6a52a6c2892c8d4a4a889a425bdaf207634f"}], "stats": {"total": 16, "additions": 2, "deletions": 14}, "files": [{"sha": "e635f9edb40b2493801523ba4849605b77a3b1f0", "filename": "gcc/config/bpf/bpf.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "patch": "@@ -349,7 +349,6 @@ bpf_expand_prologue (void)\n \t\t\t\t\t\t      hard_frame_pointer_rtx,\n \t\t\t\t\t\t      fp_offset - 8));\n \t\t  insn = emit_move_insn (mem, gen_rtx_REG (DImode, regno));\n-\t\t  RTX_FRAME_RELATED_P (insn) = 1;\n \t\t  fp_offset -= 8;\n \t\t}\n \t    }\n@@ -364,15 +363,13 @@ bpf_expand_prologue (void)\n     {\n       insn = emit_move_insn (stack_pointer_rtx,\n \t\t\t     hard_frame_pointer_rtx);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n \n       if (size > 0)\n \t{\n \t  insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t       stack_pointer_rtx,\n \t\t\t\t\t\t       GEN_INT (-size))));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }\n }\n@@ -412,7 +409,6 @@ bpf_expand_epilogue (void)\n \t\t\t\t\t\t      hard_frame_pointer_rtx,\n \t\t\t\t\t\t      fp_offset - 8));\n \t\t  insn = emit_move_insn (gen_rtx_REG (DImode, regno), mem);\n-\t\t  RTX_FRAME_RELATED_P (insn) = 1;\n \t\t  fp_offset -= 8;\n \t\t}\n \t    }"}, {"sha": "82be0c3e1902add1ed139c4a56c772cc53e54a7d", "filename": "gcc/config/bpf/bpf.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124/gcc%2Fconfig%2Fbpf%2Fbpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124/gcc%2Fconfig%2Fbpf%2Fbpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.h?ref=d5cf2b5db325fd5c053ca7bc8d6a54a06cd71124", "patch": "@@ -235,17 +235,9 @@ enum reg_class\n \n /**** Debugging Info ****/\n \n-/* We cannot support DWARF2 because of the limitations of eBPF.  */\n+/* In eBPF it is not possible to unwind frames. Disable CFA.  */\n \n-/* elfos.h insists in using DWARF.  Undo that here.  */\n-#ifdef DWARF2_DEBUGGING_INFO\n-# undef DWARF2_DEBUGGING_INFO\n-#endif\n-#ifdef PREFERRED_DEBUGGING_TYPE\n-# undef PREFERRED_DEBUGGING_TYPE\n-#endif\n-\n-#define DBX_DEBUGGING_INFO\n+#define DWARF2_FRAME_INFO 0\n \n /**** Stack Layout and Calling Conventions.  */\n "}]}