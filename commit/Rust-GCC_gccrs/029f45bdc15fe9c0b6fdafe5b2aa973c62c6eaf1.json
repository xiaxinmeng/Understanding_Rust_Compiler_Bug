{"sha": "029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI5ZjQ1YmRjMTVmZTljMGI2ZmRhZmU1YjJhYTk3M2M2MmM2ZWFmMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-02-14T17:52:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-02-14T17:52:25Z"}, "message": "tree-sra.c (early_sra): New.\n\n        * tree-sra.c (early_sra): New.\n        (decl_can_be_decomposed_p): Deny va_list if early_sra.\n        (tree_sra_early, pass_sra_early): New.\n        * tree-pass.h (pass_sra_early): Declare.\n        * passes.c (init_optimization_passes): Use it.\n\nFrom-SVN: r121953", "tree": {"sha": "9fdff1e4943f3d35a0f3e5fcfb194ad9450680cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fdff1e4943f3d35a0f3e5fcfb194ad9450680cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/comments", "author": null, "committer": null, "parents": [{"sha": "c4e74b1aaa92e2f0ab21af1c08c52819867b32b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e74b1aaa92e2f0ab21af1c08c52819867b32b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e74b1aaa92e2f0ab21af1c08c52819867b32b2"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "04b06a863d88029d55dec0889c91f5eaa10bd9ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "patch": "@@ -1,3 +1,11 @@\n+2007-02-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-sra.c (early_sra): New.\n+\t(decl_can_be_decomposed_p): Deny va_list if early_sra.\n+\t(tree_sra_early, pass_sra_early): New.\n+\t* tree-pass.h (pass_sra_early): Declare.\n+\t* passes.c (init_optimization_passes): Use it.\n+\n 2007-02-14  Richard Guenther  <rguenther@suse.de>\n \n \t* flags.h (issue_strict_overflow_warning): Convert to a macro."}, {"sha": "f90796d0461af689d11897583c329565215173f5", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "patch": "@@ -489,7 +489,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_rename_ssa_copies);\n \t  NEXT_PASS (pass_ccp);\n \t  NEXT_PASS (pass_forwprop);\n-\t  NEXT_PASS (pass_sra);\n+\t  NEXT_PASS (pass_sra_early);\n \t  NEXT_PASS (pass_copy_prop);\n \t  NEXT_PASS (pass_merge_phi);\n \t  NEXT_PASS (pass_dce);"}, {"sha": "7cdee50f609f8be359eefd7222ffb6695960ca9d", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "patch": "@@ -241,6 +241,7 @@ extern struct tree_opt_pass pass_early_tree_profile;\n extern struct tree_opt_pass pass_cleanup_cfg;\n extern struct tree_opt_pass pass_referenced_vars;\n extern struct tree_opt_pass pass_sra;\n+extern struct tree_opt_pass pass_sra_early;\n extern struct tree_opt_pass pass_tail_recursion;\n extern struct tree_opt_pass pass_tail_calls;\n extern struct tree_opt_pass pass_tree_loop;"}, {"sha": "e4a1107ab45568ffa4fcdc4356804295f14a17ab", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=029f45bdc15fe9c0b6fdafe5b2aa973c62c6eaf1", "patch": "@@ -75,6 +75,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n */\n \n \n+/* True if this is the \"early\" pass, before inlining.  */\n+static bool early_sra;\n+\n /* The set of todo flags to return from tree_sra.  */\n static unsigned int todoflags;\n \n@@ -342,6 +345,17 @@ decl_can_be_decomposed_p (tree var)\n       return false;\n     }\n \n+  /* HACK: if we decompose a va_list_type_node before inlining, then we'll\n+     confuse tree-stdarg.c, and we won't be able to figure out which and\n+     how many arguments are accessed.  This really should be improved in\n+     tree-stdarg.c, as the decomposition is truely a win.  This could also\n+     be fixed if the stdarg pass ran early, but this can't be done until\n+     we've aliasing information early too.  See PR 30791.  */\n+  if (early_sra\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (var))\n+\t == TYPE_MAIN_VARIANT (va_list_type_node))\n+    return false;\n+\n   return true;\n }\n \n@@ -2365,12 +2379,44 @@ tree_sra (void)\n   return todoflags;\n }\n \n+static unsigned int\n+tree_sra_early (void)\n+{\n+  unsigned int ret;\n+\n+  early_sra = true;\n+  ret = tree_sra ();\n+  early_sra = false;\n+\n+  return ret;\n+}\n+\n static bool\n gate_sra (void)\n {\n   return flag_tree_sra != 0;\n }\n \n+struct tree_opt_pass pass_sra_early =\n+{\n+  \"esra\",\t\t\t\t/* name */\n+  gate_sra,\t\t\t\t/* gate */\n+  tree_sra_early,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_TREE_SRA,\t\t\t\t/* tv_id */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t        /* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func\n+  | TODO_update_ssa\n+  | TODO_ggc_collect\n+  | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n+\n struct tree_opt_pass pass_sra =\n {\n   \"sra\",\t\t\t\t/* name */"}]}