{"sha": "26114120fd6e1feb1b3cbbadfa569981df372a9f", "node_id": "C_kwDOANBUbNoAKDI2MTE0MTIwZmQ2ZTFmZWIxYjNjYmJhZGZhNTY5OTgxZGYzNzJhOWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-12T11:22:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-12T11:22:47Z"}, "message": "Merge #1375\n\n1375: backend: properly handles foreign ABIs r=philberty a=liushuyu\n\n- Properly handles foreign (`extern` functions) ABIs\r\n\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "fffaa2e45b0d7f7a939a9233524131260b2dd53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffaa2e45b0d7f7a939a9233524131260b2dd53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26114120fd6e1feb1b3cbbadfa569981df372a9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizVmHCRBK7hj4Ov3rIwAAwvAIADg+n4bKgMcsGHUp4dI3VSB6\n36RiBctoMQbdK3mCHDYB9IpQ/pVdWcSfDdNTHJz/Sha77laO4eTZgJtrEMLR3eU+\ni2n2NcX63gRm5zsNzXCAKNRBnJI93cez/IzT0aa2egdDWRWMJVa/2HfdrRwT9Sas\nXyYAcBZVdct4gNMtmDErs57BvRFDMCvuK95VDwFRabFU9UehiZm/YCOzY4MewhDa\ntFAoVonuH1HFd2gn7Qib0zyWaI9lJe6UMFf2kctYq9VkELzYtKdavHzB2HF3wNrO\nfWKNmAfuEinsSDf3UiW0Zwh0O70M2ZJiKmOt3+VT18m5Rr2THTHNJmcagydtrsc=\n=USNI\n-----END PGP SIGNATURE-----\n", "payload": "tree fffaa2e45b0d7f7a939a9233524131260b2dd53c\nparent a273dbd971d337000155fe56a1d7cd78868caa9a\nparent a991c30262663f989839e833f0b0c7fc2dbd07da\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1657624967 +0000\ncommitter GitHub <noreply@github.com> 1657624967 +0000\n\nMerge #1375\n\n1375: backend: properly handles foreign ABIs r=philberty a=liushuyu\n\n- Properly handles foreign (`extern` functions) ABIs\r\n\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26114120fd6e1feb1b3cbbadfa569981df372a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26114120fd6e1feb1b3cbbadfa569981df372a9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26114120fd6e1feb1b3cbbadfa569981df372a9f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a273dbd971d337000155fe56a1d7cd78868caa9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a273dbd971d337000155fe56a1d7cd78868caa9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a273dbd971d337000155fe56a1d7cd78868caa9a"}, {"sha": "a991c30262663f989839e833f0b0c7fc2dbd07da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a991c30262663f989839e833f0b0c7fc2dbd07da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a991c30262663f989839e833f0b0c7fc2dbd07da"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "5bf64cc4ef429ab24eedcf90b8249a86a3ab695f", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=26114120fd6e1feb1b3cbbadfa569981df372a9f", "patch": "@@ -17,17 +17,20 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-compile-base.h\"\n+#include \"rust-abi.h\"\n #include \"rust-compile-item.h\"\n #include \"rust-compile-stmt.h\"\n #include \"rust-compile-fnparam.h\"\n #include \"rust-compile-var-decl.h\"\n \n+#include \"rust-diagnostics.h\"\n #include \"rust-expr.h\"\t// for AST::AttrInputLiteral\n #include \"rust-macro.h\" // for AST::MetaNameValueStr\n \n #include \"fold-const.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"tree.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -293,6 +296,8 @@ HIRCompileBase::handle_must_use_attribute_on_fndecl (tree fndecl,\n void\n HIRCompileBase::setup_abi_options (tree fndecl, ABI abi)\n {\n+  tree abi_tree = NULL_TREE;\n+\n   switch (abi)\n     {\n     case Rust::ABI::RUST:\n@@ -301,22 +306,34 @@ HIRCompileBase::setup_abi_options (tree fndecl, ABI abi)\n     case Rust::ABI::CDECL:\n       DECL_ATTRIBUTES (fndecl)\n \t= tree_cons (get_identifier (\"cdecl\"), NULL, DECL_ATTRIBUTES (fndecl));\n-      break;\n+\n+      return;\n \n     case Rust::ABI::STDCALL:\n-      DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"stdcall\"), NULL,\n-\t\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+      abi_tree = get_identifier (\"stdcall\");\n+\n       break;\n \n     case Rust::ABI::FASTCALL:\n-      DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"fastcall\"), NULL,\n-\t\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+      abi_tree = get_identifier (\"fastcall\");\n+\n+      break;\n+\n+    case Rust::ABI::SYSV64:\n+      abi_tree = get_identifier (\"sysv_abi\");\n+\n+      break;\n+\n+    case Rust::ABI::WIN64:\n+      abi_tree = get_identifier (\"ms_abi\");\n \n       break;\n \n     default:\n       break;\n     }\n+\n+  decl_attributes (&fndecl, build_tree_list (abi_tree, NULL_TREE), 0);\n }\n \n // ported from gcc/c/c-typecheck.c\n@@ -497,7 +514,7 @@ HIRCompileBase::compile_function (\n \n   setup_fndecl (fndecl, is_main_fn, fntype->has_subsititions_defined (),\n \t\tvisibility, qualifiers, outer_attrs);\n-  setup_abi_options (fndecl, fntype->get_abi ());\n+  setup_abi_options (fndecl, qualifiers.get_abi ());\n \n   // conditionally mangle the function name\n   bool should_mangle = should_mangle_item (fndecl);"}, {"sha": "6477c3790af87542cfb1ed0462987f1ea12a1b00", "filename": "gcc/rust/util/rust-abi.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Futil%2Frust-abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Futil%2Frust-abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-abi.cc?ref=26114120fd6e1feb1b3cbbadfa569981df372a9f", "patch": "@@ -33,6 +33,10 @@ get_abi_from_string (const std::string &abi)\n     return Rust::ABI::STDCALL;\n   else if (abi.compare (\"fastcall\") == 0)\n     return Rust::ABI::FASTCALL;\n+  else if (abi.compare (\"sysv64\") == 0)\n+    return Rust::ABI::SYSV64;\n+  else if (abi.compare (\"win64\") == 0)\n+    return Rust::ABI::WIN64;\n \n   return Rust::ABI::UNKNOWN;\n }\n@@ -54,6 +58,10 @@ get_string_from_abi (Rust::ABI abi)\n       return \"stdcall\";\n     case Rust::ABI::FASTCALL:\n       return \"fastcall\";\n+    case Rust::ABI::SYSV64:\n+      return \"sysv64\";\n+    case Rust::ABI::WIN64:\n+      return \"win64\";\n \n     case Rust::ABI::UNKNOWN:\n       return \"unknown\";"}, {"sha": "d794cc35fb3a4d1051c112ab19999659af654bc7", "filename": "gcc/rust/util/rust-abi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Futil%2Frust-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Frust%2Futil%2Frust-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-abi.h?ref=26114120fd6e1feb1b3cbbadfa569981df372a9f", "patch": "@@ -30,6 +30,8 @@ enum ABI\n   CDECL,\n   STDCALL,\n   FASTCALL,\n+  WIN64,\n+  SYSV64\n };\n \n extern Rust::ABI"}, {"sha": "9d8de406b0b812d4e59062818a10a6ec0c791cf2", "filename": "gcc/testsuite/rust/debug/win64-abi.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Ftestsuite%2Frust%2Fdebug%2Fwin64-abi.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26114120fd6e1feb1b3cbbadfa569981df372a9f/gcc%2Ftestsuite%2Frust%2Fdebug%2Fwin64-abi.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fdebug%2Fwin64-abi.rs?ref=26114120fd6e1feb1b3cbbadfa569981df372a9f", "patch": "@@ -0,0 +1,11 @@\n+pub extern \"win64\" fn square(num: i32) -> i32 {\n+    num * num\n+}\n+\n+fn main() {\n+    // { dg-do compile { target { x86_64-*-* } } }\n+    // { dg-options \"-gdwarf-5 -dA -w -O1\" }\n+    // MS ABI dictates that the first argument is ecx instead of edi from the sysv world\n+    // { dg-final { scan-assembler \"%ecx, %ecx\" } }\n+    square(1);\n+}"}]}