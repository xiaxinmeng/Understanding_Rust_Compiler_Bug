{"sha": "06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2NDRhMDczOGEyZjJiYzEzOTlmYzBkODBhMWZiNjIyZTU3YTZhOQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-03-20T23:25:41Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-03-20T23:25:41Z"}, "message": "linux-atomic.asm (ATOMIC_TEST_AND_SET): Take unsigned extension into account.\n\n\t* config/sh/linux-atomic.asm (ATOMIC_TEST_AND_SET): Take\n\tunsigned extension into account.\n\t(ATOMIC_COMPARE_AND_SWAP): Likewise.\n\t(ATOMIC_FETCH_AND_OP, ATOMIC_FETCH_AND_COMBOP): Likewise.\n\tDo computations on a scratch register.\n\nFrom-SVN: r133405", "tree": {"sha": "2e8bd8bf38697d6745b57d29dddb918420fca9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e8bd8bf38697d6745b57d29dddb918420fca9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9/comments", "author": null, "committer": null, "parents": [{"sha": "ad6003f260068a46bd378c5601604bc1cf077e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6003f260068a46bd378c5601604bc1cf077e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6003f260068a46bd378c5601604bc1cf077e74"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "c316af343f623bce86ae5814b23d120c09abf881", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "patch": "@@ -1,3 +1,11 @@\n+2008-03-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/linux-atomic.asm (ATOMIC_TEST_AND_SET): Take\n+\tunsigned extension into account.\n+\t(ATOMIC_COMPARE_AND_SWAP): Likewise.\n+\t(ATOMIC_FETCH_AND_OP, ATOMIC_FETCH_AND_COMBOP): Likewise.\n+\tDo computations on a scratch register.\n+\n 2008-03-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):"}, {"sha": "6d5ee56ae416768643e0c400c380e38e0f050019", "filename": "gcc/config/sh/linux-atomic.asm", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9/gcc%2Fconfig%2Fsh%2Flinux-atomic.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644a0738a2f2bc1399fc0d80a1fb622e57a6a9/gcc%2Fconfig%2Fsh%2Flinux-atomic.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux-atomic.asm?ref=06644a0738a2f2bc1399fc0d80a1fb622e57a6a9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2006 Free Software Foundation, Inc.\n+/* Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -35,7 +35,7 @@\n \n #if ! __SH5__\n \n-#define ATOMIC_TEST_AND_SET(N,T) \\\n+#define ATOMIC_TEST_AND_SET(N,T,EXT) \\\n \t.global\t__sync_lock_test_and_set_##N; \\\n \tHIDDEN_FUNC(__sync_lock_test_and_set_##N); \\\n \t.align\t2; \\\n@@ -48,20 +48,20 @@ __sync_lock_test_and_set_##N:; \\\n \tmov.##T\tr5, @r4; \\\n 1:\tmov\tr1, r15; \\\n \trts; \\\n-\t mov\tr2, r0; \\\n+\t EXT\tr2, r0; \\\n \tENDFUNC(__sync_lock_test_and_set_##N)\n \n-ATOMIC_TEST_AND_SET (1,b)\n-ATOMIC_TEST_AND_SET (2,w)\n-ATOMIC_TEST_AND_SET (4,l)\n+ATOMIC_TEST_AND_SET (1,b,extu.b)\n+ATOMIC_TEST_AND_SET (2,w,extu.w)\n+ATOMIC_TEST_AND_SET (4,l,mov)\n \n-#define ATOMIC_COMPARE_AND_SWAP(N,T) \\\n+#define ATOMIC_COMPARE_AND_SWAP(N,T,EXTS,EXT) \\\n \t.global\t__sync_compare_and_swap_##N; \\\n \tHIDDEN_FUNC(__sync_compare_and_swap_##N); \\\n \t.align\t2; \\\n __sync_compare_and_swap_##N:; \\\n \tmova\t1f, r0; \\\n-\tnop; \\\n+\tEXTS\tr5, r5; \\\n \tmov\tr15, r1; \\\n \tmov\t#(0f-1f), r15; \\\n 0:\tmov.##T\t@r4, r2; \\\n@@ -70,69 +70,71 @@ __sync_compare_and_swap_##N:; \\\n \tmov.##T\tr6, @r4; \\\n 1:\tmov\tr1, r15; \\\n \trts; \\\n-\t mov\tr2, r0; \\\n+\t EXT\tr2, r0; \\\n \tENDFUNC(__sync_compare_and_swap_##N)\n \n-ATOMIC_COMPARE_AND_SWAP (1,b)\n-ATOMIC_COMPARE_AND_SWAP (2,w)\n-ATOMIC_COMPARE_AND_SWAP (4,l)\n+ATOMIC_COMPARE_AND_SWAP (1,b,exts.b,extu.b)\n+ATOMIC_COMPARE_AND_SWAP (2,w,exts.w,extu.w)\n+ATOMIC_COMPARE_AND_SWAP (4,l,mov,mov)\n \n-#define ATOMIC_FETCH_AND_OP(OP,N,T) \\\n+#define ATOMIC_FETCH_AND_OP(OP,N,T,EXT) \\\n \t.global\t__sync_fetch_and_##OP##_##N; \\\n \tHIDDEN_FUNC(__sync_fetch_and_##OP##_##N); \\\n \t.align\t2; \\\n __sync_fetch_and_##OP##_##N:; \\\n \tmova\t1f, r0; \\\n+\tnop; \\\n \tmov\tr15, r1; \\\n \tmov\t#(0f-1f), r15; \\\n 0:\tmov.##T\t@r4, r2; \\\n-\tOP\tr2, r5; \\\n-\tmov.##T\tr5, @r4; \\\n+\tmov\tr5, r3; \\\n+\tOP\tr2, r3; \\\n+\tmov.##T\tr3, @r4; \\\n 1:\tmov\tr1, r15; \\\n \trts; \\\n-\t mov\tr2, r0; \\\n+\t EXT\tr2, r0; \\\n \tENDFUNC(__sync_fetch_and_##OP##_##N)\n \n-ATOMIC_FETCH_AND_OP(add,1,b)\n-ATOMIC_FETCH_AND_OP(add,2,w)\n-ATOMIC_FETCH_AND_OP(add,4,l)\n+ATOMIC_FETCH_AND_OP(add,1,b,extu.b)\n+ATOMIC_FETCH_AND_OP(add,2,w,extu.w)\n+ATOMIC_FETCH_AND_OP(add,4,l,mov)\n \n-ATOMIC_FETCH_AND_OP(or,1,b)\n-ATOMIC_FETCH_AND_OP(or,2,w)\n-ATOMIC_FETCH_AND_OP(or,4,l)\n+ATOMIC_FETCH_AND_OP(or,1,b,extu.b)\n+ATOMIC_FETCH_AND_OP(or,2,w,extu.w)\n+ATOMIC_FETCH_AND_OP(or,4,l,mov)\n \n-ATOMIC_FETCH_AND_OP(and,1,b)\n-ATOMIC_FETCH_AND_OP(and,2,w)\n-ATOMIC_FETCH_AND_OP(and,4,l)\n+ATOMIC_FETCH_AND_OP(and,1,b,extu.b)\n+ATOMIC_FETCH_AND_OP(and,2,w,extu.w)\n+ATOMIC_FETCH_AND_OP(and,4,l,mov)\n \n-ATOMIC_FETCH_AND_OP(xor,1,b)\n-ATOMIC_FETCH_AND_OP(xor,2,w)\n-ATOMIC_FETCH_AND_OP(xor,4,l)\n+ATOMIC_FETCH_AND_OP(xor,1,b,extu.b)\n+ATOMIC_FETCH_AND_OP(xor,2,w,extu.w)\n+ATOMIC_FETCH_AND_OP(xor,4,l,mov)\n \n-#define ATOMIC_FETCH_AND_COMBOP(OP,OP0,OP1,N,T) \\\n+#define ATOMIC_FETCH_AND_COMBOP(OP,OP0,OP1,N,T,EXT) \\\n \t.global\t__sync_fetch_and_##OP##_##N; \\\n \tHIDDEN_FUNC(__sync_fetch_and_##OP##_##N); \\\n \t.align\t2; \\\n __sync_fetch_and_##OP##_##N:; \\\n \tmova\t1f, r0; \\\n-\tnop; \\\n \tmov\tr15, r1; \\\n \tmov\t#(0f-1f), r15; \\\n 0:\tmov.##T\t@r4, r2; \\\n-\tOP0\tr2, r5; \\\n-\tOP1\tr5, r5; \\\n-\tmov.##T\tr5, @r4; \\\n+\tmov\tr5, r3; \\\n+\tOP0\tr2, r3; \\\n+\tOP1\tr3, r3; \\\n+\tmov.##T\tr3, @r4; \\\n 1:\tmov\tr1, r15; \\\n \trts; \\\n-\t mov\tr2, r0; \\\n+\t EXT\tr2, r0; \\\n \tENDFUNC(__sync_fetch_and_##OP##_##N)\n \n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,1,b)\n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,2,w)\n-ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,4,l)\n+ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,1,b,extu.b)\n+ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,2,w,extu.w)\n+ATOMIC_FETCH_AND_COMBOP(sub,sub,neg,4,l,mov)\n \n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,1,b)\n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,2,w)\n-ATOMIC_FETCH_AND_COMBOP(nand,and,not,4,l)\n+ATOMIC_FETCH_AND_COMBOP(nand,and,not,1,b,extu.b)\n+ATOMIC_FETCH_AND_COMBOP(nand,and,not,2,w,extu.w)\n+ATOMIC_FETCH_AND_COMBOP(nand,and,not,4,l,mov)\n \n #endif /* ! __SH5__ */"}]}