{"sha": "c61465bda5ed50a1bf664211515436f884e6fa66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxNDY1YmRhNWVkNTBhMWJmNjY0MjExNTE1NDM2Zjg4NGU2ZmE2Ng==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-07-04T08:17:57Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-04T08:17:57Z"}, "message": "[AArch64] ARMv8.2 command line and feature macros support\n\n\t* config/aarch64/aarch64-arches.def: Add \"armv8.2-a\".\n\t* config/aarch64/aarch64.h (AARCH64_FL_V8_2): New.\n\t(AARCH64_FL_F16): New.\n\t(AARCH64_FL_FOR_ARCH8_2): New.\n\t(AARCH64_ISA_8_2): New.\n\t(AARCH64_ISA_F16): New.\n\t(TARGET_FP_F16INST): New.\n\t(TARGET_SIMD_F16INST): New.\n\t* config/aarch64/aarch64-option-extensions.def (\"fp16\"): New entry.\n\t(\"fp\"): Disabling \"fp\" also disables \"fp16\".\n\t* config/aarch64/aarch64-c.c (arch64_update_cpp_builtins): Conditionally define\n\t__ARM_FEATURE_FP16_SCALAR_ARITHMETIC and __ARM_FEATURE_FP16_VECTOR_ARITHMETIC.\n\t* doc/invoke.texi (AArch64 Options): Document \"armv8.2-a\" and \"fp16\".\n\n\nCo-Authored-By: Jiong Wang <jiong.wang@arm.com>\n\nFrom-SVN: r237956", "tree": {"sha": "f3d89dc5d03ffde41530bf6c68165422b8b4cb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d89dc5d03ffde41530bf6c68165422b8b4cb83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61465bda5ed50a1bf664211515436f884e6fa66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61465bda5ed50a1bf664211515436f884e6fa66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61465bda5ed50a1bf664211515436f884e6fa66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61465bda5ed50a1bf664211515436f884e6fa66/comments", "author": null, "committer": null, "parents": [{"sha": "793350758c5c88b29b1c9459f3b3fb1bb00bc0c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793350758c5c88b29b1c9459f3b3fb1bb00bc0c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793350758c5c88b29b1c9459f3b3fb1bb00bc0c0"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "d5abcd15a588cbfc6e0392a920e35d3fb4055335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -1,3 +1,20 @@\n+2016-07-04  Matthew Wahab  <matthew.wahab@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def: Add \"armv8.2-a\".\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V8_2): New.\n+\t(AARCH64_FL_F16): New.\n+\t(AARCH64_FL_FOR_ARCH8_2): New.\n+\t(AARCH64_ISA_8_2): New.\n+\t(AARCH64_ISA_F16): New.\n+\t(TARGET_FP_F16INST): New.\n+\t(TARGET_SIMD_F16INST): New.\n+\t* config/aarch64/aarch64-option-extensions.def (\"fp16\"): New entry.\n+\t(\"fp\"): Disabling \"fp\" also disables \"fp16\".\n+\t* config/aarch64/aarch64-c.c (arch64_update_cpp_builtins): Conditionally define\n+\t__ARM_FEATURE_FP16_SCALAR_ARITHMETIC and __ARM_FEATURE_FP16_VECTOR_ARITHMETIC.\n+\t* doc/invoke.texi (AArch64 Options): Document \"armv8.2-a\" and \"fp16\".\n+\n 2016-07-04  Jan Beulich  <jbeulich@suse.com>\n \n \t* gcc.c (default_compilers[\"@c-header\"]): Conditionalize \"-o\"."}, {"sha": "7dcf140411f6eb95504d9b92df9dadce50529a28", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -32,4 +32,5 @@\n \n AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8A,\t8,  AARCH64_FL_FOR_ARCH8)\n AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8_1A,\t8,  AARCH64_FL_FOR_ARCH8_1)\n+AARCH64_ARCH(\"armv8.2-a\",     generic,\t     8_2A,\t8,  AARCH64_FL_FOR_ARCH8_2)\n "}, {"sha": "3380ed6f2cd0ae35fd6a4e53177604256875e6de", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -95,6 +95,11 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   else\n     cpp_undef (pfile, \"__ARM_FP\");\n \n+  aarch64_def_or_undef (TARGET_FP_F16INST,\n+\t\t\t\"__ARM_FEATURE_FP16_SCALAR_ARITHMETIC\", pfile);\n+  aarch64_def_or_undef (TARGET_SIMD_F16INST,\n+\t\t\t\"__ARM_FEATURE_FP16_VECTOR_ARITHMETIC\", pfile);\n+\n   aarch64_def_or_undef (TARGET_SIMD, \"__ARM_FEATURE_NUMERIC_MAXMIN\", pfile);\n   aarch64_def_or_undef (TARGET_SIMD, \"__ARM_NEON\", pfile);\n "}, {"sha": "a10ccf2254cb911d228937a9e69ddf62086a41aa", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -39,8 +39,8 @@\n    that are required.  Their order is not important.  */\n \n /* Enabling \"fp\" just enables \"fp\".\n-   Disabling \"fp\" also disables \"simd\", \"crypto\".  */\n-AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO, \"fp\")\n+   Disabling \"fp\" also disables \"simd\", \"crypto\" and \"fp16\".  */\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\".  */\n@@ -55,3 +55,7 @@ AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, \"crc32\")\n \n /* Enabling or disabling \"lse\" only changes \"lse\".  */\n AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, \"atomics\")\n+\n+/* Enabling \"fp16\" also enables \"fp\".\n+   Disabling \"fp16\" just disables \"fp16\".  */\n+AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, 0, \"fp16\")"}, {"sha": "59805a9f71abf0639cd6053b88304fbb8fc9e296", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -135,6 +135,9 @@ extern unsigned aarch64_architecture_version;\n /* ARMv8.1 architecture extensions.  */\n #define AARCH64_FL_LSE\t      (1 << 4)  /* Has Large System Extensions.  */\n #define AARCH64_FL_V8_1\t      (1 << 5)  /* Has ARMv8.1 extensions.  */\n+/* ARMv8.2-A architecture extensions.  */\n+#define AARCH64_FL_V8_2\t      (1 << 8)  /* Has ARMv8.2-A features.  */\n+#define AARCH64_FL_F16\t      (1 << 9)  /* Has ARMv8.2-A FP16 extensions.  */\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -146,6 +149,8 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FOR_ARCH8       (AARCH64_FL_FPSIMD)\n #define AARCH64_FL_FOR_ARCH8_1\t\t\t       \\\n   (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_CRC | AARCH64_FL_V8_1)\n+#define AARCH64_FL_FOR_ARCH8_2\t\t\t\\\n+  (AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_V8_2)\n \n /* Macros to test ISA flags.  */\n \n@@ -155,6 +160,8 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_SIMD           (aarch64_isa_flags & AARCH64_FL_SIMD)\n #define AARCH64_ISA_LSE\t\t   (aarch64_isa_flags & AARCH64_FL_LSE)\n #define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_V8_1)\n+#define AARCH64_ISA_V8_2\t   (aarch64_isa_flags & AARCH64_FL_V8_2)\n+#define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n@@ -165,6 +172,10 @@ extern unsigned aarch64_architecture_version;\n /* Atomic instructions that can be enabled through the +lse extension.  */\n #define TARGET_LSE (AARCH64_ISA_LSE)\n \n+/* ARMv8.2-A FP16 support that can be enabled through the +fp16 extension.  */\n+#define TARGET_FP_F16INST (TARGET_FLOAT && AARCH64_ISA_F16)\n+#define TARGET_SIMD_F16INST (TARGET_SIMD && AARCH64_ISA_F16)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "1e0337d1bb4eae442045f4f2ce6251d61bdb8efe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61465bda5ed50a1bf664211515436f884e6fa66/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c61465bda5ed50a1bf664211515436f884e6fa66", "patch": "@@ -13101,7 +13101,10 @@ more feature modifiers.  This option has the form\n @option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}.\n \n The permissible values for @var{arch} are @samp{armv8-a},\n-@samp{armv8.1-a} or @var{native}.\n+@samp{armv8.1-a}, @samp{armv8.2-a} or @var{native}.\n+\n+The value @samp{armv8.2-a} implies @samp{armv8.1-a} and enables compiler\n+support for the ARMv8.2-A architecture extensions.\n \n The value @samp{armv8.1-a} implies @samp{armv8-a} and enables compiler\n support for the ARMv8.1 architecture extension.  In particular, it\n@@ -13208,6 +13211,8 @@ instructions.  This is on by default for all possible values for options\n @item lse\n Enable Large System Extension instructions.  This is on by default for\n @option{-march=armv8.1-a}.\n+@item fp16\n+Enable FP16 extension.  This also enables floating-point instructions.\n \n @end table\n "}]}