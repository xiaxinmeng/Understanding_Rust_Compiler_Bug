{"sha": "1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzOGY1YzlkMDA3Y2Y0ZTFhMTlhOWE0NGIyZjI0YTMxMWM2NzI3YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-14T17:15:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-14T17:15:27Z"}, "message": "re PR libstdc++/11480 (std::unique calls predicate too many times)\n\n2003-10-14  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/11480\n\t* include/bits/stl_algo.h (unique): Fix.\n\t* testsuite/25_algorithms/unique.cc: Move to unique/1.cc.\n\t* testsuite/25_algorithms/unique/11480.cc: New, from the PR.\n\t* testsuite/25_algorithms/unique/2.cc: New.\n\nFrom-SVN: r72478", "tree": {"sha": "0b66a29f8d02b21689b779260defecc83bbf154a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b66a29f8d02b21689b779260defecc83bbf154a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/comments", "author": null, "committer": null, "parents": [{"sha": "77a325a26bb63d17c3818068f5c12f8626ccc2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a325a26bb63d17c3818068f5c12f8626ccc2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a325a26bb63d17c3818068f5c12f8626ccc2d5"}], "stats": {"total": 179, "additions": 173, "deletions": 6}, "files": [{"sha": "481dd3729ccb063908e799071da81e13573a763e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "patch": "@@ -1,3 +1,11 @@\n+2003-10-14  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/11480\n+\t* include/bits/stl_algo.h (unique): Fix.\n+\t* testsuite/25_algorithms/unique.cc: Move to unique/1.cc.\n+\t* testsuite/25_algorithms/unique/11480.cc: New, from the PR.\n+\t* testsuite/25_algorithms/unique/2.cc: New.\n+\n 2003-10-14  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* src/localename.cc (_M_replace_categories, M_replace_facet):"}, {"sha": "70ef219953633971a60f2b4c1cf01cbfeaba3410", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "patch": "@@ -1268,8 +1268,18 @@ namespace std\n       __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n+      // Skip the beginning, if already unique.\n       __first = std::adjacent_find(__first, __last);\n-      return std::unique_copy(__first, __last, __first);\n+      if (__first == __last)\n+\treturn __last;\n+\n+      // Do the real copy work.\n+      _ForwardIterator __dest = __first;\n+      ++__first;\n+      while (++__first != __last)\n+\tif (!(*__dest == *__first))\n+\t  *++__dest = *__first;\n+      return ++__dest;\n     }\n \n   /**\n@@ -1297,8 +1307,18 @@ namespace std\n \t\ttypename iterator_traits<_ForwardIterator>::value_type,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n+      // Skip the beginning, if already unique.\n       __first = std::adjacent_find(__first, __last, __binary_pred);\n-      return std::unique_copy(__first, __last, __first, __binary_pred);\n+      if (__first == __last)\n+\treturn __last;\n+\n+      // Do the real copy work.\n+      _ForwardIterator __dest = __first;\n+      ++__first;\n+      while (++__first != __last)\n+\tif (!__binary_pred(*__dest, *__first))\n+\t  *++__dest = *__first;\n+      return ++__dest;\n     }\n \n   /**"}, {"sha": "6c383bb4af4f070414d46a4de2e0137cb9a51f22", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/1.cc", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F1.cc?ref=1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "patch": "@@ -1,6 +1,6 @@\n // 2001-07-19 Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,13 +18,11 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 25.2.8 Unique\n-\n+// 25.2.8 [lib.alg.unique] Unique\n \n #include <list>\n #include <algorithm>\n \n-\n int main()\n {\n   using namespace std;", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/unique.cc"}, {"sha": "6ac9f68579076e273e899cb0645dac9a30ae8cf3", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/11480.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc?ref=1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+int a[10] = { 1, 2, 3, 3, 4, 5, 5, 6, 7, 9 };\n+\n+static int compare_count = 0;\n+\n+bool compare(int a, int b)\n+{\n+  compare_count++;\n+  return a == b;\n+}\n+\n+// libstdc++/11480\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique(a, a+10, compare);\n+  VERIFY( compare_count == 9 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "55920fbe3886574258e6d8e12ee8f92fbf61a413", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/2.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1638f5c9d007cf4e1a19a9a44b2f24a311c6727a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc?ref=1638f5c9d007cf4e1a19a9a44b2f24a311c6727a", "patch": "@@ -0,0 +1,95 @@\n+// 2003-10-14  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.8 [lib.alg.unique] Unique\n+\n+#include <list>\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+const int T1[] = {1, 4, 4, 6, 1, 2, 2, 3, 1, 6, 6, 6, 5, 7, 5, 4, 4};\n+const int T2[] = {1, 1, 1, 2, 2, 1, 1, 7, 6, 6, 7, 8, 8, 8, 8, 9, 9};\n+const int N = sizeof(T1) / sizeof(int);\n+\n+const int A1[] = {1, 4, 6, 1, 2, 3, 1, 6, 5, 7, 5, 4};\n+const int A2[] = {1, 4, 4, 6, 6, 6, 6, 7};\n+const int A3[] = {1, 1, 1};\n+\n+const int B1[] = {1, 2, 1, 7, 6, 7, 8, 9};\n+const int B2[] = {1, 1, 1, 2, 2, 7, 7, 8, 8, 8, 8, 9, 9};\n+const int B3[] = {9, 9, 8, 8, 8, 8, 7, 6, 6, 1, 1, 1, 1, 1};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  list<int>::iterator pos;\n+\n+  list<int> coll(T1, T1 + N);\n+  pos = unique(coll.begin(), coll.end());\n+  VERIFY( equal(coll.begin(), pos, A1) );\n+\n+  list<int> coll2(T2, T2 + N);\n+  pos = unique(coll2.begin(), coll2.end());\n+  VERIFY( equal(coll2.begin(), pos, B1) );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  list<int>::iterator pos;\n+\n+  list<int> coll(T1, T1 + N);\n+  pos = unique(coll.begin(), coll.end(), greater<int>());\n+  VERIFY( equal(coll.begin(), pos, A2) );\n+\n+  list<int> coll2(T2, T2 + N);\n+  pos = unique(coll2.begin(), coll2.end(), greater<int>());\n+  VERIFY( equal(coll2.begin(), pos, B2) );\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  list<int>::iterator pos;\n+\n+  list<int> coll(T1, T1 + N);\n+  pos = unique(coll.begin(), coll.end(), less<int>());\n+  VERIFY( equal(coll.begin(), pos, A3) );\n+\n+  list<int> coll2(T2, T2 + N);\n+  reverse(coll2.begin(), coll2.end());\n+  pos = unique(coll2.begin(), coll2.end(), less<int>());\n+  VERIFY( equal(coll2.begin(), pos, B3) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}]}