{"sha": "2aca2504814648927ab560f75e564b69835e0514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjYTI1MDQ4MTQ2NDg5MjdhYjU2MGY3NWU1NjRiNjk4MzVlMDUxNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-27T08:42:01Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-27T08:42:01Z"}, "message": "[AArch64] Delete obsolete CC_ZESWP and CC_SESWP CC modes\n\n\t* config/aarch64/aarch64-modes.def (CC_ZESWP, CC_SESWP): Delete.\n\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Remove condition\n\tthat returns CC_SESWPmode and CC_ZESWPmode.\n\t(aarch64_get_condition_code_1): Remove handling of CC_SESWPmode\n\tand CC_SESWPmode.\n\t(aarch64_rtx_costs): Likewise.\n\nFrom-SVN: r236809", "tree": {"sha": "2e2787bc771e961927cd09ad8452197b6a3193cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2787bc771e961927cd09ad8452197b6a3193cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aca2504814648927ab560f75e564b69835e0514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aca2504814648927ab560f75e564b69835e0514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aca2504814648927ab560f75e564b69835e0514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aca2504814648927ab560f75e564b69835e0514/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09867e186ea3a705abbdd095d793d6613d0609b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09867e186ea3a705abbdd095d793d6613d0609b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09867e186ea3a705abbdd095d793d6613d0609b6"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "fd03e8c4e60625f9faf20fd24f32caccc3f6a841", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aca2504814648927ab560f75e564b69835e0514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aca2504814648927ab560f75e564b69835e0514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aca2504814648927ab560f75e564b69835e0514", "patch": "@@ -1,3 +1,12 @@\n+2016-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def (CC_ZESWP, CC_SESWP): Delete.\n+\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Remove condition\n+\tthat returns CC_SESWPmode and CC_ZESWPmode.\n+\t(aarch64_get_condition_code_1): Remove handling of CC_SESWPmode\n+\tand CC_SESWPmode.\n+\t(aarch64_rtx_costs): Likewise.\n+\n 2016-05-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_p9_fp_minmax): New function"}, {"sha": "de8227f0ce47f4268761047d4e7bc46627c34bc7", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aca2504814648927ab560f75e564b69835e0514/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aca2504814648927ab560f75e564b69835e0514/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=2aca2504814648927ab560f75e564b69835e0514", "patch": "@@ -21,8 +21,6 @@\n CC_MODE (CCFP);\n CC_MODE (CCFPE);\n CC_MODE (CC_SWP);\n-CC_MODE (CC_ZESWP); /* zero-extend LHS (but swap to make it RHS).  */\n-CC_MODE (CC_SESWP); /* sign-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n CC_MODE (CC_C);     /* Only C bit of condition flags is valid.  */"}, {"sha": "51d2d50960078e079ed0f9c02751b2be74377dd8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aca2504814648927ab560f75e564b69835e0514/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aca2504814648927ab560f75e564b69835e0514/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2aca2504814648927ab560f75e564b69835e0514", "patch": "@@ -4227,14 +4227,6 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n       && GET_CODE (x) == NEG)\n     return CC_Zmode;\n \n-  /* A compare of a mode narrower than SI mode against zero can be done\n-     by extending the value in the comparison.  */\n-  if ((GET_MODE (x) == QImode || GET_MODE (x) == HImode)\n-      && y == const0_rtx)\n-    /* Only use sign-extension if we really need it.  */\n-    return ((code == GT || code == GE || code == LE || code == LT)\n-\t    ? CC_SESWPmode : CC_ZESWPmode);\n-\n   /* A test for unsigned overflow.  */\n   if ((GET_MODE (x) == DImode || GET_MODE (x) == TImode)\n       && code == NE\n@@ -4303,8 +4295,6 @@ aarch64_get_condition_code_1 (enum machine_mode mode, enum rtx_code comp_code)\n       break;\n \n     case CC_SWPmode:\n-    case CC_ZESWPmode:\n-    case CC_SESWPmode:\n       switch (comp_code)\n \t{\n \tcase NE: return AARCH64_NE;\n@@ -6292,10 +6282,6 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n           /* TODO: A write to the CC flags possibly costs extra, this\n \t     needs encoding in the cost tables.  */\n \n-          /* CC_ZESWPmode supports zero extend for free.  */\n-          if (mode == CC_ZESWPmode && GET_CODE (op0) == ZERO_EXTEND)\n-            op0 = XEXP (op0, 0);\n-\n \t  mode = GET_MODE (op0);\n           /* ANDS.  */\n           if (GET_CODE (op0) == AND)"}]}