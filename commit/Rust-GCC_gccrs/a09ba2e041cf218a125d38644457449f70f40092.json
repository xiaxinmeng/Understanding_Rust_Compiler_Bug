{"sha": "a09ba2e041cf218a125d38644457449f70f40092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5YmEyZTA0MWNmMjE4YTEyNWQzODY0NDQ1NzQ0OWY3MGY0MDA5Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-01T18:09:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-01T18:09:09Z"}, "message": "cp-tree.h (min_tree_cons): Remove.\n\n\t* cp-tree.h (min_tree_cons): Remove.\n\t(scratch_ovl_cons): Likewise.\n\t* decl.c (saveable_obstack): Don't declare.\n\t(duplicate_decls): Tweak error-message.\n\t(initialize_local_var): Explicitly mark the definition as static.\n\t(finish_function): Call permanent_allocation, just so\n\tthat the middle-end sees the obstacks it expects.\n\t(mark_cp_function_context): Likewise.\n\t* init.c (build_new): Don't use min_tree_cons.\n\t* lex.c (permanent_obstack): Don't declare.\n\t(current_obstack, saveable_obstack): Likewise.\n\t* spew.c (current_obstack, saveable_obstack): Likewise.\n\t* tree.c (current_obstack, saveable_obstack): Likewise.\n\t(scratch_ovl_cons): Remove.\n\t(build_min_nt): Don't mess with obstacks.\n\t(build_min): Likewise.\n\t(min_tree_cons): Remove\n\t* typeck.c (build_component_ref): Don't use scratch_ovl_cons.\n\t(build_x_function_call): Likewise.\n\t(build_c_cast): Don't use min_tree_cons.\n\nFrom-SVN: r30743", "tree": {"sha": "9ad6937cec136412dd30ea226fb8e17b8ce4a1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad6937cec136412dd30ea226fb8e17b8ce4a1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09ba2e041cf218a125d38644457449f70f40092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09ba2e041cf218a125d38644457449f70f40092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09ba2e041cf218a125d38644457449f70f40092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09ba2e041cf218a125d38644457449f70f40092/comments", "author": null, "committer": null, "parents": [{"sha": "eb69a68672fbbfcc809dd6c7ee484fb2d34920d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69a68672fbbfcc809dd6c7ee484fb2d34920d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb69a68672fbbfcc809dd6c7ee484fb2d34920d0"}], "stats": {"total": 110, "additions": 48, "deletions": 62}, "files": [{"sha": "db5dad4f19d6e16308737ecc5c1eb1dc68228e03", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -1,3 +1,26 @@\n+1999-12-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (min_tree_cons): Remove.\n+\t(scratch_ovl_cons): Likewise.\n+\t* decl.c (saveable_obstack): Don't declare.\n+\t(duplicate_decls): Tweak error-message.\n+\t(initialize_local_var): Explicitly mark the definition as static.\n+\t(finish_function): Call permanent_allocation, just so\n+\tthat the middle-end sees the obstacks it expects.\n+\t(mark_cp_function_context): Likewise.\n+\t* init.c (build_new): Don't use min_tree_cons.\n+\t* lex.c (permanent_obstack): Don't declare.\n+\t(current_obstack, saveable_obstack): Likewise.\n+\t* spew.c (current_obstack, saveable_obstack): Likewise.\n+\t* tree.c (current_obstack, saveable_obstack): Likewise.\n+\t(scratch_ovl_cons): Remove.\n+\t(build_min_nt): Don't mess with obstacks.\n+\t(build_min): Likewise.\n+\t(min_tree_cons): Remove\n+\t* typeck.c (build_component_ref): Don't use scratch_ovl_cons.\n+\t(build_x_function_call): Likewise.\n+\t(build_c_cast): Don't use min_tree_cons.\n+\t\n 1999-11-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (tsubst_decl): Robustify."}, {"sha": "f2dc09ebc7e5cd84845bc91f799aab9b9958a3a9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -3990,7 +3990,6 @@ extern int member_p\t\t\t\tPROTO((tree));\n extern cp_lvalue_kind real_lvalue_p\t\tPROTO((tree));\n extern tree build_min\t\t\t\tPVPROTO((enum tree_code, tree, ...));\n extern tree build_min_nt\t\t\tPVPROTO((enum tree_code, ...));\n-extern tree min_tree_cons\t\t\tPROTO((tree, tree, tree));\n extern int lvalue_p\t\t\t\tPROTO((tree));\n extern int lvalue_or_else\t\t\tPROTO((tree, const char *));\n extern tree build_cplus_new\t\t\tPROTO((tree, tree));\n@@ -4014,7 +4013,6 @@ extern int is_overloaded_fn\t\t\tPROTO((tree));\n extern tree get_first_fn\t\t\tPROTO((tree));\n extern int bound_pmf_p\t\t\t\tPROTO((tree));\n extern tree ovl_cons                            PROTO((tree, tree));\n-extern tree scratch_ovl_cons                    PROTO((tree, tree));\n extern int ovl_member                           PROTO((tree, tree));\n extern tree build_overload                      PROTO((tree, tree));\n extern tree fnaddr_from_vtable_entry\t\tPROTO((tree));"}, {"sha": "b05775b2bdd409774e3c54daf4b661e58cc226b5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -49,7 +49,6 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_free free\n \n extern struct obstack permanent_obstack;\n-extern struct obstack* saveable_obstack;\n \n extern int current_class_depth;\n \n@@ -3318,7 +3317,7 @@ duplicate_decls (newdecl, olddecl)\n \t    {\n \t      cp_error (\"declaration of `%F' throws different exceptions\",\n \t\t\tnewdecl);\n-\t      cp_error_at (\"to previous declaration `%F'\", olddecl);\n+\t      cp_error_at (\"than previous declaration `%F'\", olddecl);\n \t    }\n \t}\n       TREE_TYPE (newdecl) = TREE_TYPE (olddecl) = newtype;\n@@ -7488,7 +7487,7 @@ initialize_local_var (decl, init, flags)\n \n /* Generate code to destroy DECL (a local variable).  */\n \n-void \n+static void \n destroy_local_var (decl)\n      tree decl;\n {\n@@ -13792,6 +13791,9 @@ finish_function (lineno, flags)\n          function.  For a nested function, this value is used in\n          pop_cp_function_context and then reset via pop_function_context.  */\n       current_function_decl = NULL_TREE;\n+      /* We don't really care about obstacks, but the middle-end\n+\t sometimes cares on what obstck things are located.  */\n+      permanent_allocation (1);\n     }\n \n   return fndecl;\n@@ -14201,7 +14203,7 @@ mark_lang_function (p)\n \n /* Mark the language-specific data in F for GC.  */\n \n-void\n+static void\n mark_cp_function_context (f)\n      struct function *f;\n {"}, {"sha": "639087ac39b219ed02a568287a535dc85202d25c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -1999,9 +1999,9 @@ build_new (placement, decl, init, use_global_new)\n   if (processing_template_decl)\n     {\n       if (has_array)\n-\tt = min_tree_cons (min_tree_cons (NULL_TREE, type, NULL_TREE),\n-\t\t\t   build_min_nt (ARRAY_REF, NULL_TREE, nelts),\n-\t\t\t   NULL_TREE);\n+\tt = tree_cons (tree_cons (NULL_TREE, type, NULL_TREE),\n+\t\t       build_min_nt (ARRAY_REF, NULL_TREE, nelts),\n+\t\t       NULL_TREE);\n       else\n \tt = type;\n \t"}, {"sha": "30292a6f6bb28c3ae1c096b603c5b9ed07e4d518", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -51,9 +51,6 @@ Boston, MA 02111-1307, USA.  */\n #define DIR_SEPARATOR '/'\n #endif\n \n-extern struct obstack permanent_obstack;\n-extern struct obstack *current_obstack, *saveable_obstack;\n-\n extern void yyprint PROTO((FILE *, int, YYSTYPE));\n \n static tree get_time_identifier PROTO((const char *));"}, {"sha": "76f2253814d170f07bafdeadc9d754eda19df1dc", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -205,7 +205,6 @@ extern int looking_for_typename;\n int looking_for_template;\n extern int do_snarf_defarg;\n \n-extern struct obstack *current_obstack, *saveable_obstack;\n tree got_scope;\n tree got_object;\n "}, {"sha": "9796c8f4a169124efdd154e03b7129df576c52b6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -437,10 +437,7 @@ break_out_calls (exp)\n \n }\n \f\n-extern struct obstack *current_obstack;\n extern struct obstack permanent_obstack;\n-extern struct obstack *saveable_obstack;\n-extern struct obstack *expression_obstack;\n \n /* Here is how primitive or already-canonicalized types' hash\n    codes are made.  MUST BE CONSISTENT WITH tree.c !!! */\n@@ -1406,21 +1403,6 @@ ovl_cons (decl, chain)\n   return result;\n }\n \n-/* Same as ovl_cons, but on the scratch_obstack. */\n-\n-tree\n-scratch_ovl_cons (value, chain)\n-     tree value, chain;\n-{\n-  register tree node;\n-  register struct obstack *ambient_obstack = current_obstack;\n-  extern struct obstack *expression_obstack;\n-  current_obstack = expression_obstack;\n-  node = ovl_cons (value, chain);\n-  current_obstack = ambient_obstack;\n-  return node;\n-}\n-\n /* Build a new overloaded function. If this is the first one,\n    just return it; otherwise, ovl_cons the _DECLs */\n \n@@ -2023,16 +2005,15 @@ break_out_target_exprs (t)\n /* Obstack used for allocating nodes in template function and variable\n    definitions.  */\n \n-/* Similar to `build_nt', except we build\n-   on the permanent_obstack, regardless.  */\n+/* Similar to `build_nt', except that we set TREE_COMPLEXITY to be the\n+   current line number.  */\n \n tree\n build_min_nt VPROTO((enum tree_code code, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   enum tree_code code;\n #endif\n-  register struct obstack *ambient_obstack = expression_obstack;\n   va_list p;\n   register tree t;\n   register int length;\n@@ -2044,8 +2025,6 @@ build_min_nt VPROTO((enum tree_code code, ...))\n   code = va_arg (p, enum tree_code);\n #endif\n \n-  expression_obstack = &permanent_obstack;\n-\n   t = make_node (code);\n   length = tree_code_length[(int) code];\n   TREE_COMPLEXITY (t) = lineno;\n@@ -2057,12 +2036,11 @@ build_min_nt VPROTO((enum tree_code code, ...))\n     }\n \n   va_end (p);\n-  expression_obstack = ambient_obstack;\n   return t;\n }\n \n-/* Similar to `build', except we build\n-   on the permanent_obstack, regardless.  */\n+/* Similar to `build', except we set TREE_COMPLEXITY to the current\n+   line-number.  */\n \n tree\n build_min VPROTO((enum tree_code code, tree tt, ...))\n@@ -2071,7 +2049,6 @@ build_min VPROTO((enum tree_code code, tree tt, ...))\n   enum tree_code code;\n   tree tt;\n #endif\n-  register struct obstack *ambient_obstack = expression_obstack;\n   va_list p;\n   register tree t;\n   register int length;\n@@ -2084,8 +2061,6 @@ build_min VPROTO((enum tree_code code, tree tt, ...))\n   tt = va_arg (p, tree);\n #endif\n \n-  expression_obstack = &permanent_obstack;\n-\n   t = make_node (code);\n   length = tree_code_length[(int) code];\n   TREE_TYPE (t) = tt;\n@@ -2098,26 +2073,9 @@ build_min VPROTO((enum tree_code code, tree tt, ...))\n     }\n \n   va_end (p);\n-  expression_obstack = ambient_obstack;\n   return t;\n }\n \n-/* Same as `tree_cons' but make a permanent object.  */\n-\n-tree\n-min_tree_cons (purpose, value, chain)\n-     tree purpose, value, chain;\n-{\n-  register tree node;\n-  register struct obstack *ambient_obstack = current_obstack;\n-  current_obstack = &permanent_obstack;\n-\n-  node = tree_cons (purpose, value, chain);\n-\n-  current_obstack = ambient_obstack;\n-  return node;\n-}\n-\n tree\n get_type_decl (t)\n      tree t;"}, {"sha": "83f7698e159f46adf474c0c5a105cb6c51c22ee8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -2159,7 +2159,7 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t\t unknown_type_node to be really overloaded, so\n \t\t\t let's oblige.  */\n \t\t      TREE_VALUE (fndecls)\n-\t\t\t= scratch_ovl_cons (TREE_VALUE (fndecls), NULL_TREE);\n+\t\t\t= ovl_cons (TREE_VALUE (fndecls), NULL_TREE);\n \t\t    }\n \t\t}\n \n@@ -2600,7 +2600,7 @@ build_x_function_call (function, params, decl)\n \n   /* A friend template.  Make it look like a toplevel declaration.  */\n   if (! is_method && TREE_CODE (function) == TEMPLATE_DECL)\n-    function = scratch_ovl_cons (function, NULL_TREE);\n+    function = ovl_cons (function, NULL_TREE);\n \n   /* Handle methods, friends, and overloaded functions, respectively.  */\n   if (is_method)\n@@ -5447,7 +5447,7 @@ build_c_cast (type, expr)\n   if (processing_template_decl)\n     {\n       tree t = build_min (CAST_EXPR, type,\n-\t\t\t  min_tree_cons (NULL_TREE, value, NULL_TREE));\n+\t\t\t  tree_cons (NULL_TREE, value, NULL_TREE));\n       return t;\n     }\n "}, {"sha": "b66f7c0b454f1167ecc11a24b4eb27d20ec36f3f", "filename": "gcc/testsuite/g++.old-deja/g++.other/syshdr1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyshdr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09ba2e041cf218a125d38644457449f70f40092/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyshdr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyshdr1.C?ref=a09ba2e041cf218a125d38644457449f70f40092", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+// Special g++ Options:\n+\n+# 1 \"foo\" 1 3\n+void f () {}\n+extern \"C\" void foo(int);\n+extern \"C\" void foo(int) throw();\n+"}]}