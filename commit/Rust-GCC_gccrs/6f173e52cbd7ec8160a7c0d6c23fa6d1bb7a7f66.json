{"sha": "6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxNzNlNTJjYmQ3ZWM4MTYwYTdjMGQ2YzIzZmE2ZDFiYjdhN2Y2Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-08-24T21:08:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-08-24T21:08:05Z"}, "message": "re PR bootstrap/45376 (no such instruction: `pcmpestri $0,(%rdi),%xmm0')\n\n        PR bootstrap/45376\n        * configure.ac (HAVE_SSE4): New check.\n        * configure, config.in: Rebuild.\n        * lex.c (search_line_sse42): Omit if !HAVE_SSE4.\n\nFrom-SVN: r163528", "tree": {"sha": "bfa80eeb59c1e4fde073f12dc44c3301e2faed5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa80eeb59c1e4fde073f12dc44c3301e2faed5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/comments", "author": null, "committer": null, "parents": [{"sha": "8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b85388f5c0ae491e80f52c9aee4816499a7f6"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "95918e2f52b67e74e103221898f41139d9da2dc9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "patch": "@@ -1,3 +1,10 @@\n+2010-08-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR bootstrap/45376\n+\t* configure.ac (HAVE_SSE4): New check.\n+\t* configure, config.in: Rebuild.\n+\t* lex.c (search_line_sse42): Omit if !HAVE_SSE4.\n+\n 2010-08-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lex.c [__sun__ && __svr4__]: Disable init_vectorized_lexer"}, {"sha": "29d4501821a9e66b9cfa6eabee99d2e5fd2247c9", "filename": "libcpp/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "patch": "@@ -185,6 +185,9 @@\n /* Define to 1 if you have the `putc_unlocked' function. */\n #undef HAVE_PUTC_UNLOCKED\n \n+/* Define to 1 if you can assemble SSE4 insns. */\n+#undef HAVE_SSE4\n+\n /* Define to 1 if you have the <stddef.h> header file. */\n #undef HAVE_STDDEF_H\n "}, {"sha": "012ee41c819a2009998cf7dc3ae3a62cba419d9b", "filename": "libcpp/configure", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "patch": "@@ -7209,6 +7209,27 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+case $target in\n+  i?86-* | x86_64-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"pcmpestri %0, %%xmm0, %%xmm1\" : : \"i\"(0))\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_SSE4 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+esac\n+\n # Output.\n \n ac_config_headers=\"$ac_config_headers config.h:config.in\""}, {"sha": "8082117f2d63f5024a629a069e4d969f667d5ef8", "filename": "libcpp/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "patch": "@@ -184,6 +184,13 @@ AC_DEFINE_UNQUOTED(HOST_WIDE_INT, $host_wide_int,\n [Define to the widest efficient host integer type at least\n    as wide as the target's size_t type.])\n \n+case $target in\n+  i?86-* | x86_64-*)\n+    AC_TRY_COMPILE([], [asm (\"pcmpestri %0, %%xmm0, %%xmm1\" : : \"i\"(0))],\n+      [AC_DEFINE([HAVE_SSE4], [1],\n+\t\t [Define to 1 if you can assemble SSE4 insns.])])\n+esac\n+\n # Output.\n \n AC_CONFIG_HEADERS(config.h:config.in, [echo timestamp > stamp-h1])"}, {"sha": "2e962a70bb90d8bef7dd47f419ae8e202f3ec063", "filename": "libcpp/lex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=6f173e52cbd7ec8160a7c0d6c23fa6d1bb7a7f66", "patch": "@@ -410,6 +410,7 @@ search_line_sse2 (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n   return (const uchar *)p + found;\n }\n \n+#ifdef HAVE_SSE4\n /* A version of the fast scanner using SSE 4.2 vectorized string insns.  */\n \n static const uchar *\n@@ -464,6 +465,11 @@ search_line_sse42 (const uchar *s, const uchar *end)\n   return s + index;\n }\n \n+#else\n+/* Work around out-dated assemblers without sse4 support.  */\n+#define search_line_sse42 search_line_sse2\n+#endif\n+\n /* Check the CPU capabilities.  */\n \n #include \"../gcc/config/i386/cpuid.h\""}]}