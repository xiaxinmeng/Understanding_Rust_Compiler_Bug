{"sha": "d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzYzUzY2NlMmQxMzcwNjJlNGY5M2E5ZmY0MTBlNjg0YmM3YmMxYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-03-14T20:29:23Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2011-03-14T20:29:23Z"}, "message": "printers.py (_use_gdb_pp): New global.\n\n\t* python/libstdcxx/v6/printers.py (_use_gdb_pp): New global.\n\tTry to import `gdb.printing' module.\n\t(UniquePointerPrinter.__init__): Add 'typename' argument.\n\t(StdSlistPrinter.__init__): Likewise.\n\t(StdSlistIteratorPrinter.__init__): Likewise.\n\t(StdVectorIteratorPrinter.__init__): Likewise.\n\t(StdRbtreeIteratorPrinter.__init__): Likewise.\n\t(StdDebugIteratorPrinter.__init__): Likewise.\n\t(StdDequeIteratorPrinter.__init__): Likewise.\n\t(StdStringPrinter.__init__): Likewise.\n\t(RxPrinter, Printer): New class.\n\t(libstdcxx_printer): New global.\n\t(register_libstdcxx_printers): Rewrite.\n\t(build_libstdcxx_dictionary): Rewrite.\n\t(pretty_printers_dict): Remove.\n\nFrom-SVN: r170958", "tree": {"sha": "d19091c40f62147af35f371e2e0fa0e632a71b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d19091c40f62147af35f371e2e0fa0e632a71b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c53cce2d137062e4f93a9ff410e684bc7bc1b/comments", "author": null, "committer": null, "parents": [{"sha": "2e64f8b8f6e40ba69829f030eb9bf7220ae39bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e64f8b8f6e40ba69829f030eb9bf7220ae39bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e64f8b8f6e40ba69829f030eb9bf7220ae39bb3"}], "stats": {"total": 285, "additions": 187, "deletions": 98}, "files": [{"sha": "7e8d6da9c3ab45adf7330e7cc52524d031225723", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63c53cce2d137062e4f93a9ff410e684bc7bc1b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63c53cce2d137062e4f93a9ff410e684bc7bc1b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "patch": "@@ -1,3 +1,21 @@\n+2011-03-14  Tom Tromey  <tromey@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (_use_gdb_pp): New global.\n+\tTry to import `gdb.printing' module.\n+\t(UniquePointerPrinter.__init__): Add 'typename' argument.\n+\t(StdSlistPrinter.__init__): Likewise.\n+\t(StdSlistIteratorPrinter.__init__): Likewise.\n+\t(StdVectorIteratorPrinter.__init__): Likewise.\n+\t(StdRbtreeIteratorPrinter.__init__): Likewise.\n+\t(StdDebugIteratorPrinter.__init__): Likewise.\n+\t(StdDequeIteratorPrinter.__init__): Likewise.\n+\t(StdStringPrinter.__init__): Likewise.\n+\t(RxPrinter, Printer): New class.\n+\t(libstdcxx_printer): New global.\n+\t(register_libstdcxx_printers): Rewrite.\n+\t(build_libstdcxx_dictionary): Rewrite.\n+\t(pretty_printers_dict): Remove.\n+\n 2011-03-14  Andrey Zholos  <aaz@althenia.net>\n \n \tPR libstdc++/48114"}, {"sha": "241ae042fe643533079ee0c9e6ef07c4409db096", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 169, "deletions": 98, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63c53cce2d137062e4f93a9ff410e684bc7bc1b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63c53cce2d137062e4f93a9ff410e684bc7bc1b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "patch": "@@ -1,6 +1,6 @@\n # Pretty-printers for libstc++.\n \n-# Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -19,6 +19,13 @@\n import itertools\n import re\n \n+# Try to use the new-style pretty-printing if available.\n+_use_gdb_pp = True\n+try:\n+    import gdb.printing\n+except ImportError:\n+    _use_gdb_pp = False\n+\n class StdPointerPrinter:\n     \"Print a smart pointer of some kind\"\n \n@@ -36,7 +43,7 @@ def to_string (self):\n class UniquePointerPrinter:\n     \"Print a unique_ptr\"\n \n-    def __init__ (self, val):\n+    def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n@@ -125,7 +132,7 @@ def next(self):\n             self.count = self.count + 1\n             return ('[%d]' % count, elt['_M_data'])\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n \n     def children(self):\n@@ -141,7 +148,7 @@ def to_string(self):\n class StdSlistIteratorPrinter:\n     \"Print __gnu_cxx::slist::iterator\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n@@ -228,7 +235,7 @@ def display_hint(self):\n class StdVectorIteratorPrinter:\n     \"Print std::vector::iterator\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n@@ -351,7 +358,7 @@ def next(self):\n class StdRbtreeIteratorPrinter:\n     \"Print std::map::iterator\"\n \n-    def __init__ (self, val):\n+    def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n@@ -363,7 +370,7 @@ def to_string (self):\n class StdDebugIteratorPrinter:\n     \"Print a debug enabled version of an iterator\"\n \n-    def __init__ (self, val):\n+    def __init__ (self, typename, val):\n         self.val = val\n \n     # Just strip away the encapsulating __gnu_debug::_Safe_iterator\n@@ -557,7 +564,7 @@ def display_hint (self):\n class StdDequeIteratorPrinter:\n     \"Print std::deque::iterator\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n@@ -566,7 +573,7 @@ def to_string(self):\n class StdStringPrinter:\n     \"Print a std::basic_string of some kind\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n@@ -678,125 +685,189 @@ def children (self):\n     def display_hint (self):\n         return 'map'\n \n-def register_libstdcxx_printers (obj):\n-    \"Register libstdc++ pretty-printers with objfile Obj.\"\n+# A \"regular expression\" printer which conforms to the\n+# \"SubPrettyPrinter\" protocol from gdb.printing.\n+class RxPrinter(object):\n+    def __init__(self, name, function):\n+        super(RxPrinter, self).__init__()\n+        self.name = name\n+        self.function = function\n+        self.enabled = True\n+\n+    def invoke(self, value):\n+        if not self.enabled:\n+            return None\n+        return self.function(self.name, value)\n+\n+# A pretty-printer that conforms to the \"PrettyPrinter\" protocol from\n+# gdb.printing.  It can also be used directly as an old-style printer.\n+class Printer(object):\n+    def __init__(self, name):\n+        super(Printer, self).__init__()\n+        self.name = name\n+        self.subprinters = []\n+        self.lookup = {}\n+        self.enabled = True\n+        self.compiled_rx = re.compile('^([a-zA-Z0-9_:]+)<.*>$')\n+\n+    def add(self, name, function):\n+        # A small sanity check.\n+        # FIXME\n+        if not self.compiled_rx.match(name + '<>'):\n+            raise ValueError, 'libstdc++ programming error: \"%s\" does not match' % name\n+        printer = RxPrinter(name, function)\n+        self.subprinters.append(printer)\n+        self.lookup[name] = printer\n \n-    if obj == None:\n-        obj = gdb\n+    @staticmethod\n+    def get_basic_type(type):\n+        # If it points to a reference, get the reference.\n+        if type.code == gdb.TYPE_CODE_REF:\n+            type = type.target ()\n \n-    obj.pretty_printers.append (lookup_function)\n+        # Get the unqualified type, stripped of typedefs.\n+        type = type.unqualified ().strip_typedefs ()\n \n-def lookup_function (val):\n-    \"Look-up and return a pretty-printer that can print val.\"\n+        return type.tag\n \n-    # Get the type.\n-    type = val.type\n+    def __call__(self, val):\n+        typename = self.get_basic_type(val.type)\n+        if not typename:\n+            return None\n \n-    # If it points to a reference, get the reference.\n-    if type.code == gdb.TYPE_CODE_REF:\n-        type = type.target ()\n+        # All the types we match are template types, so we can use a\n+        # dictionary.\n+        match = self.compiled_rx.match(typename)\n+        if not match:\n+            return None\n \n-    # Get the unqualified type, stripped of typedefs.\n-    type = type.unqualified ().strip_typedefs ()\n+        basename = match.group(1)\n+        if basename in self.lookup:\n+            return self.lookup[basename].invoke(val)\n \n-    # Get the type name.    \n-    typename = type.tag\n-    if typename == None:\n+        # Cannot find a pretty printer.  Return None.\n         return None\n \n-    # Iterate over local dictionary of types to determine\n-    # if a printer is registered for that type.  Return an\n-    # instantiation of the printer if found.\n-    for function in pretty_printers_dict:\n-        if function.search (typename):\n-            return pretty_printers_dict[function] (val)\n-        \n-    # Cannot find a pretty printer.  Return None.\n-    return None\n+libstdcxx_printer = None\n+\n+def register_libstdcxx_printers (obj):\n+    \"Register libstdc++ pretty-printers with objfile Obj.\"\n+\n+    global _use_gdb_pp\n+    global libstdcxx_printer\n+\n+    if _use_gdb_pp:\n+        gdb.printing.register_pretty_printer(obj, libstdcxx_printer)\n+    else:\n+        if obj is None:\n+            obj = gdb\n+        obj.pretty_printers.append(libstdcxx_printer)\n \n def build_libstdcxx_dictionary ():\n+    global libstdcxx_printer\n+\n+    libstdcxx_printer = Printer(\"libstdc++-v6\")\n+\n     # libstdc++ objects requiring pretty-printing.\n     # In order from:\n     # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html\n-    pretty_printers_dict[re.compile('^std::basic_string<.*>$')] = lambda val: StdStringPrinter(val)\n-    pretty_printers_dict[re.compile('^std::bitset<.*>$')] = lambda val: StdBitsetPrinter(\"std::bitset\", val)\n-    pretty_printers_dict[re.compile('^std::deque<.*>$')] = lambda val: StdDequePrinter(\"std::deque\", val)\n-    pretty_printers_dict[re.compile('^std::list<.*>$')] = lambda val: StdListPrinter(\"std::list\", val)\n-    pretty_printers_dict[re.compile('^std::map<.*>$')] = lambda val: StdMapPrinter(\"std::map\", val)\n-    pretty_printers_dict[re.compile('^std::multimap<.*>$')] = lambda val: StdMapPrinter(\"std::multimap\", val)\n-    pretty_printers_dict[re.compile('^std::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::multiset\", val)\n-    pretty_printers_dict[re.compile('^std::priority_queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::priority_queue\", val)\n-    pretty_printers_dict[re.compile('^std::queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::queue\", val)\n-    pretty_printers_dict[re.compile('^std::tuple<.*>$')] = lambda val: StdTuplePrinter(\"std::tuple\", val)\n-    pretty_printers_dict[re.compile('^std::set<.*>$')] = lambda val: StdSetPrinter(\"std::set\", val)\n-    pretty_printers_dict[re.compile('^std::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::stack\", val)\n-    pretty_printers_dict[re.compile('^std::unique_ptr<.*>$')] = UniquePointerPrinter\n-    pretty_printers_dict[re.compile('^std::vector<.*>$')] = lambda val: StdVectorPrinter(\"std::vector\", val)\n+    libstdcxx_printer.add('std::basic_string', StdStringPrinter)\n+    libstdcxx_printer.add('std::bitset', StdBitsetPrinter)\n+    libstdcxx_printer.add('std::deque', StdDequePrinter)\n+    libstdcxx_printer.add('std::list', StdListPrinter)\n+    libstdcxx_printer.add('std::map', StdMapPrinter)\n+    libstdcxx_printer.add('std::multimap', StdMapPrinter)\n+    libstdcxx_printer.add('std::multiset', StdSetPrinter)\n+    libstdcxx_printer.add('std::priority_queue', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::queue', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::tuple', StdTuplePrinter)\n+    libstdcxx_printer.add('std::set', StdSetPrinter)\n+    libstdcxx_printer.add('std::stack', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::unique_ptr', UniquePointerPrinter)\n+    libstdcxx_printer.add('std::vector', StdVectorPrinter)\n     # vector<bool>\n \n     # Printer registrations for classes compiled with -D_GLIBCXX_DEBUG.\n-    pretty_printers_dict[re.compile('^std::__debug::bitset<.*>$')] = lambda val: StdBitsetPrinter(\"std::__debug::bitset\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::deque<.*>$')] = lambda val: StdDequePrinter(\"std::__debug::deque\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::list<.*>$')] = lambda val: StdListPrinter(\"std::__debug::list\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::map<.*>$')] = lambda val: StdMapPrinter(\"std::__debug::map\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::multimap<.*>$')] = lambda val: StdMapPrinter(\"std::__debug::multimap\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::__debug::multiset\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::priority_queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::priority_queue\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::queue\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::set<.*>$')] = lambda val: StdSetPrinter(\"std::__debug::set\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::stack\", val)\n-    pretty_printers_dict[re.compile('^std::__debug::unique_ptr<.*>$')] = UniquePointerPrinter\n-    pretty_printers_dict[re.compile('^std::__debug::vector<.*>$')] = lambda val: StdVectorPrinter(\"std::__debug::vector\", val)\n+    libstdcxx_printer.add('std::__debug::bitset', StdBitsetPrinter)\n+    libstdcxx_printer.add('std::__debug::deque', StdDequePrinter)\n+    libstdcxx_printer.add('std::__debug::list', StdListPrinter)\n+    libstdcxx_printer.add('std::__debug::map', StdMapPrinter)\n+    libstdcxx_printer.add('std::__debug::multimap', StdMapPrinter)\n+    libstdcxx_printer.add('std::__debug::multiset', StdSetPrinter)\n+    libstdcxx_printer.add('std::__debug::priority_queue',\n+                          StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::__debug::queue', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::__debug::set', StdSetPrinter)\n+    libstdcxx_printer.add('std::__debug::stack', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add('std::__debug::unique_ptr', UniquePointerPrinter)\n+    libstdcxx_printer.add('std::__debug::vector', StdVectorPrinter)\n \n     # These are the TR1 and C++0x printers.\n     # For array - the default GDB pretty-printer seems reasonable.\n-    pretty_printers_dict[re.compile('^std::shared_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::shared_ptr', val)\n-    pretty_printers_dict[re.compile('^std::weak_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::weak_ptr', val)\n-    pretty_printers_dict[re.compile('^std::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::unordered_map', val)\n-    pretty_printers_dict[re.compile('^std::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::unordered_set', val)\n-    pretty_printers_dict[re.compile('^std::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::unordered_multimap', val)\n-    pretty_printers_dict[re.compile('^std::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::unordered_multiset', val)\n-\n-    pretty_printers_dict[re.compile('^std::tr1::shared_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::tr1::shared_ptr', val)\n-    pretty_printers_dict[re.compile('^std::tr1::weak_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::tr1::weak_ptr', val)\n-    pretty_printers_dict[re.compile('^std::tr1::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::tr1::unordered_map', val)\n-    pretty_printers_dict[re.compile('^std::tr1::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::tr1::unordered_set', val)\n-    pretty_printers_dict[re.compile('^std::tr1::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::tr1::unordered_multimap', val)\n-    pretty_printers_dict[re.compile('^std::tr1::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::tr1::unordered_multiset', val)\n+    libstdcxx_printer.add('std::shared_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add('std::weak_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add('std::unordered_map', Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::unordered_set', Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add('std::unordered_multimap', Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::unordered_multiset', Tr1UnorderedSetPrinter)\n+\n+    libstdcxx_printer.add('std::tr1::shared_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add('std::tr1::weak_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add('std::tr1::unordered_map', Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::tr1::unordered_set', Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add('std::tr1::unordered_multimap',\n+                          Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::tr1::unordered_multiset',\n+                          Tr1UnorderedSetPrinter)\n \n     # These are the C++0x printer registrations for -D_GLIBCXX_DEBUG cases.\n     # The tr1 namespace printers do not seem to have any debug\n     # equivalents, so do no register them.\n-    pretty_printers_dict[re.compile('^std::__debug::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::__debug::unordered_map', val)\n-    pretty_printers_dict[re.compile('^std::__debug::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::__debug::unordered_set', val)\n-    pretty_printers_dict[re.compile('^std::__debug::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::__debug::unordered_multimap',  val)\n-    pretty_printers_dict[re.compile('^std::__debug::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::__debug:unordered_multiset', val)\n+    libstdcxx_printer.add('std::__debug::unordered_map',\n+                          Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::__debug::unordered_set',\n+                          Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add('std::__debug::unordered_multimap',\n+                          Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add('std::__debug::unordered_multiset',\n+                          Tr1UnorderedSetPrinter)\n \n \n     # Extensions.\n-    pretty_printers_dict[re.compile('^__gnu_cxx::slist<.*>$')] = StdSlistPrinter\n+    libstdcxx_printer.add('__gnu_cxx::slist', StdSlistPrinter)\n \n     if True:\n         # These shouldn't be necessary, if GDB \"print *i\" worked.\n         # But it often doesn't, so here they are.\n-        pretty_printers_dict[re.compile('^std::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter(\"std::_List_iterator\",val)\n-        pretty_printers_dict[re.compile('^std::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter(\"std::_List_const_iterator\",val)\n-        pretty_printers_dict[re.compile('^std::_Rb_tree_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::_Rb_tree_const_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::_Deque_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::_Deque_const_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^__gnu_cxx::__normal_iterator<.*>$')] = lambda val: StdVectorIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^__gnu_cxx::_Slist_iterator<.*>$')] = lambda val: StdSlistIteratorPrinter(val)\n-\n-        # Debug (compiled with -D_GLIBCXX_DEBUG) printer registrations.\n-        # The Rb_tree debug iterator when unwrapped from the encapsulating __gnu_debug::_Safe_iterator\n-        # does not have the __norm namespace. Just use the existing printer registration for that.\n-        pretty_printers_dict[re.compile('^__gnu_debug::_Safe_iterator<.*>$')] = lambda val: StdDebugIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::__norm::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter (\"std::__norm::_List_iterator\",val)\n-        pretty_printers_dict[re.compile('^std::__norm::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter (\"std::__norm::_List_const_iterator\",val)\n-        pretty_printers_dict[re.compile('^std::__norm::_Deque_const_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::__norm::_Deque_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n-\n-pretty_printers_dict = {}\n+        libstdcxx_printer.add('std::_List_iterator', StdListIteratorPrinter)\n+        libstdcxx_printer.add('std::_List_const_iterator',\n+                              StdListIteratorPrinter)\n+        libstdcxx_printer.add('std::_Rb_tree_iterator',\n+                              StdRbtreeIteratorPrinter)\n+        libstdcxx_printer.add('std::_Rb_tree_const_iterator',\n+                              StdRbtreeIteratorPrinter)\n+        libstdcxx_printer.add('std::_Deque_iterator', StdDequeIteratorPrinter)\n+        libstdcxx_printer.add('std::_Deque_const_iterator',\n+                              StdDequeIteratorPrinter)\n+        libstdcxx_printer.add('__gnu_cxx::__normal_iterator',\n+                              StdVectorIteratorPrinter)\n+        libstdcxx_printer.add('__gnu_cxx::_Slist_iterator',\n+                              StdSlistIteratorPrinter)\n+\n+        # Debug (compiled with -D_GLIBCXX_DEBUG) printer\n+        # registrations.  The Rb_tree debug iterator when unwrapped\n+        # from the encapsulating __gnu_debug::_Safe_iterator does not\n+        # have the __norm namespace. Just use the existing printer\n+        # registration for that.\n+        libstdcxx_printer.add('__gnu_debug::_Safe_iterator',\n+                              StdDebugIteratorPrinter)\n+        libstdcxx_printer.add('std::__norm::_List_iterator',\n+                              StdListIteratorPrinter)\n+        libstdcxx_printer.add('std::__norm::_List_const_iterator',\n+                              StdListIteratorPrinter)\n+        libstdcxx_printer.add('std::__norm::_Deque_const_iterator',\n+                              StdDequeIteratorPrinter)\n+        libstdcxx_printer.add('std::__norm::_Deque_iterator',\n+                              StdDequeIteratorPrinter)\n \n build_libstdcxx_dictionary ()"}]}