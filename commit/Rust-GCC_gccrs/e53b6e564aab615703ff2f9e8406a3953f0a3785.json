{"sha": "e53b6e564aab615703ff2f9e8406a3953f0a3785", "node_id": "C_kwDOANBUbNoAKGU1M2I2ZTU2NGFhYjYxNTcwM2ZmMmY5ZTg0MDZhMzk1M2YwYTM3ODU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-14T15:57:02Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-17T21:12:07Z"}, "message": "Change references of .c files to .cc files\n\nChangeLog:\n\n\t* MAINTAINERS: Rename .c names to .cc.\n\ncontrib/ChangeLog:\n\n\t* filter-clang-warnings.py: Rename .c names to .cc.\n\t* gcc_update: Likewise.\n\t* paranoia.cc: Likewise.\n\ncontrib/header-tools/ChangeLog:\n\n\t* README: Rename .c names to .cc.\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Rename .c names to .cc.\n\t* alias.h: Likewise.\n\t* asan.cc: Likewise.\n\t* auto-profile.h: Likewise.\n\t* basic-block.h (struct basic_block_d): Likewise.\n\t* btfout.cc: Likewise.\n\t* builtins.cc (expand_builtin_longjmp): Likewise.\n\t(validate_arg): Likewise.\n\t(access_ref::offset_bounded): Likewise.\n\t* caller-save.cc (reg_restore_code): Likewise.\n\t(setup_save_areas): Likewise.\n\t* calls.cc (initialize_argument_information): Likewise.\n\t(expand_call): Likewise.\n\t(emit_library_call_value_1): Likewise.\n\t* cfg-flags.def (RTL): Likewise.\n\t(SIBCALL): Likewise.\n\t(CAN_FALLTHRU): Likewise.\n\t* cfganal.cc (post_order_compute): Likewise.\n\t* cfgcleanup.cc (try_simplify_condjump): Likewise.\n\t(merge_blocks_move_predecessor_nojumps): Likewise.\n\t(merge_blocks_move_successor_nojumps): Likewise.\n\t(merge_blocks_move): Likewise.\n\t(old_insns_match_p): Likewise.\n\t(try_crossjump_bb): Likewise.\n\t* cfgexpand.cc (expand_gimple_stmt): Likewise.\n\t* cfghooks.cc (split_block_before_cond_jump): Likewise.\n\t(profile_record_check_consistency): Likewise.\n\t* cfghooks.h: Likewise.\n\t* cfgrtl.cc (pass_free_cfg::execute): Likewise.\n\t(rtl_can_merge_blocks): Likewise.\n\t(try_redirect_by_replacing_jump): Likewise.\n\t(make_pass_outof_cfg_layout_mode): Likewise.\n\t(cfg_layout_can_merge_blocks_p): Likewise.\n\t* cgraph.cc (release_function_body): Likewise.\n\t(cgraph_node::get_fun): Likewise.\n\t* cgraph.h (struct cgraph_node): Likewise.\n\t(asmname_hasher::equal): Likewise.\n\t(cgraph_inline_failed_type): Likewise.\n\t(thunk_adjust): Likewise.\n\t(dump_callgraph_transformation): Likewise.\n\t(record_references_in_initializer): Likewise.\n\t(ipa_discover_variable_flags): Likewise.\n\t* cgraphclones.cc (GTY): Likewise.\n\t* cgraphunit.cc (symbol_table::finalize_compilation_unit): Likewise.\n\t* collect-utils.h (GCC_COLLECT_UTILS_H): Likewise.\n\t* collect2-aix.h (GCC_COLLECT2_AIX_H): Likewise.\n\t* collect2.cc (maybe_run_lto_and_relink): Likewise.\n\t* combine-stack-adj.cc: Likewise.\n\t* combine.cc (setup_incoming_promotions): Likewise.\n\t(combine_simplify_rtx): Likewise.\n\t(count_rtxs): Likewise.\n\t* common.opt: Likewise.\n\t* common/config/aarch64/aarch64-common.cc: Likewise.\n\t* common/config/arm/arm-common.cc (arm_asm_auto_mfpu): Likewise.\n\t* common/config/avr/avr-common.cc: Likewise.\n\t* common/config/i386/i386-isas.h (struct _isa_names_table): Likewise.\n\t* conditions.h: Likewise.\n\t* config.gcc: Likewise.\n\t* config/aarch64/aarch64-builtins.cc (aarch64_resolve_overloaded_memtag): Likewise.\n\t* config/aarch64/aarch64-protos.h (aarch64_classify_address): Likewise.\n\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc (function_builder::add_function): Likewise.\n\t* config/aarch64/aarch64.cc (aarch64_regmode_natural_size): Likewise.\n\t(aarch64_sched_first_cycle_multipass_dfa_lookahead): Likewise.\n\t(aarch64_option_valid_attribute_p): Likewise.\n\t(aarch64_short_vector_p): Likewise.\n\t(aarch64_float_const_representable_p): Likewise.\n\t* config/aarch64/aarch64.h (DBX_REGISTER_NUMBER): Likewise.\n\t(ASM_OUTPUT_POOL_EPILOGUE): Likewise.\n\t(GTY): Likewise.\n\t* config/aarch64/cortex-a57-fma-steering.cc: Likewise.\n\t* config/aarch64/driver-aarch64.cc (contains_core_p): Likewise.\n\t* config/aarch64/t-aarch64: Likewise.\n\t* config/aarch64/x-aarch64: Likewise.\n\t* config/aarch64/x-darwin: Likewise.\n\t* config/alpha/alpha-protos.h: Likewise.\n\t* config/alpha/alpha.cc (alpha_scalar_mode_supported_p): Likewise.\n\t* config/alpha/alpha.h (LONG_DOUBLE_TYPE_SIZE): Likewise.\n\t(enum reg_class): Likewise.\n\t* config/alpha/alpha.md: Likewise.\n\t* config/alpha/driver-alpha.cc (AMASK_LOCKPFTCHOK): Likewise.\n\t* config/alpha/x-alpha: Likewise.\n\t* config/arc/arc-protos.h (arc_eh_uses): Likewise.\n\t* config/arc/arc.cc (ARC_OPT): Likewise.\n\t(arc_ccfsm_advance): Likewise.\n\t(arc_arg_partial_bytes): Likewise.\n\t(conditionalize_nonjump): Likewise.\n\t* config/arc/arc.md: Likewise.\n\t* config/arc/builtins.def: Likewise.\n\t* config/arc/t-arc: Likewise.\n\t* config/arm/arm-c.cc (arm_resolve_overloaded_builtin): Likewise.\n\t(arm_pragma_target_parse): Likewise.\n\t* config/arm/arm-protos.h (save_restore_target_globals): Likewise.\n\t(arm_cpu_cpp_builtins): Likewise.\n\t* config/arm/arm.cc (vfp3_const_double_index): Likewise.\n\t(shift_op): Likewise.\n\t(thumb2_final_prescan_insn): Likewise.\n\t(arm_final_prescan_insn): Likewise.\n\t(arm_asm_output_labelref): Likewise.\n\t(arm_small_register_classes_for_mode_p): Likewise.\n\t* config/arm/arm.h: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/arm/driver-arm.cc: Likewise.\n\t* config/arm/symbian.h: Likewise.\n\t* config/arm/t-arm: Likewise.\n\t* config/arm/thumb1.md: Likewise.\n\t* config/arm/x-arm: Likewise.\n\t* config/avr/avr-c.cc (avr_register_target_pragmas): Likewise.\n\t* config/avr/avr-fixed.md: Likewise.\n\t* config/avr/avr-log.cc (avr_log_vadump): Likewise.\n\t* config/avr/avr-mcus.def: Likewise.\n\t* config/avr/avr-modes.def (FRACTIONAL_INT_MODE): Likewise.\n\t* config/avr/avr-passes.def (INSERT_PASS_BEFORE): Likewise.\n\t* config/avr/avr-protos.h (make_avr_pass_casesi): Likewise.\n\t* config/avr/avr.cc (avr_option_override): Likewise.\n\t(avr_build_builtin_va_list): Likewise.\n\t(avr_mode_dependent_address_p): Likewise.\n\t(avr_function_arg_advance): Likewise.\n\t(avr_asm_output_aligned_decl_common): Likewise.\n\t* config/avr/avr.h (RETURN_ADDR_RTX): Likewise.\n\t(SUPPORTS_INIT_PRIORITY): Likewise.\n\t* config/avr/avr.md: Likewise.\n\t* config/avr/builtins.def: Likewise.\n\t* config/avr/gen-avr-mmcu-specs.cc (IN_GEN_AVR_MMCU_TEXI): Likewise.\n\t* config/avr/gen-avr-mmcu-texi.cc (IN_GEN_AVR_MMCU_TEXI): Likewise.\n\t(main): Likewise.\n\t* config/avr/t-avr: Likewise.\n\t* config/bfin/bfin.cc (frame_related_constant_load): Likewise.\n\t* config/bpf/bpf-protos.h (GCC_BPF_PROTOS_H): Likewise.\n\t* config/bpf/bpf.h (enum reg_class): Likewise.\n\t* config/bpf/t-bpf: Likewise.\n\t* config/c6x/c6x-protos.h (GCC_C6X_PROTOS_H): Likewise.\n\t* config/cr16/cr16-protos.h: Likewise.\n\t* config/cris/cris.cc (cris_address_cost): Likewise.\n\t(cris_side_effect_mode_ok): Likewise.\n\t(cris_init_machine_status): Likewise.\n\t(cris_emit_movem_store): Likewise.\n\t* config/cris/cris.h (INDEX_REG_CLASS): Likewise.\n\t(enum reg_class): Likewise.\n\t(struct cum_args): Likewise.\n\t* config/cris/cris.opt: Likewise.\n\t* config/cris/sync.md: Likewise.\n\t* config/csky/csky.cc (csky_expand_prologue): Likewise.\n\t* config/darwin-c.cc: Likewise.\n\t* config/darwin-f.cc: Likewise.\n\t* config/darwin-sections.def (zobj_const_section): Likewise.\n\t* config/darwin.cc (output_objc_section_asm_op): Likewise.\n\t(fprintf): Likewise.\n\t* config/darwin.h (GTY): Likewise.\n\t* config/elfos.h: Likewise.\n\t* config/epiphany/epiphany-sched.md: Likewise.\n\t* config/epiphany/epiphany.cc (epiphany_function_value): Likewise.\n\t* config/epiphany/epiphany.h (GTY): Likewise.\n\t(NO_FUNCTION_CSE): Likewise.\n\t* config/epiphany/mode-switch-use.cc: Likewise.\n\t* config/epiphany/predicates.md: Likewise.\n\t* config/epiphany/t-epiphany: Likewise.\n\t* config/fr30/fr30-protos.h: Likewise.\n\t* config/frv/frv-protos.h: Likewise.\n\t* config/frv/frv.cc (TLS_BIAS): Likewise.\n\t* config/frv/frv.h (ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n\t* config/ft32/ft32-protos.h: Likewise.\n\t* config/gcn/gcn-hsa.h (ASM_APP_OFF): Likewise.\n\t* config/gcn/gcn.cc (gcn_init_libfuncs): Likewise.\n\t* config/gcn/mkoffload.cc (copy_early_debug_info): Likewise.\n\t* config/gcn/t-gcn-hsa: Likewise.\n\t* config/gcn/t-omp-device: Likewise.\n\t* config/h8300/h8300-protos.h (GCC_H8300_PROTOS_H): Likewise.\n\t(same_cmp_following_p): Likewise.\n\t* config/h8300/h8300.cc (F): Likewise.\n\t* config/h8300/h8300.h (struct cum_arg): Likewise.\n\t(BRANCH_COST): Likewise.\n\t* config/i386/cygming.h (DEFAULT_PCC_STRUCT_RETURN): Likewise.\n\t* config/i386/djgpp.h (TARGET_ASM_LTO_END): Likewise.\n\t* config/i386/dragonfly.h (NO_PROFILE_COUNTERS): Likewise.\n\t* config/i386/driver-i386.cc (detect_caches_intel): Likewise.\n\t* config/i386/freebsd.h (NO_PROFILE_COUNTERS): Likewise.\n\t* config/i386/i386-c.cc (ix86_target_macros): Likewise.\n\t* config/i386/i386-expand.cc (get_mode_wider_vector): Likewise.\n\t* config/i386/i386-options.cc (ix86_set_func_type): Likewise.\n\t* config/i386/i386-protos.h (ix86_extract_perm_from_pool_constant): Likewise.\n\t(ix86_register_pragmas): Likewise.\n\t(ix86_d_has_stdcall_convention): Likewise.\n\t(i386_pe_seh_init_sections): Likewise.\n\t* config/i386/i386.cc (ix86_function_arg_regno_p): Likewise.\n\t(ix86_function_value_regno_p): Likewise.\n\t(ix86_compute_frame_layout): Likewise.\n\t(legitimize_pe_coff_symbol): Likewise.\n\t(output_pic_addr_const): Likewise.\n\t* config/i386/i386.h (defined): Likewise.\n\t(host_detect_local_cpu): Likewise.\n\t(CONSTANT_ADDRESS_P): Likewise.\n\t(DEFAULT_LARGE_SECTION_THRESHOLD): Likewise.\n\t(struct machine_frame_state): Likewise.\n\t* config/i386/i386.md: Likewise.\n\t* config/i386/lynx.h (ASM_OUTPUT_ALIGN): Likewise.\n\t* config/i386/mmx.md: Likewise.\n\t* config/i386/sse.md: Likewise.\n\t* config/i386/t-cygming: Likewise.\n\t* config/i386/t-djgpp: Likewise.\n\t* config/i386/t-gnu-property: Likewise.\n\t* config/i386/t-i386: Likewise.\n\t* config/i386/t-intelmic: Likewise.\n\t* config/i386/t-omp-device: Likewise.\n\t* config/i386/winnt-cxx.cc (i386_pe_type_dllimport_p): Likewise.\n\t(i386_pe_adjust_class_at_definition): Likewise.\n\t* config/i386/winnt.cc (gen_stdcall_or_fastcall_suffix): Likewise.\n\t(i386_pe_mangle_decl_assembler_name): Likewise.\n\t(i386_pe_encode_section_info): Likewise.\n\t* config/i386/x-cygwin: Likewise.\n\t* config/i386/x-darwin: Likewise.\n\t* config/i386/x-i386: Likewise.\n\t* config/i386/x-mingw32: Likewise.\n\t* config/i386/x86-tune-sched-core.cc: Likewise.\n\t* config/i386/x86-tune.def: Likewise.\n\t* config/i386/xm-djgpp.h (STANDARD_STARTFILE_PREFIX_1): Likewise.\n\t* config/ia64/freebsd.h: Likewise.\n\t* config/ia64/hpux.h (REGISTER_TARGET_PRAGMAS): Likewise.\n\t* config/ia64/ia64-protos.h (ia64_except_unwind_info): Likewise.\n\t* config/ia64/ia64.cc (ia64_function_value_regno_p): Likewise.\n\t(ia64_secondary_reload_class): Likewise.\n\t(bundling): Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ia64/ia64.md: Likewise.\n\t* config/ia64/predicates.md: Likewise.\n\t* config/ia64/sysv4.h: Likewise.\n\t* config/ia64/t-ia64: Likewise.\n\t* config/iq2000/iq2000.h (FUNCTION_MODE): Likewise.\n\t* config/iq2000/iq2000.md: Likewise.\n\t* config/linux.h (TARGET_HAS_BIONIC): Likewise.\n\t(if): Likewise.\n\t* config/m32c/m32c.cc (m32c_function_needs_enter): Likewise.\n\t* config/m32c/m32c.h (MAX_REGS_PER_ADDRESS): Likewise.\n\t* config/m32c/t-m32c: Likewise.\n\t* config/m32r/m32r-protos.h: Likewise.\n\t* config/m32r/m32r.cc (m32r_print_operand): Likewise.\n\t* config/m32r/m32r.h: Likewise.\n\t* config/m32r/m32r.md: Likewise.\n\t* config/m68k/m68k-isas.def: Likewise.\n\t* config/m68k/m68k-microarchs.def: Likewise.\n\t* config/m68k/m68k-protos.h (strict_low_part_peephole_ok): Likewise.\n\t(m68k_epilogue_uses): Likewise.\n\t* config/m68k/m68k.cc (m68k_call_tls_get_addr): Likewise.\n\t(m68k_sched_adjust_cost): Likewise.\n\t(m68k_sched_md_init): Likewise.\n\t* config/m68k/m68k.h (__transfer_from_trampoline): Likewise.\n\t(enum m68k_function_kind): Likewise.\n\t* config/m68k/m68k.md: Likewise.\n\t* config/m68k/m68kemb.h: Likewise.\n\t* config/m68k/uclinux.h (ENDFILE_SPEC): Likewise.\n\t* config/mcore/mcore-protos.h: Likewise.\n\t* config/mcore/mcore.cc (mcore_expand_insv): Likewise.\n\t(mcore_expand_prolog): Likewise.\n\t* config/mcore/mcore.h (TARGET_MCORE): Likewise.\n\t* config/mcore/mcore.md: Likewise.\n\t* config/microblaze/microblaze-protos.h: Likewise.\n\t* config/microblaze/microblaze.cc (microblaze_legitimate_pic_operand): Likewise.\n\t(microblaze_function_prologue): Likewise.\n\t(microblaze_function_epilogue): Likewise.\n\t(microblaze_select_section): Likewise.\n\t(microblaze_asm_output_mi_thunk): Likewise.\n\t(microblaze_eh_return): Likewise.\n\t* config/microblaze/microblaze.h: Likewise.\n\t* config/microblaze/microblaze.md: Likewise.\n\t* config/microblaze/t-microblaze: Likewise.\n\t* config/mips/driver-native.cc: Likewise.\n\t* config/mips/loongson2ef.md: Likewise.\n\t* config/mips/mips-protos.h (mips_expand_vec_cmp_expr): Likewise.\n\t* config/mips/mips.cc (mips_rtx_costs): Likewise.\n\t(mips_output_filename): Likewise.\n\t(mips_output_function_prologue): Likewise.\n\t(mips_output_function_epilogue): Likewise.\n\t(mips_output_mi_thunk): Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mips/mips.md: Likewise.\n\t* config/mips/t-mips: Likewise.\n\t* config/mips/x-native: Likewise.\n\t* config/mmix/mmix-protos.h: Likewise.\n\t* config/mmix/mmix.cc (mmix_option_override): Likewise.\n\t(mmix_dbx_register_number): Likewise.\n\t(mmix_expand_prologue): Likewise.\n\t* config/mmix/mmix.h: Likewise.\n\t* config/mmix/mmix.md: Likewise.\n\t* config/mmix/predicates.md: Likewise.\n\t* config/mn10300/mn10300.cc (mn10300_symbolic_operand): Likewise.\n\t(mn10300_legitimate_pic_operand_p): Likewise.\n\t* config/mn10300/mn10300.h (enum reg_class): Likewise.\n\t(NO_FUNCTION_CSE): Likewise.\n\t* config/moxie/moxie-protos.h: Likewise.\n\t* config/moxie/uclinux.h (TARGET_LIBC_HAS_FUNCTION): Likewise.\n\t* config/msp430/msp430-devices.cc (extract_devices_dir_from_exec_prefix): Likewise.\n\t* config/msp430/msp430.cc (msp430_gimplify_va_arg_expr): Likewise.\n\t(msp430_incoming_return_addr_rtx): Likewise.\n\t* config/msp430/msp430.h (msp430_get_linker_devices_include_path): Likewise.\n\t* config/msp430/t-msp430: Likewise.\n\t* config/nds32/nds32-cost.cc (nds32_rtx_costs_speed_prefer): Likewise.\n\t(nds32_rtx_costs_size_prefer): Likewise.\n\t(nds32_init_rtx_costs): Likewise.\n\t* config/nds32/nds32-doubleword.md: Likewise.\n\t* config/nds32/nds32.cc (nds32_memory_move_cost): Likewise.\n\t(nds32_builtin_decl): Likewise.\n\t* config/nds32/nds32.h (enum nds32_16bit_address_type): Likewise.\n\t(enum nds32_isr_nested_type): Likewise.\n\t(enum reg_class): Likewise.\n\t* config/nds32/predicates.md: Likewise.\n\t* config/nds32/t-nds32: Likewise.\n\t* config/nios2/nios2.cc (nios2_pragma_target_parse): Likewise.\n\t* config/nvptx/nvptx-protos.h: Likewise.\n\t* config/nvptx/nvptx.cc (nvptx_goacc_expand_var_decl): Likewise.\n\t* config/nvptx/nvptx.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n\t* config/nvptx/t-nvptx: Likewise.\n\t* config/nvptx/t-omp-device: Likewise.\n\t* config/pa/elf.h: Likewise.\n\t* config/pa/pa-linux.h (GLOBAL_ASM_OP): Likewise.\n\t* config/pa/pa-netbsd.h (GLOBAL_ASM_OP): Likewise.\n\t* config/pa/pa-openbsd.h (TARGET_ASM_GLOBALIZE_LABEL): Likewise.\n\t* config/pa/pa-protos.h (pa_eh_return_handler_rtx): Likewise.\n\t(pa_legitimize_reload_address): Likewise.\n\t(pa_can_use_return_insn): Likewise.\n\t* config/pa/pa.cc (mem_shadd_or_shadd_rtx_p): Likewise.\n\t(som_output_text_section_asm_op): Likewise.\n\t* config/pa/pa.h (PROFILE_BEFORE_PROLOGUE): Likewise.\n\t* config/pa/pa.md: Likewise.\n\t* config/pa/som.h: Likewise.\n\t* config/pa/t-pa: Likewise.\n\t* config/pdp11/pdp11.cc (decode_pdp11_d): Likewise.\n\t* config/pdp11/pdp11.h: Likewise.\n\t* config/pdp11/pdp11.md: Likewise.\n\t* config/pdp11/t-pdp11: Likewise.\n\t* config/pru/pru.md: Likewise.\n\t* config/pru/t-pru: Likewise.\n\t* config/riscv/riscv-protos.h (NUM_SYMBOL_TYPES): Likewise.\n\t(riscv_gpr_save_operation_p): Likewise.\n\t(riscv_d_register_target_info): Likewise.\n\t(riscv_init_builtins): Likewise.\n\t* config/riscv/riscv.cc (riscv_output_mi_thunk): Likewise.\n\t* config/riscv/riscv.h (CSW_MAX_OFFSET): Likewise.\n\t* config/riscv/t-riscv: Likewise.\n\t* config/rl78/rl78.cc (rl78_asm_ctor_dtor): Likewise.\n\t* config/rl78/t-rl78: Likewise.\n\t* config/rs6000/aix.h: Likewise.\n\t* config/rs6000/aix71.h (ASM_SPEC_COMMON): Likewise.\n\t* config/rs6000/aix72.h (ASM_SPEC_COMMON): Likewise.\n\t* config/rs6000/aix73.h (ASM_SPEC_COMMON): Likewise.\n\t* config/rs6000/darwin.h (TARGET_ASM_GLOBALIZE_LABEL): Likewise.\n\t* config/rs6000/driver-rs6000.cc: Likewise.\n\t* config/rs6000/freebsd.h: Likewise.\n\t* config/rs6000/freebsd64.h: Likewise.\n\t* config/rs6000/lynx.h (ASM_OUTPUT_ALIGN): Likewise.\n\t* config/rs6000/rbtree.cc: Likewise.\n\t* config/rs6000/rbtree.h: Likewise.\n\t* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros): Likewise.\n\t* config/rs6000/rs6000-call.cc (rs6000_invalid_builtin): Likewise.\n\t(rs6000_expand_builtin): Likewise.\n\t(rs6000_init_builtins): Likewise.\n\t* config/rs6000/rs6000-cpus.def: Likewise.\n\t* config/rs6000/rs6000-gen-builtins.cc (write_init_ovld_table): Likewise.\n\t* config/rs6000/rs6000-internal.h (ALTIVEC_REG_BIT): Likewise.\n\t(quad_address_offset_p): Likewise.\n\t* config/rs6000/rs6000-logue.cc (interesting_frame_related_regno): Likewise.\n\t(rs6000_emit_epilogue): Likewise.\n\t* config/rs6000/rs6000-overload.def: Likewise.\n\t* config/rs6000/rs6000-p8swap.cc: Likewise.\n\t* config/rs6000/rs6000-protos.h (GCC_RS6000_PROTOS_H): Likewise.\n\t(rs6000_const_f32_to_i32): Likewise.\n\t* config/rs6000/rs6000.cc (legitimate_lo_sum_address_p): Likewise.\n\t(rs6000_debug_legitimize_address): Likewise.\n\t(rs6000_mode_dependent_address): Likewise.\n\t(rs6000_adjust_priority): Likewise.\n\t(rs6000_c_mode_for_suffix): Likewise.\n\t* config/rs6000/rs6000.h (defined): Likewise.\n\t(LONG_DOUBLE_TYPE_SIZE): Likewise.\n\t* config/rs6000/rs6000.md: Likewise.\n\t* config/rs6000/sysv4.h: Likewise.\n\t* config/rs6000/t-linux: Likewise.\n\t* config/rs6000/t-linux64: Likewise.\n\t* config/rs6000/t-rs6000: Likewise.\n\t* config/rs6000/x-darwin: Likewise.\n\t* config/rs6000/x-darwin64: Likewise.\n\t* config/rs6000/x-rs6000: Likewise.\n\t* config/rs6000/xcoff.h (ASM_OUTPUT_LABELREF): Likewise.\n\t* config/rx/rx.cc (rx_expand_builtin): Likewise.\n\t* config/s390/constraints.md: Likewise.\n\t* config/s390/driver-native.cc: Likewise.\n\t* config/s390/htmxlintrin.h: Likewise.\n\t* config/s390/s390-builtins.def (B_DEF): Likewise.\n\t(OB_DEF_VAR): Likewise.\n\t* config/s390/s390-builtins.h: Likewise.\n\t* config/s390/s390-c.cc: Likewise.\n\t* config/s390/s390-opts.h: Likewise.\n\t* config/s390/s390-protos.h (s390_check_symref_alignment): Likewise.\n\t(s390_register_target_pragmas): Likewise.\n\t* config/s390/s390.cc (s390_init_builtins): Likewise.\n\t(s390_expand_plus_operand): Likewise.\n\t(s390_expand_atomic): Likewise.\n\t(s390_valid_target_attribute_inner_p): Likewise.\n\t* config/s390/s390.h (LONG_DOUBLE_TYPE_SIZE): Likewise.\n\t* config/s390/s390.md: Likewise.\n\t* config/s390/t-s390: Likewise.\n\t* config/s390/vx-builtins.md: Likewise.\n\t* config/s390/x-native: Likewise.\n\t* config/sh/divtab-sh4-300.cc (main): Likewise.\n\t* config/sh/divtab-sh4.cc (main): Likewise.\n\t* config/sh/divtab.cc (main): Likewise.\n\t* config/sh/elf.h: Likewise.\n\t* config/sh/sh-protos.h (sh_fsca_int2sf): Likewise.\n\t* config/sh/sh.cc (SYMBOL_FLAG_FUNCVEC_FUNCTION): Likewise.\n\t(sh_struct_value_rtx): Likewise.\n\t(sh_remove_reg_dead_or_unused_notes): Likewise.\n\t* config/sh/sh.h (MIN_UNITS_PER_WORD): Likewise.\n\t* config/sh/t-sh: Likewise.\n\t* config/sol2-protos.h (solaris_override_options): Likewise.\n\t* config/sol2.h: Likewise.\n\t* config/sparc/driver-sparc.cc: Likewise.\n\t* config/sparc/freebsd.h: Likewise.\n\t* config/sparc/sparc-protos.h (make_pass_work_around_errata): Likewise.\n\t* config/sparc/sparc.cc (sparc_output_mi_thunk): Likewise.\n\t(sparc_asan_shadow_offset): Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\t* config/sparc/t-sparc: Likewise.\n\t* config/sparc/x-sparc: Likewise.\n\t* config/stormy16/stormy16.cc (xstormy16_mode_dependent_address_p): Likewise.\n\t* config/t-darwin: Likewise.\n\t* config/t-dragonfly: Likewise.\n\t* config/t-freebsd: Likewise.\n\t* config/t-glibc: Likewise.\n\t* config/t-linux: Likewise.\n\t* config/t-netbsd: Likewise.\n\t* config/t-openbsd: Likewise.\n\t* config/t-pnt16-warn: Likewise.\n\t* config/t-sol2: Likewise.\n\t* config/t-vxworks: Likewise.\n\t* config/t-winnt: Likewise.\n\t* config/tilegx/t-tilegx: Likewise.\n\t* config/tilegx/tilegx-c.cc: Likewise.\n\t* config/tilegx/tilegx-protos.h (tilegx_function_profiler): Likewise.\n\t* config/tilegx/tilegx.md: Likewise.\n\t* config/tilepro/t-tilepro: Likewise.\n\t* config/tilepro/tilepro-c.cc: Likewise.\n\t* config/v850/t-v850: Likewise.\n\t* config/v850/v850-protos.h: Likewise.\n\t* config/v850/v850.cc (F): Likewise.\n\t* config/v850/v850.h (enum reg_class): Likewise.\n\t(SLOW_BYTE_ACCESS): Likewise.\n\t* config/vax/vax.cc (vax_mode_dependent_address_p): Likewise.\n\t* config/vax/vax.h (enum reg_class): Likewise.\n\t* config/vax/vax.md: Likewise.\n\t* config/visium/visium.cc (visium_legitimate_address_p): Likewise.\n\t* config/visium/visium.h: Likewise.\n\t* config/vms/t-vms: Likewise.\n\t* config/vms/vms-crtlmap.map: Likewise.\n\t* config/vms/vms-protos.h (vms_c_get_vms_ver): Likewise.\n\t* config/vx-common.h: Likewise.\n\t* config/x-darwin: Likewise.\n\t* config/x-hpux: Likewise.\n\t* config/x-linux: Likewise.\n\t* config/x-netbsd: Likewise.\n\t* config/x-openbsd: Likewise.\n\t* config/x-solaris: Likewise.\n\t* config/xtensa/xtensa-protos.h (xtensa_mem_offset): Likewise.\n\t* config/xtensa/xtensa.cc (xtensa_option_override): Likewise.\n\t* config/xtensa/xtensa.h: Likewise.\n\t* configure.ac: Likewise.\n\t* context.cc: Likewise.\n\t* convert.h: Likewise.\n\t* coretypes.h: Likewise.\n\t* coverage.cc: Likewise.\n\t* coverage.h: Likewise.\n\t* cppdefault.h (struct default_include): Likewise.\n\t* cprop.cc (local_cprop_pass): Likewise.\n\t(one_cprop_pass): Likewise.\n\t* cse.cc (hash_rtx_cb): Likewise.\n\t(fold_rtx): Likewise.\n\t* ctfc.h (ctfc_get_num_vlen_bytes): Likewise.\n\t* data-streamer.h (bp_unpack_var_len_int): Likewise.\n\t(streamer_write_widest_int): Likewise.\n\t* dbgcnt.def: Likewise.\n\t* dbxout.cc (dbxout_early_global_decl): Likewise.\n\t(dbxout_common_check): Likewise.\n\t* dbxout.h: Likewise.\n\t* debug.h (struct gcc_debug_hooks): Likewise.\n\t(dump_go_spec_init): Likewise.\n\t* df-core.cc: Likewise.\n\t* df-scan.cc (df_insn_info_delete): Likewise.\n\t(df_insn_delete): Likewise.\n\t* df.h (debug_df_chain): Likewise.\n\t(can_move_insns_across): Likewise.\n\t* dfp.cc (decimal_from_binary): Likewise.\n\t* diagnostic-color.cc: Likewise.\n\t* diagnostic-event-id.h: Likewise.\n\t* diagnostic-show-locus.cc (test_one_liner_labels): Likewise.\n\t* diagnostic.cc (bt_callback): Likewise.\n\t(num_digits): Likewise.\n\t* doc/avr-mmcu.texi: Likewise.\n\t* doc/cfg.texi: Likewise.\n\t* doc/contrib.texi: Likewise.\n\t* doc/cppinternals.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/generic.texi: Likewise.\n\t* doc/gimple.texi: Likewise.\n\t* doc/gty.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/loop.texi: Likewise.\n\t* doc/lto.texi: Likewise.\n\t* doc/match-and-simplify.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/optinfo.texi: Likewise.\n\t* doc/options.texi: Likewise.\n\t* doc/passes.texi: Likewise.\n\t* doc/plugins.texi: Likewise.\n\t* doc/rtl.texi: Likewise.\n\t* doc/sourcebuild.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/tm.texi.in: Likewise.\n\t* doc/tree-ssa.texi: Likewise.\n\t* dojump.cc (do_jump): Likewise.\n\t* dojump.h: Likewise.\n\t* dumpfile.cc (test_impl_location): Likewise.\n\t(test_capture_of_dump_calls): Likewise.\n\t* dumpfile.h (enum dump_kind): Likewise.\n\t(class dump_location_t): Likewise.\n\t(dump_enabled_p): Likewise.\n\t(enable_rtl_dump_file): Likewise.\n\t(dump_combine_total_stats): Likewise.\n\t* dwarf2asm.cc (dw2_asm_output_delta_uleb128): Likewise.\n\t* dwarf2ctf.h (ctf_debug_finish): Likewise.\n\t* dwarf2out.cc (dwarf2out_begin_prologue): Likewise.\n\t(struct loc_descr_context): Likewise.\n\t(rtl_for_decl_location): Likewise.\n\t(gen_subprogram_die): Likewise.\n\t(gen_label_die): Likewise.\n\t(is_trivial_indirect_ref): Likewise.\n\t(dwarf2out_late_global_decl): Likewise.\n\t(dwarf_file_hasher::hash): Likewise.\n\t(dwarf2out_end_source_file): Likewise.\n\t(dwarf2out_define): Likewise.\n\t(dwarf2out_early_finish): Likewise.\n\t* dwarf2out.h (struct dw_fde_node): Likewise.\n\t(struct dw_discr_list_node): Likewise.\n\t(output_loc_sequence_raw): Likewise.\n\t* emit-rtl.cc (gen_raw_REG): Likewise.\n\t(maybe_set_max_label_num): Likewise.\n\t* emit-rtl.h (struct rtl_data): Likewise.\n\t* errors.cc (internal_error): Likewise.\n\t(trim_filename): Likewise.\n\t* et-forest.cc: Likewise.\n\t* except.cc (init_eh_for_function): Likewise.\n\t* explow.cc (promote_ssa_mode): Likewise.\n\t(get_dynamic_stack_size): Likewise.\n\t* explow.h: Likewise.\n\t* expmed.h: Likewise.\n\t* expr.cc (safe_from_p): Likewise.\n\t(expand_expr_real_2): Likewise.\n\t(expand_expr_real_1): Likewise.\n\t* file-prefix-map.cc (remap_filename): Likewise.\n\t* final.cc (app_enable): Likewise.\n\t(make_pass_compute_alignments): Likewise.\n\t(final_scan_insn_1): Likewise.\n\t(final_scan_insn): Likewise.\n\t* fixed-value.h (fixed_from_string): Likewise.\n\t* flag-types.h (NO_DEBUG): Likewise.\n\t(DWARF2_DEBUG): Likewise.\n\t(VMS_DEBUG): Likewise.\n\t(BTF_DEBUG): Likewise.\n\t(enum ctf_debug_info_levels): Likewise.\n\t* fold-const.cc (const_binop): Likewise.\n\t(fold_binary_loc): Likewise.\n\t(fold_checksum_tree): Likewise.\n\t* fp-test.cc: Likewise.\n\t* function.cc (expand_function_end): Likewise.\n\t* function.h (struct function): Likewise.\n\t* fwprop.cc (should_replace_address): Likewise.\n\t* gcc-main.cc: Likewise.\n\t* gcc-rich-location.h (class gcc_rich_location): Likewise.\n\t* gcc-symtab.h: Likewise.\n\t* gcc.cc (MIN_FATAL_STATUS): Likewise.\n\t(driver_handle_option): Likewise.\n\t(quote_spec_arg): Likewise.\n\t(driver::finalize): Likewise.\n\t* gcc.h (set_input): Likewise.\n\t* gcov-dump.cc: Likewise.\n\t* gcov.cc (solve_flow_graph): Likewise.\n\t* gcse-common.cc: Likewise.\n\t* gcse.cc (make_pass_rtl_hoist): Likewise.\n\t* genattr-common.cc: Likewise.\n\t* genattrtab.cc (min_fn): Likewise.\n\t(write_const_num_delay_slots): Likewise.\n\t* genautomata.cc: Likewise.\n\t* genconditions.cc (write_one_condition): Likewise.\n\t* genconstants.cc: Likewise.\n\t* genemit.cc (gen_exp): Likewise.\n\t* generic-match-head.cc: Likewise.\n\t* genextract.cc: Likewise.\n\t* gengenrtl.cc (always_void_p): Likewise.\n\t* gengtype-parse.cc (gtymarker_opt): Likewise.\n\t* gengtype-state.cc (state_writer::state_writer): Likewise.\n\t(write_state_trailer): Likewise.\n\t(equals_type_number): Likewise.\n\t(read_state): Likewise.\n\t* gengtype.cc (open_base_files): Likewise.\n\t(struct file_rule_st): Likewise.\n\t(header_dot_h_frul): Likewise.\n\t* gengtype.h: Likewise.\n\t* genmatch.cc (main): Likewise.\n\t* genmddeps.cc: Likewise.\n\t* genmodes.cc (emit_mode_inner): Likewise.\n\t(emit_mode_unit_size): Likewise.\n\t* genpeep.cc (gen_peephole): Likewise.\n\t* genpreds.cc (write_tm_preds_h): Likewise.\n\t* genrecog.cc (validate_pattern): Likewise.\n\t(write_header): Likewise.\n\t(main): Likewise.\n\t* gensupport.cc (change_subst_attribute): Likewise.\n\t(traverse_c_tests): Likewise.\n\t(add_predicate): Likewise.\n\t(init_predicate_table): Likewise.\n\t* gensupport.h (struct optab_pattern): Likewise.\n\t(get_num_insn_codes): Likewise.\n\t(maybe_eval_c_test): Likewise.\n\t(struct pred_data): Likewise.\n\t* ggc-internal.h: Likewise.\n\t* gimple-fold.cc (maybe_fold_reference): Likewise.\n\t(get_range_strlen_tree): Likewise.\n\t* gimple-fold.h (gimple_stmt_integer_valued_real_p): Likewise.\n\t* gimple-low.cc: Likewise.\n\t* gimple-match-head.cc (directly_supported_p): Likewise.\n\t* gimple-pretty-print.h: Likewise.\n\t* gimple-ssa-sprintf.cc (format_percent): Likewise.\n\t(adjust_range_for_overflow): Likewise.\n\t* gimple-streamer.h: Likewise.\n\t* gimple.h (struct GTY): Likewise.\n\t(is_gimple_resx): Likewise.\n\t* gimplify.cc (gimplify_expr): Likewise.\n\t(gimplify_init_constructor): Likewise.\n\t(omp_construct_selector_matches): Likewise.\n\t(gimplify_omp_target_update): Likewise.\n\t(gimplify_omp_ordered): Likewise.\n\t(gimplify_va_arg_expr): Likewise.\n\t* graphite-isl-ast-to-gimple.cc (should_copy_to_new_region): Likewise.\n\t* haifa-sched.cc (increase_insn_priority): Likewise.\n\t(try_ready): Likewise.\n\t(sched_create_recovery_edges): Likewise.\n\t* ifcvt.cc (find_if_case_1): Likewise.\n\t(find_if_case_2): Likewise.\n\t* inchash.h: Likewise.\n\t* incpath.cc (add_env_var_paths): Likewise.\n\t* input.cc (dump_location_info): Likewise.\n\t(assert_loceq): Likewise.\n\t(test_lexer_string_locations_concatenation_1): Likewise.\n\t(test_lexer_string_locations_concatenation_2): Likewise.\n\t(test_lexer_string_locations_concatenation_3): Likewise.\n\t* input.h (BUILTINS_LOCATION): Likewise.\n\t(class string_concat_db): Likewise.\n\t* internal-fn.cc (expand_MUL_OVERFLOW): Likewise.\n\t(expand_LOOP_VECTORIZED): Likewise.\n\t* ipa-cp.cc (make_pass_ipa_cp): Likewise.\n\t* ipa-fnsummary.cc (remap_freqcounting_preds_after_dup): Likewise.\n\t(ipa_fn_summary_t::duplicate): Likewise.\n\t(make_pass_ipa_fn_summary): Likewise.\n\t* ipa-fnsummary.h (enum ipa_hints_vals): Likewise.\n\t* ipa-free-lang-data.cc (fld_simplified_type): Likewise.\n\t(free_lang_data_in_decl): Likewise.\n\t* ipa-inline.cc (compute_inlined_call_time): Likewise.\n\t(inline_always_inline_functions): Likewise.\n\t* ipa-inline.h (free_growth_caches): Likewise.\n\t(inline_account_function_p): Likewise.\n\t* ipa-modref.cc (modref_access_analysis::analyze_stmt): Likewise.\n\t(modref_eaf_analysis::analyze_ssa_name): Likewise.\n\t* ipa-param-manipulation.cc (ipa_param_body_adjustments::mark_dead_statements): Likewise.\n\t(ipa_param_body_adjustments::remap_with_debug_expressions): Likewise.\n\t* ipa-prop.cc (ipa_set_node_agg_value_chain): Likewise.\n\t* ipa-prop.h (IPA_UNDESCRIBED_USE): Likewise.\n\t(unadjusted_ptr_and_unit_offset): Likewise.\n\t* ipa-reference.cc (make_pass_ipa_reference): Likewise.\n\t* ipa-reference.h (GCC_IPA_REFERENCE_H): Likewise.\n\t* ipa-split.cc (consider_split): Likewise.\n\t* ipa-sra.cc (isra_read_node_info): Likewise.\n\t* ipa-utils.h (struct ipa_dfs_info): Likewise.\n\t(recursive_call_p): Likewise.\n\t(ipa_make_function_pure): Likewise.\n\t* ira-build.cc (ira_create_allocno): Likewise.\n\t(ira_flattening): Likewise.\n\t* ira-color.cc (do_coloring): Likewise.\n\t(update_curr_costs): Likewise.\n\t* ira-conflicts.cc (process_regs_for_copy): Likewise.\n\t* ira-int.h (struct ira_emit_data): Likewise.\n\t(ira_prohibited_mode_move_regs): Likewise.\n\t(ira_get_dup_out_num): Likewise.\n\t(ira_destroy): Likewise.\n\t(ira_tune_allocno_costs): Likewise.\n\t(ira_implicitly_set_insn_hard_regs): Likewise.\n\t(ira_build_conflicts): Likewise.\n\t(ira_color): Likewise.\n\t* ira-lives.cc (process_bb_node_lives): Likewise.\n\t* ira.cc (class ira_spilled_reg_stack_slot): Likewise.\n\t(setup_uniform_class_p): Likewise.\n\t(def_dominates_uses): Likewise.\n\t* ira.h (ira_nullify_asm_goto): Likewise.\n\t* langhooks.cc (lhd_post_options): Likewise.\n\t* langhooks.h (class substring_loc): Likewise.\n\t(struct lang_hooks_for_tree_inlining): Likewise.\n\t(struct lang_hooks_for_types): Likewise.\n\t(struct lang_hooks): Likewise.\n\t* libfuncs.h (synchronize_libfunc): Likewise.\n\t* loop-doloop.cc (doloop_condition_get): Likewise.\n\t* loop-init.cc (fix_loop_structure): Likewise.\n\t* loop-invariant.cc: Likewise.\n\t* lower-subreg.h: Likewise.\n\t* lra-constraints.cc (curr_insn_transform): Likewise.\n\t* lra-int.h (struct lra_insn_reg): Likewise.\n\t(lra_undo_inheritance): Likewise.\n\t(lra_setup_reload_pseudo_preferenced_hard_reg): Likewise.\n\t(lra_split_hard_reg_for): Likewise.\n\t(lra_coalesce): Likewise.\n\t(lra_final_code_change): Likewise.\n\t* lra-spills.cc (lra_final_code_change): Likewise.\n\t* lra.cc (lra_process_new_insns): Likewise.\n\t* lto-compress.h (struct lto_compression_stream): Likewise.\n\t* lto-streamer-out.cc (DFS::DFS_write_tree_body): Likewise.\n\t(write_symbol): Likewise.\n\t* lto-streamer.h (enum LTO_tags): Likewise.\n\t(lto_value_range_error): Likewise.\n\t(lto_append_block): Likewise.\n\t(lto_streamer_hooks_init): Likewise.\n\t(stream_read_tree_ref): Likewise.\n\t(lto_prepare_function_for_streaming): Likewise.\n\t(select_what_to_stream): Likewise.\n\t(omp_lto_input_declare_variant_alt): Likewise.\n\t(cl_optimization_stream_in): Likewise.\n\t* lto-wrapper.cc (append_compiler_options): Likewise.\n\t* machmode.def: Likewise.\n\t* machmode.h (struct int_n_data_t): Likewise.\n\t* main.cc (main): Likewise.\n\t* match.pd: Likewise.\n\t* omp-builtins.def (BUILT_IN_GOMP_CRITICAL_NAME_END): Likewise.\n\t(BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT): Likewise.\n\t* omp-expand.cc (expand_omp_atomic_fetch_op): Likewise.\n\t(make_pass_expand_omp_ssa): Likewise.\n\t* omp-low.cc (struct omp_context): Likewise.\n\t(struct omp_taskcopy_context): Likewise.\n\t(lower_omp): Likewise.\n\t* omp-oacc-neuter-broadcast.cc (omp_sese_active_worker_call): Likewise.\n\t(mask_name): Likewise.\n\t(omp_sese_dump_pars): Likewise.\n\t(worker_single_simple): Likewise.\n\t* omp-offload.cc (omp_finish_file): Likewise.\n\t(execute_oacc_loop_designation): Likewise.\n\t* optabs-query.cc (lshift_cheap_p): Likewise.\n\t* optc-gen.awk: Likewise.\n\t* optc-save-gen.awk: Likewise.\n\t* optinfo-emit-json.cc (optrecord_json_writer::optrecord_json_writer): Likewise.\n\t* opts-common.cc: Likewise.\n\t* output.h (app_enable): Likewise.\n\t(output_operand_lossage): Likewise.\n\t(insn_current_reference_address): Likewise.\n\t(get_insn_template): Likewise.\n\t(output_quoted_string): Likewise.\n\t* pass_manager.h (struct register_pass_info): Likewise.\n\t* plugin.cc: Likewise.\n\t* plugin.def (PLUGIN_ANALYZER_INIT): Likewise.\n\t* plugin.h (invoke_plugin_callbacks): Likewise.\n\t* pointer-query.cc (handle_mem_ref): Likewise.\n\t* postreload-gcse.cc (alloc_mem): Likewise.\n\t* predict.h (enum prediction): Likewise.\n\t(add_reg_br_prob_note): Likewise.\n\t* prefix.h: Likewise.\n\t* profile.h (get_working_sets): Likewise.\n\t* read-md.cc: Likewise.\n\t* read-md.h (struct mapping): Likewise.\n\t(class md_reader): Likewise.\n\t(class noop_reader): Likewise.\n\t* read-rtl-function.cc (function_reader::create_function): Likewise.\n\t(function_reader::extra_parsing_for_operand_code_0): Likewise.\n\t* read-rtl.cc (initialize_iterators): Likewise.\n\t* real.cc: Likewise.\n\t* real.h (struct real_value): Likewise.\n\t(format_helper::format_helper): Likewise.\n\t(real_hash): Likewise.\n\t(real_can_shorten_arithmetic): Likewise.\n\t* recog.cc (struct target_recog): Likewise.\n\t(offsettable_nonstrict_memref_p): Likewise.\n\t(constrain_operands): Likewise.\n\t* recog.h (MAX_RECOG_ALTERNATIVES): Likewise.\n\t(which_op_alt): Likewise.\n\t(struct insn_gen_fn): Likewise.\n\t* reg-notes.def (REG_NOTE): Likewise.\n\t* reg-stack.cc: Likewise.\n\t* regs.h (reg_is_parm_p): Likewise.\n\t* regset.h: Likewise.\n\t* reload.cc (push_reload): Likewise.\n\t(find_reloads): Likewise.\n\t(find_reloads_address_1): Likewise.\n\t(find_replacement): Likewise.\n\t(refers_to_regno_for_reload_p): Likewise.\n\t(refers_to_mem_for_reload_p): Likewise.\n\t* reload.h (push_reload): Likewise.\n\t(deallocate_reload_reg): Likewise.\n\t* reload1.cc (emit_input_reload_insns): Likewise.\n\t* reorg.cc (relax_delay_slots): Likewise.\n\t* rtl.def (UNKNOWN): Likewise.\n\t(SEQUENCE): Likewise.\n\t(BARRIER): Likewise.\n\t(ASM_OPERANDS): Likewise.\n\t(EQ_ATTR_ALT): Likewise.\n\t* rtl.h (struct GTY): Likewise.\n\t(LABEL_NAME): Likewise.\n\t(LABEL_ALT_ENTRY_P): Likewise.\n\t(SUBREG_BYTE): Likewise.\n\t(get_stack_check_protect): Likewise.\n\t(dump_rtx_statistics): Likewise.\n\t(unwrap_const_vec_duplicate): Likewise.\n\t(subreg_promoted_mode): Likewise.\n\t(gen_lowpart_common): Likewise.\n\t(operand_subword): Likewise.\n\t(immed_wide_int_const): Likewise.\n\t(decide_function_section): Likewise.\n\t(active_insn_p): Likewise.\n\t(delete_related_insns): Likewise.\n\t(try_split): Likewise.\n\t(val_signbit_known_clear_p): Likewise.\n\t(simplifiable_subregs): Likewise.\n\t(set_insn_deleted): Likewise.\n\t(subreg_get_info): Likewise.\n\t(remove_free_EXPR_LIST_node): Likewise.\n\t(finish_subregs_of_mode): Likewise.\n\t(get_mem_attrs): Likewise.\n\t(lookup_constant_def): Likewise.\n\t(rtx_to_tree_code): Likewise.\n\t(hash_rtx): Likewise.\n\t(condjump_in_parallel_p): Likewise.\n\t(validate_subreg): Likewise.\n\t(make_compound_operation): Likewise.\n\t(schedule_ebbs): Likewise.\n\t(print_inline_rtx): Likewise.\n\t(fixup_args_size_notes): Likewise.\n\t(expand_dec): Likewise.\n\t(prepare_copy_insn): Likewise.\n\t(mark_elimination): Likewise.\n\t(valid_mode_changes_for_regno): Likewise.\n\t(make_debug_expr_from_rtl): Likewise.\n\t(delete_vta_debug_insns): Likewise.\n\t(simplify_using_condition): Likewise.\n\t(set_insn_locations): Likewise.\n\t(fatal_insn_not_found): Likewise.\n\t(word_register_operation_p): Likewise.\n\t* rtlanal.cc (get_call_fndecl): Likewise.\n\t(side_effects_p): Likewise.\n\t(subreg_nregs): Likewise.\n\t(rtx_cost): Likewise.\n\t(canonicalize_condition): Likewise.\n\t* rtlanal.h (rtx_properties::try_to_add_note): Likewise.\n\t* run-rtl-passes.cc (run_rtl_passes): Likewise.\n\t* sanitizer.def (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK): Likewise.\n\t* sched-deps.cc (add_dependence_1): Likewise.\n\t* sched-ebb.cc (begin_move_insn): Likewise.\n\t(add_deps_for_risky_insns): Likewise.\n\t(advance_target_bb): Likewise.\n\t* sched-int.h (reemit_notes): Likewise.\n\t(struct _haifa_insn_data): Likewise.\n\t(HID): Likewise.\n\t(DEP_CANCELLED): Likewise.\n\t(debug_ds): Likewise.\n\t(number_in_ready): Likewise.\n\t(schedule_ebbs_finish): Likewise.\n\t(find_modifiable_mems): Likewise.\n\t* sched-rgn.cc (debug_rgn_dependencies): Likewise.\n\t* sel-sched-dump.cc (dump_lv_set): Likewise.\n\t* sel-sched-dump.h: Likewise.\n\t* sel-sched-ir.cc (sel_insn_rtx_cost): Likewise.\n\t(setup_id_reg_sets): Likewise.\n\t(has_dependence_p): Likewise.\n\t(sel_num_cfg_preds_gt_1): Likewise.\n\t(bb_ends_ebb_p): Likewise.\n\t* sel-sched-ir.h (struct _list_node): Likewise.\n\t(struct idata_def): Likewise.\n\t(bb_next_bb): Likewise.\n\t* sel-sched.cc (vinsn_writes_one_of_regs_p): Likewise.\n\t(choose_best_pseudo_reg): Likewise.\n\t(verify_target_availability): Likewise.\n\t(can_speculate_dep_p): Likewise.\n\t(sel_rank_for_schedule): Likewise.\n\t* selftest-run-tests.cc (selftest::run_tests): Likewise.\n\t* selftest.h (class auto_fix_quotes): Likewise.\n\t* shrink-wrap.cc (handle_simple_exit): Likewise.\n\t* shrink-wrap.h: Likewise.\n\t* simplify-rtx.cc (simplify_context::simplify_associative_operation): Likewise.\n\t(simplify_context::simplify_gen_vec_select): Likewise.\n\t* spellcheck-tree.h: Likewise.\n\t* spellcheck.h: Likewise.\n\t* statistics.h (struct function): Likewise.\n\t* stmt.cc (conditional_probability): Likewise.\n\t* stmt.h: Likewise.\n\t* stor-layout.h: Likewise.\n\t* streamer-hooks.h: Likewise.\n\t* stringpool.h: Likewise.\n\t* symtab.cc (symbol_table::change_decl_assembler_name): Likewise.\n\t* target.def (HOOK_VECTOR_END): Likewise.\n\t(type.): Likewise.\n\t* target.h (union cumulative_args_t): Likewise.\n\t(by_pieces_ninsns): Likewise.\n\t(class predefined_function_abi): Likewise.\n\t* targhooks.cc (default_translate_mode_attribute): Likewise.\n\t* timevar.def: Likewise.\n\t* timevar.h (class timer): Likewise.\n\t* toplev.h (enable_rtl_dump_file): Likewise.\n\t* trans-mem.cc (collect_bb2reg): Likewise.\n\t* tree-call-cdce.cc (gen_conditions_for_pow): Likewise.\n\t* tree-cfg.cc (remove_bb): Likewise.\n\t(verify_gimple_debug): Likewise.\n\t(remove_edge_and_dominated_blocks): Likewise.\n\t(push_fndecl): Likewise.\n\t* tree-cfgcleanup.h (GCC_TREE_CFGCLEANUP_H): Likewise.\n\t* tree-complex.cc (expand_complex_multiplication): Likewise.\n\t(expand_complex_div_straight): Likewise.\n\t* tree-core.h (enum tree_index): Likewise.\n\t(enum operand_equal_flag): Likewise.\n\t* tree-eh.cc (honor_protect_cleanup_actions): Likewise.\n\t* tree-if-conv.cc (if_convertible_gimple_assign_stmt_p): Likewise.\n\t* tree-inline.cc (initialize_inlined_parameters): Likewise.\n\t* tree-inline.h (force_value_to_type): Likewise.\n\t* tree-nested.cc (get_chain_decl): Likewise.\n\t(walk_all_functions): Likewise.\n\t* tree-object-size.h: Likewise.\n\t* tree-outof-ssa.cc: Likewise.\n\t* tree-parloops.cc (create_parallel_loop): Likewise.\n\t* tree-pretty-print.cc (print_generic_expr_to_str): Likewise.\n\t(dump_generic_node): Likewise.\n\t* tree-profile.cc (tree_profiling): Likewise.\n\t* tree-sra.cc (maybe_add_sra_candidate): Likewise.\n\t* tree-ssa-address.cc: Likewise.\n\t* tree-ssa-alias.cc: Likewise.\n\t* tree-ssa-alias.h (ao_ref::max_size_known_p): Likewise.\n\t(dump_alias_stats): Likewise.\n\t* tree-ssa-ccp.cc: Likewise.\n\t* tree-ssa-coalesce.h: Likewise.\n\t* tree-ssa-live.cc (remove_unused_scope_block_p): Likewise.\n\t* tree-ssa-loop-manip.cc (copy_phi_node_args): Likewise.\n\t* tree-ssa-loop-unswitch.cc: Likewise.\n\t* tree-ssa-math-opts.cc: Likewise.\n\t* tree-ssa-operands.cc (class operands_scanner): Likewise.\n\t* tree-ssa-pre.cc: Likewise.\n\t* tree-ssa-reassoc.cc (optimize_ops_list): Likewise.\n\t(debug_range_entry): Likewise.\n\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt): Likewise.\n\t* tree-ssa-sccvn.h (TREE_SSA_SCCVN_H): Likewise.\n\t* tree-ssa-scopedtables.cc (add_expr_commutative): Likewise.\n\t(equal_mem_array_ref_p): Likewise.\n\t* tree-ssa-strlen.cc (is_strlen_related_p): Likewise.\n\t* tree-ssa-strlen.h (get_range_strlen_dynamic): Likewise.\n\t* tree-ssa-tail-merge.cc (stmt_local_def): Likewise.\n\t* tree-ssa-ter.h: Likewise.\n\t* tree-ssa-threadupdate.h (enum bb_dom_status): Likewise.\n\t* tree-streamer-in.cc (lto_input_ts_block_tree_pointers): Likewise.\n\t* tree-streamer-out.cc (pack_ts_block_value_fields): Likewise.\n\t(write_ts_block_tree_pointers): Likewise.\n\t* tree-streamer.h (struct streamer_tree_cache_d): Likewise.\n\t(streamer_read_tree_bitfields): Likewise.\n\t(streamer_write_integer_cst): Likewise.\n\t* tree-vect-patterns.cc (apply_binop_and_append_stmt): Likewise.\n\t(vect_synth_mult_by_constant): Likewise.\n\t* tree-vect-stmts.cc (vectorizable_operation): Likewise.\n\t* tree-vectorizer.cc: Likewise.\n\t* tree-vectorizer.h (class auto_purge_vect_location): Likewise.\n\t(vect_update_inits_of_drs): Likewise.\n\t(vect_get_mask_type_for_stmt): Likewise.\n\t(vect_rgroup_iv_might_wrap_p): Likewise.\n\t(cse_and_gimplify_to_preheader): Likewise.\n\t(vect_free_slp_tree): Likewise.\n\t(vect_pattern_recog): Likewise.\n\t(vect_stmt_dominates_stmt_p): Likewise.\n\t* tree.cc (initialize_tree_contains_struct): Likewise.\n\t(need_assembler_name_p): Likewise.\n\t(type_with_interoperable_signedness): Likewise.\n\t* tree.def (SWITCH_EXPR): Likewise.\n\t* tree.h (TYPE_SYMTAB_ADDRESS): Likewise.\n\t(poly_int_tree_p): Likewise.\n\t(inlined_function_outer_scope_p): Likewise.\n\t(tree_code_for_canonical_type_merging): Likewise.\n\t* value-prof.cc: Likewise.\n\t* value-prof.h (get_nth_most_common_value): Likewise.\n\t(find_func_by_profile_id): Likewise.\n\t* value-range.cc (vrp_operand_equal_p): Likewise.\n\t* value-range.h: Likewise.\n\t* var-tracking.cc: Likewise.\n\t* varasm.cc (default_function_section): Likewise.\n\t(function_section_1): Likewise.\n\t(assemble_variable): Likewise.\n\t(handle_vtv_comdat_section): Likewise.\n\t* vec.h (struct vec_prefix): Likewise.\n\t* vmsdbgout.cc (full_name): Likewise.\n\t* vtable-verify.cc: Likewise.\n\t* vtable-verify.h (struct vtv_graph_node): Likewise.\n\t* xcoffout.cc: Likewise.\n\t* xcoffout.h (DEBUG_SYMS_TEXT): Likewise.\n\ngcc/ada/ChangeLog:\n\n\t* Make-generated.in: Rename .c names to .cc.\n\t* adaint.c: Likewise.\n\t* ctrl_c.c (dummy_handler): Likewise.\n\t* gcc-interface/Makefile.in: Likewise.\n\t* gcc-interface/config-lang.in: Likewise.\n\t* gcc-interface/decl.cc (concat_name): Likewise.\n\t(init_gnat_decl): Likewise.\n\t* gcc-interface/gigi.h (concat_name): Likewise.\n\t(init_gnat_utils): Likewise.\n\t(build_call_raise_range): Likewise.\n\t(gnat_mark_addressable): Likewise.\n\t(gnat_protect_expr): Likewise.\n\t(gnat_rewrite_reference): Likewise.\n\t* gcc-interface/lang-specs.h (ADA_DUMPS_OPTIONS): Likewise.\n\t* gcc-interface/utils.cc (GTY): Likewise.\n\t(add_deferred_type_context): Likewise.\n\t(init_gnat_utils): Likewise.\n\t* gcc-interface/utils2.cc (gnat_stable_expr_p): Likewise.\n\t(gnat_protect_expr): Likewise.\n\t(gnat_stabilize_reference_1): Likewise.\n\t(gnat_rewrite_reference): Likewise.\n\t* gsocket.h: Likewise.\n\t* init.cc (__gnat_error_handler): Likewise.\n\t* libgnarl/s-intman.ads: Likewise.\n\t* libgnarl/s-osinte__android.ads: Likewise.\n\t* libgnarl/s-osinte__darwin.ads: Likewise.\n\t* libgnarl/s-osinte__hpux.ads: Likewise.\n\t* libgnarl/s-osinte__linux.ads: Likewise.\n\t* libgnarl/s-osinte__qnx.ads: Likewise.\n\t* libgnarl/s-taskin.ads: Likewise.\n\t* rtfinal.cc: Likewise.\n\t* s-oscons-tmplt.c (CND): Likewise.\n\t* set_targ.ads: Likewise.\n\ngcc/analyzer/ChangeLog:\n\n\t* analyzer.cc (is_special_named_call_p): Rename .c names to .cc.\n\t(is_named_call_p): Likewise.\n\t* region-model-asm.cc (deterministic_p): Likewise.\n\t* region.cc (field_region::get_relative_concrete_offset): Likewise.\n\t* sm-malloc.cc (method_p): Likewise.\n\t* supergraph.cc (superedge::dump_dot): Likewise.\n\ngcc/c-family/ChangeLog:\n\n\t* c-ada-spec.cc: Rename .c names to .cc.\n\t* c-ada-spec.h: Likewise.\n\t* c-common.cc (c_build_vec_convert): Likewise.\n\t(warning_candidate_p): Likewise.\n\t* c-common.h (enum rid): Likewise.\n\t(build_real_imag_expr): Likewise.\n\t(finish_label_address_expr): Likewise.\n\t(c_get_substring_location): Likewise.\n\t(c_build_bind_expr): Likewise.\n\t(conflict_marker_get_final_tok_kind): Likewise.\n\t(c_parse_error): Likewise.\n\t(check_missing_format_attribute): Likewise.\n\t(invalid_array_size_error): Likewise.\n\t(warn_for_multistatement_macros): Likewise.\n\t(build_attr_access_from_parms): Likewise.\n\t* c-cppbuiltin.cc (c_cpp_builtins): Likewise.\n\t* c-format.cc: Likewise.\n\t* c-gimplify.cc (c_gimplify_expr): Likewise.\n\t* c-indentation.h: Likewise.\n\t* c-objc.h (objc_prop_attr_kind_for_rid): Likewise.\n\t* c-omp.cc (c_omp_predetermined_mapping): Likewise.\n\t* c-opts.cc (c_common_post_options): Likewise.\n\t(set_std_cxx23): Likewise.\n\t* c-pragma.cc (handle_pragma_redefine_extname): Likewise.\n\t* c-pretty-print.h: Likewise.\n\ngcc/c/ChangeLog:\n\n\t* Make-lang.in: Rename .c names to .cc.\n\t* c-convert.cc: Likewise.\n\t* c-decl.cc (struct lang_identifier): Likewise.\n\t(pop_scope): Likewise.\n\t(finish_decl): Likewise.\n\t* c-objc-common.h (GCC_C_OBJC_COMMON): Likewise.\n\t* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Likewise.\n\t* c-parser.h (GCC_C_PARSER_H): Likewise.\n\t* c-tree.h (c_keyword_starts_typename): Likewise.\n\t(finish_declspecs): Likewise.\n\t(c_get_alias_set): Likewise.\n\t(enum c_oracle_request): Likewise.\n\t(tag_exists_p): Likewise.\n\t(set_c_expr_source_range): Likewise.\n\t* c-typeck.cc (c_common_type): Likewise.\n\t(c_finish_omp_clauses): Likewise.\n\t* config-lang.in: Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* Make-lang.in: Rename .c names to .cc.\n\t* config-lang.in: Likewise.\n\t* constexpr.cc (cxx_eval_constant_expression): Likewise.\n\t* coroutines.cc (morph_fn_to_coro): Likewise.\n\t* cp-gimplify.cc (cp_gimplify_expr): Likewise.\n\t* cp-lang.cc (struct lang_hooks): Likewise.\n\t(get_template_argument_pack_elems_folded): Likewise.\n\t* cp-objcp-common.cc (cp_tree_size): Likewise.\n\t(cp_unit_size_without_reusable_padding): Likewise.\n\t(pop_file_scope): Likewise.\n\t(cp_pushdecl): Likewise.\n\t* cp-objcp-common.h (GCC_CP_OBJCP_COMMON): Likewise.\n\t(cxx_simulate_record_decl): Likewise.\n\t* cp-tree.h (struct named_label_entry): Likewise.\n\t(current_function_return_value): Likewise.\n\t(more_aggr_init_expr_args_p): Likewise.\n\t(get_function_version_dispatcher): Likewise.\n\t(common_enclosing_class): Likewise.\n\t(strip_fnptr_conv): Likewise.\n\t(current_decl_namespace): Likewise.\n\t(do_aggregate_paren_init): Likewise.\n\t(cp_check_const_attributes): Likewise.\n\t(qualified_name_lookup_error): Likewise.\n\t(generic_targs_for): Likewise.\n\t(mark_exp_read): Likewise.\n\t(is_global_friend): Likewise.\n\t(maybe_reject_flexarray_init): Likewise.\n\t(module_token_lang): Likewise.\n\t(handle_module_option): Likewise.\n\t(literal_integer_zerop): Likewise.\n\t(build_extra_args): Likewise.\n\t(build_if_nonnull): Likewise.\n\t(maybe_check_overriding_exception_spec): Likewise.\n\t(finish_omp_target_clauses): Likewise.\n\t(maybe_warn_zero_as_null_pointer_constant): Likewise.\n\t(cxx_print_error_function): Likewise.\n\t(decl_in_std_namespace_p): Likewise.\n\t(merge_exception_specifiers): Likewise.\n\t(mangle_module_global_init): Likewise.\n\t(cxx_block_may_fallthru): Likewise.\n\t(fold_builtin_source_location): Likewise.\n\t(enum cp_oracle_request): Likewise.\n\t(subsumes): Likewise.\n\t(cp_finish_injected_record_type): Likewise.\n\t(vtv_build_vtable_verify_fndecl): Likewise.\n\t(cp_tree_c_finish_parsing): Likewise.\n\t* cvt.cc (diagnose_ref_binding): Likewise.\n\t(convert_to_void): Likewise.\n\t(convert_force): Likewise.\n\t(type_promotes_to): Likewise.\n\t* decl.cc (make_unbound_class_template_raw): Likewise.\n\t(cxx_init_decl_processing): Likewise.\n\t(check_class_member_definition_namespace): Likewise.\n\t(cxx_maybe_build_cleanup): Likewise.\n\t* decl2.cc (maybe_emit_vtables): Likewise.\n\t* error.cc (dump_function_name): Likewise.\n\t* init.cc (is_class_type): Likewise.\n\t(build_new_1): Likewise.\n\t* lang-specs.h: Likewise.\n\t* method.cc (make_alias_for_thunk): Likewise.\n\t* module.cc (specialization_add): Likewise.\n\t(module_state::read_cluster): Likewise.\n\t* name-lookup.cc (check_extern_c_conflict): Likewise.\n\t* name-lookup.h (struct cxx_binding): Likewise.\n\t* parser.cc (cp_parser_identifier): Likewise.\n\t* parser.h (struct cp_parser): Likewise.\n\t* pt.cc (has_value_dependent_address): Likewise.\n\t(push_tinst_level_loc): Likewise.\n\t* semantics.cc (finish_omp_clauses): Likewise.\n\t(finish_omp_atomic): Likewise.\n\t* tree.cc (cp_save_expr): Likewise.\n\t(cp_free_lang_data): Likewise.\n\t* typeck.cc (cp_common_type): Likewise.\n\t(strip_array_domain): Likewise.\n\t(rationalize_conditional_expr): Likewise.\n\t(check_return_expr): Likewise.\n\t* vtable-class-hierarchy.cc: Likewise.\n\ngcc/d/ChangeLog:\n\n\t* d-gimplify.cc: Rename .c names to .cc.\n\t* d-incpath.cc: Likewise.\n\t* lang-specs.h: Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* check.cc (gfc_check_all_any): Rename .c names to .cc.\n\t* class.cc (find_intrinsic_vtab): Likewise.\n\t* config-lang.in: Likewise.\n\t* cpp.cc (cpp_define_builtins): Likewise.\n\t* data.cc (get_array_index): Likewise.\n\t* decl.cc (match_clist_expr): Likewise.\n\t(get_proc_name): Likewise.\n\t(gfc_verify_c_interop_param): Likewise.\n\t(gfc_get_pdt_instance): Likewise.\n\t(gfc_match_formal_arglist): Likewise.\n\t(gfc_get_type_attr_spec): Likewise.\n\t* dependency.cc: Likewise.\n\t* error.cc (gfc_format_decoder): Likewise.\n\t* expr.cc (check_restricted): Likewise.\n\t(gfc_build_default_init_expr): Likewise.\n\t* f95-lang.cc: Likewise.\n\t* gfc-internals.texi: Likewise.\n\t* gfortran.h (enum match): Likewise.\n\t(enum procedure_type): Likewise.\n\t(enum oacc_routine_lop): Likewise.\n\t(gfc_get_pdt_instance): Likewise.\n\t(gfc_end_source_files): Likewise.\n\t(gfc_mpz_set_hwi): Likewise.\n\t(gfc_get_option_string): Likewise.\n\t(gfc_find_sym_in_expr): Likewise.\n\t(gfc_errors_to_warnings): Likewise.\n\t(gfc_real_4_kind): Likewise.\n\t(gfc_free_finalizer): Likewise.\n\t(gfc_sym_get_dummy_args): Likewise.\n\t(gfc_check_intrinsic_standard): Likewise.\n\t(gfc_free_case_list): Likewise.\n\t(gfc_resolve_oacc_routines): Likewise.\n\t(gfc_check_vardef_context): Likewise.\n\t(gfc_free_association_list): Likewise.\n\t(gfc_implicit_pure_function): Likewise.\n\t(gfc_ref_dimen_size): Likewise.\n\t(gfc_compare_actual_formal): Likewise.\n\t(gfc_resolve_wait): Likewise.\n\t(gfc_dt_upper_string): Likewise.\n\t(gfc_generate_module_code): Likewise.\n\t(gfc_delete_bbt): Likewise.\n\t(debug): Likewise.\n\t(gfc_build_block_ns): Likewise.\n\t(gfc_dep_difference): Likewise.\n\t(gfc_invalid_null_arg): Likewise.\n\t(gfc_is_finalizable): Likewise.\n\t(gfc_fix_implicit_pure): Likewise.\n\t(gfc_is_size_zero_array): Likewise.\n\t(gfc_is_reallocatable_lhs): Likewise.\n\t* gfortranspec.cc: Likewise.\n\t* interface.cc (compare_actual_expr): Likewise.\n\t* intrinsic.cc (add_functions): Likewise.\n\t* iresolve.cc (gfc_resolve_matmul): Likewise.\n\t(gfc_resolve_alarm_sub): Likewise.\n\t* iso-c-binding.def: Likewise.\n\t* lang-specs.h: Likewise.\n\t* libgfortran.h (GFC_STDERR_UNIT_NUMBER): Likewise.\n\t* match.cc (gfc_match_label): Likewise.\n\t(gfc_match_symbol): Likewise.\n\t(match_derived_type_spec): Likewise.\n\t(copy_ts_from_selector_to_associate): Likewise.\n\t* match.h (gfc_match_call): Likewise.\n\t(gfc_get_common): Likewise.\n\t(gfc_match_omp_end_single): Likewise.\n\t(gfc_match_volatile): Likewise.\n\t(gfc_match_bind_c): Likewise.\n\t(gfc_match_literal_constant): Likewise.\n\t(gfc_match_init_expr): Likewise.\n\t(gfc_match_array_constructor): Likewise.\n\t(gfc_match_end_interface): Likewise.\n\t(gfc_match_print): Likewise.\n\t(gfc_match_expr): Likewise.\n\t* matchexp.cc (next_operator): Likewise.\n\t* mathbuiltins.def: Likewise.\n\t* module.cc (free_true_name): Likewise.\n\t* openmp.cc (gfc_resolve_omp_parallel_blocks): Likewise.\n\t(gfc_omp_save_and_clear_state): Likewise.\n\t* parse.cc (parse_union): Likewise.\n\t(set_syms_host_assoc): Likewise.\n\t* resolve.cc (resolve_actual_arglist): Likewise.\n\t(resolve_elemental_actual): Likewise.\n\t(check_host_association): Likewise.\n\t(resolve_typebound_function): Likewise.\n\t(resolve_typebound_subroutine): Likewise.\n\t(gfc_resolve_expr): Likewise.\n\t(resolve_assoc_var): Likewise.\n\t(resolve_typebound_procedures): Likewise.\n\t(resolve_equivalence_derived): Likewise.\n\t* simplify.cc (simplify_bound): Likewise.\n\t* symbol.cc (gfc_set_default_type): Likewise.\n\t(gfc_add_ext_attribute): Likewise.\n\t* target-memory.cc (gfc_target_interpret_expr): Likewise.\n\t* target-memory.h (gfc_target_interpret_expr): Likewise.\n\t* trans-array.cc (gfc_get_cfi_dim_sm): Likewise.\n\t(gfc_conv_shift_descriptor_lbound): Likewise.\n\t(gfc_could_be_alias): Likewise.\n\t(gfc_get_dataptr_offset): Likewise.\n\t* trans-const.cc: Likewise.\n\t* trans-decl.cc (trans_function_start): Likewise.\n\t(gfc_trans_deferred_vars): Likewise.\n\t(generate_local_decl): Likewise.\n\t(gfc_generate_function_code): Likewise.\n\t* trans-expr.cc (gfc_vptr_size_get): Likewise.\n\t(gfc_trans_class_array_init_assign): Likewise.\n\t(POWI_TABLE_SIZE): Likewise.\n\t(gfc_conv_procedure_call): Likewise.\n\t(gfc_trans_arrayfunc_assign): Likewise.\n\t* trans-intrinsic.cc (gfc_conv_intrinsic_len): Likewise.\n\t(gfc_conv_intrinsic_loc): Likewise.\n\t(conv_intrinsic_event_query): Likewise.\n\t* trans-io.cc (gfc_build_st_parameter): Likewise.\n\t* trans-openmp.cc (gfc_omp_check_optional_argument): Likewise.\n\t(gfc_omp_unshare_expr_r): Likewise.\n\t(gfc_trans_omp_array_section): Likewise.\n\t(gfc_trans_omp_clauses): Likewise.\n\t* trans-stmt.cc (trans_associate_var): Likewise.\n\t(gfc_trans_deallocate): Likewise.\n\t* trans-stmt.h (gfc_trans_class_init_assign): Likewise.\n\t(gfc_trans_deallocate): Likewise.\n\t(gfc_trans_oacc_declare): Likewise.\n\t* trans-types.cc: Likewise.\n\t* trans-types.h (enum gfc_packed): Likewise.\n\t* trans.cc (N_): Likewise.\n\t(trans_code): Likewise.\n\t* trans.h (gfc_build_compare_string): Likewise.\n\t(gfc_conv_expr_type): Likewise.\n\t(gfc_trans_deferred_vars): Likewise.\n\t(getdecls): Likewise.\n\t(gfc_get_array_descr_info): Likewise.\n\t(gfc_omp_firstprivatize_type_sizes): Likewise.\n\t(GTY): Likewise.\n\ngcc/go/ChangeLog:\n\n\t* config-lang.in: Rename .c names to .cc.\n\t* go-backend.cc: Likewise.\n\t* go-lang.cc: Likewise.\n\t* gospec.cc: Likewise.\n\t* lang-specs.h: Likewise.\n\ngcc/jit/ChangeLog:\n\n\t* config-lang.in: Rename .c names to .cc.\n\t* docs/_build/texinfo/libgccjit.texi: Likewise.\n\t* docs/internals/index.rst: Likewise.\n\t* jit-builtins.cc (builtins_manager::make_builtin_function): Likewise.\n\t* jit-playback.cc (fold_const_var): Likewise.\n\t(playback::context::~context): Likewise.\n\t(new_field): Likewise.\n\t(new_bitfield): Likewise.\n\t(new_compound_type): Likewise.\n\t(playback::compound_type::set_fields): Likewise.\n\t(global_set_init_rvalue): Likewise.\n\t(load_blob_in_ctor): Likewise.\n\t(new_global_initialized): Likewise.\n\t(double>): Likewise.\n\t(new_string_literal): Likewise.\n\t(as_truth_value): Likewise.\n\t(build_call): Likewise.\n\t(playback::context::build_cast): Likewise.\n\t(new_array_access): Likewise.\n\t(new_field_access): Likewise.\n\t(dereference): Likewise.\n\t(postprocess): Likewise.\n\t(add_jump): Likewise.\n\t(add_switch): Likewise.\n\t(build_goto_operands): Likewise.\n\t(playback::context::read_dump_file): Likewise.\n\t(init_types): Likewise.\n\t* jit-recording.cc (recording::context::get_int_type): Likewise.\n\t* jit-recording.h: Likewise.\n\t* libgccjit.cc (compatible_types): Likewise.\n\t(gcc_jit_context_acquire): Likewise.\n\t(gcc_jit_context_release): Likewise.\n\t(gcc_jit_context_new_child_context): Likewise.\n\t(gcc_jit_type_as_object): Likewise.\n\t(gcc_jit_context_get_type): Likewise.\n\t(gcc_jit_context_get_int_type): Likewise.\n\t(gcc_jit_type_get_pointer): Likewise.\n\t(gcc_jit_type_get_const): Likewise.\n\t(gcc_jit_type_get_volatile): Likewise.\n\t(gcc_jit_type_dyncast_array): Likewise.\n\t(gcc_jit_type_is_bool): Likewise.\n\t(gcc_jit_type_is_pointer): Likewise.\n\t(gcc_jit_type_is_integral): Likewise.\n\t(gcc_jit_type_dyncast_vector): Likewise.\n\t(gcc_jit_type_is_struct): Likewise.\n\t(gcc_jit_vector_type_get_num_units): Likewise.\n\t(gcc_jit_vector_type_get_element_type): Likewise.\n\t(gcc_jit_type_unqualified): Likewise.\n\t(gcc_jit_type_dyncast_function_ptr_type): Likewise.\n\t(gcc_jit_function_type_get_return_type): Likewise.\n\t(gcc_jit_function_type_get_param_count): Likewise.\n\t(gcc_jit_function_type_get_param_type): Likewise.\n\t(gcc_jit_context_new_array_type): Likewise.\n\t(gcc_jit_context_new_field): Likewise.\n\t(gcc_jit_field_as_object): Likewise.\n\t(gcc_jit_context_new_struct_type): Likewise.\n\t(gcc_jit_struct_as_type): Likewise.\n\t(gcc_jit_struct_set_fields): Likewise.\n\t(gcc_jit_struct_get_field_count): Likewise.\n\t(gcc_jit_context_new_union_type): Likewise.\n\t(gcc_jit_context_new_function_ptr_type): Likewise.\n\t(gcc_jit_param_as_rvalue): Likewise.\n\t(gcc_jit_context_new_function): Likewise.\n\t(gcc_jit_function_get_return_type): Likewise.\n\t(gcc_jit_function_dump_to_dot): Likewise.\n\t(gcc_jit_block_get_function): Likewise.\n\t(gcc_jit_global_set_initializer_rvalue): Likewise.\n\t(gcc_jit_rvalue_get_type): Likewise.\n\t(gcc_jit_context_new_rvalue_from_int): Likewise.\n\t(gcc_jit_context_one): Likewise.\n\t(gcc_jit_context_new_rvalue_from_double): Likewise.\n\t(gcc_jit_context_null): Likewise.\n\t(gcc_jit_context_new_string_literal): Likewise.\n\t(valid_binary_op_p): Likewise.\n\t(gcc_jit_context_new_binary_op): Likewise.\n\t(gcc_jit_context_new_comparison): Likewise.\n\t(gcc_jit_context_new_call): Likewise.\n\t(is_valid_cast): Likewise.\n\t(gcc_jit_context_new_cast): Likewise.\n\t(gcc_jit_object_get_context): Likewise.\n\t(gcc_jit_object_get_debug_string): Likewise.\n\t(gcc_jit_lvalue_access_field): Likewise.\n\t(gcc_jit_rvalue_access_field): Likewise.\n\t(gcc_jit_rvalue_dereference_field): Likewise.\n\t(gcc_jit_rvalue_dereference): Likewise.\n\t(gcc_jit_lvalue_get_address): Likewise.\n\t(gcc_jit_lvalue_set_tls_model): Likewise.\n\t(gcc_jit_lvalue_set_link_section): Likewise.\n\t(gcc_jit_function_new_local): Likewise.\n\t(gcc_jit_block_add_eval): Likewise.\n\t(gcc_jit_block_add_assignment): Likewise.\n\t(is_bool): Likewise.\n\t(gcc_jit_block_end_with_conditional): Likewise.\n\t(gcc_jit_block_add_comment): Likewise.\n\t(gcc_jit_block_end_with_jump): Likewise.\n\t(gcc_jit_block_end_with_return): Likewise.\n\t(gcc_jit_block_end_with_void_return): Likewise.\n\t(case_range_validator::case_range_validator): Likewise.\n\t(case_range_validator::validate): Likewise.\n\t(case_range_validator::get_wide_int): Likewise.\n\t(gcc_jit_block_end_with_switch): Likewise.\n\t(gcc_jit_context_set_str_option): Likewise.\n\t(gcc_jit_context_set_int_option): Likewise.\n\t(gcc_jit_context_set_bool_option): Likewise.\n\t(gcc_jit_context_set_bool_allow_unreachable_blocks): Likewise.\n\t(gcc_jit_context_set_bool_use_external_driver): Likewise.\n\t(gcc_jit_context_add_command_line_option): Likewise.\n\t(gcc_jit_context_add_driver_option): Likewise.\n\t(gcc_jit_context_enable_dump): Likewise.\n\t(gcc_jit_context_compile): Likewise.\n\t(gcc_jit_context_compile_to_file): Likewise.\n\t(gcc_jit_context_set_logfile): Likewise.\n\t(gcc_jit_context_dump_reproducer_to_file): Likewise.\n\t(gcc_jit_context_get_first_error): Likewise.\n\t(gcc_jit_context_get_last_error): Likewise.\n\t(gcc_jit_result_get_code): Likewise.\n\t(gcc_jit_result_get_global): Likewise.\n\t(gcc_jit_rvalue_set_bool_require_tail_call): Likewise.\n\t(gcc_jit_type_get_aligned): Likewise.\n\t(gcc_jit_type_get_vector): Likewise.\n\t(gcc_jit_function_get_address): Likewise.\n\t(gcc_jit_version_patchlevel): Likewise.\n\t(gcc_jit_block_add_extended_asm): Likewise.\n\t(gcc_jit_extended_asm_as_object): Likewise.\n\t(gcc_jit_extended_asm_set_volatile_flag): Likewise.\n\t(gcc_jit_extended_asm_set_inline_flag): Likewise.\n\t(gcc_jit_extended_asm_add_output_operand): Likewise.\n\t(gcc_jit_extended_asm_add_input_operand): Likewise.\n\t(gcc_jit_extended_asm_add_clobber): Likewise.\n\t* notes.txt: Likewise.\n\ngcc/lto/ChangeLog:\n\n\t* config-lang.in: Rename .c names to .cc.\n\t* lang-specs.h: Likewise.\n\t* lto-common.cc (gimple_register_canonical_type_1): Likewise.\n\t* lto-common.h: Likewise.\n\t* lto-dump.cc (lto_main): Likewise.\n\t* lto-lang.cc (handle_fnspec_attribute): Likewise.\n\t(lto_getdecls): Likewise.\n\t(lto_init): Likewise.\n\t* lto.cc (lto_main): Likewise.\n\t* lto.h: Likewise.\n\ngcc/objc/ChangeLog:\n\n\t* Make-lang.in: Rename .c names to .cc.\n\t* config-lang.in: Likewise.\n\t* lang-specs.h: Likewise.\n\t* objc-act.cc (objc_build_component_ref): Likewise.\n\t(objc_copy_binfo): Likewise.\n\t(lookup_method_in_hash_lists): Likewise.\n\t(objc_finish_foreach_loop): Likewise.\n\t* objc-act.h (objc_common_init_ts): Likewise.\n\t* objc-gnu-runtime-abi-01.cc: Likewise.\n\t* objc-lang.cc (struct lang_hooks): Likewise.\n\t* objc-map.cc: Likewise.\n\t* objc-next-runtime-abi-01.cc (generate_objc_symtab_decl): Likewise.\n\t* objc-runtime-shared-support.cc: Likewise.\n\t* objc-runtime-shared-support.h (build_protocol_initializer): Likewise.\n\ngcc/objcp/ChangeLog:\n\n\t* Make-lang.in: Rename .c names to .cc.\n\t* config-lang.in: Likewise.\n\t* lang-specs.h: Likewise.\n\t* objcp-decl.cc (objcp_end_compound_stmt): Likewise.\n\t* objcp-lang.cc (struct lang_hooks): Likewise.\n\ngcc/po/ChangeLog:\n\n\t* EXCLUDES: Rename .c names to .cc.\n\nlibcpp/ChangeLog:\n\n\t* Makefile.in: Rename .c names to .cc.\n\t* charset.cc (convert_escape): Likewise.\n\t* directives.cc (directive_diagnostics): Likewise.\n\t(_cpp_handle_directive): Likewise.\n\t(lex_macro_node): Likewise.\n\t* include/cpplib.h (struct _cpp_file): Likewise.\n\t(PURE_ZERO): Likewise.\n\t(cpp_defined): Likewise.\n\t(cpp_error_at): Likewise.\n\t(cpp_forall_identifiers): Likewise.\n\t(cpp_compare_macros): Likewise.\n\t(cpp_get_converted_source): Likewise.\n\t(cpp_read_state): Likewise.\n\t(cpp_directive_only_process): Likewise.\n\t(struct cpp_decoded_char): Likewise.\n\t* include/line-map.h (enum lc_reason): Likewise.\n\t(enum location_aspect): Likewise.\n\t* include/mkdeps.h: Likewise.\n\t* init.cc (cpp_destroy): Likewise.\n\t(cpp_finish): Likewise.\n\t* internal.h (struct cpp_reader): Likewise.\n\t(_cpp_defined_macro_p): Likewise.\n\t(_cpp_backup_tokens_direct): Likewise.\n\t(_cpp_destroy_hashtable): Likewise.\n\t(_cpp_has_header): Likewise.\n\t(_cpp_expand_op_stack): Likewise.\n\t(_cpp_commit_buff): Likewise.\n\t(_cpp_restore_special_builtin): Likewise.\n\t(_cpp_bracket_include): Likewise.\n\t(_cpp_replacement_text_len): Likewise.\n\t(ufputs): Likewise.\n\t* line-map.cc (linemap_macro_loc_to_exp_point): Likewise.\n\t(linemap_check_files_exited): Likewise.\n\t(line_map_new_raw): Likewise.\n\t* traditional.cc (enum ls): Likewise.", "tree": {"sha": "8d5d65605938fa519188d039c47a7d3f02bb9aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5d65605938fa519188d039c47a7d3f02bb9aee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53b6e564aab615703ff2f9e8406a3953f0a3785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53b6e564aab615703ff2f9e8406a3953f0a3785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53b6e564aab615703ff2f9e8406a3953f0a3785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53b6e564aab615703ff2f9e8406a3953f0a3785/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c69acb32329d49e58c26fa41ae74229a52b9106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c69acb32329d49e58c26fa41ae74229a52b9106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c69acb32329d49e58c26fa41ae74229a52b9106"}], "stats": {"total": 5390, "additions": 2695, "deletions": 2695}, "files": [{"sha": "399de26506573fef6633e8de086fa0cc8a50ea9e", "filename": "MAINTAINERS", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -192,7 +192,7 @@ scheduler (+ haifa)\tJeff Law\t\t<jeffreyalaw@gmail.com>\n scheduler (+ haifa)\tVladimir Makarov\t<vmakarov@redhat.com>\n modulo-scheduler\tRoman Zhuykov\t\t<zhroma@ispras.ru>\n reorg\t\t\tJeff Law\t\t<jeffreyalaw@gmail.com>\n-caller-save.c\t\tJeff Law\t\t<jeffreyalaw@gmail.com>\n+caller-save.cc\t\tJeff Law\t\t<jeffreyalaw@gmail.com>\n callgraph\t\tJan Hubicka\t\t<hubicka@ucw.cz>\n debugging code\t\tJim Wilson\t\t<wilson@tuliptree.org>\n dwarf debugging code\tJason Merrill\t\t<jason@redhat.com>\n@@ -206,9 +206,9 @@ fixincludes\t\tBruce Korb\t\t<bkorb@gnu.org>\n *gimpl*\t\t\tJakub Jelinek\t\t<jakub@redhat.com>\n *gimpl*\t\t\tAldy Hernandez\t\t<aldyh@redhat.com>\n *gimpl*\t\t\tJason Merrill\t\t<jason@redhat.com>\n-gcse.c\t\t\tJeff Law\t\t<jeffreyalaw@gmail.com>\n+gcse.cc\t\t\tJeff Law\t\t<jeffreyalaw@gmail.com>\n global opt framework\tJeff Law\t\t<jeffreyalaw@gmail.com>\n-jump.c\t\t\tDavid S. Miller\t\t<davem@redhat.com>\n+jump.cc\t\t\tDavid S. Miller\t\t<davem@redhat.com>\n web pages\t\tGerald Pfeifer\t\t<gerald@pfeifer.com>\n config.sub/config.guess\tBen Elliston\t\t<config-patches@gnu.org>\n i18n\t\t\tPhilipp Thomas\t\t<pth@suse.de>\n@@ -288,10 +288,10 @@ Fortran\t\t\tJanus Weil\t\t<janus@gcc.gnu.org>\n Graphite\t\tTobias Grosser\t\t<grosser@fim.uni-passau.de>\n Graphite\t\tSebastian Pop\t\t<sebpop@gmail.com>\n libcpp\t\t\tTom Tromey\t\t<tromey@redhat.com>\n-libsanitizer, asan.c\tJakub Jelinek\t\t<jakub@redhat.com>\n-libsanitizer, asan.c\tDodji Seketeli\t\t<dodji@redhat.com>\n-libsanitizer, asan.c\tKostya Serebryany\t<kcc@google.com>\n-libsanitizer, asan.c\tDmitry Vyukov\t\t<dvyukov@google.com>\n+libsanitizer, asan.cc\tJakub Jelinek\t\t<jakub@redhat.com>\n+libsanitizer, asan.cc\tDodji Seketeli\t\t<dodji@redhat.com>\n+libsanitizer, asan.cc\tKostya Serebryany\t<kcc@google.com>\n+libsanitizer, asan.cc\tDmitry Vyukov\t\t<dvyukov@google.com>\n loop optimizer\t\tZdenek Dvorak\t\t<ook@ucw.cz>\n LTO\t\t\tRichard Biener\t\t<rguenther@suse.de>\n LTO plugin\t\tCary Coutant\t\t<ccoutant@gmail.com>"}, {"sha": "43557c30eec7b86ee4e9767429926ea2dec64b20", "filename": "contrib/filter-clang-warnings.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Ffilter-clang-warnings.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Ffilter-clang-warnings.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffilter-clang-warnings.py?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -39,17 +39,17 @@ def skip_warning(filename, message):\n                  '-Wignored-attributes', '-Wgnu-zero-variadic-macro-arguments',\n                  '-Wformat-security', '-Wundefined-internal',\n                  '-Wunknown-warning-option', '-Wc++20-extensions'],\n-            'insn-modes.c': ['-Wshift-count-overflow'],\n-            'insn-emit.c': ['-Wtautological-compare'],\n-            'insn-attrtab.c': ['-Wparentheses-equality'],\n-            'gimple-match.c': ['-Wunused-', '-Wtautological-compare'],\n-            'generic-match.c': ['-Wunused-', '-Wtautological-compare'],\n+            'insn-modes.cc': ['-Wshift-count-overflow'],\n+            'insn-emit.cc': ['-Wtautological-compare'],\n+            'insn-attrtab.cc': ['-Wparentheses-equality'],\n+            'gimple-match.cc': ['-Wunused-', '-Wtautological-compare'],\n+            'generic-match.cc': ['-Wunused-', '-Wtautological-compare'],\n             'i386.md': ['-Wparentheses-equality', '-Wtautological-compare',\n                         '-Wtautological-overlap-compare'],\n             'sse.md': ['-Wparentheses-equality', '-Wtautological-compare'],\n             'mmx.md': ['-Wtautological-compare'],\n-            'genautomata.c': ['-Wstring-plus-int'],\n-            'fold-const-call.c': ['-Wreturn-type'],\n+            'genautomata.cc': ['-Wstring-plus-int'],\n+            'fold-const-call.cc': ['-Wreturn-type'],\n             'gfortran.texi': [''],\n             'libtool': ['']\n     }"}, {"sha": "1cf15f9b3c2a600c3835f0e159cac2ab10b0fc2c", "filename": "contrib/gcc_update", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -90,8 +90,8 @@ gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh\n gcc/config/rs6000/fusion.md: gcc/config/rs6000/genfusion.pl\n-gcc/config/tilegx/mul-tables.c: gcc/config/tilepro/gen-mul-tables.cc\n-gcc/config/tilepro/mul-tables.c: gcc/config/tilepro/gen-mul-tables.cc\n+gcc/config/tilegx/mul-tables.cc: gcc/config/tilepro/gen-mul-tables.cc\n+gcc/config/tilepro/mul-tables.cc: gcc/config/tilepro/gen-mul-tables.cc\n # And then, language-specific files\n gcc/cp/cfns.h: gcc/cp/cfns.gperf\n # testsuite\n@@ -239,7 +239,7 @@ apply_patch () {\n }\n \n # Check whether this indeed looks like a local tree.\n-if [ ! -f gcc/reload.c ]; then\n+if [ ! -f gcc/reload.cc ]; then\n     echo \"This does not seem to be a GCC tree!\"\n     exit\n fi"}, {"sha": "f4eee329b333768c12dac896ed38041539eeff0d", "filename": "contrib/header-tools/README", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fheader-tools%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fheader-tools%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fheader-tools%2FREADME?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -14,7 +14,7 @@ ie.:     tool -lfilename.h  target.h\n containing coretypes.h.  Typically that is in gcc/gcc from a source checkout.\n For these tools to work on files not in this directory, their path needs to be\n specified on the command line.\n-ie.:     tool c/c-decl.c  lto/lto.c\n+ie.:     tool c/c-decl.cc  lto/lto.cc\n \n - options can be intermixed with filenames anywhere on the command line\n ie.   tool ssa.h rtl.h -a   is equivalent to \n@@ -39,7 +39,7 @@ gcc-order-headers\n   Any files which are changed are output, and the original is saved with a\n   .bak extention.\n \n-  ex.:     gcc-order-headers tree-ssa.c c/c-decl.c\n+  ex.:     gcc-order-headers tree-ssa.cc c/c-decl.cc\n \n   -s will list all of the known headers in their canonical order. It does not\n   show which of those headers include other headers, just the final canonical\n@@ -67,8 +67,8 @@ show-headers\n \n   This tool must be run in the core gcc source directory.\n \n-  ex.: show-headers -sansidecl.h tree-ssa.c\n-\ttree-ssa.c\n+  ex.: show-headers -sansidecl.h tree-ssa.cc\n+\ttree-ssa.cc\n \t  config.h\n \t    auto-host.h\n \t    ansidecl.h  (1)               <<-------\n@@ -124,13 +124,13 @@ included-by\n      check rather than performing the much slower find command.\n \n   ex: included-by tree-vectorizer.h\n-\tconfig/aarch64/aarch64.c\n-\tconfig/i386/i386.c\n-\tconfig/rs6000/rs6000.c\n-\ttree-loop-distribution.c\n-\ttree-parloops.c\n-\ttree-ssa-loop-ivopts.c\n-\ttree-ssa-loop.c\n+\tconfig/aarch64/aarch64.cc\n+\tconfig/i386/i386.cc\n+\tconfig/rs6000/rs6000.cc\n+\ttree-loop-distribution.cc\n+\ttree-parloops.cc\n+\ttree-ssa-loop-ivopts.cc\n+\ttree-ssa-loop.cc\n \n \n \n@@ -219,8 +219,8 @@ reduce-headers\n   reduce-headers -b../../build -t../../targets -falias.h -fexpr.h tree*.c  (1)\n        #  This will attempt to remove only alias.h and expr.h from tree*.c\n \n-  reduce-headers -b../../build -t../../targets tree-ssa-live.c\n-       #  This will attempt to remove all header files from tree-ssa-live.c\n+  reduce-headers -b../../build -t../../targets tree-ssa-live.cc\n+       #  This will attempt to remove all header files from tree-ssa-live.cc\n   \n \n   the tool will generate a number of log files:\n@@ -240,14 +240,14 @@ reduce-headers\n     $header.h.log: The same log is put into the relevant header log as well.\n \n \n-a sample output from ira.c.log:\n+a sample output from ira.cc.log:\n \n Compilation failed:\n  for shrink-wrap.h:\n \n  ============================================\n- /gcc/2015-09-09/gcc/gcc/ira.c: In function \u2018bool split_live_ranges_for_shrink_wrap()\u2019:\n- /gcc/2015-09-09/gcc/gcc/ira.c:4839:8: error: \u2018SHRINK_WRAPPING_ENABLED\u2019 was not declared in this scope\n+ /gcc/2015-09-09/gcc/gcc/ira.cc: In function \u2018bool split_live_ranges_for_shrink_wrap()\u2019:\n+ /gcc/2015-09-09/gcc/gcc/ira.cc:4839:8: error: \u2018SHRINK_WRAPPING_ENABLED\u2019 was not declared in this scope\n     if (!SHRINK_WRAPPING_ENABLED)\n             ^\n \t    make: *** [ira.o] Error 1\n@@ -280,4 +280,4 @@ graph-include-web\n   useful for finding cycles and redundancies, or simply to see what a single\n   file looks like.\n \n-  ex.: graph-include-web tree.c\n+  ex.: graph-include-web tree.cc"}, {"sha": "a7821c426034eff1150d81dcb3b910a970507f01", "filename": "contrib/paranoia.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fparanoia.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/contrib%2Fparanoia.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fparanoia.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -185,7 +185,7 @@ static int verbose_index = 0;\n \n /* ====================================================================== */\n /* The implementation of the abstract floating point class based on gcc's\n-   real.c.  I.e. the object of this exercise.  Templated so that we can\n+   real.cc.  I.e. the object of this exercise.  Templated so that we can\n    all fp sizes.  */\n \n class real_c_float"}, {"sha": "e13bf66b0405ca36f09bb57ffd6d852f6a91ac4b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 142, "deletions": 142, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -889,7 +889,7 @@ PATCHLEVEL_c := \\\n   $(shell echo $(BASEVER_c) | sed -e 's/^[0-9]*\\.[0-9]*\\.\\([0-9]*\\)$$/\\1/')\n \n \n-# For use in version.c - double quoted strings, with appropriate\n+# For use in version.cc - double quoted strings, with appropriate\n # surrounding punctuation and spaces, and with the datestamp and\n # development phase collapsed to the empty string in release mode\n # (i.e. if DEVPHASE_c is empty and PATCHLEVEL_c is 0).  The space\n@@ -1771,12 +1771,12 @@ TREECHECKING = @TREECHECKING@\n FULL_DRIVER_NAME=$(target_noncanonical)-gcc-$(version)$(exeext)\n \n MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n- insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n- insn-attr.h insn-attr-common.h insn-attrtab.c insn-dfatab.c \\\n- insn-latencytab.c insn-opinit.c insn-opinit.h insn-preds.c insn-constants.h \\\n- tm-preds.h tm-constrs.h checksum-options gimple-match.c generic-match.c \\\n- tree-check.h min-insn-modes.c insn-modes.c insn-modes.h insn-modes-inline.h \\\n- genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n+ insn-output.cc insn-recog.cc insn-emit.cc insn-extract.cc insn-peep.cc \\\n+ insn-attr.h insn-attr-common.h insn-attrtab.cc insn-dfatab.cc \\\n+ insn-latencytab.cc insn-opinit.cc insn-opinit.h insn-preds.cc insn-constants.h \\\n+ tm-preds.h tm-constrs.h checksum-options gimple-match.cc generic-match.cc \\\n+ tree-check.h min-insn-modes.cc insn-modes.cc insn-modes.h insn-modes-inline.h \\\n+ genrtl.h gt-*.h gtype-*.h gtype-desc.cc gtyp-input.list \\\n  case-cfn-macros.h cfn-operators.pd \\\n  xgcc$(exeext) cpp$(exeext) $(FULL_DRIVER_NAME) \\\n  $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n@@ -2214,7 +2214,7 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \n srcextra: gcc.srcextra lang.srcextra\n \n-gcc.srcextra: gengtype-lex.c\n+gcc.srcextra: gengtype-lex.cc\n \t-cp -p $^ $(srcdir)\n \n AR_OBJS = file-find.o\n@@ -2246,10 +2246,10 @@ CFLAGS-gcc-nm.o += $(DRIVER_DEFINES) \\\n \n # ??? the implicit rules dont trigger if the source file has a different name\n # so copy instead\n-gcc-ranlib.c: gcc-ar.c\n+gcc-ranlib.cc: gcc-ar.cc\n \tcp $^ $@\n \n-gcc-nm.c: gcc-ar.c\n+gcc-nm.cc: gcc-ar.cc\n \tcp $^ $@\n \n COLLECT2_OBJS = collect2.o collect2-aix.o vec.o ggc-none.o \\\n@@ -2277,7 +2277,7 @@ CFLAGS-c-family/c-opts.o += @TARGET_SYSTEM_ROOT_DEFINE@\n CFLAGS-c-family/c-pch.o += -DHOST_MACHINE=\\\"$(host)\\\" \\\n \t-DTARGET_MACHINE=\\\"$(target)\\\"\n \n-default-c.o: config/default-c.c\n+default-c.o: config/default-c.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n@@ -2288,7 +2288,7 @@ prefix.o: $(BASEVER)\n \n # Files used by the D language front end.\n \n-default-d.o: config/default-d.c\n+default-d.o: config/default-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n@@ -2329,13 +2329,13 @@ s-options: $(ALL_OPT_FILES) Makefile $(srcdir)/opt-gather.awk\n \t$(SHELL) $(srcdir)/../move-if-change tmp-optionlist optionlist\n \t$(STAMP) s-options\n \n-options.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n+options.cc: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n     $(srcdir)/optc-gen.awk\n \t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \\\n \t       -f $(srcdir)/optc-gen.awk \\\n \t       -v header_name=\"config.h system.h coretypes.h options.h tm.h\" < $< > $@\n \n-options-save.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n+options-save.cc: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n     $(srcdir)/optc-save-gen.awk\n \t$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \\\n \t       -f $(srcdir)/optc-save-gen.awk \\\n@@ -2350,7 +2350,7 @@ s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n \t$(SHELL) $(srcdir)/../move-if-change tmp-options.h options.h\n \t$(STAMP) $@\n \n-dumpvers: dumpvers.c\n+dumpvers: dumpvers.cc\n \n # lto-compress.o needs $(ZLIBINC) added to the include flags.\n CFLAGS-lto-compress.o += $(ZLIBINC) $(ZSTD_INC)\n@@ -2386,9 +2386,9 @@ $(common_out_object_file): $(common_out_file)\n # and compile them.\n \n .PRECIOUS: insn-config.h insn-flags.h insn-codes.h insn-constants.h \\\n-  insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \\\n-  insn-attr.h insn-attr-common.h insn-attrtab.c insn-dfatab.c \\\n-  insn-latencytab.c insn-preds.c gimple-match.c generic-match.c \\\n+  insn-emit.cc insn-recog.cc insn-extract.cc insn-output.cc insn-peep.cc \\\n+  insn-attr.h insn-attr-common.h insn-attrtab.cc insn-dfatab.cc \\\n+  insn-latencytab.cc insn-preds.cc gimple-match.cc generic-match.cc \\\n   insn-target-def.h\n \n # Dependencies for the md file.  The first time through, we just assume\n@@ -2412,13 +2412,13 @@ s-mddeps: $(md_file) $(MD_INCLUDES) build/genmddeps$(build_exeext)\n simple_rtl_generated_h\t= insn-attr.h insn-attr-common.h insn-codes.h \\\n \t\t\t  insn-config.h insn-flags.h insn-target-def.h\n \n-simple_rtl_generated_c\t= insn-automata.c insn-emit.c \\\n-\t\t\t  insn-extract.c insn-output.c \\\n-\t\t\t  insn-peep.c insn-recog.c\n+simple_rtl_generated_c\t= insn-automata.cc insn-emit.cc \\\n+\t\t\t  insn-extract.cc insn-output.cc \\\n+\t\t\t  insn-peep.cc insn-recog.cc\n \n simple_generated_h\t= $(simple_rtl_generated_h) insn-constants.h\n \n-simple_generated_c\t= $(simple_rtl_generated_c) insn-enums.c\n+simple_generated_c\t= $(simple_rtl_generated_c) insn-enums.cc\n \n $(simple_generated_h:insn-%.h=s-%) \\\n $(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS)\n@@ -2450,30 +2450,30 @@ s-check : build/gencheck$(build_exeext)\n \t$(STAMP) s-check\n \n # genattrtab produces three files: tmp-{attrtab.c,dfatab.c,latencytab.c}\n-insn-attrtab.c insn-dfatab.c insn-latencytab.c: s-attrtab ; @true\n+insn-attrtab.cc insn-dfatab.cc insn-latencytab.cc: s-attrtab ; @true\n s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext) \\\n   insn-conditions.md\n \t$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) insn-conditions.md \\\n \t\t-Atmp-attrtab.c -Dtmp-dfatab.c -Ltmp-latencytab.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.c    insn-attrtab.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-dfatab.c     insn-dfatab.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-latencytab.c insn-latencytab.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.cc    insn-attrtab.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-dfatab.cc     insn-dfatab.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-latencytab.cc insn-latencytab.cc\n \t$(STAMP) s-attrtab\n \n # genopinit produces two files.\n-insn-opinit.c insn-opinit.h: s-opinit ; @true\n+insn-opinit.cc insn-opinit.h: s-opinit ; @true\n s-opinit: $(MD_DEPS) build/genopinit$(build_exeext) insn-conditions.md\n \t$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) \\\n \t  insn-conditions.md -htmp-opinit.h -ctmp-opinit.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.h insn-opinit.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.c insn-opinit.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.cc insn-opinit.cc\n \t$(STAMP) s-opinit\n \n # gencondmd doesn't use the standard naming convention.\n-build/gencondmd.c: s-conditions; @true\n+build/gencondmd.cc: s-conditions; @true\n s-conditions: $(MD_DEPS) build/genconditions$(build_exeext)\n \t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-condmd.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-condmd.c build/gencondmd.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-condmd.c build/gencondmd.cc\n \t$(STAMP) s-conditions\n \n insn-conditions.md: s-condmd; @true\n@@ -2493,14 +2493,14 @@ s-genrtl-h: build/gengenrtl$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h\n \t$(STAMP) s-genrtl-h\n \n-insn-modes.c: s-modes; @true\n+insn-modes.cc: s-modes; @true\n insn-modes.h: s-modes-h; @true\n insn-modes-inline.h: s-modes-inline-h; @true\n-min-insn-modes.c: s-modes-m; @true\n+min-insn-modes.cc: s-modes-m; @true\n \n s-modes: build/genmodes$(build_exeext)\n \t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.cc\n \t$(STAMP) s-modes\n \n s-modes-h: build/genmodes$(build_exeext)\n@@ -2516,10 +2516,10 @@ s-modes-inline-h: build/genmodes$(build_exeext)\n \n s-modes-m: build/genmodes$(build_exeext)\n \t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.cc\n \t$(STAMP) s-modes-m\n \n-insn-preds.c: s-preds; @true\n+insn-preds.cc: s-preds; @true\n tm-preds.h: s-preds-h; @true\n tm-constrs.h: s-constrs-h; @true\n \n@@ -2529,7 +2529,7 @@ mddump: $(BUILD_RTL) $(MD_DEPS) build/genmddump$(build_exeext)\n \n s-preds: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.cc\n \t$(STAMP) s-preds\n \n s-preds-h: $(MD_DEPS) build/genpreds$(build_exeext)\n@@ -2631,25 +2631,25 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n \t  false; \\\n \tfi\n \n-gimple-match.c: s-match gimple-match-head.c ; @true\n-generic-match.c: s-match generic-match-head.c ; @true\n+gimple-match.cc: s-match gimple-match-head.cc ; @true\n+generic-match.cc: s-match generic-match-head.cc ; @true\n \n s-match: build/genmatch$(build_exeext) $(srcdir)/match.pd cfn-operators.pd\n \t$(RUN_GEN) build/genmatch$(build_exeext) --gimple $(srcdir)/match.pd \\\n-\t    > tmp-gimple-match.c\n+\t    > tmp-gimple-match.cc\n \t$(RUN_GEN) build/genmatch$(build_exeext) --generic $(srcdir)/match.pd \\\n-\t    > tmp-generic-match.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-gimple-match.c \\\n-\t    \t\t\t\t\tgimple-match.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-generic-match.c \\\n-\t    \t\t\t\t\tgeneric-match.c\n+\t    > tmp-generic-match.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-gimple-match.cc \\\n+\t    \t\t\t\t\tgimple-match.cc\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-generic-match.cc \\\n+\t    \t\t\t\t\tgeneric-match.cc\n \t$(STAMP) s-match\n \n GTFILES = $(CPPLIB_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(host_xm_file_list) \\\n   $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \\\n   $(srcdir)/wide-int.h $(srcdir)/alias.h \\\n-  $(srcdir)/coverage.c  $(srcdir)/rtl.h \\\n+  $(srcdir)/coverage.cc  $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/tree-core.h \\\n   $(srcdir)/libfuncs.h $(SYMTAB_H) \\\n   $(srcdir)/real.h $(srcdir)/function.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n@@ -2659,70 +2659,70 @@ GTFILES = $(CPPLIB_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/ipa-ref.h $(srcdir)/cgraph.h \\\n   $(srcdir)/symtab-thunks.h $(srcdir)/symtab-thunks.cc \\\n   $(srcdir)/symtab-clones.h \\\n-  $(srcdir)/reload.h $(srcdir)/caller-save.c $(srcdir)/symtab.c \\\n-  $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n-  $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c $(srcdir)/ipa-utils.h \\\n-  $(srcdir)/ipa-param-manipulation.h $(srcdir)/ipa-sra.c $(srcdir)/dbxout.c \\\n-  $(srcdir)/ipa-modref.h $(srcdir)/ipa-modref.c \\\n+  $(srcdir)/reload.h $(srcdir)/caller-save.cc $(srcdir)/symtab.cc \\\n+  $(srcdir)/alias.cc $(srcdir)/bitmap.cc $(srcdir)/cselib.cc $(srcdir)/cgraph.cc \\\n+  $(srcdir)/ipa-prop.cc $(srcdir)/ipa-cp.cc $(srcdir)/ipa-utils.h \\\n+  $(srcdir)/ipa-param-manipulation.h $(srcdir)/ipa-sra.cc $(srcdir)/dbxout.cc \\\n+  $(srcdir)/ipa-modref.h $(srcdir)/ipa-modref.cc \\\n   $(srcdir)/ipa-modref-tree.h \\\n   $(srcdir)/signop.h \\\n-  $(srcdir)/diagnostic-spec.h $(srcdir)/diagnostic-spec.c \\\n+  $(srcdir)/diagnostic-spec.h $(srcdir)/diagnostic-spec.cc \\\n   $(srcdir)/dwarf2out.h \\\n-  $(srcdir)/dwarf2asm.c \\\n-  $(srcdir)/dwarf2cfi.c \\\n-  $(srcdir)/dwarf2ctf.c \\\n-  $(srcdir)/dwarf2out.c \\\n+  $(srcdir)/dwarf2asm.cc \\\n+  $(srcdir)/dwarf2cfi.cc \\\n+  $(srcdir)/dwarf2ctf.cc \\\n+  $(srcdir)/dwarf2out.cc \\\n   $(srcdir)/ctfc.h \\\n-  $(srcdir)/ctfout.c \\\n-  $(srcdir)/btfout.c \\\n-  $(srcdir)/tree-vect-generic.c \\\n+  $(srcdir)/ctfout.cc \\\n+  $(srcdir)/btfout.cc \\\n+  $(srcdir)/tree-vect-generic.cc \\\n   $(srcdir)/gimple-isel.cc \\\n-  $(srcdir)/dojump.c $(srcdir)/emit-rtl.h \\\n-  $(srcdir)/emit-rtl.c $(srcdir)/except.h $(srcdir)/explow.c $(srcdir)/expr.c \\\n+  $(srcdir)/dojump.cc $(srcdir)/emit-rtl.h \\\n+  $(srcdir)/emit-rtl.cc $(srcdir)/except.h $(srcdir)/explow.cc $(srcdir)/expr.cc \\\n   $(srcdir)/expr.h \\\n-  $(srcdir)/function.c $(srcdir)/except.c \\\n-  $(srcdir)/ggc-tests.c \\\n-  $(srcdir)/gcse.c $(srcdir)/godump.c \\\n-  $(srcdir)/lists.c $(srcdir)/optabs-libfuncs.c \\\n-  $(srcdir)/profile.c $(srcdir)/mcf.c \\\n-  $(srcdir)/reg-stack.c $(srcdir)/cfgrtl.c \\\n-  $(srcdir)/stor-layout.c \\\n-  $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n+  $(srcdir)/function.cc $(srcdir)/except.cc \\\n+  $(srcdir)/ggc-tests.cc \\\n+  $(srcdir)/gcse.cc $(srcdir)/godump.cc \\\n+  $(srcdir)/lists.cc $(srcdir)/optabs-libfuncs.cc \\\n+  $(srcdir)/profile.cc $(srcdir)/mcf.cc \\\n+  $(srcdir)/reg-stack.cc $(srcdir)/cfgrtl.cc \\\n+  $(srcdir)/stor-layout.cc \\\n+  $(srcdir)/stringpool.cc $(srcdir)/tree.cc $(srcdir)/varasm.cc \\\n   $(srcdir)/gimple.h \\\n   $(srcdir)/gimple-ssa.h \\\n-  $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n-  $(srcdir)/tree-cfg.c $(srcdir)/tree-ssa-loop-ivopts.c \\\n-  $(srcdir)/tree-dfa.c \\\n-  $(srcdir)/tree-iterator.c $(srcdir)/gimple-expr.c \\\n+  $(srcdir)/tree-ssanames.cc $(srcdir)/tree-eh.cc $(srcdir)/tree-ssa-address.cc \\\n+  $(srcdir)/tree-cfg.cc $(srcdir)/tree-ssa-loop-ivopts.cc \\\n+  $(srcdir)/tree-dfa.cc \\\n+  $(srcdir)/tree-iterator.cc $(srcdir)/gimple-expr.cc \\\n   $(srcdir)/tree-chrec.h \\\n-  $(srcdir)/tree-scalar-evolution.c \\\n+  $(srcdir)/tree-scalar-evolution.cc \\\n   $(srcdir)/tree-ssa-operands.h \\\n-  $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \\\n+  $(srcdir)/tree-profile.cc $(srcdir)/tree-nested.cc \\\n   $(srcdir)/omp-offload.h \\\n-  $(srcdir)/omp-general.c \\\n-  $(srcdir)/omp-low.c \\\n-  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c \\\n-  $(srcdir)/cgraphclones.c \\\n-  $(srcdir)/tree-phinodes.c \\\n+  $(srcdir)/omp-general.cc \\\n+  $(srcdir)/omp-low.cc \\\n+  $(srcdir)/targhooks.cc $(out_file) $(srcdir)/passes.cc \\\n+  $(srcdir)/cgraphclones.cc \\\n+  $(srcdir)/tree-phinodes.cc \\\n   $(srcdir)/tree-ssa-alias.h \\\n   $(srcdir)/tree-ssanames.h \\\n   $(srcdir)/tree-vrp.h \\\n   $(srcdir)/value-range.h \\\n   $(srcdir)/ipa-prop.h \\\n-  $(srcdir)/trans-mem.c \\\n+  $(srcdir)/trans-mem.cc \\\n   $(srcdir)/lto-streamer.h \\\n   $(srcdir)/target-globals.h \\\n   $(srcdir)/ipa-predicate.h \\\n   $(srcdir)/ipa-fnsummary.h \\\n-  $(srcdir)/vtable-verify.c \\\n-  $(srcdir)/asan.c \\\n-  $(srcdir)/ubsan.c \\\n-  $(srcdir)/tsan.c \\\n-  $(srcdir)/sanopt.c \\\n-  $(srcdir)/sancov.c \\\n-  $(srcdir)/ipa-devirt.c \\\n+  $(srcdir)/vtable-verify.cc \\\n+  $(srcdir)/asan.cc \\\n+  $(srcdir)/ubsan.cc \\\n+  $(srcdir)/tsan.cc \\\n+  $(srcdir)/sanopt.cc \\\n+  $(srcdir)/sancov.cc \\\n+  $(srcdir)/ipa-devirt.cc \\\n   $(srcdir)/internal-fn.h \\\n-  $(srcdir)/calls.c \\\n+  $(srcdir)/calls.cc \\\n   $(srcdir)/omp-general.h \\\n   @all_gtfiles@\n \n@@ -2745,7 +2745,7 @@ ALL_GTFILES_H := $(sort $(GTFILES_H) $(GTFILES_LANG_H))\n # write it out to a file (taking care not to do that in a way that\n # overflows a command line!) and then have gengtype read the file in.\n \n-$(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gtype.state: s-gtype ; @true\n+$(ALL_GTFILES_H) gtype-desc.cc gtype-desc.h gtype.state: s-gtype ; @true\n \n ### Common flags to gengtype [e.g. -v or -B backupdir]\n GENGTYPE_FLAGS= \n@@ -2772,10 +2772,10 @@ generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_H) multilib.h \\\n        $(simple_generated_h) specs.h \\\n        tree-check.h genrtl.h insn-modes.h insn-modes-inline.h \\\n        tm-preds.h tm-constrs.h \\\n-       $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h version.h \\\n+       $(ALL_GTFILES_H) gtype-desc.cc gtype-desc.h version.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n-       gimple-match.c generic-match.c \\\n+       gimple-match.cc generic-match.cc \\\n        c-family/c-target-hooks-def.h d/d-target-hooks-def.h \\\n        case-cfn-macros.h \\\n        cfn-operators.pd omp-device-properties.h\n@@ -2789,77 +2789,77 @@ build/%.o :  # dependencies provided by explicit rule later\n \n # Header dependencies for the programs that generate source code.\n # These are library modules...\n-build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n-build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) \t\t\\\n+build/errors.o : errors.cc $(BCONFIG_H) $(SYSTEM_H) errors.h\n+build/gensupport.o: gensupport.cc $(BCONFIG_H) $(SYSTEM_H) \t\t\\\n   $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h\t\t\\\n   $(HASHTAB_H) $(READ_MD_H) $(GENSUPPORT_H) $(HASH_TABLE_H)\n-build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) \t\\\n+build/ggc-none.o : ggc-none.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) \t\\\n   $(GGC_H)\n-build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/min-insn-modes.o : min-insn-modes.cc $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H)\n-build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+build/print-rtl.o: print-rtl.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(GTM_H) $(RTL_BASE_H)\n-build/read-md.o: read-md.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+build/read-md.o: read-md.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(HASHTAB_H) errors.h $(READ_MD_H)\n-build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+build/read-rtl.o: read-rtl.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H) $(READ_MD_H)\t\t\\\n   $(GENSUPPORT_H)\n-build/rtl.o: rtl.c $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) $(SYSTEM_H)\t\\\n+build/rtl.o: rtl.cc $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) $(SYSTEM_H)\t\\\n   $(RTL_H) $(GGC_H) errors.h\n-build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(VEC_H)\t\\\n+build/vec.o : vec.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(VEC_H)\t\\\n   $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H) $(HASH_TABLE_H)\n-build/hash-table.o : hash-table.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+build/hash-table.o : hash-table.cc $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   $(CORETYPES_H) $(HASH_TABLE_H) $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)\n build/sort.o : sort.cc $(BCONFIG_H) $(SYSTEM_H)\n-build/inchash.o : inchash.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+build/inchash.o : inchash.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(HASHTAB_H) inchash.h\n-build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+build/gencondmd.o : build/gencondmd.cc $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   $(CORETYPES_H) $(GTM_H) insn-constants.h\t\t\t\t\\\n   $(filter-out insn-flags.h, $(RTL_H) $(TM_P_H) $(FUNCTION_H) $(REGS_H) \\\n   $(RECOG_H) output.h $(FLAGS_H) $(RESOURCE_H) toplev.h $(DIAGNOSTIC_CORE_H) reload.h \t\\\n   $(EXCEPT_H) tm-constrs.h)\n # This pulls in tm-pred.h which contains inline functions wrapping up\n # predicates from the back-end so those functions must be discarded.\n-# No big deal since gencondmd.c is a dummy file for non-GCC compilers.\n+# No big deal since gencondmd.cc is a dummy file for non-GCC compilers.\n build/gencondmd.o : \\\n   BUILD_CFLAGS := $(filter-out -fkeep-inline-functions, $(BUILD_CFLAGS))\n \n # ...these are the programs themselves.\n-build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genattr.o : genattr.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/genattr-common.o : genattr-common.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n+build/genattr-common.o : genattr-common.cc $(RTL_BASE_H) $(BCONFIG_H)\t\\\n   $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n+build/genattrtab.o : genattrtab.cc $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n   $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(GGC_H)\t\\\n   $(READ_MD_H) $(GENSUPPORT_H) $(FNMATCH_H)\n-build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n+build/genautomata.o : genautomata.cc $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n   $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(VEC_H)\t\\\n   $(HASHTAB_H) $(GENSUPPORT_H) $(FNMATCH_H)\n-build/gencheck.o : gencheck.c all-tree.def $(BCONFIG_H) $(GTM_H)\t\\\n+build/gencheck.o : gencheck.cc all-tree.def $(BCONFIG_H) $(GTM_H)\t\\\n \t$(SYSTEM_H) $(CORETYPES_H) tree.def c-family/c-common.def\t\\\n \t$(lang_tree_files) gimple.def\n-build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n-build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genchecksum.o : genchecksum.cc $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n+build/gencodes.o : gencodes.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)\n-build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n+build/genconditions.o : genconditions.cc $(RTL_BASE_H) $(BCONFIG_H)\t\\\n   $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(HASHTAB_H)\t\t\\\n   $(READ_MD_H) $(GENSUPPORT_H)\n-build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genconfig.o : genconfig.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)\n-build/genconstants.o : genconstants.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+build/genconstants.o : genconstants.cc $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   $(CORETYPES_H) errors.h $(READ_MD_H)\n-build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genemit.o : genemit.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) internal-fn.def\n-build/genenums.o : genenums.c $(BCONFIG_H) $(SYSTEM_H)\t\t\t\\\n+build/genenums.o : genenums.cc $(BCONFIG_H) $(SYSTEM_H)\t\t\t\\\n   $(CORETYPES_H) errors.h $(READ_MD_H)\n-build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n+build/genextract.o : genextract.cc $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n   $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)\t\\\n+build/genflags.o : genflags.cc $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)\t\\\n   $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/gentarget-def.o : gentarget-def.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/gentarget-def.o : gentarget-def.cc $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) errors.h $(READ_MD_H)\t\t\\\n   $(GENSUPPORT_H) $(HASH_TABLE_H) target-insns.def\n-build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n+build/gengenrtl.o : gengenrtl.cc $(BCONFIG_H) $(SYSTEM_H) rtl.def\n \n # The gengtype generator program is special: Two versions are built.\n # One is for the build machine, and one is for the host to allow\n@@ -2872,52 +2872,52 @@ build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n GENGTYPE_OBJS = gengtype.o gengtype-parse.o gengtype-state.o \\\n   gengtype-lex.o errors.o\n \n-gengtype-lex.o build/gengtype-lex.o : gengtype-lex.c gengtype.h $(SYSTEM_H)\n+gengtype-lex.o build/gengtype-lex.o : gengtype-lex.cc gengtype.h $(SYSTEM_H)\n CFLAGS-gengtype-lex.o += -DHOST_GENERATOR_FILE\n build/gengtype-lex.o: $(BCONFIG_H)\n \n-gengtype-parse.o build/gengtype-parse.o : gengtype-parse.c gengtype.h \\\n+gengtype-parse.o build/gengtype-parse.o : gengtype-parse.cc gengtype.h \\\n   $(SYSTEM_H)\n CFLAGS-gengtype-parse.o += -DHOST_GENERATOR_FILE\n build/gengtype-parse.o: $(BCONFIG_H)\n \n-gengtype-state.o build/gengtype-state.o: gengtype-state.c $(SYSTEM_H) \\\n+gengtype-state.o build/gengtype-state.o: gengtype-state.cc $(SYSTEM_H) \\\n   gengtype.h errors.h version.h $(HASHTAB_H) $(OBSTACK_H) \\\n   $(XREGEX_H)\n CFLAGS-gengtype-state.o += -DHOST_GENERATOR_FILE\n build/gengtype-state.o: $(BCONFIG_H)\n-gengtype.o build/gengtype.o : gengtype.c $(SYSTEM_H) gengtype.h \t\\\n+gengtype.o build/gengtype.o : gengtype.cc $(SYSTEM_H) gengtype.h \t\\\n   rtl.def insn-notes.def errors.h version.h     \t\t\\\n   $(HASHTAB_H) $(OBSTACK_H) $(XREGEX_H)\n CFLAGS-gengtype.o += -DHOST_GENERATOR_FILE\n build/gengtype.o: $(BCONFIG_H)\n \n CFLAGS-errors.o += -DHOST_GENERATOR_FILE\n \n-build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+build/genmddeps.o: genmddeps.cc $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   errors.h $(READ_MD_H)\n-build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n+build/genmodes.o : genmodes.cc $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n   $(HASHTAB_H) machmode.def $(extra_modes_file)\n-build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genopinit.o : genopinit.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) optabs.def\n-build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genoutput.o : genoutput.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genpeep.o : genpeep.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) toplev.h\t\t\\\n   $(DIAGNOSTIC_CORE_H)\n-build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genpreds.o : genpreds.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) $(OBSTACK_H)\n-build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genrecog.o : genrecog.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\t\t\\\n   $(HASH_TABLE_H) inchash.h\n-build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n+build/genhooks.o : genhooks.cc $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n   $(COMMON_TARGET_DEF) $(D_TARGET_DEF) $(BCONFIG_H) $(SYSTEM_H) errors.h\n-build/genmddump.o : genmddump.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/genmddump.o : genmddump.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n-build/genmatch.o : genmatch.c $(BCONFIG_H) $(SYSTEM_H) \\\n+build/genmatch.o : genmatch.cc $(BCONFIG_H) $(SYSTEM_H) \\\n   $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H) is-a.h \\\n   tree.def builtins.def internal-fn.def case-cfn-macros.h $(CPPLIB_H)\n-build/gencfn-macros.o : gencfn-macros.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n+build/gencfn-macros.o : gencfn-macros.cc $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-set.h builtins.def\t\\\n   internal-fn.def\n \n@@ -3004,7 +3004,7 @@ s-omp-device-properties-h: @omp_device_property_deps@\n # Generated source files for gengtype.  Prepend inclusion of\n # config.h/bconfig.h because AIX requires _LARGE_FILES to be defined before\n # any system header is included.\n-gengtype-lex.c : gengtype-lex.l\n+gengtype-lex.cc : gengtype-lex.l\n \t-$(FLEX) $(FLEXFLAGS) -o$@ $< && { \\\n \t  echo '#ifdef HOST_GENERATOR_FILE' > $@.tmp; \\\n \t  echo '#include \"config.h\"'       >> $@.tmp; \\\n@@ -3047,13 +3047,13 @@ CFLAGS-cppdefault.o += $(PREPROCESSOR_DEFINES)\n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n \n-# genversion.c is run on the build machine to generate version.h\n+# genversion.cc is run on the build machine to generate version.h\n CFLAGS-build/genversion.o += -DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n \t-DREVISION=$(REVISION_s) \\\n \t-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \\\n \t-DBUGURL=$(BUGURL_s)\n \n-build/genversion.o: genversion.c $(BCONFIG_H) $(SYSTEM_H) $(srcdir)/DATESTAMP\n+build/genversion.o: genversion.cc $(BCONFIG_H) $(SYSTEM_H) $(srcdir)/DATESTAMP\n \n build/genversion$(build_exeext): build/genversion.o\n \t+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) \\\n@@ -3078,7 +3078,7 @@ gcov-dump$(exeext): $(GCOV_DUMP_OBJS) $(LIBDEPS)\n \t\thash-table.o ggc-none.o\\\n \t\t$(LIBS) -o $@\n \n-GCOV_TOOL_DEP_FILES = $(srcdir)/../libgcc/libgcov-util.c gcov-io.c $(GCOV_IO_H) \\\n+GCOV_TOOL_DEP_FILES = $(srcdir)/../libgcc/libgcov-util.c gcov-io.cc $(GCOV_IO_H) \\\n   $(srcdir)/../libgcc/libgcov-driver.c $(srcdir)/../libgcc/libgcov-driver-system.c \\\n   $(srcdir)/../libgcc/libgcov-merge.c $(srcdir)/../libgcc/libgcov.h \\\n   $(SYSTEM_H) coretypes.h $(TM_H) $(CONFIG_H) version.h intl.h $(DIAGNOSTIC_H)\n@@ -3513,7 +3513,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -f build/*\n \t-rm -f mddeps.mk\n # Delete other built files.\n-\t-rm -f specs.h options.c options.h options-save.c\n+\t-rm -f specs.h options.cc options.h options-save.cc\n # Delete the stamp and temporary files.\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*\n@@ -3547,7 +3547,7 @@ clean: mostlyclean lang.clean\n \t-rm -f libgcc_s*\n \t-rm -f libunwind*\n \t-rm -f config.h tconfig.h bconfig.h tm_p.h tm.h\n-\t-rm -f options.c options.h optionlist\n+\t-rm -f options.cc options.h optionlist\n \t-rm -f cs-*\n \t-rm -f doc/*.dvi\n \t-rm -f doc/*.pdf\n@@ -4313,7 +4313,7 @@ qmtest-gui: ${QMTEST_DIR}/context\n \n .PHONY: qmtest-g++\n \n-# Run Paranoia on real.c.\n+# Run Paranoia on real.cc.\n \n paranoia.o: $(srcdir)/../contrib/paranoia.cc $(CONFIG_H) $(SYSTEM_H) $(TREE_H)\n \tg++ -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $< $(OUTPUT_OPTION)"}, {"sha": "6cdc6b4605ee2f18458724496d01d0d25fc48814", "filename": "gcc/ada/Make-generated.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2FMake-generated.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2FMake-generated.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-generated.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -53,7 +53,7 @@ ada/stamp-snames : ada/snames.ads-tmpl ada/snames.adb-tmpl ada/snames.h-tmpl ada\n \ttouch ada/stamp-snames\n \n ada/sdefault.adb: ada/stamp-sdefault ; @true\n-ada/stamp-sdefault : $(srcdir)/ada/version.c Makefile\n+ada/stamp-sdefault : $(srcdir)/ada/version.cc Makefile\n \t$(ECHO) \"pragma Style_Checks (Off);\" >tmp-sdefault.adb\n \t$(ECHO) \"with Osint; use Osint;\" >>tmp-sdefault.adb\n \t$(ECHO) \"package body Sdefault is\" >>tmp-sdefault.adb"}, {"sha": "b7b7d7483dd83f4abb48649fa1dddde36db68614", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -172,7 +172,7 @@ extern \"C\" {\n \n #include \"mingw32.h\"\n \n-/* Current code page and CCS encoding to use, set in initialize.c.  */\n+/* Current code page and CCS encoding to use, set in initialize.cc.  */\n UINT __gnat_current_codepage;\n UINT __gnat_current_ccs_encoding;\n "}, {"sha": "b32baa01b3be8037bcc4c23074f24ad8c01eee0c", "filename": "gcc/ada/ctrl_c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fctrl_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fctrl_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fctrl_c.c?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -61,7 +61,7 @@ void __gnat_uninstall_int_handler (void);\n void\n dummy_handler () {}\n \n-/* Lives in init.c.  */\n+/* Lives in init.cc.  */\n extern void (*__gnat_ctrl_c_handler) (void);\n #endif\n "}, {"sha": "cf645df12f116ecc3e1449e4dfbc91ba1eec6637", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -147,8 +147,8 @@ host_os=@host_os@\n target_cpu_default = @target_cpu_default@\n xmake_file = @xmake_file@\n tmake_file = @tmake_file@\n-#version=`sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/' < $(srcdir)/version.c`\n-#mainversion=`sed -e 's/.*\\\"\\([0-9]*\\.[0-9]*\\).*/\\1/' < $(srcdir)/version.c`\n+#version=`sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/' < $(srcdir)/version.cc`\n+#mainversion=`sed -e 's/.*\\\"\\([0-9]*\\.[0-9]*\\).*/\\1/' < $(srcdir)/version.cc`\n \n # Directory where sources are, from where we are.\n VPATH = $(srcdir)/ada\n@@ -222,7 +222,7 @@ endif\n all.indirect: Makefile ../gnat1$(exeext)\n \n # IN_GCC is meant to distinguish between code compiled into GCC itself, i.e.\n-# for the host, and the rest.  But we also use it for the tools (link.c) and\n+# for the host, and the rest.  But we also use it for the tools (link.cc) and\n # even break the host/target wall by using it for the library (targext.c).\n # autoconf inserts -DCROSS_DIRECTORY_STRUCTURE if we are building a cross\n # compiler which does not use the native libraries and headers.\n@@ -240,7 +240,7 @@ ALL_COMPILERFLAGS = $(ALL_CFLAGS)\n # This is where we get libiberty.a from.\n LIBIBERTY = ../../libiberty/libiberty.a\n \n-# We need to link against libbacktrace because diagnostic.c in\n+# We need to link against libbacktrace because diagnostic.cc in\n # libcommon.a uses it.\n LIBBACKTRACE = ../../libbacktrace/.libs/libbacktrace.a\n \n@@ -303,7 +303,7 @@ ADA_INCLUDES_FOR_SUBDIR = -I. -I$(fsrcdir)/ada\n \t$(CC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n # how to regenerate this file\n-Makefile: ../config.status $(srcdir)/ada/gcc-interface/Makefile.in $(srcdir)/ada/Makefile.in $(srcdir)/ada/version.c\n+Makefile: ../config.status $(srcdir)/ada/gcc-interface/Makefile.in $(srcdir)/ada/Makefile.in $(srcdir)/ada/version.cc\n \tcd ..; \\\n \tLANGUAGES=\"$(CONFIG_LANGUAGES)\" \\\n \tCONFIG_HEADERS= \\\n@@ -903,56 +903,56 @@ ADA_RTL_DSO_DIR = $(toolexeclibdir)\n # need to keep the frame pointer in tracebak.o to pop the stack properly on\n # some targets.\n \n-tracebak.o  : tracebak.c\n+tracebak.o  : tracebak.cc\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n \t      $(INCLUDES) $(NO_OMIT_ADAFLAGS) $< $(OUTPUT_OPTION)\n \n-adadecode.o : adadecode.c adadecode.h\n-aux-io.o  : aux-io.c\n-argv.o    : argv.c\n+adadecode.o : adadecode.cc adadecode.h\n+aux-io.o  : aux-io.cc\n+argv.o    : argv.cc\n cal.o     : cal.c\n deftarg.o : deftarg.c\n errno.o   : errno.c\n-exit.o    : adaint.h exit.c\n-expect.o  : expect.c\n-final.o   : final.c\n-rtfinal.o : rtfinal.c\n-rtinit.o  : rtinit.c\n-locales.o : locales.c\n-mkdir.o   : mkdir.c\n-socket.o  : socket.c gsocket.h\n+exit.o    : adaint.h exit.cc\n+expect.o  : expect.cc\n+final.o   : final.cc\n+rtfinal.o : rtfinal.cc\n+rtinit.o  : rtinit.cc\n+locales.o : locales.cc\n+mkdir.o   : mkdir.cc\n+socket.o  : socket.cc gsocket.h\n sysdep.o  : sysdep.c\n-raise.o   : raise.c raise.h\n-sigtramp-armdroid.o      : sigtramp-armdroid.c sigtramp.h\n+raise.o   : raise.cc raise.h\n+sigtramp-armdroid.o      : sigtramp-armdroid.cc sigtramp.h\n sigtramp-armvxworks.o    : sigtramp-armvxworks.c sigtramp.h\n-sigtramp-ios.o           : sigtramp-ios.c sigtramp.h\n-sigtramp-vxworks.o       : sigtramp-vxworks.c $(VX_SIGTRAMP_EXTRA_SRCS)\n+sigtramp-ios.o           : sigtramp-ios.cc sigtramp.h\n+sigtramp-vxworks.o       : sigtramp-vxworks.cc $(VX_SIGTRAMP_EXTRA_SRCS)\n sigtramp-vxworks-vxsim.o : sigtramp-vxworks-vxsim.c $(VX_SIGTRAMP_EXTRA_SRCS)\n terminals.o : terminals.c\n-vx_stack_info.o : vx_stack_info.c\n+vx_stack_info.o : vx_stack_info.cc\n \n raise-gcc.o : raise-gcc.c raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t\t-iquote $(srcdir) -iquote $(ftop_srcdir)/libgcc \\\n \t\t$(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-cio.o     : cio.c\n+cio.o     : cio.cc\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-init.o    : init.c adaint.h raise.h\n+init.o    : init.cc adaint.h raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n init-vxsim.o : init-vxsim.c\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-initialize.o : initialize.c raise.h\n+initialize.o : initialize.cc raise.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-link.o : link.c\n+link.o : link.cc\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n \t\t$(ALL_CPPFLAGS) $(INCLUDES_FOR_SUBDIR) \\\n \t\t$< $(OUTPUT_OPTION)"}, {"sha": "5f7297709cd75c5550d498f896f9b943627128b1", "filename": "gcc/ada/gcc-interface/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -30,7 +30,7 @@ gcc_subdir=\"ada/gcc-interface\"\n boot_language=yes\n compilers=\"gnat1\\$(exeext)\"\n \n-gtfiles=\"\\$(srcdir)/ada/gcc-interface/ada-tree.h \\$(srcdir)/ada/gcc-interface/gigi.h \\$(srcdir)/ada/gcc-interface/decl.c \\$(srcdir)/ada/gcc-interface/trans.c \\$(srcdir)/ada/gcc-interface/utils.c \\$(srcdir)/ada/gcc-interface/misc.c\"\n+gtfiles=\"\\$(srcdir)/ada/gcc-interface/ada-tree.h \\$(srcdir)/ada/gcc-interface/gigi.h \\$(srcdir)/ada/gcc-interface/decl.cc \\$(srcdir)/ada/gcc-interface/trans.cc \\$(srcdir)/ada/gcc-interface/utils.cc \\$(srcdir)/ada/gcc-interface/misc.cc\"\n \n outputs=\"ada/gcc-interface/Makefile ada/Makefile\"\n "}, {"sha": "1c7a716840eb45f7179d3f957c5282dc2834e71d", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -10632,7 +10632,7 @@ concat_name (tree gnu_name, const char *suffix)\n   return get_identifier_with_length (new_name, len);\n }\n \n-/* Initialize the data structures of the decl.c module.  */\n+/* Initialize the data structures of the decl.cc module.  */\n \n void\n init_gnat_decl (void)\n@@ -10644,7 +10644,7 @@ init_gnat_decl (void)\n   dummy_to_subprog_map = hash_table<dummy_type_hasher>::create_ggc (512);\n }\n \n-/* Destroy the data structures of the decl.c module.  */\n+/* Destroy the data structures of the decl.cc module.  */\n \n void\n destroy_gnat_decl (void)"}, {"sha": "bd559d176788122c8eaaa8ca774f1bf6a8149ae0", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -203,10 +203,10 @@ extern tree create_concat_name (Entity_Id gnat_entity, const char *suffix);\n    the name followed by \"___\" and the specified suffix.  */\n extern tree concat_name (tree gnu_name, const char *suffix);\n \n-/* Initialize data structures of the decl.c module.  */\n+/* Initialize data structures of the decl.cc module.  */\n extern void init_gnat_decl (void);\n \n-/* Destroy data structures of the decl.c module.  */\n+/* Destroy data structures of the decl.cc module.  */\n extern void destroy_gnat_decl (void);\n \n /* Highest number in the front-end node table.  */\n@@ -563,10 +563,10 @@ extern tree convert_to_index_type (tree expr);\n /* Routines created solely for the tree translator's sake. Their prototypes\n    can be changed as desired.  */\n \n-/* Initialize data structures of the utils.c module.  */\n+/* Initialize data structures of the utils.cc module.  */\n extern void init_gnat_utils (void);\n \n-/* Destroy data structures of the utils.c module.  */\n+/* Destroy data structures of the utils.cc module.  */\n extern void destroy_gnat_utils (void);\n \n /* GNAT_ENTITY is a GNAT tree node for a defining identifier.\n@@ -904,7 +904,7 @@ extern tree build_call_raise_range (int msg, Node_Id gnat_node, char kind,\n \t\t\t\t    tree index, tree first, tree last);\n \n /* Return a CONSTRUCTOR of TYPE whose elements are V.  This is not the\n-   same as build_constructor in the language-independent tree.c.  */\n+   same as build_constructor in the language-independent tree.cc.  */\n extern tree gnat_build_constructor (tree type, vec<constructor_elt, va_gc> *v);\n \n /* Return a COMPONENT_REF to access FIELD in RECORD, or NULL_EXPR and generate\n@@ -943,7 +943,7 @@ extern tree build_allocator (tree type, tree init, tree result_type,\n    should not be allocated in a register.  Returns true if successful.  */\n extern bool gnat_mark_addressable (tree t);\n \n-/* Save EXP for later use or reuse.  This is equivalent to save_expr in tree.c\n+/* Save EXP for later use or reuse.  This is equivalent to save_expr in tree.cc\n    but we know how to handle our own nodes.  */\n extern tree gnat_save_expr (tree exp);\n \n@@ -952,7 +952,7 @@ extern tree gnat_save_expr (tree exp);\n    its subsequent reuse(s) except through its potential reevaluation.  */\n extern tree gnat_protect_expr (tree exp);\n \n-/* This is equivalent to stabilize_reference in tree.c but we know how to\n+/* This is equivalent to stabilize_reference in tree.cc but we know how to\n    handle our own nodes and we take extra arguments.  FORCE says whether to\n    force evaluation of everything in REF.  INIT is set to the first arm of\n    a COMPOUND_EXPR present in REF, if any.  */\n@@ -965,7 +965,7 @@ typedef tree (*rewrite_fn) (tree, void *);\n extern tree gnat_rewrite_reference (tree ref, rewrite_fn func, void *data,\n \t\t\t\t    tree *init);\n \n-/* This is equivalent to get_inner_reference in expr.c but it returns the\n+/* This is equivalent to get_inner_reference in expr.cc but it returns the\n    ultimate containing object only if the reference (lvalue) is constant,\n    i.e. if it doesn't depend on the context in which it is evaluated.  */\n extern tree get_inner_constant_reference (tree exp);"}, {"sha": "db1917befbb7b899173f271ac2c1206601fd0dde", "filename": "gcc/ada/gcc-interface/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang-specs.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -27,7 +27,7 @@\n    extensions to .ada in dump file names.  */\n #define ADA_DUMPS_OPTIONS DUMPS_OPTIONS (\"%{!.adb:%{!.ads:.ada}}\")\n \n-/* This is the contribution to the `default_compilers' array in gcc.c for\n+/* This is the contribution to the `default_compilers' array in gcc.cc for\n    GNAT.  */\n \n   {\".ads\", \"@ada\", 0, 0, 0},"}, {"sha": "049cf74eb9b3e0cada5ef984b73b4b2a1b6906ca", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -281,7 +281,7 @@ static GTY(()) vec<tree, va_gc> *builtin_decls;\n static GTY((deletable)) tree free_block_chain;\n \n /* A hash table of packable types.  It is modelled on the generic type\n-   hash table in tree.c, which must thus be used as a reference.  */\n+   hash table in tree.cc, which must thus be used as a reference.  */\n \n struct GTY((for_user)) packable_type_hash\n {\n@@ -304,7 +304,7 @@ struct packable_type_hasher : ggc_cache_ptr_hash<packable_type_hash>\n static GTY ((cache)) hash_table<packable_type_hasher> *packable_type_hash_table;\n \n /* A hash table of padded types.  It is modelled on the generic type\n-   hash table in tree.c, which must thus be used as a reference.  */\n+   hash table in tree.cc, which must thus be used as a reference.  */\n \n struct GTY((for_user)) pad_type_hash\n {\n@@ -367,7 +367,7 @@ add_deferred_decl_context (tree decl, Entity_Id gnat_scope, int force_global);\n static void add_deferred_type_context (struct deferred_decl_context_node *n,\n \t\t\t\t       tree type);\n \n-/* Initialize data structures of the utils.c module.  */\n+/* Initialize data structures of the utils.cc module.  */\n \n void\n init_gnat_utils (void)\n@@ -385,7 +385,7 @@ init_gnat_utils (void)\n   pad_type_hash_table = hash_table<pad_type_hasher>::create_ggc (512);\n }\n \n-/* Destroy data structures of the utils.c module.  */\n+/* Destroy data structures of the utils.cc module.  */\n \n void\n destroy_gnat_utils (void)"}, {"sha": "e5cd85662b92efd28f0a5585ca4879634fb1bcba", "filename": "gcc/ada/gcc-interface/utils2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2534,7 +2534,7 @@ gnat_stable_expr_p (tree exp)\n   return TREE_CONSTANT (exp) || code == NULL_EXPR || code == SAVE_EXPR;\n }\n \n-/* Save EXP for later use or reuse.  This is equivalent to save_expr in tree.c\n+/* Save EXP for later use or reuse.  This is equivalent to save_expr in tree.cc\n    but we know how to handle our own nodes.  */\n \n tree\n@@ -2633,7 +2633,7 @@ gnat_protect_expr (tree exp)\n \t\t    save_expr (build_unary_op (ADDR_EXPR, NULL_TREE, exp)));\n }\n \n-/* This is equivalent to stabilize_reference_1 in tree.c but we take an extra\n+/* This is equivalent to stabilize_reference_1 in tree.cc but we take an extra\n    argument to force evaluation of everything.  */\n \n static tree\n@@ -2703,7 +2703,7 @@ gnat_stabilize_reference_1 (tree e, void *data)\n   return result;\n }\n \n-/* This is equivalent to stabilize_reference in tree.c but we know how to\n+/* This is equivalent to stabilize_reference in tree.cc but we know how to\n    handle our own nodes and we take extra arguments.  FORCE says whether to\n    force evaluation of everything in REF.  INIT is set to the first arm of\n    a COMPOUND_EXPR present in REF, if any.  */\n@@ -2837,7 +2837,7 @@ gnat_rewrite_reference (tree ref, rewrite_fn func, void *data, tree *init)\n   return result;\n }\n \n-/* This is equivalent to get_inner_reference in expr.c but it returns the\n+/* This is equivalent to get_inner_reference in expr.cc but it returns the\n    ultimate containing object only if the reference (lvalue) is constant,\n    i.e. if it doesn't depend on the context in which it is evaluated.  */\n "}, {"sha": "aaeca95ba870c8001286e3132a3e162a6bfb232c", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -246,7 +246,7 @@\n  *                     mutual exclusion\n  *\n  * See \"Handling of gethostbyname, gethostbyaddr, getservbyname and\n- * getservbyport\" in socket.c for details.\n+ * getservbyport\" in socket.cc for details.\n  */\n \n #if defined (HAVE_GETxxxBYyyy_R)"}, {"sha": "7ee1977279b26418225797d5557a0302cde30b78", "filename": "gcc/ada/init.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -542,7 +542,7 @@ __gnat_error_handler (int sig, siginfo_t *si ATTRIBUTE_UNUSED, void *ucontext)\n \t before the faulting address is accessible.  Unfortunately, Linux\n \t seems to have no way of giving us the faulting address.\n \n-\t In old versions of init.c, we had a test of the page before the\n+\t In old versions of init.cc, we had a test of the page before the\n \t stack pointer:\n \n \t   ((volatile char *)\n@@ -1237,7 +1237,7 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n   if (__gnat_resignal_p (sigargs [1]))\n     return SS$_RESIGNAL;\n #ifndef IN_RTS\n-  /* toplev.c handles this for compiler.  */\n+  /* toplev.cc handles this for compiler.  */\n   if (sigargs [1] == SS$_HPARITH)\n     return SS$_RESIGNAL;\n #endif"}, {"sha": "4d5ab60f68f3503add1b77a2de06f1daa557587a", "filename": "gcc/ada/libgnarl/s-intman.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-intman.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-intman.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -105,7 +105,7 @@ private\n      (C, Adjust_Context_For_Raise, \"__gnat_adjust_context_for_raise\");\n    --  Target specific hook performing adjustments to the signal's machine\n    --  context, to be called before an exception may be raised from a signal\n-   --  handler. This service is provided by init.c, together with the\n+   --  handler. This service is provided by init.cc, together with the\n    --  non-tasking signal handler.\n \n end System.Interrupt_Management;"}, {"sha": "9ef3e30a2bd87c85c189c278e4dca53d5d7bc68f", "filename": "gcc/ada/libgnarl/s-osinte__android.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -309,7 +309,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 16 * 1024;\n-   --  This must be in keeping with init.c:__gnat_alternate_stack\n+   --  This must be in keeping with init.cc:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "12bb1aad648ecbab938f71bd57f41f3a2a73800b", "filename": "gcc/ada/libgnarl/s-osinte__darwin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -288,7 +288,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 32 * 1024;\n-   --  This must be in keeping with init.c:__gnat_alternate_stack\n+   --  This must be in keeping with init.cc:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target. This"}, {"sha": "a1cf316657d5c31070554336626331bdc5adbe83", "filename": "gcc/ada/libgnarl/s-osinte__hpux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -293,7 +293,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 128 * 1024;\n-   --  This must be in keeping with init.c:__gnat_alternate_stack\n+   --  This must be in keeping with init.cc:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "3230f28c38b27fda0c34fcda318ff3213e7b7bf6", "filename": "gcc/ada/libgnarl/s-osinte__linux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -331,7 +331,7 @@ package System.OS_Interface is\n    pragma Import (C, sigaltstack, \"sigaltstack\");\n \n    Alternate_Stack_Size : constant := 32 * 1024;\n-   --  This must be in keeping with init.c:__gnat_alternate_stack\n+   --  This must be in keeping with init.cc:__gnat_alternate_stack\n \n    Alternate_Stack : aliased char_array (1 .. Alternate_Stack_Size);\n    pragma Import (C, Alternate_Stack, \"__gnat_alternate_stack\");"}, {"sha": "af877006d99472faf282e032a3a608011a7cebae", "filename": "gcc/ada/libgnarl/s-osinte__qnx.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -310,7 +310,7 @@ package System.OS_Interface is\n    --  sigaltstack in QNX\n \n    Alternate_Stack_Size : constant := 0;\n-   --  This must be kept in sync with init.c:__gnat_alternate_stack\n+   --  This must be kept in sync with init.cc:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "c4f42fe1f7e06c771261ba5fdfdf99450ff2a76e", "filename": "gcc/ada/libgnarl/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -776,7 +776,7 @@ package System.Tasking is\n    Unspecified_Priority : constant Integer := -1;\n    --  Indicates that a task has an unspecified priority. This is hardcoded as\n    --  -1 rather than System.Priority'First - 1 as the value needs to be used\n-   --  in init.c to specify that the main task has no specified priority.\n+   --  in init.cc to specify that the main task has no specified priority.\n \n    Priority_Not_Boosted : constant Integer := System.Priority'First - 1;\n    --  Definition of Priority actually has to come from the RTS configuration"}, {"sha": "ba7c61e7b079017008c34e0768e73712eb0ecf13", "filename": "gcc/ada/rtfinal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Frtfinal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Frtfinal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtfinal.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -43,7 +43,7 @@ extern void __gnat_runtime_finalize (void);\n    Note that __gnat_runtime_finalize() is called in adafinal()   */\n \n extern int __gnat_rt_init_count;\n-/*  see initialize.c  */\n+/*  see initialize.cc  */\n \n #if defined (__MINGW32__)\n #include \"mingw32.h\""}, {"sha": "ea7d256ed43c24b1151e387ccbb10b14a0719253", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1976,7 +1976,7 @@ CND(CLOCK_THREAD_CPUTIME_ID, \"Thread CPU clock\")\n  || defined(__DragonFly__) || defined(__QNX__)\n /** On these platforms use system provided monotonic clock instead of\n  ** the default CLOCK_REALTIME. We then need to set up cond var attributes\n- ** appropriately (see thread.c).\n+ ** appropriately (see thread.cc).\n  **\n  ** Note that AIX 5.2 does not support CLOCK_MONOTONIC timestamps for\n  ** pthread_cond_timedwait (and does not have pthread_condattr_setclock),"}, {"sha": "4cfbdca0f46c93448e472621f905e150297ad0b0", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,7 +25,7 @@\n \n --  This package handles setting target dependent parameters. If the -gnatet\n --  switch is not set, then these values are taken from the back end (via the\n---  routines in Get_Targ, and the enumerate_modes routine in misc.c). If the\n+--  routines in Get_Targ, and the enumerate_modes routine in misc.cc). If the\n --  switch is set, then the values are read from the target.atp file in the\n --  current directory (usually written with the Write_Target_Dependent_Values\n --  procedure defined in this package).\n@@ -88,7 +88,7 @@ package Set_Targ is\n    -------------------------------------\n \n    --  This table contains the list of modes supported by the back-end as\n-   --  provided by the back end routine enumerate_modes in misc.c. Note that\n+   --  provided by the back end routine enumerate_modes in misc.cc. Note that\n    --  we only store floating-point modes (see Register_Float_Type).\n \n    type FPT_Mode_Entry is record"}, {"sha": "b2596518ac95878606ccb363504f810cdcfe4e5b", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Exported functions from alias.c\n+/* Exported functions from alias.cc\n    Copyright (C) 2004-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "678441788333e4f759df2f09ec2a31e1a23edad8", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -241,7 +241,7 @@ is_special_named_call_p (const gcall *call, const char *funcname,\n /* Helper function for checkers.  Is FNDECL an extern fndecl at file scope\n    that has the given FUNCNAME?\n \n-   Compare with special_function_p in calls.c.  */\n+   Compare with special_function_p in calls.cc.  */\n \n bool\n is_named_call_p (const_tree fndecl, const char *funcname)\n@@ -271,7 +271,7 @@ is_named_call_p (const_tree fndecl, const char *funcname)\n }\n \n /* Return true if FNDECL is within the namespace \"std\".\n-   Compare with cp/typeck.c: decl_in_std_namespace_p, but this doesn't\n+   Compare with cp/typeck.cc: decl_in_std_namespace_p, but this doesn't\n    rely on being the C++ FE (or handle inline namespaces inside of std).  */\n \n static inline bool"}, {"sha": "3bf2a02432c5fb0421395baa46f8a2d56d387a42", "filename": "gcc/analyzer/region-model-asm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fregion-model-asm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fregion-model-asm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-asm.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -126,7 +126,7 @@ deterministic_p (const gasm *asm_stmt)\n /* Update this model for the asm STMT, using CTXT to report any\n    diagnostics.\n \n-   Compare with cfgexpand.c: expand_asm_stmt.  */\n+   Compare with cfgexpand.cc: expand_asm_stmt.  */\n \n void\n region_model::on_asm_stmt (const gasm *stmt, region_model_context *ctxt)"}, {"sha": "f5a2a0ba3df31329965266bc7dbe8f8f7fc5c5e1", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1168,7 +1168,7 @@ field_region::dump_to_pp (pretty_printer *pp, bool simple) const\n bool\n field_region::get_relative_concrete_offset (bit_offset_t *out) const\n {\n-  /* Compare with e.g. gimple-fold.c's\n+  /* Compare with e.g. gimple-fold.cc's\n      fold_nonarray_ctor_reference.  */\n   tree byte_offset = DECL_FIELD_OFFSET (m_field);\n   if (TREE_CODE (byte_offset) != INTEGER_CST)"}, {"sha": "2f7a387ca8a13eeffc4ca10d77693593304a2c1e", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -945,7 +945,7 @@ method_p (tree fndecl)\n }\n \n /* Return a 1-based description of ARG_IDX (0-based) of FNDECL.\n-   Compare with %P in the C++ FE  (implemented in cp/error.c: parm_to_string\n+   Compare with %P in the C++ FE  (implemented in cp/error.cc: parm_to_string\n    as called from cp_printer).  */\n \n static label_text"}, {"sha": "466f924518171650422c4d5007c0ad013dbfb05b", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -905,7 +905,7 @@ superedge::dump_dot (graphviz_out *gv, const dump_args_t &) const\n       break;\n     }\n \n-  /* Adapted from graph.c:draw_cfg_node_succ_edges.  */\n+  /* Adapted from graph.cc:draw_cfg_node_succ_edges.  */\n   if (::edge cfg_edge = get_any_cfg_edge ())\n     {\n       if (cfg_edge->flags & EDGE_FAKE)"}, {"sha": "b3471734905a0bf19bc845810fe24d5f51107f5e", "filename": "gcc/asan.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -195,7 +195,7 @@ along with GCC; see the file COPYING3.  If not see\n        at the top of the variables of the stack.\n \n    Note that the real variable layout is done in expand_used_vars in\n-   cfgexpand.c.  As far as Address Sanitizer is concerned, it lays out\n+   cfgexpand.cc.  As far as Address Sanitizer is concerned, it lays out\n    stack variables as well as the different red zones, emits some\n    prologue code to populate the shadow memory as to poison (mark as\n    non-accessible) the regions of the red zones and mark the regions of"}, {"sha": "bf3f90f2fff88b79567471bf996ce70f33e89a6a", "filename": "gcc/auto-profile.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fauto-profile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fauto-profile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* auto-profile.h - Defines data exported from auto-profile.c\n+/* auto-profile.h - Defines data exported from auto-profile.cc\n    Copyright (C) 2014-2022 Free Software Foundation, Inc.\n    Contributed by Dehao Chen (dehao@google.com)\n "}, {"sha": "e3fff1f6975d5a8104f3fd0e8eba6042df7cb1d2", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -146,7 +146,7 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   /* The index of this block.  */\n   int index;\n \n-  /* Expected number of executions: calculated in profile.c.  */\n+  /* Expected number of executions: calculated in profile.cc.  */\n   profile_count count;\n \n   /* The discriminator for this block.  The discriminator distinguishes"}, {"sha": "31af50521da203bb9aea2fdef8bb512a32bd5c78", "filename": "gcc/btfout.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbtfout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbtfout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -19,7 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This file contains routines to output the BPF Type Format (BTF). The BTF\n    debug format is very similar to CTF; as a result, the structure of this file\n-   closely resembles that of ctfout.c, and the same CTF container objects are\n+   closely resembles that of ctfout.cc, and the same CTF container objects are\n    used.  */\n \n #include \"config.h\""}, {"sha": "bf07341a036db5564bd2a748f0e8227573e41213", "filename": "gcc/builtins.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -19,7 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Legacy warning!  Please add no further builtin simplifications here\n    (apart from pure constant folding) - builtin simplifications should go\n-   to match.pd or gimple-fold.c instead.  */\n+   to match.pd or gimple-fold.cc instead.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -1038,7 +1038,7 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n       set_mem_alias_set (stack, setjmp_alias_set);\n \n       /* Pick up FP, label, and SP from the block and jump.  This code is\n-\t from expand_goto in stmt.c; see there for detailed comments.  */\n+\t from expand_goto in stmt.cc; see there for detailed comments.  */\n       if (targetm.have_nonlocal_goto ())\n \t/* We have to pass a value to the nonlocal_goto pattern that will\n \t   get copied into the static_chain pointer, but it does not matter\n@@ -9628,7 +9628,7 @@ validate_arg (const_tree arg, enum tree_code code)\n    VOID_TYPE.\n \n    This is the GIMPLE version of validate_arglist.  Eventually we want to\n-   completely convert builtins.c to work from GIMPLEs and the tree based\n+   completely convert builtins.cc to work from GIMPLEs and the tree based\n    validate_arglist will then be removed.  */\n \n bool\n@@ -10989,7 +10989,7 @@ access_ref::offset_bounded () const\n }\n \n /* If CALLEE has known side effects, fill in INFO and return true.\n-   See tree-ssa-structalias.c:find_func_aliases\n+   See tree-ssa-structalias.cc:find_func_aliases\n    for the list of builtins we might need to handle here.  */\n \n attr_fnspec"}, {"sha": "149d336ee967184e619fc4eff220a528e17530ae", "filename": "gcc/c-family/c-ada-spec.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-ada-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-ada-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,7 +1,7 @@\n /* Print GENERIC declaration (functions, variables, types) trees coming from\n    the C and C++ front-ends as well as macros in Ada syntax.\n    Copyright (C) 2010-2022 Free Software Foundation, Inc.\n-   Adapted from tree-pretty-print.c by Arnaud Charlet  <charlet@adacore.com>\n+   Adapted from tree-pretty-print.cc by Arnaud Charlet  <charlet@adacore.com>\n \n This file is part of GCC.\n "}, {"sha": "d3ba0f4a18303b88c43ff05129128877b68cd665", "filename": "gcc/c-family/c-ada-spec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-ada-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-ada-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"pretty-print.h\"\n \n-/* In c-ada-spec.c  */\n+/* In c-ada-spec.cc  */\n \n enum cpp_operation {\n   HAS_DEPENDENT_TEMPLATE_ARGS,"}, {"sha": "d9674ea0581d7f3b8edeb12af4454a57e59990b5", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1324,7 +1324,7 @@ c_build_vec_convert (location_t loc1, tree expr, location_t loc2, tree type,\n   return ret;\n }\n \n-/* Like tree.c:get_narrower, but retain conversion from C++0x scoped enum\n+/* Like tree.cc:get_narrower, but retain conversion from C++0x scoped enum\n    to integral type.  */\n \n tree\n@@ -1950,7 +1950,7 @@ warning_candidate_p (tree x)\n   if (TREE_CODE (x) == BLOCK)\n     return false;\n \n-  /* VOID_TYPE_P (TREE_TYPE (x)) is workaround for cp/tree.c\n+  /* VOID_TYPE_P (TREE_TYPE (x)) is workaround for cp/tree.cc\n      (lvalue_p) crash on TRY/CATCH. */\n   if (TREE_TYPE (x) == NULL_TREE || VOID_TYPE_P (TREE_TYPE (x)))\n     return false;"}, {"sha": "ee0c4de2a054dbfc5a3746abcedad22d21512735", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions for c-common.c.\n+/* Definitions for c-common.cc.\n    Copyright (C) 1987-2022 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -249,7 +249,7 @@ enum rid\n      is for __int13.  */\n \n   /* Note that the range to use is RID_FIRST_INT_N through\n-     RID_FIRST_INT_N + NUM_INT_N_ENTS - 1 and c-parser.c has a list of\n+     RID_FIRST_INT_N + NUM_INT_N_ENTS - 1 and c-parser.cc has a list of\n      all RID_INT_N_* in a case statement.  */\n \n   RID_INT_N_0,\n@@ -829,10 +829,10 @@ extern const struct attribute_spec c_common_format_attribute_table[];\n \n extern tree (*make_fname_decl) (location_t, tree, int);\n \n-/* In c-decl.c and cp/tree.c.  FIXME.  */\n+/* In c-decl.cc and cp/tree.cc.  FIXME.  */\n extern void c_register_addr_space (const char *str, addr_space_t as);\n \n-/* In c-common.c.  */\n+/* In c-common.cc.  */\n extern bool in_late_binary_op;\n extern const char *c_addr_space_name (addr_space_t as);\n extern tree identifier_global_value (tree);\n@@ -1006,7 +1006,7 @@ extern tree build_stmt (location_t, enum tree_code, ...);\n extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n \n /* These functions must be defined by each front-end which implements\n-   a variant of the C language.  They are used in c-common.c.  */\n+   a variant of the C language.  They are used in c-common.cc.  */\n \n extern tree build_unary_op (location_t, enum tree_code, tree, bool);\n extern tree build_binary_op (location_t, enum tree_code, tree, tree, bool);\n@@ -1044,7 +1044,7 @@ extern tree resolve_overloaded_builtin (location_t, tree, vec<tree, va_gc> *);\n extern tree finish_label_address_expr (tree, location_t);\n \n /* Same function prototype, but the C and C++ front ends have\n-   different implementations.  Used in c-common.c.  */\n+   different implementations.  Used in c-common.cc.  */\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n extern bool lvalue_p (const_tree);\n@@ -1141,7 +1141,7 @@ class substring_loc;\n extern const char *c_get_substring_location (const substring_loc &substr_loc,\n \t\t\t\t\t     location_t *out_loc);\n \n-/* In c-gimplify.c.  */\n+/* In c-gimplify.cc.  */\n typedef struct bc_state\n {\n   tree bc_label[2];\n@@ -1154,11 +1154,11 @@ extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n extern tree c_build_bind_expr (location_t, tree, tree);\n \n-/* In c-lex.c.  */\n+/* In c-lex.cc.  */\n extern enum cpp_ttype\n conflict_marker_get_final_tok_kind (enum cpp_ttype tok1_kind);\n \n-/* In c-pch.c  */\n+/* In c-pch.cc  */\n extern void pch_init (void);\n extern void pch_cpp_save_state (void);\n extern int c_common_valid_pch (cpp_reader *pfile, const char *name, int fd);\n@@ -1171,7 +1171,7 @@ extern void c_common_pch_pragma (cpp_reader *pfile, const char *);\n /* In *-checksum.c */\n extern const unsigned char executable_checksum[16];\n \n-/* In c-cppbuiltin.c  */\n+/* In c-cppbuiltin.cc  */\n extern void builtin_define_std (const char *macro);\n extern void builtin_define_with_value (const char *, const char *, int);\n extern void builtin_define_with_int_value (const char *, HOST_WIDE_INT);\n@@ -1181,14 +1181,14 @@ extern void fe_file_change (const line_map_ordinary *);\n extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char,\n \t\t\t   rich_location *richloc);\n \n-/* In c-ppoutput.c  */\n+/* In c-ppoutput.cc  */\n extern void init_pp_output (FILE *);\n extern void preprocess_file (cpp_reader *);\n extern void pp_file_change (const line_map_ordinary *);\n extern void pp_dir_change (cpp_reader *, const char *);\n extern bool check_missing_format_attribute (tree, tree);\n \n-/* In c-omp.c  */\n+/* In c-omp.cc  */\n typedef wide_int_bitmask omp_clause_mask;\n \n #define OMP_CLAUSE_MASK_1 omp_clause_mask (1)\n@@ -1400,7 +1400,7 @@ extern bool valid_array_size_p (location_t, const_tree, tree, bool = true);\n extern void invalid_array_size_error (location_t, cst_size_error,\n \t\t\t\t      const_tree, const_tree);\n \n-/* In c-warn.c.  */\n+/* In c-warn.cc.  */\n extern void constant_expression_warning (tree);\n extern void constant_expression_error (tree);\n extern void overflow_warning (location_t, tree, tree = NULL_TREE);\n@@ -1466,7 +1466,7 @@ extern tree do_warn_duplicated_branches_r (tree *, int *, void *);\n extern void warn_for_multistatement_macros (location_t, location_t,\n \t\t\t\t\t    location_t, enum rid);\n \n-/* In c-attribs.c.  */\n+/* In c-attribs.cc.  */\n extern bool attribute_takes_identifier_p (const_tree);\n extern tree handle_deprecated_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n@@ -1481,7 +1481,7 @@ extern tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n extern bool has_attribute (location_t, tree, tree, tree (*)(tree));\n extern tree build_attr_access_from_parms (tree, bool);\n \n-/* In c-format.c.  */\n+/* In c-format.cc.  */\n extern bool valid_format_string_type_p (tree);\n \n /* A bitmap of flags to positional_argument.  */"}, {"sha": "528211cf50e3a76f345eb409c83d49785e27a84b", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -938,7 +938,7 @@ c_cpp_builtins (cpp_reader *pfile)\n     cpp_define_formatted (pfile, \"__GNUG__=%d\", major);\n   }\n \n-  /* For stddef.h.  They require macros defined in c-common.c.  */\n+  /* For stddef.h.  They require macros defined in c-common.cc.  */\n   c_stddef_cpp_builtins ();\n \n   if (c_dialect_cxx ())"}, {"sha": "d7878b7880c8b176cd321da6586aea322403dfe7", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -544,7 +544,7 @@ static const format_length_info strfmon_length_specs[] =\n };\n \n \n-/* Length modifiers used by the fortran/error.c routines.  */\n+/* Length modifiers used by the fortran/error.cc routines.  */\n static const format_length_info gcc_gfc_length_specs[] =\n {\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89, 0 },"}, {"sha": "a00b0a02dcc1da0e1785c9cd6d0bc14e04c9f83c", "filename": "gcc/c-family/c-gimplify.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -705,7 +705,7 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n       }\n \n     case DECL_EXPR:\n-      /* This is handled mostly by gimplify.c, but we have to deal with\n+      /* This is handled mostly by gimplify.cc, but we have to deal with\n \t not warning about int x = x; as it is a GCC extension to turn off\n \t this warning but only if warn_init_self is zero.  */\n       if (VAR_P (DECL_EXPR_DECL (*expr_p))"}, {"sha": "a344e9d706fe2b0b7afbdd1d1851a25629208b0d", "filename": "gcc/c-family/c-indentation.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-indentation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-indentation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions for c-indentation.c.\n+/* Definitions for c-indentation.cc.\n    Copyright (C) 2015-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "da0ab3c9ee477cac58898155e99550f88f86fbe7", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -99,7 +99,7 @@ extern enum objc_property_attribute_kind objc_prop_attr_kind_for_rid (enum rid);\n /* Objective-C / Objective-C++ entry points.  */\n \n /* The following ObjC/ObjC++ functions are called by the C and/or C++\n-   front-ends; they all must have corresponding stubs in stub-objc.c.  */\n+   front-ends; they all must have corresponding stubs in stub-objc.cc.  */\n extern void objc_write_global_declarations (void);\n extern tree objc_is_class_name (tree);\n extern tree objc_is_object_ptr (tree);"}, {"sha": "0251aec5348b22d52c130907542900cfed49b568", "filename": "gcc/c-family/c-omp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-omp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-omp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2993,8 +2993,8 @@ c_omp_predetermined_mapping (tree decl)\n /* For OpenACC, the OMP_CLAUSE_MAP_KIND of an OMP_CLAUSE_MAP is used internally\n    to distinguish clauses as seen by the user.  Return the \"friendly\" clause\n    name for error messages etc., where possible.  See also\n-   c/c-parser.c:c_parser_oacc_data_clause and\n-   cp/parser.c:cp_parser_oacc_data_clause.  */\n+   c/c-parser.cc:c_parser_oacc_data_clause and\n+   cp/parser.cc:cp_parser_oacc_data_clause.  */\n \n const char *\n c_omp_map_clause_name (tree clause, bool oacc)"}, {"sha": "21ff22d1b4fbd76a316c60653b961c880cde7e31", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -895,7 +895,7 @@ c_common_post_options (const char **pfilename)\n     warn_enum_compare = c_dialect_cxx () ? 1 : 0;\n \n   /* -Wpacked-bitfield-compat is on by default for the C languages.  The\n-     warning is issued in stor-layout.c which is not part of the front-end so\n+     warning is issued in stor-layout.cc which is not part of the front-end so\n      we need to selectively turn it on here.  */\n   if (warn_packed_bitfield_compat == -1)\n     warn_packed_bitfield_compat = 1;\n@@ -1819,7 +1819,7 @@ set_std_cxx23 (int iso)\n }\n \n /* Args to -d specify what to dump.  Silently ignore\n-   unrecognized options; they may be aimed at toplev.c.  */\n+   unrecognized options; they may be aimed at toplev.cc.  */\n static void\n handle_OPT_d (const char *arg)\n {"}, {"sha": "9004b04c613994893c7114491e6a90109d4835d9", "filename": "gcc/c-family/c-pragma.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-pragma.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-pragma.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -556,7 +556,7 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n     add_to_renaming_pragma_list (oldname, newname);\n }\n \n-/* This is called from here and from ia64-c.c.  */\n+/* This is called from here and from ia64-c.cc.  */\n void\n add_to_renaming_pragma_list (tree oldname, tree newname)\n {"}, {"sha": "ba7624dab1fd421efcc15fa89978bd80457df7b9", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -46,7 +46,7 @@ typedef void (*c_pretty_print_fn) (c_pretty_printer *, tree);\n    language using C syntax can derive from this datatype and reuse\n    facilities provided here.  A derived pretty-printer can override\n    any function listed in the vtable below.  See cp/cxx-pretty-print.h\n-   and cp/cxx-pretty-print.c for an example of derivation.  */\n+   and cp/cxx-pretty-print.cc for an example of derivation.  */\n class c_pretty_printer : public pretty_printer\n {\n public:"}, {"sha": "1367a10cee6b41f821829f4f33d5aa0ec5c781e5", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -71,15 +71,15 @@ endif\n # compute checksum over all object files and the options\n # re-use the checksum from the prev-final stage so it passes\n # the bootstrap comparison and allows comparing of the cc1 binary\n-cc1-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n+cc1-checksum.cc : build/genchecksum$(build_exeext) checksum-options \\\n \t$(C_OBJS) $(BACKEND) $(LIBDEPS) \n \tif [ -f ../stage_final ] \\\n \t   && cmp -s ../stage_current ../stage_final; then \\\n-\t  cp ../prev-gcc/cc1-checksum.c cc1-checksum.c; \\\n+\t  cp ../prev-gcc/cc1-checksum.cc cc1-checksum.cc; \\\n \telse \\\n \t  build/genchecksum$(build_exeext) $(C_OBJS) $(BACKEND) $(LIBDEPS) \\\n-                     checksum-options > cc1-checksum.c.tmp && \t\t \\\n-\t  $(srcdir)/../move-if-change cc1-checksum.c.tmp cc1-checksum.c; \\\n+                     checksum-options > cc1-checksum.cc.tmp && \t\t \\\n+\t  $(srcdir)/../move-if-change cc1-checksum.cc.tmp cc1-checksum.cc; \\\n \tfi\n \n cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n@@ -106,7 +106,7 @@ c.all.cross:\n c.start.encap:\n c.rest.encap:\n c.srcinfo:\n-c.srcextra: gengtype-lex.c\n+c.srcextra: gengtype-lex.cc\n \t-cp -p $^ $(srcdir)\n c.tags: force\n \tcd $(srcdir)/c; $(ETAGS) -o TAGS.sub *.c *.h; \\"}, {"sha": "18083d59618261620ee6499d8a64344b96d62dc6", "filename": "gcc/c/c-convert.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -45,12 +45,12 @@ along with GCC; see the file COPYING3.  If not see\n \n    Here is a list of all the functions that assume that widening and\n    narrowing is always done with a NOP_EXPR:\n-     In convert.c, convert_to_integer.\n-     In c-typeck.c, build_binary_op (boolean ops), and\n+     In convert.cc, convert_to_integer.\n+     In c-typeck.cc, build_binary_op (boolean ops), and\n \tc_common_truthvalue_conversion.\n-     In expr.c: expand_expr, for operands of a MULT_EXPR.\n-     In fold-const.c: fold.\n-     In tree.c: get_narrower and get_unwidened.  */\n+     In expr.cc: expand_expr, for operands of a MULT_EXPR.\n+     In fold-const.cc: fold.\n+     In tree.cc: get_narrower and get_unwidened.  */\n \f\n /* Subroutines of `convert'.  */\n "}, {"sha": "c701f07befe687ecc5364f5b1e00343db402b8f0", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -225,7 +225,7 @@ struct GTY(()) lang_identifier {\n   struct c_binding *label_binding;  /* labels */\n };\n \n-/* Validate c-lang.c's assumptions.  */\n+/* Validate c-lang.cc's assumptions.  */\n extern char C_SIZEOF_STRUCT_LANG_IDENTIFIER_isnt_accurate\n [(sizeof(struct lang_identifier) == C_SIZEOF_STRUCT_LANG_IDENTIFIER) ? 1 : -1];\n \n@@ -1367,7 +1367,7 @@ pop_scope (void)\n \t  gcc_fallthrough ();\n \t  /* Parameters go in DECL_ARGUMENTS, not BLOCK_VARS, and have\n \t     already been put there by store_parm_decls.  Unused-\n-\t     parameter warnings are handled by function.c.\n+\t     parameter warnings are handled by function.cc.\n \t     error_mark_node obviously does not go in BLOCK_VARS and\n \t     does not get unused-variable warnings.  */\n \tcase PARM_DECL:\n@@ -5527,7 +5527,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n       if (TREE_PUBLIC (decl))\n \tc_determine_visibility (decl);\n \n-      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n+      /* This is a no-op in c-lang.cc or something real in objc-act.cc.  */\n       if (c_dialect_objc ())\n \tobjc_check_decl (decl);\n "}, {"sha": "0b60df9750f64988e59293962ee735c7109e0498", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_C_OBJC_COMMON\n \n /* Lang hooks that are shared between C and ObjC are defined here.  Hooks\n-   specific to C or ObjC go in c-lang.c and objc/objc-lang.c, respectively.  */\n+   specific to C or ObjC go in c-lang.cc and objc/objc-lang.cc, respectively.  */\n \n #undef LANG_HOOKS_IDENTIFIER_SIZE\n #define LANG_HOOKS_IDENTIFIER_SIZE C_SIZEOF_STRUCT_LANG_IDENTIFIER"}, {"sha": "e9086c5852478a95383093831a67af89f3be98d1", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1413,7 +1413,7 @@ c_parser_skip_to_end_of_block_or_statement (c_parser *parser)\n   parser->error = false;\n }\n \n-/* CPP's options (initialized by c-opts.c).  */\n+/* CPP's options (initialized by c-opts.cc).  */\n extern cpp_options *cpp_opts;\n \n /* Save the warning flags which are controlled by __extension__.  */"}, {"sha": "3d256b688b4f75c6331228d858159b0d0df38bc6", "filename": "gcc/c/c-parser.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_C_PARSER_H\n #define GCC_C_PARSER_H\n \n-/* The C lexer intermediates between the lexer in cpplib and c-lex.c\n+/* The C lexer intermediates between the lexer in cpplib and c-lex.cc\n    and the C parser.  Unlike the C++ lexer, the parser structure\n    stores the lexer information instead of using a separate structure.\n    Identifiers are separated into ordinary identifiers, type names,"}, {"sha": "c70f0ba5ab63fe456ab260c66001df676f994957", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -23,8 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"diagnostic.h\"\n \n-/* struct lang_identifier is private to c-decl.c, but langhooks.c needs to\n-   know how big it is.  This is sanity-checked in c-decl.c.  */\n+/* struct lang_identifier is private to c-decl.cc, but langhooks.cc needs to\n+   know how big it is.  This is sanity-checked in c-decl.cc.  */\n #define C_SIZEOF_STRUCT_LANG_IDENTIFIER \\\n   (sizeof (struct c_common_identifier) + 3 * sizeof (void *))\n \n@@ -538,14 +538,14 @@ enum c_inline_static_type {\n };\n \n \f\n-/* in c-parser.c */\n+/* in c-parser.cc */\n extern void c_parse_init (void);\n extern bool c_keyword_starts_typename (enum rid keyword);\n \n-/* in c-aux-info.c */\n+/* in c-aux-info.cc */\n extern void gen_aux_info_record (tree, int, int, int);\n \n-/* in c-decl.c */\n+/* in c-decl.cc */\n struct c_spot_bindings;\n class c_struct_parse_info;\n extern struct obstack parser_obstack;\n@@ -660,15 +660,15 @@ extern struct c_declspecs *declspecs_add_alignas (location_t,\n \t\t\t\t\t\t  struct c_declspecs *, tree);\n extern struct c_declspecs *finish_declspecs (struct c_declspecs *);\n \n-/* in c-objc-common.c */\n+/* in c-objc-common.cc */\n extern bool c_objc_common_init (void);\n extern bool c_missing_noreturn_ok_p (tree);\n extern bool c_warn_unused_global_decl (const_tree);\n extern void c_initialize_diagnostics (diagnostic_context *);\n extern bool c_vla_unspec_p (tree x, tree fn);\n extern alias_set_type c_get_alias_set (tree);\n \n-/* in c-typeck.c */\n+/* in c-typeck.cc */\n extern int in_alignof;\n extern int in_sizeof;\n extern int in_typeof;\n@@ -783,7 +783,7 @@ extern int current_function_returns_null;\n \n extern int current_function_returns_abnormally;\n \n-/* In c-decl.c */\n+/* In c-decl.cc */\n \n /* Tell the binding oracle what kind of binding we are looking for.  */\n \n@@ -798,7 +798,7 @@ enum c_oracle_request\n    create bindings when needed by the C compiler.  The oracle is told\n    the name and type of the binding to create.  It can call pushdecl\n    or the like to ensure the binding is visible; or do nothing,\n-   leaving the binding untouched.  c-decl.c takes note of when the\n+   leaving the binding untouched.  c-decl.cc takes note of when the\n    oracle has been called and will not call it again if it fails to\n    create a given binding.  */\n \n@@ -816,7 +816,7 @@ extern void c_pushtag (location_t, tree, tree);\n extern void c_bind (location_t, tree, bool);\n extern bool tag_exists_p (enum tree_code, tree);\n \n-/* In c-errors.c */\n+/* In c-errors.cc */\n extern bool pedwarn_c90 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool pedwarn_c99 (location_t, int opt, const char *, ...)\n@@ -832,7 +832,7 @@ extern void\n set_c_expr_source_range (c_expr *expr,\n \t\t\t source_range src_range);\n \n-/* In c-fold.c */\n+/* In c-fold.cc */\n extern vec<tree> incomplete_record_decls;\n \n #if CHECKING_P"}, {"sha": "b06f07874768de7cc63b20967a0f0ab516c03b0b", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1009,7 +1009,7 @@ c_common_type (tree t1, tree t2)\n     return t2;\n }\n \f\n-/* Wrapper around c_common_type that is used by c-common.c and other\n+/* Wrapper around c_common_type that is used by c-common.cc and other\n    front end optimizations that remove promotions.  ENUMERAL_TYPEs\n    are allowed here and are converted to their compatible integer types.\n    BOOLEAN_TYPEs are allowed here and return either boolean_type_node or\n@@ -14996,7 +14996,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH))\n \t    /* For attach/detach clauses, set OMP_CLAUSE_SIZE (representing a\n \t       bias) to zero here, so it is not set erroneously to the pointer\n-\t       size later on in gimplify.c.  */\n+\t       size later on in gimplify.cc.  */\n \t    OMP_CLAUSE_SIZE (c) = size_zero_node;\n \t  while (TREE_CODE (t) == INDIRECT_REF\n \t\t || TREE_CODE (t) == ARRAY_REF)"}, {"sha": "4526f634b5b3a2e7e397e06cc5ca39edd5e986f7", "filename": "gcc/c/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fconfig-lang.in?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -29,4 +29,4 @@ compilers=\"cc1\\$(exeext)\"\n \n target_libs=\n \n-gtfiles=\"\\$(srcdir)/c/c-lang.c \\$(srcdir)/c/c-tree.h \\$(srcdir)/c/c-decl.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-cppbuiltin.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/c-family/c-format.c \\$(srcdir)/c/c-objc-common.c \\$(srcdir)/c/c-parser.h \\$(srcdir)/c/c-parser.c \\$(srcdir)/c/c-lang.h\"\n+gtfiles=\"\\$(srcdir)/c/c-lang.cc \\$(srcdir)/c/c-tree.h \\$(srcdir)/c/c-decl.cc \\$(srcdir)/c-family/c-common.cc \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-cppbuiltin.cc \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.cc \\$(srcdir)/c-family/c-format.cc \\$(srcdir)/c/c-objc-common.cc \\$(srcdir)/c/c-parser.h \\$(srcdir)/c/c-parser.cc \\$(srcdir)/c/c-lang.h\""}, {"sha": "9e28ec31d2bb84250d16efa1fc003097651e263c", "filename": "gcc/caller-save.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcaller-save.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcaller-save.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -173,7 +173,7 @@ reg_restore_code (int reg, machine_mode mode)\n /* Initialize for caller-save.\n \n    Look at all the hard registers that are used by a call and for which\n-   reginfo.c has not already excluded from being used across a call.\n+   reginfo.cc has not already excluded from being used across a call.\n \n    Ensure that we can find a mode to save the register and that there is a\n    simple insn to save and restore the register.  This latter check avoids\n@@ -520,7 +520,7 @@ setup_save_areas (void)\n \t  CLEAR_HARD_REG_SET (this_insn_sets);\n \t  note_stores (insn, mark_set_regs, &this_insn_sets);\n \t  /* Sibcalls are considered to set the return value,\n-\t     compare df-scan.c:df_get_call_refs.  */\n+\t     compare df-scan.cc:df_get_call_refs.  */\n \t  if (SIBLING_CALL_P (insn) && crtl->return_rtx)\n \t    mark_set_regs (crtl->return_rtx, NULL_RTX, &this_insn_sets);\n "}, {"sha": "e64a937ea3354ae223c15e1a827f1cecff03889a", "filename": "gcc/calls.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1351,7 +1351,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t if args[i].reg is nonzero.\n \n \t These decisions are driven by the FUNCTION_... macros and must agree\n-\t with those made by function.c.  */\n+\t with those made by function.cc.  */\n \n       /* See if this argument should be passed by invisible reference.  */\n       function_arg_info arg (type, argpos < n_named_args);\n@@ -1548,7 +1548,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \n       /* ??? Traditionally we've passed TYPE_MODE here, instead of the\n \t promoted_mode used for function_arg above.  However, the\n-\t corresponding handling of incoming arguments in function.c\n+\t corresponding handling of incoming arguments in function.cc\n \t does pass the promoted mode.  */\n       arg.mode = TYPE_MODE (type);\n       targetm.calls.function_arg_advance (args_so_far, arg);\n@@ -3669,7 +3669,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t}\n \n       /* For calls to `setjmp', etc., inform\n-\t function.c:setjmp_warnings that it should complain if\n+\t function.cc:setjmp_warnings that it should complain if\n \t nonvolatile values are live.  For functions that cannot\n \t return, inform flow that control does not fall through.  */\n \n@@ -4526,7 +4526,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n \t  NO_DEFER_POP;\n \n-\t  /* Indicate argument access so that alias.c knows that these\n+\t  /* Indicate argument access so that alias.cc knows that these\n \t     values are live.  */\n \t  if (argblock)\n \t    use = plus_constant (Pmode, argblock,\n@@ -4535,7 +4535,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t    continue;\n \t  else\n \t    {\n-\t      /* When arguments are pushed, trying to tell alias.c where\n+\t      /* When arguments are pushed, trying to tell alias.cc where\n \t\t exactly this argument is won't work, because the\n \t\t auto-increment causes confusion.  So we merely indicate\n \t\t that we access something with a known mode somewhere on\n@@ -4685,7 +4685,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n   targetm.calls.end_call_args ();\n \n-  /* For calls to `setjmp', etc., inform function.c:setjmp_warnings\n+  /* For calls to `setjmp', etc., inform function.cc:setjmp_warnings\n      that it should complain if nonvolatile values are live.  For\n      functions that cannot return, inform flow that control does not\n      fall through.  */"}, {"sha": "a2c06765187c6cde0af902ab9e31130dcbe71d0d", "filename": "gcc/cfg-flags.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfg-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfg-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg-flags.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -74,7 +74,7 @@ DEF_BASIC_BLOCK_FLAG(NON_LOCAL_GOTO_TARGET, 8)\n DEF_BASIC_BLOCK_FLAG(RTL, 9) \n \n /* Set on blocks that are forwarder blocks.\n-   Only used in cfgcleanup.c.  */\n+   Only used in cfgcleanup.cc.  */\n DEF_BASIC_BLOCK_FLAG(FORWARDER_BLOCK, 10)\n \n /* Set on blocks that cannot be threaded through.\n@@ -163,11 +163,11 @@ DEF_EDGE_FLAG(CROSSING, 11)\n    This flag is only used for the RTL CFG.  */\n DEF_EDGE_FLAG(SIBCALL, 12)\n \n-/* Candidate for straight line flow.  Only used in bb-reorder.c.\n+/* Candidate for straight line flow.  Only used in bb-reorder.cc.\n    This flag is only used for the RTL CFG.  */\n DEF_EDGE_FLAG(CAN_FALLTHRU, 13)\n \n-/* Exit of a loop.  This is only used in ifcvt.c.\n+/* Exit of a loop.  This is only used in ifcvt.cc.\n    This flag is only used for the RTL CFG.  */\n DEF_EDGE_FLAG(LOOP_EXIT, 14)\n "}, {"sha": "e570d27768b4c77ec60b264e48dba3a86f9e9310", "filename": "gcc/cfganal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfganal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfganal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -701,7 +701,7 @@ post_order_compute (int *post_order, bool include_entry_exit,\n \n /* Helper routine for inverted_post_order_compute\n    flow_dfs_compute_reverse_execute, and the reverse-CFG\n-   deapth first search in dominance.c.\n+   deapth first search in dominance.cc.\n    BB has to belong to a region of CFG\n    unreachable by inverted traversal from the exit.\n    i.e. there's no control flow path from ENTRY to EXIT"}, {"sha": "335af4911bb9bd154c3023acf45c9f6d7a221aa5", "filename": "gcc/cfgcleanup.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -147,7 +147,7 @@ try_simplify_condjump (basic_block cbranch_block)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (jump_block) != BB_PARTITION (jump_dest_block)\n       || (cbranch_jump_edge->flags & EDGE_CROSSING))\n@@ -628,7 +628,7 @@ merge_blocks_move_predecessor_nojumps (basic_block a, basic_block b)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return;\n@@ -674,7 +674,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return;\n@@ -734,7 +734,7 @@ merge_blocks_move (edge e, basic_block b, basic_block c, int mode)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (b) != BB_PARTITION (c))\n     return NULL;\n@@ -1180,7 +1180,7 @@ old_insns_match_p (int mode ATTRIBUTE_UNUSED, rtx_insn *i1, rtx_insn *i2)\n \n   /* If this is a CALL_INSN, compare register usage information.\n      If we don't check this on stack register machines, the two\n-     CALL_INSNs might be merged leaving reg-stack.c with mismatching\n+     CALL_INSNs might be merged leaving reg-stack.cc with mismatching\n      numbers of stack registers in the same basic block.\n      If we don't check this on machines with delay slots, a delay slot may\n      be filled that clobbers a parameter expected by the subroutine.\n@@ -2194,7 +2194,7 @@ try_crossjump_bb (int mode, basic_block bb)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (EDGE_PRED (bb, 0)->src) !=\n \t\t\t\t\tBB_PARTITION (EDGE_PRED (bb, 1)->src)"}, {"sha": "d51af2e3084f7e48c68df962859b888c5e16b956", "filename": "gcc/cfgexpand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgexpand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgexpand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4056,7 +4056,7 @@ expand_gimple_stmt (gimple *stmt)\n /* A subroutine of expand_gimple_basic_block.  Expand one GIMPLE_CALL\n    that has CALL_EXPR_TAILCALL set.  Returns non-null if we actually\n    generated a tail call (something that might be denied by the ABI\n-   rules governing the call; see calls.c).\n+   rules governing the call; see calls.cc).\n \n    Sets CAN_FALLTHRU if we generated a *conditional* tail call, and\n    can still reach the rest of BB.  The case here is __builtin_sqrt,"}, {"sha": "e435891fac640b1b51985a196a75bbc46b1f1c12", "filename": "gcc/cfghooks.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1455,7 +1455,7 @@ split_block_before_cond_jump (basic_block bb)\n   return cfg_hooks->split_block_before_cond_jump (bb);\n }\n \n-/* Work-horse for passes.c:check_profile_consistency.\n+/* Work-horse for passes.cc:check_profile_consistency.\n    Do book-keeping of the CFG for the profile consistency checker.\n    Store the counting in RECORD.  */\n \n@@ -1539,7 +1539,7 @@ profile_record_check_consistency (profile_record *record)\n    }\n }\n \n-/* Work-horse for passes.c:acount_profile.\n+/* Work-horse for passes.cc:acount_profile.\n    Do book-keeping of the CFG for the profile accounting.\n    Store the counting in RECORD.  */\n "}, {"sha": "0982d70035e633a220ee23c6f15718c8dd0c94b6", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,14 +25,14 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Structure to gather statistic about profile consistency, per pass.\n    An array of this structure, indexed by pass static number, is allocated\n-   in passes.c.  The structure is defined here so that different CFG modes\n+   in passes.cc.  The structure is defined here so that different CFG modes\n    can do their book-keeping via CFG hooks.\n \n    For every field[2], field[0] is the count before the pass runs, and\n    field[1] is the post-pass count.  This allows us to monitor the effect\n    of each individual pass on the profile consistency.\n    \n-   This structure is not supposed to be used by anything other than passes.c\n+   This structure is not supposed to be used by anything other than passes.cc\n    and one CFG hook per CFG mode.  */\n struct profile_record\n {"}, {"sha": "9ccc65b0a2e7c99bd7826ff4a3a53052dcc80d92", "filename": "gcc/cfgrtl.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgrtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcfgrtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -490,7 +490,7 @@ class pass_free_cfg : public rtl_opt_pass\n unsigned int\n pass_free_cfg::execute (function *)\n {\n-  /* The resource.c machinery uses DF but the CFG isn't guaranteed to be\n+  /* The resource.cc machinery uses DF but the CFG isn't guaranteed to be\n      valid at that point so it would be too late to call df_analyze.  */\n   if (DELAY_SLOTS && optimize > 0 && flag_delayed_branch)\n     {\n@@ -954,7 +954,7 @@ rtl_can_merge_blocks (basic_block a, basic_block b)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See  the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return false;\n@@ -1043,7 +1043,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See  the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (src) != BB_PARTITION (target))\n     return NULL;\n@@ -3755,7 +3755,7 @@ make_pass_outof_cfg_layout_mode (gcc::context *ctxt)\n    bits are the STAY_IN_CFGLAYOUT_MODE bits.  The tracer pass was moved\n    to GIMPLE a long time ago, but it doesn't relink the basic block\n    chain.  It could do that (to give better initial RTL) if this function\n-   is made IR-agnostic (and moved to cfganal.c or cfg.c while at it).  */\n+   is made IR-agnostic (and moved to cfganal.cc or cfg.cc while at it).  */\n \n void\n relink_block_chain (bool stay_in_cfglayout_mode)\n@@ -4744,7 +4744,7 @@ cfg_layout_can_merge_blocks_p (basic_block a, basic_block b)\n      be optimizable (or blocks that appear to be mergeable), but which really\n      must be left untouched (they are required to make it safely across\n      partition boundaries).  See  the comments at the top of\n-     bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n+     bb-reorder.cc:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return false;"}, {"sha": "ea8db2f4b8ca6c68b5837103deeb303d470910d3", "filename": "gcc/cgraph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1821,7 +1821,7 @@ release_function_body (tree decl)\n /* Release memory used to represent body of function.\n    Use this only for functions that are released before being translated to\n    target code (i.e. RTL).  Functions that are compiled to RTL and beyond\n-   are free'd in final.c via free_after_compilation().\n+   are free'd in final.cc via free_after_compilation().\n    KEEP_ARGUMENTS are useful only if you want to rebuild body as thunk.  */\n \n void\n@@ -4073,7 +4073,7 @@ cgraph_node::get_fun () const\n   return fun;\n }\n \n-/* Reset all state within cgraph.c so that we can rerun the compiler\n+/* Reset all state within cgraph.cc so that we can rerun the compiler\n    within the same process.  For use by toplev::finalize.  */\n \n void"}, {"sha": "a265107de58567ad8a1d8f6a5dfdef1fbaac255e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -504,7 +504,7 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \t declarations). In this case the assembler names compare via\n \t assembler_names_equal_p and weakref is false\n        - aliases that are renamed at a time being output to final file\n-\t by varasm.c. For those DECL_ASSEMBLER_NAME have\n+\t by varasm.cc. For those DECL_ASSEMBLER_NAME have\n \t IDENTIFIER_TRANSPARENT_ALIAS set and thus also their assembler\n \t name must be unique.\n \t Weakrefs belong to this category when we target assembler without\n@@ -1106,7 +1106,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n   /* Release memory used to represent body of function.\n      Use this only for functions that are released before being translated to\n      target code (i.e. RTL).  Functions that are compiled to RTL and beyond\n-     are free'd in final.c via free_after_compilation().  */\n+     are free'd in final.cc via free_after_compilation().  */\n   void release_body (bool keep_arguments = false);\n \n   /* Return the DECL_STRUCT_FUNCTION of the function.  */\n@@ -1415,7 +1415,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n \n   struct cgraph_rtl_info *rtl;\n \n-  /* Expected number of executions: calculated in profile.c.  */\n+  /* Expected number of executions: calculated in profile.cc.  */\n   profile_count count;\n   /* How to scale counts at materialization time; used to merge\n      LTO units with different number of profile runs.  */\n@@ -1883,7 +1883,7 @@ class GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n   /* Return num_speculative_targets of this edge.  */\n   int num_speculative_call_targets_p (void);\n \n-  /* Expected number of executions: calculated in profile.c.  */\n+  /* Expected number of executions: calculated in profile.cc.  */\n   profile_count count;\n   cgraph_node *caller;\n   cgraph_node *callee;\n@@ -2567,7 +2567,7 @@ asmname_hasher::equal (symtab_node *n, const_tree t)\n   return symbol_table::decl_assembler_name_equal (n->decl, t);\n }\n \n-/* In cgraph.c  */\n+/* In cgraph.cc  */\n void cgraph_c_finalize (void);\n void release_function_body (tree);\n cgraph_indirect_call_info *cgraph_allocate_init_indirect_info (void);\n@@ -2578,7 +2578,7 @@ bool cgraph_function_possibly_inlined_p (tree);\n const char* cgraph_inline_failed_string (cgraph_inline_failed_t);\n cgraph_inline_failed_type_t cgraph_inline_failed_type (cgraph_inline_failed_t);\n \n-/* In cgraphunit.c  */\n+/* In cgraphunit.cc  */\n void cgraphunit_c_finalize (void);\n int tp_first_run_node_cmp (const void *pa, const void *pb);\n \n@@ -2591,7 +2591,7 @@ basic_block init_lowered_empty_function (tree, bool, profile_count);\n \n tree thunk_adjust (gimple_stmt_iterator *, tree, bool, HOST_WIDE_INT, tree,\n \t\t   HOST_WIDE_INT);\n-/* In cgraphclones.c  */\n+/* In cgraphclones.cc  */\n \n tree clone_function_name_numbered (const char *name, const char *suffix);\n tree clone_function_name_numbered (tree decl, const char *suffix);\n@@ -2608,18 +2608,18 @@ void tree_function_versioning (tree, tree, vec<ipa_replace_map *, va_gc> *,\n void dump_callgraph_transformation (const cgraph_node *original,\n \t\t\t\t    const cgraph_node *clone,\n \t\t\t\t    const char *suffix);\n-/* In cgraphbuild.c  */\n+/* In cgraphbuild.cc  */\n int compute_call_stmt_bb_frequency (tree, basic_block bb);\n void record_references_in_initializer (tree, bool);\n \n-/* In ipa.c  */\n+/* In ipa.cc  */\n void cgraph_build_static_cdtor (char which, tree body, int priority);\n bool ipa_discover_variable_flags (void);\n \n-/* In varpool.c  */\n+/* In varpool.cc  */\n tree ctor_for_folding (tree);\n \n-/* In ipa-inline-analysis.c  */\n+/* In ipa-inline-analysis.cc  */\n void initialize_inline_failed (struct cgraph_edge *);\n bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);\n "}, {"sha": "60da1e867c8781e1b9f27df4ccc1b4b96ed75a18", "filename": "gcc/cgraphclones.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraphclones.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraphclones.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -469,7 +469,7 @@ static GTY(()) hash_map<const char *, unsigned> *clone_fn_ids;\n    each NAME) unspecified number.  If clone numbering is not needed\n    then the two argument clone_function_name should be used instead.\n    Should not be called directly except for by\n-   lto-partition.c:privatize_symbol_name_1.  */\n+   lto-partition.cc:privatize_symbol_name_1.  */\n \n tree\n clone_function_name_numbered (const char *name, const char *suffix)"}, {"sha": "e043f9f12bc2640dab91692485130d46143a6c34", "filename": "gcc/cgraphunit.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraphunit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcgraphunit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2531,7 +2531,7 @@ symbol_table::finalize_compilation_unit (void)\n   timevar_pop (TV_CGRAPH);\n }\n \n-/* Reset all state within cgraphunit.c so that we can rerun the compiler\n+/* Reset all state within cgraphunit.cc so that we can rerun the compiler\n    within the same process.  For use by toplev::finalize.  */\n \n void"}, {"sha": "98cacea0e581ba63a9fc1bc4b151e07005c25570", "filename": "gcc/collect-utils.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_COLLECT_UTILS_H\n #define GCC_COLLECT_UTILS_H\n \n-/* Provided in collect-utils.c.  */\n+/* Provided in collect-utils.cc.  */\n extern void notice (const char *, ...)\n   __attribute__ ((format (printf, 1, 2)));\n extern void fatal_signal (int);"}, {"sha": "7efbca54ea27dfe84f90972c697f8a2469732b3c", "filename": "gcc/collect2-aix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect2-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect2-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2-aix.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -19,7 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifndef GCC_COLLECT2_AIX_H\n #define GCC_COLLECT2_AIX_H\n-/* collect2-aix.c requires mmap support.  It should otherwise be\n+/* collect2-aix.cc requires mmap support.  It should otherwise be\n    fairly portable.  */\n #if defined(CROSS_DIRECTORY_STRUCTURE) \\\n     && defined(TARGET_AIX_VERSION) \\"}, {"sha": "0185b9d9e824678e95ecfbd16714980d3fc1978d", "filename": "gcc/collect2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcollect2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -739,7 +739,7 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n   else\n     post_ld_pass (false); /* No LTO objects were found, no temp file.  */\n }\n-/* Entry point for linker invoation.  Called from main in collect2.c.\n+/* Entry point for linker invoation.  Called from main in collect2.cc.\n    LD_ARGV is an array of arguments for the linker.  */\n \n static void"}, {"sha": "e8ba2717063ad9933faedd1087a3a5903b30f077", "filename": "gcc/combine-stack-adj.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcombine-stack-adj.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcombine-stack-adj.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n    targets that define PREFERRED_STACK_BOUNDARY more aligned than\n    STACK_BOUNDARY (e.g. x86), or if not all registers can be pushed\n    (e.g. x86 fp regs) which would ordinarily have to be implemented\n-   as a sub/mov pair due to restrictions in calls.c.\n+   as a sub/mov pair due to restrictions in calls.cc.\n \n    Propagation stops when any of the insns that need adjusting are\n    (a) no longer valid because we've exceeded their range, (b) a"}, {"sha": "2d406354735a74327a32d4c9c8595e2e70725a55", "filename": "gcc/combine.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1514,7 +1514,7 @@ setup_incoming_promotions (rtx_insn *first)\n       uns3 = TYPE_UNSIGNED (DECL_ARG_TYPE (arg));\n \n       /* The mode and signedness of the argument as it is actually passed,\n-         see assign_parm_setup_reg in function.c.  */\n+         see assign_parm_setup_reg in function.cc.  */\n       mode3 = promote_function_mode (TREE_TYPE (arg), mode1, &uns3,\n \t\t\t\t     TREE_TYPE (cfun->decl), 0);\n \n@@ -5907,7 +5907,7 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \t  return gen_int_mode (c, mode);\n       }\n \n-      /* Similarly to what we do in simplify-rtx.c, a truncate of a register\n+      /* Similarly to what we do in simplify-rtx.cc, a truncate of a register\n \t whose value is a comparison can be replaced with a subreg if\n \t STORE_FLAG_VALUE permits.  */\n       if (HWI_COMPUTABLE_MODE_P (mode)\n@@ -13043,7 +13043,7 @@ count_rtxs (rtx x)\n \f\n /* Utility function for following routine.  Called when X is part of a value\n    being stored into last_set_value.  Sets last_set_table_tick\n-   for each register mentioned.  Similar to mention_regs in cse.c  */\n+   for each register mentioned.  Similar to mention_regs in cse.cc  */\n \n static void\n update_table_tick (rtx x)"}, {"sha": "fe7bcf66752714898a76ef528f8691db91b6624a", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -150,7 +150,7 @@ bool flag_stack_usage_info = false\n ; the generated assembly code (to make it more readable).  This option\n ; is generally only of use to those who actually need to read the\n ; generated assembly code (perhaps while debugging the compiler itself).\n-; Currently, this switch is only used by dwarf2out.c; however, it is intended\n+; Currently, this switch is only used by dwarf2out.cc; however, it is intended\n ; to be a catchall for printing debug information in the assembler file.\n Variable\n int flag_debug_asm"}, {"sha": "dfda5b8372acdb46921b5a927e2e122fc31c9404", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -71,7 +71,7 @@ static const struct default_options aarch_option_optimization_table[] =\n    -mcpu=CPU is shorthand for -march=ARCH_FOR_CPU, -mtune=CPU.\n    If either of -march or -mtune is given, they override their\n    respective component of -mcpu.  This logic is implemented\n-   in config/aarch64/aarch64.c:aarch64_override_options.  */\n+   in config/aarch64/aarch64.cc:aarch64_override_options.  */\n \n bool\n aarch64_handle_option (struct gcc_options *opts,"}, {"sha": "c38812f1ea6a690cd19b0dc74d963c4f5ae155ca", "filename": "gcc/common/config/arm/arm-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1054,7 +1054,7 @@ arm_asm_auto_mfpu (int argc, const char **argv)\n   bitmap_and (fpubits, fpubits, target_isa);\n \n   /* The logic below is essentially identical to that in\n-     arm.c:arm_identify_fpu_from_isa(), but that only works in the main\n+     arm.cc:arm_identify_fpu_from_isa(), but that only works in the main\n      part of the compiler.  */\n \n   /* If there are no FPU capability bits, we just pass -mfpu=softvfp.  */"}, {"sha": "f4e3f550b07cb393cfc8566e3e5849a4eb46ae97", "filename": "gcc/common/config/avr/avr-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -70,7 +70,7 @@ static const struct default_options avr_option_optimization_table[] =\n \n /* Implement `TARGET_HANDLE_OPTION'.  */\n \n-/* This is the same logic that driver-avr.c:avr_double_lib() applies\n+/* This is the same logic that driver-avr.cc:avr_double_lib() applies\n    during DRIVER_SELF_SPECS, but this time we complain about -mdouble=\n    and -mlong-double= that are not provided by --with-double= resp.\n    --with-long-double=  */"}, {"sha": "2d0646a68f833ae9159dc8d7da185467c02fe9c8", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -27,9 +27,9 @@ struct _isa_names_table\n   const char *const option;\n };\n \n-/* NB: isa_names_table is shared by i386-builtins.c, driver-i386.c and\n+/* NB: isa_names_table is shared by i386-builtins.cc, driver-i386.cc and\n    gcc.target/i386/builtin_target.c.  isa_names_table is a static const\n-   array in i386-builtins.c and driver-i386.c.  But it is a list of\n+   array in i386-builtins.cc and driver-i386.cc.  But it is a list of\n    assert statements in gcc.target/i386/builtin_target.c.  */\n \n #ifndef ISA_NAMES_TABLE_START"}, {"sha": "435d7ad64b3db9adcd01c9921ef84a0e90fac882", "filename": "gcc/conditions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconditions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconditions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconditions.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions for condition code handling in final.c and output routines.\n+/* Definitions for condition code handling in final.cc and output routines.\n    Copyright (C) 1987-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "bad51e079b25b715a298cebace2c839707911057", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -330,7 +330,7 @@ aarch64*-*-*)\n \tcxx_target_objs=\"aarch64-c.o\"\n \td_target_objs=\"aarch64-d.o\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o aarch64-sve-builtins-sve2.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch64-bti-insert.o aarch64-cc-fusion.o\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.c \\$(srcdir)/config/aarch64/aarch64-sve-builtins.h \\$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\"\n+\ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.cc \\$(srcdir)/config/aarch64/aarch64-sve-builtins.h \\$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\"\n \ttarget_has_targetm_common=yes\n \t;;\n alpha*-*-*)\n@@ -360,7 +360,7 @@ arm*-*-*)\n \tcxx_target_objs=\"arm-c.o\"\n \td_target_objs=\"arm-d.o\"\n \textra_options=\"${extra_options} arm/arm-tables.opt\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/arm/arm-builtins.c \\$(srcdir)/config/arm/arm-mve-builtins.h \\$(srcdir)/config/arm/arm-mve-builtins.cc\"\n+\ttarget_gtfiles=\"\\$(srcdir)/config/arm/arm-builtins.cc \\$(srcdir)/config/arm/arm-mve-builtins.h \\$(srcdir)/config/arm/arm-mve-builtins.cc\"\n \t;;\n avr-*-*)\n \tcpu_type=avr\n@@ -393,7 +393,7 @@ i[34567]86-*-* | x86_64-*-*)\n \tcxx_target_objs=\"i386-c.o\"\n \td_target_objs=\"i386-d.o\"\n \textra_objs=\"x86-tune-sched.o x86-tune-sched-bd.o x86-tune-sched-atom.o x86-tune-sched-core.o i386-options.o i386-builtins.o i386-expand.o i386-features.o\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/i386/i386-builtins.c \\$(srcdir)/config/i386/i386-expand.c \\$(srcdir)/config/i386/i386-options.c\"\n+\ttarget_gtfiles=\"\\$(srcdir)/config/i386/i386-builtins.cc \\$(srcdir)/config/i386/i386-expand.cc \\$(srcdir)/config/i386/i386-options.cc\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n@@ -500,8 +500,8 @@ powerpc*-*-*)\n \t\t;;\n \tesac\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c \\$(srcdir)/config/rs6000/rs6000-call.c\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-pcrel-opt.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.cc \\$(srcdir)/config/rs6000/rs6000-call.cc\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-pcrel-opt.cc\"\n \ttarget_gtfiles=\"$target_gtfiles ./rs6000-builtins.h\"\n \t;;\n pru-*-*)\n@@ -516,8 +516,8 @@ rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n \textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n \textra_objs=\"${extra_objs} rs6000-call.o rs6000-pcrel-opt.o\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c \\$(srcdir)/config/rs6000/rs6000-call.c\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-pcrel-opt.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.cc \\$(srcdir)/config/rs6000/rs6000-call.cc\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-pcrel-opt.cc\"\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc\n@@ -726,7 +726,7 @@ case ${target} in\n   tm_defines=\"$tm_defines DEF_LD64=\\\\\\\"${def_ld64}\\\\\\\"\"\n   tm_file=\"${tm_file} ${cpu_type}/darwin.h\"\n   tm_p_file=\"${tm_p_file} darwin-protos.h\"\n-  target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/darwin.c\"\n+  target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/darwin.cc\"\n   extra_options=\"${extra_options} rpath.opt darwin.opt\"\n   c_target_objs=\"${c_target_objs} darwin-c.o\"\n   cxx_target_objs=\"${cxx_target_objs} darwin-c.o\"\n@@ -991,7 +991,7 @@ case ${target} in\n   xmake_file=vms/x-vms\n   tmake_file=\"vms/t-vms t-slibgcc\"\n   extra_objs=\"vms.o\"\n-  target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/vms/vms.c\"\n+  target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/vms/vms.cc\"\n   tm_p_file=\"${tm_p_file} vms/vms-protos.h\"\n   xm_file=\"vms/xm-vms.h\"\n   c_target_objs=\"vms-c.o\"\n@@ -1542,7 +1542,7 @@ bpf-*-*)\n         extra_headers=\"bpf-helpers.h\"\n         use_gcc_stdint=provide\n         extra_objs=\"coreout.o\"\n-        target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/bpf/coreout.c\"\n+        target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/bpf/coreout.cc\"\n         ;;\n cr16-*-elf)\n         tm_file=\"elfos.h ${tm_file} newlib-stdint.h\"\n@@ -1577,7 +1577,7 @@ csky-*-*)\n \tfi\n \ttm_file=\"csky/csky.h\"\n \tmd_file=\"csky/csky.md\"\n-\tout_file=\"csky/csky.c\"\n+\tout_file=\"csky/csky.cc\"\n \ttm_p_file=\"${tm_p_file} csky/csky-protos.h\"\n \textra_options=\"${extra_options} csky/csky_tables.opt\"\n \n@@ -2112,7 +2112,7 @@ i[34567]86-*-cygwin*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/cygwin.h i386/cygwin-stdint.h\"\n \txm_file=i386/xm-cygwin.h\n \ttmake_file=\"${tmake_file} i386/t-cygming t-slibgcc\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.cc\"\n \textra_options=\"${extra_options} i386/cygming.opt i386/cygwin.opt\"\n \textra_objs=\"${extra_objs} winnt.o winnt-stubs.o\"\n \tc_target_objs=\"${c_target_objs} msformat-c.o\"\n@@ -2130,7 +2130,7 @@ x86_64-*-cygwin*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/cygwin.h i386/cygwin-w64.h i386/cygwin-stdint.h\"\n \txm_file=i386/xm-cygwin.h\n \ttmake_file=\"${tmake_file} i386/t-cygming t-slibgcc i386/t-cygwin-w64\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.cc\"\n \textra_options=\"${extra_options} i386/cygming.opt i386/cygwin.opt\"\n \textra_objs=\"${extra_objs} winnt.o winnt-stubs.o\"\n \tc_target_objs=\"${c_target_objs} msformat-c.o\"\n@@ -2202,7 +2202,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t;;\n \tesac\n         native_system_header_dir=/mingw/include\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/i386/winnt.cc\"\n \textra_options=\"${extra_options} i386/cygming.opt i386/mingw.opt\"\n \tcase ${target} in\n \t\t*-w64-*)\n@@ -2294,7 +2294,7 @@ ia64-hp-*vms*)\n \t;;\n iq2000*-*-elf*)\n         tm_file=\"elfos.h newlib-stdint.h iq2000/iq2000.h\"\n-        out_file=iq2000/iq2000.c\n+        out_file=iq2000/iq2000.cc\n         md_file=iq2000/iq2000.md\n         ;;\n lm32-*-elf*)\n@@ -3168,7 +3168,7 @@ s390x-*-linux*)\n \tcxx_target_objs=\"${cxx_target_objs} s390-c.o\"\n \tmd_file=s390/s390.md\n \textra_modes=s390/s390-modes.def\n-\tout_file=s390/s390.c\n+\tout_file=s390/s390.cc\n \ttmake_file=\"${tmake_file} s390/t-linux64 s390/t-s390\"\n \t;;\n s390x-ibm-tpf*)\n@@ -3178,7 +3178,7 @@ s390x-ibm-tpf*)\n \tcxx_target_objs=\"${cxx_target_objs} s390-c.o\"\n \tmd_file=s390/s390.md\n \textra_modes=s390/s390-modes.def\n-\tout_file=s390/s390.c\n+\tout_file=s390/s390.cc\n \tthread_file='tpf'\n \textra_options=\"${extra_options} s390/tpf.opt\"\n \ttmake_file=\"${tmake_file} s390/t-s390\"\n@@ -3532,7 +3532,7 @@ xstormy16-*-elf)\n \ttm_p_file=stormy16/stormy16-protos.h\n \ttm_d_file=\"elfos.h stormy16/stormy16.h\"\n \tmd_file=stormy16/stormy16.md\n-\tout_file=stormy16/stormy16.c\n+\tout_file=stormy16/stormy16.cc\n \textra_options=stormy16/stormy16.opt\n \ttmake_file=\"stormy16/t-stormy16\"\n \t;;\n@@ -3622,9 +3622,9 @@ fi\n \n if [ \"$common_out_file\" = \"\" ]; then\n   if [ \"$target_has_targetm_common\" = \"yes\" ]; then\n-    common_out_file=\"$cpu_type/$cpu_type-common.c\"\n+    common_out_file=\"$cpu_type/$cpu_type-common.cc\"\n   else\n-    common_out_file=\"default-common.c\"\n+    common_out_file=\"default-common.cc\"\n   fi\n fi\n "}, {"sha": "215de1c09c86d7b32f21fd0e89b9a5f17c18116f", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3177,7 +3177,7 @@ aarch64_resolve_overloaded_memtag (location_t loc,\n   return NULL_TREE;\n }\n \n-/* Called at aarch64_resolve_overloaded_builtin in aarch64-c.c.  */\n+/* Called at aarch64_resolve_overloaded_builtin in aarch64-c.cc.  */\n tree\n aarch64_resolve_overloaded_builtin_general (location_t loc, tree function,\n \t\t\t\t\t    void *pass_params)"}, {"sha": "26368538a5556693785dd2df0836dec9c6b2b7f3", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1012,7 +1012,7 @@ extern bool aarch64_classify_address (struct aarch64_address_info *, rtx,\n \t\t\t\t      machine_mode, bool,\n \t\t\t\t      aarch64_addr_query_type = ADDR_QUERY_M);\n \n-/* Defined in common/config/aarch64-common.c.  */\n+/* Defined in common/config/aarch64-common.cc.  */\n bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n \t\t\t     const struct cl_decoded_option *, location_t);\n const char *aarch64_rewrite_selected_cpu (const char *name);\n@@ -1022,7 +1022,7 @@ enum aarch64_parse_opt_result aarch64_parse_extension (const char *,\n void aarch64_get_all_extension_candidates (auto_vec<const char *> *candidates);\n std::string aarch64_get_extension_string_for_isa_flags (uint64_t, uint64_t);\n \n-/* Defined in aarch64-d.c  */\n+/* Defined in aarch64-d.cc  */\n extern void aarch64_d_target_versions (void);\n extern void aarch64_d_register_target_info (void);\n "}, {"sha": "3381726027d9d2540e55d6080deec8cb5c715280", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1009,7 +1009,7 @@ function_builder::add_function (const function_instance &instance,\n      consistent numbering scheme for function codes between the C and C++\n      frontends, so that everything ties up in LTO.\n \n-     Currently, tree-streamer-in.c:unpack_ts_function_decl_value_fields\n+     Currently, tree-streamer-in.cc:unpack_ts_function_decl_value_fields\n      validates that tree nodes returned by TARGET_BUILTIN_DECL are non-NULL and\n      some node other than error_mark_node. This is a holdover from when builtin\n      decls were streamed by code rather than by value."}, {"sha": "fdf0c9bd5b8b8809874762397e377910027b8845", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3622,7 +3622,7 @@ aarch64_regmode_natural_size (machine_mode mode)\n      and similarly for predicates.  We can't independently modify\n      anything smaller than that.  */\n   /* ??? For now, only do this for variable-width SVE registers.\n-     Doing it for constant-sized registers breaks lower-subreg.c.  */\n+     Doing it for constant-sized registers breaks lower-subreg.cc.  */\n   /* ??? And once that's fixed, we should probably have similar\n      code for Advanced SIMD.  */\n   if (!aarch64_sve_vg.is_constant ())\n@@ -13909,7 +13909,7 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n     /* We can expand signed mod by power of 2 using a NEGS, two parallel\n        ANDs and a CSNEG.  Assume here that CSNEG is the same as the cost of\n        an unconditional negate.  This case should only ever be reached through\n-       the set_smod_pow2_cheap check in expmed.c.  */\n+       the set_smod_pow2_cheap check in expmed.cc.  */\n       if (CONST_INT_P (XEXP (x, 1))\n \t  && exact_log2 (INTVAL (XEXP (x, 1))) > 0\n \t  && (mode == SImode || mode == DImode))\n@@ -14699,7 +14699,7 @@ aarch64_sched_first_cycle_multipass_dfa_lookahead (void)\n \n \n /* Implement TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD as\n-   autopref_multipass_dfa_lookahead_guard from haifa-sched.c.  It only\n+   autopref_multipass_dfa_lookahead_guard from haifa-sched.cc.  It only\n    has an effect if PARAM_SCHED_AUTOPREF_QUEUE_DEPTH > 0.  */\n \n static int\n@@ -18010,7 +18010,7 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n \n   /* If what we're processing is the current pragma string then the\n      target option node is already stored in target_option_current_node\n-     by aarch64_pragma_target_parse in aarch64-c.c.  Use that to avoid\n+     by aarch64_pragma_target_parse in aarch64-c.cc.  Use that to avoid\n      having to re-parse the string.  This is especially useful to keep\n      arm_neon.h compile times down since that header contains a lot\n      of intrinsics enclosed in pragmas.  */\n@@ -19340,7 +19340,7 @@ aarch64_short_vector_p (const_tree type,\n \n    Note that MODE itself is not sufficient in determining whether a type\n    is such a composite type or not.  This is because\n-   stor-layout.c:compute_record_mode may have already changed the MODE\n+   stor-layout.cc:compute_record_mode may have already changed the MODE\n    (BLKmode) of a RECORD_TYPE TYPE to some other mode.  For example, a\n    structure with only one field may have its MODE set to the mode of the\n    field.  Also an integer mode whose size matches the size of the\n@@ -22205,7 +22205,7 @@ aarch64_float_const_representable_p (rtx x)\n   gcc_assert (mantissa <= 15);\n \n   /* GCC internally does not use IEEE754-like encoding (where normalized\n-     significands are in the range [1, 2).  GCC uses [0.5, 1) (see real.c).\n+     significands are in the range [1, 2).  GCC uses [0.5, 1) (see real.cc).\n      Our mantissa values are shifted 4 places to the left relative to\n      normalized IEEE754 so we must modify the exponent returned by REAL_EXP\n      by 5 places to correct for GCC's representation.  */"}, {"sha": "dddf133cc4ae81b7eba13c4882a70485f8b31c0d", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -636,7 +636,7 @@ extern unsigned aarch64_architecture_version;\n #define DBX_REGISTER_NUMBER(REGNO)\taarch64_dbx_register_number (REGNO)\n /* Provide a definition of DWARF_FRAME_REGNUM here so that fallback unwinders\n    can use DWARF_ALT_FRAME_RETURN_COLUMN defined below.  This is just the same\n-   as the default definition in dwarf2out.c.  */\n+   as the default definition in dwarf2out.cc.  */\n #undef DWARF_FRAME_REGNUM\n #define DWARF_FRAME_REGNUM(REGNO)\tDBX_REGISTER_NUMBER (REGNO)\n \n@@ -1293,12 +1293,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define ASM_OUTPUT_POOL_EPILOGUE  aarch64_asm_output_pool_epilogue\n \n /* This type is the user-visible __fp16, and a pointer to that type.  We\n-   need it in many places in the backend.  Defined in aarch64-builtins.c.  */\n+   need it in many places in the backend.  Defined in aarch64-builtins.cc.  */\n extern GTY(()) tree aarch64_fp16_type_node;\n extern GTY(()) tree aarch64_fp16_ptr_type_node;\n \n /* This type is the user-visible __bf16, and a pointer to that type.  Defined\n-   in aarch64-builtins.c.  */\n+   in aarch64-builtins.cc.  */\n extern GTY(()) tree aarch64_bf16_type_node;\n extern GTY(()) tree aarch64_bf16_ptr_type_node;\n "}, {"sha": "2d96fc4b7360facc9142641ddc0d30113271dcd5", "filename": "gcc/config/aarch64/cortex-a57-fma-steering.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -49,7 +49,7 @@\n    of FMUL or FMADD/FMSUB.\n \n    This pass ensure that registers are renamed so that these conditions hold.\n-   We reuse the existing register renaming facility from regrename.c to build\n+   We reuse the existing register renaming facility from regrename.cc to build\n    dependency chains and expose candidate registers for renaming.\n \n \n@@ -241,7 +241,7 @@ class func_fma_steering\n \n /* Rename the register HEAD->regno in all the insns in the chain HEAD to any\n    register not in the set UNAVAILABLE.  Adapted from rename_chains in\n-   regrename.c.  */\n+   regrename.cc.  */\n \n static bool\n rename_single_chain (du_head_p head, HARD_REG_SET *unavailable)"}, {"sha": "8073a0786d974c8dad1f569bd1bb8d06885d6b3f", "filename": "gcc/config/aarch64/driver-aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -228,7 +228,7 @@ contains_core_p (unsigned *arr, unsigned core)\n   return false;\n }\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\", \"cpu\" or \"tune\" as argument depending on if\n    -march=native, -mcpu=native or -mtune=native is to be substituted."}, {"sha": "75b463d2f032f42989170a6fdcea5728de224f10", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -34,15 +34,15 @@ s-aarch64-tune-md: $(srcdir)/config/aarch64/gentune.sh \\\n \t\t$(srcdir)/config/aarch64/aarch64-tune.md\n \t$(STAMP) s-aarch64-tune-md\n \n-aarch64-builtins.o: $(srcdir)/config/aarch64/aarch64-builtins.c $(CONFIG_H) \\\n+aarch64-builtins.o: $(srcdir)/config/aarch64/aarch64-builtins.cc $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) expr.h $(TM_P_H) $(RECOG_H) langhooks.h \\\n   $(DIAGNOSTIC_CORE_H) $(OPTABS_H) \\\n   $(srcdir)/config/aarch64/aarch64-simd-builtins.def \\\n   $(srcdir)/config/aarch64/aarch64-simd-builtin-types.def \\\n   aarch64-builtin-iterators.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/aarch64-builtins.c\n+\t\t$(srcdir)/config/aarch64/aarch64-builtins.cc\n \n aarch64-sve-builtins.o: $(srcdir)/config/aarch64/aarch64-sve-builtins.cc \\\n   $(srcdir)/config/aarch64/aarch64-sve-builtins.def \\\n@@ -104,30 +104,30 @@ aarch64-builtin-iterators.h: $(srcdir)/config/aarch64/geniterators.sh \\\n \t\t$(srcdir)/config/aarch64/iterators.md > \\\n \t\taarch64-builtin-iterators.h\n \n-aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n+aarch-common.o: $(srcdir)/config/arm/aarch-common.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arm/aarch-common.c\n+\t\t$(srcdir)/config/arm/aarch-common.cc\n \n-aarch64-c.o: $(srcdir)/config/aarch64/aarch64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+aarch64-c.o: $(srcdir)/config/aarch64/aarch64-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H) $(TARGET_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/aarch64-c.c\n+\t\t$(srcdir)/config/aarch64/aarch64-c.cc\n \n-aarch64-d.o: $(srcdir)/config/aarch64/aarch64-d.c\n+aarch64-d.o: $(srcdir)/config/aarch64/aarch64-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n PASSES_EXTRA += $(srcdir)/config/aarch64/aarch64-passes.def\n \n-cortex-a57-fma-steering.o: $(srcdir)/config/aarch64/cortex-a57-fma-steering.c \\\n+cortex-a57-fma-steering.o: $(srcdir)/config/aarch64/cortex-a57-fma-steering.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n     output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n     $(CONTEXT_H) $(TREE_PASS_H) regrename.h \\\n     $(srcdir)/config/aarch64/aarch64-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/cortex-a57-fma-steering.c\n+\t\t$(srcdir)/config/aarch64/cortex-a57-fma-steering.cc\n \n aarch64-speculation.o: $(srcdir)/config/aarch64/aarch64-speculation.cc \\\n     $(CONFIG_H) \\\n@@ -140,23 +140,23 @@ aarch64-speculation.o: $(srcdir)/config/aarch64/aarch64-speculation.cc \\\n \t  $(srcdir)/config/aarch64/aarch64-speculation.cc\n \n falkor-tag-collision-avoidance.o: \\\n-    $(srcdir)/config/aarch64/falkor-tag-collision-avoidance.c \\\n+    $(srcdir)/config/aarch64/falkor-tag-collision-avoidance.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n     output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n     $(CONTEXT_H) $(TREE_PASS_H) regrename.h \\\n     $(srcdir)/config/aarch64/aarch64-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/falkor-tag-collision-avoidance.c\n+\t\t$(srcdir)/config/aarch64/falkor-tag-collision-avoidance.cc\n \n-aarch64-bti-insert.o: $(srcdir)/config/aarch64/aarch64-bti-insert.c \\\n+aarch64-bti-insert.o: $(srcdir)/config/aarch64/aarch64-bti-insert.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n     output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n     $(CONTEXT_H) $(TREE_PASS_H) regrename.h \\\n     $(srcdir)/config/aarch64/aarch64-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/aarch64-bti-insert.c\n+\t\t$(srcdir)/config/aarch64/aarch64-bti-insert.cc\n \n aarch64-cc-fusion.o: $(srcdir)/config/aarch64/aarch64-cc-fusion.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(BACKEND_H) $(RTL_H) $(DF_H) \\"}, {"sha": "3cf701a0a01ab00eaaafdfad14bd90ebbb1d498f", "filename": "gcc/config/aarch64/x-aarch64", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fx-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fx-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fx-aarch64?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-driver-aarch64.o: $(srcdir)/config/aarch64/driver-aarch64.c \\\n+driver-aarch64.o: $(srcdir)/config/aarch64/driver-aarch64.cc \\\n   $(CONFIG_H) $(SYSTEM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "1e0bad2648ad28e106b3bddb384d3f1b06aa2bd0", "filename": "gcc/config/aarch64/x-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fx-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Faarch64%2Fx-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fx-darwin?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-host-aarch64-darwin.o : $(srcdir)/config/aarch64/host-aarch64-darwin.c\n+host-aarch64-darwin.o : $(srcdir)/config/aarch64/host-aarch64-darwin.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "0c832bf039c5510494e79b0def7a06c116e92c30", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for alpha.c functions used in the md file & elsewhere.\n+/* Prototypes for alpha.cc functions used in the md file & elsewhere.\n    Copyright (C) 1999-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "3db53374c9ea2a880c10e6f260ce95204b77e37b", "filename": "gcc/config/alpha/alpha.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -702,7 +702,7 @@ alpha_scalar_mode_supported_p (scalar_mode mode)\n     case E_HImode:\n     case E_SImode:\n     case E_DImode:\n-    case E_TImode: /* via optabs.c */\n+    case E_TImode: /* via optabs.cc */\n       return true;\n \n     case E_SFmode:"}, {"sha": "c01353a3bf29ea16cf519994ea1b7596ed95a1a9", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -203,7 +203,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Work around target_flags dependency in ada/targtyps.c.  */\n+/* Work around target_flags dependency in ada/targtyps.cc.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n \n #define\tWCHAR_TYPE \"unsigned int\"\n@@ -636,7 +636,7 @@ enum reg_class {\n \n /* Provide a definition of DWARF_FRAME_REGNUM here so that fallback unwinders\n    can use DWARF_ALT_FRAME_RETURN_COLUMN defined below.  This is just the same\n-   as the default definition in dwarf2out.c.  */\n+   as the default definition in dwarf2out.cc.  */\n #undef DWARF_FRAME_REGNUM\n #define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n \n@@ -661,7 +661,7 @@ enum reg_class {\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) 0\n@@ -723,7 +723,7 @@ enum reg_class {\n \f\n /* Try a machine-dependent way of reloading an illegitimate address\n    operand.  If we find one, push the reload and jump to WIN.  This\n-   macro is used in only one place: `find_reloads_address' in reload.c.  */\n+   macro is used in only one place: `find_reloads_address' in reload.cc.  */\n \n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_L,WIN)\t\t     \\\n do {\t\t\t\t\t\t\t\t\t     \\"}, {"sha": "87514330c2239b6b033bb975c5a679e52e621f29", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4667,7 +4667,7 @@\n   DONE;\n })\n \n-;; Block move/clear, see alpha.c for more details.\n+;; Block move/clear, see alpha.cc for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n ;; Argument 2 is the length\n@@ -4920,7 +4920,7 @@\n ;; an lda/ldah pair and we want to align them properly.  So we have two\n ;; unspec_volatile insns, the first of which emits the ldgp assembler macro\n ;; and the second of which emits nothing.  However, both are marked as type\n-;; IADD (the default) so the alignment code in alpha.c does the right thing\n+;; IADD (the default) so the alignment code in alpha.cc does the right thing\n ;; with them.\n \n (define_expand \"prologue_ldgp\""}, {"sha": "fe17f86b5eaa7c7a38f6bc16118626e6c85f2529", "filename": "gcc/config/alpha/driver-alpha.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Fdriver-alpha.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Fdriver-alpha.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fdriver-alpha.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -41,7 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #define AMASK_LOCKPFTCHOK  0x1000       /* Safe to prefetch lock cache\n \t\t\t\t\t   block.  */\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"cpu\" or \"tune\" as argument depending on if -mcpu=native\n    or -mtune=native is to be substituted."}, {"sha": "60fa4a1f74a9607ca10b78675223d1ab088e1607", "filename": "gcc/config/alpha/x-alpha", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Fx-alpha", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Falpha%2Fx-alpha", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fx-alpha?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-driver-alpha.o: $(srcdir)/config/alpha/driver-alpha.c\n+driver-alpha.o: $(srcdir)/config/alpha/driver-alpha.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "db542f04ae5edae8b389d2f884050f891abc57ef", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -97,7 +97,7 @@ extern bool arc_text_label (rtx_insn *insn);\n extern bool arc_short_comparison_p (rtx, int);\n extern bool arc_epilogue_uses (int regno);\n extern bool arc_eh_uses (int regno);\n-/* insn-attrtab.c doesn't include reload.h, which declares regno_clobbered_p. */\n+/* insn-attrtab.cc doesn't include reload.h, which declares regno_clobbered_p. */\n extern int regno_clobbered_p (unsigned int, rtx_insn *, machine_mode, int);\n extern bool arc_legitimize_reload_address (rtx *, machine_mode, int, int);\n extern void arc_secondary_reload_conv (rtx, rtx, rtx, bool);"}, {"sha": "8cc173519abb1e942412ec497238d954df186aa6", "filename": "gcc/config/arc/arc.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1391,7 +1391,7 @@ arc_override_options (void)\n #undef ARC_OPT\n \n   /* Set cpu flags accordingly to architecture/selected cpu.  The cpu\n-     specific flags are set in arc-common.c.  The architecture forces\n+     specific flags are set in arc-common.cc.  The architecture forces\n      the default hardware configurations in, regardless what command\n      line options are saying.  The CPU optional hw options can be\n      turned on or off.  */\n@@ -4472,7 +4472,7 @@ static int output_sdata = 0;\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n-/* In final.c:output_asm_insn:\n+/* In final.cc:output_asm_insn:\n     'l' : label\n     'a' : address\n     'c' : constant address if CONSTANT_ADDRESS_P\n@@ -5455,7 +5455,7 @@ arc_ccfsm_advance (rtx_insn *insn, struct arc_ccfsm *state)\n \t}\n \n       /* Restore recog_operand.  Getting the attributes of other insns can\n-\t destroy this array, but final.c assumes that it remains intact\n+\t destroy this array, but final.cc assumes that it remains intact\n \t across this call; since the insn has been recognized already we\n \t call insn_extract direct.  */\n       extract_insn_cached (insn);\n@@ -6542,7 +6542,7 @@ arc_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n   arg_num = ROUND_ADVANCE_CUM (arg_num, arg.mode, arg.type);\n   ret = GPR_REST_ARG_REGS (arg_num);\n \n-  /* ICEd at function.c:2361, and ret is copied to data->partial */\n+  /* ICEd at function.cc:2361, and ret is copied to data->partial */\n     ret = (ret >= words ? 0 : ret * UNITS_PER_WORD);\n \n   return ret;\n@@ -9517,12 +9517,12 @@ conditionalize_nonjump (rtx pat, rtx cond, rtx insn, bool annulled)\n \t}\n     }\n \n-  /* dwarf2out.c:dwarf2out_frame_debug_expr doesn't know\n+  /* dwarf2out.cc:dwarf2out_frame_debug_expr doesn't know\n      what to do with COND_EXEC.  */\n   if (RTX_FRAME_RELATED_P (insn))\n     {\n       /* If this is the delay slot insn of an anulled branch,\n-\t dwarf2out.c:scan_trace understands the anulling semantics\n+\t dwarf2out.cc:scan_trace understands the anulling semantics\n \t without the COND_EXEC.  */\n       gcc_assert (annulled);\n       rtx note = alloc_reg_note (REG_FRAME_RELATED_EXPR, pat,"}, {"sha": "d4e22a4b2d965257c578e8ec3d2b8afe98a14a3f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4042,7 +4042,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n    (set_attr_alternative \"length\"\n      [(cond\n \t[(eq_attr \"iscompact\" \"false\") (const_int 4)\n-\t; We have to mention (match_dup 3) to convince genattrtab.c that this\n+\t; We have to mention (match_dup 3) to convince genattrtab.cc that this\n \t; is a varying length insn.\n \t (eq (symbol_ref \"1+1\") (const_int 2)) (const_int 2)\n \t (gt (minus (match_dup 3) (pc)) (const_int 42)) (const_int 4)]\n@@ -4663,7 +4663,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n       return \\\"trap_s %0\\\";\n     }\n \n-  /* Keep this message in sync with the one in arc.c:arc_expand_builtin,\n+  /* Keep this message in sync with the one in arc.cc:arc_expand_builtin,\n      because *.md files do not get scanned by exgettext.  */\n   fatal_error (input_location,\n \t       \\\"operand to trap_s should be an unsigned 6-bit value\\\");\n@@ -4844,7 +4844,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \"arc_can_use_return_insn ()\"\n   \"\")\n \n- ;; Comment in final.c (insn_current_reference_address) says\n+ ;; Comment in final.cc (insn_current_reference_address) says\n  ;; forward branch addresses are calculated from the next insn after branch\n  ;; and for backward branches, it is calculated from the branch insn start.\n  ;; The shortening logic here is tuned to accomodate this behavior\n@@ -5223,7 +5223,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n ;; subdf alternative that matches a zero operand 1, which then can allow\n ;; to use bxor to flip the high bit of an integer register.\n ;; ??? we actually can't use the floating point hardware for neg, because\n-;; this would not work right for -0.  OTOH optabs.c has already code\n+;; this would not work right for -0.  OTOH optabs.cc has already code\n ;; to synthesyze negate by flipping the sign bit.\n \n ;;V2 instructions"}, {"sha": "06d30e49a93e3d8654e2503a1155a03018c8ead8", "filename": "gcc/config/arc/builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fbuiltins.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,9 +25,9 @@\n    NAME:    `__builtin_arc_name' will be the user-level name of the builtin.\n             `ARC_BUILTIN_NAME' will be the internal builtin's id.\n    N_ARGS:  Number of input arguments.  If special treatment is needed,\n-            set to -1 and handle it by hand, see arc.c:arc_expand_builtin().\n+            set to -1 and handle it by hand, see arc.cc:arc_expand_builtin().\n    TYPE:    A tree node describing the prototype of the built-in.\n-   ICODE:   Name of attached insn or expander.  If special treatment in arc.c\n+   ICODE:   Name of attached insn or expander.  If special treatment in arc.cc\n             is needed to expand the built-in, use `nothing'.\n    MASK:    CPU selector mask.  */\n "}, {"sha": "9af2d2f3910a93d5217a12fdaa5aec0f8c01f65d", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -19,14 +19,14 @@\n \n TM_H += $(srcdir)/config/arc/arc-c.def\n \n-driver-arc.o: $(srcdir)/config/arc/driver-arc.c \\\n+driver-arc.o: $(srcdir)/config/arc/driver-arc.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-arc-c.o: $(srcdir)/config/arc/arc-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+arc-c.o: $(srcdir)/config/arc/arc-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n $(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arc/arc-c.c\n+\t\t$(srcdir)/config/arc/arc-c.cc\n \n #Run `arc-cpus` if you changed something in arc-cpus.def\n "}, {"sha": "a8697b8c62f8e4f2b84ae4a9408da3abbf68bd5e", "filename": "gcc/config/arm/arm-c.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -162,7 +162,7 @@ arm_resolve_overloaded_builtin (location_t loc, tree fndecl, void *arglist)\n }\n \n /* Output C specific EABI object attributes.  These cannot be done in\n-   arm.c because they require information from the C frontend.  */\n+   arm.cc because they require information from the C frontend.  */\n \n static void\n arm_output_c_attributes (void)\n@@ -486,7 +486,7 @@ arm_pragma_target_parse (tree args, tree pop_target)\n }\n \n /* Register target pragmas.  We need to add the hook for parsing #pragma GCC\n-   option here rather than in arm.c since it will pull in various preprocessor\n+   option here rather than in arm.cc since it will pull in various preprocessor\n    functions, and those are not present in languages like fortran without a\n    preprocessor.  */\n "}, {"sha": "cd55a9f6ca54f4ea4d0acd2731a6cf8a0d80bf0b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in arm.c and pe.c\n+/* Prototypes for exported functions defined in arm.cc and pe.c\n    Copyright (C) 1999-2022 Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@arm.com)\n    Minor hacks by Nick Clifton (nickc@cygnus.com)\n@@ -391,15 +391,15 @@ extern void arm_emit_eabi_attribute (const char *, int, int);\n extern void arm_reset_previous_fndecl (void);\n extern void save_restore_target_globals (tree);\n \n-/* Defined in gcc/common/config/arm-common.c.  */\n+/* Defined in gcc/common/config/arm-common.cc.  */\n extern const char *arm_rewrite_selected_cpu (const char *name);\n \n-/* Defined in gcc/common/config/arm-c.c.  */\n+/* Defined in gcc/common/config/arm-c.cc.  */\n extern void arm_lang_object_attributes_init (void);\n extern void arm_register_target_pragmas (void);\n extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n \n-/* Defined in arm-d.c  */\n+/* Defined in arm-d.cc  */\n extern void arm_d_target_versions (void);\n extern void arm_d_register_target_info (void);\n "}, {"sha": "7825e364c01e3aa1b8fa7f19e485f9ce627f027c", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -12643,7 +12643,7 @@ vfp3_const_double_index (rtx x)\n   /* The value of 5 here would be 4 if GCC used IEEE754-like encoding (where\n      normalized significands are in the range [1, 2). (Our mantissa is shifted\n      left 4 places at this point relative to normalized IEEE754 values).  GCC\n-     internally uses [0.5, 1) (see real.c), so the exponent returned from\n+     internally uses [0.5, 1) (see real.cc), so the exponent returned from\n      REAL_EXP must be altered.  */\n   exponent = 5 - exponent;\n \n@@ -20801,7 +20801,7 @@ shift_op (rtx op, HOST_WIDE_INT *amountp)\n    is) or not (and must be printed with an octal escape) must be made\n    with reference to the *host* character set -- the situation is\n    similar to that discussed in the comments above pp_c_char in\n-   c-pretty-print.c.  */\n+   c-pretty-print.cc.  */\n \n #define MAX_ASCII_LEN 51\n \n@@ -24969,7 +24969,7 @@ thumb2_final_prescan_insn (rtx_insn *insn)\n \tbreak;\n     }\n   /* Restore recog_data (getting the attributes of other insns can\n-     destroy this array, but final.c assumes that it remains intact\n+     destroy this array, but final.cc assumes that it remains intact\n      across this call).  */\n   extract_constrain_insn_cached (first_insn);\n }\n@@ -25258,7 +25258,7 @@ arm_final_prescan_insn (rtx_insn *insn)\n \t}\n \n       /* Restore recog_data (getting the attributes of other insns can\n-\t destroy this array, but final.c assumes that it remains intact\n+\t destroy this array, but final.cc assumes that it remains intact\n \t across this call.  */\n       extract_constrain_insn_cached (insn);\n     }\n@@ -28039,7 +28039,7 @@ arm_asm_output_labelref (FILE *stream, const char *name)\n    the tag name in a comment so that anyone reading the assembler output\n    will know which tag is being set.\n \n-   This function is not static because arm-c.c needs it too.  */\n+   This function is not static because arm-c.cc needs it too.  */\n \n void\n arm_emit_eabi_attribute (const char *name, int num, int val)\n@@ -29326,7 +29326,7 @@ arm_small_register_classes_for_mode_p (machine_mode mode ATTRIBUTE_UNUSED)\n \n /* Implement TARGET_SHIFT_TRUNCATION_MASK.  SImode shifts use normal\n    ARM insns and therefore guarantee that the shift count is modulo 256.\n-   DImode shifts (those implemented by lib1funcs.S or by optabs.c)\n+   DImode shifts (those implemented by lib1funcs.S or by optabs.cc)\n    guarantee no particular behavior for out-of-range counts.  */\n \n static unsigned HOST_WIDE_INT"}, {"sha": "f52724d01ad039b042239404959c86eafea045b8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -79,11 +79,11 @@ extern GTY(()) rtx arm_target_insn;\n extern void (*arm_lang_output_object_attributes_hook)(void);\n \n /* This type is the user-visible __fp16.  We need it in a few places in\n-   the backend.  Defined in arm-builtins.c.  */\n+   the backend.  Defined in arm-builtins.cc.  */\n extern tree arm_fp16_type_node;\n \n /* This type is the user-visible __bf16.  We need it in a few places in\n-   the backend.  Defined in arm-builtins.c.  */\n+   the backend.  Defined in arm-builtins.cc.  */\n extern tree arm_bf16_type_node;\n extern tree arm_bf16_ptr_type_node;\n \n@@ -1715,7 +1715,7 @@ typedef struct\n \t\tbl\tmcount\n \t\t.word\tLP1\n \n-   profile_function() in final.c outputs the .data section, FUNCTION_PROFILER\n+   profile_function() in final.cc outputs the .data section, FUNCTION_PROFILER\n    will output the .text section.\n \n    The ``mov ip,lr'' seems like a good idea to stick with cc convention.\n@@ -2228,7 +2228,7 @@ extern int making_const_table;\n    that ASM_OUTPUT_REG_PUSH will be matched with ASM_OUTPUT_REG_POP, and\n    that r7 isn't used by the function profiler, so we can use it as a\n    scratch reg.  WARNING: This isn't safe in the general case!  It may be\n-   sensitive to future changes in final.c:profile_function.  */\n+   sensitive to future changes in final.cc:profile_function.  */\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\"}, {"sha": "90756fbfa3afc20c530ca5bb441b373e79de505d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -6553,7 +6553,7 @@\n ;; This pattern will be split into one of the pic_load_addr_* patterns\n ;; and a move after GCSE optimizations.\n ;;\n-;; Note: Update arm.c: legitimize_pic_address() when changing this pattern.\n+;; Note: Update arm.cc: legitimize_pic_address() when changing this pattern.\n (define_expand \"calculate_pic_address\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\")"}, {"sha": "b10c1fef37826497f63b1605dbc1a3c29c205a19", "filename": "gcc/config/arm/driver-arm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fdriver-arm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fdriver-arm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fdriver-arm.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -40,7 +40,7 @@ struct vendor\n \n #include \"arm-native.h\"\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\", \"cpu\" or \"tune\" as argument depending on if\n    -march=native, -mcpu=native or -mtune=native is to be substituted."}, {"sha": "7df39170180ab00e83b1dd2409e19443f81c32ee", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,7 +22,7 @@\n    \"__builtin\").  Symbian OS code relies on properties of the standard\n    library that go beyond those guaranteed by the ANSI/ISO standard.\n    For example, \"memcpy\" works even with overlapping memory, like\n-   \"memmove\".  We cannot simply set flag_no_builtin in arm.c because\n+   \"memmove\".  We cannot simply set flag_no_builtin in arm.cc because\n    (a) flag_no_builtin is not declared in language-independent code,\n    and (b) that would prevent users from explicitly overriding the\n    default with -fbuiltin, which may sometimes be useful."}, {"sha": "041cc6ec0459f130cf00bcbc41ec76263b5f65c7", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -121,12 +121,12 @@ s-arm-native: $(srcdir)/config/arm/parsecpu.awk \\\n \t$(SHELL) $(srcdir)/../move-if-change tmp-arm-native.h arm-native.h\n \t$(STAMP) s-arm-native\n \n-aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n+aarch-common.o: $(srcdir)/config/arm/aarch-common.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arm/aarch-common.c\n+\t\t$(srcdir)/config/arm/aarch-common.cc\n \n-arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+arm.o: $(srcdir)/config/arm/arm.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n   $(INSN_ATTR_H) $(FLAGS_H) reload.h $(FUNCTION_H) \\\n@@ -140,7 +140,7 @@ arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(srcdir)/config/arm/arm_vfp_builtins.def \\\n   $(srcdir)/config/arm/arm_mve_builtins.def\n \n-arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n+arm-builtins.o: $(srcdir)/config/arm/arm-builtins.cc $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) expr.h $(TM_P_H) $(RECOG_H) langhooks.h \\\n   $(DIAGNOSTIC_CORE_H) $(OPTABS_H) \\\n@@ -151,7 +151,7 @@ arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n   $(srcdir)/config/arm/arm_mve_builtins.def \\\n   $(srcdir)/config/arm/arm-simd-builtin-types.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arm/arm-builtins.c\n+\t\t$(srcdir)/config/arm/arm-builtins.cc\n \n arm-mve-builtins.o: $(srcdir)/config/arm/arm-mve-builtins.cc $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n@@ -163,12 +163,12 @@ arm-mve-builtins.o: $(srcdir)/config/arm/arm-mve-builtins.cc $(CONFIG_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/arm-mve-builtins.cc\n \n-arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+arm-c.o: $(srcdir)/config/arm/arm-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/arm/arm-c.c\n+\t\t$(srcdir)/config/arm/arm-c.cc\n \n-arm-d.o: $(srcdir)/config/arm/arm-d.c\n+arm-d.o: $(srcdir)/config/arm/arm-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "30b8fb9ad29be615fae154f1f7400cc197eb3b16", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -57,7 +57,7 @@\n \n ;; Changes to the constraints of this pattern must be propagated to those of\n ;; atomic additions in sync.md and to the logic for bind_old_new in\n-;; arm_split_atomic_op in arm.c.  These must be at least as strict as the\n+;; arm_split_atomic_op in arm.cc.  These must be at least as strict as the\n ;; constraints here and aim to be as permissive.\n (define_insn_and_split \"*thumb1_addsi3\"\n   [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,k,l,l,l\")\n@@ -137,7 +137,7 @@\n \n ;; Changes to the constraints of this pattern must be propagated to those of\n ;; atomic subtractions in sync.md and to the logic for bind_old_new in\n-;; arm_split_atomic_op in arm.c.  These must be at least as strict as the\n+;; arm_split_atomic_op in arm.cc.  These must be at least as strict as the\n ;; constraints here and aim to be as permissive.\n (define_insn \"thumb1_subsi3_insn\"\n   [(set (match_operand:SI           0 \"register_operand\" \"=l\")\n@@ -183,7 +183,7 @@\n \n ;; Changes to the constraints of this pattern must be propagated to those of\n ;; atomic bitwise ANDs and NANDs in sync.md and to the logic for bind_old_new\n-;; in arm_split_atomic_op in arm.c.  These must be at least as strict as the\n+;; in arm_split_atomic_op in arm.cc.  These must be at least as strict as the\n ;; constraints here and aim to be as permissive.\n (define_insn \"*thumb1_andsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n@@ -241,7 +241,7 @@\n \n ;; Changes to the constraints of this pattern must be propagated to those of\n ;; atomic inclusive ORs in sync.md and to the logic for bind_old_new in\n-;; arm_split_atomic_op in arm.c.  These must be at least as strict as the\n+;; arm_split_atomic_op in arm.cc.  These must be at least as strict as the\n ;; constraints here and aim to be as permissive.\n (define_insn \"*thumb1_iorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n@@ -255,7 +255,7 @@\n \n ;; Changes to the constraints of this pattern must be propagated to those of\n ;; atomic exclusive ORs in sync.md and to the logic for bind_old_new in\n-;; arm_split_atomic_op in arm.c.  These must be at least as strict as the\n+;; arm_split_atomic_op in arm.cc.  These must be at least as strict as the\n ;; constraints here and aim to be as permissive.\n (define_insn \"*thumb1_xorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")"}, {"sha": "0fc9381250dce37a1d61ab33b4c2d913d3bc0a95", "filename": "gcc/config/arm/x-arm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fx-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Farm%2Fx-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fx-arm?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-driver-arm.o: $(srcdir)/config/arm/driver-arm.c \\\n+driver-arm.o: $(srcdir)/config/arm/driver-arm.cc \\\n   $(CONFIG_H) $(SYSTEM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "00daa2e82dc3f5fe199afd4485bccb53d3b377d5", "filename": "gcc/config/avr/avr-c.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,7 +17,7 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Not included in avr.c since this requires C front end.  */\n+/* Not included in avr.cc since this requires C front end.  */\n \n #define IN_TARGET_CODE 1\n \n@@ -254,7 +254,7 @@ avr_register_target_pragmas (void)\n   gcc_assert (ADDR_SPACE_GENERIC == ADDR_SPACE_RAM);\n \n   /* Register address spaces.  The order must be the same as in the respective\n-     enum from avr.h (or designated initializers must be used in avr.c).\n+     enum from avr.h (or designated initializers must be used in avr.cc).\n      We always register all address spaces even if some of them make no\n      sense for some targets.  Diagnose for non-supported spaces will be\n      emit by TARGET_ADDR_SPACE_DIAGNOSE_USAGE.  */\n@@ -457,7 +457,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n #if defined (WITH_DOUBLE_COMPARISON)\n #if WITH_DOUBLE_COMPARISON == 2 || WITH_DOUBLE_COMPARISON == 3\n   /* The number of states a DFmode comparison libcall might take and\n-     reflects what avr.c:FLOAT_LIB_COMPARE_RETURNS_BOOL returns for\n+     reflects what avr.cc:FLOAT_LIB_COMPARE_RETURNS_BOOL returns for\n      DFmode.  GCC's default is 3-state, but some libraries like LibF7\n      implement true / false (2-state).  */\n   cpp_define_formatted (pfile, \"__WITH_DOUBLE_COMPARISON__=%d\","}, {"sha": "542d92e1c136400183f81a286c4cf6a8792ed985", "filename": "gcc/config/avr/avr-fixed.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-fixed.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -170,7 +170,7 @@\n ;** Saturated Negation and Absolute Value\n ;******************************************************************************\n \n-;; Fixme: This will always result in 0.  Dunno why simplify-rtx.c says\n+;; Fixme: This will always result in 0.  Dunno why simplify-rtx.cc says\n ;;   \"unknown\" on how to optimize this.  libgcc call would be in order,\n ;;   but the performance is *PLAIN* *HORROR* because the optimizers don't\n ;;   manage to optimize out MEMCPY that's sprincled all over fixed-bit.c  */"}, {"sha": "4c2e92aa65b07635422973b760d5914ca3c77b5c", "filename": "gcc/config/avr/avr-log.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-log.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-log.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -273,7 +273,7 @@ avr_log_vadump (FILE *file, const char *caller, va_list ap)\n }\n \n \n-/* Called from avr.c:avr_option_override().\n+/* Called from avr.cc:avr_option_override().\n    Parse argument of -mlog= and set respective fields in avr_log.  */\n \n void"}, {"sha": "1e12ab301704757e3017b6384cf8a39799c24425", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -40,7 +40,7 @@\n    where the arguments are the fields of avr_mcu_t:\n    \n \tNAME\tName of the device as specified by -mmcu=<NAME>.  Also\n-\t\tused by DRIVER_SELF_SPECS and gen-avr-mmcu-specs.c for\n+\t\tused by DRIVER_SELF_SPECS and gen-avr-mmcu-specs.cc for\n \t\t- the name of the device specific specs file\n \t\t  in -specs=device-specs/spec-<NAME>\n \t\t- the name of the startup file crt<NAME>.o"}, {"sha": "0e7117300b094553e7ce5fba122c898da133c584", "filename": "gcc/config/avr/avr-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-modes.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -20,7 +20,7 @@ FRACTIONAL_INT_MODE (PSI, 24, 3);\n \n /* Make TA and UTA 64 bits wide.\n    128 bit wide modes would be insane on a 8-bit machine.\n-   This needs special treatment in avr.c and avr-lib.h.  */\n+   This needs special treatment in avr.cc and avr-lib.h.  */\n \n ADJUST_BYTESIZE  (TA, 8);\n ADJUST_ALIGNMENT (TA, 1);"}, {"sha": "d8630151090740053a9b4d5595dcdce305e64e63", "filename": "gcc/config/avr/avr-passes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-passes.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -24,7 +24,7 @@\n INSERT_PASS_BEFORE (pass_thread_prologue_and_epilogue, 1, avr_pass_pre_proep);\n \n /* This avr-specific pass (re)computes insn notes, in particular REG_DEAD\n-   notes which are used by `avr.c::reg_unused_after' and branch offset\n+   notes which are used by `avr.cc::reg_unused_after' and branch offset\n    computations.  These notes must be correct, i.e. there must be no\n    dangling REG_DEAD notes; otherwise wrong code might result, cf. PR64331.\n "}, {"sha": "6023b33bcfe8000c0870873467ea19d870853ab9", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in avr.c\n+/* Prototypes for exported functions defined in avr.cc\n    \n    Copyright (C) 2000-2022 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (chertykov@gmail.com)\n@@ -161,7 +161,7 @@ extern rtl_opt_pass *make_avr_pass_pre_proep (gcc::context *);\n extern rtl_opt_pass *make_avr_pass_recompute_notes (gcc::context *);\n extern rtl_opt_pass *make_avr_pass_casesi (gcc::context *);\n \n-/* From avr-log.c */\n+/* From avr-log.cc */\n \n #define avr_dump(...) avr_vdump (NULL, __FUNCTION__, __VA_ARGS__)\n #define avr_edump(...) avr_vdump (stderr, __FUNCTION__, __VA_ARGS__)"}, {"sha": "9eec991e10a46f0cfd53ec2d14f7ebca19c0e15e", "filename": "gcc/config/avr/avr.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Subroutines for insn-output.c for ATMEL AVR micro controllers\n+/* Subroutines for insn-output.cc for ATMEL AVR micro controllers\n    Copyright (C) 1998-2022 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (chertykov@gmail.com)\n \n@@ -734,7 +734,7 @@ avr_set_core_architecture (void)\n static void\n avr_option_override (void)\n {\n-  /* caller-save.c looks for call-clobbered hard registers that are assigned\n+  /* caller-save.cc looks for call-clobbered hard registers that are assigned\n      to pseudos that cross calls and tries so save-restore them around calls\n      in order to reduce the number of stack slots needed.\n \n@@ -746,7 +746,7 @@ avr_option_override (void)\n     flag_caller_saves = 0;\n \n   /* Unwind tables currently require a frame pointer for correctness,\n-     see toplev.c:process_options().  */\n+     see toplev.cc:process_options().  */\n \n   if ((flag_unwind_tables\n        || flag_non_call_exceptions\n@@ -772,7 +772,7 @@ avr_option_override (void)\n   if (!avr_set_core_architecture())\n     return;\n \n-  /* Sould be set by avr-common.c */\n+  /* Sould be set by avr-common.cc */\n   gcc_assert (avr_long_double >= avr_double && avr_double >= 32);\n \n   /* RAM addresses of some SFRs common to all devices in respective arch. */\n@@ -1284,8 +1284,8 @@ avr_build_builtin_va_list (void)\n      which is auto-generated by genmodes, but the compiler assigns [U]DAmode\n      to the long long accum modes instead of the desired [U]TAmode.\n \n-     Fix this now, right after node setup in tree.c:build_common_tree_nodes().\n-     This must run before c-cppbuiltin.c:builtin_define_fixed_point_constants()\n+     Fix this now, right after node setup in tree.cc:build_common_tree_nodes().\n+     This must run before c-cppbuiltin.cc:builtin_define_fixed_point_constants()\n      which built-in defines macros like __ULLACCUM_FBIT__ that are used by\n      libgcc to detect IBIT and FBIT.  */\n \n@@ -2324,7 +2324,7 @@ avr_mode_dependent_address_p (const_rtx addr ATTRIBUTE_UNUSED, addr_space_t as)\n   /* FIXME:  Non-generic addresses are not mode-dependent in themselves.\n        This hook just serves to hack around PR rtl-optimization/52543 by\n        claiming that non-generic addresses were mode-dependent so that\n-       lower-subreg.c will skip these addresses.  lower-subreg.c sets up fake\n+       lower-subreg.cc will skip these addresses.  lower-subreg.cc sets up fake\n        RTXes to probe SET and MEM costs and assumes that MEM is always in the\n        generic address space which is not true.  */\n \n@@ -3284,7 +3284,7 @@ avr_function_arg_advance (cumulative_args_t cum_v,\n       && !call_used_or_fixed_reg_p (cum->regno))\n     {\n       /* FIXME: We ship info on failing tail-call in struct machine_function.\n-         This uses internals of calls.c:expand_call() and the way args_so_far\n+         This uses internals of calls.cc:expand_call() and the way args_so_far\n          is used.  targetm.function_ok_for_sibcall() needs to be extended to\n          pass &args_so_far, too.  At present, CUMULATIVE_ARGS is target\n          dependent so that such an extension is not wanted.  */\n@@ -10049,7 +10049,7 @@ avr_asm_output_aligned_decl_common (FILE * stream,\n       return;\n     }\n \n-  /* __gnu_lto_slim is just a marker for the linker injected by toplev.c.\n+  /* __gnu_lto_slim is just a marker for the linker injected by toplev.cc.\n      There is no need to trigger __do_clear_bss code for them.  */\n \n   if (!startswith (name, \"__gnu_lto\"))"}, {"sha": "1b948c6130ccb640a467b311a5a27084498d9b66", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -321,7 +321,7 @@ enum reg_class {\n \n #define RETURN_ADDR_RTX(count, tem) avr_return_addr_rtx (count, tem)\n \n-/* Don't use Push rounding. expr.c: emit_single_push_insn is broken \n+/* Don't use Push rounding. expr.cc: emit_single_push_insn is broken \n    for POST_DEC targets (PR27386).  */\n /*#define PUSH_ROUNDING(NPUSHED) (NPUSHED)*/\n \n@@ -399,7 +399,7 @@ typedef struct avr_args\n #define SUPPORTS_INIT_PRIORITY 0\n \n /* We pretend jump tables are in text section because otherwise,\n-   final.c will switch to .rodata before jump tables and thereby\n+   final.cc will switch to .rodata before jump tables and thereby\n    triggers __do_copy_data.  As we implement ASM_OUTPUT_ADDR_VEC,\n    we still have full control over the jump tables themselves.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1"}, {"sha": "efae7efb69b103bfe69706badb8d46c7c58a6060", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -148,7 +148,7 @@\n                        (const_int 2))]\n         (const_int 2)))\n \n-;; Lengths of several insns are adjusted in avr.c:adjust_insn_length().\n+;; Lengths of several insns are adjusted in avr.cc:adjust_insn_length().\n ;; Following insn attribute tells if and how the adjustment has to be\n ;; done:\n ;;     no     No adjustment needed; attribute \"length\" is fine.\n@@ -328,7 +328,7 @@\n ;; This avoids creating add/sub offsets in frame_pointer save/resore.\n ;; The 'null' receiver also avoids  problems with optimisation\n ;; not recognising incoming jmp and removing code that resets frame_pointer.\n-;; The code derived from builtins.c.\n+;; The code derived from builtins.cc.\n \n (define_expand \"nonlocal_goto_receiver\"\n   [(set (reg:HI REG_Y)\n@@ -346,7 +346,7 @@\n \n \n ;; Defining nonlocal_goto_receiver means we must also define this\n-;; even though its function is identical to that in builtins.c\n+;; even though its function is identical to that in builtins.cc\n \n (define_expand \"nonlocal_goto\"\n   [(use (match_operand 0 \"general_operand\"))"}, {"sha": "8ed70c45d18f9d228aca2b161ec2b53b17273f83", "filename": "gcc/config/avr/builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,9 +25,9 @@\n    NAME:    `__builtin_avr_name' will be the user-level name of the builtin.\n             `AVR_BUILTIN_NAME' will be the internal builtin's id.\n    N_ARGS:  Number of input arguments.  If special treatment is needed,\n-            set to -1 and handle it by hand, see avr.c:avr_expand_builtin().\n+            set to -1 and handle it by hand, see avr.cc:avr_expand_builtin().\n    TYPE:    A tree node describing the prototype of the built-in.\n-   ICODE:   Name of attached insn or expander.  If special treatment in avr.c\n+   ICODE:   Name of attached insn or expander.  If special treatment in avr.cc\n             is needed to expand the built-in, use `nothing'.\n    LIBNAME: Name of the attached implementation in libgcc which is used if\n             the builtin cannot be folded away and there is no insn.  */"}, {"sha": "bf9aa2c46e279ff39ddf32bece73bc2f6e9cd659", "filename": "gcc/config/avr/gen-avr-mmcu-specs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -27,7 +27,7 @@\n \n #define IN_GEN_AVR_MMCU_TEXI\n \n-#include \"avr-devices.c\"\n+#include \"avr-devices.cc\"\n \n // Get rid of \"defaults.h\".  We just need tm.h for `WITH_AVRLIBC' and\n // and `WITH_RTEMS'.  */\n@@ -53,8 +53,8 @@\n \n static const char header[] =\n   \"#\\n\"\n-  \"# Generated by   : ./gcc/config/avr/gen-avr-mmcu-specs.c\\n\"\n-  \"# Generated from : ./gcc/config/gcc.c\\n\"\n+  \"# Generated by   : ./gcc/config/avr/gen-avr-mmcu-specs.cc\\n\"\n+  \"# Generated from : ./gcc/config/gcc.cc\\n\"\n   \"#                  ./gcc/config/avr/specs.h\\n\"\n #if defined (WITH_AVRLIBC)\n   \"#                  ./gcc/config/avr/avrlibc.h\\n\""}, {"sha": "d9c3a30877db52de026497e1b8c150cda379a547", "filename": "gcc/config/avr/gen-avr-mmcu-texi.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -23,7 +23,7 @@\n \n #define IN_GEN_AVR_MMCU_TEXI\n \n-#include \"avr-devices.c\"\n+#include \"avr-devices.cc\"\n \n static const avr_mcu_t*\n mcus[sizeof avr_mcu_types / sizeof avr_mcu_types[0]];\n@@ -166,9 +166,9 @@ int main (void)\n \t  \"gcc/doc/include/fdl.texi.\\n\\n\");\n \n   printf (\"@c This file is generated automatically using\\n\");\n-  printf (\"@c gcc/config/avr/gen-avr-mmcu-texi.c from:\\n\");\n+  printf (\"@c gcc/config/avr/gen-avr-mmcu-texi.cc from:\\n\");\n   printf (\"@c\t gcc/config/avr/avr-arch.h\\n\");\n-  printf (\"@c\t gcc/config/avr/avr-devices.c\\n\");\n+  printf (\"@c\t gcc/config/avr/avr-devices.cc\\n\");\n   printf (\"@c\t gcc/config/avr/avr-mcus.def\\n\\n\");\n \n   printf (\"@c Please do not edit manually.\\n\\n\");"}, {"sha": "82f58dc6768f3c44f68f00092a95d711f3c02ad2", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -40,22 +40,22 @@ endif\n \n PASSES_EXTRA += $(srcdir)/config/avr/avr-passes.def\n \n-driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n+driver-avr.o: $(srcdir)/config/avr/driver-avr.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(srcdir)/config/avr/avr-arch.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n+avr-devices.o: $(srcdir)/config/avr/avr-devices.cc \\\n   $(srcdir)/config/avr/avr-mcus.def \\\n   $(srcdir)/config/avr/avr-arch.h \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-avr-c.o: $(srcdir)/config/avr/avr-c.c \\\n+avr-c.o: $(srcdir)/config/avr/avr-c.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-avr-log.o: $(srcdir)/config/avr/avr-log.c \\\n+avr-log.o: $(srcdir)/config/avr/avr-log.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(INPUT_H) dumpfile.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n@@ -81,13 +81,13 @@ AVR_MCUS = $(srcdir)/config/avr/avr-mcus.def\n avr-mcus: $(srcdir)/doc/avr-mmcu.texi ; @true\n \n # Make sure that native -mmcu= support is in sync with -mmcu= documentation.\n-gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.c \\\n-  $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c \\\n+gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.cc \\\n+  $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.cc \\\n   $(srcdir)/config/avr/avr-arch.h\n \t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $< -o $@\n \n-gen-avr-mmcu-specs$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-specs.c \\\n-  $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c \\\n+gen-avr-mmcu-specs$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-specs.cc \\\n+  $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.cc \\\n   $(srcdir)/config/avr/avr-arch.h $(TM_H)\n \t$(CXX_FOR_BUILD) $(CXXFLAGS_FOR_BUILD) $< -o $@ $(INCLUDES)\n "}, {"sha": "a89a1b4802872f7a4da3ee4fc6aed99d47961451", "filename": "gcc/config/bfin/bfin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbfin%2Fbfin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbfin%2Fbfin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -708,7 +708,7 @@ frame_related_constant_load (rtx reg, HOST_WIDE_INT constant, bool related)\n     insn = emit_move_insn (reg, cst);\n   else\n     {\n-      /* We don't call split_load_immediate here, since dwarf2out.c can get\n+      /* We don't call split_load_immediate here, since dwarf2out.cc can get\n \t confused about some of the more clever sequences it can generate.  */\n       insn = emit_insn (gen_movsi_high (reg, cst));\n       if (related)"}, {"sha": "5ee3248b18c01ef65addc1c57888f39dc0c8c556", "filename": "gcc/config/bpf/bpf-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_BPF_PROTOS_H\n #define GCC_BPF_PROTOS_H\n \n-/* Routines implemented in bpf.c.  */\n+/* Routines implemented in bpf.cc.  */\n \n extern HOST_WIDE_INT bpf_initial_elimination_offset (int, int);\n extern const char *bpf_output_call (rtx);"}, {"sha": "5b3f4a58763464653fd10012c1eb0bf3d86fdd92", "filename": "gcc/config/bpf/bpf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Fbpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Fbpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -276,7 +276,7 @@ enum reg_class\n /*** Passing Function Arguments on the Stack.  */\n \n /* The eBPF ABI doesn't support passing arguments on the stack.  Only\n-   in the first five registers.  Code in bpf.c assures the stack is\n+   in the first five registers.  Code in bpf.cc assures the stack is\n    never used when passing arguments.  However, we still have to\n    define the constants below.  */\n "}, {"sha": "3f3cf8daf8fcd503c87067471e16d2958e3454da", "filename": "gcc/config/bpf/t-bpf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Ft-bpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fbpf%2Ft-bpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Ft-bpf?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,7 +1,7 @@\n \n TM_H += $(srcdir)/config/bpf/coreout.h\n \n-coreout.o: $(srcdir)/config/bpf/coreout.c\n+coreout.o: $(srcdir)/config/bpf/coreout.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "9cbe281c10e4a3fcedb5f506ca779f2e9369e1ff", "filename": "gcc/config/c6x/c6x-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in c6x.c.\n+/* Prototypes for exported functions defined in c6x.cc.\n    Copyright (C) 2010-2022 Free Software Foundation, Inc.\n    Contributed by CodeSourcery.\n \n@@ -21,7 +21,7 @@\n #ifndef GCC_C6X_PROTOS_H\n #define GCC_C6X_PROTOS_H\n \n-/* Functions defined in c6x.c.  */\n+/* Functions defined in c6x.cc.  */\n \n #ifdef RTX_CODE\n extern void c6x_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx, int);"}, {"sha": "300bb31ad84af025279a38d25d00dfee39eb65ee", "filename": "gcc/config/cr16/cr16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in cr16.c\n+/* Prototypes for exported functions defined in cr16.cc\n    Copyright (C) 2012-2022 Free Software Foundation, Inc.\n    Contributed by KPIT Cummins Infosystems Limited.\n "}, {"sha": "a7807b3cc25c86ab8460df10737dc6808767dc60", "filename": "gcc/config/cris/cris.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2022,7 +2022,7 @@ cris_address_cost (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n      The metric used here is (the number of cycles needed) / 2,\n      where we consider equal a cycle for a word of code and a cycle to\n      read memory.  FIXME: Adding \"+ 1\" to all values would avoid\n-     returning 0, as tree-ssa-loop-ivopts.c as of r128272 \"normalizes\"\n+     returning 0, as tree-ssa-loop-ivopts.cc as of r128272 \"normalizes\"\n      0 to 1, thereby giving equal costs to [rN + rM] and [rN].\n      Unfortunately(?) such a hack would expose other pessimizations,\n      at least with g++.dg/tree-ssa/ivopts-1.C, adding insns to the\n@@ -2217,7 +2217,7 @@ cris_side_effect_mode_ok (enum rtx_code code, rtx *ops,\n }\n \n /* Queue an .ident string in the queue of top-level asm statements.\n-   If the front-end is done, we must be being called from toplev.c.\n+   If the front-end is done, we must be being called from toplev.cc.\n    In that case, do nothing.  */\n void \n cris_asm_output_ident (const char *string)\n@@ -2441,7 +2441,7 @@ cris_init_machine_status (void)\n }\n \n /* Split a 2 word move (DI or presumably DF) into component parts.\n-   Originally a copy of gen_split_move_double in m32r.c.  */\n+   Originally a copy of gen_split_move_double in m32r.cc.  */\n \n rtx\n cris_split_movdx (rtx *operands)\n@@ -3270,7 +3270,7 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n \n   insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, vec));\n \n-  /* Because dwarf2out.c handles the insns in a parallel as a sequence,\n+  /* Because dwarf2out.cc handles the insns in a parallel as a sequence,\n      we need to keep the stack adjustment separate, after the\n      MEM-setters.  Else the stack-adjustment in the second component of\n      the parallel would be mishandled; the offsets for the SETs that"}, {"sha": "c623d083ff184c0562a9654db23488e34ef41891", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -317,7 +317,7 @@ extern int cris_cpu_version;\n     Note that to make this macro affect the alignment of stack\n    locals, a fix was required, and special precautions when handling\n    the stack pointer in various other macros (TARGET_ASM_FUNCTION_PROLOGUE\n-   et al) were required.  See file \"function.c\".  If you would just define\n+   et al) were required.  See file \"function.cc\".  If you would just define\n    this macro, it would only affect the builtin alloca and variable\n    local data (non-ANSI, non-K&R, Gnu C extension).  */\n #define STACK_BOUNDARY \\\n@@ -493,7 +493,7 @@ enum reg_class\n #define INDEX_REG_CLASS GENERAL_REGS\n \n /* Since it uses reg_renumber, it is safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n #define REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\t\t\\\n  ((REGNO) <= CRIS_LAST_GENERAL_REGISTER\t\t\t\t\t\\\n@@ -572,7 +572,7 @@ enum reg_class\n    number and dwarf frame register, we would either need to include all\n    registers in the gcc description (with some marked fixed of course), or\n    an inverse mapping from dwarf register to gcc register.  There is one\n-   need in dwarf2out.c:expand_builtin_init_dwarf_reg_sizes.  Right now, I\n+   need in dwarf2out.cc:expand_builtin_init_dwarf_reg_sizes.  Right now, I\n    don't see that we need exact correspondence between DWARF *frame*\n    registers and DBX_REGISTER_NUMBER, so map them onto GCC registers.  */\n #define DWARF_FRAME_REGNUM(REG) (REG)\n@@ -657,7 +657,7 @@ struct cum_args {int regs;};\n \n /* Node: Function entry */\n \n-/* See cris.c for TARGET_ASM_FUNCTION_PROLOGUE and\n+/* See cris.cc for TARGET_ASM_FUNCTION_PROLOGUE and\n    TARGET_ASM_FUNCTION_EPILOGUE.  */\n \n /* Node: Profiling */"}, {"sha": "a417dd85d0108b99180d3c7388a987cacb25dd77", "filename": "gcc/config/cris/cris.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fcris.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.opt?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -151,7 +151,7 @@ Use the most feature-enabling options allowed by other options.\n ; FIXME: The following comment relates to gcc before cris.opt.\n ; Check if it's still valid:\n ; We must call it \"override-\" since calling it \"no-\" will cause\n-; gcc.c to forget it, if there's a \"later\" -mbest-lib-options.\n+; gcc.cc to forget it, if there's a \"later\" -mbest-lib-options.\n ; Kludgy, but needed for some multilibbed files.\n moverride-best-lib-options\n Target RejectNegative"}, {"sha": "ec4212ae73d041af6fee8769116006fe18e9d200", "filename": "gcc/config/cris/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcris%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fsync.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -185,7 +185,7 @@\n \n ;; This pattern is more-or-less assumed to always exist if any of the\n ;; other atomic patterns exist (see e.g.  comment at the\n-;; can_compare_and_swap_p call in omp-low.c, 4.8 era).  We'd slightly\n+;; can_compare_and_swap_p call in omp-low.cc, 4.8 era).  We'd slightly\n ;; prefer atomic_exchange<mode> over this, but having both would be\n ;; redundant.\n ;; FIXME: handle memory without side-effects for operand[3]."}, {"sha": "e315e09a8fe97a4a91c778b7a1cc34d88289c8ba", "filename": "gcc/config/csky/csky.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -5694,7 +5694,7 @@ csky_expand_prologue (void)\n \n       /* If we have a parameter passed partially in regs and partially\n \t in memory, the registers will have been stored to memory already\n-\t in function.c.  So we only need to copy varargs from registers\n+\t in function.cc.  So we only need to copy varargs from registers\n \t to stack.  */\n       if (cfun->machine->uses_anonymous_args)\n \t{"}, {"sha": "3770857aa422eae5b09bfd27678441ce47bf3acf", "filename": "gcc/config/darwin-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -831,7 +831,7 @@ EXPORTED_CONST format_kind_info darwin_additional_format_types[] = {\n /* Support routines to dump the class references for NeXT ABI v1, aka\n    32-bits ObjC-2.0, as top-level asms.\n    The following two functions should only be called from\n-   objc/objc-next-runtime-abi-01.c.  */\n+   objc/objc-next-runtime-abi-01.cc.  */\n \n static void\n darwin_objc_declare_unresolved_class_reference (const char *name)"}, {"sha": "e1efc5812179f17357d97b5d70e076bf11924740", "filename": "gcc/config/darwin-f.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-f.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-f.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-f.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n    However, we can define do-nothing stubs of said hooks as\n    we are not interested in objc include files in Fortran.\n \n-   The hooks original purpose (see also darwin-c.c):\n+   The hooks original purpose (see also darwin-c.cc):\n     * darwin_register_objc_includes\n       Register the GNU objective-C runtime include path if STDINC.\n "}, {"sha": "394ea1658803be947afb9e49b6d6b07e2b47dc8c", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,17 +17,17 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Since Darwin's ld will not allow zero-sized objects, and gcc wants them,\n-   we emit one byte (in darwin.c) when such an object is encountered.\n+   we emit one byte (in darwin.cc) when such an object is encountered.\n \n    This messes up section anchoring because the emitted byte is not counted\n    outside the port.  To cope with this, we set aside sections for zero-sized\n    objects and disallow those sections from  participating in section anchors\n    (\"zobj_\" sections, below).\n    \n    Items that might be coalesced by the linker are prevented from participating,\n-   (and those in mergeable sections are disallowed in varasm.c).  */\n+   (and those in mergeable sections are disallowed in varasm.cc).  */\n \n-/* The .text section is generated in varasm.c  */\n+/* The .text section is generated in varasm.cc  */\n DEF_SECTION (text_coal_section, SECTION_CODE|SECTION_NO_ANCHOR,\n \t     \".section __TEXT,__textcoal_nt,coalesced,pure_instructions\", 0)\n \n@@ -62,7 +62,7 @@ DEF_SECTION (const_coal_section, SECTION_NO_ANCHOR,\n DEF_SECTION (zobj_const_section, SECTION_NO_ANCHOR, \n \t     \".section\\t__DATA,__zobj_const\", 0)\n \n-/* Write-able data.  '.data'  handled in varasm.c  */\n+/* Write-able data.  '.data'  handled in varasm.cc  */\n DEF_SECTION (static_data_section, SECTION_WRITE, \".static_data\", 0)\n DEF_SECTION (data_coal_section, SECTION_WRITE|SECTION_NO_ANCHOR,\n \t     \".section __DATA,__datacoal_nt,coalesced\", 0)"}, {"sha": "783fe3cb443340629cbb6b9c79901fd605e52143", "filename": "gcc/config/darwin.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -212,7 +212,7 @@ output_objc_section_asm_op (const char *directive)\n       else\n \tfor (i = 0; i < ARRAY_SIZE (tomarkv2); i++)\n \t  switch_to_section (darwin_sections[tomarkv2[i]]);\n-      /* Make sure we don't get varasm.c out of sync with us.  */\n+      /* Make sure we don't get varasm.cc out of sync with us.  */\n       switch_to_section (saved_in_section);\n     }\n   output_section_asm_op (directive);\n@@ -2346,7 +2346,7 @@ fprintf (file, \"# dadon: %s %s (%llu, %u) local %d weak %d\"\n      They must be made at least one byte, and the section containing must be\n      marked as unsuitable for section-anchors (see storage allocators below).\n \n-     For non-zero objects this output is handled by varasm.c.\n+     For non-zero objects this output is handled by varasm.cc.\n   */\n   if (!size)\n     {\n@@ -2605,7 +2605,7 @@ fprintf (fp, \"# albss: %s (%lld,%d) ro %d cst %d stat %d com %d\"\n \tpub, weak, one, (unsigned long)DECL_INITIAL (decl));\n #endif\n \n-  /* ObjC metadata can get put in BSS because varasm.c decides it's BSS\n+  /* ObjC metadata can get put in BSS because varasm.cc decides it's BSS\n      before the target has a chance to comment.  */\n   if ((meta = is_objc_metadata (decl)))\n     {\n@@ -2730,7 +2730,7 @@ fprintf (fp, \"# adcom: %s (%lld,%d) ro %d cst %d stat %d com %d pub %d\"\n \tTREE_PUBLIC (decl), weak, one, (unsigned long)DECL_INITIAL (decl));\n #endif\n \n-  /* ObjC metadata can get put in BSS because varasm.c decides it's BSS\n+  /* ObjC metadata can get put in BSS because varasm.cc decides it's BSS\n      before the target has a chance to comment.  */\n   if ((meta = is_objc_metadata (decl)))\n     {\n@@ -2806,7 +2806,7 @@ fprintf (fp, \"# adloc: %s (%lld,%d) ro %d cst %d stat %d one %d pub %d\"\n \tweak , (unsigned long)DECL_INITIAL (decl));\n #endif\n \n-  /* ObjC metadata can get put in BSS because varasm.c decides it's BSS\n+  /* ObjC metadata can get put in BSS because varasm.cc decides it's BSS\n      before the target has a chance to comment.  */\n   if ((meta = is_objc_metadata (decl)))\n     {"}, {"sha": "ceb043a81eaca70a7a9e833fcd787632348a7d85", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -323,7 +323,7 @@ extern GTY(()) int darwin_ms_struct;\n   } while (0)\n \n /* Machine dependent cpp options.  Don't add more options here, add\n-   them to darwin_cpp_builtins in darwin-c.c.  */\n+   them to darwin_cpp_builtins in darwin-c.cc.  */\n \n #undef\tCPP_SPEC\n #define CPP_SPEC \"%{static:%{!dynamic:-D__STATIC__}}%{!static:-D__DYNAMIC__}\" \\\n@@ -586,7 +586,7 @@ extern GTY(()) int darwin_ms_struct;\n #endif\n \n #if HAVE_GNU_AS\n-/* The options are added in gcc.c for this case.  */\n+/* The options are added in gcc.cc for this case.  */\n #define ASM_OPTIONS \"\"\n #else\n /* When we detect that we're cctools or llvm as, we need to insert the right"}, {"sha": "acb376283cf8d772b486e5dfe9ba74886c32dce4", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -466,7 +466,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   default_elf_asm_output_ascii ((FILE), (STR), (LENGTH))\n \n /* Allow the use of the -frecord-gcc-switches switch via the\n-   elf_record_gcc_switches function defined in varasm.c.  */\n+   elf_record_gcc_switches function defined in varasm.cc.  */\n #undef  TARGET_ASM_RECORD_GCC_SWITCHES\n #define TARGET_ASM_RECORD_GCC_SWITCHES elf_record_gcc_switches\n "}, {"sha": "d347ce6adea8878909cf50e7219d0aad4c231be8", "filename": "gcc/config/epiphany/epiphany-sched.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-sched.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -77,7 +77,7 @@\n   \"issue,issue+int,issue+int,issue+int,int\")\n \n ;; Loads have a latency of two.\n-;; Note that we fix up the latency of post_modify in epiphany.c:epiphany_adjust_cost\n+;; Note that we fix up the latency of post_modify in epiphany.cc:epiphany_adjust_cost\n \n (define_insn_reservation \"load\" 3\n   (and (eq_attr \"pipe_model\" \"epiphany\")"}, {"sha": "f8c049340856f5d765a51676e0f4808581ca5115", "filename": "gcc/config/epiphany/epiphany.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1512,7 +1512,7 @@ epiphany_function_value (const_tree ret_type,\n   /* We must change the mode like PROMOTE_MODE does.\n      ??? PROMOTE_MODE is ignored for non-scalar types.\n      The set of types tested here has to be kept in sync\n-     with the one in explow.c:promote_mode.  */\n+     with the one in explow.cc:promote_mode.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && GET_MODE_SIZE (mode) < 4\n       && (TREE_CODE (ret_type) == INTEGER_TYPE"}, {"sha": "8c723845ae378de229c67f689e65f747a83bb897", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -378,7 +378,7 @@ extern enum reg_class epiphany_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n ((REGNO) < FIRST_PSEUDO_REGISTER || (unsigned) reg_renumber[REGNO] < FIRST_PSEUDO_REGISTER)\n@@ -551,7 +551,7 @@ typedef struct GTY (()) machine_function\n     && epiphany_is_interrupt_p (current_function_decl)) \\\n    ? IRET_REGNUM : GPR_LR)\n /* This is not only for dwarf unwind info, but also for the benefit of\n-   df-scan.c to tell it that LR is live at the function start.  */\n+   df-scan.cc to tell it that LR is live at the function start.  */\n #define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, EPIPHANY_RETURN_REGNO)\n \n /* However, we haven't implemented the rest needed for dwarf2 unwind info.  */\n@@ -662,7 +662,7 @@ typedef struct GTY (()) machine_function\n #define NO_FUNCTION_CSE 1\n \f\n /* Section selection.  */\n-/* WARNING: These section names also appear in dwarf2out.c.  */\n+/* WARNING: These section names also appear in dwarf2out.cc.  */\n \n #define TEXT_SECTION_ASM_OP\t\"\\t.section .text\"\n #define DATA_SECTION_ASM_OP\t\"\\t.section .data\""}, {"sha": "887550a3340eef4717a01ac210bcb63bcbd10ef4", "filename": "gcc/config/epiphany/mode-switch-use.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,5 +1,5 @@\n /* Insert USEs in instructions that require mode switching.\n-   This should probably be merged into mode-switching.c .\n+   This should probably be merged into mode-switching.cc .\n    Copyright (C) 2011-2022 Free Software Foundation, Inc.\n    Contributed by Embecosm on behalf of Adapteva, Inc.\n "}, {"sha": "5504e29bcef3e860587343fea9b1974bd182a405", "filename": "gcc/config/epiphany/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fpredicates.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -246,7 +246,7 @@\n       return REGNO (cc) == CC_REGNUM;\n     /* From combiner.  */\n     case E_QImode: case E_SImode: case E_SFmode: case E_HImode:\n-    /* From cse.c:dead_libcall_p.  */\n+    /* From cse.cc:dead_libcall_p.  */\n     case E_DFmode:\n       return 0;\n     default:"}, {"sha": "27a8052402c65e719f89f4e1dea8be0760bc23eb", "filename": "gcc/config/epiphany/t-epiphany", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Ft-epiphany?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,13 +17,13 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-mode-switch-use.o : $(srcdir)/config/epiphany/mode-switch-use.c \\\n+mode-switch-use.o : $(srcdir)/config/epiphany/mode-switch-use.cc \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) \\\n    $(TREE_PASS_H) $(INSN_ATTR_H) $(EMIT_RTL_H) $(FUNCTION_H) $(RECOG_H) \\\n    insn-config.h $(DF_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $<\n \n-resolve-sw-modes.o : $(srcdir)/config/epiphany/resolve-sw-modes.c \\\n+resolve-sw-modes.o : $(srcdir)/config/epiphany/resolve-sw-modes.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(MACHMODE_H) $(TM_H) hard-reg-set.h \\\n   $(TM_P_H) $(VEC_H) sbitmap.h $(BASIC_BLOCK_H) $(DF_H) $(RTL_H) \\\n   insn-config.h insn-codes.h $(EMIT_RTL_H) $(RECOG_H) $(FUNCTION_H) \\"}, {"sha": "80d949808a2218680bdff20822b99e0c1e6e2d79", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for fr30.c functions used in the md file & elsewhere.\n+/* Prototypes for fr30.cc functions used in the md file & elsewhere.\n    Copyright (C) 1999-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "bc07111d61a0121bdcba23d6fa153ce6899aaddd", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -18,7 +18,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Define functions defined in frv.c */\n+/* Define functions defined in frv.cc */\n extern void frv_expand_prologue\t\t\t(void);\n extern void frv_expand_epilogue\t\t\t(bool);\n extern frv_stack_t *frv_stack_info\t\t(void);"}, {"sha": "d6c399304a1e8d41b14794c6eaa3d553f134b22e", "filename": "gcc/config/frv/frv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -9434,7 +9434,7 @@ frv_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \n #define TLS_BIAS (2048 - 16)\n \n-/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.cc via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n static void"}, {"sha": "8cd67f75b090ea75eded5b93d99397cc8d86af98", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1525,7 +1525,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n \n-/* This is for final.c, because it is used by ASM_DECLARE_OBJECT_NAME.  */\n+/* This is for final.cc, because it is used by ASM_DECLARE_OBJECT_NAME.  */\n extern int size_directive_output;\n \n /* Like `ASM_OUTPUT_ALIGNED_LOCAL' except that it takes an additional"}, {"sha": "6cc777e5bb340578f3a0cdeebd5d2537a9793743", "filename": "gcc/config/ft32/ft32-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fft32%2Fft32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fft32%2Fft32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for ft32.c functions used in the md file & elsewhere.\n+/* Prototypes for ft32.cc functions used in the md file & elsewhere.\n    Copyright (C) 2015-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "9b5fee9f7d426d529a3a5490f6c14fa1f1ac2763", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -71,7 +71,7 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n #define ASM_APP_ON  \"\"\n #define ASM_APP_OFF \"\"\n \n-/* Avoid the default in ../../gcc.c, which adds \"-pthread\", which is not\n+/* Avoid the default in ../../gcc.cc, which adds \"-pthread\", which is not\n    supported for gcn.  */\n #define GOMP_SELF_SPECS \"\"\n "}, {"sha": "74819c6e4d7086f6370446999aa5fabfecd97d5f", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3755,7 +3755,7 @@ static void\n gcn_init_libfuncs (void)\n {\n   /* BITS_PER_UNIT * 2 is 64 bits, which causes\n-     optabs-libfuncs.c:gen_int_libfunc to omit TImode (i.e 128 bits)\n+     optabs-libfuncs.cc:gen_int_libfunc to omit TImode (i.e 128 bits)\n      libcalls that we need to support operations for that type.  Initialise\n      them here instead.  */\n   set_optab_libfunc (udiv_optab, TImode, \"__udivti3\");"}, {"sha": "94ba7ffa5af4e794973f7c376c5c2d389f7a2e90", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -307,7 +307,7 @@ copy_early_debug_info (const char *infile, const char *outfile)\n   int err;\n \n   /* The simple_object code can handle extracting the debug sections.\n-     This code is based on that in lto-wrapper.c.  */\n+     This code is based on that in lto-wrapper.cc.  */\n   int infd = open (infile, O_RDONLY | O_BINARY);\n   if (infd == -1)\n     return false;"}, {"sha": "10e31f3d266fb764942c62e33e00c220bff3e6f7", "filename": "gcc/config/gcn/t-gcn-hsa", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -16,13 +16,13 @@\n \n GTM_H += $(HASH_TABLE_H)\n \n-driver-gcn.o: $(srcdir)/config/gcn/driver-gcn.c\n+driver-gcn.o: $(srcdir)/config/gcn/driver-gcn.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n CFLAGS-mkoffload.o += $(DRIVER_DEFINES) \\\n \t-DGCC_INSTALL_NAME=\\\"$(GCC_INSTALL_NAME)\\\"\n-mkoffload.o: $(srcdir)/config/gcn/mkoffload.c\n+mkoffload.o: $(srcdir)/config/gcn/mkoffload.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n ALL_HOST_OBJS += mkoffload.o\n@@ -34,7 +34,7 @@ mkoffload$(exeext): mkoffload.o collect-utils.o libcommon-target.a \\\n \n CFLAGS-gcn-run.o += -DVERSION_STRING=$(PKGVERSION_s)\n COMPILE-gcn-run.o = $(filter-out -fno-rtti,$(COMPILE))\n-gcn-run.o: $(srcdir)/config/gcn/gcn-run.c\n+gcn-run.o: $(srcdir)/config/gcn/gcn-run.cc\n \t$(COMPILE-gcn-run.o) -x c -std=gnu11 -Wno-error=pedantic $<\n \t$(POSTCOMPILE)\n ALL_HOST_OBJS += gcn-run.o\n@@ -45,7 +45,7 @@ gcn-run$(exeext): gcn-run.o\n MULTILIB_OPTIONS = march=gfx900/march=gfx906/march=gfx908\n MULTILIB_DIRNAMES = gfx900 gfx906 gfx908\n \n-gcn-tree.o: $(srcdir)/config/gcn/gcn-tree.c\n+gcn-tree.o: $(srcdir)/config/gcn/gcn-tree.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n ALL_HOST_OBJS += gcn-tree.o"}, {"sha": "cd56e2f8a68cea1c1f6b04830cfa37f04305961f", "filename": "gcc/config/gcn/t-omp-device", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Ft-omp-device", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fgcn%2Ft-omp-device", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Ft-omp-device?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-omp-device-properties-gcn: $(srcdir)/config/gcn/gcn.c\n+omp-device-properties-gcn: $(srcdir)/config/gcn/gcn.cc\n \techo kind: gpu > $@\n \techo arch: gcn >> $@\n \techo isa: fiji gfx900 gfx906 gfx908 >> $@"}, {"sha": "e9d434c0d5a0ae8d3bb4c704485ead4a4d034a62", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_H8300_PROTOS_H\n #define GCC_H8300_PROTOS_H\n \n-/* Declarations for functions used in insn-output.c.  */\n+/* Declarations for functions used in insn-output.cc.  */\n #ifdef RTX_CODE\n extern unsigned int compute_mov_length (rtx *);\n extern const char *output_plussi (rtx *, bool);\n@@ -59,7 +59,7 @@ extern int byte_accesses_mergeable_p (rtx, rtx);\n extern int same_cmp_preceding_p (rtx_insn *);\n extern int same_cmp_following_p (rtx_insn *);\n \n-/* Used in builtins.c */\n+/* Used in builtins.cc */\n extern rtx h8300_return_addr_rtx (int, rtx);\n \n /* Classifies an h8sx shift operation."}, {"sha": "78cf15f15c73385435bb588605e91dbb2ce51159", "filename": "gcc/config/h8300/h8300.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Subroutines for insn-output.c for Renesas H8/300.\n+/* Subroutines for insn-output.cc for Renesas H8/300.\n    Copyright (C) 1992-2022 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -496,7 +496,7 @@ F (rtx_insn *x, bool set_it)\n /* Mark all the subexpressions of the PARALLEL rtx PAR as\n    frame-related.  Return PAR.\n \n-   dwarf2out.c:dwarf2out_frame_debug_expr ignores sub-expressions of a\n+   dwarf2out.cc:dwarf2out_frame_debug_expr ignores sub-expressions of a\n    PARALLEL rtx other than the first if they do not have the\n    FRAME_RELATED flag set on them.  */\n static rtx"}, {"sha": "9a6c78cf2d568e9c9c89e5a8b209f823fdf7a5e4", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern int cpu_type;\n \n-/* Various globals defined in h8300.c.  */\n+/* Various globals defined in h8300.cc.  */\n \n extern const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n extern const char * const *h8_reg_names;\n@@ -447,7 +447,7 @@ struct cum_arg\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #define REGNO_OK_FOR_INDEX_P(regno) 0\n@@ -564,7 +564,7 @@ struct cum_arg\n \n #define BRANCH_COST(speed_p, predictable_p) 0\n \n-/* Tell final.c how to eliminate redundant test instructions.  */\n+/* Tell final.cc how to eliminate redundant test instructions.  */\n \n /* Here we define machine-dependent flags and fields in cc_status\n    (see `conditions.h').  No extra ones are needed for the h8300.  */"}, {"sha": "45150458cc5c5fd465e75311484c9f626537063a", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -151,7 +151,7 @@ along with GCC; see the file COPYING3.  If not see\n   }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Get tree.c to declare a target-specific specialization of\n+/* Get tree.cc to declare a target-specific specialization of\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n@@ -381,7 +381,7 @@ do {\t\t\t\t\t\t\\\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n /* MSVC returns aggregate types of up to 8 bytes via registers.\n-   See i386.c:ix86_return_in_memory.  */\n+   See i386.cc:ix86_return_in_memory.  */\n #undef MS_AGGREGATE_RETURN\n #define MS_AGGREGATE_RETURN 1\n "}, {"sha": "909821e953be7291ef0ea16ecbea64f7fd02cda1", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -166,7 +166,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef  TARGET_ASM_LTO_END\n #define TARGET_ASM_LTO_END i386_djgpp_asm_lto_end\n \n-/* Function protypes for gcc/i386/djgpp.c */\n+/* Function protypes for gcc/i386/djgpp.cc */\n \n void\n i386_djgpp_asm_named_section(const char *name, unsigned int flags,"}, {"sha": "39bd280d2b86fce2084ff17b1b6bf9bc0f6b501c", "filename": "gcc/config/i386/dragonfly.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -41,7 +41,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef  NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS\t1\n \n-/* Tell final.c that we don't need a label passed to mcount.  */\n+/* Tell final.cc that we don't need a label passed to mcount.  */\n \n #undef  MCOUNT_NAME\n #define MCOUNT_NAME \".mcount\""}, {"sha": "9e0ae0b2baa3b17d5c613fcff1f626fc502180ab", "filename": "gcc/config/i386/driver-i386.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -369,7 +369,7 @@ detect_caches_intel (bool xeon_mp, unsigned max_level,\n   return describe_cache (level1, level2);\n }\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be\n    called with either \"arch [32|64]\" or \"tune [32|64]\" as argument\n    depending on if -march=native or -mtune=native is to be substituted."}, {"sha": "120e24c81f338b536a533bbe7faa626e576c7ad0", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef  NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS\t1\n \n-/* Tell final.c that we don't need a label passed to mcount.  */\n+/* Tell final.cc that we don't need a label passed to mcount.  */\n \n #undef  MCOUNT_NAME\n #define MCOUNT_NAME \".mcount\""}, {"sha": "c73c1b1f594d083f9c47427bb049eac4cb26cc3d", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -798,7 +798,7 @@ ix86_target_macros (void)\n \n \f\n /* Register target pragmas.  We need to add the hook for parsing #pragma GCC\n-   option here rather than in i386.c since it will pull in various preprocessor\n+   option here rather than in i386.cc since it will pull in various preprocessor\n    functions, and those are not present in languages like fortran without a\n    preprocessor.  */\n "}, {"sha": "eb1930ba375c1652edb2e022b0b5df0225ea1963", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -14786,7 +14786,7 @@ ix86_vector_duplicate_value (machine_mode mode, rtx target, rtx val)\n static machine_mode\n get_mode_wider_vector (machine_mode o)\n {\n-  /* ??? Rely on the ordering that genmodes.c gives to vectors.  */\n+  /* ??? Rely on the ordering that genmodes.cc gives to vectors.  */\n   machine_mode n = GET_MODE_WIDER_MODE (o).require ();\n   gcc_assert (GET_MODE_NUNITS (o) == GET_MODE_NUNITS (n) * 2);\n   gcc_assert (GET_MODE_SIZE (o) == GET_MODE_SIZE (n));"}, {"sha": "715d9a15ff52fa38ee387c7837b45902fcd8fd79", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3074,7 +3074,7 @@ ix86_set_func_type (tree fndecl)\n \n \t  ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n \n-\t  /* Only dwarf2out.c can handle -WORD(AP) as a pointer argument.  */\n+\t  /* Only dwarf2out.cc can handle -WORD(AP) as a pointer argument.  */\n \t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n \t    sorry (\"only DWARF debug format is supported for interrupt \"\n \t\t   \"service routine\");"}, {"sha": "6b3c9516a7f44b0e416fefad567791f19304ae14", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,13 +17,13 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* In i386-common.c.  */\n+/* In i386-common.cc.  */\n extern bool ix86_handle_option (struct gcc_options *opts,\n \t\t\t\tstruct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t\t\tconst struct cl_decoded_option *decoded,\n \t\t\t\tlocation_t loc);\n \n-/* Functions in i386.c */\n+/* Functions in i386.cc */\n extern bool ix86_target_stack_probe (void);\n extern bool ix86_can_use_return_insn_p (void);\n extern bool ix86_function_ms_hook_prologue (const_tree fn);\n@@ -267,16 +267,16 @@ extern bool ix86_expand_vector_init_duplicate (bool, machine_mode, rtx,\n \t\t\t\t\t       rtx);\n extern bool ix86_extract_perm_from_pool_constant (int*, rtx);\n \n-/* In i386-c.c  */\n+/* In i386-c.cc  */\n extern void ix86_target_macros (void);\n extern void ix86_register_pragmas (void);\n \n-/* In i386-d.c  */\n+/* In i386-d.cc  */\n extern void ix86_d_target_versions (void);\n extern void ix86_d_register_target_info (void);\n extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n \n-/* In winnt.c  */\n+/* In winnt.cc  */\n extern void i386_pe_unique_section (tree, int);\n extern void i386_pe_declare_function_type (FILE *, const char *, int);\n extern void i386_pe_record_external_function (tree, const char *);\n@@ -309,7 +309,7 @@ extern void i386_pe_seh_unwind_emit (FILE *, rtx_insn *);\n extern void i386_pe_seh_emit_except_personality (rtx);\n extern void i386_pe_seh_init_sections (void);\n \n-/* In winnt-cxx.c and winnt-stubs.c  */\n+/* In winnt-cxx.cc and winnt-stubs.cc  */\n extern void i386_pe_adjust_class_at_definition (tree);\n extern bool i386_pe_type_dllimport_p (tree);\n extern bool i386_pe_type_dllexport_p (tree);"}, {"sha": "af828868205e54b310cc8944facf502e6ceac23b", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1438,7 +1438,7 @@ ix86_function_arg_regno_p (int regno)\n \t\t && regno < FIRST_MMX_REG + MMX_REGPARM_MAX));\n \n   /* TODO: The function should depend on current function ABI but\n-     builtins.c would need updating then. Therefore we use the\n+     builtins.cc would need updating then. Therefore we use the\n      default ABI.  */\n   call_abi = ix86_cfun_abi ();\n \n@@ -3648,7 +3648,7 @@ ix86_function_value_regno_p (const unsigned int regno)\n     case ST0_REG:\n     case ST1_REG:\n       /* TODO: The function should depend on current function ABI but\n-       builtins.c would need updating then. Therefore we use the\n+       builtins.cc would need updating then. Therefore we use the\n        default ABI.  */\n       if (TARGET_64BIT && ix86_cfun_abi () == MS_ABI)\n \treturn false;\n@@ -6854,7 +6854,7 @@ ix86_compute_frame_layout (void)\n   if (TARGET_SEH)\n     {\n       /* Force the frame pointer to point at or below the lowest register save\n-\t area, see the SEH code in config/i386/winnt.c for the rationale.  */\n+\t area, see the SEH code in config/i386/winnt.cc for the rationale.  */\n       frame->hard_frame_pointer_offset = frame->sse_reg_save_offset;\n \n       /* If we can leave the frame pointer where it is, do so; however return\n@@ -11974,7 +11974,7 @@ legitimize_pe_coff_symbol (rtx addr, bool inreg)\n \n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n+   This macro is used in only one place: `memory_address' in explow.cc.\n \n    OLDX is the address as it was before break_out_memory_refs was called.\n    In some cases it is useful to look at this to decide what needs to be done.\n@@ -11988,7 +11988,7 @@ legitimize_pe_coff_symbol (rtx addr, bool inreg)\n    nothing needs to be done because REG can certainly go in a general reg.\n \n    When -fpic is used, special handling is needed for symbolic references.\n-   See comments by legitimize_pic_address in i386.c for details.  */\n+   See comments by legitimize_pic_address in i386.cc for details.  */\n \n static rtx\n ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n@@ -12334,7 +12334,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n     }\n }\n \n-/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.cc via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n static void ATTRIBUTE_UNUSED"}, {"sha": "f41e0908250c7c2e48915cd456b294040fba854a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -551,9 +551,9 @@ extern GTY(()) tree x86_mfence;\n \n /* -march=native handling only makes sense with compiler running on\n    an x86 or x86_64 chip.  If changing this condition, also change\n-   the condition in driver-i386.c.  */\n+   the condition in driver-i386.cc.  */\n #if defined(__i386__) || defined(__x86_64__)\n-/* In driver-i386.c.  */\n+/* In driver-i386.cc.  */\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define EXTRA_SPEC_FUNCTIONS \\\n   { \"local_cpu_detect\", host_detect_local_cpu },\n@@ -873,7 +873,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \f\n /* Standard register usage.  */\n \n-/* This processor has special stack-like registers.  See reg-stack.c\n+/* This processor has special stack-like registers.  See reg-stack.cc\n    for details.  */\n \n #define STACK_REGS\n@@ -1662,7 +1662,7 @@ typedef struct ix86_args {\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) \t\t\t\t\t\\\n@@ -1724,15 +1724,15 @@ typedef struct ix86_args {\n    The other macros defined here are used only in TARGET_LEGITIMATE_ADDRESS_P,\n    except for CONSTANT_ADDRESS_P which is usually machine-independent.\n \n-   See legitimize_pic_address in i386.c for details as to what\n+   See legitimize_pic_address in i386.cc for details as to what\n    constitutes a legitimate address when -fpic is used.  */\n \n #define MAX_REGS_PER_ADDRESS 2\n \n #define CONSTANT_ADDRESS_P(X)  constant_address_p (X)\n \n /* If defined, a C expression to determine the base term of address X.\n-   This macro is used in only one place: `find_base_term' in alias.c.\n+   This macro is used in only one place: `find_base_term' in alias.cc.\n \n    It is always safe for this macro to not be defined.  It exists so\n    that alias analysis can understand machine-dependent addresses.\n@@ -2204,7 +2204,7 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define DEFAULT_LARGE_SECTION_THRESHOLD 65536\n \f\n /* Which processor to tune code generation for.  These must be in sync\n-   with processor_target_table in i386.c.  */ \n+   with processor_target_table in i386.cc.  */ \n \n enum processor_type\n {\n@@ -2602,7 +2602,7 @@ struct GTY(()) machine_frame_state\n   HOST_WIDE_INT sp_realigned_offset;\n };\n \n-/* Private to winnt.c.  */\n+/* Private to winnt.cc.  */\n struct seh_frame_state;\n \n enum function_type"}, {"sha": "74da0d477851629100463715912002c38c37100a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -463,7 +463,7 @@\n    (ABI_UNKNOWN\t\t2)])\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n-;; from i386.c.\n+;; from i386.cc.\n \n ;; In C guard expressions, put expressions which may be compile-time\n ;; constants first.  This allows for better optimization.  For\n@@ -5206,7 +5206,7 @@\n ;; of the machinery. Please note the clobber of FLAGS_REG. In i387 control\n ;; word calculation (inserted by LCM in mode switching pass) a FLAGS_REG\n ;; clobbering insns can be used. Look at emit_i387_cw_initialization ()\n-;; function in i386.c.\n+;; function in i386.cc.\n (define_insn_and_split \"*fix_trunc<mode>_i387_1\"\n   [(set (match_operand:SWI248x 0 \"nonimmediate_operand\")\n \t(fix:SWI248x (match_operand 1 \"register_operand\")))\n@@ -15298,7 +15298,7 @@\n \n ;; Insn emitted into the body of a function to return from a function.\n ;; This is only done if the function's epilogue is known to be simple.\n-;; See comments for ix86_can_use_return_insn_p in i386.c.\n+;; See comments for ix86_can_use_return_insn_p in i386.cc.\n \n (define_expand \"return\"\n   [(simple_return)]"}, {"sha": "baa62c14986b8b303e497f4114169f1d1264959e", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -60,7 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef ASM_OUTPUT_ALIGN\n \n-/* The file i386.c defines TARGET_HAVE_TLS unconditionally if\n+/* The file i386.cc defines TARGET_HAVE_TLS unconditionally if\n    HAVE_AS_TLS is defined.  HAVE_AS_TLS is defined as gas support for\n    TLS is detected by configure.  We undefine it here.  */\n "}, {"sha": "29d470bdef23122e22dc6aa06c950862f5b6041f", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1522,7 +1522,7 @@\n })\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn_and_split \"*vec_extractv2sf_0\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=x, m,y ,m,f,r\")\n \t(vec_select:SF\n@@ -1537,7 +1537,7 @@\n   [(set_attr \"mmx_isa\" \"*,*,native,native,*,*\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"*vec_extractv2sf_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=y,x,x,y,x,f,r\")\n \t(vec_select:SF\n@@ -3748,7 +3748,7 @@\n })\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn_and_split \"*vec_extractv2si_0\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,m,y, m,r,r\")\n \t(vec_select:SI\n@@ -3805,7 +3805,7 @@\n   \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"*vec_extractv2si_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,rm,x,x,y,x,r\")\n \t(vec_select:SI"}, {"sha": "34175fd5258afb25e5762a75d087a09e80b15a6c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -10463,7 +10463,7 @@\n    (set_attr \"mode\" \"DF\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n \t  \"=Yr,*x,v,v,v,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n@@ -12989,7 +12989,7 @@\n    (set_attr \"mode\" \"V2DF\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"sse2_storehpd\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,Yv,x,*f,r\")\n \t(vec_select:DF\n@@ -13038,7 +13038,7 @@\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"sse2_storelpd\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,x,*f,r\")\n \t(vec_select:DF\n@@ -13103,7 +13103,7 @@\n })\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"sse2_loadhpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"\n \t  \"=x,v,x,v ,o,o ,o\")\n@@ -13162,7 +13162,7 @@\n })\n \n ;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n+;; see comment above inline_secondary_memory_needed function in i386.cc\n (define_insn \"sse2_loadlpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"\n \t  \"=v,x,v,x,v,x,x,v,m,m ,m\")"}, {"sha": "d4803dea401ec31a554cca28e265507bf4b0cdf3", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -20,33 +20,33 @@\n # doing the build, it may not be installed yet.\n LIMITS_H_TEST = true\n \n-winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+winnt.o: $(srcdir)/config/i386/winnt.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASH_TABLE_H) $(GGC_H) $(LTO_STREAMER_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/winnt.c\n+\t$(srcdir)/config/i386/winnt.cc\n \n-winnt-cxx.o: $(srcdir)/config/i386/winnt-cxx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+winnt-cxx.o: $(srcdir)/config/i386/winnt-cxx.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASHTAB_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/winnt-cxx.c\n+\t$(srcdir)/config/i386/winnt-cxx.cc\n \n \n-winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASHTAB_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/winnt-stubs.c\n+\t$(srcdir)/config/i386/winnt-stubs.cc\n \n-winnt-d.o: $(srcdir)/config/i386/winnt-d.c\n+winnt-d.o: $(srcdir)/config/i386/winnt-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-msformat-c.o: $(srcdir)/config/i386/msformat-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+msformat-c.o: $(srcdir)/config/i386/msformat-c.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASHTAB_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/msformat-c.c\n+\t$(srcdir)/config/i386/msformat-c.cc\n \n STMP_FIXINC=stmp-fixinc"}, {"sha": "140f763c09d939d0681083eeeb459417a546fd30", "filename": "gcc/config/i386/t-djgpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-djgpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-djgpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-djgpp?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,8 +1,8 @@\n \n EXTRA_OBJS += djgpp.o\n \n-djgpp.o:    $(srcdir)/config/i386/djgpp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+djgpp.o:    $(srcdir)/config/i386/djgpp.cc $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASH_TABLE_H) $(GGC_H) $(LTO_STREAMER_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/djgpp.c\n+\t$(srcdir)/config/i386/djgpp.cc"}, {"sha": "fc5c6f997bcc96aac58a4c14f3309e16f690cc48", "filename": "gcc/config/i386/t-gnu-property", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-gnu-property", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-gnu-property", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gnu-property?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -16,6 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-gnu-property.o: $(srcdir)/config/i386/gnu-property.c\n+gnu-property.o: $(srcdir)/config/i386/gnu-property.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)"}, {"sha": "4e2a0efc615157816be34fa506e20de8b631a310", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,43 +22,43 @@ TM_H += $(srcdir)/config/i386/x86-tune.def \\\n \t$(srcdir)/config/i386/i386-isa.def\n PASSES_EXTRA += $(srcdir)/config/i386/i386-passes.def\n \n-i386-c.o: $(srcdir)/config/i386/i386-c.c\n+i386-c.o: $(srcdir)/config/i386/i386-c.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n \n-x86-tune-sched.o: $(srcdir)/config/i386/x86-tune-sched.c\n+x86-tune-sched.o: $(srcdir)/config/i386/x86-tune-sched.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n \n-x86-tune-sched-bd.o: $(srcdir)/config/i386/x86-tune-sched-bd.c\n+x86-tune-sched-bd.o: $(srcdir)/config/i386/x86-tune-sched-bd.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n \n-x86-tune-sched-atom.o: $(srcdir)/config/i386/x86-tune-sched-atom.c\n+x86-tune-sched-atom.o: $(srcdir)/config/i386/x86-tune-sched-atom.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n \n-x86-tune-sched-core.o: $(srcdir)/config/i386/x86-tune-sched-core.c\n+x86-tune-sched-core.o: $(srcdir)/config/i386/x86-tune-sched-core.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n \n-i386-d.o: $(srcdir)/config/i386/i386-d.c\n+i386-d.o: $(srcdir)/config/i386/i386-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-i386-options.o: $(srcdir)/config/i386/i386-options.c\n+i386-options.o: $(srcdir)/config/i386/i386-options.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-i386-builtins.o: $(srcdir)/config/i386/i386-builtins.c\n+i386-builtins.o: $(srcdir)/config/i386/i386-builtins.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-i386-expand.o: $(srcdir)/config/i386/i386-expand.c\n+i386-expand.o: $(srcdir)/config/i386/i386-expand.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-i386-features.o: $(srcdir)/config/i386/i386-features.c\n+i386-features.o: $(srcdir)/config/i386/i386-features.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "95d7e53231516726958191f83cc684353896259d", "filename": "gcc/config/i386/t-intelmic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-intelmic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-intelmic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-intelmic?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,6 +1,6 @@\n CFLAGS-mkoffload.o += $(DRIVER_DEFINES) -DGCC_INSTALL_NAME=\\\"$(GCC_INSTALL_NAME)\\\"\n \n-mkoffload.o: $(srcdir)/config/i386/intelmic-mkoffload.c\n+mkoffload.o: $(srcdir)/config/i386/intelmic-mkoffload.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n ALL_HOST_OBJS += mkoffload.o"}, {"sha": "cfb41ed71ce2537370e934586196abd90c8fa4ea", "filename": "gcc/config/i386/t-omp-device", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-omp-device", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Ft-omp-device", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-omp-device?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,6 +1,6 @@\n-omp-device-properties-i386: $(srcdir)/config/i386/i386-options.c\n+omp-device-properties-i386: $(srcdir)/config/i386/i386-options.cc\n \techo kind: cpu > $@\n \techo arch: intel_mic x86 x86_64 i386 i486 i586 i686 ia32 >> $@\n \techo isa: sse4 `sed -n '/^static struct ix86_target_opts isa2\\?_opts\\[\\] =/,/^};/p' \\\n-\t  $(srcdir)/config/i386/i386-options.c | \\\n+\t  $(srcdir)/config/i386/i386-options.cc | \\\n \t  sed -n 's/\",.*$$//;s/^  { \"-m//p'` >> $@"}, {"sha": "788c85c809788880f8de1e78bf28965629398ff7", "filename": "gcc/config/i386/winnt-cxx.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-cxx.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -47,7 +47,7 @@ i386_pe_type_dllimport_p (tree decl)\n     return false;\n   \n   /* Overrides of the class dllimport decls by out-of-class definitions are \n-     handled by tree.c:merge_dllimport_decl_attributes.   */\n+     handled by tree.cc:merge_dllimport_decl_attributes.   */\n   return true;\n }\n \n@@ -144,7 +144,7 @@ i386_pe_adjust_class_at_definition (tree t)\n \t that signals that the address of this symbol is not a compile-time\n \t constant.   Any subsequent out-of-class declaration of members wil\n \t cause the DECL_DLLIMPORT_P flag to be unset.\n-\t (See  tree.c: merge_dllimport_decl_attributes).\n+\t (See  tree.cc: merge_dllimport_decl_attributes).\n \t That is just right since out-of class declarations can only be a\n \t definition.   */\n "}, {"sha": "cd71369c0f8249429445b8e35f061c167cebbd86", "filename": "gcc/config/i386/winnt.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fwinnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fwinnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Subroutines for insn-output.c for Windows NT.\n+/* Subroutines for insn-output.cc for Windows NT.\n    Contributed by Douglas Rupp (drupp@cs.washington.edu)\n    Copyright (C) 1995-2022 Free Software Foundation, Inc.\n \n@@ -194,7 +194,7 @@ gen_stdcall_or_fastcall_suffix (tree decl, tree id, bool fastcall)\n \treturn NULL_TREE;\n \n       /* Quit if we hit an incomplete type.  Error is reported\n-\t by convert_arguments in c-typeck.c or cp/typeck.c.  */\n+\t by convert_arguments in c-typeck.cc or cp/typeck.cc.  */\n       FOREACH_FUNCTION_ARGS(type, arg, args_iter)\n \t{\n \t  HOST_WIDE_INT parm_size;\n@@ -278,7 +278,7 @@ i386_pe_mangle_decl_assembler_name (tree decl, tree id)\n   return (new_id ? new_id : id);\n }\n \n-/* This hook behaves the same as varasm.c/assemble_name(), but\n+/* This hook behaves the same as varasm.cc/assemble_name(), but\n    generates the name into memory rather than outputting it to\n    a file stream.  */\n \n@@ -319,7 +319,7 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n     }\n \n   /* Mark the decl so we can tell from the rtl whether the object is\n-     dllexport'd or dllimport'd.  tree.c: merge_dllimport_decl_attributes\n+     dllexport'd or dllimport'd.  tree.cc: merge_dllimport_decl_attributes\n      handles dllexport/dllimport override semantics.  */\n   flags = (SYMBOL_REF_FLAGS (symbol) &\n \t   ~(SYMBOL_FLAG_DLLIMPORT | SYMBOL_FLAG_DLLEXPORT));"}, {"sha": "d9b909117e024dd8ab6f76c5eb3487e7ddf45e80", "filename": "gcc/config/i386/x-cygwin", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-cygwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-cygwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-cygwin?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-host-cygwin.o : $(srcdir)/config/i386/host-cygwin.c $(CONFIG_H) $(SYSTEM_H) \\\n+host-cygwin.o : $(srcdir)/config/i386/host-cygwin.cc $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h hosthooks.h $(HOSTHOOKS_DEF_H) toplev.h diagnostic.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/host-cygwin.c\n+\t\t$(srcdir)/config/i386/host-cygwin.cc"}, {"sha": "08b6ce58bcff09d0d9549f6c5b5606163c29b204", "filename": "gcc/config/i386/x-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-darwin?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-host-i386-darwin.o : $(srcdir)/config/i386/host-i386-darwin.c\n+host-i386-darwin.o : $(srcdir)/config/i386/host-i386-darwin.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "29868e94e619eb792fb97dfb0333b4c9fcd03305", "filename": "gcc/config/i386/x-i386", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-i386?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-driver-i386.o : $(srcdir)/config/i386/driver-i386.c\n+driver-i386.o : $(srcdir)/config/i386/driver-i386.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "d481fc3b94679ed39f84c944fcf1853390e742d6", "filename": "gcc/config/i386/x-mingw32", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-mingw32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx-mingw32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-mingw32?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -25,10 +25,10 @@ local_includedir=$(libsubdir)/$(unlibsubdir)/..`echo $(exec_prefix) | sed -e 's|\n # code does not handle that, so we have to disable checking here.\n WERROR_FLAGS += -Wno-format\n \n-host-mingw32.o : $(srcdir)/config/i386/host-mingw32.c $(CONFIG_H) $(SYSTEM_H) \\\n+host-mingw32.o : $(srcdir)/config/i386/host-mingw32.cc $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h hosthooks.h hosthooks-def.h toplev.h $(DIAGNOSTIC_H) $(HOOKS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/host-mingw32.c\n+\t\t$(srcdir)/config/i386/host-mingw32.cc\n \n-driver-mingw32.o : $(srcdir)/config/i386/driver-mingw32.c $(CONFIG_H)\n+driver-mingw32.o : $(srcdir)/config/i386/driver-mingw32.cc $(CONFIG_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "44968e837d008f5c278bc1a0df51c462170ac997", "filename": "gcc/config/i386/x86-tune-sched-core.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-core.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-core.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-core.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Model decoder of Core 2/i7.\n-   Below hooks for multipass scheduling (see haifa-sched.c:max_issue)\n+   Below hooks for multipass scheduling (see haifa-sched.cc:max_issue)\n    track the instruction fetch block boundaries and make sure that long\n    (9+ bytes) instructions are assigned to D0.  */\n "}, {"sha": "82ca0ae63acd5d3811e01bf259a0af511dfc7fe2", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,8 +22,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     - adding new CPU into:\n \t- adding PROCESSOR_XXX to processor_type (in i386.h)\n \t- possibly adding XXX into CPU attribute in i386.md\n-\t- adding XXX to processor_alias_table (in i386.c)\n-    - introducing ix86_XXX_cost in i386.c\n+\t- adding XXX to processor_alias_table (in i386.cc)\n+    - introducing ix86_XXX_cost in i386.cc\n \t- Stringop generation table can be build based on test_stringop\n \t- script (once rest of tuning is complete)\n     - designing a scheduler model in"}, {"sha": "1aff35ff87c27c3dc4051246b07ca3904972e4fa", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #define STANDARD_STARTFILE_PREFIX_1 \"/dev/env/DJDIR/lib/\"\n \n /* Define STANDARD_STARTFILE_PREFIX_2 equal to STANDARD_STARTFILE_PREFIX_1\n-   to avoid gcc.c redefining it to /usr/lib */\n+   to avoid gcc.cc redefining it to /usr/lib */\n #undef STANDARD_STARTFILE_PREFIX_2\n #define STANDARD_STARTFILE_PREFIX_1 \"/dev/env/DJDIR/lib/\"\n \n@@ -92,7 +92,7 @@ along with GCC; see the file COPYING3.  If not see\n       } \\\n   } while (0)\n \n-/* Canonicalize paths containing '/dev/env/'; used in prefix.c.\n+/* Canonicalize paths containing '/dev/env/'; used in prefix.cc.\n    _fixpath is a djgpp-specific function to canonicalize a path.\n    \"/dev/env/DJDIR\" evaluates to \"c:/djgpp\" if DJDIR is \"c:/djgpp\" for\n    example.  It removes any trailing '/', so add it back.  */"}, {"sha": "e3ab57e28ceb4f83b24b004b37e1fb69f6e76d9a", "filename": "gcc/config/ia64/freebsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffreebsd.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -37,8 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n /************************[  Target stuff  ]***********************************/\n \n /* Define the actual types of some ANSI-mandated types.  \n-   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n-   c-common.c, and config/<arch>/<arch>.h.  */\n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.cc,\n+   c-common.cc, and config/<arch>/<arch>.h.  */\n \n /* Earlier headers may get this wrong for FreeBSD.\n    We use the GCC defaults instead.  */"}, {"sha": "fa705d759241befa4910096f26fd018c4d6c3568", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -131,7 +131,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define REGISTER_TARGET_PRAGMAS() \\\n   c_register_pragma (0, \"builtin\", ia64_hpux_handle_builtin_pragma)\n \n-/* Tell ia64.c that we are using the HP linker and we should delay output of\n+/* Tell ia64.cc that we are using the HP linker and we should delay output of\n    function extern declarations so that we don't output them for functions\n    which are never used (and may not be defined).  */\n "}, {"sha": "77e0cf7c72ba862809fa68fb5ae19361e22c901b", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Shared between the driver and cc1.  */\n extern enum unwind_info_type ia64_except_unwind_info (struct gcc_options *);\n \n-/* Functions defined in ia64.c */\n+/* Functions defined in ia64.cc */\n \n extern int bundling_p;\n #ifdef RTX_CODE"}, {"sha": "f9fb681a36c0e5f9db074e18ad7e3669263944e4", "filename": "gcc/config/ia64/ia64.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -5319,7 +5319,7 @@ ia64_function_value_regno_p (const unsigned int regno)\n           || (regno >= FR_RET_FIRST && regno <= FR_RET_LAST));\n }\n \n-/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.cc via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n static void\n@@ -5936,7 +5936,7 @@ ia64_secondary_reload_class (enum reg_class rclass,\n \t enabled, because paradoxical subregs are not accepted by\n \t register_operand when INSN_SCHEDULING is defined.  Or alternatively,\n \t stop the paradoxical subreg stupidity in the *_operand functions\n-\t in recog.c.  */\n+\t in recog.cc.  */\n       if (GET_CODE (x) == MEM\n \t  && (GET_MODE (x) == SImode || GET_MODE (x) == HImode\n \t      || GET_MODE (x) == QImode))\n@@ -9226,7 +9226,7 @@ bundling (FILE *dump, int verbose, rtx_insn *prev_head_insn, rtx_insn *tail)\n \tif (verbose >= 2 && dump)\n \t  {\n \t    /* This structure is taken from generated code of the\n-\t       pipeline hazard recognizer (see file insn-attrtab.c).\n+\t       pipeline hazard recognizer (see file insn-attrtab.cc).\n \t       Please don't forget to change the structure if a new\n \t       automaton is added to .md file.  */\n \t    struct DFA_chip"}, {"sha": "bd0ef35e9a4241bd3376cba7ba792aae57fd6269", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1335,7 +1335,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n }\n \n /* If defined, C string expressions to be used for the `%R', `%L', `%U', and\n-   `%I' options of `asm_fprintf' (see `final.c').  */\n+   `%I' options of `asm_fprintf' (see `final.cc').  */\n \n #define REGISTER_PREFIX \"\"\n #define LOCAL_LABEL_PREFIX \".\""}, {"sha": "5d1d47da55b2f0a2ae001c3277467ae19513fbe1", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -549,7 +549,7 @@\n \n ;; Define register predicate prefix.\n ;; We can generate speculative loads only for general and fp registers - this\n-;; is constrained in ia64.c: ia64_speculate_insn ().\n+;; is constrained in ia64.cc: ia64_speculate_insn ().\n (define_mode_attr reg_pred_prefix [(BI \"gr\") (QI \"gr\") (HI \"gr\") (SI \"gr\") (DI \"grfr\") (SF \"grfr\") (DF \"grfr\") (XF \"fr\") (TI \"fr\")])\n \n (define_mode_attr ld_class [(BI \"ld\") (QI \"ld\") (HI \"ld\") (SI \"ld\") (DI \"ld,fld\") (SF \"fld,ld\") (DF \"fld,ld\") (XF \"fld\") (TI \"fldp\")])\n@@ -1420,7 +1420,7 @@\n       if (width == 32 && shift == 0)\n \t{\n \t  /* Directly generating the mix4left instruction confuses\n-\t     optimize_bit_field in function.c.  Since this is performing\n+\t     optimize_bit_field in function.cc.  Since this is performing\n \t     a useful optimization, we defer generation of the complicated\n \t     mix4left RTL to the first splitting phase.  */\n \t  rtx tmp = gen_reg_rtx (DImode);"}, {"sha": "6364d2e3645fc305a86103be8c35b6226fa2be8e", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -653,7 +653,7 @@\n \n ;; True if OP is valid as a base register in a reg + offset address.\n ;; ??? Should I copy the flag_omit_frame_pointer and cse_not_expected\n-;; checks from pa.c basereg_operand as well?  Seems to be OK without them\n+;; checks from pa.cc basereg_operand as well?  Seems to be OK without them\n ;; in test runs.\n (define_predicate \"basereg_operand\"\n   (match_operand 0 \"register_operand\")"}, {"sha": "045752af012cf87403e60446040caaf89e86a342", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -59,10 +59,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    the Intel simulator.  So we must explicitly put variables in .bss\n    instead.  This matters only if we care about the Intel assembler.  */\n \n-/* This is asm_output_aligned_bss from varasm.c without the\n+/* This is asm_output_aligned_bss from varasm.cc without the\n    (*targetm.asm_out.globalize_label) call at the beginning.  */\n \n-/* This is for final.c, because it is used by ASM_DECLARE_OBJECT_NAME.  */\n+/* This is for final.cc, because it is used by ASM_DECLARE_OBJECT_NAME.  */\n extern int size_directive_output;\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL"}, {"sha": "3fedb7b21c1405613810ca13c1cf94c23e426691", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -16,13 +16,13 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+ia64-c.o: $(srcdir)/config/ia64/ia64-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) $(CPPLIB_H) $(C_COMMON_H) $(C_PRAGMA_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/ia64/ia64-c.c\n+\t\t$(srcdir)/config/ia64/ia64-c.cc\n \n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n \n-ia64.o: $(srcdir)/config/ia64/ia64.c debug.h $(PARAMS_H) sel-sched.h reload.h \\\n+ia64.o: $(srcdir)/config/ia64/ia64.cc debug.h $(PARAMS_H) sel-sched.h reload.h \\\n \t$(OPTS_H) dumpfile.h $(HASH_TABLE_H)"}, {"sha": "3327f14b83131a00b71160204317f750a3a4bfdd", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -525,7 +525,7 @@ while (0)\n \n #define FUNCTION_MODE SImode\n \n-/* IQ2000 external variables defined in iq2000.c.  */\n+/* IQ2000 external variables defined in iq2000.cc.  */\n \n /* Comparison type.  */\n enum cmp_type"}, {"sha": "fdb346f43ef50891bd91e85c93b41dd1a1b59f74", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1495,7 +1495,7 @@\n ;;\n ;;  ....................\n \n-;; calls.c now passes a third argument, make saber happy\n+;; calls.cc now passes a third argument, make saber happy\n \n (define_expand \"call\"\n   [(parallel [(call (match_operand 0 \"memory_operand\" \"m\")\n@@ -1565,7 +1565,7 @@\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")])\n \n-;; calls.c now passes a fourth argument, make saber happy\n+;; calls.cc now passes a fourth argument, make saber happy\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"register_operand\" \"=d\")"}, {"sha": "2e888e3b1765cc1e582ee5d3df2f42f782a9f3ad", "filename": "gcc/config/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -126,7 +126,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_HAS_BIONIC (OPTION_BIONIC)\n \n /* musl avoids problematic includes by rearranging the include directories.\n- * Unfortunately, this is mostly duplicated from cppdefault.c */\n+ * Unfortunately, this is mostly duplicated from cppdefault.cc */\n #if DEFAULT_LIBC == LIBC_MUSL\n #define INCLUDE_DEFAULTS_MUSL_GPP\t\t\t\\\n     { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1,\t\t\\\n@@ -200,7 +200,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if (DEFAULT_LIBC == LIBC_UCLIBC) && defined (SINGLE_LIBC) /* uClinux */\n /* This is a *uclinux* target.  We don't define below macros to normal linux\n    versions, because doing so would require *uclinux* targets to include\n-   linux.c, linux-protos.h, linux.opt, etc.  We could, alternatively, add\n+   linux.cc, linux-protos.h, linux.opt, etc.  We could, alternatively, add\n    these files to *uclinux* targets, but that would only pollute option list\n    (add -mglibc, etc.) without adding any useful support.  */\n "}, {"sha": "11ca9a43a0b8164c154ca98fd916921ce7f8a855", "filename": "gcc/config/m32c/m32c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4044,7 +4044,7 @@ m32c_function_needs_enter (void)\n /* Mark all the subexpressions of the PARALLEL rtx PAR as\n    frame-related.  Return PAR.\n \n-   dwarf2out.c:dwarf2out_frame_debug_expr ignores sub-expressions of a\n+   dwarf2out.cc:dwarf2out_frame_debug_expr ignores sub-expressions of a\n    PARALLEL rtx other than the first if they do not have the\n    FRAME_RELATED flag set on them.  So this function is handy for\n    marking up 'enter' instructions.  */"}, {"sha": "af99103fd64f9fc5e5c2469b105079308366f7d2", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -522,7 +522,7 @@ typedef struct m32c_cumulative_args\n #define MAX_REGS_PER_ADDRESS 1\n \n /* This is passed to the macros below, so that they can be implemented\n-   in m32c.c.  */\n+   in m32c.cc.  */\n #ifdef REG_OK_STRICT\n #define REG_OK_STRICT_V 1\n #else"}, {"sha": "870260888f0cdf1f2129383e5a70616dae31f0e5", "filename": "gcc/config/m32c/t-m32c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Ft-m32c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32c%2Ft-m32c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Ft-m32c?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -31,7 +31,7 @@ md : $(MD_FILES:%=$(srcdir)/config/m32c/%.md) $(srcdir)/config/m32c/t-m32c\n \t  echo \"(include \\\"$(srcdir)/config/m32c/$$md.md\\\")\"; \\\n \tdone > md\n \n-m32c-pragma.o: $(srcdir)/config/m32c/m32c-pragma.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n+m32c-pragma.o: $(srcdir)/config/m32c/m32c-pragma.cc $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n # We support four CPU series, but R8C and M16C share one multilib, and"}, {"sha": "dd07a99a71c2a7bd759b5fda9b9968413744f69b", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for m32r.c functions used in the md file & elsewhere.\n+/* Prototypes for m32r.cc functions used in the md file & elsewhere.\n    Copyright (C) 1999-2022 Free Software Foundation, Inc.\n \n    This file is part of GCC."}, {"sha": "bca768172b777efcc290f38fddc5041607b7e0e7", "filename": "gcc/config/m32r/m32r.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2098,7 +2098,7 @@ m32r_print_operand (FILE * file, rtx x, int code)\n \t  fprintf (file, \"@(\");\n \t  /* Handle possible auto-increment.  Since it is pre-increment and\n \t     we have already done it, we can just use an offset of four.  */\n-\t  /* ??? This is taken from rs6000.c I think.  I don't think it is\n+\t  /* ??? This is taken from rs6000.cc I think.  I don't think it is\n \t     currently necessary, but keep it around.  */\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)"}, {"sha": "b96eec8fe3fda3594415253d40333ac4599bb6fa", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -464,7 +464,7 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n   ((REGNO) < FIRST_PSEUDO_REGISTER\t\t\t\\\n@@ -801,7 +801,7 @@ L2:     .word STATIC\n }\n \n /* If defined, C string expressions to be used for the `%R', `%L',\n-   `%U', and `%I' options of `asm_fprintf' (see `final.c').  These\n+   `%U', and `%I' options of `asm_fprintf' (see `final.cc').  These\n    are useful when a single `md' file must support multiple assembler\n    formats.  In that case, the various `tm.h' files can define these\n    macros differently.  */"}, {"sha": "1eb6859d19e94145e686d0db910626fc100e387c", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2195,7 +2195,7 @@\n )\n \n \f\n-;; Block moves, see m32r.c for more details.\n+;; Block moves, see m32r.cc for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n ;; Argument 2 is the length"}, {"sha": "ea9579288c5a63038469419808c764e6700bef92", "filename": "gcc/config/m68k/m68k-isas.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-isas.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,7 +17,7 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Define ISAs for the -march option, used both in m68k.c and to\n+/* Define ISAs for the -march option, used both in m68k.cc and to\n    generate m68k-tables.opt.  Before including this file, define a\n    macro:\n "}, {"sha": "e488a936cc91c0cb29fac4e1996bb5c33b8deaa2", "filename": "gcc/config/m68k/m68k-microarchs.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-microarchs.def?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -18,7 +18,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* Define microarchitectures for the -mtune option, used both in\n-   m68k.c and to generate m68k-tables.opt.  Before including this\n+   m68k.cc and to generate m68k-tables.opt.  Before including this\n    file, define a macro:\n \n    M68K_MICROARCH (NAME, DEVICE, MICROARCH, ISA, FLAGS)"}, {"sha": "3139eb8e6e821ee568f1d7c6bce8d8564fee0204", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -63,7 +63,7 @@ extern int floating_exact_log2 (rtx);\n extern bool strict_low_part_peephole_ok (machine_mode mode,\n \t\t\t\t\t rtx_insn *first_insn, rtx target);\n \n-/* Functions from m68k.c used in macros.  */\n+/* Functions from m68k.cc used in macros.  */\n extern int standard_68881_constant_p (rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n@@ -85,10 +85,10 @@ extern bool m68k_movem_pattern_p (rtx, rtx, HOST_WIDE_INT, bool);\n extern const char *m68k_output_movem (rtx *, rtx, HOST_WIDE_INT, bool);\n extern bool m68k_epilogue_uses (int);\n \n-/* Functions from m68k.c used in constraints.md.  */\n+/* Functions from m68k.cc used in constraints.md.  */\n extern rtx m68k_unwrap_symbol (rtx, bool);\n \n-/* Functions from m68k.c used in genattrtab.  */\n+/* Functions from m68k.cc used in genattrtab.  */\n #ifdef HAVE_ATTR_cpu\n extern enum attr_cpu m68k_sched_cpu;\n extern enum attr_mac m68k_sched_mac;"}, {"sha": "1d5ef02f8deb87efe13234ffea319a29ff7109e9", "filename": "gcc/config/m68k/m68k.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Subroutines for insn-output.c for Motorola 68000 family.\n+/* Subroutines for insn-output.cc for Motorola 68000 family.\n    Copyright (C) 1987-2022 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2706,7 +2706,7 @@ m68k_call_tls_get_addr (rtx x, rtx eqv, enum m68k_reloc reloc)\n      optimizations, sometimes cannot later fix this.  As a consequence,\n      additional register may be allocated resulting in a spill.\n      For reference, see args processing loops in\n-     calls.c:emit_library_call_value_1.\n+     calls.cc:emit_library_call_value_1.\n      For testcase, see gcc.target/m68k/tls-{gd, ld}.c  */\n   x = m68k_wrap_symbol (x, reloc, m68k_get_gp (), NULL_RTX);\n \n@@ -6494,7 +6494,7 @@ m68k_sched_adjust_cost (rtx_insn *insn, int, rtx_insn *def_insn, int cost,\n   if (sched_cfv4_bypass_data.scale == 1)\n     /* Handle ColdFire V4 bypass for indexed address with 1x scale.  */\n     {\n-      /* haifa-sched.c: insn_cost () calls bypass_p () just before\n+      /* haifa-sched.cc: insn_cost () calls bypass_p () just before\n \t targetm.sched.adjust_cost ().  Hence, we can be relatively sure\n \t that the data in sched_cfv4_bypass_data is up to date.  */\n       gcc_assert (sched_cfv4_bypass_data.pro == def_insn\n@@ -6517,7 +6517,7 @@ m68k_sched_adjust_cost (rtx_insn *insn, int, rtx_insn *def_insn, int cost,\n      as their true dependence (default) latency is better to be set to 0\n      to workaround alias analysis limitations.\n      This is, in fact, a machine independent tweak, so, probably,\n-     it should be moved to haifa-sched.c: insn_cost ().  */\n+     it should be moved to haifa-sched.cc: insn_cost ().  */\n   delay = min_insn_conflict_delay (sched_adjust_cost_state, def_insn, insn);\n   if (delay > cost)\n     cost = delay;\n@@ -6798,7 +6798,7 @@ m68k_sched_md_init (FILE *sched_dump ATTRIBUTE_UNUSED,\n     }\n \n   if (sched_ib.enabled_p)\n-    /* haifa-sched.c: schedule_block () calls advance_cycle () just before\n+    /* haifa-sched.cc: schedule_block () calls advance_cycle () just before\n        the first cycle.  Workaround that.  */\n     sched_ib.filled = -2;\n }"}, {"sha": "cd353db41a62876799b8c95ab57a4e0a5ba38582", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -865,7 +865,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    || (CODE) == '$' || (CODE) == '&' || (CODE) == '/' || (CODE) == '?')\n \n \n-/* See m68k.c for the m68k specific codes.  */\n+/* See m68k.cc for the m68k specific codes.  */\n #define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n@@ -888,7 +888,7 @@ enum m68k_function_kind\n   m68k_fk_interrupt_thread\n };\n \n-/* Variables in m68k.c; see there for details.  */\n+/* Variables in m68k.cc; see there for details.  */\n extern enum target_device m68k_cpu;\n extern enum uarch_type m68k_tune;\n extern enum fpu_type m68k_fpu;"}, {"sha": "e4208cf323f847dc2e611180e5cf3fb8f5b7cda9", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -193,7 +193,7 @@\n (define_attr \"opy\" \"\" (const_int 1))\n \n ;; Type of the Y operand.\n-;; See m68k.c: enum attr_op_type.\n+;; See m68k.cc: enum attr_op_type.\n (define_attr \"opy_type\"\n   \"none,Rn,FPn,mem1,mem234,mem5,mem6,mem7,imm_q,imm_w,imm_l\"\n   (cond [(eq_attr \"type\" \"ext,fbcc,ftst,neg_l,bcc,bra,bsr,clr,clr_l,ib,ignore,\n@@ -204,7 +204,7 @@\n \t(symbol_ref \"m68k_sched_attr_opy_type (insn, 0)\")))\n \n ;; Type of the X operand.\n-;; See m68k.c: enum attr_op_type.\n+;; See m68k.cc: enum attr_op_type.\n (define_attr \"opx_type\"\n   \"none,Rn,FPn,mem1,mem234,mem5,mem6,mem7,imm_q,imm_w,imm_l\"\n   (cond [(eq_attr \"type\" \"ib,ignore,nop,rts,trap,unlk,"}, {"sha": "ee55faf6912464575c8bd8295a82e93e7a9b9b24", "filename": "gcc/config/m68k/m68kemb.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kemb.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -39,7 +39,7 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override the default LIB_SPEC from gcc.c.  We don't currently support\n+/* Override the default LIB_SPEC from gcc.cc.  We don't currently support\n    profiling, or libg.a.  */\n \n #undef  LIB_SPEC"}, {"sha": "e438b6e5375d99677b43731a3fde863b1eedf1cd", "filename": "gcc/config/m68k/uclinux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fuclinux.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n \n-/* Override the default LIB_SPEC from gcc.c.  We don't currently support\n+/* Override the default LIB_SPEC from gcc.cc.  We don't currently support\n    profiling, or libg.a.  */\n #undef LIB_SPEC\n #define LIB_SPEC \\"}, {"sha": "52e0b7dabe9b7f9f41d6dc3abbd697eeb3603396", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in mcore.c\n+/* Prototypes for exported functions defined in mcore.cc\n    Copyright (C) 2000-2022 Free Software Foundation, Inc.\n    Contributed by Nick Clifton (nickc@redhat.com)\n "}, {"sha": "28e707496d10dd63f2cd04d248f3a0aace197705", "filename": "gcc/config/mcore/mcore.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1463,7 +1463,7 @@ mcore_expand_insv (rtx operands[])\n   int mask;\n   rtx mreg, sreg, ereg;\n \n-  /* To get width 1 insv, the test in store_bit_field() (expmed.c, line 191)\n+  /* To get width 1 insv, the test in store_bit_field() (expmed.cc, line 191)\n      for width==1 must be removed.  Look around line 368.  This is something\n      we really want the md part to do.  */\n   if (width == 1 && GET_CODE (operands[3]) == CONST_INT)\n@@ -2021,7 +2021,7 @@ mcore_expand_prolog (void)\n   output_stack_adjust (-1, fi.growth[growth++]);\t/* Grows it.  */\n \n   /* If we have a parameter passed partially in regs and partially in memory,\n-     the registers will have been stored to memory already in function.c.  So\n+     the registers will have been stored to memory already in function.cc.  So\n      we only need to do something here for varargs functions.  */\n   if (fi.arg_size != 0 && crtl->args.pretend_args_size == 0)\n     {"}, {"sha": "c905c4024f359ee4be62aff27330ce363da67448", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -29,7 +29,7 @@\n /* Run-time Target Specification.  */\n #define TARGET_MCORE\n \n-/* Get tree.c to declare a target-specific specialization of\n+/* Get tree.cc to declare a target-specific specialization of\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n@@ -482,7 +482,7 @@ extern const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n #define REGNO_OK_FOR_BASE_P(REGNO)  \\\n   ((REGNO) < AP_REG || (unsigned) reg_renumber[(REGNO)] < AP_REG)"}, {"sha": "ede545c66c8b42787c74691f4c98467b473ab35e", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2642,7 +2642,7 @@\n \n ; note: in the following patterns, use mcore_is_dead() to ensure that the\n ; reg we may be trashing really is dead.  reload doesn't always mark\n-; deaths, so mcore_is_dead() (see mcore.c) scans forward to find its death.  BRC\n+; deaths, so mcore_is_dead() (see mcore.cc) scans forward to find its death.  BRC\n \n ;;; A peephole to convert the 3 instruction sequence generated by reload\n ;;; to load a FP-offset address into a 2 instruction sequence."}, {"sha": "d67355697b52c52bd185362b4cf722e227c1cef1", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -61,7 +61,7 @@ extern bool microblaze_cannot_force_const_mem (machine_mode, rtx);\n extern void microblaze_eh_return (rtx op0);\n #endif  /* RTX_CODE */\n \n-/* Declare functions in microblaze-c.c.  */\n+/* Declare functions in microblaze-c.cc.  */\n extern void microblaze_cpp_define (struct cpp_reader *); \n \n #endif  /* GCC_MICROBLAZE_PROTOS_H */"}, {"sha": "f32effecfb6ff4ead52a17aeeabc6e04280f03b9", "filename": "gcc/config/microblaze/microblaze.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -964,7 +964,7 @@ microblaze_legitimate_pic_operand (rtx x)\n \n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address.\n-   This is used from only one place: `memory_address' in explow.c.\n+   This is used from only one place: `memory_address' in explow.cc.\n \n    OLDX is the address as it was before break_out_memory_refs was\n    called.  In some cases it is useful to look at this to decide what\n@@ -2767,7 +2767,7 @@ microblaze_function_prologue (FILE * file)\n   const char *fnname;\n   long fsiz = current_frame_info.total_size;\n \n-  /* Get the function name the same way that toplev.c does before calling\n+  /* Get the function name the same way that toplev.cc does before calling\n      assemble_start_function.  This is needed so that the name used here\n      exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n@@ -3069,7 +3069,7 @@ microblaze_function_epilogue (FILE *file)\n {\n   const char *fnname;\n \n-  /* Get the function name the same way that toplev.c does before calling\n+  /* Get the function name the same way that toplev.cc does before calling\n      assemble_start_function.  This is needed so that the name used here\n      exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n@@ -3271,7 +3271,7 @@ microblaze_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n /*\n   Encode info about sections into the RTL based on a symbol's declaration.\n   The default definition of this hook, default_encode_section_info in \n-  `varasm.c', sets a number of commonly-useful bits in SYMBOL_REF_FLAGS. */\n+  `varasm.cc', sets a number of commonly-useful bits in SYMBOL_REF_FLAGS. */\n \n static void\n microblaze_encode_section_info (tree decl, rtx rtl, int first)\n@@ -3357,7 +3357,7 @@ microblaze_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   emit_insn (gen_indirect_jump (temp2));\n \n   /* Run just enough of rest_of_compilation.  This sequence was\n-     \"borrowed\" from rs6000.c.  */\n+     \"borrowed\" from rs6000.cc.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);\n@@ -3511,7 +3511,7 @@ microblaze_eh_return (rtx op0)\n \n /* Queue an .ident string in the queue of top-level asm statements.\n    If the string size is below the threshold, put it into .sdata2.\n-   If the front-end is done, we must be being called from toplev.c.\n+   If the front-end is done, we must be being called from toplev.cc.\n    In that case, do nothing.  */\n void \n microblaze_asm_output_ident (const char *string)"}, {"sha": "d28bc766de80a590c417c6cb0cea0997ebcfbdff", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -21,7 +21,7 @@\n \n /* Standard GCC variables that we reference.  */\n \n-/* MicroBlaze external variables defined in microblaze.c.  */\n+/* MicroBlaze external variables defined in microblaze.cc.  */\n \n /* Which pipeline to schedule for.  */\n enum pipeline_type"}, {"sha": "0765ff930c674f719b07fae4d94b5ba1258ee0ed", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1138,7 +1138,7 @@\n   (set_attr \"mode\"\t\"QI\")\n   (set_attr \"length\"\t\"4,4,8,4,8,4,8\")])\n \n-;; Block moves, see microblaze.c for more details.\n+;; Block moves, see microblaze.cc for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n ;; Argument 2 is the length\n@@ -2147,7 +2147,7 @@\n   (set_attr \"mode\"\t\"none\")\n   (set_attr \"length\"\t\"4\")])\n \n-;; calls.c now passes a fourth argument, make saber happy\n+;; calls.cc now passes a fourth argument, make saber happy\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"register_operand\" \"=d\")"}, {"sha": "7e2fc5dcef81b555e2e71035adad16b481ef7b5e", "filename": "gcc/config/microblaze/t-microblaze", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -5,8 +5,8 @@ MULTILIB_EXCEPTIONS += *mxl-barrel-shift/mxl-multiply-high/mlittle-endian\n MULTILIB_EXCEPTIONS += mxl-multiply-high/mlittle-endian\n \n # Extra files\n-microblaze-c.o: $(srcdir)/config/microblaze/microblaze-c.c \\\n+microblaze-c.o: $(srcdir)/config/microblaze/microblaze-c.cc \\\n     $(srcdir)/config/microblaze/microblaze-protos.h \\\n     $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) $(TM_P_H) $(TREE_H) errors.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/microblaze/microblaze-c.c\n+\t$(srcdir)/config/microblaze/microblaze-c.cc"}, {"sha": "47627f85ce1efcb71211e8934d49f2066414f372", "filename": "gcc/config/mips/driver-native.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fdriver-native.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fdriver-native.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fdriver-native.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\" or \"tune\" as argument depending on if -march=native\n    or -mtune=native is to be substituted."}, {"sha": "793f208c084cc465fad7593b5b181dae2034c1a0", "filename": "gcc/config/mips/loongson2ef.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson2ef.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -96,7 +96,7 @@\n \n ;; The following 4 instructions each subscribe one of\n ;; ls2_[f]alu{1,2}_turn_enabled units according to this attribute.\n-;; These instructions are used in mips.c: sched_ls2_dfa_post_advance_cycle.\n+;; These instructions are used in mips.cc: sched_ls2_dfa_post_advance_cycle.\n \n (define_attr \"ls2_turn_type\" \"alu1,alu2,falu1,falu2,unknown,atomic,syncloop\"\n   (const_string \"unknown\"))"}, {"sha": "9d0f4d90fd9756b631453ef76733c4eedc5de860", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -388,7 +388,7 @@ extern void mips_register_frame_header_opt (void);\n extern void mips_expand_vec_cond_expr (machine_mode, machine_mode, rtx *);\n extern void mips_expand_vec_cmp_expr (rtx *);\n \n-/* Routines implemented in mips-d.c  */\n+/* Routines implemented in mips-d.cc  */\n extern void mips_d_target_versions (void);\n extern void mips_d_register_target_info (void);\n "}, {"sha": "6c0da2bb90c42052b7cd53c9cf8784f307d8dd1d", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4456,7 +4456,7 @@ mips_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t  /* It is our responsibility to make division by a power of 2\n \t     as cheap as 2 register additions if we want the division\n \t     expanders to be used for such operations; see the setting\n-\t     of sdiv_pow2_cheap in optabs.c.  Using (D)DIV for MIPS16\n+\t     of sdiv_pow2_cheap in optabs.cc.  Using (D)DIV for MIPS16\n \t     should always produce shorter code than using\n \t     expand_sdiv2_pow2.  */\n \t  if (TARGET_MIPS16\n@@ -9466,7 +9466,7 @@ mips_output_filename (FILE *stream, const char *name)\n       output_quoted_string (stream, name);\n       putc ('\\n', stream);\n     }\n-  /* If we are emitting stabs, let dbxout.c handle this (except for\n+  /* If we are emitting stabs, let dbxout.cc handle this (except for\n      the mips_output_filename_first_time case).  */\n   else if (write_symbols == DBX_DEBUG)\n     return;\n@@ -11799,7 +11799,7 @@ mips_output_function_prologue (FILE *file)\n       && crtl->args.info.fp_code != 0)\n     mips16_build_function_stub ();\n \n-  /* Get the function name the same way that toplev.c does before calling\n+  /* Get the function name the same way that toplev.cc does before calling\n      assemble_start_function.  This is needed so that the name used here\n      exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n@@ -11897,7 +11897,7 @@ mips_output_function_epilogue (FILE *)\n       mips_pop_asm_switch (&mips_noreorder);\n     }\n \n-  /* Get the function name the same way that toplev.c does before calling\n+  /* Get the function name the same way that toplev.cc does before calling\n      assemble_start_function.  This is needed so that the name used here\n      exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n@@ -19620,7 +19620,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     }\n \n   /* Run just enough of rest_of_compilation.  This sequence was\n-     \"borrowed\" from alpha.c.  */\n+     \"borrowed\" from alpha.cc.  */\n   insn = get_insns ();\n   split_all_insns_noflow ();\n   mips16_lay_out_constants (true);"}, {"sha": "bf5c1d5a7092e36798d31e133ebc8a66906905ee", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n extern int target_flags_explicit;\n #endif\n \n-/* MIPS external variables defined in mips.c.  */\n+/* MIPS external variables defined in mips.cc.  */\n \n /* Which ABI to use.  ABI_32 (original 32, or o32), ABI_N32 (n32),\n    ABI_64 (n64) are all defined by SGI.  ABI_O64 is o32 extended"}, {"sha": "e0f0a582732cb05fd06149e8a982846bc616fd11", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -5657,7 +5657,7 @@\n   \"cache\\t0x14,0(%$)\"\n   [(set_attr \"can_delay\" \"no\")])\n \f\n-;; Block moves, see mips.c for more details.\n+;; Block moves, see mips.cc for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n ;; Argument 2 is the length"}, {"sha": "d7a934f438ceb62fa2c053bae63590fd488fd3e7", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -21,10 +21,10 @@ $(srcdir)/config/mips/mips-tables.opt: $(srcdir)/config/mips/genopt.sh \\\n \t$(SHELL) $(srcdir)/config/mips/genopt.sh $(srcdir)/config/mips > \\\n \t\t$(srcdir)/config/mips/mips-tables.opt\n \n-frame-header-opt.o: $(srcdir)/config/mips/frame-header-opt.c\n+frame-header-opt.o: $(srcdir)/config/mips/frame-header-opt.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-mips-d.o: $(srcdir)/config/mips/mips-d.c\n+mips-d.o: $(srcdir)/config/mips/mips-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "cf286369716def64612457930b8295c0a4f9dd4c", "filename": "gcc/config/mips/x-native", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fx-native", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmips%2Fx-native", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-native?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,3 +1,3 @@\n-driver-native.o : $(srcdir)/config/mips/driver-native.c \\\n+driver-native.o : $(srcdir)/config/mips/driver-native.cc \\\n   $(CONFIG_H) $(SYSTEM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "d9a40d3b9415e02928bfdc33f807dbd6be29bbec", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in mmix.c\n+/* Prototypes for exported functions defined in mmix.cc\n    Copyright (C) 2000-2022 Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n "}, {"sha": "18053d453bea2fbe89862544eb8e501df66bfb1b", "filename": "gcc/config/mmix/mmix.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -332,7 +332,7 @@ mmix_option_override (void)\n      mixed-syntax assembly output already looks too ugly for the\n      intent of being readable, and the resulting mix certainly fails\n      the intent of being compatible with mmixal.  See\n-     varasm.c:default_file_start for this triple.  See also\n+     varasm.cc:default_file_start for this triple.  See also\n      mmix_assemble_integer.  */\n   if (flag_verbose_asm || flag_debug_asm || flag_dump_rtl_in_asm)\n     {\n@@ -1966,7 +1966,7 @@ mmix_dbx_register_number (unsigned regno)\n    Now the MMIX port's own functions.  First the exported ones.  */\n \n /* Wrapper for get_hard_reg_initial_val since integrate.h isn't included\n-   from insn-emit.c.  */\n+   from insn-emit.cc.  */\n \n rtx\n mmix_get_hard_reg_initial_val (machine_mode mode, int regno)\n@@ -2195,7 +2195,7 @@ mmix_expand_prologue (void)\n \t the register stack at landing pads.  FIXME: It's a kludge because\n \t we can't describe the effect of the PUSHJ and PUSHGO insns on the\n \t register stack at the moment.  Best thing would be to handle it\n-\t like stack-pointer offsets.  Better: some hook into dwarf2out.c\n+\t like stack-pointer offsets.  Better: some hook into dwarf2out.cc\n \t to produce DW_CFA_expression:s that specify the increment of rO,\n \t and unwind it at eh_return (preferred) or at the landing pad.\n \t Then saves to $0..$G-1 could be specified through that register.  */"}, {"sha": "0fc45db6d74d0133c8b255993dad6b3b695e63a7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -529,7 +529,7 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n /* Node: Function Entry */\n \n-/* See mmix.c for TARGET_ASM_FUNCTION_PROLOGUE and\n+/* See mmix.cc for TARGET_ASM_FUNCTION_PROLOGUE and\n    TARGET_ASM_FUNCTION_EPILOGUE.  */\n \n /* We need to say that the epilogue uses the return address, so the"}, {"sha": "8bafb1a10c6b9f5d0c3f924635581e0c8cd81b1e", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -904,7 +904,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n   \"\"\n   \"\n {\n-  /* The head comment of optabs.c:can_compare_p says we're required to\n+  /* The head comment of optabs.cc:can_compare_p says we're required to\n      implement this, so we have to clean up the mess here.  */\n   if (GET_CODE (operands[0]) == LE || GET_CODE (operands[0]) == GE)\n     {\n@@ -1036,7 +1036,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; Don't use 'p' here.  A 'p' must stand first in constraints, or reload\n ;; messes up, not registering the address for reload.  Several C++\n ;; testcases, including g++.brendan/crash40.C.  FIXME: This is arguably a\n-;; bug in gcc.  Note line ~2612 in reload.c, that does things on the\n+;; bug in gcc.  Note line ~2612 in reload.cc, that does things on the\n ;; condition <<else if (constraints[i][0] == 'p')>> and the comment on\n ;; ~3017 that says:\n ;; <<   case 'p':"}, {"sha": "96b214c86e092acd695ee716a5c3ba1069754cfc", "filename": "gcc/config/mmix/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmmix%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fpredicates.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -49,7 +49,7 @@\n })\n \n ;; Like comparison_operator, but only true if this comparison operator is\n-;; applied to a valid mode.  Needed to avoid jump.c generating invalid\n+;; applied to a valid mode.  Needed to avoid jump.cc generating invalid\n ;; code with -ffast-math (gcc.dg/20001228-1.c).\n \n (define_predicate \"mmix_comparison_operator\""}, {"sha": "2a58dd9256d2c11c9e4088305ab36d365af60836", "filename": "gcc/config/mn10300/mn10300.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmn10300%2Fmn10300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmn10300%2Fmn10300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Subroutines for insn-output.c for Matsushita MN10300 series\n+/* Subroutines for insn-output.cc for Matsushita MN10300 series\n    Copyright (C) 1996-2022 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -1787,7 +1787,7 @@ mn10300_symbolic_operand (rtx op,\n \n /* Try machine dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n+   This macro is used in only one place: `memory_address' in explow.cc.\n \n    OLDX is the address as it was before break_out_memory_refs was called.\n    In some cases it is useful to look at this to decide what needs to be done.\n@@ -1928,7 +1928,7 @@ mn10300_legitimate_pic_operand_p (rtx x)\n \n    Note it is still possible to use reg+reg addressing modes,\n    it's just much more difficult.  For a discussion of a possible\n-   workaround and solution, see the comments in pa.c before the\n+   workaround and solution, see the comments in pa.cc before the\n    function record_unscaled_index_insn_codes.  */\n \n static bool"}, {"sha": "bc57f4b176ccbd39870c7837de387f3d8e3d0a9c", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -318,7 +318,7 @@ enum reg_class\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #ifndef REG_OK_STRICT\n@@ -546,7 +546,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define NO_FUNCTION_CSE 1\n \n-/* According expr.c, a value of around 6 should minimize code size, and\n+/* According expr.cc, a value of around 6 should minimize code size, and\n    for the MN10300 series, that's our primary concern.  */\n #define MOVE_RATIO(speed) 6\n \n@@ -624,7 +624,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n }\n \n /* Print an instruction operand X on file FILE.\n-   look in mn10300.c for details */\n+   look in mn10300.cc for details */\n \n #define PRINT_OPERAND(FILE, X, CODE) \\\n   mn10300_print_operand (FILE, X, CODE)"}, {"sha": "0a6c6cfd0958a170dda05329663a648b8d7a2d5f", "filename": "gcc/config/moxie/moxie-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for moxie.c functions used in the md file & elsewhere.\n+/* Prototypes for moxie.cc functions used in the md file & elsewhere.\n    Copyright (C) 2009-2022 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "b84d53294ec78c06532b324867ddf17c974b06f1", "filename": "gcc/config/moxie/uclinux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fuclinux.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n \n-/* Like the definition in gcc.c, but for purposes of uClinux, every link is\n+/* Like the definition in gcc.cc, but for purposes of uClinux, every link is\n    static.  */\n #define MFWRAP_SPEC \" %{fmudflap|fmudflapth: \\\n  --wrap=malloc --wrap=free --wrap=calloc --wrap=realloc\\"}, {"sha": "95288e525c2dba6da102046dbd3c3861626320b0", "filename": "gcc/config/msp430/msp430-devices.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -98,7 +98,7 @@ extract_devices_dir_from_exec_prefix (char **devices_loc)\n   char *gcc_exec_prefix = *devices_loc;\n   int len = strlen (gcc_exec_prefix);\n \n-  /* Copied from gcc.c.  */\n+  /* Copied from gcc.cc.  */\n   if (len > (int) sizeof (\"/lib/gcc/\") - 1\n       && (IS_DIR_SEPARATOR (gcc_exec_prefix[len-1])))\n     {"}, {"sha": "18673ff6fd3eff56d8d73f078f4866e4ee8eb998", "filename": "gcc/config/msp430/msp430.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -848,7 +848,7 @@ msp430_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (boundary > align\n       && !integer_zerop (TYPE_SIZE (type)))\n     {\n-      /* FIXME: This is where this function diverts from targhooks.c:\n+      /* FIXME: This is where this function diverts from targhooks.cc:\n \t std_gimplify_va_arg_expr().  It works, but I do not know why...  */\n       if (! POINTER_TYPE_P (type))\n \t{\n@@ -4426,7 +4426,7 @@ msp430_incoming_return_addr_rtx (void)\n \n /* If the path to the MSP430-GCC support files has been found by examining\n    an environment variable (see msp430_check_env_var_for_devices in\n-   msp430-devices.c), or -mdevices-csv-loc=, register this path as an include\n+   msp430-devices.cc), or -mdevices-csv-loc=, register this path as an include\n    directory so the user can #include msp430.h without needing to specify the\n    path to the support files with -I.  */\n void"}, {"sha": "39667655c434a37cdbf56b4563cbc97342867528", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -103,7 +103,7 @@ extern const char * msp430_check_path_for_devices (int, const char **);\n extern const char *msp430_propagate_region_opt (int, const char **);\n extern const char *msp430_get_linker_devices_include_path (int, const char **);\n \n-/* There must be a trailing comma after the last item, see gcc.c\n+/* There must be a trailing comma after the last item, see gcc.cc\n    \"static_spec_functions\".  */\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\\\n   { \"msp430_hwmult_lib\", msp430_select_hwmult_lib },\t\\\n@@ -128,7 +128,7 @@ extern const char *msp430_get_linker_devices_include_path (int, const char **);\n    reason that a spec function is used.  There are so many possible\n    values of FOO that a table is used to look up the name and map\n    it to a hardware multiply library.  This table (in device-msp430.c)\n-   must be kept in sync with the same table in msp430.c.  */\n+   must be kept in sync with the same table in msp430.cc.  */\n #undef  LIB_SPEC\n #define LIB_SPEC \"\t\t\t\t\t\\\n --start-group\t\t\t\t\t\t\\"}, {"sha": "bc7df122f7482119f358018e72cf55e7b9b73651", "filename": "gcc/config/msp430/t-msp430", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -18,11 +18,11 @@\n # License along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-driver-msp430.o: $(srcdir)/config/msp430/driver-msp430.c \\\n+driver-msp430.o: $(srcdir)/config/msp430/driver-msp430.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-msp430-devices.o: $(srcdir)/config/msp430/msp430-devices.c \\\n+msp430-devices.o: $(srcdir)/config/msp430/msp430-devices.cc \\\n \t$(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) -DTARGET_SUBDIR=$(target_subdir) $(INCLUDES) $<\n \n@@ -49,5 +49,5 @@ MULTILIB_REQUIRED += mlarge/mdata-region=none/fno-exceptions\n \n MULTILIB_EXTRA_OPTS =\n \n-msp430-c.o: $(srcdir)/config/msp430/msp430-c.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n+msp430-c.o: $(srcdir)/config/msp430/msp430-c.cc $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "af6ae0752405d3b4754d505bad9fce3124c08116", "filename": "gcc/config/nds32/nds32-cost.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32-cost.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32-cost.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-cost.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -66,7 +66,7 @@ nds32_rtx_costs_speed_prefer (rtx x ATTRIBUTE_UNUSED,\n   switch (code)\n     {\n     case USE:\n-      /* Used in combine.c as a marker.  */\n+      /* Used in combine.cc as a marker.  */\n       *total = 0;\n       return true;\n \n@@ -418,7 +418,7 @@ nds32_rtx_costs_size_prefer (rtx x,\n       return false;\n \n     case USE:\n-      /* Used in combine.c as a marker.  */\n+      /* Used in combine.cc as a marker.  */\n       *total = 0;\n       break;\n \n@@ -506,7 +506,7 @@ nds32_init_rtx_costs (void)\n /* This target hook describes the relative costs of RTL expressions.\n    Return 'true' when all subexpressions of x have been processed.\n    Return 'false' to sum the costs of sub-rtx, plus cost of this operation.\n-   Refer to gcc/rtlanal.c for more information.  */\n+   Refer to gcc/rtlanal.cc for more information.  */\n bool\n nds32_rtx_costs_impl (rtx x,\n \t\t      machine_mode mode ATTRIBUTE_UNUSED,"}, {"sha": "19d4be374a2381e244764e5e3fa3fed4230223d6", "filename": "gcc/config/nds32/nds32-doubleword.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32-doubleword.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32-doubleword.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-doubleword.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -150,7 +150,7 @@\n   /* Construct highpart rtx.  */\n   /* Note that operands[1] can be VOIDmode constant,\n      so we need to use gen_highpart_mode().\n-     Refer to gcc/emit-rtl.c for more information.  */\n+     Refer to gcc/emit-rtl.cc for more information.  */\n   operands[4] = gen_highpart (SImode, operands[0]);\n   operands[5] = gen_highpart_mode (SImode,\n \t\t\t\t   GET_MODE (operands[0]), operands[1]);"}, {"sha": "aab02ff2ae9dee25925f2c777e3dc394ec0ec988", "filename": "gcc/config/nds32/nds32.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3052,7 +3052,7 @@ nds32_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n /* This target hook describes the relative costs of RTL expressions.\n    Return 'true' when all subexpressions of x have been processed.\n    Return 'false' to sum the costs of sub-rtx, plus cost of this operation.\n-   Refer to gcc/rtlanal.c for more information.  */\n+   Refer to gcc/rtlanal.cc for more information.  */\n static bool\n nds32_rtx_costs (rtx x,\n \t\t machine_mode mode,\n@@ -4219,7 +4219,7 @@ nds32_init_builtins (void)\n static tree\n nds32_builtin_decl (unsigned code, bool initialize_p)\n {\n-  /* Implement in nds32-intrinsic.c.  */\n+  /* Implement in nds32-intrinsic.cc.  */\n   return nds32_builtin_decl_impl (code, initialize_p);\n }\n "}, {"sha": "18ef8ae9ee86fc8255814dfbdbadaea4c37ad293", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,7 +22,7 @@\n /* ------------------------------------------------------------------------ */\n \n /* The following are auxiliary macros or structure declarations\n-   that are used all over the nds32.c and nds32.h.  */\n+   that are used all over the nds32.cc and nds32.h.  */\n \n #define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n   (LENGTH = nds32_adjust_insn_length (INSN, LENGTH))\n@@ -147,7 +147,7 @@ enum nds32_16bit_address_type\n \n /* Determine whether we would like to have code generation strictly aligned.\n    We set it strictly aligned when -malways-align is enabled.\n-   Check gcc/common/config/nds32/nds32-common.c for the optimizations that\n+   Check gcc/common/config/nds32/nds32-common.cc for the optimizations that\n    apply -malways-align.  */\n #define NDS32_ALIGN_P() (TARGET_ALWAYS_ALIGN)\n \n@@ -342,7 +342,7 @@ typedef struct\n    0 for reset handler,\n    1-8 for exception handler,\n    and 9-72 for interrupt handler.\n-   We use an array, which is defined in nds32.c, to record\n+   We use an array, which is defined in nds32.cc, to record\n    essential information for each vector.  */\n #define NDS32_N_ISR_VECTORS 73\n \n@@ -373,7 +373,7 @@ enum nds32_isr_nested_type\n \n /* Define structure to record isr information.\n    The isr vector array 'isr_vectors[]' with this structure\n-   is defined in nds32.c.  */\n+   is defined in nds32.cc.  */\n struct nds32_isr_info\n {\n   /* The field to identify isr category.\n@@ -1411,7 +1411,7 @@ enum reg_class\n \t  chain_value\n \t  nested function address\n \n-   Please check nds32.c implementation for more information.  */\n+   Please check nds32.cc implementation for more information.  */\n #define TRAMPOLINE_SIZE 24\n \n /* Because all instructions/data in trampoline template are 4-byte size,"}, {"sha": "e09ff027f2fd73ee2adc525d1810007c8a04ce6c", "filename": "gcc/config/nds32/predicates.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpredicates.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -215,7 +215,7 @@\n   (match_code \"parallel\")\n {\n   /* To verify 'load' operation, pass 'true' for the second argument.\n-     See the implementation in nds32.c for details.  */\n+     See the implementation in nds32.cc for details.  */\n   return nds32_valid_multiple_load_store_p (op, true, false);\n })\n \n@@ -224,15 +224,15 @@\n {\n   /* To verify 'load' operation, pass 'true' for the second argument.\n      to verify 'update address' operation, pass 'true' for the third argument\n-     See the implementation in nds32.c for details.  */\n+     See the implementation in nds32.cc for details.  */\n   return nds32_valid_multiple_load_store_p (op, true, true);\n })\n \n (define_special_predicate \"nds32_store_multiple_operation\"\n   (match_code \"parallel\")\n {\n   /* To verify 'store' operation, pass 'false' for the second argument.\n-     See the implementation in nds32.c for details.  */\n+     See the implementation in nds32.cc for details.  */\n   return nds32_valid_multiple_load_store_p (op, false, false);\n })\n \n@@ -241,23 +241,23 @@\n {\n   /* To verify 'store' operation, pass 'false' for the second argument,\n      to verify 'update address' operation, pass 'true' for the third argument\n-     See the implementation in nds32.c for details.  */\n+     See the implementation in nds32.cc for details.  */\n   return nds32_valid_multiple_load_store_p (op, false, true);\n })\n \n (define_special_predicate \"nds32_stack_push_operation\"\n   (match_code \"parallel\")\n {\n   /* To verify 'push' operation, pass 'true' for the second argument.\n-     See the implementation in nds32-predicates.c for details.  */\n+     See the implementation in nds32-predicates.cc for details.  */\n   return nds32_valid_stack_push_pop_p (op, true);\n })\n \n (define_special_predicate \"nds32_stack_pop_operation\"\n   (match_code \"parallel\")\n {\n   /* To verify 'pop' operation, pass 'false' for the second argument.\n-     See the implementation in nds32-predicates.c for details.  */\n+     See the implementation in nds32-predicates.cc for details.  */\n   return nds32_valid_stack_push_pop_p (op, false);\n })\n "}, {"sha": "3833f3daceb2b2d6ca4e74a0cba7adf527123b54", "filename": "gcc/config/nds32/t-nds32", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Ft-nds32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnds32%2Ft-nds32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Ft-nds32?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -19,7 +19,7 @@\n # <http://www.gnu.org/licenses/>.\n \n \n-nds32-md-auxiliary.o: $(srcdir)/config/nds32/nds32-md-auxiliary.c \\\n+nds32-md-auxiliary.o: $(srcdir)/config/nds32/nds32-md-auxiliary.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -29,9 +29,9 @@ nds32-md-auxiliary.o: $(srcdir)/config/nds32/nds32-md-auxiliary.c \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-md-auxiliary.c\n+\t\t$(srcdir)/config/nds32/nds32-md-auxiliary.cc\n \n-nds32-memory-manipulation.o: $(srcdir)/config/nds32/nds32-memory-manipulation.c \\\n+nds32-memory-manipulation.o: $(srcdir)/config/nds32/nds32-memory-manipulation.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -41,9 +41,9 @@ nds32-memory-manipulation.o: $(srcdir)/config/nds32/nds32-memory-manipulation.c\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-memory-manipulation.c\n+\t\t$(srcdir)/config/nds32/nds32-memory-manipulation.cc\n \n-nds32-predicates.o: $(srcdir)/config/nds32/nds32-predicates.c \\\n+nds32-predicates.o: $(srcdir)/config/nds32/nds32-predicates.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -53,9 +53,9 @@ nds32-predicates.o: $(srcdir)/config/nds32/nds32-predicates.c \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-predicates.c\n+\t\t$(srcdir)/config/nds32/nds32-predicates.cc\n \n-nds32-intrinsic.o: $(srcdir)/config/nds32/nds32-intrinsic.c \\\n+nds32-intrinsic.o: $(srcdir)/config/nds32/nds32-intrinsic.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -65,10 +65,10 @@ nds32-intrinsic.o: $(srcdir)/config/nds32/nds32-intrinsic.c \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-intrinsic.c\n+\t\t$(srcdir)/config/nds32/nds32-intrinsic.cc\n \n nds32-pipelines-auxiliary.o: \\\n-  $(srcdir)/config/nds32/nds32-pipelines-auxiliary.c \\\n+  $(srcdir)/config/nds32/nds32-pipelines-auxiliary.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -78,10 +78,10 @@ nds32-pipelines-auxiliary.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-pipelines-auxiliary.c\n+\t\t$(srcdir)/config/nds32/nds32-pipelines-auxiliary.cc\n \n nds32-isr.o: \\\n-  $(srcdir)/config/nds32/nds32-isr.c \\\n+  $(srcdir)/config/nds32/nds32-isr.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -91,10 +91,10 @@ nds32-isr.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-isr.c\n+\t\t$(srcdir)/config/nds32/nds32-isr.cc\n \n nds32-cost.o: \\\n-  $(srcdir)/config/nds32/nds32-cost.c \\\n+  $(srcdir)/config/nds32/nds32-cost.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -104,10 +104,10 @@ nds32-cost.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-cost.c\n+\t\t$(srcdir)/config/nds32/nds32-cost.cc\n \n nds32-fp-as-gp.o: \\\n-  $(srcdir)/config/nds32/nds32-fp-as-gp.c \\\n+  $(srcdir)/config/nds32/nds32-fp-as-gp.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -117,10 +117,10 @@ nds32-fp-as-gp.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-fp-as-gp.c\n+\t\t$(srcdir)/config/nds32/nds32-fp-as-gp.cc\n \n nds32-relax-opt.o: \\\n-  $(srcdir)/config/nds32/nds32-relax-opt.c \\\n+  $(srcdir)/config/nds32/nds32-relax-opt.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -130,10 +130,10 @@ nds32-relax-opt.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-relax-opt.c\n+\t\t$(srcdir)/config/nds32/nds32-relax-opt.cc\n \n nds32-utils.o: \\\n-  $(srcdir)/config/nds32/nds32-utils.c \\\n+  $(srcdir)/config/nds32/nds32-utils.cc \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n@@ -143,4 +143,4 @@ nds32-utils.o: \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/nds32/nds32-utils.c\n+\t\t$(srcdir)/config/nds32/nds32-utils.cc"}, {"sha": "f193cde5a345345dc430ca0e211b6fb0c60d1a46", "filename": "gcc/config/nios2/nios2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnios2%2Fnios2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnios2%2Fnios2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4462,7 +4462,7 @@ nios2_pragma_target_parse (tree args, tree pop_target)\n    We are just using this hook to add some additional error checking to\n    the default behavior.  GCC does not provide a target hook for merging\n    the target options, and only correctly handles merging empty vs non-empty\n-   option data; see merge_decls() in c-decl.c.\n+   option data; see merge_decls() in c-decl.cc.\n    So here we require either that at least one of the decls has empty\n    target options, or that the target options/data be identical.  */\n static tree"}, {"sha": "3d6ad148cb469f0afb106222352be6f256804fee", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in nvptx.c.\n+/* Prototypes for exported functions defined in nvptx.cc.\n    Copyright (C) 2014-2022 Free Software Foundation, Inc.\n    Contributed by Bernd Schmidt <bernds@codesourcery.com>\n "}, {"sha": "20fd8938f2d1ba1468d2d60c21b071632dfa0ae6", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -6793,7 +6793,7 @@ nvptx_goacc_expand_var_decl (tree var)\n \t\t    var, \"gang\");\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n-\t      /* 'dumpfile.c:dump_loc' */\n+\t      /* 'dumpfile.cc:dump_loc' */\n \t      fprintf (dump_file, \"%s:%d:%d: \", LOCATION_FILE (loc),\n \t\t       LOCATION_LINE (loc), LOCATION_COLUMN (loc));\n \t      fprintf (dump_file, \"%s: \", \"note\");"}, {"sha": "9fda2f0d86c0328fec45d75cd9f5cfc32494cdd3", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -36,7 +36,7 @@\n \n #define TARGET_CPU_CPP_BUILTINS() nvptx_cpu_cpp_builtins ()\n \n-/* Avoid the default in ../../gcc.c, which adds \"-pthread\", which is not\n+/* Avoid the default in ../../gcc.cc, which adds \"-pthread\", which is not\n    supported for nvptx.  */\n #define GOMP_SELF_SPECS \"\"\n "}, {"sha": "b1707665a9f4269e9d3508c536d5f316cd75443e", "filename": "gcc/config/nvptx/t-nvptx", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,10 +1,10 @@\n-nvptx-c.o: $(srcdir)/config/nvptx/nvptx-c.c\n+nvptx-c.o: $(srcdir)/config/nvptx/nvptx-c.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n CFLAGS-mkoffload.o += $(DRIVER_DEFINES) \\\n \t-DGCC_INSTALL_NAME=\\\"$(GCC_INSTALL_NAME)\\\"\n-mkoffload.o: $(srcdir)/config/nvptx/mkoffload.c\n+mkoffload.o: $(srcdir)/config/nvptx/mkoffload.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n ALL_HOST_OBJS += mkoffload.o"}, {"sha": "8765d9f18810daf8a3460cf824fb9804d2f58f25", "filename": "gcc/config/nvptx/t-omp-device", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Ft-omp-device", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fnvptx%2Ft-omp-device", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-omp-device?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-omp-device-properties-nvptx: $(srcdir)/config/nvptx/nvptx.c\n+omp-device-properties-nvptx: $(srcdir)/config/nvptx/nvptx.cc\n \techo kind: gpu > $@\n \techo arch: nvptx >> $@\n \techo isa: sm_30 sm_35 >> $@"}, {"sha": "b58659cde18e40e244a37ca8f33fe3cc0a85e772", "filename": "gcc/config/pa/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Felf.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,7 +17,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* So we can conditionalize small amounts of code in pa.c or pa.md.  */\n+/* So we can conditionalize small amounts of code in pa.cc or pa.md.  */\n #define OBJ_ELF\n \n #define ENDFILE_SPEC \"crtend.o%s\""}, {"sha": "5af11a1df80464adb560bd1f46f986dd54cfa2ea", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -100,7 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GLOBAL_ASM_OP \".globl \"\n \n /* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n-   labels in a function declaration (since pa.c seems determined to do\n+   labels in a function declaration (since pa.cc seems determined to do\n    it differently).  */\n \n #undef ASM_DECLARE_FUNCTION_NAME"}, {"sha": "f5eaec6899d7d33701c41e612ffcc82602f2a708", "filename": "gcc/config/pa/pa-netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -95,7 +95,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GLOBAL_ASM_OP \".globl \"\n \n /* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n-   labels in a function declaration (since pa.c seems determined to do\n+   labels in a function declaration (since pa.cc seems determined to do\n    it differently)  */\n \n #undef ASM_DECLARE_FUNCTION_NAME"}, {"sha": "455294fe247dd8268acdabe09a992e185a9fb872", "filename": "gcc/config/pa/pa-openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -69,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_ASM_GLOBALIZE_LABEL\n \n /* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n-   labels in a function declaration (since pa.c seems determined to do\n+   labels in a function declaration (since pa.cc seems determined to do\n    it differently)  */\n \n #undef ASM_DECLARE_FUNCTION_NAME"}, {"sha": "d474d9efc91eba323cdee670b47f7b94d4f0dd7a", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for pa.c functions used in the md file & elsewhere.\n+/* Prototypes for pa.cc functions used in the md file & elsewhere.\n    Copyright (C) 2000-2022 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -21,7 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Prototype function used in various macros.  */\n extern rtx pa_eh_return_handler_rtx (void);\n \n-/* Define functions in pa.c and used in insn-output.c.  */\n+/* Define functions in pa.cc and used in insn-output.cc.  */\n \n extern const char *pa_output_and (rtx *);\n extern const char *pa_output_64bit_and (rtx *);\n@@ -67,7 +67,7 @@ extern int pa_attr_length_indirect_call (rtx_insn *);\n extern rtx pa_legitimize_reload_address (rtx, machine_mode,\n \t\t\t\t\t int, int, int);\n \n-/* Declare functions defined in pa.c and used in templates.  */\n+/* Declare functions defined in pa.cc and used in templates.  */\n \n extern rtx pa_return_addr_rtx (int, rtx);\n \n@@ -89,7 +89,7 @@ extern void pa_expand_prologue (void);\n extern void pa_expand_epilogue (void);\n extern bool pa_can_use_return_insn (void);\n \n-/* Miscellaneous functions in pa.c.  */\n+/* Miscellaneous functions in pa.cc.  */\n #ifdef TREE_CODE\n extern int pa_reloc_needed (tree);\n extern bool pa_return_in_memory (const_tree, const_tree);\n@@ -112,6 +112,6 @@ extern void hppa_profile_hook (int);\n \n extern const int pa_magic_milli[];\n \n-/* Routines implemented in pa-d.c  */\n+/* Routines implemented in pa-d.cc  */\n extern void pa_d_target_versions (void);\n extern void pa_d_register_target_info (void);"}, {"sha": "54ab486a02d6f78948e6f8514f470e8ab0631551", "filename": "gcc/config/pa/pa.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,6 +1,6 @@\n-/* Subroutines for insn-output.c for HPPA.\n+/* Subroutines for insn-output.cc for HPPA.\n    Copyright (C) 1992-2022 Free Software Foundation, Inc.\n-   Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n+   Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.cc\n \n This file is part of GCC.\n \n@@ -1026,7 +1026,7 @@ mem_shadd_or_shadd_rtx_p (rtx x)\n \n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n+   This macro is used in only one place: `memory_address' in explow.cc.\n \n    OLDX is the address as it was before break_out_memory_refs was called.\n    In some cases it is useful to look at this to decide what needs to be done.\n@@ -10038,7 +10038,7 @@ som_output_text_section_asm_op (const char *data ATTRIBUTE_UNUSED)\n \t     function has been completed.  So, we are changing to the\n \t     text section to output debugging information.  Thus, we\n \t     need to forget that we are in the text section so that\n-\t     varasm.c will call us when text_section is selected again.  */\n+\t     varasm.cc will call us when text_section is selected again.  */\n \t  gcc_assert (!cfun || !cfun->machine\n \t\t      || cfun->machine->in_nsubspa == 2);\n \t  in_section = NULL;"}, {"sha": "92d3d1841a9e5b113f76bf8c71fcef04e64af52e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -142,7 +142,7 @@ extern unsigned long total_code_bytes;\n /* This used to be zero (no max length), but big enums and such can\n    cause huge strings which killed gas.\n \n-   We also have to avoid lossage in dbxout.c -- it does not compute the\n+   We also have to avoid lossage in dbxout.cc -- it does not compute the\n    string size accurately, so we are real conservative here.  */\n #undef DBX_CONTIN_LENGTH\n #define DBX_CONTIN_LENGTH 3000\n@@ -680,7 +680,7 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n /* The profile counter if emitted must come before the prologue.  */\n #define PROFILE_BEFORE_PROLOGUE 1\n \n-/* We never want final.c to emit profile counters.  When profile\n+/* We never want final.cc to emit profile counters.  When profile\n    counters are required, we have to defer emitting them to the end\n    of the current file.  */\n #define NO_PROFILE_COUNTERS 1\n@@ -730,7 +730,7 @@ extern int may_call_alloca;\n    They give nonzero only if X is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #define REGNO_OK_FOR_INDEX_P(X) \\\n@@ -919,7 +919,7 @@ extern int may_call_alloca;\n \n /* Try a machine-dependent way of reloading an illegitimate address\n    operand.  If we find one, push the reload and jump to WIN.  This\n-   macro is used in only one place: `find_reloads_address' in reload.c.  */\n+   macro is used in only one place: `find_reloads_address' in reload.cc.  */\n \n #define LEGITIMIZE_RELOAD_ADDRESS(AD, MODE, OPNUM, TYPE, IND_L, WIN) \t     \\\n do {\t\t\t\t\t\t\t\t\t     \\"}, {"sha": "76ae35d4cfa7e0c31377f192a78d44a60a109975", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -3261,7 +3261,7 @@\n ;; If the count is run-time determined, the register with the byte count\n ;; is clobbered by the copying code, and therefore it is forced to operand 2.\n ;;\n-;; We used to clobber operands 0 and 1.  However, a change to regrename.c\n+;; We used to clobber operands 0 and 1.  However, a change to regrename.cc\n ;; broke this semantic for pseudo registers.  We can't use match_scratch\n ;; as this requires two registers in the class R1_REGS when the MEMs for\n ;; operands 0 and 1 are both equivalent to symbolic MEMs.  Thus, we are\n@@ -3449,7 +3449,7 @@\n ;; If the count is run-time determined, the register with the byte count\n ;; is clobbered by the copying code, and therefore it is forced to operand 2.\n ;;\n-;; We used to clobber operands 0 and 1.  However, a change to regrename.c\n+;; We used to clobber operands 0 and 1.  However, a change to regrename.cc\n ;; broke this semantic for pseudo registers.  We can't use match_scratch\n ;; as this requires two registers in the class R1_REGS when the MEMs for\n ;; operands 0 and 1 are both equivalent to symbolic MEMs.  Thus, we are\n@@ -6663,7 +6663,7 @@\n \t      DONE;\n \t    }\n \t}\n-      /* Fallback to using optabs.c's expand_doubleword_shift.  */\n+      /* Fallback to using optabs.cc's expand_doubleword_shift.  */\n       FAIL;\n     }\n   if (GET_CODE (operands[2]) != CONST_INT)\n@@ -6713,7 +6713,7 @@\n \t  DONE;\n \t}\n     }\n-  /* Fallback to using optabs.c's expand_doubleword_shift.  */\n+  /* Fallback to using optabs.cc's expand_doubleword_shift.  */\n   FAIL;\n })\n "}, {"sha": "d2510e9b90a271cf16a0532015ef3b8149e89902", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -17,7 +17,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* So we can conditionalize small amounts of code in pa.c or pa.md.  */\n+/* So we can conditionalize small amounts of code in pa.cc or pa.md.  */\n #undef TARGET_SOM\n #define TARGET_SOM 1\n "}, {"sha": "2428280fbc8644800299878fc7731eb5c031300f", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-pa-d.o: $(srcdir)/config/pa/pa-d.c\n+pa-d.o: $(srcdir)/config/pa/pa-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "f7482df186bc127eeb0a61a9b21e92692f986efc", "filename": "gcc/config/pdp11/pdp11.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -66,7 +66,7 @@ static void decode_pdp11_d (const struct real_format *,\n \t\t\t    REAL_VALUE_TYPE *, const long *);\n \n /* These two are taken from the corresponding vax descriptors\n-   in real.c, changing only the encode/decode routine pointers.  */\n+   in real.cc, changing only the encode/decode routine pointers.  */\n const struct real_format pdp11_f_format =\n   {\n     encode_pdp11_f,"}, {"sha": "b7d66c3bc3946a7cd8c81db4fe677a97a322aa04", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -416,7 +416,7 @@ extern int current_first_parm_offset;\n    They give nonzero only if REGNO is a hard reg of the suitable class\n    or a pseudo reg currently allocated to a suitable hard reg.\n    Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in reginfo.c during register\n+   has been allocated, which happens in reginfo.cc during register\n    allocation.  */\n \n #define REGNO_OK_FOR_BASE_P(REGNO)  \\"}, {"sha": "a46efc1ef78a399c73c258192d777d34950f3f2e", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -2154,7 +2154,7 @@\n \n ;; Note that there is no corresponding CC setter pattern.\n ;; The reason is that it won't be generated, because\n-;; compare-elim.c only does the transformation on input\n+;; compare-elim.cc only does the transformation on input\n ;; insns that have a two-element PARALLEL, as opposed to\n ;; the three-element one we have here.     \n (define_insn \"divmodhi4_nocc\""}, {"sha": "25cfbb58d553093171f7e0ebfe39c6ef891ea017", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,7 +22,7 @@ MULTILIB_OPTIONS = msoft-float\n LIBGCC2_CFLAGS = -Os\n CRTSTUFF_T_CFLAGS = -Os\n \n-# Because the pdp11 POINTER_SIZE is only 16, in dwarf2out.c,\n+# Because the pdp11 POINTER_SIZE is only 16, in dwarf2out.cc,\n # DWARF_ARANGES_PAD_SIZE is 0, thus a loop in output_aranges that checks\n # (i < (unsigned) DWARF_ARANGES_PAD_SIZE) elicits a warning that the\n # comparison is always false."}, {"sha": "68dcab234b09dda5038754540ab1074e3eff1192", "filename": "gcc/config/pru/pru.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpru%2Fpru.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpru%2Fpru.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.md?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -432,7 +432,7 @@\n ;; We define it solely to allow combine to choose SImode\n ;; for word mode when trying to match our cbranch_qbbx_* insn.\n ;;\n-;; Check how combine.c:make_extraction() uses\n+;; Check how combine.cc:make_extraction() uses\n ;; get_best_reg_extraction_insn() to select the op size.\n (define_insn \"extzv<mode>\"\n   [(set (match_operand:QISI 0 \"register_operand\"\t\"=r\")"}, {"sha": "86b1d7a57056ed907c4495fc9822236c4d50f5a8", "filename": "gcc/config/pru/t-pru", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpru%2Ft-pru", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Fpru%2Ft-pru", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Ft-pru?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -22,10 +22,10 @@\n # Unfortunately mabi=ti is not feature-complete enough to build newlib.\n # Hence we cannot present mabi=gnu/ti as a multilib option.\n \n-pru-pragma.o: $(srcdir)/config/pru/pru-pragma.c $(RTL_H) $(TREE_H) \\\n+pru-pragma.o: $(srcdir)/config/pru/pru-pragma.cc $(RTL_H) $(TREE_H) \\\n \t\t$(CONFIG_H) $(TM_H) $(srcdir)/config/pru/pru-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n-pru-passes.o: $(srcdir)/config/pru/pru-passes.c $(RTL_H) $(TREE_H) \\\n+pru-passes.o: $(srcdir)/config/pru/pru-passes.cc $(RTL_H) $(TREE_H) \\\n \t\t$(CONFIG_H) $(TM_H) $(srcdir)/config/pru/pru-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "20c2381c21aa01ec09b9c321da664c4a00a637d9", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -35,7 +35,7 @@ enum riscv_symbol_type {\n };\n #define NUM_SYMBOL_TYPES (SYMBOL_TLS_GD + 1)\n \n-/* Routines implemented in riscv.c.  */\n+/* Routines implemented in riscv.cc.  */\n extern enum riscv_symbol_type riscv_classify_symbolic_expression (rtx);\n extern bool riscv_symbolic_constant_p (rtx, enum riscv_symbol_type *);\n extern int riscv_regno_mode_ok_for_base_p (int, machine_mode, bool);\n@@ -75,20 +75,20 @@ extern bool riscv_store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern rtx riscv_gen_gpr_save_insn (struct riscv_frame_info *);\n extern bool riscv_gpr_save_operation_p (rtx);\n \n-/* Routines implemented in riscv-c.c.  */\n+/* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);\n \n-/* Routines implemented in riscv-d.c  */\n+/* Routines implemented in riscv-d.cc  */\n extern void riscv_d_target_versions (void);\n extern void riscv_d_register_target_info (void);\n \n-/* Routines implemented in riscv-builtins.c.  */\n+/* Routines implemented in riscv-builtins.cc.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);\n extern rtx riscv_expand_builtin (tree, rtx, rtx, machine_mode, int);\n extern tree riscv_builtin_decl (unsigned int, bool);\n extern void riscv_init_builtins (void);\n \n-/* Routines implemented in riscv-common.c.  */\n+/* Routines implemented in riscv-common.cc.  */\n extern std::string riscv_arch_str (bool version_p = true);\n \n extern bool riscv_hard_regno_rename_ok (unsigned, unsigned);"}, {"sha": "7c80678088339671077210033c16082edec63c00", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4933,7 +4933,7 @@ riscv_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   SIBLING_CALL_P (insn) = 1;\n \n   /* Run just enough of rest_of_compilation.  This sequence was\n-     \"borrowed\" from alpha.c.  */\n+     \"borrowed\" from alpha.cc.  */\n   insn = get_insns ();\n   split_all_insns_noflow ();\n   shorten_branches (insn);"}, {"sha": "695668424c3f8d27e719496e858b7fd2f4798234", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -147,7 +147,7 @@ ASM_MISA_SPEC\n #define MIN_UNITS_PER_WORD 4\n #endif\n \n-/* Allows SImode op in builtin overflow pattern, see internal-fn.c.  */\n+/* Allows SImode op in builtin overflow pattern, see internal-fn.cc.  */\n #undef TARGET_MIN_ARITHMETIC_PRECISION\n #define TARGET_MIN_ARITHMETIC_PRECISION riscv_min_arithmetic_precision\n \n@@ -996,7 +996,7 @@ extern unsigned riscv_stack_boundary;\n    offset (an unsigned 5-bit value scaled by 4).  */\n #define CSW_MAX_OFFSET (((4LL << C_S_BITS) - 1) & ~3)\n \n-/* Called from RISCV_REORG, this is defined in riscv-sr.c.  */\n+/* Called from RISCV_REORG, this is defined in riscv-sr.cc.  */\n \n extern void riscv_remove_unneeded_save_restore_calls (void);\n "}, {"sha": "096d70e3c91415f2e9b6bd0273e9cfa32f75646d", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,25 +1,25 @@\n-riscv-builtins.o: $(srcdir)/config/riscv/riscv-builtins.c $(CONFIG_H) \\\n+riscv-builtins.o: $(srcdir)/config/riscv/riscv-builtins.cc $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(RECOG_H) langhooks.h \\\n   $(DIAGNOSTIC_CORE_H) $(OPTABS_H) $(srcdir)/config/riscv/riscv-ftypes.def \\\n   $(srcdir)/config/riscv/riscv-modes.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/riscv/riscv-builtins.c\n+\t\t$(srcdir)/config/riscv/riscv-builtins.cc\n \n-riscv-sr.o: $(srcdir)/config/riscv/riscv-sr.c $(CONFIG_H) \\\n+riscv-sr.o: $(srcdir)/config/riscv/riscv-sr.cc $(CONFIG_H) \\\n   $(SYSTEM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/riscv/riscv-sr.c\n+\t\t$(srcdir)/config/riscv/riscv-sr.cc\n \n-riscv-c.o: $(srcdir)/config/riscv/riscv-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+riscv-c.o: $(srcdir)/config/riscv/riscv-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H) $(TARGET_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/riscv/riscv-c.c\n+\t\t$(srcdir)/config/riscv/riscv-c.cc\n \n-riscv-d.o: $(srcdir)/config/riscv/riscv-d.c\n+riscv-d.o: $(srcdir)/config/riscv/riscv-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-riscv-shorten-memrefs.o: $(srcdir)/config/riscv/riscv-shorten-memrefs.c\n+riscv-shorten-memrefs.o: $(srcdir)/config/riscv/riscv-shorten-memrefs.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n "}, {"sha": "b3727c0a81d09163163d744b211453e4e419437d", "filename": "gcc/config/rl78/rl78.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frl78%2Frl78.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frl78%2Frl78.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -4778,7 +4778,7 @@ rl78_asm_ctor_dtor (rtx symbol, int priority, bool is_ctor)\n   if (priority != DEFAULT_INIT_PRIORITY)\n     {\n       /* This section of the function is based upon code copied\n-\t from: gcc/varasm.c:get_cdtor_priority_section().  */\n+\t from: gcc/varasm.cc:get_cdtor_priority_section().  */\n       char buf[18];\n \n       sprintf (buf, \"%s.%.5u\", is_ctor ? \".ctors\" : \".dtors\","}, {"sha": "cd2a5084a792c133117265a7e03e51c76f177594", "filename": "gcc/config/rl78/t-rl78", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frl78%2Ft-rl78", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frl78%2Ft-rl78", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Ft-rl78?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -18,7 +18,7 @@\n # License along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-rl78-c.o: $(srcdir)/config/rl78/rl78-c.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n+rl78-c.o: $(srcdir)/config/rl78/rl78-c.cc $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n # Enable multilibs:"}, {"sha": "ad3238bf09ae7c0be2ffdfe9f0a17da388f26130", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -65,10 +65,10 @@\n \n    The default value for this macro is `STACK_POINTER_OFFSET' plus the\n    length of the outgoing arguments.  The default is correct for most\n-   machines.  See `function.c' for details.\n+   machines.  See `function.cc' for details.\n \n    This value must be a multiple of STACK_BOUNDARY (hard coded in\n-   `emit-rtl.c').  */\n+   `emit-rtl.cc').  */\n #undef STACK_DYNAMIC_OFFSET\n #define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\\n    RS6000_ALIGN (crtl->outgoing_args_size.to_constant ()\t\t\\"}, {"sha": "57e07bcc65ee460435ebcf0db2b726004450072b", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -73,7 +73,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amongst the various targets for\n-   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.cc to\n    provide the default assembler options if the user uses -mcpu=native, so if\n    you make changes here, make them there also.  */\n #undef ASM_CPU_SPEC"}, {"sha": "ca73acbb2c8fb50ce97ca1b46f54374b2bc97f55", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -73,7 +73,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amongst the various targets for\n-   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.cc to\n    provide the default assembler options if the user uses -mcpu=native, so if\n    you make changes here, make them there also.  */\n #undef ASM_CPU_SPEC"}, {"sha": "8baa27e54c0d006f4825387e96489118c7ebdfe0", "filename": "gcc/config/rs6000/aix73.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix73.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Faix73.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix73.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -73,7 +73,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amongst the various targets for\n-   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.cc to\n    provide the default assembler options if the user uses -mcpu=native, so if\n    you make changes here, make them there also.  */\n #undef ASM_CPU_SPEC"}, {"sha": "b5cef42610f7645762ad8cd2866e0b727b7a97c4", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -246,10 +246,10 @@\n \n    The default value for this macro is `STACK_POINTER_OFFSET' plus the\n    length of the outgoing arguments.  The default is correct for most\n-   machines.  See `function.c' for details.\n+   machines.  See `function.cc' for details.\n \n    This value must be a multiple of STACK_BOUNDARY (hard coded in\n-   `emit-rtl.c').  */\n+   `emit-rtl.cc').  */\n \n #undef STACK_DYNAMIC_OFFSET\n #define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\\n@@ -306,7 +306,7 @@\n #define GLOBAL_ASM_OP \"\\t.globl \"\n #undef TARGET_ASM_GLOBALIZE_LABEL\n \n-/* This is how to output an internal label prefix.  rs6000.c uses this\n+/* This is how to output an internal label prefix.  rs6000.cc uses this\n    when generating traceback tables.  */\n /* Not really used for Darwin?  */\n "}, {"sha": "ec890e0db3aecfd971667195495371d33ad82156", "filename": "gcc/config/rs6000/driver-rs6000.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -534,7 +534,7 @@ static const struct asm_name asm_names[] = {\n #endif\n };\n \n-/* This will be called by the spec parser in gcc.c when it sees\n+/* This will be called by the spec parser in gcc.cc when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\" or \"tune\" as argument depending on if -march=native\n    or -mtune=native is to be substituted."}, {"sha": "29ada25eaeff96314eaa3a3d9317c62fc618af99", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -51,8 +51,8 @@\n /************************[  Target stuff  ]***********************************/\n \n /* Define the actual types of some ANSI-mandated types.  \n-   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n-   c-common.c, and config/<arch>/<arch>.h.  */\n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.cc,\n+   c-common.cc, and config/<arch>/<arch>.h.  */\n \n #undef  SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "a73752a18f53c38668aa4809738be50208f15609", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -239,8 +239,8 @@ extern int dot_symbols;\n /************************[  Target stuff  ]***********************************/\n \n /* Define the actual types of some ANSI-mandated types.  \n-   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n-   c-common.c, and config/<arch>/<arch>.h.  */\n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.cc,\n+   c-common.cc, and config/<arch>/<arch>.h.  */\n \n \n #undef  SIZE_TYPE"}, {"sha": "dcf5fc40e90d546d71852ab17d497fd976c648b0", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -81,7 +81,7 @@\n #undef SIZE_TYPE\n #undef ASM_OUTPUT_ALIGN\n \n-/* The file rs6000.c defines TARGET_HAVE_TLS unconditionally to the\n+/* The file rs6000.cc defines TARGET_HAVE_TLS unconditionally to the\n    value of HAVE_AS_TLS.  HAVE_AS_TLS is true as gas support for TLS\n    is detected by configure.  Override the definition to false.  */\n "}, {"sha": "065e8fc723a7e82d4c323245dd687ceff8b95317", "filename": "gcc/config/rs6000/rbtree.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frbtree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frbtree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frbtree.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Partial red-black tree implementation for rs6000-gen-builtins.c.\n+/* Partial red-black tree implementation for rs6000-gen-builtins.cc.\n    Copyright (C) 2020-2022 Free Software Foundation, Inc.\n    Contributed by Bill Schmidt, IBM <wschmidt@linux.ibm.com>\n "}, {"sha": "9ee0f9142512a058123bdaa6c6655deb19337612", "filename": "gcc/config/rs6000/rbtree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frbtree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frbtree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frbtree.h?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -1,4 +1,4 @@\n-/* Partial red-black tree implementation for rs6000-gen-builtins.c.\n+/* Partial red-black tree implementation for rs6000-gen-builtins.cc.\n    Copyright (C) 2020-2022 Free Software Foundation, Inc.\n    Contributed by Bill Schmidt, IBM <wschmidt@linux.ibm.com>\n "}, {"sha": "145421ab8f25a82890abae8aef793ffe4bfa93c0", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53b6e564aab615703ff2f9e8406a3953f0a3785/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=e53b6e564aab615703ff2f9e8406a3953f0a3785", "patch": "@@ -358,7 +358,7 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n      flags are enabled or disabled implicitly, based on compiler\n      defaults, configuration choices, and on the presence of certain\n      related command-line options.  Many, but not all, of these\n-     implicit behaviors can be found in file \"rs6000.c\", the\n+     implicit behaviors can be found in file \"rs6000.cc\", the\n      rs6000_option_override_internal() function.\n \n      In general, each of the flags may be automatically enabled in"}]}