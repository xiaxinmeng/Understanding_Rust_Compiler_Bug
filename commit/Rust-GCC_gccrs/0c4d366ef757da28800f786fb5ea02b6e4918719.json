{"sha": "0c4d366ef757da28800f786fb5ea02b6e4918719", "node_id": "C_kwDOANBUbNoAKDBjNGQzNjZlZjc1N2RhMjg4MDBmNzg2ZmI1ZWEwMmI2ZTQ5MTg3MTk", "commit": {"author": {"name": "Pan Li", "email": "pan2.li@intel.com", "date": "2023-04-14T03:25:11Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-04-17T01:51:35Z"}, "message": "RISC-V: Add test cases for the RVV mask insn shortcut.\n\nThere are sorts of shortcut codegen for the RVV mask insn. For\nexample.\n\nvmxor vd, va, va => vmclr vd.\n\nWe would like to add more optimization like this but first of all\nwe must add the tests for the existing shortcut optimization, to\nensure we don't break existing optimization from underlying shortcut\noptimization.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/mask_insn_shortcut.c: New test.\n\nSigned-off-by: Pan Li <pan2.li@intel.com>", "tree": {"sha": "660286bef06d78e35a1470ee4a8e87bffecf500e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660286bef06d78e35a1470ee4a8e87bffecf500e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c4d366ef757da28800f786fb5ea02b6e4918719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4d366ef757da28800f786fb5ea02b6e4918719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4d366ef757da28800f786fb5ea02b6e4918719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4d366ef757da28800f786fb5ea02b6e4918719/comments", "author": {"login": "Incarnation-p-lee", "id": 6782002, "node_id": "MDQ6VXNlcjY3ODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6782002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Incarnation-p-lee", "html_url": "https://github.com/Incarnation-p-lee", "followers_url": "https://api.github.com/users/Incarnation-p-lee/followers", "following_url": "https://api.github.com/users/Incarnation-p-lee/following{/other_user}", "gists_url": "https://api.github.com/users/Incarnation-p-lee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Incarnation-p-lee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Incarnation-p-lee/subscriptions", "organizations_url": "https://api.github.com/users/Incarnation-p-lee/orgs", "repos_url": "https://api.github.com/users/Incarnation-p-lee/repos", "events_url": "https://api.github.com/users/Incarnation-p-lee/events{/privacy}", "received_events_url": "https://api.github.com/users/Incarnation-p-lee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a167416a239a4afcc7e89d2ccdea3ffa318defac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a167416a239a4afcc7e89d2ccdea3ffa318defac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a167416a239a4afcc7e89d2ccdea3ffa318defac"}], "stats": {"total": 241, "additions": 241, "deletions": 0}, "files": [{"sha": "83cc4a1b5a5b1eda96b542c0c8dff150e4b2e78e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/mask_insn_shortcut.c", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4d366ef757da28800f786fb5ea02b6e4918719/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4d366ef757da28800f786fb5ea02b6e4918719/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c?ref=0c4d366ef757da28800f786fb5ea02b6e4918719", "patch": "@@ -0,0 +1,241 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool1_t test_shortcut_for_riscv_vmand_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmand_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmand_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmand_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmand_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmand_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmand_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmnand_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmnand_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmnand_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmnand_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmnand_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmnand_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmnand_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmandn_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmandn_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmandn_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmandn_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmandn_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmandn_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmandn_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmxor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmxor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmxor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmxor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmxor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmxor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmxor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmnor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmnor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmnor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmnor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmnor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmnor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmnor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmorn_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmorn_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmorn_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmorn_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmorn_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmorn_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmorn_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmxnor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmxnor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmxnor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmxnor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmxnor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmxnor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmxnor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b64(v1, v1, vl);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmand\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnand\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-times {vmorn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 7 } } */\n+/* { dg-final { scan-assembler-not {vmxnor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-times {vmclr\\.m\\s+v[0-9]+} 14 } } */\n+/* { dg-final { scan-assembler-times {vmset\\.m\\s+v[0-9]+} 7 } } */\n+/* { dg-final { scan-assembler-times {vmmv\\.m\\s+v[0-9]+,\\s*v[0-9]+} 14 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.m\\s+v[0-9]+,\\s*v[0-9]+} 14 } } */"}]}