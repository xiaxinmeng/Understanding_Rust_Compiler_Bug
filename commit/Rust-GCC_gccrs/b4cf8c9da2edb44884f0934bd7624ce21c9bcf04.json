{"sha": "b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjZjhjOWRhMmVkYjQ0ODg0ZjA5MzRiZDc2MjRjZTIxYzliY2YwNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-04T09:47:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-04T09:47:12Z"}, "message": "re PR tree-optimization/49651 (nested lambdas and -O3 produced incorrect integer variable increments)\n\n2012-01-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49651\n\t* tree-ssa-structalias.c (type_can_have_subvars): New function.\n\t(var_can_have_subvars): Use it.\n\t(get_constraint_for_1): Only consider subfields if there\n\tcan be any.\n\n\t* gcc.dg/tree-ssa/pta-ptrarith-1.c: Adjust.\n\t* gcc.dg/tree-ssa/pta-ptrarith-2.c: Likewise.\n\nFrom-SVN: r182865", "tree": {"sha": "bf057bb8c073169669076383bed0f487007bfd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf057bb8c073169669076383bed0f487007bfd0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53618d02754d7eaadd0a58fd47e71dc178ea1750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53618d02754d7eaadd0a58fd47e71dc178ea1750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53618d02754d7eaadd0a58fd47e71dc178ea1750"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "78e69a72f0ae6398503f1672a69c80c7a5af91fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "patch": "@@ -1,3 +1,11 @@\n+2012-01-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49651\n+\t* tree-ssa-structalias.c (type_can_have_subvars): New function.\n+\t(var_can_have_subvars): Use it.\n+\t(get_constraint_for_1): Only consider subfields if there\n+\tcan be any.\n+\n 2012-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/51725"}, {"sha": "556e6763f449fece57fd13377db28f4b6f685939", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "patch": "@@ -1,3 +1,9 @@\n+2012-01-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49651\n+\t* gcc.dg/tree-ssa/pta-ptrarith-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/pta-ptrarith-2.c: Likewise.\n+\n 2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51738"}, {"sha": "2a60e1daa23a42d4b91bfd9dc92b88c30926ea3d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-ptrarith-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-1.c?ref=b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-ealias\" } */\n+/* { dg-options \"-O2 -fno-tree-forwprop -fno-tree-ccp -fdump-tree-ealias\" } */\n \n extern void abort (void);\n struct X {"}, {"sha": "ddf934bf8132f35de5aa8bfe97cbbb3bbc9bbd83", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-ptrarith-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-ptrarith-2.c?ref=b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdump-tree-ealias\" } */\n+/* { dg-options \"-O2 -fno-tree-forwprop -fno-tree-ccp -fdump-tree-ealias\" } */\n \n extern void abort (void);\n struct X {"}, {"sha": "5a55d1651ff03634a09a55f6ed25bd16f3624393", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf8c9da2edb44884f0934bd7624ce21c9bcf04/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b4cf8c9da2edb44884f0934bd7624ce21c9bcf04", "patch": "@@ -303,6 +303,7 @@ static varinfo_t first_vi_for_offset (varinfo_t, unsigned HOST_WIDE_INT);\n static varinfo_t first_or_preceding_vi_for_offset (varinfo_t,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT);\n static varinfo_t lookup_vi_for_tree (tree);\n+static inline bool type_can_have_subvars (const_tree);\n \n /* Pool of variable info structures.  */\n static alloc_pool variable_info_pool;\n@@ -3275,7 +3276,8 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t\treturn;\n \n \t      cs = *VEC_last (ce_s, *results);\n-\t      if (cs.type == DEREF)\n+\t      if (cs.type == DEREF\n+\t\t  && type_can_have_subvars (TREE_TYPE (t)))\n \t\t{\n \t\t  /* For dereferences this means we have to defer it\n \t\t     to solving time.  */\n@@ -5043,6 +5045,15 @@ sort_fieldstack (VEC(fieldoff_s,heap) *fieldstack)\n   VEC_qsort (fieldoff_s, fieldstack, fieldoff_compare);\n }\n \n+/* Return true if T is a type that can have subvars.  */\n+\n+static inline bool\n+type_can_have_subvars (const_tree t)\n+{\n+  /* Aggregates without overlapping fields can have subvars.  */\n+  return TREE_CODE (t) == RECORD_TYPE;\n+}\n+\n /* Return true if V is a tree that we can have subvars for.\n    Normally, this is any aggregate type.  Also complex\n    types which are not gimple registers can have subvars.  */\n@@ -5058,11 +5069,7 @@ var_can_have_subvars (const_tree v)\n   if (!DECL_P (v))\n     return false;\n \n-  /* Aggregates without overlapping fields can have subvars.  */\n-  if (TREE_CODE (TREE_TYPE (v)) == RECORD_TYPE)\n-    return true;\n-\n-  return false;\n+  return type_can_have_subvars (TREE_TYPE (v));\n }\n \n /* Return true if T is a type that does contain pointers.  */"}]}