{"sha": "e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "node_id": "C_kwDOANBUbNoAKGUzYjhiNGY3ODE0YzU0NTQzZDliN2VhM2VlOGNmMmNiOWNmZjM1MWQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-20T14:44:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-20T14:47:49Z"}, "message": "libstdc++: Reduce <random> test iterations for simulators\n\nSome of these tests take several minutes on a simulator like cris-elf,\nso we can conditionally run fewer iterations. The testDiscreteDist\nhelper already supports custom sizes so we just need to make use of that\nwhen { target simulator } matches.\n\nThe relevant code is sufficiently tested on other targets, so we're not\nlosing anything by only running a small number of iterators for sims.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/values.cc:\n\tRun fewer iterations for simulator targets.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/values.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/values.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/values.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/operators/values.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/poisson_distribution/operators/values.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/values.cc:\n\tLikewise.", "tree": {"sha": "9e9aa27947136578384602a3dd338dc7c2b9c59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9aa27947136578384602a3dd338dc7c2b9c59f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f3f27f607d3c145ed1e3ad652baac84aacdb91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f3f27f607d3c145ed1e3ad652baac84aacdb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f3f27f607d3c145ed1e3ad652baac84aacdb91"}], "stats": {"total": 97, "additions": 76, "deletions": 21}, "files": [{"sha": "b2cb86f976b3ca6e397d4fd31e91e612035af406", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/values.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -24,6 +24,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -32,15 +40,15 @@ void test01()\n \n   std::bernoulli_distribution bd1(0.25);\n   auto bbd1 = std::bind(bd1, eng);\n-  testDiscreteDist(bbd1, [](int n) { return bernoulli_pdf(n, 0.25); } );\n+  testDiscreteDist<ARGS>(bbd1, [](int n) { return bernoulli_pdf(n, 0.25); } );\n \n   std::bernoulli_distribution bd2(0.5);\n   auto bbd2 = std::bind(bd2, eng);\n-  testDiscreteDist(bbd2, [](int n) { return bernoulli_pdf(n, 0.5); } );\n+  testDiscreteDist<ARGS>(bbd2, [](int n) { return bernoulli_pdf(n, 0.5); } );\n \n   std::bernoulli_distribution bd3(0.75);\n   auto bbd3 = std::bind(bd3, eng);\n-  testDiscreteDist(bbd3, [](int n) { return bernoulli_pdf(n, 0.75); } );\n+  testDiscreteDist<ARGS>(bbd3, [](int n) { return bernoulli_pdf(n, 0.75); } );\n }\n \n int main()"}, {"sha": "efa259b7e0361730e519965577c7749efb883756", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/values.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -25,6 +25,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -33,9 +41,9 @@ void test01()\n \n   std::binomial_distribution<> bd1(5, 0.3);\n   auto bbd1 = std::bind(bd1, eng);\n-  testDiscreteDist(bbd1, [](int n) { return binomial_pdf(n, 5, 0.3); } );\n+  testDiscreteDist<ARGS>(bbd1, [](int n) { return binomial_pdf(n, 5, 0.3); } );\n \n-  // These tests take a relatively long time on soft-float simulated\n+  // These tests take a relatively long time on soft-float simulated targets.\n   // targets, so please don't add new tests here, instead add a new file.\n }\n "}, {"sha": "8bacb86e1733278f9bb6ea8a818db7e0e64bc6a8", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/values.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -24,6 +24,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;"}, {"sha": "41a83b1377b735ece15ea0548a508a87a1386d5f", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/values.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -24,6 +24,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -32,16 +40,16 @@ void test01()\n \n   std::geometric_distribution<> gd1(0.5);\n   auto bgd1 = std::bind(gd1, eng);\n-  testDiscreteDist(bgd1, [](int n) { return geometric_pdf(n, 0.5); } );\n+  testDiscreteDist<ARGS>(bgd1, [](int n) { return geometric_pdf(n, 0.5); } );\n \n   std::geometric_distribution<> gd2(0.75);\n   auto bgd2 = std::bind(gd2, eng);\n-  testDiscreteDist(bgd2, [](int n) { return geometric_pdf(n, 0.75); } );\n+  testDiscreteDist<ARGS>(bgd2, [](int n) { return geometric_pdf(n, 0.75); } );\n \n   // libstdc++/48114\n   std::geometric_distribution<> gd3(0.25);\n   auto bgd3 = std::bind(gd3, eng);\n-  testDiscreteDist(bgd3, [](int n) { return geometric_pdf(n, 0.25); } );\n+  testDiscreteDist<ARGS>(bgd3, [](int n) { return geometric_pdf(n, 0.25); } );\n }\n \n int main()"}, {"sha": "9856b888577803b93240225ac9628de0b284229d", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/values.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -26,6 +26,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -34,18 +42,18 @@ void test01()\n \n   std::negative_binomial_distribution<> nbd1(5, 0.3);\n   auto bnbd1 = std::bind(nbd1, eng);\n-  testDiscreteDist(bnbd1, [](int n)\n-\t\t   { return negative_binomial_pdf(n, 5, 0.3); } );\n+  testDiscreteDist<ARGS>(bnbd1, [](int n)\n+\t\t\t { return negative_binomial_pdf(n, 5, 0.3); } );\n \n   std::negative_binomial_distribution<> nbd2(55, 0.3);\n   auto bnbd2 = std::bind(nbd2, eng);\n-  testDiscreteDist(bnbd2, [](int n)\n-\t\t   { return negative_binomial_pdf(n, 55, 0.3); } );\n+  testDiscreteDist<ARGS>(bnbd2, [](int n)\n+\t\t\t { return negative_binomial_pdf(n, 55, 0.3); } );\n \n   std::negative_binomial_distribution<> nbd3(10, 0.75);\n   auto bnbd3 = std::bind(nbd3, eng);\n-  testDiscreteDist(bnbd3, [](int n)\n-\t\t   { return negative_binomial_pdf(n, 10, 0.75); } );\n+  testDiscreteDist<ARGS>(bnbd3, [](int n)\n+\t\t\t { return negative_binomial_pdf(n, 10, 0.75); } );\n }\n \n int main()"}, {"sha": "05e8c9f9eb1dbc85406fe2675d0a8a2dd0c427fc", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/values.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -1,4 +1,3 @@\n-// { dg-options \"-DSIMULATOR_TEST\" { target simulator } }\n // { dg-do run { target c++11 } }\n // { dg-require-cstdint \"\" }\n // { dg-require-cmath \"\" }\n@@ -26,6 +25,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -34,15 +41,15 @@ void test01()\n \n   std::poisson_distribution<> pd1(3.0);\n   auto bpd1 = std::bind(pd1, eng);\n-  testDiscreteDist(bpd1, [](int n) { return poisson_pdf(n, 3.0); } );\n+  testDiscreteDist<ARGS>(bpd1, [](int n) { return poisson_pdf(n, 3.0); } );\n \n   std::poisson_distribution<> pd2(15.0);\n   auto bpd2 = std::bind(pd2, eng);\n-  testDiscreteDist(bpd2, [](int n) { return poisson_pdf(n, 15.0); } );\n+  testDiscreteDist<ARGS>(bpd2, [](int n) { return poisson_pdf(n, 15.0); } );\n \n   std::poisson_distribution<> pd3(30.0);\n   auto bpd3 = std::bind(pd3, eng);\n-  testDiscreteDist(bpd3, [](int n) { return poisson_pdf(n, 30.0); } );\n+  testDiscreteDist<ARGS>(bpd3, [](int n) { return poisson_pdf(n, 30.0); } );\n \n   // This can take extremely long on simulators, timing out the test.\n #ifndef SIMULATOR_TEST"}, {"sha": "ee1ea7ebe5f853dfefe5a62f49cd7f100f33d4b0", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/values.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc?ref=e3b8b4f7814c54543d9b7ea3ee8cf2cb9cff351d", "patch": "@@ -24,6 +24,14 @@\n #include <functional>\n #include <testsuite_random.h>\n \n+// { dg-additional-options \"-DSIMULATOR_TEST\" { target simulator } }\n+\n+#ifdef SIMULATOR_TEST\n+# define ARGS 100, 1000\n+#else\n+# define ARGS\n+#endif\n+\n void test01()\n {\n   using namespace __gnu_test;\n@@ -32,15 +40,15 @@ void test01()\n \n   std::uniform_int_distribution<> uid1(0, 2);\n   auto buid1 = std::bind(uid1, eng);\n-  testDiscreteDist(buid1, [](int n) { return uniform_int_pdf(n, 0, 2); } );\n+  testDiscreteDist<ARGS>(buid1, [](int n) { return uniform_int_pdf(n, 0, 2); } );\n \n   std::uniform_int_distribution<> uid2(3, 7);\n   auto buid2 = std::bind(uid2, eng);\n-  testDiscreteDist(buid2, [](int n) { return uniform_int_pdf(n, 3, 7); } );\n+  testDiscreteDist<ARGS>(buid2, [](int n) { return uniform_int_pdf(n, 3, 7); } );\n \n   std::uniform_int_distribution<> uid3(1, 20);\n   auto buid3 = std::bind(uid3, eng);\n-  testDiscreteDist(buid3, [](int n) { return uniform_int_pdf(n, 1, 20); } );\n+  testDiscreteDist<ARGS>(buid3, [](int n) { return uniform_int_pdf(n, 1, 20); } );\n }\n \n int main()"}]}