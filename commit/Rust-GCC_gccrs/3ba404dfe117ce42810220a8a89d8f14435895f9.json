{"sha": "3ba404dfe117ce42810220a8a89d8f14435895f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JhNDA0ZGZlMTE3Y2U0MjgxMDIyMGE4YTg5ZDhmMTQ0MzU4OTVmOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-10T17:14:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-10T17:14:45Z"}, "message": "re PR tree-optimization/34677 (PREs insert_fake_stores is mostly useless)\n\n2008-03-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34677\n\t* tree-ssa-pre.c (modify_expr_node_pool): Remove.\n\t(poolify_tree): Likewise.\n\t(modify_expr_template): Likewise.\n\t(poolify_modify_stmt): Likewise.\n\t(insert_fake_stores): Handle all component-ref style stores\n\tin addition to INDIRECT_REF.  Also handle complex types.\n\tDo not poolify the inserted load.\n\t(realify_fake_stores): Do not rebuild the tree but only\n\tmake it a SSA_NAME copy.\n\t(init_pre): Remove initialzation of modify_expr_template.\n\tDo not allocate modify_expr_node_pool.\n\t(fini_pre): Do not free modify_expr_node_pool.\n\n\t* gcc.dg/tree-ssa/loadpre23.c: New testcase.\n\t* gcc.dg/tree-ssa/loadpre24.c: Likewise.\n\t* gcc.dg/tree-ssa/loadpre25.c: Likewise.\n\nFrom-SVN: r133081", "tree": {"sha": "4506ced251003d41e08d712e07f73cf08dcb2b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4506ced251003d41e08d712e07f73cf08dcb2b47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ba404dfe117ce42810220a8a89d8f14435895f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba404dfe117ce42810220a8a89d8f14435895f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba404dfe117ce42810220a8a89d8f14435895f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba404dfe117ce42810220a8a89d8f14435895f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97e38a92394553c8f8e3694f5211a411599ef944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e38a92394553c8f8e3694f5211a411599ef944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e38a92394553c8f8e3694f5211a411599ef944"}], "stats": {"total": 207, "additions": 122, "deletions": 85}, "files": [{"sha": "21ec0bdf3b8f9855c1fad75995ab6cbcae07a074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -1,3 +1,19 @@\n+2008-03-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34677\n+\t* tree-ssa-pre.c (modify_expr_node_pool): Remove.\n+\t(poolify_tree): Likewise.\n+\t(modify_expr_template): Likewise.\n+\t(poolify_modify_stmt): Likewise.\n+\t(insert_fake_stores): Handle all component-ref style stores\n+\tin addition to INDIRECT_REF.  Also handle complex types.\n+\tDo not poolify the inserted load.\n+\t(realify_fake_stores): Do not rebuild the tree but only\n+\tmake it a SSA_NAME copy.\n+\t(init_pre): Remove initialzation of modify_expr_template.\n+\tDo not allocate modify_expr_node_pool.\n+\t(fini_pre): Do not free modify_expr_node_pool.\n+\n 2008-03-10  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (UNSPEC_STACK_ALIGN, UNSPEC_PIC_OFFSET): Renumber"}, {"sha": "98466dc96778492a04c84b1dfb52309a2f9aefa3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -1,3 +1,23 @@\n+2008-03-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34677\n+\t* tree-ssa-pre.c (modify_expr_node_pool): Remove.\n+\t(poolify_tree): Likewise.\n+\t(modify_expr_template): Likewise.\n+\t(poolify_modify_stmt): Likewise.\n+\t(insert_fake_stores): Handle all component-ref style stores\n+\tin addition to INDIRECT_REF.  Also handle complex types.\n+\tDo not poolify the inserted load.\n+\t(realify_fake_stores): Do not rebuild the tree but only\n+\tmake it a SSA_NAME copy.\n+\t(init_pre): Remove initialzation of modify_expr_template.\n+\tDo not allocate modify_expr_node_pool.\n+\t(fini_pre): Do not free modify_expr_node_pool.\n+\n+\t* gcc.dg/tree-ssa/loadpre23.c: New testcase.\n+\t* gcc.dg/tree-ssa/loadpre24.c: Likewise.\n+\t* gcc.dg/tree-ssa/loadpre25.c: Likewise.\n+\n 2008-03-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35474"}, {"sha": "2273accbaa75323e7726d58855cd875b19e8478f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre23.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre23.c?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+struct {\n+  int a;\n+  int large[100];\n+} x;\n+\n+int foo(int argc)\n+{\n+  int b;\n+  int c;\n+  int i;\n+  int d, e;\n+\n+  for (i = 0; i < argc; i++)\n+    {\n+      e = x.a;\n+      x.a = 9;\n+    }\n+  return d + e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"  } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "1e6b954bfa82990239684ac6835a904ed54c89ab", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre24.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre24.c?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+int a;\n+\n+int foo(int argc)\n+{\n+  int b;\n+  int c;\n+  int i;\n+  int d, e;\n+\n+  for (i = 0; i < argc; i++)\n+    {\n+      e = a;\n+      a = 9;\n+    }\n+  return d + e;\n+}\n+\n+/* PRE of globals doesn't work.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "aaf09313e79e4c77a3c26a50b1811fe4d7769f92", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre25.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre25.c?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+struct X { int i; };\n+int foo(struct X *a, int argc)\n+{\n+  int b;\n+  int c;\n+  int i;\n+  int d, e;\n+\n+  for (i = 0; i < argc; i++)\n+    {\n+      e = a->i;\n+      a->i = 9;\n+    }\n+  return d + e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"  } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "4f2bc76ff42d06b1598533ef4215e288900e1220", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 17, "deletions": 85, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba404dfe117ce42810220a8a89d8f14435895f9/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3ba404dfe117ce42810220a8a89d8f14435895f9", "patch": "@@ -394,7 +394,6 @@ static alloc_pool binary_node_pool;\n static alloc_pool unary_node_pool;\n static alloc_pool reference_node_pool;\n static alloc_pool comparison_node_pool;\n-static alloc_pool modify_expr_node_pool;\n static bitmap_obstack grand_bitmap_obstack;\n \n /* We can't use allocation pools to hold temporary CALL_EXPR objects, since\n@@ -3046,64 +3045,6 @@ create_value_expr_from (tree expr, basic_block block, VEC (tree, gc) *vuses)\n   return vexpr;\n }\n \n-/* Return a copy of NODE that is stored in the temporary alloc_pool's.\n-   This is made recursively true, so that the operands are stored in\n-   the pool as well.  */\n-\n-static tree\n-poolify_tree (tree node)\n-{\n-  switch  (TREE_CODE (node))\n-    {\n-    case INDIRECT_REF:\n-      {\n-\ttree temp = (tree) pool_alloc (reference_node_pool);\n-\tmemcpy (temp, node, tree_size (node));\n-\tTREE_OPERAND (temp, 0) = poolify_tree (TREE_OPERAND (temp, 0));\n-\treturn temp;\n-      }\n-      break;\n-    case GIMPLE_MODIFY_STMT:\n-      {\n-\ttree temp = (tree) pool_alloc (modify_expr_node_pool);\n-\tmemcpy (temp, node, tree_size (node));\n-\tGIMPLE_STMT_OPERAND (temp, 0) =\n-\t  poolify_tree (GIMPLE_STMT_OPERAND (temp, 0));\n-\tGIMPLE_STMT_OPERAND (temp, 1) =\n-\t  poolify_tree (GIMPLE_STMT_OPERAND (temp, 1));\n-\treturn temp;\n-      }\n-      break;\n-    case SSA_NAME:\n-    case INTEGER_CST:\n-    case STRING_CST:\n-    case REAL_CST:\n-    case FIXED_CST:\n-    case PARM_DECL:\n-    case VAR_DECL:\n-    case RESULT_DECL:\n-      return node;\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-static tree modify_expr_template;\n-\n-/* Allocate a GIMPLE_MODIFY_STMT with TYPE, and operands OP1, OP2 in the\n-   alloc pools and return it.  */\n-static tree\n-poolify_modify_stmt (tree op1, tree op2)\n-{\n-  if (modify_expr_template == NULL)\n-    modify_expr_template = build_gimple_modify_stmt (op1, op2);\n-\n-  GIMPLE_STMT_OPERAND (modify_expr_template, 0) = op1;\n-  GIMPLE_STMT_OPERAND (modify_expr_template, 1) = op2;\n-\n-  return poolify_tree (modify_expr_template);\n-}\n-\n \n /* For each real store operation of the form\n    *a = <value> that we see, create a corresponding fake store of the\n@@ -3134,16 +3075,15 @@ insert_fake_stores (void)\n \t     virtual uses occur in abnormal phis.  */\n \n \t  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n-\t      && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 0)) == INDIRECT_REF\n-\t      && !AGGREGATE_TYPE_P (TREE_TYPE (GIMPLE_STMT_OPERAND (stmt, 0)))\n-\t      && TREE_CODE (TREE_TYPE (GIMPLE_STMT_OPERAND\n-\t\t\t\t\t(stmt, 0))) != COMPLEX_TYPE)\n+\t      && (TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 0)) == INDIRECT_REF\n+\t\t  || handled_component_p (GIMPLE_STMT_OPERAND (stmt, 0)))\n+\t      && !AGGREGATE_TYPE_P (TREE_TYPE (GIMPLE_STMT_OPERAND (stmt, 0))))\n \t    {\n \t      ssa_op_iter iter;\n \t      def_operand_p defp;\n \t      tree lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n \t      tree rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n-\t      tree new_tree;\n+\t      tree new_tree, new_lhs;\n \t      bool notokay = false;\n \n \t      FOR_EACH_SSA_DEF_OPERAND (defp, stmt, iter, SSA_OP_VIRTUAL_DEFS)\n@@ -3162,15 +3102,16 @@ insert_fake_stores (void)\n \t      if (!storetemp || TREE_TYPE (rhs) != TREE_TYPE (storetemp))\n \t\t{\n \t\t  storetemp = create_tmp_var (TREE_TYPE (rhs), \"storetmp\");\n-\t\t  if (TREE_CODE (TREE_TYPE (storetemp)) == VECTOR_TYPE)\n+\t\t  if (TREE_CODE (TREE_TYPE (storetemp)) == VECTOR_TYPE\n+\t\t      || TREE_CODE (TREE_TYPE (storetemp)) == COMPLEX_TYPE)\n \t\t    DECL_GIMPLE_REG_P (storetemp) = 1;\n \t\t  get_var_ann (storetemp);\n \t\t}\n \n-\t      new_tree = poolify_modify_stmt (storetemp, lhs);\n+\t      new_tree = build_gimple_modify_stmt (NULL_TREE, lhs);\n+\t      new_lhs = make_ssa_name (storetemp, new_tree);\n+\t      GIMPLE_STMT_OPERAND (new_tree, 0) = new_lhs;\n \n-\t      lhs = make_ssa_name (storetemp, new_tree);\n-\t      GIMPLE_STMT_OPERAND (new_tree, 0) = lhs;\n \t      create_ssa_artificial_load_stmt (new_tree, stmt, false);\n \n \t      NECESSARY (new_tree) = 0;\n@@ -3196,25 +3137,21 @@ realify_fake_stores (void)\n     {\n       if (NECESSARY (stmt))\n \t{\n-\t  block_stmt_iterator bsi;\n-\t  tree newstmt, tmp;\n+\t  block_stmt_iterator bsi, bsi2;\n+\t  tree rhs;\n \n \t  /* Mark the temp variable as referenced */\n \t  add_referenced_var (SSA_NAME_VAR (GIMPLE_STMT_OPERAND (stmt, 0)));\n \n-\t  /* Put the new statement in GC memory, fix up the\n-\t     SSA_NAME_DEF_STMT on it, and then put it in place of\n-\t     the old statement before the store in the IR stream\n+\t  /* Put the statement before the store in the IR stream\n \t     as a plain ssa name copy.  */\n \t  bsi = bsi_for_stmt (stmt);\n \t  bsi_prev (&bsi);\n-\t  tmp = GIMPLE_STMT_OPERAND (bsi_stmt (bsi), 1);\n-\t  newstmt = build_gimple_modify_stmt (GIMPLE_STMT_OPERAND (stmt, 0),\n-\t\t\t\t\t      tmp);\n-\t  SSA_NAME_DEF_STMT (GIMPLE_STMT_OPERAND (newstmt, 0)) = newstmt;\n-\t  bsi_insert_before (&bsi, newstmt, BSI_SAME_STMT);\n-\t  bsi = bsi_for_stmt (stmt);\n-\t  bsi_remove (&bsi, true);\n+\t  rhs = GIMPLE_STMT_OPERAND (bsi_stmt (bsi), 1);\n+\t  GIMPLE_STMT_OPERAND (stmt, 1) = rhs;\n+\t  bsi2 = bsi_for_stmt (stmt);\n+\t  bsi_remove (&bsi2, true);\n+\t  bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n \t}\n       else\n \trelease_defs (stmt);\n@@ -3818,11 +3755,7 @@ init_pre (bool do_fre)\n \t\t\t\t\t   tree_code_size (ARRAY_REF), 30);\n   comparison_node_pool = create_alloc_pool (\"Comparison tree nodes\",\n \t\t\t\t\t    tree_code_size (EQ_EXPR), 30);\n-  modify_expr_node_pool = create_alloc_pool (\"GIMPLE_MODIFY_STMT nodes\",\n-\t\t\t\t\t     tree_code_size (GIMPLE_MODIFY_STMT),\n-\t\t\t\t\t     30);\n   obstack_init (&temp_call_expr_obstack);\n-  modify_expr_template = NULL;\n \n   FOR_ALL_BB (bb)\n     {\n@@ -3854,7 +3787,6 @@ fini_pre (void)\n   free_alloc_pool (reference_node_pool);\n   free_alloc_pool (unary_node_pool);\n   free_alloc_pool (comparison_node_pool);\n-  free_alloc_pool (modify_expr_node_pool);\n   htab_delete (phi_translate_table);\n   remove_fake_exit_edges ();\n "}]}