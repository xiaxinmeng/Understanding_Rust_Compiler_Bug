{"sha": "a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjMDdmMmQ5ZmQ1NzY3ODZiOThjNmEyZTRmZGIxNzAzOWU1NTExZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-01-13T01:34:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-01-13T01:34:58Z"}, "message": "re PR libstdc++/34730 (Legal program doesn't compile with -D_GLIBCXX_DEBUG)\n\n2008-01-12  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/34730\n\t* include/debug/functions.h (__check_sorted_set,\n\t__check_sorted_set_aux): Add.\n\t(__check_sorted): Check StrictWeakOrdering.\n\t* include/debug/macros.h (__glibcxx_check_strict_weak_ordering,\n\t__glibcxx_check_strict_weak_ordering_pred): Remove.\n\t(__glibcxx_check_sorted, __glibcxx_check_sorted_pred): Adjust.\n\t(__glibcxx_check_sorted_set, __glibcxx_check_sorted_set_pred): Add.\n\t* include/debug/debug.h (__glibcxx_requires_sorted_set,\n\t__glibcxx_requires_sorted_set_pred): Add.\n\t* include/bits/stl_algo.h (merge, includes, set_union,\n\tset_intersection, set_difference, set_symmetric_difference):\n\tAdjust, use __glibcxx_requires_sorted_set* instead. \n\t* testsuite/25_algorithms/set_intersection/34730.cc: New.\n\nFrom-SVN: r131500", "tree": {"sha": "1e46f02ee8df7d4a9f796162ef33a4be1bca271c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e46f02ee8df7d4a9f796162ef33a4be1bca271c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/comments", "author": null, "committer": null, "parents": [{"sha": "5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45"}], "stats": {"total": 255, "additions": 205, "deletions": 50}, "files": [{"sha": "a2b07544335e337fba6bd14960f248ee9d92ef6e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -1,3 +1,20 @@\n+2008-01-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/34730\n+\t* include/debug/functions.h (__check_sorted_set,\n+\t__check_sorted_set_aux): Add.\n+\t(__check_sorted): Check StrictWeakOrdering.\n+\t* include/debug/macros.h (__glibcxx_check_strict_weak_ordering,\n+\t__glibcxx_check_strict_weak_ordering_pred): Remove.\n+\t(__glibcxx_check_sorted, __glibcxx_check_sorted_pred): Adjust.\n+\t(__glibcxx_check_sorted_set, __glibcxx_check_sorted_set_pred): Add.\n+\t* include/debug/debug.h (__glibcxx_requires_sorted_set,\n+\t__glibcxx_requires_sorted_set_pred): Add.\n+\t* include/bits/stl_algo.h (merge, includes, set_union,\n+\tset_intersection, set_difference, set_symmetric_difference):\n+\tAdjust, use __glibcxx_requires_sorted_set* instead. \n+\t* testsuite/25_algorithms/set_intersection/34730.cc: New.\n+\n 2008-01-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/parallel/multiway_merge.h: Reformat to 80 columns;"}, {"sha": "4c65e1154c14c9d6a3b7e3ef967a06f3b9abaf49", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -3034,15 +3034,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       while (__last - __first >= __two_step)\n \t{\n \t  __result = _GLIBCXX_STD_P::merge(__first, __first + __step_size,\n-\t\t\t\t__first + __step_size, __first + __two_step,\n-\t\t\t\t__result);\n+\t\t\t\t\t   __first + __step_size,\n+\t\t\t\t\t   __first + __two_step,\n+\t\t\t\t\t   __result);\n \t  __first += __two_step;\n \t}\n \n       __step_size = std::min(_Distance(__last - __first), __step_size);\n       _GLIBCXX_STD_P::merge(__first, __first + __step_size, \n \t\t\t    __first + __step_size, __last,\n-\t\t __result);\n+\t\t\t    __result);\n     }\n \n   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,\n@@ -3291,8 +3292,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first2 < *__first1)\n@@ -3328,7 +3329,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t   typename _Compare>\n     bool\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t     _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\n+\t     _InputIterator2 __first2, _InputIterator2 __last2,\n+\t     _Compare __comp)\n     {\n       typedef typename iterator_traits<_InputIterator1>::value_type\n \t_ValueType1;\n@@ -3342,8 +3344,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first2, *__first1))\n@@ -5029,8 +5031,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \t{\n@@ -5092,8 +5094,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \t{\n@@ -5237,8 +5239,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \t{\n@@ -5305,8 +5307,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \t{\n@@ -5367,8 +5369,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first1 < *__first2)\n@@ -5425,8 +5427,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2))\n@@ -5480,8 +5482,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first1 < *__first2)\n@@ -5542,8 +5544,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2))\n@@ -5599,8 +5601,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n-      __glibcxx_requires_sorted(__first1, __last1);\n-      __glibcxx_requires_sorted(__first2, __last2);\n+      __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n+      __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first1 < *__first2)\n@@ -5667,8 +5669,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType2, _ValueType1>)\n-      __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n-      __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n+      __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2))"}, {"sha": "97d6824ef0c34cb47a57641f089ba7761a2637de", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -63,6 +63,8 @@ namespace __gnu_debug\n # define __glibcxx_requires_valid_range(_First,_Last)\n # define __glibcxx_requires_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2)\n+# define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n # define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n@@ -119,6 +121,10 @@ namespace std\n      __glibcxx_check_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n      __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2) \\\n+     __glibcxx_check_sorted_set(_First1,_Last1,_First2)\n+# define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred) \\\n+     __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n # define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\t\\\n      __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\t\\"}, {"sha": "7e7562a940d74c90d4cff4e5c8a133299e8e0c62", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005, 2006\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -205,10 +205,9 @@ namespace __gnu_debug\n         return true;\n \n       _ForwardIterator __next = __first;\n-      for (++__next; __next != __last; __first = __next, ++__next) {\n+      for (++__next; __next != __last; __first = __next, ++__next)\n         if (*__next < *__first)\n           return false;\n-      }\n \n       return true;\n     }\n@@ -232,10 +231,9 @@ namespace __gnu_debug\n         return true;\n \n       _ForwardIterator __next = __first;\n-      for (++__next; __next != __last; __first = __next, ++__next) {\n+      for (++__next; __next != __last; __first = __next, ++__next)\n         if (__pred(*__next, *__first))\n           return false;\n-      }\n \n       return true;\n     }\n@@ -247,6 +245,11 @@ namespace __gnu_debug\n     {\n       typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n+\n+      // Verify that the < operator for elements in the sequence is a\n+      // StrictWeakOrdering by checking that it is irreflexive.\n+      _GLIBCXX_DEBUG_ASSERT(__first == __last || !(*__first < *__first));\n+\n       return __check_sorted_aux(__first, __last, _Category());\n     }\n \n@@ -257,10 +260,80 @@ namespace __gnu_debug\n     {\n       typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n-      return __check_sorted_aux(__first, __last, __pred,\n-\t\t\t\t\t     _Category());\n+\n+      // Verify that the predicate is StrictWeakOrdering by checking that it\n+      // is irreflexive.\n+      _GLIBCXX_DEBUG_ASSERT(__first == __last || !__pred(*__first, *__first));\n+\n+      return __check_sorted_aux(__first, __last, __pred, _Category());\n+    }\n+\n+  template<typename _InputIterator1, typename _InputIterator2>\n+    inline bool\n+    __check_sorted_set_aux(const _InputIterator1& __first,\n+\t\t\t   const _InputIterator1& __last,\n+\t\t\t   const _InputIterator2&, std::__true_type)\n+    { return __check_sorted(__first, __last); }\n+\n+  template<typename _InputIterator1, typename _InputIterator2>\n+    inline bool\n+    __check_sorted_set_aux(const _InputIterator1&,\n+\t\t\t   const _InputIterator1&,\n+\t\t\t   const _InputIterator2&, std::__false_type)\n+    { return true; }\n+\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _Predicate>\n+    inline bool\n+    __check_sorted_set_aux(const _InputIterator1& __first,\n+\t\t\t   const _InputIterator1& __last,\n+\t\t\t   const _InputIterator2&, _Predicate __pred,\n+\t\t\t   std::__true_type)\n+    { return __check_sorted(__first, __last, __pred); }\n+\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _Predicate>\n+    inline bool\n+    __check_sorted_set_aux(const _InputIterator1&,\n+\t\t\t   const _InputIterator1&,\n+\t\t\t   const _InputIterator2&, _Predicate,\n+\t\t\t   std::__false_type)\n+    { return true; }\n+\n+  // ... special variant used in std::merge, std::includes, std::set_*.\n+  template<typename _InputIterator1, typename _InputIterator2>\n+    inline bool\n+    __check_sorted_set(const _InputIterator1& __first,\n+\t\t       const _InputIterator1& __last,\n+\t\t       const _InputIterator2&)\n+    {\n+      typedef typename std::iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename std::iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n+      typedef typename std::__are_same<_ValueType1, _ValueType2>::__type\n+\t_SameType;\n+      return __check_sorted_set_aux(__first, __last, _SameType());\n     }\n \n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _Predicate>\n+    inline bool\n+    __check_sorted_set(const _InputIterator1& __first,\n+\t\t       const _InputIterator1& __last,\n+\t\t       const _InputIterator2&, _Predicate __pred)\n+    {\n+      typedef typename std::iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename std::iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n+      typedef typename std::__are_same<_ValueType1, _ValueType2>::__type\n+\t_SameType;\n+      return __check_sorted_set_aux(__first, __last, __pred, _SameType());\n+   }\n+\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 270. Binary search requirements overly strict\n   // Determine if a sequence is partitioned w.r.t. this element."}, {"sha": "6b7b2b277a80846aa416afc99c92ee73b4654c0c", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005, 2006\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -140,21 +140,9 @@ _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_empty)\t        \\\n                       ._M_sequence(*this, \"this\"))\n \n-// Verify that the < operator for elements in the sequence is a\n-// StrictWeakOrdering by checking that it is irreflexive.\n-#define __glibcxx_check_strict_weak_ordering(_First,_Last)\t\\\n-_GLIBCXX_DEBUG_ASSERT(_First == _Last || !(*_First < *_First))\n-\n-// Verify that the predicate is StrictWeakOrdering by checking that it\n-// is irreflexive.\n-#define __glibcxx_check_strict_weak_ordering_pred(_First,_Last,_Pred)\t\\\n-_GLIBCXX_DEBUG_ASSERT(_First == _Last || !_Pred(*_First, *_First))\n-\n-\n // Verify that the iterator range [_First, _Last) is sorted\n #define __glibcxx_check_sorted(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-__glibcxx_check_strict_weak_ordering(_First,_Last);\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last),\t\\\n \t\t      _M_message(__gnu_debug::__msg_unsorted)\t        \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n@@ -164,13 +152,31 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last),\t\\\n     predicate _Pred. */\n #define __glibcxx_check_sorted_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-__glibcxx_check_strict_weak_ordering_pred(_First,_Last,_Pred);\t        \\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n \t\t      _M_message(__gnu_debug::__msg_unsorted_pred)      \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n \n+// Special variant for std::merge, std::includes, std::set_*\n+#define __glibcxx_check_sorted_set(_First1,_Last1,_First2)\t\t\\\n+__glibcxx_check_valid_range(_First1,_Last1);\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(                                                  \\\n+  __gnu_debug::__check_sorted_set(_First1, _Last1, _First2),\t\t\\\n+  _M_message(__gnu_debug::__msg_unsorted)\t\t\t\t\\\n+  ._M_iterator(_First1, #_First1)\t\t\t\t\t\\\n+  ._M_iterator(_Last1, #_Last1))\n+\n+// Likewise with a _Pred.\n+#define __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\t\\\n+__glibcxx_check_valid_range(_First1,_Last1);        \t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(\t\t\t\t\t\t\t\\\n+  __gnu_debug::__check_sorted_set(_First1, _Last1, _First2, _Pred),\t\\\n+  _M_message(__gnu_debug::__msg_unsorted_pred)\t\t\t\t\\\n+  ._M_iterator(_First1, #_First1)\t\t\t\t\t\\\n+  ._M_iterator(_Last1, #_Last1)\t\t\t\t\t\t\\\n+  ._M_string(#_Pred))\n+\n /** Verify that the iterator range [_First, _Last) is partitioned\n     w.r.t. the value _Value. */\n #define __glibcxx_check_partitioned_lower(_First,_Last,_Value)\t\t\\"}, {"sha": "66aef0f99df518fce0de5ec07cb7269ff01e2352", "filename": "libstdc++-v3/testsuite/25_algorithms/set_intersection/34730.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F34730.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c07f2d9fd576786b98c6a2e4fdb17039e5511e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F34730.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F34730.cc?ref=a4c07f2d9fd576786b98c6a2e4fdb17039e5511e", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/34730\n+\n+#include <string>\n+#include <vector>\n+#include <algorithm>\n+\n+using namespace std;\n+\n+typedef pair<int, string> intstring;\n+\n+struct intstrcmp\n+{\n+  bool\n+  operator()(const string& x, const intstring& y) const\n+  { return x < y.second; }\n+\n+  bool\n+  operator()(const intstring& x, const string& y) const\n+  { return x.second < y; }\n+};\n+\n+void test01()\n+{\n+  vector<string> vec1;\n+  vector<intstring> vec2;\n+  vector<intstring> vec3;\n+  set_intersection(vec2.begin(), vec2.end(),\n+\t\t   vec1.begin(), vec1.end(),\n+\t\t   back_inserter(vec3), intstrcmp());\n+}"}]}