{"sha": "d74641bdd752306ad41b4cd3b2f747ec046cb391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0NjQxYmRkNzUyMzA2YWQ0MWI0Y2QzYjJmNzQ3ZWMwNDZjYjM5MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-13T10:28:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-13T10:28:54Z"}, "message": "Add a DECL_EXPR for VLA pointer casts (PR 84305)\n\nThis PR was about a case in which we ended up with a MULT_EXPR\nthat was shared between an ungimplified VLA type and a pointer\ncalculation.  The SSA names used in the pointer calculation were\nlater freed, but they were still there in the VLA, and caused an\nICE when remapping the types during inlinling.\n\nThe fix is to add a DECL_EXPR that forces the VLA type sizes to be\ngimplified too, but the tricky part is deciding where.  As the comment\nin grokdeclarator says, we can't just add it to the statement list,\nsince the size might only be conditionally evaluated.  It might also\nend up being evaluated out of sequence.\n\nThe patch gets around that by putting the DECL_EXPR in a BIND_EXPR\nand adding the BIND_EXPR to the list of things that need to be\nevaluated for the declarator.\n\n2018-02-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/c/\n\tPR c/84305\n\t* c-decl.c (grokdeclarator): Create an anonymous TYPE_DECL\n\tin PARM and TYPENAME contexts too, but attach it to a BIND_EXPR\n\tand include the BIND_EXPR in the list of things that need to be\n\tpre-evaluated.\n\ngcc/testsuite/\n\tPR c/84305\n\t* gcc.c-torture/compile/pr84305.c: New test.\n\nFrom-SVN: r257620", "tree": {"sha": "0654e3daa5437c9ec3e2a82ea51acd552ef3142f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0654e3daa5437c9ec3e2a82ea51acd552ef3142f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74641bdd752306ad41b4cd3b2f747ec046cb391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74641bdd752306ad41b4cd3b2f747ec046cb391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74641bdd752306ad41b4cd3b2f747ec046cb391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74641bdd752306ad41b4cd3b2f747ec046cb391/comments", "author": null, "committer": null, "parents": [{"sha": "5cd1af499d9257f44bff6e4aa85b0a9fa7058e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd1af499d9257f44bff6e4aa85b0a9fa7058e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd1af499d9257f44bff6e4aa85b0a9fa7058e9a"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "f0fd33e9790d584f074899156dee5e5961fe60c5", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d74641bdd752306ad41b4cd3b2f747ec046cb391", "patch": "@@ -1,3 +1,11 @@\n+2018-02-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR c/84305\n+\t* c-decl.c (grokdeclarator): Create an anonymous TYPE_DECL\n+\tin PARM and TYPENAME contexts too, but attach it to a BIND_EXPR\n+\tand include the BIND_EXPR in the list of things that need to be\n+\tpre-evaluated.\n+\n 2018-02-09  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c/84293"}, {"sha": "f0198ec81c36aaa8a3b0f589b5a7336a6b8734ca", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=d74641bdd752306ad41b4cd3b2f747ec046cb391", "patch": "@@ -6479,28 +6479,53 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       type has a name/declaration of it's own, but special attention\n \t       is required if the type is anonymous.\n \n-\t       We handle the NORMAL and FIELD contexts here by attaching an\n-\t       artificial TYPE_DECL to such pointed-to type.  This forces the\n-\t       sizes evaluation at a safe point and ensures it is not deferred\n-\t       until e.g. within a deeper conditional context.\n-\n-\t       We expect nothing to be needed here for PARM or TYPENAME.\n-\t       Pushing a TYPE_DECL at this point for TYPENAME would actually\n-\t       be incorrect, as we might be in the middle of an expression\n-\t       with side effects on the pointed-to type size \"arguments\" prior\n-\t       to the pointer declaration point and the fake TYPE_DECL in the\n-\t       enclosing context would force the size evaluation prior to the\n-\t       side effects.  */\n-\n+\t       We attach an artificial TYPE_DECL to such pointed-to type\n+\t       and arrange for it to be included in a DECL_EXPR.  This\n+\t       forces the sizes evaluation at a safe point and ensures it\n+\t       is not deferred until e.g. within a deeper conditional context.\n+\n+\t       PARM contexts have no enclosing statement list that\n+\t       can hold the DECL_EXPR, so we need to use a BIND_EXPR\n+\t       instead, and add it to the list of expressions that\n+\t       need to be evaluated.\n+\n+\t       TYPENAME contexts do have an enclosing statement list,\n+\t       but it would be incorrect to use it, as the size should\n+\t       only be evaluated if the containing expression is\n+\t       evaluated.  We might also be in the middle of an\n+\t       expression with side effects on the pointed-to type size\n+\t       \"arguments\" prior to the pointer declaration point and\n+\t       the fake TYPE_DECL in the enclosing context would force\n+\t       the size evaluation prior to the side effects.  We therefore\n+\t       use BIND_EXPRs in TYPENAME contexts too.  */\n \t    if (!TYPE_NAME (type)\n-\t\t&& (decl_context == NORMAL || decl_context == FIELD)\n \t\t&& variably_modified_type_p (type, NULL_TREE))\n \t      {\n+\t\ttree bind = NULL_TREE;\n+\t\tif (decl_context == TYPENAME || decl_context == PARM)\n+\t\t  {\n+\t\t    bind = build3 (BIND_EXPR, void_type_node, NULL_TREE,\n+\t\t\t\t   NULL_TREE, NULL_TREE);\n+\t\t    TREE_SIDE_EFFECTS (bind) = 1;\n+\t\t    BIND_EXPR_BODY (bind) = push_stmt_list ();\n+\t\t    push_scope ();\n+\t\t  }\n \t\ttree decl = build_decl (loc, TYPE_DECL, NULL_TREE, type);\n \t\tDECL_ARTIFICIAL (decl) = 1;\n \t\tpushdecl (decl);\n \t\tfinish_decl (decl, loc, NULL_TREE, NULL_TREE, NULL_TREE);\n \t\tTYPE_NAME (type) = decl;\n+\t\tif (bind)\n+\t\t  {\n+\t\t    pop_scope ();\n+\t\t    BIND_EXPR_BODY (bind)\n+\t\t      = pop_stmt_list (BIND_EXPR_BODY (bind));\n+\t\t    if (*expr)\n+\t\t      *expr = build2 (COMPOUND_EXPR, void_type_node, *expr,\n+\t\t\t\t      bind);\n+\t\t    else\n+\t\t      *expr = bind;\n+\t\t  }\n \t      }\n \n \t    type = c_build_pointer_type (type);"}, {"sha": "42bd190a87252d8a95b69688f0c4d61dd29dfcda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d74641bdd752306ad41b4cd3b2f747ec046cb391", "patch": "@@ -1,3 +1,8 @@\n+2018-02-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR c/84305\n+\t* gcc.c-torture/compile/pr84305.c: New test.\n+\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/84335"}, {"sha": "374fa67f593ef01ebf865ab2d9c6db4c6f21efad", "filename": "gcc/testsuite/gcc.c-torture/compile/pr84305.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84305.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74641bdd752306ad41b4cd3b2f747ec046cb391/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84305.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84305.c?ref=d74641bdd752306ad41b4cd3b2f747ec046cb391", "patch": "@@ -0,0 +1,4 @@\n+int res, a, b;\n+void *foo;\n+static void f2 (int arg) { res = ((int (*)[arg][b]) foo)[0][0][0]; }\n+void f1 (void) { f2 (a); }"}]}