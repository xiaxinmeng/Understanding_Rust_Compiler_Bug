{"sha": "34cd1bd74c2afe5a0e14182e7275836d91ed462d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjZDFiZDc0YzJhZmU1YTBlMTQxODJlNzI3NTgzNmQ5MWVkNDYyZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T00:37:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T00:37:56Z"}, "message": "(execute): Don't wait for just any N subprocesses...\n\n(execute): Don't wait for just any N subprocesses, since we may have\nstarted with some subprocesses before we started executing.  Wait just\nfor _our_ N subprocesses.\n\nFrom-SVN: r8746", "tree": {"sha": "342e741ae26dbbfb15dd46ea764ca4d887732553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342e741ae26dbbfb15dd46ea764ca4d887732553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34cd1bd74c2afe5a0e14182e7275836d91ed462d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd1bd74c2afe5a0e14182e7275836d91ed462d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cd1bd74c2afe5a0e14182e7275836d91ed462d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd1bd74c2afe5a0e14182e7275836d91ed462d/comments", "author": null, "committer": null, "parents": [{"sha": "3a96b5ebb4116414c32f5b79dc9964a3c842a0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a96b5ebb4116414c32f5b79dc9964a3c842a0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a96b5ebb4116414c32f5b79dc9964a3c842a0c7"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "d894e3b6bfb743e609db3a99b7e4e3c284d0c800", "filename": "gcc/gcc.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cd1bd74c2afe5a0e14182e7275836d91ed462d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cd1bd74c2afe5a0e14182e7275836d91ed462d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=34cd1bd74c2afe5a0e14182e7275836d91ed462d", "patch": "@@ -1,5 +1,5 @@\n /* Compiler driver program that can handle many languages.\n-   Copyright (C) 1987, 1989, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2276,16 +2276,18 @@ execute ()\n \n   /* Wait for all the subprocesses to finish.\n      We don't care what order they finish in;\n-     we know that N_COMMANDS waits will get them all.  */\n+     we know that N_COMMANDS waits will get them all.\n+     Ignore subprocesses that we don't know about,\n+     since they can be spawned by the process that exec'ed us.  */\n \n   {\n     int ret_code = 0;\n \n-    for (i = 0; i < n_commands; i++)\n+    for (i = 0; i < n_commands; )\n       {\n+\tint j;\n \tint status;\n \tint pid;\n-\tchar *prog = \"unknown\";\n \n #ifdef __MSDOS__\n         status = pid = commands[i].pid;\n@@ -2299,24 +2301,25 @@ execute ()\n \tif (pid < 0)\n \t  abort ();\n \n-\tif (status != 0)\n-\t  {\n-\t    int j;\n-\t    for (j = 0; j < n_commands; j++)\n-\t      if (commands[j].pid == pid)\n-\t\tprog = commands[j].prog;\n-\n-\t    if (WIFSIGNALED (status))\n-\t      {\n-\t\tfatal (\"Internal compiler error: program %s got fatal signal %d\",\n-\t\t       prog, WTERMSIG (status));\n-\t\tsignal_count++;\n-\t\tret_code = -1;\n-\t      }\n-\t    else if (WIFEXITED (status)\n-\t\t     && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n-\t      ret_code = -1;\n-\t  }\n+\tfor (j = 0; j < n_commands; j++)\n+\t  if (commands[j].pid == pid)\n+\t    {\n+\t      i++;\n+\t      if (status != 0)\n+\t\t{\n+\t\t  if (WIFSIGNALED (status))\n+\t\t    {\n+\t\t      fatal (\"Internal compiler error: program %s got fatal signal %d\",\n+\t\t\t     commands[j].prog, WTERMSIG (status));\n+\t\t      signal_count++;\n+\t\t      ret_code = -1;\n+\t\t    }\n+\t\t  else if (WIFEXITED (status)\n+\t\t\t   && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n+\t\t    ret_code = -1;\n+\t\t}\n+\t      break;\n+\t    }\n       }\n     return ret_code;\n   }"}]}