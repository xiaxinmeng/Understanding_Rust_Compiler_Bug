{"sha": "809aff7457150eb0a4d0562ee67a9b826d65ea28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5YWZmNzQ1NzE1MGViMGE0ZDA1NjJlZTY3YTliODI2ZDY1ZWEyOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-13T16:29:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-13T16:29:40Z"}, "message": "alpha.c (alpha_pass_by_reference): Pass un-named SFmode and SCmode arguments by reference.\n\n\t* config/alpha/alpha.c (alpha_pass_by_reference): Pass un-named\n\tSFmode and SCmode arguments by reference.\n\nFrom-SVN: r240116", "tree": {"sha": "475ad053bbfd931f6c9c53bed2daa0d31d1e8c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/475ad053bbfd931f6c9c53bed2daa0d31d1e8c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809aff7457150eb0a4d0562ee67a9b826d65ea28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809aff7457150eb0a4d0562ee67a9b826d65ea28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809aff7457150eb0a4d0562ee67a9b826d65ea28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809aff7457150eb0a4d0562ee67a9b826d65ea28/comments", "author": null, "committer": null, "parents": [{"sha": "254830bab29913361ddd47358d3d90b7d4a49f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254830bab29913361ddd47358d3d90b7d4a49f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254830bab29913361ddd47358d3d90b7d4a49f3d"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "27c83ef885e77b52358a83ffaf35ba543a98db02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809aff7457150eb0a4d0562ee67a9b826d65ea28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809aff7457150eb0a4d0562ee67a9b826d65ea28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=809aff7457150eb0a4d0562ee67a9b826d65ea28", "patch": "@@ -1,3 +1,8 @@\n+2016-09-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_pass_by_reference): Pass un-named\n+\tSFmode and SCmode arguments by reference.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c (selftest::test_one_liner_fixit_insert):\n@@ -6,8 +11,7 @@\n \tfor renaming of add_fixit_insert to add_fixit_insert_before.\n \t(selftest::test_one_liner_fixit_insert_after): New function.\n \t(selftest::test_one_liner_fixit_validation_adhoc_locations):\n-\tUpdate for renaming of add_fixit_insert to\n-\tadd_fixit_insert_before.\n+\tUpdate for renaming of add_fixit_insert to add_fixit_insert_before.\n \t(selftest::test_one_liner_many_fixits): Likewise.\n \t(selftest::test_diagnostic_show_locus_one_liner): Update for\n \trenaming, call new test function.\n@@ -16,25 +20,23 @@\n \t(selftest::test_fixit_consolidation): Likewise.\n \t* diagnostic.c (selftest::test_print_parseable_fixits_insert):\n \tLikewise.\n-\t* edit-context.c (selftest::test_applying_fixits_insert): Rename\n-\tto...\n+\t* edit-context.c (selftest::test_applying_fixits_insert): Rename to...\n \t(selftest::test_applying_fixits_insert_before): ...this.\n \t(selftest::test_applying_fixits_insert): Update for renaming of\n \tadd_fixit_insert to add_fixit_insert_before.\n \t(selftest::test_applying_fixits_insert_after): New function.\n \t(selftest::test_applying_fixits_insert_after_at_line_end): New\n \tfunction.\n-\t(selftest::test_applying_fixits_insert_after_failure): New\n-\tfunction.\n+\t(selftest::test_applying_fixits_insert_after_failure): New function.\n \t(selftest::test_applying_fixits_multiple): Update for renaming of\n \tadd_fixit_insert to add_fixit_insert_before.\n \t(selftest::change_line): Likewise.\n \t(selftest::test_applying_fixits_unreadable_file): Likewise.\n \t(selftest::test_applying_fixits_line_out_of_range): Likewise.\n \t(selftest::test_applying_fixits_column_validation): Likewise.\n \t(selftest::test_applying_fixits_column_validation): Likewise.\n-\t(selftest::edit_context_c_tests): Update for renamed test\n-\tfunction; call new test functions.\n+\t(selftest::edit_context_c_tests): Update for renamed test function;\n+\tcall new test functions.\n \n 2016-09-13  Pat Haugen  <pthaugen@us.ibm.com>\n "}, {"sha": "81cef4ee387cd4d133e79a97803ee61ee29cc8a2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809aff7457150eb0a4d0562ee67a9b826d65ea28/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809aff7457150eb0a4d0562ee67a9b826d65ea28/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=809aff7457150eb0a4d0562ee67a9b826d65ea28", "patch": "@@ -5754,8 +5754,29 @@ static bool\n alpha_pass_by_reference (cumulative_args_t ca ATTRIBUTE_UNUSED,\n \t\t\t machine_mode mode,\n \t\t\t const_tree type ATTRIBUTE_UNUSED,\n-\t\t\t bool named ATTRIBUTE_UNUSED)\n+\t\t\t bool named)\n {\n+  /* Pass float and _Complex float variable arguments by reference.\n+     This avoids 64-bit store from a FP register to a pretend args save area\n+     and subsequent 32-bit load from the saved location to a FP register.\n+\n+     Note that 32-bit loads and stores to/from a FP register on alpha reorder\n+     bits to form a canonical 64-bit value in the FP register.  This fact\n+     invalidates compiler assumption that 32-bit FP value lives in the lower\n+     32-bits of the passed 64-bit FP value, so loading the 32-bit value from\n+     the stored 64-bit location using 32-bit FP load is invalid on alpha.\n+\n+     This introduces sort of ABI incompatibility, but until _Float32 was\n+     introduced, C-family languages promoted 32-bit float variable arg to\n+     a 64-bit double, and it was not allowed to pass float as a varible\n+     argument.  Passing _Complex float as a variable argument never\n+     worked on alpha.  Thus, we have no backward compatibility issues\n+     to worry about, and passing unpromoted _Float32 and _Complex float\n+     as a variable argument will actually work in the future.  */\n+\n+  if (mode == SFmode || mode == SCmode)\n+    return !named;\n+\n   return mode == TFmode || mode == TCmode;\n }\n "}]}