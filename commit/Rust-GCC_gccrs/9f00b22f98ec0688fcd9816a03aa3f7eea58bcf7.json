{"sha": "9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwMGIyMmY5OGVjMDY4OGZjZDk4MTZhMDNhYTNmN2VlYTU4YmNmNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-27T19:19:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-02T21:40:23Z"}, "message": "analyzer: detect malloc, free, calloc within \"std\" [PR93959]\n\nPR analyzer/93959 reported that g++.dg/analyzer/malloc.C was failing\nwith no output on Solaris.\n\nThe issue is that <stdlib.h> there has \"using std::free;\", converting\nall the \"free\" calls to std::free, which fails the name-matching via\nis_named_call_p.\n\nThis patch implements an is_std_named_call_p variant of is_named_call_p\nto check for the name within \"std\", and uses it in sm-malloc.c to check\nfor std::malloc, std::calloc, and std::free.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93959\n\t* analyzer.cc (is_std_function_p): New function.\n\t(is_std_named_call_p): New functions.\n\t* analyzer.h (is_std_named_call_p): New decl.\n\t* sm-malloc.cc (malloc_state_machine::on_stmt): Check for \"std::\"\n\tvariants when checking for malloc, calloc and free.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93959\n\t* g++.dg/analyzer/cstdlib-2.C: New test.\n\t* g++.dg/analyzer/cstdlib.C: New test.", "tree": {"sha": "e3ee554f9d502225feb1db5f03b3ba60ad26c356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ee554f9d502225feb1db5f03b3ba60ad26c356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd14f288ddf246d40f109aa7999b99a44739cd99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd14f288ddf246d40f109aa7999b99a44739cd99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd14f288ddf246d40f109aa7999b99a44739cd99"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "e5d7bdbbf7e0458cbe7db83254bc51d68cf8e5e9", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -1,3 +1,12 @@\n+2020-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93959\n+\t* analyzer.cc (is_std_function_p): New function.\n+\t(is_std_named_call_p): New functions.\n+\t* analyzer.h (is_std_named_call_p): New decl.\n+\t* sm-malloc.cc (malloc_state_machine::on_stmt): Check for \"std::\"\n+\tvariants when checking for malloc, calloc and free.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93950"}, {"sha": "8bc3ce49f07be6b2d9138720ab95f87ef1d49892", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -86,6 +86,49 @@ is_named_call_p (tree fndecl, const char *funcname)\n   return 0 == strcmp (tname, funcname);\n }\n \n+/* Return true if FNDECL is within the namespace \"std\".\n+   Compare with cp/typeck.c: decl_in_std_namespace_p, but this doesn't\n+   rely on being the C++ FE (or handle inline namespaces inside of std).  */\n+\n+static inline bool\n+is_std_function_p (const_tree fndecl)\n+{\n+  tree name_decl = DECL_NAME (fndecl);\n+  if (!name_decl)\n+    return false;\n+  if (!DECL_CONTEXT (fndecl))\n+    return false;\n+  if (TREE_CODE (DECL_CONTEXT (fndecl)) != NAMESPACE_DECL)\n+    return false;\n+  tree ns = DECL_CONTEXT (fndecl);\n+  if (!(DECL_CONTEXT (ns) == NULL_TREE\n+\t|| TREE_CODE (DECL_CONTEXT (ns)) == TRANSLATION_UNIT_DECL))\n+    return false;\n+  if (!DECL_NAME (ns))\n+    return false;\n+  return id_equal (\"std\", DECL_NAME (ns));\n+}\n+\n+/* Like is_named_call_p, but look for std::FUNCNAME.  */\n+\n+bool\n+is_std_named_call_p (tree fndecl, const char *funcname)\n+{\n+  gcc_assert (fndecl);\n+  gcc_assert (funcname);\n+\n+  if (!is_std_function_p (fndecl))\n+    return false;\n+\n+  tree identifier = DECL_NAME (fndecl);\n+  const char *name = IDENTIFIER_POINTER (identifier);\n+  const char *tname = name;\n+\n+  /* Don't disregard prefix _ or __ in FNDECL's name.  */\n+\n+  return 0 == strcmp (tname, funcname);\n+}\n+\n /* Helper function for checkers.  Is FNDECL an extern fndecl at file scope\n    that has the given FUNCNAME, and does CALL have the given number of\n    arguments?  */\n@@ -106,6 +149,24 @@ is_named_call_p (tree fndecl, const char *funcname,\n   return true;\n }\n \n+/* Like is_named_call_p, but check for std::FUNCNAME.  */\n+\n+bool\n+is_std_named_call_p (tree fndecl, const char *funcname,\n+\t\t     const gcall *call, unsigned int num_args)\n+{\n+  gcc_assert (fndecl);\n+  gcc_assert (funcname);\n+\n+  if (!is_std_named_call_p (fndecl, funcname))\n+    return false;\n+\n+  if (gimple_call_num_args (call) != num_args)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Return true if stmt is a setjmp or sigsetjmp call.  */\n \n bool"}, {"sha": "5364edb3d96a348151bcea7dbdbdda523865f8dd", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -78,6 +78,8 @@ extern bool is_special_named_call_p (const gcall *call, const char *funcname,\n extern bool is_named_call_p (tree fndecl, const char *funcname);\n extern bool is_named_call_p (tree fndecl, const char *funcname,\n \t\t\t     const gcall *call, unsigned int num_args);\n+extern bool is_std_named_call_p (tree fndecl, const char *funcname,\n+\t\t\t\t const gcall *call, unsigned int num_args);\n extern bool is_setjmp_call_p (const gcall *call);\n extern bool is_longjmp_call_p (const gcall *call);\n "}, {"sha": "aaef695936270ffbcb8acd430947d55dfcb43139", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -611,6 +611,8 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n       {\n \tif (is_named_call_p (callee_fndecl, \"malloc\", call, 1)\n \t    || is_named_call_p (callee_fndecl, \"calloc\", call, 2)\n+\t    || is_std_named_call_p (callee_fndecl, \"malloc\", call, 1)\n+\t    || is_std_named_call_p (callee_fndecl, \"calloc\", call, 2)\n \t    || is_named_call_p (callee_fndecl, \"__builtin_malloc\", call, 1)\n \t    || is_named_call_p (callee_fndecl, \"__builtin_calloc\", call, 2))\n \t  {\n@@ -640,6 +642,7 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n \t  }\n \n \tif (is_named_call_p (callee_fndecl, \"free\", call, 1)\n+\t    || is_std_named_call_p (callee_fndecl, \"free\", call, 1)\n \t    || is_named_call_p (callee_fndecl, \"__builtin_free\", call, 1))\n \t  {\n \t    tree arg = gimple_call_arg (call, 0);"}, {"sha": "33fa9bc972b40085ee8cc1fecd30e88224a8e0fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -1,3 +1,9 @@\n+2020-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93959\n+\t* g++.dg/analyzer/cstdlib-2.C: New test.\n+\t* g++.dg/analyzer/cstdlib.C: New test.\n+\n 2020-03-02  Iain Sandoe  <iain@sandoe.co.uk>\n \t    Jun Ma <JunMa@linux.alibaba.com>\n "}, {"sha": "0dedf8aef5c10f37aaa1b129ed4018e2b72c7876", "filename": "gcc/testsuite/g++.dg/analyzer/cstdlib-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib-2.C?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -0,0 +1,25 @@\n+/* Manual reimplemenation of <cstdlib>, to test name-matching within std.  */\n+\n+namespace std\n+{\n+  typedef __SIZE_TYPE__ size_t;\n+  void *malloc (std::size_t size);\n+  void *calloc (std::size_t num, std::size_t size);\n+  void free (void *ptr);\n+}\n+\n+void test_1 (void *ptr)\n+{\n+  std::free (ptr); /* { dg-message \"first 'free' here\" } */\n+  std::free (ptr); /* { dg-warning \"double-'free' of 'ptr'\" } */\n+}\n+\n+void test_2 (void)\n+{\n+  void *p = std::malloc (1024); /* { dg-message \"allocated here\" } */\n+} /* { dg-warning \"leak of 'p'\" } */\n+\n+void test_3 (void)\n+{\n+  void *p = std::calloc (42, 1024); /* { dg-message \"allocated here\" } */\n+} /* { dg-warning \"leak of 'p'\" } */"}, {"sha": "ec6327bf884d6c0d2c3bec8e7aa6e4a0910c62a2", "filename": "gcc/testsuite/g++.dg/analyzer/cstdlib.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fcstdlib.C?ref=9f00b22f98ec0688fcd9816a03aa3f7eea58bcf7", "patch": "@@ -0,0 +1,17 @@\n+#include <cstdlib>\n+\n+void test_1 (void *ptr)\n+{\n+  std::free (ptr); /* { dg-message \"first 'free' here\" } */\n+  std::free (ptr); /* { dg-warning \"double-'free' of 'ptr'\" } */\n+}\n+\n+void test_2 (void)\n+{\n+  void *p = std::malloc (1024); /* { dg-message \"allocated here\" } */\n+} /* { dg-warning \"leak of 'p'\" } */\n+\n+void test_3 (void)\n+{\n+  void *p = std::calloc (42, 1024); /* { dg-message \"allocated here\" } */\n+} /* { dg-warning \"leak of 'p'\" } */"}]}