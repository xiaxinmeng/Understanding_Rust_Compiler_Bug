{"sha": "9da40aae23180fc9d240b762e4fea154df546570", "node_id": "C_kwDOANBUbNoAKDlkYTQwYWFlMjMxODBmYzlkMjQwYjc2MmU0ZmVhMTU0ZGY1NDY1NzA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T15:37:21Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:42:22Z"}, "message": "RISC-V: Add indexed loads/stores constraints testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vlxei-vsxei-constraint-1.c: New test.", "tree": {"sha": "52643c80841ca6f39e1e870aea9e330c6a055ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52643c80841ca6f39e1e870aea9e330c6a055ead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9da40aae23180fc9d240b762e4fea154df546570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da40aae23180fc9d240b762e4fea154df546570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da40aae23180fc9d240b762e4fea154df546570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da40aae23180fc9d240b762e4fea154df546570/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfacebd2d6458b0774c76b7b2afbcc22bc43e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfacebd2d6458b0774c76b7b2afbcc22bc43e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfacebd2d6458b0774c76b7b2afbcc22bc43e4c"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "56e599391fd9eed70ba4c709c73f4189cff86803", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlxei-vsxei-constraint-1.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da40aae23180fc9d240b762e4fea154df546570/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlxei-vsxei-constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da40aae23180fc9d240b762e4fea154df546570/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlxei-vsxei-constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlxei-vsxei-constraint-1.c?ref=9da40aae23180fc9d240b762e4fea154df546570", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+** \tvsetivli\\s+zero,4,e32,mf2,tu,m[au]\n+** \tvlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+  vfloat32mf2_t v = __riscv_vlse32_v_f32mf2 (in, 0, 4);\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vfloat32mf2_t v2 = __riscv_vluxei8_v_f32mf2_tu (v, in, index, 4);\n+  __riscv_vsoxei8_v_f32mf2 (out, index, v2, 4);\n+}\n+\n+/*\n+** f2:\n+** \tvsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\n+** \tvlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\n+** \tvsetivli\\s+zero,4,e32,mf2,\\s*t[au],\\s*m[au]\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+,v0.t\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+  vbool64_t mask = *(vbool64_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vfloat32mf2_t v = __riscv_vlse32_v_f32mf2 (in, 0, 4);\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vfloat32mf2_t v2 = __riscv_vluxei8_v_f32mf2_m (mask, in, index, 4);\n+  __riscv_vsoxei8_v_f32mf2 (out, index, v2, 4);\n+}\n+\n+/*\n+** f3:\n+** \tvsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\n+** \tvlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\n+** \tvsetivli\\s+zero,\\s*4,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\n+** \tvlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+,v0.t\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f3 (void * in, void * in2, void *out)\n+{\n+  vbool64_t mask = *(vbool64_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vfloat32mf2_t v = __riscv_vlse32_v_f32mf2 (in, 0, 4);\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vfloat32mf2_t v2 = __riscv_vluxei8_v_f32mf2_tumu (mask, v, in, index, 4);\n+  __riscv_vsoxei8_v_f32mf2 (out, index, v2, 4);\n+}\n+\n+/*\n+** f4:\n+** \tvsetivli\\s+zero,4,e8,mf8,tu,\\s*m[au]\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f4 (void * in, void * in2, void *out)\n+{\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vint8mf8_t v = __riscv_vluxei8_v_i8mf8 (in, index, 4);\n+  vint8mf8_t v2 = __riscv_vluxei8_v_i8mf8_tu (v, in, index, 4);\n+  __riscv_vsoxei8_v_i8mf8 (out, index, v2, 4);\n+}\n+\n+/*\n+** f5:\n+** \tvsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\n+** \tvlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\n+** \tvsetivli\\s+zero,4,e8,mf8,t[au],m[au]\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+,v0.t\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f5 (void * in, void * in2, void *out)\n+{\n+  vbool64_t mask = *(vbool64_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vint8mf8_t v = __riscv_vluxei8_v_i8mf8 (in, index, 4);\n+  vint8mf8_t v2 = __riscv_vluxei8_v_i8mf8_m (mask, in, index, 4);\n+  __riscv_vsoxei8_v_i8mf8 (out, index, v2, 4);\n+}\n+\n+/*\n+** f6:\n+** \tvsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\n+** \tvlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\n+** \tvsetivli\\s+zero,4,e8,mf8,tu,mu\n+** \tvlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),zero\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tvluxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+,v0.t\n+** \tvsoxei8\\.v\\s+v[0-9]+,\\s*\\([a-x0-9]+\\),\\s*v[0-9]+\n+** \tret\n+*/\n+void f6 (void * in, void * in2, void *out)\n+{\n+  vbool64_t mask = *(vbool64_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vuint8mf8_t index = __riscv_vlse8_v_u8mf8 (in2, 0, 4);\n+  vint8mf8_t v = __riscv_vluxei8_v_i8mf8 (in, index, 4);\n+  vint8mf8_t v2 = __riscv_vluxei8_v_i8mf8_tumu (mask, v, in, index, 4);\n+  __riscv_vsoxei8_v_i8mf8 (out, index, v2, 4);\n+}"}]}