{"sha": "44cd321ed8bd28102f04abe2aa04db015d0e36d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjZDMyMWVkOGJkMjgxMDJmMDRhYmUyYWEwNGRiMDE1ZDBlMzZkNQ==", "commit": {"author": {"name": "Pete Steinmetz", "email": "steinmtz@us.ibm.com", "date": "2006-11-01T20:47:53Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2006-11-01T20:47:53Z"}, "message": "invoke.texi: Add cpu_type power6x (RS/6000 and PowerPC Options): Add -mmfpgpr.\n\n\t* doc/invoke.texi: Add cpu_type power6x\n\t(RS/6000 and PowerPC Options): Add -mmfpgpr.\n\t* config.gcc: Add cpu_type power6x.\n\t* configure.ac: Add test for mf{t,f}gpr instructions.\n\t(HAVE_AS_MFPGPR): New.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* config/rs6000/aix52.h (ASM_CPU_SPEC): Add power6x.\n\t* config/rs6000/rs6000.md (define_attr \"type\"): Add insert_dword,\n\tshift,trap,var_shift_rotate,cntlz,exts, var_delayed_compare, mffgpr\n\tand mftgpr attributes.\n\t(define_attr \"cpu\"): Add power6.\n\tChange instruction sequences to use new attributes.\n\t(floatsidf2,fix_truncdfsi2): use TARGET_MFPGPR.\n\t(fix_truncdfsi2_mfpgpr): New.\n\t(floatsidf_ppc64_mfpgpr): New.\n\t(floatsidf_ppc64): Added !TARGET_MFPGPR condition.\n\t(movdf_hardfloat64_mfpgpr,movdi_mfpgpr): New.\n\t(movdf_hardfloat64): Added !TARGET_MFPGPR condition.\n\t(movdi_internal64): Added !TARGET_MFPGPR and related conditions.\n\t(fix_truncdfsi2): Use gpc_reg_operand constraint.\n\t* config/rs6000/{6xx.md,power4.md,8540.md,603.md,mpc.md,\n\t7xx.md,rios2.md,7450.md,440.md,rios1.md,rs64.md,power5.md,40x.md}:\n\tAdd descriptions for insert_dword, shift,trap,var_shift_rotate,\n\tcntlz,exts and var_delayed_compare.\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n\t_ARCH_PWR6X, if features enabled.\n\t* config/rs6000/rs6000.opt (mmfpgpr): New.\n\t* config/rs6000/rs6000.c (rs6000_align_branch_targets): New variable.\n\t(cached_can_issue_more): New variable.\n\t(processor_costs): Add power6_cost.\n\t(rs6000_sched_init): New function.\n\t(is_dispatch_slot_restricted): Deleted.\n\t(set_to_load_agen): New function.\n\t(is_load_insn,is_store_insn): New functions.\n\t(adjacent_mem_locations): New function.\n\t(insn_must_be_first_in_group): New function.\n\t(insn_must_be_last_in_group): New function.\n\t(rs6000_sched_reorder): New function.\n\t(rs6000_sched_reorder2): New function.\n\t(TARGET_SCHED_INIT,TARGET_SCHED_REORDER,\n\tTARGET_SCHED_REORDER2): Define.\n\t(processor_target_table): Use PROCESSOR_POWER6 for power6.\n\tAdd power6x. Add MASK_MFPGPR for power6x.\n\t(POWERPC_MASKS): Add MASK_MFPGPR.\n\t(rs6000_override_options): Set rs6000_always_hint to false\n\tfor power6.  Set rs6000_align_branch_targets. Replace\n\trs6000_sched_groups check with rs6000_align_branch_targets.\n\tUse PROCESSOR_POWER6.\n\t(last_scheduled_insn): New variable.\n\t(load_store_pendulum): New variable.\n\t(rs6000_variable_issue): Set last_scheduled_insn and\n\tcached_can_issue_more.\n\t(rs6000_adjust_cost): Add power6 cost adjustments.\n\t(rs6000_adjust_priority): Replace is_dispatch_slot_restricted\n\twith insn_must_be_first_in_group. Add power6 priority adjustments.\n\t(rs6000_issue_rate): Add CPU_POWER6.\n\t(insn_terminates_group_p): Use insn_must_be_{first,last}_in_group.\n\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_POWER6.\n\t(TARGET_MFPGPR): New.\n\t(SECONDARY_MEMORY_NEEDED): Use TARGET_MFPGPR.\n\t(ASM_CPU_SPEC): Add power6x.\n\t(SECONDARY_MEMORY_NEEDED): Added mode!=DFmode and mode!=DImode\n\tconditions.\n\t* config/rs6000/power6.md: New file.\n\n\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r118396", "tree": {"sha": "ab3ea16dc1830623b6ebf0ec731c8c624fddb22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3ea16dc1830623b6ebf0ec731c8c624fddb22a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44cd321ed8bd28102f04abe2aa04db015d0e36d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cd321ed8bd28102f04abe2aa04db015d0e36d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cd321ed8bd28102f04abe2aa04db015d0e36d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cd321ed8bd28102f04abe2aa04db015d0e36d5/comments", "author": {"login": "steinmtz", "id": 51826110, "node_id": "MDQ6VXNlcjUxODI2MTEw", "avatar_url": "https://avatars.githubusercontent.com/u/51826110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steinmtz", "html_url": "https://github.com/steinmtz", "followers_url": "https://api.github.com/users/steinmtz/followers", "following_url": "https://api.github.com/users/steinmtz/following{/other_user}", "gists_url": "https://api.github.com/users/steinmtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/steinmtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steinmtz/subscriptions", "organizations_url": "https://api.github.com/users/steinmtz/orgs", "repos_url": "https://api.github.com/users/steinmtz/repos", "events_url": "https://api.github.com/users/steinmtz/events{/privacy}", "received_events_url": "https://api.github.com/users/steinmtz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "293be7fd22c09dafed1a8d44fe4a63ff61901cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293be7fd22c09dafed1a8d44fe4a63ff61901cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293be7fd22c09dafed1a8d44fe4a63ff61901cb0"}], "stats": {"total": 2594, "additions": 2131, "deletions": 463}, "files": [{"sha": "e3a24355f37ff0405b02b9f0551635eaf8860935", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -1,3 +1,72 @@\n+2006-11-01  Pete Steinmetz  <steinmtz@us.ibm.com>\n+\t    Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* doc/invoke.texi: Add cpu_type power6x\n+\t(RS/6000 and PowerPC Options): Add -mmfpgpr.\n+\t* config.gcc: Add cpu_type power6x.\n+\t* configure.ac: Add test for mf{t,f}gpr instructions.\n+\t(HAVE_AS_MFPGPR): New.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* config/rs6000/aix52.h (ASM_CPU_SPEC): Add power6x.\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): Add insert_dword,\n+\tshift,trap,var_shift_rotate,cntlz,exts, var_delayed_compare, mffgpr\n+\tand mftgpr attributes.\n+\t(define_attr \"cpu\"): Add power6.\n+\tChange instruction sequences to use new attributes.\n+\t(floatsidf2,fix_truncdfsi2): use TARGET_MFPGPR.\n+\t(fix_truncdfsi2_mfpgpr): New.\n+\t(floatsidf_ppc64_mfpgpr): New.\n+\t(floatsidf_ppc64): Added !TARGET_MFPGPR condition.\n+\t(movdf_hardfloat64_mfpgpr,movdi_mfpgpr): New.\n+\t(movdf_hardfloat64): Added !TARGET_MFPGPR condition.\n+\t(movdi_internal64): Added !TARGET_MFPGPR and related conditions.\n+\t(fix_truncdfsi2): Use gpc_reg_operand constraint.\n+\t* config/rs6000/{6xx.md,power4.md,8540.md,603.md,mpc.md,\n+\t7xx.md,rios2.md,7450.md,440.md,rios1.md,rs64.md,power5.md,40x.md}:\n+\tAdd descriptions for insert_dword, shift,trap,var_shift_rotate,\n+\tcntlz,exts and var_delayed_compare.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n+\t_ARCH_PWR6X, if features enabled.\n+\t* config/rs6000/rs6000.opt (mmfpgpr): New.\n+\t* config/rs6000/rs6000.c (rs6000_align_branch_targets): New variable.\n+\t(cached_can_issue_more): New variable.\n+\t(processor_costs): Add power6_cost.\n+\t(rs6000_sched_init): New function.\n+\t(is_dispatch_slot_restricted): Deleted.\n+\t(set_to_load_agen): New function.\n+\t(is_load_insn,is_store_insn): New functions.\n+\t(adjacent_mem_locations): New function.\n+\t(insn_must_be_first_in_group): New function.\n+\t(insn_must_be_last_in_group): New function.\n+\t(rs6000_sched_reorder): New function.\n+\t(rs6000_sched_reorder2): New function.\n+\t(TARGET_SCHED_INIT,TARGET_SCHED_REORDER,\n+\tTARGET_SCHED_REORDER2): Define.\n+\t(processor_target_table): Use PROCESSOR_POWER6 for power6.\n+\tAdd power6x. Add MASK_MFPGPR for power6x.\n+\t(POWERPC_MASKS): Add MASK_MFPGPR.\n+\t(rs6000_override_options): Set rs6000_always_hint to false\n+\tfor power6.  Set rs6000_align_branch_targets. Replace\n+\trs6000_sched_groups check with rs6000_align_branch_targets.\n+\tUse PROCESSOR_POWER6.\n+\t(last_scheduled_insn): New variable.\n+\t(load_store_pendulum): New variable.\n+\t(rs6000_variable_issue): Set last_scheduled_insn and\n+\tcached_can_issue_more.\n+\t(rs6000_adjust_cost): Add power6 cost adjustments.\n+\t(rs6000_adjust_priority): Replace is_dispatch_slot_restricted\n+\twith insn_must_be_first_in_group. Add power6 priority adjustments.\n+\t(rs6000_issue_rate): Add CPU_POWER6.\n+\t(insn_terminates_group_p): Use insn_must_be_{first,last}_in_group.\n+\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_POWER6.\n+\t(TARGET_MFPGPR): New.\n+\t(SECONDARY_MEMORY_NEEDED): Use TARGET_MFPGPR.\n+\t(ASM_CPU_SPEC): Add power6x.\n+\t(SECONDARY_MEMORY_NEEDED): Added mode!=DFmode and mode!=DImode\n+\tconditions.\n+\t* config/rs6000/power6.md: New file.\n+\n 2006-11-01  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* tree-pretty-print.c (dump_generic_node) <INTEGER_CST>: Use"}, {"sha": "fcdb89c8e71c834b2079815eda4208a264012e45", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -303,7 +303,7 @@ powerpc*-*-*)\n \textra_headers=\"ppc-asm.h altivec.h spe.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n-\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456]|xrs64a)\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456]|xpower6x|xrs64a)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n@@ -2870,7 +2870,7 @@ case \"${target}\" in\n \t\t\t\teval \"with_$which=405\"\n \t\t\t\t;;\n \t\t\t\"\" | common \\\n-\t\t\t| power | power[23456] | powerpc | powerpc64 \\\n+\t\t\t| power | power[23456] | power6x | powerpc | powerpc64 \\\n \t\t\t| rios | rios1 | rios2 | rsc | rsc1 | rs64a \\\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 505 \\\n \t\t\t| 601 | 602 | 603 | 603e | ec603e | 604 \\"}, {"sha": "0f5f01164554c33d1e80397cec4d956c755297a5", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -233,6 +233,12 @@\n #endif\n \n \n+/* Define if your assembler supports mffgpr and mftgpr. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MFPGPR\n+#endif\n+\n+\n /* Define if your assembler supports the -no-mul-bug-abort option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_NO_MUL_BUG_ABORT_OPTION"}, {"sha": "5f963e93721c66bff97dd30af4c8062b40d303be", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -38,7 +38,8 @@\n   \"iu_40x\")\n \n (define_insn_reservation \"ppc403-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n \n@@ -53,7 +54,8 @@\n   \"iu_40x,iu_40x,iu_40x\")\n \n (define_insn_reservation \"ppc403-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x,nothing,bpu_40x\")\n "}, {"sha": "38ce1660ab5f5bf87dab6622503335fef0415abd", "filename": "gcc/config/rs6000/440.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -55,7 +55,8 @@\n   \"ppc440_issue,ppc440_l_pipe\")\n \n (define_insn_reservation \"ppc440-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,\\\n+                        trap,var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_i_pipe|ppc440_j_pipe\")\n "}, {"sha": "c35b872e08f5f5c4fb8835100a815b9a5aeba7db", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -59,7 +59,8 @@\n   \"lsu_603\")\n \n (define_insn_reservation \"ppc603-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"iu_603\")\n \n@@ -90,7 +91,8 @@\n   \"iu_603*37\")\n \n (define_insn_reservation \"ppc603-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"iu_603,nothing,bpu_603\")\n "}, {"sha": "9c7ce9ae9a91632c5ff4f30686d173c3a5e0b629", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -74,7 +74,8 @@\n   \"lsu_6xx\")\n   \n (define_insn_reservation \"ppc604-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"iu1_6xx|iu2_6xx\")\n \n@@ -139,7 +140,8 @@\n   \"mciu_6xx*36\")\n \n (define_insn_reservation \"ppc604-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"(iu1_6xx|iu2_6xx)\")\n "}, {"sha": "61893e0b37e29deaa93172e80712d9a578c43de4", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -75,7 +75,8 @@\n   \"ppc7450_du,lsu_7450\")\n \n (define_insn_reservation \"ppc7450-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,\\\n+                        trap,var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,iu1_7450|iu2_7450|iu3_7450\")\n \n@@ -106,7 +107,8 @@\n   \"ppc7450_du,mciu_7450*23\")\n \n (define_insn_reservation \"ppc7450-compare\" 2\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,(iu1_7450|iu2_7450|iu3_7450)\")\n "}, {"sha": "68542c7ead9ff9afa0ef31bbd03ddf80564c796c", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -65,7 +65,8 @@\n   \"ppc750_du,lsu_7xx\")\n \n (define_insn_reservation \"ppc750-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,\\\n+                        trap,var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,iu1_7xx|iu2_7xx\")\n \n@@ -100,7 +101,8 @@\n   \"ppc750_du,iu1_7xx*19\")\n \n (define_insn_reservation \"ppc750-compare\" 2\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,(iu1_7xx|iu2_7xx)\")\n "}, {"sha": "91781af7f5717add8e699852e125752ee2ae7535", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -85,7 +85,9 @@\n \n ;; Simple SU insns\n (define_insn_reservation \"ppc8540_su\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word,cmp,compare,delayed_compare,fast_compare\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,cmp,compare,\\\n+                        delayed_compare,var_delayed_compare,fast_compare,\\\n+                        shift,trap,var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"ppc8540\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n "}, {"sha": "8a2ae8ab21d54cb462f43fa7e69d35f4dee74ab1", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -69,6 +69,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=power5: -m620} \\\n %{mcpu=power5+: -m620} \\\n %{mcpu=power6: -m620} \\\n+%{mcpu=power6x: -m620} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rs64a: -mppc} \\\n %{mcpu=603: -m603} \\"}, {"sha": "5c62a1d133be183d34feff800ff7896d43caaf32", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -58,9 +58,9 @@ extern int dot_symbols;\n #endif\n \n #undef  PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_POWER4\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER6\n #undef  PROCESSOR_DEFAULT64\n-#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER6\n \n /* We don't need to generate entries in .fixup, except when\n    -mrelocatable or -mrelocatable-lib is given.  */"}, {"sha": "20064de8af6819c9287d20ce363e437441f02042", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -43,7 +43,8 @@\n   \"lsu_mpc\")\n \n (define_insn_reservation \"mpccore-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"iu_mpc\")\n \n@@ -69,7 +70,8 @@\n   \"mciu_mpc*6\")\n \n (define_insn_reservation \"mpccore-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"iu_mpc,nothing,bpu_mpc\")\n "}, {"sha": "d379ed998c585cc783d5951043db578fa48358cf", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -183,7 +183,8 @@\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power4-integer\" 2\n-  (and (eq_attr \"type\" \"integer\")\n+  (and (eq_attr \"type\" \"integer,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"iq_power4\")\n \n@@ -220,7 +221,7 @@\n   \"iq_power4\")\n \n (define_insn_reservation \"power4-compare\" 2\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"compare,delayed_compare,var_delayed_compare\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4+du2_power4,iu1_power4,iu2_power4)\\\n   |(du2_power4+du3_power4,iu2_power4,iu2_power4)\\"}, {"sha": "d765a2795ad215ffdb3c0a2f44f297ab6486527d", "filename": "gcc/config/rs6000/power5.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -144,7 +144,8 @@\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power5-integer\" 2\n-  (and (eq_attr \"type\" \"integer\")\n+  (and (eq_attr \"type\" \"integer,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"iq_power5\")\n \n@@ -179,7 +180,7 @@\n   \"iq_power5\")\n \n (define_insn_reservation \"power5-compare\" 2\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"compare,delayed_compare,var_delayed_compare\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,iu1_power5,iu2_power5\")\n "}, {"sha": "0768f67fe1a0c916996289b1a2387038084f2097", "filename": "gcc/config/rs6000/power6.md", "status": "added", "additions": 569, "deletions": 0, "changes": 569, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -0,0 +1,569 @@\n+;; Scheduling description for IBM POWER6 processor.\n+;;   Copyright (C) 2006 Free Software Foundation, Inc.\n+;;   Contributed by Peter Steinmetz (steinmtz@us.ibm.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+;; MA 02110-1301, USA.\n+\n+;; Sources:\n+\n+;; The POWER6 has 2 iu, 2 fpu, 2 lsu, and 1 bu/cru unit per engine \n+;; (2 engines per chip).  The chip can issue up to 5 internal ops \n+;; per cycle.\n+\n+(define_automaton \"power6iu,power6lsu,power6fpu,power6bu\")\n+\n+(define_cpu_unit \"iu1_power6,iu2_power6\" \"power6iu\")\n+(define_cpu_unit \"lsu1_power6,lsu2_power6\" \"power6lsu\")\n+(define_cpu_unit \"bpu_power6\" \"power6bu\")\n+(define_cpu_unit \"fpu1_power6,fpu2_power6\" \"power6fpu\")\n+\n+(define_reservation \"LS2_power6\"\n+                    \"lsu1_power6+lsu2_power6\")\n+\n+(define_reservation \"FPU_power6\"\n+                    \"fpu1_power6|fpu2_power6\")\n+\n+(define_reservation \"BRU_power6\"\n+                    \"bpu_power6\")\n+\n+(define_reservation \"LSU_power6\"\n+                    \"lsu1_power6|lsu2_power6\")\n+\n+(define_reservation \"LSF_power6\"\n+                    \"(lsu1_power6+fpu1_power6)\\\n+                    |(lsu1_power6+fpu2_power6)\\\n+                    |(lsu2_power6+fpu1_power6)\\\n+                    |(lsu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"LX2_power6\"\n+                    \"(iu1_power6+iu2_power6+lsu1_power6)\\\n+                    |(iu1_power6+iu2_power6+lsu2_power6)\")\n+\n+(define_reservation \"FX2_power6\"\n+                    \"iu1_power6+iu2_power6\")\n+\n+(define_reservation \"X2F_power6\"\n+                    \"(iu1_power6+iu2_power6+fpu1_power6)\\\n+                    |(iu1_power6+iu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"BX2_power6\"\n+                    \"iu1_power6+iu2_power6+bpu_power6\")\n+\n+(define_reservation \"LSX_power6\"\n+                    \"(iu1_power6+lsu1_power6)\\\n+                    |(iu1_power6+lsu2_power6)\\\n+                    |(iu2_power6+lsu1_power6)\\\n+                    |(iu2_power6+lsu2_power6)\")\n+\n+(define_reservation \"FXU_power6\"\n+                    \"iu1_power6|iu2_power6\")\n+\n+(define_reservation \"XLF_power6\"\n+                    \"(iu1_power6+lsu1_power6+fpu1_power6)\\\n+                    |(iu1_power6+lsu1_power6+fpu2_power6)\\\n+                    |(iu1_power6+lsu2_power6+fpu1_power6)\\\n+                    |(iu1_power6+lsu2_power6+fpu2_power6)\\\n+                    |(iu2_power6+lsu1_power6+fpu1_power6)\\\n+                    |(iu2_power6+lsu1_power6+fpu2_power6)\\\n+                    |(iu2_power6+lsu2_power6+fpu1_power6)\\\n+                    |(iu2_power6+lsu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"BRX_power6\"\n+                    \"(bpu_power6+iu1_power6)\\\n+                    |(bpu_power6+iu2_power6)\")\n+\n+; Load/store\n+\n+; The default for a value written by a fixed point load\n+; that is read/written by a subsequent fixed point op.\n+(define_insn_reservation \"power6-load\" 2 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point load is used as the source value on\n+; a store.\n+(define_bypass 1 \"power6-load,\\\n+                  power6-load-update,\\\n+                  power6-load-update-indexed\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-load-ext\" 4 ; fx\n+  (and (eq_attr \"type\" \"load_ext\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point load ext is used as the source value on\n+; a store.\n+(define_bypass 1 \"power6-load-ext,\\\n+                  power6-load-ext-update,\\\n+\t          power6-load-ext-update-indexed\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-load-update\" 2 ; fx\n+  (and (eq_attr \"type\" \"load_u\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-update-indexed\" 2 ; fx\n+  (and (eq_attr \"type\" \"load_ux\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-ext-update\" 4 ; fx\n+  (and (eq_attr \"type\" \"load_ext_u\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-ext-update-indexed\" 4 ; fx\n+  (and (eq_attr \"type\" \"load_ext_ux\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-fpload\" 1\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-fpload-update\" 1\n+  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-store\" 14\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-store-update\" 14\n+  (and (eq_attr \"type\" \"store_u\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-store-update-indexed\" 14\n+  (and (eq_attr \"type\" \"store_ux\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LX2_power6\")\n+\n+(define_insn_reservation \"power6-fpstore\" 14\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSF_power6\")\n+\n+(define_insn_reservation \"power6-fpstore-update\" 14\n+  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"XLF_power6\")\n+\n+(define_insn_reservation \"power6-larx\" 3\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LS2_power6\")\n+\n+(define_insn_reservation \"power6-stcx\" 10 ; best case\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-sync\" 11 ; N/A\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-integer\" 1\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-exts\" 1\n+  (and (eq_attr \"type\" \"exts\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-shift\" 1\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-insert\" 1\n+  (and (eq_attr \"type\" \"insert_word\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FX2_power6\")\n+\n+(define_insn_reservation \"power6-insert-dword\" 1\n+  (and (eq_attr \"type\" \"insert_dword\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FX2_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point op is used as the source value on a\n+; store.\n+(define_bypass 1 \"power6-integer,\\\n+                  power6-exts,\\\n+                  power6-shift,\\\n+                  power6-insert,\\\n+                  power6-insert-dword\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-cntlz\" 2\n+  (and (eq_attr \"type\" \"cntlz\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_bypass 1 \"power6-cntlz\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-var-rotate\" 4\n+  (and (eq_attr \"type\" \"var_shift_rotate\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-trap\" 1 ; N/A\n+  (and (eq_attr \"type\" \"trap\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRX_power6\")\n+\n+(define_insn_reservation \"power6-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6,iu1_power6)\\\n+  |(iu1_power6+iu2_power6,nothing)\\\n+  |(iu1_power6,iu2_power6)\\\n+  |(iu2_power6,iu1_power6)\\\n+  |(iu2_power6,iu2_power6)\")\n+\n+(define_insn_reservation \"power6-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6,iu1_power6,iu1_power6)\\\n+  |(iu1_power6,iu1_power6,iu2_power6)\\\n+  |(iu1_power6,iu2_power6,iu1_power6)\\\n+  |(iu1_power6,iu2_power6,iu2_power6)\\\n+  |(iu2_power6,iu1_power6,iu1_power6)\\\n+  |(iu2_power6,iu1_power6,iu2_power6)\\\n+  |(iu2_power6,iu2_power6,iu1_power6)\\\n+  |(iu2_power6,iu2_power6,iu2_power6)\\\n+  |(iu1_power6+iu2_power6,iu1_power6)\\\n+  |(iu1_power6+iu2_power6,iu2_power6)\\\n+  |(iu1_power6,iu1_power6+iu2_power6)\\\n+  |(iu2_power6,iu1_power6+iu2_power6)\")\n+\n+(define_insn_reservation \"power6-cmp\" 1\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-compare\" 1\n+  (and (eq_attr \"type\" \"compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-fast-compare\" 1\n+  (and (eq_attr \"type\" \"fast_compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point rec form op is used as the source value\n+; on a store.\n+(define_bypass 1 \"power6-compare,\\\n+                  power6-fast-compare\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-delayed-compare\" 2 ; N/A\n+  (and (eq_attr \"type\" \"delayed_compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-var-delayed-compare\" 4\n+  (and (eq_attr \"type\" \"var_delayed_compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-lmul-cmp\" 16\n+  (and (eq_attr \"type\" \"lmul_compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul-cmp\" 16\n+  (and (eq_attr \"type\" \"imul_compare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-lmul\" 16\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul\" 16\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul3\" 16\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_bypass 9 \"power6-imul,\\\n+                  power6-lmul,\\\n+                  power6-imul-cmp,\\\n+                  power6-lmul-cmp,\\\n+                  power6-imul3\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-idiv\" 44\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*44+iu2_power6*44+fpu1_power6*44)\\\n+  |(iu1_power6*44+iu2_power6*44+fpu2_power6*44)\");\n+\n+; The latency for this bypass is yet to be defined\n+;(define_bypass ? \"power6-idiv\"\n+;                 \"power6-store,\\\n+;                  power6-store-update,\\\n+;                  power6-store-update-indexed,\\\n+;                  power6-fpstore,\\\n+;                  power6-fpstore-update\"\n+;  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-ldiv\" 56\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*56+iu2_power6*56+fpu1_power6*56)\\\n+  |(iu1_power6*56+iu2_power6*56+fpu2_power6*56)\");\n+\n+; The latency for this bypass is yet to be defined\n+;(define_bypass ? \"power6-ldiv\"\n+;                 \"power6-store,\\\n+;                  power6-store-update,\\\n+;                  power6-store-update-indexed,\\\n+;                  power6-fpstore,\\\n+;                  power6-fpstore-update\"\n+;  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+(define_bypass 5 \"power6-mtjmpr\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_bypass 5 \"power6-branch\" \"power6-mtjmpr\")\n+\n+(define_insn_reservation \"power6-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_bypass 3 \"power6-crlogical\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-delayedcr\" 3\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_insn_reservation \"power6-mfcr\" 6 ; N/A\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+; mfcrf (1 field)\n+(define_insn_reservation \"power6-mfcrf\" 3 ; N/A\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\") ;\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power6-mtcr\" 4 ; N/A\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+(define_bypass 9 \"power6-mtcr\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-fp\" 6\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+; Any fp instruction that updates a CR has a latency\n+; of 6 to a dependent branch\n+(define_bypass 6 \"power6-fp\" \"power6-branch\")\n+\n+(define_bypass 1 \"power6-fp\"\n+                 \"power6-fpstore,power6-fpstore-update\"\n+  \"store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 12 \"power6-fpcompare\"\n+                  \"power6-branch,power6-crlogical\")\n+\n+(define_insn_reservation \"power6-sdiv\" 26\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-ddiv\" 32\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-sqrt\" 30\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-dsqrt\" 42\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-isync\" 2 ; N/A \n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-vecload\" 1\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-vecstore\" 1\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSF_power6\")\n+\n+(define_insn_reservation \"power6-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 6 \"power6-vecsimple\" \"power6-veccomplex,\\\n+                                     power6-vecperm\")\n+\n+(define_bypass 5 \"power6-vecsimple\" \"power6-vecfloat\")\n+\n+(define_bypass 4 \"power6-vecsimple\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-veccmp\" 1\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-veccmp\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-vecfloat\" 7\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-vecfloat\" \"power6-vecsimple\")\n+\n+(define_bypass 11 \"power6-vecfloat\" \"power6-veccomplex,\\\n+                                     power6-vecperm\")\n+\n+(define_bypass 9 \"power6-vecfloat\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-veccomplex\" 7\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-veccomplex\" \"power6-vecsimple,\\\n+                                       power6-vecfloat\" )\n+\n+(define_bypass 9 \"power6-veccomplex\" \"power6-vecperm\" )\n+\n+(define_bypass 8 \"power6-veccomplex\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-vecperm\" 4\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 7 \"power6-vecperm\" \"power6-vecsimple,\\\n+                                   power6-vecfloat\" )\n+\n+(define_bypass 6 \"power6-vecperm\" \"power6-veccomplex\" )\n+\n+(define_bypass 5 \"power6-vecperm\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-mftgpr\" 8\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"X2F_power6\")\n+\n+(define_insn_reservation \"power6-mffgpr\" 14\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LX2_power6\")\n+\n+(define_bypass 4 \"power6-mftgpr\" \"power6-imul,\\\n+                                  power6-lmul,\\\n+                                  power6-imul-cmp,\\\n+                                  power6-lmul-cmp,\\\n+                                  power6-imul3,\\\n+                                  power6-idiv,\\\n+                                  power6-ldiv\" )"}, {"sha": "028d2739a46fd2e43b8d92b32d8d34c6530eb2e6", "filename": "gcc/config/rs6000/rios1.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frios1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frios1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios1.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -52,7 +52,8 @@\n   \"iu_rios1+fpu_rios1\")\n \n (define_insn_reservation \"rios1-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,\\\n+                        trap,var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n   \"iu_rios1\")\n \n@@ -104,12 +105,13 @@\n   \"iu_rios1,nothing*2,bpu_rios1\")\n \n (define_insn_reservation \"rios1-delayed_compare\" 5\n-  (and (eq_attr \"type\" \"delayed_compare\")\n+  (and (eq_attr \"type\" \"delayed_compare,var_delayed_compare\")\n        (eq_attr \"cpu\" \"rios1\"))\n   \"iu_rios1,nothing*3,bpu_rios1\")\n \n (define_insn_reservation \"ppc601-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_rios1,nothing,bpu_rios1\")\n "}, {"sha": "baaab892ac22c067795347a4cf7a5f29c4a3749f", "filename": "gcc/config/rs6000/rios2.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios2.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -40,7 +40,8 @@\n   \"iu1_rios2|iu2_rios2\")\n \n (define_insn_reservation \"rios2-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                         var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"iu1_rios2|iu2_rios2\")\n \n@@ -67,7 +68,8 @@\n ; compare executes on integer unit, but feeds insns which\n ; execute on the branch unit.\n (define_insn_reservation \"rios2-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare,\\\n+                        var_delayed_compare\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"(iu1_rios2|iu2_rios2),nothing,bpu_rios2\")\n "}, {"sha": "94d4a6a8c3bf294bbe3b8a2692dd5b97fd1f2bf9", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -106,6 +106,8 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     builtin_define (\"_ARCH_PWR5\");\n   if (TARGET_FPRND)\n     builtin_define (\"_ARCH_PWR5X\");\n+  if (TARGET_MFPGPR)\n+    builtin_define (\"_ARCH_PWR6X\");\n   if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n     builtin_define (\"_ARCH_COM\");\n   if (TARGET_ALTIVEC)"}, {"sha": "9d784aeb50dd745e66699dc8450da8008028040f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 822, "deletions": 123, "changes": 945, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -145,6 +145,9 @@ static GTY(()) bool rs6000_always_hint;\n /* Schedule instructions for group formation.  */\n static GTY(()) bool rs6000_sched_groups;\n \n+/* Align branch targets.  */\n+static GTY(()) bool rs6000_align_branch_targets;\n+\n /* Support for -msched-costly-dep option.  */\n const char *rs6000_sched_costly_dep_str;\n enum rs6000_dependence_cost rs6000_sched_costly_dep;\n@@ -235,6 +238,10 @@ static enum {\n int toc_initialized;\n char toc_label_name[10];\n \n+/* Cached value of rs6000_variable_issue. This is cached in\n+   rs6000_variable_issue hook and returned from rs6000_sched_reorder2.  */\n+static short cached_can_issue_more;\n+\n static GTY(()) section *read_only_data_section;\n static GTY(()) section *private_data_section;\n static GTY(()) section *read_only_private_data_section;\n@@ -572,6 +579,21 @@ struct processor_costs power4_cost = {\n   COSTS_N_INSNS (17),   /* ddiv */\n };\n \n+/* Instruction costs on POWER6 processors.  */\n+static const\n+struct processor_costs power6_cost = {\n+  COSTS_N_INSNS (8),    /* mulsi */\n+  COSTS_N_INSNS (8),    /* mulsi_const */\n+  COSTS_N_INSNS (8),    /* mulsi_const9 */\n+  COSTS_N_INSNS (8),    /* muldi */\n+  COSTS_N_INSNS (22),   /* divsi */\n+  COSTS_N_INSNS (28),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (13),   /* sdiv */\n+  COSTS_N_INSNS (16),   /* ddiv */\n+};\n+\n \f\n static bool rs6000_function_ok_for_sibcall (tree, tree);\n static const char *rs6000_invalid_within_doloop (rtx);\n@@ -647,20 +669,28 @@ static void rs6000_xcoff_file_end (void);\n static int rs6000_variable_issue (FILE *, int, rtx, int);\n static bool rs6000_rtx_costs (rtx, int, int, int *);\n static int rs6000_adjust_cost (rtx, rtx, rtx, int);\n+static void rs6000_sched_init (FILE *, int, int);\n static bool is_microcoded_insn (rtx);\n-static int is_dispatch_slot_restricted (rtx);\n static bool is_cracked_insn (rtx);\n static bool is_branch_slot_insn (rtx);\n+static bool is_load_insn (rtx);\n+static bool is_store_insn (rtx);\n+static bool set_to_load_agen (rtx,rtx);\n+static bool adjacent_mem_locations (rtx,rtx); \n static int rs6000_adjust_priority (rtx, int);\n static int rs6000_issue_rate (void);\n static bool rs6000_is_costly_dependence (rtx, rtx, rtx, int, int);\n static rtx get_next_active_insn (rtx, rtx);\n static bool insn_terminates_group_p (rtx , enum group_termination);\n+static bool insn_must_be_first_in_group (rtx);\n+static bool insn_must_be_last_in_group (rtx);\n static bool is_costly_group (rtx *, rtx);\n static int force_new_group (int, FILE *, rtx *, rtx, bool *, int, int *);\n static int redefine_groups (FILE *, int, rtx, rtx);\n static int pad_groups (FILE *, int, rtx, rtx);\n static void rs6000_sched_finish (FILE *, int);\n+static int rs6000_sched_reorder (FILE *, int, rtx *, int *, int);\n+static int rs6000_sched_reorder2 (FILE *, int, rtx *, int *, int);\n static int rs6000_use_sched_lookahead (void);\n static tree rs6000_builtin_mask_for_load (void);\n \n@@ -908,8 +938,14 @@ static const char alt_reg_names[][8] =\n #define TARGET_SCHED_ADJUST_PRIORITY rs6000_adjust_priority\n #undef TARGET_SCHED_IS_COSTLY_DEPENDENCE\n #define TARGET_SCHED_IS_COSTLY_DEPENDENCE rs6000_is_costly_dependence\n+#undef TARGET_SCHED_INIT\n+#define TARGET_SCHED_INIT rs6000_sched_init\n #undef TARGET_SCHED_FINISH\n #define TARGET_SCHED_FINISH rs6000_sched_finish\n+#undef TARGET_SCHED_REORDER\n+#define TARGET_SCHED_REORDER rs6000_sched_reorder\n+#undef TARGET_SCHED_REORDER2\n+#define TARGET_SCHED_REORDER2 rs6000_sched_reorder2\n \n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD rs6000_use_sched_lookahead\n@@ -1194,9 +1230,12 @@ rs6000_override_options (const char *default_cpu)\n \t {\"power5+\", PROCESSOR_POWER5,\n \t  POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT\n \t  | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND},\n- \t {\"power6\", PROCESSOR_POWER5,\n+ \t {\"power6\", PROCESSOR_POWER6,\n \t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_MFCRF | MASK_POPCNTB\n \t  | MASK_FPRND},\n+\t {\"power6x\", PROCESSOR_POWER6,\n+\t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_MFCRF | MASK_POPCNTB\n+\t  | MASK_FPRND | MASK_MFPGPR},\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n@@ -1223,7 +1262,7 @@ rs6000_override_options (const char *default_cpu)\n     POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n \t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n-\t\t     | MASK_DLMZB)\n+\t\t     | MASK_DLMZB | MASK_MFPGPR)\n   };\n \n   rs6000_init_hard_regno_mode_ok ();\n@@ -1399,9 +1438,13 @@ rs6000_override_options (const char *default_cpu)\n     }\n \n   rs6000_always_hint = (rs6000_cpu != PROCESSOR_POWER4\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER5);\n+\t\t\t&& rs6000_cpu != PROCESSOR_POWER5\n+                        && rs6000_cpu != PROCESSOR_POWER6);\n   rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t || rs6000_cpu == PROCESSOR_POWER5);\n+  rs6000_align_branch_targets = (rs6000_cpu == PROCESSOR_POWER4\n+                                 || rs6000_cpu == PROCESSOR_POWER5\n+                                 || rs6000_cpu == PROCESSOR_POWER6);\n \n   rs6000_sched_restricted_insns_priority\n     = (rs6000_sched_groups ? 1 : 0);\n@@ -1470,7 +1513,7 @@ rs6000_override_options (const char *default_cpu)\n   /* Set branch target alignment, if not optimizing for size.  */\n   if (!optimize_size)\n     {\n-      if (rs6000_sched_groups)\n+      if (rs6000_align_branch_targets)\n \t{\n \t  if (align_functions <= 0)\n \t    align_functions = 16;\n@@ -1569,6 +1612,10 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_cost = &power4_cost;\n \tbreak;\n \n+      case PROCESSOR_POWER6:\n+\trs6000_cost = &power6_cost;\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n       }\n@@ -16461,6 +16508,16 @@ output_function_profiler (FILE *file, int labelno)\n }\n \n \f\n+\n+/* The following variable value is the last issued insn.  */\n+\n+static rtx last_scheduled_insn;\n+\n+/* The following variable helps to balance issuing of load and\n+   store instructions */\n+\n+static int load_store_pendulum;\n+\n /* Power4 load update and store update instructions are cracked into a\n    load or store and an integer insn which are executed in the same cycle.\n    Branches have their own dispatch slot which does not count against the\n@@ -16472,19 +16529,34 @@ rs6000_variable_issue (FILE *stream ATTRIBUTE_UNUSED,\n \t\t       int verbose ATTRIBUTE_UNUSED,\n \t\t       rtx insn, int more)\n {\n+  last_scheduled_insn = insn;\n   if (GET_CODE (PATTERN (insn)) == USE\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n-    return more;\n+    {\n+      cached_can_issue_more = more;\n+      return cached_can_issue_more;\n+    }\n+\n+  if (insn_terminates_group_p (insn, current_group))\n+    {\n+      cached_can_issue_more = 0;\n+      return cached_can_issue_more;\n+    }\n \n   if (rs6000_sched_groups)\n     {\n       if (is_microcoded_insn (insn))\n-\treturn 0;\n+        cached_can_issue_more = 0;\n       else if (is_cracked_insn (insn))\n-\treturn more > 2 ? more - 2 : 0;\n+        cached_can_issue_more = more > 2 ? more - 2 : 0;\n+      else\n+        cached_can_issue_more = more - 1;\n+\n+      return cached_can_issue_more;\n     }\n \n-  return more - 1;\n+  cached_can_issue_more = more - 1;\n+  return cached_can_issue_more;\n }\n \n /* Adjust the cost of a scheduling dependency.  Return the new cost of\n@@ -16493,64 +16565,285 @@ rs6000_variable_issue (FILE *stream ATTRIBUTE_UNUSED,\n static int\n rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n {\n+  enum attr_type attr_type;\n+\n   if (! recog_memoized (insn))\n     return 0;\n \n-  if (REG_NOTE_KIND (link) != 0)\n-    return 0;\n+  switch (REG_NOTE_KIND (link))\n+    {\n+    case REG_DEP_TRUE:\n+      {\n+        /* Data dependency; DEP_INSN writes a register that INSN reads\n+\t   some cycles later.  */\n+\n+        /* Separate a load from a narrower, dependent store.  */\n+        if (rs6000_sched_groups\n+            && GET_CODE (PATTERN (insn)) == SET\n+            && GET_CODE (PATTERN (dep_insn)) == SET\n+            && GET_CODE (XEXP (PATTERN (insn), 1)) == MEM\n+            && GET_CODE (XEXP (PATTERN (dep_insn), 0)) == MEM\n+            && (GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (insn), 1)))\n+                > GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (dep_insn), 0)))))\n+          return cost + 14;\n+\n+        attr_type = get_attr_type (insn);\n+\n+        switch (attr_type)\n+          {\n+          case TYPE_JMPREG:\n+            /* Tell the first scheduling pass about the latency between\n+               a mtctr and bctr (and mtlr and br/blr).  The first\n+               scheduling pass will not know about this latency since\n+               the mtctr instruction, which has the latency associated\n+               to it, will be generated by reload.  */\n+            return TARGET_POWER ? 5 : 4;\n+          case TYPE_BRANCH:\n+            /* Leave some extra cycles between a compare and its\n+               dependent branch, to inhibit expensive mispredicts.  */\n+            if ((rs6000_cpu_attr == CPU_PPC603\n+                 || rs6000_cpu_attr == CPU_PPC604\n+                 || rs6000_cpu_attr == CPU_PPC604E\n+                 || rs6000_cpu_attr == CPU_PPC620\n+                 || rs6000_cpu_attr == CPU_PPC630\n+                 || rs6000_cpu_attr == CPU_PPC750\n+                 || rs6000_cpu_attr == CPU_PPC7400\n+                 || rs6000_cpu_attr == CPU_PPC7450\n+                 || rs6000_cpu_attr == CPU_POWER4\n+                 || rs6000_cpu_attr == CPU_POWER5)\n+                && recog_memoized (dep_insn)\n+                && (INSN_CODE (dep_insn) >= 0))\n+              \n+              switch (get_attr_type (dep_insn))\n+                {\n+                case TYPE_CMP:\n+                case TYPE_COMPARE:\n+                case TYPE_DELAYED_COMPARE:\n+                case TYPE_IMUL_COMPARE:\n+                case TYPE_LMUL_COMPARE:\n+                case TYPE_FPCOMPARE:\n+                case TYPE_CR_LOGICAL:\n+                case TYPE_DELAYED_CR:\n+                    return cost + 2;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+            break;\n+\n+          case TYPE_STORE:\n+          case TYPE_STORE_U:\n+          case TYPE_STORE_UX:\n+          case TYPE_FPSTORE:\n+          case TYPE_FPSTORE_U:\n+          case TYPE_FPSTORE_UX:\n+            if ((rs6000_cpu == PROCESSOR_POWER6)\n+                && recog_memoized (dep_insn)\n+                && (INSN_CODE (dep_insn) >= 0))\n+              {\n+\n+                if (GET_CODE (PATTERN (insn)) != SET)\n+                  /* If this happens, we have to extend this to schedule\n+                     optimally.  Return default for now.  */\n+                  return cost;\n+\n+                /* Adjust the cost for the case where the value written\n+                   by a fixed point operation is used as the address\n+                   gen value on a store. */\n+                switch (get_attr_type (dep_insn))\n+                  {\n+                  case TYPE_LOAD:\n+                  case TYPE_LOAD_U:\n+                  case TYPE_LOAD_UX:\n+                  case TYPE_CNTLZ:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 4;\n+                      break;\n+                    }\n+                  case TYPE_LOAD_EXT:\n+                  case TYPE_LOAD_EXT_U:\n+                  case TYPE_LOAD_EXT_UX:\n+                  case TYPE_VAR_SHIFT_ROTATE:\n+                  case TYPE_VAR_DELAYED_COMPARE:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 6;\n+                      break;\n+                      }\n+                  case TYPE_INTEGER:\n+                  case TYPE_COMPARE:\n+                  case TYPE_FAST_COMPARE:\n+                  case TYPE_EXTS:\n+                  case TYPE_SHIFT:\n+                  case TYPE_INSERT_WORD:\n+                  case TYPE_INSERT_DWORD:\n+                  case TYPE_FPLOAD_U:\n+                  case TYPE_FPLOAD_UX:\n+                  case TYPE_STORE_U:\n+                  case TYPE_STORE_UX:\n+                  case TYPE_FPSTORE_U:\n+                  case TYPE_FPSTORE_UX:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 3;\n+                      break;\n+                    }\n+                  case TYPE_IMUL:\n+                  case TYPE_IMUL2:\n+                  case TYPE_IMUL3:\n+                  case TYPE_LMUL:\n+                  case TYPE_IMUL_COMPARE:\n+                  case TYPE_LMUL_COMPARE:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 17;\n+                      break;\n+                    }\n+                  case TYPE_IDIV:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 45;\n+                      break;\n+                    }\n+                  case TYPE_LDIV:\n+                    {\n+                      if (! store_data_bypass_p (dep_insn, insn))\n+                        return 57;\n+                      break;\n+                    }\n+                  default:\n+                    break;\n+                  }\n+              }\n+              break;\n+\n+          case TYPE_LOAD:\n+          case TYPE_LOAD_U:\n+          case TYPE_LOAD_UX:\n+          case TYPE_LOAD_EXT:\n+          case TYPE_LOAD_EXT_U:\n+          case TYPE_LOAD_EXT_UX:\n+            if ((rs6000_cpu == PROCESSOR_POWER6)\n+                && recog_memoized (dep_insn)\n+                && (INSN_CODE (dep_insn) >= 0))\n+              {\n+\n+                /* Adjust the cost for the case where the value written\n+                   by a fixed point instruction is used within the address\n+                   gen portion of a subsequent load(u)(x) */\n+                switch (get_attr_type (dep_insn))\n+                  {\n+                  case TYPE_LOAD:\n+                  case TYPE_LOAD_U:\n+                  case TYPE_LOAD_UX:\n+                  case TYPE_CNTLZ:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 4;\n+                      break;\n+                    }\n+                  case TYPE_LOAD_EXT:\n+                  case TYPE_LOAD_EXT_U:\n+                  case TYPE_LOAD_EXT_UX:\n+                  case TYPE_VAR_SHIFT_ROTATE:\n+                  case TYPE_VAR_DELAYED_COMPARE:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 6;\n+                      break;\n+                    }\n+                  case TYPE_INTEGER:\n+                  case TYPE_COMPARE:\n+                  case TYPE_FAST_COMPARE:\n+                  case TYPE_EXTS:\n+                  case TYPE_SHIFT:\n+                  case TYPE_INSERT_WORD:\n+                  case TYPE_INSERT_DWORD:\n+                  case TYPE_FPLOAD_U:\n+                  case TYPE_FPLOAD_UX:\n+                  case TYPE_STORE_U:\n+                  case TYPE_STORE_UX:\n+                  case TYPE_FPSTORE_U:\n+                  case TYPE_FPSTORE_UX:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 3;\n+                      break;\n+                    }\n+                  case TYPE_IMUL:\n+                  case TYPE_IMUL2:\n+                  case TYPE_IMUL3:\n+                  case TYPE_LMUL:\n+                  case TYPE_IMUL_COMPARE:\n+                  case TYPE_LMUL_COMPARE:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 17;\n+                      break;\n+                    }\n+                  case TYPE_IDIV:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 45;\n+                      break;\n+                    }\n+                  case TYPE_LDIV:\n+                    {\n+                      if (set_to_load_agen (dep_insn, insn))\n+                        return 57;\n+                      break;\n+                    }\n+                  default:\n+                    break;\n+                  }\n+              }\n+            break;\n+\n+          case TYPE_FPLOAD:\n+            if ((rs6000_cpu == PROCESSOR_POWER6)\n+                && recog_memoized (dep_insn)\n+                && (INSN_CODE (dep_insn) >= 0)\n+                && (get_attr_type (dep_insn) == TYPE_MFFGPR))\n+              return 2;\n+\n+          default:\n+            break;\n+          }\n \n-  if (REG_NOTE_KIND (link) == 0)\n-    {\n-      /* Data dependency; DEP_INSN writes a register that INSN reads\n-\t some cycles later.  */\n-\n-      /* Separate a load from a narrower, dependent store.  */\n-      if (rs6000_sched_groups\n-\t  && GET_CODE (PATTERN (insn)) == SET\n-\t  && GET_CODE (PATTERN (dep_insn)) == SET\n-\t  && GET_CODE (XEXP (PATTERN (insn), 1)) == MEM\n-\t  && GET_CODE (XEXP (PATTERN (dep_insn), 0)) == MEM\n-\t  && (GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (insn), 1)))\n-\t      > GET_MODE_SIZE (GET_MODE (XEXP (PATTERN (dep_insn), 0)))))\n-\treturn cost + 14;\n-\n-      switch (get_attr_type (insn))\n-\t{\n-\tcase TYPE_JMPREG:\n-\t  /* Tell the first scheduling pass about the latency between\n-\t     a mtctr and bctr (and mtlr and br/blr).  The first\n-\t     scheduling pass will not know about this latency since\n-\t     the mtctr instruction, which has the latency associated\n-\t     to it, will be generated by reload.  */\n-\t  return TARGET_POWER ? 5 : 4;\n-\tcase TYPE_BRANCH:\n-\t  /* Leave some extra cycles between a compare and its\n-\t     dependent branch, to inhibit expensive mispredicts.  */\n-\t  if ((rs6000_cpu_attr == CPU_PPC603\n-\t       || rs6000_cpu_attr == CPU_PPC604\n-\t       || rs6000_cpu_attr == CPU_PPC604E\n-\t       || rs6000_cpu_attr == CPU_PPC620\n-\t       || rs6000_cpu_attr == CPU_PPC630\n-\t       || rs6000_cpu_attr == CPU_PPC750\n-\t       || rs6000_cpu_attr == CPU_PPC7400\n-\t       || rs6000_cpu_attr == CPU_PPC7450\n-\t       || rs6000_cpu_attr == CPU_POWER4\n-\t       || rs6000_cpu_attr == CPU_POWER5)\n-\t      && recog_memoized (dep_insn)\n-\t      && (INSN_CODE (dep_insn) >= 0)\n-\t      && (get_attr_type (dep_insn) == TYPE_CMP\n-\t\t  || get_attr_type (dep_insn) == TYPE_COMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_DELAYED_COMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_IMUL_COMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_LMUL_COMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_FPCOMPARE\n-\t\t  || get_attr_type (dep_insn) == TYPE_CR_LOGICAL\n-\t\t  || get_attr_type (dep_insn) == TYPE_DELAYED_CR))\n-\t    return cost + 2;\n-\tdefault:\n-\t  break;\n-\t}\n       /* Fall out to return default cost.  */\n+      }\n+      break;\n+\n+    case REG_DEP_OUTPUT:\n+      /* Output dependency; DEP_INSN writes a register that INSN writes some\n+\t cycles later.  */\n+      if ((rs6000_cpu == PROCESSOR_POWER6)\n+          && recog_memoized (dep_insn)\n+          && (INSN_CODE (dep_insn) >= 0))\n+        {\n+          attr_type = get_attr_type (insn);\n+\n+          switch (attr_type)\n+            {\n+            case TYPE_FP:\n+              if (get_attr_type (dep_insn) == TYPE_FP)\n+                return 1;\n+              break;\n+            case TYPE_FPLOAD:\n+              if (get_attr_type (dep_insn) == TYPE_MFFGPR)\n+                return 2;\n+              break;\n+            default:\n+              break;\n+            }\n+        }\n+    case REG_DEP_ANTI:\n+      /* Anti dependency; DEP_INSN reads a register that INSN writes some\n+\t cycles later.  */\n+      return 0;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n \n   return cost;\n@@ -16581,55 +16874,6 @@ is_microcoded_insn (rtx insn)\n   return false;\n }\n \n-/* The function returns a nonzero value if INSN can be scheduled only\n-   as the first insn in a dispatch group (\"dispatch-slot restricted\").\n-   In this case, the returned value indicates how many dispatch slots\n-   the insn occupies (at the beginning of the group).\n-   Return 0 otherwise.  */\n-\n-static int\n-is_dispatch_slot_restricted (rtx insn)\n-{\n-  enum attr_type type;\n-\n-  if (!rs6000_sched_groups)\n-    return 0;\n-\n-  if (!insn\n-      || insn == NULL_RTX\n-      || GET_CODE (insn) == NOTE\n-      || GET_CODE (PATTERN (insn)) == USE\n-      || GET_CODE (PATTERN (insn)) == CLOBBER)\n-    return 0;\n-\n-  type = get_attr_type (insn);\n-\n-  switch (type)\n-    {\n-    case TYPE_MFCR:\n-    case TYPE_MFCRF:\n-    case TYPE_MTCR:\n-    case TYPE_DELAYED_CR:\n-    case TYPE_CR_LOGICAL:\n-    case TYPE_MTJMPR:\n-    case TYPE_MFJMPR:\n-      return 1;\n-    case TYPE_IDIV:\n-    case TYPE_LDIV:\n-      return 2;\n-    case TYPE_LOAD_L:\n-    case TYPE_STORE_C:\n-    case TYPE_ISYNC:\n-    case TYPE_SYNC:\n-      return 4;\n-    default:\n-      if (rs6000_cpu == PROCESSOR_POWER5\n-\t  && is_cracked_insn (insn))\n-\treturn 2;\n-      return 0;\n-    }\n-}\n-\n /* The function returns true if INSN is cracked into 2 instructions\n    by the processor (and therefore occupies 2 issue slots).  */\n \n@@ -16680,6 +16924,74 @@ is_branch_slot_insn (rtx insn)\n   return false;\n }\n \n+/* The function returns true if out_inst sets a value that is\n+   used in the address generation computation of in_insn */\n+static bool\n+set_to_load_agen (rtx out_insn, rtx in_insn)\n+{\n+  rtx out_set, in_set;\n+\n+  /* For performance reasons, only handle the simple case where\n+     both loads are a single_set. */\n+  out_set = single_set (out_insn);\n+  if (out_set)\n+    {\n+      in_set = single_set (in_insn);\n+      if (in_set)\n+        return reg_mentioned_p (SET_DEST (out_set), SET_SRC (in_set));\n+    }\n+\n+  return false;\n+}\n+\n+/* The function returns true if the target storage location of\n+   out_insn is adjacent to the target storage location of in_insn */\n+/* Return 1 if memory locations are adjacent.  */\n+\n+static bool\n+adjacent_mem_locations (rtx insn1, rtx insn2)\n+{\n+\n+  rtx a = SET_DEST (PATTERN (insn1));\n+  rtx b = SET_DEST (PATTERN (insn2));\n+ \n+  if ((GET_CODE (XEXP (a, 0)) == REG\n+       || (GET_CODE (XEXP (a, 0)) == PLUS\n+\t   && GET_CODE (XEXP (XEXP (a, 0), 1)) == CONST_INT))\n+      && (GET_CODE (XEXP (b, 0)) == REG\n+\t  || (GET_CODE (XEXP (b, 0)) == PLUS\n+\t      && GET_CODE (XEXP (XEXP (b, 0), 1)) == CONST_INT)))\n+    {\n+      HOST_WIDE_INT val0 = 0, val1 = 0;\n+      rtx reg0, reg1;\n+      int val_diff;\n+\n+      if (GET_CODE (XEXP (a, 0)) == PLUS)\n+        {\n+\t  reg0 = XEXP (XEXP (a, 0), 0);\n+\t  val0 = INTVAL (XEXP (XEXP (a, 0), 1));\n+        }\n+      else\n+\treg0 = XEXP (a, 0);\n+\n+      if (GET_CODE (XEXP (b, 0)) == PLUS)\n+        {\n+\t  reg1 = XEXP (XEXP (b, 0), 0);\n+\t  val1 = INTVAL (XEXP (XEXP (b, 0), 1));\n+        }\n+      else\n+\treg1 = XEXP (b, 0);\n+\n+      val_diff = val1 - val0;\n+\n+      return ((REGNO (reg0) == REGNO (reg1))\n+\t      && (val_diff == INTVAL (MEM_SIZE (a))\n+                  || val_diff == -INTVAL (MEM_SIZE (b))));\n+    }\n+\n+  return false;\n+}\n+\n /* A C statement (sans semicolon) to update the integer scheduling\n    priority INSN_PRIORITY (INSN). Increase the priority to execute the\n    INSN earlier, reduce the priority to execute INSN later.  Do not\n@@ -16719,7 +17031,7 @@ rs6000_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n   }\n #endif\n \n-  if (is_dispatch_slot_restricted (insn)\n+  if (insn_must_be_first_in_group (insn)\n       && reload_completed\n       && current_sched_info->sched_max_insns_priority\n       && rs6000_sched_restricted_insns_priority)\n@@ -16739,6 +17051,15 @@ rs6000_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n \treturn (priority + 1);\n     }\n \n+  if (rs6000_cpu == PROCESSOR_POWER6\n+      && ((load_store_pendulum == -2 && is_load_insn (insn))\n+          || (load_store_pendulum == 2 && is_store_insn (insn))))\n+    /* Attach highest priority to insn if the scheduler has just issued two\n+       stores and this instruction is a load, or two loads and this instruction\n+       is a store. Power6 wants loads and stores scheduled alternately\n+       when possible */\n+    return current_sched_info->sched_max_insns_priority;\n+\n   return priority;\n }\n \n@@ -16771,6 +17092,7 @@ rs6000_issue_rate (void)\n     return 4;\n   case CPU_POWER4:\n   case CPU_POWER5:\n+  case CPU_POWER6:\n     return 5;\n   default:\n     return 1;\n@@ -16955,6 +17277,221 @@ get_next_active_insn (rtx insn, rtx tail)\n   return insn;\n }\n \n+/* We are about to begin issuing insns for this clock cycle. */\n+\n+static int\n+rs6000_sched_reorder (FILE *dump ATTRIBUTE_UNUSED, int sched_verbose,\n+                        rtx *ready ATTRIBUTE_UNUSED,\n+                        int *pn_ready ATTRIBUTE_UNUSED,\n+\t\t        int clock_var ATTRIBUTE_UNUSED)\n+{\n+  if (sched_verbose)\n+    fprintf (dump, \"// rs6000_sched_reorder :\\n\");\n+\n+  if (rs6000_cpu == PROCESSOR_POWER6)\n+    load_store_pendulum = 0;\n+\n+  return rs6000_issue_rate ();\n+}\n+\n+/* Like rs6000_sched_reorder, but called after issuing each insn.  */\n+\n+static int\n+rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx *ready,\n+\t\t         int *pn_ready, int clock_var ATTRIBUTE_UNUSED)\n+{\n+  if (sched_verbose)\n+    fprintf (dump, \"// rs6000_sched_reorder2 :\\n\");\n+\n+  /* For Power6, we need to handle some special cases to try and keep the\n+     store queue from overflowing and triggering expensive flushes.\n+\n+     This code monitors how load and store instructions are being issued\n+     and skews the ready list one way or the other to increase the likelihood\n+     that a desired instruction is issued at the proper time.\n+\n+     A couple of things are done.  First, we maintain a \"load_store_pendulum\"\n+     to track the current state of load/store issue.\n+\n+       - If the pendulum is at zero, then no loads or stores have been\n+         issued in the current cycle so we do nothing.\n+\n+       - If the pendulum is 1, then a single load has been issued in this\n+         cycle and we attempt to locate another load in the ready list to\n+         issue with it.\n+\n+       - If the pedulum is -2, then two stores have already been\n+         issued in this cycle, so we increase the priority of the first load\n+         in the ready list to increase it's likelihood of being chosen first\n+         in the next cycle.\n+\n+       - If the pendulum is -1, then a single store has been issued in this\n+         cycle and we attempt to locate another store in the ready list to\n+         issue with it, preferring a store to an adjacent memory location to\n+         facilitate store pairing in the store queue.\n+\n+       - If the pendulum is 2, then two loads have already been\n+         issued in this cycle, so we increase the priority of the first store\n+         in the ready list to increase it's likelihood of being chosen first\n+         in the next cycle.\n+\n+       - If the pendulum < -2 or > 2, then do nothing.\n+\n+       Note: This code covers the most common scenarios.  There exist non\n+             load/store instructions which make use of the LSU and which\n+             would need to be accounted for to strictly model the behavior\n+             of the machine.  Those instructions are currently unaccounted\n+             for to help minimize compile time overhead of this code.\n+   */\n+  if (rs6000_cpu == PROCESSOR_POWER6 && last_scheduled_insn)\n+    {\n+      int pos;\n+      int i;\n+      rtx tmp;\n+\n+      if (is_store_insn (last_scheduled_insn))\n+        /* Issuing a store, swing the load_store_pendulum to the left */\n+        load_store_pendulum--;\n+      else if (is_load_insn (last_scheduled_insn))\n+        /* Issuing a load, swing the load_store_pendulum to the right */\n+        load_store_pendulum++;\n+      else\n+        return cached_can_issue_more;\n+\n+      /* If the pendulum is balanced, or there is only one instruction on\n+         the ready list, then all is well, so return. */\n+      if ((load_store_pendulum == 0) || (*pn_ready <= 1))\n+        return cached_can_issue_more;\n+\n+      if (load_store_pendulum == 1)\n+        {\n+          /* A load has been issued in this cycle.  Scan the ready list\n+             for another load to issue with it */\n+          pos = *pn_ready-1;\n+\n+          while (pos >= 0)\n+            {\n+              if (is_load_insn (ready[pos]))\n+                {\n+                  /* Found a load.  Move it to the head of the ready list,\n+                     and adjust it's priority so that it is more likely to\n+                     stay there */\n+                  tmp = ready[pos];\n+                  for (i=pos; i<*pn_ready-1; i++)\n+                    ready[i] = ready[i + 1];\n+                  ready[*pn_ready-1] = tmp;\n+                  if INSN_PRIORITY_KNOWN (tmp)\n+                    INSN_PRIORITY (tmp)++;\n+                  break;\n+                }\n+              pos--;\n+            }\n+        }\n+      else if (load_store_pendulum == -2)\n+        {\n+          /* Two stores have been issued in this cycle.  Increase the\n+             priority of the first load in the ready list to favor it for\n+             issuing in the next cycle. */\n+          pos = *pn_ready-1;\n+\n+          while (pos >= 0)\n+            {\n+              if (is_load_insn (ready[pos])\n+                  && INSN_PRIORITY_KNOWN (ready[pos]))\n+                {\n+                  INSN_PRIORITY (ready[pos])++;\n+\n+                  /* Adjust the pendulum to account for the fact that a load\n+                     was found and increased in priority.  This is to prevent\n+                     increasing the priority of multiple loads */\n+                  load_store_pendulum--;\n+\n+                  break;\n+                }\n+              pos--;\n+            }\n+        }\n+      else if (load_store_pendulum == -1)\n+        {\n+          /* A store has been issued in this cycle.  Scan the ready list for\n+             another store to issue with it, preferring a store to an adjacent\n+             memory location */\n+          int first_store_pos = -1;\n+\n+          pos = *pn_ready-1;\n+\n+          while (pos >= 0)\n+            {\n+              if (is_store_insn (ready[pos]))\n+                {\n+                  /* Maintain the index of the first store found on the\n+                     list */\n+                  if (first_store_pos == -1)\n+                    first_store_pos = pos;\n+\n+                  if (is_store_insn (last_scheduled_insn)\n+                      && adjacent_mem_locations (last_scheduled_insn,ready[pos]))\n+                    {\n+                      /* Found an adjacent store.  Move it to the head of the\n+                         ready list, and adjust it's priority so that it is\n+                         more likely to stay there */\n+                      tmp = ready[pos];\n+                      for (i=pos; i<*pn_ready-1; i++)\n+                        ready[i] = ready[i + 1];\n+                      ready[*pn_ready-1] = tmp;\n+                      if INSN_PRIORITY_KNOWN (tmp)\n+                        INSN_PRIORITY (tmp)++;\n+                      first_store_pos = -1;\n+\n+                      break;\n+                    };\n+                }\n+              pos--;\n+            }\n+\n+          if (first_store_pos >= 0)\n+            {\n+              /* An adjacent store wasn't found, but a non-adjacent store was,\n+                 so move the non-adjacent store to the front of the ready\n+                 list, and adjust its priority so that it is more likely to\n+                 stay there. */\n+              tmp = ready[first_store_pos];\n+              for (i=first_store_pos; i<*pn_ready-1; i++)\n+                ready[i] = ready[i + 1];\n+              ready[*pn_ready-1] = tmp;\n+              if INSN_PRIORITY_KNOWN (tmp)\n+                INSN_PRIORITY (tmp)++;\n+            }\n+        }\n+      else if (load_store_pendulum == 2)\n+       {\n+           /* Two loads have been issued in this cycle.  Increase the priority\n+              of the first store in the ready list to favor it for issuing in\n+              the next cycle. */\n+          pos = *pn_ready-1;\n+\n+          while (pos >= 0)\n+            {\n+              if (is_store_insn (ready[pos])\n+                  && INSN_PRIORITY_KNOWN (ready[pos]))\n+                {\n+                  INSN_PRIORITY (ready[pos])++;\n+\n+                  /* Adjust the pendulum to account for the fact that a store\n+                     was found and increased in priority.  This is to prevent\n+                     increasing the priority of multiple stores */\n+                  load_store_pendulum++;\n+\n+                  break;\n+                }\n+              pos--;\n+            }\n+        }\n+    }\n+\n+  return cached_can_issue_more;\n+}\n+\n /* Return whether the presence of INSN causes a dispatch group termination\n    of group WHICH_GROUP.\n \n@@ -16971,28 +17508,179 @@ get_next_active_insn (rtx insn, rtx tail)\n static bool\n insn_terminates_group_p (rtx insn, enum group_termination which_group)\n {\n-  enum attr_type type;\n+  bool first, last;\n \n   if (! insn)\n     return false;\n \n-  type = get_attr_type (insn);\n+  first = insn_must_be_first_in_group (insn);\n+  last = insn_must_be_last_in_group (insn);\n \n-  if (is_microcoded_insn (insn))\n+  if (first && last)\n     return true;\n \n   if (which_group == current_group)\n-    {\n-      if (is_branch_slot_insn (insn))\n-\treturn true;\n-      return false;\n-    }\n+    return last;\n   else if (which_group == previous_group)\n+    return first;\n+\n+  return false;\n+}\n+\n+\n+static bool\n+insn_must_be_first_in_group (rtx insn)\n+{\n+  enum attr_type type;\n+\n+  if (!insn\n+      || insn == NULL_RTX\n+      || GET_CODE (insn) == NOTE\n+      || GET_CODE (PATTERN (insn)) == USE\n+      || GET_CODE (PATTERN (insn)) == CLOBBER)\n+    return false;\n+\n+  switch (rs6000_cpu)\n     {\n-      if (is_dispatch_slot_restricted (insn))\n-\treturn true;\n-      return false;\n+    case PROCESSOR_POWER5:\n+      if (is_cracked_insn (insn))\n+        return true;\n+    case PROCESSOR_POWER4:\n+      if (is_microcoded_insn (insn))\n+        return true;\n+\n+      if (!rs6000_sched_groups)\n+        return false;\n+\n+      type = get_attr_type (insn);\n+\n+      switch (type)\n+        {\n+        case TYPE_MFCR:\n+        case TYPE_MFCRF:\n+        case TYPE_MTCR:\n+        case TYPE_DELAYED_CR:\n+        case TYPE_CR_LOGICAL:\n+        case TYPE_MTJMPR:\n+        case TYPE_MFJMPR:\n+        case TYPE_IDIV:\n+        case TYPE_LDIV:\n+        case TYPE_LOAD_L:\n+        case TYPE_STORE_C:\n+        case TYPE_ISYNC:\n+        case TYPE_SYNC:\n+          return true;\n+        default:\n+          break;\n+        }\n+      break;\n+    case PROCESSOR_POWER6:\n+      type = get_attr_type (insn);\n+\n+      switch (type)\n+        {\n+        case TYPE_INSERT_DWORD:\n+        case TYPE_EXTS:\n+        case TYPE_CNTLZ:\n+        case TYPE_SHIFT:\n+        case TYPE_VAR_SHIFT_ROTATE:\n+        case TYPE_TRAP:\n+        case TYPE_IMUL:\n+        case TYPE_IMUL2:\n+        case TYPE_IMUL3:\n+        case TYPE_LMUL:\n+        case TYPE_IDIV:\n+        case TYPE_INSERT_WORD:\n+        case TYPE_DELAYED_COMPARE:\n+        case TYPE_IMUL_COMPARE:\n+        case TYPE_LMUL_COMPARE:\n+        case TYPE_FPCOMPARE:\n+        case TYPE_MFCR:\n+        case TYPE_MTCR:\n+        case TYPE_MFJMPR:\n+        case TYPE_MTJMPR:\n+        case TYPE_ISYNC:\n+        case TYPE_SYNC:\n+        case TYPE_LOAD_L:\n+        case TYPE_STORE_C:\n+        case TYPE_LOAD_U:\n+        case TYPE_LOAD_UX:\n+        case TYPE_LOAD_EXT_UX:\n+        case TYPE_STORE_U:\n+        case TYPE_STORE_UX:\n+        case TYPE_FPLOAD_U:\n+        case TYPE_FPLOAD_UX:\n+        case TYPE_FPSTORE_U:\n+        case TYPE_FPSTORE_UX:\n+          return true;\n+        default:\n+          break;\n+        }\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+static bool\n+insn_must_be_last_in_group (rtx insn)\n+{\n+  enum attr_type type;\n+\n+  if (!insn\n+      || insn == NULL_RTX\n+      || GET_CODE (insn) == NOTE\n+      || GET_CODE (PATTERN (insn)) == USE\n+      || GET_CODE (PATTERN (insn)) == CLOBBER)\n+    return false;\n+\n+  switch (rs6000_cpu) {\n+  case PROCESSOR_POWER4:\n+  case PROCESSOR_POWER5:\n+    if (is_microcoded_insn (insn))\n+      return true;\n+\n+    if (is_branch_slot_insn (insn))\n+      return true;\n+\n+    break;\n+  case PROCESSOR_POWER6:\n+    type = get_attr_type (insn);\n+\n+    switch (type)\n+      {\n+      case TYPE_EXTS:\n+      case TYPE_CNTLZ:\n+      case TYPE_SHIFT:\n+      case TYPE_VAR_SHIFT_ROTATE:\n+      case TYPE_TRAP:\n+      case TYPE_IMUL:\n+      case TYPE_IMUL2:\n+      case TYPE_IMUL3:\n+      case TYPE_LMUL:\n+      case TYPE_IDIV:\n+      case TYPE_DELAYED_COMPARE:\n+      case TYPE_IMUL_COMPARE:\n+      case TYPE_LMUL_COMPARE:\n+      case TYPE_FPCOMPARE:\n+      case TYPE_MFCR:\n+      case TYPE_MTCR:\n+      case TYPE_MFJMPR:\n+      case TYPE_MTJMPR:\n+      case TYPE_ISYNC:\n+      case TYPE_SYNC:\n+      case TYPE_LOAD_L:\n+      case TYPE_STORE_C:\n+        return true;\n+      default:\n+        break;\n     }\n+    break;\n+  default:\n+    break;\n+  }\n \n   return false;\n }\n@@ -17317,6 +18005,17 @@ pad_groups (FILE *dump, int sched_verbose, rtx prev_head_insn, rtx tail)\n   return group_count;\n }\n \n+/* We're beginning a new block.  Initialize data structures as necessary.  */\n+\n+static void\n+rs6000_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n+\t\t     int sched_verbose ATTRIBUTE_UNUSED,\n+\t\t     int max_ready ATTRIBUTE_UNUSED)\n+{   \n+  last_scheduled_insn = NULL_RTX;\n+  load_store_pendulum = 0;\n+}\n+\n /* The following function is called at the end of scheduling BB.\n    After reload, it inserts nops at insn group bundling.  */\n "}, {"sha": "c9856d12aca95427a83d0ad402bdc86e4b86c22e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -75,6 +75,7 @@\n %{mcpu=power5: -mpower4} \\\n %{mcpu=power5+: -mpower4} \\\n %{mcpu=power6: -mpower4 -maltivec} \\\n+%{mcpu=power6x: -mpower4 -maltivec} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n@@ -162,6 +163,14 @@\n #define TARGET_FPRND 0\n #endif\n \n+/* Define TARGET_MFPGPR if the target assembler does not support the\n+   mffpr and mftgpr instructions. */\n+\n+#ifndef HAVE_AS_MFPGPR\n+#undef  TARGET_MFPGPR\n+#define TARGET_MFPGPR 0\n+#endif\n+\n #ifndef TARGET_SECURE_PLT\n #define TARGET_SECURE_PLT 0\n #endif\n@@ -212,7 +221,8 @@ enum processor_type\n    PROCESSOR_PPC7450,\n    PROCESSOR_PPC8540,\n    PROCESSOR_POWER4,\n-   PROCESSOR_POWER5\n+   PROCESSOR_POWER5,\n+   PROCESSOR_POWER6\n };\n \n extern enum processor_type rs6000_cpu;\n@@ -1109,12 +1119,18 @@ enum reg_class\n   rs6000_secondary_reload_class (CLASS, MODE, IN)\n \n /* If we are copying between FP or AltiVec registers and anything\n-   else, we need a memory location.  */\n-\n-#define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) \t\t\\\n- ((CLASS1) != (CLASS2) && ((CLASS1) == FLOAT_REGS\t\t\\\n-\t\t\t   || (CLASS2) == FLOAT_REGS\t\t\\\n-\t\t\t   || (CLASS1) == ALTIVEC_REGS\t\t\\\n+   else, we need a memory location.  The exception is when we are\n+   targeting ppc64 and the move to/from fpr to gpr instructions\n+   are available.*/\n+\n+#define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE)\t\t\t\\\n+ ((CLASS1) != (CLASS2) && (((CLASS1) == FLOAT_REGS\t\t\t\\\n+                            && (!TARGET_MFPGPR || !TARGET_POWERPC64\t\\\n+\t\t\t\t|| ((MODE != DFmode) && (MODE != DImode)))) \\\n+\t\t\t   || ((CLASS2) == FLOAT_REGS\t\t\t\\\n+                               && (!TARGET_MFPGPR || !TARGET_POWERPC64\t\\\n+\t\t\t\t|| ((MODE != DFmode) && (MODE != DImode)))) \\\n+\t\t\t   || (CLASS1) == ALTIVEC_REGS\t\t\t\\\n \t\t\t   || (CLASS2) == ALTIVEC_REGS))\n \n /* Return the maximum number of consecutive registers"}, {"sha": "8ddf26d924dd6ceff48fba19d3d57ebe791d467a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 504, "deletions": 295, "changes": 799, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -87,7 +87,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,isync,sync,load_l,store_c\"\n+(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -106,7 +106,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4,power5\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4,power5,power6\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n (automata_option \"ndfa\")\n@@ -124,6 +124,7 @@\n (include \"8540.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n+(include \"power6.md\")\n \n (include \"predicates.md\")\n (include \"constraints.md\")\n@@ -241,7 +242,8 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64\"\n-  \"extsb %0,%1\")\n+  \"extsb %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -308,7 +310,7 @@\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n-  [(set_attr \"type\" \"load_ext,*\")])\n+  [(set_attr \"type\" \"load_ext,exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -375,7 +377,7 @@\n   \"@\n    lwa%U1%X1 %0,%1\n    extsw %0,%1\"\n-  [(set_attr \"type\" \"load_ext,*\")])\n+  [(set_attr \"type\" \"load_ext,exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -515,7 +517,8 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"extsb %0,%1\")\n+  \"extsb %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -681,7 +684,8 @@\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"extsb %0,%1\")\n+  \"extsb %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -843,7 +847,7 @@\n   \"@\n    lha%U1%X1 %0,%1\n    {exts|extsh} %0,%1\"\n-  [(set_attr \"type\" \"load_ext,*\")])\n+  [(set_attr \"type\" \"load_ext,exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -2100,7 +2104,8 @@\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(clz:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{cntlz|cntlz<wd>} %0,%1\")\n+  \"{cntlz|cntlz<wd>} %0,%1\"\n+  [(set_attr \"type\" \"cntlz\")])\n \n (define_expand \"ctz<mode>2\"\n   [(set (match_dup 2)\n@@ -2397,7 +2402,11 @@\n \t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC && ! TARGET_POWER\"\n   \"div<wd>u %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n+   [(set (attr \"type\")\n+      (cond [(match_operand:SI 0 \"\" \"\")\n+\t\t(const_string \"idiv\")]\n+\t(const_string \"ldiv\")))])\n+\n \n ;; For powers of two we can do srai/aze for divide and then adjust for\n ;; modulus.  If it isn't a power of two, FAIL on POWER so divmodsi4 will be\n@@ -2450,7 +2459,10 @@\n \t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC && ! TARGET_POWER\"\n   \"div<wd> %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n+  [(set (attr \"type\")\n+     (cond [(match_operand:SI 0 \"\" \"\")\n+\t\t(const_string \"idiv\")]\n+\t(const_string \"ldiv\")))])\n \n (define_expand \"mod<mode>3\"\n   [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n@@ -3549,7 +3561,8 @@\n \n   operands[1] = GEN_INT (64 - start - size);\n   return \\\"rldimi %0,%3,%H1,%H2\\\";\n-}\")\n+}\"\n+  [(set_attr \"type\" \"insert_dword\")])\n \n (define_insn \"*insvdi_internal2\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"gpc_reg_operand\" \"+r\")\n@@ -3670,7 +3683,7 @@\n     operands[3] = GEN_INT (start + size);\n   return \\\"{rlinm.|rlwinm.} %4,%1,%3,%s2,31\\\";\n }\"\n-  [(set_attr \"type\" \"compare\")\n+  [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n@@ -3721,7 +3734,7 @@\n     operands[3] = GEN_INT (start + size);\n   return \\\"{rlinm.|rlwinm.} %0,%1,%3,%s2,31\\\";\n }\"\n-  [(set_attr \"type\" \"compare\")\n+  [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n@@ -3805,24 +3818,29 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"rotlsi3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"\"\n-  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xffffffff\")\n+  \"@\n+   {rlnm|rlwnm} %0,%1,%2,0xffffffff\n+   {rlinm|rlwinm} %0,%1,%h2,0xffffffff\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotlsi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %3,%1,%h2,0xffffffff\n+   {rlnm.|rlwnm.} %3,%1,%2,0xffffffff\n+   {rlinm.|rlwinm.} %3,%1,%h2,0xffffffff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -3839,18 +3857,20 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(rotate:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %0,%1,%h2,0xffffffff\n+   {rlnm.|rlwnm.} %0,%1,%2,0xffffffff\n+   {rlinm.|rlwinm.} %0,%1,%h2,0xffffffff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -3868,27 +3888,32 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal4\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:SI (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n-\t\t(match_operand:SI 3 \"mask_operand\" \"n\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:SI (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))\n+\t\t(match_operand:SI 3 \"mask_operand\" \"n,n\")))]\n   \"\"\n-  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,%m3,%M3\")\n+  \"@\n+   {rlnm|rlwnm} %0,%1,%2,%m3,%M3\n+   {rlinm|rlwinm} %0,%1,%h2,%m3,%M3\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotlsi3_internal5\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (and:SI\n-\t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n-\t\t     (match_operand:SI 3 \"mask_operand\" \"n,n\"))\n+\t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+\t\t     (match_operand:SI 3 \"mask_operand\" \"n,n,n,n\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=r,r\"))]\n+   (clobber (match_scratch:SI 4 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %4,%1,%h2,%m3,%M3\n+   {rlnm.|rlwnm.} %4,%1,%2,%m3,%M3\n+   {rlinm.|rlwinm.} %4,%1,%h2,%m3,%M3\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -3909,20 +3934,22 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal6\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (and:SI\n-\t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n-\t\t     (match_operand:SI 3 \"mask_operand\" \"n,n\"))\n+\t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+\t\t     (match_operand:SI 3 \"mask_operand\" \"n,n,n,n\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(and:SI (rotate:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %0,%1,%h2,%m3,%M3\n+   {rlnm.|rlwnm.} %0,%1,%2,%m3,%M3\n+   {rlinm.|rlwinm.} %0,%1,%h2,%m3,%M3\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n@@ -3951,19 +3978,21 @@\n   \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xff\")\n \n (define_insn \"*rotlsi3_internal8\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %3,%1,%h2,0xff\n+   {rlnm.|rlwnm.} %3,%1,%2,0xff\n+   {rlinm.|rlwinm.} %3,%1,%h2,0xff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -3984,20 +4013,22 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal9\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %0,%1,%h2,0xff\n+   {rlnm.|rlwnm.} %0,%1,%2,0xff\n+   {rlinm.|rlwinm.} %0,%1,%h2,0xff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4017,28 +4048,34 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal10\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:SI\n \t (subreg:HI\n-\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n+\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")) 0)))]\n   \"\"\n-  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xffff\")\n+  \"@\n+   {rlnm|rlwnm} %0,%1,%2,0xffff\n+   {rlinm|rlwinm} %0,%1,%h2,0xffff\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n+\n \n (define_insn \"*rotlsi3_internal11\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %3,%1,%h2,0xffff\n+   {rlnm.|rlwnm.} %3,%1,%2,0xffff\n+   {rlinm.|rlwinm.} %3,%1,%h2,0xffff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4059,20 +4096,22 @@\n   \"\")\n \n (define_insn \"*rotlsi3_internal12\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"\"\n   \"@\n-   {rl%I2nm.|rlw%I2nm.} %0,%1,%h2,0xffff\n+   {rlnm.|rlwnm.} %0,%1,%2,0xffff\n+   {rlinm.|rlwinm.} %0,%1,%h2,0xffff\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4119,11 +4158,14 @@\n    {sli|slwi} %0,%1,%h2\")\n \n (define_insn \"ashlsi3_no_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"! TARGET_POWER\"\n-  \"{sl|slw}%I2 %0,%1,%h2\")\n+  \"@\n+   {sl|slw} %0,%1,%2\n+   {sli|slwi} %0,%1,%h2\"\n+  [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -4158,17 +4200,19 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"! TARGET_POWER && TARGET_32BIT\"\n   \"@\n-   {sl|slw}%I2. %3,%1,%h2\n+   {sl.|slw.} %3,%1,%2\n+   {sli.|slwi.} %3,%1,%h2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4219,18 +4263,20 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER && TARGET_32BIT\"\n   \"@\n-   {sl|slw}%I2. %0,%1,%h2\n+   {sl.|slw.} %0,%1,%2\n+   {sli.|slwi.} %0,%1,%h2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4348,13 +4394,15 @@\n   {s%A2i|s%A2wi} %0,%1,%h2\")\n \n (define_insn \"lshrsi3_no_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"O,ri\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i\")))]\n   \"! TARGET_POWER\"\n   \"@\n   mr %0,%1\n-  {sr|srw}%I2 %0,%1,%h2\")\n+  {sr|srw} %0,%1,%2\n+  {sri|srwi} %0,%1,%h2\"\n+  [(set_attr \"type\" \"integer,var_shift_rotate,shift\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n@@ -4391,19 +4439,21 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,ri,O,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n+\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i,O,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=X,r,X,r\"))]\n+   (clobber (match_scratch:SI 3 \"=X,r,r,X,r,r\"))]\n   \"! TARGET_POWER && TARGET_32BIT\"\n   \"@\n    mr. %1,%1\n-   {sr|srw}%I2. %3,%1,%h2\n+   {sr.|srw.} %3,%1,%2\n+   {sri.|srwi.} %3,%1,%h2\n+   #\n    #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n+  [(set_attr \"type\" \"delayed_compare,var_delayed_compare,delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,4,8,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4456,20 +4506,22 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,ri,O,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n+\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i,O,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER && TARGET_32BIT\"\n   \"@\n    mr. %0,%1\n-   {sr|srw}%I2. %0,%1,%h2\n+   {sr.|srw.} %0,%1,%2\n+   {sri.|srwi.} %0,%1,%h2\n+   #\n    #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n+  [(set_attr \"type\" \"delayed_compare,var_delayed_compare,delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,4,8,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4767,14 +4819,18 @@\n   \"TARGET_POWER\"\n   \"@\n    srea %0,%1,%2\n-   {srai|srawi} %0,%1,%h2\")\n+   {srai|srawi} %0,%1,%h2\"\n+  [(set_attr \"type\" \"shift\")])\n \n (define_insn \"ashrsi3_no_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"! TARGET_POWER\"\n-  \"{sra|sraw}%I2 %0,%1,%h2\")\n+  \"@\n+   {sra|sraw} %0,%1,%2\n+   {srai|srawi} %0,%1,%h2\"\n+  [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -4809,17 +4865,19 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"! TARGET_POWER\"\n   \"@\n-   {sra|sraw}%I2. %3,%1,%h2\n+   {sra.|sraw.} %3,%1,%2\n+   {srai.|srawi.} %3,%1,%h2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -4870,18 +4928,20 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER\"\n   \"@\n-   {sra|sraw}%I2. %0,%1,%h2\n+   {sra.|sraw.} %0,%1,%2\n+   {srai.|srawi.} %0,%1,%h2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \f\n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -5657,6 +5717,12 @@\n       emit_insn (gen_spe_floatsidf2 (operands[0], operands[1]));\n       DONE;\n     }\n+  if (TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS)\n+    {\n+      rtx t1 = gen_reg_rtx (DImode);\n+      emit_insn (gen_floatsidf_ppc64_mfpgpr (operands[0], operands[1], t1));\n+      DONE;\n+    }\n   if (TARGET_POWERPC64)\n     {\n       rtx mem = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n@@ -5790,6 +5856,14 @@\n      DONE;\n     }\n   operands[2] = gen_reg_rtx (DImode);\n+  if (TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n+      && gpc_reg_operand(operands[0], GET_MODE (operands[0])))\n+    {\n+      operands[3] = gen_reg_rtx (DImode);\n+      emit_insn (gen_fix_truncdfsi2_mfpgpr (operands[0], operands[1],\n+\t\t\t\t\t    operands[2], operands[3]));\n+      DONE;\n+    }\n   if (TARGET_PPC_GFXOPT)\n     {\n       rtx orig_dest = operands[0];\n@@ -5843,6 +5917,20 @@\n }\"\n   [(set_attr \"length\" \"16\")])\n \n+(define_insn_and_split \"fix_truncdfsi2_mfpgpr\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))]\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 2) (unspec:DI [(fix:SI (match_dup 1))] UNSPEC_FCTIWZ))\n+   (set (match_dup 3) (match_dup 2))\n+   (set (match_dup 0) (subreg:SI (match_dup 3) 4))]\n+  \"\"\n+  [(set_attr \"length\" \"12\")])\n+\n ; Here, we use (set (reg) (unspec:DI [(fix:SI ...)] UNSPEC_FCTIWZ))\n ; rather than (set (subreg:SI (reg)) (fix:SI ...))\n ; because the first makes it clear that operand 0 is not live\n@@ -5933,13 +6021,24 @@\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_insn_and_split \"floatsidf_ppc64_mfpgpr\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=r\"))]\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 2) (sign_extend:DI (match_dup 1)))\n+   (set (match_dup 0) (float:DF (match_dup 2)))]\n+  \"\")\n+\n (define_insn_and_split \"floatsidf_ppc64\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n@@ -6364,7 +6463,8 @@\n   \"@\n    {srai|srawi} %0,%1,31\\;{srai|srawi} %L0,%1,%h2\n    sraiq %0,%1,%h2\\;srliq %L0,%L1,%h2\"\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"ashrdi3_no_power\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r\")\n@@ -6514,24 +6614,29 @@\n   [(set_attr \"type\" \"lmul\")])\n \n (define_insn \"rotldi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t   (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"TARGET_POWERPC64\"\n-  \"rld%I2cl %0,%1,%H2,0\")\n+  \"@\n+   rldcl %0,%1,%2,0\n+   rldicl %0,%1,%H2,0\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotldi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %3,%1,%H2,0\n+   rldcl. %3,%1,%2,0\n+   rldicl. %3,%1,%H2,0\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6548,18 +6653,20 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(rotate:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %0,%1,%H2,0\n+   rldcl. %0,%1,%2,0\n+   rldicl. %0,%1,%H2,0\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6577,27 +6684,32 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal4\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:DI (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\"))\n-\t\t(match_operand:DI 3 \"mask64_operand\" \"n\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:DI (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t   (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i\"))\n+\t\t(match_operand:DI 3 \"mask64_operand\" \"n,n\")))]\n   \"TARGET_POWERPC64\"\n-  \"rld%I2c%B3 %0,%1,%H2,%S3\")\n+  \"@\n+   rldc%B3 %0,%1,%2,%S3\n+   rldic%B3 %0,%1,%H2,%S3\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotldi3_internal5\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (and:DI\n-\t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n-\t\t     (match_operand:DI 3 \"mask64_operand\" \"n,n\"))\n+\t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+\t\t     (match_operand:DI 3 \"mask64_operand\" \"n,n,n,n\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 4 \"=r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2c%B3. %4,%1,%H2,%S3\n+   rldc%B3. %4,%1,%2,%S3\n+   rldic%B3. %4,%1,%H2,%S3\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6618,20 +6730,22 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal6\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (and:DI\n-\t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n-\t\t     (match_operand:DI 3 \"mask64_operand\" \"n,n\"))\n+\t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n+\t\t     (match_operand:DI 3 \"mask64_operand\" \"n,n,n,n\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(and:DI (rotate:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2c%B3. %0,%1,%H2,%S3\n+   rldc%B3. %0,%1,%2,%S3\n+   rldic%B3. %0,%1,%H2,%S3\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6651,28 +6765,33 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal7\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t (subreg:QI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n+\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i\")) 0)))]\n   \"TARGET_POWERPC64\"\n-  \"rld%I2cl %0,%1,%H2,56\")\n+  \"@\n+   rldcl %0,%1,%2,56\n+   rldicl %0,%1,%H2,56\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotldi3_internal8\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %3,%1,%H2,56\n+   rldcl. %3,%1,%2,56\n+   rldicl. %3,%1,%H2,56\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6693,20 +6812,22 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal9\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %0,%1,%H2,56\n+   rldcl. %0,%1,%2,56\n+   rldicl. %0,%1,%H2,56\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6726,28 +6847,33 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal10\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t (subreg:HI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n+\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i\")) 0)))]\n   \"TARGET_POWERPC64\"\n-  \"rld%I2cl %0,%1,%H2,48\")\n+  \"@\n+   rldcl %0,%1,%2,48\n+   rldicl %0,%1,%H2,48\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotldi3_internal11\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %3,%1,%H2,48\n+   rldcl. %3,%1,%2,48\n+   rldicl. %3,%1,%H2,48\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6768,20 +6894,22 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal12\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %0,%1,%H2,48\n+   rldcl. %0,%1,%2,48\n+   rldicl. %0,%1,%H2,48\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6801,28 +6929,33 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal13\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t (subreg:SI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n+\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i\")) 0)))]\n   \"TARGET_POWERPC64\"\n-  \"rld%I2cl %0,%1,%H2,32\")\n+  \"@\n+   rldcl %0,%1,%2,32\n+   rldicl %0,%1,%H2,32\"\n+  [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotldi3_internal14\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %3,%1,%H2,32\n+   rldcl. %3,%1,%2,32\n+   rldicl. %3,%1,%H2,32\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6843,20 +6976,22 @@\n   \"\")\n \n (define_insn \"*rotldi3_internal15\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n+\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"r,i,r,i\")) 0))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rld%I2cl. %0,%1,%H2,32\n+   rldcl. %0,%1,%2,32\n+   rldicl. %0,%1,%H2,32\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6894,24 +7029,29 @@\n }\")\n \n (define_insn \"*ashldi3_internal1\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"TARGET_POWERPC64\"\n-  \"sld%I2 %0,%1,%H2\")\n+  \"@\n+   sld %0,%1,%2\n+   sldi %0,%1,%H2\"\n+  [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"*ashldi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   sld%I2. %3,%1,%H2\n+   sld. %3,%1,%2\n+   sldi. %3,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -6928,18 +7068,20 @@\n   \"\")\n \n (define_insn \"*ashldi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\"\n   \"@\n-   sld%I2. %0,%1,%H2\n+   sld. %0,%1,%2\n+   sldi. %0,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -7127,24 +7269,29 @@\n }\")\n \n (define_insn \"*lshrdi3_internal1\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"TARGET_POWERPC64\"\n-  \"srd%I2 %0,%1,%H2\")\n+  \"@\n+   srd %0,%1,%2\n+   srdi %0,%1,%H2\"\n+  [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"*lshrdi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT \"\n   \"@\n-   srd%I2. %3,%1,%H2\n+   srd. %3,%1,%2\n+   srdi. %3,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -7161,18 +7308,20 @@\n   \"\")\n \n (define_insn \"*lshrdi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\"\n   \"@\n-   srd%I2. %0,%1,%H2\n+   srd. %0,%1,%2\n+   srdi. %0,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -7214,24 +7363,29 @@\n }\")\n \n (define_insn \"*ashrdi3_internal1\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"TARGET_POWERPC64\"\n-  \"srad%I2 %0,%1,%H2\")\n+  \"@\n+   srad %0,%1,%2\n+   sradi %0,%1,%H2\"\n+  [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"*ashrdi3_internal2\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   srad%I2. %3,%1,%H2\n+   srad. %3,%1,%2\n+   sradi. %3,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -7248,18 +7402,20 @@\n   \"\")\n \n (define_insn \"*ashrdi3_internal3\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+\t(compare:CC (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n+\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\"\n   \"@\n-   srad%I2. %0,%1,%H2\n+   srad. %0,%1,%2\n+   sradi. %0,%1,%H2\n+   #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -7334,7 +7490,7 @@\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"compare,compare,compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n+  [(set_attr \"type\" \"compare,compare,delayed_compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,4,8,8,8,8,8,8,12\")])\n \n (define_split\n@@ -7385,7 +7541,7 @@\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"compare,compare,compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n+  [(set_attr \"type\" \"compare,compare,delayed_compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,4,8,8,8,8,8,8,12\")])\n \n (define_split\n@@ -8269,12 +8425,38 @@\n   [(set_attr \"type\" \"two,load,store,*,*,*\")\n    (set_attr \"length\" \"8,8,8,8,12,16\")])\n \n+; ld/std require word-aligned displacements -> 'Y' constraint.\n+; List Y->r and r->Y before r->r for reload.\n+(define_insn \"*movdf_hardfloat64_mfpgpr\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r,r,f\")\n+\t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F,f,r\"))]\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && (gpc_reg_operand (operands[0], DFmode)\n+       || gpc_reg_operand (operands[1], DFmode))\"\n+  \"@\n+   std%U0%X0 %1,%0\n+   ld%U1%X1 %0,%1\n+   mr %0,%1\n+   fmr %0,%1\n+   lfd%U1%X1 %0,%1\n+   stfd%U0%X0 %1,%0\n+   mt%0 %1\n+   mf%1 %0\n+   {cror 0,0,0|nop}\n+   #\n+   #\n+   #\n+   mftgpr %0,%1\n+   mffgpr %0,%1\"\n+  [(set_attr \"type\" \"store,load,*,fp,fpload,fpstore,mtjmpr,mfjmpr,*,*,*,*,mftgpr,mffgpr\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,12,16,4,4\")])\n+\n ; ld/std require word-aligned displacements -> 'Y' constraint.\n ; List Y->r and r->Y before r->r for reload.\n (define_insn \"*movdf_hardfloat64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8590,10 +8772,35 @@\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n \n+(define_insn \"*movdi_mfpgpr\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,*f,*f,m,r,*h,*h,r,*f\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,f,m,f,*h,r,0,*f,r\"))]\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && (gpc_reg_operand (operands[0], DImode)\n+       || gpc_reg_operand (operands[1], DImode))\"\n+  \"@\n+   mr %0,%1\n+   ld%U1%X1 %0,%1\n+   std%U0%X0 %1,%0\n+   li %0,%1\n+   lis %0,%v1\n+   #\n+   {cal|la} %0,%a1\n+   fmr %0,%1\n+   lfd%U1%X1 %0,%1\n+   stfd%U0%X0 %1,%0\n+   mf%1 %0\n+   mt%0 %1\n+   {cror 0,0,0|nop}\n+   mftgpr %0,%1\n+   mffgpr %0,%1\"\n+  [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,mfjmpr,mtjmpr,*,mftgpr,mffgpr\")\n+   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4,4\")])\n+\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,*f,*f,m,r,*h,*h\")\n \t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,f,m,f,*h,r,0\"))]\n-  \"TARGET_POWERPC64\n+  \"TARGET_POWERPC64 && (!TARGET_MFPGPR || !TARGET_HARD_FLOAT || !TARGET_FPRS)\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n   \"@\n@@ -13971,7 +14178,8 @@\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]\n   \"\"\n-  \"{t 31,0,0|trap}\")\n+  \"{t 31,0,0|trap}\"\n+  [(set_attr \"type\" \"trap\")])\n \n (define_expand \"conditional_trap\"\n   [(trap_if (match_operator 0 \"trap_comparison_operator\"\n@@ -13988,7 +14196,8 @@\n                              (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")])\n \t    (const_int 0))]\n   \"\"\n-  \"{t|t<wd>}%V0%I2 %1,%2\")\n+  \"{t|t<wd>}%V0%I2 %1,%2\"\n+  [(set_attr \"type\" \"trap\")])\n \f\n ;; Insns related to generating the function prologue and epilogue.\n "}, {"sha": "bbf6235b8e33ebaa067cc501aa3260a2bd4d4979", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -64,6 +64,10 @@ mfprnd\n Target Report Mask(FPRND)\n Use PowerPC V2.02 floating point rounding instructions\n \n+mmfpgpr\n+Target Report Mask(MFPGPR)\n+Use extended PowerPC V2.05 move floating point to/from GPR instructions\n+\n maltivec\n Target Report Mask(ALTIVEC)\n Use AltiVec instructions"}, {"sha": "3af39bf75ff5ee298abc21d239a69e96715301f5", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -47,7 +47,8 @@\n   \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-integer\" 1\n-  (and (eq_attr \"type\" \"integer,insert_word\")\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,cntlz,exts\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"iu_rs64\")\n \n@@ -92,7 +93,8 @@\n   \"mciu_rs64*66\")\n \n (define_insn_reservation \"rs64a-compare\" 3\n-  (and (eq_attr \"type\" \"cmp,fast_compare,compare,delayed_compare\")\n+  (and (eq_attr \"type\" \"cmp,fast_compare,compare,\\\n+                delayed_compare,var_delayed_compare\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"iu_rs64,nothing,bpu_rs64\")\n "}, {"sha": "2e2b0bc1b758248a5d74eea6ec30eb270a8ee6ef", "filename": "gcc/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -15510,6 +15510,52 @@ cat >>confdefs.h <<\\_ACEOF\n #define HAVE_AS_FPRND 1\n _ACEOF\n \n+fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[PR]\n+\tmffgpr 1,3';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tmffgpr 1,3';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for move fp gpr support\" >&5\n+echo $ECHO_N \"checking assembler for move fp gpr support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_mfpgpr+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_mfpgpr=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_mfpgpr=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_mfpgpr=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_mfpgpr\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_mfpgpr\" >&6\n+if test $gcc_cv_as_powerpc_mfpgpr = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_MFPGPR 1\n+_ACEOF\n+\n fi\n \n     case $target in"}, {"sha": "fca9fedaf07dec194b739dfae31ce3305ea28948", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -2933,6 +2933,21 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_FPRND, 1,\n \t  [Define if your assembler supports fprnd.])])\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[[PR]]\n+\tmffgpr 1,3';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tmffgpr 1,3';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([move fp gpr support],\n+      gcc_cv_as_powerpc_mfpgpr, [9,99,0],,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_MFPGPR, 1,\n+\t  [Define if your assembler supports mffgpr and mftgpr.])])\n+\n     case $target in\n       *-*-aix*) conftest_s='\t.csect .text[[PR]]\n LCF..0:"}, {"sha": "bb9ce267a721530bd84d99eba200564ffa0abc64", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd321ed8bd28102f04abe2aa04db015d0e36d5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=44cd321ed8bd28102f04abe2aa04db015d0e36d5", "patch": "@@ -656,6 +656,7 @@ See RS/6000 and PowerPC Options.\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt @gol\n -mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb  -mfprnd  -mno-fprnd @gol\n+-mmfpgpr -mno-mfpgpr @gol\n -mnew-mnemonics  -mold-mnemonics @gol\n -mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc @gol\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n@@ -11253,6 +11254,8 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-popcntb\n @itemx -mfprnd\n @itemx -mno-fprnd\n+@itemx -mmfpgpr\n+@itemx -mno-mfpgpr\n @opindex mpower\n @opindex mno-power\n @opindex mpower2\n@@ -11271,6 +11274,8 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @opindex mno-popcntb\n @opindex mfprnd\n @opindex mno-fprnd\n+@opindex mmfpgpr\n+@opindex mno-mfpgpr\n GCC supports two related instruction set architectures for the\n RS/6000 and PowerPC@.  The @dfn{POWER} instruction set are those\n instructions supported by the @samp{rios} chip set used in the original\n@@ -11315,6 +11320,10 @@ architecture.\n The @option{-mfprnd} option allows GCC to generate the FP round to\n integer instructions implemented on the POWER5+ processor and other\n processors that support the PowerPC V2.03 architecture.\n+The @option{-mmfpgpr} option allows GCC to generate the FP move to/from\n+general purpose register instructions implemented on the POWER6X\n+processor and other processors that support the extended PowerPC V2.05\n+architecture.\n \n The @option{-mpowerpc64} option allows GCC to generate the additional\n 64-bit instructions that are found in the full PowerPC64 architecture\n@@ -11357,7 +11366,7 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{860}, @samp{970}, @samp{8540}, @samp{ec603e}, @samp{G3},\n @samp{G4}, @samp{G5}, @samp{power}, @samp{power2}, @samp{power3},\n @samp{power4}, @samp{power5}, @samp{power5+}, @samp{power6},\n-@samp{common}, @samp{powerpc}, @samp{powerpc64},\n+@samp{power6x}, @samp{common}, @samp{powerpc}, @samp{powerpc64},\n @samp{rios}, @samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n@@ -11381,14 +11390,14 @@ following options: @option{-maltivec}, @option{-mfprnd},\n @option{-mhard-float}, @option{-mmfcrf}, @option{-mmultiple},\n @option{-mnew-mnemonics}, @option{-mpopcntb}, @option{-mpower},\n @option{-mpower2}, @option{-mpowerpc64}, @option{-mpowerpc-gpopt},\n-@option{-mpowerpc-gfxopt}, @option{-mstring}, @option{-mmulhw}, @option{-mdlmzb}.\n-The particular options\n-set for any particular CPU will vary between compiler versions,\n-depending on what setting seems to produce optimal code for that CPU;\n-it doesn't necessarily reflect the actual hardware's capabilities.  If\n-you wish to set an individual option to a particular value, you may\n-specify it after the @option{-mcpu} option, like @samp{-mcpu=970\n--mno-altivec}.\n+@option{-mpowerpc-gfxopt}, @option{-mstring}, @option{-mmulhw},\n+@option{-mdlmzb}, @option{-mmfpgpr}.\n+The particular options set for any particular CPU will vary between\n+compiler versions, depending on what setting seems to produce optimal\n+code for that CPU; it doesn't necessarily reflect the actual hardware's\n+capabilities.  If you wish to set an individual option to a particular\n+value, you may specify it after the @option{-mcpu} option, like\n+@samp{-mcpu=970 -mno-altivec}.\n \n On AIX, the @option{-maltivec} and @option{-mpowerpc64} options are\n not enabled or disabled by the @option{-mcpu} option at present because"}]}