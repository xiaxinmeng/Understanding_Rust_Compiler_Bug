{"sha": "f3207b37d34107210fda3f7b3bc999ac7537d7c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyMDdiMzdkMzQxMDcyMTBmZGEzZjdiM2JjOTk5YWM3NTM3ZDdjMA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-06-14T15:56:50Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-14T15:56:50Z"}, "message": "re PR fortran/14928 (minloc intrinsic does not understand mask)\n\nfortran/\n2004-06-05  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n        Andrew Vaught <andyv@firstinter.net>\n\nPR fortran/14928\n* gfortran.h (gfc_check_f): Add new field f3ml.\n* check.c (gfc_check_minloc_maxloc): Take argument list instead\nof individual arguments, reorder if necessary.\n* intrinsic.h (gfc_check_minloc_maxloc): ... adapt prototype.\n* intrinsic.c (add_sym_3ml): New function.\n(add_functions): Change to add_sym_3ml for MINLOC, MAXLOC.\n(check_specific): Catch special case MINLOC, MAXLOC.\n\ntestsuite/\nPR fortran/14928\n* gfortran.fortran-torture/compile/mloc.f90: New test.\n\nCo-Authored-By: Andrew Vaught <andyv@firstinter.net>\n\nFrom-SVN: r83111", "tree": {"sha": "2014e371902c1f99faab8834b1a47caeb1ff29e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2014e371902c1f99faab8834b1a47caeb1ff29e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3207b37d34107210fda3f7b3bc999ac7537d7c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3207b37d34107210fda3f7b3bc999ac7537d7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3207b37d34107210fda3f7b3bc999ac7537d7c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3207b37d34107210fda3f7b3bc999ac7537d7c0/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b1d821501a5acd4298b3561e951333df771cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b1d821501a5acd4298b3561e951333df771cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b1d821501a5acd4298b3561e951333df771cd8"}], "stats": {"total": 149, "additions": 98, "deletions": 51}, "files": [{"sha": "72a0678b5e78fea4b27376f29f19b6e79bbc1047", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -1,3 +1,15 @@\n+2004-06-05  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+        Andrew Vaught <andyv@firstinter.net>\n+\n+\tPR fortran/14928\n+\t* gfortran.h (gfc_check_f): Add new field f3ml.\n+\t* check.c (gfc_check_minloc_maxloc): Take argument list instead\n+\tof individual arguments, reorder if necessary.\n+\t* intrinsic.h (gfc_check_minloc_maxloc): ... adapt prototype.\n+\t* intrinsic.c (add_sym_3ml): New function.\n+\t(add_functions): Change to add_sym_3ml for MINLOC, MAXLOC.\n+\t(check_specific): Catch special case MINLOC, MAXLOC. \n+\n 2004-06-14  Paul Brook  <paul@codesourcery.com>\n \n \t* intrinsic.c (add_sym_2s): Use correct function types."}, {"sha": "9a82d88937111faa855f2112da989c6d61017046", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -1096,53 +1096,40 @@ gfc_check_matmul (gfc_expr * matrix_a, gfc_expr * matrix_b)\n          MASK       NULL\n          NULL       MASK             minloc(array, mask=m)\n          DIM        MASK\n-*/\n+\n+   I.e. in the case of minloc(array,mask), mask will be in the second\n+   position of the argument list and we'll have to fix that up.  */\n \n try\n-gfc_check_minloc_maxloc (gfc_expr * array, gfc_expr * a2, gfc_expr * a3)\n+gfc_check_minloc_maxloc (gfc_actual_arglist * ap)\n {\n+  gfc_expr *a, *m, *d;\n \n-  if (int_or_real_check (array, 0) == FAILURE)\n+  a = ap->expr;\n+  if (int_or_real_check (a, 0) == FAILURE\n+      || array_check (a, 0) == FAILURE)\n     return FAILURE;\n \n-  if (array_check (array, 0) == FAILURE)\n-    return FAILURE;\n+  d = ap->next->expr;\n+  m = ap->next->next->expr;\n \n-  if (a3 != NULL)\n+  if (m == NULL && d != NULL && d->ts.type == BT_LOGICAL\n+      && ap->next->name[0] == '\\0')\n     {\n-      if (logical_array_check (a3, 2) == FAILURE)\n-\treturn FAILURE;\n+      m = d;\n+      d = NULL;\n \n-      if (a2 != NULL)\n-\t{\n-\t  if (scalar_check (a2, 1) == FAILURE)\n-\t    return FAILURE;\n-\t  if (type_check (a2, 1, BT_INTEGER) == FAILURE)\n-\t    return FAILURE;\n-\t}\n+      ap->next->expr = NULL;\n+      ap->next->next->expr = m;\n     }\n-  else\n-    {\n-      if (a2 != NULL)\n-\t{\n-\t  switch (a2->ts.type)\n-\t    {\n-\t    case BT_INTEGER:\n-\t      if (scalar_check (a2, 1) == FAILURE)\n-\t\treturn FAILURE;\n-\t      break;\n \n-\t    case BT_LOGICAL:\t/* The '2' makes the error message correct */\n-\t      if (logical_array_check (a2, 2) == FAILURE)\n-\t\treturn FAILURE;\n-\t      break;\n+  if (d != NULL\n+      && (scalar_check (d, 1) == FAILURE\n+      || type_check (d, 1, BT_INTEGER) == FAILURE))\n+    return FAILURE;\n \n-\t    default:\n-\t      type_check (a2, 1, BT_INTEGER);\t/* Guaranteed to fail */\n-\t      return FAILURE;\n-\t    }\n-\t}\n-    }\n+  if (m != NULL && type_check (m, 2, BT_LOGICAL) == FAILURE)\n+    return FAILURE;\n \n   return SUCCESS;\n }"}, {"sha": "d9107dd32cd458bab62f1cf95fc77140d813d182", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -821,6 +821,7 @@ typedef union\n   try (*f1m)(gfc_actual_arglist *);\n   try (*f2)(struct gfc_expr *, struct gfc_expr *);\n   try (*f3)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *);\n+  try (*f3ml)(gfc_actual_arglist *);\n   try (*f4)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,\n \t    struct gfc_expr *);\n   try (*f5)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,"}, {"sha": "04443d92ae1b47bf8beae76330745d238bd3e4ef", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -479,6 +479,33 @@ static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n \t   (void*)0);\n }\n \n+/* MINLOC and MAXLOC get special treatment because their argument\n+   might have to be reordered.  */\n+\n+static void add_sym_3ml (const char *name, int elemental, \n+\t\t\t int actual_ok, bt type, int kind,\n+\t\t\t try (*check)(gfc_actual_arglist *),\n+\t\t\t gfc_expr*(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t\t void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t\t const char* a1, bt type1, int kind1, int optional1,\n+\t\t\t const char* a2, bt type2, int kind2, int optional2,\n+\t\t\t const char* a3, bt type3, int kind3, int optional3\n+\t\t\t ) {\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f3ml = check;\n+  sf.f3 = simplify;\n+  rf.f3 = resolve;\n+\n+  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+\t   a1, type1, kind1, optional1,\n+\t   a2, type2, kind2, optional2,\n+\t   a3, type3, kind3, optional3,\n+\t   (void*)0);\n+}\n+\n /* Add the name of an intrinsic subroutine with three arguments to the list\n    of intrinsic names. */\n \n@@ -1281,10 +1308,10 @@ add_functions (void)\n \n   make_generic (\"maxexponent\", GFC_ISYM_NONE);\n \n-  add_sym_3 (\"maxloc\", 0, 1, BT_INTEGER, di,\n-\t     gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n-\t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-\t     msk, BT_LOGICAL, dl, 1);\n+  add_sym_3ml (\"maxloc\", 0, 1, BT_INTEGER, di,\n+\t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n+\t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n+\t       msk, BT_LOGICAL, dl, 1);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC);\n \n@@ -1336,10 +1363,10 @@ add_functions (void)\n \n   make_generic (\"minexponent\", GFC_ISYM_NONE);\n \n-  add_sym_3 (\"minloc\", 0, 1, BT_INTEGER, di,\n-\t     gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n-\t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-\t     msk, BT_LOGICAL, dl, 1);\n+  add_sym_3ml (\"minloc\", 0, 1, BT_INTEGER, di,\n+\t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n+\t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n+\t       msk, BT_LOGICAL, dl, 1);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC);\n \n@@ -2331,14 +2358,21 @@ check_specific (gfc_intrinsic_sym * specific, gfc_expr * expr, int error_flag)\n \t\t   &expr->where) == FAILURE)\n     return FAILURE;\n \n-  if (specific->check.f1 == NULL)\n-    {\n-      t = check_arglist (ap, specific, error_flag);\n-      if (t == SUCCESS)\n-\texpr->ts = specific->ts;\n-    }\n+  if (specific->check.f3ml != gfc_check_minloc_maxloc)\n+     {\n+       if (specific->check.f1 == NULL)\n+\t {\n+\t   t = check_arglist (ap, specific, error_flag);\n+\t   if (t == SUCCESS)\n+\t     expr->ts = specific->ts;\n+\t }\n+       else\n+\t t = do_check (specific, *ap);\n+     }\n   else\n-    t = do_check (specific, *ap);\n+    /* This is special because we might have to reorder the argument\n+       list.  */\n+    t = gfc_check_minloc_maxloc (*ap);\n \n   /* Check ranks for elemental intrinsics.  */\n   if (t == SUCCESS && specific->elemental)"}, {"sha": "c345abc8eaa05245c6bfc5a13992af41817ed3f8", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -69,7 +69,7 @@ try gfc_check_min_max_real (gfc_actual_arglist *);\n try gfc_check_min_max_double (gfc_actual_arglist *);\n try gfc_check_matmul (gfc_expr *, gfc_expr *);\n try gfc_check_merge (gfc_expr *, gfc_expr *, gfc_expr *);\n-try gfc_check_minloc_maxloc (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_minloc_maxloc (gfc_actual_arglist *);\n try gfc_check_minval_maxval (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_nearest (gfc_expr *, gfc_expr *);\n try gfc_check_null (gfc_expr *);"}, {"sha": "02da20e350993d9a15eaf51f99278c11e0ba9aba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -1,3 +1,8 @@\n+2004-06-14  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/14928\n+\t* gfortran.fortran-torture/compile/mloc.f90: New test.\n+\t\n 2004-06-13  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.fortran-torture/execute/random_2.f90: New test."}, {"sha": "8d1d754f585a32b98b84544fbabcb199caedc998", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/mloc.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fmloc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3207b37d34107210fda3f7b3bc999ac7537d7c0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fmloc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fmloc.f90?ref=f3207b37d34107210fda3f7b3bc999ac7537d7c0", "patch": "@@ -0,0 +1,8 @@\n+! from PR 14928\n+! we used to not accept the two argument variant of MINLOC and MAXLOC when\n+! the MASK keyword was omitted.\n+  real b(10)\n+  integer c(1)\n+  c = minloc(b,b<0)\n+  c = maxloc(b,b>0)\n+end"}]}