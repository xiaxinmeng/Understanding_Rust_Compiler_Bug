{"sha": "0c18faac3fb407d182dfa82426d1be7cce587926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxOGZhYWMzZmI0MDdkMTgyZGZhODI0MjZkMWJlN2NjZTU4NzkyNg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-11T09:58:36Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-11T09:58:36Z"}, "message": "slp: upgrade complex add to new format and fix memory leaks\n\nThis fixes a memory leak in complex_add_pattern because I was not calling\nvect_free_slp_tree when dissolving one side of the TWO_OPERANDS nodes.\n\nSecondly it also upgrades the class to the new inteface required by the other\npatterns.\n\ngcc/ChangeLog:\n\n\t* tree-vect-slp-patterns.c (class complex_pattern,\n\tclass complex_add_pattern): Add parameters to matches.\n\t(complex_add_pattern::build): Free memory.\n\t(complex_add_pattern::matches): Move validation end of match.\n\t(complex_add_pattern::recognize): Likewise.", "tree": {"sha": "375cf02137d003b016c61e86965888bd99ccdf54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/375cf02137d003b016c61e86965888bd99ccdf54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c18faac3fb407d182dfa82426d1be7cce587926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c18faac3fb407d182dfa82426d1be7cce587926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c18faac3fb407d182dfa82426d1be7cce587926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c18faac3fb407d182dfa82426d1be7cce587926/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4298e1927f6c519d5b7829023b1db7e64592e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4298e1927f6c519d5b7829023b1db7e64592e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd4298e1927f6c519d5b7829023b1db7e64592e6"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "3903cdb1169ac70b8738a01c13e0fb8dc3022fc2", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c18faac3fb407d182dfa82426d1be7cce587926/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c18faac3fb407d182dfa82426d1be7cce587926/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=0c18faac3fb407d182dfa82426d1be7cce587926", "patch": "@@ -503,7 +503,7 @@ class complex_pattern : public vect_pattern\n     void build (vec_info *);\n \n     static internal_fn\n-    matches (complex_operation_t op, slp_tree_to_load_perm_map_t *,\n+    matches (complex_operation_t op, slp_tree_to_load_perm_map_t *, slp_tree *,\n \t     vec<slp_tree> *);\n };\n \n@@ -608,11 +608,17 @@ class complex_add_pattern : public complex_pattern\n   public:\n     void build (vec_info *);\n     static internal_fn\n-    matches (complex_operation_t op, slp_tree_to_load_perm_map_t *,\n+    matches (complex_operation_t op, slp_tree_to_load_perm_map_t *, slp_tree *,\n \t     vec<slp_tree> *);\n \n     static vect_pattern*\n     recognize (slp_tree_to_load_perm_map_t *, slp_tree *);\n+\n+    static vect_pattern*\n+    mkInstance (slp_tree *node, vec<slp_tree> *m_ops, internal_fn ifn)\n+    {\n+      return new complex_add_pattern (node, m_ops, ifn);\n+    }\n };\n \n /* Perform a replacement of the detected complex add pattern with the new\n@@ -630,6 +636,11 @@ complex_add_pattern::build (vec_info *vinfo)\n   nodes.quick_push (children[0]);\n   nodes.quick_push (vect_build_swap_evenodd_node (children[1]));\n \n+  SLP_TREE_REF_COUNT (nodes[0])++;\n+  SLP_TREE_REF_COUNT (nodes[1])++;\n+  vect_free_slp_tree (this->m_ops[0]);\n+  vect_free_slp_tree (this->m_ops[1]);\n+\n   SLP_TREE_CHILDREN (*this->m_node).truncate (0);\n   SLP_TREE_CHILDREN (*this->m_node).safe_splice (nodes);\n \n@@ -650,7 +661,7 @@ complex_add_pattern::build (vec_info *vinfo)\n internal_fn\n complex_add_pattern::matches (complex_operation_t op,\n \t\t\t      slp_tree_to_load_perm_map_t *perm_cache,\n-\t\t\t      vec<slp_tree> *ops)\n+\t\t\t      slp_tree *node, vec<slp_tree> *ops)\n {\n   internal_fn ifn = IFN_LAST;\n \n@@ -685,6 +696,9 @@ complex_add_pattern::matches (complex_operation_t op,\n   if (linear_loads_p (perm_cache, children[1]).first != PERM_ODDEVEN)\n     return IFN_LAST;\n \n+  if (!vect_pattern_validate_optab (ifn, *node))\n+    return IFN_LAST;\n+\n   return ifn;\n }\n \n@@ -697,8 +711,9 @@ complex_add_pattern::recognize (slp_tree_to_load_perm_map_t *perm_cache,\n   auto_vec<slp_tree> ops;\n   complex_operation_t op\n     = vect_detect_pair_op (*node, true, &ops);\n-  internal_fn ifn = complex_add_pattern::matches (op, perm_cache, &ops);\n-  if (!vect_pattern_validate_optab (ifn, *node))\n+  internal_fn ifn\n+    = complex_add_pattern::matches (op, perm_cache, node, &ops);\n+  if (ifn == IFN_LAST)\n     return NULL;\n \n   return new complex_add_pattern (node, &ops, ifn);"}]}