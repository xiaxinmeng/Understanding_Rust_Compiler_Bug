{"sha": "27228024598c3515389cdb378346433fb2c48551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyMjgwMjQ1OThjMzUxNTM4OWNkYjM3ODM0NjQzM2ZiMmM0ODU1MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-01-23T01:30:49Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T01:37:10Z"}, "message": "cris: Emit trivial btstq expected by gcc.target/cris/sync-2i.c, sync-2c.c\n\nAs the added FIXME says, the new insn_and_split generates only a\nsmall subset of the bit-tests that can be matched by \"*btst\" and\nthat were emitted by the undecc0rated cris.md at combine-time,\nbut it's naturally separable from a general variant by being\njust what's needed for the test-cases that were previously\nxfailed, and that no additional CCmodes are required.\n\ngcc:\n\tPR target/93372\n\t* config/cris/cris.md (zcond): New code_iterator.\n\t(\"*cbranch<mode>4_btstq<CC>\"): New insn_and_split.", "tree": {"sha": "2e78ae1c78d03f3b806720fdf599ba55c99b4c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e78ae1c78d03f3b806720fdf599ba55c99b4c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27228024598c3515389cdb378346433fb2c48551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27228024598c3515389cdb378346433fb2c48551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27228024598c3515389cdb378346433fb2c48551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27228024598c3515389cdb378346433fb2c48551/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb062a8b7bca66243d52213a897c7a241f2b14e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb062a8b7bca66243d52213a897c7a241f2b14e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb062a8b7bca66243d52213a897c7a241f2b14e1"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "915a00741d66b42d102a1d58de9ac8bcee55ed1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27228024598c3515389cdb378346433fb2c48551/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27228024598c3515389cdb378346433fb2c48551/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27228024598c3515389cdb378346433fb2c48551", "patch": "@@ -34,6 +34,10 @@\n \t(cris_emit_insn): New function.\n \t* cris/cris-protos.h (cris_emit_insn): Declare.\n \n+\tPR target/93372\n+\t* config/cris/cris.md (zcond): New code_iterator.\n+\t(\"*cbranch<mode>4_btstq<CC>\"): New insn_and_split.\n+\n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-color.c (update_costs_from_allocno): Remove"}, {"sha": "0b42197a9f4dae567e38ad12b083ca9cb3ced50a", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27228024598c3515389cdb378346433fb2c48551/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27228024598c3515389cdb378346433fb2c48551/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=27228024598c3515389cdb378346433fb2c48551", "patch": "@@ -178,6 +178,7 @@\n (define_code_attr shlr [(ashiftrt \"ashr\") (lshiftrt \"lshr\") (ashift \"ashl\")])\n (define_code_attr slr [(ashiftrt \"asr\") (lshiftrt \"lsr\") (ashift \"lsl\")])\n \n+(define_code_iterator zcond [eq ne])\n (define_code_iterator ncond [eq ne gtu ltu geu leu])\n (define_code_iterator ocond [gt le])\n (define_code_iterator rcond [lt ge])\n@@ -1934,6 +1935,32 @@\n \t\t      (pc)))]\n   \"\")\n \n+;; FIXME: this matches only a subset of what the \"*btst\" pattern can handle.\n+(define_insn_and_split \"*cbranch<mode>4_btstq<CC>\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (zcond\n+\t  (zero_extract:BWD\n+\t   (match_operand:BWD 0 \"register_operand\" \"r\")\n+\t   (match_operand 1 \"const_int_operand\" \"Kc\")\n+\t   (const_int 0))\n+\t  (const_int 0))\n+\t (label_ref (match_operand 2 \"\"))\n+\t (pc)))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:CC CRIS_CC0_REGNUM)\n+\t(compare:CC\n+\t (zero_extract:SI (match_dup 0) (match_dup 1) (const_int 0))\n+\t (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (zcond (reg:CC CRIS_CC0_REGNUM) (const_int 0))\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+  \"\")\n+\n \n ;; We suffer from the same overflow-bit-gets-in-the-way problem as\n ;; e.g. m68k, so we have to check if overflow bit is set on all \"signed\""}]}