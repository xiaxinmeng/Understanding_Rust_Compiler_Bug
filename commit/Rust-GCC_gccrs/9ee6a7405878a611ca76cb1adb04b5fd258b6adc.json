{"sha": "9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlNmE3NDA1ODc4YTYxMWNhNzZjYjFhZGIwNGI1ZmQyNThiNmFkYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-11-17T20:45:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-11-17T20:45:32Z"}, "message": "bitset: Tweak doxygen markup.\n\n2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/profile/bitset: Tweak doxygen markup.\n\t* include/profile/deque: Same.\n\t* include/profile/list: Same.\n\t* include/profile/map.h: Same.\n\t* include/profile/multimap.h: Same.\n\t* include/profile/multiset.h: Same.\n\t* include/profile/set.h: Same.\n\t* include/profile/unordered_map: Same.\n\t* include/profile/vector: Same.\n\n\t* include/profile/impl/profiler_container_size.h: Use namespace\n\t__gnu_profile instead of __cxxprof_impl.\n\t* include/profile/impl/profiler.h: Same.\n\t(_GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD): To\n\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n\tRemove namespace __cxxprof_guard.\n\t(__reentrance_guard): De-templatize.\n\t(__reentrance_guard::__inside_cxxprof_impl): To\n\t__reentrance_guard::_S_get_in.\n\n\t* include/profile/impl/profiler_hash_func.h: Use namespace\n\t__gnu_profile instead of __cxxprof_impl.\n\t* include/profile/impl/profiler_hashtable_size.h: Same.\n\t* include/profile/impl/profiler_map_to_unordered_map.h: Same.\n\t* include/profile/impl/profiler_node.h: Same.\n\t* include/profile/impl/profiler_state.h: Same.\n\t* include/profile/impl/profiler_trace.h: Same.\n\t* include/profile/impl/profiler_vector_size.h: Same.\n\t* include/profile/impl/profiler_vector_to_list.h: Same.\n\t* doc/xml/manual/profile_mode.xml: Update.\n\nFrom-SVN: r154269", "tree": {"sha": "9e630a90392e8f936d3c4768e3c0db96d2a9a6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e630a90392e8f936d3c4768e3c0db96d2a9a6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/comments", "author": null, "committer": null, "parents": [{"sha": "1ceb9e066c31914dc6ef69c0cf2b25366d863d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ceb9e066c31914dc6ef69c0cf2b25366d863d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ceb9e066c31914dc6ef69c0cf2b25366d863d96"}], "stats": {"total": 372, "additions": 200, "deletions": 172}, "files": [{"sha": "b137a7c4ab8641b7ab15b9ee1ecf0e3e9e89e705", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -1,3 +1,36 @@\n+2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/profile/bitset: Tweak doxygen markup.\n+\t* include/profile/deque: Same.\n+\t* include/profile/list: Same.\n+\t* include/profile/map.h: Same.\n+\t* include/profile/multimap.h: Same.\n+\t* include/profile/multiset.h: Same.\n+\t* include/profile/set.h: Same.\n+\t* include/profile/unordered_map: Same.\n+\t* include/profile/vector: Same.\n+\n+\t* include/profile/impl/profiler_container_size.h: Use namespace\n+\t__gnu_profile instead of __cxxprof_impl.\n+\t* include/profile/impl/profiler.h: Same.\n+\t(_GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD): To\n+\t_GLIBCXX_PROFILE_REENTRANCE_GUARD.\n+\tRemove namespace __cxxprof_guard.\n+\t(__reentrance_guard): De-templatize.\n+\t(__reentrance_guard::__inside_cxxprof_impl): To\n+\t__reentrance_guard::_S_get_in.\n+\n+\t* include/profile/impl/profiler_hash_func.h: Use namespace\n+\t__gnu_profile instead of __cxxprof_impl.\n+\t* include/profile/impl/profiler_hashtable_size.h: Same.\n+\t* include/profile/impl/profiler_map_to_unordered_map.h: Same.\n+\t* include/profile/impl/profiler_node.h: Same.\n+\t* include/profile/impl/profiler_state.h: Same.\n+\t* include/profile/impl/profiler_trace.h: Same.\n+\t* include/profile/impl/profiler_vector_size.h: Same.\n+\t* include/profile/impl/profiler_vector_to_list.h: Same.\n+\t* doc/xml/manual/profile_mode.xml: Update.\n+\n 2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/debug/bitset: Add doxygen markup."}, {"sha": "5e8e82e99c3a2aab1bc7720b7d956e5a8f2d65d9", "filename": "libstdc++-v3/doc/xml/manual/profile_mode.xml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -640,10 +640,10 @@ it helps the user focus on the key problems and ignore the uninteresting ones.\n    Hook names must start with <code>__profcxx_</code>.\n    Make sure they transform\n    in no code with <code>-D_NO_GLBICXX_PROFILE_MAGIC</code>.\n-   Make sure all calls to any method in namespace <code>__cxxprof_impl</code>\n+   Make sure all calls to any method in namespace <code>__gnu_profile</code>\n    is protected against reentrance using macro\n-   <code>_GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD</code>.\n-   All names of methods in namespace <code>__cxxprof_impl</code> called from\n+   <code>_GLIBCXX_PROFILE_REENTRANCE_GUARD</code>.\n+   All names of methods in namespace <code>__gnu_profile</code> called from\n    <code>profiler.h</code> must start with <code>__trace_magic_</code>.\n   </para>\n "}, {"sha": "e1be8b8d1cac4095dd2f3a8270d227a0115b8f18", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Bitset wrapper with performance instrumentation.  */\n+  /// Class std::bitset wrapper with performance instrumentation.\n   template<size_t _Nb>\n     class bitset\n     : public _GLIBCXX_STD_D::bitset<_Nb>"}, {"sha": "33bf72bc784483cb374bbc148508b2d14efa6561", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Deque wrapper with performance instrumentation.  */\n+  /// Class std::deque wrapper with performance instrumentation.\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class deque\n     : public _GLIBCXX_STD_D::deque<_Tp, _Allocator>"}, {"sha": "6e927290ede9f676f522bec6d393356629cc8a20", "filename": "libstdc++-v3/include/profile/impl/profiler.h", "status": "modified", "additions": 128, "deletions": 136, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -44,90 +44,82 @@\n #endif\n \n /**\n- * @namespace std::__cxxprof_guard\n- * @brief Mechanism to protect all __cxxprof_impl operations against\n- * multithreaded and exception reentrance.\n+ * @namespace std::__gnu_profile\n+ * @brief Implementation of profile extension.\n  */\n-namespace __cxxprof_guard\n+namespace __gnu_profile\n {\n+  /** @brief Reentrance guard.\n+   *\n+   * Mechanism to protect all __gnu_profile operations against recursion,\n+   * multithreaded and exception reentrance.\n+   */\n+  struct __reentrance_guard\n+  {\n+    static bool\n+    _S_set_in()\n+    {\n+      if (_S_get_in())\n+\treturn false;\n+      else\n+\t{\n+\t  _S_get_in() = true;\n+\t  return true;\n+\t}\n+    }\n \n-/** @brief Reentrance guard.\n- *\n- * Mechanism to protect all __cxxprof_impl operations against recursion,\n- * multithreaded and exception reentrance.\n- */\n-template <int _Unused=0>\n-class __reentrance_guard\n-{\n- public:\n-  static __thread bool __inside_cxxprof_impl;\n-  static bool __get_in();\n-  __reentrance_guard() {}\n-  ~__reentrance_guard() { __inside_cxxprof_impl = false; }\n-};\n+    static bool&\n+    _S_get_in()\n+    {\n+      static __thread bool _S_inside(false);\n+      return _S_inside;\n+    }\n \n-template <int _Unused>\n-__thread bool __reentrance_guard<_Unused>::__inside_cxxprof_impl = false;\n+    __reentrance_guard() { }\n+    ~__reentrance_guard() { _S_get_in() = false; }\n+  };\n \n-template <int _Unused>\n-bool __reentrance_guard<_Unused>::__get_in()\n-{\n-  if (__inside_cxxprof_impl) {\n-    return false;\n-  } else {\n-    __inside_cxxprof_impl = true;\n-    return true;\n+#define _GLIBCXX_PROFILE_REENTRANCE_GUARD(__x...)\t      \t\\\n+  {                                                             \\\n+    if (__gnu_profile::__reentrance_guard::_S_get_in())\t \t\\\n+    {                                                           \\\n+      __gnu_profile::__reentrance_guard __get_out; \t\t\\\n+      __x;                                                      \\\n+    }                                                           \\\n   }\n-}\n-\n-} // namespace __cxxprof_guard\n \n-#define _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__x...)             \\\n-  {                                                                \\\n-    if (__cxxprof_guard::__reentrance_guard<0>::__get_in())        \\\n-    {                                                              \\\n-      __cxxprof_guard::__reentrance_guard<0> __auto_get_out;       \\\n-      __x;                                                         \\\n-    }                                                              \\\n-  }\n \n-/**\n- * @namespace std::__cxxprof_impl\n- * @brief Implementation of profile extension.\n- */\n-namespace __cxxprof_impl\n-{\n-// Forward declarations of implementation functions.\n-// Don't use any __cxxprof_impl:: in user code.\n-// Instead, use the __profcxx... macros, which offer guarded access.\n-void __turn_on();\n-void __turn_off();\n-bool __is_invalid();\n-bool __is_on();\n-bool __is_off();\n-void __report(void);\n-void __trace_hashtable_size_resize(const void*, size_t, size_t);\n-void __trace_hashtable_size_destruct(const void*, size_t, size_t);\n-void __trace_hashtable_size_construct(const void*, size_t);\n-void __trace_vector_size_resize(const void*, size_t, size_t);\n-void __trace_vector_size_destruct(const void*, size_t, size_t);\n-void __trace_vector_size_construct(const void*, size_t);\n-void __trace_hash_func_destruct(const void*, size_t, size_t, size_t);\n-void __trace_hash_func_construct(const void*);\n-void __trace_vector_to_list_destruct(const void*);\n-void __trace_vector_to_list_construct(const void*);\n-void __trace_vector_to_list_insert(const void*, size_t, size_t);\n-void __trace_vector_to_list_iterate(const void*, size_t);\n-void __trace_vector_to_list_invalid_operator(const void*);\n-void __trace_vector_to_list_resize(const void*, size_t, size_t);\n-void __trace_map_to_unordered_map_construct(const void*);\n-void __trace_map_to_unordered_map_invalidate(const void*);\n-void __trace_map_to_unordered_map_insert(const void*, size_t, size_t);\n-void __trace_map_to_unordered_map_erase(const void*, size_t, size_t);\n-void __trace_map_to_unordered_map_iterate(const void*, size_t);\n-void __trace_map_to_unordered_map_find(const void*, size_t);\n-void __trace_map_to_unordered_map_destruct(const void*);\n-} // namespace __cxxprof_impl\n+  // Forward declarations of implementation functions.\n+  // Don't use any __gnu_profile:: in user code.\n+  // Instead, use the __profcxx... macros, which offer guarded access.\n+  void __turn_on();\n+  void __turn_off();\n+  bool __is_invalid();\n+  bool __is_on();\n+  bool __is_off();\n+  void __report(void);\n+  void __trace_hashtable_size_resize(const void*, size_t, size_t);\n+  void __trace_hashtable_size_destruct(const void*, size_t, size_t);\n+  void __trace_hashtable_size_construct(const void*, size_t);\n+  void __trace_vector_size_resize(const void*, size_t, size_t);\n+  void __trace_vector_size_destruct(const void*, size_t, size_t);\n+  void __trace_vector_size_construct(const void*, size_t);\n+  void __trace_hash_func_destruct(const void*, size_t, size_t, size_t);\n+  void __trace_hash_func_construct(const void*);\n+  void __trace_vector_to_list_destruct(const void*);\n+  void __trace_vector_to_list_construct(const void*);\n+  void __trace_vector_to_list_insert(const void*, size_t, size_t);\n+  void __trace_vector_to_list_iterate(const void*, size_t);\n+  void __trace_vector_to_list_invalid_operator(const void*);\n+  void __trace_vector_to_list_resize(const void*, size_t, size_t);\n+  void __trace_map_to_unordered_map_construct(const void*);\n+  void __trace_map_to_unordered_map_invalidate(const void*);\n+  void __trace_map_to_unordered_map_insert(const void*, size_t, size_t);\n+  void __trace_map_to_unordered_map_erase(const void*, size_t, size_t);\n+  void __trace_map_to_unordered_map_iterate(const void*, size_t);\n+  void __trace_map_to_unordered_map_find(const void*, size_t);\n+  void __trace_map_to_unordered_map_destruct(const void*);\n+} // namespace __gnu_profile\n \n // Master switch turns on all diagnostics.\n #ifdef _GLIBCXX_PROFILE\n@@ -143,17 +135,17 @@ void __trace_map_to_unordered_map_destruct(const void*);\n // Expose global management routines to user code.\n #ifdef _GLIBCXX_PROFILE\n #define __profcxx_report() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__report())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__report())\n #define __profcxx_turn_on() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__turn_on())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__turn_on())\n #define __profcxx_turn_off() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__turn_off())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__turn_off())\n #define __profcxx_is_invalid() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__is_invalid())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_invalid())\n #define __profcxx_is_on() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__is_on())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_on())\n #define __profcxx__is_off() \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD(__cxxprof_impl::__is_off())\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD(__gnu_profile::__is_off())\n #else\n #define __profcxx_report()\n #define __profcxx_turn_on()\n@@ -167,77 +159,77 @@ void __trace_map_to_unordered_map_destruct(const void*);\n #if ((defined(_GLIBCXX_PROFILE_HASHTABLE_TOO_SMALL) \\\n       && !defined(_NO_GLIBCXX_PROFILE_HASHTABLE_TOO_SMALL)) \\\n      || (defined(_GLIBCXX_PROFILE_HASHTABLE_TOO_LARGE) \\\n-         && !defined(_NO_GLIBCXX_PROFILE_HASHTABLE_TOO_LARGE)))\n+\t && !defined(_NO_GLIBCXX_PROFILE_HASHTABLE_TOO_LARGE)))\n #define __profcxx_hashtable_resize(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_hashtable_size_resize(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_hashtable_size_resize(__x))\n #define __profcxx_hashtable_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_hashtable_size_destruct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_hashtable_size_destruct(__x))\n #define __profcxx_hashtable_construct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_hashtable_size_construct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_hashtable_size_construct(__x))\n #else\n-#define __profcxx_hashtable_resize(__x...)  \n-#define __profcxx_hashtable_destruct(__x...) \n-#define __profcxx_hashtable_construct(__x...)  \n+#define __profcxx_hashtable_resize(__x...)\n+#define __profcxx_hashtable_destruct(__x...)\n+#define __profcxx_hashtable_construct(__x...)\n #endif\n \n // Turn on/off instrumentation for VECTOR_TOO_SMALL and VECTOR_TOO_LARGE.\n #if ((defined(_GLIBCXX_PROFILE_VECTOR_TOO_SMALL) \\\n       && !defined(_NO_GLIBCXX_PROFILE_VECTOR_TOO_SMALL)) \\\n      || (defined(_GLIBCXX_PROFILE_VECTOR_TOO_LARGE) \\\n-         && !defined(_NO_GLIBCXX_PROFILE_VECTOR_TOO_LARGE)))\n+\t && !defined(_NO_GLIBCXX_PROFILE_VECTOR_TOO_LARGE)))\n #define __profcxx_vector_resize(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_size_resize(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_size_resize(__x))\n #define __profcxx_vector_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_size_destruct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_size_destruct(__x))\n #define __profcxx_vector_construct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_size_construct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_size_construct(__x))\n #else\n-#define __profcxx_vector_resize(__x...)  \n-#define __profcxx_vector_destruct(__x...) \n-#define __profcxx_vector_construct(__x...)  \n-#endif \n+#define __profcxx_vector_resize(__x...)\n+#define __profcxx_vector_destruct(__x...)\n+#define __profcxx_vector_construct(__x...)\n+#endif\n \n // Turn on/off instrumentation for INEFFICIENT_HASH.\n #if (defined(_GLIBCXX_PROFILE_INEFFICIENT_HASH) \\\n      && !defined(_NO_GLIBCXX_PROFILE_INEFFICIENT_HASH))\n #define __profcxx_hashtable_construct2(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_hash_func_construct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_hash_func_construct(__x))\n #define __profcxx_hashtable_destruct2(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_hash_func_destruct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_hash_func_destruct(__x))\n #else\n-#define __profcxx_hashtable_destruct2(__x...) \n-#define __profcxx_hashtable_construct2(__x...)  \n+#define __profcxx_hashtable_destruct2(__x...)\n+#define __profcxx_hashtable_construct2(__x...)\n #endif\n \n // Turn on/off instrumentation for VECTOR_TO_LIST.\n #if (defined(_GLIBCXX_PROFILE_VECTOR_TO_LIST) \\\n      && !defined(_NO_GLIBCXX_PROFILE_VECTOR_TO_LIST))\n #define __profcxx_vector_construct2(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_construct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_construct(__x))\n #define __profcxx_vector_destruct2(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_destruct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_destruct(__x))\n #define __profcxx_vector_insert(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_insert(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_insert(__x))\n #define __profcxx_vector_iterate(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_iterate(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_iterate(__x))\n #define __profcxx_vector_invalid_operator(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_invalid_operator(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_invalid_operator(__x))\n #define __profcxx_vector_resize2(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_vector_to_list_resize(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_vector_to_list_resize(__x))\n #else\n #define __profcxx_vector_destruct2(__x...)\n #define __profcxx_vector_construct2(__x...)\n@@ -251,29 +243,29 @@ void __trace_map_to_unordered_map_destruct(const void*);\n #if (defined(_GLIBCXX_PROFILE_MAP_TO_UNORDERED_MAP) \\\n      && !defined(_NO_GLIBCXX_PROFILE_MAP_TO_UNORDERED_MAP))\n #define __profcxx_map_to_unordered_map_construct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_construct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_construct(__x))\n #define __profcxx_map_to_unordered_map_destruct(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_destruct(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_destruct(__x))\n #define __profcxx_map_to_unordered_map_insert(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_insert(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_insert(__x))\n #define __profcxx_map_to_unordered_map_erase(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_erase(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_erase(__x))\n #define __profcxx_map_to_unordered_map_iterate(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_iterate(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_iterate(__x))\n #define __profcxx_map_to_unordered_map_invalidate(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_invalidate(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_invalidate(__x))\n #define __profcxx_map_to_unordered_map_find(__x...) \\\n-  _GLIBCXX_PROFILE_IMPL_REENTRANCE_GUARD( \\\n-      __cxxprof_impl::__trace_map_to_unordered_map_find(__x))\n+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \\\n+      __gnu_profile::__trace_map_to_unordered_map_find(__x))\n #else\n #define __profcxx_map_to_unordered_map_construct(__x...) \\\n-  \n+\n #define __profcxx_map_to_unordered_map_destruct(__x...)\n #define __profcxx_map_to_unordered_map_insert(__x...)\n #define __profcxx_map_to_unordered_map_erase(__x...)"}, {"sha": "a7907197be013cd65b33d8b85b97ee110727fea5", "filename": "libstdc++-v3/include/profile/impl/profiler_container_size.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -51,7 +51,7 @@\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief A container size instrumentation line in the object table.  */\n@@ -246,5 +246,5 @@ inline void __trace_container_size::__resize(const void* __obj, int __from,\n   __object_info->__resize(__from, __to);\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_CONTAINER_SIZE_H__ */"}, {"sha": "2cb36b0d9e9e34d385aa8b5bcda2736afc19d392", "filename": "libstdc++-v3/include/profile/impl/profiler_hash_func.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -50,7 +50,7 @@\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief A hash performance instrumentation line in the object table.  */\n@@ -188,5 +188,5 @@ inline void __trace_hash_func_destruct(const void* __obj, size_t __chain,\n   __tables<0>::_S_hash_func->__destruct(__obj, __chain, __accesses, __hops);\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_HASH_FUNC_H__ */"}, {"sha": "4bdf6a40c611608ef6d7025595326e9876295da6", "filename": "libstdc++-v3/include/profile/impl/profiler_hashtable_size.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -52,7 +52,7 @@\n #include \"profile/impl/profiler_state.h\"\n #include \"profile/impl/profiler_container_size.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief Hashtable size instrumentation trace producer.  */\n@@ -110,6 +110,6 @@ inline void __trace_hashtable_size_resize(const void* __obj, size_t __from,\n   __tables<0>::_S_hashtable_size->__resize(__obj, __from, __to);\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n \n #endif /* PROFCXX_PROFILER_HASHTABLE_SIZE_H__ */"}, {"sha": "823d4c548b0bad51ea9c6792efc1f5939eff655a", "filename": "libstdc++-v3/include/profile/impl/profiler_map_to_unordered_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -50,7 +50,7 @@\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n // Cost model. XXX: this must be taken from the machine model instead.\n@@ -301,5 +301,5 @@ inline void __trace_map_to_unordered_map_invalidate(const void* __obj)\n   if (__info) __info->__record_invalidate();\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_MAP_TO_UNORDERED_MAP_H__ */"}, {"sha": "3dafff6508b942fd65a6acd3fc1eb30837696b79", "filename": "libstdc++-v3/include/profile/impl/profiler_node.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -51,7 +51,7 @@\n #include <execinfo.h>\n #endif\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n typedef const void* __object_t;\n typedef void* __instruction_address_t;\n@@ -168,5 +168,5 @@ class __stack_info_base\n   virtual const char* __get_id() const = 0;\n };\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_NODE_H__ */"}, {"sha": "76d72f54c92ac7abf91c18ab5c8c3c031e45bba6", "filename": "libstdc++-v3/include/profile/impl/profiler_state.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -43,7 +43,7 @@\n #include <stdio.h>\n #endif\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief Profiling mode on/off state.  */\n@@ -103,5 +103,5 @@ inline void __turn_off()\n   __state<0>::_S_diag_state->__turn_off();\n }\n \n-} // end namespace __cxxprof_impl\n+} // end namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_STATE_H__ */"}, {"sha": "97620f3f9ba270c0ae85344e4b919165f23b2227", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -63,7 +63,7 @@\n #include \"profile/impl/profiler_state.h\"\n #include \"profile/impl/profiler_node.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n #if defined _GLIBCXX_PROFILE_THREADS && defined HAVE_TLS\n@@ -367,7 +367,7 @@ void __trace_base<__object_info, __stack_info>::__write(FILE* __f)\n     if (__it->second.__is_valid()) {\n       fprintf(__f, __id);\n       fprintf(__f, \"|\");\n-      __cxxprof_impl::__write(__f, __it->first);\n+      __gnu_profile::__write(__f, __it->first);\n       fprintf(__f, \"|\");\n       __it->second.__write(__f);\n     }\n@@ -428,7 +428,7 @@ struct __warn\n     fprintf(__file,  __info.__warning_id);\n     fprintf(__file, \": improvement = %d\", __log_magnitude(__info.__magnitude));\n     fprintf(__file, \": call stack = \");\n-    __cxxprof_impl::__write(__file, __info.__context);\n+    __gnu_profile::__write(__file, __info.__context);\n     fprintf(__file, \": advice = %s\\n\", __info.__warning_message);\n   }\n };\n@@ -457,7 +457,7 @@ inline FILE* __open_output_file(const char* extension)\n  * This can also be called directly by user code, including signal handlers.\n  * It is protected against deadlocks by the reentrance guard in profiler.h.\n  * However, when called from a signal handler that triggers while within\n- * __cxxprof_impl (under the guarded zone), no output will be produced.\n+ * __gnu_profile (under the guarded zone), no output will be produced.\n  */\n inline void __report(void)\n {\n@@ -559,6 +559,6 @@ inline bool __profcxx_init(void)\n   return __is_on();\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n \n #endif /* PROFCXX_PROFILER_TRACE_H__ */"}, {"sha": "4799e1d3531ab6416ba39d8e8bebe909027123c7", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_size.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -52,7 +52,7 @@\n #include \"profile/impl/profiler_state.h\"\n #include \"profile/impl/profiler_container_size.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief Hashtable size instrumentation trace producer.  */\n@@ -107,6 +107,6 @@ inline void __trace_vector_size_resize(const void* __obj, size_t __from,\n   __tables<0>::_S_vector_size->__resize(__obj, __from, __to);\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n \n #endif /* PROFCXX_PROFILER_VECTOR_SIZE_H__ */"}, {"sha": "661ea38e8f49aaf4b7b5022796dd9ba99099206e", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_to_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -50,7 +50,7 @@\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n-namespace __cxxprof_impl\n+namespace __gnu_profile\n {\n \n /** @brief A vector-to-list instrumentation line in the object table.  */\n@@ -314,5 +314,5 @@ inline void __trace_vector_to_list_resize(const void* __obj,\n   __tables<0>::_S_vector_to_list->__resize(__obj, __from, __to);\n }\n \n-} // namespace __cxxprof_impl\n+} // namespace __gnu_profile\n #endif /* PROFCXX_PROFILER_VECTOR_TO_LIST_H__ */"}, {"sha": "5060293ab1c5d7622a9ebde732b78e707156b126", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief List wrapper with performance instrumentation.  */\n+  /// Class std::list wrapper with performance instrumentation.\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class list\n     : public _GLIBCXX_STD_D::list<_Tp, _Allocator>"}, {"sha": "0197d458f5ebbeecb06cf5035da23c9c233c49db", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -41,7 +41,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Map wrapper with performance instrumentation.  */\n+  /// Class std::map wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class map"}, {"sha": "9a65a937f347fc5c8e92b5a672bd8b98a483ecc2", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Multimap wrapper with performance instrumentation.  */\n+  /// Class std::multimap wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap"}, {"sha": "69a11f47574d387fb8f263337477ed7657a10315", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Multiset wrapper with performance instrumentation.  */\n+  /// Class std::multiset wrapper with performance instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class multiset"}, {"sha": "af249a261c51100bb7b6affbc04aeb55e1a9fd38", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -35,7 +35,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Set wrapper with performance instrumentation.  */\n+  /// Class std::set wrapper with performance instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class set"}, {"sha": "2f563a61b96a3727f542b93df13ba3191a22ab14", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -51,7 +51,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Unordered_map wrapper with performance instrumentation.  */\n+  /// Class std::unordered_map wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp,\n \t   typename _Hash  = std::hash<_Key>,\n \t   typename _Pred = std::equal_to<_Key>,\n@@ -275,12 +275,13 @@ namespace __profile\n      unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n+\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n #define _GLIBCXX_BASE unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\n #define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE\n \n-  /** @brief Unordered_multimap wrapper with performance instrumentation.  */\n+  /// Class std::unordered_multimap wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp,\n \t   typename _Hash  = std::hash<_Key>,\n \t   typename _Pred = std::equal_to<_Key>,\n@@ -371,7 +372,8 @@ namespace __profile\n \n       ~unordered_multimap()\n       {\n-        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());\n+        __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n+\t\t\t\t     _Base::size());\n         _M_profile_destruct();\n       }\n \n@@ -385,7 +387,8 @@ namespace __profile\n       void\n       clear()\n       {\n-        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());\n+        __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n+\t\t\t\t     _Base::size());\n         _M_profile_destruct();\n         _Base::clear();\n       }"}, {"sha": "48a4eea4bbe6b4786baa894c05863bb43e81d5fa", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee6a7405878a611ca76cb1adb04b5fd258b6adc/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=9ee6a7405878a611ca76cb1adb04b5fd258b6adc", "patch": "@@ -42,7 +42,7 @@ namespace std\n {\n namespace __profile\n {\n-  /** @brief Vector wrapper with performance instrumentation.  */\n+  /// Class std::vector wrapper with performance instrumentation.\n   template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n     class vector"}]}