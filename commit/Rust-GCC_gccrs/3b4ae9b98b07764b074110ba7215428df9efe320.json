{"sha": "3b4ae9b98b07764b074110ba7215428df9efe320", "node_id": "C_kwDOANBUbNoAKDNiNGFlOWI5OGIwNzc2NGIwNzQxMTBiYTcyMTU0MjhkZjllZmUzMjA", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-02-10T19:55:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:38Z"}, "message": "[Ada] Make debug printouts more robust\n\nThis patch improves some debug printouts so that they avoid crashing on\ninvalid data.\n\nIn addition, the relevant code uses Global_Name_Buffer all over the\nplace. This patch cleans up some of those uses, in particular ones in\nthe same code as the robustness changes, and code called by that code.\n\ngcc/ada/\n\n\t* namet.ads, namet.adb (Write_Name_For_Debug): New more-robust\n\tversion of Write_Name.\n\t(Destroy_Global_Name_Buffer): New procedure to help detect bugs\n\trelated to use of Global_Name_Buffer.  Misc cleanup and comment\n\timprovements. E.g. we don't need to document every detail of\n\tdebugging printouts, especially since they can change.\n\t* uname.ads, uname.adb (Write_Unit_Name_For_Debug): New\n\tmore-robust version of Write_Unit_Name.\n\t(Get_Unit_Name_String): Pass buffer in, instead of using the\n\tglobal variable. Misc cleanup. Remove the \"special fudge\", which\n\tis apparently not needed, and anyway the comment \"the %s or %b\n\thas already been eliminated\" seems wrong.\n\t(Write_Unit_Name): Call the new version of Get_Unit_Name_String.\n\t* errout.adb (Set_Msg_Insertion_Unit_Name): Call the new version\n\tof Get_Unit_Name_String. We pass the global variable here,\n\tbecause it's too much trouble to disentangle such uses in\n\tErrout.\n\t* sem_util.ads, sem_util.adb, sem_dist.adb\n\t(Get_Library_Unit_Name): New version of\n\tGet_Library_Unit_Name_String that avoids usage of the global\n\tvariable.\n\t* casing.ads, casing.adb, exp_prag.adb, exp_util.adb\n\t(Set_All_Upper_Case): Remove. There is no need for a wrapper\n\there -- code is clearer without it.\n\t* treepr.adb (Print_Name): Call Write_Name_For_Debug, which\n\tdeals with No_Name (etc), rather than duplicating that here.\n\tNote that the call to Get_Name_String was superfluous.\n\t(Tree_Dump): Call Write_Unit_Name_For_Debug instead of\n\tWrite_Unit_Name, which crashes if not Is_Valid_Name.\n\t* erroutc.ads: Improve comments.\n\t* erroutc.adb (Set_Msg_Name_Buffer): Call\n\tDestroy_Global_Name_Buffer to detect potential bugs where it\n\tincorrectly looks at the global variable.\n\t* sinput.adb (Write_Location): Call Write_Name_For_Debug instead\n\tof Write_Name, so it won't blow up on invalid data.\n\t* sinput.ads: Improve comments; remove some verbosity.\n\t* libgnat/s-imagef.adb: Fix typo in comment.", "tree": {"sha": "49ce9e36e9cb09d1df770cdc97d958a047293ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ce9e36e9cb09d1df770cdc97d958a047293ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b4ae9b98b07764b074110ba7215428df9efe320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4ae9b98b07764b074110ba7215428df9efe320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4ae9b98b07764b074110ba7215428df9efe320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4ae9b98b07764b074110ba7215428df9efe320/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c7b1617f0ae0da828d1107795f57c96c848d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c7b1617f0ae0da828d1107795f57c96c848d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c7b1617f0ae0da828d1107795f57c96c848d8f"}], "stats": {"total": 365, "additions": 178, "deletions": 187}, "files": [{"sha": "6d2f2f495030f7ae18d464f6214e2d21e45a574f", "filename": "gcc/ada/casing.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fcasing.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fcasing.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcasing.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -105,15 +105,6 @@ package body Casing is\n       end if;\n    end Determine_Casing;\n \n-   ------------------------\n-   -- Set_All_Upper_Case --\n-   ------------------------\n-\n-   procedure Set_All_Upper_Case is\n-   begin\n-      Set_Casing (All_Upper_Case);\n-   end Set_All_Upper_Case;\n-\n    ----------------\n    -- Set_Casing --\n    ----------------"}, {"sha": "df042db48abf5777ba48ffcf7211c80482f7483a", "filename": "gcc/ada/casing.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fcasing.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fcasing.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcasing.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -78,12 +78,6 @@ package Casing is\n    procedure Set_Casing (C : Casing_Type; D : Casing_Type := Mixed_Case);\n    --  Uses Buf => Global_Name_Buffer\n \n-   procedure Set_All_Upper_Case;\n-   pragma Inline (Set_All_Upper_Case);\n-   --  This procedure is called with an identifier name stored in Name_Buffer.\n-   --  On return, the identifier is converted to all upper case. The call is\n-   --  equivalent to Set_Casing (All_Upper_Case).\n-\n    function Determine_Casing (Ident : Text_Buffer) return Casing_Type;\n    --  Determines the casing of the identifier/keyword string Ident. A special\n    --  test is made for SPARK_Mode which is considered to be mixed case, since"}, {"sha": "bc7c7d32db369dd102b9f558428ffbcd6158d6c6", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -3760,7 +3760,7 @@ package body Errout is\n          Set_Msg_Str (\"<error>\");\n \n       else\n-         Get_Unit_Name_String (Error_Msg_Unit_1, Suffix);\n+         Get_Unit_Name_String (Global_Name_Buffer, Error_Msg_Unit_1, Suffix);\n          Set_Msg_Blank;\n          Set_Msg_Quote;\n          Set_Msg_Name_Buffer;"}, {"sha": "866294ee64b4dc819d53a12b9cd76e5570ee7d44", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -1468,6 +1468,7 @@ package body Erroutc is\n    procedure Set_Msg_Name_Buffer is\n    begin\n       Set_Msg_Str (Name_Buffer (1 .. Name_Len));\n+      Destroy_Global_Name_Buffer;\n    end Set_Msg_Name_Buffer;\n \n    -------------------"}, {"sha": "eaac7dc61571724ba3d58bbcc2f7c3f617f5afd6", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -23,7 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This packages contains global variables and routines common to error\n+--  This package contains global variables and routines common to error\n --  reporting packages, including Errout and Prj.Err.\n \n with Table;\n@@ -617,8 +617,8 @@ package Erroutc is\n    --  buffer with no leading zeroes output.\n \n    procedure Set_Msg_Name_Buffer;\n-   --  Output name from Name_Buffer, with surrounding quotes unless manual\n-   --  quotation mode is in effect.\n+   --  Output name from Namet.Global_Name_Buffer, with surrounding quotes\n+   --  unless manual quotation mode is in effect.\n \n    procedure Set_Msg_Quote;\n    --  Set quote if in normal quote mode, nothing if in manual quote mode"}, {"sha": "27ea708f64d0e8c032a298339573feae7d958fee", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -605,14 +605,14 @@ package body Exp_Prag is\n             Get_Name_String (Chars (External));\n          end if;\n \n-         Set_All_Upper_Case;\n+         Set_Casing (All_Upper_Case);\n \n          Psect :=\n            Make_String_Literal (Eloc, Strval => String_From_Name_Buffer);\n \n       else\n          Get_Name_String (Chars (Internal));\n-         Set_All_Upper_Case;\n+         Set_Casing (All_Upper_Case);\n          Psect :=\n            Make_String_Literal (Iloc, Strval => String_From_Name_Buffer);\n       end if;"}, {"sha": "e590751a15f1928b2607350f1f50b10b074e3d14", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -6699,7 +6699,7 @@ package body Exp_Util is\n          --  Generates the entity name in upper case\n \n          Get_Decoded_Name_String (Chars (Ent));\n-         Set_All_Upper_Case;\n+         Set_Casing (All_Upper_Case);\n          Store_String_Chars (Name_Buffer (1 .. Name_Len));\n          return;\n       end Internal_Full_Qualified_Name;"}, {"sha": "fd8e848438edc43577986ba3dc7f5099ba326c59", "filename": "gcc/ada/libgnat/s-imagef.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Flibgnat%2Fs-imagef.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Flibgnat%2Fs-imagef.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imagef.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -174,7 +174,7 @@ package body System.Image_F is\n    --  operation are omitted here.\n \n    --  A 64-bit value can represent all integers with 18 decimal digits, but\n-   --  not all with 19 decimal digits. If the total number of requested ouput\n+   --  not all with 19 decimal digits. If the total number of requested output\n    --  digits (Fore - 1) + Aft is greater than 18 then, for purposes of the\n    --  conversion, Aft is adjusted to 18 - (Fore - 1). In that case, trailing\n    --  zeros can complete the output after writing the first 18 significant"}, {"sha": "7eb2f0eeba2433cdbff5a6f4e2fbfdf087f452a6", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 80, "deletions": 66, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -170,39 +170,39 @@ package body Namet is\n      (Buf : in out Bounded_String;\n       Id  : Valid_Name_Id)\n    is\n-      C    : Character;\n-      P    : Natural;\n       Temp : Bounded_String;\n \n+      function Has_Encodings (Temp : Bounded_String) return Boolean;\n+      --  True if Temp contains encoded characters. If not, we can set\n+      --  Name_Has_No_Encodings to True below, and never call this again\n+      --  on the same Name_Id.\n+\n+      function Has_Encodings (Temp : Bounded_String) return Boolean is\n+      begin\n+         for J in 1 .. Temp.Length loop\n+            if Temp.Chars (J) in 'U' | 'W' | 'Q' | 'O' then\n+               return True;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end Has_Encodings;\n+\n    begin\n       Append (Temp, Id);\n \n-      --  Skip scan if we already know there are no encodings\n+      --  Skip scan if we already know there are no encodings (i.e. the first\n+      --  time this was called on Id, the Has_Encodings call below returned\n+      --  False).\n \n       if Name_Entries.Table (Id).Name_Has_No_Encodings then\n          goto Done;\n       end if;\n \n-      --  Quick loop to see if there is anything special to do\n-\n-      P := 1;\n-      loop\n-         if P = Temp.Length then\n-            Name_Entries.Table (Id).Name_Has_No_Encodings := True;\n-            goto Done;\n-\n-         else\n-            C := Temp.Chars (P);\n-\n-            exit when\n-              C = 'U' or else\n-              C = 'W' or else\n-              C = 'Q' or else\n-              C = 'O';\n-\n-            P := P + 1;\n-         end if;\n-      end loop;\n+      if not Has_Encodings (Temp) then\n+         Name_Entries.Table (Id).Name_Has_No_Encodings := True;\n+         goto Done;\n+      end if;\n \n       --  Here we have at least some encoding that we must decode\n \n@@ -235,8 +235,7 @@ package body Namet is\n \n             if C = 'U'\n               and then Old < Temp.Length\n-              and then Temp.Chars (Old + 1) not in 'A' .. 'Z'\n-              and then Temp.Chars (Old + 1) /= '_'\n+              and then Temp.Chars (Old + 1) not in 'A' .. 'Z' | '_'\n             then\n                Old := Old + 1;\n \n@@ -274,8 +273,7 @@ package body Namet is\n \n             elsif C = 'W'\n               and then Old < Temp.Length\n-              and then Temp.Chars (Old + 1) not in 'A' .. 'Z'\n-              and then Temp.Chars (Old + 1) /= '_'\n+              and then Temp.Chars (Old + 1) not in 'A' .. 'Z' | '_'\n             then\n                Old := Old + 1;\n                Widechar.Set_Wide (Char_Code (Hex (4)), New_Buf, New_Len);\n@@ -301,7 +299,7 @@ package body Namet is\n                C := Temp.Chars (Old);\n                Old := Old + 1;\n \n-               pragma Assert (C in '0' .. '9' or else C in 'a' .. 'f');\n+               pragma Assert (C in '0' .. '9' | 'a' .. 'f');\n \n                if C <= '9' then\n                   T := 16 * T + Character'Pos (C) - Character'Pos ('0');\n@@ -347,8 +345,7 @@ package body Namet is\n \n             elsif Temp.Chars (Old) = 'O'\n               and then Old < Temp.Length\n-              and then Temp.Chars (Old + 1) not in 'A' .. 'Z'\n-              and then Temp.Chars (Old + 1) /= '_'\n+              and then Temp.Chars (Old + 1) not in 'A' .. 'Z' | '_'\n             then\n                Old := Old + 1;\n \n@@ -501,8 +498,7 @@ package body Namet is\n                elsif Temp.Chars (P) = 'W'\n                  and then P + 9 <= Temp.Length\n                  and then Temp.Chars (P + 1) = 'W'\n-                 and then Temp.Chars (P + 2) not in 'A' .. 'Z'\n-                 and then Temp.Chars (P + 2) /= '_'\n+                 and then Temp.Chars (P + 2) not in 'A' .. 'Z' | '_'\n                then\n                   Temp.Chars (P + 12 .. Temp.Length + 2) :=\n                     Temp.Chars (P + 10 .. Temp.Length);\n@@ -517,8 +513,7 @@ package body Namet is\n \n                elsif Temp.Chars (P) = 'W'\n                  and then P < Temp.Length\n-                 and then Temp.Chars (P + 1) not in 'A' .. 'Z'\n-                 and then Temp.Chars (P + 1) /= '_'\n+                 and then Temp.Chars (P + 1) not in 'A' .. 'Z' | '_'\n                then\n                   Temp.Chars (P + 8 .. P + Temp.Length + 3) :=\n                     Temp.Chars (P + 5 .. Temp.Length);\n@@ -571,7 +566,7 @@ package body Namet is\n          declare\n             CC : constant Character := Get_Character (C);\n          begin\n-            if CC in 'a' .. 'z' or else CC in '0' .. '9' then\n+            if CC in 'a' .. 'z' | '0' .. '9' then\n                Buf.Chars (Buf.Length) := CC;\n             else\n                Buf.Chars (Buf.Length) := 'U';\n@@ -625,6 +620,25 @@ package body Namet is\n       Append (Buf, Temp);\n    end Append_Unqualified_Decoded;\n \n+   --------------------------------\n+   -- Destroy_Global_Name_Buffer --\n+   --------------------------------\n+\n+   procedure Destroy_Global_Name_Buffer is\n+      procedure Do_It;\n+      --  Do the work. Needed only for \"pragma Debug\" below, so we don't do\n+      --  anything in production mode.\n+\n+      procedure Do_It is\n+      begin\n+         Global_Name_Buffer.Length := Global_Name_Buffer.Max_Length;\n+         Global_Name_Buffer.Chars := (others => '!');\n+      end Do_It;\n+      pragma Debug (Do_It);\n+   begin\n+      null;\n+   end Destroy_Global_Name_Buffer;\n+\n    --------------\n    -- Finalize --\n    --------------\n@@ -990,9 +1004,7 @@ package body Namet is\n    begin\n       --  Any name starting or ending with underscore is internal\n \n-      if Buf.Chars (1) = '_'\n-        or else Buf.Chars (Buf.Length) = '_'\n-      then\n+      if Buf.Chars (1) = '_' or else Buf.Chars (Buf.Length) = '_' then\n          return True;\n \n       --  Allow quoted character\n@@ -1059,12 +1071,7 @@ package body Namet is\n \n    function Is_OK_Internal_Letter (C : Character) return Boolean is\n    begin\n-      return C in 'A' .. 'Z'\n-        and then C /= 'O'\n-        and then C /= 'Q'\n-        and then C /= 'U'\n-        and then C /= 'W'\n-        and then C /= 'X';\n+      return C in 'A' .. 'Z' and then C not in 'O' | 'Q' | 'U' | 'W' | 'X';\n    end Is_OK_Internal_Letter;\n \n    ----------------------\n@@ -1450,9 +1457,7 @@ package body Namet is\n             exit;\n          end if;\n \n-         exit when Buf.Chars (J) /= 'b'\n-           and then Buf.Chars (J) /= 'n'\n-           and then Buf.Chars (J) /= 'p';\n+         exit when Buf.Chars (J) not in 'b' | 'n' | 'p';\n       end loop;\n \n       --  Find rightmost __ or $ separator if one exists. First we position\n@@ -1535,25 +1540,7 @@ package body Namet is\n \n    procedure wn (Id : Name_Id) is\n    begin\n-      if Is_Valid_Name (Id) then\n-         declare\n-            Buf : Bounded_String (Max_Length => Natural (Length_Of_Name (Id)));\n-         begin\n-            Append (Buf, Id);\n-            Write_Str (Buf.Chars (1 .. Buf.Length));\n-         end;\n-\n-      elsif Id = No_Name then\n-         Write_Str (\"<No_Name>\");\n-\n-      elsif Id = Error_Name then\n-         Write_Str (\"<Error_Name>\");\n-\n-      else\n-         Write_Str (\"<invalid name_id>\");\n-         Write_Int (Int (Id));\n-      end if;\n-\n+      Write_Name_For_Debug (Id);\n       Write_Eol;\n    end wn;\n \n@@ -1579,6 +1566,33 @@ package body Namet is\n       Write_Str (Buf.Chars (1 .. Buf.Length));\n    end Write_Name_Decoded;\n \n+   --------------------------\n+   -- Write_Name_For_Debug --\n+   --------------------------\n+\n+   procedure Write_Name_For_Debug (Id : Name_Id) is\n+   begin\n+      if Is_Valid_Name (Id) then\n+         declare\n+            Buf : Bounded_String (Max_Length => Natural (Length_Of_Name (Id)));\n+         begin\n+            Append (Buf, Id);\n+            Write_Str (Buf.Chars (1 .. Buf.Length));\n+         end;\n+\n+      elsif Id = No_Name then\n+         Write_Str (\"<No_Name>\");\n+\n+      elsif Id = Error_Name then\n+         Write_Str (\"<Error_Name>\");\n+\n+      else\n+         Write_Str (\"<invalid name \");\n+         Write_Int (Int (Id));\n+         Write_Str (\">\");\n+      end if;\n+   end Write_Name_For_Debug;\n+\n --  Package initialization, initialize tables\n \n begin"}, {"sha": "5342e5d58261606925926d01c4a3662293e45b73", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -166,6 +166,11 @@ package Namet is\n    --  does a save/restore on Name_Len and Name_Buffer (1 .. Name_Len). This\n    --  works in part because Name_Len is default-initialized to 0.\n \n+   procedure Destroy_Global_Name_Buffer with Inline;\n+   --  Overwrites Global_Name_Buffer with meaningless data. This can be used in\n+   --  the transition away from Global_Name_Buffer, in order to detect cases\n+   --  where we incorrectly rely on the global.\n+\n    -----------------------------\n    -- Types for Namet Package --\n    -----------------------------\n@@ -422,12 +427,16 @@ package Namet is\n    --  Write_Name writes the characters of the specified name using the\n    --  standard output procedures in package Output. The name is written\n    --  in encoded form (i.e. including Uhh, Whhh, Qx, _op as they appear in\n-   --  the name table). If Id is Error_Name, or No_Name, no text is output.\n+   --  the name table). If Id is Error_Name or No_Name, no text is output.\n \n    procedure Write_Name_Decoded (Id : Valid_Name_Id);\n    --  Like Write_Name, except that the name written is the decoded name, as\n    --  described for Append_Decoded.\n \n+   procedure Write_Name_For_Debug (Id : Name_Id);\n+   --  Like Write_Name, except it tries to be robust in the presence of invalid\n+   --  data.\n+\n    function Name_Entries_Count return Nat;\n    --  Return current number of entries in the names table\n \n@@ -537,14 +546,8 @@ package Namet is\n \n    procedure wn (Id : Name_Id);\n    pragma Export (Ada, wn);\n-   --  This routine is intended for debugging use only (i.e. it is intended to\n-   --  be called from the debugger). It writes the characters of the specified\n-   --  name using the standard output procedures in package Output, followed by\n-   --  a new line. The name is written in encoded form (i.e. including Uhh,\n-   --  Whhh, Qx, _op as they appear in the name table). If Id is Error_Name,\n-   --  No_Name, or invalid an appropriate string is written (<Error_Name>,\n-   --  <No_Name>, <invalid name>). Unlike Write_Name, this call does not affect\n-   --  the contents of Name_Buffer or Name_Len.\n+   --  Write Id to standard output, followed by a newline. Intended to be\n+   --  called in the debugger.\n \n private\n "}, {"sha": "310940832ff40918aa42fac8f5db1d4844136899", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -394,11 +394,10 @@ package body Sem_Dist is\n            (RTE (RE_Get_Local_Partition_Id), Loc);\n       end if;\n \n-      --  Get and store the String_Id corresponding to the name of the\n-      --  library unit whose Partition_Id is needed.\n+      --  Get the String_Id corresponding to the name of the library unit whose\n+      --  Partition_Id is needed.\n \n-      Get_Library_Unit_Name_String (Unit_Declaration_Node (Ety));\n-      Prefix_String := String_From_Name_Buffer;\n+      Prefix_String := Get_Library_Unit_Name (Unit_Declaration_Node (Ety));\n \n       --  Build the function call which will replace the attribute\n "}, {"sha": "20253bd76167f8e376d1d54d798092e11849f4f7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -11390,21 +11390,23 @@ package body Sem_Util is\n       end if;\n    end Get_Iterable_Type_Primitive;\n \n-   ----------------------------------\n-   -- Get_Library_Unit_Name_String --\n-   ----------------------------------\n+   ---------------------------\n+   -- Get_Library_Unit_Name --\n+   ---------------------------\n \n-   procedure Get_Library_Unit_Name_String (Decl_Node : Node_Id) is\n+   function Get_Library_Unit_Name (Decl_Node : Node_Id) return String_Id is\n       Unit_Name_Id : constant Unit_Name_Type := Get_Unit_Name (Decl_Node);\n-\n+      Buf : Bounded_String;\n    begin\n-      Get_Unit_Name_String (Unit_Name_Id);\n+      Get_Unit_Name_String (Buf, Unit_Name_Id);\n+\n+      --  Remove the last seven characters (\" (spec)\" or \" (body)\")\n \n-      --  Remove seven last character (\" (spec)\" or \" (body)\")\n+      Buf.Length := Buf.Length - 7;\n+      pragma Assert (Buf.Chars (Buf.Length + 1) = ' ');\n \n-      Name_Len := Name_Len - 7;\n-      pragma Assert (Name_Buffer (Name_Len + 1) = ' ');\n-   end Get_Library_Unit_Name_String;\n+      return String_From_Name_Buffer (Buf);\n+   end Get_Library_Unit_Name;\n \n    --------------------------\n    -- Get_Max_Queue_Length --"}, {"sha": "e376c332f2bdd628776932384ca073c8c9647255", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -1258,9 +1258,8 @@ package Sem_Util is\n    --  Retrieve one of the primitives First, Last, Next, Previous, Has_Element,\n    --  Element from the value of the Iterable aspect of a type.\n \n-   procedure Get_Library_Unit_Name_String (Decl_Node : Node_Id);\n-   --  Retrieve the fully expanded name of the library unit declared by\n-   --  Decl_Node into the name buffer.\n+   function Get_Library_Unit_Name (Decl_Node : Node_Id) return String_Id;\n+   --  Return the full expanded name of the library unit declared by Decl_Node\n \n    function Get_Max_Queue_Length (Id : Entity_Id) return Uint;\n    --  Return the argument of pragma Max_Queue_Length or zero if the annotation"}, {"sha": "ccc4a7ad4fb87298678f3810eb7048ea5b2d9410", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -1023,7 +1023,7 @@ package body Sinput is\n             SI : constant Source_File_Index := Get_Source_File_Index (P);\n \n          begin\n-            Write_Name (Debug_Source_Name (SI));\n+            Write_Name_For_Debug (Debug_Source_Name (SI));\n             Write_Char (':');\n             Write_Int (Int (Get_Logical_Line_Number (P)));\n             Write_Char (':');"}, {"sha": "af2fec74cf4d61d6ab864705a4baee6b63e91b6f", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -693,14 +693,11 @@ package Sinput is\n    --  names in some situations.\n \n    procedure Write_Location (P : Source_Ptr);\n-   --  Writes out a string of the form fff:nn:cc, where fff, nn, cc are the\n-   --  file name, line number and column corresponding to the given source\n-   --  location. No_Location and Standard_Location appear as the strings\n-   --  <no location> and <standard location>. If the location is within an\n-   --  instantiation, then the instance location is appended, enclosed in\n-   --  square brackets (which can nest if necessary). Note that this routine\n-   --  is used only for internal compiler debugging output purposes (which\n-   --  is why the somewhat cryptic use of brackets is acceptable).\n+   --  Writes P, in the form fff:nn:cc, where fff, nn, cc are the file name,\n+   --  line number and column corresponding to the given source location. If\n+   --  the location is within an instantiation, then the instance location is\n+   --  appended, enclosed in square brackets, which can nest if necessary. This\n+   --  is used only for debugging output.\n \n    procedure wl (P : Source_Ptr);\n    pragma Export (Ada, wl);"}, {"sha": "dda500dc69478c72b888dee817e8bcf5e9c31e9d", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -1142,21 +1142,7 @@ package body Treepr is\n    procedure Print_Name (N : Name_Id) is\n    begin\n       if Phase = Printing then\n-         if N = No_Name then\n-            Print_Str (\"<No_Name>\");\n-\n-         elsif N = Error_Name then\n-            Print_Str (\"<Error_Name>\");\n-\n-         elsif Is_Valid_Name (N) then\n-            Get_Name_String (N);\n-            Print_Char ('\"');\n-            Write_Name (N);\n-            Print_Char ('\"');\n-\n-         else\n-            Print_Str (\"<invalid name>\");\n-         end if;\n+         Write_Name_For_Debug (N);\n       end if;\n    end Print_Name;\n \n@@ -1878,7 +1864,7 @@ package body Treepr is\n \n          Write_Eol;\n          Write_Str (\"Tree created for \");\n-         Write_Unit_Name (Unit_Name (Main_Unit));\n+         Write_Unit_Name_For_Debug (Unit_Name (Main_Unit));\n          Underline;\n          Print_Node_Subtree (Cunit (Main_Unit));\n          Write_Eol;"}, {"sha": "60ef2b6686a36c800e17d11e7d56bc06f5160812", "filename": "gcc/ada/uname.adb", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Funame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Funame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Funame.adb?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -411,51 +411,42 @@ package body Uname is\n    --------------------------\n \n    procedure Get_Unit_Name_String\n-     (N      : Unit_Name_Type;\n+     (Buf    : in out Bounded_String;\n+      N      : Unit_Name_Type;\n       Suffix : Boolean := True)\n    is\n-      Unit_Is_Body : Boolean;\n-\n    begin\n-      Get_Decoded_Name_String (N);\n-      Unit_Is_Body := Name_Buffer (Name_Len) = 'b';\n-      Set_Casing (Identifier_Casing (Source_Index (Main_Unit)));\n-\n-      --  A special fudge, normally we don't have operator symbols present,\n-      --  since it is always an error to do so. However, if we do, at this\n-      --  stage it has the form:\n+      Buf.Length := 0;\n+      Append_Decoded (Buf, N);\n \n-      --    \"and\"\n+      --  Buf always ends with \"%s\" or \"%b\", which we either remove, or replace\n+      --  with \" (spec)\" or \" (body)\". Set_Casing of Buf after checking for\n+      --  (lower case) 's'/'b', and before appending (lower case) \"spec\" or\n+      --  \"body\".\n \n-      --  and the %s or %b has already been eliminated so put 2 chars back\n+      pragma Assert (Buf.Length >= 3);\n+      pragma Assert (Buf.Chars (1) /= '\"');\n+      pragma Assert (Buf.Chars (Buf.Length) in 's' | 'b');\n \n-      if Name_Buffer (1) = '\"' then\n-         Name_Len := Name_Len + 2;\n-      end if;\n-\n-      --  Now adjust the %s or %b to (spec) or (body)\n+      declare\n+         S : constant String :=\n+           (if Buf.Chars (Buf.Length) = 's' then \" (spec)\" else \" (body)\");\n+      begin\n+         Buf.Length := Buf.Length - 1; -- remove 's' or 'b'\n+         pragma Assert (Buf.Chars (Buf.Length) = '%');\n+         Buf.Length := Buf.Length - 1; -- remove '%'\n+         Set_Casing (Buf, Identifier_Casing (Source_Index (Main_Unit)));\n \n-      if Suffix then\n-         if Unit_Is_Body then\n-            Name_Buffer (Name_Len - 1 .. Name_Len + 5) := \" (body)\";\n-         else\n-            Name_Buffer (Name_Len - 1 .. Name_Len + 5) := \" (spec)\";\n+         if Suffix then\n+            Append (Buf, S);\n          end if;\n-      end if;\n+      end;\n \n-      for J in 1 .. Name_Len loop\n-         if Name_Buffer (J) = '-' then\n-            Name_Buffer (J) := '.';\n+      for J in 1 .. Buf.Length loop\n+         if Buf.Chars (J) = '-' then\n+            Buf.Chars (J) := '.';\n          end if;\n       end loop;\n-\n-      --  Adjust Name_Len\n-\n-      if Suffix then\n-         Name_Len := Name_Len + (7 - 2);\n-      else\n-         Name_Len := Name_Len - 2;\n-      end if;\n    end Get_Unit_Name_String;\n \n    ----------------\n@@ -721,9 +712,23 @@ package body Uname is\n    ---------------------\n \n    procedure Write_Unit_Name (N : Unit_Name_Type) is\n+      Buf : Bounded_String;\n    begin\n-      Get_Unit_Name_String (N);\n-      Write_Str (Name_Buffer (1 .. Name_Len));\n+      Get_Unit_Name_String (Buf, N);\n+      Write_Str (Buf.chars (1 .. Buf.Length));\n    end Write_Unit_Name;\n \n+   -------------------------------\n+   -- Write_Unit_Name_For_Debug --\n+   -------------------------------\n+\n+   procedure Write_Unit_Name_For_Debug (N : Unit_Name_Type) is\n+   begin\n+      if Is_Valid_Name (N) then\n+         Write_Unit_Name (N);\n+      else\n+         Write_Name_For_Debug (N);\n+      end if;\n+   end Write_Unit_Name_For_Debug;\n+\n end Uname;"}, {"sha": "35d62a214b8509931b0900a5e5abccec4f819ba4", "filename": "gcc/ada/uname.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Funame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4ae9b98b07764b074110ba7215428df9efe320/gcc%2Fada%2Funame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Funame.ads?ref=3b4ae9b98b07764b074110ba7215428df9efe320", "patch": "@@ -57,7 +57,7 @@ package Uname is\n \n    --  For display purposes, unit names are printed out with the suffix\n    --  \" (body)\" for a body and \" (spec)\" for a spec. These formats are\n-   --  used for the Write_Unit_Name and Get_Unit_Name_String subprograms.\n+   --  used for Write_Unit_Name and Get_Unit_Name_String.\n \n    -----------------\n    -- Subprograms --\n@@ -111,13 +111,11 @@ package Uname is\n    --    N_Subunit\n \n    procedure Get_Unit_Name_String\n-     (N      : Unit_Name_Type;\n+     (Buf    : in out Bounded_String;\n+      N      : Unit_Name_Type;\n       Suffix : Boolean := True);\n-   --  Places the display name of the unit in Name_Buffer and sets Name_Len to\n-   --  the length of the stored name, i.e. it uses the same interface as the\n-   --  Get_Name_String routine in the Namet package. The name is decoded and\n-   --  contains an indication of spec or body if Boolean parameter Suffix is\n-   --  True.\n+   --  Puts the display name for N in Buf. The name is decoded and contains an\n+   --  indication of spec or body if Suffix is True.\n \n    function Is_Body_Name (N : Unit_Name_Type) return Boolean;\n    --  Returns True iff the given name is the unit name of a body (i.e. if\n@@ -161,7 +159,7 @@ package Uname is\n    --     result = A.R.C (body)\n    --\n    --   See spec of Load_Unit for extensive discussion of why this routine\n-   --   needs to be used (the call in the body of Load_Unit is the only one).\n+   --   needs to be used (the calls in Load_Unit are the only ones).\n \n    function Uname_Ge (Left, Right : Unit_Name_Type) return Boolean;\n    function Uname_Gt (Left, Right : Unit_Name_Type) return Boolean;\n@@ -175,8 +173,10 @@ package Uname is\n    --  are the same, they always have the same Name_Id value.\n \n    procedure Write_Unit_Name (N : Unit_Name_Type);\n-   --  Given a unit name, this procedure writes the display name to the\n-   --  standard output file. Name_Buffer and Name_Len are set as described\n-   --  above for the Get_Unit_Name_String call on return.\n+   --  Writes the display form of N to standard output\n+\n+   procedure Write_Unit_Name_For_Debug (N : Unit_Name_Type);\n+   --  Like Write_Unit_Name, except it tries to be robust in the presence of\n+   --  invalid data.\n \n end Uname;"}]}