{"sha": "2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjNmFmZGRlNzRkYjlhYjQyMjNkYjE0YzJkZGUwN2JkNDA1N2VkOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-04T18:16:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-04T18:16:09Z"}, "message": "New file.\n\nFrom-SVN: r8866", "tree": {"sha": "d618cd4f27212d29aa2528b16e76e4fbd1182039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d618cd4f27212d29aa2528b16e76e4fbd1182039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/comments", "author": null, "committer": null, "parents": [{"sha": "ef012153e84da550d82b61d4067beec740ff3d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef012153e84da550d82b61d4067beec740ff3d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef012153e84da550d82b61d4067beec740ff3d61"}], "stats": {"total": 534, "additions": 534, "deletions": 0}, "files": [{"sha": "b8456924f6618cb6825025f10864994807472c88", "filename": "gcc/config/mips/abi64.h", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,166 @@\n+/* Definitions of target machine for GNU compiler.  64 bit ABI support.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Macros to implement the 64 bit ABI.  This file is meant to be included\n+   after mips.h.  */\n+\n+#undef ABI_64BIT\n+#define ABI_64BIT 1\n+\n+/* For Irix 6, -mips3 implies TARGET_LONG64.  */\n+#undef TARGET_LONG64\n+#define TARGET_LONG64\t\t(target_flags & MASK_64BIT)\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+ \"-Dunix -Dmips -Dsgi -Dhost_mips -DMIPSEB -D_MIPSEB -DSYSTYPE_SVR4 \\\n+  -D_SVR4_SOURCE -D_MODERN_C -D__DSO__ \\\n+  -Asystem(unix) -Asystem(svr4) -Acpu(mips) -Amachine(sgi)\"\n+\n+/* We must make -mips3 do what -mlong64 used to do.  */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{!ansi:-D__EXTENSIONS__ -D_SGI_SOURCE -D_LONGLONG} \\\n+%{.cc:\t-D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.cxx:\t-D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.C:\t-D_LANGUAGE_C_PLUS_PLUS} \\\n+%{.m:\t-D_LANGUAGE_OBJECTIVE_C -D_LANGUAGE_C} \\\n+%{.S:\t-D_LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n+%{.s:\t-D_LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n+%{!.S:%{!.s: %{!.cc: %{!.cxx: %{!.C: %{!.m: -D_LANGUAGE_C %{!ansi:-DLANGUAGE_C}}}}}}}\\\n+%{mfp32: -D_MIPS_FPSET=16}%{!mfp32: -D_MIPS_FPSET=32} \\\n+%{mips1: -D_MIPS_ISA=_MIPS_ISA_MIPS1} \\\n+%{mips2: -D_MIPS_ISA=_MIPS_ISA_MIPS2} \\\n+%{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n+%{mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4} \\\n+%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4}}}} \\\n+%{mips1: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n+%{mips2: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n+%{mips3: -D_MIPS_SIM=_MIPS_SIM_ABI64}\t\\\n+%{mips4: -D_MIPS_SIM=_MIPS_SIM_ABI64}\t\\\n+%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_SIM=_MIPS_SIM_ABI64}}}}\t\\\n+%{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n+%{mips1: -D_MIPS_SZLONG=32}%{mips2: -D_MIPS_SZLONG=32}  \\\n+%{!mips1:%{!mips2: -D_MIPS_SZLONG=64}}\t\t\t\\\n+%{mips1: -D_MIPS_SZPTR=32}%{mips2: -D_MIPS_SZPTR=32}\t\\\n+%{mips3: -D_MIPS_SZPTR=64}%{mips4: -D_MIPS_SZPTR=64}\t\\\n+%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_SZPTR=64}}}}\t\\\n+%{!mips1:%{!mips2: -D_COMPILER_VERSION=601}}\t\t\\\n+%{mips1: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{mips2: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{!mips1:%{!mips2: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}} \\\n+%{mips3:-U__mips -D__mips=3} \\\n+%{!mips1:%{!mips2:-U__mips -D__mips=4}}\"\n+\n+#undef EMPTY_FIELD_BOUNDARY\n+#define EMPTY_FIELD_BOUNDARY\t32\n+\n+#undef STACK_BOUNDARY\n+#define STACK_BOUNDARY 128\n+\n+#undef MIPS_STACK_ALIGN\n+#define MIPS_STACK_ALIGN(LOC) (((LOC)+15) & ~15)\n+\n+#undef GP_ARG_LAST\n+#define GP_ARG_LAST  (mips_isa < 3 ? GP_REG_FIRST + 7 : GP_REG_FIRST + 11)\n+#undef FP_ARG_LAST\n+#define FP_ARG_LAST  (mips_isa < 3 ? FP_REG_FIRST + 15 : FP_REG_FIRST + 19)\n+\n+/* fp20-23 are now caller saved.  */\n+#undef SUBTARGET_CONDITIONAL_REGISTER_USAGE\n+#define SUBTARGET_CONDITIONAL_REGISTER_USAGE \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (mips_isa >= 3)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      int regno;\t\t\t\t\t\t\t\\\n+      for (regno = FP_REG_FIRST + 20; regno < FP_REG_FIRST + 24; regno++) \\\n+\tcall_used_regs[regno] = 1;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef MAX_ARGS_IN_REGISTERS\n+#define MAX_ARGS_IN_REGISTERS\t(mips_isa < 3 ? 4 : 8)\n+\n+#undef REG_PARM_STACK_SPACE\n+#define REG_PARM_STACK_SPARC(FNDECL) \t\t\t\t\t \\\n+  (mips_abi < 3\t\t\t\t\t\t\t\t \\\n+   ? (MAX_ARGS_IN_REGISTERS*UNITS_PER_WORD) - FIRST_PARM_OFFSET (FNDECL) \\\n+   : 0)\n+\n+#define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\t\\\n+  (! BYTES_BIG_ENDIAN\t\t\t\t\t\t\t\\\n+   ? upward\t\t\t\t\t\t\t\t\\\n+   : (((MODE) == BLKmode\t\t\t\t\t\t\\\n+       ? ((TYPE) && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST\t\t\\\n+\t  && int_size_in_bytes (TYPE) < (PARM_BOUNDARY / BITS_PER_UNIT))\\\n+       : (GET_MODE_BITSIZE (MODE) < PARM_BOUNDARY\t\t\t\\\n+\t  && (mips_isa < 3 || GET_MODE_CLASS (MODE) == MODE_INT)))\t\\\n+      ? downward : upward))\n+\n+extern struct rtx_def *type_dependent_reg ();\n+#define TYPE_DEPENDENT_REG(REGNO, INDEX, TYPE) \\\n+  type_dependent_reg (REGNO, INDEX, TYPE)\n+\n+#undef RETURN_IN_MEMORY\n+#define RETURN_IN_MEMORY(TYPE)\t\\\n+  (mips_isa < 3 ? TYPE_MODE (TYPE) == BLKmode : int_size_in_bytes (TYPE) > 16)\n+\n+extern struct rtx_def *mips_function_value ();\n+#undef FUNCTION_VALUE\n+#define FUNCTION_VALUE(VALTYPE, FUNC)\tmips_function_value (VALTYPE, FUNC)\n+\n+/* For varargs, we must save the current argument, because it is the fake\n+   argument va_alist, and will need to be converted to the real argument.\n+   For stdarg, we do not need to save the current argument, because it\n+   is a real argument.  */\n+#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n+{ if (mips_isa >= 3 && (CUM).arg_words < MAX_ARGS_IN_REGISTERS - 1)\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      PRETEND_SIZE\t\t\t\t\t\t\t\\\n+\t= (MAX_ARGS_IN_REGISTERS - (CUM).arg_words\t\t\t\\\n+\t   - ! current_function_varargs) * UNITS_PER_WORD;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (! (NO_RTL))\t\t\t\t\t\t\t\\\n+\tmove_block_from_reg\t\t\t\t\t\t\\\n+\t  ((CUM).arg_words + GP_ARG_FIRST + ! current_function_varargs,\t\\\n+\t   gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n+\t\t    plus_constant (virtual_incoming_args_rtx,\t\t\\\n+\t\t\t\t   - PRETEND_SIZE)),\t\t\t\\\n+\t   (MAX_ARGS_IN_REGISTERS - (CUM).arg_words\t\t\t\\\n+\t    - ! current_function_varargs),\t\t\t\t\\\n+\t   PRETEND_SIZE, 0);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define STRICT_ARGUMENT_NAMING\n+\n+/* ??? Unimplemented stuff follows.  */\n+\n+/* ??? Add support for 16 byte/128 bit long doubles here when\n+   mips_isa >= 3.  */\n+\n+/* ??? Make main return zero if user did not specify return value.  */\n+\n+/* ??? Add support for .interfaces section, so as to get linker warnings\n+   when stdarg functions called without prototype in scope?  */\n+\n+/* ??? Could optimize structure passing by putting the right register rtx\n+   into the field decl, so that if we use the field, we can take the value from\n+   a register instead of from memory.  */\n+"}, {"sha": "19c17fb50131506a9d13fcbe10ac01f702c44b8d", "filename": "gcc/config/mips/cross64.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fcross64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fcross64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fcross64.h?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,36 @@\n+/* Configuration for an Irix 5 host and Irix 6 target using SGI's cross64\n+   package.  */\n+\n+#include \"mips/iris6.h\"\n+\n+#define STANDARD_INCLUDE_DIR \"/usr/cross64/usr/include\"\n+#undef MD_EXEC_PREFIX\n+#define MD_EXEC_PREFIX \"/usr/cross64/usr/bin/\"\n+#undef MD_STARTFILE_PREFIX\n+#define MD_STARTFILE_PREFIX \"/usr/cross64/usr/lib/lib64/\"\n+\n+/* Must add TOOLROOT to the environment, or else the assembler will not\n+   work.  */\n+#define INIT_ENVIRONMENT\t\\\n+  putenv (\"TOOLROOT=/usr/cross64\")\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{mips1:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n+   %{mips2:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n+   %{!mips1:%{!mips2:%{pg:/usr/cross64/usr/lib64/mips4/gcrt1.o}\t\t    \\\n+   %{!pg:%{p:/usr/cross64/usr/lib64/mips4/mcrt1.o\t\t\t    \\\n+     /usr/cross64/usr/lib64/mips4/libprof1.a}\t\t\t\t    \\\n+   %{!p:/usr/cross64/usr/lib64/mips4/crt1.o}}}}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{mips1:crtn.o%s}%{mips2:crtn.o%s}%{!mips1:%{!mips2:/usr/cross64/usr/lib64/mips4/crtn.o}}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+-64 -_SYSTYPE_SVR4 %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{bestGnum} %{shared} %{non_shared} \\\n+%{call_shared} %{no_archive} %{exact_version} \\\n+%{!shared: %{!non_shared: %{!call_shared: -call_shared -no_unresolved}}} \\\n+%{!mips1:%{!mips2:-L/usr/cross64/usr/lib64/mips4 -L/usr/cross64/usr/lib64}}\""}, {"sha": "ea7102572747ae902ac935091713aa75e13f6a62", "filename": "gcc/config/mips/iris6.h", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,279 @@\n+/* Definitions of target machine for GNU compiler.  Iris version 6.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Irix 6 uses DWARF.  */\n+#define DWARF_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+\n+/* Default to -mips4.  */\n+#define TARGET_DEFAULT MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT\n+#define MIPS_ISA_DEFAULT 4\n+\n+#include \"mips/iris5gas.h\"\n+#include \"mips/abi64.h\"\n+\n+/* Irix 5 stuff that we don't need for Irix 6.  */\n+#undef ASM_OUTPUT_UNDEF_FUNCTION\n+#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+\n+/* Stuff we need for Irix 6 that isn't in Irix 5.  */\n+\n+#undef SET_ASM_OP\t/* Has no equivalent.  See ASM_OUTPUT_DEF below.  */\n+\n+/* This is how to equate one symbol to another symbol.  The syntax used is\n+   `SYM1=SYM2'.  Note that this is different from the way equates are done\n+   with most svr4 assemblers, where the syntax is `.set SYM1,SYM2'.  */\n+\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n+ do {\tfprintf ((FILE), \"\\t\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\tfprintf (FILE, \" = \");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define POPSECTION_ASM_OP\t\".popsection\"\n+\n+/* To enable use of init and fini sections.  */\n+#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n+#undef LD_INIT_SWITCH\n+#undef LD_FINI_SWITCH\n+#undef HAS_INIT_SECTION\n+\n+#define DEBUG_SECTION\t\t\".debug,1,0,0,1\"\n+#define LINE_SECTION\t\t\".line,1,0,0,1\"\n+#define SFNAMES_SECTION\t\t\".debug_sfnames,1,0,0,1\"\n+#define SRCINFO_SECTION\t\t\".debug_srcinfo,1,0,0,1\"\n+#define MACINFO_SECTION\t\t\".debug_macinfo,1,0,0,1\"\n+#define PUBNAMES_SECTION\t\".debug_pubnames,1,0,0,1\"\n+#define ARANGES_SECTION\t\t\".debug_aranges,1,0,0,1\"\n+\n+#undef ASM_SPEC\n+#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GAS) != 0\n+/* GAS */\n+#define ASM_SPEC \"\\\n+%{mmips-as: \\\n+\t%{!.s:-nocpp} %{.s: %{cpp} %{nocpp}} \\\n+\t%{pipe: %e-pipe is not supported.} \\\n+\t%{K}} \\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} %{v} \\\n+%{noasmopt:-O0} \\\n+%{!noasmopt:%{O:-O2} %{O1:-O2} %{O2:-O2} %{O3:-O3}} \\\n+%{g} %{g0} %{g1} %{g2} %{g3} \\\n+%{ggdb:-g} %{ggdb0:-g0} %{ggdb1:-g1} %{ggdb2:-g2} %{ggdb3:-g3} \\\n+%{gstabs:-g} %{gstabs0:-g0} %{gstabs1:-g1} %{gstabs2:-g2} %{gstabs3:-g3} \\\n+%{gstabs+:-g} %{gstabs+0:-g0} %{gstabs+1:-g1} %{gstabs+2:-g2} %{gstabs+3:-g3} \\\n+%{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3} \\\n+%{membedded-pic}\"\n+\n+#else\n+/* not GAS */\n+/* Must pass -g0 to the assembler, otherwise it may overwrite our\n+   debug info with its own debug info. */\n+/* Must pass -show instead of -v.  */\n+/* Must pass -G 0 to the assembler, otherwise we may get warnings about\n+   GOT overflow.  */\n+#define ASM_SPEC \"\\\n+%{!mgas: \\\n+\t%{!.s:-nocpp} %{.s: %{cpp} %{nocpp}} \\\n+\t%{pipe: %e-pipe is not supported.} \\\n+\t%{K}} \\\n+%{G*} %{EB} %{EL} %{v:-show} \\\n+%{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{!mips1: %{!mips2: %{!mips3: %{!mips4: -mips4}}}} \\\n+%{noasmopt:-O0} %{!noasmopt:%{O:-O2} %{O1:-O2} %{O2:-O2} %{O3:-O3}} \\\n+-g0 -G 0 %{membedded-pic}\"\n+\n+#endif\n+\n+/* Stuff for constructors.  Start here.  */\n+\n+#define CONST_SECTION_ASM_OP_32\t\"\\t.rdata\"\n+#define CONST_SECTION_ASM_OP_64\t\".section\\t.rodata\"\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,1,2,0,4\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,1,2,0,4\"\n+\n+/* This is the pseudo-op used to generate a 32-bit word of data with a\n+   specific value in some section.  This is the same for all known svr4\n+   assemblers.  */\n+\n+#define INT_ASM_OP\t\t\".word\"\n+\n+/* A default list of other sections which we might be \"in\" at any given\n+   time.  For targets that use additional sections (e.g. .tdesc) you\n+   should override this definition in the target-specific file which\n+   includes this file.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_rdata, in_const, in_ctors, in_dtors, in_bss\n+\n+/* A default list of extra section function definitions.  For targets\n+   that use additional sections (e.g. .tdesc) you should override this\n+   definition in the target-specific file which includes this file.  */\n+\n+/* ??? rdata_section is now same as svr4 const_section.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+sdata_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_sdata)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n+      in_section = in_sdata;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+rdata_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_rdata)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (mips_isa >= 3)\t\t\t\t\t\t\\\n+\tfprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP_64);\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tfprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP_32);\t\\\n+      in_section = in_rdata;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Stuff for constructors.  End here.  */\n+\n+/* ??? Perhaps just include svr4.h in this file?  */\n+\n+/* ??? SGI assembler may core dump when compiling with -g.\n+   Sometimes as succeeds, but then we get a linker error. (cmds.c in 072.sc)\n+   Getting rid of .file solves both problems.  */\n+#undef ASM_OUTPUT_FILENAME\n+#define ASM_OUTPUT_FILENAME(STREAM, NUM_SOURCE_FILENAMES, NAME) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t#.file\\t%d \", NUM_SOURCE_FILENAMES);\t\\\n+    output_quoted_string (STREAM, NAME);\t\t\t\\\n+    fputs (\"\\n\", STREAM);\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* ??? SGI assembler gives warning whenever .lcomm is used.  */\n+#undef ASM_OUTPUT_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(STREAM, NAME, SIZE, ALIGN)\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (mips_isa >= 3)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfputs (\"\\t.section\\t.bss\\n\", STREAM);\t\t\t\\\n+\tASM_DECLARE_OBJECT_NAME (STREAM, NAME, 0);\t\t\\\n+\tASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n+\tASM_OUTPUT_SKIP (STREAM, SIZE);\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t%s\\n\", POPSECTION_ASM_OP);\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (SIZE)); \\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#undef ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(STREAM,PREFIX,NUM)\t\t\t\\\n+  fprintf (STREAM, \".%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n+  sprintf (LABEL, \"*.%s%d\", PREFIX, NUM)\n+\n+#undef STARTFILE_SPEC\n+/* Profiling is supported via libprof1.a not -lc_p as in Irix 3.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{mips1:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n+   %{mips2:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n+   %{!mips1:%{!mips2:%{pg:/usr/lib64/gcrt1.o}%{!pg:%{p:/usr/lib64/mcrt1.o /usr/lib64/libprof1.a}%{!p:/usr/lib64/crt1.o}}}}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{p:libprof1.a%s}%{pg:libprof1.a%s} -lc\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{mips1:crtn.o%s}%{mips2:crtn.o%s}%{!mips1:%{!mips2:/usr/lib64/crtn.o}}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{bestGnum} %{shared} %{non_shared} \\\n+%{call_shared} %{no_archive} %{exact_version} \\\n+%{!shared: %{!non_shared: %{!call_shared: -call_shared -no_unresolved}}} \\\n+-_SYSTYPE_SVR4\"\n+\n+/* ??? Debugging does not work.  We get many assembler core dumps,\n+   and even some linker core dumps.  */\n+#undef DBX_DEBUGGING_INFO\n+#undef SDB_DEBUGGING_INFO\n+#undef MIPS_DEBUGGING_INFO\n+#undef DWARF_DEBUGGING_INFO\n+#undef PREFERRED_DEBUGGING_TYPE"}, {"sha": "9482412a844156a0ff35894d402dadc556ae4e64", "filename": "gcc/config/mips/t-cross64", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Ft-cross64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Ft-cross64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-cross64?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,19 @@\n+SYSTEM_HEADER_DIR = /usr/cross64/usr/include\n+\n+AR = /usr/cross64/usr/bin/ar\n+\n+FLOAT_H = $(CROSS_FLOAT_H)\n+\n+# The rest of the file is identical to t-iris6.\n+\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n+# and does not need anything from libgcc1.a.\n+LIBGCC1 = \n+CROSS_LIBGCC1 = \n+\n+MULTILIB_OPTIONS=mips1/mips2/mips3/mips4\n+MULTILIB_DIRNAMES=\n+MULTILIB_MATCHES=\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "e1a4d50ce41e135295c20399a44c056540485e30", "filename": "gcc/config/mips/t-iris6", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,11 @@\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n+# and does not need anything from libgcc1.a.\n+LIBGCC1 = \n+CROSS_LIBGCC1 = \n+\n+MULTILIB_OPTIONS=mips1/mips2/mips3/mips4\n+MULTILIB_DIRNAMES=\n+MULTILIB_MATCHES=\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "a1a4facc42f245badb92058e57ec07a1eea5ff0c", "filename": "gcc/config/mips/x-iris6", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fx-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fx-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-iris6?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,2 @@\n+# Find all of the declarations from the header files\n+FIXPROTO_DEFINES= -D__EXTENSIONS__"}, {"sha": "775497cc80faed39c141e7b3e68a5b2b16f733a8", "filename": "gcc/config/mips/xm-iris6.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec6afdde74db9ab4223db14c2dde07bd4057ed9/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-iris6.h?ref=2ec6afdde74db9ab4223db14c2dde07bd4057ed9", "patch": "@@ -0,0 +1,21 @@\n+#define MIPS_OVERRIDE_ALLOCA\n+#ifndef __GNUC__\n+#include <alloca.h>\n+#else\n+extern void *alloca ();\n+#endif\n+\n+#include \"mips/xm-iris5.h\"\n+\n+#undef HOST_BITS_PER_LONG\n+#define HOST_BITS_PER_LONG\t64\n+\n+/* Declare some functions needed for this machine.  We don't want to\n+   include these in the sources since other machines might define them\n+   differently.  */\n+\n+extern void *malloc (), *realloc (), *calloc ();\n+\n+#ifndef inhibit_libc\n+#include \"string.h\"\n+#endif"}]}