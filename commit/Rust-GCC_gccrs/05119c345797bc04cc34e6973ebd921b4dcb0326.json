{"sha": "05119c345797bc04cc34e6973ebd921b4dcb0326", "node_id": "C_kwDOANBUbNoAKDA1MTE5YzM0NTc5N2JjMDRjYzM0ZTY5NzNlYmQ5MjFiNGRjYjAzMjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-09T10:39:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-09T10:39:22Z"}, "message": "c++: Minimal handling of carries_dependency attribute\n\nA comment in D2552R1:\n\"The only questionable (but still conforming) case we found was\n[[carries_dependency(some_argument)]] on GCC, where the emitted diagnostic said that the\ncarries_dependency attribute is not supported, but did not specifically call out the syntax error\nin the argument clause.\"\nmade me try the following patch, where we'll error at least\nfor arguments to the attribute and for some uses of the attribute\nappertaining to something not mentioned in the standard warn\nwith different diagnostics (or should that be an error?; clang++\ndoes that, but I think we never do for any attribute, standard or not).\nThe diagnostics on toplevel attribute declaration is still an\nattribute ignored warning and on empty statement different wording.\n\nThe paper additionally mentions\nstruct X { [[nodiscard]]; }; // no diagnostic on GCC\nand 2 cases of missing diagnostics on [[fallthrough]] (guess I should\nfile a PR about those; one problem is that do { ... } while (0); there\nis replaced during genericization just by ... and another that\n[[fallthrough]] there is followed by a label, but not user/case/default\nlabel, but an artificial one created from while loop genericization.\n\n2022-11-09  Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree.cc (handle_carries_dependency_attribute): New function.\n\t(std_attribute_table): Add carries_dependency attribute.\n\t* parser.cc (cp_parser_check_std_attribute): Add carries_dependency\n\tattribute.\n\n\t* g++.dg/cpp0x/attr-carries_dependency1.C: New test.", "tree": {"sha": "3c6d80d9a90689dcffa303891ba18ac757e48306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6d80d9a90689dcffa303891ba18ac757e48306"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05119c345797bc04cc34e6973ebd921b4dcb0326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05119c345797bc04cc34e6973ebd921b4dcb0326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05119c345797bc04cc34e6973ebd921b4dcb0326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05119c345797bc04cc34e6973ebd921b4dcb0326/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecc039fbb4ffdb0e5185fdd7f8f87c3eec68832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecc039fbb4ffdb0e5185fdd7f8f87c3eec68832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecc039fbb4ffdb0e5185fdd7f8f87c3eec68832"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "e4021835ed58034334dc5884db989d481a6fe3c9", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=05119c345797bc04cc34e6973ebd921b4dcb0326", "patch": "@@ -29239,8 +29239,7 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n \n /* Warn if the attribute ATTRIBUTE appears more than once in the\n    attribute-list ATTRIBUTES.  This used to be enforced for certain\n-   attributes, but the restriction was removed in P2156.  Note that\n-   carries_dependency ([dcl.attr.depend]) isn't implemented yet in GCC.\n+   attributes, but the restriction was removed in P2156.\n    LOC is the location of ATTRIBUTE.  Returns true if ATTRIBUTE was not\n    found in ATTRIBUTES.  */\n \n@@ -29249,7 +29248,7 @@ cp_parser_check_std_attribute (location_t loc, tree attributes, tree attribute)\n {\n   static auto alist = { \"noreturn\", \"deprecated\", \"nodiscard\", \"maybe_unused\",\n \t\t\t\"likely\", \"unlikely\", \"fallthrough\",\n-\t\t\t\"no_unique_address\" };\n+\t\t\t\"no_unique_address\", \"carries_dependency\" };\n   if (attributes)\n     for (const auto &a : alist)\n       if (is_attribute_p (a, get_attribute_name (attribute))"}, {"sha": "954c6de2fcd396483b4d0f7160e04a3e0de79d10", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=05119c345797bc04cc34e6973ebd921b4dcb0326", "patch": "@@ -4923,6 +4923,32 @@ structural_type_p (tree t, bool explain)\n   return true;\n }\n \n+/* Partially handle the C++11 [[carries_dependency]] attribute.\n+   Just emit a different diagnostics when it is used on something the\n+   spec doesn't allow vs. where it allows and we just choose to ignore\n+   it.  */\n+\n+static tree\n+handle_carries_dependency_attribute (tree *node, tree name,\n+\t\t\t\t     tree ARG_UNUSED (args),\n+\t\t\t\t     int ARG_UNUSED (flags),\n+\t\t\t\t     bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL\n+      && TREE_CODE (*node) != PARM_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute can only be applied to \"\n+\t       \"functions or parameters\", name);\n+      *no_add_attrs = true;\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Handle the C++17 [[nodiscard]] attribute, which is similar to the GNU\n    warn_unused_result attribute.  */\n \n@@ -5036,6 +5062,8 @@ const struct attribute_spec std_attribute_table[] =\n     handle_likeliness_attribute, attr_cold_hot_exclusions },\n   { \"noreturn\", 0, 0, true, false, false, false,\n     handle_noreturn_attribute, attr_noreturn_exclusions },\n+  { \"carries_dependency\", 0, 0, true, false, false, false,\n+    handle_carries_dependency_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n "}, {"sha": "bf0f9cb3645fc4711e730c2d66069e0f3f5ca2c5", "filename": "gcc/testsuite/g++.dg/cpp0x/attr-carries_dependency1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattr-carries_dependency1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05119c345797bc04cc34e6973ebd921b4dcb0326/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattr-carries_dependency1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattr-carries_dependency1.C?ref=05119c345797bc04cc34e6973ebd921b4dcb0326", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++11 } }\n+\n+[[carries_dependency]] int *f1 ();\t\t// { dg-warning \"attribute ignored\" }\n+int f2 (int *x [[carries_dependency]]);\t\t// { dg-warning \"attribute ignored\" }\n+[[carries_dependency]] int f3 ();\t\t// { dg-warning \"attribute ignored\" }\n+int f4 (int x [[carries_dependency]]);\t\t// { dg-warning \"attribute ignored\" }\n+[[carries_dependency(1)]] int f5 ();\t\t// { dg-error \"'carries_dependency' attribute does not take any arguments\" }\n+[[carries_dependency]] int v;\t\t\t// { dg-warning \"'carries_dependency' attribute can only be applied to functions or parameters\" }\n+[[carries_dependency]];\t\t\t\t// { dg-warning \"attribute ignored\" }\n+void\n+f6 ()\n+{\n+  [[carries_dependency]];\t\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" }\n+}\n+#if __has_cpp_attribute(carries_dependency)\n+#error carries_dependency attribute is not actually implemented\n+#endif"}]}