{"sha": "701cade1a260d5a78662e304a7cac0aaf2d77951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxY2FkZTFhMjYwZDVhNzg2NjJlMzA0YTdjYWMwYWFmMmQ3Nzk1MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-11-05T16:19:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-11-05T16:19:10Z"}, "message": "Enable -fextended-identifiers by default.\n\nAs proposed at <https://gcc.gnu.org/ml/gcc/2014-11/msg00014.html>,\nthis patch enables -fextended-identifiers by default for all standard\nversions including this feature (all C++ versions, C99 and above for\nC, but not C90 / C94 / gnu89 / preprocessing assembler).  It adds a\ncouple of tests for areas where I previously noted testsuite coverage\nfor extended identifiers was lacking, removes -fextended-identifiers\nfrom existing tests, adds -g to various such tests to verify that\nextended identifiers don't break debug info generation and removes the\ntest that was only there to verify that the feature was off by\ndefault.\n\nThe current state of the feature may not correspond exactly to any\nparticular checklist from 2004/5 (see bug 9449) of what was wanted\nbefore enabling the feature by default, but I don't think it's any\nworse than plenty of other features supported by default before every\ncorner case is fully functional, and think problems can readily be\nfixed incrementally.\n\nThe following aspects of extended identifiers could still do with more\nwork (and should be straightforward):\n\n* C -aux-info (output should use UCNs).\n\n* ObjC -gen-decls (output should use UCNs; associated diagnostics from\n  the ObjC front end should use extended characters or UCNs as\n  appropriate to the locale, via using %qE or identifier_to_locale).\n\n* Use DW_AT_use_UTF8 in DWARF-3 debug info for compilation units built\n  with extended identifiers enabled (or unconditionally).\n\n* cpplib diagnostics (outputting characters or UCNs as appropriate\n  depending on the locale, as done for identifiers in non-cpplib\n  diagnostics).\n\n* C++ test for UCN linking with C and extern \"C\".\n\n* Check GDB support / file issues for support if needed.\n\n* Actual UTF-8 in identifiers (?).  (Be careful about not affecting\n  performance for the normal fast path of lexing identifiers, if\n  possible.)\n\nThe following may be trickier:\n\n* cpplib spelling preservation (required to diagnose macro\n  redefinition with different spellings of the same identifier in the\n  definition or argument names; different spellings of the name of the\n  macro itself are OK, however; also required for correct handling of\n  multiple stringizing in C++); correct output for -d (UCNs), DWARF\n  debug info for macros (UCNs), PCH and PCH tests.  (Spelling\n  preservation is the issue that needs fixing to remove references to\n  corner cases in the documentation of -std=c99 and -std=c11 and in\n  c99status.html.)  The idea would be to add a second pointer to\n  cpp_identifier that stores the original spelling (whether for\n  extended identifiers only, or for all identifiers); this does not\n  enlarge cpp_token because the resulting larger cpp_identifier\n  structure is no bigger than cpp_string.\n\n* C++ translation of extended characters (including $@` and various\n  control characters) to UCNs in phase 1 (note diagnostics thus\n  needed, but not for C++11, for control characters in strings /\n  character constants as those UCNs invalid); a likely implementation\n  approach is to do translation when identifiers / strings / character\n  constants are lexed, together with errors for stray $@` / control\n  characters in program as not being valid UCNs in identifiers ($ only\n  if not accepted in identifiers); note that this translation should\n  not take place inside raw string literals.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\nlibcpp:\n\tPR preprocessor/9449\n\t* init.c (lang_defaults): Enable extended identifiers for C++ and\n\tC99-based standards.\n\ngcc:\n\tPR preprocessor/9449\n\t* doc/cpp.texi (Character sets, Tokenization)\n\t(Implementation-defined behavior): Don't refer to UCNs in\n\tidentifiers requiring -fextended-identifiers.\n\t* doc/cppopts.texi (-fextended-identifiers): Document as enabled\n\tby default for C99 and later and C++.\n\t* doc/invoke.texi (-std=c99, -std=c11): Don't refer to extended\n\tidentifiers needing -fextended-identifiers.\n\ngcc/testsuite:\n\tPR preprocessor/9449\n\t* lib/target-supports.exp (check_effective_target_ucn_nocache):\n\tDon't use -fextended-identifiers.\n\t* c-c++-common/cpp/normalize-3.c, c-c++-common/cpp/ucnid-2011-1.c,\n\tg++.dg/cpp/ucn-1.C, g++.dg/cpp/ucnid-1.C, g++.dg/other/ucnid-1.C,\n\tgcc.dg/cpp/normalize-1.c, gcc.dg/cpp/normalize-2.c,\n\tgcc.dg/cpp/normalize-4.c: Don't use -fextended-identifiers.\n\t* gcc.dg/cpp/ucnid-1.c: Don't use -fextended-identifiers.  Use\n\t-g3.\n\t* gcc.dg/cpp/ucnid-10.c, gcc.dg/cpp/ucnid-2.c,\n\tgcc.dg/cpp/ucnid-3.c, gcc.dg/cpp/ucnid-4.c, gcc.dg/cpp/ucnid-5.c,\n\tgcc.dg/cpp/ucnid-7.c, gcc.dg/cpp/ucnid-9.c,\n\tgcc.dg/cpp/warn-normalized-1.c, gcc.dg/cpp/warn-normalized-2.c,\n\tgcc.dg/cpp/warn-normalized-3.c: Don't use -fextended-identifiers.\n\t* gcc.dg/ucnid-1.c, gcc.dg/ucnid-2.c, gcc.dg/ucnid-3.c,\n\tgcc.dg/ucnid-4.c, gcc.dg/ucnid-5.c, gcc.dg/ucnid-6.c: Don't use\n\t-fextended-identifiers.  Use -g.\n\t* gcc.dg/ucnid-7.c, gcc.dg/ucnid-8.c: Don't use\n\t-fextended-identifiers.\n\t* gcc.dg/ucnid-9.c: Don't use -fextended-identifiers.  Use -g.\n\t* gcc.dg/ucnid-10.c: Don't use -fextended-identifiers.\n\t* gcc.dg/ucnid-11.c, gcc.dg/ucnid-12.c: Don't use\n\t-fextended-identifiers.  Use -g.\n\t* gcc.dg/ucnid-13.c: Don't use -fextended-identifiers.\n\t* gcc.dg/cpp/ucnid-8.c: Remove test.\n\t* gcc.dg/cpp/ucnid-10.c, gcc.dg/ucnid-14.c: New tests.\n\nFrom-SVN: r217144", "tree": {"sha": "a5b5e4b6d1278ce3bdbc1a037dcffa589ea593a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b5e4b6d1278ce3bdbc1a037dcffa589ea593a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/701cade1a260d5a78662e304a7cac0aaf2d77951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701cade1a260d5a78662e304a7cac0aaf2d77951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701cade1a260d5a78662e304a7cac0aaf2d77951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701cade1a260d5a78662e304a7cac0aaf2d77951/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92883d6ba13db87d893755f74532bfe5cb4ba72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92883d6ba13db87d893755f74532bfe5cb4ba72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92883d6ba13db87d893755f74532bfe5cb4ba72"}], "stats": {"total": 213, "additions": 136, "deletions": 77}, "files": [{"sha": "c5b14a00bcc8fe290178e9f5c00564d15839d0f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,3 +1,14 @@\n+2014-11-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/9449\n+\t* doc/cpp.texi (Character sets, Tokenization)\n+\t(Implementation-defined behavior): Don't refer to UCNs in\n+\tidentifiers requiring -fextended-identifiers.\n+\t* doc/cppopts.texi (-fextended-identifiers): Document as enabled\n+\tby default for C99 and later and C++.\n+\t* doc/invoke.texi (-std=c99, -std=c11): Don't refer to extended\n+\tidentifiers needing -fextended-identifiers.\n+\n 2014-11-05  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* config/i386/i386.c (expand_vec_perm_pshufb): Try vpermq/vpermd"}, {"sha": "f32aac70b6e86871727da81f4cb2cb355353cae6", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -275,11 +275,11 @@ the character in the source character set that they represent, then\n converted to the execution character set, just like unescaped\n characters.\n \n-Unless the experimental @option{-fextended-identifiers} option is used,\n-GCC does not permit the use of characters outside the ASCII range, nor\n-@samp{\\u} and @samp{\\U} escapes, in identifiers.  Even with that\n-option, characters outside the ASCII range can only be specified with\n-the @samp{\\u} and @samp{\\U} escapes, not used directly in identifiers.\n+In identifiers, characters outside the ASCII range can only be\n+specified with the @samp{\\u} and @samp{\\U} escapes, not used\n+directly.  If strict ISO C90 conformance is specified with an option\n+such as @option{-std=c90}, or @option{-fno-extended-identifiers} is\n+used, then those escapes are not permitted in identifiers.\n \n @node Initial processing\n @section Initial processing\n@@ -504,10 +504,8 @@ In the 1999 C standard, identifiers may contain letters which are not\n part of the ``basic source character set'', at the implementation's\n discretion (such as accented Latin letters, Greek letters, or Chinese\n ideograms).  This may be done with an extended character set, or the\n-@samp{\\u} and @samp{\\U} escape sequences.  The implementation of this\n-feature in GCC is experimental; such characters are only accepted in\n-the @samp{\\u} and @samp{\\U} forms and only if\n-@option{-fextended-identifiers} is used.\n+@samp{\\u} and @samp{\\U} escape sequences.  GCC only accepts such\n+characters in the @samp{\\u} and @samp{\\U} forms.\n \n As an extension, GCC treats @samp{$} as a letter.  This is for\n compatibility with some systems, such as VMS, where @samp{$} is commonly\n@@ -4100,9 +4098,7 @@ be controlled using the @option{-fexec-charset} and\n The C and C++ standards allow identifiers to be composed of @samp{_}\n and the alphanumeric characters.  C++ and C99 also allow universal\n character names, and C99 further permits implementation-defined\n-characters.  GCC currently only permits universal character names if\n-@option{-fextended-identifiers} is used, because the implementation of\n-universal character names in identifiers is experimental.\n+characters.\n \n GCC allows the @samp{$} character in identifiers as an extension for\n most targets.  This is true regardless of the @option{std=} switch,"}, {"sha": "150e74f3d90b3674d56e3dcb8bd3d965c21fa2a2", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -560,8 +560,7 @@ Accept @samp{$} in identifiers.\n @item -fextended-identifiers\n @opindex fextended-identifiers\n Accept universal character names in identifiers.  This option is\n-experimental; in a future version of GCC, it will be enabled by\n-default for C99 and C++.\n+enabled by default for C99 (and later C standard versions) and C++.\n \n @item -fno-canonical-system-headers\n @opindex fno-canonical-system-headers"}, {"sha": "a6429333c3cd63ff460cd15bc85333989f0cbfe7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1674,8 +1674,7 @@ ISO C90 as modified in amendment 1.\n @itemx iso9899:1999\n @itemx iso9899:199x\n ISO C99.  This standard is substantially completely supported, modulo\n-bugs, extended identifiers (supported except for corner cases when\n-@option{-fextended-identifiers} is used) and floating-point issues\n+bugs, corner cases of extended identifiers and floating-point issues\n (mainly but not entirely relating to optional C99 features from\n Annexes F and G).  See\n @w{@uref{http://gcc.gnu.org/c99status.html}} for more information.  The\n@@ -1685,9 +1684,8 @@ names @samp{c9x} and @samp{iso9899:199x} are deprecated.\n @itemx c1x\n @itemx iso9899:2011\n ISO C11, the 2011 revision of the ISO C standard.  This standard is\n-substantially completely supported, modulo bugs, extended identifiers\n-(supported except for corner cases when\n-@option{-fextended-identifiers} is used), floating-point issues\n+substantially completely supported, modulo bugs, corner cases of\n+extended identifiers, floating-point issues\n (mainly but not entirely relating to optional C11 features from\n Annexes F and G) and the optional Annexes K (Bounds-checking\n interfaces) and L (Analyzability).  The name @samp{c1x} is deprecated."}, {"sha": "924ed28c1aa738cf17b64fab4044ed91f2dbcca2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,3 +1,32 @@\n+2014-11-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/9449\n+\t* lib/target-supports.exp (check_effective_target_ucn_nocache):\n+\tDon't use -fextended-identifiers.\n+\t* c-c++-common/cpp/normalize-3.c, c-c++-common/cpp/ucnid-2011-1.c,\n+\tg++.dg/cpp/ucn-1.C, g++.dg/cpp/ucnid-1.C, g++.dg/other/ucnid-1.C,\n+\tgcc.dg/cpp/normalize-1.c, gcc.dg/cpp/normalize-2.c,\n+\tgcc.dg/cpp/normalize-4.c: Don't use -fextended-identifiers.\n+\t* gcc.dg/cpp/ucnid-1.c: Don't use -fextended-identifiers.  Use\n+\t-g3.\n+\t* gcc.dg/cpp/ucnid-10.c, gcc.dg/cpp/ucnid-2.c,\n+\tgcc.dg/cpp/ucnid-3.c, gcc.dg/cpp/ucnid-4.c, gcc.dg/cpp/ucnid-5.c,\n+\tgcc.dg/cpp/ucnid-7.c, gcc.dg/cpp/ucnid-9.c,\n+\tgcc.dg/cpp/warn-normalized-1.c, gcc.dg/cpp/warn-normalized-2.c,\n+\tgcc.dg/cpp/warn-normalized-3.c: Don't use -fextended-identifiers.\n+\t* gcc.dg/ucnid-1.c, gcc.dg/ucnid-2.c, gcc.dg/ucnid-3.c,\n+\tgcc.dg/ucnid-4.c, gcc.dg/ucnid-5.c, gcc.dg/ucnid-6.c: Don't use\n+\t-fextended-identifiers.  Use -g.\n+\t* gcc.dg/ucnid-7.c, gcc.dg/ucnid-8.c: Don't use\n+\t-fextended-identifiers.\n+\t* gcc.dg/ucnid-9.c: Don't use -fextended-identifiers.  Use -g.\n+\t* gcc.dg/ucnid-10.c: Don't use -fextended-identifiers.\n+\t* gcc.dg/ucnid-11.c, gcc.dg/ucnid-12.c: Don't use\n+\t-fextended-identifiers.  Use -g.\n+\t* gcc.dg/ucnid-13.c: Don't use -fextended-identifiers.\n+\t* gcc.dg/cpp/ucnid-8.c: Remove test.\n+\t* gcc.dg/cpp/ucnid-10.c, gcc.dg/ucnid-14.c: New tests.\n+\n 2014-11-05  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp:"}, {"sha": "faafdbff08eabe68489ad09bb056b8f3082f3294", "filename": "gcc/testsuite/c-c++-common/cpp/normalize-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnormalize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnormalize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnormalize-3.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -Wnormalized=id\" { target c } } */\n-/* { dg-options \"-fextended-identifiers -Wnormalized=id\" { target c++ } } */\n+/* { dg-options \"-std=c99 -Wnormalized=id\" { target c } } */\n+/* { dg-options \"-Wnormalized=id\" { target c++ } } */\n \n \\u00AA\n \\u00B7"}, {"sha": "b7ebce8ea60b6cb46702b4201f5880201f183578", "filename": "gcc/testsuite/c-c++-common/cpp/ucnid-2011-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c11 -pedantic -fextended-identifiers\" { target c } } */\n-/* { dg-options \"-std=c++11 -pedantic -fextended-identifiers\" { target c++ } } */\n+/* { dg-options \"-std=c11 -pedantic\" { target c } } */\n+/* { dg-options \"-std=c++11 -pedantic\" { target c++ } } */\n \n \\u00A8\n "}, {"sha": "880e899e9e61a8dc2347b08c6fad3ca381c99731", "filename": "gcc/testsuite/g++.dg/cpp/ucn-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucn-1.C?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,6 +1,6 @@\n // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2170.html\n // { dg-do compile { target c++11 } }\n-// { dg-options \"-fextended-identifiers\" }\n+// { dg-options \"\" }\n \n int main()\n {"}, {"sha": "65c8995baad544ff95619e5d408176aa6b490f19", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=gnu++98 -pedantic -fextended-identifiers\" } */\n+/* { dg-options \"-std=gnu++98 -pedantic\" } */\n \n \\u00AA /* { dg-error \"not valid in an identifier\" } */\n \\u00AB /* { dg-error \"not valid in an identifier\" } */"}, {"sha": "95a31cb80fd9e95292e007ef9d0d24a55af50f0d", "filename": "gcc/testsuite/g++.dg/other/ucnid-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fextended-identifiers\" } */\n+/* { dg-options \"\" } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n #include <cstdlib>"}, {"sha": "768e1930e7a1689194746e8ba8f68c2b7af66c4a", "filename": "gcc/testsuite/gcc.dg/cpp/normalize-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-1.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n \n \\u00AA\n \\u00B7"}, {"sha": "28ef2f18e4282ae9bbae3bc2feb90a70bfe4d30b", "filename": "gcc/testsuite/gcc.dg/cpp/normalize-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-2.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -Wnormalized=nfkc\" } */\n+/* { dg-options \"-std=c99 -Wnormalized=nfkc\" } */\n \n \\u00AA  /* { dg-warning \"not in NFKC\" } */\n \\u00B7"}, {"sha": "1ee3ff545d5604082022c9f9162bd6b133b17b0b", "filename": "gcc/testsuite/gcc.dg/cpp/normalize-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fnormalize-4.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -Wnormalized=none\" } */\n+/* { dg-options \"-std=c99 -Wnormalized=none\" } */\n \n \\u00AA\n \\u00B7"}, {"sha": "c77111dbb3e5ab7b105cb5c28dbf4a1bf5cae407", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -g3\" } */\n void abort (void);\n \n #define \\u00C0 1"}, {"sha": "0ac035b85462b82f953788e4b24c99a356863490", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -0,0 +1,8 @@\n+/* Test UCNs are allowed in preprocessing numbers.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#define a(x) b(x)\n+#define b(x) 0\n+#define p )\n+int c = a(0\\u00c0.p);"}, {"sha": "616680a969ee0d1066f641b0944215cd26553aaa", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n #include <stdlib.h>\n #include <string.h>\n "}, {"sha": "a910037c31627705f09508da093a9e5956e2dfb4", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n \n #define paste(x, y) x ## y\n "}, {"sha": "e41a3f5907d92dd27c82a88c1b8f3ae8eda2fdf5", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n \n \\u00AA\n \\u00AB /* { dg-error \"not valid in an identifier\" } */"}, {"sha": "8fcaeac6f3179ba2153a94ce45b29ba3a4ad0f6f", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -pedantic -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n \n \\u00AA\n \\u00AB /* { dg-error \"not valid in an identifier\" } */"}, {"sha": "854c948341aaacf41a814b978515e156b81d276d", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n #define a b(\n #define b(x) q\n int a\\U0000000z );"}, {"sha": "1f0379a5bb51dfe47d720ceb98819cb94ba12a52", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-8.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92883d6ba13db87d893755f74532bfe5cb4ba72/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-8.c?ref=b92883d6ba13db87d893755f74532bfe5cb4ba72", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-std=c99\" } */\n-/* Test that -std=c99 does not enable extended identifiers while the\n-   feature is experimental; remove this test after audit of all\n-   identifier uses in the compiler.  */\n-#define a b(\n-#define b(x) q\n-int a\\u00aa);"}, {"sha": "8562f9bf01fdd5d657d6ed1a0150e7216833cf73", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-std=c99 -pedantic -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n \n \\u2160\n \\u2182"}, {"sha": "c047f5f00adfa7249cfc5582f2bf3f24fa9d9bdf", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n-// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Wnormalized=nfc\" }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wnormalized=nfc\" }\n \n \\u0F43  // { dg-warning \"`.U00000f43' is not in NFC .-Wnormalized=.\" }"}, {"sha": "5c8c7c5007e2ce00c84889c9331d284cd868b2f1", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n-// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Wnormalized=nfkc\" }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wnormalized=nfkc\" }\n \n \\u00AA  // { dg-warning \"`.U000000aa' is not in NFKC .-Wnormalized=.\" }"}, {"sha": "2251e2836b241a11f38b27d7484d43a2bead33f0", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n-// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Werror=normalized=\" }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=normalized=\" }\n /* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \\u0F43  // { dg-error \"`.U00000f43' is not in NFC .-Werror=normalized=.\" }"}, {"sha": "067a6922a7045859cd1a54256822a8745fd7a24c", "filename": "gcc/testsuite/gcc.dg/ucnid-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -g\" } */\n void abort (void);\n \n int main (void)"}, {"sha": "1438337b230cc94d451b21e22a421797f1373c4d", "filename": "gcc/testsuite/gcc.dg/ucnid-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* Verify diagnostics for extended identifiers refer to UCNs (in the C\n    locale).  Test #pragma pack diagnostics.  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=gnu99\" } */\n /* { dg-require-ascii-locale \"\" } */\n /* { dg-skip-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n "}, {"sha": "0ef6bfe5e6cb5647c0c44e8d52c523000c8a2573", "filename": "gcc/testsuite/gcc.dg/ucnid-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -2,6 +2,6 @@\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"-fdata-sections not supported\" { { hppa*-*-hpux* } && { ! lp64 } } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -fdata-sections\" } */\n+/* { dg-options \"-std=c99 -fdata-sections -g\" } */\n \n #include \"ucnid-3.c\""}, {"sha": "ca50653f899b8b0db50d009ea7027945acfd3caf", "filename": "gcc/testsuite/gcc.dg/ucnid-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -2,6 +2,6 @@\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"-ffunction-sections not supported\" { { hppa*-*-hpux* } && { ! lp64 } } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -ffunction-sections\" } */\n+/* { dg-options \"-std=c99 -ffunction-sections -g\" } */\n \n #include \"ucnid-4.c\""}, {"sha": "871f1034571d1a7af76d1c060c4056bfec62e428", "filename": "gcc/testsuite/gcc.dg/ucnid-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* Verify diagnostics for extended identifiers refer to UCNs (in the C\n    locale).  Miscellaneous diagnostics.  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -fextended-identifiers -Wpacked\" } */\n+/* { dg-options \"-std=gnu99 -Wpacked\" } */\n /* { dg-require-ascii-locale \"\" } */\n /* { dg-skip-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n "}, {"sha": "8d4eb71465b21367370cb53943f83302340d4091", "filename": "gcc/testsuite/gcc.dg/ucnid-14.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -0,0 +1,23 @@\n+/* Test miscellaneous uses of UCNs in identifiers compile and run OK,\n+   with debug info enabled.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -g\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  struct \\u00C0 { int \\u00C1; } x;\n+  struct \\u00C0 *y = &x;\n+  y->\\u00C1 = 1;\n+  if (x.\\U000000C1 != 1)\n+    abort ();\n+  goto \\u00ff;\n+ \\u00ff: ;\n+  enum e { \\u00C2 = 4 };\n+  if (\\u00C2 != 4)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "577df38f6236bacda074b5f2c7d1f38f2c07bb81", "filename": "gcc/testsuite/gcc.dg/ucnid-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -g\" } */\n void abort (void);\n \n static int \\u00C0 = 1;"}, {"sha": "0f8d46b15c98c28c27198ef7cea99aa7e1feec29", "filename": "gcc/testsuite/gcc.dg/ucnid-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -g\" } */\n void abort (void);\n \n int \\u00C0 = 1;"}, {"sha": "443dcb91798284feef546264a1037e9478a3eec5", "filename": "gcc/testsuite/gcc.dg/ucnid-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -g\" } */\n void abort (void);\n \n int \\u00C0(void) { return 1; }"}, {"sha": "a83dc8d8d297b67fac960363816e55234ae63f1b", "filename": "gcc/testsuite/gcc.dg/ucnid-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-skip-if \"No dollar in identfiers\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fdollars-in-identifiers -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99 -fdollars-in-identifiers -g\" } */\n void abort (void);\n \n int a$b(void) { return 1; }"}, {"sha": "70dd7b63cbfa46d96eb376c46358a6a69c96f0e7", "filename": "gcc/testsuite/gcc.dg/ucnid-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -save-temps\" } */\n+/* { dg-options \"-std=c99 -save-temps -g\" } */\n void abort (void);\n \n int \\u00C0(void) { return 1; }"}, {"sha": "b90bf68cd3182491e45e8673301aec427cd89567", "filename": "gcc/testsuite/gcc.dg/ucnid-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* Verify diagnostics for extended identifiers refer to UCNs (in the C\n    locale).  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+/* { dg-options \"-std=c99\" } */\n /* { dg-require-ascii-locale \"\" } */\n /* { dg-skip-if \"\" { \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n "}, {"sha": "703b77654b7feb0b26c65b97cf4bdb7337d0f7ed", "filename": "gcc/testsuite/gcc.dg/ucnid-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,7 +1,7 @@\n /* Verify diagnostics for extended identifiers refer to UCNs (in the C\n    locale).  Further tests of C front-end diagnostics.  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -fextended-identifiers -Wvla\" } */\n+/* { dg-options \"-std=gnu99 -Wvla\" } */\n /* { dg-require-ascii-locale \"\" } */\n /* { dg-skip-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } */\n "}, {"sha": "6af6d7665f4ca38e4e47fcb21b242c5ce1304ca2", "filename": "gcc/testsuite/gcc.dg/ucnid-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do run } */\n /* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"\" { ! ucn } { \"*\" } { \"\" } } */\n-/* { dg-options \"-std=c99 -fextended-identifiers -fexec-charset=ISO-8859-1\" } */\n+/* { dg-options \"-std=c99 -fexec-charset=ISO-8859-1 -g\" } */\n /* { dg-require-iconv \"ISO-8859-1\" } */\n \n extern int strcmp (const char *, const char *);"}, {"sha": "5e5338de16857401b9b112da5c1e4ae2afb99374", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -2020,8 +2020,9 @@ proc check_effective_target_ucn_nocache { } {\n     # -std=c99 is only valid for C\n     if [check_effective_target_c] {\n \tset ucnopts \"-std=c99\"\n+    } else {\n+\tset ucnopts \"\"\n     }\n-    append ucnopts \" -fextended-identifiers\"\n     verbose \"check_effective_target_ucn_nocache: compiling source\" 2\n     set ret [check_no_compiler_messages_nocache ucn object {\n \tint \\u00C0;"}, {"sha": "fc577f1ac751def8cc7be4e8c93ffa314eccbdb4", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -1,3 +1,9 @@\n+2014-11-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/9449\n+\t* init.c (lang_defaults): Enable extended identifiers for C++ and\n+\tC99-based standards.\n+\n 2014-10-22  Alan Modra  <amodra@gmail.com>\n \n \t* symtab.c (ht_create): Use obstack_specify_allocation in place of"}, {"sha": "2add6ea62de889045773603a48e7eea8d9e92328", "filename": "libcpp/init.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701cade1a260d5a78662e304a7cac0aaf2d77951/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701cade1a260d5a78662e304a7cac0aaf2d77951/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=701cade1a260d5a78662e304a7cac0aaf2d77951", "patch": "@@ -95,25 +95,21 @@ struct lang_flags\n static const struct lang_flags lang_defaults[] =\n { /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig */\n   /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n-  /* GNUC99   */  { 1,  0,  1,  0,  0,  0,  1,   1,   1,   0,    0,     0,     0 },\n-  /* GNUC11   */  { 1,  0,  1,  0,  1,  0,  1,   1,   1,   0,    0,     0,     0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0 },\n   /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1 },\n   /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* STDC99   */  { 1,  0,  1,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* STDC11   */  { 1,  0,  1,  0,  1,  1,  1,   1,   0,   0,    0,     0,     1 },\n-  /* GNUCXX   */  { 0,  1,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n-  /* CXX98    */  { 0,  1,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n-  /* GNUCXX11 */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    0,     0,     0 },\n-  /* CXX11    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    0,     0,     1 },\n-  /* GNUCXX14 */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n-  /* CXX14    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    1,     1,     1 },\n-  /* GNUCXX1Z */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n-  /* CXX1Z    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    1,     1,     0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0 },\n+  /* CXX11    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n+  /* CXX14    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1 },\n+  /* GNUCXX1Z */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n+  /* CXX1Z    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0 },\n   /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0 }\n-  /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n-     GNUCXX14, and CXX14 when no longer experimental (when all uses of\n-     identifiers in the compiler have been audited for correct handling\n-     of extended identifiers).  */\n };\n \n /* Sets internal flags correctly for a given language.  */"}]}