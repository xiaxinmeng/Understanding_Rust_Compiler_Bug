{"sha": "4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxZTQ5NjBhNmYxNzRhZTNlY2U5YTE1ODJhYTgwMjcwOGExZDJmYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-05-04T23:44:36Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-05-04T23:44:36Z"}, "message": "attribs.c (decl_attributes): Use %qE for identifiers in diagnostics.\n\n\t* attribs.c (decl_attributes): Use %qE for identifiers in\n\tdiagnostics.\n\t* cgraphunit.c (verify_cgraph_node): Translate function names to\n\tlocale character set in diagnostics.\n\t* coverage.c (get_coverage_counts): Use %qE for identifiers in\n\tdiagnostics.\n\t* doc/invoke.texi (-finstrument-functions-exclude-function-list):\n\tDocument that functions are named in UTF-8.\n\t* expr.c (expand_expr_real_1): Translate function names to locale\n\tcharacter set in diagnostics.\n\t* gimplify.c (omp_notice_variable, omp_is_private,\n\tgimplify_scan_omp_clauses): Use %qE for identifiers in\n\tdiagnostics.\n\t* langhooks.c (lhd_print_error_function): Translate function names\n\tto locale character set.\n\t* langhooks.h (decl_printable_name): Document that return value is\n\tin internal character set.\n\t* stmt.c: Include pretty-print.h\n\t(tree_conflicts_with_clobbers_p): Use %qE for identifiers in\n\tdiagnostics.\n\t(resolve_operand_name_1): Translate named operand name to locale\n\tcharacter set.\n\t* stor-layout.c (finalize_record_size): Use %qE for identifiers in\n\tdiagnostics.\n\t* toplev.c (announce_function): Translate function names to locale\n\tcharacter set.\n\t(warn_deprecated_use): Use %qE for identifiers in diagnostics.\n\t(default_tree_printer): Use pp_identifier or translate identifiers\n\tto locale character set.  Mark \"<anonymous>\" for translation.\n\t* tree-mudflap.c (mx_register_decls, mudflap_finish_file): Use %qE\n\tfor identifiers in diagnostics.\n\t* tree.c (handle_dll_attribute): Use %qE for identifiers in\n\tdiagnostics.\n\t* varasm.c (output_constructor): Use %qE for identifiers in\n\tdiagnostics.\n\ntestsuite:\n\t* gcc.dg/ucnid-11.c, gcc.dg/ucnid-12.c, gcc.dg/ucnid-13.c: New\n\ttests.\n\nFrom-SVN: r147111", "tree": {"sha": "b03ae469ea639011a5e2bb04f05228d71da46777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03ae469ea639011a5e2bb04f05228d71da46777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40540e682ac2596f091d0ee40729bc998cf904ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40540e682ac2596f091d0ee40729bc998cf904ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40540e682ac2596f091d0ee40729bc998cf904ed"}], "stats": {"total": 214, "additions": 144, "deletions": 70}, "files": [{"sha": "1e5803db5d435471f467cc61196d542baa3fd4ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -1,3 +1,41 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* attribs.c (decl_attributes): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* cgraphunit.c (verify_cgraph_node): Translate function names to\n+\tlocale character set in diagnostics.\n+\t* coverage.c (get_coverage_counts): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* doc/invoke.texi (-finstrument-functions-exclude-function-list):\n+\tDocument that functions are named in UTF-8.\n+\t* expr.c (expand_expr_real_1): Translate function names to locale\n+\tcharacter set in diagnostics.\n+\t* gimplify.c (omp_notice_variable, omp_is_private,\n+\tgimplify_scan_omp_clauses): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* langhooks.c (lhd_print_error_function): Translate function names\n+\tto locale character set.\n+\t* langhooks.h (decl_printable_name): Document that return value is\n+\tin internal character set.\n+\t* stmt.c: Include pretty-print.h\n+\t(tree_conflicts_with_clobbers_p): Use %qE for identifiers in\n+\tdiagnostics.\n+\t(resolve_operand_name_1): Translate named operand name to locale\n+\tcharacter set.\n+\t* stor-layout.c (finalize_record_size): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* toplev.c (announce_function): Translate function names to locale\n+\tcharacter set.\n+\t(warn_deprecated_use): Use %qE for identifiers in diagnostics.\n+\t(default_tree_printer): Use pp_identifier or translate identifiers\n+\tto locale character set.  Mark \"<anonymous>\" for translation.\n+\t* tree-mudflap.c (mx_register_decls, mudflap_finish_file): Use %qE\n+\tfor identifiers in diagnostics.\n+\t* tree.c (handle_dll_attribute): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* varasm.c (output_constructor): Use %qE for identifiers in\n+\tdiagnostics.\n+\n 2009-05-04  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* configure.ac: use ` ` instead of $()"}, {"sha": "df4ca73124daf53500af0942f502e31beb5809ca", "filename": "gcc/attribs.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -280,16 +280,16 @@ decl_attributes (tree *node, tree attributes, int flags)\n \n       if (spec == NULL)\n \t{\n-\t  warning (OPT_Wattributes, \"%qs attribute directive ignored\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qE attribute directive ignored\",\n+\t\t   name);\n \t  continue;\n \t}\n       else if (list_length (args) < spec->min_length\n \t       || (spec->max_length >= 0\n \t\t   && list_length (args) > spec->max_length))\n \t{\n-\t  error (\"wrong number of arguments specified for %qs attribute\",\n-\t\t IDENTIFIER_POINTER (name));\n+\t  error (\"wrong number of arguments specified for %qE attribute\",\n+\t\t name);\n \t  continue;\n \t}\n       gcc_assert (is_attribute_p (spec->name, name));\n@@ -306,8 +306,8 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t    }\n \t  else\n \t    {\n-\t      warning (OPT_Wattributes, \"%qs attribute does not apply to types\",\n-\t\t       IDENTIFIER_POINTER (name));\n+\t      warning (OPT_Wattributes, \"%qE attribute does not apply to types\",\n+\t\t       name);\n \t      continue;\n \t    }\n \t}\n@@ -357,8 +357,8 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t      && TREE_CODE (*anode) != METHOD_TYPE)\n \t    {\n \t      warning (OPT_Wattributes,\n-\t\t       \"%qs attribute only applies to function types\",\n-\t\t       IDENTIFIER_POINTER (name));\n+\t\t       \"%qE attribute only applies to function types\",\n+\t\t       name);\n \t      continue;\n \t    }\n \t}"}, {"sha": "9b7ca8c9b84283e9828926f276e0b3e3839dc8fa", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -570,7 +570,8 @@ verify_cgraph_node (struct cgraph_node *node)\n     if (e->aux)\n       {\n \terror (\"aux field set for edge %s->%s\",\n-\t       cgraph_node_name (e->caller), cgraph_node_name (e->callee));\n+\t       identifier_to_locale (cgraph_node_name (e->caller)),\n+\t       identifier_to_locale (cgraph_node_name (e->callee)));\n \terror_found = true;\n       }\n   if (node->count < 0)\n@@ -696,8 +697,8 @@ verify_cgraph_node (struct cgraph_node *node)\n \t  if (!e->aux && !e->indirect_call)\n \t    {\n \t      error (\"edge %s->%s has no corresponding call_stmt\",\n-\t\t     cgraph_node_name (e->caller),\n-\t\t     cgraph_node_name (e->callee));\n+\t\t     identifier_to_locale (cgraph_node_name (e->caller)),\n+\t\t     identifier_to_locale (cgraph_node_name (e->callee)));\n \t      debug_gimple_stmt (e->call_stmt);\n \t      error_found = true;\n \t    }"}, {"sha": "9240241f9c1af103da6ba0cb84bf81950b12b2b1", "filename": "gcc/coverage.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -347,8 +347,8 @@ get_coverage_counts (unsigned counter, unsigned expected,\n   entry = (counts_entry_t *) htab_find (counts_hash, &elt);\n   if (!entry)\n     {\n-      warning (0, \"no coverage for function %qs found\", IDENTIFIER_POINTER\n-\t       (DECL_ASSEMBLER_NAME (current_function_decl)));\n+      warning (0, \"no coverage for function %qE found\",\n+\t       DECL_ASSEMBLER_NAME (current_function_decl));\n       return NULL;\n     }\n \n@@ -357,14 +357,13 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       || entry->summary.num != expected)\n     {\n       static int warned = 0;\n-      const char *id = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME\n-\t\t\t (current_function_decl));\n+      tree id = DECL_ASSEMBLER_NAME (current_function_decl);\n \n       if (warn_coverage_mismatch)\n \twarning (OPT_Wcoverage_mismatch, \"coverage mismatch for function \"\n-\t\t \"%qs while reading counter %qs\", id, ctr_names[counter]);\n+\t\t \"%qE while reading counter %qs\", id, ctr_names[counter]);\n       else\n-\terror (\"coverage mismatch for function %qs while reading counter %qs\",\n+\terror (\"coverage mismatch for function %qE while reading counter %qs\",\n \t       id, ctr_names[counter]);\n \n       if (!inhibit_warnings)"}, {"sha": "0021e80091647a0fe2f6db14b8949813154500a4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -16124,7 +16124,9 @@ instrumentation.  The function name to be matched is its user-visible\n name, such as @code{vector<int> blah(const vector<int> &)}, not the\n internal mangled name (e.g., @code{_Z4blahRSt6vectorIiSaIiEE}).  The\n match is done on substrings: if the @var{sym} parameter is a substring\n-of the function name, it is considered to be a match.\n+of the function name, it is considered to be a match.  For C99 and C++\n+extended identifiers, the function name must be given in UTF-8, not\n+using universal character names.\n \n @item -fstack-check\n @opindex fstack-check"}, {"sha": "3c800dd77be576340dbd82bbdc0648db97d5c1fc", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -8055,14 +8055,14 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    && (attr = lookup_attribute (\"error\",\n \t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n \t  error (\"%Kcall to %qs declared with attribute error: %s\",\n-\t\t exp, lang_hooks.decl_printable_name (fndecl, 1),\n+\t\t exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n \t\t TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \tif (fndecl\n \t    && (attr = lookup_attribute (\"warning\",\n \t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n \t  warning_at (tree_nonartificial_location (exp),\n \t\t      0, \"%Kcall to %qs declared with attribute warning: %s\",\n-\t\t      exp, lang_hooks.decl_printable_name (fndecl, 1),\n+\t\t      exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n \t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n \t/* Check for a built-in function.  */"}, {"sha": "0909d31736895c0e9ee39d22b69b6640665366b6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -5395,8 +5395,8 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n       switch (default_kind)\n \t{\n \tcase OMP_CLAUSE_DEFAULT_NONE:\n-\t  error (\"%qs not specified in enclosing parallel\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t  error (\"%qE not specified in enclosing parallel\",\n+\t\t DECL_NAME (decl));\n \t  error (\"%Henclosing parallel\", &ctx->location);\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_DEFAULT_SHARED:\n@@ -5502,8 +5502,8 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl)\n \t{\n \t  if (ctx == gimplify_omp_ctxp)\n \t    {\n-\t      error (\"iteration variable %qs should be private\",\n-\t\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t      error (\"iteration variable %qE should be private\",\n+\t\t     DECL_NAME (decl));\n \t      n->value = GOVD_PRIVATE;\n \t      return true;\n \t    }\n@@ -5516,11 +5516,11 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl)\n \t\t       && gimplify_omp_ctxp->outer_context == ctx)))\n \t{\n \t  if ((n->value & GOVD_FIRSTPRIVATE) != 0)\n-\t    error (\"iteration variable %qs should not be firstprivate\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t    error (\"iteration variable %qE should not be firstprivate\",\n+\t\t   DECL_NAME (decl));\n \t  else if ((n->value & GOVD_REDUCTION) != 0)\n-\t    error (\"iteration variable %qs should not be reduction\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t    error (\"iteration variable %qE should not be reduction\",\n+\t\t   DECL_NAME (decl));\n \t}\n       return (ctx == gimplify_omp_ctxp\n \t      || (ctx->region_type == ORT_COMBINED_PARALLEL\n@@ -5682,8 +5682,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      && region_type == ORT_WORKSHARE\n \t      && omp_check_private (ctx, decl))\n \t    {\n-\t      error (\"%s variable %qs is private in outer context\",\n-\t\t     check_non_private, IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t      error (\"%s variable %qE is private in outer context\",\n+\t\t     check_non_private, DECL_NAME (decl));\n \t      remove = true;\n \t    }\n \t  break;"}, {"sha": "8579062e71593885b2adc7b7545b21247ba70bdd", "filename": "gcc/langhooks.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -380,11 +380,11 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t  if (TREE_CODE (TREE_TYPE (fndecl)) == METHOD_TYPE)\n \t    pp_printf\n \t      (context->printer, _(\"In member function %qs\"),\n-\t       lang_hooks.decl_printable_name (fndecl, 2));\n+\t       identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)));\n \t  else\n \t    pp_printf\n \t      (context->printer, _(\"In function %qs\"),\n-\t       lang_hooks.decl_printable_name (fndecl, 2));\n+\t       identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)));\n \n \t  while (abstract_origin)\n \t    {\n@@ -435,18 +435,18 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t      if (flag_show_column && s.column != 0)\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n-\t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),\n+\t\t\t\t   identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)),\n \t\t\t\t   s.file, s.line, s.column);\n \t\t      else\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d\"),\n-\t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),\n+\t\t\t\t   identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)),\n \t\t\t\t   s.file, s.line);\n \n \t\t    }\n \t\t  else\n \t\t    pp_printf (context->printer, _(\"    inlined from %qs\"),\n-\t\t\t       lang_hooks.decl_printable_name (fndecl, 2));\n+\t\t\t       identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)));\n \t\t}\n \t    }\n \t  pp_character (context->printer, ':');"}, {"sha": "0694189d73068046e0b260c3902ac4657d830b94", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -1,5 +1,5 @@\n /* The lang_hooks data structure.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -332,7 +332,10 @@ struct lang_hooks\n      information will be printed: 0: DECL_NAME, demangled as\n      necessary.  1: and scope information.  2: and any other\n      information that might be interesting, such as function parameter\n-     types in C++.  */\n+     types in C++.  The name is in the internal character set and\n+     needs to be converted to the locale character set of diagnostics,\n+     or to the execution character set for strings such as\n+     __PRETTY_FUNCTION__.  */\n   const char *(*decl_printable_name) (tree decl, int verbosity);\n \n   /* Computes the dwarf-2/3 name for a tree.  VERBOSITY determines what"}, {"sha": "7fc4038aaf57e14a597448115121cae174a8ecba", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"regs.h\"\n #include \"alloc-pool.h\"\n+#include \"pretty-print.h\"\n \f\n /* Functions and data structures for expanding case statements.  */\n \n@@ -600,8 +601,8 @@ tree_conflicts_with_clobbers_p (tree t, HARD_REG_SET *clobbered_regs)\n \n   if (overlap)\n     {\n-      error (\"asm-specifier for variable %qs conflicts with asm clobber list\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (overlap)));\n+      error (\"asm-specifier for variable %qE conflicts with asm clobber list\",\n+\t     DECL_NAME (overlap));\n \n       /* Reset registerness to stop multiple errors emitted for a single\n \t variable.  */\n@@ -1322,7 +1323,7 @@ resolve_operand_name_1 (char *p, tree outputs, tree inputs)\n     }\n \n   *q = '\\0';\n-  error (\"undefined named operand %qs\", p + 1);\n+  error (\"undefined named operand %qs\", identifier_to_locale (p + 1));\n   op = 0;\n  found:\n "}, {"sha": "fab5817d3c2f1a841ed43516580288553d9b158b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -1292,19 +1292,19 @@ finalize_record_size (record_layout_info rli)\n \n \t  if (TYPE_NAME (rli->t))\n \t    {\n-\t      const char *name;\n+\t      tree name;\n \n \t      if (TREE_CODE (TYPE_NAME (rli->t)) == IDENTIFIER_NODE)\n-\t\tname = IDENTIFIER_POINTER (TYPE_NAME (rli->t));\n+\t\tname = TYPE_NAME (rli->t);\n \t      else\n-\t\tname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (rli->t)));\n+\t\tname = DECL_NAME (TYPE_NAME (rli->t));\n \n \t      if (STRICT_ALIGNMENT)\n \t\twarning (OPT_Wpacked, \"packed attribute causes inefficient \"\n-\t\t\t \"alignment for %qs\", name);\n+\t\t\t \"alignment for %qE\", name);\n \t      else\n \t\twarning (OPT_Wpacked,\n-\t\t\t \"packed attribute is unnecessary for %qs\", name);\n+\t\t\t \"packed attribute is unnecessary for %qE\", name);\n \t    }\n \t  else\n \t    {"}, {"sha": "6c8d1d2d4c0e1f772878b7a401dc15944b66fa2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -1,3 +1,8 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/ucnid-11.c, gcc.dg/ucnid-12.c, gcc.dg/ucnid-13.c: New\n+\ttests.\n+\n 2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/ucnid-8.c, gcc.dg/ucnid-9.c, gcc.dg/ucnid-10.c: New"}, {"sha": "b4063306857a6bcc91a817b1a8202e913ab7fe30", "filename": "gcc/testsuite/gcc.dg/ucnid-11.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* *-*-solaris2.* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-std=c99 -fextended-identifiers -fdata-sections\" } */\n+\n+#include \"ucnid-3.c\""}, {"sha": "6c8789236b065fc38fb815dfc4a4724ef23b35ff", "filename": "gcc/testsuite/gcc.dg/ucnid-12.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* *-*-solaris2.* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-std=c99 -fextended-identifiers -ffunction-sections\" } */\n+\n+#include \"ucnid-4.c\""}, {"sha": "8ec69fa3b930875e7d6de0879ca89a873219d5bf", "filename": "gcc/testsuite/gcc.dg/ucnid-13.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -0,0 +1,13 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Miscellaneous diagnostics.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fextended-identifiers -Wpacked\" } */\n+\n+int a __attribute__((\\u00c0)); /* { dg-warning \"'\\\\\\\\U000000c0' attribute directive ignored\" } */\n+\n+extern void \\u00c1 (void) __attribute__((deprecated));\n+void g (void) { \\u00c1 (); } /* { dg-warning \"'\\\\\\\\U000000c1' is deprecated\" } */\n+\n+struct \\u00c2 { char c; } __attribute__((packed)); /* { dg-warning \"'\\\\\\\\U000000c2'\" } */\n+\n+void h (void) { asm (\"%[\\u00c3]\" : : ); } /* { dg-error \"undefined named operand '\\\\\\\\U000000c3'\" } */"}, {"sha": "1b850faca8422413b1e0745d00c061d99fa05adb", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -427,9 +427,11 @@ announce_function (tree decl)\n   if (!quiet_flag)\n     {\n       if (rtl_dump_and_exit)\n-\tfprintf (stderr, \"%s \", IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\tfprintf (stderr, \"%s \",\n+\t\t identifier_to_locale (IDENTIFIER_POINTER (DECL_NAME (decl))));\n       else\n-\tfprintf (stderr, \" %s\", lang_hooks.decl_printable_name (decl, 2));\n+\tfprintf (stderr, \" %s\",\n+\t\t identifier_to_locale (lang_hooks.decl_printable_name (decl, 2)));\n       fflush (stderr);\n       pp_needs_newline (global_dc->printer) = true;\n       diagnostic_set_last_function (global_dc, (diagnostic_info *) NULL);\n@@ -920,16 +922,16 @@ warn_deprecated_use (tree node)\n     }\n   else if (TYPE_P (node))\n     {\n-      const char *what = NULL;\n+      tree what = NULL_TREE;\n       tree decl = TYPE_STUB_DECL (node);\n \n       if (TYPE_NAME (node))\n \t{\n \t  if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n-\t    what = IDENTIFIER_POINTER (TYPE_NAME (node));\n+\t    what = TYPE_NAME (node);\n \t  else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n \t\t   && DECL_NAME (TYPE_NAME (node)))\n-\t    what = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node)));\n+\t    what = DECL_NAME (TYPE_NAME (node));\n \t}\n \n       if (decl)\n@@ -938,7 +940,7 @@ warn_deprecated_use (tree node)\n \t    = expand_location (DECL_SOURCE_LOCATION (decl));\n \t  if (what)\n \t    warning (OPT_Wdeprecated_declarations,\n-\t\t     \"%qs is deprecated (declared at %s:%d)\", what,\n+\t\t     \"%qE is deprecated (declared at %s:%d)\", what,\n \t\t     xloc.file, xloc.line);\n \t  else\n \t    warning (OPT_Wdeprecated_declarations,\n@@ -948,7 +950,7 @@ warn_deprecated_use (tree node)\n       else\n \t{\n \t  if (what)\n-\t    warning (OPT_Wdeprecated_declarations, \"%qs is deprecated\", what);\n+\t    warning (OPT_Wdeprecated_declarations, \"%qE is deprecated\", what);\n \t  else\n \t    warning (OPT_Wdeprecated_declarations, \"type is deprecated\");\n \t}\n@@ -1511,7 +1513,7 @@ default_tree_printer (pretty_printer * pp, text_info *text, const char *spec,\n       t = va_arg (*text->args_ptr, tree);\n       if (TREE_CODE (t) == IDENTIFIER_NODE)\n \t{\n-\t  pp_string (pp, IDENTIFIER_POINTER (t));\n+\t  pp_identifier (pp, IDENTIFIER_POINTER (t));\n \t  return true;\n \t}\n       break;\n@@ -1537,8 +1539,8 @@ default_tree_printer (pretty_printer * pp, text_info *text, const char *spec,\n   if (DECL_P (t))\n     {\n       const char *n = DECL_NAME (t)\n-        ? lang_hooks.decl_printable_name (t, 2)\n-        : \"<anonymous>\";\n+        ? identifier_to_locale (lang_hooks.decl_printable_name (t, 2))\n+        : _(\"<anonymous>\");\n       pp_string (pp, n);\n     }\n   else"}, {"sha": "0c07b97c8737e583727601bb857e2854e7de75e1", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -1061,8 +1061,8 @@ mx_register_decls (tree decl, gimple_seq seq, location_t location)\n \t    {\n \t      if (!DECL_ARTIFICIAL (decl))\n \t\twarning (OPT_Wmudflap,\n-\t\t\t \"mudflap cannot track %qs in stub function\",\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t\t\t \"mudflap cannot track %qE in stub function\",\n+\t\t\t DECL_NAME (decl));\n \t    }\n \t  else\n \t    {\n@@ -1305,8 +1305,8 @@ mudflap_finish_file (void)\n           if (! COMPLETE_TYPE_P (TREE_TYPE (obj)))\n             {\n               warning (OPT_Wmudflap,\n-\t\t       \"mudflap cannot track unknown size extern %qs\",\n-                       IDENTIFIER_POINTER (DECL_NAME (obj)));\n+\t\t       \"mudflap cannot track unknown size extern %qE\",\n+                       DECL_NAME (obj));\n               continue;\n             }\n           "}, {"sha": "295358c527b71b41ac6f18622624d6ce0b4cd18b", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -4063,8 +4063,8 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t}\n       else\n \t{\n-\t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t   name);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -4075,8 +4075,8 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n       && TREE_CODE (node) != TYPE_DECL)\n     {\n       *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       return NULL_TREE;\n     }\n \n@@ -4085,8 +4085,8 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n       && TREE_CODE (TREE_TYPE (node)) != UNION_TYPE)\n     {\n       *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       return NULL_TREE;\n     }\n \n@@ -4141,7 +4141,7 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t  || TREE_CODE (node) == FUNCTION_DECL))\n     {\n       error (\"external linkage required for symbol %q+D because of \"\n-\t     \"%qs attribute\", node, IDENTIFIER_POINTER (name));\n+\t     \"%qE attribute\", node, name);\n       *no_add_attrs = true;\n     }\n \n@@ -4154,9 +4154,9 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n     {\n       if (DECL_VISIBILITY_SPECIFIED (node)\n \t  && DECL_VISIBILITY (node) != VISIBILITY_DEFAULT)\n-\terror (\"%qs implies default visibility, but %qD has already \"\n+\terror (\"%qE implies default visibility, but %qD has already \"\n \t       \"been declared with a different visibility\", \n-\t       IDENTIFIER_POINTER (name), node);\n+\t       name, node);\n       DECL_VISIBILITY (node) = VISIBILITY_DEFAULT;\n       DECL_VISIBILITY_SPECIFIED (node) = 1;\n     }"}, {"sha": "c85cf9ddf2791d52622797edc6eaae4bab2f8cce", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1e4960a6f174ae3ece9a1582aa802708a1d2fc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4f1e4960a6f174ae3ece9a1582aa802708a1d2fc", "patch": "@@ -4761,8 +4761,8 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n \t  total_bytes += fieldsize;\n \t}\n       else if (val != 0 && TREE_CODE (val) != INTEGER_CST)\n-\terror (\"invalid initial value for member %qs\",\n-\t       IDENTIFIER_POINTER (DECL_NAME (field)));\n+\terror (\"invalid initial value for member %qE\",\n+\t       DECL_NAME (field));\n       else\n \t{\n \t  /* Element that is a bit-field.  */"}]}