{"sha": "81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiYzBlYzNlOTI2ZDdhMmM5MDUwMjg0N2RkYWFjZjNkNTZkNWI3NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-29T04:57:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-29T18:24:15Z"}, "message": "c++: Avoid calling const copy ctor on implicit move. [PR91212]\n\nOur implementation of C++11 implicit move was wrong for return; we didn't\nactually hit the check for the type of the first parameter of the selected\nconstructor, because we didn't see LOOKUP_PREFER_RVALUE set properly.\n\nFixing that to look at the right flags fixed the issue for this testcase,\nbut broke implicit move for a by-value converting constructor (PR58051).  I\nthink this was not allowed in C++17, but it is allowed under the implicit\nmove changes from C++20, and those changes were voted to apply as a DR to\nearlier standards as well, so I don't want to break it now.\n\nSo after fixing the flags check I changed the test to allow value\nparameters.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91212\n\t* call.c (build_over_call): Don't call a const ref\n\toverload for implicit move.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/91212\n\t* g++.dg/cpp0x/move-return3.C: New test.", "tree": {"sha": "bce6e4fa4b767f55e1c9d456e6430991c45ddf1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bce6e4fa4b767f55e1c9d456e6430991c45ddf1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8140b9ed3c0fed041aedaff3fa4a603984ca10f"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e283d635d60ebc2ad875eec3d68ca42bf69f960a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "patch": "@@ -8678,15 +8678,18 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  parm = TREE_CHAIN (parm);\n \t}\n \n-      if (flags & LOOKUP_PREFER_RVALUE)\n+      if (cand->flags & LOOKUP_PREFER_RVALUE)\n \t{\n \t  /* The implicit move specified in 15.8.3/3 fails \"...if the type of\n \t     the first parameter of the selected constructor is not an rvalue\n \t     reference to the object's type (possibly cv-qualified)....\" */\n \t  gcc_assert (!(complain & tf_error));\n \t  tree ptype = convs[0]->type;\n-\t  if (!TYPE_REF_P (ptype)\n-\t      || !TYPE_REF_IS_RVALUE (ptype)\n+\t  /* Allow calling a by-value converting constructor even though it\n+\t     isn't permitted by the above, because we've allowed it since GCC 5\n+\t     (PR58051) and it's allowed in C++20.  But don't call a copy\n+\t     constructor.  */\n+\t  if ((TYPE_REF_P (ptype) && !TYPE_REF_IS_RVALUE (ptype))\n \t      || CONVERSION_RANK (convs[0]) > cr_exact)\n \t    return error_mark_node;\n \t}"}, {"sha": "c79f059193671df318963dada255a2f07008a52e", "filename": "gcc/testsuite/g++.dg/cpp0x/move-return3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc0ec3e926d7a2c90502847ddaacf3d56d5b75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return3.C?ref=81bc0ec3e926d7a2c90502847ddaacf3d56d5b75", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91212\n+// Test that C++11 implicit move semantics don't call the const copy.\n+// { dg-do link }\n+\n+struct T { int i; };\n+\n+struct X {\n+  X(T&) { }    // #1\n+  X(const T&); // #2\n+};\n+\n+X\n+fn ()\n+{\n+  T buf;\n+  return buf;\n+}\n+\n+int\n+main()\n+{\n+  X c = fn ();\n+}"}]}