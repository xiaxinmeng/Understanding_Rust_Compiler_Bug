{"sha": "ca409efd9282623758e9b8f36df75cdd7278a3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0MDllZmQ5MjgyNjIzNzU4ZTliOGYzNmRmNzVjZGQ3Mjc4YTNlMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-19T11:04:13Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-19T11:04:13Z"}, "message": "re PR c/32061 ((Wlogical-op) wording of warning of constant logicials need improvement)\n\n2009-04-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/32061\n\tPR c++/36954\n\t* doc/invoke.texi: Add -Wlogical-op to -Wextra.\n\t* common.opt (Wlogical-op): Move from here...\n\t* c.opt (Wlogical-op): ... to here.\n\t* c-typeck.c (parser_build_binary_op): Update call to\n\twarn_logical_operator.\n\t* c-opts.c (c_common_post_options): Enable warn_logical_op with\n\textra_warnings.\n\t* c-common.c (warn_logical_op): Update.\n\t* c-common.h (warn_logical_op): Update declaration.\ncp/\n\t* call.c (build_new_op): Save the original codes of operands\n\tbefore folding.\n\t\ntestsuite/\n\t* gcc.dg/pr32061.c: New.\n\t* gcc.dg/Wlogical-op-1.c: Update.\n\t* g++.dg/warn/Wlogical-op-1.C: Update.\n\t* g++.dg/warn/pr36954.C: New.\n\nFrom-SVN: r146344", "tree": {"sha": "bcaf465ab5ba49fd67b08ce44d9d4349c54cc20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcaf465ab5ba49fd67b08ce44d9d4349c54cc20e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca409efd9282623758e9b8f36df75cdd7278a3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca409efd9282623758e9b8f36df75cdd7278a3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca409efd9282623758e9b8f36df75cdd7278a3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca409efd9282623758e9b8f36df75cdd7278a3e1/comments", "author": null, "committer": null, "parents": [{"sha": "c93c8cf442616849535c5ec3a50d517ad76fe5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93c8cf442616849535c5ec3a50d517ad76fe5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93c8cf442616849535c5ec3a50d517ad76fe5d3"}], "stats": {"total": 261, "additions": 195, "deletions": 66}, "files": [{"sha": "09f17e570e3e75ae1659b51370e26bcfe8fe0bf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -1,3 +1,17 @@\n+2009-04-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/32061\n+\tPR c++/36954\n+\t* doc/invoke.texi: Add -Wlogical-op to -Wextra.\n+\t* common.opt (Wlogical-op): Move from here...\n+\t* c.opt (Wlogical-op): ... to here.\n+\t* c-typeck.c (parser_build_binary_op): Update call to\n+\twarn_logical_operator.\n+\t* c-opts.c (c_common_post_options): Enable warn_logical_op with\n+\textra_warnings.\n+\t* c-common.c (warn_logical_op): Update.\n+\t* c-common.h (warn_logical_op): Update declaration.\n+\n 2009-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (protected_set_expr_location): Fix formatting."}, {"sha": "735c8e0b5c47d91afea805a7d4012b9d04d3c7b6", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -1712,38 +1712,43 @@ overflow_warning (tree value)\n     }\n }\n \n-\n-/* Warn about use of a logical || / && operator being used in a\n-   context where it is likely that the bitwise equivalent was intended\n-   by the programmer. CODE is the TREE_CODE of the operator, ARG1\n-   and ARG2 the arguments.  */\n+/* Warn about uses of logical || / && operator in a context where it\n+   is likely that the bitwise equivalent was intended by the\n+   programmer.  We have seen an expression in which CODE is a binary\n+   operator used to combine expressions OP_LEFT and OP_RIGHT, which\n+   before folding had CODE_LEFT and CODE_RIGHT.  */\n \n void\n-warn_logical_operator (enum tree_code code, tree arg1, tree\n-    arg2)\n-{\n-  switch (code)\n-    {\n-      case TRUTH_ANDIF_EXPR:\n-      case TRUTH_ORIF_EXPR:\n-      case TRUTH_OR_EXPR:\n-      case TRUTH_AND_EXPR:\n-\tif (!TREE_NO_WARNING (arg1)\n-\t    && INTEGRAL_TYPE_P (TREE_TYPE (arg1))\n-\t    && !CONSTANT_CLASS_P (arg1)\n-\t    && TREE_CODE (arg2) == INTEGER_CST\n-\t    && !integer_zerop (arg2))\n-\t  {\n-\t    warning (OPT_Wlogical_op,\n-\t\t     \"logical %<%s%> with non-zero constant \"\n-\t\t     \"will always evaluate as true\",\n-\t\t     ((code == TRUTH_ANDIF_EXPR)\n-\t\t      || (code == TRUTH_AND_EXPR)) ? \"&&\" : \"||\");\n-\t    TREE_NO_WARNING (arg1) = true;\n-\t  }\n-\tbreak;\n-      default:\n-\tbreak;\n+warn_logical_operator (location_t location, enum tree_code code,\n+\t\t       enum tree_code code_left, tree op_left, \n+\t\t       enum tree_code ARG_UNUSED (code_right), tree op_right)\n+{\n+  if (code != TRUTH_ANDIF_EXPR\n+      && code != TRUTH_AND_EXPR\n+      && code != TRUTH_ORIF_EXPR\n+      && code != TRUTH_OR_EXPR)\n+    return;\n+\n+  /* Warn if &&/|| are being used in a context where it is\n+     likely that the bitwise equivalent was intended by the\n+     programmer. That is, an expression such as op && MASK\n+     where op should not be any boolean expression, nor a\n+     constant, and mask seems to be a non-boolean integer constant.  */\n+  if (!truth_value_p (code_left)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (op_left))\n+      && !CONSTANT_CLASS_P (op_left)\n+      && !TREE_NO_WARNING (op_left)\n+      && TREE_CODE (op_right) == INTEGER_CST\n+      && !integer_zerop (op_right)\n+      && !integer_onep (op_right))\n+    {\n+      if (code == TRUTH_ORIF_EXPR || code == TRUTH_OR_EXPR)\n+\twarning_at (location, OPT_Wlogical_op, \"logical %<or%>\"\n+\t\t    \" applied to non-boolean constant\");\n+      else\n+\twarning_at (location, OPT_Wlogical_op, \"logical %<and%>\"\n+\t\t    \" applied to non-boolean constant\");\n+      TREE_NO_WARNING (op_left) = true;\n     }\n }\n "}, {"sha": "723f8b5ef18ec700c55e19e1f188661e00848c17", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -801,7 +801,8 @@ extern bool strict_aliasing_warning (tree, tree, tree);\n extern void warnings_for_convert_and_check (tree, tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n-extern void warn_logical_operator (enum tree_code, tree, tree);\n+extern void warn_logical_operator (location_t, enum tree_code,\n+\t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool same_scalar_type_ignoring_signedness (tree, tree);"}, {"sha": "ece4d7f8a4aa637eed2ea820d6d631e0313da67c", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -1080,6 +1080,8 @@ c_common_post_options (const char **pfilename)\n     warn_override_init = extra_warnings;\n   if (warn_ignored_qualifiers == -1)\n     warn_ignored_qualifiers = extra_warnings;\n+  if (warn_logical_op == -1)\n+    warn_logical_op = extra_warnings;\n \n   /* -Wpointer-sign is disabled by default, but it is enabled if any\n      of -Wall or -pedantic are given.  */"}, {"sha": "821f4ce13a6a151649bdbc1ceaf1f331c3a2e175", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -2925,8 +2925,9 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   if (warn_parentheses)\n     warn_about_parentheses (code, code1, arg1.value, code2, arg2.value);\n \n-  if (TREE_CODE_CLASS (code1) != tcc_comparison)\n-    warn_logical_operator (code, arg1.value, arg2.value);\n+  if (warn_logical_op)\n+    warn_logical_operator (input_location, code,\n+\t\t\t   code1, arg1.value, code2, arg2.value);\n \n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */"}, {"sha": "b3e7dd7db186bb292a7200710f21e44aa059d205", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -284,6 +284,10 @@ Winvalid-pch\n C ObjC C++ ObjC++ Warning\n Warn about PCH files that are found but not used\n \n+Wlogical-op\n+C ObjC C++ ObjC++ Var(warn_logical_op) Init(-1) Warning \n+Warn when a logical operator is suspiciously always evaluating to true or false\n+\n Wlong-long\n C ObjC C++ ObjC++ Var(warn_long_long) Init(1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic"}, {"sha": "c0f6b9e6d09faf928378ae37b1e7d5a9ca4f25c5", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -128,10 +128,6 @@ Wlarger-than=\n Common RejectNegative Joined UInteger Warning\n -Wlarger-than=<number>\tWarn if an object is larger than <number> bytes\n \n-Wlogical-op\n-Common Warning Var(warn_logical_op)\n-Warn when a logical operator is suspicously always evaluating to true or false\n-\n Wunsafe-loop-optimizations\n Common Var(warn_unsafe_loop_optimizations) Warning\n Warn if the loop cannot be optimized due to nontrivial assumptions."}, {"sha": "259aa8e7a9d386c18962637ed514c9abc7d7eb36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -1,3 +1,10 @@\n+2009-04-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/32061\n+\tPR c++/36954\n+\t* call.c (build_new_op): Save the original codes of operands\n+\tbefore folding.\n+\n 2009-04-18  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cp-tree.h: Remove the prototype for insert_block."}, {"sha": "feb3004517f193f5b0b3cc03964d4b59263312c5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -3897,11 +3897,12 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n   tree result = NULL_TREE;\n   bool result_valid_p = false;\n   enum tree_code code2 = NOP_EXPR;\n+  enum tree_code code_orig_arg1 = ERROR_MARK;\n+  enum tree_code code_orig_arg2 = ERROR_MARK;\n   conversion *conv;\n   void *p;\n   bool strict_p;\n   bool any_viable_p;\n-  bool expl_eq_arg1 = false;\n \n   if (error_operand_p (arg1)\n       || error_operand_p (arg2)\n@@ -3935,8 +3936,10 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n-      if (COMPARISON_CLASS_P (arg1))\n-\texpl_eq_arg1 = true;\n+      /* These are saved for the sake of warn_logical_operator.  */\n+      code_orig_arg1 = TREE_CODE (arg1);\n+      code_orig_arg2 = TREE_CODE (arg2);\n+\n     default:\n       break;\n     }\n@@ -4140,8 +4143,16 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t  if (conv->kind == ck_ref_bind)\n \t    conv = conv->u.next;\n \t  arg1 = convert_like (conv, arg1, complain);\n+\n \t  if (arg2)\n \t    {\n+\t      /* We need to call warn_logical_operator before\n+\t\t converting arg2 to a boolean_type.  */\n+\t      if (complain & tf_warning)\n+\t\twarn_logical_operator (input_location, code,\n+\t\t\t\t       code_orig_arg1, arg1,\n+\t\t\t\t       code_orig_arg2, arg2);\n+\n \t      conv = cand->convs[1];\n \t      if (conv->kind == ck_ref_bind)\n \t\tconv = conv->u.next;\n@@ -4155,12 +4166,6 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t      arg3 = convert_like (conv, arg3, complain);\n \t    }\n \n-\t  if (!expl_eq_arg1) \n-\t    {\n-\t      if (complain & tf_warning)\n-\t\twarn_logical_operator (code, arg1, arg2);\n-\t      expl_eq_arg1 = true;\n-\t    }\n \t}\n     }\n \n@@ -4185,8 +4190,9 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n-      if (!expl_eq_arg1)\n-\twarn_logical_operator (code, arg1, arg2);\n+      warn_logical_operator (input_location, code,\n+\t\t\t     code_orig_arg1, arg1, code_orig_arg2, arg2);\n+      /* Fall through.  */\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:"}, {"sha": "e1dd0e0ad46bb3f46e56ae02da0ea7648401687c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -2804,6 +2804,7 @@ name is still supported, but the newer name is more descriptive.)\n @gccoptlist{-Wclobbered  @gol\n -Wempty-body  @gol\n -Wignored-qualifiers @gol\n+-Wlogical-op @gol\n -Wmissing-field-initializers  @gol\n -Wmissing-parameter-type @r{(C only)}  @gol\n -Wold-style-declaration @r{(C only)}  @gol\n@@ -3790,7 +3791,8 @@ programmer intended to use @code{strcmp}.  This warning is enabled by\n @opindex Wno-logical-op\n Warn about suspicious uses of logical operators in expressions.\n This includes using logical operators in contexts where a\n-bit-wise operator is likely to be expected.\n+bit-wise operator is likely to be expected.  This warning is enabled by\n+@option{-Wextra}.\n \n @item -Waggregate-return\n @opindex Waggregate-return"}, {"sha": "361d93de4dd7c17309f653b6ee30804d7f3056cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -1,3 +1,12 @@\n+2009-04-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/32061\n+\tPR c++/36954\n+\t* gcc.dg/pr32061.c: New.\n+\t* gcc.dg/Wlogical-op-1.c: Update.\n+\t* g++.dg/warn/Wlogical-op-1.C: Update.\n+\t* g++.dg/warn/pr36954.C: New.\n+\n 2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/27676"}, {"sha": "61d4a9dae23e242cb09008b4663b3b25a7d312bc", "filename": "gcc/testsuite/g++.dg/warn/Wlogical-op-1.C", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -28,20 +28,39 @@ extern testenum testa();\n \n void foo()\n {\n-    if ( f && b2 )            // { dg-warning \"always evaluate as\" }\n+    if ( f && b2 )            // { dg-warning \"logical\" }\n           do_something(1);\n-    if ( c && b2 )            // { dg-warning \"always evaluate as\" }\n+    if ( c && b2 )            // { dg-warning \"logical\" }\n           do_something(2);\n \n-    if ( b2 && c == a )       // { dg-bogus \"always evaluate as\" }\n+    if ( b2 && c == a )       // { dg-bogus \"logical\" }\n           do_something(101);\n     if ( 1 && c )\n-          do_something(102);  // { dg-bogus \"always evaluate as\" }\n-    if ( t2 && b2 )           // { dg-bogus \"always evaluate as\" }\n+          do_something(102);  // { dg-bogus \"logical\" }\n+    if ( t2 && b2 )           // { dg-bogus \"logical\" }\n           do_something(103);\n-    if ( true && c == a )     // { dg-bogus \"always evaluate as\" }\n+    if ( true && c == a )     // { dg-bogus \"logical\" }\n           do_something(104);\n-    if ( b2 && true )         // { dg-bogus \"always evaluate as\" }\n+    if ( b2 && true )         // { dg-bogus \"logical\" }\n           do_something(105);\n }\n \n+\n+void bar()\n+{\n+    if ( f || b2 )            // { dg-warning \"logical\" }\n+          do_something(1);\n+    if ( c || b2 )            // { dg-warning \"logical\" }\n+          do_something(2);\n+\n+    if ( b2 || c == a )       // { dg-bogus \"logical\" }\n+          do_something(101);\n+    if ( 1 || c )\n+          do_something(102);  // { dg-bogus \"logical\" }\n+    if ( t2 || b2 )           // { dg-bogus \"logical\" }\n+          do_something(103);\n+    if ( true || c == a )     // { dg-bogus \"logical\" }\n+          do_something(104);\n+    if ( b2 || true )         // { dg-bogus \"logical\" }\n+          do_something(105);\n+}"}, {"sha": "92cea2f38764a7fb3f57a1a4b7cb5b8e0a162ba4", "filename": "gcc/testsuite/g++.dg/warn/pr36954.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36954.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36954.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr36954.C?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/36954\n+// { dg-do compile }\n+// { dg-options \"-Wlogical-op -Wextra -Wall\" }\n+\n+template<class C> void Test()\n+{\n+  if ((1 == 2) || (true)) { \n+  }\n+\n+  if ((1 == 2) || (!false)) {\n+  }\n+\n+  if (false || true) {\n+  }\n+}\n+\n+\n+\n+int main() {\n+  if ((1 == 2) || (true)) {\n+  }\n+}\n+"}, {"sha": "2cbb9806e03f8c03bc5aa998dd84d6f5a345322e", "filename": "gcc/testsuite/gcc.dg/Wlogical-op-1.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -14,34 +14,64 @@ extern int testa();\n \n void foo()\n {\n-    if ( testa() && b )     /* { dg-warning \"always evaluate as\" } */\n+    if ( testa() && b )     /* { dg-warning \"logical\" } */\n          (void)testa();\n \n-    if ( c && b )           /* { dg-warning \"always evaluate as\" } */\n+    if ( c && b )           /* { dg-warning \"logical\" } */\n \t(void)testa();\n \n-    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+    if ( c && 0x42 )        /* { dg-warning \"logical\" } */\n \t(void)testa();\n \n-    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+    if ( c && 0x80 >>6)     /* { dg-warning \"logical\" } */\n+\t(void)testa();\n+\n+\n+    if ( b && c == a )      /* { dg-bogus \"logical\" } */\n+          (void)testa();\n+\n+    if ( 1 && c )           /* { dg-bogus \"logical\" } */\n+         (void)testa();\n+\n+    if ( t2 && b )          /* { dg-bogus \"logical\" } */\n+          (void)testa();\n+\n+    if ( 0 && c == a )      /* { dg-bogus \"logical\" } */\n+          (void)testa();\n+\n+    if ( b && 1 )           /* { dg-bogus \"logical\" } */\n+          (void)testa();\n+}\n+\n+\n+void bar()\n+{\n+    if ( testa() || b )     /* { dg-warning \"logical\" } */\n+         (void)testa();\n+\n+    if ( c || b )           /* { dg-warning \"logical\" } */\n+\t(void)testa();\n+\n+    if ( c || 0x42 )        /* { dg-warning \"logical\" } */\n \t(void) testa();\n \n-    if ( c && 0x80 >>6)     /* { dg-warning \"always evaluate as\" } */\n+    if ( c || 0x80 >>6)     /* { dg-warning \"logical\" } */\n \t(void)testa();\n \n \n-    if ( b && c == a )      /* { dg-bogus \"always evaluate as\" } */\n+    if ( b || c == a )      /* { dg-bogus \"logical\" } */\n           (void)testa();\n \n-    if ( 1 && c )           /* { dg-bogus \"always evaluate as\" } */\n+    if ( 1 || c )           /* { dg-bogus \"logical\" } */\n          (void)testa();\n \n-    if ( t2 && b )          /* { dg-bogus \"always evaluate as\" } */\n+    if ( t2 || b )          /* { dg-bogus \"logical\" } */\n           (void)testa();\n \n-    if ( 0 && c == a )      /* { dg-bogus \"always evaluate as\" } */\n+    if ( 0 || c == a )      /* { dg-bogus \"logical\" } */\n           (void)testa();\n \n-    if ( b && 1 )           /* { dg-bogus \"always evaluate as\" } */\n+    if ( b || 1 )           /* { dg-bogus \"logical\" } */\n           (void)testa();\n }\n+"}, {"sha": "dc1a916f1bbd19f5c4d39ec8e452da99d25ad64f", "filename": "gcc/testsuite/gcc.dg/pr32061.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32061.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca409efd9282623758e9b8f36df75cdd7278a3e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32061.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32061.c?ref=ca409efd9282623758e9b8f36df75cdd7278a3e1", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/32061\n+   { dg-do compile } \n+   { dg-options \"-Wlogical-op -Wall -Wextra\" }\n+*/\n+#define FORCE   1\n+#define FLAG    1\n+int func (int resp, int flags)\n+{\n+  return (resp && (FORCE || (FLAG & flags)));\n+}"}]}