{"sha": "920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwZWEzYjhiYTMxNjRiNjFhYzk0OTBkZmRmY2ViNjkzNmVkYTZkZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-06T17:33:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-06T17:33:41Z"}, "message": "function.c (assign_parm_find_data_types): Use RECORD_OR_UNION_TYPE_P before testing TYPE_TRANSPARENT_AGGR.\n\n\t* function.c (assign_parm_find_data_types): Use RECORD_OR_UNION_TYPE_P\n\tbefore testing TYPE_TRANSPARENT_AGGR.\n\t* calls.c (initialize_argument_information, load_register_parameters):\n\tLikewise.\n\nFrom-SVN: r275472", "tree": {"sha": "1f4f0d8643503903630690489d6837dbeb9fcd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f4f0d8643503903630690489d6837dbeb9fcd79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28d67c175f335ac01ddc8d659986a34b281b02e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d67c175f335ac01ddc8d659986a34b281b02e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d67c175f335ac01ddc8d659986a34b281b02e9"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "7d5a2721786dc06b9e4804f00b8f895e61d382eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "patch": "@@ -1,3 +1,10 @@\n+2019-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* function.c (assign_parm_find_data_types): Use RECORD_OR_UNION_TYPE_P\n+\tbefore testing TYPE_TRANSPARENT_AGGR.\n+\t* calls.c (initialize_argument_information, load_register_parameters):\n+\tLikewise.\n+\n 2019-09-06  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.md (cmp_and): Add short-it variant for thumb2 with"}, {"sha": "51ad55f15a97aab1e81ba1a3b52cd621bf8cd6db", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "patch": "@@ -1991,8 +1991,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       /* If TYPE is a transparent union or record, pass things the way\n \t we would pass the first field of the union or record.  We have\n \t already verified that the modes are the same.  */\n-      if ((TREE_CODE (type) == UNION_TYPE || TREE_CODE (type) == RECORD_TYPE)\n-\t   && TYPE_TRANSPARENT_AGGR (type))\n+      if (RECORD_OR_UNION_TYPE_P (type) && TYPE_TRANSPARENT_AGGR (type))\n \ttype = TREE_TYPE (first_field (type));\n \n       /* Decide where to pass this arg.\n@@ -2772,9 +2771,7 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t  HOST_WIDE_INT const_size = 0;\n \t  rtx_insn *before_arg = get_last_insn ();\n \t  tree type = TREE_TYPE (args[i].tree_value);\n-\t  if ((TREE_CODE (type) == UNION_TYPE\n-\t       || TREE_CODE (type) == RECORD_TYPE)\n-\t      && TYPE_TRANSPARENT_AGGR (type))\n+\t  if (RECORD_OR_UNION_TYPE_P (type) && TYPE_TRANSPARENT_AGGR (type))\n \t    type = TREE_TYPE (first_field (type));\n \t  /* Set non-negative if we must move a word at a time, even if\n \t     just one word (e.g, partial == 4 && mode == DFmode).  Set"}, {"sha": "535160544b95da4203530e7694243f78e4eb732c", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920ea3b8ba3164b61ac9490dfdfceb6936eda6dd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=920ea3b8ba3164b61ac9490dfdfceb6936eda6dd", "patch": "@@ -2443,8 +2443,7 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n   /* If the parm is to be passed as a transparent union or record, use the\n      type of the first field for the tests below.  We have already verified\n      that the modes are the same.  */\n-  if ((TREE_CODE (data->arg.type) == UNION_TYPE\n-       || TREE_CODE (data->arg.type) == RECORD_TYPE)\n+  if (RECORD_OR_UNION_TYPE_P (data->arg.type)\n       && TYPE_TRANSPARENT_AGGR (data->arg.type))\n     data->arg.type = TREE_TYPE (first_field (data->arg.type));\n "}]}