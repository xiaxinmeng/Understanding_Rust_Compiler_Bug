{"sha": "eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViZmQwM2FhY2JjZjM3OTNiYTU1YzI3ODI0Zjc5NjhjYzFlZWIyNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-27T18:41:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-27T18:41:33Z"}, "message": "i386.c: Include rtl-iter.h\n\ngcc/\n\t* config/i386/i386.c: Include rtl-iter.h\n\t(ix86_check_avx256_register): Take a const_rtx and return a bool.\n\t(ix86_check_avx256_stores): Update call accordingly.\n\t(ix86_avx_u128_mode_entry, ix86_avx_u128_mode_exit): Likewise.\n\t(ix86_avx_u128_mode_needed): Likewise.  Use FOR_EACH_SUBRTX.\n\nFrom-SVN: r216758", "tree": {"sha": "7e64a6e62a90fe6bfe52139afb70082808b89db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e64a6e62a90fe6bfe52139afb70082808b89db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebfd03aacbcf3793ba55c27824f7968cc1eeb27/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbb838b7408ba394688c700f2aa360fe299dd89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb838b7408ba394688c700f2aa360fe299dd89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb838b7408ba394688c700f2aa360fe299dd89a"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "7a87dcea02890a733fb4d7cf450daace4de583f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebfd03aacbcf3793ba55c27824f7968cc1eeb27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebfd03aacbcf3793ba55c27824f7968cc1eeb27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "patch": "@@ -1,3 +1,11 @@\n+2014-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/i386/i386.c: Include rtl-iter.h\n+\t(ix86_check_avx256_register): Take a const_rtx and return a bool.\n+\t(ix86_check_avx256_stores): Update call accordingly.\n+\t(ix86_avx_u128_mode_entry, ix86_avx_u128_mode_exit): Likewise.\n+\t(ix86_avx_u128_mode_needed): Likewise.  Use FOR_EACH_SUBRTX.\n+\n 2014-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/alpha/alpha-protos.h (some_small_symbolic_operand_int):"}, {"sha": "57a2d07da8bd92b65e33e642f44790fbe2fd3ca3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebfd03aacbcf3793ba55c27824f7968cc1eeb27/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebfd03aacbcf3793ba55c27824f7968cc1eeb27/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eebfd03aacbcf3793ba55c27824f7968cc1eeb27", "patch": "@@ -95,6 +95,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n #include \"shrink-wrap.h\"\n #include \"builtins.h\"\n+#include \"rtl-iter.h\"\n \n static rtx legitimize_dllimport_symbol (rtx, bool);\n static rtx legitimize_pe_coff_extern_decl (rtx, bool);\n@@ -16121,19 +16122,14 @@ output_387_binary_op (rtx insn, rtx *operands)\n \n /* Check if a 256bit AVX register is referenced inside of EXP.   */\n \n-static int\n-ix86_check_avx256_register (rtx *pexp, void *)\n+static bool\n+ix86_check_avx256_register (const_rtx exp)\n {\n-  rtx exp = *pexp;\n-\n   if (GET_CODE (exp) == SUBREG)\n     exp = SUBREG_REG (exp);\n \n-  if (REG_P (exp)\n-      && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (exp)))\n-    return 1;\n-\n-  return 0;\n+  return (REG_P (exp)\n+\t  && VALID_AVX256_REG_OR_OI_MODE (GET_MODE (exp)));\n }\n \n /* Return needed mode for entity in optimize_mode_switching pass.  */\n@@ -16155,7 +16151,7 @@ ix86_avx_u128_mode_needed (rtx_insn *insn)\n \t    {\n \t      rtx arg = XEXP (XEXP (link, 0), 0);\n \n-\t      if (ix86_check_avx256_register (&arg, NULL))\n+\t      if (ix86_check_avx256_register (arg))\n \t\treturn AVX_U128_DIRTY;\n \t    }\n \t}\n@@ -16167,8 +16163,10 @@ ix86_avx_u128_mode_needed (rtx_insn *insn)\n      changes state only when a 256bit register is written to, but we need\n      to prevent the compiler from moving optimal insertion point above\n      eventual read from 256bit register.  */\n-  if (for_each_rtx (&PATTERN (insn), ix86_check_avx256_register, NULL))\n-    return AVX_U128_DIRTY;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, PATTERN (insn), NONCONST)\n+    if (ix86_check_avx256_register (*iter))\n+      return AVX_U128_DIRTY;\n \n   return AVX_U128_ANY;\n }\n@@ -16252,7 +16250,7 @@ ix86_mode_needed (int entity, rtx_insn *insn)\n static void\n ix86_check_avx256_stores (rtx dest, const_rtx, void *data)\n  {\n-   if (ix86_check_avx256_register (&dest, NULL))\n+   if (ix86_check_avx256_register (dest))\n     {\n       bool *used = (bool *) data;\n       *used = true;\n@@ -16317,7 +16315,7 @@ ix86_avx_u128_mode_entry (void)\n     {\n       rtx incoming = DECL_INCOMING_RTL (arg);\n \n-      if (incoming && ix86_check_avx256_register (&incoming, NULL))\n+      if (incoming && ix86_check_avx256_register (incoming))\n \treturn AVX_U128_DIRTY;\n     }\n \n@@ -16351,7 +16349,7 @@ ix86_avx_u128_mode_exit (void)\n \n   /* Exit mode is set to AVX_U128_DIRTY if there are\n      256bit modes used in the function return register.  */\n-  if (reg && ix86_check_avx256_register (&reg, NULL))\n+  if (reg && ix86_check_avx256_register (reg))\n     return AVX_U128_DIRTY;\n \n   return AVX_U128_CLEAN;"}]}