{"sha": "9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViMGVmN2EwNzIxOWRkNGU0YmZkNmY4YzNjZDIxNmUwYTI1MDM2Nw==", "commit": {"author": {"name": "Kevin Buettner", "email": "kevinb@redhat.com", "date": "2003-03-19T18:18:36Z"}, "committer": {"name": "Kevin Buettner", "email": "kevinb@gcc.gnu.org", "date": "2003-03-19T18:18:36Z"}, "message": "Add support for DWARF 3 64-bit sections.\n\nFrom-SVN: r64589", "tree": {"sha": "6abbdc11823b33bd84dada3edecf7bf6475c036c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6abbdc11823b33bd84dada3edecf7bf6475c036c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/comments", "author": {"login": "KevinBuettner", "id": 65747518, "node_id": "MDQ6VXNlcjY1NzQ3NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KevinBuettner", "html_url": "https://github.com/KevinBuettner", "followers_url": "https://api.github.com/users/KevinBuettner/followers", "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}", "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}", "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions", "organizations_url": "https://api.github.com/users/KevinBuettner/orgs", "repos_url": "https://api.github.com/users/KevinBuettner/repos", "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}", "received_events_url": "https://api.github.com/users/KevinBuettner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b25a23bd5a16e5e6d9f9fbcd0273ffe900b072e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25a23bd5a16e5e6d9f9fbcd0273ffe900b072e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25a23bd5a16e5e6d9f9fbcd0273ffe900b072e9"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "afe3065afcbd361ae818baca81ff0078929421e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "patch": "@@ -1,3 +1,13 @@\n+2003-03-19  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* dwarf2out.c (DWARF_INITIAL_LENGTH_SIZE): Define.\n+\t(DWARF_COMPILE_UNIT_HEADER_SIZE): Take into account\n+\tDWARF_INITIAL_LENGTH_SIZE.\n+\t(output_compilation_unit_header, output_pubnames, output_aranges)\n+\t(output_line_info): Output 0xffffffff escape value for 64-bit\n+\tDWARF extension.\n+\t* config/mips/iris6.h (DWARF_INITIAL_LENGTH_SIZE): Define.\n+\n 2003-03-19  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_preferred_reload_class): Do not"}, {"sha": "dd69c15606475cc6df392b6bbd57d1ac7c9cb2c0", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "patch": "@@ -160,6 +160,13 @@ Boston, MA 02111-1307, USA.  */\n    specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n #define DWARF_OFFSET_SIZE PTR_SIZE\n \n+/* The size in bytes of the initial length field in a debug info\n+   section.  The DWARF 3 (draft) specification defines this to be\n+   either 4 or 12 (with a 4-byte \"escape\" word when it's 12), but the\n+   SGI/MIPS ABI predates this standard and defines it to be the same\n+   as DWARF_OFFSET_SIZE.  */\n+#define DWARF_INITIAL_LENGTH_SIZE DWARF_OFFSET_SIZE\n+\n /* There is no GNU as port for Irix6 yet, so we set MD_EXEC_PREFIX so that\n    gcc will automatically find SGI as instead of searching the user's path.\n    The latter can fail when building a cross compiler if the user has . in"}, {"sha": "a1e27cbf7f0dd01053113416bf842d09c61bcae5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9eb0ef7a07219dd4e4bfd6f8c3cd216e0a250367", "patch": "@@ -257,6 +257,18 @@ dw_fde_node;\n #define DWARF_OFFSET_SIZE 4\n #endif\n \n+/* According to the (draft) DWARF 3 specification, the initial length\n+   should either be 4 or 12 bytes.  When it's 12 bytes, the first 4\n+   bytes are 0xffffffff, followed by the length stored in the next 8\n+   bytes.\n+\n+   However, the SGI/MIPS ABI uses an initial length which is equal to\n+   DWARF_OFFSET_SIZE.  It is defined (elsewhere) accordingly.  */\n+\n+#ifndef DWARF_INITIAL_LENGTH_SIZE\n+#define DWARF_INITIAL_LENGTH_SIZE (DWARF_OFFSET_SIZE == 4 ? 4 : 12)\n+#endif\n+\n #define DWARF_VERSION 2\n \n /* Round SIZE up to the nearest BOUNDARY.  */\n@@ -3397,7 +3409,8 @@ limbo_die_node;\n    language, and compiler version.  */\n \n /* Fixed size portion of the DWARF compilation unit header.  */\n-#define DWARF_COMPILE_UNIT_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 3)\n+#define DWARF_COMPILE_UNIT_HEADER_SIZE \\\n+  (DWARF_INITIAL_LENGTH_SIZE + DWARF_OFFSET_SIZE + 3)\n \n /* Fixed size portion of public names info.  */\n #define DWARF_PUBNAMES_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 2)\n@@ -6912,7 +6925,11 @@ output_die (die)\n static void\n output_compilation_unit_header ()\n {\n-  dw2_asm_output_data (DWARF_OFFSET_SIZE, next_die_offset - DWARF_OFFSET_SIZE,\n+  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+    dw2_asm_output_data (4, 0xffffffff,\n+      \"Initial length escape value indicating 64-bit DWARF extension\");\n+  dw2_asm_output_data (DWARF_OFFSET_SIZE,\n+                       next_die_offset - DWARF_INITIAL_LENGTH_SIZE,\n \t\t       \"Length of Compilation Unit Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF version number\");\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, abbrev_section_label,\n@@ -7023,6 +7040,9 @@ output_pubnames ()\n   unsigned i;\n   unsigned long pubnames_length = size_of_pubnames ();\n \n+  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+    dw2_asm_output_data (4, 0xffffffff,\n+      \"Initial length escape value indicating 64-bit DWARF extension\");\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, pubnames_length,\n \t\t       \"Length of Public Names Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF Version\");\n@@ -7081,6 +7101,9 @@ output_aranges ()\n   unsigned i;\n   unsigned long aranges_length = size_of_aranges ();\n \n+  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+    dw2_asm_output_data (4, 0xffffffff,\n+      \"Initial length escape value indicating 64-bit DWARF extension\");\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, aranges_length,\n \t\t       \"Length of Address Ranges Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF Version\");\n@@ -7526,6 +7549,9 @@ output_line_info ()\n   ASM_GENERATE_INTERNAL_LABEL (p1, LN_PROLOG_AS_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (p2, LN_PROLOG_END_LABEL, 0);\n \n+  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+    dw2_asm_output_data (4, 0xffffffff,\n+      \"Initial length escape value indicating 64-bit DWARF extension\");\n   dw2_asm_output_delta (DWARF_OFFSET_SIZE, l2, l1,\n \t\t\t\"Length of Source Line Info\");\n   ASM_OUTPUT_LABEL (asm_out_file, l1);"}]}