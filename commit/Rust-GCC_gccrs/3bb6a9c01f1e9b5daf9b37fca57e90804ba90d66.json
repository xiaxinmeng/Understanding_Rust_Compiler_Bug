{"sha": "3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiNmE5YzAxZjFlOWI1ZGFmOWIzN2ZjYTU3ZTkwODA0YmE5MGQ2Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-22T09:32:29Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-22T14:36:54Z"}, "message": "Fix various typos.\n\n\tPR testsuite/100159\n\tPR testsuite/100192\n\ngcc/ChangeLog:\n\n\t* builtins.c (expand_builtin): Fix typos and missing comments.\n\t* dwarf2out.c (gen_subprogram_die): Likewise.\n\t(gen_struct_or_union_type_die): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* frontend-passes.c (optimize_expr): Fix typos and missing comments.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/nontype29.C: Fix typos and missing comments.\n\t* gcc.dg/Warray-bounds-64.c: Likewise.\n\t* gcc.dg/Warray-parameter.c: Likewise.\n\t* gcc.dg/Wstring-compare.c: Likewise.\n\t* gcc.dg/format/gcc_diag-11.c: Likewise.\n\t* gfortran.dg/array_constructor_3.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_9.f90: Likewise.\n\t* gfortran.dg/pr78033.f90: Likewise.\n\t* gfortran.dg/pr96325.f90: Likewise.", "tree": {"sha": "fba7b3a553c4f6843ef0d1ac5a24890d1d2ea5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba7b3a553c4f6843ef0d1ac5a24890d1d2ea5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2f6e01749f39b8b8ccc211fc29e5e6ec8b57cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2f6e01749f39b8b8ccc211fc29e5e6ec8b57cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2f6e01749f39b8b8ccc211fc29e5e6ec8b57cd"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "8c5324bf7de9a29f552e3bc0217f4a60bb66caf7", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -9986,7 +9986,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       break;\n \n     /* Expand it as BUILT_IN_MEMCMP_EQ first. If not successful, change it\n-       back to a BUILT_IN_STRCMP. Remember to delete the 3rd paramater\n+       back to a BUILT_IN_STRCMP. Remember to delete the 3rd parameter\n        when changing it to a strcmp call.  */\n     case BUILT_IN_STRCMP_EQ:\n       target = expand_builtin_memcmp (exp, target, true);"}, {"sha": "c36fd5a7f6a4f9bd767d24a737df7647aee1a8ea", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -23542,7 +23542,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       resolve_variable_values ();\n     }\n \n-  /* Generate child dies for template paramaters.  */\n+  /* Generate child dies for template parameters.  */\n   if (early_dwarf && debug_info_level > DINFO_LEVEL_TERSE)\n     gen_generic_params_dies (decl);\n \n@@ -25471,7 +25471,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n \n   scope_die = scope_die_for (type, context_die);\n \n-  /* Generate child dies for template paramaters.  */\n+  /* Generate child dies for template parameters.  */\n   if (!type_die && debug_info_level > DINFO_LEVEL_TERSE)\n     schedule_generic_params_dies_gen (type);\n "}, {"sha": "93ac4b4a17caf1b831c9a81241f1cf7966dc825d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -373,7 +373,7 @@ optimize_expr (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n-/* Auxiliary function to handle the arguments to reduction intrnisics.  If the\n+/* Auxiliary function to handle the arguments to reduction intrinsics.  If the\n    function is a scalar, just copy it; otherwise returns the new element, the\n    old one can be freed.  */\n "}, {"sha": "dd4e20f7e629ca409f0acca924bdfa1048fea3f7", "filename": "gcc/testsuite/g++.dg/template/nontype29.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype29.C?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -3,7 +3,7 @@\n // { dg-do compile }\n // { dg-options \"-Wall\" }\n \n-#if __cpluspls >= 201103L\n+#if __cplusplus >= 201103L\n \n // C++ 11 test case from comment #0.\n namespace comment_0 {\n@@ -60,7 +60,7 @@ void h ()\n }   // comment_2\n \n \n-#if __cpluspls >= 201103L\n+#if __cplusplus >= 201103L\n \n // C++ 11 test case from comment #5.\n namespace comment_5 {"}, {"sha": "f5ebc3dd4b2d723482aee1fed45aa2e8b1a85ee3", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-64.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -7,7 +7,7 @@\n    asks for.\n \n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -Warray-parameter -Wno-vla-paramater\" } */\n+   { dg-options \"-O2 -Wall -Warray-parameter -Wno-vla-parameter\" } */\n \n #define NOIPA __attribute__  ((noipa))\n "}, {"sha": "6c5195a31be96323870cd6e004ace9f2c0e677f4", "filename": "gcc/testsuite/gcc.dg/Warray-parameter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -5,7 +5,7 @@\n    Also verify that the array/pointer argument form in a mismatched\n    redeclaration doesn't override the form in the initial declaration.\n    { dg-do compile }\n-   { dg-options \"-Wall -Warray-parameter -Wno-vla-paramater\" } */\n+   { dg-options \"-Wall -Warray-parameter -Wno-vla-parameter\" } */\n \n /* Redclarations with the same or equivalent array form should not\n    be dianosed.  T[0] is diagnosed by -Wpedantic for being invalid"}, {"sha": "239bbfe5148372e8e733635254cc7a911a4c26bd", "filename": "gcc/testsuite/gcc.dg/Wstring-compare.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -21,7 +21,7 @@ extern char b4[4];\n void strcmp_array_lit (void)\n {\n   if (strcmp (a4, \"1234\"))  // { dg-warning \"'strcmp' of a string of length 4 and an array of size 4 evaluates to nonzero\" }\n-                            // { dg-bogus \"in this expreession\" \"unwanted note\" { target *-*-* } .-1 }\n+                            // { dg-bogus \"in this expression\" \"unwanted note\" { target *-*-* } .-1 }\n     sink (0, a4);\n \n   int cmp;\n@@ -44,7 +44,7 @@ void strcmp_array_pstr (void)\n \n   {\n     if (strcmp (a4, s4))    // { dg-warning \"'strcmp' of a string of length 4 and an array of size 4 evaluates to nonzero\" }\n-                            // { dg-bogus \"in this expreession\" \"unwanted note\" { target *-*-* } .-1 }\n+                            // { dg-bogus \"in this expression\" \"unwanted note\" { target *-*-* } .-1 }\n       sink (1, a4);\n     else\n       sink (0, a4);\n@@ -86,7 +86,7 @@ void strcmp_array_copy (void)\n   {\n     strcpy (s, \"1234\");\n     if (strcmp (a4, s))     // { dg-warning \"'strcmp' of a string of length 4 and an array of size 4 evaluates to nonzero\" }\n-                            // { dg-bogus \"in this expreession\" \"unwanted note\" { target *-*-* } .-1 }\n+                            // { dg-bogus \"in this expression\" \"unwanted note\" { target *-*-* } .-1 }\n       sink (1, a4);\n     else\n       sink (0, a4);\n@@ -131,7 +131,7 @@ void strcmp_member_array_lit (const struct S *p)\n void strncmp_array_lit (void)\n {\n   if (strncmp (a4, \"12345\", 5))   // { dg-warning \"'strncmp' of a string of length 5, an array of size 4 and bound of 5 evaluates to nonzero\" }\n-                                  // { dg-bogus \"in this expreession\" \"unwanted note\" { target *-*-* } .-1 }\n+                                  // { dg-bogus \"in this expression\" \"unwanted note\" { target *-*-* } .-1 }\n     sink (0, a4);\n \n   int cmp;\n@@ -161,7 +161,7 @@ void strncmp_strarray_copy (void)\n     char b[6];\n     strcpy (b, \"12345\");\n     if (strncmp (a, b, 5))  // { dg-warning \"'strncmp' of strings of length 4 and 5 and bound of 5 evaluates to nonzero\" }\n-                            // { dg-bogus \"in this expreession\" \"unwanted note\" { target *-*-* } .-1 }\n+                            // { dg-bogus \"in this expression\" \"unwanted note\" { target *-*-* } .-1 }\n       sink (0, a, b);\n   }\n "}, {"sha": "80d24b61a3f24c4086a29b0baccfd508577f87f6", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -375,7 +375,7 @@ void test_cdiag_identifier (tree t, gimple *gc)\n   cdiag (\"ident z_ with trailing underscore\");   /* { dg-warning \"unquoted identifier or keyword 'z_'\" } */\n   cdiag (\"v_ variable\");        /* { dg-warning \"unquoted identifier or keyword 'v_'\" } */\n   cdiag (\"call foo_bar\");       /* { dg-warning \"unquoted identifier or keyword 'foo_bar'\" } */\n-  cdiag (\"unqoted x_y ident\");  /* { dg-warning \"unquoted identifier or keyword 'x_y'\" } */\n+  cdiag (\"unquoted x_y ident\");  /* { dg-warning \"unquoted identifier or keyword 'x_y'\" } */\n \n   cdiag (\"size_t type\");        /* { dg-warning \"unquoted identifier or keyword 'size_t'\" } */\n   cdiag (\"bigger than INT_MAX\");/* { dg-warning \"unquoted identifier or keyword 'INT_MAX'\" } */"}, {"sha": "37d40a4b52ab982623cd5b835a4a87048392b0f9", "filename": "gcc/testsuite/gfortran.dg/array_constructor_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_3.f90?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n ! Check that empty array constructors are rejected\n program hum\n-    print *, (//)  { dg-error \"Empty array constructor\" }\n+    print *, (//) ! { dg-error \"Empty array constructor\" }\n end program hum"}, {"sha": "786e3e79e6b4ca5e7d375b3b52aefd9b4db95631", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_9.f90?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n ! { dg-options \"-fbounds-check -ffrontend-optimize\" }\n-! { dg-shouldfail \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrnisic for dimension 2: is 1, should be 2\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in argument B in MATMUL intrinsic for dimension 2: is 1, should be 2\" }\n module x\n   implicit none\n contains"}, {"sha": "959352166a3eaee78380bb4a6f843e2a96bf70e7", "filename": "gcc/testsuite/gfortran.dg/pr78033.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78033.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78033.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78033.f90?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -14,7 +14,7 @@ subroutine f(n, x, y)\n    y = [real(x), aimag(x)]\n    y = [real(x(1:n)), aimag(x(1:n))]\n    y = [real(knd) :: 1] \n-   y = [real(kind=42) :: 1] { dg-error \"Invalid type-spec\" }\n+   y = [real(kind=42) :: 1] ! { dg-error \"Invalid type-spec\" }\n    y = [real(kind=knd) :: 1]\n    y = [real(kind=knd, a=1.)]\n    y = [real(a=1.)]"}, {"sha": "b6a86e84eda3003ab2c2fbdf9c6439655122373c", "filename": "gcc/testsuite/gfortran.dg/pr96325.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90?ref=3bb6a9c01f1e9b5daf9b37fca57e90804ba90d66", "patch": "@@ -15,7 +15,7 @@\n    type(t2) :: t\n    integer :: a\n \n-   a = t%r1%foo(1)     { dg-error \"is not an inquiry reference\" }\n+   a = t%r1%foo(1) ! { dg-error \"is not an inquiry reference\" }\n    if (a == 42) stop\n \n    end"}]}