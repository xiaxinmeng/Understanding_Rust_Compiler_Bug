{"sha": "494795904009eb99985a45a5c371f2ddbfaf96e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk0Nzk1OTA0MDA5ZWI5OTk4NWE0NWE1YzM3MWYyZGRiZmFmOTZlMQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2018-01-05T10:45:37Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2018-01-05T10:45:37Z"}, "message": "[PATCH PR82439][simplify-rtx] Simplify (x | y) == x -> (y & ~x) == 0\n\nThis patch add support for the missing transformation of\n(x | y) == x -> (y & ~x) == 0. The transformation for (x & y) == x case\nalready exists in simplify-rtx.c since 2014 as of r218503 and this patch\nonly adds a couple of extra patterns for the IOR case. This benefits \ntargets that have the BICS instruction to generate better code. For\ntargets that do not have the BICS instructions, it still results in\nno worse code generation and gives out 2 instructions.\n\nChangeLog Entries:\n\n*** gcc/ChangeLog ***\n\n2018-01-05  Sudakshina Das  <sudi.das@arm.com>\n\n\tPR target/82439\n\t* simplify-rtx.c (simplify_relational_operation_1): Add simplifications\n\tof (x|y) == x for BICS pattern.\n\n*** gcc/testsuite/ChangeLog ***\n\n2018-01-05  Sudakshina Das  <sudi.das@arm.com>\n\n\tPR target/82439\n\t* gcc.target/aarch64/bics_5.c: New test.\n\t* gcc.target/arm/bics_5.c: Likewise.\n\nFrom-SVN: r256275", "tree": {"sha": "0d732f1a8c2df27c03d68a309676fa6b4895de39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d732f1a8c2df27c03d68a309676fa6b4895de39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/494795904009eb99985a45a5c371f2ddbfaf96e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494795904009eb99985a45a5c371f2ddbfaf96e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/494795904009eb99985a45a5c371f2ddbfaf96e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494795904009eb99985a45a5c371f2ddbfaf96e1/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bef52a6895ddb01d4b349f2f43b8ab0cd99fa3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef52a6895ddb01d4b349f2f43b8ab0cd99fa3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef52a6895ddb01d4b349f2f43b8ab0cd99fa3be"}], "stats": {"total": 190, "additions": 169, "deletions": 21}, "files": [{"sha": "d9b9efd92bf36e4e4d38d26cf4d731ebf8ba687d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=494795904009eb99985a45a5c371f2ddbfaf96e1", "patch": "@@ -1,3 +1,9 @@\n+2018-01-05  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/82439\n+\t* simplify-rtx.c (simplify_relational_operation_1): Add simplifications\n+\tof (x|y) == x for BICS pattern.\n+\n 2018-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83605"}, {"sha": "6cb5a6e5d244f40013de114e0cf0ce4c37ecf12f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=494795904009eb99985a45a5c371f2ddbfaf96e1", "patch": "@@ -5051,34 +5051,38 @@ simplify_relational_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t\t\t    simplify_gen_binary (XOR, cmp_mode,\n \t\t\t\t\t\t\t XEXP (op0, 1), op1));\n \n-  /* (eq/ne (and x y) x) simplifies to (eq/ne (and (not y) x) 0), which\n-     can be implemented with a BICS instruction on some targets, or\n-     constant-folded if y is a constant.  */\n+  /* Simplify eq/ne (and/ior x y) x/y) for targets with a BICS instruction or\n+     constant folding if x/y is a constant.  */\n   if ((code == EQ || code == NE)\n-      && op0code == AND\n-      && rtx_equal_p (XEXP (op0, 0), op1)\n+      && (op0code == AND || op0code == IOR)\n       && !side_effects_p (op1)\n       && op1 != CONST0_RTX (cmp_mode))\n     {\n-      rtx not_y = simplify_gen_unary (NOT, cmp_mode, XEXP (op0, 1), cmp_mode);\n-      rtx lhs = simplify_gen_binary (AND, cmp_mode, not_y, XEXP (op0, 0));\n+      /* Both (eq/ne (and x y) x) and (eq/ne (ior x y) y) simplify to\n+\t (eq/ne (and (not y) x) 0).  */\n+      if ((op0code == AND && rtx_equal_p (XEXP (op0, 0), op1))\n+\t  || (op0code == IOR && rtx_equal_p (XEXP (op0, 1), op1)))\n+\t{\n+\t  rtx not_y = simplify_gen_unary (NOT, cmp_mode, XEXP (op0, 1),\n+\t\t\t\t\t  cmp_mode);\n+\t  rtx lhs = simplify_gen_binary (AND, cmp_mode, not_y, XEXP (op0, 0));\n \n-      return simplify_gen_relational (code, mode, cmp_mode, lhs,\n-\t\t\t\t      CONST0_RTX (cmp_mode));\n-    }\n+\t  return simplify_gen_relational (code, mode, cmp_mode, lhs,\n+\t\t\t\t\t  CONST0_RTX (cmp_mode));\n+\t}\n \n-  /* Likewise for (eq/ne (and x y) y).  */\n-  if ((code == EQ || code == NE)\n-      && op0code == AND\n-      && rtx_equal_p (XEXP (op0, 1), op1)\n-      && !side_effects_p (op1)\n-      && op1 != CONST0_RTX (cmp_mode))\n-    {\n-      rtx not_x = simplify_gen_unary (NOT, cmp_mode, XEXP (op0, 0), cmp_mode);\n-      rtx lhs = simplify_gen_binary (AND, cmp_mode, not_x, XEXP (op0, 1));\n+      /* Both (eq/ne (and x y) y) and (eq/ne (ior x y) x) simplify to\n+\t (eq/ne (and (not x) y) 0).  */\n+      if ((op0code == AND && rtx_equal_p (XEXP (op0, 1), op1))\n+\t  || (op0code == IOR && rtx_equal_p (XEXP (op0, 0), op1)))\n+\t{\n+\t  rtx not_x = simplify_gen_unary (NOT, cmp_mode, XEXP (op0, 0),\n+\t\t\t\t\t  cmp_mode);\n+\t  rtx lhs = simplify_gen_binary (AND, cmp_mode, not_x, XEXP (op0, 1));\n \n-      return simplify_gen_relational (code, mode, cmp_mode, lhs,\n-\t\t\t\t      CONST0_RTX (cmp_mode));\n+\t  return simplify_gen_relational (code, mode, cmp_mode, lhs,\n+\t\t\t\t\t  CONST0_RTX (cmp_mode));\n+\t}\n     }\n \n   /* (eq/ne (bswap x) C1) simplifies to (eq/ne x C2) with C2 swapped.  */"}, {"sha": "5f1c7716415c1afdf14eb5c9b5a77f0a83cefd3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=494795904009eb99985a45a5c371f2ddbfaf96e1", "patch": "@@ -1,3 +1,9 @@\n+2018-01-05  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/82439\n+\t* gcc.target/aarch64/bics_5.c: New test.\n+\t* gcc.target/arm/bics_5.c: Likewise.\n+\n 2018-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83605"}, {"sha": "b9c2c40082dc131943c9a93104d28c0e03b73557", "filename": "gcc/testsuite/gcc.target/aarch64/bics_5.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_5.c?ref=494795904009eb99985a45a5c371f2ddbfaf96e1", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+int\n+bics_si_test1 (int a, int b, int c)\n+{\n+  if ((a | b) == a)\n+    return a;\n+  else\n+    return c;\n+}\n+\n+int\n+bics_si_test2 (int a, int b, int c)\n+{\n+  if ((a | b) == b)\n+    return b;\n+  else\n+    return c;\n+}\n+\n+typedef long long s64;\n+\n+s64\n+bics_di_test1 (s64 a, s64 b, s64 c)\n+{\n+  if ((a | b) == a)\n+    return a;\n+  else\n+    return c;\n+}\n+\n+s64\n+bics_di_test2 (s64 a, s64 b, s64 c)\n+{\n+  if ((a | b) == b)\n+    return b;\n+  else\n+    return c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+  s64 y;\n+\n+  x = bics_si_test1 (0xf00d, 0xf11f, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  x = bics_si_test1 (0xf11f, 0xf00d, 0);\n+  if (x != 0xf11f)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf00d, 0xf11f, 0);\n+  if (x != 0xf11f)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf11f, 0xf00d, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  y = bics_di_test1 (0x10001000f00dll, 0x12341000f00dll, 0ll);\n+  if (y != 0)\n+    abort ();\n+\n+  y = bics_di_test1 (0x12341000f00dll, 0x10001000f00dll, 0ll);\n+  if (y != 0x12341000f00dll)\n+    abort ();\n+\n+  y = bics_di_test2 (0x10001000f00dll, 0x12341000f00dll, 0ll);\n+  if (y != 0x12341000f00dll)\n+    abort ();\n+\n+  y = bics_di_test2 (0x12341000f00dll, 0x10001000f00dll, 0ll);\n+  if (y != 0)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bics\\twzr, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"bics\\txzr, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */"}, {"sha": "6f84902923dee40d346682a5c63194fd3de21277", "filename": "gcc/testsuite/gcc.target/arm/bics_5.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/494795904009eb99985a45a5c371f2ddbfaf96e1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_5.c?ref=494795904009eb99985a45a5c371f2ddbfaf96e1", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target arm32 } */\n+extern void abort (void);\n+int\n+bics_si_test1 (int a, int b, int c)\n+{\n+  if ((a | b) == a)\n+    return a;\n+  else\n+    return c;\n+}\n+\n+int\n+bics_si_test2 (int a, int b, int c)\n+{\n+  if ((a | b) == b)\n+    return b;\n+  else\n+    return c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+  x = bics_si_test1 (0xf00d, 0xf11f, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  x = bics_si_test1 (0xf11f, 0xf00d, 0);\n+  if (x != 0xf11f)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf00d, 0xf11f, 0);\n+  if (x != 0xf11f)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf11f, 0xf00d, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" 2 } } */"}]}