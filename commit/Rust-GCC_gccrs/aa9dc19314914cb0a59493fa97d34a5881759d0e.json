{"sha": "aa9dc19314914cb0a59493fa97d34a5881759d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5ZGMxOTMxNDkxNGNiMGE1OTQ5M2ZhOTdkMzRhNTg4MTc1OWQwZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-02-06T19:44:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-06T19:44:52Z"}, "message": "Fix locations in conversion_null_warnings (PR c++/71302)\n\nPR c++/71302 reports that g++ shows poor locations for\n-Wzero-as-null-pointer-constant for pointers in function calls,\nusing the close parenthesis of the call, rather than showing the\npertinent argument.\n\nThis particular case was fixed in GCC 8, but regressed on trunk\nin r260973.\n\nThis patch fixes the regression, and adds column numbers to the\ntest cases (where they're correct) to avoid regressing them in the\nfuture.  There are still various places where the locations aren't\ncorrect, but fixing them isn't stage 4 material.\n\ngcc/cp/ChangeLog:\n\tPR c++/71302\n\t* call.c (get_location_for_expr_unwinding_for_system_header): New\n\tfunction.\n\t(conversion_null_warnings): Use it when getting locations for\n\tEXPR, effectively adding a call to\n\tget_location_for_expr_unwinding_for_system_header for\n\t-Wconversion-null and making use of EXPR_LOCATION for\n\t-Wzero-as-null-pointer-constant.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/71302\n\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C: Add expected\n\tcolumn numbers to dg-warning directives where they are correct.\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-5.C: Likewise.\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-7.C: Likewise.\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-8.C: New test.\n\nFrom-SVN: r268589", "tree": {"sha": "4f2323d48636952633511cb8d2f183e264b6bea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2323d48636952633511cb8d2f183e264b6bea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9dc19314914cb0a59493fa97d34a5881759d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9dc19314914cb0a59493fa97d34a5881759d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9dc19314914cb0a59493fa97d34a5881759d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9dc19314914cb0a59493fa97d34a5881759d0e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0307ff2cd24861bee4bd5b277c62d50ca0dbe20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0307ff2cd24861bee4bd5b277c62d50ca0dbe20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0307ff2cd24861bee4bd5b277c62d50ca0dbe20"}], "stats": {"total": 141, "additions": 111, "deletions": 30}, "files": [{"sha": "ff049b5de80389e18eefd4852bcbcbfd95c6b3f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -1,3 +1,14 @@\n+2019-02-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/71302\n+\t* call.c (get_location_for_expr_unwinding_for_system_header): New\n+\tfunction.\n+\t(conversion_null_warnings): Use it when getting locations for\n+\tEXPR, effectively adding a call to\n+\tget_location_for_expr_unwinding_for_system_header for\n+\t-Wconversion-null and making use of EXPR_LOCATION for\n+\t-Wzero-as-null-pointer-constant.\n+\n 2019-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89187"}, {"sha": "c12857db1be573a0cbb951f6215df9edab2e4c0b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -6718,6 +6718,22 @@ build_temp (tree expr, tree type, int flags,\n   return expr;\n }\n \n+/* Get any location for EXPR, falling back to input_location.\n+\n+   If the result is in a system header and is the virtual location for\n+   a token coming from the expansion of a macro, unwind it to the\n+   location of the expansion point of the macro (e.g. to avoid the\n+   diagnostic being suppressed for expansions of NULL where \"NULL\" is\n+   in a system header).  */\n+\n+static location_t\n+get_location_for_expr_unwinding_for_system_header (tree expr)\n+{\n+  location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n+  loc = expansion_point_location_if_in_system_header (loc);\n+  return loc;\n+}\n+\n /* Perform warnings about peculiar, but valid, conversions from/to NULL.\n    Also handle a subset of zero as null warnings.\n    EXPR is implicitly converted to type TOTYPE.\n@@ -6730,8 +6746,7 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   if (null_node_p (expr) && TREE_CODE (totype) != BOOLEAN_TYPE\n       && ARITHMETIC_TYPE_P (totype))\n     {\n-      location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n-      loc = expansion_point_location_if_in_system_header (loc);\n+      location_t loc = get_location_for_expr_unwinding_for_system_header (expr);\n       if (fn)\n \t{\n \t  auto_diagnostic_group d;\n@@ -6750,7 +6765,7 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   else if (TREE_CODE (TREE_TYPE (expr)) == BOOLEAN_TYPE\n \t   && TYPE_PTR_P (totype))\n     {\n-      location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n+      location_t loc = get_location_for_expr_unwinding_for_system_header (expr);\n       if (fn)\n \t{\n \t  auto_diagnostic_group d;\n@@ -6769,8 +6784,7 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   else if (null_ptr_cst_p (expr) &&\n \t   (TYPE_PTR_OR_PTRMEM_P (totype) || NULLPTR_TYPE_P (totype)))\n     {\n-      location_t loc =\n-       expansion_point_location_if_in_system_header (input_location);\n+      location_t loc = get_location_for_expr_unwinding_for_system_header (expr);\n       maybe_warn_zero_as_null_pointer_constant (expr, loc);\n     }\n }"}, {"sha": "0e6d85e9dd02331a777aab7d0256b36c4e3a739d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -1,3 +1,12 @@\n+2019-02-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/71302\n+\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C: Add expected\n+\tcolumn numbers to dg-warning directives where they are correct.\n+\t* g++.dg/warn/Wzero-as-null-pointer-constant-5.C: Likewise.\n+\t* g++.dg/warn/Wzero-as-null-pointer-constant-7.C: Likewise.\n+\t* g++.dg/warn/Wzero-as-null-pointer-constant-8.C: New test.\n+\n 2019-02-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR debug/87451"}, {"sha": "e280a056381c0b445eee3d6d3e9cc0eae91e9dc9", "filename": "gcc/testsuite/g++.dg/cpp0x/Wzero-as-null-pointer-constant-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-1.C?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -64,16 +64,16 @@ void f()\n   if (!p)\n     ;\n \n-  if (pmf == 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pmf == 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n   \n-  if (pdm == 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pdm == 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n \n-  if (pf == 0)          // { dg-warning \"zero as null pointer\" }\n+  if (pf == 0)          // { dg-warning \"13: zero as null pointer\" }\n     ;\n \n-  if (p == 0)           // { dg-warning \"zero as null pointer\" }\n+  if (p == 0)           // { dg-warning \"12: zero as null pointer\" }\n     ;\n \n   if (0 == pmf)         // { dg-warning \"zero as null pointer\" }"}, {"sha": "5047a617225239f63b05aabd507de11eee0a8765", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-1.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-1.C?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -13,18 +13,18 @@ int*        ps;\n \n void f()\n {\n-  pointmemfun pmf(0);   // { dg-warning \"zero as null pointer\" }\n-  pointdmem   pdm(0);   // { dg-warning \"zero as null pointer\" }\n-  pointfun    pf(0);    // { dg-warning \"zero as null pointer\" }\n-  int*        p(0);     // { dg-warning \"zero as null pointer\" }\n+  pointmemfun pmf(0);   // { dg-warning \"19: zero as null pointer\" }\n+  pointdmem   pdm(0);   // { dg-warning \"19: zero as null pointer\" }\n+  pointfun    pf(0);    // { dg-warning \"18: zero as null pointer\" }\n+  int*        p(0);     // { dg-warning \"17: zero as null pointer\" }\n \n-  pmf = 0;              // { dg-warning \"zero as null pointer\" }\n+  pmf = 0;              // { dg-warning \"9: zero as null pointer\" }\n \n-  pdm = 0;              // { dg-warning \"zero as null pointer\" }\n+  pdm = 0;              // { dg-warning \"9: zero as null pointer\" }\n \n-  pf = 0;               // { dg-warning \"zero as null pointer\" }\n+  pf = 0;               // { dg-warning \"8: zero as null pointer\" }\n \n-  p = 0;                // { dg-warning \"zero as null pointer\" }\n+  p = 0;                // { dg-warning \"7: zero as null pointer\" }\n \n   if (pmf)\n     ;\n@@ -50,22 +50,22 @@ void f()\n   if (!p)\n     ;\n \n-  if (pmf == 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pmf == 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n   \n-  if (pdm == 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pdm == 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n \n-  if (pf == 0)          // { dg-warning \"zero as null pointer\" }\n+  if (pf == 0)          // { dg-warning \"13: zero as null pointer\" }\n     ;\n \n-  if (p == 0)           // { dg-warning \"zero as null pointer\" }\n+  if (p == 0)           // { dg-warning \"12: zero as null pointer\" }\n     ;\n \n-  if (0 == pmf)         // { dg-warning \"zero as null pointer\" }\n+  if (0 == pmf)         // { dg-warning \"12: zero as null pointer\" }\n     ;\n   \n-  if (0 == pdm)         // { dg-warning \"zero as null pointer\" }\n+  if (0 == pdm)         // { dg-warning \"12: zero as null pointer\" }\n     ;\n \n   if (0 == pf)          // { dg-warning \"zero as null pointer\" }\n@@ -74,16 +74,16 @@ void f()\n   if (0 == p)           // { dg-warning \"zero as null pointer\" }\n     ;\n \n-  if (pmf != 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pmf != 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n   \n-  if (pdm != 0)         // { dg-warning \"zero as null pointer\" }\n+  if (pdm != 0)         // { dg-warning \"14: zero as null pointer\" }\n     ;\n \n-  if (pf != 0)          // { dg-warning \"zero as null pointer\" }\n+  if (pf != 0)          // { dg-warning \"13: zero as null pointer\" }\n     ;\n \n-  if (p != 0)           // { dg-warning \"zero as null pointer\" }\n+  if (p != 0)           // { dg-warning \"12: zero as null pointer\" }\n     ;\n \n   if (0 != pmf)         // { dg-warning \"zero as null pointer\" }"}, {"sha": "01662f539a039318e955e76893fdfe0b4d72c7f7", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-5.C?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -3,7 +3,7 @@\n \n struct foo\n {\n-  foo(void* a = 0) {};      // { dg-warning \"zero as null pointer\" }\n+  foo(void* a = 0) {};      // { dg-warning \"17: zero as null pointer\" }\n };\n \n void* fun(void* a = 0) {};  // { dg-warning \"zero as null pointer\" }"}, {"sha": "571a4cf4c83f68ce2e0ea3147bafe34eab81dd0f", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-7.C?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -8,6 +8,6 @@ void test01()\n   char* x(NULL);\n   char* x2{NULL};\n   char* x3 = NULL;\n-  char* x4(0); // { dg-warning \"zero as null pointer\" }\n-  char* x5 = 0; // { dg-warning \"zero as null pointer\" }\n+  char* x4(0); // { dg-warning \"12: zero as null pointer\" }\n+  char* x5 = 0; // { dg-warning \"14: zero as null pointer\" }\n }"}, {"sha": "18257f12bbd14af0e4cc2dabb0473b780440d317", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-8.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9dc19314914cb0a59493fa97d34a5881759d0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-8.C?ref=aa9dc19314914cb0a59493fa97d34a5881759d0e", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/71302\n+// { dg-options \"-Wzero-as-null-pointer-constant -fdiagnostics-show-caret\" }\n+\n+#include <cstddef>\n+\n+static void\n+callee_1 (int param1, const char* param2, int param3) {}\n+\n+void\n+test_1 (int param1, const char* param2, int param3)\n+{\n+  callee_1 (0, 0, 0); // { dg-warning \"16: zero as null pointer constant\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   callee_1 (0, 0, 0);\n+                ^\n+     { dg-end-multiline-output \"\" } */\n+\n+  callee_1 (0, NULL, 0);\n+}\n+\n+template <typename T>\n+void\n+callee_2 (int param1, T* param2, int param3) {}\n+\n+void\n+test_2 (int param1, const char* param2, int param3)\n+{\n+  callee_2<const char*> (0, 0, 0); // { dg-warning \"29: zero as null pointer constant\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   callee_2<const char*> (0, 0, 0);\n+                             ^\n+     { dg-end-multiline-output \"\" } */\n+\n+  callee_2<const char*> (0, NULL, 0);\n+}\n+\n+void\n+test_3 ()\n+{\n+  const char *msg_a = 0; // { dg-warning \"23: zero as null pointer constant\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   const char *msg_a = 0;\n+                       ^\n+     { dg-end-multiline-output \"\" } */\n+\n+  const char *msg_b = NULL;\n+}"}]}