{"sha": "a7d8d81f7c5b1c49965af840bb95040ff0d04616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkOGQ4MWY3YzViMWM0OTk2NWFmODQwYmI5NTA0MGZmMGQwNDYxNg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T12:32:50Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T12:32:50Z"}, "message": "Use new TRY_FINALLY_EXPR tree node.\n\n\ufffd\nUse new TRY_FINALLY_EXPR tree node.  See ChangeLog.\n\nFrom-SVN: r25314", "tree": {"sha": "3bacf86daef037c8a0c3d4922399266f1eb3908e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bacf86daef037c8a0c3d4922399266f1eb3908e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d8d81f7c5b1c49965af840bb95040ff0d04616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d8d81f7c5b1c49965af840bb95040ff0d04616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d8d81f7c5b1c49965af840bb95040ff0d04616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d8d81f7c5b1c49965af840bb95040ff0d04616/comments", "author": null, "committer": null, "parents": [{"sha": "10b3fbc51554ecdbabd91b418f09ed010dbeca27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b3fbc51554ecdbabd91b418f09ed010dbeca27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b3fbc51554ecdbabd91b418f09ed010dbeca27"}], "stats": {"total": 1267, "additions": 547, "deletions": 720}, "files": [{"sha": "ead192476f6fbdc7b03131a0d2950d6b9859d07f", "filename": "gcc/java/java-tree.def", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjava-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjava-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.def?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -42,20 +42,14 @@ DEFTREECODE (DEFAULT_EXPR, \"default\", 'x', 0)\n \n /* Try expression\n    Operand 0 is the tried block,\n-   Operand 1 contains chained catch nodes\n-   Operand 2 contains the finally clause.  */\n-DEFTREECODE (TRY_EXPR, \"try-catch-finally\", 'e', 3)\n+   Operand 1 contains chained catch nodes. */\n+DEFTREECODE (TRY_EXPR, \"try-catch-finally\", 'e', 2)\n \n /* Catch clause.\n    Operand 0 is the catch clause block, which contains the declaration of\n    the catch clause parameter.  */\n DEFTREECODE (CATCH_EXPR, \"catch\", '1', 1)\n \n-/* Finally clause.\n-   Operand 0 is the finally label.\n-   Operand 1 is the finally block.  */\n-DEFTREECODE (FINALLY_EXPR, \"finally\", 'e', 2) \n-\n /* Synchronized statement.\n    Operand 0 is the expression on which we whish to synchronize,\n    Operand 1 is the synchronized expression block.  */"}, {"sha": "df391a279ff48020a817c1b3efd408ce3ff6a1f3", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -860,9 +860,6 @@ extern tree *type_map;\n #define BLOCK_EXPR_DECLS(NODE)  BLOCK_VARS(NODE)\n #define BLOCK_EXPR_BODY(NODE)   BLOCK_SUBBLOCKS(NODE)\n \n-/* Using a CATCH_EXPR node */\n-#define CATCH_EXPR_GET_EXPR(NODE, V) (V ? LABELED_BLOCK_BODY (NODE) : (NODE))\n-\n /* Non zero if TYPE is an unchecked exception */\n #define IS_UNCHECKED_EXCEPTION_P(TYPE)\t\t\t\t\\\n   (inherits_from_p ((TYPE), runtime_exception_type_node)\t\\"}, {"sha": "4d7b4403fe9473681631b401d48e1722d40af8ae", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -2182,24 +2182,17 @@ generate_bytecode_insns (exp, target, state)\n     case TRY_EXPR:\n       {\n \ttree try_clause = TREE_OPERAND (exp, 0);\n-\ttree finally = TREE_OPERAND (exp, 2);\n \tstruct jcf_block *start_label = get_jcf_label_here (state);\n \tstruct jcf_block *end_label;  /* End of try clause. */\n-\tstruct jcf_block *finally_label;  /* Finally subroutine. */\n \tstruct jcf_block *finished_label = gen_jcf_label (state);\n \ttree clause = TREE_OPERAND (exp, 1);\n-\tif (finally)\n-\t  {\n-\t    finally = FINALLY_EXPR_BLOCK (finally);\n-\t    finally_label = gen_jcf_label (state);\n-\t  }\n \tif (target != IGNORE_TARGET)\n \t  abort ();\n \tgenerate_bytecode_insns (try_clause, IGNORE_TARGET, state);\n \tend_label = get_jcf_label_here (state);\n \tif (CAN_COMPLETE_NORMALLY (try_clause))\n \t  emit_goto (finished_label, state);\n-\tfor ( ; clause != NULL_TREE;  clause = TREE_CHAIN (clause))\n+\twhile (clause != NULL_TREE)\n \t  {\n \t    tree catch_clause = TREE_OPERAND (clause, 0);\n \t    tree exception_decl = BLOCK_EXPR_DECLS (catch_clause);\n@@ -2209,43 +2202,63 @@ generate_bytecode_insns (exp, target, state)\n \t    else\n \t      handler->type = TREE_TYPE (TREE_TYPE (exception_decl));\n \t    generate_bytecode_insns (catch_clause, IGNORE_TARGET, state);\n-\t    if (CAN_COMPLETE_NORMALLY (catch_clause))\n+\t    clause = TREE_CHAIN (clause);\n+\t    if (CAN_COMPLETE_NORMALLY (catch_clause) && clause != NULL_TREE)\n \t      emit_goto (finished_label, state);\n \t  }\n-\tif (finally)\n-\t  {\n-\t    tree return_link;\n-\t    tree exception_type = build_pointer_type (throwable_type_node);\n-\t    tree exception_decl = build_decl (VAR_DECL, NULL_TREE,\n-\t\t\t\t\t      exception_type);\n-\t    struct jcf_handler *handler\n-\t      = alloc_handler (start_label, NULL_TREE, state);\n-\t    handler->end_label = handler->handler_label;\n-\t    handler->type = NULL_TREE;\n-\t    localvar_alloc (exception_decl, state);\n-\t    NOTE_PUSH (1);\n-            emit_store (exception_decl, state);\n-\t    emit_jsr (finally_label, state);\n-\t    emit_load (exception_decl, state);\n-\t    RESERVE (1);\n-\t    OP1 (OPCODE_athrow);\n-\t    NOTE_POP (1);\n-\t    localvar_free (exception_decl, state);\n+\tdefine_jcf_label (finished_label, state);\n+      }\n+      break;\n+    case TRY_FINALLY_EXPR:\n+      {\n+\ttree try_block = TREE_OPERAND (exp, 0);\n+\ttree finally = TREE_OPERAND (exp, 1);\n+\tstruct jcf_block *finished_label = gen_jcf_label (state);\n+\tstruct jcf_block *finally_label = gen_jcf_label (state);\n+\tstruct jcf_block *start_label = get_jcf_label_here (state);\n+\ttree return_link = build_decl (VAR_DECL, NULL_TREE,\n+\t\t\t\t       return_address_type_node);\n+\ttree exception_type = build_pointer_type (throwable_type_node);\n+\ttree exception_decl = build_decl (VAR_DECL, NULL_TREE, exception_type);\n+\tstruct jcf_handler *handler;\n+\n+\tfinally_label->pc = PENDING_CLEANUP_PC;\n+\tfinally_label->next = state->labeled_blocks;\n+\tstate->labeled_blocks = finally_label;\n+\tstate->num_finalizers++;\n \n-\t    /* The finally block. */\n-\t    return_link = build_decl (VAR_DECL, NULL_TREE,\n-\t\t\t\t      return_address_type_node);\n-\t    define_jcf_label (finally_label, state);\n-\t    NOTE_PUSH (1);\n-\t    localvar_alloc (return_link, state);\n-\t    emit_store (return_link, state);\n-\t    generate_bytecode_insns (finally, IGNORE_TARGET, state);\n-\t    maybe_wide (OPCODE_ret, DECL_LOCAL_INDEX (return_link), state);\n-\t    localvar_free (return_link, state);\n-\t  }\n+\tgenerate_bytecode_insns (try_block, target, state);\n+\tif (state->labeled_blocks != finally_label)\n+\t  abort();\n+\tstate->labeled_blocks = finally_label->next;\n+\temit_jsr (finally_label, state);\n+\tif (CAN_COMPLETE_NORMALLY (try_block))\n+\t  emit_goto (finished_label, state);\n+\n+\t/* Handle exceptions. */\n+\tlocalvar_alloc (return_link, state);\n+\thandler = alloc_handler (start_label, NULL_TREE, state);\n+\thandler->end_label = handler->handler_label;\n+\thandler->type = NULL_TREE;\n+\tlocalvar_alloc (exception_decl, state);\n+\tNOTE_PUSH (1);\n+\temit_store (exception_decl, state);\n+\temit_jsr (finally_label, state);\n+\temit_load (exception_decl, state);\n+\tRESERVE (1);\n+\tOP1 (OPCODE_athrow);\n+\tNOTE_POP (1);\n+\tlocalvar_free (exception_decl, state);\n+\n+\t/* The finally block.  First save return PC into return_link. */\n+\tdefine_jcf_label (finally_label, state);\n+\tNOTE_PUSH (1);\n+\temit_store (return_link, state);\n+\n+\tgenerate_bytecode_insns (finally, IGNORE_TARGET, state);\n+\tmaybe_wide (OPCODE_ret, DECL_LOCAL_INDEX (return_link), state);\n+\tlocalvar_free (return_link, state);\n \tdefine_jcf_label (finished_label, state);\n-\tif (finally)\n-\t  emit_jsr (finally_label, state);\n       }\n       break;\n     case THROW_EXPR:"}, {"sha": "99df097b86e7694b5e359ace57d1685600018401", "filename": "gcc/java/parse.c", "status": "modified", "additions": 458, "deletions": 546, "changes": 1004, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -277,7 +277,8 @@ static tree build_string_concatenation PROTO ((tree, tree));\n static tree patch_string_cst PROTO ((tree));\n static tree patch_string PROTO ((tree));\n static tree build_jump_to_finally PROTO ((tree, tree, tree, tree));\n-static tree build_try_statement PROTO ((int, tree, tree, tree));\n+static tree build_try_statement PROTO ((int, tree, tree));\n+static tree build_try_finally_statement PROTO ((int, tree, tree));\n static tree patch_try_statement PROTO ((tree));\n static tree patch_synchronized_statement PROTO ((tree, tree));\n static tree patch_throw_statement PROTO ((tree, tree));\n@@ -365,7 +366,7 @@ static tree java_lang_id = NULL_TREE;\n /* The \"java.lang.Cloneable\" qualified name.  */\n static tree java_lang_cloneable = NULL_TREE;\n \n-#line 293 \"./parse.y\"\n+#line 294 \"./parse.y\"\n typedef union {\n   tree node;\n   int sub_token;\n@@ -669,56 +670,56 @@ static const short yyrhs[] = {   123,\n \n #if YYDEBUG != 0\n static const short yyrline[] = { 0,\n-   443,   449,   451,   452,   453,   454,   455,   459,   461,   464,\n-   466,   467,   470,   472,   475,   479,   483,   487,   493,   495,\n-   497,   499,   504,   506,   509,   513,   518,   523,   525,   526,\n-   527,   528,   529,   530,   531,   534,   539,   545,   547,   550,\n-   553,   555,   559,   561,   564,   591,   593,   597,   610,   612,\n-   616,   623,   624,   626,   636,   641,   656,   660,   663,   666,\n-   669,   671,   673,   678,   682,   684,   686,   688,   692,   694,\n-   696,   703,   709,   714,   718,   721,   725,   727,   730,   732,\n-   733,   734,   738,   740,   742,   743,   745,   750,   753,   763,\n-   766,   768,   772,   775,   782,   788,   796,   798,   800,   802,\n-   804,   808,   810,   814,   821,   822,   826,   829,   831,   833,\n-   835,   837,   839,   841,   843,   850,   853,   855,   864,   866,\n-   870,   875,   880,   884,   889,   891,   893,   900,   902,   904,\n-   908,   911,   913,   917,   919,   920,   925,   930,   936,   944,\n-   951,   954,   957,   961,   964,   968,   977,   979,   981,   986,\n-   993,  1001,  1003,  1007,  1015,  1026,  1030,  1033,  1036,  1039,\n-  1042,  1045,  1048,  1051,  1053,  1057,  1063,  1068,  1070,  1074,\n-  1077,  1081,  1083,  1086,  1088,  1089,  1091,  1095,  1099,  1105,\n-  1110,  1113,  1115,  1119,  1125,  1129,  1134,  1137,  1141,  1146,\n-  1154,  1156,  1159,  1161,  1163,  1167,  1171,  1174,  1178,  1180,\n-  1181,  1182,  1183,  1184,  1194,  1196,  1197,  1198,  1199,  1202,\n-  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,\n-  1216,  1221,  1232,  1239,  1243,  1254,  1264,  1270,  1276,  1282,\n-  1284,  1290,  1292,  1298,  1300,  1302,  1304,  1306,  1310,  1312,\n-  1313,  1314,  1315,  1316,  1317,  1320,  1323,  1325,  1327,  1331,\n-  1336,  1341,  1347,  1357,  1363,  1365,  1367,  1374,  1377,  1379,\n-  1381,  1385,  1387,  1390,  1394,  1396,  1399,  1406,  1412,  1414,\n-  1416,  1420,  1428,  1431,  1433,  1435,  1439,  1444,  1453,  1458,\n-  1461,  1468,  1470,  1472,  1476,  1479,  1488,  1495,  1497,  1501,\n-  1514,  1516,  1522,  1528,  1532,  1534,  1538,  1541,  1543,  1547,\n-  1550,  1552,  1554,  1558,  1561,  1563,  1565,  1569,  1572,  1574,\n-  1576,  1580,  1586,  1588,  1592,  1599,  1601,  1603,  1605,  1609,\n-  1617,  1620,  1622,  1624,  1628,  1630,  1637,  1645,  1662,  1664,\n-  1666,  1670,  1676,  1681,  1683,  1686,  1688,  1690,  1692,  1693,\n-  1694,  1695,  1699,  1701,  1703,  1708,  1710,  1712,  1714,  1716,\n-  1720,  1723,  1728,  1730,  1735,  1736,  1737,  1738,  1739,  1741,\n-  1743,  1745,  1747,  1749,  1753,  1755,  1758,  1764,  1769,  1773,\n-  1776,  1778,  1780,  1784,  1786,  1788,  1790,  1794,  1797,  1801,\n-  1807,  1809,  1817,  1844,  1846,  1850,  1855,  1863,  1867,  1870,\n-  1872,  1883,  1894,  1899,  1908,  1910,  1914,  1917,  1919,  1924,\n-  1929,  1934,  1941,  1943,  1944,  1945,  1948,  1953,  1958,  1960,\n-  1961,  1963,  1965,  1966,  1968,  1972,  1975,  1979,  1982,  1986,\n-  1988,  1990,  1992,  1993,  1995,  1999,  2008,  2010,  2012,  2025,\n-  2027,  2033,  2035,  2037,  2041,  2043,  2048,  2053,  2058,  2060,\n-  2062,  2066,  2068,  2073,  2078,  2080,  2084,  2086,  2091,  2096,\n-  2101,  2103,  2105,  2109,  2111,  2116,  2121,  2126,  2131,  2133,\n-  2135,  2137,  2139,  2141,  2145,  2147,  2152,  2157,  2159,  2163,\n-  2165,  2170,  2174,  2176,  2181,  2185,  2187,  2192,  2196,  2198,\n-  2203,  2207,  2209,  2214,  2218,  2220,  2225,  2231,  2233,  2237,\n-  2239,  2242,  2245,  2253,  2255,  2256,  2259,  2261,  2264,  2268\n+   444,   450,   452,   453,   454,   455,   456,   460,   462,   465,\n+   467,   468,   471,   473,   476,   480,   484,   488,   494,   496,\n+   498,   500,   505,   507,   510,   514,   519,   524,   526,   527,\n+   528,   529,   530,   531,   532,   535,   540,   546,   548,   551,\n+   554,   556,   560,   562,   565,   592,   594,   598,   611,   613,\n+   617,   624,   625,   627,   637,   642,   657,   661,   664,   667,\n+   670,   672,   674,   679,   683,   685,   687,   689,   693,   695,\n+   697,   704,   710,   715,   719,   722,   726,   728,   731,   733,\n+   734,   735,   739,   741,   743,   744,   746,   751,   754,   764,\n+   767,   769,   773,   776,   783,   789,   797,   799,   801,   803,\n+   805,   809,   811,   815,   822,   823,   827,   830,   832,   834,\n+   836,   838,   840,   842,   844,   851,   854,   856,   865,   867,\n+   871,   876,   881,   885,   890,   892,   894,   901,   903,   905,\n+   909,   912,   914,   918,   920,   921,   926,   931,   937,   945,\n+   952,   955,   958,   962,   965,   969,   978,   980,   982,   987,\n+   994,  1002,  1004,  1008,  1016,  1027,  1031,  1034,  1037,  1040,\n+  1043,  1046,  1049,  1052,  1054,  1058,  1064,  1069,  1071,  1075,\n+  1078,  1082,  1084,  1087,  1089,  1090,  1092,  1096,  1100,  1106,\n+  1111,  1114,  1116,  1120,  1126,  1130,  1135,  1138,  1142,  1147,\n+  1155,  1157,  1160,  1162,  1164,  1168,  1172,  1175,  1179,  1181,\n+  1182,  1183,  1184,  1185,  1195,  1197,  1198,  1199,  1200,  1203,\n+  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,\n+  1217,  1222,  1233,  1240,  1244,  1255,  1265,  1271,  1277,  1283,\n+  1285,  1291,  1293,  1299,  1301,  1303,  1305,  1307,  1311,  1313,\n+  1314,  1315,  1316,  1317,  1318,  1321,  1324,  1326,  1328,  1332,\n+  1337,  1342,  1348,  1358,  1364,  1366,  1368,  1375,  1378,  1380,\n+  1382,  1386,  1388,  1391,  1395,  1397,  1400,  1407,  1413,  1415,\n+  1417,  1421,  1429,  1432,  1434,  1436,  1440,  1445,  1454,  1459,\n+  1462,  1469,  1471,  1473,  1477,  1480,  1489,  1496,  1498,  1502,\n+  1515,  1517,  1523,  1529,  1533,  1535,  1539,  1542,  1544,  1548,\n+  1551,  1553,  1555,  1559,  1562,  1564,  1566,  1570,  1573,  1575,\n+  1577,  1581,  1587,  1589,  1593,  1600,  1602,  1604,  1606,  1610,\n+  1618,  1621,  1623,  1628,  1632,  1634,  1641,  1649,  1666,  1668,\n+  1670,  1674,  1677,  1682,  1684,  1687,  1689,  1691,  1693,  1694,\n+  1695,  1696,  1700,  1702,  1704,  1709,  1711,  1713,  1715,  1717,\n+  1721,  1724,  1729,  1731,  1736,  1737,  1738,  1739,  1740,  1742,\n+  1744,  1746,  1748,  1750,  1754,  1756,  1759,  1765,  1770,  1774,\n+  1777,  1779,  1781,  1785,  1787,  1789,  1791,  1795,  1798,  1802,\n+  1808,  1810,  1818,  1845,  1847,  1851,  1856,  1864,  1868,  1871,\n+  1873,  1884,  1895,  1900,  1909,  1911,  1915,  1918,  1920,  1925,\n+  1930,  1935,  1942,  1944,  1945,  1946,  1949,  1954,  1959,  1961,\n+  1962,  1964,  1966,  1967,  1969,  1973,  1976,  1980,  1983,  1987,\n+  1989,  1991,  1993,  1994,  1996,  2000,  2009,  2011,  2013,  2026,\n+  2028,  2034,  2036,  2038,  2042,  2044,  2049,  2054,  2059,  2061,\n+  2063,  2067,  2069,  2074,  2079,  2081,  2085,  2087,  2092,  2097,\n+  2102,  2104,  2106,  2110,  2112,  2117,  2122,  2127,  2132,  2134,\n+  2136,  2138,  2140,  2142,  2146,  2148,  2153,  2158,  2160,  2164,\n+  2166,  2171,  2175,  2177,  2182,  2186,  2188,  2193,  2197,  2199,\n+  2204,  2208,  2210,  2215,  2219,  2221,  2226,  2232,  2234,  2238,\n+  2240,  2243,  2246,  2254,  2256,  2257,  2260,  2262,  2265,  2269\n };\n #endif\n \n@@ -2216,7 +2217,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/cygnus/gnupro-98r2/share/bison.simple\"\n+#line 3 \"/usr/share/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2409,7 +2410,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/cygnus/gnupro-98r2/share/bison.simple\"\n+#line 196 \"/usr/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -2714,66 +2715,66 @@ yyparse(YYPARSE_PARAM_ARG)\n   switch (yyn) {\n \n case 1:\n-#line 445 \"./parse.y\"\n+#line 446 \"./parse.y\"\n {;\n     break;}\n case 18:\n-#line 489 \"./parse.y\"\n+#line 490 \"./parse.y\"\n { \n \t\t  yyval.node = build_java_array_type (yyvsp[-2].node, -1);\n \t\t  CLASS_LOADED_P (yyval.node) = 1;\n \t\t;\n     break;}\n case 19:\n-#line 494 \"./parse.y\"\n+#line 495 \"./parse.y\"\n { yyval.node = build_unresolved_array_type (yyvsp[-2].node); ;\n     break;}\n case 20:\n-#line 496 \"./parse.y\"\n+#line 497 \"./parse.y\"\n { yyval.node = build_unresolved_array_type (yyvsp[-2].node); ;\n     break;}\n case 21:\n-#line 498 \"./parse.y\"\n+#line 499 \"./parse.y\"\n {RULE (\"']' expected\"); RECOVER;;\n     break;}\n case 22:\n-#line 500 \"./parse.y\"\n+#line 501 \"./parse.y\"\n {RULE (\"']' expected\"); RECOVER;;\n     break;}\n case 26:\n-#line 515 \"./parse.y\"\n+#line 516 \"./parse.y\"\n { yyval.node = make_qualified_name (yyvsp[-2].node, yyvsp[0].node, yyvsp[-1].operator.location); ;\n     break;}\n case 28:\n-#line 524 \"./parse.y\"\n+#line 525 \"./parse.y\"\n {yyval.node = NULL;;\n     break;}\n case 36:\n-#line 536 \"./parse.y\"\n+#line 537 \"./parse.y\"\n {\n \t\t  yyval.node = NULL;\n \t\t;\n     break;}\n case 37:\n-#line 540 \"./parse.y\"\n+#line 541 \"./parse.y\"\n {\n \t\t  yyval.node = NULL;\n \t\t;\n     break;}\n case 40:\n-#line 552 \"./parse.y\"\n+#line 553 \"./parse.y\"\n { ctxp->package = EXPR_WFL_NODE (yyvsp[-1].node); ;\n     break;}\n case 41:\n-#line 554 \"./parse.y\"\n+#line 555 \"./parse.y\"\n {yyerror (\"Missing name\"); RECOVER;;\n     break;}\n case 42:\n-#line 556 \"./parse.y\"\n+#line 557 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 45:\n-#line 566 \"./parse.y\"\n+#line 567 \"./parse.y\"\n {\n \t\t  tree name = EXPR_WFL_NODE (yyvsp[-1].node), node, last_name;\n \t\t  int   i = IDENTIFIER_LENGTH (name)-1;\n@@ -2801,15 +2802,15 @@ case 45:\n \t\t;\n     break;}\n case 46:\n-#line 592 \"./parse.y\"\n+#line 593 \"./parse.y\"\n {yyerror (\"Missing name\"); RECOVER;;\n     break;}\n case 47:\n-#line 594 \"./parse.y\"\n+#line 595 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 48:\n-#line 599 \"./parse.y\"\n+#line 600 \"./parse.y\"\n {\n \t\t  tree name = EXPR_WFL_NODE (yyvsp[-3].node);\n \t\t  /* Don't import java.lang.* twice. */\n@@ -2823,40 +2824,40 @@ case 48:\n \t\t;\n     break;}\n case 49:\n-#line 611 \"./parse.y\"\n+#line 612 \"./parse.y\"\n {yyerror (\"'*' expected\"); RECOVER;;\n     break;}\n case 50:\n-#line 613 \"./parse.y\"\n+#line 614 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 51:\n-#line 618 \"./parse.y\"\n+#line 619 \"./parse.y\"\n {\n \t\t  maybe_generate_finit ();\n \t\t  maybe_generate_clinit ();\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 53:\n-#line 625 \"./parse.y\"\n+#line 626 \"./parse.y\"\n { yyval.node = NULL; ;\n     break;}\n case 54:\n-#line 627 \"./parse.y\"\n+#line 628 \"./parse.y\"\n {\n \t\t  YYERROR_NOW;\n \t\t  yyerror (\"Class or interface declaration expected\");\n \t\t;\n     break;}\n case 55:\n-#line 638 \"./parse.y\"\n+#line 639 \"./parse.y\"\n {\n \t\t  yyval.value = (1 << yyvsp[0].value);\n \t\t;\n     break;}\n case 56:\n-#line 642 \"./parse.y\"\n+#line 643 \"./parse.y\"\n {\n \t\t  int acc = (1 << yyvsp[0].value);\n \t\t  if (yyval.value & acc)\n@@ -2870,123 +2871,123 @@ case 56:\n \t\t;\n     break;}\n case 57:\n-#line 658 \"./parse.y\"\n+#line 659 \"./parse.y\"\n { create_class (yyvsp[-4].value, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 58:\n-#line 660 \"./parse.y\"\n+#line 661 \"./parse.y\"\n { \n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 59:\n-#line 664 \"./parse.y\"\n+#line 665 \"./parse.y\"\n { create_class (0, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 60:\n-#line 666 \"./parse.y\"\n+#line 667 \"./parse.y\"\n { \t\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 61:\n-#line 670 \"./parse.y\"\n+#line 671 \"./parse.y\"\n {yyerror (\"Missing class name\"); RECOVER;;\n     break;}\n case 62:\n-#line 672 \"./parse.y\"\n+#line 673 \"./parse.y\"\n {yyerror (\"Missing class name\"); RECOVER;;\n     break;}\n case 63:\n-#line 674 \"./parse.y\"\n+#line 675 \"./parse.y\"\n {\n \t\t  if (!ctxp->class_err) yyerror (\"'{' expected\"); \n \t\t  DRECOVER(class1);\n \t\t;\n     break;}\n case 64:\n-#line 679 \"./parse.y\"\n+#line 680 \"./parse.y\"\n {if (!ctxp->class_err) yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 65:\n-#line 683 \"./parse.y\"\n+#line 684 \"./parse.y\"\n { yyval.node = NULL; ;\n     break;}\n case 66:\n-#line 685 \"./parse.y\"\n+#line 686 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 67:\n-#line 687 \"./parse.y\"\n+#line 688 \"./parse.y\"\n {yyerror (\"'{' expected\"); ctxp->class_err=1;;\n     break;}\n case 68:\n-#line 689 \"./parse.y\"\n+#line 690 \"./parse.y\"\n {yyerror (\"Missing super class name\"); ctxp->class_err=1;;\n     break;}\n case 69:\n-#line 693 \"./parse.y\"\n+#line 694 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 70:\n-#line 695 \"./parse.y\"\n+#line 696 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 71:\n-#line 697 \"./parse.y\"\n+#line 698 \"./parse.y\"\n {\n \t\t  ctxp->class_err=1;\n \t\t  yyerror (\"Missing interface name\"); \n \t\t;\n     break;}\n case 72:\n-#line 705 \"./parse.y\"\n+#line 706 \"./parse.y\"\n { \n \t\t  ctxp->interface_number = 1;\n \t\t  yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE);\n \t\t;\n     break;}\n case 73:\n-#line 710 \"./parse.y\"\n+#line 711 \"./parse.y\"\n { \n \t\t  ctxp->interface_number++;\n \t\t  yyval.node = chainon (yyvsp[-2].node, build_tree_list (yyvsp[0].node, NULL_TREE));\n \t\t;\n     break;}\n case 74:\n-#line 715 \"./parse.y\"\n+#line 716 \"./parse.y\"\n {yyerror (\"Missing interface name\"); RECOVER;;\n     break;}\n case 75:\n-#line 720 \"./parse.y\"\n+#line 721 \"./parse.y\"\n { yyval.node = ctxp->current_parsed_class; ;\n     break;}\n case 76:\n-#line 722 \"./parse.y\"\n+#line 723 \"./parse.y\"\n { yyval.node = ctxp->current_parsed_class; ;\n     break;}\n case 82:\n-#line 735 \"./parse.y\"\n+#line 736 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"instance initializer\"); ;\n     break;}\n case 84:\n-#line 741 \"./parse.y\"\n+#line 742 \"./parse.y\"\n { yyval.node = yyvsp[-1].node; ;\n     break;}\n case 86:\n-#line 744 \"./parse.y\"\n+#line 745 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner classe declaration\"); ;\n     break;}\n case 87:\n-#line 746 \"./parse.y\"\n+#line 747 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner interface declaration\"); ;\n     break;}\n case 88:\n-#line 752 \"./parse.y\"\n+#line 753 \"./parse.y\"\n { register_fields (0, yyvsp[-2].node, yyvsp[-1].node); ;\n     break;}\n case 89:\n-#line 754 \"./parse.y\"\n+#line 755 \"./parse.y\"\n {\n \t\t  check_modifiers \n \t\t    (\"Illegal modifier `%s' for field declaration\",\n@@ -2996,19 +2997,19 @@ case 89:\n \t\t;\n     break;}\n case 91:\n-#line 767 \"./parse.y\"\n+#line 768 \"./parse.y\"\n { yyval.node = chainon (yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 92:\n-#line 769 \"./parse.y\"\n+#line 770 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 93:\n-#line 774 \"./parse.y\"\n+#line 775 \"./parse.y\"\n { yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 94:\n-#line 776 \"./parse.y\"\n+#line 777 \"./parse.y\"\n { \n \t\t  if (java_error_count)\n \t\t    yyvsp[0].node = NULL_TREE;\n@@ -3017,101 +3018,101 @@ case 94:\n \t\t;\n     break;}\n case 95:\n-#line 783 \"./parse.y\"\n+#line 784 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing variable initializer\");\n \t\t  yyval.node = build_tree_list (yyvsp[-2].node, NULL_TREE);\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 96:\n-#line 789 \"./parse.y\"\n+#line 790 \"./parse.y\"\n {\n \t\t  yyerror (\"';' expected\");\n \t\t  yyval.node = build_tree_list (yyvsp[-3].node, NULL_TREE);\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 98:\n-#line 799 \"./parse.y\"\n+#line 800 \"./parse.y\"\n { yyval.node = build_unresolved_array_type (yyvsp[-2].node); ;\n     break;}\n case 99:\n-#line 801 \"./parse.y\"\n+#line 802 \"./parse.y\"\n {yyerror (\"Invalid declaration\"); DRECOVER(vdi);;\n     break;}\n case 100:\n-#line 803 \"./parse.y\"\n+#line 804 \"./parse.y\"\n {yyerror (\"']' expected\"); DRECOVER(vdi);;\n     break;}\n case 101:\n-#line 805 \"./parse.y\"\n+#line 806 \"./parse.y\"\n {yyerror (\"Unbalanced ']'\"); DRECOVER(vdi);;\n     break;}\n case 104:\n-#line 816 \"./parse.y\"\n+#line 817 \"./parse.y\"\n {\n \t\t  current_function_decl = yyvsp[0].node;\n \t\t  source_start_java_method (current_function_decl);\n \t\t;\n     break;}\n case 105:\n-#line 821 \"./parse.y\"\n+#line 822 \"./parse.y\"\n { complete_method_declaration (yyvsp[0].node); ;\n     break;}\n case 106:\n-#line 823 \"./parse.y\"\n+#line 824 \"./parse.y\"\n {YYNOT_TWICE yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 107:\n-#line 828 \"./parse.y\"\n+#line 829 \"./parse.y\"\n { yyval.node = method_header (0, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 108:\n-#line 830 \"./parse.y\"\n+#line 831 \"./parse.y\"\n { yyval.node = method_header (0, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 109:\n-#line 832 \"./parse.y\"\n+#line 833 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-3].value, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 110:\n-#line 834 \"./parse.y\"\n+#line 835 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-3].value, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 111:\n-#line 836 \"./parse.y\"\n+#line 837 \"./parse.y\"\n {RECOVER;;\n     break;}\n case 112:\n-#line 838 \"./parse.y\"\n+#line 839 \"./parse.y\"\n {RECOVER;;\n     break;}\n case 113:\n-#line 840 \"./parse.y\"\n+#line 841 \"./parse.y\"\n {yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 114:\n-#line 842 \"./parse.y\"\n+#line 843 \"./parse.y\"\n {yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 115:\n-#line 844 \"./parse.y\"\n+#line 845 \"./parse.y\"\n {\n \t\t  yyerror (\"Invalid method declaration, return type required\");\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 116:\n-#line 852 \"./parse.y\"\n+#line 853 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 117:\n-#line 854 \"./parse.y\"\n+#line 855 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 118:\n-#line 856 \"./parse.y\"\n+#line 857 \"./parse.y\"\n {\n \t\t  EXPR_WFL_LINECOL (wfl_operator) = yyvsp[-1].operator.location;\n \t\t  TREE_PURPOSE (yyvsp[-2].node) = \n@@ -3122,169 +3123,169 @@ case 118:\n \t\t;\n     break;}\n case 119:\n-#line 865 \"./parse.y\"\n+#line 866 \"./parse.y\"\n {yyerror (\"')' expected\"); DRECOVER(method_declarator);;\n     break;}\n case 120:\n-#line 867 \"./parse.y\"\n+#line 868 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 121:\n-#line 872 \"./parse.y\"\n+#line 873 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number = 1;\n \t\t;\n     break;}\n case 122:\n-#line 876 \"./parse.y\"\n+#line 877 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number += 1;\n \t\t  yyval.node = chainon (yyvsp[-2].node, yyvsp[0].node);\n \t\t;\n     break;}\n case 123:\n-#line 881 \"./parse.y\"\n+#line 882 \"./parse.y\"\n {yyerror (\"Missing formal parameter term\"); RECOVER;;\n     break;}\n case 124:\n-#line 886 \"./parse.y\"\n+#line 887 \"./parse.y\"\n {\n \t\t  yyval.node = build_tree_list (yyvsp[0].node, yyvsp[-1].node);\n \t\t;\n     break;}\n case 125:\n-#line 890 \"./parse.y\"\n+#line 891 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"final parameters\"); ;\n     break;}\n case 126:\n-#line 892 \"./parse.y\"\n+#line 893 \"./parse.y\"\n {yyerror (\"Missing identifier\"); RECOVER;;\n     break;}\n case 127:\n-#line 894 \"./parse.y\"\n+#line 895 \"./parse.y\"\n {\n \t\t  SOURCE_FRONTEND_DEBUG ((\"Modifiers: %d\", yyvsp[-2].value));\n \t\t  yyerror (\"Missing identifier\"); RECOVER;\n \t\t;\n     break;}\n case 128:\n-#line 901 \"./parse.y\"\n+#line 902 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 129:\n-#line 903 \"./parse.y\"\n+#line 904 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 130:\n-#line 905 \"./parse.y\"\n+#line 906 \"./parse.y\"\n {yyerror (\"Missing class type term\"); RECOVER;;\n     break;}\n case 131:\n-#line 910 \"./parse.y\"\n+#line 911 \"./parse.y\"\n { yyval.node = build_tree_list (yyvsp[0].node, yyvsp[0].node); ;\n     break;}\n case 132:\n-#line 912 \"./parse.y\"\n+#line 913 \"./parse.y\"\n { yyval.node = tree_cons (yyvsp[0].node, yyvsp[0].node, yyvsp[-2].node); ;\n     break;}\n case 133:\n-#line 914 \"./parse.y\"\n+#line 915 \"./parse.y\"\n {yyerror (\"Missing class type term\"); RECOVER;;\n     break;}\n case 136:\n-#line 921 \"./parse.y\"\n+#line 922 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 137:\n-#line 927 \"./parse.y\"\n+#line 928 \"./parse.y\"\n {\n \t\t  RULE (\"STATIC_INITIALIZER\");\n \t\t;\n     break;}\n case 138:\n-#line 931 \"./parse.y\"\n+#line 932 \"./parse.y\"\n {\n \t\t  RULE (\"STATIC_INITIALIZER\");\n \t\t;\n     break;}\n case 139:\n-#line 938 \"./parse.y\"\n+#line 939 \"./parse.y\"\n {\n \t\t  SOURCE_FRONTEND_DEBUG ((\"Modifiers: %d\", yyvsp[0].value));\n \t\t;\n     break;}\n case 140:\n-#line 946 \"./parse.y\"\n+#line 947 \"./parse.y\"\n {\n \t\t  current_function_decl = yyvsp[0].node;\n \t\t  source_start_java_method (current_function_decl);\n \t\t;\n     break;}\n case 141:\n-#line 951 \"./parse.y\"\n+#line 952 \"./parse.y\"\n { complete_method_declaration (yyvsp[0].node); ;\n     break;}\n case 142:\n-#line 956 \"./parse.y\"\n+#line 957 \"./parse.y\"\n { yyval.node = method_header (0, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 143:\n-#line 958 \"./parse.y\"\n+#line 959 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-2].value, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 144:\n-#line 963 \"./parse.y\"\n+#line 964 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 145:\n-#line 965 \"./parse.y\"\n+#line 966 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 146:\n-#line 973 \"./parse.y\"\n+#line 974 \"./parse.y\"\n { \n \t\t  BLOCK_EXPR_BODY (yyvsp[0].node) = empty_stmt_node;\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 147:\n-#line 978 \"./parse.y\"\n+#line 979 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 148:\n-#line 980 \"./parse.y\"\n+#line 981 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 149:\n-#line 982 \"./parse.y\"\n+#line 983 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 150:\n-#line 988 \"./parse.y\"\n+#line 989 \"./parse.y\"\n { \n \t\t  yyval.node = build_method_invocation (yyvsp[-3].node, NULL_TREE); \n \t\t  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-3].node), yyval.node);\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);\n \t\t;\n     break;}\n case 151:\n-#line 994 \"./parse.y\"\n+#line 995 \"./parse.y\"\n { \n \t\t  yyval.node = build_method_invocation (yyvsp[-4].node, yyvsp[-2].node); \n \t\t  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-4].node), yyval.node);\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);\n \t\t;\n     break;}\n case 152:\n-#line 1002 \"./parse.y\"\n+#line 1003 \"./parse.y\"\n {yyval.node = parse_jdk1_1_error (\"explicit constructor invocation\"); ;\n     break;}\n case 153:\n-#line 1004 \"./parse.y\"\n+#line 1005 \"./parse.y\"\n {yyval.node = parse_jdk1_1_error (\"explicit constructor invocation\"); ;\n     break;}\n case 154:\n-#line 1009 \"./parse.y\"\n+#line 1010 \"./parse.y\"\n {\n \t\t  tree wfl = build_wfl_node (this_identifier_node, \n \t\t\t\t\t     input_filename, 0, 0);\n@@ -3293,7 +3294,7 @@ case 154:\n \t\t;\n     break;}\n case 155:\n-#line 1016 \"./parse.y\"\n+#line 1017 \"./parse.y\"\n {\n \t\t  tree wfl = build_wfl_node (super_identifier_node,\n \t\t\t\t\t     input_filename, 0, 0);\n@@ -3302,168 +3303,168 @@ case 155:\n \t\t;\n     break;}\n case 156:\n-#line 1028 \"./parse.y\"\n+#line 1029 \"./parse.y\"\n { create_interface (0, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 157:\n-#line 1030 \"./parse.y\"\n+#line 1031 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 158:\n-#line 1034 \"./parse.y\"\n+#line 1035 \"./parse.y\"\n { create_interface (yyvsp[-2].value, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 159:\n-#line 1036 \"./parse.y\"\n+#line 1037 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 160:\n-#line 1040 \"./parse.y\"\n+#line 1041 \"./parse.y\"\n { create_interface (0, yyvsp[-1].node, yyvsp[0].node);\t;\n     break;}\n case 161:\n-#line 1042 \"./parse.y\"\n+#line 1043 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 162:\n-#line 1046 \"./parse.y\"\n+#line 1047 \"./parse.y\"\n { create_interface (yyvsp[-3].value, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 163:\n-#line 1048 \"./parse.y\"\n+#line 1049 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 164:\n-#line 1052 \"./parse.y\"\n+#line 1053 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 165:\n-#line 1054 \"./parse.y\"\n+#line 1055 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 166:\n-#line 1059 \"./parse.y\"\n+#line 1060 \"./parse.y\"\n { \n \t\t  ctxp->interface_number = 1;\n \t\t  yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE);\n \t\t;\n     break;}\n case 167:\n-#line 1064 \"./parse.y\"\n+#line 1065 \"./parse.y\"\n { \n \t\t  ctxp->interface_number++;\n \t\t  yyval.node = chainon (yyvsp[-2].node, build_tree_list (yyvsp[0].node, NULL_TREE));\n \t\t;\n     break;}\n case 168:\n-#line 1069 \"./parse.y\"\n+#line 1070 \"./parse.y\"\n {yyerror (\"Invalid interface type\"); RECOVER;;\n     break;}\n case 169:\n-#line 1071 \"./parse.y\"\n+#line 1072 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 170:\n-#line 1076 \"./parse.y\"\n+#line 1077 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 171:\n-#line 1078 \"./parse.y\"\n+#line 1079 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 176:\n-#line 1090 \"./parse.y\"\n+#line 1091 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class declaration\"); ;\n     break;}\n case 177:\n-#line 1092 \"./parse.y\"\n+#line 1093 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner interface declaration\"); ;\n     break;}\n case 179:\n-#line 1101 \"./parse.y\"\n+#line 1102 \"./parse.y\"\n { \n \t\t  check_abstract_method_header (yyvsp[-1].node);\n \t\t  current_function_decl = NULL_TREE; /* FIXME ? */\n \t\t;\n     break;}\n case 180:\n-#line 1106 \"./parse.y\"\n+#line 1107 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 181:\n-#line 1112 \"./parse.y\"\n+#line 1113 \"./parse.y\"\n { yyval.node = build_new_array_init (yyvsp[-1].operator.location, NULL_TREE); ;\n     break;}\n case 182:\n-#line 1114 \"./parse.y\"\n+#line 1115 \"./parse.y\"\n { yyval.node = build_new_array_init (yyvsp[-2].operator.location, yyvsp[-1].node); ;\n     break;}\n case 183:\n-#line 1116 \"./parse.y\"\n+#line 1117 \"./parse.y\"\n { yyval.node = build_new_array_init (yyvsp[-3].operator.location, yyvsp[-2].node); ;\n     break;}\n case 184:\n-#line 1121 \"./parse.y\"\n+#line 1122 \"./parse.y\"\n { \n \t\t  yyval.node = tree_cons (maybe_build_array_element_wfl (yyvsp[0].node), \n \t\t\t\t  yyvsp[0].node, NULL_TREE);\n \t\t;\n     break;}\n case 185:\n-#line 1126 \"./parse.y\"\n+#line 1127 \"./parse.y\"\n {\n \t\t  yyval.node = tree_cons (maybe_build_array_element_wfl (yyvsp[0].node), yyvsp[0].node, yyvsp[-2].node);\n \t\t;\n     break;}\n case 186:\n-#line 1130 \"./parse.y\"\n+#line 1131 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 187:\n-#line 1136 \"./parse.y\"\n+#line 1137 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 188:\n-#line 1138 \"./parse.y\"\n+#line 1139 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 189:\n-#line 1143 \"./parse.y\"\n+#line 1144 \"./parse.y\"\n { enter_block (); ;\n     break;}\n case 190:\n-#line 1148 \"./parse.y\"\n+#line 1149 \"./parse.y\"\n { \n \t\t  maybe_absorb_scoping_blocks ();\n \t\t  yyval.node = exit_block ();\n \t\t;\n     break;}\n case 194:\n-#line 1162 \"./parse.y\"\n+#line 1163 \"./parse.y\"\n { java_method_add_stmt (current_function_decl, yyvsp[0].node); ;\n     break;}\n case 195:\n-#line 1164 \"./parse.y\"\n+#line 1165 \"./parse.y\"\n { parse_jdk1_1_error (\"inner class declaration\"); ;\n     break;}\n case 197:\n-#line 1173 \"./parse.y\"\n+#line 1174 \"./parse.y\"\n { declare_local_variables (0, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 198:\n-#line 1175 \"./parse.y\"\n+#line 1176 \"./parse.y\"\n { declare_local_variables (yyvsp[-2].value, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 204:\n-#line 1185 \"./parse.y\"\n+#line 1186 \"./parse.y\"\n { \n \t\t  /* If the for loop is unlabeled, we must return the\n \t\t     block it was defined it. It our last chance to\n@@ -3473,11 +3474,11 @@ case 204:\n \t\t;\n     break;}\n case 221:\n-#line 1218 \"./parse.y\"\n+#line 1219 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 222:\n-#line 1223 \"./parse.y\"\n+#line 1224 \"./parse.y\"\n {\n \t\t  yyval.node = build_labeled_block (EXPR_WFL_LINECOL (yyvsp[-1].node), \n \t\t\t\t\t    EXPR_WFL_NODE (yyvsp[-1].node));\n@@ -3487,27 +3488,27 @@ case 222:\n \t\t;\n     break;}\n case 223:\n-#line 1234 \"./parse.y\"\n+#line 1235 \"./parse.y\"\n { \n \t\t  yyval.node = complete_labeled_statement (yyvsp[-1].node, yyvsp[0].node);\n \t\t  pop_labeled_block ();\n \t\t  POP_LABELED_BLOCK ();\n \t\t;\n     break;}\n case 224:\n-#line 1240 \"./parse.y\"\n+#line 1241 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 225:\n-#line 1245 \"./parse.y\"\n+#line 1246 \"./parse.y\"\n { \n \t\t  yyval.node = complete_labeled_statement (yyvsp[-1].node, yyvsp[0].node);\n \t\t  pop_labeled_block ();\n \t\t  POP_LABELED_BLOCK ();\n \t\t;\n     break;}\n case 226:\n-#line 1256 \"./parse.y\"\n+#line 1257 \"./parse.y\"\n {\n \t\t  /* We have a statement. Generate a WFL around it so\n \t\t     we can debug it */\n@@ -3518,105 +3519,105 @@ case 226:\n \t\t;\n     break;}\n case 227:\n-#line 1265 \"./parse.y\"\n+#line 1266 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 228:\n-#line 1271 \"./parse.y\"\n+#line 1272 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 229:\n-#line 1277 \"./parse.y\"\n+#line 1278 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 230:\n-#line 1283 \"./parse.y\"\n+#line 1284 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 231:\n-#line 1285 \"./parse.y\"\n+#line 1286 \"./parse.y\"\n {\n \t\t  yyerror (\"Constructor invocation must be first \"\n \t\t\t   \"thing in a constructor\"); \n \t\t  RECOVER;\n \t\t;\n     break;}\n case 232:\n-#line 1291 \"./parse.y\"\n+#line 1292 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 233:\n-#line 1293 \"./parse.y\"\n+#line 1294 \"./parse.y\"\n {\n \t\t  yyerror (\"Constructor invocation must be first \"\n \t\t\t   \"thing in a constructor\"); \n \t\t  RECOVER;\n \t\t;\n     break;}\n case 234:\n-#line 1299 \"./parse.y\"\n+#line 1300 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 235:\n-#line 1301 \"./parse.y\"\n+#line 1302 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 236:\n-#line 1303 \"./parse.y\"\n+#line 1304 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 237:\n-#line 1305 \"./parse.y\"\n+#line 1306 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 238:\n-#line 1307 \"./parse.y\"\n+#line 1308 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 246:\n-#line 1322 \"./parse.y\"\n+#line 1323 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 247:\n-#line 1324 \"./parse.y\"\n+#line 1325 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 248:\n-#line 1326 \"./parse.y\"\n+#line 1327 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 249:\n-#line 1328 \"./parse.y\"\n+#line 1329 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 250:\n-#line 1333 \"./parse.y\"\n+#line 1334 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 251:\n-#line 1338 \"./parse.y\"\n+#line 1339 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 252:\n-#line 1343 \"./parse.y\"\n+#line 1344 \"./parse.y\"\n {\n \t\t  enter_block ();\n \t\t;\n     break;}\n case 253:\n-#line 1347 \"./parse.y\"\n+#line 1348 \"./parse.y\"\n { \n \t\t  /* Make into \"proper list\" of COMPOUND_EXPRs.\n \t\t     I.e. make the last statment also have its own\n@@ -3627,112 +3628,112 @@ case 253:\n \t\t;\n     break;}\n case 254:\n-#line 1359 \"./parse.y\"\n+#line 1360 \"./parse.y\"\n { \n \t\t  yyval.node = build (SWITCH_EXPR, NULL_TREE, yyvsp[-1].node, NULL_TREE);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;\n \t\t;\n     break;}\n case 255:\n-#line 1364 \"./parse.y\"\n+#line 1365 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 256:\n-#line 1366 \"./parse.y\"\n+#line 1367 \"./parse.y\"\n {yyerror (\"Missing term or ')'\"); DRECOVER(switch_statement);;\n     break;}\n case 257:\n-#line 1368 \"./parse.y\"\n+#line 1369 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 258:\n-#line 1376 \"./parse.y\"\n+#line 1377 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 259:\n-#line 1378 \"./parse.y\"\n+#line 1379 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 260:\n-#line 1380 \"./parse.y\"\n+#line 1381 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 261:\n-#line 1382 \"./parse.y\"\n+#line 1383 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 267:\n-#line 1401 \"./parse.y\"\n+#line 1402 \"./parse.y\"\n { \n \t\t  tree lab = build1 (CASE_EXPR, NULL_TREE, yyvsp[-1].node);\n \t\t  EXPR_WFL_LINECOL (lab) = yyvsp[-2].operator.location;\n \t\t  java_method_add_stmt (current_function_decl, lab);\n \t\t;\n     break;}\n case 268:\n-#line 1407 \"./parse.y\"\n+#line 1408 \"./parse.y\"\n { \n \t\t  tree lab = build1 (DEFAULT_EXPR, NULL_TREE, NULL_TREE);\n \t\t  EXPR_WFL_LINECOL (lab) = yyvsp[-1].operator.location;\n \t\t  java_method_add_stmt (current_function_decl, lab);\n \t\t;\n     break;}\n case 269:\n-#line 1413 \"./parse.y\"\n+#line 1414 \"./parse.y\"\n {yyerror (\"Missing or invalid constant expression\"); RECOVER;;\n     break;}\n case 270:\n-#line 1415 \"./parse.y\"\n+#line 1416 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 271:\n-#line 1417 \"./parse.y\"\n+#line 1418 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 272:\n-#line 1422 \"./parse.y\"\n+#line 1423 \"./parse.y\"\n { \n \t\t  tree body = build_loop_body (yyvsp[-2].operator.location, yyvsp[-1].node, 0);\n \t\t  yyval.node = build_new_loop (body);\n \t\t;\n     break;}\n case 273:\n-#line 1430 \"./parse.y\"\n+#line 1431 \"./parse.y\"\n { yyval.node = complete_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;\n     break;}\n case 274:\n-#line 1432 \"./parse.y\"\n+#line 1433 \"./parse.y\"\n {YYERROR_NOW; yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 275:\n-#line 1434 \"./parse.y\"\n+#line 1435 \"./parse.y\"\n {yyerror (\"Missing term and ')' expected\"); RECOVER;;\n     break;}\n case 276:\n-#line 1436 \"./parse.y\"\n+#line 1437 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 277:\n-#line 1441 \"./parse.y\"\n+#line 1442 \"./parse.y\"\n { yyval.node = complete_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;\n     break;}\n case 278:\n-#line 1446 \"./parse.y\"\n+#line 1447 \"./parse.y\"\n { \n \t\t  tree body = build_loop_body (0, NULL_TREE, 1);\n \t\t  yyval.node = build_new_loop (body);\n \t\t;\n     break;}\n case 279:\n-#line 1455 \"./parse.y\"\n+#line 1456 \"./parse.y\"\n { yyval.node = complete_loop_body (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[-5].node, 1); ;\n     break;}\n case 280:\n-#line 1460 \"./parse.y\"\n+#line 1461 \"./parse.y\"\n { yyval.node = complete_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);;\n     break;}\n case 281:\n-#line 1462 \"./parse.y\"\n+#line 1463 \"./parse.y\"\n { \n \t\t  yyval.node = complete_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  /* We have not condition, so we get rid of the EXIT_EXPR */\n@@ -3741,23 +3742,23 @@ case 281:\n \t\t;\n     break;}\n case 282:\n-#line 1469 \"./parse.y\"\n+#line 1470 \"./parse.y\"\n {yyerror (\"Invalid control expression\"); RECOVER;;\n     break;}\n case 283:\n-#line 1471 \"./parse.y\"\n+#line 1472 \"./parse.y\"\n {yyerror (\"Invalid update expression\"); RECOVER;;\n     break;}\n case 284:\n-#line 1473 \"./parse.y\"\n+#line 1474 \"./parse.y\"\n {yyerror (\"Invalid update expression\"); RECOVER;;\n     break;}\n case 285:\n-#line 1478 \"./parse.y\"\n+#line 1479 \"./parse.y\"\n { yyval.node = complete_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);;\n     break;}\n case 286:\n-#line 1480 \"./parse.y\"\n+#line 1481 \"./parse.y\"\n { \n \t\t  yyval.node = complete_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  /* We have not condition, so we get rid of the EXIT_EXPR */\n@@ -3766,23 +3767,23 @@ case 286:\n \t\t;\n     break;}\n case 287:\n-#line 1490 \"./parse.y\"\n+#line 1491 \"./parse.y\"\n { \n \t\t  /* This scope defined for local variable that may be\n                      defined within the scope of the for loop */\n \t\t  enter_block (); \n \t\t;\n     break;}\n case 288:\n-#line 1496 \"./parse.y\"\n+#line 1497 \"./parse.y\"\n {yyerror (\"'(' expected\"); DRECOVER(for_1);;\n     break;}\n case 289:\n-#line 1498 \"./parse.y\"\n+#line 1499 \"./parse.y\"\n {yyerror (\"Invalid init statement\"); RECOVER;;\n     break;}\n case 290:\n-#line 1503 \"./parse.y\"\n+#line 1504 \"./parse.y\"\n { \n \t\t  /* We now declare the loop body. The loop is\n                      declared as a for loop. */\n@@ -3795,176 +3796,179 @@ case 290:\n \t\t;\n     break;}\n case 291:\n-#line 1515 \"./parse.y\"\n+#line 1516 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 292:\n-#line 1517 \"./parse.y\"\n+#line 1518 \"./parse.y\"\n { \n \t\t  /* Init statement recorded within the previously\n                      defined block scope */\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyvsp[0].node);\n \t\t;\n     break;}\n case 293:\n-#line 1523 \"./parse.y\"\n+#line 1524 \"./parse.y\"\n { \n \t\t  /* Local variable are recorded within the previously\n \t\t     defined block scope */\n \t\t  yyval.node = NULL_TREE;\n \t\t;\n     break;}\n case 294:\n-#line 1529 \"./parse.y\"\n+#line 1530 \"./parse.y\"\n {yyerror (\"';' expected\"); DRECOVER(for_init_1);;\n     break;}\n case 295:\n-#line 1533 \"./parse.y\"\n+#line 1534 \"./parse.y\"\n {yyval.node = empty_stmt_node;;\n     break;}\n case 296:\n-#line 1535 \"./parse.y\"\n+#line 1536 \"./parse.y\"\n { yyval.node = build_debugable_stmt (BUILD_LOCATION (), yyvsp[0].node); ;\n     break;}\n case 297:\n-#line 1540 \"./parse.y\"\n+#line 1541 \"./parse.y\"\n { yyval.node = add_stmt_to_compound (NULL_TREE, NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 298:\n-#line 1542 \"./parse.y\"\n+#line 1543 \"./parse.y\"\n { yyval.node = add_stmt_to_compound (yyvsp[-2].node, NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 299:\n-#line 1544 \"./parse.y\"\n+#line 1545 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 300:\n-#line 1549 \"./parse.y\"\n+#line 1550 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 1, NULL_TREE); ;\n     break;}\n case 301:\n-#line 1551 \"./parse.y\"\n+#line 1552 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 1, yyvsp[-1].node); ;\n     break;}\n case 302:\n-#line 1553 \"./parse.y\"\n+#line 1554 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 303:\n-#line 1555 \"./parse.y\"\n+#line 1556 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 304:\n-#line 1560 \"./parse.y\"\n+#line 1561 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 0, NULL_TREE); ;\n     break;}\n case 305:\n-#line 1562 \"./parse.y\"\n+#line 1563 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 0, yyvsp[-1].node); ;\n     break;}\n case 306:\n-#line 1564 \"./parse.y\"\n+#line 1565 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 307:\n-#line 1566 \"./parse.y\"\n+#line 1567 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 308:\n-#line 1571 \"./parse.y\"\n+#line 1572 \"./parse.y\"\n { yyval.node = build_return (yyvsp[-1].operator.location, NULL_TREE); ;\n     break;}\n case 309:\n-#line 1573 \"./parse.y\"\n+#line 1574 \"./parse.y\"\n { yyval.node = build_return (yyvsp[-2].operator.location, yyvsp[-1].node); ;\n     break;}\n case 310:\n-#line 1575 \"./parse.y\"\n+#line 1576 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 311:\n-#line 1577 \"./parse.y\"\n+#line 1578 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 312:\n-#line 1582 \"./parse.y\"\n+#line 1583 \"./parse.y\"\n { \n \t\t  yyval.node = build1 (THROW_EXPR, NULL_TREE, yyvsp[-1].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;\n \t\t;\n     break;}\n case 313:\n-#line 1587 \"./parse.y\"\n+#line 1588 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 314:\n-#line 1589 \"./parse.y\"\n+#line 1590 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 315:\n-#line 1594 \"./parse.y\"\n+#line 1595 \"./parse.y\"\n { \n \t\t  yyval.node = build (SYNCHRONIZED_EXPR, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = \n \t\t    EXPR_WFL_LINECOL (MODIFIER_WFL (SYNCHRONIZED_TK));\n \t\t;\n     break;}\n case 316:\n-#line 1600 \"./parse.y\"\n+#line 1601 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 317:\n-#line 1602 \"./parse.y\"\n+#line 1603 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 318:\n-#line 1604 \"./parse.y\"\n+#line 1605 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 319:\n-#line 1606 \"./parse.y\"\n+#line 1607 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 320:\n-#line 1611 \"./parse.y\"\n+#line 1612 \"./parse.y\"\n {\n \t\t  if ((1 << yyvsp[0].value) != ACC_SYNCHRONIZED)\n \t\t    fatal (\"synchronized was '%d' - yyparse\", (1 << yyvsp[0].value));\n \t\t;\n     break;}\n case 321:\n-#line 1619 \"./parse.y\"\n-{ yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node, NULL_TREE); ;\n+#line 1620 \"./parse.y\"\n+{ yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 322:\n-#line 1621 \"./parse.y\"\n-{ yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, NULL_TREE, yyvsp[0].node); ;\n+#line 1622 \"./parse.y\"\n+{ yyval.node = build_try_finally_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 323:\n-#line 1623 \"./parse.y\"\n-{ yyval.node = build_try_statement (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n+#line 1624 \"./parse.y\"\n+{ yyval.node = build_try_finally_statement (yyvsp[-3].operator.location,\n+\t\t\t\t\t\t    build_try_statement (yyvsp[-3].operator.location,\n+\t\t\t\t\t\t\t\t\t yyvsp[-2].node, yyvsp[-1].node),\n+\t\t\t\t\t\t    yyvsp[0].node); ;\n     break;}\n case 324:\n-#line 1625 \"./parse.y\"\n+#line 1629 \"./parse.y\"\n {yyerror (\"'{' expected\"); DRECOVER (try_statement);;\n     break;}\n case 326:\n-#line 1631 \"./parse.y\"\n+#line 1635 \"./parse.y\"\n { \n \t\t  TREE_CHAIN (yyvsp[0].node) = yyvsp[-1].node;\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 327:\n-#line 1639 \"./parse.y\"\n+#line 1643 \"./parse.y\"\n { \n \t\t  java_method_add_stmt (current_function_decl, yyvsp[0].node);\n \t\t  exit_block ();\n \t\t  yyval.node = yyvsp[-1].node;\n \t\t;\n     break;}\n case 328:\n-#line 1647 \"./parse.y\"\n+#line 1651 \"./parse.y\"\n { \n \t\t  /* We add a block to define a scope for\n \t\t     formal_parameter (CCBP). The formal parameter is\n@@ -3982,187 +3986,184 @@ case 328:\n \t\t;\n     break;}\n case 329:\n-#line 1663 \"./parse.y\"\n+#line 1667 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 330:\n-#line 1665 \"./parse.y\"\n+#line 1669 \"./parse.y\"\n {yyerror (\"Missing term or ')' expected\"); DRECOVER (2);;\n     break;}\n case 331:\n-#line 1667 \"./parse.y\"\n+#line 1671 \"./parse.y\"\n {yyerror (\"')' expected\"); DRECOVER (1);;\n     break;}\n case 332:\n-#line 1672 \"./parse.y\"\n-{ \n-\t\t  yyval.node = build (FINALLY_EXPR, NULL_TREE,\n-\t\t\t      create_label_decl (generate_name ()), yyvsp[0].node);\n-\t\t;\n+#line 1676 \"./parse.y\"\n+{ yyval.node = yyvsp[0].node; ;\n     break;}\n case 333:\n-#line 1677 \"./parse.y\"\n+#line 1678 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER; ;\n     break;}\n case 337:\n-#line 1689 \"./parse.y\"\n+#line 1690 \"./parse.y\"\n { yyval.node = build_this (yyvsp[0].operator.location); ;\n     break;}\n case 338:\n-#line 1691 \"./parse.y\"\n+#line 1692 \"./parse.y\"\n {yyval.node = yyvsp[-1].node;;\n     break;}\n case 343:\n-#line 1700 \"./parse.y\"\n+#line 1701 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"named class literals\"); ;\n     break;}\n case 344:\n-#line 1702 \"./parse.y\"\n+#line 1703 \"./parse.y\"\n { yyval.node = build_class_ref (yyvsp[-2].node); ;\n     break;}\n case 345:\n-#line 1704 \"./parse.y\"\n+#line 1705 \"./parse.y\"\n { yyval.node = build_class_ref (void_type_node); ;\n     break;}\n case 346:\n-#line 1709 \"./parse.y\"\n+#line 1710 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"class literals\"); ;\n     break;}\n case 347:\n-#line 1711 \"./parse.y\"\n+#line 1712 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 348:\n-#line 1713 \"./parse.y\"\n+#line 1714 \"./parse.y\"\n {yyerror (\"'class' or 'this' expected\" ); RECOVER;;\n     break;}\n case 349:\n-#line 1715 \"./parse.y\"\n+#line 1716 \"./parse.y\"\n {yyerror (\"'class' expected\" ); RECOVER;;\n     break;}\n case 350:\n-#line 1717 \"./parse.y\"\n+#line 1718 \"./parse.y\"\n {yyerror (\"'class' expected\" ); RECOVER;;\n     break;}\n case 351:\n-#line 1722 \"./parse.y\"\n+#line 1723 \"./parse.y\"\n { yyval.node = build_new_invocation (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 352:\n-#line 1724 \"./parse.y\"\n+#line 1725 \"./parse.y\"\n { yyval.node = build_new_invocation (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 353:\n-#line 1729 \"./parse.y\"\n+#line 1730 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class instance creation\"); ;\n     break;}\n case 354:\n-#line 1731 \"./parse.y\"\n+#line 1732 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class instance creation\"); ;\n     break;}\n case 359:\n-#line 1740 \"./parse.y\"\n+#line 1741 \"./parse.y\"\n {yyerror (\"'(' expected\"); DRECOVER(new_1);;\n     break;}\n case 360:\n-#line 1742 \"./parse.y\"\n+#line 1743 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 361:\n-#line 1744 \"./parse.y\"\n+#line 1745 \"./parse.y\"\n {yyerror (\"')' or term expected\"); RECOVER;;\n     break;}\n case 362:\n-#line 1746 \"./parse.y\"\n+#line 1747 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 363:\n-#line 1748 \"./parse.y\"\n+#line 1749 \"./parse.y\"\n {YYERROR_NOW; yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 364:\n-#line 1750 \"./parse.y\"\n+#line 1751 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 367:\n-#line 1760 \"./parse.y\"\n+#line 1761 \"./parse.y\"\n { \n \t\t  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, NULL_TREE);\n \t\t  ctxp->formal_parameter_number = 1; \n \t\t;\n     break;}\n case 368:\n-#line 1765 \"./parse.y\"\n+#line 1766 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number += 1;\n \t\t  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyvsp[-2].node);\n \t\t;\n     break;}\n case 369:\n-#line 1770 \"./parse.y\"\n+#line 1771 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 370:\n-#line 1775 \"./parse.y\"\n+#line 1776 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;\n     break;}\n case 371:\n-#line 1777 \"./parse.y\"\n+#line 1778 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;\n     break;}\n case 372:\n-#line 1779 \"./parse.y\"\n+#line 1780 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, CURRENT_OSB (ctxp));;\n     break;}\n case 373:\n-#line 1781 \"./parse.y\"\n+#line 1782 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, CURRENT_OSB (ctxp));;\n     break;}\n case 374:\n-#line 1785 \"./parse.y\"\n+#line 1786 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"anonymous array\"); ;\n     break;}\n case 375:\n-#line 1787 \"./parse.y\"\n+#line 1788 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"anonymous array\"); ;\n     break;}\n case 376:\n-#line 1789 \"./parse.y\"\n+#line 1790 \"./parse.y\"\n {yyerror (\"'[' expected\"); DRECOVER (\"]\");;\n     break;}\n case 377:\n-#line 1791 \"./parse.y\"\n+#line 1792 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 378:\n-#line 1796 \"./parse.y\"\n+#line 1797 \"./parse.y\"\n { yyval.node = build_tree_list (NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 379:\n-#line 1798 \"./parse.y\"\n+#line 1799 \"./parse.y\"\n { yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyval.node); ;\n     break;}\n case 380:\n-#line 1803 \"./parse.y\"\n+#line 1804 \"./parse.y\"\n { \n \t\t  EXPR_WFL_LINECOL (yyvsp[-1].node) = yyvsp[-2].operator.location;\n \t\t  yyval.node = yyvsp[-1].node;\n \t\t;\n     break;}\n case 381:\n-#line 1808 \"./parse.y\"\n+#line 1809 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 382:\n-#line 1810 \"./parse.y\"\n+#line 1811 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term\");\n \t\t  yyerror (\"']' expected\");\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 383:\n-#line 1819 \"./parse.y\"\n+#line 1820 \"./parse.y\"\n { \n \t\t  int allocate = 0;\n \t\t  /* If not initialized, allocate memory for the osb\n@@ -4190,19 +4191,19 @@ case 383:\n \t\t;\n     break;}\n case 384:\n-#line 1845 \"./parse.y\"\n+#line 1846 \"./parse.y\"\n { CURRENT_OSB (ctxp)++; ;\n     break;}\n case 385:\n-#line 1847 \"./parse.y\"\n+#line 1848 \"./parse.y\"\n { yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 386:\n-#line 1852 \"./parse.y\"\n+#line 1853 \"./parse.y\"\n { yyval.node = make_qualified_primary (yyvsp[-2].node, yyvsp[0].node, yyvsp[-1].operator.location); ;\n     break;}\n case 387:\n-#line 1856 \"./parse.y\"\n+#line 1857 \"./parse.y\"\n {\n \t\t  tree super_wfl = \n \t\t    build_wfl_node (super_identifier_node, \n@@ -4212,19 +4213,19 @@ case 387:\n \t\t;\n     break;}\n case 388:\n-#line 1864 \"./parse.y\"\n+#line 1865 \"./parse.y\"\n {yyerror (\"Field expected\"); DRECOVER (super_field_acces);;\n     break;}\n case 389:\n-#line 1869 \"./parse.y\"\n+#line 1870 \"./parse.y\"\n { yyval.node = build_method_invocation (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 390:\n-#line 1871 \"./parse.y\"\n+#line 1872 \"./parse.y\"\n { yyval.node = build_method_invocation (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 391:\n-#line 1873 \"./parse.y\"\n+#line 1874 \"./parse.y\"\n { \n \t\t  if (TREE_CODE (yyvsp[-4].node) == THIS_EXPR)\n \t\t    yyval.node = build_this_super_qualified_invocation \n@@ -4237,7 +4238,7 @@ case 391:\n \t\t;\n     break;}\n case 392:\n-#line 1884 \"./parse.y\"\n+#line 1885 \"./parse.y\"\n { \n \t\t  if (TREE_CODE (yyvsp[-5].node) == THIS_EXPR)\n \t\t    yyval.node = build_this_super_qualified_invocation \n@@ -4250,121 +4251,121 @@ case 392:\n \t\t;\n     break;}\n case 393:\n-#line 1895 \"./parse.y\"\n+#line 1896 \"./parse.y\"\n { \n \t\t  yyval.node = build_this_super_qualified_invocation \n \t\t    (0, yyvsp[-2].node, NULL_TREE, yyvsp[-4].operator.location, yyvsp[-3].operator.location);\n \t\t;\n     break;}\n case 394:\n-#line 1900 \"./parse.y\"\n+#line 1901 \"./parse.y\"\n {\n \t\t  yyval.node = build_this_super_qualified_invocation \n \t\t    (0, yyvsp[-3].node, yyvsp[-1].node, yyvsp[-5].operator.location, yyvsp[-4].operator.location);\n \t\t;\n     break;}\n case 395:\n-#line 1909 \"./parse.y\"\n+#line 1910 \"./parse.y\"\n { yyerror (\"'(' expected\"); DRECOVER (method_invocation); ;\n     break;}\n case 396:\n-#line 1911 \"./parse.y\"\n+#line 1912 \"./parse.y\"\n { yyerror (\"'(' expected\"); DRECOVER (method_invocation); ;\n     break;}\n case 397:\n-#line 1916 \"./parse.y\"\n+#line 1917 \"./parse.y\"\n { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 398:\n-#line 1918 \"./parse.y\"\n+#line 1919 \"./parse.y\"\n { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 399:\n-#line 1920 \"./parse.y\"\n+#line 1921 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term and ']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 400:\n-#line 1925 \"./parse.y\"\n+#line 1926 \"./parse.y\"\n {\n \t\t  yyerror (\"']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 401:\n-#line 1930 \"./parse.y\"\n+#line 1931 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term and ']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 402:\n-#line 1935 \"./parse.y\"\n+#line 1936 \"./parse.y\"\n {\n \t\t  yyerror (\"']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 407:\n-#line 1950 \"./parse.y\"\n+#line 1951 \"./parse.y\"\n { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;\n     break;}\n case 408:\n-#line 1955 \"./parse.y\"\n+#line 1956 \"./parse.y\"\n { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;\n     break;}\n case 411:\n-#line 1962 \"./parse.y\"\n+#line 1963 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 412:\n-#line 1964 \"./parse.y\"\n+#line 1965 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 414:\n-#line 1967 \"./parse.y\"\n+#line 1968 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 415:\n-#line 1969 \"./parse.y\"\n+#line 1970 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 416:\n-#line 1974 \"./parse.y\"\n+#line 1975 \"./parse.y\"\n {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;\n     break;}\n case 417:\n-#line 1976 \"./parse.y\"\n+#line 1977 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 418:\n-#line 1981 \"./parse.y\"\n+#line 1982 \"./parse.y\"\n {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;\n     break;}\n case 419:\n-#line 1983 \"./parse.y\"\n+#line 1984 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 421:\n-#line 1989 \"./parse.y\"\n+#line 1990 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 422:\n-#line 1991 \"./parse.y\"\n+#line 1992 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 424:\n-#line 1994 \"./parse.y\"\n+#line 1995 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 425:\n-#line 1996 \"./parse.y\"\n+#line 1997 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 426:\n-#line 2001 \"./parse.y\"\n+#line 2002 \"./parse.y\"\n { \n \t\t  tree type = yyvsp[-3].node;\n \t\t  while (CURRENT_OSB (ctxp)--)\n@@ -4374,15 +4375,15 @@ case 426:\n \t\t;\n     break;}\n case 427:\n-#line 2009 \"./parse.y\"\n+#line 2010 \"./parse.y\"\n { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 428:\n-#line 2011 \"./parse.y\"\n+#line 2012 \"./parse.y\"\n { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 429:\n-#line 2013 \"./parse.y\"\n+#line 2014 \"./parse.y\"\n { \n \t\t  char *ptr;\n \t\t  while (CURRENT_OSB (ctxp)--)\n@@ -4397,275 +4398,275 @@ case 429:\n \t\t;\n     break;}\n case 430:\n-#line 2026 \"./parse.y\"\n+#line 2027 \"./parse.y\"\n {yyerror (\"']' expected, invalid type expression\");;\n     break;}\n case 431:\n-#line 2028 \"./parse.y\"\n+#line 2029 \"./parse.y\"\n {\n \t          if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid type expression\"); RECOVER;\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 432:\n-#line 2034 \"./parse.y\"\n+#line 2035 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 433:\n-#line 2036 \"./parse.y\"\n+#line 2037 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 434:\n-#line 2038 \"./parse.y\"\n+#line 2039 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 436:\n-#line 2044 \"./parse.y\"\n+#line 2045 \"./parse.y\"\n { \n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), \n \t\t\t\t    yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node);\n \t\t;\n     break;}\n case 437:\n-#line 2049 \"./parse.y\"\n+#line 2050 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 438:\n-#line 2054 \"./parse.y\"\n+#line 2055 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 439:\n-#line 2059 \"./parse.y\"\n+#line 2060 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 440:\n-#line 2061 \"./parse.y\"\n+#line 2062 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 441:\n-#line 2063 \"./parse.y\"\n+#line 2064 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 443:\n-#line 2069 \"./parse.y\"\n+#line 2070 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 444:\n-#line 2074 \"./parse.y\"\n+#line 2075 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 445:\n-#line 2079 \"./parse.y\"\n+#line 2080 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 446:\n-#line 2081 \"./parse.y\"\n+#line 2082 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 448:\n-#line 2087 \"./parse.y\"\n+#line 2088 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 449:\n-#line 2092 \"./parse.y\"\n+#line 2093 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 450:\n-#line 2097 \"./parse.y\"\n+#line 2098 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 451:\n-#line 2102 \"./parse.y\"\n+#line 2103 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 452:\n-#line 2104 \"./parse.y\"\n+#line 2105 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 453:\n-#line 2106 \"./parse.y\"\n+#line 2107 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 455:\n-#line 2112 \"./parse.y\"\n+#line 2113 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 456:\n-#line 2117 \"./parse.y\"\n+#line 2118 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 457:\n-#line 2122 \"./parse.y\"\n+#line 2123 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 458:\n-#line 2127 \"./parse.y\"\n+#line 2128 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 459:\n-#line 2132 \"./parse.y\"\n+#line 2133 \"./parse.y\"\n { yyval.node = build_binop (INSTANCEOF_EXPR, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 460:\n-#line 2134 \"./parse.y\"\n+#line 2135 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 461:\n-#line 2136 \"./parse.y\"\n+#line 2137 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 462:\n-#line 2138 \"./parse.y\"\n+#line 2139 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 463:\n-#line 2140 \"./parse.y\"\n+#line 2141 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 464:\n-#line 2142 \"./parse.y\"\n+#line 2143 \"./parse.y\"\n {yyerror (\"Invalid reference type\"); RECOVER;;\n     break;}\n case 466:\n-#line 2148 \"./parse.y\"\n+#line 2149 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 467:\n-#line 2153 \"./parse.y\"\n+#line 2154 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 468:\n-#line 2158 \"./parse.y\"\n+#line 2159 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 469:\n-#line 2160 \"./parse.y\"\n+#line 2161 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 471:\n-#line 2166 \"./parse.y\"\n+#line 2167 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 472:\n-#line 2171 \"./parse.y\"\n+#line 2172 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 474:\n-#line 2177 \"./parse.y\"\n+#line 2178 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 475:\n-#line 2182 \"./parse.y\"\n+#line 2183 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 477:\n-#line 2188 \"./parse.y\"\n+#line 2189 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 478:\n-#line 2193 \"./parse.y\"\n+#line 2194 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 480:\n-#line 2199 \"./parse.y\"\n+#line 2200 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 481:\n-#line 2204 \"./parse.y\"\n+#line 2205 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 483:\n-#line 2210 \"./parse.y\"\n+#line 2211 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 484:\n-#line 2215 \"./parse.y\"\n+#line 2216 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 486:\n-#line 2221 \"./parse.y\"\n+#line 2222 \"./parse.y\"\n {\n \t\t  yyval.node = build (CONDITIONAL_EXPR, NULL_TREE, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-3].operator.location;\n \t\t;\n     break;}\n case 487:\n-#line 2226 \"./parse.y\"\n+#line 2227 \"./parse.y\"\n {\n \t\t  YYERROR_NOW;\n \t\t  yyerror (\"Missing term\");\n \t\t  DRECOVER (1);\n \t\t;\n     break;}\n case 488:\n-#line 2232 \"./parse.y\"\n+#line 2233 \"./parse.y\"\n {yyerror (\"Missing term\"); DRECOVER (2);;\n     break;}\n case 489:\n-#line 2234 \"./parse.y\"\n+#line 2235 \"./parse.y\"\n {yyerror (\"Missing term\"); DRECOVER (3);;\n     break;}\n case 492:\n-#line 2244 \"./parse.y\"\n+#line 2245 \"./parse.y\"\n { yyval.node = build_assignment (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 493:\n-#line 2246 \"./parse.y\"\n+#line 2247 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Missing term\");\n@@ -4674,7 +4675,7 @@ case 493:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/cygnus/gnupro-98r2/share/bison.simple\"\n+#line 498 \"/usr/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -4870,7 +4871,7 @@ case 493:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 2272 \"./parse.y\"\n+#line 2273 \"./parse.y\"\n \n \f\n \n@@ -10186,6 +10187,15 @@ java_complete_lhs (node)\n     case TRY_EXPR:\n       return patch_try_statement (node);\n \n+    case TRY_FINALLY_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      COMPLETE_CHECK_OP_1 (node);\n+      CAN_COMPLETE_NORMALLY (node)\n+\t= (CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0))\n+\t   && CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1)));\n+      TREE_TYPE (node) = TREE_TYPE (TREE_OPERAND (node, 0));\n+      return node;\n+\n     case CLEANUP_POINT_EXPR:\n       COMPLETE_CHECK_OP_0 (node);\n       TREE_TYPE (node) = void_type_node;\n@@ -13273,92 +13283,23 @@ build_jump_to_finally (block, decl, finally_label, type)\n }\n \n static tree\n-build_try_statement (location, try_block, catches, finally)\n+build_try_statement (location, try_block, catches)\n      int location;\n-     tree try_block, catches, finally;\n-{\n-  tree node, rff;\n-\n-  if (finally && ! flag_emit_class_files)\n-    {\n-      /* This block defines a scope for the entire try[-catch]-finally\n-\t sequence. It hold a local variable used to return from the\n-\t finally using a computed goto. We call it\n-\t return_from_finally (RFF). */\n-      rff = build_decl (VAR_DECL, generate_name (), return_address_type_node);\n-\n-      /* Modification of the try block. */\n-      try_block = build_jump_to_finally (try_block, rff, \n-\t\t\t\t\t FINALLY_EXPR_LABEL (finally), \n-\t\t\t\t\t NULL_TREE);\n-\n-      /* To the finally block: add the computed goto */\n-      add_stmt_to_block (FINALLY_EXPR_BLOCK (finally), NULL_TREE,\n-\t\t\t build (GOTO_EXPR, void_type_node, rff));\n-\n-      /* Modification of each catch blocks, if any */\n-      if (catches)\n-\t{\n-\t  tree catch, catch_decl, catch_block, stmt;\n-\n-\t  for (catch = catches; catch; catch = TREE_CHAIN (catch))\n-\t    TREE_OPERAND (catch, 0) = \n-\t      build_jump_to_finally (TREE_OPERAND (catch, 0), rff,\n-\t\t\t\t     FINALLY_EXPR_LABEL (finally),\n-\t\t\t\t     NULL_TREE);\n-\n-\t  /* Plus, at the end of the list, we add the catch clause that\n-\t     will catch an uncaught exception, call finally and rethrow it:\n-\t       BLOCK\n-\t         void *exception_parameter; (catch_decl)\n-\t\t LABELED_BLOCK\n-\t\t   BLOCK\n-\t\t     exception_parameter = _Jv_exception_info ();\n-\t\t     RFF = &LABEL_DECL;\n-\t\t     goto finally;\n-\t\t LABEL_DECL;\n-\t\t CALL_EXPR\n-\t\t   Jv_ReThrow\n-\t\t   exception_parameter */\n-\t  catch_decl = build_decl (VAR_DECL, generate_name (), ptr_type_node);\n-\t  BUILD_ASSIGN_EXCEPTION_INFO (stmt, catch_decl);\n-\t  catch_block = build_expr_block (stmt, NULL_TREE);\n-\t  catch_block = build_jump_to_finally (catch_block, rff, \n-\t\t\t\t\t       FINALLY_EXPR_LABEL (finally), \n-\t\t\t\t\t       void_type_node);\n-\t  BUILD_THROW (stmt, catch_decl);\n-\t  catch_block = build_expr_block (catch_block, catch_decl);\n-\t  add_stmt_to_block (catch_block, void_type_node, stmt);\n-\n-\t  /* Link the new handler to the existing list as the first\n-\t     entry. It will be the last one to be generated. */\n-\t  catch = build1 (CATCH_EXPR, void_type_node, catch_block);\n-\t  TREE_CHAIN (catch) = catches;\n-\t  catches = catch;\n-\t}\n-    }\n-\n-  node = build (TRY_EXPR, NULL_TREE, try_block, catches, finally);\n+     tree try_block, catches;\n+{\n+  tree node = build (TRY_EXPR, NULL_TREE, try_block, catches);\n   EXPR_WFL_LINECOL (node) = location;\n-  \n-  /* If we have a finally, surround this whole thing by a block where\n-     the RFF local variable is defined. */\n-\n-  return (finally && ! flag_emit_class_files ? build_expr_block (node, rff)\n-\t  : node);\n+  return node;\n }\n \n-/* Get the catch clause block from an element of the catch clause\n-   list. If depends on whether a finally clause exists or node (in\n-   which case the original catch clause was surrounded by a\n-   LABELED_BLOCK_EXPR. */\n-\n-tree\n-java_get_catch_block (node, finally_present_p)\n-     tree node;\n-     int finally_present_p;\n+static tree\n+build_try_finally_statement (location, try_block, finally)\n+     int location;\n+     tree try_block, finally;\n {\n-  return (CATCH_EXPR_GET_EXPR (TREE_OPERAND (node, 0), finally_present_p));\n+  tree node = build (TRY_FINALLY_EXPR, NULL_TREE, try_block, finally);\n+  EXPR_WFL_LINECOL (node) = location;\n+  return node;\n }\n \n static tree\n@@ -13369,8 +13310,6 @@ patch_try_statement (node)\n   tree try = TREE_OPERAND (node, 0);\n   /* Exception handlers are considered in left to right order */\n   tree catch = nreverse (TREE_OPERAND (node, 1));\n-  tree finally = TREE_OPERAND (node, 2);\n-  int finally_p = (finally ? 1 : 0);\n   tree current, caught_type_list = NULL_TREE;\n \n   /* Check catch clauses, if any. Every time we find an error, we try\n@@ -13383,29 +13322,14 @@ patch_try_statement (node)\n       tree sub_current, catch_block, catch_clause;\n       int unreachable;\n \n-      /* Always detect the last catch clause if a finally is\n-         present. This is the catch-all handler and it just needs to\n-         be walked. */\n-      if (!TREE_CHAIN (current) && finally)\n-\t{\n-\t  TREE_OPERAND (current, 0) = \n-\t    java_complete_tree (TREE_OPERAND (current, 0));\n-\t  continue;\n-\t}\n-\n       /* At this point, the structure of the catch clause is\n-         LABELED_BLOCK_EXPR \t(if we have a finally)\n \t   CATCH_EXPR\t\t(catch node)\n \t     BLOCK\t        (with the decl of the parameter)\n                COMPOUND_EXPR\n                  MODIFY_EXPR   (assignment of the catch parameter)\n \t\t BLOCK\t        (catch clause block)\n-           LABEL_DECL\t\t(where to return after finally (if any))\n-\n-\t Since the structure of the catch clause depends on the\n-\t presence of a finally, we use a function call to get to the\n-\t cath clause */\n-      catch_clause = java_get_catch_block (current, finally_p);\n+       */\n+      catch_clause = TREE_OPERAND (current, 0);\n       carg_decl = BLOCK_EXPR_DECLS (catch_clause);\n       carg_type = TREE_TYPE (TREE_TYPE (carg_decl));\n \n@@ -13439,7 +13363,7 @@ patch_try_statement (node)\n \t   sub_current != current; sub_current = TREE_CHAIN (sub_current))\n \t{\n \t  tree sub_catch_clause, decl;\n-\t  sub_catch_clause = java_get_catch_block (sub_current, finally_p);\n+\t  sub_catch_clause = TREE_OPERAND (sub_current, 0);\n \t  decl = BLOCK_EXPR_DECLS (sub_catch_clause);\n \n \t  if (inherits_from_p (carg_type, TREE_TYPE (TREE_TYPE (decl))))\n@@ -13479,24 +13403,12 @@ patch_try_statement (node)\n     CAN_COMPLETE_NORMALLY (node) = 1;\n   POP_EXCEPTIONS ();\n \n-  /* Process finally */\n-  if (finally)\n-    {\n-      current = java_complete_tree (FINALLY_EXPR_BLOCK (finally));\n-      FINALLY_EXPR_BLOCK (finally) = current;\n-      if (current == error_mark_node)\n-\terror_found = 1;\n-      if (! CAN_COMPLETE_NORMALLY (current))\n-\tCAN_COMPLETE_NORMALLY (node) = 0;\n-    }\n-\n   /* Verification ends here */\n   if (error_found) \n     return error_mark_node;\n \n   TREE_OPERAND (node, 0) = try;\n   TREE_OPERAND (node, 1) = catch;\n-  TREE_OPERAND (node, 2) = finally;\n   TREE_TYPE (node) = void_type_node;\n   return node;\n }"}, {"sha": "bcd6696bd93e462cc0eb9683e0f86076124a5053", "filename": "gcc/java/parse.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -666,7 +666,6 @@ void java_layout_classes PROTO ((void));\n tree java_method_add_stmt PROTO ((tree, tree));\n char *java_get_line_col PROTO ((char *, int, int));\n void java_expand_switch PROTO ((tree));\n-tree java_get_catch_block PROTO ((tree, int));\n int java_report_errors PROTO (());\n #endif\n "}, {"sha": "022579168c79079bdb9dfb6cad717311cc5e28bb", "filename": "gcc/java/parse.y", "status": "modified", "additions": 33, "deletions": 121, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8d81f7c5b1c49965af840bb95040ff0d04616/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=a7d8d81f7c5b1c49965af840bb95040ff0d04616", "patch": "@@ -201,7 +201,8 @@ static tree build_string_concatenation PROTO ((tree, tree));\n static tree patch_string_cst PROTO ((tree));\n static tree patch_string PROTO ((tree));\n static tree build_jump_to_finally PROTO ((tree, tree, tree, tree));\n-static tree build_try_statement PROTO ((int, tree, tree, tree));\n+static tree build_try_statement PROTO ((int, tree, tree));\n+static tree build_try_finally_statement PROTO ((int, tree, tree));\n static tree patch_try_statement PROTO ((tree));\n static tree patch_synchronized_statement PROTO ((tree, tree));\n static tree patch_throw_statement PROTO ((tree, tree));\n@@ -1616,11 +1617,14 @@ synchronized:\n \n try_statement:\n \tTRY_TK block catches\n-\t\t{ $$ = build_try_statement ($1.location, $2, $3, NULL_TREE); }\n+\t\t{ $$ = build_try_statement ($1.location, $2, $3); }\n |\tTRY_TK block finally\n-\t\t{ $$ = build_try_statement ($1.location, $2, NULL_TREE, $3); }\n+\t\t{ $$ = build_try_finally_statement ($1.location, $2, $3); }\n |\tTRY_TK block catches finally\n-\t\t{ $$ = build_try_statement ($1.location, $2, $3, $4); }\n+\t\t{ $$ = build_try_finally_statement ($1.location,\n+\t\t\t\t\t\t    build_try_statement ($1.location,\n+\t\t\t\t\t\t\t\t\t $2, $3),\n+\t\t\t\t\t\t    $4); }\n |\tTRY_TK error\n \t\t{yyerror (\"'{' expected\"); DRECOVER (try_statement);}\n ;\n@@ -1669,10 +1673,7 @@ catch_clause_parameter:\n \n finally:\n \tFINALLY_TK block\n-\t\t{ \n-\t\t  $$ = build (FINALLY_EXPR, NULL_TREE,\n-\t\t\t      create_label_decl (generate_name ()), $2);\n-\t\t}\n+\t\t{ $$ = $2; }\n |\tFINALLY_TK error\n \t\t{yyerror (\"'{' expected\"); RECOVER; }\n ;\n@@ -7584,6 +7585,15 @@ java_complete_lhs (node)\n     case TRY_EXPR:\n       return patch_try_statement (node);\n \n+    case TRY_FINALLY_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      COMPLETE_CHECK_OP_1 (node);\n+      CAN_COMPLETE_NORMALLY (node)\n+\t= (CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0))\n+\t   && CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1)));\n+      TREE_TYPE (node) = TREE_TYPE (TREE_OPERAND (node, 0));\n+      return node;\n+\n     case CLEANUP_POINT_EXPR:\n       COMPLETE_CHECK_OP_0 (node);\n       TREE_TYPE (node) = void_type_node;\n@@ -10671,92 +10681,23 @@ build_jump_to_finally (block, decl, finally_label, type)\n }\n \n static tree\n-build_try_statement (location, try_block, catches, finally)\n+build_try_statement (location, try_block, catches)\n      int location;\n-     tree try_block, catches, finally;\n-{\n-  tree node, rff;\n-\n-  if (finally && ! flag_emit_class_files)\n-    {\n-      /* This block defines a scope for the entire try[-catch]-finally\n-\t sequence. It hold a local variable used to return from the\n-\t finally using a computed goto. We call it\n-\t return_from_finally (RFF). */\n-      rff = build_decl (VAR_DECL, generate_name (), return_address_type_node);\n-\n-      /* Modification of the try block. */\n-      try_block = build_jump_to_finally (try_block, rff, \n-\t\t\t\t\t FINALLY_EXPR_LABEL (finally), \n-\t\t\t\t\t NULL_TREE);\n-\n-      /* To the finally block: add the computed goto */\n-      add_stmt_to_block (FINALLY_EXPR_BLOCK (finally), NULL_TREE,\n-\t\t\t build (GOTO_EXPR, void_type_node, rff));\n-\n-      /* Modification of each catch blocks, if any */\n-      if (catches)\n-\t{\n-\t  tree catch, catch_decl, catch_block, stmt;\n-\n-\t  for (catch = catches; catch; catch = TREE_CHAIN (catch))\n-\t    TREE_OPERAND (catch, 0) = \n-\t      build_jump_to_finally (TREE_OPERAND (catch, 0), rff,\n-\t\t\t\t     FINALLY_EXPR_LABEL (finally),\n-\t\t\t\t     NULL_TREE);\n-\n-\t  /* Plus, at the end of the list, we add the catch clause that\n-\t     will catch an uncaught exception, call finally and rethrow it:\n-\t       BLOCK\n-\t         void *exception_parameter; (catch_decl)\n-\t\t LABELED_BLOCK\n-\t\t   BLOCK\n-\t\t     exception_parameter = _Jv_exception_info ();\n-\t\t     RFF = &LABEL_DECL;\n-\t\t     goto finally;\n-\t\t LABEL_DECL;\n-\t\t CALL_EXPR\n-\t\t   Jv_ReThrow\n-\t\t   exception_parameter */\n-\t  catch_decl = build_decl (VAR_DECL, generate_name (), ptr_type_node);\n-\t  BUILD_ASSIGN_EXCEPTION_INFO (stmt, catch_decl);\n-\t  catch_block = build_expr_block (stmt, NULL_TREE);\n-\t  catch_block = build_jump_to_finally (catch_block, rff, \n-\t\t\t\t\t       FINALLY_EXPR_LABEL (finally), \n-\t\t\t\t\t       void_type_node);\n-\t  BUILD_THROW (stmt, catch_decl);\n-\t  catch_block = build_expr_block (catch_block, catch_decl);\n-\t  add_stmt_to_block (catch_block, void_type_node, stmt);\n-\n-\t  /* Link the new handler to the existing list as the first\n-\t     entry. It will be the last one to be generated. */\n-\t  catch = build1 (CATCH_EXPR, void_type_node, catch_block);\n-\t  TREE_CHAIN (catch) = catches;\n-\t  catches = catch;\n-\t}\n-    }\n-\n-  node = build (TRY_EXPR, NULL_TREE, try_block, catches, finally);\n+     tree try_block, catches;\n+{\n+  tree node = build (TRY_EXPR, NULL_TREE, try_block, catches);\n   EXPR_WFL_LINECOL (node) = location;\n-  \n-  /* If we have a finally, surround this whole thing by a block where\n-     the RFF local variable is defined. */\n-\n-  return (finally && ! flag_emit_class_files ? build_expr_block (node, rff)\n-\t  : node);\n+  return node;\n }\n \n-/* Get the catch clause block from an element of the catch clause\n-   list. If depends on whether a finally clause exists or node (in\n-   which case the original catch clause was surrounded by a\n-   LABELED_BLOCK_EXPR. */\n-\n-tree\n-java_get_catch_block (node, finally_present_p)\n-     tree node;\n-     int finally_present_p;\n+static tree\n+build_try_finally_statement (location, try_block, finally)\n+     int location;\n+     tree try_block, finally;\n {\n-  return (CATCH_EXPR_GET_EXPR (TREE_OPERAND (node, 0), finally_present_p));\n+  tree node = build (TRY_FINALLY_EXPR, NULL_TREE, try_block, finally);\n+  EXPR_WFL_LINECOL (node) = location;\n+  return node;\n }\n \n static tree\n@@ -10767,8 +10708,6 @@ patch_try_statement (node)\n   tree try = TREE_OPERAND (node, 0);\n   /* Exception handlers are considered in left to right order */\n   tree catch = nreverse (TREE_OPERAND (node, 1));\n-  tree finally = TREE_OPERAND (node, 2);\n-  int finally_p = (finally ? 1 : 0);\n   tree current, caught_type_list = NULL_TREE;\n \n   /* Check catch clauses, if any. Every time we find an error, we try\n@@ -10781,29 +10720,14 @@ patch_try_statement (node)\n       tree sub_current, catch_block, catch_clause;\n       int unreachable;\n \n-      /* Always detect the last catch clause if a finally is\n-         present. This is the catch-all handler and it just needs to\n-         be walked. */\n-      if (!TREE_CHAIN (current) && finally)\n-\t{\n-\t  TREE_OPERAND (current, 0) = \n-\t    java_complete_tree (TREE_OPERAND (current, 0));\n-\t  continue;\n-\t}\n-\n       /* At this point, the structure of the catch clause is\n-         LABELED_BLOCK_EXPR \t(if we have a finally)\n \t   CATCH_EXPR\t\t(catch node)\n \t     BLOCK\t        (with the decl of the parameter)\n                COMPOUND_EXPR\n                  MODIFY_EXPR   (assignment of the catch parameter)\n \t\t BLOCK\t        (catch clause block)\n-           LABEL_DECL\t\t(where to return after finally (if any))\n-\n-\t Since the structure of the catch clause depends on the\n-\t presence of a finally, we use a function call to get to the\n-\t cath clause */\n-      catch_clause = java_get_catch_block (current, finally_p);\n+       */\n+      catch_clause = TREE_OPERAND (current, 0);\n       carg_decl = BLOCK_EXPR_DECLS (catch_clause);\n       carg_type = TREE_TYPE (TREE_TYPE (carg_decl));\n \n@@ -10837,7 +10761,7 @@ patch_try_statement (node)\n \t   sub_current != current; sub_current = TREE_CHAIN (sub_current))\n \t{\n \t  tree sub_catch_clause, decl;\n-\t  sub_catch_clause = java_get_catch_block (sub_current, finally_p);\n+\t  sub_catch_clause = TREE_OPERAND (sub_current, 0);\n \t  decl = BLOCK_EXPR_DECLS (sub_catch_clause);\n \n \t  if (inherits_from_p (carg_type, TREE_TYPE (TREE_TYPE (decl))))\n@@ -10877,24 +10801,12 @@ patch_try_statement (node)\n     CAN_COMPLETE_NORMALLY (node) = 1;\n   POP_EXCEPTIONS ();\n \n-  /* Process finally */\n-  if (finally)\n-    {\n-      current = java_complete_tree (FINALLY_EXPR_BLOCK (finally));\n-      FINALLY_EXPR_BLOCK (finally) = current;\n-      if (current == error_mark_node)\n-\terror_found = 1;\n-      if (! CAN_COMPLETE_NORMALLY (current))\n-\tCAN_COMPLETE_NORMALLY (node) = 0;\n-    }\n-\n   /* Verification ends here */\n   if (error_found) \n     return error_mark_node;\n \n   TREE_OPERAND (node, 0) = try;\n   TREE_OPERAND (node, 1) = catch;\n-  TREE_OPERAND (node, 2) = finally;\n   TREE_TYPE (node) = void_type_node;\n   return node;\n }"}]}