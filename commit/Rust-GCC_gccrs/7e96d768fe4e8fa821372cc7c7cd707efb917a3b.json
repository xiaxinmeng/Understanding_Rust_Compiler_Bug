{"sha": "7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5NmQ3NjhmZTRlOGZhODIxMzcyY2M3YzdjZDcwN2VmYjkxN2EzYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-13T01:00:01Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-13T01:00:01Z"}, "message": "cppinit.c (cpp_handle_option): help_only is now part of the cpp_options structure.\n\n        * cppinit.c (cpp_handle_option): help_only is now part of the\n        cpp_options structure.\n        * cpplib.c (cpp_errors, cpp_get_options, cpp_get_callbacks,\n        cpp_set_callbacks): New functions.\n        * cpplib.h (cpp_callbacks): Break out as a named structure.\n        (cpp_options): Move help_only here from cpp_reader.\n        (CPP_FATAL_ERRORS): Update to use cpp_errors.\n        (cpp_errors, cpp_get_options, cpp_get_callbacks,\n        cpp_set_callbacks): New prototypes.\n        * cppmain.c (main): Update for help_only.\n\nFrom-SVN: r38971", "tree": {"sha": "954953c60f9ccf103dbd07196bae6f6aedd8d36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/954953c60f9ccf103dbd07196bae6f6aedd8d36c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/comments", "author": null, "committer": null, "parents": [{"sha": "23de1fbfd0e36837e18117cb79a5f336a375eb40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23de1fbfd0e36837e18117cb79a5f336a375eb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23de1fbfd0e36837e18117cb79a5f336a375eb40"}], "stats": {"total": 102, "additions": 83, "deletions": 19}, "files": [{"sha": "a5c8380a7672e8b343498d16cdac3b0934e786ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "patch": "@@ -1,3 +1,16 @@\n+2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppinit.c (cpp_handle_option): help_only is now part of the\n+        cpp_options structure.\n+        * cpplib.c (cpp_errors, cpp_get_options, cpp_get_callbacks,\n+        cpp_set_callbacks): New functions.\n+        * cpplib.h (cpp_callbacks): Break out as a named structure.\n+        (cpp_options): Move help_only here from cpp_reader.\n+        (CPP_FATAL_ERRORS): Update to use cpp_errors.\n+        (cpp_errors, cpp_get_options, cpp_get_callbacks,\n+        cpp_set_callbacks): New prototypes.\n+        * cppmain.c (main): Update for help_only.\n+\n 2001-01-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* Makefile.in (info, maintainer-clean, install-info, uninstall):"}, {"sha": "c3347c94d718cc37ab907c5ef7e1a3cf03039fb8", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "patch": "@@ -1290,18 +1290,18 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_h:\n \tcase OPT__help:\n \t  print_help ();\n-\t  pfile->help_only = 1;\n+\t  CPP_OPTION (pfile, help_only) = 1;\n \t  break;\n \tcase OPT_target__help:\n           /* Print if any target specific options. cpplib has none, but\n \t     make sure help_only gets set.  */\n-\t  pfile->help_only = 1;\n+\t  CPP_OPTION (pfile, help_only) = 1;\n           break;\n \n \t  /* --version inhibits compilation, -version doesn't. -v means\n \t     verbose and -version.  Historical reasons, don't ask.  */\n \tcase OPT__version:\n-\t  pfile->help_only = 1;\n+\t  CPP_OPTION (pfile, help_only) = 1;\n \t  goto version;\n \tcase OPT_v:\n \t  CPP_OPTION (pfile, verbose) = 1;"}, {"sha": "20641200ec9b8d38f92cb058048ef5d36f5c9fbb", "filename": "gcc/cpplib.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "patch": "@@ -1714,6 +1714,39 @@ handle_assertion (pfile, str, type)\n   run_directive (pfile, type, BUF_CL_OPTION, str, count);\n }\n \n+/* The number of errors for a given reader.  */\n+unsigned int\n+cpp_errors (pfile)\n+     cpp_reader *pfile;\n+{\n+  return pfile->errors;\n+}\n+\n+/* The options structure.  */\n+cpp_options *\n+cpp_get_options (pfile)\n+     cpp_reader *pfile;\n+{\n+  return &pfile->opts;\n+}\n+\n+/* The callbacks structure.  */\n+cpp_callbacks *\n+cpp_get_callbacks (pfile)\n+     cpp_reader *pfile;\n+{\n+  return &pfile->cb;\n+}\n+\n+/* Copy the given callbacks structure to our own.  */\n+void\n+cpp_set_callbacks (pfile, cb)\n+     cpp_reader *pfile;\n+     cpp_callbacks *cb;\n+{\n+  pfile->cb = *cb;\n+}\n+\n /* Push a new buffer on the buffer stack.  Returns the new buffer; it\n    doesn't fail.  It does not generate a file change call back; that\n    is the responsibility of the caller.  */"}, {"sha": "f5121da10b7ac6c4d1bbc07b23ca13c59a81bb7e", "filename": "gcc/cpplib.h", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "patch": "@@ -42,6 +42,7 @@ typedef struct cpp_pool cpp_pool;\n typedef struct cpp_macro cpp_macro;\n typedef struct cpp_lexer_pos cpp_lexer_pos;\n typedef struct cpp_lookahead cpp_lookahead;\n+typedef struct cpp_callbacks cpp_callbacks;\n \n struct directive;\t\t/* These are deliberately incomplete.  */\n struct answer;\n@@ -419,6 +420,11 @@ struct cpp_options\n \n   /* Treat C++ alternate operator names special.  */\n   unsigned char operator_names;\n+\n+  /* True if --help, --version or --target-help appeared in the\n+     options.  Stand-alone CPP should then bail out after option\n+     parsing; drivers might want to continue printing help.  */\n+  unsigned char help_only;\n };\n \n struct lexer_state\n@@ -485,6 +491,19 @@ struct cpp_file_change\n   unsigned char externc;\t/* Nonzero if wrapper needed.  */\n };\n \n+/* Call backs.  */\n+struct cpp_callbacks\n+{\n+    void (*file_change) PARAMS ((cpp_reader *, const cpp_file_change *));\n+    void (*include) PARAMS ((cpp_reader *, const unsigned char *,\n+\t\t\t     const cpp_token *));\n+    void (*define) PARAMS ((cpp_reader *, cpp_hashnode *));\n+    void (*undef) PARAMS ((cpp_reader *, cpp_hashnode *));\n+    void (*poison) PARAMS ((cpp_reader *));\n+    void (*ident) PARAMS ((cpp_reader *, const cpp_string *));\n+    void (*def_pragma) PARAMS ((cpp_reader *));\n+};\n+\n /* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n    Applying cpp_get_token repeatedly yields a stream of pre-processor\n    tokens.  Usually, there is only one cpp_reader object active.  */\n@@ -581,16 +600,7 @@ struct cpp_reader\n   struct pragma_entry *pragmas;\n \n   /* Call backs.  */\n-  struct {\n-    void (*file_change) PARAMS ((cpp_reader *, const cpp_file_change *));\n-    void (*include) PARAMS ((cpp_reader *, const unsigned char *,\n-\t\t\t     const cpp_token *));\n-    void (*define) PARAMS ((cpp_reader *, cpp_hashnode *));\n-    void (*undef) PARAMS ((cpp_reader *, cpp_hashnode *));\n-    void (*poison) PARAMS ((cpp_reader *));\n-    void (*ident) PARAMS ((cpp_reader *, const cpp_string *));\n-    void (*def_pragma) PARAMS ((cpp_reader *));\n-  } cb;\n+  struct cpp_callbacks cb;\n \n   /* User visible options.  */\n   struct cpp_options opts;\n@@ -608,15 +618,11 @@ struct cpp_reader\n \n   /* True if we are skipping a failed conditional group.  */\n   unsigned char skipping;\n-\n-  /* True if --help appeared in the options.  Caller should then bail\n-     out after option parsing and printing its own help.  See cppmain.c.  */\n-  unsigned char help_only;\n };\n \n #define CPP_FATAL_LIMIT 1000\n /* True if we have seen a \"fatal\" error. */\n-#define CPP_FATAL_ERRORS(READER) ((READER)->errors >= CPP_FATAL_LIMIT)\n+#define CPP_FATAL_ERRORS(PFILE) (cpp_errors (PFILE) >= CPP_FATAL_LIMIT)\n \n #define CPP_OPTION(PFILE, OPTION) ((PFILE)->opts.OPTION)\n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n@@ -699,6 +705,15 @@ struct cpp_hashnode\n /* Call this first to get a handle to pass to other functions.  */\n extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n \n+/* Call these to get pointers to the options and callback structures\n+   for a given reader.  These pointers are good until you call\n+   cpp_finish on that reader.  You can either edit the callbacks\n+   through the pointer returned from cpp_get_callbacks, or set them\n+   with cpp_set_callbacks.  */\n+extern cpp_options *cpp_get_options PARAMS ((cpp_reader *));\n+extern cpp_callbacks *cpp_get_callbacks PARAMS ((cpp_reader *));\n+extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n+\n /* Now call cpp_handle_option[s] to handle 1[or more] switches.  The\n    return value is the number of arguments used.  If\n    cpp_handle_options returns without using all arguments, it couldn't\n@@ -710,6 +725,9 @@ extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern void cpp_post_options PARAMS ((cpp_reader *));\n \n+/* Error count.  */\n+extern unsigned int cpp_errors PARAMS ((cpp_reader *));\n+\n extern unsigned int cpp_token_len PARAMS ((const cpp_token *));\n extern unsigned char *cpp_token_as_text PARAMS ((cpp_reader *,\n \t\t\t\t\t\t const cpp_token *));"}, {"sha": "9ef01f5ef835b64980bd7a6b923b7f1786c5169f", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e96d768fe4e8fa821372cc7c7cd707efb917a3b/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=7e96d768fe4e8fa821372cc7c7cd707efb917a3b", "patch": "@@ -87,7 +87,7 @@ main (argc, argv)\n      line, it will have set pfile->help_only to indicate this.  Exit\n      successfully.  [The library does not exit itself, because\n      e.g. cc1 needs to print its own --help message at this point.]  */\n-  if (pfile->help_only)\n+  if (CPP_OPTION (pfile, help_only))\n     return (SUCCESS_EXIT_CODE);\n \n   /* Open the output now.  We must do so even if no_output is on,"}]}