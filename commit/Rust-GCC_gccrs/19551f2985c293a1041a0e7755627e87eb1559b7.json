{"sha": "19551f2985c293a1041a0e7755627e87eb1559b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1NTFmMjk4NWMyOTNhMTA0MWEwZTc3NTU2MjdlODdlYjE1NTliNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-08T20:53:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-08T20:53:41Z"}, "message": "Make-lang.in (CXX_OBJS): Added cp-lang.o.\n\n* Make-lang.in (CXX_OBJS): Added cp-lang.o.\n(cp/cp-lang.o): New rule.\n* cp-tree.h: Declare hooks.\n* tree.c: Make hooks non-static.\n(init_tree): Don't initialize hooks here.\n* lex.c: Likewise.  Move definition of lang_hooks to...\n* cp-lang.c: ... new file.\n\nFrom-SVN: r46095", "tree": {"sha": "bb7a11127c2c3516762b371c4ac8423fd733369d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb7a11127c2c3516762b371c4ac8423fd733369d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19551f2985c293a1041a0e7755627e87eb1559b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19551f2985c293a1041a0e7755627e87eb1559b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19551f2985c293a1041a0e7755627e87eb1559b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19551f2985c293a1041a0e7755627e87eb1559b7/comments", "author": null, "committer": null, "parents": [{"sha": "4a1186c3c1d25fa1ffc40f0cdfe2bb940ee31426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1186c3c1d25fa1ffc40f0cdfe2bb940ee31426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1186c3c1d25fa1ffc40f0cdfe2bb940ee31426"}], "stats": {"total": 133, "additions": 98, "deletions": 35}, "files": [{"sha": "5b934e3f18bff818c9421671254d2bbef5e3ee6c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -1,3 +1,13 @@\n+2001-10-08  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Make-lang.in (CXX_OBJS): Added cp-lang.o.\n+\t(cp/cp-lang.o): New rule.\n+\t* cp-tree.h: Declare hooks.\n+\t* tree.c: Make hooks non-static.\n+\t(init_tree): Don't initialize hooks here.\n+\t* lex.c: Likewise.  Move definition of lang_hooks to...\n+\t* cp-lang.c: ... new file.\n+\n 2001-10-08  Richard Henderson  <rth@redhat.com>\n \n \t* cp-tree.h (struct lang_decl_flags): Remove declared_inline."}, {"sha": "dcd7d7d893d182332970e254eade75314bbccd67", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -101,7 +101,7 @@ CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/class.o cp/decl2.o cp/error.o cp/lex.o cp/parse.o cp/ptree.o cp/rtti.o \\\n  cp/spew.o cp/typeck.o cp/cvt.o cp/except.o cp/friend.o cp/init.o cp/method.o \\\n  cp/search.o cp/semantics.o cp/tree.o cp/xref.o cp/repo.o cp/dump.o \\\n- cp/optimize.o cp/mangle.o\n+ cp/optimize.o cp/mangle.o cp/cp-lang.o\n \n # Use loose warnings for this front end.\n cp-warn =\n@@ -241,6 +241,7 @@ cp/spew.o: cp/spew.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h toplev.h\n cp/lex.o: cp/lex.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h c-pragma.h \\\n   toplev.h output.h mbchar.h $(GGC_H) input.h diagnostic.h cp/operators.def \\\n   $(TM_P_H)\n+cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h"}, {"sha": "719f55840c06ccda48f5d4b053b47d44217e06e8", "filename": "gcc/cp/cp-lang.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -0,0 +1,62 @@\n+/* Language-dependent hooks for C++.\n+   Copyright 2001 Free Software Foundation, Inc.\n+   Contributed by Alexandre Oliva  <aoliva@redhat.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"cp-tree.h\"\n+#include \"toplev.h\"\n+#include \"langhooks.h\"\n+\n+#undef LANG_HOOKS_INIT\n+#define LANG_HOOKS_INIT cxx_init\n+#undef LANG_HOOKS_FINISH\n+#define LANG_HOOKS_FINISH cxx_finish\n+#undef LANG_HOOKS_INIT_OPTIONS\n+#define LANG_HOOKS_INIT_OPTIONS cxx_init_options\n+#undef LANG_HOOKS_DECODE_OPTION\n+#define LANG_HOOKS_DECODE_OPTION cxx_decode_option\n+#undef LANG_HOOKS_POST_OPTIONS\n+#define LANG_HOOKS_POST_OPTIONS cxx_post_options\n+\n+#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n+#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n+  cp_walk_subtrees\n+#undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n+#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n+  cp_cannot_inline_tree_fn\n+#undef LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS\n+#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n+  cp_add_pending_fn_decls\n+#undef LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P\n+#define LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P \\\n+  cp_is_overload_p\n+#undef LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P\n+#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n+  cp_auto_var_in_fn_p\n+#undef LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING\n+#define LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING \\\n+  cp_copy_res_decl_for_inlining\n+#undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n+#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n+\n+/* Each front end provides its own hooks, for toplev.c.  */\n+struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "116a2cd4a64e87885098b065a2bd7d0000cad35c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -3866,6 +3866,10 @@ extern void yyerror\t\t\t\tPARAMS ((const char *));\n extern void clear_inline_text_obstack\t\tPARAMS ((void));\n extern void yyhook\t\t\t\tPARAMS ((int));\n extern int cp_type_qual_from_rid                PARAMS ((tree));\n+extern void cxx_init PARAMS ((void));\n+extern void cxx_finish PARAMS ((void));\n+extern void cxx_init_options PARAMS ((void));\n+extern void cxx_post_options PARAMS ((void));\n \n /* in method.c */\n extern void init_method\t\t\t\tPARAMS ((void));\n@@ -4189,6 +4193,14 @@ extern int char_type_p                          PARAMS ((tree));\n extern void verify_stmt_tree                    PARAMS ((tree));\n extern tree find_tree                           PARAMS ((tree, tree));\n extern linkage_kind decl_linkage                PARAMS ((tree));\n+extern tree cp_walk_subtrees PARAMS ((tree*, int*, walk_tree_fn,\n+\t\t\t\t      void*, void*));\n+extern int cp_cannot_inline_tree_fn PARAMS ((tree*));\n+extern tree cp_add_pending_fn_decls PARAMS ((void*,tree));\n+extern int cp_is_overload_p PARAMS ((tree));\n+extern int cp_auto_var_in_fn_p PARAMS ((tree,tree));\n+extern tree cp_copy_res_decl_for_inlining PARAMS ((tree, tree, tree, void*,\n+\t\t\t\t\t\t   int*, void*));\n \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));"}, {"sha": "57daab4e33899e4d6ae4f47f8627558ec832271f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -62,10 +62,6 @@ static void handle_pragma_unit PARAMS ((cpp_reader *));\n static void handle_pragma_interface PARAMS ((cpp_reader *));\n static void handle_pragma_implementation PARAMS ((cpp_reader *));\n static void handle_pragma_java_exceptions PARAMS ((cpp_reader *));\n-static void cxx_init PARAMS ((void));\n-static void cxx_finish PARAMS ((void));\n-static void cxx_init_options PARAMS ((void));\n-static void cxx_post_options PARAMS ((void));\n \n #ifdef GATHER_STATISTICS\n #ifdef REDUCE_LENGTH\n@@ -241,21 +237,14 @@ static const char *const cplus_tree_code_name[] = {\n };\n #undef DEFTREECODE\n \f\n-/* Each front end provides its own hooks, for toplev.c.  */\n-struct lang_hooks lang_hooks = {cxx_init,\n-\t\t\t\tcxx_finish,\n-\t\t\t\tcxx_init_options,\n-\t\t\t\tcxx_decode_option,\n-\t\t\t\tcxx_post_options};\n-\n /* Post-switch processing.  */\n-static void\n+void\n cxx_post_options ()\n {\n   cpp_post_options (parse_in);\n }\n \n-static void\n+void\n cxx_init_options ()\n {\n   /* Make identifier nodes long enough for the language-specific slots.  */\n@@ -275,7 +264,7 @@ cxx_init_options ()\n   diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n }\n \n-static void\n+void\n cxx_init ()\n {\n   c_common_lang_init ();\n@@ -284,10 +273,11 @@ cxx_init ()\n   init_repo (input_filename);\n }\n \n-static void\n+void\n cxx_finish ()\n {\n-  if (flag_gnu_xref) GNU_xref_end (errorcount+sorrycount);\n+  if (flag_gnu_xref)\n+    GNU_xref_end (errorcount+sorrycount);\n }\n \n const char *"}, {"sha": "2c4c7446424abde95f71d0a7898afcabeba7185a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19551f2985c293a1041a0e7755627e87eb1559b7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=19551f2985c293a1041a0e7755627e87eb1559b7", "patch": "@@ -50,12 +50,6 @@ static tree count_trees_r PARAMS ((tree *, int *, void *));\n static tree verify_stmt_tree_r PARAMS ((tree *, int *, void *));\n static tree find_tree_r PARAMS ((tree *, int *, void *));\n extern int cp_statement_code_p PARAMS ((enum tree_code));\n-static treeopt_walk_subtrees_type cp_walk_subtrees;\n-static treeopt_cannot_inline_tree_fn_type cp_cannot_inline_tree_fn;\n-static treeopt_add_pending_fn_decls_type cp_add_pending_fn_decls;\n-static treeopt_tree_chain_matters_p_type cp_is_overload_p;\n-static treeopt_auto_var_in_fn_p_type cp_auto_var_in_fn_p;\n-static treeopt_copy_res_decl_for_inlining_type cp_copy_res_decl_for_inlining;\n \n static tree handle_java_interface_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree handle_com_interface_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -2058,7 +2052,7 @@ make_ptrmem_cst (type, member)\n /* Apply FUNC to all language-specific sub-trees of TP in a pre-order\n    traversal.  Called from walk_tree().  */\n \n-static tree \n+tree \n cp_walk_subtrees (tp, walk_subtrees_p, func, data, htab)\n      tree *tp;\n      int *walk_subtrees_p;\n@@ -2129,7 +2123,7 @@ cp_walk_subtrees (tp, walk_subtrees_p, func, data, htab)\n /* Decide whether there are language-specific reasons to not inline a\n    function as a tree.  */\n \n-static int\n+int\n cp_cannot_inline_tree_fn (fnp)\n      tree *fnp;\n {\n@@ -2163,7 +2157,7 @@ cp_cannot_inline_tree_fn (fnp)\n    handled by the caller), that thus cannot be inlined, to FNS_P, then\n    return the latest function added to the array, PREV_FN.  */\n \n-static tree\n+tree\n cp_add_pending_fn_decls (fns_p, prev_fn)\n      void *fns_p;\n      tree prev_fn;\n@@ -2185,7 +2179,7 @@ cp_add_pending_fn_decls (fns_p, prev_fn)\n    whether to copy a node or to preserve its chain when inlining a\n    function.  */\n \n-static int\n+int\n cp_is_overload_p (t)\n      tree t;\n {\n@@ -2195,7 +2189,7 @@ cp_is_overload_p (t)\n /* Determine whether VAR is a declaration of an automatic variable in\n    function FN.  */\n \n-static int\n+int\n cp_auto_var_in_fn_p (var, fn)\n      tree var, fn;\n {\n@@ -2207,7 +2201,7 @@ cp_auto_var_in_fn_p (var, fn)\n    FN being inlined into CALLER or if the top node of target_exprs is\n    to be used.  */\n \n-static tree\n+tree\n cp_copy_res_decl_for_inlining (result, fn, caller, decl_map_,\n \t\t\t       need_decl, target_exprs)\n      tree result, fn, caller;\n@@ -2270,12 +2264,6 @@ void\n init_tree ()\n {\n   make_lang_type_fn = cp_make_lang_type;\n-  lang_walk_subtrees = cp_walk_subtrees;\n-  lang_cannot_inline_tree_fn = cp_cannot_inline_tree_fn;\n-  lang_add_pending_fn_decls = cp_add_pending_fn_decls;\n-  lang_tree_chain_matters_p = cp_is_overload_p;\n-  lang_auto_var_in_fn_p = cp_auto_var_in_fn_p;\n-  lang_copy_res_decl_for_inlining = cp_copy_res_decl_for_inlining;\n   lang_unsave = cp_unsave;\n   lang_statement_code_p = cp_statement_code_p;\n   lang_set_decl_assembler_name = mangle_decl;"}]}