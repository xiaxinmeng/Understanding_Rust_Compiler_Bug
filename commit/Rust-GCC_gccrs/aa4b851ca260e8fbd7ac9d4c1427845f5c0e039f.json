{"sha": "aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0Yjg1MWNhMjYwZThmYmQ3YWM5ZDRjMTQyNzg0NWY1YzBlMDM5Zg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2017-11-16T09:15:21Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2017-11-16T09:15:21Z"}, "message": "Add new options: -mext-perf, -mext-perf2, -mext-string.\n\ngcc/\n\t* config/nds32/nds32.opt: Add mext-perf, mext-perf2, mext-string.\n\t* config/nds32/nds32.opt: Refine the layout.\n\t* config/nds32/nds32.c (TARGET_EXT_PERF, TARGET_EXT_PERF2,\n\tTARGET_EXT_STRING): Support new options.\n\t* config/nds32/nds32.h: Likewise.\n\t* config/nds32/nds32.md: Likewise.\n\t* config/nds32/nds32-predicates.c: Likewise.\n\t* config/nds32/constraints.md: Likewise.\n\t* common/config/nds32/nds32-common.c: Likewise.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\n\nFrom-SVN: r254798", "tree": {"sha": "2f5b90a21a865e13608bcbd96733e778f6c61d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f5b90a21a865e13608bcbd96733e778f6c61d7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bde4b3ddd631c24de2c24785ee0e62404eed58a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde4b3ddd631c24de2c24785ee0e62404eed58a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde4b3ddd631c24de2c24785ee0e62404eed58a4"}], "stats": {"total": 103, "additions": 79, "deletions": 24}, "files": [{"sha": "0e9a084a6b47c0831f0541aa17b7197b3713699d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -1,3 +1,16 @@\n+2017-11-16  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* config/nds32/nds32.opt: Add mext-perf, mext-perf2, mext-string.\n+\t* config/nds32/nds32.opt: Refine the layout.\n+\t* config/nds32/nds32.c (TARGET_EXT_PERF, TARGET_EXT_PERF2,\n+\tTARGET_EXT_STRING): Support new options.\n+\t* config/nds32/nds32.h: Likewise.\n+\t* config/nds32/nds32.md: Likewise.\n+\t* config/nds32/nds32-predicates.c: Likewise.\n+\t* config/nds32/constraints.md: Likewise.\n+\t* common/config/nds32/nds32-common.c: Likewise.\n+\n 2017-11-16  Julia Koval  <julia.koval@intel.com>\n \n \tPR target/82983"}, {"sha": "65268dfe5f3d7107abb1ea2d3516e01e521ebb53", "filename": "gcc/common/config/nds32/nds32-common.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -97,14 +97,18 @@ static const struct default_options nds32_option_optimization_table[] =\n \n    Other MASK_XXX flags are set individually.\n    By default we enable\n-     TARGET_16_BIT   : Generate 16/32 bit mixed length instruction.\n-     TARGET_PERF_EXT : Generate performance extention instrcution.\n-     TARGET_CMOV     : Generate conditional move instruction.  */\n+     TARGET_16_BIT     : Generate 16/32 bit mixed length instruction.\n+     TARGET_EXT_PERF   : Generate performance extention instrcution.\n+     TARGET_EXT_PERF2  : Generate performance extention version 2 instrcution.\n+     TARGET_EXT_STRING : Generate string extention instrcution.\n+     TARGET_CMOV       : Generate conditional move instruction.  */\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n   (TARGET_CPU_DEFAULT\t\t\t\t\\\n    | MASK_16_BIT\t\t\t\t\\\n-   | MASK_PERF_EXT\t\t\t\t\\\n+   | MASK_EXT_PERF\t\t\t\t\\\n+   | MASK_EXT_PERF2\t\t\t\t\\\n+   | MASK_EXT_STRING\t\t\t\t\\\n    | MASK_CMOV)\n \n #undef TARGET_HANDLE_OPTION"}, {"sha": "891063fcab0ea6c5e6cbe6a53442417ab65a2027", "filename": "gcc/config/nds32/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstraints.md?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -213,12 +213,12 @@\n (define_constraint \"Ixls\"\n   \"The immediate value 0x01\"\n   (and (match_code \"const_int\")\n-       (match_test \"TARGET_PERF_EXT && (ival == 0x1)\")))\n+       (match_test \"TARGET_EXT_PERF && (ival == 0x1)\")))\n \n (define_constraint \"Ix11\"\n   \"The immediate value 0x7ff\"\n   (and (match_code \"const_int\")\n-       (match_test \"TARGET_PERF_EXT && (ival == 0x7ff)\")))\n+       (match_test \"TARGET_EXT_PERF && (ival == 0x7ff)\")))\n \n (define_constraint \"Ibms\"\n   \"The immediate value with power of 2\""}, {"sha": "b6cff20b0cbebd3e5fe7060874e4e5146f8664a2", "filename": "gcc/config/nds32/nds32-predicates.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -335,7 +335,7 @@ nds32_can_use_bclr_p (int ival)\n   one_bit_count = popcount_hwi ((unsigned HOST_WIDE_INT) (~ival));\n \n   /* 'bclr' is a performance extension instruction.  */\n-  return (TARGET_PERF_EXT && (one_bit_count == 1));\n+  return (TARGET_EXT_PERF && (one_bit_count == 1));\n }\n \n /* Function to check if 'bset' instruction can be used with IVAL.  */\n@@ -350,7 +350,7 @@ nds32_can_use_bset_p (int ival)\n   one_bit_count = popcount_hwi ((unsigned HOST_WIDE_INT) (ival));\n \n   /* 'bset' is a performance extension instruction.  */\n-  return (TARGET_PERF_EXT && (one_bit_count == 1));\n+  return (TARGET_EXT_PERF && (one_bit_count == 1));\n }\n \n /* Function to check if 'btgl' instruction can be used with IVAL.  */\n@@ -365,7 +365,7 @@ nds32_can_use_btgl_p (int ival)\n   one_bit_count = popcount_hwi ((unsigned HOST_WIDE_INT) (ival));\n \n   /* 'btgl' is a performance extension instruction.  */\n-  return (TARGET_PERF_EXT && (one_bit_count == 1));\n+  return (TARGET_EXT_PERF && (one_bit_count == 1));\n }\n \n /* Function to check if 'bitci' instruction can be used with IVAL.  */"}, {"sha": "5f2e66730002f4b9b4a3200f3dea675a9ae18373", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -2188,8 +2188,14 @@ nds32_asm_file_start (void)\n \t\t\t ((TARGET_CMOV) ? \"Yes\"\n \t\t\t\t\t: \"No\"));\n   fprintf (asm_out_file, \"\\t! Use performance extension\\t: %s\\n\",\n-\t\t\t ((TARGET_PERF_EXT) ? \"Yes\"\n+\t\t\t ((TARGET_EXT_PERF) ? \"Yes\"\n \t\t\t\t\t    : \"No\"));\n+  fprintf (asm_out_file, \"\\t! Use performance extension 2\\t: %s\\n\",\n+\t\t\t ((TARGET_EXT_PERF2) ? \"Yes\"\n+\t\t\t\t\t     : \"No\"));\n+  fprintf (asm_out_file, \"\\t! Use string extension\\t\\t: %s\\n\",\n+\t\t\t ((TARGET_EXT_STRING) ? \"Yes\"\n+\t\t\t\t\t      : \"No\"));\n \n   fprintf (asm_out_file, \"\\t! ------------------------------------\\n\");\n \n@@ -2676,8 +2682,12 @@ nds32_option_override (void)\n     {\n       /* Under V3M ISA, we need to strictly enable TARGET_REDUCED_REGS.  */\n       target_flags |= MASK_REDUCED_REGS;\n-      /* Under V3M ISA, we need to strictly disable TARGET_PERF_EXT.  */\n-      target_flags &= ~MASK_PERF_EXT;\n+      /* Under V3M ISA, we need to strictly disable TARGET_EXT_PERF.  */\n+      target_flags &= ~MASK_EXT_PERF;\n+      /* Under V3M ISA, we need to strictly disable TARGET_EXT_PERF2.  */\n+      target_flags &= ~MASK_EXT_PERF2;\n+      /* Under V3M ISA, we need to strictly disable TARGET_EXT_STRING.  */\n+      target_flags &= ~MASK_EXT_STRING;\n     }\n \n   /* See if we are using reduced-set registers:"}, {"sha": "fb37c41e8753af020cb44727e38d6dd640dfb362", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -448,8 +448,12 @@ enum nds32_builtins\n         builtin_define (\"__NDS32_REDUCED_REGS__\");    \\\n       if (TARGET_CMOV)                                \\\n         builtin_define (\"__NDS32_CMOV__\");            \\\n-      if (TARGET_PERF_EXT)                            \\\n-        builtin_define (\"__NDS32_PERF_EXT__\");        \\\n+      if (TARGET_EXT_PERF)                            \\\n+        builtin_define (\"__NDS32_EXT_PERF__\");        \\\n+      if (TARGET_EXT_PERF2)                           \\\n+        builtin_define (\"__NDS32_EXT_PERF2__\");       \\\n+      if (TARGET_EXT_STRING)                          \\\n+        builtin_define (\"__NDS32_EXT_STRING__\");      \\\n       if (TARGET_16_BIT)                              \\\n         builtin_define (\"__NDS32_16_BIT__\");          \\\n       if (TARGET_GP_DIRECT)                           \\"}, {"sha": "3c5ad5120320d55310b2e8aaf0fc0eb12d752002", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -2336,7 +2336,7 @@ create_template:\n (define_insn \"clzsi2\"\n   [(set (match_operand:SI 0 \"register_operand\"         \"=r\")\n \t(clz:SI (match_operand:SI 1 \"register_operand\" \" r\")))]\n-  \"TARGET_PERF_EXT\"\n+  \"TARGET_EXT_PERF\"\n   \"clz\\t%0, %1\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])\n@@ -2345,7 +2345,7 @@ create_template:\n   [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n \t(smax:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t (match_operand:SI 2 \"register_operand\" \" r\")))]\n-  \"TARGET_PERF_EXT\"\n+  \"TARGET_EXT_PERF\"\n   \"max\\t%0, %1, %2\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])\n@@ -2354,7 +2354,7 @@ create_template:\n   [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n \t(smin:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t (match_operand:SI 2 \"register_operand\" \" r\")))]\n-  \"TARGET_PERF_EXT\"\n+  \"TARGET_EXT_PERF\"\n   \"min\\t%0, %1, %2\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])\n@@ -2364,7 +2364,7 @@ create_template:\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\"  \"    r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \" Iu05\")))]\n-  \"TARGET_PERF_EXT\"\n+  \"TARGET_EXT_PERF\"\n   \"btst\\t%0, %1, %2\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])"}, {"sha": "7c61b8ad8586e2b41c2eb096974b2bca9ac67a6b", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=aa4b851ca260e8fbd7ac9d4c1427845f5c0e039f", "patch": "@@ -21,14 +21,19 @@\n HeaderInclude\n config/nds32/nds32-opts.h\n \n-mbig-endian\n-Target Report RejectNegative Negative(mlittle-endian) Mask(BIG_ENDIAN)\n+; ---------------------------------------------------------------\n+; The following options are designed for aliasing and compatibility options.\n+\n+EB\n+Target RejectNegative Alias(mbig-endian)\n Generate code in big-endian mode.\n \n-mlittle-endian\n-Target Report RejectNegative Negative(mbig-endian) InverseMask(BIG_ENDIAN)\n+EL\n+Target RejectNegative Alias(mlittle-endian)\n Generate code in little-endian mode.\n \n+; ---------------------------------------------------------------\n+\n mreduced-regs\n Target Report RejectNegative Negative(mfull-regs) Mask(REDUCED_REGS)\n Use reduced-set registers for register allocation.\n@@ -37,14 +42,33 @@ mfull-regs\n Target Report RejectNegative Negative(mreduced-regs) InverseMask(REDUCED_REGS)\n Use full-set registers for register allocation.\n \n+; ---------------------------------------------------------------\n+\n+mbig-endian\n+Target Undocumented RejectNegative Negative(mlittle-endian) Mask(BIG_ENDIAN)\n+Generate code in big-endian mode.\n+\n+mlittle-endian\n+Target Undocumented RejectNegative Negative(mbig-endian) InverseMask(BIG_ENDIAN)\n+Generate code in little-endian mode.\n+\n+\n mcmov\n Target Report Mask(CMOV)\n Generate conditional move instructions.\n \n-mperf-ext\n-Target Report Mask(PERF_EXT)\n+mext-perf\n+Target Report Mask(EXT_PERF)\n Generate performance extension instructions.\n \n+mext-perf2\n+Target Report Mask(EXT_PERF2)\n+Generate performance extension version 2 instructions.\n+\n+mext-string\n+Target Report Mask(EXT_STRING)\n+Generate string extension instructions.\n+\n mv3push\n Target Report Mask(V3PUSH)\n Generate v3 push25/pop25 instructions."}]}