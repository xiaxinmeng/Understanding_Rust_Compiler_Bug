{"sha": "8437e063bcb75a691128a40a9d777995d7c32d96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzN2UwNjNiY2I3NWE2OTExMjhhNDBhOWQ3Nzc5OTVkN2MzMmQ5Ng==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-15T23:42:02Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-15T23:42:02Z"}, "message": "In libobjc/: 2010-10-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n        \n        * objc/runtime.h (class_copyPropertyList): New.\n        (class_getProperty): New.\n        (property_getAttributes): New.\n        (property_getName): New.\n        * ivars.c (class_copyPropertyList): New.\n        (class_getProperty): New.\n        (property_getAttributes): New.\n        (property_getName): New.\n\nFrom-SVN: r165531", "tree": {"sha": "1748b6dad2e0a551aadb4ac306897ff4d594c4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1748b6dad2e0a551aadb4ac306897ff4d594c4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8437e063bcb75a691128a40a9d777995d7c32d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8437e063bcb75a691128a40a9d777995d7c32d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8437e063bcb75a691128a40a9d777995d7c32d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8437e063bcb75a691128a40a9d777995d7c32d96/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2edb37a65e4b043f00de9c28d6076058b236cbaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2edb37a65e4b043f00de9c28d6076058b236cbaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2edb37a65e4b043f00de9c28d6076058b236cbaa"}], "stats": {"total": 136, "additions": 116, "deletions": 20}, "files": [{"sha": "383d02f621c78fe0dc4e3d5de1b2e1ff13791158", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8437e063bcb75a691128a40a9d777995d7c32d96", "patch": "@@ -1,3 +1,14 @@\n+2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* objc/runtime.h (class_copyPropertyList): New.\n+\t(class_getProperty): New.\n+\t(property_getAttributes): New.\n+\t(property_getName): New.\n+\t* ivars.c (class_copyPropertyList): New.\n+\t(class_getProperty): New.\n+\t(property_getAttributes): New.\n+\t(property_getName): New.\n+\t\n 2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-private/runtime.h (__objc_update_classes_with_methods): New."}, {"sha": "b1e261bb8cc6f20c0aa9c00db616ca9b1c2447c5", "filename": "libobjc/ivars.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2Fivars.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2Fivars.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fivars.c?ref=8437e063bcb75a691128a40a9d777995d7c32d96", "patch": "@@ -228,3 +228,56 @@ struct objc_ivar ** class_copyIvarList (Class class_, unsigned int *numberOfRetu\n \n   return returnValue;\n }\n+\n+const char *\n+property_getName (struct objc_property * property __attribute__ ((__unused__)))\n+{\n+  if (property == NULL)\n+    return NULL;\n+\n+  /* TODO: New ABI.  */\n+  /* The current ABI does not have any information on properties.  */\n+  return NULL;\n+}\n+\n+const char *\n+property_getAttributes (struct objc_property * property __attribute__ ((__unused__)))\n+{\n+  if (property == NULL)\n+    return NULL;\n+\n+  /* TODO: New ABI.  */\n+  /* The current ABI does not have any information on properties.  */\n+  return NULL;\n+}\n+\n+struct objc_property *\n+class_getProperty (Class class_ __attribute__ ((__unused__)),\n+\t\t   const char *propertyName __attribute__ ((__unused__)))\n+{\n+  if (class_ == NULL  ||  propertyName == NULL)\n+    return NULL;\n+\n+  /* TODO: New ABI.  */\n+  /* The current ABI does not have any information on class properties.  */\n+  return NULL;\n+}\n+\n+struct objc_property ** \n+class_copyPropertyList (Class class_ __attribute__ ((__unused__)), \n+\t\t\tunsigned int *numberOfReturnedProperties __attribute__ ((__unused__)))\n+{\n+  if (class_ == Nil)\n+    {\n+      if (numberOfReturnedProperties)\n+\t*numberOfReturnedProperties = 0;\n+      return NULL;\n+    }\n+\n+  /* TODO: New ABI.  */\n+  /* The current ABI does not have any information on class properties.  */\n+  if (numberOfReturnedProperties)\n+    *numberOfReturnedProperties = 0;\n+\n+  return NULL;\n+}"}, {"sha": "27ecabf8850acd961db2821fedaef47ea72f06c3", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8437e063bcb75a691128a40a9d777995d7c32d96/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=8437e063bcb75a691128a40a9d777995d7c32d96", "patch": "@@ -305,6 +305,37 @@ objc_EXPORT const char * ivar_getTypeEncoding (Ivar variable);\n    will be filled with the number of instance variables returned.  */\n objc_EXPORT Ivar * class_copyIvarList (Class class_, unsigned int *numberOfReturnedIvars);\n \n+/* Return the name of the property.  Return NULL if 'property' is\n+   NULL.  */\n+objc_EXPORT const char * property_getName (Property property);\n+\n+/* Return the attributes of the property as a string.  Return NULL if\n+   'property' is NULL.  */\n+objc_EXPORT const char * property_getAttributes (Property property);\n+\n+/* Return the property with name 'propertyName' of the class 'class_'.\n+   This function returns NULL if the required property can not be\n+   found.  Return NULL if 'class_' or 'propertyName' is NULL.\n+\n+   Note that the traditional ABI does not store the list of properties\n+   of a class in a compiled module, so the traditional ABI will always\n+   return NULL.  */\n+objc_EXPORT Property class_getProperty (Class class_, const char *propertyName);\n+\n+/* Return all the properties of the class.  The return value\n+   of the function is a pointer to an area, allocated with malloc(),\n+   that contains all the properties of the class.  It does not\n+   include properties of superclasses.  The list is terminated\n+   by NULL.  Optionally, if you pass a non-NULL\n+   'numberOfReturnedIvars' pointer, the unsigned int that it points to\n+   will be filled with the number of properties returned.\n+\n+   Note that the traditional ABI does not store the list of properties\n+   of a class in a compiled module, so the traditional ABI will always\n+   return an empty list.  */\n+objc_EXPORT Property * class_copyPropertyList \n+(Class class_, unsigned int *numberOfReturnedProperties);\n+\n \n /** Implementation: the following functions are in class.c.  */\n \n@@ -422,6 +453,27 @@ objc_EXPORT void class_setVersion (Class class_, int version);\n    for all classes).  */\n objc_EXPORT size_t class_getInstanceSize (Class class_);\n \n+/* Change the implementation of the method.  It also searches all\n+   classes for any class implementing the method, and replaces the\n+   existing implementation with the new one.  For that to work,\n+   'method' must be a method returned by class_getInstanceMethod() or\n+   class_getClassMethod() as the matching is done by comparing the\n+   pointers; in that case, only the implementation in the class is\n+   modified.  Return the previous implementation that has been\n+   replaced.  If method or implementation is NULL, do nothing and\n+   return NULL.  */\n+objc_EXPORT IMP\n+method_setImplementation (Method method, IMP implementation);\n+\n+/* Swap the implementation of two methods in a single, atomic\n+   operation.  This is equivalent to getting the implementation of\n+   each method and then calling method_setImplementation() on the\n+   other one.  For this to work, the two methods must have been\n+   returned by class_getInstanceMethod() or class_getClassMethod().\n+   If 'method_a' or 'method_b' is NULL, do nothing.  */\n+objc_EXPORT void\n+method_exchangeImplementations (Method method_a, Method method_b);\n+\n \n /** Implementation: the following functions are in sendmsg.c.  */\n \n@@ -545,26 +597,6 @@ objc_EXPORT void method_getReturnType (Method method, char *returnValue,\n objc_EXPORT void method_getArgumentType (Method method, unsigned int argumentNumber,\n \t\t\t\t\t char *returnValue, size_t returnValueSize);\n \n-/* Change the implementation of the method.  It also searches all\n-   classes for any class implementing the method, and replaces the\n-   existing implementation with the new one.  For that to work,\n-   'method' must be a method returned by class_getInstanceMethod() or\n-   class_getClassMethod() as the matching is done by comparing the\n-   pointers; in that case, only the implementation in the class is\n-   modified.  Return the previous implementation that has been\n-   replaced.  If method or implementation is NULL, do nothing and\n-   return NULL.  */\n-objc_EXPORT IMP\n-method_setImplementation (Method method, IMP implementation);\n-\n-/* Swap the implementation of two methods in a single, atomic\n-   operation.  This is equivalent to getting the implementation of\n-   each method and then calling method_setImplementation() on the\n-   other one.  For this to work, the two methods must have been\n-   returned by class_getInstanceMethod() or class_getClassMethod().\n-   If 'method_a' or 'method_b' is NULL, do nothing.  */\n-objc_EXPORT void\n-method_exchangeImplementations (Method method_a, Method method_b);\n \n /** Implementation: the following functions are in protocols.c.  */\n "}]}