{"sha": "12f61e776a1305b44ec367dcfb25180e2c269024", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmNjFlNzc2YTEzMDViNDRlYzM2N2RjZmIyNTE4MGUyYzI2OTAyNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-08T02:57:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-08T02:57:13Z"}, "message": "gofast.h (GOFAST_RENAME_LIBCALLS): Set gt and ge as NULL_RTX.\n\n* config/gofast.h (GOFAST_RENAME_LIBCALLS): Set gt and ge as\nNULL_RTX.  Set all HFmode operations as NULL_RTX.\n* optabs.c (prepare_float_lib_cmp) <GT, GE, LT, LE>: If libfunc is\nNULL_RTX, try reversing the comparison and the operands.\n\nFrom-SVN: r50422", "tree": {"sha": "c46be953c6b103efd2f345a73b6bd870fa3efa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c46be953c6b103efd2f345a73b6bd870fa3efa72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f61e776a1305b44ec367dcfb25180e2c269024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f61e776a1305b44ec367dcfb25180e2c269024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f61e776a1305b44ec367dcfb25180e2c269024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f61e776a1305b44ec367dcfb25180e2c269024/comments", "author": null, "committer": null, "parents": [{"sha": "4e0020277270d90f7237d372eb86eb7c7b93b4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0020277270d90f7237d372eb86eb7c7b93b4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0020277270d90f7237d372eb86eb7c7b93b4a5"}], "stats": {"total": 150, "additions": 145, "deletions": 5}, "files": [{"sha": "fa565f77dbdfa86c02ddc284daabcdfd9a8a8822", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12f61e776a1305b44ec367dcfb25180e2c269024", "patch": "@@ -1,3 +1,10 @@\n+2002-03-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/gofast.h (GOFAST_RENAME_LIBCALLS): Set gt and ge as\n+\tNULL_RTX.  Set all HFmode operations as NULL_RTX.\n+\t* optabs.c (prepare_float_lib_cmp) <GT, GE, LT, LE>: If libfunc is\n+\tNULL_RTX, try reversing the comparison and the operands.\n+\n 2002-03-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* genextract.c (walk_rtx): Recurse into MATCH_PAR_DUP."}, {"sha": "84e9018784f81a82260761917cc04a3b87759082", "filename": "gcc/config/gofast.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2Fconfig%2Fgofast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2Fconfig%2Fgofast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgofast.h?ref=12f61e776a1305b44ec367dcfb25180e2c269024", "patch": "@@ -1,5 +1,5 @@\n /* US Software GOFAST floating point library support.\n-   Copyright (C) 1994, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -43,6 +43,11 @@ Boston, MA 02111-1307, USA.  */\n       neg_optab->handlers[(int) mode].libfunc = NULL_RTX; \\\n   } while (0)\n \n+/* GCC does not use fpcmp/dpcmp for gt or ge because its own\n+   FP-emulation library returns +1 for both > and unord.  So we leave\n+   gt and ge unset, such that, instead of fpcmp(a,b) >[=], we generate\n+   fpcmp(b,a) <[=] 0, which is unambiguous.  For unord libfuncs, we\n+   use our own functions, since GOFAST doesn't supply them.  */\n #define GOFAST_RENAME_LIBCALLS \\\n   add_optab->handlers[(int) SFmode].libfunc = init_one_libfunc (\"fpadd\"); \\\n   add_optab->handlers[(int) DFmode].libfunc = init_one_libfunc (\"dpadd\"); \\\n@@ -57,18 +62,25 @@ Boston, MA 02111-1307, USA.  */\n \\\n   extendsfdf2_libfunc = init_one_libfunc (\"fptodp\"); \\\n   truncdfsf2_libfunc = init_one_libfunc (\"dptofp\"); \\\n+\\\n+  eqhf2_libfunc = NULL_RTX; \\\n+  nehf2_libfunc = NULL_RTX; \\\n+  gthf2_libfunc = NULL_RTX; \\\n+  gehf2_libfunc = NULL_RTX; \\\n+  lthf2_libfunc = NULL_RTX; \\\n+  lehf2_libfunc = NULL_RTX; \\\n \\\n   eqsf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n   nesf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  gtsf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n-  gesf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n+  gtsf2_libfunc = NULL_RTX; \\\n+  gesf2_libfunc = NULL_RTX; \\\n   ltsf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n   lesf2_libfunc = init_one_libfunc (\"fpcmp\"); \\\n \\\n   eqdf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n   nedf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-  gtdf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n-  gedf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n+  gtdf2_libfunc = NULL_RTX; \\\n+  gedf2_libfunc = NULL_RTX; \\\n   ltdf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n   ledf2_libfunc = init_one_libfunc (\"dpcmp\"); \\\n \\"}, {"sha": "94927b9b2fe66982a88c47bf3cdb350aea4eb846", "filename": "gcc/optabs.c", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f61e776a1305b44ec367dcfb25180e2c269024/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=12f61e776a1305b44ec367dcfb25180e2c269024", "patch": "@@ -3399,6 +3399,7 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n      int *punsignedp;\n {\n   enum rtx_code comparison = *pcomparison;\n+  rtx tmp;\n   rtx x = *px = protect_from_queue (*px, 0);\n   rtx y = *py = protect_from_queue (*py, 0);\n   enum machine_mode mode = GET_MODE (x);\n@@ -3418,18 +3419,42 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n \n       case GT:\n \tlibfunc = gthf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LT;\n+\t    libfunc = lthf2_libfunc;\n+\t  }\n \tbreak;\n \n       case GE:\n \tlibfunc = gehf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LE;\n+\t    libfunc = lehf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LT:\n \tlibfunc = lthf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GT;\n+\t    libfunc = gthf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LE:\n \tlibfunc = lehf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GE;\n+\t    libfunc = gehf2_libfunc;\n+\t  }\n \tbreak;\n \n       case UNORDERED:\n@@ -3452,18 +3477,42 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n \n       case GT:\n \tlibfunc = gtsf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LT;\n+\t    libfunc = ltsf2_libfunc;\n+\t  }\n \tbreak;\n \n       case GE:\n \tlibfunc = gesf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LE;\n+\t    libfunc = lesf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LT:\n \tlibfunc = ltsf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GT;\n+\t    libfunc = gtsf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LE:\n \tlibfunc = lesf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GE;\n+\t    libfunc = gesf2_libfunc;\n+\t  }\n \tbreak;\n \n       case UNORDERED:\n@@ -3486,18 +3535,42 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n \n       case GT:\n \tlibfunc = gtdf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LT;\n+\t    libfunc = ltdf2_libfunc;\n+\t  }\n \tbreak;\n \n       case GE:\n \tlibfunc = gedf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LE;\n+\t    libfunc = ledf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LT:\n \tlibfunc = ltdf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GT;\n+\t    libfunc = gtdf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LE:\n \tlibfunc = ledf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GE;\n+\t    libfunc = gedf2_libfunc;\n+\t  }\n \tbreak;\n \n       case UNORDERED:\n@@ -3520,18 +3593,42 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n \n       case GT:\n \tlibfunc = gtxf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LT;\n+\t    libfunc = ltxf2_libfunc;\n+\t  }\n \tbreak;\n \n       case GE:\n \tlibfunc = gexf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LE;\n+\t    libfunc = lexf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LT:\n \tlibfunc = ltxf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GT;\n+\t    libfunc = gtxf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LE:\n \tlibfunc = lexf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GE;\n+\t    libfunc = gexf2_libfunc;\n+\t  }\n \tbreak;\n \n       case UNORDERED:\n@@ -3554,18 +3651,42 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n \n       case GT:\n \tlibfunc = gttf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LT;\n+\t    libfunc = lttf2_libfunc;\n+\t  }\n \tbreak;\n \n       case GE:\n \tlibfunc = getf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = LE;\n+\t    libfunc = letf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LT:\n \tlibfunc = lttf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GT;\n+\t    libfunc = gttf2_libfunc;\n+\t  }\n \tbreak;\n \n       case LE:\n \tlibfunc = letf2_libfunc;\n+\tif (libfunc == NULL_RTX)\n+\t  {\n+\t    tmp = x; x = y; y = tmp;\n+\t    *pcomparison = GE;\n+\t    libfunc = getf2_libfunc;\n+\t  }\n \tbreak;\n \n       case UNORDERED:"}]}