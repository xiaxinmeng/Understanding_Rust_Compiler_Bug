{"sha": "7c16328b16644e6ca07363435a1c562975d37b2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxNjMyOGIxNjY0NGU2Y2EwNzM2MzQzNWExYzU2Mjk3NWQzN2IyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-08T07:07:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-08T07:07:11Z"}, "message": "tm.texi (Exception Handling): New subnode of Stack and Calling.\n\n        * doc/tm.texi (Exception Handling): New subnode of Stack and Calling.\n        Document MD_FALLBACK_FRAME_STATE_FOR.\n\nFrom-SVN: r43843", "tree": {"sha": "c37ac3de22d157f091611d85de0a9293d92a2b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37ac3de22d157f091611d85de0a9293d92a2b1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c16328b16644e6ca07363435a1c562975d37b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c16328b16644e6ca07363435a1c562975d37b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c16328b16644e6ca07363435a1c562975d37b2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c16328b16644e6ca07363435a1c562975d37b2a/comments", "author": null, "committer": null, "parents": [{"sha": "f6df5bd239bca1db5d2332bc720a9ef0c5be6b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6df5bd239bca1db5d2332bc720a9ef0c5be6b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6df5bd239bca1db5d2332bc720a9ef0c5be6b81"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "1c2bcd353d69e157270f6cb587572e025685ce91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c16328b16644e6ca07363435a1c562975d37b2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c16328b16644e6ca07363435a1c562975d37b2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c16328b16644e6ca07363435a1c562975d37b2a", "patch": "@@ -1,3 +1,8 @@\n+2001-07-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/tm.texi (Exception Handling): New subnode of Stack and Calling.\n+\tDocument MD_FALLBACK_FRAME_STATE_FOR.\n+\n 2001-07-07  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_initial_elimination_offset):"}, {"sha": "17f6c6b86974389a88d48a4de5d31749315d46c5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c16328b16644e6ca07363435a1c562975d37b2a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c16328b16644e6ca07363435a1c562975d37b2a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7c16328b16644e6ca07363435a1c562975d37b2a", "patch": "@@ -2496,6 +2496,7 @@ This describes the stack layout and calling conventions.\n \n @menu\n * Frame Layout::\n+* Exception Handling::\n * Stack Checking::\n * Frame Registers::\n * Elimination::\n@@ -2680,6 +2681,18 @@ You only need to define this macro if the default is incorrect, and you\n want to support call frame debugging information like that provided by\n DWARF 2.\n \n+@findex SMALL_STACK\n+@item SMALL_STACK\n+Define this macro if the stack size for the target is very small.  This\n+has the effect of disabling gcc's built-in @samp{alloca}, though\n+@samp{__builtin_alloca} is not affected.\n+@end table\n+\n+@node Exception Handling\n+@subsection Exception Handling Support\n+@cindex exception handling\n+\n+@table @code\n @findex EH_RETURN_DATA_REGNO\n @item EH_RETURN_DATA_REGNO (@var{N})\n A C expression whose value is the @var{N}th register number used for\n@@ -2755,11 +2768,21 @@ handled.  @var{encoding} is the format chosen, @var{size} is the number\n of bytes that the format occupies, @var{addr} is the @code{SYMBOL_REF}\n to be emitted.\n \n-@findex SMALL_STACK\n-@item SMALL_STACK\n-Define this macro if the stack size for the target is very small.  This\n-has the effect of disabling gcc's built-in @samp{alloca}, though\n-@samp{__builtin_alloca} is not affected.\n+@findex MD_FALLBACK_FRAME_STATE_FOR\n+@item MD_FALLBACK_FRAME_STATE_FOR(@var{context}, @var{fs}, @var{success})\n+This macro allows the target to add cpu and operating system specific\n+code to the call-frame unwinder for use when there is no unwind data\n+available.  The most common reason to implement this macro is to unwind\n+through signal frames.\n+\n+This macro is called from @code{uw_frame_state_for} in @file{unwind-dw2.c}\n+and @file{unwind-ia64.c}.  @var{context} is an @code{_Unwind_Context};\n+@var{fs} is an @code{_Unwind_FrameState}.  Examine @code{context->ra}\n+for the address of the code being executed and @code{context->cfa} for\n+the stack pointer value.  If the frame can be decoded, the register save\n+addresses should be updated in @var{fs} and the macro should branch to\n+@var{success}.  If the frame cannot be decoded, the macro should do \n+nothing.\n @end table\n \n @node Stack Checking"}]}