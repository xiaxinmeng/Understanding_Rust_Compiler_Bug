{"sha": "564a129d2270cd6cd14683013483b1471f0d04f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0YTEyOWQyMjcwY2Q2Y2QxNDY4MzAxMzQ4M2IxNDcxZjBkMDRmMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-05T19:33:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-05T19:33:11Z"}, "message": "re PR testsuite/43758 (19 new GCC HEAD@158360 regressions)\n\n\tPR testsuite/43758\n\t* target.h (struct gcc_target): Add attribute_takes_identifier_p.\n\t* target_def.h (TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P): Define.\n\t(TARGET_INITIALIZER): Use it.\n\t* c-common.c (attribute_takes_identifier_p): Call it.\n\t* c-common.h: Update prototype.\n\t* config/rs6000/rs6000.c (rs6000_attribute_takes_identifier_p): New.\n\t(TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P): Define.\n\nFrom-SVN: r159079", "tree": {"sha": "2f0d1539c4a77f271f5a52bc32ed5f1726956909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f0d1539c4a77f271f5a52bc32ed5f1726956909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/564a129d2270cd6cd14683013483b1471f0d04f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564a129d2270cd6cd14683013483b1471f0d04f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564a129d2270cd6cd14683013483b1471f0d04f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564a129d2270cd6cd14683013483b1471f0d04f1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58c13acc6abf49f392d72d269e6c0a88eae25319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c13acc6abf49f392d72d269e6c0a88eae25319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c13acc6abf49f392d72d269e6c0a88eae25319"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "4c9263d793c60ac00f6eba142171cfa23d33616e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -1,3 +1,14 @@\n+2010-05-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR testsuite/43758\n+\t* target.h (struct gcc_target): Add attribute_takes_identifier_p.\n+\t* target_def.h (TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P): Define.\n+\t(TARGET_INITIALIZER): Use it.\n+\t* c-common.c (attribute_takes_identifier_p): Call it.\n+\t* c-common.h: Update prototype.\n+\t* config/rs6000/rs6000.c (rs6000_attribute_takes_identifier_p): New.\n+\t(TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P): Define.\n+\n 2010-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43950"}, {"sha": "6fa577c293af39940ceb7c58b40014e8472f4cc7", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -5816,11 +5816,14 @@ c_init_attributes (void)\n    identifier as an argument, so the front end shouldn't look it up.  */\n \n bool\n-attribute_takes_identifier_p (tree attr_id)\n+attribute_takes_identifier_p (const_tree attr_id)\n {\n-  return (is_attribute_p (\"mode\", attr_id)\n-\t  || is_attribute_p (\"format\", attr_id)\n-\t  || is_attribute_p (\"cleanup\", attr_id));\n+  if (is_attribute_p (\"mode\", attr_id)\n+      || is_attribute_p (\"format\", attr_id)\n+      || is_attribute_p (\"cleanup\", attr_id))\n+    return true;\n+  else\n+    return targetm.attribute_takes_identifier_p (attr_id);\n }\n \n /* Attribute handlers common to C front ends.  */"}, {"sha": "7f47c2e457be9dd5f0cd3021136e5700339a6a2f", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -826,7 +826,7 @@ extern void check_function_format (tree, int, tree *);\n extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n-extern bool attribute_takes_identifier_p (tree);\n+extern bool attribute_takes_identifier_p (const_tree);\n extern int c_common_handle_option (size_t code, const char *arg, int value);\n extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);"}, {"sha": "d1616e523fb8db3b679af6416e533343ed17fc12", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -897,6 +897,7 @@ static bool no_global_regs_above (int, bool);\n static void rs6000_assemble_visibility (tree, int);\n #endif\n static int rs6000_ra_ever_killed (void);\n+static bool rs6000_attribute_takes_identifier_p (const_tree);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n static bool rs6000_ms_bitfield_layout_p (const_tree);\n@@ -1279,6 +1280,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_ATTRIBUTE_TABLE rs6000_attribute_table\n #undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES rs6000_set_default_type_attributes\n+#undef TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P\n+#define TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P rs6000_attribute_takes_identifier_p\n \n #undef TARGET_ASM_ALIGNED_DI_OP\n #define TARGET_ASM_ALIGNED_DI_OP DOUBLE_INT_ASM_OP\n@@ -23320,6 +23323,15 @@ rs6000_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n }\n \n \f\n+/* Returns TRUE iff the target attribute indicated by ATTR_ID takes a plain\n+   identifier as an argument, so the front end shouldn't look it up.  */\n+\n+static bool\n+rs6000_attribute_takes_identifier_p (const_tree attr_id)\n+{\n+  return is_attribute_p (\"altivec\", attr_id);\n+}\n+\n /* Handle the \"altivec\" attribute.  The attribute may have\n    arguments as follows:\n "}, {"sha": "7eb49d63539ce435fcdaaf84e8d361251f8e8bb1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -9525,6 +9525,14 @@ entities to which these attributes are applied and the arguments they\n take.\n @end deftypevr\n \n+@deftypefn {Target Hook} bool TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P (const_tree @var{name})\n+If defined, this target hook is a function which returns true if the\n+machine-specific attribute named @var{name} expects an identifier\n+given as its first argument to be passed on as a plain identifier, not\n+subjected to name lookup.  If this is not defined, the default is\n+false for all machine-specific attributes.\n+@end deftypefn\n+\n @deftypefn {Target Hook} int TARGET_COMP_TYPE_ATTRIBUTES (const_tree @var{type1}, const_tree @var{type2})\n If defined, this target hook is a function which returns zero if the attributes on\n @var{type1} and @var{type2} are incompatible, one if they are compatible,"}, {"sha": "1f60e52f30d196d9ea6c1fb796fa1e08d775e19d", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -561,6 +561,7 @@\n #define TARGET_MAX_ANCHOR_OFFSET 0\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P default_use_anchors_for_symbol_p\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n+#define TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P hook_bool_const_tree_false\n #define TARGET_COMP_TYPE_ATTRIBUTES hook_int_const_tree_const_tree_1\n #ifndef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES hook_void_tree\n@@ -932,6 +933,7 @@\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_ATTRIBUTE_TABLE,\t\t\t\\\n+  TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P,\t\t\\\n   TARGET_COMP_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n   TARGET_INSERT_ATTRIBUTES,\t\t\t\\"}, {"sha": "2f99a4f8bb4a492e7edba2d19c54fa2e345ff644", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a129d2270cd6cd14683013483b1471f0d04f1/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=564a129d2270cd6cd14683013483b1471f0d04f1", "patch": "@@ -549,6 +549,10 @@ struct gcc_target\n      Ignored if NULL.  */\n   const struct attribute_spec *attribute_table;\n \n+  /* Return true iff attribute NAME expects a plain identifier as its first\n+     argument.  */\n+  bool (*attribute_takes_identifier_p) (const_tree name);\n+\n   /* Return zero if the attributes on TYPE1 and TYPE2 are incompatible,\n      one if they are compatible and two if they are nearly compatible\n      (which causes a warning to be generated).  */"}]}