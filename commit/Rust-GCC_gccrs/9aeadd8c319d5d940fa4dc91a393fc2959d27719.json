{"sha": "9aeadd8c319d5d940fa4dc91a393fc2959d27719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlYWRkOGMzMTlkNWQ5NDBmYTRkYzkxYTM5M2ZjMjk1OWQyNzcxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-30T22:42:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-31T16:17:19Z"}, "message": "c++: Improve error recovery with constexpr [PR92193]\n\nThe compiler tries to limit error cascades in limit_bad_template_recursion\nby avoiding triggering a new instantiation from one that has caused errors.\nWe were exempting constexpr functions from this because they can be needed\nfor constant evaluation, but as more and more functions get marked\nconstexpr, this becomes an over-broad category.  So as suggested on IRC,\nthis patch only exempts functions that are needed for mandatory constant\nevaluation.\n\nAs noted in the comment, this flag doesn't particularly need to use a bit in\nthe FUNCTION_DECL, but there were still some free.\n\n\tPR c++/92193\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (FNDECL_MANIFESTLY_CONST_EVALUATED): New.\n\t* constexpr.c (cxx_eval_call_expression): Set it.\n\t* pt.c (neglectable_inst_p): Check it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/diagnostic/static_assert4.C: New test.", "tree": {"sha": "27b1c3b13691e8266d10fd240ea7e28d423dbe68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27b1c3b13691e8266d10fd240ea7e28d423dbe68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aeadd8c319d5d940fa4dc91a393fc2959d27719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeadd8c319d5d940fa4dc91a393fc2959d27719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aeadd8c319d5d940fa4dc91a393fc2959d27719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeadd8c319d5d940fa4dc91a393fc2959d27719/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f0e57b9a2f1b108831fcfb25cbcc4e2de65e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f0e57b9a2f1b108831fcfb25cbcc4e2de65e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f0e57b9a2f1b108831fcfb25cbcc4e2de65e8e"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "8be88dcfc24fa11b8b91bd20b5db73126bdcc37f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9aeadd8c319d5d940fa4dc91a393fc2959d27719", "patch": "@@ -2572,6 +2572,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       location_t save_loc = input_location;\n       input_location = loc;\n       ++function_depth;\n+      if (ctx->manifestly_const_eval)\n+\tFNDECL_MANIFESTLY_CONST_EVALUATED (fun) = true;\n       instantiate_decl (fun, /*defer_ok*/false, /*expl_inst*/false);\n       --function_depth;\n       input_location = save_loc;"}, {"sha": "f0a7bd24df725fd34240be9608513ffaea408177", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9aeadd8c319d5d940fa4dc91a393fc2959d27719", "patch": "@@ -500,6 +500,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       FUNCTION_REF_QUALIFIED (in FUNCTION_TYPE, METHOD_TYPE)\n       OVL_LOOKUP_P (in OVERLOAD)\n       LOOKUP_FOUND_P (in RECORD_TYPE, UNION_TYPE, ENUMERAL_TYPE, NAMESPACE_DECL)\n+      FNDECL_MANIFESTLY_CONST_EVALUATED (in FUNCTION_DECL)\n    5: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       FUNCTION_RVALUE_QUALIFIED (in FUNCTION_TYPE, METHOD_TYPE)\n       CALL_EXPR_REVERSE_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n@@ -4213,6 +4214,13 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define FNDECL_USED_AUTO(NODE) \\\n   TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (NODE))\n \n+/* True if NODE is needed for a manifestly constant-evaluated expression.\n+   This doesn't especially need to be a flag, since currently it's only\n+   used for error recovery; if we run out of function flags it could move\n+   to an attribute.  */\n+#define FNDECL_MANIFESTLY_CONST_EVALUATED(NODE) \\\n+  TREE_LANG_FLAG_4 (FUNCTION_DECL_CHECK (NODE))\n+\n /* True for artificial decls added for OpenMP privatized non-static\n    data members.  */\n #define DECL_OMP_PRIVATIZED_MEMBER(NODE) \\"}, {"sha": "72b22d8c4873fbc28e4be451b5522b7b98abae3d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9aeadd8c319d5d940fa4dc91a393fc2959d27719", "patch": "@@ -10873,7 +10873,8 @@ neglectable_inst_p (tree d)\n {\n   return (d && DECL_P (d)\n \t  && !undeduced_auto_decl (d)\n-\t  && !(TREE_CODE (d) == FUNCTION_DECL ? DECL_DECLARED_CONSTEXPR_P (d)\n+\t  && !(TREE_CODE (d) == FUNCTION_DECL\n+\t       ? FNDECL_MANIFESTLY_CONST_EVALUATED (d)\n \t       : decl_maybe_constant_var_p (d)));\n }\n "}, {"sha": "c539016e526a5a496769240e6415694f45fd7389", "filename": "gcc/testsuite/g++.dg/diagnostic/static_assert4.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic_assert4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeadd8c319d5d940fa4dc91a393fc2959d27719/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic_assert4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic_assert4.C?ref=9aeadd8c319d5d940fa4dc91a393fc2959d27719", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/92193\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+  struct has_foo\n+  { static constexpr bool value = false; };\n+\n+template<typename T>\n+#ifndef NO_CONSTEXPR\n+  constexpr\n+#endif\n+  bool\n+  foo(T t) noexcept(noexcept(t.foo()))\n+  { return t.foo(); }\n+\n+template<typename T>\n+  void\n+  maybe_foo(T t)\n+  {\n+    static_assert( has_foo<T>::value, \"has foo\" ); // { dg-error \"has foo\" }\n+    foo(t);\n+  }\n+\n+struct X { };\n+\n+int main()\n+{\n+  X x;\n+  maybe_foo(x);\n+}"}]}