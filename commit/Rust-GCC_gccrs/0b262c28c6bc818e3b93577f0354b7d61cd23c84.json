{"sha": "0b262c28c6bc818e3b93577f0354b7d61cd23c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyNjJjMjhjNmJjODE4ZTNiOTM1NzdmMDM1NGI3ZDYxY2QyM2M4NA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-22T09:25:35Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-22T09:25:35Z"}, "message": "re PR rtl-optimization/50063 (DSE: wrong code for gcc.dg/torture/pta-ptrarith-3.c)\n\n\tPR rtl-optimization/50063\n\t* config/avr/avr.md (movhi_sp_r): Handle -1 (unknown IRQ state)\n\tand 2 (8-bit SP) in operand 2.\n\t* config/avr/avr.c (avr_prologue_setup_frame): Adjust prologue\n\tsetup to use movhi_sp_r instead of vanilla move to write SP.\n\tAdjust REG_CFA notes to superseed unspec.\n\t(expand_epilogue): Adjust epilogue setup to use movhi_sp_r instead\n\tof vanilla move.\n\tAs function body might contain CLI or SEI: Use irq_state 0 (IRQ\n\tknown to be off) only with TARGET_NO_INTERRUPTS. Never use\n\tirq_state 1 (IRQ known to be on) here.\n\nFrom-SVN: r184461", "tree": {"sha": "d09627a405e1eed17dec350d03c873a0a6a03ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d09627a405e1eed17dec350d03c873a0a6a03ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b262c28c6bc818e3b93577f0354b7d61cd23c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b262c28c6bc818e3b93577f0354b7d61cd23c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b262c28c6bc818e3b93577f0354b7d61cd23c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b262c28c6bc818e3b93577f0354b7d61cd23c84/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d071654dcaf410e5aa9905676d26ff09b5f6a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d071654dcaf410e5aa9905676d26ff09b5f6a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d071654dcaf410e5aa9905676d26ff09b5f6a10"}], "stats": {"total": 143, "additions": 82, "deletions": 61}, "files": [{"sha": "d5aa911407916da3e43740f4ce0efa86755007f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b262c28c6bc818e3b93577f0354b7d61cd23c84", "patch": "@@ -1,3 +1,17 @@\n+2012-02-22  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR rtl-optimization/50063\n+\t* config/avr/avr.md (movhi_sp_r): Handle -1 (unknown IRQ state)\n+\tand 2 (8-bit SP) in operand 2.\n+\t* config/avr/avr.c (avr_prologue_setup_frame): Adjust prologue\n+\tsetup to use movhi_sp_r instead of vanilla move to write SP.\n+\tAdjust REG_CFA notes to superseed unspec.\n+\t(expand_epilogue): Adjust epilogue setup to use movhi_sp_r instead\n+\tof vanilla move.\n+\tAs function body might contain CLI or SEI: Use irq_state 0 (IRQ\n+\tknown to be off) only with TARGET_NO_INTERRUPTS. Never use\n+\tirq_state 1 (IRQ known to be on) here.\n+\n 2012-02-21  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* ira.c (check_allocation): Use REG_WORDS_BIG_ENDIAN, not"}, {"sha": "2a462922976655ce3b82c5fe0d8a3ef9bb979dc8", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=0b262c28c6bc818e3b93577f0354b7d61cd23c84", "patch": "@@ -1062,8 +1062,8 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               !frame_pointer_needed can only occur if the function is not a\n               leaf function and thus X has already been saved.  */\n               \n+          int irq_state = -1;\n           rtx fp_plus_insns, fp, my_fp;\n-          rtx sp_minus_size = plus_constant (stack_pointer_rtx, -size);\n \n           gcc_assert (frame_pointer_needed\n                       || !isr_p\n@@ -1076,7 +1076,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n           if (AVR_HAVE_8BIT_SP)\n             {\n               /* The high byte (r29) does not change:\n-                 Prefer SUBI (1 cycle) over ABIW (2 cycles, same size).  */\n+                 Prefer SUBI (1 cycle) over SBIW (2 cycles, same size).  */\n \n               my_fp = all_regs_rtx[FRAME_POINTER_REGNUM];\n             }\n@@ -1092,43 +1092,50 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n              the frame pointer subtraction is done.  */\n           \n           insn = emit_move_insn (fp, stack_pointer_rtx);\n-          if (!frame_pointer_needed)\n-            RTX_FRAME_RELATED_P (insn) = 1;\n+          if (frame_pointer_needed)\n+            {\n+              RTX_FRAME_RELATED_P (insn) = 1;\n+              add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+                            gen_rtx_SET (VOIDmode, fp, stack_pointer_rtx));\n+            }\n \n           insn = emit_move_insn (my_fp, plus_constant (my_fp, -size));\n-          RTX_FRAME_RELATED_P (insn) = 1;\n-          \n           if (frame_pointer_needed)\n             {\n+              RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                            gen_rtx_SET (VOIDmode, fp, sp_minus_size));\n+                            gen_rtx_SET (VOIDmode, fp,\n+                                         plus_constant (fp, -size)));\n             }\n           \n           /* Copy to stack pointer.  Note that since we've already\n              changed the CFA to the frame pointer this operation\n-             need not be annotated if frame pointer is needed.  */\n-              \n-          if (AVR_HAVE_8BIT_SP || AVR_XMEGA)\n-            {\n-              insn = emit_move_insn (stack_pointer_rtx, fp);\n-            }\n-          else if (TARGET_NO_INTERRUPTS \n-                   || isr_p\n-                   || cfun->machine->is_OS_main)\n-            {\n-              rtx irqs_are_on = GEN_INT (!!cfun->machine->is_interrupt);\n-              \n-              insn = emit_insn (gen_movhi_sp_r (stack_pointer_rtx,\n-                                                fp, irqs_are_on));\n-            }\n-          else\n-            {\n-              insn = emit_move_insn (stack_pointer_rtx, fp);\n-            }\n+             need not be annotated if frame pointer is needed.\n+             Always move through unspec, see PR50063.\n+             For meaning of irq_state see movhi_sp_r insn.  */\n \n-          if (!frame_pointer_needed)\n-            RTX_FRAME_RELATED_P (insn) = 1;\n+          if (cfun->machine->is_interrupt)\n+            irq_state = 1;\n+\n+          if (TARGET_NO_INTERRUPTS\n+              || cfun->machine->is_signal\n+              || cfun->machine->is_OS_main)\n+            irq_state = 0;\n \n+          if (AVR_HAVE_8BIT_SP)\n+            irq_state = 2;\n+\n+          insn = emit_insn (gen_movhi_sp_r (stack_pointer_rtx,\n+                                            fp, GEN_INT (irq_state)));\n+          if (!frame_pointer_needed)\n+            {\n+              RTX_FRAME_RELATED_P (insn) = 1;\n+              add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+                            gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+                                         plus_constant (stack_pointer_rtx,\n+                                                        -size)));\n+            }\n+          \n           fp_plus_insns = get_insns ();\n           end_sequence ();\n           \n@@ -1143,9 +1150,13 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n               \n               start_sequence ();\n \n-              insn = emit_move_insn (stack_pointer_rtx, sp_minus_size);\n+              insn = emit_move_insn (stack_pointer_rtx,\n+                                     plus_constant (stack_pointer_rtx, -size));\n               RTX_FRAME_RELATED_P (insn) = 1;\n-\n+              add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+                            gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+                                         plus_constant (stack_pointer_rtx,\n+                                                        -size)));\n               if (frame_pointer_needed)\n                 {\n                   insn = emit_move_insn (fp, stack_pointer_rtx);\n@@ -1376,7 +1387,8 @@ expand_epilogue (bool sibcall_p)\n   if (size)\n     {\n       /* Try two methods to adjust stack and select shortest.  */\n-          \n+\n+      int irq_state = -1;\n       rtx fp, my_fp;\n       rtx fp_plus_insns;\n \n@@ -1406,23 +1418,15 @@ expand_epilogue (bool sibcall_p)\n       emit_move_insn (my_fp, plus_constant (my_fp, size));\n \n       /* Copy to stack pointer.  */\n-              \n-      if (AVR_HAVE_8BIT_SP || AVR_XMEGA)\n-        {\n-          emit_move_insn (stack_pointer_rtx, fp);\n-        }\n-      else if (TARGET_NO_INTERRUPTS \n-               || isr_p\n-               || cfun->machine->is_OS_main)\n-        {\n-          rtx irqs_are_on = GEN_INT (!!cfun->machine->is_interrupt);\n-          \n-          emit_insn (gen_movhi_sp_r (stack_pointer_rtx, fp, irqs_are_on));\n-        }\n-      else\n-        {\n-          emit_move_insn (stack_pointer_rtx, fp);\n-        }\n+\n+      if (TARGET_NO_INTERRUPTS)\n+        irq_state = 0;\n+\n+      if (AVR_HAVE_8BIT_SP)\n+        irq_state = 2;\n+\n+      emit_insn (gen_movhi_sp_r (stack_pointer_rtx, fp,\n+                                 GEN_INT (irq_state)));\n \n       fp_plus_insns = get_insns ();\n       end_sequence ();        "}, {"sha": "b217d0327260998b4d68cea6b72bd762e2239f9c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b262c28c6bc818e3b93577f0354b7d61cd23c84/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=0b262c28c6bc818e3b93577f0354b7d61cd23c84", "patch": "@@ -583,23 +583,26 @@\n \n ;; Move register $1 to the Stack Pointer register SP.\n ;; This insn is emit during function prologue/epilogue generation.\n-;;    $2 = 0: We know that IRQs are off\n-;;    $2 = 1: We know that IRQs are on\n-;; Remaining cases when the state of the I-Flag is unknown are\n-;; handled by generic movhi insn.\n+;;    $2 =  0: We know that IRQs are off\n+;;    $2 =  1: We know that IRQs are on\n+;;    $2 =  2: SP has 8 bits only, IRQ state does not matter\n+;;    $2 = -1: We don't know anything about IRQ on/off\n+;; Always write SP via unspec, see PR50063\n \n (define_insn \"movhi_sp_r\"\n-  [(set (match_operand:HI 0 \"stack_register_operand\"                \"=q,q,q\")\n-        (unspec_volatile:HI [(match_operand:HI 1 \"register_operand\"  \"r,r,r\")\n-                             (match_operand:HI 2 \"const_int_operand\" \"L,P,LP\")]\n+  [(set (match_operand:HI 0 \"stack_register_operand\"                \"=q,q,q,q,q\")\n+        (unspec_volatile:HI [(match_operand:HI 1 \"register_operand\"  \"r,r,r,r,r\")\n+                             (match_operand:HI 2 \"const_int_operand\" \"L,P,N,K,LPN\")]\n                             UNSPECV_WRITE_SP))]\n-  \"!AVR_HAVE_8BIT_SP\"\n+  \"\"\n   \"@\n-\tout __SP_H__,%B1\\;out __SP_L__,%A1\n-\tcli\\;out __SP_H__,%B1\\;sei\\;out __SP_L__,%A1\n-\tout __SP_L__,%A1\\;out __SP_H__,%B1\"\n-  [(set_attr \"length\" \"2,4,2\")\n-   (set_attr \"isa\" \"no_xmega,no_xmega,xmega\")\n+\tout %B0,%B1\\;out %A0,%A1\n+\tcli\\;out %B0,%B1\\;sei\\;out %A0,%A1\n+\tin __tmp_reg__,__SREG__\\;cli\\;out %B0,%B1\\;out __SREG__,__tmp_reg__\\;out %A0,%A1\n+\tout %A0,%A1\n+\tout %A0,%A1\\;out %B0,%B1\"\n+  [(set_attr \"length\" \"2,4,5,1,2\")\n+   (set_attr \"isa\" \"no_xmega,no_xmega,no_xmega,*,xmega\")\n    (set_attr \"cc\" \"none\")])\n \n (define_peephole2"}]}