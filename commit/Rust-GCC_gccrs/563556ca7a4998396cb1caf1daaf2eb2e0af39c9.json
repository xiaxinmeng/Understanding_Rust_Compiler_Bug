{"sha": "563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzNTU2Y2E3YTQ5OTgzOTZjYjFjYWYxZGFhZjJlYjJlMGFmMzljOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-09-29T22:28:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-09-29T22:28:58Z"}, "message": "objc-act.c (encode_type): Encode INTEGER_TYPEs and REAL_TYPEs based on the bitsize of the type's mode...\n\n\t* objc/objc-act.c (encode_type): Encode INTEGER_TYPEs and\n\tREAL_TYPEs based on the bitsize of the type's mode, not the\n\tmode directly.\n\nFrom-SVN: r71923", "tree": {"sha": "1892a62a80adce92264197d13022ce8b65e53e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1892a62a80adce92264197d13022ce8b65e53e62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563556ca7a4998396cb1caf1daaf2eb2e0af39c9/comments", "author": null, "committer": null, "parents": [{"sha": "21e6f0257f9539fbdfb406bb99b08af80d12fb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e6f0257f9539fbdfb406bb99b08af80d12fb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e6f0257f9539fbdfb406bb99b08af80d12fb97"}], "stats": {"total": 72, "additions": 29, "deletions": 43}, "files": [{"sha": "a9fdc0e083fe12c225947b41c639cddddcf020d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563556ca7a4998396cb1caf1daaf2eb2e0af39c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563556ca7a4998396cb1caf1daaf2eb2e0af39c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "patch": "@@ -1,8 +1,14 @@\n+2003-09-29  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* objc/objc-act.c (encode_type): Encode INTEGER_TYPEs and\n+\tREAL_TYPEs based on the bitsize of the type's mode, not the\n+\tmode directly.\n+\n 2003-09-29  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* dwarf2out.c (default_eh_frame_section): Split into ...\n \t(named_section_eh_frame_section, collect2_eh_frame_section): ... new\n-\tfunctions. \n+\tfunctions.\n \t* output.h (named_section_eh_frame_section): Declare.\n \t(collect2_eh_frame_section): Likewise.\n "}, {"sha": "24fcffebb9be94ed03cdaaac85e3bd67db350f0f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563556ca7a4998396cb1caf1daaf2eb2e0af39c9/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563556ca7a4998396cb1caf1daaf2eb2e0af39c9/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=563556ca7a4998396cb1caf1daaf2eb2e0af39c9", "patch": "@@ -7325,62 +7325,42 @@ encode_next_bitfield (int width)\n }\n \f\n /* FORMAT will be OBJC_ENCODE_INLINE_DEFS or OBJC_ENCODE_DONT_INLINE_DEFS.  */\n-\n static void\n encode_type (tree type, int curtype, int format)\n {\n   enum tree_code code = TREE_CODE (type);\n+  char c;\n \n   if (code == INTEGER_TYPE)\n     {\n-      if (integer_zerop (TYPE_MIN_VALUE (type)))\n+      switch (GET_MODE_BITSIZE (TYPE_MODE (type)))\n \t{\n-\t  /* Unsigned integer types.  */\n-\n-\t  if (TYPE_MODE (type) == QImode)\n-\t    obstack_1grow (&util_obstack, 'C');\n-\t  else if (TYPE_MODE (type) == HImode)\n-\t    obstack_1grow (&util_obstack, 'S');\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_unsigned_type_node)\n-\t\tobstack_1grow (&util_obstack, 'L');\n-\t      else\n-\t\tobstack_1grow (&util_obstack, 'I');\n-\t    }\n-\t  else if (TYPE_MODE (type) == DImode)\n-\t    obstack_1grow (&util_obstack, 'Q');\n-\t}\n-\n-      else\n-\t/* Signed integer types.  */\n-\t{\n-\t  if (TYPE_MODE (type) == QImode)\n-\t    obstack_1grow (&util_obstack, 'c');\n-\t  else if (TYPE_MODE (type) == HImode)\n-\t    obstack_1grow (&util_obstack, 's');\n-\t  else if (TYPE_MODE (type) == SImode)\n-\t    {\n-\t      if (type == long_integer_type_node)\n-\t\tobstack_1grow (&util_obstack, 'l');\n-\t      else\n-\t\tobstack_1grow (&util_obstack, 'i');\n-\t    }\n-\n-\t  else if (TYPE_MODE (type) == DImode)\n-\t    obstack_1grow (&util_obstack, 'q');\n+\tcase 8:  c = TREE_UNSIGNED (type) ? 'C' : 'c'; break;\n+\tcase 16: c = TREE_UNSIGNED (type) ? 'S' : 's'; break;\n+\tcase 32: \n+\t  if (type == long_unsigned_type_node\n+\t      || type == long_integer_type_node)\n+\t         c = TREE_UNSIGNED (type) ? 'L' : 'l';\n+\t  else\n+\t         c = TREE_UNSIGNED (type) ? 'I' : 'i';\n+\t  break;\n+\tcase 64: c = TREE_UNSIGNED (type) ? 'Q' : 'q'; break;\n+\tdefault: abort ();\n \t}\n+      obstack_1grow (&util_obstack, c);\n     }\n \n   else if (code == REAL_TYPE)\n     {\n       /* Floating point types.  */\n-\n-      if (TYPE_MODE (type) == SFmode)\n-\tobstack_1grow (&util_obstack, 'f');\n-      else if (TYPE_MODE (type) == DFmode\n-\t       || TYPE_MODE (type) == TFmode)\n-\tobstack_1grow (&util_obstack, 'd');\n+      switch (GET_MODE_BITSIZE (TYPE_MODE (type)))\n+\t{\n+\tcase 32:  c = 'f'; break;\n+\tcase 64:\n+\tcase 128: c = 'd'; break;\n+\tdefault: abort ();\n+\t}\n+      obstack_1grow (&util_obstack, c);\n     }\n \n   else if (code == VOID_TYPE)"}]}