{"sha": "0e1b8b109fb5a19dc3576a14416383299566ff00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxYjhiMTA5ZmI1YTE5ZGMzNTc2YTE0NDE2MzgzMjk5NTY2ZmYwMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2010-10-23T16:18:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-10-23T16:18:32Z"}, "message": "tree-vrp.c (extract_range_from_binary_expr): If flag_non_call_exceptions don't eliminate division by zero.\n\ngcc/:\n\t* tree-vrp.c (extract_range_from_binary_expr): If\n\tflag_non_call_exceptions don't eliminate division by zero.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\ngcc/testsuite/:\n\t* gcc.c-torture/execute/20101011-1.c: New test.\n\t* gcc.c-torture/execute/20101011-1.x: New test driver.\n\nFrom-SVN: r165884", "tree": {"sha": "cf7659287d28d44a74afdea7975d98bd017ddb0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf7659287d28d44a74afdea7975d98bd017ddb0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1b8b109fb5a19dc3576a14416383299566ff00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1b8b109fb5a19dc3576a14416383299566ff00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1b8b109fb5a19dc3576a14416383299566ff00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1b8b109fb5a19dc3576a14416383299566ff00/comments", "author": null, "committer": null, "parents": [{"sha": "67f67405cb4f5fec7950c18f5e15da06d4852acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f67405cb4f5fec7950c18f5e15da06d4852acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f67405cb4f5fec7950c18f5e15da06d4852acb"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "a2dee2ef5b30dde88d7c6c20e219a664758e4d71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -1,3 +1,9 @@\n+2010-10-23  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-vrp.c (extract_range_from_binary_expr): If\n+\tflag_non_call_exceptions don't eliminate division by zero.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\n 2010-10-23  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cppbuiltin.c (define_builtin_macros_for_type_sizes): Define"}, {"sha": "84f3863e0b0340643318d5e95e00cc3122908c94", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -2755,7 +2755,8 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       else\n \t{\n \t  /* 0/x is 0 (or x&0 if x has side-effects).  */\n-\t  if (trueop0 == CONST0_RTX (mode))\n+\t  if (trueop0 == CONST0_RTX (mode)\n+\t      && !cfun->can_throw_non_call_exceptions)\n \t    {\n \t      if (side_effects_p (op1))\n \t\treturn simplify_gen_binary (AND, mode, op1, trueop0);"}, {"sha": "3ab40ac7fc8ba705f9ee3558bccbbcc00bd265e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -1,3 +1,8 @@\n+2010-10-23  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.c-torture/execute/20101011-1.c: New test.\n+\t* gcc.c-torture/execute/20101011-1.x: New test driver.\n+\n 2010-10-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46122"}, {"sha": "4c36ad3e5cf3b51dd967ebf73cdf123dc2b43a13", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -0,0 +1,45 @@\n+/* With -fnon-call-exceptions 0 / 0 should not be eliminated.  The .x\n+   file sets the option.  */\n+\n+#ifdef SIGNAL_SUPPRESS\n+# define DO_TEST 0\n+#elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (__POWERPC__) || defined (__ppc)\n+  /* On PPC division by zero does not trap.  */\n+# define DO_TEST 0\n+#elif defined (__SPU__)\n+  /* On SPU division by zero does not trap.  */\n+# define DO_TEST 0\n+#else\n+# define DO_TEST 1\n+#endif\n+\n+#if DO_TEST\n+\n+#include <signal.h>\n+\n+void\n+sigfpe (int signum __attribute__ ((unused)))\n+{\n+  exit (0);\n+}\n+\n+#endif\n+\n+/* When optimizing, the compiler is smart enough to constant fold the\n+   static unset variables i and j to produce 0 / 0, but it can't\n+   eliminate the assignment to the global k.  */\n+static int i;\n+static int j;\n+int k;\n+\n+int\n+main ()\n+{\n+#ifdef DO_TEST\n+  signal (SIGFPE, sigfpe);\n+  k = i / j;\n+  abort ();\n+#else\n+  exit (0);\n+#endif\n+}"}, {"sha": "b5c080dd371d4d1965dac44db23c21016d6d156d", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.x?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -0,0 +1,2 @@\n+set additional_flags \"-fnon-call-exceptions\"\n+return 0"}, {"sha": "2103e1b61bb3609601c8c08c4d9e105c208fe59d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1b8b109fb5a19dc3576a14416383299566ff00/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0e1b8b109fb5a19dc3576a14416383299566ff00", "patch": "@@ -2456,6 +2456,22 @@ extract_range_from_binary_expr (value_range_t *vr,\n \t    }\n \t}\n \n+      /* For divisions, if flag_non_call_exceptions is true, we must\n+\t not eliminate a division by zero.  */\n+      if ((code == TRUNC_DIV_EXPR\n+\t   || code == FLOOR_DIV_EXPR\n+\t   || code == CEIL_DIV_EXPR\n+\t   || code == EXACT_DIV_EXPR\n+\t   || code == ROUND_DIV_EXPR)\n+\t  && cfun->can_throw_non_call_exceptions\n+\t  && (vr1.type != VR_RANGE\n+\t      || symbolic_range_p (&vr1)\n+\t      || range_includes_zero_p (&vr1)))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\n       /* For divisions, if op0 is VR_RANGE, we can deduce a range\n \t even if op1 is VR_VARYING, VR_ANTI_RANGE, symbolic or can\n \t include 0.  */"}]}