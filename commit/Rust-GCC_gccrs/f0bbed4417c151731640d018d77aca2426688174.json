{"sha": "f0bbed4417c151731640d018d77aca2426688174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiYmVkNDQxN2MxNTE3MzE2NDBkMDE4ZDc3YWNhMjQyNjY4ODE3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-25T23:28:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-25T23:28:14Z"}, "message": "default.cc: Avoid -Wall warnings.\n\n2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Avoid -Wall\n\twarnings.\n\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Likewise.\n\t* testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc:\n\tLikewise.\n\t* testsuite/29_atomics/headers/stdatomic.h/types.c: Likewise.\n\t* testsuite/util/testsuite_common_types.h (struct assignable,\n\tstruct default_constructible, struct copy_constructible,\n\tstruct explicit_value_constructible): Use a tad of simulated\n\tconcept checking techniques to avoid spurious warnings.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error\n\tmarkers.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r137127", "tree": {"sha": "a6304b6bef398a9f05e637132c9238757a430a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6304b6bef398a9f05e637132c9238757a430a44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0bbed4417c151731640d018d77aca2426688174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bbed4417c151731640d018d77aca2426688174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bbed4417c151731640d018d77aca2426688174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bbed4417c151731640d018d77aca2426688174/comments", "author": null, "committer": null, "parents": [{"sha": "2ffb6613b1f4c2dde6dc1f3ed5cddc27d84df841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffb6613b1f4c2dde6dc1f3ed5cddc27d84df841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffb6613b1f4c2dde6dc1f3ed5cddc27d84df841"}], "stats": {"total": 99, "additions": 74, "deletions": 25}, "files": [{"sha": "78c000ffb103e8846e7777053653eeb900ef0e66", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -1,3 +1,19 @@\n+2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Avoid -Wall\n+\twarnings.\n+\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Likewise.\n+\t* testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/headers/stdatomic.h/types.c: Likewise.\n+\t* testsuite/util/testsuite_common_types.h (struct assignable,\n+\tstruct default_constructible, struct copy_constructible,\n+\tstruct explicit_value_constructible): Use a tad of simulated\n+\tconcept checking techniques to avoid spurious warnings.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error\n+\tmarkers.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n+\n 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (__find_if_not, find_if_not, all_of,"}, {"sha": "2ad480a0fa7fb2a8c5ddb559ee9197919701f937", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -38,8 +38,8 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"within this context\" \"\" { target *-*-* } 309 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 1750 } \n+// { dg-error \"within this context\" \"\" { target *-*-* } 310 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1750 }\n // { dg-error \"is private\" \"\" { target *-*-* } 1782 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1799 }\n // { dg-error \"is private\" \"\" { target *-*-* } 1816 }"}, {"sha": "a78177eee56f4d81b46b01f2af8f2a0999dd41c6", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -38,9 +38,9 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"within this context\" \"\" { target *-*-* } 332 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 1749 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 1781 } \n+// { dg-error \"within this context\" \"\" { target *-*-* } 349 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1749 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1781 }\n // { dg-error \"is private\" \"\" { target *-*-* } 1798 }\n // { dg-error \"is private\" \"\" { target *-*-* } 1814 }\n // { dg-error \"is private\" \"\" { target *-*-* } 1831 }"}, {"sha": "e7a046f89b62cdd5d2e74cee4eef2643e7cc4016", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/aggregate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -33,6 +33,6 @@\n int main()\n {\n   // Only safe usage.\n-  std::atomic_flag guard = ATOMIC_FLAG_INIT;\n+  std::atomic_flag guard __attribute__((unused)) = ATOMIC_FLAG_INIT;\n   return 0;\n }"}, {"sha": "591a3f295c781a89110716b8ec51fe8564677fd0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -32,6 +32,6 @@\n int main()\n {\n   // Default constructor.\n-  std::atomic_flag a;\n+  std::atomic_flag a __attribute__((unused));\n   return 0;\n }"}, {"sha": "9a3ab5e636f6e0c5f9b74fffd665778615df9fc8", "filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -76,5 +76,6 @@ void test01()\n \n   using std::atomic_address;\n \n-  &std::atomic_global_fence_compatibility;\n+  const std::atomic_flag* p __attribute__((unused))\n+    = &std::atomic_global_fence_compatibility;\n }"}, {"sha": "88bc740c3d7879accf8cb9a17e01afa2b9b519bb", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/types.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -24,11 +24,11 @@\n void test01()\n {\n   typedef memory_order t_01;\n-  memory_order t_02 = memory_order_relaxed;\n-  memory_order t_03 = memory_order_acquire;\n-  memory_order t_04 = memory_order_release;\n-  memory_order t_05 = memory_order_acq_rel;\n-  memory_order t_06 = memory_order_seq_cst;\n+  memory_order t_02 __attribute__((unused)) = memory_order_relaxed;\n+  memory_order t_03 __attribute__((unused)) = memory_order_acquire;\n+  memory_order t_04 __attribute__((unused)) = memory_order_release;\n+  memory_order t_05 __attribute__((unused)) = memory_order_acq_rel;\n+  memory_order t_06 __attribute__((unused)) = memory_order_seq_cst;\n \n   typedef atomic_flag t_07;\n \n@@ -76,5 +76,6 @@ void test01()\n \n   typedef atomic_address t_46;\n \n-  &atomic_global_fence_compatibility;\n+  const atomic_flag* p __attribute__((unused))\n+    = &atomic_global_fence_compatibility;\n }"}, {"sha": "a746d787e7ce44103658a7a0a66a8bb436839b47", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bbed4417c151731640d018d77aca2426688174/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=f0bbed4417c151731640d018d77aca2426688174", "patch": "@@ -300,36 +300,59 @@ namespace __gnu_test\n   // Generator to test assignment operator.\n   struct assignable\n   {\n-    template<typename _T>\n+    template<typename _Tp>\n       void \n       operator()()\n       {\n-        _T v1;\n-        _T v2;\n-        v1 = v2;\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  { __v1 = __v2; }\n+\n+\t  _Tp __v1;\n+\t  _Tp __v2;\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n       }\n   };\n \n   // Generator to test default constructor.\n   struct default_constructible\n   {\n-    template<typename _T>\n+    template<typename _Tp>\n       void \n       operator()()\n       {\n-        _T v;\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  { _Tp __v; }\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n       }\n   };\n \n   // Generator to test copy constructor.\n   struct copy_constructible\n   {\n-    template<typename _T>\n+    template<typename _Tp>\n       void \n       operator()()\n       {\n-        _T v1;\n-        _T v2(v1);\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  { _Tp __v2(__v1); }\n+\n+\t  _Tp __v1;\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n       }\n   };\n \n@@ -340,8 +363,16 @@ namespace __gnu_test\n       void \n       operator()()\n       {\n-        _Tvalue a;\n-\t_Ttype v(a);\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  { _Ttype __v(__a); }\n+\t  \n+\t  _Tvalue __a;\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n       }\n   };\n "}]}