{"sha": "0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmNWFlOTNlMDhlMTdmYmUzNmJmY2QxYmRhOGVhMjRhZjk2OGE2NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:01:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:01:59Z"}, "message": "[multiple changes]\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n\tInsert_Delayed_Pragma is now used for the case of Attach_Handler.\n\t* sem_prag.adb: Minor comment improvements.\n\n2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Install_Body): When checking whether freezing of\n\tinstantiation must be delayed, verify that the common enclosing\n\tsubprogram to generic and instance is in fact an overloadable\n\tentity.\n\n2014-05-21  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Mains.Complete_Mains.Do_Complete): Look for all\n\tmains with the same name and fail if there is more than one.\n\t* prj.ads, prj.adb (Find_All_Sources): New function\n\nFrom-SVN: r210702", "tree": {"sha": "160aed62a8b7dc8baaecb1c3e3d236c979273971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160aed62a8b7dc8baaecb1c3e3d236c979273971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/comments", "author": null, "committer": null, "parents": [{"sha": "9db78a423bbd92dfbfcaa5b33b040da21540d647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db78a423bbd92dfbfcaa5b33b040da21540d647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db78a423bbd92dfbfcaa5b33b040da21540d647"}], "stats": {"total": 262, "additions": 229, "deletions": 33}, "files": [{"sha": "1ddf41cc17739e8355e8546e03563dcaa4d32fad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -1,3 +1,22 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n+\tInsert_Delayed_Pragma is now used for the case of Attach_Handler.\n+\t* sem_prag.adb: Minor comment improvements.\n+\n+2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Install_Body): When checking whether freezing of\n+\tinstantiation must be delayed, verify that the common enclosing\n+\tsubprogram to generic and instance is in fact an overloadable\n+\tentity.\n+\n+2014-05-21  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.adb (Mains.Complete_Mains.Do_Complete): Look for all\n+\tmains with the same name and fail if there is more than one.\n+\t* prj.ads, prj.adb (Find_All_Sources): New function\n+\n 2014-05-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb: Minor reformatting."}, {"sha": "d9772510cac66df29a798379d4bc6332fb538f20", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1732,7 +1732,7 @@ package body Makeutl is\n                --  no need to process them in turn.\n \n                J := Names.Last;\n-               loop\n+               Main_Loop : loop\n                   declare\n                      File        : Main_Info       := Names.Table (J);\n                      Main_Id     : File_Name_Type  := File.File;\n@@ -1798,16 +1798,53 @@ package body Makeutl is\n                         --  search for the base name though, and if needed\n                         --  check later that we found the correct file.\n \n-                        Source := Find_Source\n-                          (In_Tree          => File.Tree,\n-                           Project          => File.Project,\n-                           Base_Name        => Main_Id,\n-                           Index            => File.Index,\n-                           In_Imported_Only => True);\n+                        declare\n+                           Sources : constant Source_Ids :=\n+                                       Find_All_Sources\n+                                         (In_Tree          => File.Tree,\n+                                          Project          => File.Project,\n+                                          Base_Name        => Main_Id,\n+                                          Index            => File.Index,\n+                                          In_Imported_Only => True);\n+\n+                        begin\n+                           if Is_Absolute then\n+                              for J in Sources'Range loop\n+                                 if File_Name_Type (Sources (J).Path.Name) =\n+                                                                    File.File\n+                                 then\n+                                    Source := Sources (J);\n+                                    exit;\n+                                 end if;\n+                              end loop;\n+\n+                           elsif Sources'Length > 1 then\n+\n+                              --  This is only allowed if the units are from\n+                              --  the same multi-unit source file.\n+\n+                              Source := Sources (1);\n+\n+                              for J in 2 .. Sources'Last loop\n+                                 if Sources (J).Path /= Source.Path\n+                                   or else Sources (J).Index = Source.Index\n+                                 then\n+                                    Error_Msg_File_1 := Main_Id;\n+                                    Prj.Err.Error_Msg\n+                                      (Flags, \"several main sources {\",\n+                                       No_Location, File.Project);\n+                                    exit Main_Loop;\n+                                 end if;\n+                              end loop;\n+\n+                           elsif Sources'Length = 1 then\n+                              Source := Sources (Sources'First);\n+                           end if;\n+                        end;\n \n                         if Source = No_Source then\n                            Source := Find_File_Add_Extension\n-                             (File.Tree, Get_Name_String (Main_Id));\n+                                       (File.Tree, Get_Name_String (Main_Id));\n                         end if;\n \n                         if Is_Absolute\n@@ -1883,8 +1920,8 @@ package body Makeutl is\n                   end;\n \n                   J := J - 1;\n-                  exit when J < Names.First;\n-               end loop;\n+                  exit Main_Loop when J < Names.First;\n+               end loop Main_Loop;\n             end if;\n \n             if Total_Errors_Detected > 0 then"}, {"sha": "a50823eec03fe19f8b11312b21c9d02757d08928", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -889,13 +889,115 @@ package body Prj is\n       return Result;\n    end Find_Source;\n \n+   ----------------------\n+   -- Find_All_Sources --\n+   ----------------------\n+\n+   function Find_All_Sources\n+     (In_Tree          : Project_Tree_Ref;\n+      Project          : Project_Id;\n+      In_Imported_Only : Boolean := False;\n+      In_Extended_Only : Boolean := False;\n+      Base_Name        : File_Name_Type;\n+      Index            : Int := 0) return Source_Ids\n+   is\n+      Result : Source_Ids (1 .. 1_000);\n+      Last   : Natural := 0;\n+\n+      type Empty_State is null record;\n+      No_State : Empty_State;\n+\n+      procedure Look_For_Sources\n+        (Proj  : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         State : in out Empty_State);\n+      --  Look for Base_Name in the sources of Proj\n+\n+      ----------------------\n+      -- Look_For_Sources --\n+      ----------------------\n+\n+      procedure Look_For_Sources\n+        (Proj  : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         State : in out Empty_State)\n+      is\n+         Iterator : Source_Iterator;\n+         Src : Source_Id;\n+\n+      begin\n+         State := No_State;\n+\n+         Iterator := For_Each_Source (In_Tree => Tree, Project => Proj);\n+         while Element (Iterator) /= No_Source loop\n+            if Element (Iterator).File = Base_Name\n+              and then (Index = 0\n+                        or else\n+                          (Element (Iterator).Unit /= No_Unit_Index\n+                           and then\n+                           Element (Iterator).Index = Index))\n+            then\n+               Src := Element (Iterator);\n+\n+               --  If the source has been excluded, continue looking. We will\n+               --  get the excluded source only if there is no other source\n+               --  with the same base name that is not locally removed.\n+\n+               if not Element (Iterator).Locally_Removed then\n+                  Last := Last + 1;\n+                  Result (Last) := Src;\n+               end if;\n+            end if;\n+\n+            Next (Iterator);\n+         end loop;\n+      end Look_For_Sources;\n+\n+      procedure For_Imported_Projects is new For_Every_Project_Imported\n+        (State => Empty_State, Action => Look_For_Sources);\n+\n+      Proj : Project_Id;\n+\n+   --  Start of processing for Find_All_Sources\n+\n+   begin\n+      if In_Extended_Only then\n+         Proj := Project;\n+         while Proj /= No_Project loop\n+            Look_For_Sources (Proj, In_Tree, No_State);\n+            exit when Last > 0;\n+            Proj := Proj.Extends;\n+         end loop;\n+\n+      elsif In_Imported_Only then\n+         Look_For_Sources (Project, In_Tree, No_State);\n+\n+         if Last = 0 then\n+            For_Imported_Projects\n+              (By                 => Project,\n+               Tree               => In_Tree,\n+               Include_Aggregated => False,\n+               With_State         => No_State);\n+         end if;\n+\n+      else\n+         Look_For_Sources (No_Project, In_Tree, No_State);\n+      end if;\n+\n+      return Result (1 .. Last);\n+   end Find_All_Sources;\n+\n    ----------\n    -- Hash --\n    ----------\n \n    function Hash is new GNAT.HTable.Hash (Header_Num => Header_Num);\n    --  Used in implementation of other functions Hash below\n \n+   ----------\n+   -- Hash --\n+   ----------\n+\n    function Hash (Name : File_Name_Type) return Header_Num is\n    begin\n       return Hash (Get_Name_String (Name));"}, {"sha": "d0af1a2fda65c67610f55c096bdf84247b984155", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1525,6 +1525,24 @@ package Prj is\n    --  Else it searches in the whole tree.\n    --  If Index is specified, this only search for a source with that index.\n \n+   type Source_Ids is array (Positive range <>) of Source_Id;\n+   No_Sources : constant Source_Ids := (1 .. 0 => No_Source);\n+\n+   function Find_All_Sources\n+     (In_Tree          : Project_Tree_Ref;\n+      Project          : Project_Id;\n+      In_Imported_Only : Boolean := False;\n+      In_Extended_Only : Boolean := False;\n+      Base_Name        : File_Name_Type;\n+      Index            : Int := 0) return Source_Ids;\n+   --  Find all source files with the given name.\n+   --  If In_Extended_Only is True, it will search in project and the project\n+   --     it extends, but not in the imported projects.\n+   --  Elsif In_Imported_Only is True, it will search in project and the\n+   --     projects it imports, but not in the others or in aggregated projects.\n+   --  Else it searches in the whole tree.\n+   --  If Index is specified, this only search for sources with that index.\n+\n    -----------------------\n    -- Project_Tree_Data --\n    -----------------------"}, {"sha": "c7d166923554daf3400dd22942b9a7a9acc69da9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3588,7 +3588,6 @@ package body Sem_Ch12 is\n          Set_Instance_Env (Gen_Unit, Act_Decl_Id);\n          Set_Defining_Unit_Name (Act_Spec, Act_Decl_Name);\n          Set_Is_Generic_Instance (Act_Decl_Id);\n-\n          Set_Generic_Parent (Act_Spec, Gen_Unit);\n \n          --  References to the generic in its own declaration or its body are\n@@ -8171,8 +8170,8 @@ package body Sem_Ch12 is\n \n       Must_Delay : Boolean;\n \n-      function Enclosing_Subp (Id : Entity_Id) return Entity_Id;\n-      --  Find subprogram (if any) that encloses instance and/or generic body\n+      function In_Same_Enclosing_Subp return Boolean;\n+      --  Check whether instance and generic body are within same subprogram.\n \n       function True_Sloc (N : Node_Id) return Source_Ptr;\n       --  If the instance is nested inside a generic unit, the Sloc of the\n@@ -8182,23 +8181,39 @@ package body Sem_Ch12 is\n       --  origin of a node by finding the maximum sloc of any ancestor node.\n       --  Why is this not equivalent to Top_Level_Location ???\n \n-      --------------------\n-      -- Enclosing_Subp --\n-      --------------------\n+      ----------------------------\n+      -- In_Same_Enclosing_Subp --\n+      ----------------------------\n \n-      function Enclosing_Subp (Id : Entity_Id) return Entity_Id is\n+      function In_Same_Enclosing_Subp return Boolean is\n          Scop : Entity_Id;\n+         Subp : Entity_Id;\n \n       begin\n-         Scop := Scope (Id);\n+         Scop := Scope (Act_Id);\n          while Scop /= Standard_Standard\n            and then not Is_Overloadable (Scop)\n          loop\n             Scop := Scope (Scop);\n          end loop;\n \n-         return Scop;\n-      end Enclosing_Subp;\n+         if Scop = Standard_Standard then\n+            return False;\n+         else\n+            Subp := Scop;\n+         end if;\n+\n+         Scop := Scope (Gen_Id);\n+         while Scop /= Standard_Standard loop\n+            if Scop = Subp then\n+               return True;\n+            end if;\n+\n+            Scop := Scope (Scop);\n+         end loop;\n+\n+         return False;\n+      end In_Same_Enclosing_Subp;\n \n       ---------------\n       -- True_Sloc --\n@@ -8255,8 +8270,7 @@ package body Sem_Ch12 is\n                                 and then True_Sloc (N) < Sloc (Orig_Body)))\n           and then Is_In_Main_Unit (Gen_Unit)\n           and then (Scope (Act_Id) = Scope (Gen_Id)\n-                      or else\n-                    Enclosing_Subp (Act_Id) = Enclosing_Subp (Gen_Id)));\n+                      or else In_Same_Enclosing_Subp));\n \n       --  If this is an early instantiation, the freeze node is placed after\n       --  the generic body. Otherwise, if the generic appears in an instance,"}, {"sha": "bf42b0eebc45b53a8a4229b8bdca728000f9927d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -1161,7 +1161,8 @@ package body Sem_Ch13 is\n       procedure Insert_Delayed_Pragma (Prag : Node_Id);\n       --  Insert a postcondition-like pragma into the tree depending on the\n       --  context. Prag must denote one of the following: Pre, Post, Depends,\n-      --  Global or Contract_Cases.\n+      --  Global or Contract_Cases. This procedure is also used for the case\n+      --  of Attach_Handler which has similar requirements for placement.\n \n       --------------------------------\n       -- Decorate_Aspect_And_Pragma --\n@@ -1463,7 +1464,7 @@ package body Sem_Ch13 is\n \n             Check_Restriction_No_Specification_Of_Aspect (Aspect);\n \n-            --  Analyze this aspect (actual analysis is delayed till later)\n+            --  Mark aspect analyzed (actual analysis is delayed till later)\n \n             Set_Analyzed (Aspect);\n             Set_Entity (Aspect, E);\n@@ -1678,6 +1679,12 @@ package body Sem_Ch13 is\n                          Expression => Relocate_Node (Expr))),\n                      Pragma_Name                  => Name_Attach_Handler);\n \n+                  --  We need to insert this pragma into the tree to get proper\n+                  --  processing and to look valid from a placement viewpoint.\n+\n+                  Insert_Delayed_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Dynamic_Predicate, Predicate, Static_Predicate\n \n                when Aspect_Dynamic_Predicate |"}, {"sha": "416eb047f84377ad4fdf0af332ae42bc88a59428", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5ae93e08e17fbe36bfcd1bda8ea24af968a64/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0df5ae93e08e17fbe36bfcd1bda8ea24af968a64", "patch": "@@ -4552,7 +4552,7 @@ package body Sem_Prag is\n \n             --  For pragma case (as opposed to access case), check placement.\n             --  We don't need to do that for aspects, because we have the\n-            --  check that they are apply an appropriate procedure.\n+            --  check that they aspect applies an appropriate procedure.\n \n             if not From_Aspect_Specification (N)\n               and then Parent (N) /= Protected_Definition (Parent (Proc_Scope))\n@@ -6387,12 +6387,11 @@ package body Sem_Prag is\n             Set_Treat_As_Volatile (E);\n \n          else\n-            Error_Pragma_Arg\n-              (\"inappropriate entity for pragma%\", Arg1);\n+            Error_Pragma_Arg (\"inappropriate entity for pragma%\", Arg1);\n          end if;\n \n-         --  The following check are only relevant when SPARK_Mode is on as\n-         --  those are not a standard Ada legality rule. Pragma Volatile can\n+         --  The following check is only relevant when SPARK_Mode is on as\n+         --  this is not a standard Ada legality rule. Pragma Volatile can\n          --  only apply to a full type declaration or an object declaration\n          --  (SPARK RM C.6(1)).\n "}]}