{"sha": "12c2b0adb1afc982d140aae47be336730e1484b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJjMmIwYWRiMWFmYzk4MmQxNDBhYWU0N2JlMzM2NzMwZTE0ODRiMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2010-11-18T14:34:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2010-11-18T14:34:29Z"}, "message": "re PR middle-end/46297 (gfortran.dg/g77/980701-0.f FAILs with -Os -fno-asynchronous-unwind-tables)\n\n\n\tPR middle-end-optimization/46297\n\t* postreload.c (reload_combine_note_store): Deal with embedded\n\tside effects in MEM expressions.\n\n\t* gfortran.dg/pr46297.f: New test.\n\nFrom-SVN: r166905", "tree": {"sha": "1aa8d0cd58fc831d4d7e1f4b79f832849d03932c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa8d0cd58fc831d4d7e1f4b79f832849d03932c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12c2b0adb1afc982d140aae47be336730e1484b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c2b0adb1afc982d140aae47be336730e1484b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c2b0adb1afc982d140aae47be336730e1484b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c2b0adb1afc982d140aae47be336730e1484b1/comments", "author": null, "committer": null, "parents": [{"sha": "d96283a052cc3e9db9c7fc3e1cf3f85632611de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96283a052cc3e9db9c7fc3e1cf3f85632611de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96283a052cc3e9db9c7fc3e1cf3f85632611de2"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "1fbec11aef52a9fe0403c660993ede0d9325f304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12c2b0adb1afc982d140aae47be336730e1484b1", "patch": "@@ -1,3 +1,9 @@\n+2010-11-18  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end-optimization/46297\n+\t* postreload.c (reload_combine_note_store): Deal with embedded\n+\tside effects in MEM expressions.\n+\n 2010-11-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/45089"}, {"sha": "6bbdf3adeff401291d02cb8abca6517a2d0ae39e", "filename": "gcc/postreload.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=12c2b0adb1afc982d140aae47be336730e1484b1", "patch": "@@ -1409,6 +1409,31 @@ reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n \t\t\t\t   GET_MODE (dst));\n       dst = SUBREG_REG (dst);\n     }\n+\n+  /* Some targets do argument pushes without adding REG_INC notes.  */\n+\n+  if (MEM_P (dst))\n+    {\n+      dst = XEXP (dst, 0);\n+      if (GET_CODE (dst) == PRE_INC || GET_CODE (dst) == POST_INC\n+\t  || GET_CODE (dst) == PRE_DEC || GET_CODE (dst) == POST_DEC)\n+\t{\n+\t  regno = REGNO (XEXP (dst, 0));\n+\t  mode = GET_MODE (XEXP (dst, 0));\n+\t  for (i = hard_regno_nregs[regno][mode] - 1 + regno; i >= regno; i--)\n+\t    {\n+\t      /* We could probably do better, but for now mark the register\n+\t\t as used in an unknown fashion and set/clobbered at this\n+\t\t insn.  */\n+\t      reg_state[i].use_index = -1;\n+\t      reg_state[i].store_ruid = reload_combine_ruid;\n+\t      reg_state[i].real_store_ruid = reload_combine_ruid;\n+\t    }\n+\t}\n+      else\n+        return;\n+    }\n+\n   if (!REG_P (dst))\n     return;\n   regno += REGNO (dst);"}, {"sha": "3a6e36a3fe19e6bd786e1a077bf065c8279789aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12c2b0adb1afc982d140aae47be336730e1484b1", "patch": "@@ -1,3 +1,8 @@\n+2010-11-18  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end-optimization/46297\n+\t* gfortran.dg/pr46297.f: New test.\n+\n 2010-11-17  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR middle-end/31490"}, {"sha": "333576064f76a3911125c8d39c8894067e875f07", "filename": "gcc/testsuite/gfortran.dg/pr46297.f", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46297.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c2b0adb1afc982d140aae47be336730e1484b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46297.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46297.f?ref=12c2b0adb1afc982d140aae47be336730e1484b1", "patch": "@@ -0,0 +1,25 @@\n+! { dg-options \"-Os -fno-asynchronous-unwind-tables\" }\n+! { dg-do run }\n+\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      equivalence (r3, s3(2))\n+      equivalence (d3, r3(2))\n+      s1(1) = 1.\n+      s3(1) = 3.\n+      r3(1) = 3.\n+      d3 = 30.\n+      i3 = 3\n+      call x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+      end\n+      subroutine x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      if (s1(1) .ne. 1.) call abort\n+      if (s3(1) .ne. 3.) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (i3 .ne. 3) call abort\n+      end"}]}