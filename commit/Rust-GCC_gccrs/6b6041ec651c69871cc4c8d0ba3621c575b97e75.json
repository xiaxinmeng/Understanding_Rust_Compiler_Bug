{"sha": "6b6041ec651c69871cc4c8d0ba3621c575b97e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2MDQxZWM2NTFjNjk4NzFjYzRjOGQwYmEzNjIxYzU3NWI5N2U3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T07:57:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T07:57:53Z"}, "message": "[multiple changes]\n\n2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Selective_Accept.Add_Accept): Always add\n\tcall to Abort_Undefer, as expected by the runtime.\n\t* s-tasren.adb (Local_Complete_Rendezvous): Replace\n\tDefer_Abort_Nestable by Defer_Abort, since we do not expect abort to be\n\tdeferred at this point. Update comments.\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb, exp_ch5.adb, checks.adb: Minor reformatting.\n\n2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* switch-c.adb, usage.adb, gnat_ugn.texi: Mark -gnates as internal,\n\tremove from doc.\n\nFrom-SVN: r206873", "tree": {"sha": "695e62bceda250d6591337f5ed5f9898a0e29048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/695e62bceda250d6591337f5ed5f9898a0e29048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6041ec651c69871cc4c8d0ba3621c575b97e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6041ec651c69871cc4c8d0ba3621c575b97e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6041ec651c69871cc4c8d0ba3621c575b97e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6041ec651c69871cc4c8d0ba3621c575b97e75/comments", "author": null, "committer": null, "parents": [{"sha": "77a2f3df910f3b32cb0cbc3b6967c229d5680272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a2f3df910f3b32cb0cbc3b6967c229d5680272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a2f3df910f3b32cb0cbc3b6967c229d5680272"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "3feaf3850c93e8a185c16863b27f08f6caa4d507", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -1,3 +1,20 @@\n+2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Selective_Accept.Add_Accept): Always add\n+\tcall to Abort_Undefer, as expected by the runtime.\n+\t* s-tasren.adb (Local_Complete_Rendezvous): Replace\n+\tDefer_Abort_Nestable by Defer_Abort, since we do not expect abort to be\n+\tdeferred at this point. Update comments.\n+\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb, exp_ch5.adb, checks.adb: Minor reformatting.\n+\n+2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb, usage.adb, gnat_ugn.texi: Mark -gnates as internal,\n+\tremove from doc.\n+\n 2014-01-21  Robert Dewar  <dewar@adacore.com>\n \n \t* switch-c.adb, usage.adb, atree.adb, atree.ads: Minor reformatting."}, {"sha": "f49605502cd241d16dd4eeeee90ec2b2ff6428ff", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -1508,7 +1508,7 @@ package body Checks is\n          return;\n       end if;\n \n-      --  Suppress checks if the subtypes are the same. the check must be\n+      --  Suppress checks if the subtypes are the same. The check must be\n       --  preserved in an assignment to a formal, because the constraint is\n       --  given by the actual.\n \n@@ -1552,7 +1552,7 @@ package body Checks is\n       --  the constraints are constants. In this case, we can do the check\n       --  successfully at compile time.\n \n-      --  We skip this check for the case where the node is rewritten`as\n+      --  We skip this check for the case where the node is rewritten as\n       --  an allocator, because it already carries the context subtype,\n       --  and extracting the discriminants from the aggregate is messy.\n \n@@ -1569,7 +1569,7 @@ package body Checks is\n          begin\n             --  S_Typ may not have discriminants in the case where it is a\n             --  private type completed by a default discriminated type. In that\n-            --  case, we need to get the constraints from the underlying_type.\n+            --  case, we need to get the constraints from the underlying type.\n             --  If the underlying type is unconstrained (i.e. has no default\n             --  discriminants) no check is needed.\n "}, {"sha": "aa395866b539e94473312cd9bc08c686ab73f309", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -958,7 +958,7 @@ package body Exp_Ch4 is\n          --    [Deep_]Adjust (Temp.all);\n \n          --  We analyze by hand the new internal allocator to avoid any\n-         --  recursion and inappropriate call to Initialize\n+         --  recursion and inappropriate call to Initialize.\n \n          --  We don't want to remove side effects when the expression must be\n          --  built in place. In the case of a build-in-place function call,\n@@ -1046,8 +1046,7 @@ package body Exp_Ch4 is\n                then\n                   Insert_Action (N,\n                     Make_Attach_Call (\n-                      Obj_Ref =>\n-                        New_Reference_To (Temp, Loc),\n+                      Obj_Ref => New_Reference_To (Temp, Loc),\n                       Ptr_Typ => PtrT));\n                end if;\n "}, {"sha": "b71117bd25273018ce7137201373ea8dc58d78cf", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -1847,11 +1847,11 @@ package body Exp_Ch5 is\n             Set_Etype (Lhs, Lt);\n          end;\n \n-         --  If the Lhs has a private type with unknown discriminants, it\n-         --  may have a full view with discriminants, but those are nameable\n-         --  only in the underlying type, so convert the Rhs to it before\n-         --  potential checking. Convert Lhs as well, otherwise the actual\n-         --  subtype might not be constructible.\n+      --  If the Lhs has a private type with unknown discriminants, it may\n+      --  have a full view with discriminants, but those are nameable only\n+      --  in the underlying type, so convert the Rhs to it before potential\n+      --  checking. Convert Lhs as well, otherwise the actual subtype might\n+      --  not be constructible.\n \n       elsif Has_Unknown_Discriminants (Base_Type (Etype (Lhs)))\n         and then Has_Discriminants (Typ)"}, {"sha": "4fce378b5ea551290cb6342d26fe84564637bcea", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -10339,13 +10339,17 @@ package body Exp_Ch9 is\n          if Present (Handled_Statement_Sequence (Accept_Statement (Alt))) then\n             Null_Body := New_Reference_To (Standard_False, Eloc);\n \n-            if Abort_Allowed then\n-               Call := Make_Procedure_Call_Statement (Eloc,\n-                 Name => New_Reference_To (RTE (RE_Abort_Undefer), Eloc));\n-               Insert_Before (First (Statements (Handled_Statement_Sequence (\n-                 Accept_Statement (Alt)))), Call);\n-               Analyze (Call);\n-            end if;\n+            --  Always add call to Abort_Undefer, since this is what the\n+            --  runtime expects (abort deferred in Selective_Wait).\n+\n+            Call :=\n+              Make_Procedure_Call_Statement (Eloc,\n+                Name => New_Reference_To (RTE (RE_Abort_Undefer), Eloc));\n+            Insert_Before\n+              (First (Statements (Handled_Statement_Sequence\n+                                    (Accept_Statement (Alt)))),\n+               Call);\n+            Analyze (Call);\n \n             PB_Ent :=\n               Make_Defining_Identifier (Eloc,"}, {"sha": "c17ca38184ca232495a455d928bd5c254ec2c9f5", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -3821,12 +3821,6 @@ these errors become warnings (which can be ignored, or suppressed in the usual\n manner). This can be useful in some specialized circumstances such as the\n temporary use of special test software.\n \n-@item -gnates=@var{path}\n-@cindex @option{-gnates=file} (@command{gcc})\n-Only relevant to the SPARK toolset (gnat2why), where gnatprove passes\n-extra switches via a response file to gnat2why via this switch.\n-This switch is otherwise ignored by gcc.\n-\n @item -gnateS\n @cindex @option{-gnateS} (@command{gcc})\n Synonym of @option{-fdump-scos}, kept for backwards compatibility."}, {"sha": "244f9e3d292ec68d52875241d4e13ea4f65afee2", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1992-2012, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -565,13 +565,13 @@ package body System.Tasking.Rendezvous is\n             Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n          end if;\n \n-         Initialization.Defer_Abort_Nestable (Self_Id);\n+         Initialization.Defer_Abort (Self_Id);\n \n       elsif ZCX_By_Default then\n \n          --  With ZCX, aborts are not automatically deferred in handlers\n \n-         Initialization.Defer_Abort_Nestable (Self_Id);\n+         Initialization.Defer_Abort (Self_Id);\n       end if;\n \n       --  We need to clean up any accepts which Self may have been serving when\n@@ -837,7 +837,8 @@ package body System.Tasking.Rendezvous is\n             Uninterpreted_Data := Self_Id.Common.Call.Uninterpreted_Data;\n \n             --  In this case the accept body is not Null_Body. Defer abort\n-            --  until it gets into the accept body.\n+            --  until it gets into the accept body. The compiler has inserted\n+            --  a call to Abort_Undefer as part of the entry expansion.\n \n             pragma Assert (Self_Id.Deferral_Level = 1);\n \n@@ -899,6 +900,8 @@ package body System.Tasking.Rendezvous is\n                Initialization.Defer_Abort_Nestable (Self_Id);\n \n                --  Leave abort deferred until the accept body\n+               --  The compiler has inserted a call to Abort_Undefer as part of\n+               --  the entry expansion.\n             end if;\n \n             STPO.Unlock (Self_Id);\n@@ -970,6 +973,8 @@ package body System.Tasking.Rendezvous is\n \n                   --  We need an extra defer here, to keep abort\n                   --  deferred until we get into the accept body\n+                  --  The compiler has inserted a call to Abort_Undefer as part\n+                  --  of the entry expansion.\n \n                   Initialization.Defer_Abort_Nestable (Self_Id);\n                end if;"}, {"sha": "3043dde4429a134906f9d4f5395a63023e1be615", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -660,10 +660,9 @@ package body Switch.C is\n                   when 'P' =>\n                      Treat_Categorization_Errors_As_Warnings := True;\n \n-                  --  -gnateS (generate SCO information)\n+                  --  -gnates=file (specify extra file switches for gnat2why)\n \n-                  --  Include Source Coverage Obligation information in ALI\n-                  --  files for use by source coverage analysis tools (xcov).\n+                  --  This is an internal switch\n \n                   when 's' =>\n                      if not First_Switch then\n@@ -684,6 +683,11 @@ package body Switch.C is\n \n                      return;\n \n+                  --  -gnateS (generate SCO information)\n+\n+                  --  Include Source Coverage Obligation information in ALI\n+                  --  files for use by source coverage analysis tools (xcov).\n+\n                   when 'S' =>\n                      Generate_SCO := True;\n                      Generate_SCO_Instance_Table := True;"}, {"sha": "4f68440fb1d2f34c85be7e941b5afd51a9f2fecd", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6041ec651c69871cc4c8d0ba3621c575b97e75/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=6b6041ec651c69871cc4c8d0ba3621c575b97e75", "patch": "@@ -236,10 +236,7 @@ begin\n    Write_Switch_Char (\"eP\");\n    Write_Line (\"Pure/Prelaborate errors generate warnings rather than errors\");\n \n-   --  Line for -gnates switch\n-\n-   Write_Switch_Char (\"es=?\");\n-   Write_Line (\"Specify extra switches for gnat2why\");\n+   --  No line for -gnates=? : internal switch\n \n    --  Line for -gnateS switch\n "}]}