{"sha": "512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyYjYyZmIxYmRiM2U3NTgyMDdiNmJmNzJlYjEwMjQ4NDhlOGVjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-01-13T00:37:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-01-13T00:37:06Z"}, "message": "configure.in (i?86-*-beos{pe,elf,}*): Recognize.\n\n        * configure.in (i?86-*-beos{pe,elf,}*): Recognize.\n        * i386/t-beos, i386/x-beos, i386/xm-beos.h: New files.\n        * i386/beos-elf.h, i386/beos-pe.h: New files.\n\n        * Makefile.in (CROSS_SYSTEM_HEADER_DIR): New.\n        * cross-make (SYSTEM_HEADER_DIR): Define using\n        CROSS_SYSTEM_HEADER_DIR.\n\n        * gcc.c (LIBRARY_PATH_ENV): Provide default.\n        (process_command): Use it.\n        (main): Likewise.  Kill trailing = from env vars.\n        (build_search_list): Put it back.\n        * collect2.c (main): Use LIBRARY_PATH_ENV.\n\n        * configure.in (GCC_NEED_DECLARATIONS): Add environ.\n        * toplev.c: Use NEED_DECLARATION_ENVIRON.\n\n        * tm.texi (Frame Layout): Document SMALL_STACK.\n        * c-common.c (c_common_nodes_and_builtins): Check it.\n\n        * system.h: Undef alloca after including glibc's <stdlib.h>,\n        if USE_C_ALLOCA is defined.\n\n        * gcc.c (set_input): New fn.\n        (main): After all input files are compiled, reset the input file\n        info to the first.\n\n        * aclocal.m4 (rindex, index): If already defined, don't attempt\n        to redefine.\n\n        * ginclude/varargs.h: (__va_list__): Define ifndef.\n        * ginclude/stdarg.h: Likewise.\n\n        * ginclude/stddef.h (__WCHAR_TYPE__) [BEOS]: Use int\n        instead of unsigned char.\n\n        * hash.h (true, false, boolean): Undef before enum.\n\nFrom-SVN: r31366", "tree": {"sha": "d3dff74afbeffac820b068280d9d819772186d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3dff74afbeffac820b068280d9d819772186d74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/comments", "author": null, "committer": null, "parents": [{"sha": "6bb88f3be6ef0f0ad8b7a3819ddefafa63283e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb88f3be6ef0f0ad8b7a3819ddefafa63283e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb88f3be6ef0f0ad8b7a3819ddefafa63283e76"}], "stats": {"total": 798, "additions": 764, "deletions": 34}, "files": [{"sha": "fc7f2d0fdc7c7b60db895390f890d1dbe09a2ade", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -209,6 +209,9 @@ RANLIB_TEST_FOR_TARGET = \\\n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n \n+# Default cross SYSTEM_HEADER_DIR, to be overridden by targets.\n+CROSS_SYSTEM_HEADER_DIR = $(tooldir)/sys-include\n+\n # Control whether to run fixproto.\n STMP_FIXPROTO = stmp-fixproto\n "}, {"sha": "300127f29313eff5859f96109a1637f5bd935ff2", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -35,11 +35,15 @@ AC_CACHE_VAL(gcc_cv_decl_needed_$1,\n #include <unistd.h>\n #endif\n #ifndef HAVE_RINDEX\n+#ifndef rindex\n #define rindex strrchr\n #endif\n+#endif\n #ifndef HAVE_INDEX\n+#ifndef index\n #define index strchr\n #endif\n+#endif\n $2],\n [char *(*pfn) = (char *(*)) $1],\n eval \"gcc_cv_decl_needed_$1=no\", eval \"gcc_cv_decl_needed_$1=yes\")])"}, {"sha": "b4353506e0870ba2306bec0e7d259ef721e741a4", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -3650,10 +3650,12 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n      Declare _exit just to mark it as volatile.  */\n   if (! no_builtins && ! no_nonansi_builtins)\n     {\n+#ifndef SMALL_STACK\n       temp = builtin_function (\"alloca\", ptr_ftype_sizetype,\n \t\t\t       BUILT_IN_ALLOCA, BUILT_IN_NORMAL, NULL_PTR);\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n+#endif\n       temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS,\n \t\t\t       BUILT_IN_NORMAL, NULL_PTR);\n       /* Suppress error if redefined as a non-function.  */"}, {"sha": "cb5e2fa1d47d6c4208d3138ef963d38e0a31e14c", "filename": "gcc/collect2.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -42,6 +42,10 @@ Boston, MA 02111-1307, USA.  */\n                lib$get_current_invo_context(decc$$get_vfork_jmpbuf()) : -1)\n #endif /* VMS */\n \n+#ifndef LIBRARY_PATH_ENV\n+#define LIBRARY_PATH_ENV \"LIBRARY_PATH\"\n+#endif\n+\n #define COLLECT\n \n #include \"collect2.h\"\n@@ -1353,9 +1357,9 @@ main (argc, argv)\n       if (ptr)\n \tfprintf (stderr, \"COMPILER_PATH       = %s\\n\", ptr);\n \n-      ptr = getenv (\"LIBRARY_PATH\");\n+      ptr = getenv (LIBRARY_PATH_ENV);\n       if (ptr)\n-\tfprintf (stderr, \"LIBRARY_PATH        = %s\\n\", ptr);\n+\tfprintf (stderr, \"%-20s= %s\\n\", LIBRARY_PATH_ENV, ptr);\n \n       fprintf (stderr, \"\\n\");\n     }"}, {"sha": "44524df5a9905fd49324ba5ffb6e0ce876007733", "filename": "gcc/config/i386/beos-elf.h", "status": "added", "additions": 436, "deletions": 0, "changes": 436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -0,0 +1,436 @@\n+/* Definitions for Intel x86 running BeOS\n+   Copyright (C) 1998-99, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <i386/i386.h>\t/* Base i386 target machine definitions */\n+#include <i386/att.h>\t/* Use the i386 AT&T assembler syntax */\n+#include <svr4.h>\t/* some common stuff */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (i386 BeOS/ELF)\");\n+\n+/* Change debugging to Dwarf2.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* The SVR4 ABI for the i386 says that records and unions are returned\n+   in memory.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \" #\"\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   This is only used for PIC code.  See comments by the `casesi' insn in\n+   i386.md for an explanation of the expression this outputs. */\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+\n+/* Indicate that jump tables go in the text section.  This is\n+   necessary when compiling PIC code.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n+\n+/* Copy this from the svr4 specifications... */\n+/* Define the register numbers to be used in Dwarf debugging information.\n+   The SVR4 reference port C compiler uses the following register numbers\n+   in its Dwarf output code:\n+\t0 for %eax (gnu regno = 0)\n+\t1 for %ecx (gnu regno = 2)\n+\t2 for %edx (gnu regno = 1)\n+\t3 for %ebx (gnu regno = 3)\n+\t4 for %esp (gnu regno = 7)\n+\t5 for %ebp (gnu regno = 6)\n+\t6 for %esi (gnu regno = 4)\n+\t7 for %edi (gnu regno = 5)\n+   The following three DWARF register numbers are never generated by\n+   the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4\n+   believes these numbers have these meanings.\n+\t8  for %eip    (no gnu equivalent)\n+\t9  for %eflags (no gnu equivalent)\n+\t10 for %trapno (no gnu equivalent)\n+   It is not at all clear how we should number the FP stack registers\n+   for the x86 architecture.  If the version of SDB on x86/svr4 were\n+   a bit less brain dead with respect to floating-point then we would\n+   have a precedent to follow with respect to DWARF register numbers\n+   for x86 FP registers, but the SDB on x86/svr4 is so completely\n+   broken with respect to FP registers that it is hardly worth thinking\n+   of it as something to strive for compatibility with.\n+   The version of x86/svr4 SDB I have at the moment does (partially)\n+   seem to believe that DWARF register number 11 is associated with\n+   the x86 register %st(0), but that's about all.  Higher DWARF\n+   register numbers don't seem to be associated with anything in\n+   particular, and even for DWARF regno 11, SDB only seems to under-\n+   stand that it should say that a variable lives in %st(0) (when\n+   asked via an `=' command) if we said it was in DWARF regno 11,\n+   but SDB still prints garbage when asked for the value of the\n+   variable in question (via a `/' command).\n+   (Also note that the labels SDB prints for various FP stack regs\n+   when doing an `x' command are all wrong.)\n+   Note that these problems generally don't affect the native SVR4\n+   C compiler because it doesn't allow the use of -O with -g and\n+   because when it is *not* optimizing, it allocates a memory\n+   location for each floating-point variable, and the memory\n+   location is what gets described in the DWARF AT_location\n+   attribute for the variable in question.\n+   Regardless of the severe mental illness of the x86/svr4 SDB, we\n+   do something sensible here and we use the following DWARF\n+   register numbers.  Note that these are all stack-top-relative\n+   numbers.\n+\t11 for %st(0) (gnu regno = 8)\n+\t12 for %st(1) (gnu regno = 9)\n+\t13 for %st(2) (gnu regno = 10)\n+\t14 for %st(3) (gnu regno = 11)\n+\t15 for %st(4) (gnu regno = 12)\n+\t16 for %st(5) (gnu regno = 13)\n+\t17 for %st(6) (gnu regno = 14)\n+\t18 for %st(7) (gnu regno = 15)\n+*/\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+((n) == 0 ? 0 \\\n+ : (n) == 1 ? 2 \\\n+ : (n) == 2 ? 1 \\\n+ : (n) == 3 ? 3 \\\n+ : (n) == 4 ? 6 \\\n+ : (n) == 5 ? 7 \\\n+ : (n) == 6 ? 5 \\\n+ : (n) == 7 ? 4 \\\n+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \\\n+ : (-1))\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%edx\\n\",\t\t\\\n+\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", LPREFIX, (LABELNO));\t\\\n+      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+  \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+   \n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 1\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+    \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__ELF__ -D__BEOS__ -D__INTEL__ -D_X86_=1 \\\n+-D__stdcall=__attribute__((__stdcall__)) \\\n+-D__cdecl=__attribute__((__cdecl__)) \\\n+-D__declspec(x)=__attribute__((x)) \\\n+-Asystem(beos)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%(cpp_cpu) %{!no-fPIC:%{!no-fpic:-D__PIC__ -D__pic__}}\"\n+\n+/* BeOS uses lots of multichars, so don't warn about them unless the\n+   user explicitly asks for the warnings with -Wmultichar.  Note that\n+   CC1_SPEC is used for both cc1 and cc1plus. */\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%{!no-fpic:%{!fPIC:-fpic}} %{!Wmultichar: -Wno-multichar} %(cc1_cpu) %{profile:-p}\"\n+\n+#undef CC1PLUS_SPEC\n+#define CC1PLUS_SPEC \"%{!Wctor-dtor-privacy:-Wno-ctor-dtor-privacy}\"\n+\n+/* Provide a LINK_SPEC appropriate for BeOS.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time. */\n+\n+/* If ELF is the default format, we should not use /lib/elf. */\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"%{!o*:-o %b} -m elf_i386_be -shared -Bsymbolic %{nostart:-e 0}\"\n+\n+/* Provide start and end file specs appropriate to glibc.  */\n+\n+/* LIB_SPEC for BeOS */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"-lnet -lroot\"\n+\n+/* gcc runtime lib is built into libroot.so on BeOS */\n+/* ??? This is gonna be lovely when the next release of gcc has \n+   some new symbol in, so that links start failing.  */\n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"\"\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \"crti.o%s crtbegin.o%s %{!nostart:start_dyn.o%s}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n+\n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\"\n+\n+/* A C statement (sans semicolon) to output to the stdio stream\n+   FILE the assembler definition of uninitialized global DECL named\n+   NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n+   Try to use asm_output_aligned_bss to implement this macro.  */\n+\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n+\n+   This is used to align code labels according to Intel recommendations.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \\\n+  if ((LOG)!=0) \\\n+    if ((MAX_SKIP)==0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG)); \\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP))\n+#endif\n+\n+/*\n+ * Support for __declspec(dllimport) & __declspec(dllexport).\n+ */\n+\n+/* We don't care about dllimport.  */\n+\n+#define TARGET_NOP_FUN_DLLIMPORT 1\n+\n+/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n+   is a valid machine specific attribute for DECL.\n+   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n+\n+#undef VALID_MACHINE_DECL_ATTRIBUTE\n+#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n+  i386_pe_valid_decl_attribute_p (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n+extern int i386_pe_valid_decl_attribute_p ();\n+\n+/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n+   is a valid machine specific attribute for TYPE.\n+   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n+\n+#undef VALID_MACHINE_TYPE_ATTRIBUTE\n+#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \\\n+  i386_pe_valid_type_attribute_p (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n+extern int i386_pe_valid_type_attribute_p ();\n+\n+#define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n+  i386_pe_merge_decl_attributes ((OLD), (NEW))\n+extern union tree_node *i386_pe_merge_decl_attributes ();\n+\n+/* Used to implement dllexport overriding dllimport semantics.  It's also used\n+   to handle vtables - the first pass won't do anything because\n+   DECL_CONTEXT (DECL) will be 0 so i386_pe_dll{ex,im}port_p will return 0.\n+   It's also used to handle dllimport override semantics.  */\n+#if 0\n+#define REDO_SECTION_INFO_P(DECL) \\\n+  ((DECL_MACHINE_ATTRIBUTES (DECL) != NULL_TREE) \\\n+   || (TREE_CODE (DECL) == VAR_DECL && DECL_VIRTUAL_P (DECL)))\n+#else\n+#define REDO_SECTION_INFO_P(DECL) 1\n+#endif\n+\n+/* Used only here locally.  If the decl has been exported, emit the \n+   necessary assembly.  */\n+\n+#define ASM_EXPORT_DECL(FILE, NAME, DECL)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((DECL) && i386_pe_dllexport_p (DECL))\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \".section .exports\\n\");\t\t\t\\\n+\tfprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n+        assemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfprintf ((FILE), \"\\\"\\n.previous\\n\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ASM_EXPORT_DECL(FILE, NAME, DECL);\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Write the extra assembler code needed to declare an object properly.  */\n+\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ASM_EXPORT_DECL(FILE, NAME, DECL);\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        size_directive_output = 1;\t\t\t\t\t\\\n+        fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+        assemble_name (FILE, NAME);\t\t\t\t\t\\\n+        putc (',', FILE);\t\t\t\t\t\t\\\n+        fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n+                 int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n+        fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Similarly for COMMON symbols.  */\n+\n+#undef ASM_OUTPUT_ALIGNED_COMMON\n+#undef ASM_OUTPUT_ALIGNED_DECL_COMMON\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ASM_EXPORT_DECL(FILE, NAME, DECL);\t\t\t\t\t\\\n+    fprintf ((FILE), \"\\t%s\\t\", COMMON_ASM_OP);\t\t\t\t\\\n+    assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+    fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n+  } while (0)\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#undef ASM_OUTPUT_ALIGNED_DECL_LOCAL\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t     \\\n+  do {\t\t\t\t\t\t\t\t\t     \\\n+    fprintf ((FILE), \"\\t%s\\t\", LOCAL_ASM_OP);\t\t\t\t     \\\n+    assemble_name ((FILE), (NAME));\t\t\t\t\t     \\\n+    fprintf ((FILE), \"\\n\");\t\t\t\t\t\t     \\\n+    ASM_OUTPUT_ALIGNED_DECL_COMMON((FILE), (DECL), (NAME), (SIZE), (ALIGN)); \\\n+  } while (0)\n+\n+/* This macro gets just the user-specified name out of the string in a\n+   SYMBOL_REF.  Discard trailing @[NUM] encoded by ENCODE_SECTION_INFO.  */\n+/* Unused except to let winnt.c compile.  */\n+\n+#undef  STRIP_NAME_ENCODING\n+#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) ((VAR) = (SYMBOL_NAME))\n+\n+/* For native compiler, use standard BeOS include file search paths\n+   rooted in /boot/develop/headers.  For a cross compiler, don't\n+   expect the host to use the BeOS directory scheme, and instead look\n+   for the BeOS include files relative to TOOL_INCLUDE_DIR.  Yes, we\n+   use ANSI string concatenation here (FIXME) */\n+\n+#ifndef CROSS_COMPILE\n+#undef INCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS \\\n+    { \\\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\\\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\\\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1}, \\\n+    { \"/boot/develop/headers/be/add-ons/graphics\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/devel\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/translation\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/mail\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/gnu\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/drivers\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/opengl\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/game\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/support\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/storage\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/kernel\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/net\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/midi\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/media\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/interface\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/device\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/app\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/cpp\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/posix\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/precompiled\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers\", 0, 0, 0 }, \\\n+    { 0, 0, 0, 0 } \\\n+    };\n+#else /* CROSS_COMPILE */\n+#undef\tINCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS\t\t\t\t\\\n+    { \\\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\\\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\\\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1}, \\\n+    { CROSS_INCLUDE_DIR \"/be/add-ons/graphics\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/devel\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/translation\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/mail\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/gnu\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/drivers\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/opengl\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/game\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/support\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/storage\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/kernel\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/net\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/midi\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/media\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/interface\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/device\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/app\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/cpp\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/posix\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be/precompiled\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR \"/be\", 0, 0, 0 },\\\n+    { CROSS_INCLUDE_DIR , 0, 0, 0 }, \\\n+    { 0, 0, 0, 0 } \\\n+    };\n+#endif\n+\n+/* Whee.  LIBRARY_PATH is Be's LD_LIBRARY_PATH, which of course will\n+   cause nasty problems if we override it.  */\n+#define LIBRARY_PATH_ENV        \"BELIBRARIES\"\n+\n+/* BeOS doesn't have a separate math library.  */\n+#define MATH_LIBRARY \"\"\n+\n+/* BeOS headers are C++-aware (and often use C++).  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* Define this macro if in some cases global symbols from one translation\n+   unit may not be bound to undefined symbols in another translation unit\n+   without user intervention.  For instance, under Microsoft Windows\n+   symbols must be explicitly imported from shared libraries (DLLs).  */\n+#define MULTIPLE_SYMBOL_SPACES"}, {"sha": "52af628eb813561d817db86e0cd072c522d0c476", "filename": "gcc/config/i386/beos-pe.h", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fbeos-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fbeos-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-pe.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -0,0 +1,118 @@\n+/* Operating system specific defines for BeOS target.\n+   Copyright (C) 1995-99, 2000 Free Software Foundation, Inc.\n+   Contributed by Fred Fish (fnf@cygnus.com), based on cygwin32.h.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA. */\n+\n+\n+/* Get all the PE support related things.  */\n+#include \"cygwin32.h\"\n+\n+/* Change debugging to Dwarf2.  */\n+#undef SDB_DEBUGGING_INFO\n+#undef DBX_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* Support the __declspec keyword by turning them into attributes.\n+   We currently only support: dllimport and dllexport.\n+   Note that the current way we do this may result in a collision with\n+   predefined attributes later on.  This can be solved by using one attribute,\n+   say __declspec__, and passing args to it.  The problem with that approach\n+   is that args are not accumulated: each new appearance would clobber any\n+   existing args.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__BEOS__ -D__INTEL__ -Di386 -D_X86_=1 \\\n+-D__stdcall=__attribute__((__stdcall__)) \\\n+-D__cdecl=__attribute__((__cdecl__)) \\\n+-D__declspec(x)=__attribute__((x)) \\\n+-Asystem(beos) -Acpu(i386) -Amachine(i386)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"-lroot -lbe -ltracker -lmedia -lnet -lnetdev -ldevice -lmidi -lgame -latalk -lmail\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"/boot/develop/lib/x86/start_dyn.o /boot/develop/lib/x86/init_term_dyn.o /boot/develop/lib/x86/glue-noinit.a\"\n+\n+/* Temporary. */\n+#define LINKERSCRIPT_SPEC \"%{!T:-Tbeos.ld}\"\n+\n+/* No math library. */\n+#define MATH_LIBRARY \"\"\n+\n+/* Don't ignore dllimport for functions.  */\n+#undef TARGET_NOP_FUN_DLLIMPORT\n+#define TARGET_NOP_FUN_DLLIMPORT 0\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\n+\n+/* Disable DWARF2 unwind info; this doesn't appear to work on\n+   COFF-based targets right now. (I want to say \"duh?\" but someone\n+   will correct me later. */\n+\n+#undef INCOMING_RETURN_ADDR_RTX\n+#undef DWARF2_UNWIND_INFO\n+\f\n+/* In the current BeOS release (DR9), use of gcc's builtin alloca is a\n+   problem because of the relatively low default stack size of 256K with no\n+   way to expand it.  So anything we compile for the BeOS target should not\n+   use the builtin alloca.  Defining SMALL_STACK disables builtin alloca.  */\n+\n+#define SMALL_STACK\n+\n+/* Yuck. */\n+#ifndef CROSS_COMPILE\n+#undef INCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS \\\n+    { \\\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\\\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\\\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1}, \\\n+    { \"/boot/develop/headers/be/add-ons/graphics\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/translation\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/mail\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/gnu\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/drivers\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/game\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/support\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/storage\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/kernel\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/net\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/midi\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/media\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/interface\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/device\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/app\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/cpp\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/posix\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be/precompiled\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers/be\", 0, 0, 0 },\\\n+    { \"/boot/develop/headers\", 0, 0, 0 }, \\\n+    { 0, 0, 0, 0 } \\\n+    };\n+#endif\n+\n+/* Whee.  LIBRARY_PATH is Be's LD_LIBRARY_PATH, which of course will\n+   cause nasty problems if we override it.  */\n+#define LIBRARY_PATH_ENV\t\"BELIBRARIES\""}, {"sha": "5d73a2361c2cfd18a05578cb1a2fc711615b2132", "filename": "gcc/config/i386/t-beos", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-beos?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -0,0 +1,14 @@\n+# Do not build libgcc1.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# There are system headers elsewhere, but these are the ones that\n+# we are most likely to want to apply any fixes to.\n+SYSTEM_HEADER_DIR = /boot/develop/headers/posix\n+CROSS_SYSTEM_HEADER_DIR = $(tooldir)/sys-include/posix\n+\n+# Use the system assert.h\n+INSTALL_ASSERT_H =\n+\n+winnt.o: $(srcdir)/config/i386/winnt.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/i386/winnt.c"}, {"sha": "37b8ccac9cfee8d7c460dc955afaba4e9cd6d281", "filename": "gcc/config/i386/x-beos", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fx-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fx-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-beos?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -0,0 +1,9 @@\n+# configuration for BeOS\n+INSTALL=install -c\n+\n+# Show we need to use the C version of ALLOCA\n+ALLOCA=alloca.o\n+# Use it regardless of whether we are compiling with gcc or not.\n+USE_ALLOCA= `echo \"${ALLOCA}\"`\n+USE_HOST_ALLOCA= `echo ${HOST_PREFIX}${HOST_ALLOCA}`\n+SUBDIR_USE_ALLOCA = `if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi`"}, {"sha": "e190ba1b56904353e1f2725e093d2b67150985b8", "filename": "gcc/config/i386/xm-beos.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-beos.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -0,0 +1,64 @@\n+/* Configuration for GNU C-compiler for BeOS host.\n+   Copyright (C) 1997-99, 2000 Free Software Foundation, Inc.\n+   Contributed by Fred Fish (fnf@cygnus.com), based on xm-rs6000.h\n+   by Richard Kenner (kenner@vlsi1.ultra.nyu.edu).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <i386/xm-i386.h>\n+\n+/* Arguments to use with `exit'.  */\n+\n+#define\tSUCCESS_EXIT_CODE\t0\n+#define\tFATAL_EXIT_CODE\t\t33\n+\n+/* Include <sys/wait.h> to define the exit status access macros.  */\n+#ifndef inhibit_libc\n+#include <sys/wait.h>\n+#endif\n+\n+#define\tONLY_INT_FIELDS\n+\n+/* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n+\n+#undef bcopy\n+#define bcopy(s,d,n)\tmemmove((d),(s),(n))\n+#undef bzero\n+#define bzero(d,n)\tmemset((d),0,(n))\n+#undef bcmp\n+#define bcmp(l,r,n)\tmemcmp((l),(r),(n))\n+#undef index\n+#define index\t\tstrchr\n+#undef rindex\n+#define rindex\t\tstrrchr\n+\n+/* BeOS is closer to USG than BSD */\n+\n+#define USG\n+\n+/* Define various things that the BeOS host has. */\n+\n+#ifndef HAVE_VPRINTF\n+#define HAVE_VPRINTF\n+#endif\n+#ifndef HAVE_PUTENV\n+#define HAVE_PUTENV\n+#endif\n+#define HAVE_RENAME\n+\n+#define STDC_HEADERS 1"}, {"sha": "4dbcf86f627c3fe783ffdb4c73916b4a5a22b653", "filename": "gcc/configure.in", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -409,7 +409,7 @@ AC_FUNC_MMAP\n \n GCC_NEED_DECLARATIONS(bcopy bzero bcmp \\\n \tindex rindex getenv atol sbrk abort atof strerror getcwd getwd \\\n-\tstrsignal putc_unlocked fputs_unlocked strstr)\n+\tstrsignal putc_unlocked fputs_unlocked strstr environ)\n \n GCC_NEED_DECLARATIONS(malloc realloc calloc free, [\n #ifdef HAVE_MALLOC_H\n@@ -1276,6 +1276,27 @@ changequote([,])dnl\n \t\ttm_file=i386/i386-aout.h\n \t\ttmake_file=i386/t-i386bare\n \t\t;;\n+changequote(,)dnl\n+\ti[34567]86-*-beospe*)\n+changequote([,])dnl\n+\t\txm_file=i386/xm-beos.h\n+\t\txm_defines=\"USE_C_ALLOCA\"\n+\t\ttmake_file=i386/t-beos\n+\t\ttm_file=i386/beos-pe.h\n+\t\txmake_file=i386/x-beos\n+\t\textra_objs=winnt.o\n+\t\t;;\n+changequote(,)dnl\n+\ti[34567]86-*-beoself* | i[34567]86-*-beos*)\n+changequote([,])dnl\n+\t\txm_file=i386/xm-beos.h\n+\t\ttmake_file='i386/t-beos i386/t-crtpic'\n+\t\ttm_file=i386/beos-elf.h\n+\t\txmake_file=i386/x-beos\n+\t\textra_objs=winnt.o\n+\t\textra_parts='crtbegin.o crtend.o'\n+\t\tfixincludes=Makefile.in\n+\t\t;;\n changequote(,)dnl\n \ti[34567]86-*-bsdi* | i[34567]86-*-bsd386*)\n changequote([,])dnl"}, {"sha": "fef123c40cd4f97a37ac0264213e93269b873a81", "filename": "gcc/cross-make", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -5,7 +5,7 @@ LIBGCC1 = $(CROSS_LIBGCC1)\n \n # Dir to search for system headers.  Normally /usr/include.\n # Use CROSS_INCLUDE_DIR not TOOL_INCLUDE_DIR for other vendor's headers.\n-SYSTEM_HEADER_DIR = $(tooldir)/sys-include\n+SYSTEM_HEADER_DIR = $(CROSS_SYSTEM_HEADER_DIR)\n \n # Don't try to compile the things we can't compile.\n ALL = all.cross"}, {"sha": "8f81369d1780a82d545263b675dec369659b4c56", "filename": "gcc/gcc.c", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -82,6 +82,11 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n+/* Most every one is fine with LIBRARY_PATH.  For some, it conflicts.  */\n+#ifndef LIBRARY_PATH_ENV\n+#define LIBRARY_PATH_ENV \"LIBRARY_PATH\"\n+#endif\n+\n #ifndef HAVE_KILL\n #define kill(p,s) raise(s)\n #endif\n@@ -240,6 +245,7 @@ static int execute\t\t\tPROTO ((void));\n static void unused_prefix_warnings\tPROTO ((struct path_prefix *));\n static void clear_args\t\t\tPROTO ((void));\n static void fatal_error\t\t\tPROTO ((int));\n+static void set_input\t\t\tPROTO ((const char *));\n \f\n /* Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n@@ -1892,6 +1898,7 @@ build_search_list (paths, prefix, check_dir_p)\n   struct prefix_list *pprefix;\n \n   obstack_grow (&collect_obstack, prefix, strlen (prefix));\n+  obstack_1grow (&collect_obstack, '=');\n \n   for (pprefix = paths->plist; pprefix != 0; pprefix = pprefix->next)\n     {\n@@ -2941,7 +2948,7 @@ process_command (argc, argv)\n \t}\n     }\n \n-  GET_ENV_PATH_LIST (temp, \"LIBRARY_PATH\");\n+  GET_ENV_PATH_LIST (temp, LIBRARY_PATH_ENV);\n   if (temp && *cross_compile == '0')\n     {\n       const char *startp, *endp;\n@@ -4935,6 +4942,37 @@ is_directory (path1, path2, linker)\n \n   return (stat (path, &st) >= 0 && S_ISDIR (st.st_mode));\n }\n+\n+/* Set up the various global variables to indicate that we're processing\n+   the input file named FILENAME.  */\n+\n+static void\n+set_input (filename)\n+     const char *filename;\n+{\n+  register const char *p;\n+\n+  input_filename = filename;\n+  input_filename_length = strlen (input_filename);\n+  \n+  input_basename = input_filename;\n+  for (p = input_filename; *p; p++)\n+    if (IS_DIR_SEPARATOR (*p))\n+      input_basename = p + 1;\n+\n+  /* Find a suffix starting with the last period,\n+     and set basename_length to exclude that suffix.  */\n+  basename_length = strlen (input_basename);\n+  p = input_basename + basename_length;\n+  while (p != input_basename && *p != '.') --p;\n+  if (*p == '.' && p != input_basename)\n+    {\n+      basename_length = p - input_basename;\n+      input_suffix = p + 1;\n+    }\n+  else\n+    input_suffix = \"\";\n+}\n \f\n /* On fatal signals, delete all the temporary files.  */\n \n@@ -5335,9 +5373,8 @@ main (argc, argv)\n \n       /* Tell do_spec what to substitute for %i.  */\n \n-      input_filename = infiles[i].name;\n-      input_filename_length = strlen (input_filename);\n       input_file_number = i;\n+      set_input (infiles[i].name);\n \n       /* Use the same thing in %o, unless cp->spec says otherwise.  */\n \n@@ -5352,31 +5389,12 @@ main (argc, argv)\n \t{\n \t  /* Ok, we found an applicable compiler.  Run its spec.  */\n \t  /* First say how much of input_filename to substitute for %b  */\n-\t  register const char *p;\n \t  int len;\n \n \t  if (cp->spec[0][0] == '#')\n \t    error (\"%s: %s compiler not installed on this system\",\n \t\t   input_filename, &cp->spec[0][1]);\n \n-\t  input_basename = input_filename;\n-\t  for (p = input_filename; *p; p++)\n-\t    if (IS_DIR_SEPARATOR (*p))\n-\t      input_basename = p + 1;\n-\n-\t  /* Find a suffix starting with the last period,\n-\t     and set basename_length to exclude that suffix.  */\n-\t  basename_length = strlen (input_basename);\n-\t  p = input_basename + basename_length;\n-\t  while (p != input_basename && *p != '.') --p;\n-\t  if (*p == '.' && p != input_basename)\n-\t    {\n-\t      basename_length = p - input_basename;\n-\t      input_suffix = p + 1;\n-\t    }\n-\t  else\n-\t    input_suffix = \"\";\n-\n \t  len = 0;\n \t  for (j = 0; j < sizeof cp->spec / sizeof cp->spec[0]; j++)\n \t    if (cp->spec[j])\n@@ -5418,6 +5436,12 @@ main (argc, argv)\n       clear_failure_queue ();\n     }\n \n+  /* Reset the output file name to the first input file name, for use\n+     with %b in LINK_SPEC on a target that prefers not to emit a.out\n+     by default.  */\n+  if (n_infiles > 0)\n+    set_input (infiles[0].name);\n+\n   if (error_count == 0)\n     {\n       /* Make sure INPUT_FILE_NUMBER points to first available open\n@@ -5442,8 +5466,8 @@ main (argc, argv)\n \t}\n       /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables\n \t for collect.  */\n-      putenv_from_prefixes (&exec_prefixes, \"COMPILER_PATH=\");\n-      putenv_from_prefixes (&startfile_prefixes, \"LIBRARY_PATH=\");\n+      putenv_from_prefixes (&exec_prefixes, \"COMPILER_PATH\");\n+      putenv_from_prefixes (&startfile_prefixes, LIBRARY_PATH_ENV);\n \n       value = do_spec (link_command_spec);\n       if (value < 0)"}, {"sha": "3337065a06c94b92c574d61223aaf999bb5b179f", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -105,7 +105,10 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST\n /* The macro _VA_LIST_T_H is used in the Bull dpx2  */\n #ifndef _VA_LIST_T_H\n+/* The macro __va_list__ is used by BeOS.  */\n+#ifndef __va_list__\n typedef __gnuc_va_list va_list;\n+#endif /* not __va_list__ */\n #endif /* not _VA_LIST_T_H */\n #endif /* not _VA_LIST */\n #endif /* not _VA_LIST_DEFINED */\n@@ -121,6 +124,9 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST_T_H\n #define _VA_LIST_T_H\n #endif\n+#ifndef __va_list__\n+#define __va_list__\n+#endif\n \n #endif /* not _VA_LIST_, except on certain systems */\n "}, {"sha": "ae1037fd09d842e0a61f80c706301caabf212dae", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -274,12 +274,8 @@ typedef _BSD_RUNE_T_ rune_t;\n #endif\n \n #ifndef __WCHAR_TYPE__\n-#ifdef __BEOS__\n-#define __WCHAR_TYPE__ unsigned char\n-#else\n #define __WCHAR_TYPE__ int\n #endif\n-#endif\n #ifndef __cplusplus\n typedef __WCHAR_TYPE__ wchar_t;\n #endif"}, {"sha": "210b9674743f041bffcf7ebce715e34f138c2af0", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -108,7 +108,10 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST\n /* The macro _VA_LIST_T_H is used in the Bull dpx2  */\n #ifndef _VA_LIST_T_H\n+/* The macro __va_list__ is used by BeOS.  */\n+#ifndef __va_list__\n typedef __gnuc_va_list va_list;\n+#endif /* not __va_list__ */\n #endif /* not _VA_LIST_T_H */\n #endif /* not _VA_LIST */\n #endif /* not _VA_LIST_DEFINED */\n@@ -124,6 +127,9 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST_T_H\n #define _VA_LIST_T_H\n #endif\n+#ifndef __va_list__\n+#define __va_list__\n+#endif\n \n #endif /* not _VA_LIST_, except on certain systems */\n "}, {"sha": "b42502b8108868574efe8a0df75b60bd97f38f1f", "filename": "gcc/hash.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -25,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"obstack.h\"\n \n+#undef false\n+#undef true\n+#undef boolean\n+\n typedef enum {false, true} boolean;\n \n typedef PTR hash_table_key;"}, {"sha": "5d31b45f2acb622a3176f3042329bb6b39723a88", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -176,6 +176,11 @@ extern int errno;\n \n #ifdef HAVE_STDLIB_H\n # include <stdlib.h>\n+# ifdef USE_C_ALLOCA\n+/* Note that systems that use glibc have a <stdlib.h> that includes\n+   <alloca.h> that defines alloca, so let USE_C_ALLOCA override this. */\n+# undef alloca\n+#endif\n #endif\n \n #ifdef HAVE_UNISTD_H"}, {"sha": "385a0dcb940e3ccaf337b06a61d2e97f32d41452", "filename": "gcc/tm.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -461,7 +461,7 @@ The environment variable @code{GCC_EXEC_PREFIX}, if any.\n \n @item\n The directories specified by the environment variable @code{LIBRARY_PATH}\n-(native only, cross compilers do not use this).\n+(or port-specific name; native only, cross compilers do not use this).\n \n @item\n The macro @code{STANDARD_EXEC_PREFIX}.\n@@ -2281,6 +2281,12 @@ during virtual register instantiation.\n \n You only need to define this macro if you want to support call frame\n debugging information like that provided by DWARF 2.\n+\n+@findex SMALL_STACK\n+@item SMALL_STACK\n+Define this macro if the stack size for the target is very small.  This\n+has the effect of disabling gcc's builtin @samp{alloca}, though\n+@samp{__builtin_alloca} is not affected.\n @end table\n \n @node Stack Checking\n@@ -7784,4 +7790,12 @@ in the system math library, or @samp{\"\"} if the target does not have a\n separate math library.\n \n You need only define this macro if the default of @samp{\"-lm\"} is wrong.\n+\n+@findex LIBRARY_PATH_ENV\n+@item LIBRARY_PATH_ENV\n+Define this macro as a C string constant for the environment variable that\n+specifies where the linker should look for libraries.\n+\n+You need only define this macro if the default of @samp{\"LIBRARY_PATH\"}\n+is wrong.\n @end table"}, {"sha": "9c4a184a79cb10cc15367e7e64dd52ced8debcbe", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b62fb1bdb3e758207b6bf72eb1024848e8ec6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=512b62fb1bdb3e758207b6bf72eb1024848e8ec6", "patch": "@@ -138,7 +138,7 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n #endif\n \n-#if ! (defined (VMS) || defined (OS2))\n+#ifdef NEED_DECLARATION_ENVIRON\n extern char **environ;\n #endif\n extern char *version_string;"}]}