{"sha": "e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljZjczMTZjYjNkMDI5YWU4YmQzNzA4YjAxNmIzZGZjYmU0MzI1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-22T13:06:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-22T13:06:33Z"}, "message": "tree-ssa-loop-im.c (memory_references): Drop all_refs_in_loop.\n\n2013-03-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (memory_references): Drop all_refs_in_loop.\n\t(gather_mem_refs_in_loops): Do not compute it.\n\t(analyze_memory_references): Do not allocate it.\n\t(tree_ssa_lim_finalize): Do not free it.\n\t(for_all_locs_in_loop): Do not query all_refs_in_loop.\n\nFrom-SVN: r196960", "tree": {"sha": "e8ee280c4208e5c709eb002651e86dc5771fd94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ee280c4208e5c709eb002651e86dc5771fd94d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f046e81b8609ffc8e1a4fcd34699cff6b3f2937d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f046e81b8609ffc8e1a4fcd34699cff6b3f2937d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f046e81b8609ffc8e1a4fcd34699cff6b3f2937d"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "60878ad279c85de56a2fa89fa52d610e6a445701", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "patch": "@@ -1,3 +1,11 @@\n+2013-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (memory_references): Drop all_refs_in_loop.\n+\t(gather_mem_refs_in_loops): Do not compute it.\n+\t(analyze_memory_references): Do not allocate it.\n+\t(tree_ssa_lim_finalize): Do not free it.\n+\t(for_all_locs_in_loop): Do not query all_refs_in_loop.\n+\n 2013-03-22  Richard Biener  <rguenther@suse.de>\n \n \t* is-a.h (as_a): Use gcc_checking_assert."}, {"sha": "4f09f8aaf5ff8e90ce4feff85e6a5dd463b6adc5", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "patch": "@@ -164,10 +164,6 @@ static struct\n   /* The set of memory references stored in each loop.  */\n   vec<bitmap> refs_stored_in_loop;\n \n-  /* The set of memory references accessed in each loop, including\n-     subloops.  */\n-  vec<bitmap> all_refs_in_loop;\n-\n   /* The set of memory references stored in each loop, including subloops .  */\n   vec<bitmap> all_refs_stored_in_loop;\n \n@@ -1649,8 +1645,6 @@ gather_mem_refs_in_loops (void)\n   FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)\n     {\n       /* Finalize the overall touched references (including subloops).  */\n-      bitmap_ior_into (memory_accesses.all_refs_in_loop[loop->num],\n-\t\t       memory_accesses.refs_in_loop[loop->num]);\n       bitmap_ior_into (memory_accesses.all_refs_stored_in_loop[loop->num],\n \t\t       memory_accesses.refs_stored_in_loop[loop->num]);\n \n@@ -1660,8 +1654,6 @@ gather_mem_refs_in_loops (void)\n       if (outer == current_loops->tree_root)\n \tcontinue;\n \n-      bitmap_ior_into (memory_accesses.all_refs_in_loop[outer->num],\n-\t\t       memory_accesses.all_refs_in_loop[loop->num]);\n       bitmap_ior_into (memory_accesses.all_refs_stored_in_loop[outer->num],\n \t\t       memory_accesses.all_refs_stored_in_loop[loop->num]);\n     }\n@@ -1683,7 +1675,6 @@ analyze_memory_references (void)\n \n   memory_accesses.refs_in_loop.create (number_of_loops ());\n   memory_accesses.refs_stored_in_loop.create (number_of_loops ());\n-  memory_accesses.all_refs_in_loop.create (number_of_loops ());\n   memory_accesses.all_refs_stored_in_loop.create (number_of_loops ());\n \n   for (i = 0; i < number_of_loops (); i++)\n@@ -1693,8 +1684,6 @@ analyze_memory_references (void)\n       empty = BITMAP_ALLOC (&lim_bitmap_obstack);\n       memory_accesses.refs_stored_in_loop.quick_push (empty);\n       empty = BITMAP_ALLOC (&lim_bitmap_obstack);\n-      memory_accesses.all_refs_in_loop.quick_push (empty);\n-      empty = BITMAP_ALLOC (&lim_bitmap_obstack);\n       memory_accesses.all_refs_stored_in_loop.quick_push (empty);\n     }\n \n@@ -1749,12 +1738,8 @@ for_all_locs_in_loop (struct loop *loop, mem_ref_p ref, FN fn)\n {\n   unsigned i;\n   mem_ref_loc_p loc;\n-  bitmap refs = memory_accesses.all_refs_in_loop[loop->num];\n   struct loop *subloop;\n \n-  if (!bitmap_bit_p (refs, ref->id))\n-    return false;\n-\n   if (ref->accesses_in_loop.length () > (unsigned) loop->num)\n     FOR_EACH_VEC_ELT (ref->accesses_in_loop[loop->num], i, loc)\n       if (fn (loc))\n@@ -2630,7 +2615,6 @@ tree_ssa_lim_finalize (void)\n \n   memory_accesses.refs_in_loop.release ();\n   memory_accesses.refs_stored_in_loop.release ();\n-  memory_accesses.all_refs_in_loop.release ();\n   memory_accesses.all_refs_stored_in_loop.release ();\n \n   if (memory_accesses.ttae_cache)"}]}