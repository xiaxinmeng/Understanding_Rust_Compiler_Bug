{"sha": "06ce0a66557f7989a945733e9e51250a7d05f266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjZTBhNjY1NTdmNzk4OWE5NDU3MzNlOWU1MTI1MGE3ZDA1ZjI2Ng==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T12:04:55Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T12:38:04Z"}, "message": "Lookup the canonical path for code-generation\n\nThis uses the mappings for canonical paths to give more meaning ful names\nto the flat GENERIC IR. This will also be used to cleanup the duplications\nin code-generation for two distinct methods to compile functions.\n\nThis code will also be needed to enhance name mangling.", "tree": {"sha": "911e6ddd87f3e824d4e3cbe0bdc4cace4656db45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911e6ddd87f3e824d4e3cbe0bdc4cace4656db45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ce0a66557f7989a945733e9e51250a7d05f266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ce0a66557f7989a945733e9e51250a7d05f266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ce0a66557f7989a945733e9e51250a7d05f266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ce0a66557f7989a945733e9e51250a7d05f266/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c828514d779745a329ee95d7c533db1d773972b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c828514d779745a329ee95d7c533db1d773972b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c828514d779745a329ee95d7c533db1d773972b"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "7608599391c4062dc8c8e03365f051d81e607668", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ce0a66557f7989a945733e9e51250a7d05f266/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ce0a66557f7989a945733e9e51250a7d05f266/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=06ce0a66557f7989a945733e9e51250a7d05f266", "patch": "@@ -52,7 +52,12 @@ class CompileInherentImplItem : public HIRCompileBase\n     ::Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n     Bexpression *value = CompileExpr::Compile (constant.get_expr (), ctx);\n \n-    std::string ident = self->get_name () + \"_\" + constant.get_identifier ();\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      constant.get_mappings ().get_crate_num (),\n+      constant.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ident = canonical_path->get ();\n     Bexpression *const_expr = ctx->get_backend ()->named_constant_expression (\n       type, constant.get_identifier (), value, constant.get_locus ());\n \n@@ -121,13 +126,18 @@ class CompileInherentImplItem : public HIRCompileBase\n     if (function.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string fn_identifier\n-      = self->get_name () + \"_\" + function.get_function_name ();\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      function.get_mappings ().get_crate_num (),\n+      function.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ir_symbol_name\n+      = canonical_path->get () + fntype->subst_as_string ();\n     std::string asm_name\n       = ctx->mangle_impl_item (self, fntype, function.get_function_name ());\n \n     Bfunction *fndecl\n-      = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n+      = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n     ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n "}, {"sha": "719d51c57266e3a4fa2c82bea5653118908e5713", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ce0a66557f7989a945733e9e51250a7d05f266/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ce0a66557f7989a945733e9e51250a7d05f266/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=06ce0a66557f7989a945733e9e51250a7d05f266", "patch": "@@ -53,7 +53,12 @@ class CompileItem : public HIRCompileBase\n     Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n     Bexpression *value = CompileExpr::Compile (var.get_expr (), ctx);\n \n-    std::string name = var.get_identifier ();\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      var.get_mappings ().get_crate_num (), var.get_mappings ().get_nodeid (),\n+      &canonical_path));\n+\n+    std::string name = canonical_path->get ();\n     std::string asm_name = ctx->mangle_item (resolved_type, name);\n \n     bool is_external = false;\n@@ -81,8 +86,15 @@ class CompileItem : public HIRCompileBase\n     ::Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n     Bexpression *value = CompileExpr::Compile (constant.get_expr (), ctx);\n \n-    Bexpression *const_expr = ctx->get_backend ()->named_constant_expression (\n-      type, constant.get_identifier (), value, constant.get_locus ());\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      constant.get_mappings ().get_crate_num (),\n+      constant.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ident = canonical_path->get ();\n+    Bexpression *const_expr\n+      = ctx->get_backend ()->named_constant_expression (type, ident, value,\n+\t\t\t\t\t\t\tconstant.get_locus ());\n \n     ctx->push_const (const_expr);\n     ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n@@ -149,7 +161,13 @@ class CompileItem : public HIRCompileBase\n     if (is_main_fn || function.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string ir_symbol_name = function.get_function_name ();\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      function.get_mappings ().get_crate_num (),\n+      function.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ir_symbol_name\n+      = canonical_path->get () + fntype->subst_as_string ();\n     std::string asm_name = function.get_function_name ();\n \n     // we don't mangle the main fn since we haven't implemented the main shim"}]}