{"sha": "499769ec33c515c433e407ee25729018457ed295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5NzY5ZWMzM2M1MTVjNDMzZTQwN2VlMjU3MjkwMTg0NTdlZDI5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:48:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:48:37Z"}, "message": "[multiple changes]\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Check_Anonymous_Access_Components): Create extra formals\n\tassociated with anonymous access to subprograms.\n\n2011-08-02  Geert Bosch  <bosch@adacore.com>\n\n\t* opt.ads\n\t(Preprocessing_Symbol_Defs): Move from Prepcomp.Symbol_Definitions.\n\t(Preprocessing_Symbol_Last): Move from Prepcomp.Last_Definition.\n\t* prepcomp.adb (Symbol_Definitions, Last_Definition): Move to opt.ads\n\t(Add_Symbol_Definition): Move to switch-c.adb\n\t(Process_Command_Line_Symbol_Definitions): Adjust references to above.\n\t* prepcomp.ads: Remove dependency on Ada.Unchecked_Deallocation.\n\t(Add_Symbol_Definition): Move to switch-c.adb.\n\t* sem_ch13.adb, sem_prag.adb: Add dependency on Warnsw.\n\t* sem_warn.adb\n\t(Set_Dot_Warning_Switch, Set_GNAT_Mode_Warnings, Set_Warning_Switch):\n\tMove to warnsw.adb.\n\t* sem_warn.ads (Warn_On_Record_Holes, Warn_On_Overridden_Size,\n\tSet_Dot_Warning_Switch, Set_GNAT_Mode_Warnings, Set_Warning_Switch):\n\tMove to warnsw.adb.\n\t* switch-c.adb: Replace dependency on Prepcomp and Sem_Warn by Warnsw.\n\t(Add_Symbol_Definition): Moved from Prepcomp.\n\t* switch-c.ads: Update copyright notice. Use String_List instead of\n\tArgument_List, removing dependency on System.OS_Lib.\n\nFrom-SVN: r177140", "tree": {"sha": "c6e6b59ced72e2b75ef882519a53e462c94ac52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e6b59ced72e2b75ef882519a53e462c94ac52b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/499769ec33c515c433e407ee25729018457ed295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499769ec33c515c433e407ee25729018457ed295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499769ec33c515c433e407ee25729018457ed295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499769ec33c515c433e407ee25729018457ed295/comments", "author": null, "committer": null, "parents": [{"sha": "aa1e353a7a34599e90bf9b62b3a463914e242a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1e353a7a34599e90bf9b62b3a463914e242a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1e353a7a34599e90bf9b62b3a463914e242a6c"}], "stats": {"total": 1131, "additions": 610, "deletions": 521}, "files": [{"sha": "0d78dae154e7cc7e040fc39495a39de763326b57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -1,3 +1,30 @@\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Anonymous_Access_Components): Create extra formals\n+\tassociated with anonymous access to subprograms.\n+\n+2011-08-02  Geert Bosch  <bosch@adacore.com>\n+\n+\t* opt.ads\n+\t(Preprocessing_Symbol_Defs): Move from Prepcomp.Symbol_Definitions.\n+\t(Preprocessing_Symbol_Last): Move from Prepcomp.Last_Definition.\n+\t* prepcomp.adb (Symbol_Definitions, Last_Definition): Move to opt.ads\n+\t(Add_Symbol_Definition): Move to switch-c.adb\n+\t(Process_Command_Line_Symbol_Definitions): Adjust references to above.\n+\t* prepcomp.ads: Remove dependency on Ada.Unchecked_Deallocation.\n+\t(Add_Symbol_Definition): Move to switch-c.adb.\n+\t* sem_ch13.adb, sem_prag.adb: Add dependency on Warnsw.\n+\t* sem_warn.adb\n+\t(Set_Dot_Warning_Switch, Set_GNAT_Mode_Warnings, Set_Warning_Switch):\n+\tMove to warnsw.adb.\n+\t* sem_warn.ads (Warn_On_Record_Holes, Warn_On_Overridden_Size,\n+\tSet_Dot_Warning_Switch, Set_GNAT_Mode_Warnings, Set_Warning_Switch):\n+\tMove to warnsw.adb.\n+\t* switch-c.adb: Replace dependency on Prepcomp and Sem_Warn by Warnsw.\n+\t(Add_Symbol_Definition): Moved from Prepcomp.\n+\t* switch-c.ads: Update copyright notice. Use String_List instead of\n+\tArgument_List, removing dependency on System.OS_Lib.\n+\n 2011-08-02  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): issue an error in formal"}, {"sha": "bd97c0df80722cae1c91a6303cc31cb4bf38cf60", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -1077,6 +1077,13 @@ package Opt is\n    --  GNAT\n    --  Set by switch -gnatep=. The file name of the preprocessing data file.\n \n+   Preprocessing_Symbol_Defs : String_List_Access := new String_List (1 .. 4);\n+   --  An extensible array to temporarily stores symbol definitions specified\n+   --  on the command line with -gnateD switches.\n+\n+   Preprocessing_Symbol_Last : Natural := 0;\n+   --  Index of last symbol definition in array Symbol_Definitions\n+\n    Print_Generated_Code : Boolean := False;\n    --  GNAT\n    --  Set to True to enable output of generated code in source form. This"}, {"sha": "2da21df3c42a253bf83503b25b444bf7e8591565", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -23,8 +23,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Unchecked_Deallocation;\n-\n with Errout;   use Errout;\n with Lib.Writ; use Lib.Writ;\n with Opt;      use Opt;\n@@ -55,20 +53,6 @@ package body Prepcomp is\n    No_Mapping : Prep.Symbol_Table.Instance;\n    pragma Warnings (On);\n \n-   type String_Ptr is access String;\n-   type String_Array is array (Positive range <>) of String_Ptr;\n-   type String_Array_Ptr is access String_Array;\n-\n-   procedure Free is\n-      new Ada.Unchecked_Deallocation (String_Array, String_Array_Ptr);\n-\n-   Symbol_Definitions : String_Array_Ptr := new String_Array (1 .. 4);\n-   --  An extensible array to temporarily stores symbol definitions specified\n-   --  on the command line with -gnateD switches.\n-\n-   Last_Definition : Natural := 0;\n-   --  Index of last symbol definition in array Symbol_Definitions\n-\n    type Preproc_Data is record\n       Mapping      : Symbol_Table.Instance;\n       File_Name    : File_Name_Type := No_File;\n@@ -161,31 +145,6 @@ package body Prepcomp is\n       end loop;\n    end Add_Dependencies;\n \n-   ---------------------------\n-   -- Add_Symbol_Definition --\n-   ---------------------------\n-\n-   procedure Add_Symbol_Definition (Def : String) is\n-   begin\n-      --  If Symbol_Definitions is not large enough, double it\n-\n-      if Last_Definition = Symbol_Definitions'Last then\n-         declare\n-            New_Symbol_Definitions : constant String_Array_Ptr :=\n-              new String_Array (1 .. 2 * Last_Definition);\n-\n-         begin\n-            New_Symbol_Definitions (Symbol_Definitions'Range) :=\n-              Symbol_Definitions.all;\n-            Free (Symbol_Definitions);\n-            Symbol_Definitions := New_Symbol_Definitions;\n-         end;\n-      end if;\n-\n-      Last_Definition := Last_Definition + 1;\n-      Symbol_Definitions (Last_Definition) := new String'(Def);\n-   end Add_Symbol_Definition;\n-\n    -------------------\n    -- Check_Symbols --\n    -------------------\n@@ -740,12 +699,12 @@ package body Prepcomp is\n       --  The command line definitions have been stored temporarily in\n       --  array Symbol_Definitions.\n \n-      for Index in 1 .. Last_Definition loop\n+      for Index in 1 .. Preprocessing_Symbol_Last loop\n          --  Check each symbol definition, fail immediately if syntax is not\n          --  correct.\n \n          Check_Command_Line_Symbol_Definition\n-           (Definition => Symbol_Definitions (Index).all,\n+           (Definition => Preprocessing_Symbol_Defs (Index).all,\n             Data       => Symbol_Data);\n          Found := False;\n "}, {"sha": "1dc6205d68eb43d276cd775082462367011ab6f5", "filename": "gcc/ada/prepcomp.ads", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fprepcomp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fprepcomp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.ads?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,10 +33,6 @@ package Prepcomp is\n    --  Add dependencies on the preprocessing data file and the\n    --  preprocessing definition files, if any.\n \n-   procedure Add_Symbol_Definition (Def : String);\n-   --  Add a symbol definition from the command line.\n-   --  Fail if definition is illegal.\n-\n    procedure Check_Symbols;\n    --  Check if there are preprocessing symbols on the command line and\n    --  set preprocessing if there are some: all files are preprocessed with"}, {"sha": "dadb7b1b5303ea74a8beaed6cfc090dab17cba93", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -60,6 +60,7 @@ with Targparm; use Targparm;\n with Ttypes;   use Ttypes;\n with Tbuild;   use Tbuild;\n with Urealp;   use Urealp;\n+with Warnsw;   use Warnsw;\n \n with GNAT.Heap_Sort_G;\n "}, {"sha": "36563286d8733bacfc9ee972b87097e3b1e9a290", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -18760,7 +18760,7 @@ package body Sem_Ch3 is\n             --  an access_to_object or an access_to_subprogram.\n \n             if Present (Acc_Def) then\n-               if Nkind  (Acc_Def) = N_Access_Function_Definition then\n+               if Nkind (Acc_Def) = N_Access_Function_Definition then\n                   Type_Def :=\n                     Make_Access_Function_Definition (Loc,\n                       Parameter_Specifications =>\n@@ -18799,10 +18799,15 @@ package body Sem_Ch3 is\n             Insert_Before (Typ_Decl, Decl);\n             Analyze (Decl);\n \n-            --  If an access to object, Preserve entity of designated type,\n+            --  If an access to subprogram, create the extra formals\n+\n+            if Present (Acc_Def) then\n+               Create_Extra_Formals (Designated_Type (Anon_Access));\n+\n+            --  If an access to object, preserve entity of designated type,\n             --  for ASIS use, before rewriting the component definition.\n \n-            if No (Acc_Def) then\n+            else\n                declare\n                   Desig : Entity_Id;\n "}, {"sha": "27264662c467b5a0c4e8e34b192447902443239d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -84,6 +84,7 @@ with Uintp;    use Uintp;\n with Uname;    use Uname;\n with Urealp;   use Urealp;\n with Validsw;  use Validsw;\n+with Warnsw;   use Warnsw;\n \n package body Sem_Prag is\n "}, {"sha": "fdd32ba0ba4ee14e1b1ac4d0a3a1c3e7213fc83e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 423, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -3034,429 +3034,6 @@ package body Sem_Warn is\n       end if;\n    end Referenced_As_Out_Parameter_Check_Spec;\n \n-   ----------------------------\n-   -- Set_Dot_Warning_Switch --\n-   ----------------------------\n-\n-   function Set_Dot_Warning_Switch (C : Character) return Boolean is\n-   begin\n-      case C is\n-         when 'a' =>\n-            Warn_On_Assertion_Failure           := True;\n-\n-         when 'A' =>\n-            Warn_On_Assertion_Failure           := False;\n-\n-         when 'b' =>\n-            Warn_On_Biased_Representation       := True;\n-\n-         when 'B' =>\n-            Warn_On_Biased_Representation       := False;\n-\n-         when 'c' =>\n-            Warn_On_Unrepped_Components         := True;\n-\n-         when 'C' =>\n-            Warn_On_Unrepped_Components         := False;\n-\n-         when 'e' =>\n-            Address_Clause_Overlay_Warnings     := True;\n-            Check_Unreferenced                  := True;\n-            Check_Unreferenced_Formals          := True;\n-            Check_Withs                         := True;\n-            Constant_Condition_Warnings         := True;\n-            Elab_Warnings                       := True;\n-            Implementation_Unit_Warnings        := True;\n-            Ineffective_Inline_Warnings         := True;\n-            List_Inherited_Aspects              := True;\n-            Warn_On_Ada_2005_Compatibility      := True;\n-            Warn_On_Ada_2012_Compatibility      := True;\n-            Warn_On_All_Unread_Out_Parameters   := True;\n-            Warn_On_Assertion_Failure           := True;\n-            Warn_On_Assumed_Low_Bound           := True;\n-            Warn_On_Bad_Fixed_Value             := True;\n-            Warn_On_Biased_Representation       := True;\n-            Warn_On_Constant                    := True;\n-            Warn_On_Deleted_Code                := True;\n-            Warn_On_Dereference                 := True;\n-            Warn_On_Export_Import               := True;\n-            Warn_On_Hiding                      := True;\n-            Warn_On_Modified_Unread             := True;\n-            Warn_On_No_Value_Assigned           := True;\n-            Warn_On_Non_Local_Exception         := True;\n-            Warn_On_Object_Renames_Function     := True;\n-            Warn_On_Obsolescent_Feature         := True;\n-            Warn_On_Overlap                     := True;\n-            Warn_On_Overridden_Size             := True;\n-            Warn_On_Parameter_Order             := True;\n-            Warn_On_Questionable_Missing_Parens := True;\n-            Warn_On_Record_Holes                := True;\n-            Warn_On_Redundant_Constructs        := True;\n-            Warn_On_Reverse_Bit_Order           := True;\n-            Warn_On_Unchecked_Conversion        := True;\n-            Warn_On_Unordered_Enumeration_Type  := True;\n-            Warn_On_Unrecognized_Pragma         := True;\n-            Warn_On_Unrepped_Components         := True;\n-            Warn_On_Warnings_Off                := True;\n-\n-         when 'g' =>\n-            Set_GNAT_Mode_Warnings;\n-\n-         when 'h' =>\n-            Warn_On_Record_Holes                := True;\n-\n-         when 'H' =>\n-            Warn_On_Record_Holes                := False;\n-\n-         when 'i' =>\n-            Warn_On_Overlap                     := True;\n-\n-         when 'I' =>\n-            Warn_On_Overlap                     := False;\n-\n-         when 'l' =>\n-            List_Inherited_Aspects              := True;\n-\n-         when 'L' =>\n-            List_Inherited_Aspects              := False;\n-\n-         when 'm' =>\n-            Warn_On_Suspicious_Modulus_Value    := True;\n-\n-         when 'M' =>\n-            Warn_On_Suspicious_Modulus_Value    := False;\n-\n-         when 'o' =>\n-            Warn_On_All_Unread_Out_Parameters   := True;\n-\n-         when 'O' =>\n-            Warn_On_All_Unread_Out_Parameters   := False;\n-\n-         when 'p' =>\n-            Warn_On_Parameter_Order             := True;\n-\n-         when 'P' =>\n-            Warn_On_Parameter_Order             := False;\n-\n-         when 'r' =>\n-            Warn_On_Object_Renames_Function     := True;\n-\n-         when 'R' =>\n-            Warn_On_Object_Renames_Function     := False;\n-\n-         when 's' =>\n-            Warn_On_Overridden_Size             := True;\n-\n-         when 'S' =>\n-            Warn_On_Overridden_Size             := False;\n-\n-         when 'u' =>\n-            Warn_On_Unordered_Enumeration_Type  := True;\n-\n-         when 'U' =>\n-            Warn_On_Unordered_Enumeration_Type  := False;\n-\n-         when 'v' =>\n-            Warn_On_Reverse_Bit_Order           := True;\n-\n-         when 'V' =>\n-            Warn_On_Reverse_Bit_Order           := False;\n-\n-         when 'w' =>\n-            Warn_On_Warnings_Off                := True;\n-\n-         when 'W' =>\n-            Warn_On_Warnings_Off                := False;\n-\n-         when 'x' =>\n-            Warn_On_Non_Local_Exception         := True;\n-\n-         when 'X' =>\n-            Warn_On_Non_Local_Exception         := False;\n-            No_Warn_On_Non_Local_Exception      := True;\n-\n-         when others =>\n-            return False;\n-      end case;\n-\n-      return True;\n-   end Set_Dot_Warning_Switch;\n-\n-   ----------------------------\n-   -- Set_GNAT_Mode_Warnings --\n-   ----------------------------\n-\n-   procedure Set_GNAT_Mode_Warnings is\n-   begin\n-      Address_Clause_Overlay_Warnings     := True;\n-      Check_Unreferenced                  := True;\n-      Check_Unreferenced_Formals          := True;\n-      Check_Withs                         := True;\n-      Constant_Condition_Warnings         := True;\n-      Elab_Warnings                       := False;\n-      Implementation_Unit_Warnings        := False;\n-      Ineffective_Inline_Warnings         := True;\n-      List_Inherited_Aspects              := False;\n-      Warn_On_Ada_2005_Compatibility      := True;\n-      Warn_On_Ada_2012_Compatibility      := True;\n-      Warn_On_All_Unread_Out_Parameters   := False;\n-      Warn_On_Assertion_Failure           := True;\n-      Warn_On_Assumed_Low_Bound           := True;\n-      Warn_On_Bad_Fixed_Value             := True;\n-      Warn_On_Biased_Representation       := True;\n-      Warn_On_Constant                    := True;\n-      Warn_On_Deleted_Code                := False;\n-      Warn_On_Dereference                 := False;\n-      Warn_On_Export_Import               := True;\n-      Warn_On_Hiding                      := False;\n-      Warn_On_Modified_Unread             := True;\n-      Warn_On_No_Value_Assigned           := True;\n-      Warn_On_Non_Local_Exception         := False;\n-      Warn_On_Object_Renames_Function     := False;\n-      Warn_On_Obsolescent_Feature         := True;\n-      Warn_On_Questionable_Missing_Parens := True;\n-      Warn_On_Redundant_Constructs        := True;\n-      Warn_On_Reverse_Bit_Order           := False;\n-      Warn_On_Object_Renames_Function     := True;\n-      Warn_On_Unchecked_Conversion        := True;\n-      Warn_On_Unordered_Enumeration_Type  := False;\n-      Warn_On_Unrecognized_Pragma         := True;\n-      Warn_On_Unrepped_Components         := False;\n-      Warn_On_Warnings_Off                := False;\n-   end Set_GNAT_Mode_Warnings;\n-\n-   ------------------------\n-   -- Set_Warning_Switch --\n-   ------------------------\n-\n-   function Set_Warning_Switch (C : Character) return Boolean is\n-   begin\n-      case C is\n-         when 'a' =>\n-            Check_Unreferenced                  := True;\n-            Check_Unreferenced_Formals          := True;\n-            Check_Withs                         := True;\n-            Constant_Condition_Warnings         := True;\n-            Implementation_Unit_Warnings        := True;\n-            Ineffective_Inline_Warnings         := True;\n-            List_Inherited_Aspects              := True;\n-            Warn_On_Ada_2005_Compatibility      := True;\n-            Warn_On_Ada_2012_Compatibility      := True;\n-            Warn_On_Assertion_Failure           := True;\n-            Warn_On_Assumed_Low_Bound           := True;\n-            Warn_On_Bad_Fixed_Value             := True;\n-            Warn_On_Biased_Representation       := True;\n-            Warn_On_Constant                    := True;\n-            Warn_On_Export_Import               := True;\n-            Warn_On_Modified_Unread             := True;\n-            Warn_On_No_Value_Assigned           := True;\n-            Warn_On_Non_Local_Exception         := True;\n-            Warn_On_Object_Renames_Function     := True;\n-            Warn_On_Obsolescent_Feature         := True;\n-            Warn_On_Parameter_Order             := True;\n-            Warn_On_Questionable_Missing_Parens := True;\n-            Warn_On_Redundant_Constructs        := True;\n-            Warn_On_Reverse_Bit_Order           := True;\n-            Warn_On_Unchecked_Conversion        := True;\n-            Warn_On_Unrecognized_Pragma         := True;\n-            Warn_On_Unrepped_Components         := True;\n-\n-         when 'A' =>\n-            Address_Clause_Overlay_Warnings     := False;\n-            Check_Unreferenced                  := False;\n-            Check_Unreferenced_Formals          := False;\n-            Check_Withs                         := False;\n-            Constant_Condition_Warnings         := False;\n-            Elab_Warnings                       := False;\n-            Implementation_Unit_Warnings        := False;\n-            Ineffective_Inline_Warnings         := False;\n-            List_Inherited_Aspects              := False;\n-            Warn_On_Ada_2005_Compatibility      := False;\n-            Warn_On_Ada_2012_Compatibility      := False;\n-            Warn_On_All_Unread_Out_Parameters   := False;\n-            Warn_On_Assertion_Failure           := False;\n-            Warn_On_Assumed_Low_Bound           := False;\n-            Warn_On_Bad_Fixed_Value             := False;\n-            Warn_On_Biased_Representation       := False;\n-            Warn_On_Constant                    := False;\n-            Warn_On_Deleted_Code                := False;\n-            Warn_On_Dereference                 := False;\n-            Warn_On_Export_Import               := False;\n-            Warn_On_Hiding                      := False;\n-            Warn_On_Modified_Unread             := False;\n-            Warn_On_No_Value_Assigned           := False;\n-            Warn_On_Non_Local_Exception         := False;\n-            Warn_On_Object_Renames_Function     := False;\n-            Warn_On_Obsolescent_Feature         := False;\n-            Warn_On_Overlap                     := False;\n-            Warn_On_Overridden_Size             := False;\n-            Warn_On_Parameter_Order             := False;\n-            Warn_On_Record_Holes                := False;\n-            Warn_On_Questionable_Missing_Parens := False;\n-            Warn_On_Redundant_Constructs        := False;\n-            Warn_On_Reverse_Bit_Order           := False;\n-            Warn_On_Unchecked_Conversion        := False;\n-            Warn_On_Unordered_Enumeration_Type  := False;\n-            Warn_On_Unrecognized_Pragma         := False;\n-            Warn_On_Unrepped_Components         := False;\n-            Warn_On_Warnings_Off                := False;\n-\n-            No_Warn_On_Non_Local_Exception      := True;\n-\n-         when 'b' =>\n-            Warn_On_Bad_Fixed_Value             := True;\n-\n-         when 'B' =>\n-            Warn_On_Bad_Fixed_Value             := False;\n-\n-         when 'c' =>\n-            Constant_Condition_Warnings         := True;\n-\n-         when 'C' =>\n-            Constant_Condition_Warnings         := False;\n-\n-         when 'd' =>\n-            Warn_On_Dereference                 := True;\n-\n-         when 'D' =>\n-            Warn_On_Dereference                 := False;\n-\n-         when 'e' =>\n-            Warning_Mode                        := Treat_As_Error;\n-\n-         when 'f' =>\n-            Check_Unreferenced_Formals          := True;\n-\n-         when 'F' =>\n-            Check_Unreferenced_Formals          := False;\n-\n-         when 'g' =>\n-            Warn_On_Unrecognized_Pragma         := True;\n-\n-         when 'G' =>\n-            Warn_On_Unrecognized_Pragma         := False;\n-\n-         when 'h' =>\n-            Warn_On_Hiding                      := True;\n-\n-         when 'H' =>\n-            Warn_On_Hiding                      := False;\n-\n-         when 'i' =>\n-            Implementation_Unit_Warnings        := True;\n-\n-         when 'I' =>\n-            Implementation_Unit_Warnings        := False;\n-\n-         when 'j' =>\n-            Warn_On_Obsolescent_Feature         := True;\n-\n-         when 'J' =>\n-            Warn_On_Obsolescent_Feature         := False;\n-\n-         when 'k' =>\n-            Warn_On_Constant                    := True;\n-\n-         when 'K' =>\n-            Warn_On_Constant                    := False;\n-\n-         when 'l' =>\n-            Elab_Warnings                       := True;\n-\n-         when 'L' =>\n-            Elab_Warnings                       := False;\n-\n-         when 'm' =>\n-            Warn_On_Modified_Unread             := True;\n-\n-         when 'M' =>\n-            Warn_On_Modified_Unread             := False;\n-\n-         when 'n' =>\n-            Warning_Mode                        := Normal;\n-\n-         when 'o' =>\n-            Address_Clause_Overlay_Warnings     := True;\n-\n-         when 'O' =>\n-            Address_Clause_Overlay_Warnings     := False;\n-\n-         when 'p' =>\n-            Ineffective_Inline_Warnings         := True;\n-\n-         when 'P' =>\n-            Ineffective_Inline_Warnings         := False;\n-\n-         when 'q' =>\n-            Warn_On_Questionable_Missing_Parens := True;\n-\n-         when 'Q' =>\n-            Warn_On_Questionable_Missing_Parens := False;\n-\n-         when 'r' =>\n-            Warn_On_Redundant_Constructs        := True;\n-\n-         when 'R' =>\n-            Warn_On_Redundant_Constructs        := False;\n-\n-         when 's' =>\n-            Warning_Mode                        := Suppress;\n-\n-         when 't' =>\n-            Warn_On_Deleted_Code                := True;\n-\n-         when 'T' =>\n-            Warn_On_Deleted_Code                := False;\n-\n-         when 'u' =>\n-            Check_Unreferenced                  := True;\n-            Check_Withs                         := True;\n-            Check_Unreferenced_Formals          := True;\n-\n-         when 'U' =>\n-            Check_Unreferenced                  := False;\n-            Check_Withs                         := False;\n-            Check_Unreferenced_Formals          := False;\n-\n-         when 'v' =>\n-            Warn_On_No_Value_Assigned           := True;\n-\n-         when 'V' =>\n-            Warn_On_No_Value_Assigned           := False;\n-\n-         when 'w' =>\n-            Warn_On_Assumed_Low_Bound           := True;\n-\n-         when 'W' =>\n-            Warn_On_Assumed_Low_Bound           := False;\n-\n-         when 'x' =>\n-            Warn_On_Export_Import               := True;\n-\n-         when 'X' =>\n-            Warn_On_Export_Import               := False;\n-\n-         when 'y' =>\n-            Warn_On_Ada_2005_Compatibility      := True;\n-            Warn_On_Ada_2012_Compatibility      := True;\n-\n-         when 'Y' =>\n-            Warn_On_Ada_2005_Compatibility      := False;\n-            Warn_On_Ada_2012_Compatibility      := False;\n-\n-         when 'z' =>\n-            Warn_On_Unchecked_Conversion        := True;\n-\n-         when 'Z' =>\n-            Warn_On_Unchecked_Conversion        := False;\n-\n-         when others =>\n-            return False;\n-      end case;\n-\n-      return True;\n-   end Set_Warning_Switch;\n-\n    -----------------------------\n    -- Warn_On_Known_Condition --\n    -----------------------------"}, {"sha": "cd075f8b890058830603116c74b1f85e2937a626", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -33,26 +33,6 @@ with Types; use Types;\n \n package Sem_Warn is\n \n-   -------------------\n-   -- Warning Flags --\n-   -------------------\n-\n-   --  These flags are activated or deactivated by -gnatw switches and control\n-   --  whether warnings of a given class will be generated or not.\n-\n-   --  Note: most of these flags are still in opt, but the plan is to move them\n-   --  here as time goes by.\n-\n-   Warn_On_Record_Holes : Boolean := False;\n-   --  Warn when explicit record component clauses leave uncovered holes (gaps)\n-   --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n-\n-   Warn_On_Overridden_Size : Boolean := False;\n-   --  Warn when explicit record component clause or array component_size\n-   --  clause specifies a size that overrides a size for the type which was\n-   --  set with an explicit size clause. Off by default, set by -gnatw.s (but\n-   --  not -gnatwa).\n-\n    ------------------------\n    -- Warnings Off Table --\n    ------------------------\n@@ -85,22 +65,6 @@ package Sem_Warn is\n    procedure Initialize;\n    --  Initialize this package for new compilation\n \n-   function Set_Warning_Switch (C : Character) return Boolean;\n-   --  This function sets the warning switch or switches corresponding to the\n-   --  given character. It is used to process a -gnatw switch on the command\n-   --  line, or a character in a string literal in pragma Warnings. Returns\n-   --  True for valid warning character C, False for invalid character.\n-\n-   function Set_Dot_Warning_Switch (C : Character) return Boolean;\n-   --  This function sets the warning switch or switches corresponding to the\n-   --  given character preceded by a dot. Used to process a -gnatw. switch on\n-   --  the command line or .C in a string literal in pragma Warnings. Returns\n-   --  True for valid warning character C, False for invalid character.\n-\n-   procedure Set_GNAT_Mode_Warnings;\n-   --  This is called in -gnatg mode to set the warnings for gnat mode. It is\n-   --  also used to set the proper warning statuses for -gnatw.g.\n-\n    ------------------------------------------\n    -- Routines to Handle Unused References --\n    ------------------------------------------"}, {"sha": "bda476bdf973fa9de59079e0d0fdae9253cf5f40", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -23,40 +23,71 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This package is for switch processing and should not depend on higher level\n+--  packages such as those for the scanner, parser, etc. Doing so may cause\n+--  circularities, especially for back ends using Adabkend.\n+\n with Debug;    use Debug;\n with Lib;      use Lib;\n with Osint;    use Osint;\n with Opt;      use Opt;\n-with Prepcomp; use Prepcomp;\n with Validsw;  use Validsw;\n-with Sem_Warn; use Sem_Warn;\n with Stylesw;  use Stylesw;\n+with Warnsw;   use Warnsw;\n \n-with System.Strings;\n with System.WCh_Con; use System.WCh_Con;\n \n package body Switch.C is\n \n    RTS_Specified : String_Access := null;\n    --  Used to detect multiple use of --RTS= flag\n \n+   procedure Add_Symbol_Definition (Def : String);\n+   --  Add a symbol definition from the command line\n+\n    function Switch_Subsequently_Cancelled\n      (C        : String;\n-      Args     : Argument_List;\n+      Args     : String_List;\n       Arg_Rank : Positive) return Boolean;\n    --  This function is called from Scan_Front_End_Switches. It determines if\n    --  the switch currently being scanned is followed by a switch of the form\n    --  \"-gnat-\" & C, where C is the argument. If so, then True is returned,\n    --  and Scan_Front_End_Switches will cancel the effect of the switch. If\n    --  no such switch is found, False is returned.\n \n+   ---------------------------\n+   -- Add_Symbol_Definition --\n+   ---------------------------\n+\n+   procedure Add_Symbol_Definition (Def : String) is\n+   begin\n+      --  If Preprocessor_Symbol_Defs is not large enough, double its size\n+\n+      if Preprocessing_Symbol_Last = Preprocessing_Symbol_Defs'Last then\n+         declare\n+            New_Symbol_Definitions : constant String_List_Access :=\n+              new String_List (1 .. 2 * Preprocessing_Symbol_Last);\n+\n+         begin\n+            New_Symbol_Definitions (Preprocessing_Symbol_Defs'Range) :=\n+              Preprocessing_Symbol_Defs.all;\n+            Free (Preprocessing_Symbol_Defs);\n+            Preprocessing_Symbol_Defs := New_Symbol_Definitions;\n+         end;\n+      end if;\n+\n+      Preprocessing_Symbol_Last := Preprocessing_Symbol_Last + 1;\n+      Preprocessing_Symbol_Defs (Preprocessing_Symbol_Last)\n+         := new String'(Def);\n+   end Add_Symbol_Definition;\n+\n    -----------------------------\n    -- Scan_Front_End_Switches --\n    -----------------------------\n \n    procedure Scan_Front_End_Switches\n      (Switch_Chars : String;\n-      Args         : Argument_List;\n+      Args         : String_List;\n       Arg_Rank     : Positive)\n    is\n       First_Switch : Boolean := True;\n@@ -1157,11 +1188,9 @@ package body Switch.C is\n \n    function Switch_Subsequently_Cancelled\n      (C        : String;\n-      Args     : Argument_List;\n+      Args     : String_List;\n       Arg_Rank : Positive) return Boolean\n    is\n-      use type System.Strings.String_Access;\n-\n    begin\n       --  Loop through arguments following the current one\n "}, {"sha": "a8327813ac6893e47e0675ac2c059863a113c3b4", "filename": "gcc/ada/switch-c.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fswitch-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fswitch-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.ads?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,13 +29,13 @@\n --  switches that are recognized. In addition, package Debug documents\n --  the otherwise undocumented debug switches that are also recognized.\n \n-with System.OS_Lib; use System.OS_Lib;\n+with System.Strings; use System.Strings;\n \n package Switch.C is\n \n    procedure Scan_Front_End_Switches\n      (Switch_Chars : String;\n-      Args         : Argument_List;\n+      Args         : String_List;\n       Arg_Rank     : Positive);\n    --  Procedures to scan out front end switches stored in the given string.\n    --  The first character is known to be a valid switch character, and there"}, {"sha": "c226f3bf48c0d05d80ddb4091740f2b35b7c811f", "filename": "gcc/ada/warnsw.adb", "status": "added", "additions": 453, "deletions": 0, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -0,0 +1,453 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               W A R N S W                                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Opt; use Opt;\n+\n+package body Warnsw is\n+\n+   ----------------------------\n+   -- Set_Dot_Warning_Switch --\n+   ----------------------------\n+\n+   function Set_Dot_Warning_Switch (C : Character) return Boolean is\n+   begin\n+      case C is\n+         when 'a' =>\n+            Warn_On_Assertion_Failure           := True;\n+\n+         when 'A' =>\n+            Warn_On_Assertion_Failure           := False;\n+\n+         when 'b' =>\n+            Warn_On_Biased_Representation       := True;\n+\n+         when 'B' =>\n+            Warn_On_Biased_Representation       := False;\n+\n+         when 'c' =>\n+            Warn_On_Unrepped_Components         := True;\n+\n+         when 'C' =>\n+            Warn_On_Unrepped_Components         := False;\n+\n+         when 'e' =>\n+            Address_Clause_Overlay_Warnings     := True;\n+            Check_Unreferenced                  := True;\n+            Check_Unreferenced_Formals          := True;\n+            Check_Withs                         := True;\n+            Constant_Condition_Warnings         := True;\n+            Elab_Warnings                       := True;\n+            Implementation_Unit_Warnings        := True;\n+            Ineffective_Inline_Warnings         := True;\n+            List_Inherited_Aspects              := True;\n+            Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n+            Warn_On_All_Unread_Out_Parameters   := True;\n+            Warn_On_Assertion_Failure           := True;\n+            Warn_On_Assumed_Low_Bound           := True;\n+            Warn_On_Bad_Fixed_Value             := True;\n+            Warn_On_Biased_Representation       := True;\n+            Warn_On_Constant                    := True;\n+            Warn_On_Deleted_Code                := True;\n+            Warn_On_Dereference                 := True;\n+            Warn_On_Export_Import               := True;\n+            Warn_On_Hiding                      := True;\n+            Warn_On_Modified_Unread             := True;\n+            Warn_On_No_Value_Assigned           := True;\n+            Warn_On_Non_Local_Exception         := True;\n+            Warn_On_Object_Renames_Function     := True;\n+            Warn_On_Obsolescent_Feature         := True;\n+            Warn_On_Overlap                     := True;\n+            Warn_On_Overridden_Size             := True;\n+            Warn_On_Parameter_Order             := True;\n+            Warn_On_Questionable_Missing_Parens := True;\n+            Warn_On_Record_Holes                := True;\n+            Warn_On_Redundant_Constructs        := True;\n+            Warn_On_Reverse_Bit_Order           := True;\n+            Warn_On_Unchecked_Conversion        := True;\n+            Warn_On_Unordered_Enumeration_Type  := True;\n+            Warn_On_Unrecognized_Pragma         := True;\n+            Warn_On_Unrepped_Components         := True;\n+            Warn_On_Warnings_Off                := True;\n+\n+         when 'g' =>\n+            Set_GNAT_Mode_Warnings;\n+\n+         when 'h' =>\n+            Warn_On_Record_Holes                := True;\n+\n+         when 'H' =>\n+            Warn_On_Record_Holes                := False;\n+\n+         when 'i' =>\n+            Warn_On_Overlap                     := True;\n+\n+         when 'I' =>\n+            Warn_On_Overlap                     := False;\n+\n+         when 'l' =>\n+            List_Inherited_Aspects              := True;\n+\n+         when 'L' =>\n+            List_Inherited_Aspects              := False;\n+\n+         when 'm' =>\n+            Warn_On_Suspicious_Modulus_Value    := True;\n+\n+         when 'M' =>\n+            Warn_On_Suspicious_Modulus_Value    := False;\n+\n+         when 'o' =>\n+            Warn_On_All_Unread_Out_Parameters   := True;\n+\n+         when 'O' =>\n+            Warn_On_All_Unread_Out_Parameters   := False;\n+\n+         when 'p' =>\n+            Warn_On_Parameter_Order             := True;\n+\n+         when 'P' =>\n+            Warn_On_Parameter_Order             := False;\n+\n+         when 'r' =>\n+            Warn_On_Object_Renames_Function     := True;\n+\n+         when 'R' =>\n+            Warn_On_Object_Renames_Function     := False;\n+\n+         when 's' =>\n+            Warn_On_Overridden_Size             := True;\n+\n+         when 'S' =>\n+            Warn_On_Overridden_Size             := False;\n+\n+         when 'u' =>\n+            Warn_On_Unordered_Enumeration_Type  := True;\n+\n+         when 'U' =>\n+            Warn_On_Unordered_Enumeration_Type  := False;\n+\n+         when 'v' =>\n+            Warn_On_Reverse_Bit_Order           := True;\n+\n+         when 'V' =>\n+            Warn_On_Reverse_Bit_Order           := False;\n+\n+         when 'w' =>\n+            Warn_On_Warnings_Off                := True;\n+\n+         when 'W' =>\n+            Warn_On_Warnings_Off                := False;\n+\n+         when 'x' =>\n+            Warn_On_Non_Local_Exception         := True;\n+\n+         when 'X' =>\n+            Warn_On_Non_Local_Exception         := False;\n+            No_Warn_On_Non_Local_Exception      := True;\n+\n+         when others =>\n+            return False;\n+      end case;\n+\n+      return True;\n+   end Set_Dot_Warning_Switch;\n+\n+   ----------------------------\n+   -- Set_GNAT_Mode_Warnings --\n+   ----------------------------\n+\n+   procedure Set_GNAT_Mode_Warnings is\n+   begin\n+      Address_Clause_Overlay_Warnings     := True;\n+      Check_Unreferenced                  := True;\n+      Check_Unreferenced_Formals          := True;\n+      Check_Withs                         := True;\n+      Constant_Condition_Warnings         := True;\n+      Elab_Warnings                       := False;\n+      Implementation_Unit_Warnings        := False;\n+      Ineffective_Inline_Warnings         := True;\n+      List_Inherited_Aspects              := False;\n+      Warn_On_Ada_2005_Compatibility      := True;\n+      Warn_On_Ada_2012_Compatibility      := True;\n+      Warn_On_All_Unread_Out_Parameters   := False;\n+      Warn_On_Assertion_Failure           := True;\n+      Warn_On_Assumed_Low_Bound           := True;\n+      Warn_On_Bad_Fixed_Value             := True;\n+      Warn_On_Biased_Representation       := True;\n+      Warn_On_Constant                    := True;\n+      Warn_On_Deleted_Code                := False;\n+      Warn_On_Dereference                 := False;\n+      Warn_On_Export_Import               := True;\n+      Warn_On_Hiding                      := False;\n+      Warn_On_Modified_Unread             := True;\n+      Warn_On_No_Value_Assigned           := True;\n+      Warn_On_Non_Local_Exception         := False;\n+      Warn_On_Object_Renames_Function     := False;\n+      Warn_On_Obsolescent_Feature         := True;\n+      Warn_On_Questionable_Missing_Parens := True;\n+      Warn_On_Redundant_Constructs        := True;\n+      Warn_On_Reverse_Bit_Order           := False;\n+      Warn_On_Object_Renames_Function     := True;\n+      Warn_On_Unchecked_Conversion        := True;\n+      Warn_On_Unordered_Enumeration_Type  := False;\n+      Warn_On_Unrecognized_Pragma         := True;\n+      Warn_On_Unrepped_Components         := False;\n+      Warn_On_Warnings_Off                := False;\n+   end Set_GNAT_Mode_Warnings;\n+\n+   ------------------------\n+   -- Set_Warning_Switch --\n+   ------------------------\n+\n+   function Set_Warning_Switch (C : Character) return Boolean is\n+   begin\n+      case C is\n+         when 'a' =>\n+            Check_Unreferenced                  := True;\n+            Check_Unreferenced_Formals          := True;\n+            Check_Withs                         := True;\n+            Constant_Condition_Warnings         := True;\n+            Implementation_Unit_Warnings        := True;\n+            Ineffective_Inline_Warnings         := True;\n+            List_Inherited_Aspects              := True;\n+            Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n+            Warn_On_Assertion_Failure           := True;\n+            Warn_On_Assumed_Low_Bound           := True;\n+            Warn_On_Bad_Fixed_Value             := True;\n+            Warn_On_Biased_Representation       := True;\n+            Warn_On_Constant                    := True;\n+            Warn_On_Export_Import               := True;\n+            Warn_On_Modified_Unread             := True;\n+            Warn_On_No_Value_Assigned           := True;\n+            Warn_On_Non_Local_Exception         := True;\n+            Warn_On_Object_Renames_Function     := True;\n+            Warn_On_Obsolescent_Feature         := True;\n+            Warn_On_Parameter_Order             := True;\n+            Warn_On_Questionable_Missing_Parens := True;\n+            Warn_On_Redundant_Constructs        := True;\n+            Warn_On_Reverse_Bit_Order           := True;\n+            Warn_On_Unchecked_Conversion        := True;\n+            Warn_On_Unrecognized_Pragma         := True;\n+            Warn_On_Unrepped_Components         := True;\n+\n+         when 'A' =>\n+            Address_Clause_Overlay_Warnings     := False;\n+            Check_Unreferenced                  := False;\n+            Check_Unreferenced_Formals          := False;\n+            Check_Withs                         := False;\n+            Constant_Condition_Warnings         := False;\n+            Elab_Warnings                       := False;\n+            Implementation_Unit_Warnings        := False;\n+            Ineffective_Inline_Warnings         := False;\n+            List_Inherited_Aspects              := False;\n+            Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_Ada_2012_Compatibility      := False;\n+            Warn_On_All_Unread_Out_Parameters   := False;\n+            Warn_On_Assertion_Failure           := False;\n+            Warn_On_Assumed_Low_Bound           := False;\n+            Warn_On_Bad_Fixed_Value             := False;\n+            Warn_On_Biased_Representation       := False;\n+            Warn_On_Constant                    := False;\n+            Warn_On_Deleted_Code                := False;\n+            Warn_On_Dereference                 := False;\n+            Warn_On_Export_Import               := False;\n+            Warn_On_Hiding                      := False;\n+            Warn_On_Modified_Unread             := False;\n+            Warn_On_No_Value_Assigned           := False;\n+            Warn_On_Non_Local_Exception         := False;\n+            Warn_On_Object_Renames_Function     := False;\n+            Warn_On_Obsolescent_Feature         := False;\n+            Warn_On_Overlap                     := False;\n+            Warn_On_Overridden_Size             := False;\n+            Warn_On_Parameter_Order             := False;\n+            Warn_On_Record_Holes                := False;\n+            Warn_On_Questionable_Missing_Parens := False;\n+            Warn_On_Redundant_Constructs        := False;\n+            Warn_On_Reverse_Bit_Order           := False;\n+            Warn_On_Unchecked_Conversion        := False;\n+            Warn_On_Unordered_Enumeration_Type  := False;\n+            Warn_On_Unrecognized_Pragma         := False;\n+            Warn_On_Unrepped_Components         := False;\n+            Warn_On_Warnings_Off                := False;\n+\n+            No_Warn_On_Non_Local_Exception      := True;\n+\n+         when 'b' =>\n+            Warn_On_Bad_Fixed_Value             := True;\n+\n+         when 'B' =>\n+            Warn_On_Bad_Fixed_Value             := False;\n+\n+         when 'c' =>\n+            Constant_Condition_Warnings         := True;\n+\n+         when 'C' =>\n+            Constant_Condition_Warnings         := False;\n+\n+         when 'd' =>\n+            Warn_On_Dereference                 := True;\n+\n+         when 'D' =>\n+            Warn_On_Dereference                 := False;\n+\n+         when 'e' =>\n+            Warning_Mode                        := Treat_As_Error;\n+\n+         when 'f' =>\n+            Check_Unreferenced_Formals          := True;\n+\n+         when 'F' =>\n+            Check_Unreferenced_Formals          := False;\n+\n+         when 'g' =>\n+            Warn_On_Unrecognized_Pragma         := True;\n+\n+         when 'G' =>\n+            Warn_On_Unrecognized_Pragma         := False;\n+\n+         when 'h' =>\n+            Warn_On_Hiding                      := True;\n+\n+         when 'H' =>\n+            Warn_On_Hiding                      := False;\n+\n+         when 'i' =>\n+            Implementation_Unit_Warnings        := True;\n+\n+         when 'I' =>\n+            Implementation_Unit_Warnings        := False;\n+\n+         when 'j' =>\n+            Warn_On_Obsolescent_Feature         := True;\n+\n+         when 'J' =>\n+            Warn_On_Obsolescent_Feature         := False;\n+\n+         when 'k' =>\n+            Warn_On_Constant                    := True;\n+\n+         when 'K' =>\n+            Warn_On_Constant                    := False;\n+\n+         when 'l' =>\n+            Elab_Warnings                       := True;\n+\n+         when 'L' =>\n+            Elab_Warnings                       := False;\n+\n+         when 'm' =>\n+            Warn_On_Modified_Unread             := True;\n+\n+         when 'M' =>\n+            Warn_On_Modified_Unread             := False;\n+\n+         when 'n' =>\n+            Warning_Mode                        := Normal;\n+\n+         when 'o' =>\n+            Address_Clause_Overlay_Warnings     := True;\n+\n+         when 'O' =>\n+            Address_Clause_Overlay_Warnings     := False;\n+\n+         when 'p' =>\n+            Ineffective_Inline_Warnings         := True;\n+\n+         when 'P' =>\n+            Ineffective_Inline_Warnings         := False;\n+\n+         when 'q' =>\n+            Warn_On_Questionable_Missing_Parens := True;\n+\n+         when 'Q' =>\n+            Warn_On_Questionable_Missing_Parens := False;\n+\n+         when 'r' =>\n+            Warn_On_Redundant_Constructs        := True;\n+\n+         when 'R' =>\n+            Warn_On_Redundant_Constructs        := False;\n+\n+         when 's' =>\n+            Warning_Mode                        := Suppress;\n+\n+         when 't' =>\n+            Warn_On_Deleted_Code                := True;\n+\n+         when 'T' =>\n+            Warn_On_Deleted_Code                := False;\n+\n+         when 'u' =>\n+            Check_Unreferenced                  := True;\n+            Check_Withs                         := True;\n+            Check_Unreferenced_Formals          := True;\n+\n+         when 'U' =>\n+            Check_Unreferenced                  := False;\n+            Check_Withs                         := False;\n+            Check_Unreferenced_Formals          := False;\n+\n+         when 'v' =>\n+            Warn_On_No_Value_Assigned           := True;\n+\n+         when 'V' =>\n+            Warn_On_No_Value_Assigned           := False;\n+\n+         when 'w' =>\n+            Warn_On_Assumed_Low_Bound           := True;\n+\n+         when 'W' =>\n+            Warn_On_Assumed_Low_Bound           := False;\n+\n+         when 'x' =>\n+            Warn_On_Export_Import               := True;\n+\n+         when 'X' =>\n+            Warn_On_Export_Import               := False;\n+\n+         when 'y' =>\n+            Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Ada_2012_Compatibility      := True;\n+\n+         when 'Y' =>\n+            Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_Ada_2012_Compatibility      := False;\n+\n+         when 'z' =>\n+            Warn_On_Unchecked_Conversion        := True;\n+\n+         when 'Z' =>\n+            Warn_On_Unchecked_Conversion        := False;\n+\n+         when others =>\n+            return False;\n+      end case;\n+\n+      return True;\n+   end Set_Warning_Switch;\n+\n+end Warnsw;"}, {"sha": "1aa349294277268cd75c88fd9e3c2600c06e4825", "filename": "gcc/ada/warnsw.ads", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499769ec33c515c433e407ee25729018457ed295/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=499769ec33c515c433e407ee25729018457ed295", "patch": "@@ -0,0 +1,70 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               W A R N S W                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit contains the routines used to handle setting of warning options.\n+\n+package Warnsw is\n+\n+   -------------------\n+   -- Warning Flags --\n+   -------------------\n+\n+   --  These flags are activated or deactivated by -gnatw switches and control\n+   --  whether warnings of a given class will be generated or not.\n+\n+   --  Note: most of these flags are still in opt, but the plan is to move them\n+   --  here as time goes by.\n+\n+   Warn_On_Record_Holes : Boolean := False;\n+   --  Warn when explicit record component clauses leave uncovered holes (gaps)\n+   --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n+\n+   Warn_On_Overridden_Size : Boolean := False;\n+   --  Warn when explicit record component clause or array component_size\n+   --  clause specifies a size that overrides a size for the typen which was\n+   --  set with an explicit size clause. Off by default, set by -gnatw.s (but\n+   --  not -gnatwa).\n+\n+   -----------------\n+   -- Subprograms --\n+   -----------------\n+\n+   function Set_Warning_Switch (C : Character) return Boolean;\n+   --  This function sets the warning switch or switches corresponding to the\n+   --  given character. It is used to process a -gnatw switch on the command\n+   --  line, or a character in a string literal in pragma Warnings. Returns\n+   --  True for valid warning character C, False for invalid character.\n+\n+   function Set_Dot_Warning_Switch (C : Character) return Boolean;\n+   --  This function sets the warning switch or switches corresponding to the\n+   --  given character preceded by a dot. Used to process a -gnatw. switch on\n+   --  the command line or .C in a string literal in pragma Warnings. Returns\n+   --  True for valid warning character C, False for invalid character.\n+\n+   procedure Set_GNAT_Mode_Warnings;\n+   --  This is called in -gnatg mode to set the warnings for gnat mode. It is\n+   --  also used to set the proper warning statuses for -gnatw.g.\n+\n+end Warnsw;"}]}