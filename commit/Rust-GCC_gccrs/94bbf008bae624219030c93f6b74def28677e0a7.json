{"sha": "94bbf008bae624219030c93f6b74def28677e0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiYmYwMDhiYWU2MjQyMTkwMzBjOTNmNmI3NGRlZjI4Njc3ZTBhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:19:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:19:04Z"}, "message": "[multiple changes]\n\n2011-09-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Write_Field28_Name): Update the choices for\n\tExtra_Formals.\n\t* einfo.ads: Update the use of Extra_Formals in various entities.\n\t* exp_ch6.adb (Add_Task_Actuals_To_Build_In_Place_Call): Code\n\treformatting. Handle the case where the function call returns\n\tan incomplete type coming from a limited with context. Generate\n\ta reference to the _master when the master id is associated\n\twith an access type.\n\t(Is_Build_In_Place_Function_Call): Code\n\treformatting. The Alfa mode case must appear first since otherwise\n\twe will carry out the function name retrieval regardless of the\n\tcompilation mode.\n\t(Make_Build_In_Place_Call_In_Allocator): Code\n\treformatting. Handle the case where the function call returns\n\tan incomplete type coming from a limited with context. Remove\n\tthe reference creation when adding the task-related actuals,\n\tthis is now done in Add_Task_Actuals_To_Build_In_Place_Call.\n\t* exp_ch7.adb (Make_Set_Finalize_Address_Call): Remove local\n\tvariable Call. Remove the useless wrapping of Set_Finalize_Address\n\twhen the finalization master is a build-in-place extra formal. The\n\twhole mechanism of controlled allocation in a build-in-place\n\tcontext is already protected by an if statement.\n\t* sem_aux.adb (Is_Immutably_Limited_Type): Handle the case\n\twhere the type might be related to a function which returns an\n\tincomplete type coming from a limited with.\n\t* sem_ch6.adb (Create_Extra_Formals): Comment\n\treformatting. Handle the case where the function returns an\n\tincomplete type coming from a limited with context.\n\n2011-09-05  Johannes Kanig  <kanig@adacore.com>\n\n\t* lib-xref-alfa.adb (Is_Alfa_Reference): Improve test for constant\n\tobjects and rewrite case statement as /if/elsif/endif.\n\n2011-09-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch3.adb, sem_ch4.adb: Minor reformatting.\n\nFrom-SVN: r178537", "tree": {"sha": "bc9b51cc68bed850fac9c55ec7794f5fab718cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc9b51cc68bed850fac9c55ec7794f5fab718cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94bbf008bae624219030c93f6b74def28677e0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bbf008bae624219030c93f6b74def28677e0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bbf008bae624219030c93f6b74def28677e0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bbf008bae624219030c93f6b74def28677e0a7/comments", "author": null, "committer": null, "parents": [{"sha": "aeae67edd7af1208362e615cf89dd2e9cba942d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeae67edd7af1208362e615cf89dd2e9cba942d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeae67edd7af1208362e615cf89dd2e9cba942d5"}], "stats": {"total": 151, "additions": 69, "deletions": 82}, "files": [{"sha": "d88ff56edec3a1722a04827e39fab3c4ce0984a7", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -8686,9 +8686,12 @@ package body Einfo is\n    procedure Write_Field28_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when E_Procedure                                  |\n+         when E_Entry                                      |\n+              E_Entry_Family                               |\n               E_Function                                   |\n-              E_Entry                                      =>\n+              E_Procedure                                  |\n+              E_Subprogram_Body                            |\n+              E_Subprogram_Type                            =>\n             Write_Str (\"Extra_Formals\");\n \n          when E_Record_Type =>"}, {"sha": "bfbe2f8466f82bd187bbd91d16ce36bc548d83d2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -5137,6 +5137,7 @@ package Einfo is\n    --    Protection_Object                   (Node23)   (protected kind)\n    --    Contract                            (Node24)   (for entry only)\n    --    PPC_Wrapper                         (Node25)\n+   --    Extra_Formals                       (Node28)\n    --    Default_Expressions_Processed       (Flag108)\n    --    Entry_Accepted                      (Flag152)\n    --    Is_AST_Entry                        (Flag132)  (for entry only)\n@@ -5670,10 +5671,12 @@ package Einfo is\n    --    Corresponding_Protected_Entry       (Node18)\n    --    Last_Entity                         (Node20)\n    --    Scope_Depth_Value                   (Uint22)\n+   --    Extra_Formals                       (Node28)\n    --    Scope_Depth                         (synth)\n \n    --  E_Subprogram_Type\n    --    Directly_Designated_Type            (Node20)\n+   --    Extra_Formals                       (Node28)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n    --    Last_Formal                         (synth)"}, {"sha": "e8e46e1a55fbdb92f4a2814ac0e4e398ed71d203", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -469,14 +469,20 @@ package body Exp_Ch6 is\n    begin\n       --  No such extra parameters are needed if there are no tasks\n \n-      if not Has_Task (Etype (Function_Id)) then\n+      if not Has_Task (Available_View (Etype (Function_Id))) then\n          return;\n       end if;\n \n       --  Use a dummy _master actual in case of No_Task_Hierarchy\n \n       if Restriction_Active (No_Task_Hierarchy) then\n          Actual := New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc);\n+\n+      --  In the case where we use the master associated with an access type,\n+      --  the actual is an entity and requires an explicit reference.\n+\n+      elsif Nkind (Actual) = N_Defining_Identifier then\n+         Actual := New_Reference_To (Actual, Loc);\n       end if;\n \n       --  The master\n@@ -493,8 +499,7 @@ package body Exp_Ch6 is\n          --  Build the parameter association for the new actual and add it to\n          --  the end of the function's actuals.\n \n-         Add_Extra_Actual_To_Call\n-           (Function_Call, Master_Formal, Actual);\n+         Add_Extra_Actual_To_Call (Function_Call, Master_Formal, Actual);\n       end;\n \n       --  The activation chain\n@@ -506,8 +511,8 @@ package body Exp_Ch6 is\n       begin\n          --  Locate implicit activation chain parameter in the called function\n \n-         Activation_Chain_Formal := Build_In_Place_Formal\n-           (Function_Id, BIP_Activation_Chain);\n+         Activation_Chain_Formal :=\n+           Build_In_Place_Formal (Function_Id, BIP_Activation_Chain);\n \n          --  Create the actual which is a pointer to the current activation\n          --  chain\n@@ -6814,8 +6819,8 @@ package body Exp_Ch6 is\n       --  Step past qualification or unchecked conversion (the latter can occur\n       --  in cases of calls to 'Input).\n \n-      if Nkind_In\n-           (Exp_Node, N_Qualified_Expression, N_Unchecked_Type_Conversion)\n+      if Nkind_In (Exp_Node, N_Qualified_Expression,\n+                             N_Unchecked_Type_Conversion)\n       then\n          Exp_Node := Expression (N);\n       end if;\n@@ -6824,19 +6829,22 @@ package body Exp_Ch6 is\n          return False;\n \n       else\n-         if Is_Entity_Name (Name (Exp_Node)) then\n+         --  In Alfa mode, build-in-place calls are not expanded, so that we\n+         --  may end up with a call that is neither resolved to an entity, nor\n+         --  an indirect call.\n+\n+         if Alfa_Mode then\n+            return False;\n+\n+         elsif Is_Entity_Name (Name (Exp_Node)) then\n             Function_Id := Entity (Name (Exp_Node));\n \n+         --  In the case of an explicitly dereferenced call, use the subprogram\n+         --  type generated for the dereference.\n+\n          elsif Nkind (Name (Exp_Node)) = N_Explicit_Dereference then\n             Function_Id := Etype (Name (Exp_Node));\n \n-         --  In Alfa mode, protected subprogram calls are not expanded, so that\n-         --  we may end up with a call that is neither resolved to an entity,\n-         --  nor an indirect call.\n-\n-         elsif Alfa_Mode then\n-            return False;\n-\n          else\n             raise Program_Error;\n          end if;\n@@ -7092,11 +7100,11 @@ package body Exp_Ch6 is\n      (Allocator     : Node_Id;\n       Function_Call : Node_Id)\n    is\n+      Acc_Type          : constant Entity_Id := Etype (Allocator);\n       Loc               : Source_Ptr;\n       Func_Call         : Node_Id := Function_Call;\n       Function_Id       : Entity_Id;\n       Result_Subt       : Entity_Id;\n-      Acc_Type          : constant Entity_Id := Etype (Allocator);\n       New_Allocator     : Node_Id;\n       Return_Obj_Access : Entity_Id;\n \n@@ -7135,7 +7143,7 @@ package body Exp_Ch6 is\n          raise Program_Error;\n       end if;\n \n-      Result_Subt := Etype (Function_Id);\n+      Result_Subt := Available_View (Etype (Function_Id));\n \n       --  Check whether return type includes tasks. This may not have been done\n       --  previously, if the type was a limited view.\n@@ -7236,17 +7244,8 @@ package body Exp_Ch6 is\n          Add_Finalization_Master_Actual_To_Build_In_Place_Call\n            (Func_Call, Function_Id, Acc_Type);\n \n-         --  If access type has a master entity, pass a reference to it\n-\n-         if Present (Master_Id (Acc_Type)) then\n-            Add_Task_Actuals_To_Build_In_Place_Call\n-              (Func_Call, Function_Id,\n-               Master_Actual =>\n-                 New_Occurrence_Of (Master_Id (Acc_Type), Loc));\n-         else\n-            Add_Task_Actuals_To_Build_In_Place_Call\n-              (Func_Call, Function_Id, Empty);\n-         end if;\n+         Add_Task_Actuals_To_Build_In_Place_Call\n+           (Func_Call, Function_Id, Master_Actual => Master_Id (Acc_Type));\n \n          --  The caller does not provide the return object in this case, so we\n          --  have to pass null for the object access actual."}, {"sha": "3a4b07dc63fa7b85cf8024298bcb1bdca35eda2b", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -7461,7 +7461,6 @@ package body Exp_Ch7 is\n       Desig_Typ   : constant Entity_Id :=\n                       Available_View (Designated_Type (Ptr_Typ));\n       Fin_Mas_Id  : constant Entity_Id := Finalization_Master (Ptr_Typ);\n-      Call        : Node_Id;\n       Fin_Mas_Ref : Node_Id;\n       Utyp        : Entity_Id;\n \n@@ -7526,7 +7525,7 @@ package body Exp_Ch7 is\n       --  Generate:\n       --    Set_Finalize_Address (<Ptr_Typ>FM, <Utyp>FD'Unrestricted_Access);\n \n-      Call :=\n+      return\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n             New_Reference_To (RTE (RE_Set_Finalize_Address), Loc),\n@@ -7536,25 +7535,6 @@ package body Exp_Ch7 is\n               Prefix         =>\n                 New_Reference_To (TSS (Utyp, TSS_Finalize_Address), Loc),\n               Attribute_Name => Name_Unrestricted_Access)));\n-\n-      --  In the case of build-in-place functions, protect the call to ensure\n-      --  we have a master at run time. Generate:\n-\n-      --    if <Ptr_Typ>FM /= null then\n-      --       <Call>;\n-      --    end if;\n-\n-      if Is_Access_Type (Etype (Fin_Mas_Id)) then\n-         Call :=\n-           Make_If_Statement (Loc,\n-             Condition       =>\n-               Make_Op_Ne (Loc,\n-                 Left_Opnd  => New_Reference_To (Fin_Mas_Id, Loc),\n-                 Right_Opnd => Make_Null (Loc)),\n-             Then_Statements => New_List (Call));\n-      end if;\n-\n-      return Call;\n    end Make_Set_Finalize_Address_Call;\n \n    --------------------------"}, {"sha": "8eef5055792513bee9b6cb405b442babb1034eaf", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -604,38 +604,36 @@ package body Alfa is\n             Typ : Character) return Boolean\n          is\n          begin\n-            --  The only references of interest on callable entities are calls.\n-            --  On non-callable entities, the only references of interest are\n-            --  reads and writes.\n \n-            case Ekind (E) is\n-               when Overloadable_Kind =>\n-                  return Typ = 's';\n+            if Ekind (E) in Overloadable_Kind then\n \n-               --  References to IN parameters and constants are not\n-               --  considered in Alfa section, as these will be translated\n-               --  as constants in the intermediate language for formal\n-               --  verification, and should therefore never appear in frame\n-               --  conditions.\n+               --  The only references of interest on callable entities are\n+               --  calls.  On non-callable entities, the only references of\n+               --  interest are reads and writes.\n \n-               --  What about E_Loop_Parameter???\n+               return Typ = 's';\n+\n+            elsif Is_Constant_Object (E) then\n+\n+               --  References to constant objects are not considered in Alfa\n+               --  section, as these will be translated as constants in the\n+               --  intermediate language for formal verification, and should\n+               --  therefore never appear in frame conditions.\n \n-               when E_In_Parameter | E_Constant =>\n                   return False;\n \n-               when others =>\n+            elsif Present (Etype (E)) and then\n+               Ekind (Etype (E)) in Concurrent_Kind then\n \n-                  --  Objects of Task type or protected type are not Alfa\n-                  --  references.\n+               --  Objects of Task type or protected type are not Alfa\n+               --  references.\n \n-                  if Present (Etype (E))\n-                    and then Ekind (Etype (E)) in Concurrent_Kind\n-                  then\n-                     return False;\n-                  end if;\n+               return False;\n \n-                  return Typ = 'r' or else Typ = 'm';\n-            end case;\n+            else\n+               return Typ = 'r' or else Typ = 'm';\n+\n+            end if;\n          end Is_Alfa_Reference;\n \n          -------------------"}, {"sha": "3b3453ff11e4bf90b7773b3c882d2faf72c14435", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -597,7 +597,7 @@ package body Sem_Aux is\n    -------------------------------\n \n    function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean is\n-      Btype : constant Entity_Id := Base_Type (Ent);\n+      Btype : constant Entity_Id := Available_View (Base_Type (Ent));\n \n    begin\n       if Is_Limited_Record (Btype) then\n@@ -607,9 +607,8 @@ package body Sem_Aux is\n         and then Nkind (Parent (Btype)) = N_Formal_Type_Declaration\n       then\n          return not In_Package_Body (Scope ((Btype)));\n-      end if;\n \n-      if Is_Private_Type (Btype) then\n+      elsif Is_Private_Type (Btype) then\n \n          --  AI05-0063: A type derived from a limited private formal type is\n          --  not immutably limited in a generic body."}, {"sha": "46abaa998392d10631ddcdd00794f5f8ff315933", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -15061,6 +15061,7 @@ package body Sem_Ch3 is\n                Tag_Mismatch;\n             end if;\n          end if;\n+\n          if Present (Prev)\n            and then Nkind (Parent (Prev)) = N_Incomplete_Type_Declaration\n            and then Present (Premature_Use (Parent (Prev)))"}, {"sha": "8bdc569d1e7a04c5a102a12631fe7698c885b7ef", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -4322,7 +4322,7 @@ package body Sem_Ch4 is\n             Error_Msg_Node_2 := First_Subtype (Prefix_Type);\n             Error_Msg_NE (\"no selector& for}\", N, Sel);\n \n-            --  If prefix is incomplete, add information\n+            --  Add information in the case of an incomplete prefix\n \n             if Is_Incomplete_Type (Type_To_Use) then\n                declare\n@@ -4340,6 +4340,10 @@ package body Sem_Ch4 is\n                      if Nkind (Parent (Inc)) =\n                                           N_Incomplete_Type_Declaration\n                      then\n+                        --  Record location of premature use in entity so that\n+                        --  a continuation message is generated when the\n+                        --  completion is seen.\n+\n                         Set_Premature_Use (Parent (Inc), N);\n                      end if;\n                   end if;"}, {"sha": "b701bda2cb4b48fca39122e048e66b860fc56154", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94bbf008bae624219030c93f6b74def28677e0a7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=94bbf008bae624219030c93f6b74def28677e0a7", "patch": "@@ -6371,11 +6371,11 @@ package body Sem_Ch6 is\n                     E, BIP_Formal_Suffix (BIP_Finalization_Master));\n             end if;\n \n-            --  If the result type contains tasks, we have two extra formals:\n-            --  the master of the tasks to be created, and the caller's\n-            --  activation chain.\n+            --  When the result type contains tasks, add two extra formals: the\n+            --  master of the tasks to be created, and the caller's activation\n+            --  chain.\n \n-            if Has_Task (Result_Subt) then\n+            if Has_Task (Available_View (Result_Subt)) then\n                Discard :=\n                  Add_Extra_Formal\n                    (E, RTE (RE_Master_Id),"}]}