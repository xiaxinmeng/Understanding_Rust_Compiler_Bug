{"sha": "d3838596c4efb830affe201ec2e6509674dedd02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4Mzg1OTZjNGVmYjgzMGFmZmUyMDFlYzJlNjUwOTY3NGRlZGQwMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:27:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:27:33Z"}, "message": "i386: Emulate MMX ssse3_palignrdi with SSE\n\nEmulate MMX version of palignrq with SSE version by concatenating 2\n64-bit MMX operands into a single 128-bit SSE operand, followed by\nSSE psrldq.  Only SSE register source operand is allowed.\n\n\tPR target/89021\n\t* config/i386/sse.md (ssse3_palignrdi): Changed to\n\tdefine_insn_and_split to support SSE emulation.\n\nFrom-SVN: r271247", "tree": {"sha": "01dc3ab9bf6e69a299008d36c627d3ec7915f16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01dc3ab9bf6e69a299008d36c627d3ec7915f16d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3838596c4efb830affe201ec2e6509674dedd02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3838596c4efb830affe201ec2e6509674dedd02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3838596c4efb830affe201ec2e6509674dedd02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3838596c4efb830affe201ec2e6509674dedd02/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8b0e9104f2663a0d65cd65e7c4bd25c0b10514b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b0e9104f2663a0d65cd65e7c4bd25c0b10514b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b0e9104f2663a0d65cd65e7c4bd25c0b10514b"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "f773f24d623c1c070a61da5709b4c416de034386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3838596c4efb830affe201ec2e6509674dedd02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3838596c4efb830affe201ec2e6509674dedd02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3838596c4efb830affe201ec2e6509674dedd02", "patch": "@@ -1,3 +1,9 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/sse.md (ssse3_palignrdi): Changed to\n+\tdefine_insn_and_split to support SSE emulation.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "b68da8ad285e2517d0ea88c488d9bd2be0b83528", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3838596c4efb830affe201ec2e6509674dedd02/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3838596c4efb830affe201ec2e6509674dedd02/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d3838596c4efb830affe201ec2e6509674dedd02", "patch": "@@ -16302,23 +16302,61 @@\n    (set_attr \"prefix\" \"orig,vex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"ssse3_palignrdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\")\n-\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n\")]\n+(define_insn_and_split \"ssse3_palignrdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y,x,Yv\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0,0,Yv\")\n+\t\t    (match_operand:DI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n+\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n,n,n\")]\n \t\t   UNSPEC_PALIGNR))]\n-  \"TARGET_SSSE3\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n {\n-  operands[3] = GEN_INT (INTVAL (operands[3]) / 8);\n-  return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      operands[3] = GEN_INT (INTVAL (operands[3]) / 8);\n+      return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 1:\n+    case 2:\n+      return \"#\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"sseishft\")\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(set (match_dup 0)\n+\t(lshiftrt:V1TI (match_dup 0) (match_dup 3)))]\n+{\n+  /* Emulate MMX palignrdi with SSE psrldq.  */\n+  rtx op0 = lowpart_subreg (V2DImode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+  rtx insn;\n+  if (TARGET_AVX)\n+    insn = gen_vec_concatv2di (op0, operands[2], operands[1]);\n+  else\n+    {\n+      /* NB: SSE can only concatenate OP0 and OP1 to OP0.  */\n+      insn = gen_vec_concatv2di (op0, operands[1], operands[2]);\n+      emit_insn (insn);\n+      /* Swap bits 0:63 with bits 64:127.  */\n+      rtx mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t   gen_rtvec (4, GEN_INT (2),\n+\t\t\t\t\t      GEN_INT (3),\n+\t\t\t\t\t      GEN_INT (0),\n+\t\t\t\t\t      GEN_INT (1)));\n+      rtx op1 = lowpart_subreg (V4SImode, op0, GET_MODE (op0));\n+      rtx op2 = gen_rtx_VEC_SELECT (V4SImode, op1, mask);\n+      insn = gen_rtx_SET (op1, op2);\n+    }\n+  emit_insn (insn);\n+  operands[0] = lowpart_subreg (V1TImode, op0, GET_MODE (op0));\n+}\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"sseishft\")\n    (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n ;; Mode iterator to handle singularity w/ absence of V2DI and V4DI\n ;; modes for abs instruction on pre AVX-512 targets."}]}