{"sha": "18b4306c0a150f144cddaf85ed814893b3b44b81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiNDMwNmMwYTE1MGYxNDRjZGRhZjg1ZWQ4MTQ4OTNiM2I0NGI4MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-09T14:13:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-09T14:13:43Z"}, "message": "re PR tree-optimization/82397 (qsort comparator non-negative on sorted output: 1 in vect_analyze_data_ref_accesses)\n\n2017-10-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82397\n\t* tree-data-ref.c (data_ref_compare_tree): Make sure to return\n\tequality only for semantically equal trees.\n\nFrom-SVN: r253547", "tree": {"sha": "fadeb015bf4743de81becfd8720b0e6826d88f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fadeb015bf4743de81becfd8720b0e6826d88f6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18b4306c0a150f144cddaf85ed814893b3b44b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b4306c0a150f144cddaf85ed814893b3b44b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b4306c0a150f144cddaf85ed814893b3b44b81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b4306c0a150f144cddaf85ed814893b3b44b81/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7668b0a65616dec614379a396186f3a03e329965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7668b0a65616dec614379a396186f3a03e329965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7668b0a65616dec614379a396186f3a03e329965"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "26e6063130102f02fbb2179bb1d1e909b874c48f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b4306c0a150f144cddaf85ed814893b3b44b81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b4306c0a150f144cddaf85ed814893b3b44b81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18b4306c0a150f144cddaf85ed814893b3b44b81", "patch": "@@ -1,3 +1,9 @@\n+2017-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82397\n+\t* tree-data-ref.c (data_ref_compare_tree): Make sure to return\n+\tequality only for semantically equal trees.\n+\n 2017-10-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82449"}, {"sha": "72cc8de59e875847956e7320be8d610883e57468", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b4306c0a150f144cddaf85ed814893b3b44b81/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b4306c0a150f144cddaf85ed814893b3b44b81/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=18b4306c0a150f144cddaf85ed814893b3b44b81", "patch": "@@ -1207,58 +1207,55 @@ data_ref_compare_tree (tree t1, tree t2)\n   if (t2 == NULL)\n     return 1;\n \n-  STRIP_NOPS (t1);\n-  STRIP_NOPS (t2);\n+  STRIP_USELESS_TYPE_CONVERSION (t1);\n+  STRIP_USELESS_TYPE_CONVERSION (t2);\n+  if (t1 == t2)\n+    return 0;\n \n-  if (TREE_CODE (t1) != TREE_CODE (t2))\n+  if (TREE_CODE (t1) != TREE_CODE (t2)\n+      && ! (CONVERT_EXPR_P (t1) && CONVERT_EXPR_P (t2)))\n     return TREE_CODE (t1) < TREE_CODE (t2) ? -1 : 1;\n \n   code = TREE_CODE (t1);\n   switch (code)\n     {\n-    /* For const values, we can just use hash values for comparisons.  */\n     case INTEGER_CST:\n-    case REAL_CST:\n-    case FIXED_CST:\n+      return tree_int_cst_compare (t1, t2);\n+\n     case STRING_CST:\n-    case COMPLEX_CST:\n-    case VECTOR_CST:\n-      {\n-\thashval_t h1 = iterative_hash_expr (t1, 0);\n-\thashval_t h2 = iterative_hash_expr (t2, 0);\n-\tif (h1 != h2)\n-\t  return h1 < h2 ? -1 : 1;\n-\tbreak;\n-      }\n+      if (TREE_STRING_LENGTH (t1) != TREE_STRING_LENGTH (t2))\n+\treturn TREE_STRING_LENGTH (t1) < TREE_STRING_LENGTH (t2) ? -1 : 1;\n+      return memcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n+\t\t     TREE_STRING_LENGTH (t1));\n \n     case SSA_NAME:\n-      cmp = data_ref_compare_tree (SSA_NAME_VAR (t1), SSA_NAME_VAR (t2));\n-      if (cmp != 0)\n-\treturn cmp;\n-\n       if (SSA_NAME_VERSION (t1) != SSA_NAME_VERSION (t2))\n \treturn SSA_NAME_VERSION (t1) < SSA_NAME_VERSION (t2) ? -1 : 1;\n       break;\n \n     default:\n       tclass = TREE_CODE_CLASS (code);\n \n-      /* For var-decl, we could compare their UIDs.  */\n+      /* For decls, compare their UIDs.  */\n       if (tclass == tcc_declaration)\n \t{\n \t  if (DECL_UID (t1) != DECL_UID (t2))\n \t    return DECL_UID (t1) < DECL_UID (t2) ? -1 : 1;\n \t  break;\n \t}\n-\n-      /* For expressions with operands, compare their operands recursively.  */\n-      for (i = TREE_OPERAND_LENGTH (t1) - 1; i >= 0; --i)\n+      /* For expressions, compare their operands recursively.  */\n+      else if (IS_EXPR_CODE_CLASS (tclass))\n \t{\n-\t  cmp = data_ref_compare_tree (TREE_OPERAND (t1, i),\n-\t\t\t\t       TREE_OPERAND (t2, i));\n-\t  if (cmp != 0)\n-\t    return cmp;\n+\t  for (i = TREE_OPERAND_LENGTH (t1) - 1; i >= 0; --i)\n+\t    {\n+\t      cmp = data_ref_compare_tree (TREE_OPERAND (t1, i),\n+\t\t\t\t\t   TREE_OPERAND (t2, i));\n+\t      if (cmp != 0)\n+\t\treturn cmp;\n+\t    }\n \t}\n+      else\n+\tgcc_unreachable ();\n     }\n \n   return 0;"}]}