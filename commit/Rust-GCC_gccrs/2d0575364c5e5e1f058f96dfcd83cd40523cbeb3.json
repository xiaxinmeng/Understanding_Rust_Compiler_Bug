{"sha": "2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwNTc1MzY0YzVlNWUxZjA1OGY5NmRmY2Q4M2NkNDA1MjNjYmViMw==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2017-10-17T13:22:48Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-10-17T13:22:48Z"}, "message": "Factor out division by squares and remove division around comparisons (0/2)\n\nCommit gcc/fold-const.c missing from r252827:\n\n    gcc/\n\tPR 71026/tree-optimization\n\t* fold-const.c (distribute_real_division): Removed.\n\t(fold_binary_loc): Remove calls to distribute_real_divison.\n\nFrom-SVN: r253812", "tree": {"sha": "c56bb8a9eb456d0bc7feee1b8e3613b1a9a7104a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56bb8a9eb456d0bc7feee1b8e3613b1a9a7104a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3/comments", "author": null, "committer": null, "parents": [{"sha": "92900aec89c94d569a94c4f2e42d90e25f993bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92900aec89c94d569a94c4f2e42d90e25f993bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92900aec89c94d569a94c4f2e42d90e25f993bb0"}], "stats": {"total": 60, "additions": 6, "deletions": 54}, "files": [{"sha": "f1bab5a8c5f98ea2cb0b2b3465c968e41685a7ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "patch": "@@ -1,3 +1,9 @@\n+2017-10-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR 71026/tree-optimization\n+\t* fold-const.c (distribute_real_division): Removed.\n+\t(fold_binary_loc): Remove calls to distribute_real_divison.\n+\n 2017-10-17  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-scop-detection.c"}, {"sha": "c16959b84ace943d5be3ce18cca7df8f98f2e347", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0575364c5e5e1f058f96dfcd83cd40523cbeb3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2d0575364c5e5e1f058f96dfcd83cd40523cbeb3", "patch": "@@ -3796,47 +3796,6 @@ invert_truthvalue_loc (location_t loc, tree arg)\n \t\t\t       : TRUTH_NOT_EXPR,\n \t\t\t  type, arg);\n }\n-\n-/* Knowing that ARG0 and ARG1 are both RDIV_EXPRs, simplify a binary operation\n-   with code CODE.  This optimization is unsafe.  */\n-static tree\n-distribute_real_division (location_t loc, enum tree_code code, tree type,\n-\t\t\t  tree arg0, tree arg1)\n-{\n-  bool mul0 = TREE_CODE (arg0) == MULT_EXPR;\n-  bool mul1 = TREE_CODE (arg1) == MULT_EXPR;\n-\n-  /* (A / C) +- (B / C) -> (A +- B) / C.  */\n-  if (mul0 == mul1\n-      && operand_equal_p (TREE_OPERAND (arg0, 1),\n-\t\t       TREE_OPERAND (arg1, 1), 0))\n-    return fold_build2_loc (loc, mul0 ? MULT_EXPR : RDIV_EXPR, type,\n-\t\t\tfold_build2_loc (loc, code, type,\n-\t\t\t\t     TREE_OPERAND (arg0, 0),\n-\t\t\t\t     TREE_OPERAND (arg1, 0)),\n-\t\t\tTREE_OPERAND (arg0, 1));\n-\n-  /* (A / C1) +- (A / C2) -> A * (1 / C1 +- 1 / C2).  */\n-  if (operand_equal_p (TREE_OPERAND (arg0, 0),\n-\t\t       TREE_OPERAND (arg1, 0), 0)\n-      && TREE_CODE (TREE_OPERAND (arg0, 1)) == REAL_CST\n-      && TREE_CODE (TREE_OPERAND (arg1, 1)) == REAL_CST)\n-    {\n-      REAL_VALUE_TYPE r0, r1;\n-      r0 = TREE_REAL_CST (TREE_OPERAND (arg0, 1));\n-      r1 = TREE_REAL_CST (TREE_OPERAND (arg1, 1));\n-      if (!mul0)\n-\treal_arithmetic (&r0, RDIV_EXPR, &dconst1, &r0);\n-      if (!mul1)\n-        real_arithmetic (&r1, RDIV_EXPR, &dconst1, &r1);\n-      real_arithmetic (&r0, code, &r0, &r1);\n-      return fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t  TREE_OPERAND (arg0, 0),\n-\t\t\t  build_real (type, r0));\n-    }\n-\n-  return NULL_TREE;\n-}\n \f\n /* Return a BIT_FIELD_REF of type TYPE to refer to BITSIZE bits of INNER\n    starting at BITPOS.  The field is unsigned if UNSIGNEDP is nonzero\n@@ -9395,12 +9354,6 @@ fold_binary_loc (location_t loc,\n \t\t}\n \t    }\n \n-\t  if (flag_unsafe_math_optimizations\n-\t      && (TREE_CODE (arg0) == RDIV_EXPR || TREE_CODE (arg0) == MULT_EXPR)\n-\t      && (TREE_CODE (arg1) == RDIV_EXPR || TREE_CODE (arg1) == MULT_EXPR)\n-\t      && (tem = distribute_real_division (loc, code, type, arg0, arg1)))\n-\t    return tem;\n-\n           /* Convert a + (b*c + d*e) into (a + b*c) + d*e.\n              We associate floats only if the user has specified\n              -fassociative-math.  */\n@@ -9800,13 +9753,6 @@ fold_binary_loc (location_t loc,\n \t    return tem;\n \t}\n \n-      if (FLOAT_TYPE_P (type)\n-\t  && flag_unsafe_math_optimizations\n-\t  && (TREE_CODE (arg0) == RDIV_EXPR || TREE_CODE (arg0) == MULT_EXPR)\n-\t  && (TREE_CODE (arg1) == RDIV_EXPR || TREE_CODE (arg1) == MULT_EXPR)\n-\t  && (tem = distribute_real_division (loc, code, type, arg0, arg1)))\n-\treturn tem;\n-\n       /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the same or\n \t one.  Make sure the type is not saturating and has the signedness of\n \t the stripped operands, as fold_plusminus_mult_expr will re-associate."}]}