{"sha": "0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "node_id": "C_kwDOANBUbNoAKDBmY2MwY2Y5ZGNhOWYxMWFjYmJjOTRjOTQzNzc1OWJkZmJkMjk3ZjI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-09T15:37:09Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-09T15:37:09Z"}, "message": "libgomp: Prepare for reverse offload fn lookup\n\nPrepare for reverse-offloading function-pointer lookup by passing\na rev_fn_table argument to GOMP_OFFLOAD_load_image.\n\nThe argument will be NULL, unless GOMP_REQUIRES_REVERSE_OFFLOAD is\nrequested and devices not supported it, are filtered out.\n(Up to and including this commit, no non-host device claims such\nsupport and the caller currently always passes NULL.)\n\nlibgomp/ChangeLog:\n\n\t* libgomp-plugin.h (GOMP_OFFLOAD_load_image): Add\n\t'uint64_t **rev_fn_table' argument.\n\t* oacc-host.c (host_load_image): Likewise.\n\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Likewise;\n\tcurrently unused.\n\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Likewise.\n\t* target.c (gomp_load_image_to_device): Update call but pass\n\tNULL for now.\n\nliboffloadmic/ChangeLog:\n\n\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_load_image):\n\tAdd (unused) uint64_t **rev_fn_table argument.", "tree": {"sha": "1fdf0ff7737beb5575c456a4aed681227b07df76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdf0ff7737beb5575c456a4aed681227b07df76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a53dc7d87969d230e9ca51fcab59f3a72e5f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a53dc7d87969d230e9ca51fcab59f3a72e5f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a53dc7d87969d230e9ca51fcab59f3a72e5f6e"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "6ab5ac6365fe5a88b091184a3855b52e8d84b7b0", "filename": "libgomp/libgomp-plugin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Flibgomp-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Flibgomp-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp-plugin.h?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -130,7 +130,7 @@ extern bool GOMP_OFFLOAD_init_device (int);\n extern bool GOMP_OFFLOAD_fini_device (int);\n extern unsigned GOMP_OFFLOAD_version (void);\n extern int GOMP_OFFLOAD_load_image (int, unsigned, const void *,\n-\t\t\t\t    struct addr_pair **);\n+\t\t\t\t    struct addr_pair **, uint64_t **);\n extern bool GOMP_OFFLOAD_unload_image (int, unsigned, const void *);\n extern void *GOMP_OFFLOAD_alloc (int, size_t);\n extern bool GOMP_OFFLOAD_free (int, void *);"}, {"sha": "4e3971ae1a9cd95dfb0ad6fd113f32acb410bdaa", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -81,7 +81,8 @@ static int\n host_load_image (int n __attribute__ ((unused)),\n \t\t unsigned v __attribute__ ((unused)),\n \t\t const void *t __attribute__ ((unused)),\n-\t\t struct addr_pair **r __attribute__ ((unused)))\n+\t\t struct addr_pair **r __attribute__ ((unused)),\n+\t\t uint64_t **f __attribute__ ((unused)))\n {\n   return 0;\n }"}, {"sha": "6c77f896f886b788be29b20d7bfb334a5d80a80b", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -3346,11 +3346,14 @@ GOMP_OFFLOAD_init_device (int n)\n \n /* Load GCN object-code module described by struct gcn_image_desc in\n    TARGET_DATA and return references to kernel descriptors in TARGET_TABLE.\n-   If there are any constructors then run them.  */\n+   If there are any constructors then run them.  If not NULL, REV_FN_TABLE will\n+   contain the on-device addresses of the functions for reverse offload.  To be\n+   freed by the caller.  */\n \n int\n GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n-\t\t\t struct addr_pair **target_table)\n+\t\t\t struct addr_pair **target_table,\n+\t\t\t uint64_t **rev_fn_table __attribute__((unused)))\n {\n   if (GOMP_VERSION_DEV (version) != GOMP_VERSION_GCN)\n     {"}, {"sha": "044bb9c09a61ba3be5de9083c77df8eebb4d030d", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -1266,11 +1266,14 @@ nvptx_set_clocktick (CUmodule module, struct ptx_device *dev)\n }\n \n /* Load the (partial) program described by TARGET_DATA to device\n-   number ORD.  Allocate and return TARGET_TABLE.  */\n+   number ORD.  Allocate and return TARGET_TABLE.  If not NULL, REV_FN_TABLE\n+   will contain the on-device addresses of the functions for reverse offload.\n+   To be freed by the caller.  */\n \n int\n GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n-\t\t\t struct addr_pair **target_table)\n+\t\t\t struct addr_pair **target_table,\n+\t\t\t uint64_t **rev_fn_table __attribute__((unused)))\n {\n   CUmodule module;\n   const char *const *var_names;"}, {"sha": "57634839c8fd70e9d1a0f2e60622bd99d24a431b", "filename": "libgomp/target.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -2196,7 +2196,7 @@ gomp_load_image_to_device (struct gomp_device_descr *devicep, unsigned version,\n \n   num_target_entries\n     = devicep->load_image_func (devicep->target_id, version,\n-\t\t\t\ttarget_data, &target_table);\n+\t\t\t\ttarget_data, &target_table, NULL);\n \n   if (num_target_entries != num_funcs + num_vars\n       /* \"+1\" due to the additional ICV struct.  */"}, {"sha": "7be27f0459db06a37c93427eec820f9f866c0671", "filename": "liboffloadmic/plugin/libgomp-plugin-intelmic.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp?ref=0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "patch": "@@ -349,7 +349,8 @@ GOMP_OFFLOAD_version (void)\n \n extern \"C\" int\n GOMP_OFFLOAD_load_image (int device, const unsigned version,\n-\t\t\t const void *target_image, addr_pair **result)\n+\t\t\t const void *target_image, addr_pair **result,\n+\t\t\t uint64_t ** /* rev_fn_table */)\n {\n   TRACE (\"(device = %d, target_image = %p)\", device, target_image);\n "}]}