{"sha": "4739f95b008ff61288e46a5f615e97fbdb06af01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczOWY5NWIwMDhmZjYxMjg4ZTQ2YTVmNjE1ZTk3ZmJkYjA2YWYwMQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-03-24T08:49:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:30Z"}, "message": "[Ada] Bump secondary stack alignment factor in full runtimes\n\n2020-06-12  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-secsta.ads (Memory_Alignment): New constant, memory\n\talignment for chunks and allocated blocks. Initialize to\n\tStandard'Maximum_Alignment * 2.\n\t(Chunk_Memory): Use it.\n\t* libgnat/s-secsta.adb (Round_Up): Likewise.", "tree": {"sha": "39ae9b7a2df5c71a18fb02086220129eb0f47dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ae9b7a2df5c71a18fb02086220129eb0f47dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4739f95b008ff61288e46a5f615e97fbdb06af01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4739f95b008ff61288e46a5f615e97fbdb06af01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4739f95b008ff61288e46a5f615e97fbdb06af01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4739f95b008ff61288e46a5f615e97fbdb06af01/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb539f3b30f59c7a53bac36aa94962e9cb99fb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb539f3b30f59c7a53bac36aa94962e9cb99fb0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb539f3b30f59c7a53bac36aa94962e9cb99fb0e"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "7ec846281f9c9fec84477cf70a58a4afa1bc98fe", "filename": "gcc/ada/libgnat/s-secsta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4739f95b008ff61288e46a5f615e97fbdb06af01/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4739f95b008ff61288e46a5f615e97fbdb06af01/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.adb?ref=4739f95b008ff61288e46a5f615e97fbdb06af01", "patch": "@@ -564,7 +564,7 @@ package body System.Secondary_Stack is\n       --------------\n \n       function Round_Up (Size : Storage_Count) return Memory_Size is\n-         Algn_MS : constant Memory_Size := Standard'Maximum_Alignment;\n+         Algn_MS : constant Memory_Size := Memory_Alignment;\n          Size_MS : constant Memory_Size := Memory_Size (Size);\n \n       begin"}, {"sha": "d06e97f96d8f09c5f69199154c8aa350eb7cfddc", "filename": "gcc/ada/libgnat/s-secsta.ads", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4739f95b008ff61288e46a5f615e97fbdb06af01/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4739f95b008ff61288e46a5f615e97fbdb06af01/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.ads?ref=4739f95b008ff61288e46a5f615e97fbdb06af01", "patch": "@@ -261,10 +261,23 @@ private\n    subtype Memory_Index is Memory_Size;\n    --  Index into the memory storage of a single chunk\n \n+   Memory_Alignment : constant := Standard'Maximum_Alignment * 2;\n+   --  The memory alignment we will want to honor on every allocation.\n+   --\n+   --  At this stage, gigi assumes we can accomodate any alignment requirement\n+   --  there might be on the data type for which the memory gets allocated (see\n+   --  build_call_alloc_dealloc).\n+   --\n+   --  The multiplication factor is intended to account for requirements\n+   --  by user code compiled with specific arch/cpu options such as -mavx\n+   --  on X86[_64] targets, which Standard'Maximum_Alignment doesn't convey\n+   --  without such compilation options. * 4 would actually be needed to\n+   --  support -mavx512f on X86, but this would incur more annoying memory\n+   --  consumption overheads.\n+\n    type Chunk_Memory is array (Memory_Size range <>) of SSE.Storage_Element;\n-   for Chunk_Memory'Alignment use Standard'Maximum_Alignment;\n-   --  The memory storage of a single chunk. It utilizes maximum alignment in\n-   --  order to guarantee efficient operations.\n+   for Chunk_Memory'Alignment use Memory_Alignment;\n+   --  The memory storage of a single chunk\n \n    --------------\n    -- SS_Chunk --"}]}