{"sha": "3f59fa1c963695016894e5205539f8f45a0c4e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1OWZhMWM5NjM2OTUwMTY4OTRlNTIwNTUzOWY4ZjQ1YTBjNGU2OQ==", "commit": {"author": {"name": "Le-Chun Wu", "email": "lcwu@google.com", "date": "2010-07-03T01:10:06Z"}, "committer": {"name": "Le-Chun Wu", "email": "lcwu@gcc.gnu.org", "date": "2010-07-03T01:10:06Z"}, "message": "invoke.texi: Update documentation of -Wshadow.\n\n       PR/44128\n       * gcc/doc/invoke.texi: Update documentation of -Wshadow.\n       * gcc/cp/name-lookup.c (pushdecl_maybe_friend): Warn when a local\n       decl (variable or type) shadows another type.\n       * gcc/testsuite/g++.dg/warn/Wshadow-7.C: New test.\n\nFrom-SVN: r161765", "tree": {"sha": "ee5c504d1b5dfc43a43982eb17eaceb778181586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee5c504d1b5dfc43a43982eb17eaceb778181586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f59fa1c963695016894e5205539f8f45a0c4e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f59fa1c963695016894e5205539f8f45a0c4e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f59fa1c963695016894e5205539f8f45a0c4e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f59fa1c963695016894e5205539f8f45a0c4e69/comments", "author": null, "committer": null, "parents": [{"sha": "73160ba9dc7be367d91f286eb5b07cb8af4a79bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73160ba9dc7be367d91f286eb5b07cb8af4a79bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73160ba9dc7be367d91f286eb5b07cb8af4a79bc"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "7d2581022640a2287bdc75d40e19644b06673d31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -1,3 +1,8 @@\n+2010-07-02  Le-Chun Wu  <lcwu@google.com>\n+\n+\tPR/44128\n+\t* doc/invoke.texi: Update documentation of -Wshadow.\n+\n 2010-07-02  Daniel Jacobowitz  <dan@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n \t    Sandra Loosemore <sandra@codesourcery.com>"}, {"sha": "e7a9e858f85d26de36b19477eeba2c8c540761f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -1,3 +1,9 @@\n+2010-07-02  Le-Chun Wu  <lcwu@google.com>\n+\n+\tPR/44128\n+\t* name-lookup.c (pushdecl_maybe_friend): Warn when a local decl\n+\t(variable or type) shadows another type.\n+\n 2010-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44780"}, {"sha": "153bdfd0ed56ca38aa52fe798fba12f1a4ee596a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -1017,10 +1017,22 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t\t   /* Inline decls shadow nothing.  */\n \t\t   && !DECL_FROM_INLINE (x)\n \t\t   && (TREE_CODE (oldlocal) == PARM_DECL\n-\t\t       || TREE_CODE (oldlocal) == VAR_DECL)\n-\t\t   /* Don't check the `this' parameter.  */\n-\t\t   && !DECL_ARTIFICIAL (oldlocal)\n-\t\t   && !DECL_ARTIFICIAL (x))\n+\t\t       || TREE_CODE (oldlocal) == VAR_DECL\n+                       /* If the old decl is a type decl, only warn if the\n+                          old decl is an explicit typedef or if both the old\n+                          and new decls are type decls.  */\n+                       || (TREE_CODE (oldlocal) == TYPE_DECL\n+                           && (!DECL_ARTIFICIAL (oldlocal)\n+                               || TREE_CODE (x) == TYPE_DECL)))\n+\t\t   /* Don't check the `this' parameter or internally generated\n+                      vars unless it's an implicit typedef (see\n+                      create_implicit_typedef in decl.c).  */\n+\t\t   && (!DECL_ARTIFICIAL (oldlocal)\n+                       || DECL_IMPLICIT_TYPEDEF_P (oldlocal))\n+                   /* Don't check for internally generated vars unless\n+                      it's an implicit typedef (see create_implicit_typedef\n+                      in decl.c).  */\n+\t\t   && (!DECL_ARTIFICIAL (x) || DECL_IMPLICIT_TYPEDEF_P (x)))\n \t    {\n \t      bool nowarn = false;\n \n@@ -1081,10 +1093,12 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \n \t  /* Maybe warn if shadowing something else.  */\n \t  else if (warn_shadow && !DECL_EXTERNAL (x)\n-\t      /* No shadow warnings for internally generated vars.  */\n-\t      && ! DECL_ARTIFICIAL (x)\n-\t      /* No shadow warnings for vars made for inlining.  */\n-\t      && ! DECL_FROM_INLINE (x))\n+                   /* No shadow warnings for internally generated vars unless\n+                      it's an implicit typedef (see create_implicit_typedef\n+                      in decl.c).  */\n+                   && (! DECL_ARTIFICIAL (x) || DECL_IMPLICIT_TYPEDEF_P (x))\n+                   /* No shadow warnings for vars made for inlining.  */\n+                   && ! DECL_FROM_INLINE (x))\n \t    {\n \t      tree member;\n \n@@ -1103,7 +1117,13 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t\t\t   x);\n \t\t}\n \t      else if (oldglobal != NULL_TREE\n-\t\t       && TREE_CODE (oldglobal) == VAR_DECL)\n+\t\t       && (TREE_CODE (oldglobal) == VAR_DECL\n+                           /* If the old decl is a type decl, only warn if the\n+                              old decl is an explicit typedef or if both the\n+                              old and new decls are type decls.  */\n+                           || (TREE_CODE (oldglobal) == TYPE_DECL\n+                               && (!DECL_ARTIFICIAL (oldglobal)\n+                                   || TREE_CODE (x) == TYPE_DECL))))\n \t\t/* XXX shadow warnings in outer-more namespaces */\n \t\t{\n \t\t  warning_at (input_location, OPT_Wshadow,"}, {"sha": "01066458212b919fdbfb81bb48e6dcae66c34742", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -3859,8 +3859,10 @@ Do not warn whenever an @samp{#else} or an @samp{#endif} are followed by text.\n @item -Wshadow\n @opindex Wshadow\n @opindex Wno-shadow\n-Warn whenever a local variable shadows another local variable, parameter or\n-global variable or whenever a built-in function is shadowed.\n+Warn whenever a local variable or type declaration shadows another variable,\n+parameter, type, or class member (in C++), or whenever a built-in function\n+is shadowed. Note that in C++, the compiler will not warn if a local variable\n+shadows a struct/class/enum, but will warn if it shadows an explicit typedef.\n \n @item -Wlarger-than=@var{len}\n @opindex Wlarger-than=@var{len}"}, {"sha": "ea3e85660cb7524564aef81c6ff0193cfccb4555", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -1,3 +1,8 @@\n+2010-07-02  Le-Chun Wu  <lcwu@google.com>\n+\n+\tPR/44128\n+\t* g++.dg/warn/Wshadow-7.C: New test.\n+\n 2010-07-02  Daniel Jacobowitz  <dan@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n \t    Sandra Loosemore <sandra@codesourcery.com>"}, {"sha": "5de952ee79033494e22364399e8653fee3f8ff94", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-7.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f59fa1c963695016894e5205539f8f45a0c4e69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-7.C?ref=3f59fa1c963695016894e5205539f8f45a0c4e69", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/44128\n+// { dg-options \"-Wshadow\" }\n+\n+typedef long My_ssize_t;  // { dg-warning \"shadowed declaration\" }\n+typedef int Foo;          // { dg-warning \"shadowed declaration\" }\n+struct Bar1 {             // { dg-bogus \"shadowed declaration\" }\n+  int a;\n+};\n+struct Bar2 {             // { dg-warning \"shadowed declaration\" }\n+  int a;\n+};\n+\n+void func() {\n+  typedef int My_ssize_t; // { dg-warning \"shadows a global\" }\n+  typedef char My_Num;    // { dg-warning \"shadowed declaration\" }\n+  {\n+    typedef short My_Num; // { dg-warning \"shadows a previous local\" }\n+  }\n+  int Foo;                // { dg-warning \"shadows a global\" }\n+  float Bar1;             // { dg-bogus \"shadows a global\" }\n+  struct Bar2 {           // { dg-warning \"shadows a global\" }\n+    int a;\n+  };\n+  struct Bar3 {           // { dg-warning \"shadowed declaration\" }\n+    int a;\n+  };\n+  struct Bar4 {           // { dg-bogus \"shadowed declaration\" }\n+    int a;\n+  };\n+  {\n+    struct Bar3 {         // { dg-warning \"shadows a previous local\" }\n+      int a;\n+    };\n+    char Bar4;            // { dg-bogus \"shadows a previous local\" }\n+    int My_Num;           // { dg-warning \"shadows a previous local\" }\n+  }\n+}"}]}