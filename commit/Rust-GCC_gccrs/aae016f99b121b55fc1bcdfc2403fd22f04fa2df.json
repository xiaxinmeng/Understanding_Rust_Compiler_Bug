{"sha": "aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "node_id": "C_kwDOANBUbNoAKGFhZTAxNmY5OWIxMjFiNTVmYzFiY2RmYzI0MDNmZDIyZjA0ZmEyZGY", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-18T09:51:09Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-18T09:51:09Z"}, "message": "ifcvt: Do not lower bitfields if we can't analyze dr's [PR107275]\n\nThe ifcvt dead code elimination code was not built to deal with inline\nassembly, loops with such would never be if-converted in the past since we can't\ndo data-reference analysis on them and vectorization would eventually fail.  For\nthis reason we now also do not lower bitfields if the data-reference analysis\nfails, as we would not end up vectorizing it.  As a consequence this also fixes\nthis PR as the dead code elimination will not run for such cases and wrongfully\neliminate inline assembly statements.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/107275\n\t* tree-if-conv.cc (if_convertible_loop_p_1): Move\n\tfind_data_references_in_loop call from here...\n\t(if_convertible_loop_p): And move data-reference vector initialization\n\tfrom here...\n\t(tree_if_conversion):... to here.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/pr107275.c: New test.", "tree": {"sha": "5201b2a1487018d2062b4eaa26ad70c35a25d702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5201b2a1487018d2062b4eaa26ad70c35a25d702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae016f99b121b55fc1bcdfc2403fd22f04fa2df/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23225fb4f764dfc3e3e729c7d7238f03f282aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23225fb4f764dfc3e3e729c7d7238f03f282aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23225fb4f764dfc3e3e729c7d7238f03f282aaa"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "16327c46add7f74dd36c1a636c0fb9c84d5232c8", "filename": "gcc/testsuite/gcc.dg/vect/pr107275.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae016f99b121b55fc1bcdfc2403fd22f04fa2df/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae016f99b121b55fc1bcdfc2403fd22f04fa2df/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107275.c?ref=aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+struct st\n+{\n+  int a : 1;\n+};\n+\n+void\n+foo (struct st *s, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      s[i].a = i;\n+      __asm__ __volatile__ (\"\":::\"memory\");\n+    }\n+}"}, {"sha": "a83b013d2ad3d9066b1c2bc62282ec054483598f", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae016f99b121b55fc1bcdfc2403fd22f04fa2df/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae016f99b121b55fc1bcdfc2403fd22f04fa2df/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=aae016f99b121b55fc1bcdfc2403fd22f04fa2df", "patch": "@@ -1416,9 +1416,6 @@ if_convertible_loop_p_1 (class loop *loop, vec<data_reference_p> *refs)\n   basic_block exit_bb = NULL;\n   vec<basic_block> region;\n \n-  if (find_data_references_in_loop (loop, refs) == chrec_dont_know)\n-    return false;\n-\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   for (i = 0; i < loop->num_nodes; i++)\n@@ -1541,12 +1538,11 @@ if_convertible_loop_p_1 (class loop *loop, vec<data_reference_p> *refs)\n    - if its basic blocks and phi nodes are if convertible.  */\n \n static bool\n-if_convertible_loop_p (class loop *loop)\n+if_convertible_loop_p (class loop *loop, vec<data_reference_p> *refs)\n {\n   edge e;\n   edge_iterator ei;\n   bool res = false;\n-  vec<data_reference_p> refs;\n \n   /* Handle only innermost loop.  */\n   if (!loop || loop->inner)\n@@ -1578,15 +1574,7 @@ if_convertible_loop_p (class loop *loop)\n     if (loop_exit_edge_p (loop, e))\n       return false;\n \n-  refs.create (5);\n-  res = if_convertible_loop_p_1 (loop, &refs);\n-\n-  data_reference_p dr;\n-  unsigned int i;\n-  for (i = 0; refs.iterate (i, &dr); i++)\n-    free (dr->aux);\n-\n-  free_data_refs (refs);\n+  res = if_convertible_loop_p_1 (loop, refs);\n \n   delete innermost_DR_map;\n   innermost_DR_map = NULL;\n@@ -3499,6 +3487,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   auto_vec <gassign *, 4> writes_to_lower;\n   bitmap exit_bbs;\n   edge pe;\n+  vec<data_reference_p> refs;\n \n  again:\n   rloop = NULL;\n@@ -3508,6 +3497,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   need_to_predicate = false;\n   need_to_rewrite_undefined = false;\n   any_complicated_phi = false;\n+  refs.create (5);\n \n   /* Apply more aggressive if-conversion when loop or its outer loop were\n      marked with simd pragma.  When that's the case, we try to if-convert\n@@ -3537,11 +3527,14 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n       goto cleanup;\n     }\n \n+  if (find_data_references_in_loop (loop, &refs) == chrec_dont_know)\n+    goto cleanup;\n+\n   if (loop->num_nodes > 2)\n     {\n       need_to_ifcvt = true;\n \n-      if (!if_convertible_loop_p (loop) || !dbg_cnt (if_conversion_tree))\n+      if (!if_convertible_loop_p (loop, &refs) || !dbg_cnt (if_conversion_tree))\n \tgoto cleanup;\n \n       if ((need_to_predicate || any_complicated_phi)\n@@ -3658,6 +3651,13 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   todo |= TODO_cleanup_cfg;\n \n  cleanup:\n+  data_reference_p dr;\n+  unsigned int i;\n+  for (i = 0; refs.iterate (i, &dr); i++)\n+    free (dr->aux);\n+\n+  refs.truncate (0);\n+\n   if (ifc_bbs)\n     {\n       unsigned int i;"}]}