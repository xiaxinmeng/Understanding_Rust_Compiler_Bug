{"sha": "7ffb61d5030d7299320beb9b16978a66d6513d86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmYjYxZDUwMzBkNzI5OTMyMGJlYjliMTY5NzhhNjZkNjUxM2Q4Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-21T17:54:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-21T17:54:50Z"}, "message": "hash_map: Remove forward declaration of equality operator...\n\n2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/hash_map: Remove forward declaration of equality\n\toperator, not needed for friendship of all its instances.\n\t* include/ext/hash_set: Likewise.\n\t* include/bits/stl_set.h: Likewise for equality operator and\n\toperator less.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_queue.h: Likewise.\n\t* include/bits/stl_stack.h: Likewise.\n\t* include/bits/streambuf_iterator.h: Likewise for copy.\n\t* include/std/std_streambuf.h: Likewise for __copy_aux and find.\n\t* include/tr1/boost_shared_ptr.h: Likewise for get_deleter.\n\t* include/tr1/random: Likewise, remove all forward declarations\n\tof inserters and extractors.\n\nFrom-SVN: r117116", "tree": {"sha": "7f6dcc8aee5b7259218680fba1642dee808d4dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f6dcc8aee5b7259218680fba1642dee808d4dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffb61d5030d7299320beb9b16978a66d6513d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffb61d5030d7299320beb9b16978a66d6513d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffb61d5030d7299320beb9b16978a66d6513d86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffb61d5030d7299320beb9b16978a66d6513d86/comments", "author": null, "committer": null, "parents": [{"sha": "6750b31e4ab6e354e50d48f386a75c8b54928db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6750b31e4ab6e354e50d48f386a75c8b54928db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6750b31e4ab6e354e50d48f386a75c8b54928db1"}], "stats": {"total": 394, "additions": 39, "deletions": 355}, "files": [{"sha": "e85e75a613103e4e70790ec20c3262038ee701a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -1,3 +1,20 @@\n+2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/hash_map: Remove forward declaration of equality\n+\toperator, not needed for friendship of all its instances.\n+\t* include/ext/hash_set: Likewise.\n+\t* include/bits/stl_set.h: Likewise for equality operator and\n+\toperator less.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_queue.h: Likewise.\n+\t* include/bits/stl_stack.h: Likewise.\n+\t* include/bits/streambuf_iterator.h: Likewise for copy.\n+\t* include/std/std_streambuf.h: Likewise for __copy_aux and find.\n+\t* include/tr1/boost_shared_ptr.h: Likewise for get_deleter.\n+\t* include/tr1/random: Likewise, remove all forward declarations\n+\tof inserters and extractors.\n+\n 2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/sso_string_base.h (__sso_string_base<>::_M_max_size(),"}, {"sha": "b11b6e409d57204842fa2044341ce9e7716d9b58", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -65,23 +65,6 @@\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \n-  // Forward declaration of operators < and ==, needed for friend declaration.\n-\n-  template <typename _Key, typename _Tp,\n-            typename _Compare = std::less<_Key>,\n-            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n-    class multimap;\n-\n-  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline bool\n-    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n-\t       const multimap<_Key, _Tp, _Compare, _Alloc>& __y);\n-\n-  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline bool\n-    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n-\t      const multimap<_Key, _Tp, _Compare, _Alloc>& __y);\n-\n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n    *  retrieved based on a key, in logarithmic time.\n@@ -103,7 +86,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n    *  called (*_unique versus *_equal, same as the standard).\n    *  @endif\n   */\n-  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n+  template <typename _Key, typename _Tp,\n+\t    typename _Compare = std::less<_Key>,\n+\t    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap\n     {\n     public:"}, {"sha": "8c499c3690f63d0335827cc5aa8f942a6745437f", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -65,21 +65,6 @@\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \n-  // Forward declaration of operators < and ==, needed for friend declaration.\n-  template <class _Key, class _Compare = std::less<_Key>,\n-\t    class _Alloc = std::allocator<_Key> >\n-    class multiset;\n-\n-  template <class _Key, class _Compare, class _Alloc>\n-    inline bool\n-    operator==(const multiset<_Key, _Compare, _Alloc>& __x,\n-\t       const multiset<_Key, _Compare, _Alloc>& __y);\n-\n-  template <class _Key, class _Compare, class _Alloc>\n-    inline bool\n-    operator<(const multiset<_Key, _Compare, _Alloc>& __x,\n-\t      const multiset<_Key, _Compare, _Alloc>& __y);\n-\n   /**\n    *  @brief A standard container made up of elements, which can be retrieved\n    *  in logarithmic time.\n@@ -100,7 +85,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n    *  called (*_unique versus *_equal, same as the standard).\n    *  @endif\n   */\n-  template <class _Key, class _Compare, class _Alloc>\n+  template <class _Key, class _Compare = std::less<_Key>,\n+\t    class _Alloc = std::allocator<_Key> >\n     class multiset\n     {\n       // concept requirements"}, {"sha": "04e3a7b46e0212a0420e1634d8bb4a89b9c1ec57", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -67,18 +67,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Forward declarations of operators < and ==, needed for friend declaration.\n-  template<typename _Tp, typename _Sequence = deque<_Tp> >\n-    class queue;\n-\n-  template<typename _Tp, typename _Seq>\n-    inline bool\n-    operator==(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);\n-\n-  template<typename _Tp, typename _Seq>\n-    inline bool\n-    operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);\n-\n   /**\n    *  @brief  A standard container giving FIFO behavior.\n    *\n@@ -103,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  which is a typedef for the second Sequence parameter, and @c push and\n    *  @c pop, which are standard %queue/FIFO operations.\n   */\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Sequence = deque<_Tp> >\n     class queue\n     {\n       // concept requirements"}, {"sha": "b61106aef65244893309d8995297111ddabe5ec2", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -65,21 +65,6 @@\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \n-  // Forward declarations of operators < and ==, needed for friend declaration.\n-  template<class _Key, class _Compare = std::less<_Key>,\n-\t   class _Alloc = std::allocator<_Key> >\n-    class set;\n-\n-  template<class _Key, class _Compare, class _Alloc>\n-    inline bool\n-    operator==(const set<_Key, _Compare, _Alloc>& __x,\n-\t       const set<_Key, _Compare, _Alloc>& __y);\n-\n-  template<class _Key, class _Compare, class _Alloc>\n-    inline bool\n-    operator<(const set<_Key, _Compare, _Alloc>& __x,\n-\t      const set<_Key, _Compare, _Alloc>& __y);\n-\n   /**\n    *  @brief A standard container made up of unique keys, which can be\n    *  retrieved in logarithmic time.\n@@ -103,7 +88,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n    *  called (*_unique versus *_equal, same as the standard).\n    *  @endif\n   */\n-  template<class _Key, class _Compare, class _Alloc>\n+  template<class _Key, class _Compare = std::less<_Key>,\n+\t   class _Alloc = std::allocator<_Key> >\n     class set\n     {\n       // concept requirements"}, {"sha": "f5b41facb034383f171016c78b117e9f13f7df0f", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -67,19 +67,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Forward declarations of operators == and <, needed for friend\n-  // declaration.\n-  template<typename _Tp, typename _Sequence = deque<_Tp> >\n-    class stack;\n-\n-  template<typename _Tp, typename _Seq>\n-    inline bool\n-    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y);\n-\n-  template<typename _Tp, typename _Seq>\n-    inline bool\n-    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y);\n-\n   /**\n    *  @brief  A standard container giving FILO behavior.\n    *\n@@ -107,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  push, @c pop, and @c top, which are standard %stack/FILO\n    *  operations.\n   */\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Sequence = deque<_Tp> >\n     class stack\n     {\n       // concept requirements"}, {"sha": "a1cf234a3870371c49c38ca4820c72ff964b7cc4", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -43,12 +43,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n      \n-  template<typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n-  \t                            ostreambuf_iterator<_CharT> >::__type\n-    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n-\t ostreambuf_iterator<_CharT>);\n-\n   // 24.5.3 Template class istreambuf_iterator\n   /// Provides input iterator semantics for streambufs.\n   template<typename _CharT, typename _Traits>"}, {"sha": "b6855ebb3beb0fd3218e79fae211786477a37d14", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -72,23 +72,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n   using std::pair;\n   using std::_Select1st;\n \n-  // Forward declaration of equality operator; needed for friend\n-  // declaration.\n-  template<class _Key, class _Tp, class _HashFn = hash<_Key>,\n-\t   class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >\n-    class hash_map;\n-\n-  template<class _Key, class _Tp, class _HashFn, class _EqKey, class _Alloc>\n-    inline bool\n-    operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,\n-\t       const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&);\n-\n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template<class _Key, class _Tp, class _HashFn, class _EqualKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn = hash<_Key>,\n+\t   class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >\n     class hash_map\n     {\n     private:\n@@ -295,25 +285,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n \t hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { __hm1.swap(__hm2); }\n \n-  // Forward declaration of equality operator; needed for friend declaration.\n-  template<class _Key, class _Tp,\n-\t    class _HashFn  = hash<_Key>,\n-\t    class _EqualKey = equal_to<_Key>,\n-\t    class _Alloc =  allocator<_Tp> >\n-    class hash_multimap;\n-\n-  template<class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n-    inline bool\n-    operator==(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,\n-\t       const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2);\n \n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template<class _Key, class _Tp, class _HashFn, class _EqualKey,\n-\t    class _Alloc>\n+  template<class _Key, class _Tp,\n+\t   class _HashFn = hash<_Key>,\n+\t   class _EqualKey = equal_to<_Key>,\n+\t   class _Alloc = allocator<_Tp> >\n     class hash_multimap\n     {\n       // concept requirements"}, {"sha": "668fe13bd2a4ecc72650c6c2d7d405547755e2f8", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -72,24 +72,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n   using std::pair;\n   using std::_Identity;\n \n-  // Forward declaration of equality operator; needed for friend\n-  // declaration.\n-  template<class _Value, class _HashFcn  = hash<_Value>,\n-\t    class _EqualKey = equal_to<_Value>,\n-\t    class _Alloc = allocator<_Value> >\n-    class hash_set;\n-\n-  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n-    inline bool\n-    operator==(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs1,\n-\t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs2);\n-\n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn  = hash<_Value>,\n+\t   class _EqualKey = equal_to<_Value>,\n+\t   class _Alloc = allocator<_Value> >\n     class hash_set\n     {\n       // concept requirements\n@@ -285,24 +275,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n \t hash_set<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { __hs1.swap(__hs2); }\n \n-  template<class _Value,\n-\t    class _HashFcn = hash<_Value>,\n-\t    class _EqualKey = equal_to<_Value>,\n-\t    class _Alloc = allocator<_Value> >\n-    class hash_multiset;\n-\n-  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n-    inline bool\n-    operator==(const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n-\t       const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2);\n-\n \n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value,\n+\t   class _HashFcn = hash<_Value>,\n+\t   class _EqualKey = equal_to<_Value>,\n+\t   class _Alloc = allocator<_Value> >\n     class hash_multiset\n     {\n       // concept requirements"}, {"sha": "67ffaf335f6746e32a6636e929bcaecd7790b04d", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -60,18 +60,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,\n \t\t\t  basic_streambuf<_CharT, _Traits>*, bool&);\n \n-  template<typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n-\t\t\t\t    _CharT*>::__type\n-    __copy_aux(istreambuf_iterator<_CharT>,\n-\t       istreambuf_iterator<_CharT>, _CharT*);\n-\n-  template<typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n-\t\t\t\t    istreambuf_iterator<_CharT> >::__type\n-    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n-\t const _CharT&);\n-\n   /**\n    *  @brief  The actual work of input and output (interface).\n    *"}, {"sha": "bc8028d08c79d983d5bb0ff7cdd3be683adf97e9", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -483,11 +483,6 @@ template<_Lock_policy _Lp>\n   { }\n \n \n-// Function get_deleter must be declared before friend declaration by\n-// shared_ptr.\n-template<typename _Del, typename _Tp, _Lock_policy _Lp>\n-  _Del* get_deleter(const __shared_ptr<_Tp, _Lp>&);\n-\n /**\n  *  @class shared_ptr <tr1/memory>\n  *"}, {"sha": "05286ee17ddf1af939312d5e2106ec9c3531b17e", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 0, "deletions": 205, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb61d5030d7299320beb9b16978a66d6513d86/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=7ffb61d5030d7299320beb9b16978a66d6513d86", "patch": "@@ -295,21 +295,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *\n    * The size of the state is @f$ 1 @f$.\n    */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    class linear_congruential;\n-\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr);\n-\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       linear_congruential<_UIntType, __a, __c, __m>& __lcr);\n-\n   template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     class linear_congruential\n     {\n@@ -503,29 +488,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @var output_c    The second left-shift tempering matrix mask.\n    * @var output_l    The second right-shift tempering matrix parameter.\n    */\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l>\n-    class mersenne_twister;\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const mersenne_twister<_UIntType, __w, __n, __m,\n-\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x);\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       mersenne_twister<_UIntType, __w, __n, __m,\n-\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x);\n-\n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n \t   _UIntType __c, int __l>\n@@ -706,21 +668,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @var _M_p     Current index of x(i - r).\n    * @endif\n    */\n-  template<typename _IntType, _IntType __m, int __s, int __r>\n-    class subtract_with_carry;\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const subtract_with_carry<_IntType, __m, __s, __r>& __x);\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       subtract_with_carry<_IntType, __m, __s, __r>& __x);\n-\n   template<typename _IntType, _IntType __m, int __s, int __r>\n     class subtract_with_carry\n     {\n@@ -898,21 +845,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @var _M_npows Precomputed negative powers of 2.   \n    * @endif\n    */\n-  template<typename _RealType, int __w, int __s, int __r>\n-    class subtract_with_carry_01;\n-\n-  template<typename _RealType, int __w, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x);\n-\n-  template<typename _RealType, int __w, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x);\n-\n   template<typename _RealType, int __w, int __s, int __r>\n     class subtract_with_carry_01\n     {\n@@ -1104,22 +1036,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *\n    * 0 <= @p __r <= @p __p\n    */\n-  template<class _UniformRandomNumberGenerator, int __p, int __r>\n-    class discard_block;\n-\n-  template<class _UniformRandomNumberGenerator, int __p, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const discard_block<_UniformRandomNumberGenerator,\n-\t       __p, __r>& __x);\n-\n-  template<class _UniformRandomNumberGenerator, int __p, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x);\n-\n   template<class _UniformRandomNumberGenerator, int __p, int __r>\n     class discard_block\n     {\n@@ -1325,26 +1241,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * A random number generator adaptor class that combines two random number\n    * generator engines into a single output sequence.\n    */\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2>\n-    class xor_combine;\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t       _UniformRandomNumberGenerator2, __s2>& __x);\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t       _UniformRandomNumberGenerator2, __s2>& __x);\n-\n   template<class _UniformRandomNumberGenerator1, int __s1,\n \t   class _UniformRandomNumberGenerator2, int __s2>\n     class xor_combine\n@@ -1616,19 +1512,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * probability throughout the range.\n    */\n   template<typename _IntType = int>\n-    class uniform_int;\n-\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_int<_IntType>& __x);\n-\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_int<_IntType>& __x);\n-\n-  template<typename _IntType>\n     class uniform_int\n     {\n       __glibcxx_class_requires(_IntType, _IntegerConcept)\n@@ -1758,13 +1641,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * Generates a sequence of true and false values with likelihood @f$ p @f$\n    * that true will come up and @f$ (1 - p) @f$ that false will appear.\n    */\n-  class bernoulli_distribution;\n-\n-  template<typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const bernoulli_distribution& __x);\n-\n   class bernoulli_distribution\n   {\n   public:\n@@ -1855,15 +1731,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * distribution.\n    */\n   template<typename _IntType = int, typename _RealType = double>\n-    class geometric_distribution;\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const geometric_distribution<_IntType, _RealType>& __x);\n-\n-  template<typename _IntType, typename _RealType>\n     class geometric_distribution\n     {\n     public:\n@@ -1951,21 +1818,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * parameter of the distribution.\n    */\n   template<typename _IntType = int, typename _RealType = double>\n-    class poisson_distribution;\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const poisson_distribution<_IntType, _RealType>& __x);\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       poisson_distribution<_IntType, _RealType>& __x);\n-\n-  template<typename _IntType, typename _RealType>\n     class poisson_distribution\n     {\n     public:\n@@ -2053,21 +1905,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * and @f$ p @f$ are the parameters of the distribution.\n    */\n   template<typename _IntType = int, typename _RealType = double>\n-    class binomial_distribution;\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const binomial_distribution<_IntType, _RealType>& __x);\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       binomial_distribution<_IntType, _RealType>& __x);\n-\n-  template<typename _IntType, typename _RealType>\n     class binomial_distribution\n     {\n     public:\n@@ -2176,19 +2013,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * deliver number in the range [0, 1).\n    */\n   template<typename _RealType = double>\n-    class uniform_real;\n-  \n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_real<_RealType>& __x);\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_real<_RealType>& __x);\n-\n-  template<typename _RealType>\n     class uniform_real\n     {\n     public:\n@@ -2278,14 +2102,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * </table>\n    */\n   template<typename _RealType = double>\n-    class exponential_distribution;\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const exponential_distribution<_RealType>& __x);\n-\n-  template<typename _RealType>\n     class exponential_distribution\n     {\n     public:\n@@ -2369,19 +2185,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *            e^{- \\frac{{x - mean}^ {2}}{2 \\sigma ^ {2}} } @f$.\n    */\n   template<typename _RealType = double>\n-    class normal_distribution;\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const normal_distribution<_RealType>& __x);\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       normal_distribution<_RealType>& __x);\n-\n-  template<typename _RealType>\n     class normal_distribution\n     {\n     public:\n@@ -2471,14 +2274,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @f$ p(x) = \\frac{1}{\\Gamma(\\alpha)} x^{\\alpha - 1} e^{-x} } @f$.\n    */\n   template<typename _RealType = double>\n-    class gamma_distribution;\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const gamma_distribution<_RealType>& __x);\n-\n-  template<typename _RealType>\n     class gamma_distribution\n     {\n     public:"}]}