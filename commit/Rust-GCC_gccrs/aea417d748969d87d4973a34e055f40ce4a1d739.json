{"sha": "aea417d748969d87d4973a34e055f40ce4a1d739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhNDE3ZDc0ODk2OWQ4N2Q0OTczYTM0ZTA1NWY0MGNlNGExZDczOQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-05-14T14:45:33Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-05-14T14:45:33Z"}, "message": "generic-match-head.c (types_match): Handle non-types.\n\n2015-05-14  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* generic-match-head.c (types_match): Handle non-types.\n\t* gimple-match-head.c (types_match): Likewise.\n\t* match.pd: Remove unnecessary TREE_TYPE for types_match.\n\nFrom-SVN: r223199", "tree": {"sha": "3f458e1179a5b2faa934d97e293a20431f09ecda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f458e1179a5b2faa934d97e293a20431f09ecda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea417d748969d87d4973a34e055f40ce4a1d739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea417d748969d87d4973a34e055f40ce4a1d739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea417d748969d87d4973a34e055f40ce4a1d739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea417d748969d87d4973a34e055f40ce4a1d739/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddbd742bf84e7ed28d9d37d2c7b4cc9f3d7d05c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbd742bf84e7ed28d9d37d2c7b4cc9f3d7d05c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbd742bf84e7ed28d9d37d2c7b4cc9f3d7d05c0"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "f41771ee24b01b776a698be226cfce1b08b9a424", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aea417d748969d87d4973a34e055f40ce4a1d739", "patch": "@@ -1,3 +1,9 @@\n+2015-05-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* generic-match-head.c (types_match): Handle non-types.\n+\t* gimple-match-head.c (types_match): Likewise.\n+\t* match.pd: Remove unnecessary TREE_TYPE for types_match.\n+\n 2015-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.md (absdi2): Optimize abs expansion."}, {"sha": "40dc53f5bf8e05774d4b32ab13cd002f395fd207", "filename": "gcc/generic-match-head.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fgeneric-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fgeneric-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.c?ref=aea417d748969d87d4973a34e055f40ce4a1d739", "patch": "@@ -71,11 +71,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"generic-match.h\"\n \n /* Routine to determine if the types T1 and T2 are effectively\n-   the same for GENERIC.  */\n+   the same for GENERIC.  If T1 or T2 is not a type, the test\n+   applies to their TREE_TYPE.  */\n \n static inline bool\n types_match (tree t1, tree t2)\n {\n+  if (!TYPE_P (t1))\n+    t1 = TREE_TYPE (t1);\n+  if (!TYPE_P (t2))\n+    t2 = TREE_TYPE (t2);\n+\n   return TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2);\n }\n "}, {"sha": "cac037b31df63cdfa80dc59c995ed1de4931f5c3", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=aea417d748969d87d4973a34e055f40ce4a1d739", "patch": "@@ -862,11 +862,17 @@ do_valueize (tree (*valueize)(tree), tree op)\n }\n \n /* Routine to determine if the types T1 and T2 are effectively\n-   the same for GIMPLE.  */\n+   the same for GIMPLE.  If T1 or T2 is not a type, the test\n+   applies to their TREE_TYPE.  */\n \n static inline bool\n types_match (tree t1, tree t2)\n {\n+  if (!TYPE_P (t1))\n+    t1 = TREE_TYPE (t1);\n+  if (!TYPE_P (t2))\n+    t2 = TREE_TYPE (t2);\n+\n   return types_compatible_p (t1, t2);\n }\n "}, {"sha": "fffe6946325dc421d6246a363dd0b6864b0e8c5a", "filename": "gcc/match.pd", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea417d748969d87d4973a34e055f40ce4a1d739/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=aea417d748969d87d4973a34e055f40ce4a1d739", "patch": "@@ -289,7 +289,7 @@ along with GCC; see the file COPYING3.  If not see\n   (if (((TREE_CODE (@1) == INTEGER_CST\n \t && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n \t && int_fits_type_p (@1, TREE_TYPE (@0)))\n-\t|| types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+\t|| types_match (@0, @1))\n        /* ???  This transform conflicts with fold-const.c doing\n \t  Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n \t  constants (if x has signed type, the sign bit cannot be set\n@@ -948,7 +948,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Unordered tests if either argument is a NaN.  */\n (simplify\n  (bit_ior (unordered @0 @0) (unordered @1 @1))\n- (if (types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+ (if (types_match (@0, @1))\n   (unordered @0 @1)))\n (simplify\n  (bit_ior:c (unordered @0 @0) (unordered:c@2 @0 @1))\n@@ -1068,8 +1068,8 @@ along with GCC; see the file COPYING3.  If not see\n \t && TYPE_PRECISION (type) == GET_MODE_PRECISION (TYPE_MODE (type))\n \t /* The inner conversion must be a widening conversion.  */\n \t && TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (TREE_TYPE (@0))\n-\t && types_match (TREE_TYPE (@0), TREE_TYPE (@1))\n-\t && types_match (TREE_TYPE (@0), type)\n+\t && types_match (@0, @1)\n+\t && types_match (@0, type)\n \t && single_use (@4))\n       (if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n \t(convert (op @0 @1)))\n@@ -1099,7 +1099,7 @@ along with GCC; see the file COPYING3.  If not see\n \t && TYPE_PRECISION (type) == GET_MODE_PRECISION (TYPE_MODE (type))\n \t /* The inner conversion must be a widening conversion.  */\n \t && TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (TREE_TYPE (@0))\n-\t && types_match (TREE_TYPE (@0), TREE_TYPE (@1))\n+\t && types_match (@0, @1)\n \t && (tree_int_cst_min_precision (@4, UNSIGNED)\n \t     <= TYPE_PRECISION (TREE_TYPE (@0)))\n \t && single_use (@5))"}]}