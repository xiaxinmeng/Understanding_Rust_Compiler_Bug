{"sha": "0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3NjQyODhmOTdmYmIwZjMzYjQyYzY2ZWJmZmMwNjFiYTU5Y2I3ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-07T13:52:29Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-07T13:52:29Z"}, "message": "provide pubnames when there are multiple code sections\n\n\t* dwarf2out.c (gen_subprogram_die):  Add pubnames with code ranges for\n\tDWARF >= 3.  Add pubnames for the primary section and a reduced DIE for\n\tthe secondary code fragment when outputting for DWARF == 2.\n\nFrom-SVN: r168570", "tree": {"sha": "2bfd9dd87af8b4085587d92f17fecac4d8dcc9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bfd9dd87af8b4085587d92f17fecac4d8dcc9c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b764288f97fbb0f33b42c66ebffc061ba59cb7d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6bcbb40dd475624be371de4d86e9054a5934fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6bcbb40dd475624be371de4d86e9054a5934fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6bcbb40dd475624be371de4d86e9054a5934fc9"}], "stats": {"total": 160, "additions": 136, "deletions": 24}, "files": [{"sha": "01438e72d39ce27aba35adf963d623e2d19aa30d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b764288f97fbb0f33b42c66ebffc061ba59cb7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b764288f97fbb0f33b42c66ebffc061ba59cb7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "patch": "@@ -1,3 +1,9 @@\n+2011-01-07  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* dwarf2out.c (gen_subprogram_die):  Add pubnames with code ranges for\n+\tDWARF >= 3.  Add pubnames for the primary section and a reduced DIE for\n+\tthe secondary code fragment when outputting for DWARF == 2.\n+\n 2011-01-07  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/xtensa/xtensa.h (OUTPUT_ADDR_CONST_EXTRA): Remove."}, {"sha": "4e9ce9148cdb907329e0b29db435fe83f1e76300", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 130, "deletions": 24, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b764288f97fbb0f33b42c66ebffc061ba59cb7d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b764288f97fbb0f33b42c66ebffc061ba59cb7d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "patch": "@@ -18902,7 +18902,6 @@ premark_types_used_by_global_vars (void)\n static void\n gen_subprogram_die (tree decl, dw_die_ref context_die)\n {\n-  char label_id[MAX_ARTIFICIAL_LABEL_BYTES];\n   tree origin = decl_ultimate_origin (decl);\n   dw_die_ref subr_die;\n   tree outer_scope;\n@@ -19071,12 +19070,24 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n       if (!flag_reorder_blocks_and_partition)\n \t{\n-\t  ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_BEGIN_LABEL,\n-\t\t\t\t       current_function_funcdef_no);\n-\t  add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n-\t  ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_END_LABEL,\n-\t\t\t\t       current_function_funcdef_no);\n-\t  add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n+\t  dw_fde_ref fde = &fde_table[current_funcdef_fde];\n+\t  if (fde->dw_fde_begin)\n+\t    {\n+\t      /* We have already generated the labels.  */\n+\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, fde->dw_fde_begin);\n+\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, fde->dw_fde_end);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Create start/end labels and add the range.  */\n+\t      char label_id[MAX_ARTIFICIAL_LABEL_BYTES];\n+\t      ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_BEGIN_LABEL,\n+\t\t\t\t\t   current_function_funcdef_no);\n+\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n+\t      ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_END_LABEL,\n+\t\t\t\t\t   current_function_funcdef_no);\n+\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n+\t    }\n \n #if VMS_DEBUGGING_INFO\n       /* HP OpenVMS Industry Standard 64: DWARF Extensions\n@@ -19092,8 +19103,6 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t attributes allow a compiler to communicate the location(s) to use.  */\n \n       {\n-        dw_fde_ref fde = &fde_table[current_funcdef_fde];\n-\n         if (fde->dw_fde_vms_end_prologue)\n           add_AT_vms_delta (subr_die, DW_AT_HP_prologue,\n \t    fde->dw_fde_begin, fde->dw_fde_vms_end_prologue);\n@@ -19108,19 +19117,116 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  add_arange (decl, subr_die);\n \t}\n       else\n-\t{  /* Do nothing for now; maybe need to duplicate die, one for\n-\t      hot section and one for cold section, then use the hot/cold\n-\t      section begin/end labels to generate the aranges...  */\n-\t  /*\n-\t    add_AT_lbl_id (subr_die, DW_AT_low_pc, hot_section_label);\n-\t    add_AT_lbl_id (subr_die, DW_AT_high_pc, hot_section_end_label);\n-\t    add_AT_lbl_id (subr_die, DW_AT_lo_user, unlikely_section_label);\n-\t    add_AT_lbl_id (subr_die, DW_AT_hi_user, cold_section_end_label);\n-\n-\t    add_pubname (decl, subr_die);\n-\t    add_arange (decl, subr_die);\n-\t    add_arange (decl, subr_die);\n-\t   */\n+\t{  /* Generate pubnames entries for the split function code\n+\t      ranges.  */\n+\t  dw_fde_ref fde = &fde_table[current_funcdef_fde];\n+\n+\t  if (fde->dw_fde_switched_sections)\n+\t    {\n+\t      if (dwarf_version >= 3 || !dwarf_strict)\n+\t\t{\n+\t\t  /* We should use ranges for non-contiguous code section \n+\t\t     addresses.  Use the actual code range for the initial\n+\t\t     section, since the HOT/COLD labels might precede an \n+\t\t     alignment offset.  */\n+\t\t  bool range_list_added = false;\n+\t\t  if (fde->in_std_section)\n+\t\t    {\n+\t\t      add_ranges_by_labels (subr_die,\n+\t\t\t\t\t    fde->dw_fde_begin,\n+\t\t\t\t\t    fde->dw_fde_end,\n+\t\t\t\t\t    &range_list_added);\n+\t\t      add_ranges_by_labels (subr_die,\n+\t\t\t\t\t    fde->dw_fde_unlikely_section_label,\n+\t\t\t\t\t    fde->dw_fde_unlikely_section_end_label,\n+\t\t\t\t\t    &range_list_added);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      add_ranges_by_labels (subr_die,\n+\t\t\t\t\t    fde->dw_fde_begin,\n+\t\t\t\t\t    fde->dw_fde_end,\n+\t\t\t\t\t    &range_list_added);\n+\t\t      add_ranges_by_labels (subr_die,\n+\t\t\t\t\t    fde->dw_fde_hot_section_label,\n+\t\t\t\t\t    fde->dw_fde_hot_section_end_label,\n+\t\t\t\t\t    &range_list_added);\n+\t\t    }\n+\t\t  add_pubname (decl, subr_die);\n+\t\t  if (range_list_added)\n+\t\t    add_ranges (NULL);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* There is no real support in DW2 for this .. so we make\n+\t\t     a work-around.  First, emit the pub name for the segment\n+\t\t     containing the function label.  Then make and emit a\n+\t\t     simplified subprogram DIE for the second segment with the\n+\t\t     name pre-fixed by __hot/cold_sect_of_.  We use the same\n+\t\t     linkage name for the second die so that gdb will find both\n+\t\t     sections when given \"b foo\".  */\n+\t\t  const char *name = NULL;\n+\t\t  tree decl_name = DECL_NAME (decl);\n+\t\t  dw_die_ref seg_die;\n+\n+\t\t  /* Do the 'primary' section.   */\n+\t\t  add_AT_lbl_id (subr_die, DW_AT_low_pc,\n+\t\t\t\t fde->dw_fde_begin);\n+\t\t  add_AT_lbl_id (subr_die, DW_AT_high_pc,\n+\t\t\t\t fde->dw_fde_end);\n+\t\t  /* Add it.   */\n+\t\t  add_pubname (decl, subr_die);\n+\t\t  add_arange (decl, subr_die);\n+\n+\t\t  /* Build a minimal DIE for the secondary section.  */\n+\t\t  seg_die = new_die (DW_TAG_subprogram,\n+\t\t\t\t     subr_die->die_parent, decl);\n+\n+\t\t  if (TREE_PUBLIC (decl))\n+\t\t    add_AT_flag (seg_die, DW_AT_external, 1);\n+\n+\t\t  if (decl_name != NULL \n+\t\t      && IDENTIFIER_POINTER (decl_name) != NULL)\n+\t\t    {\n+\t\t      name = dwarf2_name (decl, 1);\n+\t\t      if (! DECL_ARTIFICIAL (decl))\n+\t\t\tadd_src_coords_attributes (seg_die, decl);\n+\n+\t\t      add_linkage_name (seg_die, decl);\n+\t\t    }\n+\t\t  gcc_assert (name!=NULL);\n+\t\t  add_pure_or_virtual_attribute (seg_die, decl);\n+\t\t  if (DECL_ARTIFICIAL (decl))\n+\t\t    add_AT_flag (seg_die, DW_AT_artificial, 1);\n+\n+\t\t  if (fde->in_std_section)\n+\t\t    {\n+\t\t      name = concat (\"__cold_sect_of_\", name, NULL); \n+\t\t      add_AT_lbl_id (seg_die, DW_AT_low_pc,\n+\t\t\t\t     fde->dw_fde_unlikely_section_label);\n+\t\t      add_AT_lbl_id (seg_die, DW_AT_high_pc,\n+\t\t\t\t     fde->dw_fde_unlikely_section_end_label); \n+\t\t    }\n+\t\t  else \n+\t\t    {\n+\t\t      name = concat (\"__hot_sect_of_\", name, NULL); \n+\t\t      add_AT_lbl_id (seg_die, DW_AT_low_pc,\n+\t\t\t\t     fde->dw_fde_hot_section_label);\n+\t\t      add_AT_lbl_id (seg_die, DW_AT_high_pc,\n+\t\t\t\t     fde->dw_fde_hot_section_end_label); \n+\t\t    }\n+\t\t  add_name_attribute (seg_die, name);\n+\t\t  add_pubname_string (name, seg_die);\n+\t\t  add_arange (decl, seg_die);\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, fde->dw_fde_begin);\n+\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, fde->dw_fde_end);\n+\t      add_pubname (decl, subr_die);\n+\t      add_arange (decl, subr_die);\n+\t    }\n \t}\n \n #ifdef MIPS_DEBUGGING_INFO\n@@ -23164,8 +23270,8 @@ dwarf2out_finish (const char *filename)\n \n   /* We can only use the low/high_pc attributes if all of the code was\n      in .text.  */\n-  if (!have_multiple_function_sections\n-      || !(dwarf_version >= 3 || !dwarf_strict))\n+  if (!have_multiple_function_sections \n+      || (dwarf_version < 3 && dwarf_strict))\n     {\n       add_AT_lbl_id (comp_unit_die (), DW_AT_low_pc, text_section_label);\n       add_AT_lbl_id (comp_unit_die (), DW_AT_high_pc, text_end_label);"}]}