{"sha": "bce8455643b69ae0ba84ef84592dc75cb746a668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlODQ1NTY0M2I2OWFlMGJhODRlZjg0NTkyZGM3NWNiNzQ2YTY2OA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-11-18T21:18:07Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-11-18T21:18:07Z"}, "message": "re PR fortran/32770 ([Meta-bug] -fdefault-integer-8 issues)\n\n2007-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/32770\n\t* gfortran.fortran-torture/execute/equiv_5.f:  Set kind on\n\tintegers so tests works with -fdefault-integer-8.\n\t* gfortran.fortran-torture/execute/elemental.f90:  Use default\n\tintegers so test passes with -fdefault-integer-8.\n\t* gfortran.fortran-torture/execute/der_io.f90:  Increase\n\tbuffer length so test passes with -fdefault-integer-8.\n\t* gfortran.dg/bounds_check_8.f90:  Likewise.\n\t* gfortran.dg/arrayio_derived_1.f90:  LIkewise.\n\t* gfortran.dg/equiv_7.f90:  Set kind so test passes\n\twith -fdefault-integer-8.\n\t* gfortran.dg/g77/20030326-1.f:  Set kind explicitly to\n\tprovoke overflow.\n\nFrom-SVN: r130279", "tree": {"sha": "42c04f128a67f35e3c1488a364cff62f91d2682c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42c04f128a67f35e3c1488a364cff62f91d2682c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce8455643b69ae0ba84ef84592dc75cb746a668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce8455643b69ae0ba84ef84592dc75cb746a668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce8455643b69ae0ba84ef84592dc75cb746a668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce8455643b69ae0ba84ef84592dc75cb746a668/comments", "author": null, "committer": null, "parents": [{"sha": "0cf5118a8b80228b0519a18ceff11dfaef00791b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf5118a8b80228b0519a18ceff11dfaef00791b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf5118a8b80228b0519a18ceff11dfaef00791b"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "21d81113450cd279b7993676da719e9956990cb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -1,3 +1,19 @@\n+2007-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/32770\n+\t* gfortran.fortran-torture/execute/equiv_5.f:  Set kind on\n+\tintegers so tests works with -fdefault-integer-8.\n+\t* gfortran.fortran-torture/execute/elemental.f90:  Use default\n+\tintegers so test passes with -fdefault-integer-8.\n+\t* gfortran.fortran-torture/execute/der_io.f90:  Increase\n+\tbuffer length so test passes with -fdefault-integer-8.\n+\t* gfortran.dg/bounds_check_8.f90:  Likewise.\n+\t* gfortran.dg/arrayio_derived_1.f90:  LIkewise.\n+\t* gfortran.dg/equiv_7.f90:  Set kind so test passes\n+\twith -fdefault-integer-8.\n+\t* gfortran.dg/g77/20030326-1.f:  Set kind explicitly to\n+\tprovoke overflow.\n+\n 2007-11-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33317"}, {"sha": "dd12561b7634880999aca753c27ad9c5cd03aa24", "filename": "gcc/testsuite/gfortran.dg/arrayio_derived_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -7,7 +7,7 @@ program arrayio_derived_1\n      character(len=1) :: c\n   end type tp\n   type(tp) :: x(5)\n-  character(len=100) :: a\n+  character(len=500) :: a\n   integer :: i, b(5)\n \n   x%i = 256"}, {"sha": "11be29bdab433d725b4dbc8ecd18c377630a9776", "filename": "gcc/testsuite/gfortran.dg/bounds_check_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -12,7 +12,7 @@ program test\n      integer :: x\n   end type xyz_type\n   type (xyz_type), dimension(3) :: xyz\n-  character(len=20) :: s\n+  character(len=80) :: s\n \n   xyz(1)%x = 11111\n   xyz(2)%x = 0"}, {"sha": "23f707b39c4ea87c5193ada950aff0279abdfce9", "filename": "gcc/testsuite/gfortran.dg/equiv_7.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_7.f90?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -72,7 +72,8 @@ end subroutine check_block_data\n   function d1mach_little(i) result(d1mach)\n     implicit none\n     double precision d1mach,dmach(5)\n-    integer i,large(4),small(4)\n+    integer i\n+    integer*4 large(4),small(4)\n     equivalence ( dmach(1), small(1) )\n     equivalence ( dmach(2), large(1) )\n     data small(1),small(2) / 0,   1048576/\n@@ -82,7 +83,8 @@ end function d1mach_little\n   function d1mach_big(i) result(d1mach)\n     implicit none\n     double precision d1mach,dmach(5)\n-    integer i,large(4),small(4)\n+    integer i\n+    integer*4 large(4),small(4)\n     equivalence ( dmach(1), small(1) )\n     equivalence ( dmach(2), large(1) )\n     data small(1),small(2) /1048576,    0/"}, {"sha": "6efc5d9a667d07415c1b88eafa8cd173c42b6075", "filename": "gcc/testsuite/gfortran.dg/g77/20030326-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -6,5 +6,5 @@\n ! For gfortran, see PR 13490\n !\n        integer c\n-       c = -2147483648 / (-1) ! { dg-error \"too big for its kind\" \"\" }\n+       c = -2147483648_4 / (-1) ! { dg-error \"too big for its kind\" \"\" }\n        end"}, {"sha": "b1b421bc6785109bc40487b459e9dac8bc4a7cc9", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/der_io.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_io.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_io.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_io.f90?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -1,6 +1,6 @@\n ! Program to test IO of derived types\n program derived_io\n-  character(100) :: buf1, buf2, buf3\n+  character(400) :: buf1, buf2, buf3\n \n   type xyz_type\n      integer :: x"}, {"sha": "79a511cdee820989776d13bf19c59a456bb1d2ce", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/elemental.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Felemental.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Felemental.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Felemental.f90?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -1,8 +1,8 @@\n ! Program to test elemental functions.\n program test_elemental\n    implicit none\n-   integer(kind = 4), dimension (2, 4) :: a\n-   integer(kind = 4), dimension (2, 4) :: b\n+   integer, dimension (2, 4) :: a\n+   integer, dimension (2, 4) :: b\n    integer(kind = 8), dimension(2) :: c\n \n    a = reshape ((/2, 3, 4, 5, 6, 7, 8, 9/), (/2, 4/))\n@@ -25,7 +25,7 @@ program test_elemental\n    if (any (a .ne. 0)) call abort\n contains\n \n-elemental integer function e_fn (p, q)\n+elemental integer(kind=4) function e_fn (p, q)\n    integer, intent(in) :: p, q\n    e_fn = p - q\n end function"}, {"sha": "61f374c5564a38e518e3838e4d41310ea8c96532", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/equiv_5.f", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce8455643b69ae0ba84ef84592dc75cb746a668/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f?ref=bce8455643b69ae0ba84ef84592dc75cb746a668", "patch": "@@ -5,7 +5,7 @@\n C  The testcase is from blas, http://www.netlib.org/blas/d1mach.f\n \n       DOUBLE PRECISION FUNCTION D1MACH(I)\n-      INTEGER I\n+      INTEGER*4 I\n C\n C  DOUBLE-PRECISION MACHINE CONSTANTS\n C  D1MACH( 1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.\n@@ -14,12 +14,12 @@ DOUBLE PRECISION FUNCTION D1MACH(I)\n C  D1MACH( 4) = B**(1-T), THE LARGEST RELATIVE SPACING.\n C  D1MACH( 5) = LOG10(B)\n C\n-      INTEGER SMALL(2)\n-      INTEGER LARGE(2)\n-      INTEGER RIGHT(2)\n-      INTEGER DIVER(2)\n-      INTEGER LOG10(2)\n-      INTEGER SC, CRAY1(38), J\n+      INTEGER*4 SMALL(2)\n+      INTEGER*4 LARGE(2)\n+      INTEGER*4 RIGHT(2)\n+      INTEGER*4 DIVER(2)\n+      INTEGER*4 LOG10(2)\n+      INTEGER*4 SC, CRAY1(38), J\n       COMMON /D9MACH/ CRAY1\n       SAVE SMALL, LARGE, RIGHT, DIVER, LOG10, SC\n       DOUBLE PRECISION DMACH(5)\n@@ -49,7 +49,7 @@ DOUBLE PRECISION FUNCTION D1MACH(I)\n C      DATA LOG10(1),LOG10(2) / O776464202324, O117571775714 /, SC/987/\n C\n C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING\n-C     32-BIT INTEGERS.\n+C     32-BIT INTEGER*4S.\n C      DATA SMALL(1),SMALL(2) /    8388608,           0 /\n C      DATA LARGE(1),LARGE(2) / 2147483647,          -1 /\n C      DATA RIGHT(1),RIGHT(2) /  612368384,           0 /\n@@ -209,7 +209,7 @@ DOUBLE PRECISION FUNCTION D1MACH(I)\n       END\n       SUBROUTINE I1MCRY(A, A1, B, C, D)\n **** SPECIAL COMPUTATION FOR OLD CRAY MACHINES ****\n-      INTEGER A, A1, B, C, D\n+      INTEGER*4 A, A1, B, C, D\n       A1 = 16777216*B + C\n       A = 16777216*A1 + D\n       END"}]}