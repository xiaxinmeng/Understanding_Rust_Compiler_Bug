{"sha": "f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YWEzYTQwNzhmODM1NDA5MDNjNWQxZjVjNGFkMGUyNTU5N2FiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-17T20:36:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-17T20:36:31Z"}, "message": "PR c++/86740, ICE with constexpr if and nested generic lambdas.\n\nWhen we partially instantiate the constexpr if, we walk through its body to\nsee what it uses from the enclosing local_specializations.  That walk was\noverlooking the use of 'count' in the captures of the innermost lambda,\nbecause we weren't walking into the capture list.\n\n\t* tree.c (cp_walk_subtrees): Handle LAMBDA_EXPR.\n\nFrom-SVN: r268046", "tree": {"sha": "5a6852032534ed4ce9f9e1915acde44e905f4037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a6852032534ed4ce9f9e1915acde44e905f4037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba29ed0f57b5005586e49d40aaec55d943caff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba29ed0f57b5005586e49d40aaec55d943caff61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba29ed0f57b5005586e49d40aaec55d943caff61"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "01a57601f4c9cf4293a1dbcbe7823b8fc8138c02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "patch": "@@ -1,3 +1,8 @@\n+2019-01-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86740, ICE with constexpr if and nested generic lambdas.\n+\t* tree.c (cp_walk_subtrees): Handle LAMBDA_EXPR.\n+\n 2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Use typespec_loc in error messages"}, {"sha": "be33d4186f9e78781f4867fe125d5a9cb6b4f092", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "patch": "@@ -4933,6 +4933,14 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n \t}\n       break;\n \n+    case LAMBDA_EXPR:\n+      /* Don't walk into the body of the lambda, but the capture initializers\n+\t are part of the enclosing context.  */\n+      for (tree cap = LAMBDA_EXPR_CAPTURE_LIST (*tp); cap;\n+\t   cap = TREE_CHAIN (cap))\n+\tWALK_SUBTREE (TREE_VALUE (cap));\n+      break;\n+\n     default:\n       return NULL_TREE;\n     }"}, {"sha": "144139ea196bee706ca831579fefe50ee96516b1", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if25.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if25.C?ref=f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/86740\n+// { dg-do compile { target c++17 } }\n+\n+struct Constant\n+{\n+  static constexpr int value = 0;\n+};\n+template<typename F>\n+void invokeWithConstant(F &&f)\n+{\n+  f(Constant{});\n+}\n+int foo()\n+{\n+  int count = 0;\n+  invokeWithConstant\n+    ([&] (auto id1)\n+     {\n+       invokeWithConstant\n+\t ([&] (auto id2)\n+\t  {\n+\t    if constexpr (id1.value == 0  &&  id2.value == 0)\n+\t      [&] { count = 1; } ();\n+\t  });\n+     });\n+  return count;\n+}"}]}