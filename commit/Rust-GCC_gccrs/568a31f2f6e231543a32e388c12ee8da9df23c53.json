{"sha": "568a31f2f6e231543a32e388c12ee8da9df23c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4YTMxZjJmNmUyMzE1NDNhMzJlMzg4YzEyZWU4ZGE5ZGYyM2M1Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-10-17T08:14:23Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-10-17T08:14:23Z"}, "message": "re PR c/58267 (Alignment specifier allowed within array declarator;)\n\n\tPR c/58267\nc/\n\t* c-parser.c (c_parser_declspecs): Add alignspec_ok parameter.\n\tDocument syntax of the array-declarator.\n\t(c_parser_declspecs) <RID_ALIGNAS>: Bail out if alignment specs\n\tare not permitted.\n\t(c_parser_declaration_or_fndef): Adjust c_parser_declspecs call.\n\t(c_parser_struct_declaration): Likewise.\n\t(c_parser_declarator): Likewise.\n\t(c_parser_direct_declarator_inner): Likewise.\n\t(c_parser_parameter_declaration): Likewise.\n\t(c_parser_type_name): Likewise.\ntestsuite/\n\t* gcc.dg/c1x-align-5.c: New test.\n\nFrom-SVN: r203742", "tree": {"sha": "897c05236e1319fdfa544ab70f8d95774a00628d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/897c05236e1319fdfa544ab70f8d95774a00628d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568a31f2f6e231543a32e388c12ee8da9df23c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568a31f2f6e231543a32e388c12ee8da9df23c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568a31f2f6e231543a32e388c12ee8da9df23c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568a31f2f6e231543a32e388c12ee8da9df23c53/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0627cf297996254f9d64e517e6feb05f473c2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0627cf297996254f9d64e517e6feb05f473c2e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0627cf297996254f9d64e517e6feb05f473c2e3"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "62f3f9f62121345c65c154d013f3d26694e7c154", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=568a31f2f6e231543a32e388c12ee8da9df23c53", "patch": "@@ -1,3 +1,17 @@\n+2013-10-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58267\n+\t* c-parser.c (c_parser_declspecs): Add alignspec_ok parameter.\n+\tDocument syntax of the array-declarator.\n+\t(c_parser_declspecs) <RID_ALIGNAS>: Bail out if alignment specs\n+\tare not permitted.\n+\t(c_parser_declaration_or_fndef): Adjust c_parser_declspecs call.\n+\t(c_parser_struct_declaration): Likewise.\n+\t(c_parser_declarator): Likewise.\n+\t(c_parser_direct_declarator_inner): Likewise.\n+\t(c_parser_parameter_declaration): Likewise.\n+\t(c_parser_type_name): Likewise.\n+\n 2013-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-lang.h (current_omp_declare_target_attribute): New extern"}, {"sha": "7545067a0192516c5f25fe3fdebff0e8d977206f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=568a31f2f6e231543a32e388c12ee8da9df23c53", "patch": "@@ -1124,7 +1124,7 @@ static void c_parser_declaration_or_fndef (c_parser *, bool, bool, bool,\n static void c_parser_static_assert_declaration_no_semi (c_parser *);\n static void c_parser_static_assert_declaration (c_parser *);\n static void c_parser_declspecs (c_parser *, struct c_declspecs *, bool, bool,\n-\t\t\t\tbool, enum c_lookahead_kind);\n+\t\t\t\tbool, bool, enum c_lookahead_kind);\n static struct c_typespec c_parser_enum_specifier (c_parser *);\n static struct c_typespec c_parser_struct_or_union_specifier (c_parser *);\n static tree c_parser_struct_declaration (c_parser *);\n@@ -1494,7 +1494,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       fndef_ok = !nested;\n     }\n \n-  c_parser_declspecs (parser, specs, true, true, start_attr_ok, cla_nonabstract_decl);\n+  c_parser_declspecs (parser, specs, true, true, start_attr_ok,\n+\t\t      true, cla_nonabstract_decl);\n   if (parser->error)\n     {\n       c_parser_skip_to_end_of_block_or_statement (parser);\n@@ -1942,8 +1943,9 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n /* Parse some declaration specifiers (possibly none) (C90 6.5, C99\n    6.7), adding them to SPECS (which may already include some).\n    Storage class specifiers are accepted iff SCSPEC_OK; type\n-   specifiers are accepted iff TYPESPEC_OK; attributes are accepted at\n-   the start iff START_ATTR_OK.\n+   specifiers are accepted iff TYPESPEC_OK; alignment specifiers are\n+   accepted iff ALIGNSPEC_OK; attributes are accepted at the start\n+   iff START_ATTR_OK.\n \n    declaration-specifiers:\n      storage-class-specifier declaration-specifiers[opt]\n@@ -2039,7 +2041,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n static void\n c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t\t    bool scspec_ok, bool typespec_ok, bool start_attr_ok,\n-\t\t    enum c_lookahead_kind la)\n+\t\t    bool alignspec_ok, enum c_lookahead_kind la)\n {\n   bool attrs_ok = start_attr_ok;\n   bool seen_type = specs->typespec_kind != ctsk_none;\n@@ -2235,6 +2237,8 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  declspecs_add_attrs (loc, specs, attrs);\n \t  break;\n \tcase RID_ALIGNAS:\n+\t  if (!alignspec_ok)\n+\t    goto out;\n \t  align = c_parser_alignas_specifier (parser);\n \t  declspecs_add_alignas (loc, specs, align);\n \t  break;\n@@ -2640,7 +2644,8 @@ c_parser_struct_declaration (c_parser *parser)\n     }\n   specs = build_null_declspecs ();\n   decl_loc = c_parser_peek_token (parser)->location;\n-  c_parser_declspecs (parser, specs, false, true, true, cla_nonabstract_decl);\n+  c_parser_declspecs (parser, specs, false, true, true,\n+\t\t      true, cla_nonabstract_decl);\n   if (parser->error)\n     return NULL_TREE;\n   if (!specs->declspecs_seen_p)\n@@ -2888,6 +2893,12 @@ c_parser_alignas_specifier (c_parser * parser)\n      type-qualifier-list type-qualifier\n      type-qualifier-list attributes\n \n+   array-declarator:\n+     [ type-qualifier-list[opt] assignment-expression[opt] ]\n+     [ static type-qualifier-list[opt] assignment-expression ]\n+     [ type-qualifier-list static assignment-expression ]\n+     [ type-qualifier-list[opt] * ]\n+\n    parameter-type-list:\n      parameter-list\n      parameter-list , ...\n@@ -2946,7 +2957,8 @@ c_parser_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n       struct c_declspecs *quals_attrs = build_null_declspecs ();\n       struct c_declarator *inner;\n       c_parser_consume_token (parser);\n-      c_parser_declspecs (parser, quals_attrs, false, false, true, cla_prefer_id);\n+      c_parser_declspecs (parser, quals_attrs, false, false, true,\n+\t\t\t  true, cla_prefer_id);\n       inner = c_parser_declarator (parser, type_seen_p, kind, seen_id);\n       if (inner == NULL)\n \treturn NULL;\n@@ -3098,12 +3110,14 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n       bool star_seen;\n       tree dimen;\n       c_parser_consume_token (parser);\n-      c_parser_declspecs (parser, quals_attrs, false, false, true, cla_prefer_id);\n+      c_parser_declspecs (parser, quals_attrs, false, false, true,\n+\t\t\t  false, cla_prefer_id);\n       static_seen = c_parser_next_token_is_keyword (parser, RID_STATIC);\n       if (static_seen)\n \tc_parser_consume_token (parser);\n       if (static_seen && !quals_attrs->declspecs_seen_p)\n-\tc_parser_declspecs (parser, quals_attrs, false, false, true, cla_prefer_id);\n+\tc_parser_declspecs (parser, quals_attrs, false, false, true,\n+\t\t\t    false, cla_prefer_id);\n       if (!quals_attrs->declspecs_seen_p)\n \tquals_attrs = NULL;\n       /* If \"static\" is present, there must be an array dimension.\n@@ -3406,7 +3420,8 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n       declspecs_add_attrs (input_location, specs, attrs);\n       attrs = NULL_TREE;\n     }\n-  c_parser_declspecs (parser, specs, true, true, true, cla_nonabstract_decl);\n+  c_parser_declspecs (parser, specs, true, true, true, true,\n+\t\t      cla_nonabstract_decl);\n   finish_declspecs (specs);\n   pending_xref_error ();\n   prefix_attrs = specs->attrs;\n@@ -3715,7 +3730,8 @@ c_parser_type_name (c_parser *parser)\n   struct c_declarator *declarator;\n   struct c_type_name *ret;\n   bool dummy = false;\n-  c_parser_declspecs (parser, specs, false, true, true, cla_prefer_type);\n+  c_parser_declspecs (parser, specs, false, true, true, false,\n+\t\t      cla_prefer_type);\n   if (!specs->declspecs_seen_p)\n     {\n       c_parser_error (parser, \"expected specifier-qualifier-list\");"}, {"sha": "8be60258613b9d31788cf1469d82e80f6ae520a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=568a31f2f6e231543a32e388c12ee8da9df23c53", "patch": "@@ -1,3 +1,8 @@\n+2013-10-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58267\n+\t* gcc.dg/c1x-align-5.c: New test.\n+\n 2013-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58652"}, {"sha": "614edcf6f9b292efe174ae7135ee7e8625ff3b04", "filename": "gcc/testsuite/gcc.dg/c1x-align-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568a31f2f6e231543a32e388c12ee8da9df23c53/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-5.c?ref=568a31f2f6e231543a32e388c12ee8da9df23c53", "patch": "@@ -0,0 +1,20 @@\n+/* Test C1X alignment support.  Test invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+void foo (int []);\n+void bar1 (int [_Alignas (double) 10]); /* { dg-error \"expected expression before\" } */\n+void bar2 (int [static _Alignas (double) 10]); /* { dg-error \"expected expression before\" } */\n+void bar3 (int [static const _Alignas (double) 10]); /* { dg-error \"expected expression before\" } */\n+void bar4 (int [const _Alignas (double) 10]); /* { dg-error \"expected expression before\" } */\n+void bar5 (int [_Alignas (0) *]); /* { dg-error \"expected expression before\" } */\n+\n+void foo (int a[_Alignas (0) 10]) { } /* { dg-error \"expected expression before\" } */\n+\n+void\n+test (void)\n+{\n+  int a[_Alignas (int) 10]; /* { dg-error \"expected expression before\" } */\n+  int b[10];\n+  foo (b);\n+}"}]}