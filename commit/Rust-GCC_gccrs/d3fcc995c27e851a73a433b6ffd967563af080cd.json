{"sha": "d3fcc995c27e851a73a433b6ffd967563af080cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNmY2M5OTVjMjdlODUxYTczYTQzM2I2ZmZkOTY3NTYzYWYwODBjZA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-09T14:53:45Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-09T14:53:45Z"}, "message": "re PR fortran/15481 ([meta-bugs] frontend adds superfluous symbols to namespaces)\n\nfortran/\n2004-07-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n\nPR fortran/15481\nPR fortran/13372\nPR fortran/13575\nPR fortran/15978\n* module.c (write_symbol, write_symtree): Remove workaround.\n* primary.c (match_actual_arglist): Enhance comment.\n(gfc_match_rvalue): Handle function call with first argument\na keyword argument correctly.\n* resolve.c (resolve_symbol): Change call to\ngfc_set_default_type to issue error if no implicit type\ncan be found.\n* trans-decl.c (gfc_create_module_variable): Remove workaround.\n\ntestsuite/\nPR fortran/15481\n PR fortran/13372\n PR fortran/13575\n PR fortran/15978\n* gfortran.fortran-torture/compile/implicit_2.f90: New test.\n\nAlso fixed David Billinghursts ChangeLog entry to use GMT\n\nFrom-SVN: r84373", "tree": {"sha": "f2e67cc2562a5c7a5081a98c7b2a88756df9ea67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2e67cc2562a5c7a5081a98c7b2a88756df9ea67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3fcc995c27e851a73a433b6ffd967563af080cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fcc995c27e851a73a433b6ffd967563af080cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fcc995c27e851a73a433b6ffd967563af080cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fcc995c27e851a73a433b6ffd967563af080cd/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1c60e9de5246e484e15305795b8f9557ccefcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1c60e9de5246e484e15305795b8f9557ccefcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1c60e9de5246e484e15305795b8f9557ccefcd"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "9813b5401f4ab8a5e8c11c05f562d52211310562", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -3189,13 +3189,6 @@ write_symbol (int n, gfc_symbol * sym)\n   if (sym->attr.flavor == FL_UNKNOWN || sym->attr.flavor == FL_LABEL)\n     gfc_internal_error (\"write_symbol(): bad module symbol '%s'\", sym->name);\n \n-\n-  if (sym->attr.flavor == FL_VARIABLE && sym->ts.type == BT_UNKNOWN)\n-    /* TODO: this is a workaround for some of the problems in PR15481,\n-       and fixes the dependent bug PR13372. In an ideal frontend, this\n-       should never happen.  */\n-    return;\n-\n   mio_integer (&n);\n   mio_internal_string (sym->name);\n \n@@ -3319,12 +3312,6 @@ write_symtree (gfc_symtree * st)\n \t  && !sym->attr.subroutine && !sym->attr.function))\n     return;\n \n-  if (sym->attr.flavor == FL_VARIABLE && sym->ts.type == BT_UNKNOWN)\n-    /* TODO: this is a workaround for some of the problems in PR15481,\n-       and fixes the dependent bug PR13372. In an ideal frontend, this\n-       should never happen.  */\n-    return;\n-\n   if (check_unique_name (st->name))\n     return;\n "}, {"sha": "35931557d84b1fe6545e41a29106b9a2ec1c1c29", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -1400,7 +1400,8 @@ match_keyword_arg (gfc_actual_arglist * actual, gfc_actual_arglist * base)\n    the opening parenthesis to the closing parenthesis.  The argument\n    list is assumed to allow keyword arguments because we don't know if\n    the symbol associated with the procedure has an implicit interface\n-   or not.  We make sure keywords are unique.  */\n+   or not.  We make sure keywords are unique. If SUB_FLAG is set,\n+   we're matching the argument list of a subroutine.  */\n \n match\n gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist ** argp)\n@@ -1839,13 +1840,13 @@ match\n gfc_match_rvalue (gfc_expr ** result)\n {\n   gfc_actual_arglist *actual_arglist;\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  char name[GFC_MAX_SYMBOL_LEN + 1], argname[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_state_data *st;\n   gfc_symbol *sym;\n   gfc_symtree *symtree;\n-  locus where;\n+  locus where, old_loc;\n   gfc_expr *e;\n-  match m;\n+  match m, m2;\n   int i;\n \n   m = gfc_match_name (name);\n@@ -2044,35 +2045,46 @@ gfc_match_rvalue (gfc_expr ** result)\n \t  break;\n \t}\n \n-      /* See if this could possibly be a substring reference of a name\n-         that we're not sure is a variable yet.  */\n+      /* See if this is a function reference with a keyword argument\n+\t as first argument. We do this because otherwise a spurious\n+\t symbol would end up in the symbol table.  */\n+\n+      old_loc = gfc_current_locus;\n+      m2 = gfc_match (\" ( %n =\", argname);\n+      gfc_current_locus = old_loc;\n \n       e = gfc_get_expr ();\n       e->symtree = symtree;\n \n-      if ((sym->ts.type == BT_UNKNOWN || sym->ts.type == BT_CHARACTER)\n-\t  && match_substring (sym->ts.cl, 0, &e->ref) == MATCH_YES)\n+      if (m2 != MATCH_YES)\n \t{\n+\t  /* See if this could possibly be a substring reference of a name\n+\t     that we're not sure is a variable yet.  */\n \n-\t  e->expr_type = EXPR_VARIABLE;\n-\n-\t  if (sym->attr.flavor != FL_VARIABLE\n-\t      && gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+\t  if ((sym->ts.type == BT_UNKNOWN || sym->ts.type == BT_CHARACTER)\n+\t      && match_substring (sym->ts.cl, 0, &e->ref) == MATCH_YES)\n \t    {\n-\t      m = MATCH_ERROR;\n-\t      break;\n-\t    }\n \n-\t  if (sym->ts.type == BT_UNKNOWN\n-\t      && gfc_set_default_type (sym, 1, NULL) == FAILURE)\n-\t    {\n-\t      m = MATCH_ERROR;\n+\t      e->expr_type = EXPR_VARIABLE;\n+\n+\t      if (sym->attr.flavor != FL_VARIABLE\n+\t\t  && gfc_add_flavor (&sym->attr, FL_VARIABLE, NULL) == FAILURE)\n+\t\t{\n+\t\t  m = MATCH_ERROR;\n+\t\t  break;\n+\t\t}\n+\n+\t      if (sym->ts.type == BT_UNKNOWN\n+\t\t  && gfc_set_default_type (sym, 1, NULL) == FAILURE)\n+\t\t{\n+\t\t  m = MATCH_ERROR;\n+\t\t  break;\n+\t\t}\n+\n+\t      e->ts = sym->ts;\n+\t      m = MATCH_YES;\n \t      break;\n \t    }\n-\n-\t  e->ts = sym->ts;\n-\t  m = MATCH_YES;\n-\t  break;\n \t}\n \n       /* Give up, assume we have a function.  */"}, {"sha": "a10709504f93962bb5eb52bf7e9711bb8c15283d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -3714,7 +3714,7 @@ resolve_symbol (gfc_symbol * sym)\n   if (sym->ts.type == BT_UNKNOWN)\n     {\n       if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER)\n-\tgfc_set_default_type (sym, 0, NULL);\n+\tgfc_set_default_type (sym, 1, NULL);\n \n       if (sym->attr.flavor == FL_PROCEDURE && sym->attr.function)\n \t{"}, {"sha": "4cb2a65b0ae53829eeb1a8ea569c88998c3b4e47", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -1798,12 +1798,6 @@ gfc_create_module_variable (gfc_symbol * sym)\n       && (sym->attr.flavor != FL_PARAMETER || sym->attr.dimension == 0))\n     return;\n \n-  if (sym->attr.flavor == FL_VARIABLE && sym->ts.type == BT_UNKNOWN)\n-    /* TODO: This is a workaround for the issue outlined in PR 15481,\n-       and it fixes the bug in PR13372. This should never happen in an\n-       ideal frontend.  */\n-    return;\n-\n   /* Don't generate variables from other modules.  */\n   if (sym->attr.use_assoc)\n     return;"}, {"sha": "dd9974852e1ee5e3cb5002e0017dacb9532e6292", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -1,4 +1,12 @@\n-2004-07-10  David Billinghurst (David.Billinghurst@riotinto.com)\n+2004-07-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/15481\n+ \tPR fortran/13372\n+ \tPR fortran/13575\n+ \tPR fortran/15978\n+\t* gfortran.fortran-torture/compile/implicit_2.f90: New test.\n+\t\n+2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \t* lib/gfortran-dg.exp (gfortran-dg-test):  Adapt regular\n \texpression to match gfortran warning/error messages"}, {"sha": "c5b8456c8425f364efeab64fe42f9fcb28723f83", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/implicit_2.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fimplicit_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fcc995c27e851a73a433b6ffd967563af080cd/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fimplicit_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fimplicit_2.f90?ref=d3fcc995c27e851a73a433b6ffd967563af080cd", "patch": "@@ -0,0 +1,6 @@\n+! PR 13372 -- we incorrectly added a symbol for p, which broke implicit typing\n+module t\n+implicit none\n+integer, parameter :: F = selected_real_kind(P =  6, R =  37)\n+end module t\n+"}]}