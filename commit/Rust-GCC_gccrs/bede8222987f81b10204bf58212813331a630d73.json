{"sha": "bede8222987f81b10204bf58212813331a630d73", "node_id": "C_kwDOANBUbNoAKGJlZGU4MjIyOTg3ZjgxYjEwMjA0YmY1ODIxMjgxMzMzMWE2MzBkNzM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-20T16:19:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-22T15:17:36Z"}, "message": "Refactor mapping any lang items to be done during HIR lowering\n\nThis extracts a common way of handling outer attributes on Items to improve\nerror handling and make lang item mappings more generic.", "tree": {"sha": "32cfb3d36f77e61c3f386ce273fd09c221ddb6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32cfb3d36f77e61c3f386ce273fd09c221ddb6e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bede8222987f81b10204bf58212813331a630d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bede8222987f81b10204bf58212813331a630d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bede8222987f81b10204bf58212813331a630d73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bede8222987f81b10204bf58212813331a630d73/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87aeea25837515cf31c8783238419e6e6936290d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aeea25837515cf31c8783238419e6e6936290d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87aeea25837515cf31c8783238419e6e6936290d"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "038b6cf3c2f0d791cf812a976b3a038618086abd", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=bede8222987f81b10204bf58212813331a630d73", "patch": "@@ -281,6 +281,16 @@ class ASTLoweringBase : public AST::ASTVisitor\n \n   HIR::FunctionQualifiers\n   lower_qualifiers (const AST::FunctionQualifiers &qualifiers);\n+\n+  void handle_outer_attributes (const HIR::Item &item);\n+\n+  void handle_lang_item_attribute (const HIR::Item &item,\n+\t\t\t\t   const AST::Attribute &attr);\n+\n+  static bool is_known_attribute (const std::string &attribute_path);\n+\n+  static bool\n+  attribute_handled_in_another_pass (const std::string &attribute_path);\n };\n \n } // namespace HIR"}, {"sha": "55c8e8ae7752960e33397f8349940d0c1e1bd732", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=bede8222987f81b10204bf58212813331a630d73", "patch": "@@ -44,6 +44,10 @@ class ASTLoweringItem : public ASTLoweringBase\n   {\n     ASTLoweringItem resolver;\n     item->accept_vis (resolver);\n+\n+    if (resolver.translated != nullptr)\n+      resolver.handle_outer_attributes (*resolver.translated);\n+\n     return resolver.translated;\n   }\n "}, {"sha": "45081afce219576a6d436bdcf3c5fea5e12736f1", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=bede8222987f81b10204bf58212813331a630d73", "patch": "@@ -609,5 +609,84 @@ ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n \t\t\t\t  has_extern, extern_abi);\n }\n \n+void\n+ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n+{\n+  for (const auto &attr : item.get_outer_attrs ())\n+    {\n+      const auto &str_path = attr.get_path ().as_string ();\n+      if (!is_known_attribute (str_path))\n+\t{\n+\t  rust_error_at (attr.get_locus (), \"unknown attribute\");\n+\t  continue;\n+\t}\n+\n+      bool is_lang_item = str_path.compare (\"lang\") == 0\n+\t\t\t  && attr.has_attr_input ()\n+\t\t\t  && attr.get_attr_input ().get_attr_input_type ()\n+\t\t\t       == AST::AttrInput::AttrInputType::LITERAL;\n+\n+      if (is_lang_item)\n+\thandle_lang_item_attribute (item, attr);\n+      else if (!attribute_handled_in_another_pass (str_path))\n+\t{\n+\t  rust_error_at (attr.get_locus (), \"unhandled attribute: [%s]\",\n+\t\t\t attr.get_path ().as_string ().c_str ());\n+\t}\n+    }\n+}\n+\n+void\n+ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n+\t\t\t\t\t     const AST::Attribute &attr)\n+{\n+  auto &literal = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n+  const auto &lang_item_type_str = literal.get_literal ().as_string ();\n+  auto lang_item_type = Analysis::RustLangItem::Parse (lang_item_type_str);\n+  if (lang_item_type == Analysis::RustLangItem::ItemType::UNKNOWN)\n+    {\n+      rust_error_at (attr.get_locus (), \"unknown lang item\");\n+      return;\n+    }\n+  mappings->insert_lang_item (lang_item_type,\n+\t\t\t      item.get_mappings ().get_defid ());\n+}\n+\n+bool\n+ASTLoweringBase::is_known_attribute (const std::string &attribute_path)\n+{\n+  if (attribute_path.compare (\"inline\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"cfg\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"cfg_attr\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"allow\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"lang\") == 0)\n+    return true;\n+\n+  return false;\n+}\n+\n+bool\n+ASTLoweringBase::attribute_handled_in_another_pass (\n+  const std::string &attribute_path)\n+{\n+  // handled during code-generation\n+  if (attribute_path.compare (\"inline\") == 0)\n+    return true;\n+\n+  // handled during previous expansion pass\n+  else if (attribute_path.compare (\"cfg\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"cfg_attr\") == 0)\n+    return true;\n+  else if (attribute_path.compare (\"allow\") == 0)\n+    return true;\n+\n+  return false;\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "d8df481076c148f9d937eb3d4f97621e435e690c", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bede8222987f81b10204bf58212813331a630d73/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=bede8222987f81b10204bf58212813331a630d73", "patch": "@@ -207,31 +207,6 @@ class TraitResolver : public TypeCheckBase\n     // loop of trying to resolve traits as required by the types\n     tref->on_resolved ();\n \n-    // does this have any lang-item attributes?\n-    for (auto &attr : trait_reference->get_outer_attrs ())\n-      {\n-\tbool is_lang_item = attr.get_path ().as_string ().compare (\"lang\") == 0\n-\t\t\t    && attr.has_attr_input ()\n-\t\t\t    && attr.get_attr_input ().get_attr_input_type ()\n-\t\t\t\t == AST::AttrInput::AttrInputType::LITERAL;\n-\tif (is_lang_item)\n-\t  {\n-\t    auto &literal\n-\t      = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n-\t    const auto &lang_item_type_str\n-\t      = literal.get_literal ().as_string ();\n-\t    auto lang_item_type\n-\t      = Analysis::RustLangItem::Parse (lang_item_type_str);\n-\t    if (lang_item_type == Analysis::RustLangItem::ItemType::UNKNOWN)\n-\t      {\n-\t\trust_error_at (attr.get_locus (), \"unknown lang item\");\n-\t\treturn tref;\n-\t      }\n-\t    mappings->insert_lang_item (\n-\t      lang_item_type, trait_reference->get_mappings ().get_defid ());\n-\t  }\n-      }\n-\n     return tref;\n   }\n "}]}