{"sha": "a7976089dba5e22778e4496e1b86e022241f9d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5NzYwODlkYmE1ZTIyNzc4ZTQ0OTZlMWI4NmUwMjIyNDFmOWQ2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-07T07:44:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-07T07:44:43Z"}, "message": "passes.def (pass_split_crit_edges): Remove instance before PRE.\n\n2017-09-07  Richard Biener  <rguenther@suse.de>\n\n\t* passes.def (pass_split_crit_edges): Remove instance before PRE.\n\t* tree-ssa-pre.c (pass_pre::execute): Instead manually split\n\tcritical edges here, after loop init.\n\t(pass_data_pre): Remove PROP_no_crit_edges flags.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Use vn_valueize\n\tfor valueization of call args to avoid leaking VN_TOP.\n\t(visit_use): Assert we do not visit default defs.\n\t(init_scc_vn): Use build_decl for VN_TOP to make name nicer.\n\tUse error_mark_node to more easily detect leaking VN_TOP.\n\tAll default-defs are varying, not VN_TOP.  Mark them visited.\n\t(run_scc_vn): Make code match comment.\n\n\t* gcc.dg/tree-ssa/ssa-thread-12.c: XFAIL third FSM threading\n\topportunity.\n\nFrom-SVN: r251833", "tree": {"sha": "0a6114aa3b7e88085de18911eacd2d3276ca52ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6114aa3b7e88085de18911eacd2d3276ca52ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7976089dba5e22778e4496e1b86e022241f9d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7976089dba5e22778e4496e1b86e022241f9d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7976089dba5e22778e4496e1b86e022241f9d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7976089dba5e22778e4496e1b86e022241f9d69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e76b247239756b547eaa51d9fa0629416a293269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76b247239756b547eaa51d9fa0629416a293269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76b247239756b547eaa51d9fa0629416a293269"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "8e614f675a8c8295f334077f534929c9722e1098", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -1,3 +1,17 @@\n+2017-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* passes.def (pass_split_crit_edges): Remove instance before PRE.\n+\t* tree-ssa-pre.c (pass_pre::execute): Instead manually split\n+\tcritical edges here, after loop init.\n+\t(pass_data_pre): Remove PROP_no_crit_edges flags.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Use vn_valueize\n+\tfor valueization of call args to avoid leaking VN_TOP.\n+\t(visit_use): Assert we do not visit default defs.\n+\t(init_scc_vn): Use build_decl for VN_TOP to make name nicer.\n+\tUse error_mark_node to more easily detect leaking VN_TOP.\n+\tAll default-defs are varying, not VN_TOP.  Mark them visited.\n+\t(run_scc_vn): Make code match comment.\n+\n 2017-09-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-cpus.def (OTHER_VSX_VECTOR_MASKS): Delete"}, {"sha": "00e75d2b55a86e1079d0c8f437cb46a28223b531", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -255,7 +255,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_optimize_bswap);\n       NEXT_PASS (pass_laddress);\n       NEXT_PASS (pass_lim);\n-      NEXT_PASS (pass_split_crit_edges);\n       NEXT_PASS (pass_walloca, false);\n       NEXT_PASS (pass_pre);\n       NEXT_PASS (pass_sink_code);"}, {"sha": "59af0f7b7261159b7730047259ad45bac3e44f57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -1,3 +1,8 @@\n+2017-09-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: XFAIL third FSM threading\n+\topportunity.\n+\n 2017-09-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/float128-1.c: Update options to know that"}, {"sha": "d829b04d177da7b12a6e5d7ffeb27f1bf7fbfdd2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -fdump-tree-thread2-details -fdump-tree-thread3-details -fdump-tree-thread4-details\" } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread3\" } } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"thread4\" } } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread4\" { xfail *-*-* } } } */\n \n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;"}, {"sha": "6f9fac5b9a0ea5731a2c3c0d99363fad4b67790a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -5006,11 +5006,9 @@ const pass_data pass_data_pre =\n   \"pre\", /* name */\n   OPTGROUP_NONE, /* optinfo_flags */\n   TV_TREE_PRE, /* tv_id */\n-  /* PROP_no_crit_edges is ensured by placing pass_split_crit_edges before\n-     pass_pre.  */\n-  ( PROP_no_crit_edges | PROP_cfg | PROP_ssa ), /* properties_required */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n   0, /* properties_provided */\n-  PROP_no_crit_edges, /* properties_destroyed */\n+  0, /* properties_destroyed */\n   TODO_rebuild_alias, /* todo_flags_start */\n   0, /* todo_flags_finish */\n };\n@@ -5040,6 +5038,7 @@ pass_pre::execute (function *fun)\n   /* This has to happen before SCCVN runs because\n      loop_optimizer_init may create new phis, etc.  */\n   loop_optimizer_init (LOOPS_NORMAL);\n+  split_critical_edges ();\n \n   run_scc_vn (VN_WALK);\n "}, {"sha": "93342c0248fcbfd6478f3dae0d57605bd7d61477", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7976089dba5e22778e4496e1b86e022241f9d69/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a7976089dba5e22778e4496e1b86e022241f9d69", "patch": "@@ -1874,10 +1874,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       for (unsigned i = 0; i < gimple_call_num_args (def_stmt); ++i)\n \t{\n \t  oldargs[i] = gimple_call_arg (def_stmt, i);\n-\t  if (TREE_CODE (oldargs[i]) == SSA_NAME\n-\t      && VN_INFO (oldargs[i])->valnum != oldargs[i])\n+\t  tree val = vn_valueize (oldargs[i]);\n+\t  if (val != oldargs[i])\n \t    {\n-\t      gimple_call_set_arg (def_stmt, i, VN_INFO (oldargs[i])->valnum);\n+\t      gimple_call_set_arg (def_stmt, i, val);\n \t      valueized_anything = true;\n \t    }\n \t}\n@@ -3956,20 +3956,18 @@ visit_use (tree use)\n \n   mark_use_processed (use);\n \n-  gcc_assert (!SSA_NAME_IN_FREE_LIST (use));\n-  if (dump_file && (dump_flags & TDF_DETAILS)\n-      && !SSA_NAME_IS_DEFAULT_DEF (use))\n+  gcc_assert (!SSA_NAME_IN_FREE_LIST (use)\n+\t      && !SSA_NAME_IS_DEFAULT_DEF (use));\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Value numbering \");\n       print_generic_expr (dump_file, use);\n       fprintf (dump_file, \" stmt = \");\n       print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n-  /* Handle uninitialized uses.  */\n-  if (SSA_NAME_IS_DEFAULT_DEF (use))\n-    changed = set_ssa_val_to (use, use);\n-  else if (gimple_code (stmt) == GIMPLE_PHI)\n+  if (gimple_code (stmt) == GIMPLE_PHI)\n     changed = visit_phi (stmt);\n   else if (gimple_has_volatile_ops (stmt))\n     changed = defs_to_varying (stmt);\n@@ -4554,7 +4552,8 @@ init_scc_vn (void)\n \n   XDELETE (rpo_numbers_temp);\n \n-  VN_TOP = create_tmp_var_raw (void_type_node, \"vn_top\");\n+  VN_TOP = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t       get_identifier (\"VN_TOP\"), error_mark_node);\n \n   renumber_gimple_stmt_uids ();\n \n@@ -4583,7 +4582,9 @@ init_scc_vn (void)\n       switch (TREE_CODE (SSA_NAME_VAR (name)))\n \t{\n \tcase VAR_DECL:\n-\t  /* Undefined vars keep TOP.  */\n+\t  /* All undefined vars are VARYING.  */\n+\t  VN_INFO (name)->valnum = name; \n+\t  VN_INFO (name)->visited = true;\n \t  break;\n \n \tcase PARM_DECL:\n@@ -4610,12 +4611,10 @@ init_scc_vn (void)\n \n \tcase RESULT_DECL:\n \t  /* If the result is passed by invisible reference the default\n-\t     def is initialized, otherwise it's uninitialized.  */\n-\t  if (DECL_BY_REFERENCE (SSA_NAME_VAR (name)))\n-\t    {\n-\t      VN_INFO (name)->visited = true;\n-\t      VN_INFO (name)->valnum = name; \n-\t    }\n+\t     def is initialized, otherwise it's uninitialized.  Still\n+\t     undefined is varying.  */\n+\t  VN_INFO (name)->visited = true;\n+\t  VN_INFO (name)->valnum = name; \n \t  break;\n \n \tdefault:\n@@ -5008,14 +5007,13 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n   /* Initialize the value ids and prune out remaining VN_TOPs\n      from dead code.  */\n   tree name;\n-\n   FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n       vn_ssa_aux_t info = VN_INFO (name);\n-      if (!info->visited)\n-\tinfo->valnum = name;\n-      if (info->valnum == name\n+      if (!info->visited\n \t  || info->valnum == VN_TOP)\n+\tinfo->valnum = name;\n+      if (info->valnum == name)\n \tinfo->value_id = get_next_value_id ();\n       else if (is_gimple_min_invariant (info->valnum))\n \tinfo->value_id = get_or_alloc_constant_value_id (info->valnum);"}]}