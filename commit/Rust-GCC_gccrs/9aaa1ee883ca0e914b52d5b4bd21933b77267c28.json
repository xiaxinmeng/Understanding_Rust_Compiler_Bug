{"sha": "9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhYTFlZTg4M2NhMGU5MTRiNTJkNWI0YmQyMTkzM2I3NzI2N2MyOA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-05-06T18:47:18Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-05-06T18:47:18Z"}, "message": "config.gcc: Removed mips-sgi-irix5*, mips-sgi-irix6.[0-4]* from list of obsolete configurations.\n\n\tgcc:\n\t* config.gcc: Removed mips-sgi-irix5*, mips-sgi-irix6.[0-4]* from\n\tlist of obsolete configurations.\n\tDisabled check for obsolete configurations.\n\t(mips-sgi-irix[56]*): Restrict to mips-sgi-irix6.5*.\n\tRemoved support for previous versions.\n\t* config/mips/iris.h: Removed.\n\t* config/mips/iris5.h: Removed.\n\t* config/mips/iris6.h: Merged old iris.h contents.\n\t(TARGET_IRIX): Removed.\n\t(DRIVER_SELF_SPECS): Removed mabi=32.\n\t(IDENT_ASM_OP): Removed undef.\n\t(STARTFILE_SPEC): Removed mabi=32.\n\t(ENDFILE_SPEC): Likewise.\n\t(IRIX_SUBTARGET_LINK_SPEC): Likewise.\n\t(MACHINE_TYPE): Update for IRIX 6.5.\n\t* config/mips/mips.c (mips_build_builtin_va_list): Replaced\n\tTARGET_IRIX by TARGET_IRIX6.\n\t(mips_file_start): Likewise.\n\t(mips_output_external): Remove IRIX 5/6 O32 support.\n\t(mips_output_function_prologue): Likewise.\n\t* config/mips/mips.h (TARGET_GPWORD): Replaced TARGET_IRIX by\n\tTARGET_IRIX6.\n\t(TARGET_CPU_CPP_BUILTINS): Likewise.\n\t(TARGET_IRIX): Removed.\n\t* config/mips/t-iris6 (MULTILIB_OPTIONS): Removed mabi=32.\n\t(MULTILIB_DIRNAMES): Removed 32.\n\t(MULTILIB_OSDIRNAMES): Removed ../lib.\n\t* doc/install.texi (Prerequisites): Don't reference IRIX before\n\t6.5.\n\t(Specific, mips-sgi-irix5): Document removal.\n\t(Specific, mips-sgi-irix6): Document IRIX 6.[0-4] and O32 ABI\n\tremoval.\n\tRemove references to older IRIX 6 releases and the O32 ABI.\n\n\tgcc/ada:\n\t* gcc-interface/Makefile.in: Removed mips-sgi-irix5* support.\n\n\tlibstdc++-v3:\n\t* configure.host: Removed irix[1-6], irix[1-5].*, irix6.[0-4]*\n\tsupport.\n\t* config/os/irix/irix5.2: Removed.\n\nFrom-SVN: r159121", "tree": {"sha": "d0d38db9390d14af7f19efbc82b1f9639aec9142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0d38db9390d14af7f19efbc82b1f9639aec9142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0718e39d0de2f69d0ede9aced24c06bfddb0b47b"}], "stats": {"total": 1092, "additions": 350, "deletions": 742}, "files": [{"sha": "777f08a2edbedd3779f5287b8a4b80777caf28b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,3 +1,39 @@\n+2010-05-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc: Removed mips-sgi-irix5*, mips-sgi-irix6.[0-4]* from\n+\tlist of obsolete configurations.\n+\tDisabled check for obsolete configurations.\n+\t(mips-sgi-irix[56]*): Restrict to mips-sgi-irix6.5*.\n+\tRemoved support for previous versions.\n+\t* config/mips/iris.h: Removed.\n+\t* config/mips/iris5.h: Removed.\n+\t* config/mips/iris6.h: Merged old iris.h contents.\n+\t(TARGET_IRIX): Removed.\n+\t(DRIVER_SELF_SPECS): Removed mabi=32.\n+\t(IDENT_ASM_OP): Removed undef.\n+\t(STARTFILE_SPEC): Removed mabi=32.\n+\t(ENDFILE_SPEC): Likewise.\n+\t(IRIX_SUBTARGET_LINK_SPEC): Likewise.\n+\t(MACHINE_TYPE): Update for IRIX 6.5.\n+\t* config/mips/mips.c (mips_build_builtin_va_list): Replaced\n+\tTARGET_IRIX by TARGET_IRIX6.\n+\t(mips_file_start): Likewise.\n+\t(mips_output_external): Remove IRIX 5/6 O32 support.\n+\t(mips_output_function_prologue): Likewise.\n+\t* config/mips/mips.h (TARGET_GPWORD): Replaced TARGET_IRIX by\n+\tTARGET_IRIX6.\n+\t(TARGET_CPU_CPP_BUILTINS): Likewise.\n+\t(TARGET_IRIX): Removed.\n+\t* config/mips/t-iris6 (MULTILIB_OPTIONS): Removed mabi=32.\n+\t(MULTILIB_DIRNAMES): Removed 32.\n+\t(MULTILIB_OSDIRNAMES): Removed ../lib.\n+\t* doc/install.texi (Prerequisites): Don't reference IRIX before\n+\t6.5.\n+\t(Specific, mips-sgi-irix5): Document removal.\n+\t(Specific, mips-sgi-irix6): Document IRIX 6.[0-4] and O32 ABI\n+\tremoval.\n+\tRemove references to older IRIX 6 releases and the O32 ABI.\n+\n 2010-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/Wunused-var-8.c: Move to..."}, {"sha": "186df2160d5d38f4bf784cc81330b97e61cad087", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,3 +1,7 @@\n+2010-05-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc-interface/Makefile.in: Removed mips-sgi-irix5* support.\n+\n 2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 40989"}, {"sha": "236903d48b95e2b66c3cecbfb1c60908314eaa6a", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1238,48 +1238,39 @@ ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n-ifeq ($(strip $(filter-out mips sgi irix%,$(targ))),)\n-  ifeq ($(strip $(filter-out mips sgi irix6%,$(targ))),)\n-    LIBGNAT_TARGET_PAIRS = \\\n-    a-intnam.ads<a-intnam-irix.ads \\\n-    s-inmaop.adb<s-inmaop-posix.adb \\\n-    s-intman.adb<s-intman-irix.adb \\\n-    s-mastop.adb<s-mastop-irix.adb \\\n-    s-osinte.adb<s-osinte-irix.adb \\\n-    s-osinte.ads<s-osinte-irix.ads \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n-    s-proinf.adb<s-proinf-irix-athread.adb \\\n-    s-proinf.ads<s-proinf-irix-athread.ads \\\n-    s-taprop.adb<s-taprop-irix.adb \\\n-    s-tasinf.ads<s-tasinf-irix.ads \\\n-    s-taspri.ads<s-taspri-posix.ads \\\n-    s-tpopsp.adb<s-tpopsp-posix.adb \\\n-    s-traceb.adb<s-traceb-mastop.adb\n+ifeq ($(strip $(filter-out mips sgi irix6%,$(targ))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-irix.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-irix.adb \\\n+  s-mastop.adb<s-mastop-irix.adb \\\n+  s-osinte.adb<s-osinte-irix.adb \\\n+  s-osinte.ads<s-osinte-irix.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-proinf.adb<s-proinf-irix-athread.adb \\\n+  s-proinf.ads<s-proinf-irix-athread.ads \\\n+  s-taprop.adb<s-taprop-irix.adb \\\n+  s-tasinf.ads<s-tasinf-irix.ads \\\n+  s-taspri.ads<s-taspri-posix.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix.adb \\\n+  s-traceb.adb<s-traceb-mastop.adb\n \n-    ifeq ($(strip $(MULTISUBDIR)),/64)\n+  ifeq ($(strip $(MULTISUBDIR)),/64)\n+    LIBGNAT_TARGET_PAIRS += \\\n+    system.ads<system-irix-n64.ads\n+  else\n+    ifeq ($(strip $(MULTISUBDIR)),/32)\n       LIBGNAT_TARGET_PAIRS += \\\n-      system.ads<system-irix-n64.ads\n+      system.ads<system-irix-o32.ads\n     else\n-      ifeq ($(strip $(MULTISUBDIR)),/32)\n-        LIBGNAT_TARGET_PAIRS += \\\n-        system.ads<system-irix-o32.ads\n-      else\n-        LIBGNAT_TARGET_PAIRS += \\\n-        system.ads<system-irix-n32.ads\n-      endif\n+      LIBGNAT_TARGET_PAIRS += \\\n+      system.ads<system-irix-n32.ads\n     endif\n-\n-    THREADSLIB = -lpthread\n-    GNATLIB_SHARED = gnatlib-shared-default\n-\n-  else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-mastop.adb<s-mastop-irix.adb \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n-    s-traceb.adb<s-traceb-mastop.adb \\\n-    system.ads<system-irix-o32.ads\n   endif\n \n+  THREADSLIB = -lpthread\n+  GNATLIB_SHARED = gnatlib-shared-default\n+\n   EH_MECHANISM=-gcc\n   TOOLS_TARGET_PAIRS = mlib-tgt-specific.adb<mlib-tgt-specific-irix.adb\n   TGT_LIB = -lexc"}, {"sha": "6b5a3394947adc32543392b4616d1eb84a621293", "filename": "gcc/config.gcc", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -208,18 +208,16 @@ xm_file=\n md_file=\n \n # Obsolete configurations.\n-case ${target} in\n-   mips-sgi-irix5*\t\t\t\\\n- | mips-sgi-irix6.[0-4]*\t\t\\\n- )\n-    if test \"x$enable_obsolete\" != xyes; then\n-      echo \"*** Configuration ${target} is obsolete.\" >&2\n-      echo \"*** Specify --enable-obsolete to build it anyway.\" >&2\n-      echo \"*** Support will be REMOVED in the next major release of GCC,\" >&2\n-      echo \"*** unless a maintainer comes forward.\" >&2\n-      exit 1\n-    fi;;\n-esac\n+#case ${target} in\n+# )\n+#    if test \"x$enable_obsolete\" != xyes; then\n+#      echo \"*** Configuration ${target} is obsolete.\" >&2\n+#      echo \"*** Specify --enable-obsolete to build it anyway.\" >&2\n+#      echo \"*** Support will be REMOVED in the next major release of GCC,\" >&2\n+#      echo \"*** unless a maintainer comes forward.\" >&2\n+#      exit 1\n+#    fi;;\n+#esac\n \n # Unsupported targets list.  Do not put an entry in this list unless\n # it would otherwise be caught by a more permissive pattern.  The list\n@@ -1668,32 +1666,13 @@ mep-*-*)\n \tfi\n \tuse_gcc_stdint=wrap\n \t;;\n-mips-sgi-irix[56]*)\n-\ttm_file=\"elfos.h ${tm_file} mips/iris.h\"\n-\ttmake_file=\"mips/t-iris mips/t-slibgcc-irix\"\n+mips-sgi-irix6.5*)\n+\ttm_file=\"elfos.h ${tm_file} mips/iris6.h\"\n+\ttmake_file=\"mips/t-iris mips/t-iris6 mips/t-slibgcc-irix\"\n \ttarget_cpu_default=\"MASK_ABICALLS\"\n-\tcase ${target} in\n-\t*-*-irix5*)\n-\t\ttm_file=\"${tm_file} mips/iris5.h\"\n-\t\tuse_gcc_stdint=provide\n-\t\t;;\n-\n-\t*-*-irix6*)\n-\t\ttm_file=\"${tm_file} mips/iris6.h\"\n-\t\ttmake_file=\"${tmake_file} mips/t-iris6\"\n-\t\ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_N32\"\n-\t\tcase ${target} in\n-\t\t*-*-irix6.[0-4]*)\n-\t\t\tuse_gcc_stdint=provide\n-\t\t\t;;\n-\t\t*-*-irix6.5*)\n-\t\t\t# Only IRIX Development Foundation 1.3 for IRIX 6.5\n-\t\t\t# provides stdint.h.\n-\t\t\tuse_gcc_stdint=wrap\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\tesac\n+\ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_N32\"\n+\t# Only IRIX Development Foundation 1.3 for IRIX 6.5 provides stdint.h.\n+\tuse_gcc_stdint=wrap\n \tif test \"x$stabs\" = xyes\n \tthen\n \t\ttm_file=\"${tm_file} dbx.h mips/dbxmdebug.h\""}, {"sha": "f22f3cda6398cf9bf17c536067fdc16a15bb1b82", "filename": "gcc/config/mips/iris.h", "status": "removed", "additions": 0, "deletions": 232, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/gcc%2Fconfig%2Fmips%2Firis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/gcc%2Fconfig%2Fmips%2Firis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,232 +0,0 @@\n-/* Definitions of target machine for GNU compiler.  Generic IRIX version.\n-   Copyright (C) 1993, 1995, 1996, 1998, 2000,\n-   2001, 2002, 2003, 2004, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* We are compiling for IRIX now.  */\n-#undef TARGET_IRIX\n-#define TARGET_IRIX 1\n-\n-/* MIPS specific debugging info */\n-#define MIPS_DEBUGGING_INFO 1\n-\n-/* The size in bytes of a DWARF field indicating an offset or length\n-   relative to a debug info section, specified to be 4 bytes in the DWARF-2\n-   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n-#define DWARF_OFFSET_SIZE PTR_SIZE\n-\n-/* The size in bytes of the initial length field in a debug info\n-   section.  The DWARF 3 (draft) specification defines this to be\n-   either 4 or 12 (with a 4-byte \"escape\" word when it's 12), but the\n-   SGI/MIPS ABI predates this standard and defines it to be the same\n-   as DWARF_OFFSET_SIZE.  */\n-#define DWARF_INITIAL_LENGTH_SIZE DWARF_OFFSET_SIZE\n-\n-/* MIPS assemblers don't have the usual .set foo,bar construct;\n-   .set is used for assembler options instead.  */\n-#undef SET_ASM_OP\n-#define ASM_OUTPUT_DEF(FILE, LABEL1, LABEL2)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fputc ('\\t', FILE);\t\t\t\t\t\\\n-      assemble_name (FILE, LABEL1);\t\t\t\t\\\n-      fputs (\" = \", FILE);\t\t\t\t\t\\\n-      assemble_name (FILE, LABEL2);\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* The MIPSpro o32 linker warns about not linking .comment sections.  */\n-#undef IDENT_ASM_OP\n-\n-#undef LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX (TARGET_NEWABI ? \".\" : \"$\")\n-\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n-\n-#undef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT mips_finish_declare_object\n-\n-/* Specify wchar_t types.  */\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-\n-/* Same for wint_t.  */\n-#undef WINT_TYPE\n-#define WINT_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n-\n-#undef WINT_TYPE_SIZE\n-#define WINT_TYPE_SIZE 32\n-\n-/* C99 stdint.h types.  */\n-#define INT8_TYPE \"signed char\"\n-#define INT16_TYPE \"short int\"\n-#define INT32_TYPE \"int\"\n-#define INT64_TYPE \"long long int\"\n-#define UINT8_TYPE \"unsigned char\"\n-#define UINT16_TYPE \"short unsigned int\"\n-#define UINT32_TYPE \"unsigned int\"\n-#define UINT64_TYPE \"long long unsigned int\"\n-\n-#define INT_LEAST8_TYPE \"signed char\"\n-#define INT_LEAST16_TYPE \"short int\"\n-#define INT_LEAST32_TYPE \"int\"\n-#define INT_LEAST64_TYPE \"long long int\"\n-#define UINT_LEAST8_TYPE \"unsigned char\"\n-#define UINT_LEAST16_TYPE \"short unsigned int\"\n-#define UINT_LEAST32_TYPE \"unsigned int\"\n-#define UINT_LEAST64_TYPE \"long long unsigned int\"\n-\n-#define INT_FAST8_TYPE \"signed char\"\n-#define INT_FAST16_TYPE \"short int\"\n-#define INT_FAST32_TYPE \"int\"\n-#define INT_FAST64_TYPE \"long long int\"\n-#define UINT_FAST8_TYPE \"unsigned char\"\n-#define UINT_FAST16_TYPE \"short unsigned int\"\n-#define UINT_FAST32_TYPE \"unsigned int\"\n-#define UINT_FAST64_TYPE \"long long unsigned int\"\n-\n-#define INTMAX_TYPE \"long long int\"\n-#define UINTMAX_TYPE \"long long unsigned int\"\n-\n-#define INTPTR_TYPE \"long int\"\n-#define UINTPTR_TYPE \"long unsigned int\"\n-\n-#define SIG_ATOMIC_TYPE \"int\"\n-\n-/* Plain char is unsigned in the SGI compiler.  */\n-#undef DEFAULT_SIGNED_CHAR\n-#define DEFAULT_SIGNED_CHAR 0\n-\n-#define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\\\n-  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\\\n-   || strcmp (STR, \"rpath\") == 0)\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      builtin_define_std (\"host_mips\");\t\t\t\t\\\n-      builtin_define_std (\"sgi\");\t\t\t\t\\\n-      builtin_define_std (\"unix\");\t\t\t\t\\\n-      builtin_define_std (\"SYSTYPE_SVR4\");\t\t\t\\\n-      builtin_define (\"_MODERN_C\");\t\t\t\t\\\n-      builtin_define (\"_SVR4_SOURCE\");\t\t\t\t\\\n-      builtin_define (\"__DSO__\");\t\t\t\t\\\n-      builtin_assert (\"system=unix\");\t\t\t\t\\\n-      builtin_assert (\"system=svr4\");\t\t\t\t\\\n-      builtin_assert (\"machine=sgi\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\t\\\n-\tbuiltin_define (\"_COMPILER_VERSION=601\");\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* We must always define _LONGLONG, even when -ansi is\t\\\n-\t used, because IRIX 5 system header files require it.\t\\\n-\t This is OK, because gcc never warns when long long\t\\\n-\t is used in system header files.\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-\t An alternative would be to support the SGI builtin\t\\\n-\t type __long_long.  */\t\t\t\t\t\\\n-      builtin_define (\"_LONGLONG\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* IRIX 6.5.18 and above provide many ISO C99\t\t\\\n-\t features protected by the __c99 macro.\t\t\t\\\n-\t libstdc++ v3 needs them as well.  */\t\t\t\\\n-      if (TARGET_IRIX6)\t\t\t\t\t\t\\\n-\tif (flag_isoc99 || c_dialect_cxx ())\t\t\t\\\n-\t  builtin_define (\"__c99\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* The GNU C++ standard library requires that\t\t\\\n-\t __EXTENSIONS__ and _SGI_SOURCE be defined on at\t\\\n-\t least IRIX 6.2 and probably all IRIX 6 prior to 6.5.\t\\\n-\t We don't need this on IRIX 6.5 itself, but it\t\t\\\n-\t shouldn't hurt other than the namespace pollution.  */\t\\\n-      if (!flag_iso || (TARGET_IRIX6 && c_dialect_cxx ()))\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__EXTENSIONS__\");\t\t\t\\\n-\t  builtin_define (\"_SGI_SOURCE\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef SUBTARGET_CC1_SPEC\n-#define SUBTARGET_CC1_SPEC \"%{static: -mno-abicalls}\"\n-\n-#undef INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP \"\\t.section\\t.gcc_init,\\\"ax\\\",@progbits\"\n-\n-#undef FINI_SECTION_ASM_OP\n-#define FINI_SECTION_ASM_OP \"\\t.section\\t.gcc_fini,\\\"ax\\\",@progbits\"\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define IRIX_NO_UNRESOLVED \"\"\n-#else\n-#define IRIX_NO_UNRESOLVED \"-no_unresolved\"\n-#endif\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"\"\n-#define SUBTARGET_WARN_UNUSED_SPEC \"\"\n-#else\n-#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"-dont_warn_unused\"\n-#define SUBTARGET_WARN_UNUSED_SPEC \"-warn_unused\"\n-#endif\n-\n-/* Generic part of the LINK_SPEC.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \"\\\n-%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n-%{bestGnum} %{shared} %{non_shared} \\\n-%{call_shared} %{no_archive} %{exact_version} \\\n-%{!shared: \\\n-  %{!non_shared: %{!call_shared:%{!r: -call_shared \" IRIX_NO_UNRESOLVED \"}}}} \\\n-%{rpath} -init __gcc_init -fini __gcc_fini \" IRIX_SUBTARGET_LINK_SPEC\n-\n-/* A linker error can empirically be avoided by removing duplicate\n-   library search directories.  */\n-#define LINK_ELIMINATE_DUPLICATE_LDIRECTORIES 1\n-\n-/* Add -g to mips.h default to avoid confusing gas with local symbols\n-   generated from stabs info.  */\n-#undef NM_FLAGS\n-#define NM_FLAGS \"-Bng\"\n-\n-/* The system header files are C++ aware.  */\n-/* ??? Unfortunately, most but not all of the headers are C++ aware.\n-   Specifically, curses.h is not, and as a consequence, defining this\n-   used to prevent libg++ building.  This is no longer the case so\n-   define it again to prevent other problems, e.g. with getopt in\n-   unistd.h.  We still need some way to fix just those files that need\n-   fixing.  */\n-#define NO_IMPLICIT_EXTERN_C 1\n-\n-/* -G is incompatible with -KPIC which is the default, so only allow objects\n-   in the small data section if the user explicitly asks for it.  */\n-#undef MIPS_DEFAULT_GVALUE\n-#define MIPS_DEFAULT_GVALUE 0\n-\n-/* The native o32 IRIX linker does not support merging without a\n-   special elspec(5) file.  */\n-#ifndef IRIX_USING_GNU_LD\n-#undef HAVE_GAS_SHF_MERGE\n-#define HAVE_GAS_SHF_MERGE 0\n-#endif"}, {"sha": "c3e86fe6afbd57f98986cbd96940d16e93443e7f", "filename": "gcc/config/mips/iris5.h", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,49 +0,0 @@\n-/* Definitions of target machine for GNU compiler.  IRIX version 5.\n-   Copyright (C) 1993, 1995, 1996, 1998, 2000,\n-   2001, 2002, 2003, 2004, 2007, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define IRIX_SUBTARGET_LINK_SPEC \"-melf32bsmip\"\n-#else\n-#define IRIX_SUBTARGET_LINK_SPEC \"-_SYSTYPE_SVR4\"\n-#endif\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"\\\n-%{!static: \\\n-  %{!shared:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}}} \\\n-%{static: \\\n-  %{pg:gcrt1.o%s} \\\n-  %{!pg:%{p:/usr/lib/nonshared/mcrt1.o%s libprof1.a%s} \\\n-  %{!p:/usr/lib/nonshared/crt1.o%s}}} \\\n-irix-crti.o%s crtbegin.o%s\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{!shared:%{p:-lprof1} %{pg:-lprof1} -lc}\"\n-\n-/* Avoid getting two warnings for libgcc.a everytime we link. */\n-#undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \\\n-  SUBTARGET_DONT_WARN_UNUSED_SPEC \" -lgcc \" SUBTARGET_WARN_UNUSED_SPEC\n-\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend.o%s irix-crtn.o%s %{!shared:crtn.o%s}\"\n-\n-#undef MACHINE_TYPE\n-#define MACHINE_TYPE \"SGI running IRIX 5.x\""}, {"sha": "784e947af7092ee9a37383f8eb1292044858f2e3", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 242, "deletions": 42, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,6 +1,6 @@\n-/* Definitions of target machine for GNU compiler.  IRIX version 6.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2010\n+/* Definitions of target machine for GNU compiler.  IRIX 6.5 version.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -19,23 +19,28 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Allow some special handling for IRIX 6.  */\n+/* We are compiling for IRIX 6 now.  */\n #undef TARGET_IRIX6\n #define TARGET_IRIX6 1\n \n+#undef MACHINE_TYPE\n+#define MACHINE_TYPE \"SGI running IRIX 6.5\"\n+\n /* Default to -mabi=n32 and -mips3.  */\n #undef MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS { \"mabi=n32\" }\n \n /* Force the default ABI onto the command line in order to make the specs\n-   easier to write.  Default to the mips2 ISA for the O32 ABI.  */\n+   easier to write.  */\n #undef DRIVER_SELF_SPECS\n #define DRIVER_SELF_SPECS \t\t\t\\\n   \"%{!mabi=*: -mabi=n32}\", \t\t\t\\\n-  \"%{mabi=32: %{!mips*: %{!march*: -mips2}}}\", \t\\\n   /* Configuration-independent MIPS rules.  */\t\\\n   BASE_DRIVER_SELF_SPECS\n \n+/* MIPS specific debugging info */\n+#define MIPS_DEBUGGING_INFO 1\n+\n /* Force the generation of dwarf .debug_frame sections even if not\n    compiling -g.  This guarantees that we can unwind the stack.  */\n #define DWARF2_FRAME_INFO 1\n@@ -45,48 +50,182 @@ along with GCC; see the file COPYING3.  If not see\n #undef  DWARF_FRAME_RETURN_COLUMN\n #define DWARF_FRAME_RETURN_COLUMN (FP_REG_LAST + 1)\n \n-#undef MACHINE_TYPE\n-#define MACHINE_TYPE \"SGI running IRIX 6.x\"\n+/* The size in bytes of a DWARF field indicating an offset or length\n+   relative to a debug info section, specified to be 4 bytes in the DWARF-2\n+   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n+#define DWARF_OFFSET_SIZE PTR_SIZE\n+\n+/* The size in bytes of the initial length field in a debug info\n+   section.  The DWARF 3 (draft) specification defines this to be\n+   either 4 or 12 (with a 4-byte \"escape\" word when it's 12), but the\n+   SGI/MIPS ABI predates this standard and defines it to be the same\n+   as DWARF_OFFSET_SIZE.  */\n+#define DWARF_INITIAL_LENGTH_SIZE DWARF_OFFSET_SIZE\n+\n+/* MIPS assemblers don't have the usual .set foo,bar construct;\n+   .set is used for assembler options instead.  */\n+#undef SET_ASM_OP\n+#define ASM_OUTPUT_DEF(FILE, LABEL1, LABEL2)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fputc ('\\t', FILE);\t\t\t\t\t\\\n+      assemble_name (FILE, LABEL1);\t\t\t\t\\\n+      fputs (\" = \", FILE);\t\t\t\t\t\\\n+      assemble_name (FILE, LABEL2);\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX (TARGET_NEWABI ? \".\" : \"$\")\n+\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n+\n+#undef ASM_FINISH_DECLARE_OBJECT\n+#define ASM_FINISH_DECLARE_OBJECT mips_finish_declare_object\n+\n+/* The native IRIX 6 linker does not support merging without a special\n+   elspec(5) file.  */\n+#ifndef IRIX_USING_GNU_LD\n+#undef HAVE_GAS_SHF_MERGE\n+#define HAVE_GAS_SHF_MERGE 0\n+#endif\n+\n+/* Specify wchar_t types.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n+\n+/* Same for wint_t.  */\n+#undef WINT_TYPE\n+#define WINT_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n+\n+#undef WINT_TYPE_SIZE\n+#define WINT_TYPE_SIZE 32\n+\n+/* C99 stdint.h types.  */\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE \"long long int\"\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE \"long long unsigned int\"\n+\n+#define INT_LEAST8_TYPE \"signed char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE \"long long int\"\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE \"long long unsigned int\"\n+\n+#define INT_FAST8_TYPE \"signed char\"\n+#define INT_FAST16_TYPE \"short int\"\n+#define INT_FAST32_TYPE \"int\"\n+#define INT_FAST64_TYPE \"long long int\"\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE \"short unsigned int\"\n+#define UINT_FAST32_TYPE \"unsigned int\"\n+#define UINT_FAST64_TYPE \"long long unsigned int\"\n+\n+#define INTMAX_TYPE \"long long int\"\n+#define UINTMAX_TYPE \"long long unsigned int\"\n+\n+#define INTPTR_TYPE \"long int\"\n+#define UINTPTR_TYPE \"long unsigned int\"\n+\n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+/* Plain char is unsigned in the SGI compiler.  */\n+#undef DEFAULT_SIGNED_CHAR\n+#define DEFAULT_SIGNED_CHAR 0\n+\n+#define WORD_SWITCH_TAKES_ARG(STR)\t\t\t\\\n+  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\\\n+   || strcmp (STR, \"rpath\") == 0)\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define_std (\"host_mips\");\t\t\t\t\\\n+      builtin_define_std (\"sgi\");\t\t\t\t\\\n+      builtin_define_std (\"unix\");\t\t\t\t\\\n+      builtin_define_std (\"SYSTYPE_SVR4\");\t\t\t\\\n+      builtin_define (\"_MODERN_C\");\t\t\t\t\\\n+      builtin_define (\"_SVR4_SOURCE\");\t\t\t\t\\\n+      builtin_define (\"__DSO__\");\t\t\t\t\\\n+      builtin_assert (\"system=unix\");\t\t\t\t\\\n+      builtin_assert (\"system=svr4\");\t\t\t\t\\\n+      builtin_assert (\"machine=sgi\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\t\\\n+\tbuiltin_define (\"_COMPILER_VERSION=601\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* We must always define _LONGLONG, even when -ansi is\t\\\n+\t used, because IRIX 5 system header files require it.\t\\\n+\t This is OK, because gcc never warns when long long\t\\\n+\t is used in system header files.\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+\t An alternative would be to support the SGI builtin\t\\\n+\t type __long_long.  */\t\t\t\t\t\\\n+      builtin_define (\"_LONGLONG\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* IRIX 6.5.18 and above provide many ISO C99\t\t\\\n+\t features protected by the __c99 macro.\t\t\t\\\n+\t libstdc++ v3 needs them as well.  */\t\t\t\\\n+      if (TARGET_IRIX6)\t\t\t\t\t\t\\\n+\tif (flag_isoc99 || c_dialect_cxx ())\t\t\t\\\n+\t  builtin_define (\"__c99\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* The GNU C++ standard library requires that\t\t\\\n+\t __EXTENSIONS__ and _SGI_SOURCE be defined on at\t\\\n+\t least IRIX 6.2 and probably all IRIX 6 prior to 6.5.\t\\\n+\t We don't need this on IRIX 6.5 itself, but it\t\t\\\n+\t shouldn't hurt other than the namespace pollution.  */\t\\\n+      if (!flag_iso || (TARGET_IRIX6 && c_dialect_cxx ()))\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__EXTENSIONS__\");\t\t\t\\\n+\t  builtin_define (\"_SGI_SOURCE\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_CC1_SPEC\n+#define SUBTARGET_CC1_SPEC \"%{static: -mno-abicalls}\"\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n+\n+#undef INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP \"\\t.section\\t.gcc_init,\\\"ax\\\",@progbits\"\n+\n+#undef FINI_SECTION_ASM_OP\n+#define FINI_SECTION_ASM_OP \"\\t.section\\t.gcc_fini,\\\"ax\\\",@progbits\"\n \n #ifdef IRIX_USING_GNU_LD\n-#define IRIX_SUBTARGET_LINK_SPEC \\\n-  \"%{mabi=32: -melf32bsmip}%{mabi=n32: -melf32bmipn32}%{mabi=64: -melf64bmip}\"\n+#define IRIX_NO_UNRESOLVED \"\"\n #else\n-  /* Explicitly hide crt symbols that would normally be marked with\n-     a \"hidden\" visibility attribute.\n-     \n-     We have traditionally disabled this attribute when using the\n-     native linker because the native linker's visibility support is\n-     not fully-compatible with the GNU linker's.  In particular, the\n-     native linker does not pull in archive objects purely to resolve\n-     references to the object's hidden symbols, whereas the GNU\n-     linker does.\n-     \n-     The gcc build system currently hides symbols in some static\n-     libraries (typically libgcov.a or libgcc.a) whenever visibility\n-     attributes are supported.  On targets with GNU semantics, this\n-     makes sure that uses of libx.so symbols in one dynamic object are\n-     not resolved to libx.a symbols in another dynamic object.  But\n-     on targets with IRIX semantics, hiding the symbols prevents the\n-     static archive from working at all.\n-     \n-     It would probably be better to enable visiblity attributes for\n-     IRIX ld and disable the static archives versioning.  It shouldn't\n-     make anything worse, since libx.a symbols are global by default\n-     anyway.  However, no-one has volunteered to do this yet.  */\n+#define IRIX_NO_UNRESOLVED \"-no_unresolved\"\n+#endif\n \n-#define IRIX_SUBTARGET_LINK_SPEC \\\n-  \"%{w} -_SYSTYPE_SVR4 -woff 131 \\\n-   %{shared:-hidden_symbol __dso_handle} \\\n-   %{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n+#ifdef IRIX_USING_GNU_LD\n+#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"\"\n+#define SUBTARGET_WARN_UNUSED_SPEC \"\"\n+#else\n+#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"-dont_warn_unused\"\n+#define SUBTARGET_WARN_UNUSED_SPEC \"-warn_unused\"\n #endif\n \n /* Profiling is supported via libprof1.a not -lc_p as in IRIX 3.  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared: \\\n-     %{mabi=32:%{pg:gcrt1.o%s} \\\n-       %{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n      %{mabi=n32: \\\n        %{mips4:%{pg:/usr/lib32/mips4/gcrt1.o%s} \\\n          %{!pg:%{p:/usr/lib32/mips4/mcrt1.o%s /usr/lib32/mips4/libprof1.a%s} \\\n@@ -124,14 +263,75 @@ along with GCC; see the file COPYING3.  If not see\n #define ENDFILE_SPEC \\\n   \"crtend.o%s irix-crtn.o%s \\\n    %{!shared: \\\n-     %{mabi=32:crtn.o%s}\\\n      %{mabi=n32:%{mips4:/usr/lib32/mips4/crtn.o%s}\\\n        %{!mips4:/usr/lib32/mips3/crtn.o%s}}\\\n      %{mabi=64:%{mips4:/usr/lib64/mips4/crtn.o%s}\\\n        %{!mips4:/usr/lib64/mips3/crtn.o%s}}}\"\n \n-#define MIPS_TFMODE_FORMAT mips_extended_format\n+/* Generic part of the LINK_SPEC.  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{bestGnum} %{shared} %{non_shared} \\\n+%{call_shared} %{no_archive} %{exact_version} \\\n+%{!shared: \\\n+  %{!non_shared: %{!call_shared:%{!r: -call_shared \" IRIX_NO_UNRESOLVED \"}}}} \\\n+%{rpath} -init __gcc_init -fini __gcc_fini \" IRIX_SUBTARGET_LINK_SPEC\n \n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n+#ifdef IRIX_USING_GNU_LD\n+#define IRIX_SUBTARGET_LINK_SPEC \\\n+  \"%{mabi=n32: -melf32bmipn32}%{mabi=64: -melf64bmip}\"\n+#else\n+  /* Explicitly hide crt symbols that would normally be marked with\n+     a \"hidden\" visibility attribute.\n+     \n+     We have traditionally disabled this attribute when using the\n+     native linker because the native linker's visibility support is\n+     not fully-compatible with the GNU linker's.  In particular, the\n+     native linker does not pull in archive objects purely to resolve\n+     references to the object's hidden symbols, whereas the GNU\n+     linker does.\n+     \n+     The gcc build system currently hides symbols in some static\n+     libraries (typically libgcov.a or libgcc.a) whenever visibility\n+     attributes are supported.  On targets with GNU semantics, this\n+     makes sure that uses of libx.so symbols in one dynamic object are\n+     not resolved to libx.a symbols in another dynamic object.  But\n+     on targets with IRIX semantics, hiding the symbols prevents the\n+     static archive from working at all.\n+     \n+     It would probably be better to enable visiblity attributes for\n+     IRIX ld and disable the static archives versioning.  It shouldn't\n+     make anything worse, since libx.a symbols are global by default\n+     anyway.  However, no-one has volunteered to do this yet.  */\n+\n+#define IRIX_SUBTARGET_LINK_SPEC \\\n+  \"%{w} -_SYSTYPE_SVR4 -woff 131 \\\n+   %{shared:-hidden_symbol __dso_handle} \\\n+   %{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n+#endif\n+\n+/* A linker error can empirically be avoided by removing duplicate\n+   library search directories.  */\n+#define LINK_ELIMINATE_DUPLICATE_LDIRECTORIES 1\n+\n+/* Add -g to mips.h default to avoid confusing gas with local symbols\n+   generated from stabs info.  */\n+#undef NM_FLAGS\n+#define NM_FLAGS \"-Bng\"\n \n+/* The system header files are C++ aware.  */\n+/* ??? Unfortunately, most but not all of the headers are C++ aware.\n+   Specifically, curses.h is not, and as a consequence, defining this\n+   used to prevent libg++ building.  This is no longer the case so\n+   define it again to prevent other problems, e.g. with getopt in\n+   unistd.h.  We still need some way to fix just those files that need\n+   fixing.  */\n+#define NO_IMPLICIT_EXTERN_C 1\n+\n+/* -G is incompatible with -KPIC which is the default, so only allow objects\n+   in the small data section if the user explicitly asks for it.  */\n+#undef MIPS_DEFAULT_GVALUE\n+#define MIPS_DEFAULT_GVALUE 0\n+\n+#define MIPS_TFMODE_FORMAT mips_extended_format"}, {"sha": "09073956ffab6ca87b5fbdf84350a269bcd0d192", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -5449,7 +5449,7 @@ mips_build_builtin_va_list (void)\n       layout_type (record);\n       return record;\n     }\n-  else if (TARGET_IRIX && TARGET_IRIX6)\n+  else if (TARGET_IRIX6)\n     /* On IRIX 6, this type is 'char *'.  */\n     return build_pointer_type (char_type_node);\n   else\n@@ -7864,19 +7864,6 @@ mips_output_external (FILE *file, tree decl, const char *name)\n \t  fprintf (file, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t\t   int_size_in_bytes (TREE_TYPE (decl)));\n \t}\n-      else if (TARGET_IRIX\n-\t       && mips_abi == ABI_32\n-\t       && TREE_CODE (decl) == FUNCTION_DECL)\n-\t{\n-\t  /* In IRIX 5 or IRIX 6 for the O32 ABI, we must output a\n-\t     `.global name .text' directive for every used but\n-\t     undefined function.  If we don't, the linker may perform\n-\t     an optimization (skipping over the insns that set $gp)\n-\t     when it is unsafe.  */\n-\t  fputs (\"\\t.globl \", file);\n-\t  assemble_name (file, name);\n-\t  fputs (\" .text\\n\", file);\n-\t}\n     }\n }\n \n@@ -8166,7 +8153,7 @@ mips_file_start (void)\n   /* Generate a special section to describe the ABI switches used to\n      produce the resultant binary.  This is unnecessary on IRIX and\n      causes unwanted warnings from the native linker.  */\n-  if (!TARGET_IRIX)\n+  if (!TARGET_IRIX6)\n     {\n       /* Record the ABI itself.  Modern versions of binutils encode\n \t this information in the ELF header flags, but GDB needs the\n@@ -9811,10 +9798,6 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n   mips_start_function_definition (fnname, TARGET_MIPS16);\n \n-  /* Stop mips_file_end from treating this function as external.  */\n-  if (TARGET_IRIX && mips_abi == ABI_32)\n-    TREE_ASM_WRITTEN (DECL_NAME (cfun->decl)) = 1;\n-\n   /* Output MIPS-specific frame information.  */\n   if (!flag_inhibit_size_directive)\n     {"}, {"sha": "891ea1ffddc06e6148a0c4f855bc772959cfbac0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n@@ -228,7 +228,7 @@ enum mips_code_readable_setting {\n #define TARGET_GPWORD\t\t\t\t\\\n   (TARGET_ABICALLS\t\t\t\t\\\n    && !TARGET_ABSOLUTE_ABICALLS\t\t\t\\\n-   && !(mips_abi == ABI_64 && TARGET_IRIX))\n+   && !(mips_abi == ABI_64 && TARGET_IRIX6))\n \n /* True if the output must have a writable .eh_frame.\n    See ASM_PREFERRED_EH_DATA_FORMAT for details.  */\n@@ -369,7 +369,6 @@ enum mips_code_readable_setting {\n #define TARGET_SYNC_AFTER_SC (!TARGET_OCTEON)\n \n /* IRIX specific stuff.  */\n-#define TARGET_IRIX\t   0\n #define TARGET_IRIX6\t   0\n \n /* Define preprocessor macros for the -march and -mtune options.\n@@ -396,7 +395,7 @@ enum mips_code_readable_setting {\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       /* Everyone but IRIX defines this to mips.  */            \t\\\n-      if (!TARGET_IRIX)                                         \t\\\n+      if (!TARGET_IRIX6)                                         \t\\\n \tbuiltin_assert (\"machine=mips\");                        \t\\\n \t\t\t\t\t\t\t\t\t\\\n       builtin_assert (\"cpu=mips\");\t\t\t\t\t\\\n@@ -416,7 +415,7 @@ enum mips_code_readable_setting {\n       if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mips64\");\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (!TARGET_IRIX)\t\t\t\t\t\t\t\\\n+      if (!TARGET_IRIX6)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Treat _R3000 and _R4000 like register-size\t\t\t\\\n \t     defines, which is how they've historically\t\t\t\\"}, {"sha": "49f16d7fc109bae5b9cb8a5e6471d0eed86913c8", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,\n-# 2006 Free Software Foundation, Inc.\n+# 2006, 2010 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,10 +17,10 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS=mabi=n32/mabi=32/mabi=64\n-MULTILIB_DIRNAMES=n32 32 64\n+MULTILIB_OPTIONS=mabi=n32/mabi=64\n+MULTILIB_DIRNAMES=n32 64\n MULTILIB_MATCHES=\n-MULTILIB_OSDIRNAMES=../lib32 ../lib ../lib64\n+MULTILIB_OSDIRNAMES=../lib32 ../lib64\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "87959e36b62e488861ffed30231411218245fb7d", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -359,8 +359,8 @@ Necessary to build libgcj, the GCJ runtime.\n \n Necessary to build link-time optimization (LTO) support.  It can be\n downloaded from @uref{http://www.mr511.de/software/libelf-0.8.12.tar.gz},\n-though it is commonly available in several systems.  The versions in\n-IRIX 5 and 6 don't work since they lack @file{gelf.h}.  The version in\n+though it is commonly available in several systems.  The version in\n+IRIX 6.5 doesn't work since it lacks @file{gelf.h}.  The version in\n Solaris 2 does work.\n \n The @option{--with-libelf} configure option should be used if libelf is\n@@ -3823,60 +3823,22 @@ made after Nov. 9, 2006) should be free from both of these problems.\n @end html\n @heading @anchor{mips-sgi-irix5}mips-sgi-irix5\n \n-Support for IRIX 5 has been obsoleted in GCC 4.5, but can still be\n-enabled by configuring with @option{--enable-obsolete}.  Support will be\n-removed in GCC 4.6.\n-\n-In order to compile GCC on an SGI running IRIX 5, the @samp{compiler_dev.hdr}\n-subsystem must be installed from the IDO CD-ROM supplied by SGI@.\n-It is also available for download from\n-@uref{http://freeware.sgi.com/ido.html}.\n-\n-If you use the MIPS C compiler to bootstrap, it may be necessary\n-to increase its table size for switch statements with the\n-@option{-Wf,-XNg1500} option.  If you use the @option{-O2}\n-optimization option, you also need to use @option{-Olimit 3000}.\n-@c FIXME: verify.\n-\n-GCC must be configured to use GNU @command{as}.  The latest version, from GNU\n-binutils 2.20.1, is known to work.\n-\n-To enable debugging under IRIX 5, you must use GNU binutils 2.15 or\n-later, and use the @option{--with-gnu-ld} @command{configure} option\n-when configuring GCC@.\n-You need to use GNU @command{ar} and @command{nm},\n-also distributed with GNU binutils.\n-@c FIXME: which parts of this are still true?\n-\n-Configuring GCC with @command{/bin/sh} is @emph{extremely} slow and may\n-even hang.  This problem can be avoided by running @command{configure}\n-like this:\n-\n-@smallexample\n-   % CONFIG_SHELL=/usr/local/bin/bash\n-   % export CONFIG_SHELL\n-   % $CONFIG_SHELL @var{srcdir}/configure [@var{options}]\n-@end smallexample\n-\n-@noindent\n-@command{/bin/ksh} doesn't work properly either.\n+Support for IRIX 5 has been removed in GCC 4.6.\n \n @html\n <hr />\n @end html\n @heading @anchor{mips-sgi-irix6}mips-sgi-irix6\n \n-Support for IRIX 6 releases before 6.5 has been obsoleted in GCC 4.5,\n-but can still be enabled by configuring with @option{--enable-obsolete}.\n-Support will be removed in GCC 4.6, which will also disable support for\n+Support for IRIX 6 releases before 6.5 has been removed in GCC 4.6, as\n+well as support for\n the O32 ABI.  It is @emph{strongly} recommended to upgrade to at least\n IRIX 6.5.18.  This release introduced full ISO C99 support, though for\n the N32 and N64 ABIs only.\n \n-To build and use GCC on IRIX 6, you need the IRIX Development Foundation\n+To build and use GCC on IRIX 6.5, you need the IRIX Development Foundation\n (IDF) and IRIX Development Libraries (IDL).  They are included with the\n-IRIX 6.5 media and can be downloaded from\n-@uref{http://freeware.sgi.com/idf_idl.html} for older IRIX 6 releases.\n+IRIX 6.5 media.\n \n If you are using SGI's MIPSpro @command{cc} as your bootstrap compiler, you must\n ensure that the N32 ABI is in use.  To test this, compile a simple C\n@@ -3933,11 +3895,11 @@ MIPSpro C 7.4 may cause bootstrap failures, due to a bug when inlining\n @code{memcmp}.  Either add @code{-U__INLINE_INTRINSICS} to the @env{CC}\n environment variable as a workaround or upgrade to MIPSpro C 7.4.1m.\n \n-GCC on IRIX 6 is usually built to support the N32, O32 and N64 ABIs.  If\n+GCC on IRIX 6.5 is usually built to support the N32 and N64 ABIs.  If\n you build GCC on a system that doesn't have the N64 libraries installed\n or cannot run 64-bit binaries,\n you need to configure with @option{--disable-multilib} so GCC doesn't\n-try to use them.  This will disable building the O32 libraries, too.\n+try to use them.\n Look for @file{/usr/lib64/libc.so.1} to see if you\n have the 64-bit libraries installed.\n "}, {"sha": "a47ca80492a582da04337f5c5e5c306ece72e1d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -1,3 +1,9 @@\n+2010-05-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.host: Removed irix[1-6], irix[1-5].*, irix6.[0-4]*\n+\tsupport.\n+\t* config/os/irix/irix5.2: Removed.\n+\n 2010-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust"}, {"sha": "0ba7eb1f09a1b11547926a24c7736e0872382225", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_base.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,55 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1997-1999, 2001, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-  \n-// Information as gleaned from /usr/include/ctype.h on irix 5.2\n-  \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  /// @brief  Base class for ctype.\n-  struct ctype_base\n-  {\n-    // Non-standard typedefs.\n-    typedef unsigned int*      \t__to_type;\n-\n-    // NB: Offsets into ctype<char>::_M_table force a particular size\n-    // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned char\tmask;\n-    static const mask upper    \t= _U;\n-    static const mask lower \t= _L;\n-    static const mask alpha \t= _U | _L;\n-    static const mask digit \t= _N;\n-    static const mask xdigit \t= _X;\n-    static const mask space \t= _S;\n-    static const mask print \t= _U | _L | _N | _P | _B;\n-    static const mask graph \t= _U | _L | _N | _P;\n-    static const mask cntrl \t= _C;\n-    static const mask punct \t= _P;\n-    static const mask alnum \t= _U | _L | _N;\n-  };\n-\n-_GLIBCXX_END_NAMESPACE"}, {"sha": "1b105b2a6c8f97598f4b0ba09f7ee9d4690782da", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_inline.h", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_inline.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,71 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 2001, 2002, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file ctype_inline.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-  \n-// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n-// functions go in ctype.cc\n-  \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  bool\n-  ctype<char>::\n-  is(mask __m, char __c) const\n-  { return (_M_table)[static_cast<unsigned char>(__c)] & __m; }\n-\n-  const char*\n-  ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const\n-  {\n-    while (__low < __high)\n-      *__vec++ = (_M_table)[static_cast<unsigned char>(*__low++)];\n-    return __high;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high && ! this->is(__m, *__low))\n-      ++__low;\n-    return __low;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_not(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high && this->is(__m, *__low))\n-      ++__low;\n-    return __low;\n-  }\n-\n-_GLIBCXX_END_NAMESPACE"}, {"sha": "d70e398f4bf102ab5ac0ef80b0349e79cab371ea", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_noninline.h", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,93 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2009\n-//  Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file ctype_noninline.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-  \n-// Information as gleaned from /usr/include/ctype.h\n-\n-  const ctype_base::mask*\n-  ctype<char>::classic_table() throw()\n-  { return __ctype + 1; }\n-\n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(!__table ? classic_table() : __table)\n-  { \n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(!__table ? classic_table() : __table)\n-  { \n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  char\n-  ctype<char>::do_toupper(char __c) const\n-  { return _toupper(__c); }\n-\n-  const char*\n-  ctype<char>::do_toupper(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = do_toupper(*__low);\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-\n-  char\n-  ctype<char>::do_tolower(char __c) const\n-  { return _tolower(__c); }\n-\n-  const char* \n-  ctype<char>::do_tolower(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = do_tolower(*__low);\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-"}, {"sha": "8769a752d1a18bad1aef67c64886e848c5f2702b", "filename": "libstdc++-v3/config/os/irix/irix5.2/os_defines.h", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718e39d0de2f69d0ede9aced24c06bfddb0b47b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h?ref=0718e39d0de2f69d0ede9aced24c06bfddb0b47b", "patch": "@@ -1,46 +0,0 @@\n-// Specific definitions for IRIX  -*- C++ -*-\n-\n-// Copyright (C) 2001, 2002, 2005, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef _GLIBCXX_OS_DEFINES\n-#define _GLIBCXX_OS_DEFINES 1\n-\n-// System-specific #define, typedefs, corrections, etc, go here.  This\n-// file will come before all others.\n-\n-// We need large file support.  There are two ways to turn it on: by\n-// defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However, it\n-// does not actually work to define only the former, as then\n-// <sys/stat.h> is invalid: `st_blocks' is defined to be a macro, but\n-// then used as a field name.  So, we have to turn on _SGI_SOURCE.\n-// That only works if _POSIX_SOURCE is turned off, so we have to\n-// explicitly turn it off.  (Some of the libio C files explicitly try\n-// to turn it on.)  _SGI_SOURCE is actually turned on implicitly via\n-// the command-line.\n-#undef _POSIX_SOURCE\n-\n-// GCC does not use thunks on IRIX. \n-#define _G_USING_THUNKS 0\n-\n-#endif\n-"}, {"sha": "c1f2736667a230b6d2ca09506818800073e77d9e", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aaa1ee883ca0e914b52d5b4bd21933b77267c28/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=9aaa1ee883ca0e914b52d5b4bd21933b77267c28", "patch": "@@ -245,12 +245,6 @@ case \"${host_os}\" in\n   hpux*)\n     os_include_dir=\"os/hpux\"\n     ;;\n-  irix[1-6] | irix[1-5].* | irix6.[0-4]*)\n-    # This is known to work on at least IRIX 5.2 and 6.3.\n-    os_include_dir=\"os/irix/irix5.2\"\n-    atomicity_dir=os/irix\n-    atomic_word_dir=os/irix\n-    ;;\n   irix6.5*)\n     os_include_dir=\"os/irix/irix6.5\"\n     atomicity_dir=os/irix"}]}