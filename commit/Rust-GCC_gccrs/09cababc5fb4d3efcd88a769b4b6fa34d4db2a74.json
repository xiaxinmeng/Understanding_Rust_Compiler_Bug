{"sha": "09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDljYWJhYmM1ZmI0ZDNlZmNkODhhNzY5YjRiNmZhMzRkNGRiMmE3NA==", "commit": {"author": {"name": "Hosaka Yuji", "email": "hos@tamanegi.org", "date": "2004-03-16T19:17:33Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-03-16T19:17:33Z"}, "message": "types.c: Fix alignment size of X86_WIN32 case int64 and double.\n\n2004-03-16  Hosaka Yuji  <hos@tamanegi.org>\n\n\t* src/types.c: Fix alignment size of X86_WIN32 case int64 and\n\tdouble.\n\t* src/x86/ffi.c (ffi_prep_args): Replace ecif->cif->rtype->type\n\twith ecif->cif->flags.\n\t(ffi_call, ffi_prep_incoming_args_SYSV): Replace cif->rtype->type\n\twith cif->flags.\n\t(ffi_prep_cif_machdep): Add X86_WIN32 struct case.\n\t(ffi_closure_SYSV): Add 1 or 2-bytes struct case for X86_WIN32.\n\t* src/x86/win32.S (retstruct1b, retstruct2b, sc_retstruct1b,\n\tsc_retstruct2b): Add for 1 or 2-bytes struct case.\n\nFrom-SVN: r79542", "tree": {"sha": "a9248c52cede4811ca61e2f25d9eb9e1416918fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9248c52cede4811ca61e2f25d9eb9e1416918fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/comments", "author": null, "committer": null, "parents": [{"sha": "cd9b76514e47cb923c0b187c35a51e92dbf80126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9b76514e47cb923c0b187c35a51e92dbf80126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9b76514e47cb923c0b187c35a51e92dbf80126"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "b9da246178ab4bf187fd8fd3bd460780a07f85ad", "filename": "libffi/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "patch": "@@ -1,3 +1,16 @@\n+2004-03-16  Hosaka Yuji  <hos@tamanegi.org>\n+\n+\t* src/types.c: Fix alignment size of X86_WIN32 case int64 and\n+\tdouble.\n+\t* src/x86/ffi.c (ffi_prep_args): Replace ecif->cif->rtype->type\n+\twith ecif->cif->flags.\n+\t(ffi_call, ffi_prep_incoming_args_SYSV): Replace cif->rtype->type\n+\twith cif->flags.\n+\t(ffi_prep_cif_machdep): Add X86_WIN32 struct case.\n+\t(ffi_closure_SYSV): Add 1 or 2-bytes struct case for X86_WIN32.\n+\t* src/x86/win32.S (retstruct1b, retstruct2b, sc_retstruct1b,\n+\tsc_retstruct2b): Add for 1 or 2-bytes struct case.\n+\n 2004-03-15 Kelley Cook <kcook@gcc.gnu.org>\n \n \t* configure.in: Rename file to ...\n@@ -12,7 +25,7 @@\n \t* src/powerpc/darwin.S: Fix EH information so it corresponds to\n \tchanges in EH format resulting from addition of linkonce support.\n \t* src/powerpc/darwin_closure.S: Likewise.\n-\t\n+\n 2004-03-11  Andreas Tobler  <a.tobler@schweiz.ch>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "2b31c26aeac41374bf2454926ac2c9d554167522", "filename": "libffi/src/types.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Ftypes.c?ref=09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "patch": "@@ -53,7 +53,7 @@ FFI_INTEGRAL_TYPEDEF(pointer, 4, 4, FFI_TYPE_POINTER);\n \n #endif\n \n-#if defined X86 || defined X86_WIN32 || defined ARM || defined M68K\n+#if defined X86 || defined ARM || defined M68K\n \n FFI_INTEGRAL_TYPEDEF(uint64, 8, 4, FFI_TYPE_UINT64);\n FFI_INTEGRAL_TYPEDEF(sint64, 8, 4, FFI_TYPE_SINT64);\n@@ -73,7 +73,11 @@ FFI_INTEGRAL_TYPEDEF(sint64, 8, 8, FFI_TYPE_SINT64);\n \n #if defined X86 || defined X86_WIN32 || defined M68K\n \n+#ifdef X86_WIN32\n+FFI_INTEGRAL_TYPEDEF(double, 8, 8, FFI_TYPE_DOUBLE);\n+#else\n FFI_INTEGRAL_TYPEDEF(double, 8, 4, FFI_TYPE_DOUBLE);\n+#endif\n FFI_INTEGRAL_TYPEDEF(longdouble, 12, 4, FFI_TYPE_LONGDOUBLE);\n \n #elif defined ARM || defined SH || defined POWERPC_AIX || defined POWERPC_DARWIN"}, {"sha": "633e549c997b35e4467ebaf020fa9bd097954760", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "patch": "@@ -47,7 +47,7 @@ void ffi_prep_args(char *stack, extended_cif *ecif)\n \n   argp = stack;\n \n-  if (ecif->cif->rtype->type == FFI_TYPE_STRUCT)\n+  if (ecif->cif->flags == FFI_TYPE_STRUCT)\n     {\n       *(void **) argp = ecif->rvalue;\n       argp += 4;\n@@ -121,7 +121,9 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n   switch (cif->rtype->type)\n     {\n     case FFI_TYPE_VOID:\n+#ifndef X86_WIN32\n     case FFI_TYPE_STRUCT:\n+#endif\n     case FFI_TYPE_SINT64:\n     case FFI_TYPE_FLOAT:\n     case FFI_TYPE_DOUBLE:\n@@ -133,6 +135,31 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n       cif->flags = FFI_TYPE_SINT64;\n       break;\n \n+#ifdef X86_WIN32\n+    case FFI_TYPE_STRUCT:\n+      if (cif->rtype->size == 1)\n+        {\n+          cif->flags = FFI_TYPE_SINT8; /* same as char size */\n+        }\n+      else if (cif->rtype->size == 2)\n+        {\n+          cif->flags = FFI_TYPE_SINT16; /* same as short size */\n+        }\n+      else if (cif->rtype->size == 4)\n+        {\n+          cif->flags = FFI_TYPE_INT; /* same as int type */\n+        }\n+      else if (cif->rtype->size == 8)\n+        {\n+          cif->flags = FFI_TYPE_SINT64; /* same as int64 type */\n+        }\n+      else\n+        {\n+          cif->flags = FFI_TYPE_STRUCT;\n+        }\n+      break;\n+#endif\n+\n     default:\n       cif->flags = FFI_TYPE_INT;\n       break;\n@@ -177,7 +204,7 @@ void ffi_call(/*@dependent@*/ ffi_cif *cif,\n   /* value address then we need to make one\t\t        */\n \n   if ((rvalue == NULL) && \n-      (cif->rtype->type == FFI_TYPE_STRUCT))\n+      (cif->flags == FFI_TYPE_STRUCT))\n     {\n       /*@-sysunrecog@*/\n       ecif.rvalue = alloca(cif->rtype->size);\n@@ -274,6 +301,16 @@ ffi_closure_SYSV (closure)\n \t   : : \"r\"(resp)\n \t   : \"eax\", \"edx\");\n     }\n+#ifdef X86_WIN32\n+  else if (rtype == FFI_TYPE_SINT8) /* 1-byte struct  */\n+    {\n+      asm (\"movsbl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n+    }\n+  else if (rtype == FFI_TYPE_SINT16) /* 2-bytes struct */\n+    {\n+      asm (\"movswl (%0),%%eax\" : : \"r\" (resp) : \"eax\");\n+    }\n+#endif\n }\n \n /*@-exportheader@*/\n@@ -289,7 +326,7 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue,\n \n   argp = stack;\n \n-  if ( cif->rtype->type == FFI_TYPE_STRUCT ) {\n+  if ( cif->flags == FFI_TYPE_STRUCT ) {\n     *rvalue = *(void **) argp;\n     argp += 4;\n   }"}, {"sha": "bc2812cf8f84ae55fdaade307863a0da3d46eec1", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09cababc5fb4d3efcd88a769b4b6fa34d4db2a74/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=09cababc5fb4d3efcd88a769b4b6fa34d4db2a74", "patch": "@@ -114,12 +114,28 @@ retlongdouble:\n  \n retint64:\n         cmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   retstruct\n+        jne   retstruct1b\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n         movl  %edx,4(%ecx)\n  \n+retstruct1b:\n+        cmpl  $FFI_TYPE_SINT8,%ecx\n+        jne   retstruct2b\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movb  %al,0(%ecx)\n+        jmp   epilogue\n+ \n+retstruct2b:\n+        cmpl  $FFI_TYPE_SINT16,%ecx\n+        jne   retstruct\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movw  %ax,0(%ecx)\n+        jmp   epilogue\n+ \n retstruct:\n         # Nothing to do!\n  \n@@ -209,12 +225,28 @@ sc_retlongdouble:\n \n sc_retint64:\n         cmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   sc_retstruct\n+        jne   sc_retstruct1b\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n         movl  %edx,4(%ecx)\n \n+sc_retstruct1b:\n+        cmpl  $FFI_TYPE_SINT8,%ecx\n+        jne   sc_retstruct2b\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movb  %al,0(%ecx)\n+        jmp   sc_epilogue\n+\n+sc_retstruct2b:\n+        cmpl  $FFI_TYPE_SINT16,%ecx\n+        jne   sc_retstruct\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movw  %ax,0(%ecx)\n+        jmp   sc_epilogue\n+\n sc_retstruct:\n         # Nothing to do!\n "}]}