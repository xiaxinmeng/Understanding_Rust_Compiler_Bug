{"sha": "1acf0246c8778feb2ad0056029991f90f9d48b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjZjAyNDZjODc3OGZlYjJhZDAwNTYwMjk5OTFmOTBmOWQ0OGI1Nw==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2019-07-19T18:33:59Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2019-07-19T18:33:59Z"}, "message": "[PATCH, rs6000] Split up rs6000.c.\n\nThe source file rs6000.c has grown to unreasonable size and is being\nsplit up into several smaller source files.  This should improve\ncompilation speed for building gcc.\n\nThis is the second of several patches to do this and moves most of the\nfunction call and builtin code to a new source file.\n\nBootstrapped and tested on powerpc64le-unknown-linux-gnu and\npowerpc64-unknown-linux-gnu with no regressions.  Is this ok for trunk?\n\n\n2019-07-17  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (builtin_description, cpu_is_info,\n\tcpu_supports_info, builtin_hash_struct, builtin_hasher,\n\tbuiltin_hash_table, rs6000_builtin_info_type, rs6000_builtin_info,\n\trs6000_aggregate_candidate, rs6000_discover_homogeneous_aggregate,\n\trs6000_return_in_memory, rs6000_return_in_msb, call_ABI_of_interest,\n\tinit_cumulative_args, rs6000_promote_function_mode,\n\trs6000_must_pass_in_stack, is_complex_IBM_long_double,\n\tabi_v4_pass_in_fpr, rs6000_function_arg_padding,\n\trs6000_function_arg_boundary, rs6000_parm_offset,\n\trs6000_parm_start, rs6000_arg_size,\n\trs6000_darwin64_record_arg_advance_flush,\n\trs6000_darwin64_record_arg_advance_recurse,\n\trs6000_darwin64_struct_check_p, rs6000_function_arg_advance_1,\n\trs6000_function_arg_advance, rs6000_darwin64_record_arg_flush,\n\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n\trs6000_mixed_function_arg, rs6000_psave_function_arg,\n\trs6000_finish_function_arg, rs6000_function_arg,\n\trs6000_arg_partial_bytes, rs6000_pass_by_reference,\n\trs6000_parm_needs_stack, rs6000_function_parms_need_stack,\n\trs6000_reg_parm_stack_space, rs6000_move_block_from_reg,\n\tsetup_incoming_varargs, rs6000_build_builtin_va_list, rs6000_va_start,\n\trs6000_gimplify_va_arg, def_builtin, bdesc_3arg, bdesc_dst,\n\tbdesc_2arg, bdesc_altivec_preds, bdesc_abs, bdesc_1arg, bdesc_0arg,\n\tbdesc_htm, rs6000_overloaded_builtin_p, rs6000_overloaded_builtin_name,\n\trs6000_expand_zeroop_builtin, rs6000_expand_mtfsf_builtin,\n\trs6000_expand_mtfsb_builtin, rs6000_expand_set_fpscr_rn_builtin,\n\trs6000_expand_set_fpscr_drn_builtin, rs6000_expand_unop_builtin,\n\taltivec_expand_abs_builtin, rs6000_expand_binop_builtin,\n\taltivec_expand_predicate_builtin, swap_endian_selector_for_mode,\n\taltivec_expand_lv_builtin, altivec_expand_stxvl_builtin,\n\taltivec_expand_stv_builtin, htm_spr_num, rs6000_htm_spr_icode,\n\thtm_expand_builtin, cpu_expand_builtin, rs6000_expand_ternop_builtin,\n\taltivec_expand_dst_builtin, altivec_expand_vec_init_builtin,\n\tget_element_number, altivec_expand_vec_set_builtin,\n\taltivec_expand_vec_ext_builtin, altivec_expand_builtin,\n\trs6000_builtin_is_supported_p, rs6000_invalid_builtin,\n\trs6000_fold_builtin, rs6000_builtin_valid_without_lhs,\n\tfold_build_vec_cmp, fold_compare_helper, fold_mergehl_helper,\n\tfold_mergeeo_helper, rs6000_gimple_fold_builtin,\n\trs6000_expand_builtin, rs6000_vector_type,\n\trs6000_init_builtins, rs6000_builtin_decl, altivec_init_builtins,\n\thtm_init_builtins, builtin_function_type, rs6000_common_init_builtins,\n\trs6000_internal_arg_pointer, rs6000_output_mi_thunk): Move\n\tto rs6000-call.c.\n\t* config/rs6000/rs6000-call.c (builtin_description, cpu_is_info,\n\tcpu_supports_info, builtin_hash_struct, builtin_hasher,\n\tbuiltin_hash_table, rs6000_builtin_info_type, rs6000_builtin_info,\n\trs6000_aggregate_candidate, rs6000_discover_homogeneous_aggregate,\n\trs6000_return_in_memory, rs6000_return_in_msb, call_ABI_of_interest,\n\tinit_cumulative_args, rs6000_promote_function_mode,\n\trs6000_must_pass_in_stack, is_complex_IBM_long_double,\n\tabi_v4_pass_in_fpr, rs6000_function_arg_padding,\n\trs6000_function_arg_boundary, rs6000_parm_offset,\n\trs6000_parm_start, rs6000_arg_size,\n\trs6000_darwin64_record_arg_advance_flush,\n\trs6000_darwin64_record_arg_advance_recurse,\n\trs6000_darwin64_struct_check_p, rs6000_function_arg_advance_1,\n\trs6000_function_arg_advance, rs6000_darwin64_record_arg_flush,\n\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n\trs6000_mixed_function_arg, rs6000_psave_function_arg,\n\trs6000_finish_function_arg, rs6000_function_arg,\n\trs6000_arg_partial_bytes, rs6000_pass_by_reference,\n\trs6000_parm_needs_stack, rs6000_function_parms_need_stack,\n\trs6000_reg_parm_stack_space, rs6000_move_block_from_reg,\n\tsetup_incoming_varargs, rs6000_build_builtin_va_list, rs6000_va_start,\n\trs6000_gimplify_va_arg, def_builtin, bdesc_3arg, bdesc_dst,\n\tbdesc_2arg, bdesc_altivec_preds, bdesc_abs, bdesc_1arg, bdesc_0arg,\n\tbdesc_htm, rs6000_overloaded_builtin_p, rs6000_overloaded_builtin_name,\n\trs6000_expand_zeroop_builtin, rs6000_expand_mtfsf_builtin,\n\trs6000_expand_mtfsb_builtin, rs6000_expand_set_fpscr_rn_builtin,\n\trs6000_expand_set_fpscr_drn_builtin, rs6000_expand_unop_builtin,\n\taltivec_expand_abs_builtin, rs6000_expand_binop_builtin,\n\taltivec_expand_predicate_builtin, swap_endian_selector_for_mode,\n\taltivec_expand_lv_builtin, altivec_expand_stxvl_builtin,\n\taltivec_expand_stv_builtin, htm_spr_num, rs6000_htm_spr_icode,\n\thtm_expand_builtin, cpu_expand_builtin, rs6000_expand_ternop_builtin,\n\taltivec_expand_dst_builtin, altivec_expand_vec_init_builtin,\n\tget_element_number, altivec_expand_vec_set_builtin,\n\taltivec_expand_vec_ext_builtin, altivec_expand_builtin,\n\trs6000_builtin_is_supported_p, rs6000_invalid_builtin,\n\trs6000_fold_builtin, rs6000_builtin_valid_without_lhs,\n\tfold_build_vec_cmp, fold_compare_helper, fold_mergehl_helper,\n\tfold_mergeeo_helper, rs6000_gimple_fold_builtin,\n\trs6000_expand_builtin, rs6000_vector_type,\n\trs6000_init_builtins, rs6000_builtin_decl, altivec_init_builtins,\n\thtm_init_builtins, builtin_function_type, rs6000_common_init_builtins,\n\trs6000_internal_arg_pointer, rs6000_output_mi_thunk: Move\n\tto here from rs6000.c.\n\t* config/rs6000/rs6000-internal.h: (rs6000_darwin64_struct_check_p,\n\trs6000_discover_homogeneous_aggregate, rs6000_output_mi_thunk,\n\trs6000_output_addr_const_extra, rs6000_gimple_fold_builtin,\n\trs6000_invalid_builtin, rs6000_build_builtin_va_list, rs6000_va_start,\n\trs6000_gimplify_va_arg, rs6000_promote_function_mode,\n\trs6000_return_in_memory, rs6000_return_in_msb,\n\trs6000_pass_by_reference, setup_incoming_varargs,\n\trs6000_function_arg_boundary, rs6000_must_pass_in_stack,\n\trs6000_arg_partial_bytes, rs6000_function_arg_advance,\n\trs6000_function_arg_padding, rs6000_function_arg,\n\trs6000_darwin64_record_arg, rs6000_internal_arg_pointer,\n\trs6000_init_builtins, rs6000_builtin_decl, rs6000_expand_builtin,\n\trs6000_fold_builtin, rs6000_passes_ieee128, rs6000_passes_float,\n\trs6000_passes_long_double, rs6000_passes_vector,\n\trs6000_returns_struct, cpu_builtin_p, tree builtin_mode_to_type,\n\taltivec_builtin_mask_for_load) Add declarations.\n\t* config/rs6000/t-rs6000: Add new source file rs6000-call.c.\n\t* config/config.gcc: Add new source file rs6000-call.c to garbage\n\tcollector and extra_objs.\n\nFrom-SVN: r273607", "tree": {"sha": "090a6c9dd1846de485c0dcfaf68514a1505a3769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090a6c9dd1846de485c0dcfaf68514a1505a3769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1acf0246c8778feb2ad0056029991f90f9d48b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acf0246c8778feb2ad0056029991f90f9d48b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acf0246c8778feb2ad0056029991f90f9d48b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acf0246c8778feb2ad0056029991f90f9d48b57/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "192ece9e15d25fd9b6534b2a8bd271684bf76d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192ece9e15d25fd9b6534b2a8bd271684bf76d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192ece9e15d25fd9b6534b2a8bd271684bf76d38"}], "stats": {"total": 16755, "additions": 8508, "deletions": 8247}, "files": [{"sha": "a9c2450a21fe85fee1e18119161e174ff5e1f77c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1acf0246c8778feb2ad0056029991f90f9d48b57", "patch": "@@ -1,3 +1,113 @@\n+2019-07-19  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (builtin_description, cpu_is_info,\n+\tcpu_supports_info, builtin_hash_struct, builtin_hasher,\n+\tbuiltin_hash_table, rs6000_builtin_info_type, rs6000_builtin_info,\n+\trs6000_aggregate_candidate, rs6000_discover_homogeneous_aggregate,\n+\trs6000_return_in_memory, rs6000_return_in_msb, call_ABI_of_interest,\n+\tinit_cumulative_args, rs6000_promote_function_mode,\n+\trs6000_must_pass_in_stack, is_complex_IBM_long_double,\n+\tabi_v4_pass_in_fpr, rs6000_function_arg_padding,\n+\trs6000_function_arg_boundary, rs6000_parm_offset,\n+\trs6000_parm_start, rs6000_arg_size,\n+\trs6000_darwin64_record_arg_advance_flush,\n+\trs6000_darwin64_record_arg_advance_recurse,\n+\trs6000_darwin64_struct_check_p, rs6000_function_arg_advance_1,\n+\trs6000_function_arg_advance, rs6000_darwin64_record_arg_flush,\n+\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n+\trs6000_mixed_function_arg, rs6000_psave_function_arg,\n+\trs6000_finish_function_arg, rs6000_function_arg,\n+\trs6000_arg_partial_bytes, rs6000_pass_by_reference,\n+\trs6000_parm_needs_stack, rs6000_function_parms_need_stack,\n+\trs6000_reg_parm_stack_space, rs6000_move_block_from_reg,\n+\tsetup_incoming_varargs, rs6000_build_builtin_va_list, rs6000_va_start,\n+\trs6000_gimplify_va_arg, def_builtin, bdesc_3arg, bdesc_dst,\n+\tbdesc_2arg, bdesc_altivec_preds, bdesc_abs, bdesc_1arg, bdesc_0arg,\n+\tbdesc_htm, rs6000_overloaded_builtin_p, rs6000_overloaded_builtin_name,\n+\trs6000_expand_zeroop_builtin, rs6000_expand_mtfsf_builtin,\n+\trs6000_expand_mtfsb_builtin, rs6000_expand_set_fpscr_rn_builtin,\n+\trs6000_expand_set_fpscr_drn_builtin, rs6000_expand_unop_builtin,\n+\taltivec_expand_abs_builtin, rs6000_expand_binop_builtin,\n+\taltivec_expand_predicate_builtin, swap_endian_selector_for_mode,\n+\taltivec_expand_lv_builtin, altivec_expand_stxvl_builtin,\n+\taltivec_expand_stv_builtin, htm_spr_num, rs6000_htm_spr_icode,\n+\thtm_expand_builtin, cpu_expand_builtin, rs6000_expand_ternop_builtin,\n+\taltivec_expand_dst_builtin, altivec_expand_vec_init_builtin,\n+\tget_element_number, altivec_expand_vec_set_builtin,\n+\taltivec_expand_vec_ext_builtin, altivec_expand_builtin,\n+\trs6000_builtin_is_supported_p, rs6000_invalid_builtin,\n+\trs6000_fold_builtin, rs6000_builtin_valid_without_lhs,\n+\tfold_build_vec_cmp, fold_compare_helper, fold_mergehl_helper,\n+\tfold_mergeeo_helper, rs6000_gimple_fold_builtin,\n+\trs6000_expand_builtin, rs6000_vector_type,\n+\trs6000_init_builtins, rs6000_builtin_decl, altivec_init_builtins,\n+\thtm_init_builtins, builtin_function_type, rs6000_common_init_builtins,\n+\trs6000_internal_arg_pointer, rs6000_output_mi_thunk): Move\n+\tto rs6000-call.c.\n+\t* config/rs6000/rs6000-call.c (builtin_description, cpu_is_info,\n+\tcpu_supports_info, builtin_hash_struct, builtin_hasher,\n+\tbuiltin_hash_table, rs6000_builtin_info_type, rs6000_builtin_info,\n+\trs6000_aggregate_candidate, rs6000_discover_homogeneous_aggregate,\n+\trs6000_return_in_memory, rs6000_return_in_msb, call_ABI_of_interest,\n+\tinit_cumulative_args, rs6000_promote_function_mode,\n+\trs6000_must_pass_in_stack, is_complex_IBM_long_double,\n+\tabi_v4_pass_in_fpr, rs6000_function_arg_padding,\n+\trs6000_function_arg_boundary, rs6000_parm_offset,\n+\trs6000_parm_start, rs6000_arg_size,\n+\trs6000_darwin64_record_arg_advance_flush,\n+\trs6000_darwin64_record_arg_advance_recurse,\n+\trs6000_darwin64_struct_check_p, rs6000_function_arg_advance_1,\n+\trs6000_function_arg_advance, rs6000_darwin64_record_arg_flush,\n+\trs6000_darwin64_record_arg_recurse, rs6000_darwin64_record_arg,\n+\trs6000_mixed_function_arg, rs6000_psave_function_arg,\n+\trs6000_finish_function_arg, rs6000_function_arg,\n+\trs6000_arg_partial_bytes, rs6000_pass_by_reference,\n+\trs6000_parm_needs_stack, rs6000_function_parms_need_stack,\n+\trs6000_reg_parm_stack_space, rs6000_move_block_from_reg,\n+\tsetup_incoming_varargs, rs6000_build_builtin_va_list, rs6000_va_start,\n+\trs6000_gimplify_va_arg, def_builtin, bdesc_3arg, bdesc_dst,\n+\tbdesc_2arg, bdesc_altivec_preds, bdesc_abs, bdesc_1arg, bdesc_0arg,\n+\tbdesc_htm, rs6000_overloaded_builtin_p, rs6000_overloaded_builtin_name,\n+\trs6000_expand_zeroop_builtin, rs6000_expand_mtfsf_builtin,\n+\trs6000_expand_mtfsb_builtin, rs6000_expand_set_fpscr_rn_builtin,\n+\trs6000_expand_set_fpscr_drn_builtin, rs6000_expand_unop_builtin,\n+\taltivec_expand_abs_builtin, rs6000_expand_binop_builtin,\n+\taltivec_expand_predicate_builtin, swap_endian_selector_for_mode,\n+\taltivec_expand_lv_builtin, altivec_expand_stxvl_builtin,\n+\taltivec_expand_stv_builtin, htm_spr_num, rs6000_htm_spr_icode,\n+\thtm_expand_builtin, cpu_expand_builtin, rs6000_expand_ternop_builtin,\n+\taltivec_expand_dst_builtin, altivec_expand_vec_init_builtin,\n+\tget_element_number, altivec_expand_vec_set_builtin,\n+\taltivec_expand_vec_ext_builtin, altivec_expand_builtin,\n+\trs6000_builtin_is_supported_p, rs6000_invalid_builtin,\n+\trs6000_fold_builtin, rs6000_builtin_valid_without_lhs,\n+\tfold_build_vec_cmp, fold_compare_helper, fold_mergehl_helper,\n+\tfold_mergeeo_helper, rs6000_gimple_fold_builtin,\n+\trs6000_expand_builtin, rs6000_vector_type,\n+\trs6000_init_builtins, rs6000_builtin_decl, altivec_init_builtins,\n+\thtm_init_builtins, builtin_function_type, rs6000_common_init_builtins,\n+\trs6000_internal_arg_pointer, rs6000_output_mi_thunk: Move\n+\tto here from rs6000.c.\n+\t* config/rs6000/rs6000-internal.h: (rs6000_darwin64_struct_check_p,\n+\trs6000_discover_homogeneous_aggregate, rs6000_output_mi_thunk,\n+\trs6000_output_addr_const_extra, rs6000_gimple_fold_builtin,\n+\trs6000_invalid_builtin, rs6000_build_builtin_va_list, rs6000_va_start,\n+\trs6000_gimplify_va_arg, rs6000_promote_function_mode,\n+\trs6000_return_in_memory, rs6000_return_in_msb,\n+\trs6000_pass_by_reference, setup_incoming_varargs,\n+\trs6000_function_arg_boundary, rs6000_must_pass_in_stack,\n+\trs6000_arg_partial_bytes, rs6000_function_arg_advance,\n+\trs6000_function_arg_padding, rs6000_function_arg,\n+\trs6000_darwin64_record_arg, rs6000_internal_arg_pointer,\n+\trs6000_init_builtins, rs6000_builtin_decl, rs6000_expand_builtin,\n+\trs6000_fold_builtin, rs6000_passes_ieee128, rs6000_passes_float,\n+\trs6000_passes_long_double, rs6000_passes_vector,\n+\trs6000_returns_struct, cpu_builtin_p, tree builtin_mode_to_type,\n+\taltivec_builtin_mask_for_load) Add declarations.\n+\t* config/rs6000/t-rs6000: Add new source file rs6000-call.c.\n+\t* config/config.gcc: Add new source file rs6000-call.c to garbage\n+\tcollector and extra_objs.\n+\n 2019-07-19  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dse.c (initialize_ao_ref_for_dse): Handle"}, {"sha": "446a852ffe1a2003566cf50d9f73e974087d54ad", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1acf0246c8778feb2ad0056029991f90f9d48b57", "patch": "@@ -499,7 +499,7 @@ or1k*-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n+\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o rs6000-call.o\"\n \textra_headers=\"ppc-asm.h altivec.h htmintrin.h htmxlintrin.h\"\n \textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h\"\n \textra_headers=\"${extra_headers} xmmintrin.h mm_malloc.h emmintrin.h\"\n@@ -513,7 +513,7 @@ powerpc*-*-*)\n \t\t;;\n \tesac\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c \\$(srcdir)/config/rs6000/rs6000-call.c\"\n \t;;\n pru-*-*)\n \tcpu_type=pru\n@@ -525,8 +525,8 @@ riscv*)\n \t;;\n rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n-\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n-\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c\"\n+\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o rs6000-call.o\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c \\$(srcdir)/config/rs6000/rs6000-call.c\"\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc"}, {"sha": "ff48ff1845b48d4a588bdf4ffab436aaa12bdf02", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "added", "additions": 8124, "deletions": 0, "changes": 8124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=1acf0246c8778feb2ad0056029991f90f9d48b57"}, {"sha": "0da040c9632f58630e5fb6dd1587b4c68ce5d0a9", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=1acf0246c8778feb2ad0056029991f90f9d48b57", "patch": "@@ -99,6 +99,7 @@ extern const char * rs6000_machine_from_flags (void);\n extern void emit_asm_machine (void);\n extern bool rs6000_global_entry_point_prologue_needed_p (void);\n extern bool rs6000_keep_leaf_when_profiled (void);\n+extern void rs6000_live_on_entry (bitmap regs);\n \n /* Return true if the OFFSET is valid for the quad address instructions that\n    use d-form (register + offset) addressing.  */\n@@ -123,4 +124,76 @@ extern vec<branch_island, va_gc> *branch_islands;\n \n #endif\n \n+/* Declare functions in rs6000-call.c or called in rs6000.c\n+   from rs6000-call.c  */\n+extern int rs6000_darwin64_struct_check_p (machine_mode mode, const_tree type);\n+extern bool rs6000_discover_homogeneous_aggregate (machine_mode mode,\n+\t\t\t\t\t\t   const_tree type,\n+\t\t\t\t\t\t   machine_mode *elt_mode,\n+\t\t\t\t\t\t   int *n_elts);\n+extern void rs6000_output_mi_thunk (FILE *file,\n+\t\t\t\t    tree thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t\t    HOST_WIDE_INT delta,\n+\t\t\t\t    HOST_WIDE_INT vcall_offset,\n+\t\t\t\t    tree function);\n+extern bool rs6000_output_addr_const_extra (FILE *file, rtx x);\n+extern bool rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi);\n+extern void rs6000_invalid_builtin (enum rs6000_builtins fncode);\n+extern tree rs6000_build_builtin_va_list (void);\n+extern void rs6000_va_start (tree valist, rtx nextarg);\n+extern tree rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n+\t\t\t\t    gimple_seq *post_p);\n+extern machine_mode rs6000_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t\t\t\t  machine_mode mode,\n+\t\t\t\t\t\t  int *punsignedp ATTRIBUTE_UNUSED,\n+\t\t\t\t\t\t  const_tree, int);\n+extern bool rs6000_return_in_memory (const_tree type, \n+\t\t\t\t     const_tree fntype ATTRIBUTE_UNUSED);\n+extern bool rs6000_return_in_msb (const_tree valtype);\n+extern bool rs6000_pass_by_reference (cumulative_args_t cum ATTRIBUTE_UNUSED,\n+\t\t\t\t      machine_mode mode, const_tree type,\n+\t\t\t\t      bool named ATTRIBUTE_UNUSED);\n+extern void setup_incoming_varargs (cumulative_args_t cum, machine_mode mode,\n+\t\t\t\t    tree type, int *pretend_size ATTRIBUTE_UNUSED,\n+\t\t\t\t    int no_rtl);\n+extern unsigned int rs6000_function_arg_boundary (machine_mode mode,\n+\t\t\t\t\t\t  const_tree type);\n+extern bool rs6000_must_pass_in_stack (machine_mode mode, const_tree type);\n+extern int rs6000_arg_partial_bytes (cumulative_args_t cum_v,\n+\t\t\t\t     machine_mode mode, tree type,\n+\t\t\t\t     bool named);\n+extern void rs6000_function_arg_advance (cumulative_args_t cum,\n+\t\t\t\t\t machine_mode mode,\n+\t\t\t\t\t const_tree type, bool named);\n+extern pad_direction rs6000_function_arg_padding (machine_mode mode,\n+\t\t\t\t\t\t  const_tree type);\n+extern rtx rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n+\t\t\t\tconst_tree type, bool named);\n+extern rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree,\n+\t\t\t\t       bool, bool);\n+extern rtx rs6000_internal_arg_pointer (void);\n+\n+extern void rs6000_init_builtins (void);\n+extern tree rs6000_builtin_decl (unsigned code,\n+\t\t\t\t bool initialize_p ATTRIBUTE_UNUSED);\n+extern rtx rs6000_expand_builtin (tree exp, rtx target,\n+\t\t\t\t  rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\t  int ignore ATTRIBUTE_UNUSED);\n+extern tree rs6000_fold_builtin (tree fndecl ATTRIBUTE_UNUSED,\n+\t\t\t         int n_args ATTRIBUTE_UNUSED,\n+\t\t\t         tree *args ATTRIBUTE_UNUSED,\n+\t\t\t         bool ignore ATTRIBUTE_UNUSED);\n+\n+#if TARGET_ELF\n+extern bool rs6000_passes_ieee128;\n+#endif\n+extern bool rs6000_passes_float;\n+extern bool rs6000_passes_long_double;\n+extern bool rs6000_passes_vector;\n+extern bool rs6000_returns_struct;\n+extern bool cpu_builtin_p;\n+extern GTY(()) tree builtin_mode_to_type[MAX_MACHINE_MODE][2];\n+extern GTY(()) tree altivec_builtin_mask_for_load;\n+\n #endif"}, {"sha": "dbb6a0f007f7b4a7d9e9f2f071ed6e3eba334a8c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 193, "deletions": 8243, "changes": 8436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1acf0246c8778feb2ad0056029991f90f9d48b57"}, {"sha": "59a1424f5e4de48bcd6aa5df0a0a650c7afada43", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf0246c8778feb2ad0056029991f90f9d48b57/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=1acf0246c8778feb2ad0056029991f90f9d48b57", "patch": "@@ -43,6 +43,10 @@ rs6000-logue.o: $(srcdir)/config/rs6000/rs6000-logue.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+rs6000-call.o: $(srcdir)/config/rs6000/rs6000-call.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n $(srcdir)/config/rs6000/rs6000-tables.opt: $(srcdir)/config/rs6000/genopt.sh \\\n   $(srcdir)/config/rs6000/rs6000-cpus.def\n \t$(SHELL) $(srcdir)/config/rs6000/genopt.sh $(srcdir)/config/rs6000 > \\"}]}