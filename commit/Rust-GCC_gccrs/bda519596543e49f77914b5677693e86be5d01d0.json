{"sha": "bda519596543e49f77914b5677693e86be5d01d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhNTE5NTk2NTQzZTQ5Zjc3OTE0YjU2Nzc2OTNlODZiZTVkMDFkMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-13T20:28:55Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-17T10:50:25Z"}, "message": "d: Add TARGET_D_TEMPLATES_ALWAYS_COMDAT\n\nFollowing up on the fix for PR99914, when testing on MinGW, it was found\nnot to support weak in the same way as on ELF or Mach-O targets.\n\nSo the linkage has been reverted back to COMDAT for that target, however\nin order to properly support overriding functions and variables, all\ndeclarations with external linkage must be put on COMDAT.  For this a\nnew target hook has been added to control the behavior.\n\ngcc/ChangeLog:\n\n\tPR d/99914\n\t* config/i386/winnt-d.c (TARGET_D_TEMPLATES_ALWAYS_COMDAT): Define.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (D language and ABI): Add @hook for\n\tTARGET_D_TEMPLATES_ALWAYS_COMDAT.\n\ngcc/d/ChangeLog:\n\n\tPR d/99914\n\t* d-target.def (d_templates_always_comdat): New hook.\n\t* d-tree.h (mark_needed): Remove prototype.\n\t* decl.cc: Include d-target.h.\n\t(mark_needed): Rename to...\n\t(d_mark_needed): ...this.  Make static.\n\t(set_linkage_for_decl): Put variables in comdat if\n\td_templates_always_comdat.", "tree": {"sha": "70d41323c49a2dbddef9b55e57fb8784fba78922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d41323c49a2dbddef9b55e57fb8784fba78922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda519596543e49f77914b5677693e86be5d01d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda519596543e49f77914b5677693e86be5d01d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda519596543e49f77914b5677693e86be5d01d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda519596543e49f77914b5677693e86be5d01d0/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81bc495a426b0020e44a9764fd904462a39983b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc495a426b0020e44a9764fd904462a39983b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81bc495a426b0020e44a9764fd904462a39983b"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "ea4cd13d0bf6463eb2be145c3548b5d2462b8814", "filename": "gcc/config/i386/winnt-d.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fconfig%2Fi386%2Fwinnt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fconfig%2Fi386%2Fwinnt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-d.c?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -78,4 +78,9 @@ winnt_d_register_target_info (void)\n #undef TARGET_D_MINFO_END_NAME\n #define TARGET_D_MINFO_END_NAME \"__stop_minfo\"\n \n+/* Define TARGET_D_TEMPLATES_ALWAYS_COMDAT for Windows targets.  */\n+\n+#undef TARGET_D_TEMPLATES_ALWAYS_COMDAT\n+#define TARGET_D_TEMPLATES_ALWAYS_COMDAT true\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "67647515cf274975e788e9110ec58f126b47096e", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -104,5 +104,13 @@ and @var{link_windows} to @code{1} to apply @code{stdcall} to functions with\\n\\\n  bool, (unsigned int *link_system, unsigned int *link_windows),\n  hook_bool_uintp_uintp_false)\n \n+/* True if instantiations are always COMDAT if they have external linkage.  */\n+DEFHOOKPOD\n+(d_templates_always_comdat,\n+ \"This flag is true if instantiated functions and variables are always COMDAT\\n\\\n+if they have external linkage.  If this flag is false, then instantiated\\n\\\n+decls will be emitted as weak symbols.  The default is @code{false}.\",\n+ bool, false)\n+\n /* Close the 'struct gcc_targetdm' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "bb731a60541dbd92e16019abbc32d1e38072e0d0", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -631,7 +631,6 @@ extern void d_finish_decl (tree);\n extern tree make_thunk (FuncDeclaration *, int);\n extern tree start_function (FuncDeclaration *);\n extern void finish_function (tree);\n-extern void mark_needed (tree);\n extern tree get_vtable_decl (ClassDeclaration *);\n extern tree build_new_class_expr (ClassReferenceExp *);\n extern tree aggregate_initializer_decl (AggregateDeclaration *);"}, {"sha": "7d1378255bd7b92b282ee49c80a3f81ef210d0cd", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symtab-thunks.h\"\n \n #include \"d-tree.h\"\n+#include \"d-target.h\"\n \n \n /* Return identifier for the external mangled name of DECL.  */\n@@ -1960,8 +1961,8 @@ finish_function (tree old_context)\n /* Mark DECL, which is a VAR_DECL or FUNCTION_DECL as a symbol that\n    must be emitted in this, output module.  */\n \n-void\n-mark_needed (tree decl)\n+static void\n+d_mark_needed (tree decl)\n {\n   TREE_USED (decl) = 1;\n \n@@ -2380,6 +2381,18 @@ set_linkage_for_decl (tree decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n     return d_comdat_linkage (decl);\n \n+  /* If all instantiations must go in COMDAT, give them that linkage.\n+     This also applies to other extern declarations, so that it is possible\n+     for them to override template declarations.  */\n+  if (targetdm.d_templates_always_comdat)\n+    {\n+      /* Make sure that instantiations are not removed.  */\n+      if (flag_weak_templates && DECL_INSTANTIATED (decl))\n+\td_mark_needed (decl);\n+\n+      return d_comdat_linkage (decl);\n+    }\n+\n   /* Instantiated variables and functions need to be overridable by any other\n      symbol with the same name, so give them weak linkage.  */\n   if (DECL_INSTANTIATED (decl))"}, {"sha": "823f85ba9abbaf360b5964e9294801eb72ccf689", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -10850,6 +10850,12 @@ and @var{link_windows} to @code{1} to apply @code{stdcall} to functions with\n @code{extern(Windows)} linkage.\n @end deftypefn\n \n+@deftypevr {D Target Hook} bool TARGET_D_TEMPLATES_ALWAYS_COMDAT\n+This flag is true if instantiated functions and variables are always COMDAT\n+if they have external linkage.  If this flag is false, then instantiated\n+decls will be emitted as weak symbols.  The default is @code{false}.\n+@end deftypevr\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "2321a5fc4e02562b6a55e6f3f1afa2e3aee3f4e8", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda519596543e49f77914b5677693e86be5d01d0/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=bda519596543e49f77914b5677693e86be5d01d0", "patch": "@@ -7369,6 +7369,8 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_HAS_STDCALL_CONVENTION\n \n+@hook TARGET_D_TEMPLATES_ALWAYS_COMDAT\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}]}