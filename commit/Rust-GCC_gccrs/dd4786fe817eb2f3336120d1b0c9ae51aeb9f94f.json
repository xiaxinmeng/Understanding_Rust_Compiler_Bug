{"sha": "dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0Nzg2ZmU4MTdlYjJmMzMzNjEyMGQxYjBjOWFlNTFhZWI5Zjk0Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-07-20T15:47:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-07-20T15:47:33Z"}, "message": "cse.c: Use HOST_WIDE_INT_M1 instead of ~(HOST_WIDE_INT) 0.\n\n\t* cse.c: Use HOST_WIDE_INT_M1 instead of ~(HOST_WIDE_INT) 0.\n\t* combine.c: Use HOST_WIDE_INT_M1U instead of\n\t~(unsigned HOST_WIDE_INT) 0.\n\t* double-int.h: Ditto.\n\t* dse.c: Ditto.\n\t* dwarf2asm.c:Ditto.\n\t* expmed.c: Ditto.\n\t* genmodes.c: Ditto.\n\t* match.pd: Ditto.\n\t* read-rtl.c: Ditto.\n\t* tree-ssa-loop-ivopts.c: Ditto.\n\t* tree-ssa-loop-prefetch.c: Ditto.\n\t* tree-vect-generic.c: Ditto.\n\t* tree-vect-patterns.c: Ditto.\n\t* tree.c: Ditto.\n\nFrom-SVN: r238529", "tree": {"sha": "a31ebbaee27a56d8af1282863c1c9427bc98e5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31ebbaee27a56d8af1282863c1c9427bc98e5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbe9dfdd501cea13034c7b809330e82a54883b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe9dfdd501cea13034c7b809330e82a54883b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe9dfdd501cea13034c7b809330e82a54883b1e"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "2763af1d4e78fe7e0eb8e304a6515e8bb8201816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -1,3 +1,21 @@\n+2016-07-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* cse.c: Use HOST_WIDE_INT_M1 instead of ~(HOST_WIDE_INT) 0.\n+\t* combine.c: Use HOST_WIDE_INT_M1U instead of\n+\t~(unsigned HOST_WIDE_INT) 0.\n+\t* double-int.h: Ditto.\n+\t* dse.c: Ditto.\n+\t* dwarf2asm.c:Ditto.\n+\t* expmed.c: Ditto.\n+\t* genmodes.c: Ditto.\n+\t* match.pd: Ditto.\n+\t* read-rtl.c: Ditto.\n+\t* tree-ssa-loop-ivopts.c: Ditto.\n+\t* tree-ssa-loop-prefetch.c: Ditto.\n+\t* tree-vect-generic.c: Ditto.\n+\t* tree-vect-patterns.c: Ditto.\n+\t* tree.c: Ditto.\n+\n 2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc/config/avr.c (avr_legitimize_address) [AVR_TINY]: Force"}, {"sha": "1becc3c719db1f5a33d0bdf405fd1cdf4284f632", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -1660,7 +1660,7 @@ update_rsp_from_reg_equal (reg_stat_type *rsp, rtx_insn *insn, const_rtx set,\n     }\n \n   /* Don't call nonzero_bits if it cannot change anything.  */\n-  if (rsp->nonzero_bits != ~(unsigned HOST_WIDE_INT) 0)\n+  if (rsp->nonzero_bits != HOST_WIDE_INT_M1U)\n     {\n       bits = nonzero_bits (src, nonzero_bits_mode);\n       if (reg_equal && bits)\n@@ -6541,7 +6541,7 @@ simplify_set (rtx x)\n \n   if (GET_MODE_CLASS (mode) == MODE_INT && HWI_COMPUTABLE_MODE_P (mode))\n     {\n-      src = force_to_mode (src, mode, ~(unsigned HOST_WIDE_INT) 0, 0);\n+      src = force_to_mode (src, mode, HOST_WIDE_INT_M1U, 0);\n       SUBST (SET_SRC (x), src);\n     }\n \n@@ -7446,7 +7446,7 @@ make_extraction (machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       else\n \tnew_rtx = force_to_mode (inner, tmode,\n \t\t\t     len >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? ~(unsigned HOST_WIDE_INT) 0\n+\t\t\t     ? HOST_WIDE_INT_M1U\n \t\t\t     : (HOST_WIDE_INT_1U << len) - 1,\n \t\t\t     0);\n \n@@ -7635,7 +7635,7 @@ make_extraction (machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       inner = force_to_mode (inner, wanted_inner_mode,\n \t\t\t     pos_rtx\n \t\t\t     || len + orig_pos >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? ~(unsigned HOST_WIDE_INT) 0\n+\t\t\t     ? HOST_WIDE_INT_M1U\n \t\t\t     : (((HOST_WIDE_INT_1U << len) - 1)\n \t\t\t\t<< orig_pos),\n \t\t\t     0);\n@@ -8110,7 +8110,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t    && subreg_lowpart_p (x))\n \t  {\n \t    rtx newer\n-\t      = force_to_mode (tem, mode, ~(unsigned HOST_WIDE_INT) 0, 0);\n+\t      = force_to_mode (tem, mode, HOST_WIDE_INT_M1U, 0);\n \n \t    /* If we have something other than a SUBREG, we might have\n \t       done an expansion, so rerun ourselves.  */\n@@ -8390,7 +8390,7 @@ force_to_mode (rtx x, machine_mode mode, unsigned HOST_WIDE_INT mask,\n      do not know, we need to assume that all bits up to the highest-order\n      bit in MASK will be needed.  This is how we form such a mask.  */\n   if (mask & (HOST_WIDE_INT_1U << (HOST_BITS_PER_WIDE_INT - 1)))\n-    fuller_mask = ~(unsigned HOST_WIDE_INT) 0;\n+    fuller_mask = HOST_WIDE_INT_M1U;\n   else\n     fuller_mask = ((HOST_WIDE_INT_1U << (floor_log2 (mask) + 1))\n \t\t   - 1);\n@@ -8733,7 +8733,7 @@ force_to_mode (rtx x, machine_mode mode, unsigned HOST_WIDE_INT mask,\n \n \t  if (GET_MODE_PRECISION (GET_MODE (x)) > HOST_BITS_PER_WIDE_INT)\n \t    {\n-\t      nonzero = ~(unsigned HOST_WIDE_INT) 0;\n+\t      nonzero = HOST_WIDE_INT_M1U;\n \n \t      /* GET_MODE_PRECISION (GET_MODE (x)) - INTVAL (XEXP (x, 1))\n \t\t is the number of bits a full-width mask would have set.\n@@ -9496,7 +9496,7 @@ make_field_assignment (rtx x)\n \t\t\t       dest);\n   src = force_to_mode (src, mode,\n \t\t       GET_MODE_PRECISION (mode) >= HOST_BITS_PER_WIDE_INT\n-\t\t       ? ~(unsigned HOST_WIDE_INT) 0\n+\t\t       ? HOST_WIDE_INT_M1U\n \t\t       : (HOST_WIDE_INT_1U << len) - 1,\n \t\t       0);\n "}, {"sha": "61d2d7e3c3f77445295688eebe08c6d0313b5b25", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -4565,7 +4565,7 @@ cse_insn (rtx_insn *insn)\n \t  else\n \t    shift = INTVAL (pos);\n \t  if (INTVAL (width) == HOST_BITS_PER_WIDE_INT)\n-\t    mask = ~(HOST_WIDE_INT) 0;\n+\t    mask = HOST_WIDE_INT_M1;\n \t  else\n \t    mask = (HOST_WIDE_INT_1 << INTVAL (width)) - 1;\n \t  val = (val >> shift) & mask;\n@@ -5233,7 +5233,7 @@ cse_insn (rtx_insn *insn)\n \t\t  else\n \t\t    shift = INTVAL (pos);\n \t\t  if (INTVAL (width) == HOST_BITS_PER_WIDE_INT)\n-\t\t    mask = ~(HOST_WIDE_INT) 0;\n+\t\t    mask = HOST_WIDE_INT_M1;\n \t\t  else\n \t\t    mask = (HOST_WIDE_INT_1 << INTVAL (width)) - 1;\n \t\t  val &= ~(mask << shift);"}, {"sha": "6f59c1b9717eb77e32a284302deec14311b26e9d", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -365,7 +365,7 @@ double_int::operator ^ (double_int b) const\n \n void dump_double_int (FILE *, double_int, bool);\n \n-#define ALL_ONES (~((unsigned HOST_WIDE_INT) 0))\n+#define ALL_ONES HOST_WIDE_INT_M1U\n \n /* The operands of the following comparison functions must be processed\n    with double_int_ext, if their precision is less than"}, {"sha": "89c3f94d0f054d26c62fc0775c52aa044c88cf76", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -288,7 +288,7 @@ struct store_info\n static unsigned HOST_WIDE_INT\n lowpart_bitmask (int n)\n {\n-  unsigned HOST_WIDE_INT mask = ~(unsigned HOST_WIDE_INT) 0;\n+  unsigned HOST_WIDE_INT mask = HOST_WIDE_INT_M1U;\n   return mask >> (HOST_BITS_PER_WIDE_INT - n);\n }\n "}, {"sha": "ae81445dc84e2b12958d72f6ce46d68f199b0842", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -97,7 +97,7 @@ dw2_asm_output_data (int size, unsigned HOST_WIDE_INT value,\n   va_start (ap, comment);\n \n   if (size * 8 < HOST_BITS_PER_WIDE_INT)\n-    value &= ~(~(unsigned HOST_WIDE_INT) 0 << (size * 8));\n+    value &= ~(HOST_WIDE_INT_M1U << (size * 8));\n \n   if (op)\n     {"}, {"sha": "f776e54809e10d6233107a64b67dfedb6d1026d5", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -3513,7 +3513,7 @@ invert_mod2n (unsigned HOST_WIDE_INT x, int n)\n   int nbit = 3;\n \n   mask = (n == HOST_BITS_PER_WIDE_INT\n-\t  ? ~(unsigned HOST_WIDE_INT) 0\n+\t  ? HOST_WIDE_INT_M1U\n \t  : (HOST_WIDE_INT_1U << n) - 1);\n \n   while (nbit < n)\n@@ -4423,7 +4423,7 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t    || size - 1 >= BITS_PER_WORD)\n \t\t\t  goto fail1;\n \n-\t\t\tml |= (~(unsigned HOST_WIDE_INT) 0) << (size - 1);\n+\t\t\tml |= HOST_WIDE_INT_M1U << (size - 1);\n \t\t\tmlr = gen_int_mode (ml, compute_mode);\n \t\t\textra_cost = (shift_cost (speed, compute_mode, post_shift)\n \t\t\t\t      + shift_cost (speed, compute_mode, size - 1)"}, {"sha": "097cc80f33e132d15e890caf104917d690454451", "filename": "gcc/genmodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -1409,7 +1409,7 @@ emit_mode_mask (void)\n   puts (\"\\\n #define MODE_MASK(m)                          \\\\\\n\\\n   ((m) >= HOST_BITS_PER_WIDE_INT)             \\\\\\n\\\n-   ? ~(unsigned HOST_WIDE_INT) 0              \\\\\\n\\\n+   ? HOST_WIDE_INT_M1U                        \\\\\\n\\\n    : (HOST_WIDE_INT_1U << (m)) - 1\\n\");\n \n   for_all_modes (c, m)"}, {"sha": "21bf6177cddf1bf7e659460eea25adee2d8bcfc4", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -1487,7 +1487,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t      is all ones.  */\n \t\t }\n \t     }\n-\t   zerobits = ~(unsigned HOST_WIDE_INT) 0;\n+\t   zerobits = HOST_WIDE_INT_M1U;\n \t   if (shiftc < prec)\n \t     {\n \t       zerobits >>= HOST_BITS_PER_WIDE_INT - shiftc;\n@@ -1522,7 +1522,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t       break;\n \t }\n \t (if (prec < HOST_BITS_PER_WIDE_INT\n-\t      || newmask == ~(unsigned HOST_WIDE_INT) 0)\n+\t      || newmask == HOST_WIDE_INT_M1U)\n \t  (with\n \t   { tree newmaskt = build_int_cst_type (TREE_TYPE (@2), newmask); }\n \t   (if (!tree_int_cst_equal (newmaskt, @2))"}, {"sha": "a705859a9db6cb4a2fa02e0d9935f2646f51984d", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -711,7 +711,7 @@ atoll (const char *p)\n       if (new_wide < tmp_wide)\n \t{\n \t  /* Return INT_MAX equiv on overflow.  */\n-\t  tmp_wide = (~(unsigned HOST_WIDE_INT) 0) >> 1;\n+\t  tmp_wide = HOST_WIDE_INT_M1U >> 1;\n \t  break;\n \t}\n       tmp_wide = new_wide;"}, {"sha": "62ba71bd18a398e7bc449c51d6243aa218007e9a", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -4217,7 +4217,7 @@ get_address_cost (bool symbol_present, bool var_present,\n     }\n \n   bits = GET_MODE_BITSIZE (address_mode);\n-  mask = ~(~(unsigned HOST_WIDE_INT) 0 << (bits - 1) << 1);\n+  mask = ~(HOST_WIDE_INT_M1U << (bits - 1) << 1);\n   offset &= mask;\n   if ((offset >> (bits - 1) & 1))\n     offset |= ~mask;"}, {"sha": "26cf0a0078acf9e30a68f54e56382666fedde9aa", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -233,7 +233,7 @@ struct mem_ref_group\n \n /* Assigned to PREFETCH_BEFORE when all iterations are to be prefetched.  */\n \n-#define PREFETCH_ALL\t\t(~(unsigned HOST_WIDE_INT) 0)\n+#define PREFETCH_ALL\t\tHOST_WIDE_INT_M1U\n \n /* Do not generate a prefetch if the unroll factor is significantly less\n    than what is required by the prefetch.  This is to avoid redundant"}, {"sha": "9f0ec656bad1afeed12bd14683814f54c251a1b5", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -575,7 +575,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t  if (ml >= HOST_WIDE_INT_1U << (prec - 1))\n \t    {\n \t      this_mode = 4 + (d < 0);\n-\t      ml |= (~(unsigned HOST_WIDE_INT) 0) << (prec - 1);\n+\t      ml |= HOST_WIDE_INT_M1U << (prec - 1);\n \t    }\n \t  else\n \t    this_mode = 2 + (d < 0);"}, {"sha": "2457844857df38786650d84e8e972808f77636b9", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -2861,7 +2861,7 @@ vect_recog_divmod_pattern (vec<gimple *> *stmts,\n       if (ml >= HOST_WIDE_INT_1U << (prec - 1))\n \t{\n \t  add = true;\n-\t  ml |= (~(unsigned HOST_WIDE_INT) 0) << (prec - 1);\n+\t  ml |= HOST_WIDE_INT_M1U << (prec - 1);\n \t}\n       if (post_shift >= prec)\n \treturn NULL;"}, {"sha": "661d385d43c6045e679102561f7361938f39c168", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dd4786fe817eb2f3336120d1b0c9ae51aeb9f94f", "patch": "@@ -11338,9 +11338,9 @@ int_cst_value (const_tree x)\n     {\n       bool negative = ((val >> (bits - 1)) & 1) != 0;\n       if (negative)\n-\tval |= (~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1;\n+\tval |= HOST_WIDE_INT_M1U << (bits - 1) << 1;\n       else\n-\tval &= ~((~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1);\n+\tval &= ~(HOST_WIDE_INT_M1U << (bits - 1) << 1);\n     }\n \n   return val;"}]}