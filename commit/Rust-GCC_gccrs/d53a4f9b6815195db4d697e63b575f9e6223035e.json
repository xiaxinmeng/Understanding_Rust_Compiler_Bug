{"sha": "d53a4f9b6815195db4d697e63b575f9e6223035e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUzYTRmOWI2ODE1MTk1ZGI0ZDY5N2U2M2I1NzVmOWU2MjIzMDM1ZQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-26T22:32:08Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T17:44:43Z"}, "message": "aarch64: Use RTL builtins for [su]mlal intrinsics\n\nRewrite [su]mlal Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-26  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlal<mode>):\n\tRename to...\n\t(aarch64_<su>mlal<mode>): This.\n\t* config/aarch64/arm_neon.h (vmlal_s8): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlal_s16): Likewise.\n\t(vmlal_s32): Likewise.\n\t(vmlal_u8): Likewise.\n\t(vmlal_u16): Likewise.\n\t(vmlal_u32): Likewise.", "tree": {"sha": "20a7e43f2d7ae4ce52da12a9afdab5fcca650068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a7e43f2d7ae4ce52da12a9afdab5fcca650068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d53a4f9b6815195db4d697e63b575f9e6223035e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53a4f9b6815195db4d697e63b575f9e6223035e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53a4f9b6815195db4d697e63b575f9e6223035e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53a4f9b6815195db4d697e63b575f9e6223035e/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31a633e13ff5222e9285a2c2b7897094ab061d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31a633e13ff5222e9285a2c2b7897094ab061d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31a633e13ff5222e9285a2c2b7897094ab061d9"}], "stats": {"total": 56, "additions": 15, "deletions": 41}, "files": [{"sha": "a71ae4d724136c8b626d397bf6187e8b595a2b8a", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d53a4f9b6815195db4d697e63b575f9e6223035e", "patch": "@@ -192,6 +192,10 @@\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlsl, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlal<mode>.  */\n+  BUILTIN_VD_BHSI (TERNOP, smlal, 0, NONE)\n+  BUILTIN_VD_BHSI (TERNOPU, umlal, 0, NONE)\n+\n   /* Implemented by aarch64_<su>mlsl_hi<mode>.  */\n   BUILTIN_VQW (TERNOP, smlsl_hi, 0, NONE)\n   BUILTIN_VQW (TERNOPU, umlsl_hi, 0, NONE)"}, {"sha": "db56b61baf2093c88d8757b25580b3032f00a355", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d53a4f9b6815195db4d697e63b575f9e6223035e", "patch": "@@ -1825,17 +1825,17 @@\n }\n )\n \n-(define_insn \"*aarch64_<su>mlal<mode>\"\n+(define_insn \"aarch64_<su>mlal<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (plus:<VWIDE>\n           (mult:<VWIDE>\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VD_BHSI 1 \"register_operand\" \"w\"))\n+              (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VD_BHSI 2 \"register_operand\" \"w\")))\n-          (match_operand:<VWIDE> 3 \"register_operand\" \"0\")))]\n+              (match_operand:VD_BHSI 3 \"register_operand\" \"w\")))\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n-  \"<su>mlal\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  \"<su>mlal\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n "}, {"sha": "b5c1f062bbcdf2185fef65863c84f4997bc97d03", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53a4f9b6815195db4d697e63b575f9e6223035e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d53a4f9b6815195db4d697e63b575f9e6223035e", "patch": "@@ -7662,72 +7662,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_s8 (int16x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smlal %0.8h,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlalv8qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlal %0.4s,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlalv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlal %0.2d,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlalv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_u8 (uint16x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umlal %0.8h,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlalv8qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_u16 (uint32x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlal %0.4s,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlalv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_u32 (uint64x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlal %0.2d,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlalv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t"}]}