{"sha": "65c78c7d76df9e949d577992e1725a702e3d4510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjNzhjN2Q3NmRmOWU5NDlkNTc3OTkyZTE3MjVhNzAyZTNkNDUxMA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-04-20T23:12:27Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-04-20T23:12:27Z"}, "message": "c4x.md (binary patterns): Reorder alternatives so that two operand instructions are chosen before three...\n\n\t* config/c4x/c4x.md (binary patterns): Reorder alternatives\n\tso that two operand instructions are chosen before three operand\n\tinstructions.\n\nFrom-SVN: r26570", "tree": {"sha": "8a8bf1cf57ff018999b95925904d2deb26b67a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8bf1cf57ff018999b95925904d2deb26b67a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c78c7d76df9e949d577992e1725a702e3d4510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c78c7d76df9e949d577992e1725a702e3d4510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c78c7d76df9e949d577992e1725a702e3d4510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c78c7d76df9e949d577992e1725a702e3d4510/comments", "author": null, "committer": null, "parents": [{"sha": "191b6fc9a33c94a99630d0d3d12e645ff0ea74fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191b6fc9a33c94a99630d0d3d12e645ff0ea74fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191b6fc9a33c94a99630d0d3d12e645ff0ea74fa"}], "stats": {"total": 614, "additions": 309, "deletions": 305}, "files": [{"sha": "353beffc3fda92e164b4cb025ce9641dd3554af1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c78c7d76df9e949d577992e1725a702e3d4510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c78c7d76df9e949d577992e1725a702e3d4510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65c78c7d76df9e949d577992e1725a702e3d4510", "patch": "@@ -1,4 +1,8 @@\n-Tue Apr 20 23:38:58 1999  Nathan Sidwell  <nathan@acm.org>\n+Wed Apr 21 17:41:29 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (binary patterns): Reorder alternatives\n+\tso that two operand instructions are chosen before three operand\n+\tinstructions.Tue Apr 20 23:38:58 1999  Nathan Sidwell  <nathan@acm.org>\n \n \t* objc/Make-lang.in (objc-parse.c): Put BISON parameters in correct\n \torder."}, {"sha": "fc567f20e85d1291cafee29eff821493111d1249", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 304, "deletions": 304, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c78c7d76df9e949d577992e1725a702e3d4510/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c78c7d76df9e949d577992e1725a702e3d4510/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=65c78c7d76df9e949d577992e1725a702e3d4510", "patch": "@@ -1,4 +1,4 @@\n-];; Machine description for the TMS320C[34]x for GNU C compiler\n+;; Machine description for the TMS320C[34]x for GNU C compiler\n ;; Copyright (C) 1994-98, 1999 Free Software Foundation, Inc.\n \n ;; Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n@@ -1599,89 +1599,89 @@\n    }\")\n \n (define_insn \"*addqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n-                 (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n    addi3\\\\t%2,%1,%0\n    addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n (define_insn \"*addqi3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\"))\n+        (compare:CC_NOOV (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                                  (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\"))\n                          (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n ; gcc does this in combine.c we just reverse it here\n (define_insn \"*cmp_neg\"\n   [(set (reg:CC_NOOV 21)\n-\t(compare:CC_NOOV (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-\t\t         (neg: QI (match_operand:QI 2 \"src_operand\" \"JR,rS<>,g\"))))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+\t(compare:CC_NOOV (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+\t\t         (neg: QI (match_operand:QI 2 \"src_operand\" \"g,JR,rS<>\"))))\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n   \n (define_peephole\n-  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n-                   (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                            (match_operand:QI 2 \"src_operand\" \"JR,rS<>,g\")))\n+  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n+                   (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                            (match_operand:QI 2 \"src_operand\" \"g,JR,rS<>\")))\n               (clobber (reg:CC_NOOV 21))])\n    (set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (match_dup 0) (const_int 0)))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n (define_insn \"*addqi3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\"))\n+        (compare:CC_NOOV (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                                  (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\"))\n                          (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n         (plus:QI (match_dup 1) (match_dup 2)))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n ; This pattern is required primarily for manipulating the stack pointer\n ; where GCC doesn't expect CC to be clobbered or for calculating\n ; addresses during reload.\n (define_insn \"addqi3_noclobber\"\n-  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,?c,c\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                 (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\")))]\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -1703,32 +1703,32 @@\n ; may be allocated to reload the PLUS and thus gen_reload will\n ; emit an add insn that may clobber CC.\n (define_insn \"*addqi3_noclobber_reload\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=c,?c,c\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                 (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\")))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=c,c,c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n   \"reload_in_progress\"\n   \"@\n+   addi\\\\t%2,%0\n    addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\n-   addi\\\\t%2,%0\"\n+   addi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binary,binary,binary\")])\n ; Default to int16 data attr.\n \n \n (define_insn \"*addqi3_carry_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n-                 (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))\n    (use (reg:CC_NOOV 21))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (PLUS, operands, QImode)\"\n   \"@\n+   addc\\\\t%2,%0\n    addc3\\\\t%2,%1,%0\n    addc3\\\\t%2,%1,%0\n    addc\\\\t%2,%0\n    addc3\\\\t%2,%1,%0\n-   addc3\\\\t%2,%1,%0\n-   addc\\\\t%2,%0\"\n+   addc3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -1745,104 +1745,104 @@\n   \"legitimize_operands (MINUS, operands, QImode);\")\n \n (define_insn \"*subqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,d,c,?c,c,c\")\n-        (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm,rR,rS<>,0,rIm\")\n-                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0,JR,rS<>,rIm,0\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,d,?d,c,c,c,?c\")\n+        (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>,0,rIm,rR,rS<>\")\n+                  (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>,rIm,0,JR,rS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subi3\\\\t%2,%1,%0\n-   subi3\\\\t%2,%1,%0\n    subi\\\\t%2,%0\n    subri\\\\t%1,%0\n    subi3\\\\t%2,%1,%0\n    subi3\\\\t%2,%1,%0\n    subi\\\\t%2,%0\n-   subri\\\\t%1,%0\"\n+   subri\\\\t%1,%0\n+   subi3\\\\t%2,%1,%0\n+   subi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc,binary,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n (define_insn \"*subqi3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm\")\n-                                   (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0\"))\n+        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n+                                   (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>\"))\n                          (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d,?d\"))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subi3\\\\t%2,%1,%0\n-   subi3\\\\t%2,%1,%0\n    subi\\\\t%2,%0\n-   subri\\\\t%1,%0\"\n+   subri\\\\t%1,%0\n+   subi3\\\\t%2,%1,%0\n+   subi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n (define_peephole\n-  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d,d\")\n-                   (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm\")\n-                             (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0\")))\n+  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d,?d\")\n+                   (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n+                             (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>\")))\n               (clobber (reg:CC_NOOV 21))])\n    (set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (match_dup 0) (const_int 0)))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subi3\\\\t%2,%1,%0\n-   subi3\\\\t%2,%1,%0\n    subi\\\\t%2,%0\n-   subri\\\\t%1,%0\"\n+   subri\\\\t%1,%0\n+   subi3\\\\t%2,%1,%0\n+   subi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n   \n (define_insn \"*subqi3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm\")\n-                                   (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0\"))\n+        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n+                                   (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>\"))\n                          (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d,?d\")\n         (minus:QI (match_dup 1)\n                   (match_dup 2)))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subi3\\\\t%2,%1,%0\n-   subi3\\\\t%2,%1,%0\n    subi\\\\t%2,%0\n-   subri\\\\t%1,%0\"\n+   subri\\\\t%1,%0\n+   subi3\\\\t%2,%1,%0\n+   subi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n (define_insn \"*subqi3_carry_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,d,c,?c,c,c\")\n-        (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm,rR,rS<>,0,rIm\")\n-                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0,JR,rS<>,rIm,0\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,d,?d,c,c,c,?c\")\n+        (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>,0,rIm,rR,rS<>\")\n+                  (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>,rIm,0,JR,rS<>\")))\n    (use (reg:CC_NOOV 21))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subb3\\\\t%2,%1,%0\n-   subb3\\\\t%2,%1,%0\n    subb\\\\t%2,%0\n    subrb\\\\t%1,%0\n    subb3\\\\t%2,%1,%0\n    subb3\\\\t%2,%1,%0\n    subb\\\\t%2,%0\n-   subrb\\\\t%1,%0\"\n+   subrb\\\\t%1,%0\n+   subb3\\\\t%2,%1,%0\n+   subb3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc,binary,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n (define_insn \"*subqi3_carry_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rIm\")\n-                                   (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,0\"))\n+        (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"0,rIm,rR,rS<>\")\n+                                   (match_operand:QI 2 \"src_operand\" \"rIm,0,JR,rS<>\"))\n                          (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d,?d\")\n         (minus:QI (match_dup 1)\n                   (match_dup 2)))\n    (use (reg:CC_NOOV 21))]\n   \"valid_operands (MINUS, operands, QImode)\"\n   \"@\n-   subb3\\\\t%2,%1,%0\n-   subb3\\\\t%2,%1,%0\n    subb\\\\t%2,%0\n-   subrb\\\\t%1,%0\"\n+   subrb\\\\t%1,%0\n+   subb3\\\\t%2,%1,%0\n+   subb3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n@@ -1885,13 +1885,13 @@\n   \")\n \n (define_insn \"*mulqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (mult:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n-                 (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (mult:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MULT, operands, QImode)\"\n   \"*\n-  if (which_alternative == 2 || which_alternative == 5)\n+  if (which_alternative == 0 || which_alternative == 3)\n     {\n       if (TARGET_C3X\n           && GET_CODE (operands[2]) == CONST_INT\n@@ -1907,13 +1907,13 @@\n \n (define_insn \"*mulqi3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (mult:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\"))\n+        (compare:CC_NOOV (mult:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                                  (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\"))\n                          (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (MULT, operands, QImode)\"\n   \"*\n-  if (which_alternative == 2)\n+  if (which_alternative == 0)\n     {\n       if (TARGET_C3X \n           && GET_CODE (operands[2]) == CONST_INT\n@@ -1929,15 +1929,15 @@\n \n (define_insn \"*mulqi3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (mult:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                                  (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\"))\n+        (compare:CC_NOOV (mult:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                                  (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\"))\n                          (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n         (mult:QI (match_dup 1)\n                  (match_dup 2)))]\n   \"valid_operands (MULT, operands, QImode)\"\n   \"*\n-  if (which_alternative == 2)\n+  if (which_alternative == 0)\n     {\n       if (TARGET_C3X \n           && GET_CODE (operands[2]) == CONST_INT\n@@ -1954,23 +1954,23 @@\n ; The C3x multiply instruction assumes 24-bit signed integer operands\n ; and the 48-bit result is truncated to 32-bits.\n (define_insn \"*mulqi3_24_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n         (mult:QI\n          (sign_extend:QI\n-          (and:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n+          (and:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n                   (const_int 16777215)))\n          (sign_extend:QI\n-          (and:QI (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")\n+          (and:QI (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")\n                   (const_int 16777215)))))\n    (clobber (reg:CC_NOOV 21))]\n   \"TARGET_C3X && valid_operands (MULT, operands, QImode)\"\n   \"@\n+   mpyi\\\\t%2,%0\n    mpyi3\\\\t%2,%1,%0\n    mpyi3\\\\t%2,%1,%0\n    mpyi\\\\t%2,%0\n    mpyi3\\\\t%2,%1,%0\n-   mpyi3\\\\t%2,%1,%0\n-   mpyi\\\\t%2,%0\"\n+   mpyi3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -2096,12 +2096,12 @@\n  \")\n \n (define_insn \"*smulqi3_highpart_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n         (truncate:QI \n          (lshiftrt:HI\n           (mult:HI\n-           (sign_extend:HI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\"))\n-           (sign_extend:HI (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")))\n+           (sign_extend:HI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\"))\n+           (sign_extend:HI (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))\n       (const_int 32))))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X && valid_operands (MULT, operands, QImode)\"\n@@ -2137,11 +2137,11 @@\n  \")\n \n (define_insn \"*umulqi3_highpart_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n         (truncate:QI\n          (lshiftrt:HI\n           (mult:HI \n-           (zero_extend:HI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\"))\n+           (zero_extend:HI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\"))\n            (zero_extend:HI (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm,JR,rS<>,rLm\")))\n           (const_int 32))))\n    (clobber (reg:CC_NOOV 21))]\n@@ -2169,7 +2169,7 @@\n \n \n (define_insn \"*andqi3_255_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?c\")\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n         (and:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n                 (const_int 255)))\n    (clobber (reg:CC 21))]\n@@ -2179,7 +2179,7 @@\n \n \n (define_insn \"*andqi3_65535_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?c\")\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n         (and:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n                 (const_int 65535)))\n    (clobber (reg:CC 21))]\n@@ -2189,70 +2189,70 @@\n \n \n (define_insn \"*andqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,d,c,?c,c,c\")\n-        (and:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,0,rR,rS<>,0,0\")\n-                (match_operand:QI 2 \"tsrc_operand\" \"JR,rS<>,N,rLm,JR,rS<>,N,rLm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,d,?d,c,c,c,?c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"%0,0,rR,rS<>,0,0,rR,rS<>\")\n+                (match_operand:QI 2 \"tsrc_operand\" \"N,rLm,JR,rS<>,N,rLm,JR,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n-   and3\\\\t%2,%1,%0\n-   and3\\\\t%2,%1,%0\n    andn\\\\t%N2,%0\n    and\\\\t%2,%0\n    and3\\\\t%2,%1,%0\n    and3\\\\t%2,%1,%0\n    andn\\\\t%N2,%0\n-   and\\\\t%2,%0\"\n+   and\\\\t%2,%0\n+   and3\\\\t%2,%1,%0\n+   and3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc,binary,binary,binary,binary\")\n-   (set_attr \"data\" \"int16,uint16,not_uint16,uint16,int16,uint16,not_uint16,uint16\")])\n+   (set_attr \"data\" \"not_uint16,uint16,int16,uint16,not_uint16,uint16,int16,uint16\")])\n \n (define_insn \"*andqi3_test\"\n   [(set (reg:CC 21)\n-        (compare:CC (and:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,r\")\n-                            (match_operand:QI 2 \"tsrc_operand\" \"JR,rS<>,N,rLm\"))\n+        (compare:CC (and:QI (match_operand:QI 1 \"src_operand\" \"%0,r,rR,rS<>\")\n+                            (match_operand:QI 2 \"tsrc_operand\" \"N,rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=X,X,d,X\"))]\n+   (clobber (match_scratch:QI 0 \"=d,X,X,?X\"))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n-   tstb3\\\\t%2,%1\n-   tstb3\\\\t%2,%1\n    andn\\\\t%N2,%0\n-   tstb\\\\t%2,%1\"\n+   tstb\\\\t%2,%1\n+   tstb3\\\\t%2,%1\n+   tstb3\\\\t%2,%1\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,not_uint16,uint16\")])\n+   (set_attr \"data\" \"not_uint16,uint16,int16,uint16\")])\n \n (define_peephole\n-  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d,d\")\n-                   (and:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,0\")\n-                           (match_operand:QI 2 \"tsrc_operand\" \"JR,rS<>,N,rLm\")))\n+  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d,?d\")\n+                   (and:QI (match_operand:QI 1 \"src_operand\" \"%0,0,rR,rS<>\")\n+                           (match_operand:QI 2 \"tsrc_operand\" \"N,rLm,JR,rS<>\")))\n               (clobber (reg:CC 21))])\n    (set (reg:CC 21)\n         (compare:CC (match_dup 0) (const_int 0)))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n-   and3\\\\t%2,%1,%0\n-   and3\\\\t%2,%1,%0\n    andn\\\\t%N2,%0\n-   and\\\\t%2,%0\"\n+   and\\\\t%2,%0\n+   and3\\\\t%2,%1,%0\n+   and3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,not_uint16,uint16\")])\n+   (set_attr \"data\" \"not_uint16,uint16,int16,uint16\")])\n   \n (define_insn \"*andqi3_set\"\n   [(set (reg:CC 21)\n-        (compare:CC (and:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,0\")\n-                            (match_operand:QI 2 \"tsrc_operand\" \"JR,rS<>,N,rLm\"))\n+        (compare:CC (and:QI (match_operand:QI 1 \"src_operand\" \"%0,0,rR,rS<>\")\n+                            (match_operand:QI 2 \"tsrc_operand\" \"N,rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d,?d\")\n         (and:QI (match_dup 1)\n                 (match_dup 2)))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n-   and3\\\\t%2,%1,%0\n-   and3\\\\t%2,%1,%0\n    andn\\\\t%N2,%0\n-   and\\\\t%2,%0\"\n+   and\\\\t%2,%0\n+   and3\\\\t%2,%1,%0\n+   and3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,not_uint16,uint16\")])\n+   (set_attr \"data\" \"not_uint16,uint16,int16,uint16\")])\n \n ;\n ; ANDN\n@@ -2261,50 +2261,50 @@\n ; assumes that the code AND does.  We might have to kludge this if\n ; we make valid_operands stricter.\n (define_insn \"*andnqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm,JR,rS<>,rLm\"))\n-                (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rR,rS<>,0\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>,rLm,JR,rS<>\"))\n+                (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n+   andn\\\\t%2,%0\n    andn3\\\\t%2,%1,%0\n    andn3\\\\t%2,%1,%0\n    andn\\\\t%2,%0\n    andn3\\\\t%2,%1,%0\n-   andn3\\\\t%2,%1,%0\n-   andn\\\\t%2,%0\"\n+   andn3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n-   (set_attr \"data\" \"int16,uint16,uint16,int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n (define_insn \"*andnqi3_test\"\n   [(set (reg:CC 21)\n-        (compare:CC (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n-                            (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0\"))\n+        (compare:CC (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n+                            (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\"))\n                     (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n+   andn\\\\t%2,%0\n    andn3\\\\t%2,%1,%0\n-   andn3\\\\t%2,%1,%0\n-   andn\\\\t%2,%0\"\n+   andn3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n (define_insn \"*andnqi3_set\"\n   [(set (reg:CC 21)\n-        (compare:CC (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n-                            (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0\"))\n+        (compare:CC (and:QI (not:QI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n+                            (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\"))\n                     (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n         (and:QI (not:QI (match_dup 2))\n                 (match_dup 1)))]\n   \"valid_operands (AND, operands, QImode)\"\n   \"@\n+   andn\\\\t%2,%0\n    andn3\\\\t%2,%1,%0\n-   andn3\\\\t%2,%1,%0\n-   andn\\\\t%2,%0\"\n+   andn3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n ;\n ; OR\n@@ -2318,78 +2318,78 @@\n  \"legitimize_operands (IOR, operands, QImode);\")\n \n (define_insn \"*iorqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (ior:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n-                (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm,JR,rS<>,rLm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>,rLm,JR,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (IOR, operands, QImode)\"\n   \"@\n+   or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n    or3\\\\t%2,%1,%0\n    or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n-   or3\\\\t%2,%1,%0\n-   or\\\\t%2,%0\"\n+   or3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n-   (set_attr \"data\" \"int16,uint16,uint16,int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n (define_insn \"*iorqi3_test\"\n   [(set (reg:CC 21)\n-        (compare:CC (ior:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                            (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n+        (compare:CC (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                            (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (IOR, operands, QImode)\"\n   \"@\n+   or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n-   or3\\\\t%2,%1,%0\n-   or\\\\t%2,%0\"\n+   or3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n (define_peephole\n-  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n-                   (ior:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                           (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\")))\n+  [(parallel [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n+                   (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                           (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\")))\n               (clobber (reg:CC 21))])\n    (set (reg:CC 21)\n         (compare:CC (match_dup 0) (const_int 0)))]\n   \"valid_operands (IOR, operands, QImode)\"\n   \"@\n+   or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n-   or3\\\\t%2,%1,%0\n-   or\\\\t%2,%0\"\n+   or3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n   \n (define_insn \"*iorqi3_set\"\n   [(set (reg:CC 21)\n-        (compare:CC (ior:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                            (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n+        (compare:CC (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                            (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n         (ior:QI (match_dup 1)\n                 (match_dup 2)))]\n   \"valid_operands (IOR, operands, QImode)\"\n   \"@\n+   or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n-   or3\\\\t%2,%1,%0\n-   or\\\\t%2,%0\"\n+   or3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n ; This pattern is used for loading symbol references in several parts. \n (define_insn \"iorqi3_noclobber\"\n-  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,?c,c\")\n-        (ior:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\")))]\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c\")\n+        (ior:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\")))]\n   \"valid_operands (IOR, operands, QImode)\"\n   \"@\n+   or\\\\t%2,%0\n    or3\\\\t%2,%1,%0\n-   or3\\\\t%2,%1,%0\n-   or\\\\t%2,%0\"\n+   or3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binary,binary,binary\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n ;\n ; XOR\n@@ -2403,50 +2403,50 @@\n  \"legitimize_operands (XOR, operands, QImode);\")\n \n (define_insn \"*xorqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (xor:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,rR,rS<>,0\")\n-                (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm,JR,rS<>,rLm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (xor:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n+                (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>,rLm,JR,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (XOR, operands, QImode)\"\n   \"@\n+   xor\\\\t%2,%0\n    xor3\\\\t%2,%1,%0\n    xor3\\\\t%2,%1,%0\n    xor\\\\t%2,%0\n    xor3\\\\t%2,%1,%0\n-   xor3\\\\t%2,%1,%0\n-   xor\\\\t%2,%0\"\n+   xor3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n-   (set_attr \"data\" \"int16,uint16,uint16,int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16,uint16,int16,uint16\")])\n \n (define_insn \"*xorqi3_test\"\n   [(set (reg:CC 21)\n-        (compare:CC (xor:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                            (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n+        (compare:CC (xor:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                            (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=d,?d,d\"))]\n+   (clobber (match_scratch:QI 0 \"=d,d,d\"))]\n   \"valid_operands (XOR, operands, QImode)\"\n   \"@\n+   xor\\\\t%2,%0\n    xor3\\\\t%2,%1,%0\n-   xor3\\\\t%2,%1,%0\n-   xor\\\\t%2,%0\"\n+   xor3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n (define_insn \"*xorqi3_set\"\n   [(set (reg:CC 21)\n-        (compare:CC (xor:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                            (match_operand:QI 2 \"lsrc_operand\" \"JR,rS<>,rLm\"))\n+        (compare:CC (xor:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                            (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\"))\n                     (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d,d,d\")\n         (xor:QI (match_dup 1)\n                 (match_dup 2)))]\n   \"valid_operands (XOR, operands, QImode)\"\n   \"@\n+   xor\\\\t%2,%0\n    xor3\\\\t%2,%1,%0\n-   xor3\\\\t%2,%1,%0\n-   xor\\\\t%2,%0\"\n+   xor3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")\n-   (set_attr \"data\" \"int16,uint16,uint16\")])\n+   (set_attr \"data\" \"uint16,int16,uint16\")])\n \n ;\n ; LSH/ASH (left)\n@@ -2469,53 +2469,53 @@\n  \"legitimize_operands (ASHIFT, operands, QImode);\")\n \n (define_insn \"*ashlqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (ashift:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rR,rS<>,0\")\n-                   (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (ashift:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")\n+                   (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (ASHIFT, operands, QImode)\"\n   \"@\n+   ash\\\\t%2,%0\n    ash3\\\\t%2,%1,%0\n    ash3\\\\t%2,%1,%0\n    ash\\\\t%2,%0\n    ash3\\\\t%2,%1,%0\n-   ash3\\\\t%2,%1,%0\n-   ash\\\\t%2,%0\"\n+   ash3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n (define_insn \"*ashlqi3_set\"\n   [(set (reg:CC 21)\n         (compare:CC\n-          (ashift:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0\")\n-                     (match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm\"))\n+          (ashift:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\")\n+                     (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\"))\n           (const_int 0)))\n-   (set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d\")\n+   (set (match_operand:QI 0 \"reg_operand\" \"=d,d,d\")\n         (ashift:QI (match_dup 1)\n                    (match_dup 2)))]\n   \"valid_operands (ASHIFT, operands, QImode)\"\n   \"@\n+   ash\\\\t%2,%0\n    ash3\\\\t%2,%1,%0\n-   ash3\\\\t%2,%1,%0\n-   ash\\\\t%2,%0\"\n+   ash3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n ; This is only used by lshrhi3_reg where we need a LSH insn that will\n ; shift both ways.\n (define_insn \"*lshlqi3_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (ashift:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rR,rS<>,0\")\n-                   (unspec [(match_operand:QI 2 \"src_operand\" \"JR,rS<>,rIm,JR,rS<>,rIm\")] 3)))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (ashift:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")\n+                   (unspec [(match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")] 3)))\n    (clobber (reg:CC 21))]\n   \"valid_operands (ASHIFT, operands, QImode)\"\n   \"@\n+   lsh\\\\t%2,%0\n    lsh3\\\\t%2,%1,%0\n    lsh3\\\\t%2,%1,%0\n    lsh\\\\t%2,%0\n    lsh3\\\\t%2,%1,%0\n-   lsh3\\\\t%2,%1,%0\n-   lsh\\\\t%2,%0\"\n+   lsh3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -2608,18 +2608,18 @@\n   [(set_attr \"type\" \"binarycc,binarycc\")])\n \n (define_insn \"*lshrqi3_nonconst_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rR,rS<>,0\")\n-                     (neg:QI (match_operand:QI 2 \"src_operand\" \"R,rS<>,rm,R,rS<>,rm\"))))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")\n+                     (neg:QI (match_operand:QI 2 \"src_operand\" \"rm,R,rS<>,rm,R,rS<>\"))))\n    (clobber (reg:CC 21))]\n   \"valid_operands (LSHIFTRT, operands, QImode)\"\n   \"@\n+   lsh\\\\t%2,%0\n    lsh3\\\\t%2,%1,%0\n    lsh3\\\\t%2,%1,%0\n    lsh\\\\t%2,%0\n    lsh3\\\\t%2,%1,%0\n-   lsh3\\\\t%2,%1,%0\n-   lsh\\\\t%2,%0\"\n+   lsh3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -2671,18 +2671,18 @@\n   [(set_attr \"type\" \"binarycc,binarycc\")])\n \n (define_insn \"*ashrqi3_nonconst_clobber\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,c,?c,c\")\n-        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"rR,rS<>,0,rR,rS<>,0\")\n-                     (neg:QI (match_operand:QI 2 \"src_operand\" \"R,rS<>,rm,R,rS<>,rm\"))))\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n+        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>,0,rR,rS<>\")\n+                     (neg:QI (match_operand:QI 2 \"src_operand\" \"rm,R,rS<>,rm,R,rS<>\"))))\n    (clobber (reg:CC 21))]\n   \"valid_operands (ASHIFTRT, operands, QImode)\"\n   \"@\n+   ash\\\\t%2,%0\n    ash3\\\\t%2,%1,%0\n    ash3\\\\t%2,%1,%0\n    ash\\\\t%2,%0\n    ash3\\\\t%2,%1,%0\n-   ash3\\\\t%2,%1,%0\n-   ash\\\\t%2,%0\"\n+   ash3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n@@ -3530,43 +3530,43 @@\n   \"legitimize_operands (PLUS, operands, QFmode);\")\n \n (define_insn \"*addqf3_clobber\"\n-  [(set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f\")\n-        (plus:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                 (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\")))\n+  [(set (match_operand:QF 0 \"reg_operand\" \"=f,f,?f\")\n+        (plus:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                 (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (PLUS, operands, QFmode)\"\n   \"@\n+   addf\\\\t%2,%0\n    addf3\\\\t%2,%1,%0\n-   addf3\\\\t%2,%1,%0\n-   addf\\\\t%2,%0\"\n+   addf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n (define_insn \"*addqf3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (plus:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                                  (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\"))\n+        (compare:CC_NOOV (plus:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                                  (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G\")))\n-   (clobber (match_scratch:QF 0 \"=f,?f,f\"))]\n+   (clobber (match_scratch:QF 0 \"=f,f,?f\"))]\n   \"valid_operands (PLUS, operands, QFmode)\"\n   \"@\n+   addf\\\\t%2,%0\n    addf3\\\\t%2,%1,%0\n-   addf3\\\\t%2,%1,%0\n-   addf\\\\t%2,%0\"\n+   addf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n (define_insn \"*addqf3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (plus:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                                  (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\"))\n+        (compare:CC_NOOV (plus:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                                  (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G\")))\n-   (set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f\")\n+   (set (match_operand:QF 0 \"reg_operand\" \"=f,f,?f\")\n         (plus:QF (match_dup 1)\n                  (match_dup 2)))]\n   \"valid_operands (PLUS, operands, QFmode)\"\n   \"@\n+   addf\\\\t%2,%0\n    addf3\\\\t%2,%1,%0\n-   addf3\\\\t%2,%1,%0\n-   addf\\\\t%2,%0\"\n+   addf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n ;\n@@ -3581,46 +3581,46 @@\n   \"legitimize_operands (MINUS, operands, QFmode);\")\n \n (define_insn \"*subqf3_clobber\"\n-   [(set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f,f\")\n-         (minus:QF (match_operand:QF 1 \"src_operand\" \"fR,fS<>,0,fHm\")\n-                   (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm,0\")))\n+   [(set (match_operand:QF 0 \"reg_operand\" \"=f,f,f,?f\")\n+         (minus:QF (match_operand:QF 1 \"src_operand\" \"0,fHm,fR,fS<>\")\n+                   (match_operand:QF 2 \"src_operand\" \"fHm,0,R,fS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MINUS, operands, QFmode)\"\n   \"@\n-   subf3\\\\t%2,%1,%0\n-   subf3\\\\t%2,%1,%0\n    subf\\\\t%2,%0\n-   subrf\\\\t%1,%0\"\n+   subrf\\\\t%1,%0\n+   subf3\\\\t%2,%1,%0\n+   subf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n \n (define_insn \"*subqf3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (minus:QF (match_operand:QF 1 \"src_operand\" \"fR,fS<>,0,fHm\")\n-                                   (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm,0\"))\n+        (compare:CC_NOOV (minus:QF (match_operand:QF 1 \"src_operand\" \"0,fHm,fR,fS<>\")\n+                                   (match_operand:QF 2 \"src_operand\" \"fHm,0,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G,G\")))\n-   (clobber (match_scratch:QF 0 \"=f,?f,f,f\"))]\n+   (clobber (match_scratch:QF 0 \"=f,f,f,?f\"))]\n   \"valid_operands (MINUS, operands, QFmode)\"\n   \"@\n-   subf3\\\\t%2,%1,%0\n-   subf3\\\\t%2,%1,%0\n    subf\\\\t%2,%0\n-   subrf\\\\t%1,%0\"\n+   subrf\\\\t%1,%0\n+   subf3\\\\t%2,%1,%0\n+   subf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n \n (define_insn \"*subqf3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (minus:QF (match_operand:QF 1 \"src_operand\" \"fR,fS<>,0,fHm\")\n-                                   (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm,0\"))\n+        (compare:CC_NOOV (minus:QF (match_operand:QF 1 \"src_operand\" \"0,fHm,fR,fS<>\")\n+                                   (match_operand:QF 2 \"src_operand\" \"0,fHm,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G,G\")))\n-   (set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f,f\")\n+   (set (match_operand:QF 0 \"reg_operand\" \"=f,f,f,?f\")\n         (minus:QF (match_dup 1)\n                  (match_dup 2)))]\n   \"valid_operands (MINUS, operands, QFmode)\"\n   \"@\n-   subf3\\\\t%2,%1,%0\n-   subf3\\\\t%2,%1,%0\n    subf\\\\t%2,%0\n-   subrf\\\\t%1,%0\"\n+   subrf\\\\t%1,%0\n+   subf3\\\\t%2,%1,%0\n+   subf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n \n ;\n@@ -3635,43 +3635,43 @@\n   \"legitimize_operands (MULT, operands, QFmode);\")\n \n (define_insn \"*mulqf3_clobber\"\n-  [(set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f\")\n-        (mult:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                 (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\")))\n+  [(set (match_operand:QF 0 \"reg_operand\" \"=f,f,?f\")\n+        (mult:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                 (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MULT, operands, QFmode)\"\n   \"@\n+   mpyf\\\\t%2,%0\n    mpyf3\\\\t%2,%1,%0\n-   mpyf3\\\\t%2,%1,%0\n-   mpyf\\\\t%2,%0\"\n+   mpyf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n (define_insn \"*mulqf3_test\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (mult:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                                  (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\"))\n+        (compare:CC_NOOV (mult:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                                  (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G\")))\n-   (clobber (match_scratch:QF 0 \"=f,?f,f\"))]\n+   (clobber (match_scratch:QF 0 \"=f,f,?f\"))]\n   \"valid_operands (MULT, operands, QFmode)\"\n   \"@\n+   mpyf\\\\t%2,%0\n    mpyf3\\\\t%2,%1,%0\n-   mpyf3\\\\t%2,%1,%0\n-   mpyf\\\\t%2,%0\"\n+   mpyf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n (define_insn \"*mulqf3_set\"\n   [(set (reg:CC_NOOV 21)\n-        (compare:CC_NOOV (mult:QF (match_operand:QF 1 \"src_operand\" \"%fR,fS<>,0\")\n-                                  (match_operand:QF 2 \"src_operand\" \"R,fS<>,fHm\"))\n+        (compare:CC_NOOV (mult:QF (match_operand:QF 1 \"src_operand\" \"%0,fR,fS<>\")\n+                                  (match_operand:QF 2 \"src_operand\" \"fHm,R,fS<>\"))\n                          (match_operand:QF 3 \"fp_zero_operand\" \"G,G,G\")))\n-   (set (match_operand:QF 0 \"reg_operand\" \"=f,?f,f\")\n+   (set (match_operand:QF 0 \"reg_operand\" \"=f,f,?f\")\n         (mult:QF (match_dup 1)\n                  (match_dup 2)))]\n   \"valid_operands (MULT, operands, QFmode)\"\n   \"@\n+   mpyf\\\\t%2,%0\n    mpyf3\\\\t%2,%1,%0\n-   mpyf3\\\\t%2,%1,%0\n-   mpyf\\\\t%2,%0\"\n+   mpyf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n ;\n@@ -3690,23 +3690,23 @@\n (define_insn \"*cmpqf\"\n   [(set (reg:CC 21)\n         (compare:CC (match_operand:QF 0 \"src_operand\" \"fR,?fS<>,f\")\n-                    (match_operand:QF 1 \"src_operand\" \"R,fS<>,fHm\")))]\n+                    (match_operand:QF 1 \"src_operand\" \"fHm,R,fS<>\")))]\n   \"valid_operands (COMPARE, operands, QFmode)\"\n   \"@\n+   cmpf\\\\t%1,%0\n    cmpf3\\\\t%1,%0\n-   cmpf3\\\\t%1,%0\n-   cmpf\\\\t%1,%0\"\n+   cmpf3\\\\t%1,%0\"\n   [(set_attr \"type\" \"compare,compare,compare\")])\n \n (define_insn \"*cmpqf_noov\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (match_operand:QF 0 \"src_operand\" \"fR,?fS<>,f\")\n-                         (match_operand:QF 1 \"src_operand\" \"R,fS<>,fHm\")))]\n+                         (match_operand:QF 1 \"src_operand\" \"fHm,R,fS<>\")))]\n   \"valid_operands (COMPARE, operands, QFmode)\"\n   \"@\n+   cmpf\\\\t%1,%0\n    cmpf3\\\\t%1,%0\n-   cmpf3\\\\t%1,%0\n-   cmpf\\\\t%1,%0\"\n+   cmpf3\\\\t%1,%0\"\n   [(set_attr \"type\" \"compare,compare,compare\")])\n \n ; Inlined float divide for C4x\n@@ -5427,29 +5427,29 @@\n ; ADDF\n ;\n (define_insn \"addhf3\"\n-  [(set (match_operand:HF 0 \"reg_operand\" \"=?h,h\")\n-        (plus:HF (match_operand:HF 1 \"reg_operand\" \"%h,0\")\n-                 (match_operand:HF 2 \"reg_or_const_operand\" \"h,H\")))\n+  [(set (match_operand:HF 0 \"reg_operand\" \"=h,?h\")\n+        (plus:HF (match_operand:HF 1 \"reg_operand\" \"%0,h\")\n+                 (match_operand:HF 2 \"reg_or_const_operand\" \"H,h\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"\"\n   \"@\n-   addf3\\\\t%2,%1,%0\n-   addf\\\\t%2,%0\"\n+   addf\\\\t%2,%0\n+   addf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc\")])\n \n ;\n ; SUBF\n ;\n (define_insn \"subhf3\"\n-  [(set (match_operand:HF 0 \"reg_operand\" \"=?h,h,h\")\n-        (minus:HF (match_operand:HF 1 \"reg_or_const_operand\" \"h,0,H\")\n-                  (match_operand:HF 2 \"reg_or_const_operand\" \"h,H,0\")))\n+  [(set (match_operand:HF 0 \"reg_operand\" \"=h,h,?h\")\n+        (minus:HF (match_operand:HF 1 \"reg_or_const_operand\" \"0,H,h\")\n+                  (match_operand:HF 2 \"reg_or_const_operand\" \"H,0,h\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"\"\n   \"@\n-   subf3\\\\t%2,%1,%0\n    subf\\\\t%2,%0\n-   subrf\\\\t%1,%0\"\n+   subrf\\\\t%1,%0\n+   subf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n \n ;\n@@ -5471,14 +5471,14 @@\n   \")\n \n (define_insn \"*mulhf3_c40\"\n-  [(set (match_operand:HF 0 \"reg_operand\" \"=?h,h\")\n-        (mult:HF (match_operand:HF 1 \"reg_operand\" \"%h,0\")\n-                 (match_operand:HF 2 \"reg_or_const_operand\" \"h,hH\")))\n+  [(set (match_operand:HF 0 \"reg_operand\" \"=h,?h\")\n+        (mult:HF (match_operand:HF 1 \"reg_operand\" \"%0,h\")\n+                 (match_operand:HF 2 \"reg_or_const_operand\" \"hH,h\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"\"\n   \"@\n-   mpyf3\\\\t%2,%1,%0\n-   mpyf\\\\t%2,%0\"\n+   mpyf\\\\t%2,%0\n+   mpyf3\\\\t%2,%1,%0\"\n   [(set_attr \"type\" \"binarycc,binarycc\")])\n \n ;\n@@ -5813,9 +5813,9 @@\n   \"legitimize_operands (PLUS, operands, HImode);\")\n \n (define_insn \"*addhi3_clobber\"\n-  [(set (match_operand:HI 0 \"ext_reg_operand\" \"=d,?d,d\")\n-        (plus:HI (match_operand:HI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                 (match_operand:HI 2 \"src_operand\" \"R,rS<>,rm\")))\n+  [(set (match_operand:HI 0 \"ext_reg_operand\" \"=d,d,?d\")\n+        (plus:HI (match_operand:HI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                 (match_operand:HI 2 \"src_operand\" \"rm,R,rS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (PLUS, operands, HImode)\"\n   \"#\"\n@@ -5851,9 +5851,9 @@\n \n \n (define_insn \"*subhi3_clobber\"\n-  [(set (match_operand:HI 0 \"ext_reg_operand\" \"=d,?d,d\")\n-        (minus:HI (match_operand:HI 1 \"src_operand\" \"rR,rS<>,0\")\n-                  (match_operand:HI 2 \"src_operand\" \"R,rS<>,rm\")))\n+  [(set (match_operand:HI 0 \"ext_reg_operand\" \"=d,d,?d\")\n+        (minus:HI (match_operand:HI 1 \"src_operand\" \"0,rR,rS<>\")\n+                  (match_operand:HI 2 \"src_operand\" \"rm,R,rS<>\")))\n    (clobber (reg:CC_NOOV 21))]\n   \"valid_operands (MINUS, operands, HImode)\"\n   \"#\"\n@@ -5888,9 +5888,9 @@\n   \"legitimize_operands (IOR, operands, HImode);\")\n \n (define_insn \"*iorhi3_clobber\"\n-  [(set (match_operand:HI 0 \"reg_operand\" \"=d,?d,d\")\n-        (ior:HI (match_operand:HI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                (match_operand:HI 2 \"src_operand\" \"R,rS<>,rm\")))\n+  [(set (match_operand:HI 0 \"reg_operand\" \"=d,d,?d\")\n+        (ior:HI (match_operand:HI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                (match_operand:HI 2 \"src_operand\" \"rm,R,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (IOR, operands, HImode)\"\n   \"#\"\n@@ -5922,9 +5922,9 @@\n   \"legitimize_operands (AND, operands, HImode);\")\n \n (define_insn \"*andhi3_clobber\"\n-  [(set (match_operand:HI 0 \"reg_operand\" \"=d,?d,d\")\n-        (and:HI (match_operand:HI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                (match_operand:HI 2 \"src_operand\" \"R,rS<>,rm\")))\n+  [(set (match_operand:HI 0 \"reg_operand\" \"=d,d,?d\")\n+        (and:HI (match_operand:HI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                (match_operand:HI 2 \"src_operand\" \"rm,R,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (AND, operands, HImode)\"\n   \"#\"\n@@ -5957,9 +5957,9 @@\n \n \n (define_insn \"*xorhi3_clobber\"\n-  [(set (match_operand:HI 0 \"reg_operand\" \"=d,?d,d\")\n-        (xor:HI (match_operand:HI 1 \"src_operand\" \"%rR,rS<>,0\")\n-                (match_operand:HI 2 \"src_operand\" \"R,rS<>,rm\")))\n+  [(set (match_operand:HI 0 \"reg_operand\" \"=d,d,?d\")\n+        (xor:HI (match_operand:HI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                (match_operand:HI 2 \"src_operand\" \"rm,R,rS<>\")))\n    (clobber (reg:CC 21))]\n   \"valid_operands (XOR, operands, HImode)\"\n   \"#\""}]}