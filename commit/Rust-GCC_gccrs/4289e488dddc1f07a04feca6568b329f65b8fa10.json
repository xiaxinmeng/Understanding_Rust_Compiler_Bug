{"sha": "4289e488dddc1f07a04feca6568b329f65b8fa10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4OWU0ODhkZGRjMWYwN2EwNGZlY2E2NTY4YjMyOWY2NWI4ZmExMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-28T18:42:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-28T18:46:46Z"}, "message": "c++: Make OMP UDR DECL_LOCAL_DECL_P earlier\n\nI discovered that we were pushing an OMP UDR in a template before\nsetting DECL_LOCAL_DECL.  This caused the template machinery to give\nit some template info.  It doesn't need that, and this changes the\nparser to set it earlier.  We have to adjust instantiate_body to not\ntry and access such a function's non-existant template_info.  The\naccess checks that we're no longer doing are the same as those we did\non the containing function anyway.  So nothing is lost.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_omp_declare_reduction): Set\n\tDECL_LOCAL_DECL_P before push_template_decl.\n\t* pt.c (instantiate_body): Nested fns do not have template_info.", "tree": {"sha": "e941454e9c051b81fe83c85a6ed511336d0b0e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e941454e9c051b81fe83c85a6ed511336d0b0e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4289e488dddc1f07a04feca6568b329f65b8fa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4289e488dddc1f07a04feca6568b329f65b8fa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4289e488dddc1f07a04feca6568b329f65b8fa10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4289e488dddc1f07a04feca6568b329f65b8fa10/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c13696fd2e18e6e2de52b25ddfe72284335732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c13696fd2e18e6e2de52b25ddfe72284335732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3c13696fd2e18e6e2de52b25ddfe72284335732"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "52637b1d2afee9fc2e2ce48c2f737ee110cad65f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4289e488dddc1f07a04feca6568b329f65b8fa10/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4289e488dddc1f07a04feca6568b329f65b8fa10/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4289e488dddc1f07a04feca6568b329f65b8fa10", "patch": "@@ -42700,15 +42700,19 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       DECL_ATTRIBUTES (fndecl)\n \t= tree_cons (get_identifier (\"gnu_inline\"), NULL_TREE,\n \t\t     DECL_ATTRIBUTES (fndecl));\n-      if (processing_template_decl)\n-\tfndecl = push_template_decl (fndecl);\n       bool block_scope = false;\n-      tree block = NULL_TREE;\n       if (current_function_decl)\n \t{\n \t  block_scope = true;\n \t  DECL_CONTEXT (fndecl) = current_function_decl;\n \t  DECL_LOCAL_DECL_P (fndecl) = true;\n+\t}\n+\n+      if (processing_template_decl)\n+\tfndecl = push_template_decl (fndecl);\n+\n+      if (block_scope)\n+\t{\n \t  if (!processing_template_decl)\n \t    pushdecl (fndecl);\n \t}\n@@ -42736,6 +42740,8 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n \t  /* We should never meet a matched duplicate decl.  */\n \t  gcc_checking_assert (d == error_mark_node || d == fndecl);\n \t}\n+\n+      tree block = NULL_TREE;\n       if (!block_scope)\n \tstart_preparsed_function (fndecl, NULL_TREE, SF_PRE_PARSED);\n       else"}, {"sha": "fdeaa02c887e2b875bc77ee06c43dca160859223", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4289e488dddc1f07a04feca6568b329f65b8fa10/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4289e488dddc1f07a04feca6568b329f65b8fa10/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4289e488dddc1f07a04feca6568b329f65b8fa10", "patch": "@@ -25595,9 +25595,11 @@ instantiate_body (tree pattern, tree args, tree d, bool nested_p)\n       if (nested_p)\n \tblock = push_stmt_list ();\n       else\n-\tstart_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n+\t{\n+\t  start_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n \n-      perform_instantiation_time_access_checks (code_pattern, args);\n+\t  perform_instantiation_time_access_checks (code_pattern, args);\n+\t}\n \n       /* Create substitution entries for the parameters.  */\n       register_parameter_specializations (code_pattern, d);\n@@ -25636,7 +25638,8 @@ instantiate_body (tree pattern, tree args, tree d, bool nested_p)\n     }\n \n   /* We're not deferring instantiation any more.  */\n-  TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (d)) = 0;\n+  if (!nested_p)\n+    TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (d)) = 0;\n \n   if (push_to_top)\n     pop_from_top_level ();"}]}