{"sha": "fc542d3c82d81562b82d93ea82ffa95ae78ed653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1NDJkM2M4MmQ4MTU2MmI4MmQ5M2VhODJmZmE5NWFlNzhlZDY1Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-28T02:20:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-28T02:20:22Z"}, "message": "(duplicate_decls): Copy old RTL *before* make_var_volatile.\n\n(pushdecl): Never reuse global fcn decl in place of\nlocal extern; just copy some info from it.\n\nFrom-SVN: r1699", "tree": {"sha": "e027b32b9aba3a86ea00e7a26466b6cec2183596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e027b32b9aba3a86ea00e7a26466b6cec2183596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc542d3c82d81562b82d93ea82ffa95ae78ed653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc542d3c82d81562b82d93ea82ffa95ae78ed653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc542d3c82d81562b82d93ea82ffa95ae78ed653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc542d3c82d81562b82d93ea82ffa95ae78ed653/comments", "author": null, "committer": null, "parents": [{"sha": "dacaf84fda6295a4bf72deaaf9875ae394ef4351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacaf84fda6295a4bf72deaaf9875ae394ef4351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dacaf84fda6295a4bf72deaaf9875ae394ef4351"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "ba07910f28519867066b47473fa43e919db6e888", "filename": "gcc/c-decl.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc542d3c82d81562b82d93ea82ffa95ae78ed653/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc542d3c82d81562b82d93ea82ffa95ae78ed653/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fc542d3c82d81562b82d93ea82ffa95ae78ed653", "patch": "@@ -1445,6 +1445,9 @@ duplicate_decls (newdecl, olddecl)\n \t      DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n \t}\n \n+      /* Keep the old rtl since we can safely use it.  */\n+      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n+\n       /* Merge the type qualifiers.  */\n       if (DECL_BUILT_IN_NONANSI (olddecl) && TREE_THIS_VOLATILE (olddecl)\n \t  && !TREE_THIS_VOLATILE (newdecl))\n@@ -1474,9 +1477,6 @@ duplicate_decls (newdecl, olddecl)\n       /* Merge the initialization information.  */\n       if (DECL_INITIAL (newdecl) == 0)\n \tDECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n-\n-      /* Keep the old rtl since we can safely use it.  */\n-      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n     }\n   /* If cannot merge, then use the new type and qualifiers,\n      and don't preserve the old rtl.  */\n@@ -1819,7 +1819,7 @@ pushdecl (x)\n \t  IDENTIFIER_LOCAL_VALUE (name) = x;\n \n \t  /* If this is an extern function declaration, see if we\n-\t     have a global definition for the function.  */\n+\t     have a global definition or declaration for the function.  */\n \t  if (oldlocal == 0\n \t      && DECL_EXTERNAL (x) && !DECL_INLINE (x)\n \t      && oldglobal != 0\n@@ -1829,13 +1829,30 @@ pushdecl (x)\n \t      /* We have one.  Their types must agree.  */\n \t      if (! comptypes (TREE_TYPE (x),\n \t\t\t       TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (name))))\n-\t\tpedwarn_with_decl (x, \"local declaration of `%s' doesn't match global one\");\n-\t      /* If the global one is inline, make the local one inline.  */\n-\t      else if (DECL_INLINE (oldglobal)\n-\t\t       || DECL_BUILT_IN (oldglobal)\n-\t\t       || (TYPE_ARG_TYPES (TREE_TYPE (oldglobal)) != 0\n-\t\t\t   && TYPE_ARG_TYPES (TREE_TYPE (x)) == 0))\n-\t\tIDENTIFIER_LOCAL_VALUE (name) = oldglobal;\n+\t\tpedwarn_with_decl (x, \"extern declaration of `%s' doesn't match global one\");\n+\t      else\n+\t\t{\n+\t\t  /* Inner extern decl is inline if global one is.\n+\t\t     Copy enough to really inline it.  */\n+\t\t  if (DECL_INLINE (oldglobal))\n+\t\t    {\n+\t\t      DECL_INLINE (x) = DECL_INLINE (oldglobal);\n+\t\t      DECL_INITIAL (x) = DECL_INITIAL (oldglobal);\n+\t\t      DECL_SAVED_INSNS (x) = DECL_SAVED_INSNS (oldglobal);\n+\t\t      DECL_ARGUMENTS (x) = DECL_ARGUMENTS (oldglobal);\n+\t\t    }\n+\t\t  /* Inner extern decl is built-in if global one is.  */\n+\t\t  if (DECL_BUILT_IN (oldglobal))\n+\t\t    {\n+\t\t      DECL_BUILT_IN (x) = DECL_BUILT_IN (oldglobal);\n+\t\t      DECL_SET_FUNCTION_CODE (x, DECL_FUNCTION_CODE (oldglobal));\n+\t\t    }\n+\t\t  /* Keep the arg types from a file-scope fcn defn.  */\n+\t\t  if (TYPE_ARG_TYPES (TREE_TYPE (oldglobal)) != 0\n+\t\t      && DECL_INITIAL (oldglobal)\n+\t\t      && TYPE_ARG_TYPES (TREE_TYPE (x)) == 0)\n+\t\t    TREE_TYPE (x) = TREE_TYPE (oldglobal);\n+\t\t}\n \t    }\n \n #if 0 /* This case is probably sometimes the right thing to do.  */"}]}