{"sha": "3e00fefde117f3c5f88e068174340a6913c394dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwMGZlZmRlMTE3ZjNjNWY4OGUwNjgxNzQzNDBhNjkxM2MzOTRkZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T22:03:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T22:03:00Z"}, "message": "Cast enum arithmetic and logical operands to int.\n\nFrom-SVN: r5595", "tree": {"sha": "c2b17f7a35b9ac37512b423c72802f3a4872e448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2b17f7a35b9ac37512b423c72802f3a4872e448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e00fefde117f3c5f88e068174340a6913c394dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e00fefde117f3c5f88e068174340a6913c394dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e00fefde117f3c5f88e068174340a6913c394dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e00fefde117f3c5f88e068174340a6913c394dd/comments", "author": null, "committer": null, "parents": [{"sha": "f0afa4a260ed42561e5359f2b6c104abc216668f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0afa4a260ed42561e5359f2b6c104abc216668f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0afa4a260ed42561e5359f2b6c104abc216668f"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "097cd62e5785d037bd3a9a0ea9b6997eeb8337f9", "filename": "gcc/bc-typecd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00fefde117f3c5f88e068174340a6913c394dd/gcc%2Fbc-typecd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00fefde117f3c5f88e068174340a6913c394dd/gcc%2Fbc-typecd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbc-typecd.h?ref=3e00fefde117f3c5f88e068174340a6913c394dd", "patch": "@@ -30,19 +30,19 @@ enum typecode\n };\n \n /* Determine if a given type is integer.  */\n-#define TYPECODE_INTEGER_P(TYPECODE) ((TYPECODE) < SFcode)\n+#define TYPECODE_INTEGER_P(TYPECODE) ((int) (TYPECODE) < (int) SFcode)\n \n /* Determine if a given type is unsigned.  */\n #define TYPECODE_UNSIGNED_P(TYPECODE) \\\n-  (TYPECODE_INTEGER_P(TYPECODE) && (TYPECODE) & 1)\n+  (TYPECODE_INTEGER_P(TYPECODE) && (int) (TYPECODE) & 1)\n \n /* Determine if a given type is signed.  */\n #define TYPECODE_SIGNED_P(TYPECODE) \\\n-  (TYPECODE_INTEGER_P(TYPECODE) && !((TYPECODE) & 1))\n+  (TYPECODE_INTEGER_P(TYPECODE) && !((int) (TYPECODE) & 1))\n \n /* Determine if a given type is floating.  */\n #define TYPECODE_FLOAT_P(TYPECODE) \\\n-  ((TYPECODE) < Pcode && !TYPECODE_INTEGER_P(TYPECODE))\n+  ((int) (TYPECODE) < (int) Pcode && !TYPECODE_INTEGER_P(TYPECODE))\n \n /* Determine if the given type is arithmetic. */\n #define TYPECODE_ARITH_P(TYPECODE) \\"}]}