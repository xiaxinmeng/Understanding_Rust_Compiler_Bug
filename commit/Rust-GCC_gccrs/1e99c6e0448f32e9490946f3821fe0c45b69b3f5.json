{"sha": "1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5OWM2ZTA0NDhmMzJlOTQ5MDk0NmYzODIxZmUwYzQ1YjY5YjNmNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-10-31T13:58:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-31T13:58:29Z"}, "message": "tree-vrp.c (maybe_set_nonzero_bits): New function.\n\n\t* tree-vrp.c (maybe_set_nonzero_bits): New function.\n\t(remove_range_assertions): Call it.\n\nFrom-SVN: r204258", "tree": {"sha": "d3e19b3c27680217de2fa805e3cea45a08081d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3e19b3c27680217de2fa805e3cea45a08081d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e99c6e0448f32e9490946f3821fe0c45b69b3f5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eae76e53d9f28035a072e2722ffafdd3ad913936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae76e53d9f28035a072e2722ffafdd3ad913936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae76e53d9f28035a072e2722ffafdd3ad913936"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "99a5034689791ff9a7e11368c4744eef537d3b22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e99c6e0448f32e9490946f3821fe0c45b69b3f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e99c6e0448f32e9490946f3821fe0c45b69b3f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "patch": "@@ -1,5 +1,8 @@\n 2013-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-vrp.c (maybe_set_nonzero_bits): New function.\n+\t(remove_range_assertions): Call it.\n+\n \t* tree.c (tree_ctz): New function.\n \t* tree.h (tree_ctz): New prototype.\n \t* tree-ssanames.h (get_range_info, get_nonzero_bits): Change"}, {"sha": "15cfcb3f5913d0cd9338dd4035e4f3c835cdc3d3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e99c6e0448f32e9490946f3821fe0c45b69b3f5/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e99c6e0448f32e9490946f3821fe0c45b69b3f5/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1e99c6e0448f32e9490946f3821fe0c45b69b3f5", "patch": "@@ -6486,6 +6486,60 @@ all_imm_uses_in_stmt_or_feed_cond (tree var, gimple stmt, basic_block cond_bb)\n   return true;\n }\n \n+/* Handle\n+   _4 = x_3 & 31;\n+   if (_4 != 0)\n+     goto <bb 6>;\n+   else\n+     goto <bb 7>;\n+   <bb 6>:\n+   __builtin_unreachable ();\n+   <bb 7>:\n+   x_5 = ASSERT_EXPR <x_3, ...>;\n+   If x_3 has no other immediate uses (checked by caller),\n+   var is the x_3 var from ASSERT_EXPR, we can clear low 5 bits\n+   from the non-zero bitmask.  */\n+\n+static void\n+maybe_set_nonzero_bits (basic_block bb, tree var)\n+{\n+  edge e = single_pred_edge (bb);\n+  basic_block cond_bb = e->src;\n+  gimple stmt = last_stmt (cond_bb);\n+  tree cst;\n+\n+  if (stmt == NULL\n+      || gimple_code (stmt) != GIMPLE_COND\n+      || gimple_cond_code (stmt) != ((e->flags & EDGE_TRUE_VALUE)\n+\t\t\t\t     ? EQ_EXPR : NE_EXPR)\n+      || TREE_CODE (gimple_cond_lhs (stmt)) != SSA_NAME\n+      || !integer_zerop (gimple_cond_rhs (stmt)))\n+    return;\n+\n+  stmt = SSA_NAME_DEF_STMT (gimple_cond_lhs (stmt));\n+  if (!is_gimple_assign (stmt)\n+      || gimple_assign_rhs_code (stmt) != BIT_AND_EXPR\n+      || TREE_CODE (gimple_assign_rhs2 (stmt)) != INTEGER_CST)\n+    return;\n+  if (gimple_assign_rhs1 (stmt) != var)\n+    {\n+      gimple stmt2;\n+\n+      if (TREE_CODE (gimple_assign_rhs1 (stmt)) != SSA_NAME)\n+\treturn;\n+      stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+      if (!gimple_assign_cast_p (stmt2)\n+\t  || gimple_assign_rhs1 (stmt2) != var\n+\t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt2))\n+\t  || (TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (stmt)))\n+\t\t\t      != TYPE_PRECISION (TREE_TYPE (var))))\n+\treturn;\n+    }\n+  cst = gimple_assign_rhs2 (stmt);\n+  set_nonzero_bits (var, (get_nonzero_bits (var)\n+\t\t\t  & ~tree_to_double_int (cst)));\n+}\n+\n /* Convert range assertion expressions into the implied copies and\n    copy propagate away the copies.  Doing the trivial copy propagation\n    here avoids the need to run the full copy propagation pass after\n@@ -6566,8 +6620,11 @@ remove_range_assertions (void)\n \t\tif (is_unreachable\n \t\t    && all_imm_uses_in_stmt_or_feed_cond (var, stmt,\n \t\t\t\t\t\t\t  single_pred (bb)))\n-\t\t  set_range_info (var, SSA_NAME_RANGE_INFO (lhs)->min,\n-\t\t\t\t  SSA_NAME_RANGE_INFO (lhs)->max);\n+\t\t  {\n+\t\t    set_range_info (var, SSA_NAME_RANGE_INFO (lhs)->min,\n+\t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->max);\n+\t\t    maybe_set_nonzero_bits (bb, var);\n+\t\t  }\n \t      }\n \n \t    /* Propagate the RHS into every use of the LHS.  */"}]}