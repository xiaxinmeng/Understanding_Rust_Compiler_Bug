{"sha": "11d59a86830fe41e96a652762c210649bdb549a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkNTlhODY4MzBmZTQxZTk2YTY1Mjc2MmMyMTA2NDliZGI1NDlhMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T11:01:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T11:01:42Z"}, "message": "[multiple changes]\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor fix.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n\tAddress): Remove the Comes_From_Source test for the overlap\n\twarning.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb: Minor code reorganization (use Nkind_In).\n\t* sem_warn.adb: Minor code reorganization (optimization in\n\tCheck_Unset_Reference).\n\t* exp_ch9.adb, exp_ch4.adb, sinfo.ads: Minor reformatting.\n\n2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch7.adb (Install_Parent_Private_Declarations): When\n\tinstantiating a child unit, do not install private declaration of\n\ta non-generic ancestor of the generic that is also an ancestor\n\tof the current unit: its private part will be installed when\n\tprivate part of ancestor itself is analyzed.\n\n2013-10-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Check_Component_Storage_Order): Retrieve component\n\taliased status from type entities directly instead of going back\n\tto original component definition.\n\t* sem_ch7.adb: Minor reformatting.\n\nFrom-SVN: r203349", "tree": {"sha": "31eec373b3d31c6c1f3aa8047deeb53c6ad5a2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31eec373b3d31c6c1f3aa8047deeb53c6ad5a2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d59a86830fe41e96a652762c210649bdb549a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d59a86830fe41e96a652762c210649bdb549a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d59a86830fe41e96a652762c210649bdb549a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d59a86830fe41e96a652762c210649bdb549a2/comments", "author": null, "committer": null, "parents": [{"sha": "27a8f1502021f7d789a6d6970c73ba7ca703e0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a8f1502021f7d789a6d6970c73ba7ca703e0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a8f1502021f7d789a6d6970c73ba7ca703e0fd"}], "stats": {"total": 177, "additions": 124, "deletions": 53}, "files": [{"sha": "816aab345d2b8039112caa33f18f7856be6cbff3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -1,3 +1,35 @@\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor fix.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n+\tAddress): Remove the Comes_From_Source test for the overlap\n+\twarning.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb: Minor code reorganization (use Nkind_In).\n+\t* sem_warn.adb: Minor code reorganization (optimization in\n+\tCheck_Unset_Reference).\n+\t* exp_ch9.adb, exp_ch4.adb, sinfo.ads: Minor reformatting.\n+\n+2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch7.adb (Install_Parent_Private_Declarations): When\n+\tinstantiating a child unit, do not install private declaration of\n+\ta non-generic ancestor of the generic that is also an ancestor\n+\tof the current unit: its private part will be installed when\n+\tprivate part of ancestor itself is analyzed.\n+\n+2013-10-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Retrieve component\n+\taliased status from type entities directly instead of going back\n+\tto original component definition.\n+\t* sem_ch7.adb: Minor reformatting.\n+\n 2013-10-10  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): For Address"}, {"sha": "175f61db56b54ac6b53c5d63da805eb04689504c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -4959,11 +4959,10 @@ package body Exp_Ch4 is\n          Append_To (Actions,\n            Make_Full_Type_Declaration (Loc,\n              Defining_Identifier => Pnn,\n-             Type_Definition =>\n+             Type_Definition     =>\n                Make_Access_To_Object_Definition (Loc,\n-                 All_Present => True,\n-                 Subtype_Indication =>\n-                   New_Reference_To (Typ, Loc))));\n+                 All_Present        => True,\n+                 Subtype_Indication => New_Reference_To (Typ, Loc))));\n          Ttyp := Pnn;\n       end if;\n \n@@ -4972,7 +4971,8 @@ package body Exp_Ch4 is\n       --  Create declaration for target of expression, and indicate that it\n       --  does not require initialization.\n \n-      Decl :=  Make_Object_Declaration (Loc,\n+      Decl :=\n+        Make_Object_Declaration (Loc,\n           Defining_Identifier => Tnn,\n           Object_Definition   => New_Occurrence_Of (Ttyp, Loc));\n       Set_No_Initialization (Decl);"}, {"sha": "738564c0e4a7b0dc7844ac4a5805130542bd48cd", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -9010,26 +9010,26 @@ package body Exp_Ch9 is\n             then\n                Protection_Subtype :=\n                  Make_Subtype_Indication (Loc,\n-                    Subtype_Mark =>\n-                      New_Reference_To\n-                        (RTE (RE_Static_Interrupt_Protection), Loc),\n-                    Constraint =>\n-                      Make_Index_Or_Discriminant_Constraint (Loc,\n-                        Constraints => New_List (\n-                          Entry_Count_Expr,\n-                          Make_Integer_Literal (Loc, Num_Attach_Handler))));\n+                  Subtype_Mark =>\n+                    New_Reference_To\n+                      (RTE (RE_Static_Interrupt_Protection), Loc),\n+                  Constraint   =>\n+                    Make_Index_Or_Discriminant_Constraint (Loc,\n+                      Constraints => New_List (\n+                        Entry_Count_Expr,\n+                        Make_Integer_Literal (Loc, Num_Attach_Handler))));\n \n             elsif Has_Interrupt_Handler (Prot_Typ)\n               and then not Restriction_Active (No_Dynamic_Attachment)\n             then\n                Protection_Subtype :=\n                  Make_Subtype_Indication (Loc,\n-                 Subtype_Mark =>\n-                   New_Reference_To\n-                     (RTE (RE_Dynamic_Interrupt_Protection), Loc),\n-                 Constraint   =>\n-                   Make_Index_Or_Discriminant_Constraint (Loc,\n-                     Constraints => New_List (Entry_Count_Expr)));\n+                   Subtype_Mark =>\n+                     New_Reference_To\n+                       (RTE (RE_Dynamic_Interrupt_Protection), Loc),\n+                   Constraint   =>\n+                     Make_Index_Or_Discriminant_Constraint (Loc,\n+                       Constraints => New_List (Entry_Count_Expr)));\n \n             else\n                case Corresponding_Runtime_Package (Prot_Typ) is\n@@ -13644,12 +13644,14 @@ package body Exp_Ch9 is\n \n          --  Protected types with interrupt handlers (when not using a\n          --  restricted profile) are also considered equivalent to protected\n-         --  types with entries. The types which are used\n-         --  (Static_Interrupt_Protection and Dynamic_Interrupt_Protection)\n-         --  are derived from Protection_Entries.\n+         --  types with entries.\n+\n+         --  The types which are used (Static_Interrupt_Protection and\n+         --  Dynamic_Interrupt_Protection) are derived from Protection_Entries.\n \n          declare\n             Pkg_Id : constant RTU_Id := Corresponding_Runtime_Package (Ptyp);\n+\n             Called_Subp : RE_Id;\n \n          begin\n@@ -13695,8 +13697,8 @@ package body Exp_Ch9 is\n \n                Append_To (Args,\n                  Make_Attribute_Reference (Loc,\n-                   Prefix => New_Reference_To (P_Arr, Loc),\n-                            Attribute_Name => Name_Unrestricted_Access));\n+                   Prefix         => New_Reference_To (P_Arr, Loc),\n+                   Attribute_Name => Name_Unrestricted_Access));\n \n                if Pkg_Id = System_Tasking_Protected_Objects_Entries then\n \n@@ -13713,6 +13715,7 @@ package body Exp_Ch9 is\n                end if;\n \n             elsif Pkg_Id = System_Tasking_Protected_Objects_Single_Entry then\n+\n                --  This is the case where we have a protected object with\n                --  interfaces and no entries, and the single entry restriction\n                --  is in effect. We pass a null pointer for the entry\n@@ -13721,6 +13724,7 @@ package body Exp_Ch9 is\n                Append_To (Args, Make_Null (Loc));\n \n             elsif Pkg_Id = System_Tasking_Protected_Objects_Entries then\n+\n                --  This is the case where we have a protected object with no\n                --  entries and:\n                --    - either interrupt handlers with non restricted profile,"}, {"sha": "c161338247d88c96835e59ad53ca22c85296005e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -1068,14 +1068,15 @@ package body Freeze is\n       Comp      : Entity_Id)\n    is\n       Comp_Type : Entity_Id;\n-      Comp_Def  : Node_Id;\n       Err_Node  : Node_Id;\n       ADC       : Node_Id;\n \n       Comp_Byte_Aligned : Boolean;\n       --  Set True for the record case, when Comp starts on a byte boundary\n       --  (in which case it is allowed to have different storage order).\n \n+      Component_Aliased : Boolean;\n+\n    begin\n       --  Record case\n \n@@ -1084,26 +1085,25 @@ package body Freeze is\n          Comp_Type := Etype (Comp);\n \n          if Is_Tag (Comp) then\n-            Comp_Def          := Empty;\n             Comp_Byte_Aligned := True;\n+            Component_Aliased := False;\n \n          else\n-            Comp_Def          := Component_Definition (Parent (Comp));\n             Comp_Byte_Aligned :=\n               Present (Component_Clause (Comp))\n                 and then\n                   Normalized_First_Bit (Comp) mod System_Storage_Unit = 0;\n+            Component_Aliased := Is_Aliased (Comp);\n          end if;\n \n       --  Array case\n \n       else\n          Err_Node  := Encl_Type;\n          Comp_Type := Component_Type (Encl_Type);\n-         Comp_Def  := Component_Definition\n-                        (Type_Definition (Declaration_Node (Encl_Type)));\n \n          Comp_Byte_Aligned := False;\n+         Component_Aliased := Has_Aliased_Components (Encl_Type);\n       end if;\n \n       --  Note: the Reverse_Storage_Order flag is set on the base type, but\n@@ -1139,7 +1139,7 @@ package body Freeze is\n                & \"storage order as enclosing composite\", Err_Node);\n          end if;\n \n-      elsif Present (Comp_Def) and then Aliased_Present (Comp_Def) then\n+      elsif Component_Aliased then\n          Error_Msg_N\n            (\"aliased component not permitted for type with \"\n             & \"explicit Scalar_Storage_Order\", Err_Node);"}, {"sha": "defcdcb3d2188220ddabda19141d1fe7cc083f00", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -8781,7 +8781,7 @@ The @code{Update} attribute creates a copy of an array or record value\n with one or more modified components. The syntax is:\n \n @smallexample @c ada\n-PREFIX'Update (AGGREGATE);\n+PREFIX'Update (AGGREGATE)\n @end smallexample\n \n @noindent"}, {"sha": "3a6b8390b50c430dfdf54d809c25068e7f68cbf2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -3485,18 +3485,21 @@ package body Sem_Ch13 is\n                   --  then we make an entry in the table for checking the size\n                   --  and alignment of the overlaying variable. We defer this\n                   --  check till after code generation to take full advantage\n-                  --  of the annotation done by the back end. This entry is\n-                  --  only made if the address clause comes from source or\n-                  --  from an aspect clause (which is still from source).\n+                  --  of the annotation done by the back end.\n \n                   --  If the entity has a generic type, the check will be\n                   --  performed in the instance if the actual type justifies\n                   --  it, and we do not insert the clause in the table to\n                   --  prevent spurious warnings.\n \n+                  --  Note: we used to test Comes_From_Source and only give\n+                  --  this warning for source entities, but we have removed\n+                  --  this test. It really seems bogus to generate overlays\n+                  --  that would trigger this warning in generated code.\n+                  --  Furthermore, by removing the test, we handle the\n+                  --  aspect case properly.\n+\n                   if Address_Clause_Overlay_Warnings\n-                       and then (Comes_From_Source (N)\n-                                  or else From_Aspect_Specification (N))\n                     and then Present (O_Ent)\n                     and then Is_Object (O_Ent)\n                   then"}, {"sha": "b33a15eb03265884943a2edf5fe525dd0734e9ba", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -1167,17 +1167,31 @@ package body Sem_Ch7 is\n                --  then finish off by looping through the nongeneric parents\n                --  and installing their private declarations.\n \n+               --  If one of the non-generic parents is itself on the scope\n+               --  stack, do not install its private declarations: they are\n+               --  installed in due time when the private part of that parent\n+               --  is analyzed.\n+\n                else\n                   while Present (Inst_Par)\n                     and then Inst_Par /= Standard_Standard\n                     and then (not In_Open_Scopes (Inst_Par)\n                                or else not In_Private_Part (Inst_Par))\n                   loop\n-                     Install_Private_Declarations (Inst_Par);\n-                     Set_Use (Private_Declarations\n-                                (Specification\n-                                   (Unit_Declaration_Node (Inst_Par))));\n-                     Inst_Par := Scope (Inst_Par);\n+                     if Nkind (Inst_Node) = N_Formal_Package_Declaration\n+                       or else\n+                         not Is_Ancestor_Package\n+                               (Inst_Par, Cunit_Entity (Current_Sem_Unit))\n+                     then\n+                        Install_Private_Declarations (Inst_Par);\n+                        Set_Use (Private_Declarations\n+                                   (Specification\n+                                      (Unit_Declaration_Node (Inst_Par))));\n+                        Inst_Par := Scope (Inst_Par);\n+\n+                     else\n+                        exit;\n+                     end if;\n                   end loop;\n \n                   exit;"}, {"sha": "284b0f31a1247b47087900c897f7ddb8227034cc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -12217,8 +12217,8 @@ package body Sem_Util is\n                end if;\n \n                if Nkind (P) = N_Selected_Component\n-                 and then Present (\n-                   Entry_Formal (Entity (Selector_Name (P))))\n+                 and then\n+                   Present (Entry_Formal (Entity (Selector_Name (P))))\n                then\n                   --  Case of a reference to an entry formal\n \n@@ -12242,15 +12242,15 @@ package body Sem_Util is\n                end if;\n             end;\n \n-         elsif     Nkind (Exp) = N_Type_Conversion\n-           or else Nkind (Exp) = N_Unchecked_Type_Conversion\n+         elsif Nkind_In (Exp, N_Type_Conversion,\n+                              N_Unchecked_Type_Conversion)\n          then\n             Exp := Expression (Exp);\n             goto Continue;\n \n-         elsif     Nkind (Exp) = N_Slice\n-           or else Nkind (Exp) = N_Indexed_Component\n-           or else Nkind (Exp) = N_Selected_Component\n+         elsif Nkind_In (Exp, N_Slice,\n+                              N_Indexed_Component,\n+                              N_Selected_Component)\n          then\n             Exp := Prefix (Exp);\n             goto Continue;\n@@ -12309,7 +12309,9 @@ package body Sem_Util is\n                --  source. This excludes, for example, calls to a dispatching\n                --  assignment operation when the left-hand side is tagged.\n \n-               if Modification_Comes_From_Source or else SPARK_Mode then\n+               --  Why is SPARK mode different here ???\n+\n+               if Modification_Comes_From_Source or SPARK_Mode then\n                   Generate_Reference (Ent, Exp, 'm');\n \n                   --  If the target of the assignment is the bound variable"}, {"sha": "8315e65f00aa490552ec4f27a7e74b353b3b6764", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -1674,6 +1674,15 @@ package body Sem_Warn is\n          return;\n       end if;\n \n+      --  Nothing to do for numeric or string literal. Do this test early to\n+      --  save time in a common case (it does not matter that we do not include\n+      --  character literal here, since that will be caught later on in the\n+      --  when others branch of the case statement).\n+\n+      if Nkind (N) in N_Numeric_Or_String_Literal then\n+         return;\n+      end if;\n+\n       --  Ignore reference unless it comes from source. Almost always if we\n       --  have a reference from generated code, it is bogus (e.g. calls to init\n       --  procs to set default discriminant values).\n@@ -1707,7 +1716,7 @@ package body Sem_Warn is\n                  and then (No (Unset_Reference (E))\n                             or else\n                               Earlier_In_Extended_Unit\n-                                (Sloc (N),  Sloc (Unset_Reference (E))))\n+                                (Sloc (N), Sloc (Unset_Reference (E))))\n                  and then not Has_Pragma_Unmodified_Check_Spec (E)\n                  and then not Warnings_Off_Check_Spec (E)\n                then"}, {"sha": "9d966bfd56625985cd8b96ec1162b904a3d97390", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d59a86830fe41e96a652762c210649bdb549a2/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=11d59a86830fe41e96a652762c210649bdb549a2", "patch": "@@ -7822,13 +7822,18 @@ package Sinfo is\n       N_Raise_Program_Error,\n       N_Raise_Storage_Error,\n \n+      --  N_Subexpr, N_Has_Etype, N_Numeric_Or_String_Literal\n+\n+      N_Integer_Literal,\n+      N_Real_Literal,\n+      N_String_Literal,\n+\n       --  N_Subexpr, N_Has_Etype\n \n       N_Explicit_Dereference,\n       N_Expression_With_Actions,\n       N_If_Expression,\n       N_Indexed_Component,\n-      N_Integer_Literal,\n       N_Null,\n       N_Qualified_Expression,\n       N_Quantified_Expression,\n@@ -7838,11 +7843,9 @@ package Sinfo is\n       N_Extension_Aggregate,\n       N_Raise_Expression,\n       N_Range,\n-      N_Real_Literal,\n       N_Reference,\n       N_Selected_Component,\n       N_Slice,\n-      N_String_Literal,\n       N_Subprogram_Info,\n       N_Type_Conversion,\n       N_Unchecked_Expression,\n@@ -8173,6 +8176,10 @@ package Sinfo is\n       N_In ..\n       N_Not_In;\n \n+   subtype N_Numeric_Or_String_Literal is Node_Kind range\n+      N_Integer_Literal ..\n+      N_String_Literal;\n+\n    subtype N_Op is Node_Kind range\n      N_Op_Add ..\n      N_Op_Plus;"}]}