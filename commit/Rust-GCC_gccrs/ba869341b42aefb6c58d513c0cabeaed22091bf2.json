{"sha": "ba869341b42aefb6c58d513c0cabeaed22091bf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4NjkzNDFiNDJhZWZiNmM1OGQ1MTNjMGNhYmVhZWQyMjA5MWJmMg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2011-05-27T19:11:19Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2011-05-27T19:11:19Z"}, "message": "re PR tree-optimization/46728 (GCC does not generate fmadd for pow (x, 0.75)+y on powerpc)\n\n2011-05-27  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/46728\n\t* tree-ssa-math-opts.c (powi_as_mults_1): Add gimple_set_location.\n\t(powi_as_mults): Add gimple_set_location.\n\t(build_and_insert_call): New.\n\t(gimple_expand_builtin_pow): Add handling for pow(x,y) when y is\n\t0.5, 0.25, 0.75, 1./3., or 1./6.\n\nFrom-SVN: r174349", "tree": {"sha": "55dafe7cac0581d42b0e70b4b8848b51d77f7d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55dafe7cac0581d42b0e70b4b8848b51d77f7d6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba869341b42aefb6c58d513c0cabeaed22091bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba869341b42aefb6c58d513c0cabeaed22091bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba869341b42aefb6c58d513c0cabeaed22091bf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba869341b42aefb6c58d513c0cabeaed22091bf2/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2514987fa9a984b5f68ea5897d556deca3625139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514987fa9a984b5f68ea5897d556deca3625139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2514987fa9a984b5f68ea5897d556deca3625139"}], "stats": {"total": 158, "additions": 155, "deletions": 3}, "files": [{"sha": "a1ae80c59ebda13f3cbf4c8d44720cd571321653", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba869341b42aefb6c58d513c0cabeaed22091bf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba869341b42aefb6c58d513c0cabeaed22091bf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba869341b42aefb6c58d513c0cabeaed22091bf2", "patch": "@@ -1,3 +1,12 @@\n+2011-05-27  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/46728\n+\t* tree-ssa-math-opts.c (powi_as_mults_1): Add gimple_set_location.\n+\t(powi_as_mults): Add gimple_set_location.\n+\t(build_and_insert_call): New.\n+\t(gimple_expand_builtin_pow): Add handling for pow(x,y) when y is\n+\t0.5, 0.25, 0.75, 1./3., or 1./6.\n+\t\n 2011-05-27  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* doc/contrib.texi: Update copyright years."}, {"sha": "0e3f738b4ccccc9cf91388c53f9a21c34d8cfa71", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 146, "deletions": 3, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba869341b42aefb6c58d513c0cabeaed22091bf2/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba869341b42aefb6c58d513c0cabeaed22091bf2/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ba869341b42aefb6c58d513c0cabeaed22091bf2", "patch": "@@ -965,6 +965,7 @@ powi_as_mults_1 (gimple_stmt_iterator *gsi, location_t loc, tree type,\n     }\n \n   mult_stmt = gimple_build_assign_with_ops (MULT_EXPR, ssa_target, op0, op1);\n+  gimple_set_location (mult_stmt, loc);\n   gsi_insert_before (gsi, mult_stmt, GSI_SAME_STMT);\n \n   return ssa_target;\n@@ -999,6 +1000,7 @@ powi_as_mults (gimple_stmt_iterator *gsi, location_t loc,\n   div_stmt = gimple_build_assign_with_ops (RDIV_EXPR, target, \n \t\t\t\t\t   build_real (type, dconst1),\n \t\t\t\t\t   result);\n+  gimple_set_location (div_stmt, loc);\n   gsi_insert_before (gsi, div_stmt, GSI_SAME_STMT);\n \n   return target;\n@@ -1024,6 +1026,34 @@ gimple_expand_builtin_powi (gimple_stmt_iterator *gsi, location_t loc,\n   return NULL_TREE;\n }\n \n+/* Build a gimple call statement that calls FN with argument ARG.\n+   Set the lhs of the call statement to a fresh SSA name for\n+   variable VAR.  If VAR is NULL, first allocate it.  Insert the\n+   statement prior to GSI's current position, and return the fresh\n+   SSA name.  */\n+\n+static tree\n+build_and_insert_call (gimple_stmt_iterator *gsi, tree fn, tree arg,\n+\t\t       tree *var, location_t loc)\n+{\n+  gimple call_stmt;\n+  tree ssa_target;\n+\n+  if (!*var)\n+    {\n+      *var = create_tmp_var (TREE_TYPE (arg), \"powroot\");\n+      add_referenced_var (*var);\n+    }\n+\n+  call_stmt = gimple_build_call (fn, 1, arg);\n+  ssa_target = make_ssa_name (*var, NULL);\n+  gimple_set_lhs (call_stmt, ssa_target);\n+  gimple_set_location (call_stmt, loc);\n+  gsi_insert_before (gsi, call_stmt, GSI_SAME_STMT);\n+\n+  return ssa_target;\n+}\n+\n /* ARG0 and ARG1 are the two arguments to a pow builtin call in GSI\n    with location info LOC.  If possible, create an equivalent and\n    less expensive sequence of statements prior to GSI, and return an\n@@ -1033,16 +1063,21 @@ static tree\n gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc, \n \t\t\t   tree arg0, tree arg1)\n {\n-  REAL_VALUE_TYPE c, cint;\n+  REAL_VALUE_TYPE c, cint, dconst1_4, dconst3_4, dconst1_3, dconst1_6;\n   HOST_WIDE_INT n;\n+  tree type, sqrtfn, cbrtfn, sqrt_arg0, sqrt_sqrt, ssa_target;\n+  tree target = NULL_TREE;\n+  enum machine_mode mode;\n+  bool hw_sqrt_exists;\n+  gimple mult_stmt;\n \n   /* If the exponent isn't a constant, there's nothing of interest\n      to be done.  */\n   if (TREE_CODE (arg1) != REAL_CST)\n     return NULL_TREE;\n \n-  /* If the exponent is equivalent to an integer, expand it into\n-     multiplies when profitable.  */\n+  /* If the exponent is equivalent to an integer, expand to an optimal\n+     multiplication sequence when profitable.  */\n   c = TREE_REAL_CST (arg1);\n   n = real_to_integer (&c);\n   real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n@@ -1054,6 +1089,114 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n \t      && powi_cost (n) <= POWI_MAX_MULTS)))\n     return gimple_expand_builtin_powi (gsi, loc, arg0, n);\n \n+  /* Attempt various optimizations using sqrt and cbrt.  */\n+  type = TREE_TYPE (arg0);\n+  mode = TYPE_MODE (type);\n+  sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n+\n+  /* Optimize pow(x,0.5) = sqrt(x).  This replacement is always safe\n+     unless signed zeros must be maintained.  pow(-0,0.5) = +0, while\n+     sqrt(-0) = -0.  */\n+  if (sqrtfn\n+      && REAL_VALUES_EQUAL (c, dconsthalf)\n+      && !HONOR_SIGNED_ZEROS (mode))\n+    return build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+\n+  /* Optimize pow(x,0.25) = sqrt(sqrt(x)).  Assume on most machines that\n+     a builtin sqrt instruction is smaller than a call to pow with 0.25,\n+     so do this optimization even if -Os.  Don't do this optimization\n+     if we don't have a hardware sqrt insn.  */\n+  dconst1_4 = dconst1;\n+  SET_REAL_EXP (&dconst1_4, REAL_EXP (&dconst1_4) - 2);\n+  hw_sqrt_exists = optab_handler(sqrt_optab, mode) != CODE_FOR_nothing;\n+\n+  if (flag_unsafe_math_optimizations\n+      && sqrtfn\n+      && REAL_VALUES_EQUAL (c, dconst1_4)\n+      && hw_sqrt_exists)\n+    {\n+      /* sqrt(x)  */\n+      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+\n+      /* sqrt(sqrt(x))  */\n+      return build_and_insert_call (gsi, sqrtfn, sqrt_arg0, &target, loc);\n+    }\n+      \n+  /* Optimize pow(x,0.75) = sqrt(x) * sqrt(sqrt(x)) unless we are\n+     optimizing for space.  Don't do this optimization if we don't have\n+     a hardware sqrt insn.  */\n+  real_from_integer (&dconst3_4, VOIDmode, 3, 0, 0);\n+  SET_REAL_EXP (&dconst3_4, REAL_EXP (&dconst3_4) - 2);\n+\n+  if (flag_unsafe_math_optimizations\n+      && sqrtfn\n+      && optimize_function_for_speed_p (cfun)\n+      && REAL_VALUES_EQUAL (c, dconst3_4)\n+      && hw_sqrt_exists)\n+    {\n+      /* sqrt(x)  */\n+      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+\n+      /* sqrt(sqrt(x))  */\n+      sqrt_sqrt = build_and_insert_call (gsi, sqrtfn, sqrt_arg0, &target, loc);\n+\n+      /* sqrt(x) * sqrt(sqrt(x))  */\n+      ssa_target = make_ssa_name (target, NULL);\n+      mult_stmt = gimple_build_assign_with_ops (MULT_EXPR, ssa_target,\n+\t\t\t\t\t\tsqrt_arg0, sqrt_sqrt);\n+      gimple_set_location (mult_stmt, loc);\n+      gsi_insert_before (gsi, mult_stmt, GSI_SAME_STMT);\n+\n+      return ssa_target;\n+    }\n+\n+  /* Optimize pow(x,1./3.) = cbrt(x).  This requires unsafe math\n+     optimizations since 1./3. is not exactly representable.  If x\n+     is negative and finite, the correct value of pow(x,1./3.) is\n+     a NaN with the \"invalid\" exception raised, because the value\n+     of 1./3. actually has an even denominator.  The correct value\n+     of cbrt(x) is a negative real value.  */\n+  cbrtfn = mathfn_built_in (type, BUILT_IN_CBRT);\n+  dconst1_3 = real_value_truncate (mode, dconst_third ());\n+\n+  if (flag_unsafe_math_optimizations\n+      && cbrtfn\n+      /* FIXME: The following line was originally\n+\t && (tree_expr_nonnegative_p (arg0) || !HONOR_NANS (mode)),\n+\t but since arg0 is a gimple value, the first predicate\n+\t will always return false.  It needs to be replaced with a\n+\t call to a similar gimple_val_nonnegative_p function to be\n+         added in gimple-fold.c.  */\n+      && !HONOR_NANS (mode)\n+      && REAL_VALUES_EQUAL (c, dconst1_3))\n+    return build_and_insert_call (gsi, cbrtfn, arg0, &target, loc);\n+  \n+  /* Optimize pow(x,1./6.) = cbrt(sqrt(x)).  Don't do this optimization\n+     if we don't have a hardware sqrt insn.  */\n+  dconst1_6 = dconst1_3;\n+  SET_REAL_EXP (&dconst1_6, REAL_EXP (&dconst1_6) - 1);\n+\n+  if (flag_unsafe_math_optimizations\n+      && sqrtfn\n+      && cbrtfn\n+      /* FIXME: The following line was originally\n+\t && (tree_expr_nonnegative_p (arg0) || !HONOR_NANS (mode)),\n+\t but since arg0 is a gimple value, the first predicate\n+\t will always return false.  It needs to be replaced with a\n+\t call to a similar gimple_val_nonnegative_p function to be\n+         added in gimple-fold.c.  */\n+      && !HONOR_NANS (mode)\n+      && optimize_function_for_speed_p (cfun)\n+      && hw_sqrt_exists\n+      && REAL_VALUES_EQUAL (c, dconst1_6))\n+    {\n+      /* sqrt(x)  */\n+      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+\n+      /* cbrt(sqrt(x))  */\n+      return build_and_insert_call (gsi, cbrtfn, sqrt_arg0, &target, loc);\n+    }\n+\n   return NULL_TREE;\n }\n "}]}