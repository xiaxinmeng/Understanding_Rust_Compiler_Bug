{"sha": "ece66526512d269375035e4413bb95d15a68ff3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlNjY1MjY1MTJkMjY5Mzc1MDM1ZTQ0MTNiYjk1ZDE1YTY4ZmYzYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-17T07:16:16Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-17T07:16:16Z"}, "message": "re PR fortran/56386 ([F03] ICE with ASSOCIATE construct and an derived type array component)\n\n2018-10-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/56386\n\tPR fortran/58906\n\tPR fortran/77385\n\tPR fortran/80260\n\tPR fortran/82077\n\t* resolve.c (resolve_variable): Fix up expressions with array\n\tassociate names, where the parser did not detect that this is\n\tarray and there was no array part_ref in the expression.\n\n2018-10-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/56386\n\tPR fortran/58906\n\tPR fortran/77385\n\t* gfortran.dg/associate_44.f90 : New test.\n\n\tPR fortran/80260\n\t* gfortran.dg/select_type_45.f90 : New test.\n\n\tPR fortran/82077\n\t* gfortran.dg/select_type_46.f90 : New test.\n\nFrom-SVN: r265232", "tree": {"sha": "366c622d900d7358dd673354407e101e9cc05ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366c622d900d7358dd673354407e101e9cc05ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece66526512d269375035e4413bb95d15a68ff3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece66526512d269375035e4413bb95d15a68ff3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece66526512d269375035e4413bb95d15a68ff3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece66526512d269375035e4413bb95d15a68ff3a/comments", "author": null, "committer": null, "parents": [{"sha": "17d6b74d7f557a86a87ce5c6e1abf448576efb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d6b74d7f557a86a87ce5c6e1abf448576efb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d6b74d7f557a86a87ce5c6e1abf448576efb8e"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "ffc8629acf4de419b2837186e93fb753e59687d9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -1,3 +1,14 @@\n+2018-10-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/56386\n+\tPR fortran/58906\n+\tPR fortran/77385\n+\tPR fortran/80260\n+\tPR fortran/82077\n+\t* resolve.c (resolve_variable): Fix up expressions with array\n+\tassociate names, where the parser did not detect that this is\n+\tarray and there was no array part_ref in the expression.\n+\n 2018-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/67125"}, {"sha": "7c0381698cb5b89250aa141f66d29bf9fdb63413", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -5436,6 +5436,24 @@ resolve_variable (gfc_expr *e)\n \tgfc_fix_class_refs (e);\n       if (!sym->attr.dimension && e->ref && e->ref->type == REF_ARRAY)\n \treturn false;\n+      else if (sym->attr.dimension && (!e->ref || e->ref->type != REF_ARRAY))\n+\t{\n+\t  /* This can happen because the parser did not detect that the\n+\t     associate name is an array and the expression had no array\n+\t     part_ref.  */\n+\t  gfc_ref *ref = gfc_get_ref ();\n+\t  ref->type = REF_ARRAY;\n+\t  ref->u.ar = *gfc_get_array_ref();\n+\t  ref->u.ar.type = AR_FULL;\n+\t  if (sym->as)\n+\t    {\n+\t      ref->u.ar.as = sym->as;\n+\t      ref->u.ar.dimen = sym->as->rank;\n+\t    }\n+\t  ref->next = e->ref;\n+\t  e->ref = ref;\n+\n+\t}\n     }\n \n   if (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.generic)"}, {"sha": "6c1ba929f733aa9820b2e5030bb0b3563e25a86b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -1,3 +1,16 @@\n+2018-10-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/56386\n+\tPR fortran/58906\n+\tPR fortran/77385\n+\t* gfortran.dg/associate_44.f90 : New test.\n+\n+\tPR fortran/80260\n+\t* gfortran.dg/select_type_45.f90 : New test.\n+\n+\tPR fortran/82077\n+\t* gfortran.dg/select_type_46.f90 : New test.\n+\n 2018-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/67125"}, {"sha": "de42d8aedd8a1b7405b1ba8324cbc9e48c6e64d9", "filename": "gcc/testsuite/gfortran.dg/associate_44.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_44.f90?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR56386\n+!\n+! Contributed by Vladimir Fuka  <vladimir.fuka@gmail.com>\n+!\n+subroutine  CustomSolidBodies\n+   implicit none\n+\n+    type inner\n+      real :: elev\n+    end type\n+\n+    type :: outer\n+      type(inner),dimension(0) :: PrPoints\n+    end type\n+\n+    type(outer) :: SB\n+\n+    associate (Prter=>SB%PrPoints)\n+       PrTer%elev=0                  ! ICE here\n+    end associate\n+end subroutine  CustomSolidBodies"}, {"sha": "a5e04fabcad2ff8c106f5643a5782eacf3de356f", "filename": "gcc/testsuite/gfortran.dg/select_type_45.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_45.f90?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR80260\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+    type foo\n+    end type foo\n+    type, extends(foo) :: bar\n+    end type\n+contains\n+    subroutine f(x)\n+      class(foo) x(:,:)\n+      select type(x)\n+        class is (bar)\n+          call g(x(1,:))   ! ICEd here.\n+      end select\n+    end subroutine\n+    subroutine g(y)\n+      class(bar) y(:)\n+    end subroutine\n+end"}, {"sha": "7582ab78f911db90c365fb9449dba8d6fa347a65", "filename": "gcc/testsuite/gfortran.dg/select_type_46.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_46.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece66526512d269375035e4413bb95d15a68ff3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_46.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_46.f90?ref=ece66526512d269375035e4413bb95d15a68ff3a", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR82077\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+    type parent\n+    end type parent\n+    type, extends(parent) :: child\n+    end type\n+    class(parent), allocatable :: foo(:,:)\n+    allocate(child::foo(1,1))\n+    select type(foo)\n+      class is (child)\n+        call gfortran7_ICE(foo(1,:))  ! ICEd here.\n+    end select\n+contains\n+    subroutine gfortran7_ICE(bar)\n+      class(child) bar(:)\n+    end subroutine\n+end"}]}