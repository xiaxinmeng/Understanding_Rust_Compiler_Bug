{"sha": "a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE0ZTEyMmFlMmVjZjI3YThjYWNlN2UwZDFkZGE4NjA2ZDVlNGVjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-25T23:10:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-25T23:10:35Z"}, "message": "compiler: deref receiver types in mangled names\n    \n    This was the original intent, as reflected in the long comment at the\n    start of names.cc, but I forgot to implement it.\n    \n    Also, remove a leading \".0\" from the final name.  That could occur for\n    a method whose receiver type starts with 'u', as in that case we\n    prepend a space to the mangled name, to avoid confusion with the\n    Unicode mangling, and the space turns into \".0\".\n    \n    Also, if the Unicode encoding would cause the final to start with\n    \"..u\" or \"..U\", add a leading underscore.\n    \n    Patch gotest to not get fooled by some names.\n    \n    The result of these changes is that all symbols start with a letter or\n    an underscore.\n    \n    Reviewed-on: https://go-review.googlesource.com/90015\n\nFrom-SVN: r257068", "tree": {"sha": "e7d8639d02f527aa3613c5443f0d7df1e358d02e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d8639d02f527aa3613c5443f0d7df1e358d02e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/comments", "author": null, "committer": null, "parents": [{"sha": "9aba6f77b481d555ea7c3d24911011be013dbc0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aba6f77b481d555ea7c3d24911011be013dbc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aba6f77b481d555ea7c3d24911011be013dbc0b"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "038a8e8c2c146e03a51f43f49b04af794db83a1b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "patch": "@@ -1,4 +1,4 @@\n-553e04735d1be372c596c720bcaea27e050b13a6\n+203cbe7d3820fa03c965a01f72461f71588fe952\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e130ba1a08e654fd63e364bad119f79460d93175", "filename": "gcc/go/gofrontend/go-encode-id.cc", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2Fgo-encode-id.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2Fgo-encode-id.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo-encode-id.cc?ref=a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "patch": "@@ -104,6 +104,14 @@ go_encode_id(const std::string &id)\n   std::string ret;\n   const char* p = id.c_str();\n   const char* pend = p + id.length();\n+\n+  // A leading \".0\" is a space introduced before a mangled type name\n+  // that starts with a 'u' or 'U', to avoid confusion with the\n+  // mangling used here.  We don't need a leading \".0\", and we don't\n+  // want symbols that start with '.', so remove it.\n+  if (p[0] == '.' && p[1] == '0')\n+    p += 2;\n+\n   while (p < pend)\n     {\n       unsigned int c;\n@@ -115,16 +123,19 @@ go_encode_id(const std::string &id)\n \t  go_assert(!char_needs_encoding(c));\n \t  ret += c;\n \t}\n-      else if (c < 0x10000)\n-\t{\n-\t  char buf[16];\n-\t  snprintf(buf, sizeof buf, \"..u%04x\", c);\n-\t  ret += buf;\n-\t}\n       else\n \t{\n \t  char buf[16];\n-\t  snprintf(buf, sizeof buf, \"..U%08x\", c);\n+\t  if (c < 0x10000)\n+\t    snprintf(buf, sizeof buf, \"..u%04x\", c);\n+\t  else\n+\t    snprintf(buf, sizeof buf, \"..U%08x\", c);\n+\n+\t  // We don't want a symbol to start with '.', so add a prefix\n+\t  // if needed.\n+\t  if (ret.empty())\n+\t    ret += '_';\n+\n \t  ret += buf;\n \t}\n       p += len;"}, {"sha": "2e36a1d3262f852755f85463016f78384c2a9c87", "filename": "gcc/go/gofrontend/names.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fnames.cc?ref=a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "patch": "@@ -213,7 +213,7 @@ Gogo::function_asm_name(const std::string& go_name, const Package* package,\n {\n   std::string ret;\n   if (rtype != NULL)\n-    ret = rtype->mangled_name(this);\n+    ret = rtype->deref()->mangled_name(this);\n   else if (package == NULL)\n     ret = this->pkgpath_symbol();\n   else\n@@ -892,14 +892,7 @@ Named_type::append_mangled_type_name(Gogo* gogo, bool use_alias,\n \t  const Typed_identifier* rcvr =\n \t    this->in_function_->func_value()->type()->receiver();\n \t  if (rcvr != NULL)\n-\t    {\n-\t      std::string m = rcvr->type()->mangled_name(gogo);\n-\t      // Turn a leading \".1\" back into \"*\" since we are going\n-\t      // to type-mangle this name again.\n-\t      if (m.compare(0, 2, \".1\") == 0)\n-\t\tm = \"*\" + m.substr(2);\n-\t      ret->append(m);\n-\t    }\n+\t    ret->append(rcvr->type()->deref()->mangled_name(gogo));\n \t  else if (this->in_function_->package() == NULL)\n \t    ret->append(gogo->pkgpath_symbol());\n \t  else\n@@ -956,7 +949,7 @@ Gogo::type_descriptor_name(Type* type, Named_type* nt)\n \t  const Typed_identifier* rcvr =\n \t    in_function->func_value()->type()->receiver();\n \t  if (rcvr != NULL)\n-\t    ret.append(rcvr->type()->mangled_name(this));\n+\t    ret.append(rcvr->type()->deref()->mangled_name(this));\n \t  else if (in_function->package() == NULL)\n \t    ret.append(this->pkgpath_symbol());\n \t  else"}, {"sha": "07a7946f44f78c0fb6be1bdc66ea3b48d59e690c", "filename": "libgo/go/runtime/pprof/pprof_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go?ref=a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "patch": "@@ -730,7 +730,7 @@ func TestMutexProfile(t *testing.T) {\n \t\tstks := stacks(p)\n \t\tfor _, want := range [][]string{\n \t\t\t// {\"sync.(*Mutex).Unlock\", \"pprof.blockMutex.func1\"},\n-\t\t\t{\".1sync.Mutex.Unlock\", \"pprof.blockMutex..func1\"},\n+\t\t\t{\"sync.Mutex.Unlock\", \"pprof.blockMutex..func1\"},\n \t\t} {\n \t\t\tif !containsStack(stks, want) {\n \t\t\t\tt.Errorf(\"No matching stack entry for %+v\", want)"}, {"sha": "1b23b6d0fc71c9837a1296bca80f1963723048b8", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "patch": "@@ -518,7 +518,7 @@ localname() {\n \tpattern='Test([^a-z].*)?'\n \t# The -p option tells GNU nm not to sort.\n \t# The -v option tells Solaris nm to sort by value.\n-\ttests=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | $symtogo)\n+\ttests=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | $symtogo)\n \tif [ \"x$tests\" = x ]; then\n \t\techo 'gotest: warning: no tests matching '$pattern in _gotest_.o $xofile 1>&2\n \t\texit 2"}]}