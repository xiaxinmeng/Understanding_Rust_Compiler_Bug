{"sha": "abb502071166f1eee1869cd5304d30d6763979f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiNTAyMDcxMTY2ZjFlZWUxODY5Y2Q1MzA0ZDMwZDY3NjM5NzlmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-12T23:09:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-12T23:09:15Z"}, "message": "re PR ipa/63838 (ipa-pure-const miscomputes can_throw)\n\n\tPR ipa/63838\n\t* ipa-pure-const.c (propagate_nothrow): Walk w->indirect_calls\n\tchain instead of node->indirect_calls.  Put !can_throw into\n\tconditions of all the loops.\n\n\t* g++.dg/ipa/pr63838.C: New test.\n\nFrom-SVN: r217449", "tree": {"sha": "0a91fe6829441e9337146867d824a26d24912a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a91fe6829441e9337146867d824a26d24912a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abb502071166f1eee1869cd5304d30d6763979f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb502071166f1eee1869cd5304d30d6763979f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb502071166f1eee1869cd5304d30d6763979f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb502071166f1eee1869cd5304d30d6763979f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f03cee1186e8cf919af19e5941492d20bdcfa860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03cee1186e8cf919af19e5941492d20bdcfa860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03cee1186e8cf919af19e5941492d20bdcfa860"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "458773eea486ce5dde81bbb35a90fc20c88e7d05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abb502071166f1eee1869cd5304d30d6763979f9", "patch": "@@ -1,3 +1,10 @@\n+2014-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/63838\n+\t* ipa-pure-const.c (propagate_nothrow): Walk w->indirect_calls\n+\tchain instead of node->indirect_calls.  Put !can_throw into\n+\tconditions of all the loops.\n+\n 2014-11-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (x86_output_mi_thunk): Use gen_rtx_REG to"}, {"sha": "6f7b32c12bc3311e9b1b487938ff6447b3f738f0", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=abb502071166f1eee1869cd5304d30d6763979f9", "patch": "@@ -1448,7 +1448,7 @@ propagate_nothrow (void)\n \n       /* Find the worst state for any node in the cycle.  */\n       w = node;\n-      while (w)\n+      while (w && !can_throw)\n \t{\n \t  struct cgraph_edge *e, *ie;\n \t  funct_state w_l = get_function_state (w);\n@@ -1457,10 +1457,7 @@ propagate_nothrow (void)\n \t      || w->get_availability () == AVAIL_INTERPOSABLE)\n \t    can_throw = true;\n \n-\t  if (can_throw)\n-\t    break;\n-\n-\t  for (e = w->callees; e; e = e->next_callee)\n+\t  for (e = w->callees; e && !can_throw; e = e->next_callee)\n \t    {\n \t      enum availability avail;\n \t      struct cgraph_node *y = e->callee->function_symbol (&avail);\n@@ -1469,21 +1466,16 @@ propagate_nothrow (void)\n \t\t{\n \t\t  funct_state y_l = get_function_state (y);\n \n-\t\t  if (can_throw)\n-\t\t    break;\n \t\t  if (y_l->can_throw && !TREE_NOTHROW (w->decl)\n \t\t      && e->can_throw_external)\n \t\t    can_throw = true;\n \t\t}\n \t      else if (e->can_throw_external && !TREE_NOTHROW (y->decl))\n \t        can_throw = true;\n \t    }\n-          for (ie = node->indirect_calls; ie; ie = ie->next_callee)\n+          for (ie = w->indirect_calls; ie && !can_throw; ie = ie->next_callee)\n \t    if (ie->can_throw_external)\n-\t      {\n-\t\tcan_throw = true;\n-\t\tbreak;\n-\t      }\n+\t      can_throw = true;\n \t  w_info = (struct ipa_dfs_info *) w->aux;\n \t  w = w_info->next_cycle;\n \t}\n@@ -1794,5 +1786,3 @@ make_pass_warn_function_noreturn (gcc::context *ctxt)\n {\n   return new pass_warn_function_noreturn (ctxt);\n }\n-\n-"}, {"sha": "66c66c49231f4b4ed76e0b138e84f72c68b5ab06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abb502071166f1eee1869cd5304d30d6763979f9", "patch": "@@ -1,3 +1,8 @@\n+2014-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/63838\n+\t* g++.dg/ipa/pr63838.C: New test.\n+\n 2014-11-12  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* gcc.target/mips/args-1.c: Handle __mips_fpr == 0."}, {"sha": "d67364900809401594d21036834671833df023a5", "filename": "gcc/testsuite/g++.dg/ipa/pr63838.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abb502071166f1eee1869cd5304d30d6763979f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C?ref=abb502071166f1eee1869cd5304d30d6763979f9", "patch": "@@ -0,0 +1,56 @@\n+// PR ipa/63838\n+// { dg-do run }\n+// { dg-options \"-O2 -fdump-ipa-pure-const\" }\n+// { dg-final { scan-ipa-dump-not \"Function found to be nothrow: void foo\" \"pure-const\" } }\n+// { dg-final { scan-ipa-dump-not \"Function found to be nothrow: void bar\" \"pure-const\" } }\n+// { dg-final { cleanup-ipa-dump \"pure-const\" } }\n+\n+__attribute__((noinline, noclone)) static void bar (int);\n+volatile int v;\n+void (*fn) ();\n+struct S { S () { v++; } ~S () { v++; } };\n+\n+__attribute__((noinline, noclone)) static void\n+foo (int x)\n+{\n+  v++;\n+  if (x == 5)\n+    bar (x);\n+}\n+\n+__attribute__((noinline, noclone)) static void\n+bar (int x)\n+{\n+  v++;\n+  if (x == 6)\n+    foo (x);\n+  else if (x == 5)\n+    fn ();\n+}\n+\n+__attribute__((noinline, noclone)) int\n+baz (int x)\n+{\n+  S s;\n+  foo (x);\n+}\n+\n+void\n+throw0 ()\n+{\n+  throw 0;\n+}\n+\n+int\n+main ()\n+{\n+  fn = throw0;\n+  asm volatile (\"\" : : : \"memory\");\n+  try\n+    {\n+      baz (5);\n+    }\n+  catch (int)\n+    {\n+    }\n+}"}]}