{"sha": "7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjYjMzNDU1YzlkYzkzNTlkOThjZDZiZmZlN2YzMmYyODJlZDcxMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-20T16:56:19Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-20T16:56:19Z"}, "message": "PR 100167: Fix vector long long multiply/divide tests on power10.\n\nThis patch updates the vector long long multiply and divide tests to\nsupply the correct code information if power10 code generation is used.\n\n2021-06-18  Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/testsuite/\n\tPR testsuite/100167\n\t* gcc.target/powerpc/fold-vec-div-longlong.c: Fix expected code\n\tgeneration on power10.\n\t* gcc.target/powerpc/fold-vec-mult-longlong.c: Likewise.", "tree": {"sha": "f69c61bf41227703a3a1a3aace58a7bd7ba7cdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69c61bf41227703a3a1a3aace58a7bd7ba7cdf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcb33455c9dc9359d98cd6bffe7f32f282ed713/comments", "author": null, "committer": null, "parents": [{"sha": "e0e82856d535f56c916382f892ed2435dde54d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e82856d535f56c916382f892ed2435dde54d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e82856d535f56c916382f892ed2435dde54d4d"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "f6a9b290ae59541132c2bb2f89b7257ec053ae28", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-div-longlong.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcb33455c9dc9359d98cd6bffe7f32f282ed713/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcb33455c9dc9359d98cd6bffe7f32f282ed713/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-div-longlong.c?ref=7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "patch": "@@ -19,5 +19,8 @@ test6 (vector unsigned long long x, vector unsigned long long y)\n {\n   return vec_div (x, y);\n }\n-/* { dg-final { scan-assembler-times {\\mdivd\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mdivdu\\M} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\mdivd\\M}   2 { target { ! has_arch_pwr10 } } } } */\n+/* { dg-final { scan-assembler-times {\\mdivdu\\M}  2 { target { ! has_arch_pwr10 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvdivsd\\M} 1 { target {   has_arch_pwr10 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvdivud\\M} 1 { target {   has_arch_pwr10 } } } } */"}, {"sha": "dff073d372de23d8d082716556b214dbb71e5c6d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mult-longlong.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcb33455c9dc9359d98cd6bffe7f32f282ed713/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcb33455c9dc9359d98cd6bffe7f32f282ed713/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mult-longlong.c?ref=7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "patch": "@@ -20,5 +20,8 @@ test6 (vector unsigned long long x, vector unsigned long long y)\n   return vec_mul (x, y);\n }\n \n-/* { dg-final { scan-assembler-times \"\\[ \\t\\]mulld \" 4 { target lp64 } } } */\n-\n+/* Power10 can generate the vmulld instruction even in 32-bit.  Before power10,\n+   we limit the code to lp64, since 32-bit cannot generate the mulld\n+   instruction.  */\n+/* { dg-final { scan-assembler-times {\\mmulld\\M}  4 { target { lp64 && { ! has_arch_pwr10 } } } } } */\n+/* { dg-final { scan-assembler-times {\\mvmulld\\M} 2 { target { has_arch_pwr10             } } } } */"}]}