{"sha": "2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjMjliYmZkZjJmOWMyYzVkNGVmNmYxYTkyMDg4OTZhNmY5YTM0OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-31T14:03:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-31T14:03:06Z"}, "message": "c-format.c (format_length_info, [...]): De-const-ify structure members.\n\n\t* c-format.c (format_length_info, format_char_info,\n\tformat_flag_spec, format_flag_pair, format_kind_info):\n\tDe-const-ify structure members.\n\nFrom-SVN: r67271", "tree": {"sha": "e24b712e8e6f0be3907614966cf88285994be70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24b712e8e6f0be3907614966cf88285994be70b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349/comments", "author": null, "committer": null, "parents": [{"sha": "4fa26a60791ec314128a9683fd4d657b251d0268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa26a60791ec314128a9683fd4d657b251d0268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa26a60791ec314128a9683fd4d657b251d0268"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "9efee9914f9bb5594184b9d905fdab9961f80c19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "patch": "@@ -1,3 +1,9 @@\n+2003-05-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-format.c (format_length_info, format_char_info,\n+\tformat_flag_spec, format_flag_pair, format_kind_info):\n+\tDe-const-ify structure members.\n+\n 2003-05-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* flags.h (flag_wrapv): New flag controlling overflow semantics."}, {"sha": "94cd59984a129999efab234ef8f3652f99a24775", "filename": "gcc/c-format.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=2ec29bbfdf2f9c2c5d4ef6f1a9208896a6f9a349", "patch": "@@ -373,15 +373,15 @@ enum\n typedef struct\n {\n   /* Name of the single-character length modifier.  */\n-  const char *const name;\n+  const char *name;\n   /* Index into a format_char_info.types array.  */\n-  const enum format_lengths index;\n+  enum format_lengths index;\n   /* Standard version this length appears in.  */\n-  const enum format_std_version std;\n+  enum format_std_version std;\n   /* Same, if the modifier can be repeated, or NULL if it can't.  */\n-  const char *const double_name;\n-  const enum format_lengths double_index;\n-  const enum format_std_version double_std;\n+  const char *double_name;\n+  enum format_lengths double_index;\n+  enum format_std_version double_std;\n } format_length_info;\n \n \n@@ -410,18 +410,18 @@ typedef struct\n    which act identically), and the length modifiers used with it.  */\n typedef struct\n {\n-  const char *const format_chars;\n-  const int pointer_count;\n-  const enum format_std_version std;\n+  const char *format_chars;\n+  int pointer_count;\n+  enum format_std_version std;\n   /* Types accepted for each length modifier.  */\n-  const format_type_detail types[FMT_LEN_MAX];\n+  format_type_detail types[FMT_LEN_MAX];\n   /* List of other modifier characters allowed with these specifiers.\n      This lists flags, and additionally \"w\" for width, \"p\" for precision\n      (right precision, for strfmon), \"#\" for left precision (strfmon),\n      \"a\" for scanf \"a\" allocation extension (not applicable in C99 mode),\n      \"*\" for scanf suppression, and \"E\" and \"O\" for those strftime\n      modifiers.  */\n-  const char *const flag_chars;\n+  const char *flag_chars;\n   /* List of additional flags describing these conversion specifiers.\n      \"c\" for generic character pointers being allowed, \"2\" for strftime\n      two digit year formats, \"3\" for strftime formats giving two digit\n@@ -431,15 +431,15 @@ typedef struct\n      \"R\" if the argument is a pointer which is dereferenced and read from,\n      \"i\" for printf integer formats where the '0' flag is ignored with\n      precision, and \"[\" for the starting character of a scanf scanset.  */\n-  const char *const flags2;\n+  const char *flags2;\n } format_char_info;\n \n \n /* Structure describing a flag accepted by some kind of format.  */\n typedef struct\n {\n   /* The flag character in question (0 for end of array).  */\n-  const int flag_char;\n+  int flag_char;\n   /* Zero if this entry describes the flag character in general, or a\n      nonzero character that may be found in flags2 if it describes the\n      flag when used with certain formats only.  If the latter, only\n@@ -448,18 +448,18 @@ typedef struct\n      will be used, if non-NULL and the standard version is higher than\n      the unpredicated one, for any pedantic warning.  For example, 'o'\n      for strftime formats (meaning 'O' is an extension over C99).  */\n-  const int predicate;\n+  int predicate;\n   /* Nonzero if the next character after this flag in the format should\n      be skipped ('=' in strfmon), zero otherwise.  */\n-  const int skip_next_char;\n+  int skip_next_char;\n   /* The name to use for this flag in diagnostic messages.  For example,\n      N_(\"`0' flag\"), N_(\"field width\").  */\n-  const char *const name;\n+  const char *name;\n   /* Long name for this flag in diagnostic messages; currently only used for\n      \"ISO C does not support ...\".  For example, N_(\"the `I' printf flag\").  */\n-  const char *const long_name;\n+  const char *long_name;\n   /* The standard version in which it appeared.  */\n-  const enum format_std_version std;\n+  enum format_std_version std;\n } format_flag_spec;\n \n \n@@ -468,16 +468,16 @@ typedef struct\n typedef struct\n {\n   /* The first flag character in question (0 for end of array).  */\n-  const int flag_char1;\n+  int flag_char1;\n   /* The second flag character.  */\n-  const int flag_char2;\n+  int flag_char2;\n   /* Nonzero if the message should say that the first flag is ignored with\n      the second, zero if the combination should simply be objected to.  */\n-  const int ignored;\n+  int ignored;\n   /* Zero if this entry applies whenever this flag combination occurs,\n      a nonzero character from flags2 if it only applies in some\n      circumstances (e.g. 'i' for printf formats ignoring 0 with precision).  */\n-  const int predicate;\n+  int predicate;\n } format_flag_pair;\n \n \n@@ -486,43 +486,43 @@ typedef struct\n {\n   /* The name of this kind of format, for use in diagnostics.  Also\n      the name of the attribute (without preceding and following __).  */\n-  const char *const name;\n+  const char *name;\n   /* Specifications of the length modifiers accepted; possibly NULL.  */\n-  const format_length_info *const length_char_specs;\n+  const format_length_info *length_char_specs;\n   /* Details of the conversion specification characters accepted.  */\n-  const format_char_info *const conversion_specs;\n+  const format_char_info *conversion_specs;\n   /* String listing the flag characters that are accepted.  */\n-  const char *const flag_chars;\n+  const char *flag_chars;\n   /* String listing modifier characters (strftime) accepted.  May be NULL.  */\n-  const char *const modifier_chars;\n+  const char *modifier_chars;\n   /* Details of the flag characters, including pseudo-flags.  */\n-  const format_flag_spec *const flag_specs;\n+  const format_flag_spec *flag_specs;\n   /* Details of bad combinations of flags.  */\n-  const format_flag_pair *const bad_flag_pairs;\n+  const format_flag_pair *bad_flag_pairs;\n   /* Flags applicable to this kind of format.  */\n-  const int flags;\n+  int flags;\n   /* Flag character to treat a width as, or 0 if width not used.  */\n-  const int width_char;\n+  int width_char;\n   /* Flag character to treat a left precision (strfmon) as,\n      or 0 if left precision not used.  */\n-  const int left_precision_char;\n+  int left_precision_char;\n   /* Flag character to treat a precision (for strfmon, right precision) as,\n      or 0 if precision not used.  */\n-  const int precision_char;\n+  int precision_char;\n   /* If a flag character has the effect of suppressing the conversion of\n      an argument ('*' in scanf), that flag character, otherwise 0.  */\n-  const int suppression_char;\n+  int suppression_char;\n   /* Flag character to treat a length modifier as (ignored if length\n      modifiers not used).  Need not be placed in flag_chars for conversion\n      specifiers, but is used to check for bad combinations such as length\n      modifier with assignment suppression in scanf.  */\n-  const int length_code_char;\n+  int length_code_char;\n   /* Pointer to type of argument expected if '*' is used for a width,\n      or NULL if '*' not used for widths.  */\n-  tree *const width_type;\n+  tree *width_type;\n   /* Pointer to type of argument expected if '*' is used for a precision,\n      or NULL if '*' not used for precisions.  */\n-  tree *const precision_type;\n+  tree *precision_type;\n } format_kind_info;\n \n "}]}