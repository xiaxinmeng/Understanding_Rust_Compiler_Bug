{"sha": "0fe12b0234a06e286df38d7b594abc23d1c371bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlMTJiMDIzNGEwNmUyODZkZjM4ZDdiNTk0YWJjMjNkMWMzNzFiYw==", "commit": {"author": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-20T17:19:20Z"}, "committer": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-20T17:19:20Z"}, "message": "Add numerous flags to the -fdump-fortran-original attribute dump.\n\n2020-04-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* dump-parse-tree.c (show_attr): Add numerous flags, some cleanup.", "tree": {"sha": "1a3b991c2199c2d48ed101e516a93646e638e16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a3b991c2199c2d48ed101e516a93646e638e16e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe12b0234a06e286df38d7b594abc23d1c371bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe12b0234a06e286df38d7b594abc23d1c371bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe12b0234a06e286df38d7b594abc23d1c371bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe12b0234a06e286df38d7b594abc23d1c371bc/comments", "author": null, "committer": null, "parents": [{"sha": "b0146791f004cfb2008e2ad9d63f6653fbfb2cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0146791f004cfb2008e2ad9d63f6653fbfb2cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0146791f004cfb2008e2ad9d63f6653fbfb2cf8"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "9eadcdbb2da6774ff7f2a5060291458e63b4430f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe12b0234a06e286df38d7b594abc23d1c371bc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe12b0234a06e286df38d7b594abc23d1c371bc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0fe12b0234a06e286df38d7b594abc23d1c371bc", "patch": "@@ -1,3 +1,7 @@\n+2020-04-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (show_attr): Add numerous flags, some cleanup.\n+\n 2020-04-20  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/93364"}, {"sha": "f32330685e7a3f9e95d9110a4e3b4196641cbc07", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe12b0234a06e286df38d7b594abc23d1c371bc/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe12b0234a06e286df38d7b594abc23d1c371bc/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=0fe12b0234a06e286df38d7b594abc23d1c371bc", "patch": "@@ -735,7 +735,7 @@ show_attr (symbol_attribute *attr, const char * module)\n   if (attr->flavor != FL_UNKNOWN)\n     {\n       if (attr->flavor == FL_DERIVED && attr->pdt_template)\n-\tfputs (\" (PDT template\", dumpfile);\n+\tfputs (\" (PDT-TEMPLATE\", dumpfile);\n       else\n     fprintf (dumpfile, \"(%s \", gfc_code2string (flavors, attr->flavor));\n     }\n@@ -770,6 +770,12 @@ show_attr (symbol_attribute *attr, const char * module)\n     fputs (\" LEN\", dumpfile);\n   if (attr->pointer)\n     fputs (\" POINTER\", dumpfile);\n+  if (attr->subref_array_pointer)\n+    fputs (\" SUBREF-ARRAY-POINTER\", dumpfile);\n+  if (attr->cray_pointer)\n+    fputs (\" CRAY-POINTER\", dumpfile);\n+  if (attr->cray_pointee)\n+    fputs (\" CRAY-POINTEE\", dumpfile);\n   if (attr->is_protected)\n     fputs (\" PROTECTED\", dumpfile);\n   if (attr->value)\n@@ -791,6 +797,10 @@ show_attr (symbol_attribute *attr, const char * module)\n     fputs (\" RESULT\", dumpfile);\n   if (attr->entry)\n     fputs (\" ENTRY\", dumpfile);\n+  if (attr->entry_master)\n+    fputs (\" ENTRY-MASTER\", dumpfile);\n+  if (attr->mixed_entry_master)\n+    fputs (\" MIXED-ENTRY-MASTER\", dumpfile);\n   if (attr->is_bind_c)\n     fputs (\" BIND(C)\", dumpfile);\n \n@@ -819,15 +829,80 @@ show_attr (symbol_attribute *attr, const char * module)\n \n   if (attr->sequence)\n     fputs (\" SEQUENCE\", dumpfile);\n+  if (attr->alloc_comp)\n+    fputs (\" ALLOC-COMP\", dumpfile);\n+  if (attr->pointer_comp)\n+    fputs (\" POINTER-COMP\", dumpfile);\n+  if (attr->proc_pointer_comp)\n+    fputs (\" PROC-POINTER-COMP\", dumpfile);\n+  if (attr->private_comp)\n+    fputs (\" PRIVATE-COMP\", dumpfile);\n+  if (attr->zero_comp)\n+    fputs (\" ZERO-COMP\", dumpfile);\n+  if (attr->coarray_comp)\n+    fputs (\" COARRAY-COMP\", dumpfile);\n+  if (attr->lock_comp)\n+    fputs (\" LOCK-COMP\", dumpfile);\n+  if (attr->event_comp)\n+    fputs (\" EVENT-COMP\", dumpfile);\n+  if (attr->defined_assign_comp)\n+    fputs (\" DEFINED-ASSIGNED-COMP\", dumpfile);\n+  if (attr->unlimited_polymorphic)\n+    fputs (\" UNLIMITED-POLYMORPHIC\", dumpfile);\n+  if (attr->has_dtio_procs)\n+    fputs (\" HAS-DTIO-PROCS\", dumpfile);\n+  if (attr->caf_token)\n+    fputs (\" CAF-TOKEN\", dumpfile);\n+  if (attr->select_type_temporary)\n+    fputs (\" SELECT-TYPE-TEMPORARY\", dumpfile);\n+  if (attr->associate_var)\n+    fputs (\" ASSOCIATE-VAR\", dumpfile);\n+  if (attr->pdt_kind)\n+    fputs (\" PDT-KIND\", dumpfile);\n+  if (attr->pdt_len)\n+    fputs (\" PDT-LEN\", dumpfile);\n+  if (attr->pdt_type)\n+    fputs (\" PDT-TYPE\", dumpfile);\n+  if (attr->pdt_array)\n+    fputs (\" PDT-ARRAY\", dumpfile);\n+  if (attr->pdt_string)\n+    fputs (\" PDT-STRING\", dumpfile);\n+  if (attr->omp_udr_artificial_var)\n+    fputs (\" OMP-UDT-ARTIFICIAL-VAR\", dumpfile);\n+  if (attr->omp_declare_target)\n+    fputs (\" OMP-DECLARE-TARGET\", dumpfile);\n+  if (attr->omp_declare_target_link)\n+    fputs (\" OMP-DECLARE-TARGET-LINK\", dumpfile);\n   if (attr->elemental)\n     fputs (\" ELEMENTAL\", dumpfile);\n   if (attr->pure)\n     fputs (\" PURE\", dumpfile);\n   if (attr->implicit_pure)\n-    fputs (\" IMPLICIT_PURE\", dumpfile);\n+    fputs (\" IMPLICIT-PURE\", dumpfile);\n   if (attr->recursive)\n     fputs (\" RECURSIVE\", dumpfile);\n-\n+  if (attr->unmaskable)\n+    fputs (\" UNMASKABKE\", dumpfile);\n+  if (attr->masked)\n+    fputs (\" MASKED\", dumpfile);\n+  if (attr->contained)\n+    fputs (\" CONTAINED\", dumpfile);\n+  if (attr->mod_proc)\n+    fputs (\" MOD-PROC\", dumpfile);\n+  if (attr->module_procedure)\n+    fputs (\" MODULE-PROCEDURE\", dumpfile);\n+  if (attr->public_used)\n+    fputs (\" PUBLIC_USED\", dumpfile);\n+  if (attr->array_outer_dependency)\n+    fputs (\" ARRAY-OUTER-DEPENDENCY\", dumpfile);\n+  if (attr->noreturn)\n+    fputs (\" NORETURN\", dumpfile);\n+  if (attr->always_explicit)\n+    fputs (\" ALWAYS-EXPLICIT\", dumpfile);\n+  if (attr->is_main_program)\n+    fputs (\" IS-MAIN-PROGRAM\", dumpfile);\n+\n+  /* FIXME: Still missing are oacc_routine_lop and ext_attr.  */\n   fputc (')', dumpfile);\n }\n "}]}