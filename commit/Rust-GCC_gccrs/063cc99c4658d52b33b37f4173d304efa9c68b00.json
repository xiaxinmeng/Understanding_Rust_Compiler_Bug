{"sha": "063cc99c4658d52b33b37f4173d304efa9c68b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYzY2M5OWM0NjU4ZDUyYjMzYjM3ZjQxNzNkMzA0ZWZhOWM2OGIwMA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-03-27T14:31:47Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-03-27T14:31:47Z"}, "message": "pt.c (tsubst_copy): Cope with tsubst_pack_expansion returning a pack expansion...\n\n2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* pt.c (tsubst_copy) <case SIZEOF_EXPR>: Cope with\n\ttsubst_pack_expansion returning a pack expansion, or a TREE_VEC\n\tending in a pack expansion, both of which can occur when\n\tsubstituting into a nested template.\n\t(tsubst_copy_and_build) <case SIZEOF_EXPR>: When we're\n\tinstantiating the sizeof...(X) form, make tsubst_copy do the work.\n\t* parser.c (cp_parser_template_parameter): Deal with unnamed\n\tnon-type template parameter packs identified by pack expansions in\n\tthe parameter type.\n\n2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n\n       * g++.dg/cpp0x/variadic91.C: New.\n\nFrom-SVN: r133642", "tree": {"sha": "85efa960309333d8820defc88b6374fdcae35ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85efa960309333d8820defc88b6374fdcae35ac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/063cc99c4658d52b33b37f4173d304efa9c68b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063cc99c4658d52b33b37f4173d304efa9c68b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063cc99c4658d52b33b37f4173d304efa9c68b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063cc99c4658d52b33b37f4173d304efa9c68b00/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c91c9c2ee8a877a31e6a4ecf93b3fe0d779afcc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91c9c2ee8a877a31e6a4ecf93b3fe0d779afcc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91c9c2ee8a877a31e6a4ecf93b3fe0d779afcc0"}], "stats": {"total": 115, "additions": 87, "deletions": 28}, "files": [{"sha": "68c17fd3ab6d99bf726dd4245216c61e0abef925", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=063cc99c4658d52b33b37f4173d304efa9c68b00", "patch": "@@ -1,3 +1,15 @@\n+2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* pt.c (tsubst_copy) <case SIZEOF_EXPR>: Cope with\n+\ttsubst_pack_expansion returning a pack expansion, or a TREE_VEC\n+\tending in a pack expansion, both of which can occur when\n+\tsubstituting into a nested template.\n+\t(tsubst_copy_and_build) <case SIZEOF_EXPR>: When we're\n+\tinstantiating the sizeof...(X) form, make tsubst_copy do the work.\n+\t* parser.c (cp_parser_template_parameter): Deal with unnamed\n+\tnon-type template parameter packs identified by pack expansions in\n+\tthe parameter type.\n+\n 2008-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/35546"}, {"sha": "87b353e08c02a76fb69b0c37f342d4ccc54a0454", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=063cc99c4658d52b33b37f4173d304efa9c68b00", "patch": "@@ -9435,29 +9435,41 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n       maybe_warn_variadic_templates ();\n       \n       *is_parameter_pack = true;\n+    }\n+  /* We might end up with a pack expansion as the type of the non-type\n+     template parameter, in which case this is a non-type template\n+     parameter pack.  */\n+  else if (parameter_declarator\n+\t   && parameter_declarator->decl_specifiers.type\n+\t   && PACK_EXPANSION_P (parameter_declarator->decl_specifiers.type))\n+    {\n+      *is_parameter_pack = true;\n+      parameter_declarator->decl_specifiers.type = \n+\tPACK_EXPANSION_PATTERN (parameter_declarator->decl_specifiers.type);\n+    }\n \n+  if (*is_parameter_pack && cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n+    {\n       /* Parameter packs cannot have default arguments.  However, a\n \t user may try to do so, so we'll parse them and give an\n \t appropriate diagnostic here.  */\n-      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n-\t{\n-\t  /* Consume the `='.  */\n-\t  cp_lexer_consume_token (parser->lexer);\n \n-\t  /* Find the name of the parameter pack.  */     \n-\t  id_declarator = parameter_declarator->declarator;\n-\t  while (id_declarator && id_declarator->kind != cdk_id)\n-\t    id_declarator = id_declarator->declarator;\n-\t  \n-\t  if (id_declarator && id_declarator->kind == cdk_id)\n-\t    error (\"template parameter pack %qD cannot have a default argument\",\n-\t\t   id_declarator->u.id.unqualified_name);\n-\t  else\n-\t    error (\"template parameter pack cannot have a default argument\");\n-\n-          /* Parse the default argument, but throw away the result.  */\n-          cp_parser_default_argument (parser, /*template_parm_p=*/true);\n-\t}\n+      /* Consume the `='.  */\n+      cp_lexer_consume_token (parser->lexer);\n+      \n+      /* Find the name of the parameter pack.  */     \n+      id_declarator = parameter_declarator->declarator;\n+      while (id_declarator && id_declarator->kind != cdk_id)\n+\tid_declarator = id_declarator->declarator;\n+      \n+      if (id_declarator && id_declarator->kind == cdk_id)\n+\terror (\"template parameter pack %qD cannot have a default argument\",\n+\t       id_declarator->u.id.unqualified_name);\n+      else\n+\terror (\"template parameter pack cannot have a default argument\");\n+      \n+      /* Parse the default argument, but throw away the result.  */\n+      cp_parser_default_argument (parser, /*template_parm_p=*/true);\n     }\n \n   parm = grokdeclarator (parameter_declarator->declarator,"}, {"sha": "6954a1bee9ee1cd0866e446473f3e76c763b691f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=063cc99c4658d52b33b37f4173d304efa9c68b00", "patch": "@@ -9916,9 +9916,30 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n           /* We only want to compute the number of arguments.  */\n           tree expanded = tsubst_pack_expansion (TREE_OPERAND (t, 0), args,\n                                                 complain, in_decl);\n+\t  int len;\n+\n+\t  if (TREE_CODE (expanded) == TREE_VEC)\n+\t    len = TREE_VEC_LENGTH (expanded);\n+\n \t  if (expanded == error_mark_node)\n \t    return error_mark_node;\n-          return build_int_cst (size_type_node, TREE_VEC_LENGTH (expanded));\n+\t  else if (PACK_EXPANSION_P (expanded)\n+\t\t   || (TREE_CODE (expanded) == TREE_VEC\n+\t\t       && len > 0\n+\t\t       && PACK_EXPANSION_P (TREE_VEC_ELT (expanded, len-1))))\n+\t    {\n+\t      if (TREE_CODE (expanded) == TREE_VEC)\n+\t\texpanded = TREE_VEC_ELT (expanded, len - 1);\n+\n+\t      if (TYPE_P (expanded))\n+\t\treturn cxx_sizeof_or_alignof_type (expanded, SIZEOF_EXPR, \n+\t\t\t\t\t\t   complain & tf_error);\n+\t      else\n+\t\treturn cxx_sizeof_or_alignof_expr (expanded, SIZEOF_EXPR,\n+                                                   complain & tf_error);\n+\t    }\n+\t  else\n+\t    return build_int_cst (size_type_node, len);\n         }\n       /* Fall through */\n \n@@ -10918,14 +10939,7 @@ tsubst_copy_and_build (tree t,\n \n     case SIZEOF_EXPR:\n       if (PACK_EXPANSION_P (TREE_OPERAND (t, 0)))\n-        {\n-          /* We only want to compute the number of arguments.  */\n-          tree expanded = tsubst_pack_expansion (TREE_OPERAND (t, 0), args,\n-                                                complain, in_decl);\n-\t  if (expanded == error_mark_node)\n-\t    return error_mark_node;\n-          return build_int_cst (size_type_node, TREE_VEC_LENGTH (expanded));\n-        }\n+\treturn tsubst_copy (t, args, complain, in_decl);\n       /* Fall through */\n       \n     case ALIGNOF_EXPR:\n@@ -12920,7 +12934,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t    tree parmvec = TYPE_TI_ARGS (parm);\n \t    tree argvec = INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (arg));\n \t    tree parm_parms \n-\t      = DECL_INNERMOST_TEMPLATE_PARMS \n+              = DECL_INNERMOST_TEMPLATE_PARMS\n \t          (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (parm));\n \t    int i, len;\n             int parm_variadic_p = 0;"}, {"sha": "42b5dcd80e93562ecdd87f3973c7e34234e06ac4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=063cc99c4658d52b33b37f4173d304efa9c68b00", "patch": "@@ -1,3 +1,7 @@\n+2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       * g++.dg/cpp0x/variadic91.C: New.\n+\n 2008-03-27  Zdenek Dvorak  <ook@ucw.cz>\n \n \t* gcc.dg/tree-ssa/loop-32.c: New testcase."}, {"sha": "d78b791fbf46efcedd3a6b243ad99d3e4da5c0e4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic91.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic91.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/063cc99c4658d52b33b37f4173d304efa9c68b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic91.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic91.C?ref=063cc99c4658d52b33b37f4173d304efa9c68b00", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=c++0x\" }\n+template<int N> struct Int2Type { };\n+\n+template<typename... T>\n+struct Outer {\n+  template<typename... U>\n+  void foo(Int2Type<sizeof...(T)>, Int2Type<sizeof...(U)>);\n+};\n+\n+\n+Outer<short, int, long> outer;\n+\n+void g4() {\n+  outer.foo<float, double>(Int2Type<3>(), Int2Type<2>());\n+}\n+\n+template<typename... T, template<T...> class X> void f1();"}]}