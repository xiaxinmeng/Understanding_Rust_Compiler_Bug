{"sha": "a4187dab5248cb42781fa6b2f57b95214c4f8b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxODdkYWI1MjQ4Y2I0Mjc4MWZhNmIyZjU3Yjk1MjE0YzRmOGIwMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-07-04T15:19:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-07-04T15:19:30Z"}, "message": "[AArch64] Fix strict aliasing issue in gcc.target/aarch64/simd/vminmaxnm_1.c\n\nWhile doing some unrelated work the gcc.target/aarch64/simd/vminmaxnm_1.c testcase started failing for me.\nUpon investigation it turns out that it breaks the C strict aliasing rules in the CHECK macro by casting\na pointer to an incompatible type and dereferencing it. GCC even warns about it if compiled with -Wstrict-aliasing.\n\nThis patch fixes the testcase by making it use memcmp to compare the vector elements.\nThis avoids the undefined behaviour.\n\nThe testcase still passes on trunk.\n\n    * gcc.target/aarch64/simd/vminmaxnm_1.c: Fix strict aliasing issues.\n\nFrom-SVN: r249972", "tree": {"sha": "310ea9d605948ad95674b68d4a99d9ea310e4723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/310ea9d605948ad95674b68d4a99d9ea310e4723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4187dab5248cb42781fa6b2f57b95214c4f8b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4187dab5248cb42781fa6b2f57b95214c4f8b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4187dab5248cb42781fa6b2f57b95214c4f8b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4187dab5248cb42781fa6b2f57b95214c4f8b03/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5006165236a38c35040a76e676a7ba134e71aa67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5006165236a38c35040a76e676a7ba134e71aa67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5006165236a38c35040a76e676a7ba134e71aa67"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "f1fbe61d131c19e478df153469a59732a909c197", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4187dab5248cb42781fa6b2f57b95214c4f8b03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4187dab5248cb42781fa6b2f57b95214c4f8b03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4187dab5248cb42781fa6b2f57b95214c4f8b03", "patch": "@@ -1,3 +1,7 @@\n+2017-07-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vminmaxnm_1.c: Fix strict aliasing issues.\n+\n 2017-07-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81231"}, {"sha": "8fd428115bafe8977cb4c331491835f5049f6874", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vminmaxnm_1.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4187dab5248cb42781fa6b2f57b95214c4f8b03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4187dab5248cb42781fa6b2f57b95214c4f8b03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c?ref=a4187dab5248cb42781fa6b2f57b95214c4f8b03", "patch": "@@ -7,12 +7,10 @@\n \n extern void abort ();\n \n-#define CHECK(T, N, R, E) \\\n+#define CHECK(R, E) \\\n   {\\\n-    int i = 0;\\\n-    for (; i < N; i++)\\\n-      if (* (T *) &R[i] != * (T *) &E[i])\\\n-\tabort ();\\\n+    if (__builtin_memcmp (&R, &E, sizeof (R)) != 0)\\\n+      abort ();\\\n   }\n \n int\n@@ -26,8 +24,8 @@ main (int argc, char **argv)\n   float32x2_t f32x2_ret_minnm  = vminnm_f32 (f32x2_input1, f32x2_input2);\n   float32x2_t f32x2_ret_maxnm  = vmaxnm_f32 (f32x2_input1, f32x2_input2);\n \n-  CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n-  CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n+  CHECK (f32x2_ret_minnm, f32x2_exp_minnm);\n+  CHECK (f32x2_ret_maxnm, f32x2_exp_maxnm);\n \n   /* v{min|max}nm_f32 NaN.  */\n   f32x2_input1 = vdup_n_f32 (__builtin_nanf (\"\"));\n@@ -37,8 +35,8 @@ main (int argc, char **argv)\n   f32x2_ret_minnm  = vminnm_f32 (f32x2_input1, f32x2_input2);\n   f32x2_ret_maxnm  = vmaxnm_f32 (f32x2_input1, f32x2_input2);\n \n-  CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n-  CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n+  CHECK (f32x2_ret_minnm, f32x2_exp_minnm);\n+  CHECK (f32x2_ret_maxnm, f32x2_exp_maxnm);\n \n   /* v{min|max}nmq_f32 normal.  */\n   float32x4_t f32x4_input1 = vdupq_n_f32 (-1024.0);\n@@ -48,8 +46,8 @@ main (int argc, char **argv)\n   float32x4_t f32x4_ret_minnm  = vminnmq_f32 (f32x4_input1, f32x4_input2);\n   float32x4_t f32x4_ret_maxnm  = vmaxnmq_f32 (f32x4_input1, f32x4_input2);\n \n-  CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n-  CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n+  CHECK (f32x4_ret_minnm, f32x4_exp_minnm);\n+  CHECK (f32x4_ret_maxnm, f32x4_exp_maxnm);\n \n   /* v{min|max}nmq_f32 NaN.  */\n   f32x4_input1 = vdupq_n_f32 (-__builtin_nanf (\"\"));\n@@ -59,8 +57,8 @@ main (int argc, char **argv)\n   f32x4_ret_minnm  = vminnmq_f32 (f32x4_input1, f32x4_input2);\n   f32x4_ret_maxnm  = vmaxnmq_f32 (f32x4_input1, f32x4_input2);\n \n-  CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n-  CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n+  CHECK (f32x4_ret_minnm, f32x4_exp_minnm);\n+  CHECK (f32x4_ret_maxnm, f32x4_exp_maxnm);\n \n   /* v{min|max}nm_f64 normal.  */\n   float64x1_t f64x1_input1 = vdup_n_f64 (1.23);\n@@ -69,16 +67,16 @@ main (int argc, char **argv)\n   float64x1_t f64x1_exp_maxnm  = vdup_n_f64 (4.56);\n   float64x1_t f64x1_ret_minnm  = vminnm_f64 (f64x1_input1, f64x1_input2);\n   float64x1_t f64x1_ret_maxnm  = vmaxnm_f64 (f64x1_input1, f64x1_input2);\n-  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n-  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+  CHECK (f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (f64x1_ret_maxnm, f64x1_exp_maxnm);\n \n   /* v{min|max}_f64 normal.  */\n   float64x1_t f64x1_exp_min  = vdup_n_f64 (1.23);\n   float64x1_t f64x1_exp_max  = vdup_n_f64 (4.56);\n   float64x1_t f64x1_ret_min  = vmin_f64 (f64x1_input1, f64x1_input2);\n   float64x1_t f64x1_ret_max  = vmax_f64 (f64x1_input1, f64x1_input2);\n-  CHECK (uint64_t, 1, f64x1_ret_min, f64x1_exp_min);\n-  CHECK (uint64_t, 1, f64x1_ret_max, f64x1_exp_max);\n+  CHECK (f64x1_ret_min, f64x1_exp_min);\n+  CHECK (f64x1_ret_max, f64x1_exp_max);\n \n   /* v{min|max}nmq_f64 normal.  */\n   float64x2_t f64x2_input1 = vdupq_n_f64 (1.23);\n@@ -87,8 +85,8 @@ main (int argc, char **argv)\n   float64x2_t f64x2_exp_maxnm  = vdupq_n_f64 (4.56);\n   float64x2_t f64x2_ret_minnm  = vminnmq_f64 (f64x2_input1, f64x2_input2);\n   float64x2_t f64x2_ret_maxnm  = vmaxnmq_f64 (f64x2_input1, f64x2_input2);\n-  CHECK (uint64_t, 2, f64x2_ret_minnm, f64x2_exp_minnm);\n-  CHECK (uint64_t, 2, f64x2_ret_maxnm, f64x2_exp_maxnm);\n+  CHECK (f64x2_ret_minnm, f64x2_exp_minnm);\n+  CHECK (f64x2_ret_maxnm, f64x2_exp_maxnm);\n \n   /* v{min|max}nm_f64 NaN.  */\n   f64x1_input1 = vdup_n_f64 (-__builtin_nanf (\"\"));\n@@ -98,8 +96,8 @@ main (int argc, char **argv)\n   f64x1_ret_minnm  = vminnm_f64 (f64x1_input1, f64x1_input2);\n   f64x1_ret_maxnm  = vmaxnm_f64 (f64x1_input1, f64x1_input2);\n \n-  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n-  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+  CHECK (f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (f64x1_ret_maxnm, f64x1_exp_maxnm);\n \n   /* v{min|max}_f64 NaN.  */\n   f64x1_input1 = vdup_n_f64 (-__builtin_nanf (\"\"));\n@@ -109,8 +107,8 @@ main (int argc, char **argv)\n   f64x1_ret_minnm  = vmin_f64 (f64x1_input1, f64x1_input2);\n   f64x1_ret_maxnm  = vmax_f64 (f64x1_input1, f64x1_input2);\n \n-  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n-  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+  CHECK (f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (f64x1_ret_maxnm, f64x1_exp_maxnm);\n \n   /* v{min|max}nmq_f64 NaN.  */\n   f64x2_input1 = vdupq_n_f64 (-__builtin_nan (\"\"));\n@@ -120,8 +118,8 @@ main (int argc, char **argv)\n   f64x2_ret_minnm  = vminnmq_f64 (f64x2_input1, f64x2_input2);\n   f64x2_ret_maxnm  = vmaxnmq_f64 (f64x2_input1, f64x2_input2);\n \n-  CHECK (uint64_t, 2, f64x2_ret_minnm, f64x2_exp_minnm);\n-  CHECK (uint64_t, 2, f64x2_ret_maxnm, f64x2_exp_maxnm);\n+  CHECK (f64x2_ret_minnm, f64x2_exp_minnm);\n+  CHECK (f64x2_ret_maxnm, f64x2_exp_maxnm);\n \n   return 0;\n }"}]}