{"sha": "7fcf46f509414d97aea64a10f441781ad8c4b9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjZjQ2ZjUwOTQxNGQ5N2FlYTY0YTEwZjQ0MTc4MWFkOGM0YjlkZQ==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2011-02-23T02:04:43Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2011-02-23T02:04:43Z"}, "message": "opts-common.c (decode_cmdline_option): Print empty string argument as \"\" in decoded->orig_option_with_args_text.\n\n\t* opts-common.c (decode_cmdline_option): Print empty string\n\targument as \"\" in decoded->orig_option_with_args_text.\n\t* gcc.c (execute): Print empty string argument as \"\"\n\tin the verbose output.\n\t(do_spec_1): Keep empty string argument.\n\n\ttestsuite/\n\t* gcc.dg/cpp/include7.c: New test.\n\nFrom-SVN: r170426", "tree": {"sha": "da36449698452cc5da633bd67569a6ff13a6529d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da36449698452cc5da633bd67569a6ff13a6529d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcf46f509414d97aea64a10f441781ad8c4b9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcf46f509414d97aea64a10f441781ad8c4b9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcf46f509414d97aea64a10f441781ad8c4b9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcf46f509414d97aea64a10f441781ad8c4b9de/comments", "author": null, "committer": null, "parents": [{"sha": "f85b70fda4fca7f96777eebef3956383bbf4771f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85b70fda4fca7f96777eebef3956383bbf4771f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85b70fda4fca7f96777eebef3956383bbf4771f"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "aaa703d28cd71ad44d9579dda382ff77ac1aa071", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fcf46f509414d97aea64a10f441781ad8c4b9de", "patch": "@@ -1,3 +1,11 @@\n+2011-02-23  Jie Zhang  <jie@codesourcery.com>\n+\n+\t* opts-common.c (decode_cmdline_option): Print empty string\n+\targument as \"\" in decoded->orig_option_with_args_text.\n+\t* gcc.c (execute): Print empty string argument as \"\"\n+\tin the verbose output.\n+\t(do_spec_1): Keep empty string argument.\n+\n 2011-02-23  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config.gcc: Declare score-* and crx-* obsolete."}, {"sha": "75f522e1db5180b770887467af42ad5799803dbd", "filename": "gcc/gcc.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=7fcf46f509414d97aea64a10f441781ad8c4b9de", "patch": "@@ -2538,13 +2538,20 @@ execute (void)\n \t\t\t}\n \t\t      fputc ('\"', stderr);\n \t\t    }\n+\t\t  /* If it's empty, print \"\".  */\n+\t\t  else if (!**j)\n+\t\t    fprintf (stderr, \" \\\"\\\"\");\n \t\t  else\n \t\t    fprintf (stderr, \" %s\", *j);\n \t\t}\n \t    }\n \t  else\n \t    for (j = commands[i].argv; *j; j++)\n-\t      fprintf (stderr, \" %s\", *j);\n+\t      /* If it's empty, print \"\".  */\n+\t      if (!**j)\n+\t\tfprintf (stderr, \" \\\"\\\"\");\n+\t      else\n+\t\tfprintf (stderr, \" %s\", *j);\n \n \t  /* Print a pipe symbol after all but the last command.  */\n \t  if (i + 1 != n_commands)\n@@ -4423,6 +4430,10 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n   int i;\n   int value;\n \n+  /* If it's an empty string argument to a switch, keep it as is.  */\n+  if (inswitch && !*p)\n+    arg_going = 1;\n+\n   while ((c = *p++))\n     /* If substituting a switch, treat all chars like letters.\n        Otherwise, NL, SPC, TAB and % are special.  */\n@@ -5149,7 +5160,8 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t  case '*':\n \t    if (soft_matched_part)\n \t      {\n-\t\tdo_spec_1 (soft_matched_part, 1, NULL);\n+\t\tif (soft_matched_part[0])\n+\t\t  do_spec_1 (soft_matched_part, 1, NULL);\n \t\tdo_spec_1 (\" \", 0, NULL);\n \t      }\n \t    else"}, {"sha": "f958b7ed95355dc6dcb03fe3045df9ac3cc40138", "filename": "gcc/opts-common.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=7fcf46f509414d97aea64a10f441781ad8c4b9de", "patch": "@@ -607,11 +607,15 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n       if (i < result)\n \t{\n+\t  size_t len;\n \t  if (opt_index == OPT_SPECIAL_unknown)\n \t    decoded->canonical_option[i] = argv[i];\n \t  else\n \t    decoded->canonical_option[i] = NULL;\n-\t  total_len += strlen (argv[i]) + 1;\n+\t  len = strlen (argv[i]);\n+\t  /* If the argument is an empty string, we will print it as \"\" in\n+\t     orig_option_with_args_text.  */\n+\t  total_len += (len != 0 ? len : 2) + 1;\n \t}\n       else\n \tdecoded->canonical_option[i] = NULL;\n@@ -637,7 +641,14 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n       size_t len = strlen (argv[i]);\n \n-      memcpy (p, argv[i], len);\n+      /* Print the empty string verbally.  */\n+      if (len == 0)\n+\t{\n+\t  *p++ = '\"';\n+\t  *p++ = '\"';\n+\t}\n+      else\n+\tmemcpy (p, argv[i], len);\n       p += len;\n       if (i == result - 1)\n \t*p++ = 0;"}, {"sha": "60e924bcf3986781b463f3b7036659b0fd444322", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fcf46f509414d97aea64a10f441781ad8c4b9de", "patch": "@@ -1,3 +1,7 @@\n+2011-02-23  Jie Zhang  <jie@codesourcery.com>\n+\n+\t* gcc.dg/cpp/include7.c: New test.\n+\n 2011-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/47242"}, {"sha": "0e95601f77708d2fa065d971ba693165a197cbb5", "filename": "gcc/testsuite/gcc.dg/cpp/include7.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcf46f509414d97aea64a10f441781ad8c4b9de/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude7.c?ref=7fcf46f509414d97aea64a10f441781ad8c4b9de", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-I \\\"\\\"\" } */\n+"}]}