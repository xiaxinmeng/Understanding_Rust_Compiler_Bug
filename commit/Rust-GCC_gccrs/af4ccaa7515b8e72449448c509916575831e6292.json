{"sha": "af4ccaa7515b8e72449448c509916575831e6292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0Y2NhYTc1MTViOGU3MjQ0OTQ0OGM1MDk5MTY1NzU4MzFlNjI5Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-29T09:52:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-29T09:55:12Z"}, "message": "tree-optimization/100253 - fix bogus aligned vectorized loads/stores\n\nAt some point DR_MISALIGNMENT was supposed to be -1 when the\naccess was not element aligned.  That's obviously not true at this\npoint so this adjusts both store and load vectorizing to no longer\nassume this which in turn allows simplifying the code.\n\n2021-04-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100253\n\t* tree-vect-stmts.c (vectorizable_load): Do not assume\n\telement alignment when DR_MISALIGNMENT is -1.\n\t(vectorizable_store): Likewise.\n\n\t* g++.dg/pr100253.C: New testcase.", "tree": {"sha": "ee7992b6ec100baca95eeaf5b04c28a6dee4e9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7992b6ec100baca95eeaf5b04c28a6dee4e9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4ccaa7515b8e72449448c509916575831e6292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4ccaa7515b8e72449448c509916575831e6292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4ccaa7515b8e72449448c509916575831e6292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4ccaa7515b8e72449448c509916575831e6292/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a44a9797edce11b1f7051ea0016ee975d41233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a44a9797edce11b1f7051ea0016ee975d41233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a44a9797edce11b1f7051ea0016ee975d41233"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "0102caa7df863a04265d1a4a96507b231700b68c", "filename": "gcc/testsuite/g++.dg/pr100253.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4ccaa7515b8e72449448c509916575831e6292/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100253.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4ccaa7515b8e72449448c509916575831e6292/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100253.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100253.C?ref=af4ccaa7515b8e72449448c509916575831e6292", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-tree-bit-ccp -ftree-slp-vectorize\" } */\n+\n+#include <vector>\n+\n+struct T\n+{\n+};\n+\n+struct S\n+{\n+  std::vector < std::vector < T > > v;\n+  char x;\n+  char y[16];\n+  char z[16];\n+};\n+\n+S s, g[1];\n+\n+void\n+foo (char *buf)\n+{\n+  s = g[*buf];\n+}\n+\n+char c;\n+\n+int\n+main ()\n+{\n+  foo (&c);\n+  return 0;\n+}"}, {"sha": "bd2a1c89e6708314efdad3274d100a5b3d6e62b1", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4ccaa7515b8e72449448c509916575831e6292/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4ccaa7515b8e72449448c509916575831e6292/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=af4ccaa7515b8e72449448c509916575831e6292", "patch": "@@ -8166,6 +8166,7 @@ vectorizable_store (vec_info *vinfo,\n \t\t  && TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\tset_ptr_info_alignment (get_ptr_info (dataref_ptr), align,\n \t\t\t\t\tmisalign);\n+\t      align = least_bit_hwi (misalign | align);\n \n \t      if (memory_access_type == VMAT_CONTIGUOUS_REVERSE)\n \t\t{\n@@ -8187,7 +8188,6 @@ vectorizable_store (vec_info *vinfo,\n \t      /* Arguments are ready.  Create the new vector stmt.  */\n \t      if (final_mask)\n \t\t{\n-\t\t  align = least_bit_hwi (misalign | align);\n \t\t  tree ptr = build_int_cst (ref_type, align * BITS_PER_UNIT);\n \t\t  gcall *call\n \t\t    = gimple_build_call_internal (IFN_MASK_STORE, 4,\n@@ -8202,7 +8202,6 @@ vectorizable_store (vec_info *vinfo,\n \t\t  tree final_len\n \t\t    = vect_get_loop_len (loop_vinfo, loop_lens,\n \t\t\t\t\t vec_num * ncopies, vec_num * j + i);\n-\t\t  align = least_bit_hwi (misalign | align);\n \t\t  tree ptr = build_int_cst (ref_type, align * BITS_PER_UNIT);\n \t\t  machine_mode vmode = TYPE_MODE (vectype);\n \t\t  opt_machine_mode new_ovmode\n@@ -8241,14 +8240,10 @@ vectorizable_store (vec_info *vinfo,\n \t\t\t\t\t  : build_int_cst (ref_type, 0));\n \t\t  if (aligned_access_p (first_dr_info))\n \t\t    ;\n-\t\t  else if (DR_MISALIGNMENT (first_dr_info) == -1)\n-\t\t    TREE_TYPE (data_ref)\n-\t\t      = build_aligned_type (TREE_TYPE (data_ref),\n-\t\t\t\t\t    align * BITS_PER_UNIT);\n \t\t  else\n \t\t    TREE_TYPE (data_ref)\n \t\t      = build_aligned_type (TREE_TYPE (data_ref),\n-\t\t\t\t\t    TYPE_ALIGN (elem_type));\n+\t\t\t\t\t    align * BITS_PER_UNIT);\n \t\t  vect_copy_ref_info (data_ref, DR_REF (first_dr_info->dr));\n \t\t  new_stmt = gimple_build_assign (data_ref, vec_oprnd);\n \t\t  vect_finish_stmt_generation (vinfo, stmt_info, new_stmt, gsi);\n@@ -9452,10 +9447,10 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t&& TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\t      set_ptr_info_alignment (get_ptr_info (dataref_ptr),\n \t\t\t\t\t      align, misalign);\n+\t\t    align = least_bit_hwi (misalign | align);\n \n \t\t    if (final_mask)\n \t\t      {\n-\t\t\talign = least_bit_hwi (misalign | align);\n \t\t\ttree ptr = build_int_cst (ref_type,\n \t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\tgcall *call\n@@ -9472,7 +9467,6 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t  = vect_get_loop_len (loop_vinfo, loop_lens,\n \t\t\t\t\t       vec_num * ncopies,\n \t\t\t\t\t       vec_num * j + i);\n-\t\t\talign = least_bit_hwi (misalign | align);\n \t\t\ttree ptr = build_int_cst (ref_type,\n \t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\tgcall *call\n@@ -9548,14 +9542,10 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t  = fold_build2 (MEM_REF, ltype, dataref_ptr, offset);\n \t\t\tif (alignment_support_scheme == dr_aligned)\n \t\t\t  ;\n-\t\t\telse if (DR_MISALIGNMENT (first_dr_info) == -1)\n-\t\t\t  TREE_TYPE (data_ref)\n-\t\t\t    = build_aligned_type (TREE_TYPE (data_ref),\n-\t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\telse\n \t\t\t  TREE_TYPE (data_ref)\n \t\t\t    = build_aligned_type (TREE_TYPE (data_ref),\n-\t\t\t\t\t\t  TYPE_ALIGN (elem_type));\n+\t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\tif (ltype != vectype)\n \t\t\t  {\n \t\t\t    vect_copy_ref_info (data_ref,"}]}