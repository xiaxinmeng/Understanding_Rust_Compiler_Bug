{"sha": "d21cefc26f716395b03e3c0d379ecac04656f963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxY2VmYzI2ZjcxNjM5NWIwM2UzYzBkMzc5ZWNhYzA0NjU2Zjk2Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:19:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:19:17Z"}, "message": "[64/77] Add a scalar_mode class\n\nThis patch adds a scalar_mode class that can hold any scalar mode,\nspecifically:\n\n  - scalar integers\n  - scalar floating-point values\n  - scalar fractional modes\n  - scalar accumulator modes\n  - pointer bounds modes\n\nTo start with this patch uses this type for GET_MODE_INNER.\nLater patches add more uses.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* coretypes.h (scalar_mode): New class.\n\t* machmode.h (scalar_mode): Likewise.\n\t(scalar_mode::includes_p): New function.\n\t(mode_to_inner): Return a scalar_mode rather than a machine_mode.\n\t* gdbhooks.py (build_pretty_printers): Handle scalar_mode.\n\t* genmodes.c (get_mode_class): Handle remaining scalar modes.\n\t* cfgexpand.c (expand_debug_expr): Use scalar_mode.\n\t* expmed.c (store_bit_field_1): Likewise.\n\t(extract_bit_field_1): Likewise.\n\t* expr.c (write_complex_part): Likewise.\n\t(read_complex_part): Likewise.\n\t(emit_move_complex_push): Likewise.\n\t(expand_expr_real_2): Likewise.\n\t* function.c (assign_parm_setup_reg): Likewise.\n\t(assign_parms_unsplit_complex): Likewise.\n\t* optabs.c (expand_binop): Likewise.\n\t* rtlanal.c (subreg_get_info): Likewise.\n\t* simplify-rtx.c (simplify_immed_subreg): Likewise.\n\t* varasm.c (output_constant_pool_2): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251515", "tree": {"sha": "23cc0255a69adb29141d859194421f1c78fc961d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23cc0255a69adb29141d859194421f1c78fc961d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21cefc26f716395b03e3c0d379ecac04656f963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21cefc26f716395b03e3c0d379ecac04656f963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21cefc26f716395b03e3c0d379ecac04656f963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21cefc26f716395b03e3c0d379ecac04656f963/comments", "author": null, "committer": null, "parents": [{"sha": "90970acd061f18e5e97162a36b92555ad162ed34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90970acd061f18e5e97162a36b92555ad162ed34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90970acd061f18e5e97162a36b92555ad162ed34"}], "stats": {"total": 136, "additions": 105, "deletions": 31}, "files": [{"sha": "d9895f36e9ef73f52950e1d29a2890dc036017bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -1,3 +1,27 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* coretypes.h (scalar_mode): New class.\n+\t* machmode.h (scalar_mode): Likewise.\n+\t(scalar_mode::includes_p): New function.\n+\t(mode_to_inner): Return a scalar_mode rather than a machine_mode.\n+\t* gdbhooks.py (build_pretty_printers): Handle scalar_mode.\n+\t* genmodes.c (get_mode_class): Handle remaining scalar modes.\n+\t* cfgexpand.c (expand_debug_expr): Use scalar_mode.\n+\t* expmed.c (store_bit_field_1): Likewise.\n+\t(extract_bit_field_1): Likewise.\n+\t* expr.c (write_complex_part): Likewise.\n+\t(read_complex_part): Likewise.\n+\t(emit_move_complex_push): Likewise.\n+\t(expand_expr_real_2): Likewise.\n+\t* function.c (assign_parm_setup_reg): Likewise.\n+\t(assign_parms_unsplit_complex): Likewise.\n+\t* optabs.c (expand_binop): Likewise.\n+\t* rtlanal.c (subreg_get_info): Likewise.\n+\t* simplify-rtx.c (simplify_immed_subreg): Likewise.\n+\t* varasm.c (output_constant_pool_2): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7f5c97bfc7c14da30ab5db904fded168202b020d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -4823,7 +4823,7 @@ expand_debug_expr (tree exp)\n \t\t\t\t\t\t   GET_MODE_INNER (mode)));\n       else\n \t{\n-\t  machine_mode imode = GET_MODE_INNER (mode);\n+\t  scalar_mode imode = GET_MODE_INNER (mode);\n \t  rtx re, im;\n \n \t  if (MEM_P (op0))"}, {"sha": "a9f105ceeef8e0083659828988694f3476119321", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -55,6 +55,7 @@ typedef const struct simple_bitmap_def *const_sbitmap;\n struct rtx_def;\n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;\n+class scalar_mode;\n class scalar_int_mode;\n class scalar_float_mode;\n template<typename> class opt_mode;\n@@ -317,6 +318,7 @@ union _dont_use_tree_here_;\n #define tree union _dont_use_tree_here_ *\n #define const_tree union _dont_use_tree_here_ *\n \n+typedef struct scalar_mode scalar_mode;\n typedef struct scalar_int_mode scalar_int_mode;\n typedef struct scalar_float_mode scalar_float_mode;\n "}, {"sha": "f38fb3177709d5db02b56da64a050629309885fa", "filename": "gcc/expmed.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -761,16 +761,16 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   /* Use vec_set patterns for inserting parts of vectors whenever\n      available.  */\n-  if (VECTOR_MODE_P (GET_MODE (op0))\n+  machine_mode outermode = GET_MODE (op0);\n+  scalar_mode innermode = GET_MODE_INNER (outermode);\n+  if (VECTOR_MODE_P (outermode)\n       && !MEM_P (op0)\n-      && optab_handler (vec_set_optab, GET_MODE (op0)) != CODE_FOR_nothing\n-      && fieldmode == GET_MODE_INNER (GET_MODE (op0))\n-      && bitsize == GET_MODE_UNIT_BITSIZE (GET_MODE (op0))\n-      && !(bitnum % GET_MODE_UNIT_BITSIZE (GET_MODE (op0))))\n+      && optab_handler (vec_set_optab, outermode) != CODE_FOR_nothing\n+      && fieldmode == innermode\n+      && bitsize == GET_MODE_BITSIZE (innermode)\n+      && !(bitnum % GET_MODE_BITSIZE (innermode)))\n     {\n       struct expand_operand ops[3];\n-      machine_mode outermode = GET_MODE (op0);\n-      machine_mode innermode = GET_MODE_INNER (outermode);\n       enum insn_code icode = optab_handler (vec_set_optab, outermode);\n       int pos = bitnum / GET_MODE_BITSIZE (innermode);\n \n@@ -1672,17 +1672,16 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   /* Use vec_extract patterns for extracting parts of vectors whenever\n      available.  */\n-  if (VECTOR_MODE_P (GET_MODE (op0))\n+  machine_mode outermode = GET_MODE (op0);\n+  scalar_mode innermode = GET_MODE_INNER (outermode);\n+  if (VECTOR_MODE_P (outermode)\n       && !MEM_P (op0)\n-      && (convert_optab_handler (vec_extract_optab, GET_MODE (op0),\n-\t\t\t\t GET_MODE_INNER (GET_MODE (op0)))\n+      && (convert_optab_handler (vec_extract_optab, outermode, innermode)\n \t  != CODE_FOR_nothing)\n-      && ((bitnum + bitsize - 1) / GET_MODE_UNIT_BITSIZE (GET_MODE (op0))\n-\t  == bitnum / GET_MODE_UNIT_BITSIZE (GET_MODE (op0))))\n+      && ((bitnum + bitsize - 1) / GET_MODE_BITSIZE (innermode)\n+\t  == bitnum / GET_MODE_BITSIZE (innermode)))\n     {\n       struct expand_operand ops[3];\n-      machine_mode outermode = GET_MODE (op0);\n-      machine_mode innermode = GET_MODE_INNER (outermode);\n       enum insn_code icode\n \t= convert_optab_handler (vec_extract_optab, outermode, innermode);\n       unsigned HOST_WIDE_INT pos = bitnum / GET_MODE_BITSIZE (innermode);"}, {"sha": "71a81ef1f3069bffb83209078c0b169dbe1a0a26", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -3115,7 +3115,7 @@ void\n write_complex_part (rtx cplx, rtx val, bool imag_p)\n {\n   machine_mode cmode;\n-  machine_mode imode;\n+  scalar_mode imode;\n   unsigned ibitsize;\n \n   if (GET_CODE (cplx) == CONCAT)\n@@ -3176,7 +3176,8 @@ write_complex_part (rtx cplx, rtx val, bool imag_p)\n rtx\n read_complex_part (rtx cplx, bool imag_p)\n {\n-  machine_mode cmode, imode;\n+  machine_mode cmode;\n+  scalar_mode imode;\n   unsigned ibitsize;\n \n   if (GET_CODE (cplx) == CONCAT)\n@@ -3372,7 +3373,7 @@ emit_move_resolve_push (machine_mode mode, rtx x)\n rtx_insn *\n emit_move_complex_push (machine_mode mode, rtx x, rtx y)\n {\n-  machine_mode submode = GET_MODE_INNER (mode);\n+  scalar_mode submode = GET_MODE_INNER (mode);\n   bool imag_first;\n \n #ifdef PUSH_ROUNDING\n@@ -9335,7 +9336,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t\t\t      GET_MODE_INNER (GET_MODE (target)), 0);\n \t    if (reg_overlap_mentioned_p (temp, op1))\n \t      {\n-\t\tmachine_mode imode = GET_MODE_INNER (GET_MODE (target));\n+\t\tscalar_mode imode = GET_MODE_INNER (GET_MODE (target));\n \t\ttemp = adjust_address_nv (target, imode,\n \t\t\t\t\t  GET_MODE_SIZE (imode));\n \t\tif (reg_overlap_mentioned_p (temp, op0))"}, {"sha": "af5e050b8a6f50bc6ec0eb163b5e04aabbbec6ea", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -3365,8 +3365,7 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n       /* Mark complex types separately.  */\n       if (GET_CODE (parmreg) == CONCAT)\n \t{\n-\t  machine_mode submode\n-\t    = GET_MODE_INNER (GET_MODE (parmreg));\n+\t  scalar_mode submode = GET_MODE_INNER (GET_MODE (parmreg));\n \t  int regnor = REGNO (XEXP (parmreg, 0));\n \t  int regnoi = REGNO (XEXP (parmreg, 1));\n \t  rtx stackr = adjust_address_nv (data->stack_parm, submode, 0);\n@@ -3503,7 +3502,7 @@ assign_parms_unsplit_complex (struct assign_parm_data_all *all,\n \t  && targetm.calls.split_complex_arg (TREE_TYPE (parm)))\n \t{\n \t  rtx tmp, real, imag;\n-\t  machine_mode inner = GET_MODE_INNER (DECL_MODE (parm));\n+\t  scalar_mode inner = GET_MODE_INNER (DECL_MODE (parm));\n \n \t  real = DECL_RTL (fnargs[i]);\n \t  imag = DECL_RTL (fnargs[i + 1]);"}, {"sha": "8799e3fbfd9153436ca0d7d2cc973af533a44517", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -549,7 +549,7 @@ def build_pretty_printer():\n                              'pod_mode', MachineModePrinter)\n     pp.add_printer_for_types(['scalar_int_mode_pod'],\n                              'pod_mode', MachineModePrinter)\n-    for mode in 'scalar_int_mode', 'scalar_float_mode':\n+    for mode in 'scalar_mode', 'scalar_int_mode', 'scalar_float_mode':\n         pp.add_printer_for_types([mode], mode, MachineModePrinter)\n \n     return pp"}, {"sha": "ab3f999c9995e78a403f21a21064c69ca502c6a6", "filename": "gcc/genmodes.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -1141,6 +1141,13 @@ get_mode_class (struct mode_data *mode)\n     case MODE_PARTIAL_INT:\n       return \"scalar_int_mode\";\n \n+    case MODE_FRACT:\n+    case MODE_UFRACT:\n+    case MODE_ACCUM:\n+    case MODE_UACCUM:\n+    case MODE_POINTER_BOUNDS:\n+      return \"scalar_mode\";\n+\n     case MODE_FLOAT:\n     case MODE_DECIMAL_FLOAT:\n       return \"scalar_float_mode\";"}, {"sha": "4586d62b81a29260042bd4c5ccda308b9de714cf", "filename": "gcc/machmode.h", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -409,6 +409,47 @@ scalar_float_mode::includes_p (machine_mode m)\n   return SCALAR_FLOAT_MODE_P (m);\n }\n \n+/* Represents a machine mode that is known to be scalar.  */\n+class scalar_mode\n+{\n+public:\n+  typedef mode_traits<scalar_mode>::from_int from_int;\n+\n+  ALWAYS_INLINE scalar_mode () {}\n+  ALWAYS_INLINE scalar_mode (from_int m) : m_mode (machine_mode (m)) {}\n+  ALWAYS_INLINE scalar_mode (const scalar_int_mode &m) : m_mode (m) {}\n+  ALWAYS_INLINE scalar_mode (const scalar_float_mode &m) : m_mode (m) {}\n+  ALWAYS_INLINE scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}\n+  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  static bool includes_p (machine_mode);\n+\n+protected:\n+  machine_mode m_mode;\n+};\n+\n+/* Return true if M represents some kind of scalar value.  */\n+\n+inline bool\n+scalar_mode::includes_p (machine_mode m)\n+{\n+  switch (GET_MODE_CLASS (m))\n+    {\n+    case MODE_INT:\n+    case MODE_PARTIAL_INT:\n+    case MODE_FRACT:\n+    case MODE_UFRACT:\n+    case MODE_ACCUM:\n+    case MODE_UACCUM:\n+    case MODE_FLOAT:\n+    case MODE_DECIMAL_FLOAT:\n+    case MODE_POINTER_BOUNDS:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Return the base GET_MODE_SIZE value for MODE.  */\n \n ALWAYS_INLINE unsigned short\n@@ -440,14 +481,15 @@ mode_to_precision (machine_mode mode)\n \n /* Return the base GET_MODE_INNER value for MODE.  */\n \n-ALWAYS_INLINE machine_mode\n+ALWAYS_INLINE scalar_mode\n mode_to_inner (machine_mode mode)\n {\n #if GCC_VERSION >= 4001\n-  return (machine_mode) (__builtin_constant_p (mode)\n-\t\t\t ? mode_inner_inline (mode) : mode_inner[mode]);\n+  return scalar_mode::from_int (__builtin_constant_p (mode)\n+\t\t\t\t? mode_inner_inline (mode)\n+\t\t\t\t: mode_inner[mode]);\n #else\n-  return (machine_mode) mode_inner[mode];\n+  return scalar_mode::from_int (mode_inner[mode]);\n #endif\n }\n "}, {"sha": "49f35b007bee4219783595b5c75667fecb151d29", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -1230,7 +1230,7 @@ expand_binop (machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t{\n \t  /* The scalar may have been extended to be too wide.  Truncate\n \t     it back to the proper size to fit in the broadcast vector.  */\n-\t  machine_mode inner_mode = GET_MODE_INNER (mode);\n+\t  scalar_mode inner_mode = GET_MODE_INNER (mode);\n \t  if (!CONST_INT_P (op1)\n \t      && (GET_MODE_BITSIZE (as_a <scalar_int_mode> (GET_MODE (op1)))\n \t\t  > GET_MODE_BITSIZE (inner_mode)))"}, {"sha": "e6483679903cda7049b9489918374d320259198b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -3645,7 +3645,7 @@ subreg_get_info (unsigned int xregno, machine_mode xmode,\n     {\n       nregs_xmode = HARD_REGNO_NREGS_WITH_PADDING (xregno, xmode);\n       unsigned int nunits = GET_MODE_NUNITS (xmode);\n-      machine_mode xmode_unit = GET_MODE_INNER (xmode);\n+      scalar_mode xmode_unit = GET_MODE_INNER (xmode);\n       gcc_assert (HARD_REGNO_NREGS_HAS_PADDING (xregno, xmode_unit));\n       gcc_assert (nregs_xmode\n \t\t  == (nunits"}, {"sha": "109c01917ed27d0d8ae977fedf38caf2ff524b19", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -5728,7 +5728,7 @@ simplify_immed_subreg (machine_mode outermode, rtx op,\n   rtx result_s = NULL;\n   rtvec result_v = NULL;\n   enum mode_class outer_class;\n-  machine_mode outer_submode;\n+  scalar_mode outer_submode;\n   int max_bitsize;\n \n   /* Some ports misuse CCmode.  */"}, {"sha": "f10f26eb0f144f56e295ceb2c010c50fea30c326", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21cefc26f716395b03e3c0d379ecac04656f963/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d21cefc26f716395b03e3c0d379ecac04656f963", "patch": "@@ -3900,7 +3900,7 @@ output_constant_pool_2 (machine_mode mode, rtx x, unsigned int align)\n     case MODE_VECTOR_UACCUM:\n       {\n \tint i, units;\n-        machine_mode submode = GET_MODE_INNER (mode);\n+\tscalar_mode submode = GET_MODE_INNER (mode);\n \tunsigned int subalign = MIN (align, GET_MODE_BITSIZE (submode));\n \n \tgcc_assert (GET_CODE (x) == CONST_VECTOR);"}]}