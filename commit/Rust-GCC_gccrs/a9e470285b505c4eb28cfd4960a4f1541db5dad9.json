{"sha": "a9e470285b505c4eb28cfd4960a4f1541db5dad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllNDcwMjg1YjUwNWM0ZWIyOGNmZDQ5NjBhNGYxNTQxZGI1ZGFkOQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-09T07:55:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:17Z"}, "message": "[Ada] Crash/infinite loop on program with multiple visibility errors\n\nThis patch fixes the behavior of the compiler on a program with multiple\nvisibility errors. Previous to this fix the compiler would either crash\nor enter an infinite loop on a declaration for the formal in a\nsubprogram declaration, when the parameter type was given by a selected\ncomponent that does not denote an entity. This patch also specializes\nthe error message when a local overloadable name has a homonym that is a\nchild package, which may containt an otherwise hidden interpreatation.\n\nNo simple reproducer.\n\n2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Diagnose_Call): Improve error recovery when a\n\tlocal subprogram name hides a possible candidate name declared\n\tin a child package in the context of the current unit.\n\t* sem_ch6.adb (Process_Formals): Protect against malformed\n\tformal types when the parameter type does not denote an entity.\n\nFrom-SVN: r273289", "tree": {"sha": "346c0cc4df934a4f63f0fbc2f310f47560fe1aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346c0cc4df934a4f63f0fbc2f310f47560fe1aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e470285b505c4eb28cfd4960a4f1541db5dad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e470285b505c4eb28cfd4960a4f1541db5dad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e470285b505c4eb28cfd4960a4f1541db5dad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e470285b505c4eb28cfd4960a4f1541db5dad9/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "1dd2a38e12f3b1505bc46171bab52ee026349e32", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a9e470285b505c4eb28cfd4960a4f1541db5dad9", "patch": "@@ -1,3 +1,11 @@\n+2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Diagnose_Call): Improve error recovery when a\n+\tlocal subprogram name hides a possible candidate name declared\n+\tin a child package in the context of the current unit.\n+\t* sem_ch6.adb (Process_Formals): Protect against malformed\n+\tformal types when the parameter type does not denote an entity.\n+\n 2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* bindo-augmentors.adb (Visit_Elaboration_Root): Do not start a"}, {"sha": "8806cbfa1ad2b2da0b7ce3a247de0a961613dff1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a9e470285b505c4eb28cfd4960a4f1541db5dad9", "patch": "@@ -6173,26 +6173,54 @@ package body Sem_Ch4 is\n \n       if Nkind (N) = N_Function_Call then\n          Get_First_Interp (Nam, X, It);\n-         while Present (It.Nam) loop\n-            if Ekind_In (It.Nam, E_Function, E_Operator) then\n-               return;\n-            else\n-               Get_Next_Interp (X, It);\n-            end if;\n-         end loop;\n \n-         --  If all interpretations are procedures, this deserves a\n-         --  more precise message. Ditto if this appears as the prefix\n-         --  of a selected component, which may be a lexical error.\n+         if No (It.Typ)\n+           and then Ekind (Entity (Name (N))) = E_Function\n+           and then Present (Homonym (Entity (Name (N))))\n+         then\n \n-         Error_Msg_N\n-           (\"\\context requires function call, found procedure name\", Nam);\n+            --  A name may appear overloaded if it has a homonym, even if\n+            --  that homonym is non-overloadable, in which case the overload\n+            --  list is in fact empty. This specialized case deserves a\n+            --  special message if the homonym is a child package.\n \n-         if Nkind (Parent (N)) = N_Selected_Component\n-           and then N = Prefix (Parent (N))\n-         then\n-            Error_Msg_N -- CODEFIX\n-              (\"\\period should probably be semicolon\", Parent (N));\n+            declare\n+               Nam : constant Node_Id := Name (N);\n+               H   : constant Entity_Id := Homonym (Entity (Nam));\n+\n+            begin\n+               if Ekind (H) = E_Package\n+                 and then Is_Child_Unit (H)\n+               then\n+                  Error_Msg_Qual_Level := 2;\n+                  Error_Msg_NE (\"if an entity in package& is meant, \", Nam, H);\n+                  Error_Msg_NE (\"\\use a fully qualified name\", Nam, H);\n+                  Error_Msg_Qual_Level := 0;\n+               end if;\n+            end;\n+\n+         else\n+            while Present (It.Nam) loop\n+               if Ekind_In (It.Nam, E_Function, E_Operator) then\n+                  return;\n+               else\n+                  Get_Next_Interp (X, It);\n+               end if;\n+            end loop;\n+\n+            --  If all interpretations are procedures, this deserves a\n+            --  more precise message. Ditto if this appears as the prefix\n+            --  of a selected component, which may be a lexical error.\n+\n+            Error_Msg_N\n+              (\"\\context requires function call, found procedure name\", Nam);\n+\n+            if Nkind (Parent (N)) = N_Selected_Component\n+              and then N = Prefix (Parent (N))\n+            then\n+               Error_Msg_N -- CODEFIX\n+                 (\"\\period should probably be semicolon\", Parent (N));\n+            end if;\n          end if;\n \n       elsif Nkind (N) = N_Procedure_Call_Statement"}, {"sha": "119a2ee324beb64df8add8665e4d05228723265b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e470285b505c4eb28cfd4960a4f1541db5dad9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a9e470285b505c4eb28cfd4960a4f1541db5dad9", "patch": "@@ -11342,7 +11342,13 @@ package body Sem_Ch6 is\n                goto Continue;\n             end if;\n \n-            Formal_Type := Entity (Ptype);\n+            --  Protect against malformed parameter types.\n+\n+            if Nkind (Ptype) not in N_Has_Entity then\n+               Formal_Type := Any_Type;\n+            else\n+               Formal_Type := Entity (Ptype);\n+            end if;\n \n             if Is_Incomplete_Type (Formal_Type)\n               or else"}]}