{"sha": "4469af7acf60b8af84174ece207e847e74067b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2OWFmN2FjZjYwYjhhZjg0MTc0ZWNlMjA3ZTg0N2U3NDA2N2IyNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-03-04T07:07:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-03-04T07:07:12Z"}, "message": "unwind-dw2.h (_Unwind_FrameState): Add REG_SAVED_VAL_OFFSET and REG_SAVED_VAL_EXP constants.\n\n\t* unwind-dw2.h (_Unwind_FrameState): Add REG_SAVED_VAL_OFFSET\n\tand REG_SAVED_VAL_EXP constants.\n\t* unwind-dw2.c (struct _Unwind_Context): Add by_value array.\n\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_GetGRPtr, _Unwind_SetGRPtr):\n\tHandle regs stored by value.\n\t(_Unwind_SetGRValue, _Unwind_GRByValue): New functions.\n\t(execute_cfa_program): Handle DW_CFA_val_offset,\n\tDW_CFA_val_offset_sf and DW_CFA_val_expression.\n\t(uw_update_context_1): Handle REG_SAVED_REG with regs stored by\n\tvalue specially.  Handle REG_SAVED_VAL_OFFSET and REG_SAVED_VAL_EXP.\n\t(uw_install_context_1): Handle target regs stored by value.\n\n\t* gcc.target/i386/cleanup-1.c: New test.\n\t* gcc.target/i386/cleanup-2.c: New test.\n\nFrom-SVN: r111705", "tree": {"sha": "01ee0349453e355702c314fbf8bd839a81f7127b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ee0349453e355702c314fbf8bd839a81f7127b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4469af7acf60b8af84174ece207e847e74067b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4469af7acf60b8af84174ece207e847e74067b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4469af7acf60b8af84174ece207e847e74067b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4469af7acf60b8af84174ece207e847e74067b27/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "636ffc571b3addf382dc6f5b9cd6c84fd798f051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636ffc571b3addf382dc6f5b9cd6c84fd798f051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636ffc571b3addf382dc6f5b9cd6c84fd798f051"}], "stats": {"total": 592, "additions": 582, "deletions": 10}, "files": [{"sha": "c3c2ae30b62bc86dd45e4ccc2cd37c3f03155fab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -1,3 +1,17 @@\n+2006-03-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* unwind-dw2.h (_Unwind_FrameState): Add REG_SAVED_VAL_OFFSET\n+\tand REG_SAVED_VAL_EXP constants.\n+\t* unwind-dw2.c (struct _Unwind_Context): Add by_value array.\n+\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_GetGRPtr, _Unwind_SetGRPtr):\n+\tHandle regs stored by value.\n+\t(_Unwind_SetGRValue, _Unwind_GRByValue): New functions.\n+\t(execute_cfa_program): Handle DW_CFA_val_offset,\n+\tDW_CFA_val_offset_sf and DW_CFA_val_expression.\n+\t(uw_update_context_1): Handle REG_SAVED_REG with regs stored by\n+\tvalue specially.  Handle REG_SAVED_VAL_OFFSET and REG_SAVED_VAL_EXP.\n+\t(uw_install_context_1): Handle target regs stored by value.\n+\n 2006-03-03  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-sra.c (tree_sra): Return todoflags;"}, {"sha": "9437945356e3be595d9bbc604c755911c6f3a942", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -1,3 +1,8 @@\n+2006-03-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/cleanup-1.c: New test.\n+\t* gcc.target/i386/cleanup-2.c: New test.\n+\n 2006-03-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/dependency_9.f90: Remove for the time being."}, {"sha": "afc1e0ae85f059b1ec2021d525c323e874f720db", "filename": "gcc/testsuite/gcc.target/i386/cleanup-1.c", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-1.c?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -0,0 +1,240 @@\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-fexceptions -fnon-call-exceptions -fasynchronous-unwind-tables -O2\" } */\n+/* Test complex CFA value expressions.  */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+\t\t   _Unwind_Exception_Class exc_class,\n+\t\t   struct _Unwind_Exception *exc_obj,\n+\t\t   struct _Unwind_Context *context,\n+\t\t   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void\n+force_unwind ()\n+{\n+  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n+  exc->exception_cleanup = 0;\n+\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+  abort ();\n+}\n+\n+int count;\n+\n+static void\n+counter (void *p __attribute__((unused)))\n+{\n+  ++count;\n+}\n+\n+static void\n+handler (void *p __attribute__((unused)))\n+{\n+  if (count != 2)\n+    abort ();\n+  _exit (0);\n+}\n+\n+static int __attribute__((noinline))\n+fn5 (void)\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  force_unwind ();\n+  return 0;\n+}\n+\n+void\n+bar (void)\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  fn5 ();\n+}\n+\n+void __attribute__((noinline))\n+foo (int x)\n+{\n+  char buf[256];\n+#ifdef __i386__\n+  __asm (\n+\t\"testl\t%0, %0\\n\\t\"\n+\t\"jnz\t1f\\n\\t\"\n+\t\".subsection 1\\n\\t\"\n+\t\".type\t_L_mutex_lock_%=, @function\\n\"\n+\"_L_mutex_lock_%=:\\n\"\n+\"1:\\t\"\t\"leal\t%1, %%ecx\\n\"\n+\"2:\\t\"\t\"call\tbar\\n\"\n+\"3:\\t\"\t\"jmp\t18f\\n\"\n+\"4:\\t\"\t\".size _L_mutex_lock_%=, .-_L_mutex_lock_%=\\n\\t\"\n+\t\".previous\\n\\t\"\n+\t\".section\t.eh_frame,\\\"a\\\",@progbits\\n\"\n+\"5:\\t\"\t\".long\t7f-6f\t# Length of Common Information Entry\\n\"\n+\"6:\\t\"\t\".long\t0x0\t# CIE Identifier Tag\\n\\t\"\n+\t\".byte\t0x1\t# CIE Version\\n\\t\"\n+\t\".ascii \\\"zR\\\\0\\\"\t# CIE Augmentation\\n\\t\"\n+\t\".uleb128 0x1\t# CIE Code Alignment Factor\\n\\t\"\n+\t\".sleb128 -4\t# CIE Data Alignment Factor\\n\\t\"\n+\t\".byte\t0x8\t# CIE RA Column\\n\\t\"\n+\t\".uleb128 0x1\t# Augmentation size\\n\\t\"\n+\t\".byte\t0x1b\t# FDE Encoding (pcrel sdata4)\\n\\t\"\n+\t\".byte\t0xc\t# DW_CFA_def_cfa\\n\\t\"\n+\t\".uleb128 0x4\\n\\t\"\n+\t\".uleb128 0x0\\n\\t\"\n+\t\".align 4\\n\"\n+\"7:\\t\"\t\".long\t17f-8f\t# FDE Length\\n\"\n+\"8:\\t\"\t\".long\t8b-5b\t# FDE CIE offset\\n\\t\"\n+\t\".long\t1b-.\t# FDE initial location\\n\\t\"\n+\t\".long\t4b-1b\t# FDE address range\\n\\t\"\n+\t\".uleb128 0x0\t# Augmentation size\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x8\\n\\t\"\n+\t\".uleb128 10f-9f\\n\"\n+\"9:\\t\"\t\".byte\t0x78\t# DW_OP_breg8\\n\\t\"\n+\t\".sleb128 3b-1b\\n\"\n+\"10:\\t\"\t\".byte\t0x40 + (2b-1b) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x8\\n\\t\"\n+\t\".uleb128 12f-11f\\n\"\n+\"11:\\t\"\t\".byte\t0x78\t# DW_OP_breg8\\n\\t\"\n+\t\".sleb128 3b-2b\\n\"\n+\"12:\\t\"\t\".byte\t0x40 + (3b-2b-1) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x8\\n\\t\"\n+\t\".uleb128 16f-13f\\n\"\n+\"13:\\t\"\t\".byte\t0x78\t# DW_OP_breg8\\n\\t\"\n+\t\".sleb128 15f-14f\\n\\t\"\n+\t\".byte\t0x0d\t# DW_OP_const4s\\n\"\n+\"14:\\t\"\t\".4byte\t3b-.\\n\\t\"\n+\t\".byte\t0x1c\t# DW_OP_minus\\n\\t\"\n+\t\".byte\t0x0d\t# DW_OP_const4s\\n\"\n+\"15:\\t\"\t\".4byte\t18f-.\\n\\t\"\n+\t\".byte\t0x22\t# DW_OP_plus\\n\"\n+\"16:\\t\"\t\".align 4\\n\"\n+\"17:\\t\"\t\".previous\\n\"\n+\"18:\"\n+\t: : \"r\" (x), \"m\" (x), \"r\" (buf)\n+\t: \"memory\", \"eax\", \"edx\", \"ecx\");\n+#elif defined __x86_64__\n+  __asm (\n+\t\"testl\t%0, %0\\n\\t\"\n+\t\"jnz\t1f\\n\\t\"\n+\t\".subsection 1\\n\\t\"\n+\t\".type\t_L_mutex_lock_%=, @function\\n\"\n+\"_L_mutex_lock_%=:\\n\"\n+\"1:\\t\"\t\"leaq\t%1, %%rdi\\n\"\n+\"2:\\t\"\t\"subq\t$128, %%rsp\\n\"\n+\"3:\\t\"\t\"call\tbar\\n\"\n+\"4:\\t\"\t\"addq\t$128, %%rsp\\n\"\n+\"5:\\t\"\t\"jmp\t24f\\n\"\n+\"6:\\t\"\t\".size _L_mutex_lock_%=, .-_L_mutex_lock_%=\\n\\t\"\n+\t\".previous\\n\\t\"\n+\t\".section\t.eh_frame,\\\"a\\\",@progbits\\n\"\n+\"7:\\t\"\t\".long\t9f-8f\t# Length of Common Information Entry\\n\"\n+\"8:\\t\"\t\".long\t0x0\t# CIE Identifier Tag\\n\\t\"\n+\t\".byte\t0x1\t# CIE Version\\n\\t\"\n+\t\".ascii \\\"zR\\\\0\\\"\t# CIE Augmentation\\n\\t\"\n+\t\".uleb128 0x1\t# CIE Code Alignment Factor\\n\\t\"\n+\t\".sleb128 -8\t# CIE Data Alignment Factor\\n\\t\"\n+\t\".byte\t0x10\t# CIE RA Column\\n\\t\"\n+\t\".uleb128 0x1\t# Augmentation size\\n\\t\"\n+\t\".byte\t0x1b\t# FDE Encoding (pcrel sdata4)\\n\\t\"\n+\t\".byte\t0x12\t# DW_CFA_def_cfa_sf\\n\\t\"\n+\t\".uleb128 0x7\\n\\t\"\n+\t\".sleb128 16\\n\\t\"\n+\t\".align 8\\n\"\n+\"9:\\t\"\t\".long\t23f-10f\t# FDE Length\\n\"\n+\"10:\\t\"\t\".long\t10b-7b\t# FDE CIE offset\\n\\t\"\n+\t\".long\t1b-.\t# FDE initial location\\n\\t\"\n+\t\".long\t6b-1b\t# FDE address range\\n\\t\"\n+\t\".uleb128 0x0\t# Augmentation size\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 12f-11f\\n\"\n+\"11:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 4b-1b\\n\"\n+\"12:\\t\"\t\".byte\t0x40 + (2b-1b) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 14f-13f\\n\"\n+\"13:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 4b-2b\\n\"\n+\"14:\\t\"\t\".byte\t0x40 + (3b-2b) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x0e\t# DW_CFA_def_cfa_offset\\n\\t\"\n+\t\".uleb128 0\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 16f-15f\\n\"\n+\"15:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 4b-3b\\n\"\n+\"16:\\t\"\t\".byte\t0x40 + (4b-3b-1) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x0e\t# DW_CFA_def_cfa_offset\\n\\t\"\n+\t\".uleb128 128\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 20f-17f\\n\"\n+\"17:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 19f-18f\\n\\t\"\n+\t\".byte\t0x0d\t# DW_OP_const4s\\n\"\n+\"18:\\t\"\t\".4byte\t4b-.\\n\\t\"\n+\t\".byte\t0x1c\t# DW_OP_minus\\n\\t\"\n+\t\".byte\t0x0d\t# DW_OP_const4s\\n\"\n+\"19:\\t\"\t\".4byte\t24f-.\\n\\t\"\n+\t\".byte\t0x22\t# DW_OP_plus\\n\"\n+\"20:\\t\"\t\".byte\t0x40 + (5b-4b+1) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0x13\t# DW_CFA_def_cfa_offset_sf\\n\\t\"\n+\t\".sleb128 16\\n\\t\"\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 22f-21f\\n\"\n+\"21:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 4b-5b\\n\"\n+\"22:\\t\"\t\".align 8\\n\"\n+\"23:\\t\"\t\".previous\\n\"\n+\"24:\"\n+\t: : \"r\" (x), \"m\" (x), \"r\" (buf)\n+\t: \"memory\", \"rax\", \"rdx\", \"rcx\", \"rsi\", \"rdi\",\n+\t  \"r8\", \"r9\", \"r10\", \"r11\");\n+#else\n+# error Unsupported test architecture\n+#endif\n+}\n+\n+static int __attribute__((noinline))\n+fn2 (void)\n+{\n+  foo (3);\n+  return 0;\n+}\n+\n+static int __attribute__((noinline))\n+fn1 (void)\n+{\n+  fn2 ();\n+  return 0;\n+}\n+\n+static void *\n+fn0 (void)\n+{\n+  char dummy __attribute__((cleanup (handler)));\n+  fn1 ();\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  fn0 ();\n+  return 0;\n+}"}, {"sha": "a171077f79ac96bf67ffe47da8ca848f8d03f367", "filename": "gcc/testsuite/gcc.target/i386/cleanup-2.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcleanup-2.c?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -0,0 +1,205 @@\n+/* { dg-do run { target { { i?86-*-linux* x86_64-*-linux* } && lp64 } } } */\n+/* { dg-options \"-fexceptions -fnon-call-exceptions -fasynchronous-unwind-tables -O2\" } */\n+/* Test complex CFA value expressions.  */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+\t\t   _Unwind_Exception_Class exc_class,\n+\t\t   struct _Unwind_Exception *exc_obj,\n+\t\t   struct _Unwind_Context *context,\n+\t\t   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void\n+force_unwind ()\n+{\n+  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n+  exc->exception_cleanup = 0;\n+\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+  abort ();\n+}\n+\n+int count;\n+\n+static void\n+counter (void *p __attribute__((unused)))\n+{\n+  ++count;\n+}\n+\n+static void\n+handler (void *p __attribute__((unused)))\n+{\n+  if (count != 2)\n+    abort ();\n+  _exit (0);\n+}\n+\n+static int __attribute__((noinline))\n+fn5 (void)\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  force_unwind ();\n+  return 0;\n+}\n+\n+void\n+bar (void)\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  fn5 ();\n+}\n+\n+void __attribute__((noinline))\n+foo (int x)\n+{\n+  char buf[256];\n+#ifdef __x86_64__\n+  __asm (\n+\t\"testl\t%0, %0\\n\\t\"\n+\t\"jnz\t1f\\n\\t\"\n+\t\".subsection 1\\n\\t\"\n+\t\".type\t_L_mutex_lock_%=, @function\\n\"\n+\"_L_mutex_lock_%=:\\n\"\n+\"1:\\t\"\t\"leaq\t%1, %%rdi\\n\"\n+\"2:\\t\"\t\"subq\t$128, %%rsp\\n\"\n+\"3:\\t\"\t\"call\tbar\\n\"\n+\"4:\\t\"\t\"addq\t$128, %%rsp\\n\"\n+\"5:\\t\"\t\"jmp\t21f\\n\"\n+\"6:\\t\"\t\".size _L_mutex_lock_%=, .-_L_mutex_lock_%=\\n\\t\"\n+\t\".previous\\n\\t\"\n+\t\".section\t.eh_frame,\\\"a\\\",@progbits\\n\"\n+\"7:\\t\"\t\".long\t9f-8f\t# Length of Common Information Entry\\n\"\n+\"8:\\t\"\t\".long\t0x0\t# CIE Identifier Tag\\n\\t\"\n+\t\".byte\t0x1\t# CIE Version\\n\\t\"\n+\t\".ascii \\\"zR\\\\0\\\"\t# CIE Augmentation\\n\\t\"\n+\t\".uleb128 0x1\t# CIE Code Alignment Factor\\n\\t\"\n+\t\".sleb128 -8\t# CIE Data Alignment Factor\\n\\t\"\n+\t\".byte\t0x10\t# CIE RA Column\\n\\t\"\n+\t\".uleb128 0x1\t# Augmentation size\\n\\t\"\n+\t\".byte\t0x1b\t# FDE Encoding (pcrel sdata4)\\n\\t\"\n+\t\".byte\t0xc\t# DW_CFA_def_cfa\\n\\t\"\n+\t\".uleb128 0x7\\n\\t\"\n+\t\".uleb128 0x0\\n\\t\"\n+\t\".align 8\\n\"\n+\"9:\\t\"\t\".long\t20f-10f\t# FDE Length\\n\"\n+\"10:\\t\"\t\".long\t10b-7b\t# FDE CIE offset\\n\\t\"\n+\t\".long\t1b-.\t# FDE initial location\\n\\t\"\n+\t\".long\t6b-1b\t# FDE address range\\n\\t\"\n+\t\".uleb128 0x0\t# Augmentation size\\n\\t\"\n+\t/* This CFA expression computes the address right\n+\t   past the jnz instruction above, from %rip somewhere\n+\t   within the _L_mutex_lock_%= subsection.  */\n+\t\".byte\t0x16\t# DW_CFA_val_expression\\n\\t\"\n+\t\".uleb128 0x10\\n\\t\"\n+\t\".uleb128 19f-11f\\n\"\n+\"11:\\t\"\t\".byte\t0x80\t# DW_OP_breg16\\n\\t\"\n+\t\".sleb128 0\\n\"\n+\"12:\\t\"\t\".byte\t0x12\t# DW_OP_dup\\n\\t\"\n+\t\".byte\t0x94\t# DW_OP_deref_size\\n\\t\"\n+\t\".byte\t1\\n\\t\"\n+\t\".byte\t0x12\t# DW_OP_dup\\n\\t\"\n+\t\".byte\t0x08\t# DW_OP_const1u\\n\\t\"\n+\t\".byte\t0x48\\n\\t\"\n+\t\".byte\t0x2e\t# DW_OP_ne\\n\\t\"\n+\t\".byte\t0x28\t# DW_OP_bra\\n\\t\"\n+\t\".2byte\t16f-13f\\n\"\n+\"13:\\t\"\t\".byte\t0x13\t# DW_OP_drop\\n\\t\"\n+\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 1\\n\\t\"\n+\t\".byte\t0x12\t# DW_OP_dup\\n\\t\"\n+\t\".byte\t0x94\t# DW_OP_deref_size\\n\\t\"\n+\t\".byte\t1\\n\\t\"\n+\t\".byte\t0x08\t# DW_OP_const1u\\n\\t\"\n+\t\".byte\t0x81\\n\\t\"\n+\t\".byte\t0x2e\t# DW_OP_ne\\n\\t\"\n+\t\".byte\t0x28\t# DW_OP_bra\\n\\t\"\n+\t\".2byte\t15f-14f\\n\"\n+\"14:\\t\"\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 3b-2b-1\\n\\t\"\n+\t\".byte\t0x2f\t# DW_OP_skip\\n\\t\"\n+\t\".2byte\t12b-15f\\n\"\n+\"15:\\t\"\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 2b-1b-1\\n\\t\"\n+\t\".byte\t0x2f\t# DW_OP_skip\\n\\t\"\n+\t\".2byte\t12b-16f\\n\"\n+\"16:\\t\"\t\".byte\t0x08\t# DW_OP_const1u\\n\\t\"\n+\t\".byte\t0xe8\\n\\t\"\n+\t\".byte\t0x2e\t# DW_OP_ne\\n\\t\"\n+\t\".byte\t0x28\t# DW_OP_bra\\n\\t\"\n+\t\".2byte\t18f-17f\\n\"\n+\"17:\\t\"\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 4b-3b\\n\\t\"\n+\t\".byte\t0x2f\t# DW_OP_skip\\n\\t\"\n+\t\".2byte\t12b-18f\\n\"\n+\"18:\\t\"\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 1\\n\\t\"\n+\t\".byte\t0x12\t# DW_OP_dup\\n\\t\"\n+\t\".byte\t0x94\t# DW_OP_deref_size\\n\\t\"\n+\t\".byte\t4\\n\\t\"\n+\t\".byte\t0x08\t# DW_OP_const1u\\n\\t\"\n+\t\".byte\t72 - (6b-5b) * 8 # (6b-5b) == 5 ? 32 : 56\\n\\t\"\n+\t\".byte\t0x24\t# DW_OP_shl\\n\\t\"\n+\t\".byte\t0x08\t# DW_OP_const1u\\n\\t\"\n+\t\".byte\t72 - (6b-5b) * 8 # (6b-5b) == 5 ? 32 : 56\\n\\t\"\n+\t\".byte\t0x26\t# DW_OP_shra\\n\\t\"\n+\t\".byte\t0x22\t# DW_OP_plus\\n\\t\"\n+\t\".byte\t0x23\t# DW_OP_plus_uconst\\n\\t\"\n+\t\".uleb128 6b-5b-1\\n\"\n+\"19:\\t\"\t\".byte\t0x40 + (3b-1b) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0xe\t# DW_CFA_def_cfa_offset\\n\\t\"\n+\t\".uleb128 128\\n\\t\"\n+\t\".byte\t0x40 + (5b-3b) # DW_CFA_advance_loc\\n\\t\"\n+\t\".byte\t0xe\t# DW_CFA_def_cfa_offset\\n\\t\"\n+\t\".uleb128 0\\n\\t\"\n+\t\".align 8\\n\"\n+\"20:\\t\"\t\".previous\\n\"\n+\"21:\"\n+\t: : \"r\" (x), \"m\" (x), \"r\" (buf)\n+\t: \"memory\", \"rax\", \"rdx\", \"rcx\", \"rsi\", \"rdi\",\n+\t  \"r8\", \"r9\", \"r10\", \"r11\");\n+#else\n+# error Unsupported test architecture\n+#endif\n+}\n+\n+static int __attribute__((noinline))\n+fn2 (void)\n+{\n+  foo (3);\n+  return 0;\n+}\n+\n+static int __attribute__((noinline))\n+fn1 (void)\n+{\n+  fn2 ();\n+  return 0;\n+}\n+\n+static void *\n+fn0 (void)\n+{\n+  char dummy __attribute__((cleanup (handler)));\n+  fn1 ();\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  fn0 ();\n+  return 0;\n+}"}, {"sha": "efae54a86c9601bc93e796e7b42456447b58db0b", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 115, "deletions": 9, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -72,6 +72,7 @@ struct _Unwind_Context\n   struct dwarf_eh_bases bases;\n   _Unwind_Word args_size;\n   char signal_frame;\n+  char by_value[DWARF_FRAME_REGISTERS+1];\n };\n \n /* Byte size of every register managed by these routines.  */\n@@ -118,7 +119,7 @@ read_8u (const void *p) { const union unaligned *up = p; return up->u8; }\n static inline unsigned long\n read_8s (const void *p) { const union unaligned *up = p; return up->s8; }\n \f\n-/* Get the value of register REG as saved in CONTEXT.  */\n+/* Get the value of register INDEX as saved in CONTEXT.  */\n \n inline _Unwind_Word\n _Unwind_GetGR (struct _Unwind_Context *context, int index)\n@@ -136,6 +137,9 @@ _Unwind_GetGR (struct _Unwind_Context *context, int index)\n   size = dwarf_reg_size_table[index];\n   ptr = context->reg[index];\n \n+  if (context->by_value[index])\n+    return (_Unwind_Word) (_Unwind_Internal_Ptr) ptr;\n+\n   /* This will segfault if the register hasn't been saved.  */\n   if (size == sizeof(_Unwind_Ptr))\n     return * (_Unwind_Ptr *) ptr;\n@@ -160,7 +164,7 @@ _Unwind_GetCFA (struct _Unwind_Context *context)\n   return (_Unwind_Ptr) context->cfa;\n }\n \n-/* Overwrite the saved value for register REG in CONTEXT with VAL.  */\n+/* Overwrite the saved value for register INDEX in CONTEXT with VAL.  */\n \n inline void\n _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n@@ -171,6 +175,13 @@ _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n   gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n   size = dwarf_reg_size_table[index];\n+\n+  if (context->by_value[index])\n+    {\n+      context->reg[index] = (void *) (_Unwind_Internal_Ptr) val;\n+      return;\n+    }\n+\n   ptr = context->reg[index];\n \n   if (size == sizeof(_Unwind_Ptr))\n@@ -188,6 +199,8 @@ static inline void *\n _Unwind_GetGRPtr (struct _Unwind_Context *context, int index)\n {\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  if (context->by_value[index])\n+    return &context->reg[index];\n   return context->reg[index];\n }\n \n@@ -197,9 +210,34 @@ static inline void\n _Unwind_SetGRPtr (struct _Unwind_Context *context, int index, void *p)\n {\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  context->by_value[index] = 0;\n   context->reg[index] = p;\n }\n \n+/* Overwrite the saved value for register INDEX in CONTEXT with VAL.  */\n+\n+static inline void\n+_Unwind_SetGRValue (struct _Unwind_Context *context, int index,\n+\t\t    _Unwind_Word val)\n+{\n+  index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n+  gcc_assert (dwarf_reg_size_table[index] == sizeof (_Unwind_Ptr));\n+\n+  context->by_value[index] = 1;\n+  context->reg[index] = (void *) (_Unwind_Internal_Ptr) val;\n+}\n+\n+/* Return non-zero if register INDEX is stored by value rather than\n+   by reference.  */\n+\n+static inline int\n+_Unwind_GRByValue (struct _Unwind_Context *context, int index)\n+{\n+  index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  return context->by_value[index];\n+}\n+\n /* Retrieve the return address for CONTEXT.  */\n \n inline _Unwind_Ptr\n@@ -922,7 +960,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  insn_ptr += utmp;\n \t  break;\n \n-\t  /* From the dwarf3 draft.  */\n+\t  /* Dwarf3.  */\n \tcase DW_CFA_offset_extended_sf:\n \t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n \t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n@@ -945,6 +983,33 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n \n+\tcase DW_CFA_val_offset:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword) utmp * fs->data_align;\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].how\n+\t    = REG_SAVED_VAL_OFFSET;\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.offset = offset;\n+\t  break;\n+\n+\tcase DW_CFA_val_offset_sf:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  offset = stmp * fs->data_align;\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].how\n+\t    = REG_SAVED_VAL_OFFSET;\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.offset = offset;\n+\t  break;\n+\n+\tcase DW_CFA_val_expression:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].how\n+\t    = REG_SAVED_VAL_EXP;\n+\t  fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.exp = insn_ptr;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  insn_ptr += utmp;\n+\t  break;\n+\n \tcase DW_CFA_GNU_window_save:\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n \t  for (reg = 16; reg < 32; ++reg)\n@@ -1113,7 +1178,7 @@ typedef union { _Unwind_Ptr ptr; _Unwind_Word word; } _Unwind_SpTmp;\n \n static inline void\n _Unwind_SetSpColumn (struct _Unwind_Context *context, void *cfa,\n-                     _Unwind_SpTmp *tmp_sp)\n+\t\t     _Unwind_SpTmp *tmp_sp)\n {\n   int size = dwarf_reg_size_table[__builtin_dwarf_sp_column ()];\n   \n@@ -1194,9 +1259,14 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \tbreak;\n \n       case REG_SAVED_REG:\n-\t_Unwind_SetGRPtr\n-\t  (context, i,\n-\t   _Unwind_GetGRPtr (&orig_context, fs->regs.reg[i].loc.reg));\n+\tif (_Unwind_GRByValue (&orig_context, fs->regs.reg[i].loc.reg))\n+\t  _Unwind_SetGRValue (context, i,\n+\t\t\t      _Unwind_GetGR (&orig_context,\n+\t\t\t\t\t     fs->regs.reg[i].loc.reg));\n+\telse\n+\t  _Unwind_SetGRPtr (context, i,\n+\t\t\t    _Unwind_GetGRPtr (&orig_context,\n+\t\t\t\t\t      fs->regs.reg[i].loc.reg));\n \tbreak;\n \n       case REG_SAVED_EXP:\n@@ -1211,6 +1281,25 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \t  _Unwind_SetGRPtr (context, i, (void *) val);\n \t}\n \tbreak;\n+\n+      case REG_SAVED_VAL_OFFSET:\n+\t_Unwind_SetGRValue (context, i,\n+\t\t\t    (_Unwind_Internal_Ptr)\n+\t\t\t    (cfa + fs->regs.reg[i].loc.offset));\n+\tbreak;\n+\n+      case REG_SAVED_VAL_EXP:\n+\t{\n+\t  const unsigned char *exp = fs->regs.reg[i].loc.exp;\n+\t  _Unwind_Word len;\n+\t  _Unwind_Ptr val;\n+\n+\t  exp = read_uleb128 (exp, &len);\n+\t  val = execute_stack_op (exp, exp + len, &orig_context,\n+\t\t\t\t  (_Unwind_Ptr) cfa);\n+\t  _Unwind_SetGRValue (context, i, val);\n+\t}\n+\tbreak;\n       }\n \n   context->signal_frame = fs->signal_frame;\n@@ -1327,14 +1416,31 @@ uw_install_context_1 (struct _Unwind_Context *current,\n   /* If the target frame does not have a saved stack pointer,\n      then set up the target's CFA.  */\n   if (!_Unwind_GetGRPtr (target, __builtin_dwarf_sp_column ()))\n-\t_Unwind_SetSpColumn (target, target->cfa, &sp_slot);\n+    _Unwind_SetSpColumn (target, target->cfa, &sp_slot);\n \n   for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n     {\n       void *c = current->reg[i];\n       void *t = target->reg[i];\n \n-      if (t && c && t != c)\n+      gcc_assert (current->by_value[i] == 0);\n+      if (target->by_value[i] && c)\n+\t{\n+\t  _Unwind_Word w;\n+\t  _Unwind_Ptr p;\n+\t  if (dwarf_reg_size_table[i] == sizeof (_Unwind_Word))\n+\t    {\n+\t      w = (_Unwind_Internal_Ptr) t;\n+\t      memcpy (c, &w, sizeof (_Unwind_Word));\n+\t    }\n+\t  else\n+\t    {\n+\t      gcc_assert (dwarf_reg_size_table[i] == sizeof (_Unwind_Ptr));\n+\t      p = (_Unwind_Internal_Ptr) t;\n+\t      memcpy (c, &p, sizeof (_Unwind_Ptr));\n+\t    }\n+\t}\n+      else if (t && c && t != c)\n \tmemcpy (c, t, dwarf_reg_size_table[i]);\n     }\n "}, {"sha": "34a378b7e18fa874d04511a36a24350242ebf3f2", "filename": "gcc/unwind-dw2.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469af7acf60b8af84174ece207e847e74067b27/gcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.h?ref=4469af7acf60b8af84174ece207e847e74067b27", "patch": "@@ -53,7 +53,9 @@ typedef struct\n \tREG_UNSAVED,\n \tREG_SAVED_OFFSET,\n \tREG_SAVED_REG,\n-\tREG_SAVED_EXP\n+\tREG_SAVED_EXP,\n+\tREG_SAVED_VAL_OFFSET,\n+\tREG_SAVED_VAL_EXP\n       } how;\n     } reg[DWARF_FRAME_REGISTERS+1];\n "}]}