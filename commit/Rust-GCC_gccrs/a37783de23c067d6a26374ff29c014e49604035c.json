{"sha": "a37783de23c067d6a26374ff29c014e49604035c", "node_id": "C_kwDOANBUbNoAKGEzNzc4M2RlMjNjMDY3ZDZhMjYzNzRmZjI5YzAxNGU0OTYwNDAzNWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-04-13T12:09:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-04-13T12:09:30Z"}, "message": "tree-optimization/109491 - ICE in expressions_equal_p\n\nAt some point I elided the NULL pointer check in expressions_equal_p\nbecause it shouldn't be necessary not realizing that for example\nTARGET_MEM_REF has optional operands we cannot substitute with\nsomething non-NULL with the same semantics.  The following does the\nsimple thing and restore the check removed in r11-4982.\n\n\tPR tree-optimization/109491\n\t* tree-ssa-sccvn.cc (expressions_equal_p): Restore the\n\tNULL operands test.", "tree": {"sha": "7c4bb982252f25d8007925d0c6620bdf61c4db63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c4bb982252f25d8007925d0c6620bdf61c4db63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37783de23c067d6a26374ff29c014e49604035c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37783de23c067d6a26374ff29c014e49604035c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37783de23c067d6a26374ff29c014e49604035c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37783de23c067d6a26374ff29c014e49604035c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c7257b675068fe62505d74873371fd0508b499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c7257b675068fe62505d74873371fd0508b499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c7257b675068fe62505d74873371fd0508b499"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "9692911e31b2567f112aa97f5a7e2e94112f5b4b", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37783de23c067d6a26374ff29c014e49604035c/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37783de23c067d6a26374ff29c014e49604035c/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=a37783de23c067d6a26374ff29c014e49604035c", "patch": "@@ -6407,6 +6407,13 @@ expressions_equal_p (tree e1, tree e2, bool match_vn_top_optimistically)\n       && (e1 == VN_TOP || e2 == VN_TOP))\n     return true;\n \n+  /* If only one of them is null, they cannot be equal.  While in general\n+     this should not happen for operations like TARGET_MEM_REF some\n+     operands are optional and an identity value we could substitute\n+     has differing semantics.  */\n+  if (!e1 || !e2)\n+    return false;\n+\n   /* SSA_NAME compare pointer equal.  */\n   if (TREE_CODE (e1) == SSA_NAME || TREE_CODE (e2) == SSA_NAME)\n     return false;"}]}