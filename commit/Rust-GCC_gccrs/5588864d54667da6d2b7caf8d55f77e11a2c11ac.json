{"sha": "5588864d54667da6d2b7caf8d55f77e11a2c11ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4ODg2NGQ1NDY2N2RhNmQyYjdjYWY4ZDU1Zjc3ZTExYTJjMTFhYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-09T14:13:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-09T14:13:25Z"}, "message": "re PR tree-optimization/44043 (sorry, unimplemented: inlining failed in call to 'dst_output': optimizing for size and code size would grow)\n\n2010-05-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/44043\n\t* ipa-inline.c (estimate_function_body_sizes): Return after\n\tdisregarding inline limits.\n\n\t* gcc.c-torture/compile/pr44043.c: New testcase.\n\nFrom-SVN: r159200", "tree": {"sha": "c5d2b511af454b1d30c2f32c46c6173217d567a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d2b511af454b1d30c2f32c46c6173217d567a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5588864d54667da6d2b7caf8d55f77e11a2c11ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5588864d54667da6d2b7caf8d55f77e11a2c11ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5588864d54667da6d2b7caf8d55f77e11a2c11ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5588864d54667da6d2b7caf8d55f77e11a2c11ac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64ed87b4f83b55fcc0ab65686e9a2b7e2560ab61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ed87b4f83b55fcc0ab65686e9a2b7e2560ab61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ed87b4f83b55fcc0ab65686e9a2b7e2560ab61"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "3112b80b01356d11d3b327bb0899bb47d258f930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5588864d54667da6d2b7caf8d55f77e11a2c11ac", "patch": "@@ -1,3 +1,9 @@\n+2010-05-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/44043\n+\t* ipa-inline.c (estimate_function_body_sizes): Return after\n+\tdisregarding inline limits.\n+\n 2010-05-09  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c (store_arg): Revert last change."}, {"sha": "8b73210c34d703d53ffe7f201a4886179c024787", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=5588864d54667da6d2b7caf8d55f77e11a2c11ac", "patch": "@@ -1835,10 +1835,13 @@ estimate_function_body_sizes (struct cgraph_node *node)\n \n   if (node->local.disregard_inline_limits)\n     {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Disregarding inline limits.\\n\");\n       inline_summary (node)->self_time = 0;\n       inline_summary (node)->self_size = 0;\n       inline_summary (node)->time_inlining_benefit = 0;\n       inline_summary (node)->size_inlining_benefit = 0;\n+      return;\n     }\n \n   if (dump_file)"}, {"sha": "bd28f1876228ee7b7fb2323a2cee9997c14b0e5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5588864d54667da6d2b7caf8d55f77e11a2c11ac", "patch": "@@ -1,3 +1,8 @@\n+2010-05-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/44043\n+\t* gcc.c-torture/compile/pr44043.c: New testcase.\n+\n 2010-05-09  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/ipa/ipa-pta-11.c: Make p and q referenced."}, {"sha": "943501b40915b9438995ca8ecda434bf79833deb", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44043.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5588864d54667da6d2b7caf8d55f77e11a2c11ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c?ref=5588864d54667da6d2b7caf8d55f77e11a2c11ac", "patch": "@@ -0,0 +1,87 @@\n+typedef unsigned char __u8;\n+typedef unsigned short __u16;\n+typedef unsigned int __u32;\n+typedef unsigned long __kernel_size_t;\n+typedef __kernel_size_t size_t;\n+typedef __u8 uint8_t;\n+typedef __u16 __be16;\n+typedef __u32 __be32;\n+struct msghdr {\n+    struct iovec * msg_iov;\n+    unsigned msg_flags;\n+};\n+enum { IPPROTO_ICMP = 1 };\n+struct sk_buff { };\n+static inline __attribute__((always_inline)) struct dst_entry *\n+skb_dst(const struct sk_buff *skb)\n+{\n+};\n+enum nf_inet_hooks { NF_INET_LOCAL_OUT };\n+struct net_device {\n+    unsigned mtu;\n+};\n+static inline __attribute__((always_inline)) int\n+NF_HOOK_THRESH(uint8_t pf, unsigned int hook, struct sk_buff *skb,\n+\t       struct net_device *in, struct net_device *out,\n+\t       int (*okfn)(struct sk_buff *), int thresh)\n+{\n+  int ret = nf_hook_thresh(pf, hook, skb, in, out, okfn, thresh);\n+  if (ret == 1)\n+    ret = okfn(skb);\n+  return ret;\n+}\n+static inline __attribute__((always_inline)) int\n+NF_HOOK(uint8_t pf, unsigned int hook, struct sk_buff *skb,\n+\tstruct net_device *in, struct net_device *out,\n+\tint (*okfn)(struct sk_buff *))\n+{\n+  return NF_HOOK_THRESH(pf, hook, skb, in, out, okfn, (-((int)(~0U>>1)) - 1));\n+}\n+struct dst_entry {\n+    struct net_device *dev;\n+    int (*output)(struct sk_buff*);\n+};\n+static inline __attribute__((always_inline)) int dst_output(struct sk_buff *skb) {\n+    return skb_dst(skb)->output(skb);\n+};\n+struct iphdr {\n+    __u8 protocol;\n+};\n+struct inet_sock {\n+    __be16 inet_dport;\n+    __u8 recverr: 1,     hdrincl: 1;\n+    struct { } cork;\n+};\n+struct icmphdr {\n+    __u8 type;\n+};\n+struct rtable {\n+    union { struct dst_entry dst; } u;\n+    __be32 rt_dst;\n+};\n+struct sock;\n+struct inet_sock *inet_sk (struct sock *);\n+struct net *sock_net (struct sock *);\n+void *skb_transport_header (struct sk_buff *);\n+static int raw_send_hdrinc(struct sock *sk, void *from, size_t length,\n+\t\t\t   struct rtable *rt,    unsigned int flags)\n+{\n+  struct inet_sock *inet = inet_sk(sk);\n+  struct net *net = sock_net(sk);\n+  struct iphdr *iph;\n+  struct sk_buff *skb;\n+  if (length > rt->u.dst.dev->mtu) \n+    ip_local_error(sk, 90, rt->rt_dst, inet->inet_dport, rt->u.dst.dev->mtu);\n+  if (flags&0x10)\n+    goto out;\n+  if (iph->protocol == IPPROTO_ICMP)\n+    icmp_out_count(net, ((struct icmphdr *)skb_transport_header(skb))->type);\n+  NF_HOOK(2, NF_INET_LOCAL_OUT, skb, ((void *)0), rt->u.dst.dev,\n+\t  dst_output);\n+out:\n+  while (0);\n+}\n+int raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)\n+{\n+  raw_send_hdrinc(sk, msg->msg_iov, len, (void *)0, msg->msg_flags);\n+}"}]}