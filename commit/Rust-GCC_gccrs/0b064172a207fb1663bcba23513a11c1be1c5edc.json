{"sha": "0b064172a207fb1663bcba23513a11c1be1c5edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwNjQxNzJhMjA3ZmIxNjYzYmNiYTIzNTEzYTExYzFiZTFjNWVkYw==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-04-29T16:13:16Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-04-29T16:13:16Z"}, "message": "[AArch64] Support LDR/STR from/to S and D registers\n\nFrom-SVN: r198425", "tree": {"sha": "c30058bc57408b7bf0e1f8aa67728e6b81b4e997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c30058bc57408b7bf0e1f8aa67728e6b81b4e997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b064172a207fb1663bcba23513a11c1be1c5edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b064172a207fb1663bcba23513a11c1be1c5edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b064172a207fb1663bcba23513a11c1be1c5edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b064172a207fb1663bcba23513a11c1be1c5edc/comments", "author": null, "committer": null, "parents": [{"sha": "473cec554a78fc340c970493000ebd14f74511db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473cec554a78fc340c970493000ebd14f74511db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473cec554a78fc340c970493000ebd14f74511db"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "de4db3f92c97d0b6ea7d17494e07ed42509c68a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b064172a207fb1663bcba23513a11c1be1c5edc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b064172a207fb1663bcba23513a11c1be1c5edc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b064172a207fb1663bcba23513a11c1be1c5edc", "patch": "@@ -1,3 +1,9 @@\n+2013-04-29  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.md (movsi_aarch64): Support LDR/STR\n+\tfrom/to S register.\n+\t(movdi_aarch64): Support LDR/STR from/to D register.\n+\n 2013-04-29  Ian Bolton  <ian.bolton@arm.com>\n \n \t* common/config/aarch64/aarch64-common.c: Enable REE pass at O2"}, {"sha": "87e68fa227859597c2a0e1cf9566c6fca3d1c9c7", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b064172a207fb1663bcba23513a11c1be1c5edc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b064172a207fb1663bcba23513a11c1be1c5edc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0b064172a207fb1663bcba23513a11c1be1c5edc", "patch": "@@ -809,26 +809,28 @@\n )\n \n (define_insn \"*movsi_aarch64\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m, *w, r,*w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"     \" r,M,m,rZ,rZ,*w,*w\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,*w,m,  m,*w, r,*w\")\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,M,m, m,rZ,*w,rZ,*w,*w\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n    mov\\\\t%w0, %w1\n    mov\\\\t%w0, %1\n    ldr\\\\t%w0, %1\n+   ldr\\\\t%s0, %1\n    str\\\\t%w1, %0\n+   str\\\\t%s1, %0\n    fmov\\\\t%s0, %w1\n    fmov\\\\t%w0, %s1\n    fmov\\\\t%s0, %s1\"\n-  [(set_attr \"v8type\" \"move,alu,load1,store1,fmov,fmov,fmov\")\n+  [(set_attr \"v8type\" \"move,alu,load1,load1,store1,store1,fmov,fmov,fmov\")\n    (set_attr \"mode\" \"SI\")\n-   (set_attr \"fp\" \"*,*,*,*,yes,yes,yes\")]\n+   (set_attr \"fp\" \"*,*,*,*,*,*,yes,yes,yes\")]\n )\n \n (define_insn \"*movdi_aarch64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,m, r,  r,  *w, r,*w,w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,m,rZ,Usa,Ush,rZ,*w,*w,Dd\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,*w,m,  m,r,  r,  *w, r,*w,w\")\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,m, m,rZ,*w,Usa,Ush,rZ,*w,*w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@\n@@ -837,16 +839,18 @@\n    mov\\\\t%x0, %1\n    mov\\\\t%x0, %1\n    ldr\\\\t%x0, %1\n+   ldr\\\\t%d0, %1\n    str\\\\t%x1, %0\n+   str\\\\t%d1, %0\n    adr\\\\t%x0, %a1\n    adrp\\\\t%x0, %A1\n    fmov\\\\t%d0, %x1\n    fmov\\\\t%x0, %d1\n    fmov\\\\t%d0, %d1\n    movi\\\\t%d0, %1\"\n-  [(set_attr \"v8type\" \"move,move,move,alu,load1,store1,adr,adr,fmov,fmov,fmov,fmov\")\n+  [(set_attr \"v8type\" \"move,move,move,alu,load1,load1,store1,store1,adr,adr,fmov,fmov,fmov,fmov\")\n    (set_attr \"mode\" \"DI\")\n-   (set_attr \"fp\" \"*,*,*,*,*,*,*,*,yes,yes,yes,yes\")]\n+   (set_attr \"fp\" \"*,*,*,*,*,*,*,*,*,*,yes,yes,yes,yes\")]\n )\n \n (define_insn \"insv_imm<mode>\""}]}