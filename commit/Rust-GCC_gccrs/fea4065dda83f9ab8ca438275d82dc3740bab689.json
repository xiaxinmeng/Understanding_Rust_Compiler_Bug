{"sha": "fea4065dda83f9ab8ca438275d82dc3740bab689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhNDA2NWRkYTgzZjlhYjhjYTQzODI3NWQ4MmRjMzc0MGJhYjY4OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-18T02:27:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-18T02:27:16Z"}, "message": "linker-map.gnu: Add __moneypunct_cache, __timepunct_cache.\n\n\n2003-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/linker-map.gnu: Add __moneypunct_cache, __timepunct_cache.\n\t* config/locale/generic/messages_members.h: Tweaks.\n\t* config/locale/generic/monetary_members.cc\n\t(moneypunct::_M_initialize_moneypunct): Use cache.\n\t(moneypunct::~moneypunct): Delete cache.\n\t* config/locale/generic/time_members.cc:\n\t(__timepunct::_M_initialize_timepunct): Use cache.\n\t* config/locale/generic/time_members.h:\n\t(__timepunct::~__timepunct): Delete cache.\n\t(__timepunct::__timepunct): Set cache.\n\t* config/locale/gnu/messages_members.h: Tweaks.\n\t* config/locale/gnu/monetary_members.cc:\n\t(moneypunct::_M_initialize_moneypunct): Use cache.\n\t(moneypunct::~moneypunct): Delete cache.\n\t* config/locale/gnu/time_members.cc:\n\t(__timepunct::_M_initialize_timepunct): Use cache.\n\t* config/locale/gnu/time_members.h:\n\t(__timepunct::~__timepunct): Delete cache.\n\t(__timepunct::__timepunct): Set cache.\n\t* include/bits/locale_facets.h (__timepunct_cache): New.\n\t(__moneypunct_cache): New.\n\t* include/bits/locale_facets.tcc: Tweak.\n\t* src/locale.cc (__timepunct::_S_timezones): Adjust for cache.\n\t* src/locale-inst.cc: Instantiate caches.\n\t* src/globals.cc: Add \"C\" caches.\n\t* src/localename.cc: Use external \"C\" caches.\n\nFrom-SVN: r69535", "tree": {"sha": "c629218ba92ff6f90589c473437fd02fda11bfb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c629218ba92ff6f90589c473437fd02fda11bfb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fea4065dda83f9ab8ca438275d82dc3740bab689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea4065dda83f9ab8ca438275d82dc3740bab689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea4065dda83f9ab8ca438275d82dc3740bab689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea4065dda83f9ab8ca438275d82dc3740bab689/comments", "author": null, "committer": null, "parents": [{"sha": "c715abddc7937701bde7e38f43338303b79d0e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c715abddc7937701bde7e38f43338303b79d0e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c715abddc7937701bde7e38f43338303b79d0e38"}], "stats": {"total": 1412, "additions": 827, "deletions": 585}, "files": [{"sha": "692e8d62f1f13838715ff685d63f6b0c7d67b292", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1,3 +1,32 @@\n+2003-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* config/linker-map.gnu: Add __moneypunct_cache, __timepunct_cache.\n+\t* config/locale/generic/messages_members.h: Tweaks.\n+\t* config/locale/generic/monetary_members.cc\n+\t(moneypunct::_M_initialize_moneypunct): Use cache.\n+\t(moneypunct::~moneypunct): Delete cache.\n+\t* config/locale/generic/time_members.cc:\n+\t(__timepunct::_M_initialize_timepunct): Use cache.\n+\t* config/locale/generic/time_members.h:\n+\t(__timepunct::~__timepunct): Delete cache.\n+\t(__timepunct::__timepunct): Set cache.\n+\t* config/locale/gnu/messages_members.h: Tweaks.\n+\t* config/locale/gnu/monetary_members.cc:\n+\t(moneypunct::_M_initialize_moneypunct): Use cache.\n+\t(moneypunct::~moneypunct): Delete cache.\n+\t* config/locale/gnu/time_members.cc:\n+\t(__timepunct::_M_initialize_timepunct): Use cache.\n+\t* config/locale/gnu/time_members.h:\n+\t(__timepunct::~__timepunct): Delete cache.\n+\t(__timepunct::__timepunct): Set cache.\n+\t* include/bits/locale_facets.h (__timepunct_cache): New.\n+\t(__moneypunct_cache): New.\n+\t* include/bits/locale_facets.tcc: Tweak.\n+\t* src/locale.cc (__timepunct::_S_timezones): Adjust for cache.\n+\t* src/locale-inst.cc: Instantiate caches.\n+\t* src/globals.cc: Add \"C\" caches.\n+\t* src/localename.cc: Use external \"C\" caches.\n+\n 2003-07-17  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/guide.html:  Fix typo."}, {"sha": "4f0db8d79d1e26eb58e05ad95812d67bb825b158", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -55,7 +55,9 @@ GLIBCXX_3.4 {\n       std::__num_base::_S_format_int*;\n       std::__num_base::_S_atoms_in;\n       std::__num_base::_S_atoms_out;\n-      std::__numpunct_cache*\n+      std::__moneypunct_cache*;\n+      std::__numpunct_cache*;\n+      std::__timepunct_cache*\n     };\n \n     # Names not in an 'extern' block are mangled names."}, {"sha": "2d588049c4f751264ff87c39480bf3a9f14e19d3", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -36,12 +36,12 @@\n   // Non-virtual member functions.\n   template<typename _CharT>\n      messages<_CharT>::messages(size_t __refs)\n-     : locale::facet(__refs)\n+     : facet(__refs)\n      { _M_c_locale_messages = _S_c_locale; }\n \n   template<typename _CharT>\n      messages<_CharT>::messages(__c_locale, const char*, size_t __refs) \n-     : locale::facet(__refs)\n+     : facet(__refs)\n      { _M_c_locale_messages = _S_c_locale; }\n \n   template<typename _CharT>"}, {"sha": "51bbe0b0c01686f1914e6b7f0ee1ef4cec6c40ea", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 55, "deletions": 43, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,41 +47,47 @@ namespace std\n     void\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n-      // \"C\" locale\n-      _M_decimal_point = '.';\n-      _M_thousands_sep = ',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = \"\";\n-      _M_positive_sign = \"\";\n-      _M_negative_sign = \"\";\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n+      // \"C\" locale.\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<char>;\n+\n+      _M_data->_M_decimal_point = '.';\n+      _M_data->_M_thousands_sep = ',';\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_curr_symbol = \"\";\n+      _M_data->_M_positive_sign = \"\";\n+      _M_data->_M_negative_sign = \"\";\n+      _M_data->_M_frac_digits = 0;\n+      _M_data->_M_pos_format = money_base::_S_default_pattern;\n+      _M_data->_M_neg_format = money_base::_S_default_pattern;\n     }\n \n   template<> \n     void\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*)\n     {\n-      // \"C\" locale\n-      _M_decimal_point = '.';\n-      _M_thousands_sep = ',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = \"\";\n-      _M_positive_sign = \"\";\n-      _M_negative_sign = \"\";\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n+      // \"C\" locale.\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<char>;\n+\n+      _M_data->_M_decimal_point = '.';\n+      _M_data->_M_thousands_sep = ',';\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_curr_symbol = \"\";\n+      _M_data->_M_positive_sign = \"\";\n+      _M_data->_M_negative_sign = \"\";\n+      _M_data->_M_frac_digits = 0;\n+      _M_data->_M_pos_format = money_base::_S_default_pattern;\n+      _M_data->_M_neg_format = money_base::_S_default_pattern;\n     }\n \n   template<> \n     moneypunct<char, true>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n \n   template<> \n     moneypunct<char, false>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n@@ -90,15 +96,18 @@ namespace std\n \t\t\t\t\t\t\tconst char*)\n     {\n       // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = L\"\";\n-      _M_positive_sign = L\"\";\n-      _M_negative_sign = L\"\";\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<wchar_t>;\n+\n+      _M_data->_M_decimal_point = L'.';\n+      _M_data->_M_thousands_sep = L',';\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_curr_symbol = L\"\";\n+      _M_data->_M_positive_sign = L\"\";\n+      _M_data->_M_negative_sign = L\"\";\n+      _M_data->_M_frac_digits = 0;\n+      _M_data->_M_pos_format = money_base::_S_default_pattern;\n+      _M_data->_M_neg_format = money_base::_S_default_pattern;\n     }\n \n   template<> \n@@ -107,23 +116,26 @@ namespace std\n \t\t\t\t\t\t\t const char*)\n     {\n       // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = L\"\";\n-      _M_positive_sign = L\"\";\n-      _M_negative_sign = L\"\";\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<wchar_t>;\n+\n+      _M_data->_M_decimal_point = L'.';\n+      _M_data->_M_thousands_sep = L',';\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_curr_symbol = L\"\";\n+      _M_data->_M_positive_sign = L\"\";\n+      _M_data->_M_negative_sign = L\"\";\n+      _M_data->_M_frac_digits = 0;\n+      _M_data->_M_pos_format = money_base::_S_default_pattern;\n+      _M_data->_M_neg_format = money_base::_S_default_pattern;\n     }\n \n   template<> \n     moneypunct<wchar_t, true>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n \n   template<> \n     moneypunct<wchar_t, false>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n #endif\n }"}, {"sha": "3574a844b5ade2924677f54ef77503c4d4b019de", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 103, "deletions": 97, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,62 +55,65 @@ namespace std\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale)\n     { \n-      // \"C\" locale\n-      _M_date_format = \"%m/%d/%y\";\n-      _M_date_era_format = \"%m/%d/%y\";\n-      _M_time_format = \"%H:%M:%S\";\n-      _M_time_era_format = \"%H:%M:%S\";\n-      _M_date_time_format = \"\";\n-      _M_date_time_era_format = \"\";\n-      _M_am = \"AM\";\n-      _M_pm = \"PM\";\n-      _M_am_pm_format = \"\";\n+      // \"C\" locale.\n+      if (!_M_data)\n+\t_M_data = new __timepunct_cache<char>;\n+\n+      _M_data->_M_date_format = \"%m/%d/%y\";\n+      _M_data->_M_date_era_format = \"%m/%d/%y\";\n+      _M_data->_M_time_format = \"%H:%M:%S\";\n+      _M_data->_M_time_era_format = \"%H:%M:%S\";\n+      _M_data->_M_date_time_format = \"\";\n+      _M_data->_M_date_time_era_format = \"\";\n+      _M_data->_M_am = \"AM\";\n+      _M_data->_M_pm = \"PM\";\n+      _M_data->_M_am_pm_format = \"\";\n \t  \n       // Day names, starting with \"C\"'s Sunday.\n-      _M_day1 = \"Sunday\";\n-      _M_day2 = \"Monday\";\n-      _M_day3 = \"Tuesday\";\n-      _M_day4 = \"Wednesday\";\n-      _M_day5 = \"Thursday\";\n-      _M_day6 = \"Friday\";\n-      _M_day7 = \"Saturday\";\n+      _M_data->_M_day1 = \"Sunday\";\n+      _M_data->_M_day2 = \"Monday\";\n+      _M_data->_M_day3 = \"Tuesday\";\n+      _M_data->_M_day4 = \"Wednesday\";\n+      _M_data->_M_day5 = \"Thursday\";\n+      _M_data->_M_day6 = \"Friday\";\n+      _M_data->_M_day7 = \"Saturday\";\n \n       // Abbreviated day names, starting with \"C\"'s Sun.\n-      _M_day_a1 = \"Sun\";\n-      _M_day_a2 = \"Mon\";\n-      _M_day_a3 = \"Tue\";\n-      _M_day_a4 = \"Wed\";\n-      _M_day_a5 = \"Thu\";\n-      _M_day_a6 = \"Fri\";\n-      _M_day_a7 = \"Sat\";\n+      _M_data->_M_aday1 = \"Sun\";\n+      _M_data->_M_aday2 = \"Mon\";\n+      _M_data->_M_aday3 = \"Tue\";\n+      _M_data->_M_aday4 = \"Wed\";\n+      _M_data->_M_aday5 = \"Thu\";\n+      _M_data->_M_aday6 = \"Fri\";\n+      _M_data->_M_aday7 = \"Sat\";\n \n       // Month names, starting with \"C\"'s January.\n-      _M_month01 = \"January\";\n-      _M_month02 = \"February\";\n-      _M_month03 = \"March\";\n-      _M_month04 = \"April\";\n-      _M_month05 = \"May\";\n-      _M_month06 = \"June\";\n-      _M_month07 = \"July\";\n-      _M_month08 = \"August\";\n-      _M_month09 = \"September\";\n-      _M_month10 = \"October\";\n-      _M_month11 = \"November\";\n-      _M_month12 = \"December\";\n+      _M_data->_M_month01 = \"January\";\n+      _M_data->_M_month02 = \"February\";\n+      _M_data->_M_month03 = \"March\";\n+      _M_data->_M_month04 = \"April\";\n+      _M_data->_M_month05 = \"May\";\n+      _M_data->_M_month06 = \"June\";\n+      _M_data->_M_month07 = \"July\";\n+      _M_data->_M_month08 = \"August\";\n+      _M_data->_M_month09 = \"September\";\n+      _M_data->_M_month10 = \"October\";\n+      _M_data->_M_month11 = \"November\";\n+      _M_data->_M_month12 = \"December\";\n \n       // Abbreviated month names, starting with \"C\"'s Jan.\n-      _M_month_a01 = \"Jan\";\n-      _M_month_a02 = \"Feb\";\n-      _M_month_a03 = \"Mar\";\n-      _M_month_a04 = \"Apr\";\n-      _M_month_a05 = \"May\";\n-      _M_month_a06 = \"Jun\";\n-      _M_month_a07 = \"July\";\n-      _M_month_a08 = \"Aug\";\n-      _M_month_a09 = \"Sep\";\n-      _M_month_a10 = \"Oct\";\n-      _M_month_a11 = \"Nov\";\n-      _M_month_a12 = \"Dec\";\n+      _M_data->_M_amonth01 = \"Jan\";\n+      _M_data->_M_amonth02 = \"Feb\";\n+      _M_data->_M_amonth03 = \"Mar\";\n+      _M_data->_M_amonth04 = \"Apr\";\n+      _M_data->_M_amonth05 = \"May\";\n+      _M_data->_M_amonth06 = \"Jun\";\n+      _M_data->_M_amonth07 = \"July\";\n+      _M_data->_M_amonth08 = \"Aug\";\n+      _M_data->_M_amonth09 = \"Sep\";\n+      _M_data->_M_amonth10 = \"Oct\";\n+      _M_data->_M_amonth11 = \"Nov\";\n+      _M_data->_M_amonth12 = \"Dec\";\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -131,62 +134,65 @@ namespace std\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale)\n     {\n-      // \"C\" locale\n-      _M_date_format = L\"%m/%d/%y\";\n-      _M_date_era_format = L\"%m/%d/%y\";\n-      _M_time_format = L\"%H:%M:%S\";\n-      _M_time_era_format = L\"%H:%M:%S\";\n-      _M_date_time_format = L\"\";\n-      _M_date_time_era_format = L\"\";\n-      _M_am = L\"AM\";\n-      _M_pm = L\"PM\";\n-      _M_am_pm_format = L\"\";\n+      // \"C\" locale.\n+      if (!_M_data)\n+\t_M_data = new __timepunct_cache<wchar_t>;\n+\n+      _M_data->_M_date_format = L\"%m/%d/%y\";\n+      _M_data->_M_date_era_format = L\"%m/%d/%y\";\n+      _M_data->_M_time_format = L\"%H:%M:%S\";\n+      _M_data->_M_time_era_format = L\"%H:%M:%S\";\n+      _M_data->_M_date_time_format = L\"\";\n+      _M_data->_M_date_time_era_format = L\"\";\n+      _M_data->_M_am = L\"AM\";\n+      _M_data->_M_pm = L\"PM\";\n+      _M_data->_M_am_pm_format = L\"\";\n \n       // Day names, starting with \"C\"'s Sunday.\n-      _M_day1 = L\"Sunday\";\n-      _M_day2 = L\"Monday\";\n-      _M_day3 = L\"Tuesday\";\n-      _M_day4 = L\"Wednesday\";\n-      _M_day5 = L\"Thursday\";\n-      _M_day6 = L\"Friday\";\n-      _M_day7 = L\"Saturday\";\n+      _M_data->_M_day1 = L\"Sunday\";\n+      _M_data->_M_day2 = L\"Monday\";\n+      _M_data->_M_day3 = L\"Tuesday\";\n+      _M_data->_M_day4 = L\"Wednesday\";\n+      _M_data->_M_day5 = L\"Thursday\";\n+      _M_data->_M_day6 = L\"Friday\";\n+      _M_data->_M_day7 = L\"Saturday\";\n \n       // Abbreviated day names, starting with \"C\"'s Sun.\n-      _M_day_a1 = L\"Sun\";\n-      _M_day_a2 = L\"Mon\";\n-      _M_day_a3 = L\"Tue\";\n-      _M_day_a4 = L\"Wed\";\n-      _M_day_a5 = L\"Thu\";\n-      _M_day_a6 = L\"Fri\";\n-      _M_day_a7 = L\"Sat\";\n+      _M_data->_M_aday1 = L\"Sun\";\n+      _M_data->_M_aday2 = L\"Mon\";\n+      _M_data->_M_aday3 = L\"Tue\";\n+      _M_data->_M_aday4 = L\"Wed\";\n+      _M_data->_M_aday5 = L\"Thu\";\n+      _M_data->_M_aday6 = L\"Fri\";\n+      _M_data->_M_aday7 = L\"Sat\";\n \n       // Month names, starting with \"C\"'s January.\n-      _M_month01 = L\"January\";\n-      _M_month02 = L\"February\";\n-      _M_month03 = L\"March\";\n-      _M_month04 = L\"April\";\n-      _M_month05 = L\"May\";\n-      _M_month06 = L\"June\";\n-      _M_month07 = L\"July\";\n-      _M_month08 = L\"August\";\n-      _M_month09 = L\"September\";\n-      _M_month10 = L\"October\";\n-      _M_month11 = L\"November\";\n-      _M_month12 = L\"December\";\n+      _M_data->_M_month01 = L\"January\";\n+      _M_data->_M_month02 = L\"February\";\n+      _M_data->_M_month03 = L\"March\";\n+      _M_data->_M_month04 = L\"April\";\n+      _M_data->_M_month05 = L\"May\";\n+      _M_data->_M_month06 = L\"June\";\n+      _M_data->_M_month07 = L\"July\";\n+      _M_data->_M_month08 = L\"August\";\n+      _M_data->_M_month09 = L\"September\";\n+      _M_data->_M_month10 = L\"October\";\n+      _M_data->_M_month11 = L\"November\";\n+      _M_data->_M_month12 = L\"December\";\n \n       // Abbreviated month names, starting with \"C\"'s Jan.\n-      _M_month_a01 = L\"Jan\";\n-      _M_month_a02 = L\"Feb\";\n-      _M_month_a03 = L\"Mar\";\n-      _M_month_a04 = L\"Apr\";\n-      _M_month_a05 = L\"May\";\n-      _M_month_a06 = L\"Jun\";\n-      _M_month_a07 = L\"July\";\n-      _M_month_a08 = L\"Aug\";\n-      _M_month_a09 = L\"Sep\";\n-      _M_month_a10 = L\"Oct\";\n-      _M_month_a11 = L\"Nov\";\n-      _M_month_a12 = L\"Dec\";\n+      _M_data->_M_amonth01 = L\"Jan\";\n+      _M_data->_M_amonth02 = L\"Feb\";\n+      _M_data->_M_amonth03 = L\"Mar\";\n+      _M_data->_M_amonth04 = L\"Apr\";\n+      _M_data->_M_amonth05 = L\"May\";\n+      _M_data->_M_amonth06 = L\"Jun\";\n+      _M_data->_M_amonth07 = L\"July\";\n+      _M_data->_M_amonth08 = L\"Aug\";\n+      _M_data->_M_amonth09 = L\"Sep\";\n+      _M_data->_M_amonth10 = L\"Oct\";\n+      _M_data->_M_amonth11 = L\"Nov\";\n+      _M_data->_M_amonth12 = L\"Dec\";\n     }\n #endif\n }"}, {"sha": "8db2cb53ed85144417ceb1128c9b1f4a201cf90e", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -36,7 +36,15 @@\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : locale::facet(__refs)\n+    : facet(__refs), _M_data(NULL)\n+    { \n+      _M_name_timepunct = _S_c_name;\n+      _M_initialize_timepunct(); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n+    : facet(__refs), _M_data(__cache)\n     { \n       _M_name_timepunct = _S_c_name;\n       _M_initialize_timepunct(); \n@@ -45,7 +53,7 @@\n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s, \n \t\t\t\t     size_t __refs) \n-    : locale::facet(__refs)\n+    : facet(__refs), _M_data(NULL)\n     { \n       _M_name_timepunct = new char[strlen(__s) + 1];\n       strcpy(_M_name_timepunct, __s);\n@@ -57,5 +65,6 @@\n     { \n       if (_S_c_name != _M_name_timepunct)\n \tdelete [] _M_name_timepunct;\n+      delete _M_data;\n       _S_destroy_c_locale(_M_c_locale_timepunct); \n     }"}, {"sha": "48dcf32dd2e43f60fd1ee88db626f2dce8346484", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -36,7 +36,7 @@\n   // Non-virtual member functions.\n   template<typename _CharT>\n      messages<_CharT>::messages(size_t __refs)\n-     : locale::facet(__refs)\n+     : facet(__refs)\n      {  \n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n        _M_name_messages = _S_c_name;\n@@ -48,7 +48,7 @@\n      messages<_CharT>::messages(__c_locale __cloc, \n \t\t\t\tconst char* __s __attribute__ ((__unused__)), \n \t\t\t\tsize_t __refs) \n-     : locale::facet(__refs)\n+     : facet(__refs)\n      {\n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)) \n        _M_name_messages = new char[strlen(__s) + 1];"}, {"sha": "a22bdfe6f24b4ffeac6361ba28060d18761d1f7d", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 129, "deletions": 97, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -220,43 +220,52 @@ namespace std\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t     const char*)\n     {\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<char>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = '.';\n-\t  _M_thousands_sep = ',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = \"\";\n-\t  _M_positive_sign = \"\";\n-\t  _M_negative_sign = \"\";\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_decimal_point = '.';\n+\t  _M_data->_M_thousands_sep = ',';\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_curr_symbol = \"\";\n+\t  _M_data->_M_positive_sign = \"\";\n+\t  _M_data->_M_negative_sign = \"\";\n+\t  _M_data->_M_frac_digits = 0;\n+\t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n \t}\n       else\n \t{\n \t  // Named locale.\n-\t  _M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, __cloc));\n-\t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n-\t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, \n+\t\t\t\t\t\t\t__cloc));\n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n+\t\t\t\t\t\t\t__cloc));\n+\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n-\t    _M_negative_sign = \"()\";\n+\t    _M_data->_M_negative_sign = \"()\";\n \t  else\n-\t    _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, \n+\t\t\t\t\t\t\t__cloc);\n \n \t  // _Intl == true\n-\t  _M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n-\t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n+\t  _M_data->_M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n+\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t\t\t\t\t\t\t__nposn);\n \t}\n     }\n \n@@ -265,53 +274,61 @@ namespace std\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t      const char*)\n     {\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<char>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = '.';\n-\t  _M_thousands_sep = ',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = \"\";\n-\t  _M_positive_sign = \"\";\n-\t  _M_negative_sign = \"\";\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_decimal_point = '.';\n+\t  _M_data->_M_thousands_sep = ',';\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_curr_symbol = \"\";\n+\t  _M_data->_M_positive_sign = \"\";\n+\t  _M_data->_M_negative_sign = \"\";\n+\t  _M_data->_M_frac_digits = 0;\n+\t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n \t}\n       else\n \t{\n \t  // Named locale.\n-\t  _M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, __cloc));\n-\t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n-\t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, \n+\t\t\t\t\t\t\t__cloc));\n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n+\t\t\t\t\t\t\t__cloc));\n+\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n-\t    _M_negative_sign = \"()\";\n+\t    _M_data->_M_negative_sign = \"()\";\n \t  else\n-\t    _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, \n+\t\t\t\t\t\t\t__cloc);\n \n \t  // _Intl == false\n-\t  _M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n-\t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n+\t  _M_data->_M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n+\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t\t\t\t\t\t\t__nposn);\n \t}\n     }\n \n   template<> \n     moneypunct<char, true>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n \n   template<> \n     moneypunct<char, false>::~moneypunct()\n-    { }\n+    { delete _M_data; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n@@ -323,18 +340,21 @@ namespace std\n \t\t\t\t\t\t\tconst char* __name)\n #endif\n     {\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<wchar_t>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = L'.';\n-\t  _M_thousands_sep = L',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = L\"\";\n-\t  _M_positive_sign = L\"\";\n-\t  _M_negative_sign = L\"\";\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_decimal_point = L'.';\n+\t  _M_data->_M_thousands_sep = L',';\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_curr_symbol = L\"\";\n+\t  _M_data->_M_positive_sign = L\"\";\n+\t  _M_data->_M_negative_sign = L\"\";\n+\t  _M_data->_M_frac_digits = 0;\n+\t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n \t}\n       else\n \t{\n@@ -349,11 +369,11 @@ namespace std\n \n \t  union __s_and_w { const char *__s; unsigned int __w; } __u;\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc);\n-\t  _M_decimal_point = static_cast<wchar_t>(__u.__w);\n+\t  _M_data->_M_decimal_point = static_cast<wchar_t>(__u.__w);\n \n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n-\t  _M_thousands_sep = static_cast<wchar_t>(__u.__w);\n-\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_data->_M_thousands_sep = static_cast<wchar_t>(__u.__w);\n+\t  _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -367,25 +387,25 @@ namespace std\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n-\t      _M_positive_sign = __wcs;\n+\t      _M_data->_M_positive_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_positive_sign = L\"\";\n+\t    _M_data->_M_positive_sign = L\"\";\n \n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  __len = strlen(__cnegsign);\n \t  if (!__nposn)\n-\t    _M_negative_sign = L\"()\";\n+\t    _M_data->_M_negative_sign = L\"()\";\n \t  else if (__len)\n \t    { \n \t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n-\t      _M_negative_sign = __wcs;\n+\t      _M_data->_M_negative_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_negative_sign = L\"\";\n+\t    _M_data->_M_negative_sign = L\"\";\n \n \t  // _Intl == true.\n \t  __len = strlen(__ccurr);\n@@ -395,19 +415,22 @@ namespace std\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n-\t      _M_curr_symbol = __wcs;\n+\t      _M_data->_M_curr_symbol = __wcs;\n \t    }\n \t  else\n-\t    _M_curr_symbol = L\"\";\n+\t    _M_data->_M_curr_symbol = L\"\";\n \n-\t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n+\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t\t\t\t\t\t\t__nposn);\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t  __uselocale(__old);\n@@ -427,18 +450,21 @@ namespace std\n \t\t\t\t\t\t\t const char* __name)\n #endif\n     {\n+      if (!_M_data)\n+\t_M_data = new __moneypunct_cache<wchar_t>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = L'.';\n-\t  _M_thousands_sep = L',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = L\"\";\n-\t  _M_positive_sign = L\"\";\n-\t  _M_negative_sign = L\"\";\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_decimal_point = L'.';\n+\t  _M_data->_M_thousands_sep = L',';\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_curr_symbol = L\"\";\n+\t  _M_data->_M_positive_sign = L\"\";\n+\t  _M_data->_M_negative_sign = L\"\";\n+\t  _M_data->_M_frac_digits = 0;\n+\t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n+\t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n \t}\n       else\n \t{\n@@ -453,11 +479,11 @@ namespace std\n \n \t  union __s_and_w { const char *__s; unsigned int __w; } __u;\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc);\n-\t  _M_decimal_point = static_cast<wchar_t>(__u.__w);\n+\t  _M_data->_M_decimal_point = static_cast<wchar_t>(__u.__w);\n \n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n-\t  _M_thousands_sep = static_cast<wchar_t>(__u.__w);\n-\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_data->_M_thousands_sep = static_cast<wchar_t>(__u.__w);\n+\t  _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -472,25 +498,25 @@ namespace std\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n-\t      _M_positive_sign = __wcs;\n+\t      _M_data->_M_positive_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_positive_sign = L\"\";\n+\t    _M_data->_M_positive_sign = L\"\";\n \n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  __len = strlen(__cnegsign);\n \t  if (!__nposn)\n-\t    _M_negative_sign = L\"()\";\n+\t    _M_data->_M_negative_sign = L\"()\";\n \t  else if (__len)\n \t    { \n \t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n-\t      _M_negative_sign = __wcs;\n+\t      _M_data->_M_negative_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_negative_sign = L\"\";\n+\t    _M_data->_M_negative_sign = L\"\";\n \n \t  // _Intl == true.\n \t  __len = strlen(__ccurr);\n@@ -500,19 +526,21 @@ namespace std\n \t      memset(&__state, 0, sizeof(mbstate_t));\n \t      wchar_t* __wcs = new wchar_t[__len];\n \t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n-\t      _M_curr_symbol = __wcs;\n+\t      _M_data->_M_curr_symbol = __wcs;\n \t    }\n \t  else\n-\t    _M_curr_symbol = L\"\";\n+\t    _M_data->_M_curr_symbol = L\"\";\n \n-\t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n+\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t                                                __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t                                                __nposn);\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t  __uselocale(__old);\n@@ -526,23 +554,27 @@ namespace std\n   template<> \n     moneypunct<wchar_t, true>::~moneypunct()\n     {\n-      if (wcslen(_M_positive_sign))\n-\tdelete [] _M_positive_sign;\n-      if (wcslen(_M_negative_sign) && (wcscmp(_M_negative_sign, L\"()\") != 0))\n-\tdelete [] _M_negative_sign;\n-      if (wcslen(_M_curr_symbol))\n-\tdelete [] _M_curr_symbol;\n+      if (wcslen(_M_data->_M_positive_sign))\n+\tdelete [] _M_data->_M_positive_sign;\n+      if (wcslen(_M_data->_M_negative_sign) \n+\t&& (wcscmp(_M_data->_M_negative_sign, L\"()\") != 0))\n+\tdelete [] _M_data->_M_negative_sign;\n+      if (wcslen(_M_data->_M_curr_symbol))\n+\tdelete [] _M_data->_M_curr_symbol;\n+      delete _M_data;\n     }\n \n   template<> \n     moneypunct<wchar_t, false>::~moneypunct()\n     {\n-      if (wcslen(_M_positive_sign))\n-\tdelete [] _M_positive_sign;\n-      if (wcslen(_M_negative_sign) && (wcscmp(_M_negative_sign, L\"()\") != 0))\n-\tdelete [] _M_negative_sign;\n-      if (wcslen(_M_curr_symbol))\n-\tdelete [] _M_curr_symbol;\n+      if (wcslen(_M_data->_M_positive_sign))\n+\tdelete [] _M_data->_M_positive_sign;\n+      if (wcslen(_M_data->_M_negative_sign) \n+\t&& (wcscmp(_M_data->_M_negative_sign, L\"()\") != 0))\n+\tdelete [] _M_data->_M_negative_sign;\n+      if (wcslen(_M_data->_M_curr_symbol))\n+\tdelete [] _M_data->_M_curr_symbol;\n+      delete _M_data;\n     }\n #endif\n }"}, {"sha": "e49b66b256f29a0afce29371839de8389834e287", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 195, "deletions": 189, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,126 +60,129 @@ namespace std\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n+      if (!_M_data)\n+\t_M_data = new __timepunct_cache<char>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_c_locale_timepunct = _S_c_locale;\n \n-\t  _M_date_format = \"%m/%d/%y\";\n-\t  _M_date_era_format = \"%m/%d/%y\";\n-\t  _M_time_format = \"%H:%M:%S\";\n-\t  _M_time_era_format = \"%H:%M:%S\";\n-\t  _M_date_time_format = \"\";\n-\t  _M_date_time_era_format = \"\";\n-\t  _M_am = \"AM\";\n-\t  _M_pm = \"PM\";\n-\t  _M_am_pm_format = \"\";\n+\t  _M_data->_M_date_format = \"%m/%d/%y\";\n+\t  _M_data->_M_date_era_format = \"%m/%d/%y\";\n+\t  _M_data->_M_time_format = \"%H:%M:%S\";\n+\t  _M_data->_M_time_era_format = \"%H:%M:%S\";\n+\t  _M_data->_M_date_time_format = \"\";\n+\t  _M_data->_M_date_time_era_format = \"\";\n+\t  _M_data->_M_am = \"AM\";\n+\t  _M_data->_M_pm = \"PM\";\n+\t  _M_data->_M_am_pm_format = \"\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n-\t  _M_day1 = \"Sunday\";\n-\t  _M_day2 = \"Monday\";\n-\t  _M_day3 = \"Tuesday\";\n-\t  _M_day4 = \"Wednesday\";\n-\t  _M_day5 = \"Thursday\";\n-\t  _M_day6 = \"Friday\";\n-\t  _M_day7 = \"Saturday\";\n+\t  _M_data->_M_day1 = \"Sunday\";\n+\t  _M_data->_M_day2 = \"Monday\";\n+\t  _M_data->_M_day3 = \"Tuesday\";\n+\t  _M_data->_M_day4 = \"Wednesday\";\n+\t  _M_data->_M_day5 = \"Thursday\";\n+\t  _M_data->_M_day6 = \"Friday\";\n+\t  _M_data->_M_day7 = \"Saturday\";\n \n \t  // Abbreviated day names, starting with \"C\"'s Sun.\n-\t  _M_day_a1 = \"Sun\";\n-\t  _M_day_a2 = \"Mon\";\n-\t  _M_day_a3 = \"Tue\";\n-\t  _M_day_a4 = \"Wed\";\n-\t  _M_day_a5 = \"Thu\";\n-\t  _M_day_a6 = \"Fri\";\n-\t  _M_day_a7 = \"Sat\";\n+\t  _M_data->_M_aday1 = \"Sun\";\n+\t  _M_data->_M_aday2 = \"Mon\";\n+\t  _M_data->_M_aday3 = \"Tue\";\n+\t  _M_data->_M_aday4 = \"Wed\";\n+\t  _M_data->_M_aday5 = \"Thu\";\n+\t  _M_data->_M_aday6 = \"Fri\";\n+\t  _M_data->_M_aday7 = \"Sat\";\n \n \t  // Month names, starting with \"C\"'s January.\n-\t  _M_month01 = \"January\";\n-\t  _M_month02 = \"February\";\n-\t  _M_month03 = \"March\";\n-\t  _M_month04 = \"April\";\n-\t  _M_month05 = \"May\";\n-\t  _M_month06 = \"June\";\n-\t  _M_month07 = \"July\";\n-\t  _M_month08 = \"August\";\n-\t  _M_month09 = \"September\";\n-\t  _M_month10 = \"October\";\n-\t  _M_month11 = \"November\";\n-\t  _M_month12 = \"December\";\n+\t  _M_data->_M_month01 = \"January\";\n+\t  _M_data->_M_month02 = \"February\";\n+\t  _M_data->_M_month03 = \"March\";\n+\t  _M_data->_M_month04 = \"April\";\n+\t  _M_data->_M_month05 = \"May\";\n+\t  _M_data->_M_month06 = \"June\";\n+\t  _M_data->_M_month07 = \"July\";\n+\t  _M_data->_M_month08 = \"August\";\n+\t  _M_data->_M_month09 = \"September\";\n+\t  _M_data->_M_month10 = \"October\";\n+\t  _M_data->_M_month11 = \"November\";\n+\t  _M_data->_M_month12 = \"December\";\n \n \t  // Abbreviated month names, starting with \"C\"'s Jan.\n-\t  _M_month_a01 = \"Jan\";\n-\t  _M_month_a02 = \"Feb\";\n-\t  _M_month_a03 = \"Mar\";\n-\t  _M_month_a04 = \"Apr\";\n-\t  _M_month_a05 = \"May\";\n-\t  _M_month_a06 = \"Jun\";\n-\t  _M_month_a07 = \"July\";\n-\t  _M_month_a08 = \"Aug\";\n-\t  _M_month_a09 = \"Sep\";\n-\t  _M_month_a10 = \"Oct\";\n-\t  _M_month_a11 = \"Nov\";\n-\t  _M_month_a12 = \"Dec\";\n+\t  _M_data->_M_amonth01 = \"Jan\";\n+\t  _M_data->_M_amonth02 = \"Feb\";\n+\t  _M_data->_M_amonth03 = \"Mar\";\n+\t  _M_data->_M_amonth04 = \"Apr\";\n+\t  _M_data->_M_amonth05 = \"May\";\n+\t  _M_data->_M_amonth06 = \"Jun\";\n+\t  _M_data->_M_amonth07 = \"July\";\n+\t  _M_data->_M_amonth08 = \"Aug\";\n+\t  _M_data->_M_amonth09 = \"Sep\";\n+\t  _M_data->_M_amonth10 = \"Oct\";\n+\t  _M_data->_M_amonth11 = \"Nov\";\n+\t  _M_data->_M_amonth12 = \"Dec\";\n \t}\n       else\n \t{\n \t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n \n-\t  _M_date_format = __nl_langinfo_l(D_FMT, __cloc);\n-\t  _M_date_era_format = __nl_langinfo_l(ERA_D_FMT, __cloc);\n-\t  _M_time_format = __nl_langinfo_l(T_FMT, __cloc);\n-\t  _M_time_era_format = __nl_langinfo_l(ERA_T_FMT, __cloc);\n-\t  _M_date_time_format = __nl_langinfo_l(D_T_FMT, __cloc);\n-\t  _M_date_time_era_format = __nl_langinfo_l(ERA_D_T_FMT, __cloc);\n-\t  _M_am = __nl_langinfo_l(AM_STR, __cloc);\n-\t  _M_pm = __nl_langinfo_l(PM_STR, __cloc);\n-\t  _M_am_pm_format = __nl_langinfo_l(T_FMT_AMPM, __cloc);\n+\t  _M_data->_M_date_format = __nl_langinfo_l(D_FMT, __cloc);\n+\t  _M_data->_M_date_era_format = __nl_langinfo_l(ERA_D_FMT, __cloc);\n+\t  _M_data->_M_time_format = __nl_langinfo_l(T_FMT, __cloc);\n+\t  _M_data->_M_time_era_format = __nl_langinfo_l(ERA_T_FMT, __cloc);\n+\t  _M_data->_M_date_time_format = __nl_langinfo_l(D_T_FMT, __cloc);\n+\t  _M_data->_M_date_time_era_format = __nl_langinfo_l(ERA_D_T_FMT, __cloc);\n+\t  _M_data->_M_am = __nl_langinfo_l(AM_STR, __cloc);\n+\t  _M_data->_M_pm = __nl_langinfo_l(PM_STR, __cloc);\n+\t  _M_data->_M_am_pm_format = __nl_langinfo_l(T_FMT_AMPM, __cloc);\n \n \t  // Day names, starting with \"C\"'s Sunday.\n-\t  _M_day1 = __nl_langinfo_l(DAY_1, __cloc);\n-\t  _M_day2 = __nl_langinfo_l(DAY_2, __cloc);\n-\t  _M_day3 = __nl_langinfo_l(DAY_3, __cloc);\n-\t  _M_day4 = __nl_langinfo_l(DAY_4, __cloc);\n-\t  _M_day5 = __nl_langinfo_l(DAY_5, __cloc);\n-\t  _M_day6 = __nl_langinfo_l(DAY_6, __cloc);\n-\t  _M_day7 = __nl_langinfo_l(DAY_7, __cloc);\n+\t  _M_data->_M_day1 = __nl_langinfo_l(DAY_1, __cloc);\n+\t  _M_data->_M_day2 = __nl_langinfo_l(DAY_2, __cloc);\n+\t  _M_data->_M_day3 = __nl_langinfo_l(DAY_3, __cloc);\n+\t  _M_data->_M_day4 = __nl_langinfo_l(DAY_4, __cloc);\n+\t  _M_data->_M_day5 = __nl_langinfo_l(DAY_5, __cloc);\n+\t  _M_data->_M_day6 = __nl_langinfo_l(DAY_6, __cloc);\n+\t  _M_data->_M_day7 = __nl_langinfo_l(DAY_7, __cloc);\n \n \t  // Abbreviated day names, starting with \"C\"'s Sun.\n-\t  _M_day_a1 = __nl_langinfo_l(ABDAY_1, __cloc);\n-\t  _M_day_a2 = __nl_langinfo_l(ABDAY_2, __cloc);\n-\t  _M_day_a3 = __nl_langinfo_l(ABDAY_3, __cloc);\n-\t  _M_day_a4 = __nl_langinfo_l(ABDAY_4, __cloc);\n-\t  _M_day_a5 = __nl_langinfo_l(ABDAY_5, __cloc);\n-\t  _M_day_a6 = __nl_langinfo_l(ABDAY_6, __cloc);\n-\t  _M_day_a7 = __nl_langinfo_l(ABDAY_7, __cloc);\n+\t  _M_data->_M_aday1 = __nl_langinfo_l(ABDAY_1, __cloc);\n+\t  _M_data->_M_aday2 = __nl_langinfo_l(ABDAY_2, __cloc);\n+\t  _M_data->_M_aday3 = __nl_langinfo_l(ABDAY_3, __cloc);\n+\t  _M_data->_M_aday4 = __nl_langinfo_l(ABDAY_4, __cloc);\n+\t  _M_data->_M_aday5 = __nl_langinfo_l(ABDAY_5, __cloc);\n+\t  _M_data->_M_aday6 = __nl_langinfo_l(ABDAY_6, __cloc);\n+\t  _M_data->_M_aday7 = __nl_langinfo_l(ABDAY_7, __cloc);\n \n \t  // Month names, starting with \"C\"'s January.\n-\t  _M_month01 = __nl_langinfo_l(MON_1, __cloc);\n-\t  _M_month02 = __nl_langinfo_l(MON_2, __cloc);\n-\t  _M_month03 = __nl_langinfo_l(MON_3, __cloc);\n-\t  _M_month04 = __nl_langinfo_l(MON_4, __cloc);\n-\t  _M_month05 = __nl_langinfo_l(MON_5, __cloc);\n-\t  _M_month06 = __nl_langinfo_l(MON_6, __cloc);\n-\t  _M_month07 = __nl_langinfo_l(MON_7, __cloc);\n-\t  _M_month08 = __nl_langinfo_l(MON_8, __cloc);\n-\t  _M_month09 = __nl_langinfo_l(MON_9, __cloc);\n-\t  _M_month10 = __nl_langinfo_l(MON_10, __cloc);\n-\t  _M_month11 = __nl_langinfo_l(MON_11, __cloc);\n-\t  _M_month12 = __nl_langinfo_l(MON_12, __cloc);\n+\t  _M_data->_M_month01 = __nl_langinfo_l(MON_1, __cloc);\n+\t  _M_data->_M_month02 = __nl_langinfo_l(MON_2, __cloc);\n+\t  _M_data->_M_month03 = __nl_langinfo_l(MON_3, __cloc);\n+\t  _M_data->_M_month04 = __nl_langinfo_l(MON_4, __cloc);\n+\t  _M_data->_M_month05 = __nl_langinfo_l(MON_5, __cloc);\n+\t  _M_data->_M_month06 = __nl_langinfo_l(MON_6, __cloc);\n+\t  _M_data->_M_month07 = __nl_langinfo_l(MON_7, __cloc);\n+\t  _M_data->_M_month08 = __nl_langinfo_l(MON_8, __cloc);\n+\t  _M_data->_M_month09 = __nl_langinfo_l(MON_9, __cloc);\n+\t  _M_data->_M_month10 = __nl_langinfo_l(MON_10, __cloc);\n+\t  _M_data->_M_month11 = __nl_langinfo_l(MON_11, __cloc);\n+\t  _M_data->_M_month12 = __nl_langinfo_l(MON_12, __cloc);\n \n \t  // Abbreviated month names, starting with \"C\"'s Jan.\n-\t  _M_month_a01 = __nl_langinfo_l(ABMON_1, __cloc);\n-\t  _M_month_a02 = __nl_langinfo_l(ABMON_2, __cloc);\n-\t  _M_month_a03 = __nl_langinfo_l(ABMON_3, __cloc);\n-\t  _M_month_a04 = __nl_langinfo_l(ABMON_4, __cloc);\n-\t  _M_month_a05 = __nl_langinfo_l(ABMON_5, __cloc);\n-\t  _M_month_a06 = __nl_langinfo_l(ABMON_6, __cloc);\n-\t  _M_month_a07 = __nl_langinfo_l(ABMON_7, __cloc);\n-\t  _M_month_a08 = __nl_langinfo_l(ABMON_8, __cloc);\n-\t  _M_month_a09 = __nl_langinfo_l(ABMON_9, __cloc);\n-\t  _M_month_a10 = __nl_langinfo_l(ABMON_10, __cloc);\n-\t  _M_month_a11 = __nl_langinfo_l(ABMON_11, __cloc);\n-\t  _M_month_a12 = __nl_langinfo_l(ABMON_12, __cloc);\n+\t  _M_data->_M_amonth01 = __nl_langinfo_l(ABMON_1, __cloc);\n+\t  _M_data->_M_amonth02 = __nl_langinfo_l(ABMON_2, __cloc);\n+\t  _M_data->_M_amonth03 = __nl_langinfo_l(ABMON_3, __cloc);\n+\t  _M_data->_M_amonth04 = __nl_langinfo_l(ABMON_4, __cloc);\n+\t  _M_data->_M_amonth05 = __nl_langinfo_l(ABMON_5, __cloc);\n+\t  _M_data->_M_amonth06 = __nl_langinfo_l(ABMON_6, __cloc);\n+\t  _M_data->_M_amonth07 = __nl_langinfo_l(ABMON_7, __cloc);\n+\t  _M_data->_M_amonth08 = __nl_langinfo_l(ABMON_8, __cloc);\n+\t  _M_data->_M_amonth09 = __nl_langinfo_l(ABMON_9, __cloc);\n+\t  _M_data->_M_amonth10 = __nl_langinfo_l(ABMON_10, __cloc);\n+\t  _M_data->_M_amonth11 = __nl_langinfo_l(ABMON_11, __cloc);\n+\t  _M_data->_M_amonth12 = __nl_langinfo_l(ABMON_12, __cloc);\n \t}\n     }\n \n@@ -205,126 +208,129 @@ namespace std\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n+      if (!_M_data)\n+\t_M_data = new __timepunct_cache<wchar_t>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_c_locale_timepunct = _S_c_locale;\n \n-\t  _M_date_format = L\"%m/%d/%y\";\n-\t  _M_date_era_format = L\"%m/%d/%y\";\n-\t  _M_time_format = L\"%H:%M:%S\";\n-\t  _M_time_era_format = L\"%H:%M:%S\";\n-\t  _M_date_time_format = L\"\";\n-\t  _M_date_time_era_format = L\"\";\n-\t  _M_am = L\"AM\";\n-\t  _M_pm = L\"PM\";\n-\t  _M_am_pm_format = L\"\";\n+\t  _M_data->_M_date_format = L\"%m/%d/%y\";\n+\t  _M_data->_M_date_era_format = L\"%m/%d/%y\";\n+\t  _M_data->_M_time_format = L\"%H:%M:%S\";\n+\t  _M_data->_M_time_era_format = L\"%H:%M:%S\";\n+\t  _M_data->_M_date_time_format = L\"\";\n+\t  _M_data->_M_date_time_era_format = L\"\";\n+\t  _M_data->_M_am = L\"AM\";\n+\t  _M_data->_M_pm = L\"PM\";\n+\t  _M_data->_M_am_pm_format = L\"\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n-\t  _M_day1 = L\"Sunday\";\n-\t  _M_day2 = L\"Monday\";\n-\t  _M_day3 = L\"Tuesday\";\n-\t  _M_day4 = L\"Wednesday\";\n-\t  _M_day5 = L\"Thursday\";\n-\t  _M_day6 = L\"Friday\";\n-\t  _M_day7 = L\"Saturday\";\n+\t  _M_data->_M_day1 = L\"Sunday\";\n+\t  _M_data->_M_day2 = L\"Monday\";\n+\t  _M_data->_M_day3 = L\"Tuesday\";\n+\t  _M_data->_M_day4 = L\"Wednesday\";\n+\t  _M_data->_M_day5 = L\"Thursday\";\n+\t  _M_data->_M_day6 = L\"Friday\";\n+\t  _M_data->_M_day7 = L\"Saturday\";\n \n \t  // Abbreviated day names, starting with \"C\"'s Sun.\n-\t  _M_day_a1 = L\"Sun\";\n-\t  _M_day_a2 = L\"Mon\";\n-\t  _M_day_a3 = L\"Tue\";\n-\t  _M_day_a4 = L\"Wed\";\n-\t  _M_day_a5 = L\"Thu\";\n-\t  _M_day_a6 = L\"Fri\";\n-\t  _M_day_a7 = L\"Sat\";\n+\t  _M_data->_M_aday1 = L\"Sun\";\n+\t  _M_data->_M_aday2 = L\"Mon\";\n+\t  _M_data->_M_aday3 = L\"Tue\";\n+\t  _M_data->_M_aday4 = L\"Wed\";\n+\t  _M_data->_M_aday5 = L\"Thu\";\n+\t  _M_data->_M_aday6 = L\"Fri\";\n+\t  _M_data->_M_aday7 = L\"Sat\";\n \n \t  // Month names, starting with \"C\"'s January.\n-\t  _M_month01 = L\"January\";\n-\t  _M_month02 = L\"February\";\n-\t  _M_month03 = L\"March\";\n-\t  _M_month04 = L\"April\";\n-\t  _M_month05 = L\"May\";\n-\t  _M_month06 = L\"June\";\n-\t  _M_month07 = L\"July\";\n-\t  _M_month08 = L\"August\";\n-\t  _M_month09 = L\"September\";\n-\t  _M_month10 = L\"October\";\n-\t  _M_month11 = L\"November\";\n-\t  _M_month12 = L\"December\";\n+\t  _M_data->_M_month01 = L\"January\";\n+\t  _M_data->_M_month02 = L\"February\";\n+\t  _M_data->_M_month03 = L\"March\";\n+\t  _M_data->_M_month04 = L\"April\";\n+\t  _M_data->_M_month05 = L\"May\";\n+\t  _M_data->_M_month06 = L\"June\";\n+\t  _M_data->_M_month07 = L\"July\";\n+\t  _M_data->_M_month08 = L\"August\";\n+\t  _M_data->_M_month09 = L\"September\";\n+\t  _M_data->_M_month10 = L\"October\";\n+\t  _M_data->_M_month11 = L\"November\";\n+\t  _M_data->_M_month12 = L\"December\";\n \n \t  // Abbreviated month names, starting with \"C\"'s Jan.\n-\t  _M_month_a01 = L\"Jan\";\n-\t  _M_month_a02 = L\"Feb\";\n-\t  _M_month_a03 = L\"Mar\";\n-\t  _M_month_a04 = L\"Apr\";\n-\t  _M_month_a05 = L\"May\";\n-\t  _M_month_a06 = L\"Jun\";\n-\t  _M_month_a07 = L\"July\";\n-\t  _M_month_a08 = L\"Aug\";\n-\t  _M_month_a09 = L\"Sep\";\n-\t  _M_month_a10 = L\"Oct\";\n-\t  _M_month_a11 = L\"Nov\";\n-\t  _M_month_a12 = L\"Dec\";\n+\t  _M_data->_M_amonth01 = L\"Jan\";\n+\t  _M_data->_M_amonth02 = L\"Feb\";\n+\t  _M_data->_M_amonth03 = L\"Mar\";\n+\t  _M_data->_M_amonth04 = L\"Apr\";\n+\t  _M_data->_M_amonth05 = L\"May\";\n+\t  _M_data->_M_amonth06 = L\"Jun\";\n+\t  _M_data->_M_amonth07 = L\"July\";\n+\t  _M_data->_M_amonth08 = L\"Aug\";\n+\t  _M_data->_M_amonth09 = L\"Sep\";\n+\t  _M_data->_M_amonth10 = L\"Oct\";\n+\t  _M_data->_M_amonth11 = L\"Nov\";\n+\t  _M_data->_M_amonth12 = L\"Dec\";\n \t}\n       else\n \t{\n \t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n \n-\t  _M_date_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_FMT, __cloc));\n-\t  _M_date_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_FMT, __cloc));\n-\t  _M_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT, __cloc));\n-\t  _M_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_T_FMT, __cloc));\n-\t  _M_date_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_T_FMT, __cloc));\n-\t  _M_date_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_T_FMT, __cloc));\n-\t  _M_am = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WAM_STR, __cloc));\n-\t  _M_pm = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WPM_STR, __cloc));\n-\t  _M_am_pm_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT_AMPM, __cloc));\n+\t  _M_data->_M_date_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_FMT, __cloc));\n+\t  _M_data->_M_date_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_FMT, __cloc));\n+\t  _M_data->_M_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT, __cloc));\n+\t  _M_data->_M_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_T_FMT, __cloc));\n+\t  _M_data->_M_date_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_T_FMT, __cloc));\n+\t  _M_data->_M_date_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_T_FMT, __cloc));\n+\t  _M_data->_M_am = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WAM_STR, __cloc));\n+\t  _M_data->_M_pm = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WPM_STR, __cloc));\n+\t  _M_data->_M_am_pm_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT_AMPM, __cloc));\n \n \t  // Day names, starting with \"C\"'s Sunday.\n-\t  _M_day1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_1, __cloc));\n-\t  _M_day2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_2, __cloc));\n-\t  _M_day3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_3, __cloc));\n-\t  _M_day4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_4, __cloc));\n-\t  _M_day5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_5, __cloc));\n-\t  _M_day6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_6, __cloc));\n-\t  _M_day7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_7, __cloc));\n+\t  _M_data->_M_day1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_1, __cloc));\n+\t  _M_data->_M_day2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_2, __cloc));\n+\t  _M_data->_M_day3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_3, __cloc));\n+\t  _M_data->_M_day4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_4, __cloc));\n+\t  _M_data->_M_day5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_5, __cloc));\n+\t  _M_data->_M_day6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_6, __cloc));\n+\t  _M_data->_M_day7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_7, __cloc));\n \n \t  // Abbreviated day names, starting with \"C\"'s Sun.\n-\t  _M_day_a1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_1, __cloc));\n-\t  _M_day_a2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_2, __cloc));\n-\t  _M_day_a3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_3, __cloc));\n-\t  _M_day_a4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_4, __cloc));\n-\t  _M_day_a5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_5, __cloc));\n-\t  _M_day_a6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_6, __cloc));\n-\t  _M_day_a7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_7, __cloc));\n+\t  _M_data->_M_aday1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_1, __cloc));\n+\t  _M_data->_M_aday2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_2, __cloc));\n+\t  _M_data->_M_aday3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_3, __cloc));\n+\t  _M_data->_M_aday4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_4, __cloc));\n+\t  _M_data->_M_aday5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_5, __cloc));\n+\t  _M_data->_M_aday6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_6, __cloc));\n+\t  _M_data->_M_aday7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_7, __cloc));\n \n \t  // Month names, starting with \"C\"'s January.\n-\t  _M_month01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_1, __cloc));\n-\t  _M_month02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_2, __cloc));\n-\t  _M_month03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_3, __cloc));\n-\t  _M_month04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_4, __cloc));\n-\t  _M_month05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_5, __cloc));\n-\t  _M_month06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_6, __cloc));\n-\t  _M_month07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_7, __cloc));\n-\t  _M_month08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_8, __cloc));\n-\t  _M_month09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_9, __cloc));\n-\t  _M_month10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_10, __cloc));\n-\t  _M_month11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_11, __cloc));\n-\t  _M_month12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_12, __cloc));\n+\t  _M_data->_M_month01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_1, __cloc));\n+\t  _M_data->_M_month02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_2, __cloc));\n+\t  _M_data->_M_month03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_3, __cloc));\n+\t  _M_data->_M_month04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_4, __cloc));\n+\t  _M_data->_M_month05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_5, __cloc));\n+\t  _M_data->_M_month06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_6, __cloc));\n+\t  _M_data->_M_month07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_7, __cloc));\n+\t  _M_data->_M_month08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_8, __cloc));\n+\t  _M_data->_M_month09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_9, __cloc));\n+\t  _M_data->_M_month10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_10, __cloc));\n+\t  _M_data->_M_month11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_11, __cloc));\n+\t  _M_data->_M_month12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_12, __cloc));\n \n \t  // Abbreviated month names, starting with \"C\"'s Jan.\n-\t  _M_month_a01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_1, __cloc));\n-\t  _M_month_a02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_2, __cloc));\n-\t  _M_month_a03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_3, __cloc));\n-\t  _M_month_a04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_4, __cloc));\n-\t  _M_month_a05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_5, __cloc));\n-\t  _M_month_a06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_6, __cloc));\n-\t  _M_month_a07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_7, __cloc));\n-\t  _M_month_a08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_8, __cloc));\n-\t  _M_month_a09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_9, __cloc));\n-\t  _M_month_a10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_10, __cloc));\n-\t  _M_month_a11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_11, __cloc));\n-\t  _M_month_a12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_12, __cloc));\n+\t  _M_data->_M_amonth01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_1, __cloc));\n+\t  _M_data->_M_amonth02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_2, __cloc));\n+\t  _M_data->_M_amonth03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_3, __cloc));\n+\t  _M_data->_M_amonth04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_4, __cloc));\n+\t  _M_data->_M_amonth05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_5, __cloc));\n+\t  _M_data->_M_amonth06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_6, __cloc));\n+\t  _M_data->_M_amonth07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_7, __cloc));\n+\t  _M_data->_M_amonth08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_8, __cloc));\n+\t  _M_data->_M_amonth09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_9, __cloc));\n+\t  _M_data->_M_amonth10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_10, __cloc));\n+\t  _M_data->_M_amonth11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_11, __cloc));\n+\t  _M_data->_M_amonth12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_12, __cloc));\n \t}\n     }\n #endif"}, {"sha": "6badaacbfa0b6e017ce9e42ab8e8d85a48081fff", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -36,7 +36,17 @@\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : locale::facet(__refs)\n+    : facet(__refs), _M_data(NULL)\n+    { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+      _M_name_timepunct = _S_c_name;\n+#endif\n+      _M_initialize_timepunct(); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n+    : facet(__refs), _M_data(__cache)\n     { \n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n       _M_name_timepunct = _S_c_name;\n@@ -48,7 +58,7 @@\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, \n \t\t\t\t const char* __s __attribute__ ((__unused__)), \n \t\t\t\t     size_t __refs) \n-    : locale::facet(__refs)\n+    : facet(__refs), _M_data(NULL)\n     { \n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n       _M_name_timepunct = new char[strlen(__s) + 1];\n@@ -64,5 +74,6 @@\n       if (_S_c_name != _M_name_timepunct)\n \tdelete [] _M_name_timepunct;\n #endif\n+      delete _M_data; \n       _S_destroy_c_locale(_M_c_locale_timepunct); \n     }"}, {"sha": "39a6a2463566b0dd14b4c7a88adb79348bfab960", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 205, "deletions": 122, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -225,7 +225,7 @@ namespace std\n \n     protected:\n       explicit \n-      __ctype_abstract_base(size_t __refs = 0): locale::facet(__refs) { }\n+      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }\n \n       virtual \n       ~__ctype_abstract_base() { }\n@@ -602,7 +602,7 @@ namespace std\n \n       bool\t\t\t\t_M_allocated;\n \n-      __numpunct_cache(size_t __refs = 0) : locale::facet(__refs), \n+      __numpunct_cache(size_t __refs = 0) : facet(__refs), \n       _M_grouping(NULL), _M_use_grouping(false), _M_truename(NULL), \n       _M_falsename(NULL), _M_decimal_point(_CharT()), \n       _M_thousands_sep(_CharT()), _M_allocated(false)\n@@ -692,7 +692,7 @@ namespace std\n \n       explicit \n       numpunct(__c_locale __cloc, size_t __refs = 0) \n-      : locale::facet(__refs), _M_data(NULL)\n+      : facet(__refs), _M_data(NULL)\n       { _M_initialize_numpunct(__cloc); }\n \n       char_type    \n@@ -798,7 +798,7 @@ namespace std\n       static locale::id \t\tid;\n \n       explicit \n-      num_get(size_t __refs = 0) : locale::facet(__refs) { }\n+      num_get(size_t __refs = 0) : facet(__refs) { }\n \n       iter_type \n       get(iter_type __in, iter_type __end, ios_base& __io,\n@@ -944,7 +944,7 @@ namespace std\n       static locale::id\t\tid;\n \n       explicit \n-      num_put(size_t __refs = 0) : locale::facet(__refs) { }\n+      num_put(size_t __refs = 0) : facet(__refs) { }\n \n       iter_type \n       put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const\n@@ -1061,12 +1061,12 @@ namespace std\n \n       explicit \n       collate(size_t __refs = 0)\n-      : locale::facet(__refs)\n+      : facet(__refs)\n       { _M_c_locale_collate = _S_c_locale; }\n \n       explicit \n       collate(__c_locale __cloc, size_t __refs = 0) \n-      : locale::facet(__refs)\n+      : facet(__refs)\n       { _M_c_locale_collate = _S_clone_c_locale(__cloc); }\n \n       int \n@@ -1155,21 +1155,11 @@ namespace std\n   };\n \n   template<typename _CharT>\n-    class __timepunct : public locale::facet\n+    struct __timepunct_cache : public locale::facet\n     {\n-    public:\n-      // Types:\n-      typedef _CharT          \t\t__char_type;\n-      typedef basic_string<_CharT> \t__string_type;\n-\n-      static locale::id \t\tid;\n-\n       // List of all known timezones, with GMT first.\n       static const _CharT* \t\t_S_timezones[14];\n \n-    protected:\n-      __c_locale\t\t\t_M_c_locale_timepunct;\n-      char*\t\t\t\t_M_name_timepunct;\n       const _CharT* \t\t\t_M_date_format;\n       const _CharT* \t\t\t_M_date_era_format;\n       const _CharT* \t\t\t_M_time_format;\n@@ -1190,13 +1180,13 @@ namespace std\n       const _CharT*  \t\t\t_M_day7;\n \n       // Abbreviated day names, starting with \"C\"'s Sun.\n-      const _CharT*  \t\t\t_M_day_a1;\n-      const _CharT*  \t\t\t_M_day_a2;\n-      const _CharT*  \t\t\t_M_day_a3;\n-      const _CharT*  \t\t\t_M_day_a4;\n-      const _CharT*  \t\t\t_M_day_a5;\n-      const _CharT*  \t\t\t_M_day_a6;\n-      const _CharT*  \t\t\t_M_day_a7;\n+      const _CharT*  \t\t\t_M_aday1;\n+      const _CharT*  \t\t\t_M_aday2;\n+      const _CharT*  \t\t\t_M_aday3;\n+      const _CharT*  \t\t\t_M_aday4;\n+      const _CharT*  \t\t\t_M_aday5;\n+      const _CharT*  \t\t\t_M_aday6;\n+      const _CharT*  \t\t\t_M_aday7;\n \n       // Month names, starting with \"C\"'s January.\n       const _CharT*  \t\t\t_M_month01;\n@@ -1213,23 +1203,91 @@ namespace std\n       const _CharT*  \t\t\t_M_month12;\n \n       // Abbreviated month names, starting with \"C\"'s Jan.\n-      const _CharT*  \t\t\t_M_month_a01;\n-      const _CharT*  \t\t\t_M_month_a02;\n-      const _CharT*  \t\t\t_M_month_a03;\n-      const _CharT*  \t\t\t_M_month_a04;\n-      const _CharT*  \t\t\t_M_month_a05;\n-      const _CharT*  \t\t\t_M_month_a06;\n-      const _CharT*  \t\t\t_M_month_a07;\n-      const _CharT*  \t\t\t_M_month_a08;\n-      const _CharT*  \t\t\t_M_month_a09;\n-      const _CharT*  \t\t\t_M_month_a10;\n-      const _CharT*  \t\t\t_M_month_a11;\n-      const _CharT*  \t\t\t_M_month_a12;\n+      const _CharT*  \t\t\t_M_amonth01;\n+      const _CharT*  \t\t\t_M_amonth02;\n+      const _CharT*  \t\t\t_M_amonth03;\n+      const _CharT*  \t\t\t_M_amonth04;\n+      const _CharT*  \t\t\t_M_amonth05;\n+      const _CharT*  \t\t\t_M_amonth06;\n+      const _CharT*  \t\t\t_M_amonth07;\n+      const _CharT*  \t\t\t_M_amonth08;\n+      const _CharT*  \t\t\t_M_amonth09;\n+      const _CharT*  \t\t\t_M_amonth10;\n+      const _CharT*  \t\t\t_M_amonth11;\n+      const _CharT*  \t\t\t_M_amonth12;\n+\n+      bool\t\t\t\t_M_allocated;\n+\n+      __timepunct_cache(size_t __refs = 0) : facet(__refs), \n+      _M_date_format(NULL), _M_date_era_format(NULL), _M_time_format(NULL),\n+      _M_time_era_format(NULL), _M_date_time_format(NULL), \n+      _M_date_time_era_format(NULL), _M_am(NULL), _M_pm(NULL), \n+      _M_am_pm_format(NULL), _M_day1(NULL), _M_day2(NULL), _M_day3(NULL), \n+      _M_day4(NULL), _M_day5(NULL), _M_day6(NULL), _M_day7(NULL), \n+      _M_aday1(NULL), _M_aday2(NULL), _M_aday3(NULL), _M_aday4(NULL), \n+      _M_aday5(NULL), _M_aday6(NULL), _M_aday7(NULL), _M_month01(NULL),\n+      _M_month02(NULL), _M_month03(NULL), _M_month04(NULL), _M_month05(NULL), \n+      _M_month06(NULL), _M_month07(NULL), _M_month08(NULL), _M_month09(NULL), \n+      _M_month10(NULL), _M_month11(NULL), _M_month12(NULL), _M_amonth01(NULL),\n+      _M_amonth02(NULL), _M_amonth03(NULL), _M_amonth04(NULL), \n+      _M_amonth05(NULL), _M_amonth06(NULL), _M_amonth07(NULL), \n+      _M_amonth08(NULL), _M_amonth09(NULL), _M_amonth10(NULL), \n+      _M_amonth11(NULL), _M_amonth12(NULL), _M_allocated(false)\n+      { } \n+\n+      ~__timepunct_cache();\n+\n+      void\n+      _M_cache(const locale& __loc);\n+    };\n+\n+  template<typename _CharT>\n+    __timepunct_cache<_CharT>::~__timepunct_cache()\n+    {\n+      if (_M_allocated)\n+\t{\n+\t  // XXX.\n+\t}\n+    }\n+\n+  // Specializations.\n+  template<> \n+    const char*\n+    __timepunct_cache<char>::_S_timezones[14];\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<> \n+    const wchar_t*\n+    __timepunct_cache<wchar_t>::_S_timezones[14];\n+#endif\n+\n+  // Generic.\n+  template<typename _CharT>\n+    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];\n+\n+  template<typename _CharT>\n+    class __timepunct : public locale::facet\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT          \t\t__char_type;\n+      typedef basic_string<_CharT> \t__string_type;\n+      typedef __timepunct_cache<_CharT>\t__cache_type;\n+\n+    protected:\n+      __cache_type*\t\t\t_M_data;\n+      __c_locale\t\t\t_M_c_locale_timepunct;\n+      char*\t\t\t\t_M_name_timepunct;\n \n     public:\n+      static locale::id \t\tid;\n+\n       explicit \n       __timepunct(size_t __refs = 0);\n \n+      explicit \n+      __timepunct(__cache_type* __cache, size_t __refs = 0);\n+\n       explicit \n       __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);\n \n@@ -1241,89 +1299,89 @@ namespace std\n       _M_date_formats(const _CharT** __date) const\n       {\n \t// Always have default first.\n-\t__date[0] = _M_date_format;\n-\t__date[1] = _M_date_era_format;\t\n+\t__date[0] = _M_data->_M_date_format;\n+\t__date[1] = _M_data->_M_date_era_format;\t\n       }\n \n       void\n       _M_time_formats(const _CharT** __time) const\n       {\n \t// Always have default first.\n-\t__time[0] = _M_time_format;\n-\t__time[1] = _M_time_era_format;\t\n+\t__time[0] = _M_data->_M_time_format;\n+\t__time[1] = _M_data->_M_time_era_format;\t\n       }\n \n       void\n       _M_ampm(const _CharT** __ampm) const\n       { \n-\t__ampm[0] = _M_am;\n-\t__ampm[1] = _M_pm;\n+\t__ampm[0] = _M_data->_M_am;\n+\t__ampm[1] = _M_data->_M_pm;\n       }      \n \n       void\n       _M_date_time_formats(const _CharT** __dt) const\n       {\n \t// Always have default first.\n-\t__dt[0] = _M_date_time_format;\n-\t__dt[1] = _M_date_time_era_format;\t\n+\t__dt[0] = _M_data->_M_date_time_format;\n+\t__dt[1] = _M_data->_M_date_time_era_format;\t\n       }\n \n       void\n       _M_days(const _CharT** __days) const\n       { \n-\t__days[0] = _M_day1;\n-\t__days[1] = _M_day2;\n-\t__days[2] = _M_day3;\n-\t__days[3] = _M_day4;\n-\t__days[4] = _M_day5;\n-\t__days[5] = _M_day6;\n-\t__days[6] = _M_day7;\n+\t__days[0] = _M_data->_M_day1;\n+\t__days[1] = _M_data->_M_day2;\n+\t__days[2] = _M_data->_M_day3;\n+\t__days[3] = _M_data->_M_day4;\n+\t__days[4] = _M_data->_M_day5;\n+\t__days[5] = _M_data->_M_day6;\n+\t__days[6] = _M_data->_M_day7;\n       }\n \n       void\n       _M_days_abbreviated(const _CharT** __days) const\n       { \n-\t__days[0] = _M_day_a1;\n-\t__days[1] = _M_day_a2;\n-\t__days[2] = _M_day_a3;\n-\t__days[3] = _M_day_a4;\n-\t__days[4] = _M_day_a5;\n-\t__days[5] = _M_day_a6;\n-\t__days[6] = _M_day_a7;\n+\t__days[0] = _M_data->_M_aday1;\n+\t__days[1] = _M_data->_M_aday2;\n+\t__days[2] = _M_data->_M_aday3;\n+\t__days[3] = _M_data->_M_aday4;\n+\t__days[4] = _M_data->_M_aday5;\n+\t__days[5] = _M_data->_M_aday6;\n+\t__days[6] = _M_data->_M_aday7;\n       }\n \n       void\n       _M_months(const _CharT** __months) const\n       { \n-\t__months[0] = _M_month01;\n-\t__months[1] = _M_month02;\n-\t__months[2] = _M_month03;\n-\t__months[3] = _M_month04;\n-\t__months[4] = _M_month05;\n-\t__months[5] = _M_month06;\n-\t__months[6] = _M_month07;\n-\t__months[7] = _M_month08;\n-\t__months[8] = _M_month09;\n-\t__months[9] = _M_month10;\n-\t__months[10] = _M_month11;\n-\t__months[11] = _M_month12;\n+\t__months[0] = _M_data->_M_month01;\n+\t__months[1] = _M_data->_M_month02;\n+\t__months[2] = _M_data->_M_month03;\n+\t__months[3] = _M_data->_M_month04;\n+\t__months[4] = _M_data->_M_month05;\n+\t__months[5] = _M_data->_M_month06;\n+\t__months[6] = _M_data->_M_month07;\n+\t__months[7] = _M_data->_M_month08;\n+\t__months[8] = _M_data->_M_month09;\n+\t__months[9] = _M_data->_M_month10;\n+\t__months[10] = _M_data->_M_month11;\n+\t__months[11] = _M_data->_M_month12;\n       }\n \n       void\n       _M_months_abbreviated(const _CharT** __months) const\n       { \n-\t__months[0] = _M_month_a01;\n-\t__months[1] = _M_month_a02;\n-\t__months[2] = _M_month_a03;\n-\t__months[3] = _M_month_a04;\n-\t__months[4] = _M_month_a05;\n-\t__months[5] = _M_month_a06;\n-\t__months[6] = _M_month_a07;\n-\t__months[7] = _M_month_a08;\n-\t__months[8] = _M_month_a09;\n-\t__months[9] = _M_month_a10;\n-\t__months[10] = _M_month_a11;\n-\t__months[11] = _M_month_a12;\n+\t__months[0] = _M_data->_M_amonth01;\n+\t__months[1] = _M_data->_M_amonth02;\n+\t__months[2] = _M_data->_M_amonth03;\n+\t__months[3] = _M_data->_M_amonth04;\n+\t__months[4] = _M_data->_M_amonth05;\n+\t__months[5] = _M_data->_M_amonth06;\n+\t__months[6] = _M_data->_M_amonth07;\n+\t__months[7] = _M_data->_M_amonth08;\n+\t__months[8] = _M_data->_M_amonth09;\n+\t__months[9] = _M_data->_M_amonth10;\n+\t__months[10] = _M_data->_M_amonth11;\n+\t__months[11] = _M_data->_M_amonth12;\n       }\n \n     protected:\n@@ -1339,10 +1397,6 @@ namespace std\n     locale::id __timepunct<_CharT>::id;\n \n   // Specializations.\n-  template<> \n-    const char*\n-    __timepunct<char>::_S_timezones[14];\n-\n   template<> \n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);\n@@ -1352,10 +1406,6 @@ namespace std\n     __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> \n-    const wchar_t*\n-    __timepunct<wchar_t>::_S_timezones[14];\n-\n   template<> \n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);\n@@ -1366,10 +1416,6 @@ namespace std\n \t\t\t\t const tm*) const;\n #endif\n \n-  // Generic.\n-  template<typename _CharT>\n-    const _CharT* __timepunct<_CharT>::_S_timezones[14];\n-\n   // Include host and configuration specific timepunct functions.\n   #include <bits/time_members.h>\n \n@@ -1386,7 +1432,7 @@ namespace std\n \n       explicit \n       time_get(size_t __refs = 0) \n-      : locale::facet (__refs) { }\n+      : facet (__refs) { }\n \n       dateorder \n       date_order()  const\n@@ -1497,7 +1543,7 @@ namespace std\n \n       explicit \n       time_put(size_t __refs = 0) \n-      : locale::facet(__refs) { }\n+      : facet(__refs) { }\n \n       iter_type \n       put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm, \n@@ -1554,36 +1600,73 @@ namespace std\n     _S_construct_pattern(char __precedes, char __space, char __posn);\n   };\n \n+  template<typename _CharT>\n+    struct __moneypunct_cache : public locale::facet\n+    {\n+      const char* \t\t\t_M_grouping;\n+      bool\t\t\t\t_M_use_grouping;\n+      _CharT \t\t\t\t_M_decimal_point;\n+      _CharT \t\t\t\t_M_thousands_sep;\n+      const _CharT* \t\t\t_M_curr_symbol;\n+      const _CharT*\t\t\t_M_positive_sign;\n+      const _CharT*\t\t\t_M_negative_sign;\n+      int \t\t\t\t_M_frac_digits;\n+      money_base::pattern \t\t_M_pos_format;\n+      money_base::pattern \t        _M_neg_format;\n+\n+      bool\t\t\t\t_M_allocated;\n+\n+      __moneypunct_cache(size_t __refs = 0) : facet(__refs), \n+      _M_grouping(NULL), _M_use_grouping(false), _M_decimal_point(_CharT()), \n+      _M_thousands_sep(_CharT()), _M_curr_symbol(NULL), _M_positive_sign(NULL),\n+      _M_negative_sign(NULL), _M_frac_digits(0), \n+      _M_pos_format(money_base::pattern()), \n+      _M_neg_format(money_base::pattern()), _M_allocated(false)\n+      { } \n+\n+      ~__moneypunct_cache();\n+\n+      void\n+      _M_cache(const locale& __loc);\n+    };\n+\n+  template<typename _CharT>\n+    __moneypunct_cache<_CharT>::~__moneypunct_cache()\n+    {\n+      if (_M_allocated)\n+\t{\n+\t  // XXX.\n+\t}\n+    }\n+\n   template<typename _CharT, bool _Intl>\n     class moneypunct : public locale::facet, public money_base\n     {\n     public:\n       // Types:\n-      typedef _CharT \t\t\tchar_type;\n+      typedef _CharT \t\t       \tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n+      typedef __moneypunct_cache<_CharT>\t__cache_type;\n+\n+    private:\n+      __cache_type*\t\t\t_M_data;\n \n+    public:\n       static const bool \t\tintl = _Intl;\n       static locale::id \t\tid;\n \n-    private:\n-      const char* \t\t\t_M_grouping;\n-      char_type \t\t\t_M_decimal_point;\n-      char_type \t\t\t_M_thousands_sep;\n-      const char_type* \t\t\t_M_curr_symbol;\n-      const char_type*\t\t\t_M_positive_sign;\n-      const char_type*\t\t\t_M_negative_sign;\n-      int \t\t\t\t_M_frac_digits;\n-      pattern \t\t\t\t_M_pos_format;\n-      pattern \t\t\t\t_M_neg_format;\n+      explicit \n+      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)\n+      { _M_initialize_moneypunct(); }\n \n-    public:\n       explicit \n-      moneypunct(size_t __refs = 0) : locale::facet(__refs)\n+      moneypunct(__cache_type* __cache, size_t __refs = 0) \n+      : facet(__refs), _M_data(__cache)\n       { _M_initialize_moneypunct(); }\n \n       explicit \n       moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0) \n-      : locale::facet(__refs)\n+      : facet(__refs), _M_data(NULL)\n       { _M_initialize_moneypunct(__cloc, __s); }\n \n       char_type\n@@ -1628,39 +1711,39 @@ namespace std\n \n       virtual char_type\n       do_decimal_point() const\n-      { return _M_decimal_point; }\n+      { return _M_data->_M_decimal_point; }\n       \n       virtual char_type\n       do_thousands_sep() const\n-      { return _M_thousands_sep; }\n+      { return _M_data->_M_thousands_sep; }\n       \n       virtual string \n       do_grouping() const\n-      { return _M_grouping; }\n+      { return _M_data->_M_grouping; }\n \n       virtual string_type  \n       do_curr_symbol()   const\n-      { return _M_curr_symbol; }\n+      { return _M_data->_M_curr_symbol; }\n \n       virtual string_type  \n       do_positive_sign() const\n-      { return _M_positive_sign; }\n+      { return _M_data->_M_positive_sign; }\n \n       virtual string_type  \n       do_negative_sign() const\n-      { return _M_negative_sign; }\n+      { return _M_data->_M_negative_sign; }\n \n       virtual int          \n       do_frac_digits() const\n-      { return _M_frac_digits; }\n+      { return _M_data->_M_frac_digits; }\n \n       virtual pattern      \n       do_pos_format() const\n-      { return _M_pos_format; }\n+      { return _M_data->_M_pos_format; }\n \n       virtual pattern      \n       do_neg_format() const\n-      { return _M_neg_format; }\n+      { return _M_data->_M_neg_format; }\n \n       // For use at construction time only.\n        void \n@@ -1746,7 +1829,7 @@ namespace std\n       static locale::id \t\tid;\n \n       explicit \n-      money_get(size_t __refs = 0) : locale::facet(__refs) { }\n+      money_get(size_t __refs = 0) : facet(__refs) { }\n \n       iter_type \n       get(iter_type __s, iter_type __end, bool __intl, ios_base& __io, \n@@ -1785,7 +1868,7 @@ namespace std\n       static locale::id \t\tid;\n \n       explicit \n-      money_put(size_t __refs = 0) : locale::facet(__refs) { }\n+      money_put(size_t __refs = 0) : facet(__refs) { }\n \n       iter_type \n       put(iter_type __s, bool __intl, ios_base& __io,"}, {"sha": "46ee3a425ea11e6bea8083d084e4c682bdc82bd8", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -1701,7 +1701,7 @@ namespace std\n \t\t    {\n \t\t      int __tmp;\n \t\t      _M_extract_name(__beg, __end, __tmp, \n-\t\t\t\t      __timepunct<_CharT>::_S_timezones, \n+\t\t\t\t      __timepunct_cache<_CharT>::_S_timezones, \n \t\t\t\t      14, __err);\n \t\t      \n \t\t      // GMT requires special effort."}, {"sha": "e9e5814f6b55d3b5b4687e86613fd5847645ea0f", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -157,8 +157,8 @@ namespace __gnu_cxx\n \n   typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n-  fake_moneypunct_c moneypunct_tc;\n-  fake_moneypunct_c moneypunct_fc;\n+  fake_moneypunct_c moneypunct_ct;\n+  fake_moneypunct_c moneypunct_cf;\n \n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n@@ -211,8 +211,8 @@ namespace __gnu_cxx\n \n   typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n-  fake_moneypunct_w moneypunct_tw;\n-  fake_moneypunct_w moneypunct_fw;\n+  fake_moneypunct_w moneypunct_wt;\n+  fake_moneypunct_w moneypunct_wf;\n \n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n@@ -239,15 +239,33 @@ namespace __gnu_cxx\n   fake_messages_w messages_w;\n #endif\n \n-  // Storage for C locale caches\n-  typedef char fake_locale_cache_c[sizeof(std::__numpunct_cache<char>)]\n+  // Storage for \"C\" locale caches.\n+  typedef char fake_num_cache_c[sizeof(std::__numpunct_cache<char>)]\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n-  fake_locale_cache_c numpunct_cache_c;\n+  fake_num_cache_c numpunct_cache_c;\n+\n+  typedef char fake_money_cache_c[sizeof(std::__moneypunct_cache<char>)]\n+  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<char>))));\n+  fake_money_cache_c moneypunct_cache_ct;\n+  fake_money_cache_c moneypunct_cache_cf;\n+\n+  typedef char fake_time_cache_c[sizeof(std::__timepunct_cache<char>)]\n+  __attribute__ ((aligned(__alignof__(std::__timepunct_cache<char>))));\n+  fake_time_cache_c timepunct_cache_c;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  typedef char fake_locale_cache_w[sizeof(std::__numpunct_cache<wchar_t>)]\n+  typedef char fake_num_cache_w[sizeof(std::__numpunct_cache<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<wchar_t>))));\n-  fake_locale_cache_w numpunct_cache_w;\n+  fake_num_cache_w numpunct_cache_w;\n+\n+  typedef char fake_money_cache_w[sizeof(std::__moneypunct_cache<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<wchar_t>))));\n+  fake_money_cache_w moneypunct_cache_wt;\n+  fake_money_cache_w moneypunct_cache_wf;\n+\n+  typedef char fake_time_cache_w[sizeof(std::__timepunct_cache<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::__timepunct_cache<wchar_t>))));\n+  fake_time_cache_w timepunct_cache_w;\n #endif\n \n   // Globals for once-only runtime initialization of mutex objects.  This"}, {"sha": "2a12a93220644ab938db75db2386ddc635a4658a", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -41,6 +41,7 @@ namespace std\n   // moneypunct, money_get, and money_put\n   template class moneypunct<char, false>;\n   template class moneypunct<char, true>;\n+  template struct __moneypunct_cache<char>;\n   template class moneypunct_byname<char, false>;\n   template class moneypunct_byname<char, true>;\n   template class money_get<char, istreambuf_iterator<char> >;\n@@ -49,6 +50,7 @@ namespace std\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class moneypunct<wchar_t, false>;\n   template class moneypunct<wchar_t, true>;\n+  template struct __moneypunct_cache<wchar_t>;\n   template class moneypunct_byname<wchar_t, false>;\n   template class moneypunct_byname<wchar_t, true>;\n   template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n@@ -147,13 +149,15 @@ namespace std\n \n   // time_get and time_put\n   template class __timepunct<char>;\n+  template struct __timepunct_cache<char>;\n   template class time_put<char, ostreambuf_iterator<char> >;\n   template class time_put_byname<char, ostreambuf_iterator<char> >;\n   template class time_get<char, istreambuf_iterator<char> >;\n   template class time_get_byname<char, istreambuf_iterator<char> >;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class __timepunct<wchar_t>;\n+  template struct __timepunct_cache<wchar_t>;\n   template class time_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n   template class time_put_byname<wchar_t, ostreambuf_iterator<wchar_t> >;\n   template class time_get<wchar_t, istreambuf_iterator<wchar_t> >;"}, {"sha": "d1de4db6c1a5c87aa356c36b3d84ae48e3511e34", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -455,7 +455,7 @@ namespace std\n   // Definitions for static const data members of time_base.\n   template<> \n     const char*\n-    __timepunct<char>::_S_timezones[14] =\n+    __timepunct_cache<char>::_S_timezones[14] =\n     { \n       \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\", \n       \"IST\", \"EET\", \"CST\", \"JST\"  \n@@ -464,7 +464,7 @@ namespace std\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     const wchar_t*\n-    __timepunct<wchar_t>::_S_timezones[14] =\n+    __timepunct_cache<wchar_t>::_S_timezones[14] =\n     { \n       L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\", \n       L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"  "}, {"sha": "d428290b438b3638001fddc49c1561ab379aafc1", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea4065dda83f9ab8ca438275d82dc3740bab689/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=fea4065dda83f9ab8ca438275d82dc3740bab689", "patch": "@@ -43,10 +43,10 @@ namespace __gnu_cxx\n   extern std::collate<char> \t\t\tcollate_c;\n   extern numpunct<char> \t\t\tnumpunct_c;\n   extern num_get<char> \t\t\t\tnum_get_c;\n-  extern num_put<char> \t\t\t\tnum_put_c;\n-  extern codecvt<char, char, mbstate_t>\t\tcodecvt_c;\n-  extern moneypunct<char, false> \t\tmoneypunct_fc;\n-  extern moneypunct<char, true> \t\tmoneypunct_tc;\n+  extern num_put<char> \t\t\t\tnum_put_c;  \n+extern codecvt<char, char, mbstate_t>\t\tcodecvt_c;\n+  extern moneypunct<char, false> \t\tmoneypunct_cf;\n+  extern moneypunct<char, true> \t\tmoneypunct_ct;\n   extern money_get<char> \t\t\tmoney_get_c;\n   extern money_put<char> \t\t\tmoney_put_c;\n   extern __timepunct<char> \t\t\ttimepunct_c;\n@@ -60,8 +60,8 @@ namespace __gnu_cxx\n   extern num_get<wchar_t> \t\t\tnum_get_w;\n   extern num_put<wchar_t> \t\t\tnum_put_w;\n   extern codecvt<wchar_t, char, mbstate_t>\tcodecvt_w;\n-  extern moneypunct<wchar_t, false> \t\tmoneypunct_fw;\n-  extern moneypunct<wchar_t, true> \t\tmoneypunct_tw;\n+  extern moneypunct<wchar_t, false> \t\tmoneypunct_wf;\n+  extern moneypunct<wchar_t, true> \t\tmoneypunct_wt;\n   extern money_get<wchar_t> \t\t\tmoney_get_w;\n   extern money_put<wchar_t> \t\t\tmoney_put_w;\n   extern __timepunct<wchar_t> \t\t\ttimepunct_w;\n@@ -70,10 +70,17 @@ namespace __gnu_cxx\n   extern std::messages<wchar_t> \t\tmessages_w;\n #endif\n \n+  // And the caches....\n   extern locale::facet* cache_vec[_GLIBCXX_NUM_FACETS];\n-  extern std::__numpunct_cache<char>\t\tnumpunct_cache_c;\n+  extern __numpunct_cache<char>\t\t\tnumpunct_cache_c;\n+  extern __moneypunct_cache<char>\t\tmoneypunct_cache_cf;\n+  extern __moneypunct_cache<char>\t\tmoneypunct_cache_ct;\n+  extern __timepunct_cache<char>\t\ttimepunct_cache_c;\n #ifdef  _GLIBCXX_USE_WCHAR_T\n-  extern std::__numpunct_cache<wchar_t>\t\tnumpunct_cache_w;\n+  extern __numpunct_cache<wchar_t>\t\tnumpunct_cache_w;\n+  extern __moneypunct_cache<wchar_t>\t\tmoneypunct_cache_wf;\n+  extern __moneypunct_cache<wchar_t>\t\tmoneypunct_cache_wt;\n+  extern __timepunct_cache<wchar_t>\t\ttimepunct_cache_w;\n #endif\n } // namespace __gnu_cxx\n \n@@ -296,19 +303,27 @@ namespace std\n     _M_init_facet(new (&ctype_c) std::ctype<char>(0, false, 1));\n     _M_init_facet(new (&codecvt_c) codecvt<char, char, mbstate_t>(1));\n \n-    // Safe to cache this.\n     typedef __numpunct_cache<char> num_cache_c;\n     num_cache_c* __npc = new (&numpunct_cache_c) num_cache_c(2);\n     _M_init_facet(new (&numpunct_c) numpunct<char>(__npc, 1));\n \n     _M_init_facet(new (&num_get_c) num_get<char>(1));\n     _M_init_facet(new (&num_put_c) num_put<char>(1));\n     _M_init_facet(new (&collate_c) std::collate<char>(1));\n-    _M_init_facet(new (&moneypunct_fc) moneypunct<char, false>(1));\n-    _M_init_facet(new (&moneypunct_tc) moneypunct<char, true>(1));\n+\n+    typedef __moneypunct_cache<char> money_cache_c;\n+    money_cache_c* __mpcf = new (&moneypunct_cache_cf) money_cache_c(2);\n+    _M_init_facet(new (&moneypunct_cf) moneypunct<char, false>(__mpcf, 1));\n+    money_cache_c* __mpct = new (&moneypunct_cache_ct) money_cache_c(2);\n+    _M_init_facet(new (&moneypunct_ct) moneypunct<char, true>(__mpct, 1));\n+\n     _M_init_facet(new (&money_get_c) money_get<char>(1));\n     _M_init_facet(new (&money_put_c) money_put<char>(1));\n-    _M_init_facet(new (&timepunct_c) __timepunct<char>(1));\n+\n+    typedef __timepunct_cache<char> time_cache_c;\n+    time_cache_c* __tpc = new (&timepunct_cache_c) time_cache_c(2);\n+    _M_init_facet(new (&timepunct_c) __timepunct<char>(__tpc, 1));\n+\n     _M_init_facet(new (&time_get_c) time_get<char>(1));\n     _M_init_facet(new (&time_put_c) time_put<char>(1));\n     _M_init_facet(new (&messages_c) std::messages<char>(1));\t\n@@ -324,21 +339,36 @@ namespace std\n     _M_init_facet(new (&num_get_w) num_get<wchar_t>(1));\n     _M_init_facet(new (&num_put_w) num_put<wchar_t>(1));\n     _M_init_facet(new (&collate_w) std::collate<wchar_t>(1));\n-    _M_init_facet(new (&moneypunct_fw) moneypunct<wchar_t, false>(1));\n-    _M_init_facet(new (&moneypunct_tw) moneypunct<wchar_t, true>(1));\n+\n+    typedef __moneypunct_cache<wchar_t> money_cache_w;\n+    money_cache_w* __mpwf = new (&moneypunct_cache_wf) money_cache_w(2);\n+    _M_init_facet(new (&moneypunct_wf) moneypunct<wchar_t, false>(__mpwf, 1));\n+    money_cache_w* __mpwt = new (&moneypunct_cache_wt) money_cache_w(2);\n+    _M_init_facet(new (&moneypunct_wt) moneypunct<wchar_t, true>(__mpwt, 1));\n+\n     _M_init_facet(new (&money_get_w) money_get<wchar_t>(1));\n     _M_init_facet(new (&money_put_w) money_put<wchar_t>(1));\n-    _M_init_facet(new (&timepunct_w) __timepunct<wchar_t>(1));\n+\n+    typedef __timepunct_cache<wchar_t> time_cache_w;\n+    time_cache_w* __tpw = new (&timepunct_cache_w) time_cache_w(2);\n+    _M_init_facet(new (&timepunct_w) __timepunct<wchar_t>(__tpw, 1));\n+\n     _M_init_facet(new (&time_get_w) time_get<wchar_t>(1));\n     _M_init_facet(new (&time_put_w) time_put<wchar_t>(1));\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n #endif \n \n     // This locale is safe to pre-cache, after all the facets have\n-    // been installed.\n+    // been created and installed.\n     _M_caches[numpunct<char>::id._M_id()] = __npc;\n+    _M_caches[moneypunct<char, false>::id._M_id()] = __mpcf;\n+    _M_caches[moneypunct<char, true>::id._M_id()] = __mpct;\n+    _M_caches[__timepunct<char>::id._M_id()] = __tpc;\n #ifdef  _GLIBCXX_USE_WCHAR_T\n     _M_caches[numpunct<wchar_t>::id._M_id()] = __npw;\n+    _M_caches[moneypunct<wchar_t, false>::id._M_id()] = __mpwf;\n+    _M_caches[moneypunct<wchar_t, true>::id._M_id()] = __mpwt;\n+    _M_caches[__timepunct<wchar_t>::id._M_id()] = __tpw;\n #endif\n   }\n   "}]}