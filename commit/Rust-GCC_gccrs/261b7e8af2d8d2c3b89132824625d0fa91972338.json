{"sha": "261b7e8af2d8d2c3b89132824625d0fa91972338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxYjdlOGFmMmQ4ZDJjM2I4OTEzMjgyNDYyNWQwZmE5MTk3MjMzOA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-05-01T21:01:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-01T21:01:11Z"}, "message": "Implement observer_ptr.\n\n2015-05-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tImplement observer_ptr.\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/memory: New.\n\t* testsuite/experimental/memory/observer_ptr/assignment/assign.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/cons/cons.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/hash/hash.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/make_observer.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/relops/relops.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/requirements.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/swap/swap.cc: New.\n\t* testsuite/experimental/memory/observer_ptr/typedefs.cc: New.\n\nFrom-SVN: r222706", "tree": {"sha": "977fd4fdf0dfaa7845341f7dfc8aaf1f86672a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977fd4fdf0dfaa7845341f7dfc8aaf1f86672a0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261b7e8af2d8d2c3b89132824625d0fa91972338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261b7e8af2d8d2c3b89132824625d0fa91972338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261b7e8af2d8d2c3b89132824625d0fa91972338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261b7e8af2d8d2c3b89132824625d0fa91972338/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad376273d70e96e1b7d3eac126c3e1598246d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad376273d70e96e1b7d3eac126c3e1598246d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad376273d70e96e1b7d3eac126c3e1598246d5c"}], "stats": {"total": 775, "additions": 775, "deletions": 0}, "files": [{"sha": "a899842223c689bc37f26dc2952b5455b00d39e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -1,3 +1,18 @@\n+2015-05-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement observer_ptr.\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/memory: New.\n+\t* testsuite/experimental/memory/observer_ptr/assignment/assign.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/cons/cons.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/hash/hash.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/make_observer.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/relops/relops.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/requirements.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/swap/swap.cc: New.\n+\t* testsuite/experimental/memory/observer_ptr/typedefs.cc: New.\n+\n 2015-05-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/path.cc (path::compare): Do not copy strings."}, {"sha": "6ba702c4e102d5f0a1975ad68d120ddca0aca79d", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -653,6 +653,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/functional \\\n \t${experimental_srcdir}/list \\\n \t${experimental_srcdir}/map \\\n+\t${experimental_srcdir}/memory \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/set \\"}, {"sha": "f23ff63d540cce7b5f979faa2bfdc888b63c2304", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -920,6 +920,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/functional \\\n \t${experimental_srcdir}/list \\\n \t${experimental_srcdir}/map \\\n+\t${experimental_srcdir}/memory \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/set \\"}, {"sha": "d3c95094ea9c84a0a5633ecac7544dccc15c9f64", "filename": "libstdc++-v3/include/experimental/memory", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,255 @@\n+// <experimental/memory> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/memory\n+ *  This is a TS C++ Library header.\n+ */\n+\n+//\n+// N4336 Working Draft, C++ Extensions for Library Fundamentals, Version 2\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_MEMORY\n+#define _GLIBCXX_EXPERIMENTAL_MEMORY 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <functional>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template <typename _Tp>\n+    class observer_ptr\n+    {\n+    public:\n+      // publish our template parameter and variations thereof\n+      using element_type = _Tp;\n+      using __pointer = add_pointer_t<_Tp>;            // exposition-only\n+      using __reference = add_lvalue_reference_t<_Tp>; // exposition-only\n+\n+      // 3.2.2, observer_ptr constructors\n+      // default c\u2019tor\n+      constexpr observer_ptr() noexcept\n+      : __t()\n+      { }\n+\n+      // pointer-accepting c\u2019tors\n+      constexpr observer_ptr(nullptr_t) noexcept\n+      : __t()\n+      { }\n+\n+      constexpr explicit observer_ptr(__pointer __p) noexcept\n+      : __t(__p)\n+      { }\n+\n+      // copying c\u2019tors (in addition to compiler-generated copy c\u2019tor)\n+      template <typename _Up,\n+\t\ttypename = typename enable_if<\n+\t\t  is_convertible<typename add_pointer<_Up>::type, __pointer\n+\t\t  >::value\n+\t\t>::type>\n+      constexpr observer_ptr(observer_ptr<_Up> __p) noexcept\n+      : __t(__p.get())\n+      {\n+      }\n+\n+      // 3.2.3, observer_ptr observers\n+      constexpr __pointer\n+      get() const noexcept\n+      {\n+\treturn __t;\n+      }\n+\n+      constexpr __reference\n+      operator*() const\n+      {\n+\treturn *get();\n+      }\n+\n+      constexpr __pointer\n+      operator->() const noexcept\n+      {\n+\treturn get();\n+      }\n+\n+      constexpr explicit operator bool() const noexcept\n+      {\n+\treturn get() != nullptr;\n+      }\n+\n+      // 3.2.4, observer_ptr conversions\n+      constexpr explicit operator __pointer() const noexcept\n+      {\n+\treturn get();\n+      }\n+\n+      // 3.2.5, observer_ptr modifiers\n+      constexpr __pointer\n+      release() noexcept\n+      {\n+\t__pointer tmp = get();\n+\treset();\n+\treturn tmp;\n+      }\n+\n+      constexpr void\n+      reset(__pointer __p = nullptr) noexcept\n+      {\n+\t__t = __p;\n+      }\n+\n+      constexpr void\n+      swap(observer_ptr& __p) noexcept\n+      {\n+\tstd::swap(__t, __p.__t);\n+      }\n+\n+    private:\n+      __pointer __t;\n+    }; // observer_ptr<>\n+\n+  template<typename _Tp>\n+    void\n+    swap(observer_ptr<_Tp>& __p1, observer_ptr<_Tp>& __p2) noexcept\n+    {\n+      __p1.swap(__p2);\n+    }\n+\n+  template<typename _Tp>\n+    observer_ptr<_Tp>\n+    make_observer(_Tp* __p) noexcept\n+    {\n+      return observer_ptr<_Tp>(__p);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator==(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+      return __p1.get() == __p2.get();\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator!=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+    return !(__p1 == __p2);\n+    }\n+\n+  template<typename _Tp>\n+    bool\n+    operator==(observer_ptr<_Tp> __p, nullptr_t) noexcept\n+    {\n+      return !__p;\n+    }\n+\n+  template<typename _Tp>\n+    bool\n+    operator==(nullptr_t, observer_ptr<_Tp> __p) noexcept\n+    {\n+      return !__p;\n+    }\n+\n+  template<typename _Tp>\n+    bool\n+    operator!=(observer_ptr<_Tp> __p, nullptr_t) noexcept\n+    {\n+      return bool(__p);\n+    }\n+\n+  template<typename _Tp>\n+    bool\n+    operator!=(nullptr_t, observer_ptr<_Tp> __p) noexcept\n+    {\n+      return bool(__p);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator<(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+      return std::less<typename common_type<typename add_pointer<_Tp>::type,\n+\t\t\t\t\t    typename add_pointer<_Up>::type\n+\t\t\t\t\t    >::type\n+\t\t       >{}(__p1.get(), __p2.get());\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator>(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+      return __p2 < __p1;\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator<=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+      return !(__p2 < __p1);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    bool\n+    operator>=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)\n+    {\n+      return !(__p1 < __p2);\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+\n+template <typename _Tp>\n+  struct hash<experimental::observer_ptr<_Tp>>\n+  {\n+    using result_type = size_t;\n+    using argument_type = experimental::observer_ptr<_Tp>;\n+\n+    size_t\n+    operator()(const experimental::observer_ptr<_Tp>& __t) const\n+    noexcept(noexcept(hash<typename add_pointer<_Tp>::type> {}(__t.get())))\n+    {\n+      return hash<typename add_pointer<_Tp>::type> {}(__t.get());\n+    }\n+\n+  };\n+\n+} // namespace std\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_MEMORY"}, {"sha": "6ccf4074c35e52cfc2a24d0abc37265e2e1a702e", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/assignment/assign.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fassignment%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fassignment%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fassignment%2Fassign.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,89 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::observer_ptr;\n+\n+struct B {};\n+struct D : B {};\n+\n+void test01()\n+{\n+  observer_ptr<int> a, b;\n+  a = b;\n+  VERIFY(a == b);\n+}\n+\n+void test02()\n+{\n+  int x{};\n+  observer_ptr<int> a;\n+  observer_ptr<int> b{&x};\n+  VERIFY(a != b);\n+  a = b;\n+  VERIFY(a == b);\n+}\n+\n+void test03()\n+{\n+  int x{};\n+  observer_ptr<const int> a;\n+  observer_ptr<int> b{&x};\n+  VERIFY(a != b);\n+  a = b;\n+  VERIFY(a == b);\n+}\n+\n+void test04()\n+{\n+  D x{};\n+  observer_ptr<B> a;\n+  observer_ptr<D> b{&x};\n+  VERIFY(a != b);\n+  a = b;\n+  VERIFY(a == b);\n+}\n+\n+constexpr bool test05_helper(observer_ptr<const int> a, \n+                             observer_ptr<const int> b)\n+{\n+  a = b;\n+  return (a.get() == b.get());\n+}\n+\n+void test05()\n+{\n+  static constexpr int x{};\n+  constexpr observer_ptr<const int> a;\n+  constexpr observer_ptr<const int> b{&x};\n+  constexpr bool assigned = test05_helper(a, b);\n+  VERIFY(assigned);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+}"}, {"sha": "c6c435bdd04fd450f3c2ed3086ad8694c29a0540", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/cons/cons.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,92 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+#include <utility>\n+\n+using std::experimental::observer_ptr;\n+\n+struct B {};\n+struct D : B {};\n+\n+void test01()\n+{\n+  observer_ptr<int> a;\n+  VERIFY(!a);\n+  observer_ptr<int> b{nullptr};\n+  VERIFY(!b);\n+}\n+\n+void test02()\n+{\n+  int x{};\n+  observer_ptr<int> a{&x};\n+  observer_ptr<int> b{a};\n+  VERIFY(a == b);\n+}\n+\n+void test03()\n+{\n+  int x{};\n+  observer_ptr<int> a;\n+  observer_ptr<const int> b{a};\n+  VERIFY(a == b);\n+}\n+\n+void test04()\n+{\n+  D x{};\n+  observer_ptr<D> a{&x};\n+  observer_ptr<B> b{a};\n+  VERIFY(a == b);\n+}\n+\n+void test05()\n+{\n+  D x{};\n+  observer_ptr<D> a{&x};\n+  observer_ptr<B> b{std::move(a)};\n+  VERIFY(a == b);\n+}\n+\n+void test06()\n+{\n+  static constexpr D x{};\n+  constexpr observer_ptr<const D> a{&x};\n+  constexpr observer_ptr<const B> b{std::move(a)};\n+  VERIFY(a == b);\n+  constexpr observer_ptr<const B> c{a};\n+  VERIFY(a == b && a == c && b == c);\n+  constexpr observer_ptr<int> d;\n+  constexpr observer_ptr<int> e{nullptr};\n+  VERIFY(!d);\n+  VERIFY(!e);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+}"}, {"sha": "eb318fcf9fa842edfc2a5afebef1c1306783c1a9", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/hash/hash.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fhash%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fhash%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fhash%2Fhash.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::observer_ptr;\n+\n+struct B {};\n+struct D : B {};\n+\n+void test01()\n+{\n+  observer_ptr<int> a;\n+  VERIFY(std::hash<observer_ptr<int>>{}(a) == std::hash<int*>{}(nullptr));\n+}\n+\n+void test02()\n+{\n+  int x{};\n+  observer_ptr<int> a{&x};\n+  VERIFY(std::hash<observer_ptr<int>>{}(a) == std::hash<int*>{}(&x));\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "b6075fab9c32b352c28cb02f99e64dd10cbab088", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/make_observer.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fmake_observer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fmake_observer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fmake_observer.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  const int i = 42;\n+  auto o = std::experimental::make_observer(&i);\n+  static_assert( std::is_same<decltype(o),\n+                 std::experimental::observer_ptr<const int>>(), \"\" );\n+  VERIFY( o && *o == 42 );\n+  VERIFY( o.get() == &i );\n+}"}, {"sha": "9cf39de77795d4262ed36c4794c565588239edbb", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/relops/relops.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frelops%2Frelops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frelops%2Frelops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frelops%2Frelops.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::observer_ptr;\n+\n+void test01()\n+{\n+  observer_ptr<int> a, b;\n+  VERIFY(a == b);\n+}\n+\n+void test02()\n+{\n+  int x[2]{};\n+  observer_ptr<int> a{&x[0]};\n+  observer_ptr<int> b{&x[1]};\n+  VERIFY(a != b);\n+  VERIFY(a < b);\n+  VERIFY(a <= b);\n+  VERIFY(b >= a);\n+  VERIFY(b > a);\n+}\n+\n+void test03()\n+{\n+  int x{};\n+  observer_ptr<int> a{&x};\n+  observer_ptr<int> b{&x};\n+  VERIFY(a == b);\n+}\n+\n+void test04()\n+{\n+  static constexpr int x[2]{};\n+  constexpr observer_ptr<const int> a{&x[0]};\n+  constexpr observer_ptr<const int> b{&x[1]};\n+  VERIFY(a != b);\n+  VERIFY(a < b);\n+  VERIFY(a <= b);\n+  VERIFY(b >= a);\n+  VERIFY(b > a);\n+}\n+\n+void test05()\n+{\n+  static constexpr int x{};\n+  constexpr observer_ptr<const int> a{&x};\n+  constexpr observer_ptr<const int> b{&x};\n+  VERIFY(a == b);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+}"}, {"sha": "36ffcab92f845fa06eb419a24ca15d2673354279", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/requirements.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Frequirements.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+\n+using std::experimental::observer_ptr;\n+\n+struct nontrivial {nontrivial() {}};\n+struct other {};\n+struct base {};\n+struct derived : base {};\n+\n+static_assert(!std::is_trivially_constructible<\n+              observer_ptr<nontrivial>>::value, \"\");\n+static_assert(std::is_trivially_copyable<\n+              observer_ptr<nontrivial>>::value, \"\");\n+static_assert(std::is_trivially_destructible<\n+              observer_ptr<nontrivial>>::value, \"\");\n+\n+static_assert(std::is_constructible<\n+              observer_ptr<nontrivial>, nontrivial*>::value,\n+              \"\");\n+static_assert(std::is_constructible<observer_ptr<base>, base*>::value, \"\");\n+static_assert(std::is_constructible<observer_ptr<base>, derived*>::value, \"\");\n+static_assert(!std::is_constructible<observer_ptr<base>, other*>::value, \"\");\n+static_assert(std::is_constructible<\n+                observer_ptr<base>, observer_ptr<base>>::value, \"\");\n+static_assert(std::is_constructible<\n+                observer_ptr<base>, observer_ptr<derived>>::value, \"\");\n+static_assert(!std::is_constructible<\n+                observer_ptr<base>, observer_ptr<other>>::value, \"\");\n+\n+static_assert(!std::is_assignable<\n+              observer_ptr<nontrivial>, nontrivial*>::value,\n+              \"\");\n+static_assert(std::is_assignable<\n+              observer_ptr<nontrivial>, observer_ptr<nontrivial>>::value,\n+              \"\");\n+static_assert(std::is_assignable<observer_ptr<base>, \n+              observer_ptr<base>>::value, \"\");\n+static_assert(std::is_assignable<observer_ptr<base>, \n+              observer_ptr<derived>>::value, \"\");\n+static_assert(!std::is_assignable<\n+                observer_ptr<base>, observer_ptr<other>>::value, \"\");\n+static_assert(std::is_assignable<observer_ptr<const int>, \n+              observer_ptr<int>>::value, \"\");\n+static_assert(!std::is_assignable<observer_ptr<int>, \n+              observer_ptr<const int>>::value, \"\");"}, {"sha": "f7bfc2d9778509d4ec51cb836b61d1c18863b58d", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/swap/swap.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fswap%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fswap%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fswap%2Fswap.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::observer_ptr;\n+\n+struct B {};\n+struct D : B {};\n+\n+void test01()\n+{\n+  observer_ptr<int> a, b;\n+  VERIFY(a == b);\n+  swap(a, b);\n+  VERIFY(a == b);\n+}\n+\n+void test02()\n+{\n+  int x{};\n+  observer_ptr<int> a;\n+  observer_ptr<int> b{&x};\n+  VERIFY(!a);\n+  VERIFY(b);\n+  swap(a, b);\n+  VERIFY(a);\n+  VERIFY(!b);\n+}\n+\n+void test03()\n+{\n+  int x[2]{1,2};\n+  observer_ptr<int> a{&x[0]};\n+  observer_ptr<int> b{&x[1]};\n+  VERIFY(*a == 1);\n+  VERIFY(*b == 2);\n+  swap(a, b);\n+  VERIFY(*a == 2);\n+  VERIFY(*b == 1);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "b738232297b009d172b232377e58a83a5e0b531e", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261b7e8af2d8d2c3b89132824625d0fa91972338/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Ftypedefs.cc?ref=261b7e8af2d8d2c3b89132824625d0fa91972338", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory>\n+#include <type_traits>\n+\n+static_assert(std::is_same<\n+              std::experimental::observer_ptr<int>::element_type,\n+              int>::value, \"\");\n+static_assert(std::is_same<\n+              std::experimental::observer_ptr<const int>::element_type,\n+              const int>::value, \"\");\n+static_assert(std::is_same<\n+              std::experimental::observer_ptr<volatile int>::element_type,\n+              volatile int>::value, \"\");"}]}