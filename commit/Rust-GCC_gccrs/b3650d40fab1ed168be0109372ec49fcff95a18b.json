{"sha": "b3650d40fab1ed168be0109372ec49fcff95a18b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2NTBkNDBmYWIxZWQxNjhiZTAxMDkzNzJlYzQ5ZmNmZjk1YTE4Yg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@marvell.com", "date": "2019-01-11T15:53:02Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-01-11T15:53:02Z"}, "message": "aarch64.c (aarch64_simd_call_p): New function.\n\n2019-01-11  Steve Ellcey  <sellcey@marvell.com>\n\n\t* config/aarch64/aarch64.c (aarch64_simd_call_p): New function.\n\t(aarch64_remove_extra_call_preserved_regs): New function.\n\t(TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS): New macro.\n\t* doc/tm.texi.in (TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* final.c (get_call_reg_set_usage): Call new hook.\n\t* target.def (remove_extra_call_preserved_regs): New hook.\n\t* targhooks.c (default_remove_extra_call_preserved_regs): New function.\n\t* targhooks.h (default_remove_extra_call_preserved_regs): New function.\n\nFrom-SVN: r267846", "tree": {"sha": "67291192b8cc5e5873f3b1e1d0896cd30b753ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67291192b8cc5e5873f3b1e1d0896cd30b753ad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3650d40fab1ed168be0109372ec49fcff95a18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3650d40fab1ed168be0109372ec49fcff95a18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3650d40fab1ed168be0109372ec49fcff95a18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3650d40fab1ed168be0109372ec49fcff95a18b/comments", "author": null, "committer": null, "parents": [{"sha": "17a73b3c47f58155350af2e1ca359e915ffedcae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a73b3c47f58155350af2e1ca359e915ffedcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a73b3c47f58155350af2e1ca359e915ffedcae"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "4b5a67a857a1caf37ed86f61ec93e695bd1d952b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -1,3 +1,15 @@\n+2019-01-11  Steve Ellcey  <sellcey@marvell.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_call_p): New function.\n+\t(aarch64_remove_extra_call_preserved_regs): New function.\n+\t(TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS): New macro.\n+\t* doc/tm.texi.in (TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* final.c (get_call_reg_set_usage): Call new hook.\n+\t* target.def (remove_extra_call_preserved_regs): New hook.\n+\t* targhooks.c (default_remove_extra_call_preserved_regs): New function.\n+\t* targhooks.h (default_remove_extra_call_preserved_regs): New function.\n+\n 2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/88714"}, {"sha": "588fc80bbd7ccf8c3570656e151abc9ec130c03a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -1655,6 +1655,45 @@ aarch64_reg_save_mode (tree fndecl, unsigned regno)\n \t   : (aarch64_simd_decl_p (fndecl) ? E_TFmode : E_DFmode);\n }\n \n+/* Return true if the instruction is a call to a SIMD function, false\n+   if it is not a SIMD function or if we do not know anything about\n+   the function.  */\n+\n+static bool\n+aarch64_simd_call_p (rtx_insn *insn)\n+{\n+  rtx symbol;\n+  rtx call;\n+  tree fndecl;\n+\n+  gcc_assert (CALL_P (insn));\n+  call = get_call_rtx_from (insn);\n+  symbol = XEXP (XEXP (call, 0), 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return false;\n+  fndecl = SYMBOL_REF_DECL (symbol);\n+  if (!fndecl)\n+    return false;\n+\n+  return aarch64_simd_decl_p (fndecl);\n+}\n+\n+/* Implement TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS.  If INSN calls\n+   a function that uses the SIMD ABI, take advantage of the extra\n+   call-preserved registers that the ABI provides.  */\n+\n+void\n+aarch64_remove_extra_call_preserved_regs (rtx_insn *insn,\n+\t\t\t\t\t  HARD_REG_SET *return_set)\n+{\n+  if (aarch64_simd_call_p (insn))\n+    {\n+      for (int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+\tif (FP_SIMD_SAVED_REGNUM_P (regno))\n+\t  CLEAR_HARD_REG_BIT (*return_set, regno);\n+    }\n+}\n+\n /* Implement TARGET_HARD_REGNO_CALL_PART_CLOBBERED.  The callee only saves\n    the lower 64 bits of a 128-bit register.  Tell the compiler the callee\n    clobbers the top 64 bits when restoring the bottom 64 bits.  */\n@@ -18825,6 +18864,10 @@ aarch64_libgcc_floating_mode_supported_p\n #define TARGET_HARD_REGNO_CALL_PART_CLOBBERED \\\n   aarch64_hard_regno_call_part_clobbered\n \n+#undef TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS\n+#define TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS \\\n+  aarch64_remove_extra_call_preserved_regs\n+\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT aarch64_constant_alignment\n "}, {"sha": "daf29f046c35db5e29258f1077b30c7aadcba7ce", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -1905,6 +1905,18 @@ The default implementation returns false, which is correct\n for targets that don't have partly call-clobbered registers.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS (rtx_insn *@var{insn}, HARD_REG_SET *@var{used_regs})\n+This hook removes registers from the set of call-clobbered registers\n+ in @var{used_regs} if, contrary to the default rules, something guarantees\n+ that @samp{insn} preserves those registers.  For example, some targets\n+ support variant ABIs in which functions preserve more registers than\n+ normal functions would.  Removing those extra registers from @var{used_regs}\n+ can lead to better register allocation.\n+ \n+ The default implementation does nothing, which is always safe.\n+ Defining the hook is purely an optimization.\n+@end deftypefn\n+\n @findex fixed_regs\n @findex call_used_regs\n @findex global_regs"}, {"sha": "d9f40a1a5f37492e895d053aee2b1437471b4694", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -1707,6 +1707,8 @@ of @code{CALL_USED_REGISTERS}.\n @cindex call-saved register\n @hook TARGET_HARD_REGNO_CALL_PART_CLOBBERED\n \n+@hook TARGET_REMOVE_EXTRA_CALL_PRESERVED_REGS\n+\n @findex fixed_regs\n @findex call_used_regs\n @findex global_regs"}, {"sha": "f6edd6a1dfcd7ff752fd4ce411a29c51f3d85c60", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -5095,7 +5095,7 @@ get_call_reg_set_usage (rtx_insn *insn, HARD_REG_SET *reg_set,\n \t  return true;\n \t}\n     }\n-\n   COPY_HARD_REG_SET (*reg_set, default_set);\n+  targetm.remove_extra_call_preserved_regs (insn, reg_set);\n   return false;\n }"}, {"sha": "e361c41d3def8848e030df4fdcc9334072f20e01", "filename": "gcc/target.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -5775,6 +5775,20 @@ for targets that don't have partly call-clobbered registers.\",\n  bool, (unsigned int regno, machine_mode mode),\n  hook_bool_uint_mode_false)\n \n+DEFHOOK\n+(remove_extra_call_preserved_regs,\n+ \"This hook removes registers from the set of call-clobbered registers\\n\\\n+ in @var{used_regs} if, contrary to the default rules, something guarantees\\n\\\n+ that @samp{insn} preserves those registers.  For example, some targets\\n\\\n+ support variant ABIs in which functions preserve more registers than\\n\\\n+ normal functions would.  Removing those extra registers from @var{used_regs}\\n\\\n+ can lead to better register allocation.\\n\\\n+ \\n\\\n+ The default implementation does nothing, which is always safe.\\n\\\n+ Defining the hook is purely an optimization.\",\n+ void, (rtx_insn *insn, HARD_REG_SET *used_regs),\n+ default_remove_extra_call_preserved_regs)\n+\n /* Return the smallest number of different values for which it is best to\n    use a jump-table instead of a tree of conditional branches.  */\n DEFHOOK"}, {"sha": "6bd9767b4699c2f0b6e717dcc97fb1a201e5fd4a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -2374,4 +2374,9 @@ default_speculation_safe_value (machine_mode mode ATTRIBUTE_UNUSED,\n   return result;\n }\n \n+void\n+default_remove_extra_call_preserved_regs (rtx_insn *, HARD_REG_SET *)\n+{\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "01ee0be3c92866fd4034a43b0155240637472572", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3650d40fab1ed168be0109372ec49fcff95a18b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=b3650d40fab1ed168be0109372ec49fcff95a18b", "patch": "@@ -284,5 +284,7 @@ extern tree default_preferred_else_value (unsigned, tree, unsigned, tree *);\n extern bool default_have_speculation_safe_value (bool);\n extern bool speculation_safe_value_not_needed (bool);\n extern rtx default_speculation_safe_value (machine_mode, rtx, rtx, rtx);\n+extern void default_remove_extra_call_preserved_regs (rtx_insn *,\n+\t\t\t\t\t\t      HARD_REG_SET *);\n \n #endif /* GCC_TARGHOOKS_H */"}]}