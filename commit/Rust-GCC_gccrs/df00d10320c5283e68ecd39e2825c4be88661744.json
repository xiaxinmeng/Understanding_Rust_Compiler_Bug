{"sha": "df00d10320c5283e68ecd39e2825c4be88661744", "node_id": "C_kwDOANBUbNoAKGRmMDBkMTAzMjBjNTI4M2U2OGVjZDM5ZTI4MjVjNGJlODg2NjE3NDQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-08T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-08T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "153f4e3d64efc2811718737b247590a9b39a37a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153f4e3d64efc2811718737b247590a9b39a37a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df00d10320c5283e68ecd39e2825c4be88661744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df00d10320c5283e68ecd39e2825c4be88661744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df00d10320c5283e68ecd39e2825c4be88661744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df00d10320c5283e68ecd39e2825c4be88661744/comments", "author": null, "committer": null, "parents": [{"sha": "45fb78c9c456ace1d914c836d15af38ae345b902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fb78c9c456ace1d914c836d15af38ae345b902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fb78c9c456ace1d914c836d15af38ae345b902"}], "stats": {"total": 269, "additions": 268, "deletions": 1}, "files": [{"sha": "2a7e43d0b5a4c453226a56d54b9083afb4bf44a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1,3 +1,95 @@\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/104409\n+\t* config/aarch64/aarch64-builtins.cc (handle_arm_acle_h): New.\n+\t(aarch64_general_init_builtins): Move LS64 code.\n+\t* config/aarch64/aarch64-c.cc (aarch64_pragma_aarch64): Support\n+\tarm_acle.h\n+\t* config/aarch64/aarch64-protos.h (handle_arm_acle_h): New.\n+\t* config/aarch64/arm_acle.h: Add pragma GCC aarch64 \"arm_acle.h\".\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\t    Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/104303\n+\t* tree-ssa-alias.h (ptr_deref_may_alias_global_p,\n+\tref_may_alias_global_p, ref_may_alias_global_p,\n+\tstmt_may_clobber_global_p, pt_solution_includes_global): Add\n+\tbool parameters indicating whether escaped locals should be\n+\tconsidered global.\n+\t* tree-ssa-structalias.cc (pt_solution_includes_global):\n+\tWhen the new escaped_nonlocal_p flag is true also consider\n+\tpt->vars_contains_escaped.\n+\t* tree-ssa-alias.cc (ptr_deref_may_alias_global_p):\n+\tPass down new escaped_nonlocal_p flag.\n+\t(ref_may_alias_global_p): Likewise.\n+\t(stmt_may_clobber_global_p): Likewise.\n+\t(ref_may_alias_global_p_1): Likewise.  For decls also\n+\tquery the escaped solution if true.\n+\t(ref_may_access_global_memory_p): Remove.\n+\t(modref_may_conflict): Use ref_may_alias_global_p with\n+\tescaped locals considered global.\n+\t(ref_maybe_used_by_stmt_p): Adjust.\n+\t* ipa-fnsummary.cc (points_to_local_or_readonly_memory_p):\n+\tLikewise.\n+\t* tree-ssa-dse.cc (dse_classify_store): Likewise.\n+\t* trans-mem.cc (thread_private_new_memory): Likewise, but\n+\tconsider escaped locals global.\n+\t* tree-ssa-dce.cc (mark_stmt_if_obviously_necessary): Likewise.\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105185\n+\t* tree-ssa-sccvn.cc (visit_reference_op_call): Simplify\n+\tmodref query again.\n+\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/104049\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_reduc_plus_internal<mode>): Fix RTL and rename to...\n+\t(reduc_plus_scal_<mode>): ... This.\n+\t(reduc_plus_scal_v4sf): Moved.\n+\t(aarch64_reduc_plus_internalv2si): Fix RTL and rename to...\n+\t(reduc_plus_scal_v2si): ... This.\n+\n+2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102586\n+\t* langhooks.h (struct lang_hooks_for_types): Add classtype_as_base\n+\tlanghook.\n+\t* langhooks-def.h (LANG_HOOKS_CLASSTYPE_AS_BASE): Define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add it.\n+\t* gimple-fold.cc (clear_padding_type): Use ftype instead of\n+\tTREE_TYPE (field) some more.  For artificial FIELD_DECLs without\n+\tname try the lang_hooks.types.classtype_as_base langhook and\n+\tif it returns non-NULL, use that instead of ftype for recursive call.\n+\n+2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105150\n+\t* tree.cc (tree_builtin_call_types_compatible_p): New function.\n+\t(get_call_combined_fn): Use it.\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105165\n+\t* tree-complex.cc (expand_complex_asm): Sorry for asm goto\n+\t_Complex outputs.\n+\n+2022-04-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (<sse2_avx2>_andnot<mode>3_mask):\n+\tRemoved.\n+\t(<sse>_andnot<mode>3<mask_name>): Disable V*HFmode patterns\n+\tfor mask_applied.\n+\t(<code><mode>3<mask_name>): Ditto.\n+\t(*<code><mode>3<mask_name>): Ditto.\n+\t(VFB_128_256): Adjust condition of V8HF/V16HFmode according to\n+\treal instruction.\n+\t(VFB_512): Ditto.\n+\t(VFB): Ditto.\n+\n 2022-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/104985"}, {"sha": "59fcf3cf93d1a5d725d31e083e132cda87acf042", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1 +1 @@\n-20220407\n+20220408"}, {"sha": "0127bd1d5cb82ad5e7543e2ab36d33950fdf8184", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1,3 +1,33 @@\n+2022-04-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102208\n+\t* store.cc (binding_map::remove_overlapping_bindings): Add\n+\t\"always_overlap\" param, using it to generalize to the case where\n+\twe want to remove all bindings.  Update \"uncertainty\" logic to\n+\tonly record maybe-bound values for cases where there is a symbolic\n+\twrite involved.\n+\t(binding_cluster::mark_region_as_unknown): Split param \"reg\" into\n+\t\"reg_to_bind\" and \"reg_for_overlap\".\n+\t(binding_cluster::maybe_get_compound_binding): Pass \"false\" to\n+\tbinding_map::remove_overlapping_bindings new \"always_overlap\" param.\n+\t(binding_cluster::remove_overlapping_bindings): Determine\n+\t\"always_overlap\" and pass it to\n+\tbinding_map::remove_overlapping_bindings.\n+\t(store::set_value): Pass uncertainty to remove_overlapping_bindings\n+\tcall.  Update for new param of\n+\tbinding_cluster::mark_region_as_unknown, passing both the base\n+\tregion of the iter_cluster, and the lhs_reg.\n+\t(store::mark_region_as_unknown): Update for new param of\n+\tbinding_cluster::mark_region_as_unknown, passing \"reg\" for both.\n+\t(store::remove_overlapping_bindings): Add param \"uncertainty\", and\n+\tpass it on to call to\n+\tbinding_cluster::remove_overlapping_bindings.\n+\t* store.h (binding_map::remove_overlapping_bindings): Add\n+\t\"always_overlap\" param.\n+\t(binding_cluster::mark_region_as_unknown): Split param \"reg\" into\n+\t\"reg_to_bind\" and \"reg_for_overlap\".\n+\t(store::remove_overlapping_bindings): Add param \"uncertainty\".\n+\n 2022-03-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR testsuite/105085"}, {"sha": "0356517fdaccf0feaa6f6dc756189d22a33d5454", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1,3 +1,41 @@\n+2022-04-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99479\n+\t* name-lookup.cc (name_lookup::using_queue): Change to an\n+\tauto_vec (with 16 elements of internal storage).\n+\t(name_lookup::queue_namespace): Change return type to void,\n+\ttake queue parameter by reference and adjust function body\n+\taccordingly.\n+\t(name_lookup::do_queue_usings): Inline into ...\n+\t(name_lookup::queue_usings): ... here.  As in queue_namespace.\n+\t(name_lookup::search_unqualified): Don't make queue static,\n+\tremove length variable, and adjust function body accordingly.\n+\n+2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102586\n+\t* cp-objcp-common.h (cp_classtype_as_base): Declare.\n+\t(LANG_HOOKS_CLASSTYPE_AS_BASE): Redefine.\n+\t* cp-objcp-common.cc (cp_classtype_as_base): New function.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101051\n+\t* decl.cc (grokdeclarator): Reject conversion with trailing return\n+\tsooner.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101717\n+\t* lambda.cc (lambda_expr_this_capture): Check all enclosing\n+\tlambdas for completeness.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105187\n+\t* typeck2.cc (store_init_value): Allow TREE_HAS_CONSTRUCTOR for\n+\tvectors.\n+\n 2022-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/104668"}, {"sha": "f03bdb5ecdfba36952622210ac7f8785fe131430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1,3 +1,105 @@\n+2022-04-07   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/104253\n+\t* lib/target-supports.exp (check_ppc_float128_sw_available): Do\n+\tnot run float128 tests on VxWorks.\n+\t(check_ppc_float128_hw_available): Likewise.\n+\t(check_effective_target_ppc_ieee128_ok): Likewise.\n+\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/105196\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-float.c: Remove slp1 check.\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\t    Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/104303\n+\t* gnat.dg/concat5.adb: New.\n+\t* gnat.dg/concat5_pkg1.adb: Likewise.\n+\t* gnat.dg/concat5_pkg1.ads: Likewise.\n+\t* gnat.dg/concat5_pkg2.adb: Likewise.\n+\t* gnat.dg/concat5_pkg2.ads: Likewise.\n+\n+2022-04-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102208\n+\t* gcc.dg/analyzer/symbolic-9.c: New test.\n+\t* gcc.dg/analyzer/torture/leak-pr102308-1.c: New test.\n+\t* gcc.dg/analyzer/torture/leak-pr102308-2.c: New test.\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105185\n+\t* gcc.dg/torture/pr105185.c: New testcase.\n+\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/104049\n+\t* gcc.target/aarch64/vadd_reduc-1.c: New test.\n+\t* gcc.target/aarch64/vadd_reduc-2.c: New test.\n+\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/105095\n+\t* gcc.dg/vect/complex/fast-math-complex-add-double.c: Update for codegen.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-add-pattern-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-half-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-double.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-float.c: Likewise.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-half-float.c: Likewise.\n+\t* gcc.dg/vect/vect.exp: Add extra letter to filter.\n+\n+2022-04-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/pr103350-1.c: Skip on BE.\n+\t* gcc.target/aarch64/pr103350-2.c: Likewise.\n+\n+2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102586\n+\t* g++.dg/torture/builtin-clear-padding-5.C: New test.\n+\t* g++.dg/cpp2a/builtin-clear-padding1.C (bar): Uncomment one\n+\tcall that is now accepted.\n+\n+2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105150\n+\t* gcc.dg/pr105150.c: New test.\n+\n+2022-04-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105165\n+\t* gcc.dg/pr105165.c: New testcase.\n+\n+2022-04-07  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/105147\n+\t* gcc.dg/pr105140.c: Skip for s390*-*-*.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101051\n+\t* g++.dg/cpp0x/trailing15.C: New test.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101717\n+\t* g++.dg/cpp1y/lambda-generic-this4.C: New test.\n+\n+2022-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105187\n+\t* gcc.c-torture/compile/20050113-1.c: Moved to...\n+\t* c-c++-common/torture/20050113-1.c: ...here.\n+\n 2022-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/104668"}, {"sha": "7d2fe7113fa2f688dc6d6c40f1fdd656eb25a541", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df00d10320c5283e68ecd39e2825c4be88661744/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df00d10320c5283e68ecd39e2825c4be88661744/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=df00d10320c5283e68ecd39e2825c4be88661744", "patch": "@@ -1,3 +1,8 @@\n+2022-04-07  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* testsuite/20_util/expected/requirements.cc: Correct minimal-size\n+\ttest.\n+\n 2022-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/105128"}]}