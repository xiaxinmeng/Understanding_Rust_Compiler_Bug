{"sha": "3d8e492088897fadb3434917d73f5728f1bbbc19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4ZTQ5MjA4ODg5N2ZhZGIzNDM0OTE3ZDczZjU3MjhmMWJiYmMxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2017-01-13T15:56:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-01-13T15:56:04Z"}, "message": "Short-circuit alt_fail case in record_reg_classes\n\nrecord_reg_classes is often the hottest function when generating\nunoptimised output.  It seems typical for over 60% of the instructions\nit handles to be moves, and of course moves tend to be the instructions\nwith the longest constraint strings.\n\nMaybe we should avoid using move constraints to set costs in unoptimised\noutput and instead use the \"natural\" class for the mode being moved.\nThat's too invasive for stage 3 though.\n\nHowever, seeing so many moves means that we see many \"failing\"\nalternatives, usually because of '*' or because of hard registers\nin function call sequences.  The frequency of alternatives that are\ndetected as failures after the first operand tends again to be more\nthan 60%.  Previously we would continue to process the other operands\nof the alternative regardless.  This patch instead adds a short-cut.\n\nAs well as avoiding unnecessary work, it means that the alt_fail\nvariable can be jump-threaded away.\n\nTested on aach64-linux-gnu and x86_64-linux-gnu.  It reduces compile\ntime by about 1% on some tests with \"-g -O0\".\n\ngcc/\n\t* ira-costs.c (record_reg_classes): Break from the inner loop\n\tearly once alt_fail is known to be true.  Update outer loop\n\thandling accordingly.\n\nFrom-SVN: r244446", "tree": {"sha": "929449609619b78f8928c5c255b6a6dacb0c58c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/929449609619b78f8928c5c255b6a6dacb0c58c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8e492088897fadb3434917d73f5728f1bbbc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8e492088897fadb3434917d73f5728f1bbbc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8e492088897fadb3434917d73f5728f1bbbc19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8e492088897fadb3434917d73f5728f1bbbc19/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92daf2dedd1c8b0fda49ebf3b824cf251808be02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92daf2dedd1c8b0fda49ebf3b824cf251808be02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92daf2dedd1c8b0fda49ebf3b824cf251808be02"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "95d1d0ac008167b47ed006f36fb128114be0eef6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8e492088897fadb3434917d73f5728f1bbbc19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8e492088897fadb3434917d73f5728f1bbbc19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d8e492088897fadb3434917d73f5728f1bbbc19", "patch": "@@ -1,3 +1,9 @@\n+2017-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira-costs.c (record_reg_classes): Break from the inner loop\n+\tearly once alt_fail is known to be true.  Update outer loop\n+\thandling accordingly.\n+\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dse.c (decrement_count): New function."}, {"sha": "c3bddb7f7d09b338dcabd7bb4042458c85789490", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8e492088897fadb3434917d73f5728f1bbbc19/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8e492088897fadb3434917d73f5728f1bbbc19/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=3d8e492088897fadb3434917d73f5728f1bbbc19", "patch": "@@ -820,6 +820,9 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \n \t  constraints[i] = p;\n \n+\t  if (alt_fail)\n+\t    break;\n+\n \t  /* How we account for this operand now depends on whether it\n \t     is a pseudo register or not.  If it is, we first check if\n \t     any register classes are valid.  If not, we ignore this\n@@ -999,10 +1002,21 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t    alt_cost += ira_memory_move_cost[mode][classes[i]][1];\n \t  else\n \t    alt_fail = 1;\n+\n+\t  if (alt_fail)\n+\t    break;\n \t}\n \n       if (alt_fail)\n-\tcontinue;\n+\t{\n+\t  /* The loop above might have exited early once the failure\n+\t     was seen.  Skip over the constraints for the remaining\n+\t     operands.  */\n+\t  i += 1;\n+\t  for (; i < n_ops; ++i)\n+\t    constraints[i] = skip_alternative (constraints[i]);\n+\t  continue;\n+\t}\n \n       op_cost_add = alt_cost * frequency;\n       /* Finally, update the costs with the information we've"}]}