{"sha": "d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNjMTc2ZmNhZmM1YWIwYzg2M2I0NWZlYjVhM2QyMWZhM2M0NTg1Nw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-12T17:15:18Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-12T17:15:18Z"}, "message": "re PR target/46412 (bfin-elf --enable-werror-always build fails)\n\n\tPR target/46412\n\t* config/bfin/bfin-protos.h (bfin_local_alignment): Update prototype.\n\t* config/bfin/bfin.c: Include sel-sched.h .\n\t(bfin_cpus): Use BFIN_CPU_UNKNOWN for last initializer element.\n\t(expand_interrupt_handler_prologue): Remove unused variable insn.\n\t(bfin_load_pic_reg): Likewise.\n\t(bfin_rtx_costs): Make code / outer_code variables of type\n\tenum rtx_code, copied from re-named parameters.\n\t(bfin_local_alignment): Change align argument and return type\n\tto unsigned.\n\t(bfin_adjust_cost): Remove unused variable insn_type.\n\tDeclare variables at start of block.\n\t(struct loop_info): Rename to...\n\t(struct loop_info_d).\n\t(workaround_rts_anomaly): Change type of icode to int.\n\t(harmless_null_pointer_p): Cast REGNO (..) to int before comparison\n\twith int-typed variable.\n\t(note_np_check_stores): Likewise.\n\t(trapping_loads_p): Remove unused variable pat.\n\t(bfin_expand_binop_builtin): Use expand_normal.\n\t(bfin_expand_unop_builtin): Likewise.\n\t(bfin_expand_builtin): Likewise.\n\tSet tmode before use.\n\nFrom-SVN: r166661", "tree": {"sha": "fdb6baf458e524288418a3a453bb12a2960c9872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdb6baf458e524288418a3a453bb12a2960c9872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/comments", "author": null, "committer": null, "parents": [{"sha": "4a6336ad33661a550986b2f9f8a76e3e2bfe07c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6336ad33661a550986b2f9f8a76e3e2bfe07c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a6336ad33661a550986b2f9f8a76e3e2bfe07c3"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "537635f8c0ef9dbbb0e7d4bfcee413121349615f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "patch": "@@ -43,6 +43,30 @@\n \t(STACK_SLOT_ALIGNMENT, LOCAL_DECL_ALIGNMENT, PUSH_ROUNDING): Likewise.\n \t* doc/tm.texi: Regenerate.\n \n+\tPR target/46412\n+\t* config/bfin/bfin-protos.h (bfin_local_alignment): Update prototype.\n+\t* config/bfin/bfin.c: Include sel-sched.h .\n+\t(bfin_cpus): Use BFIN_CPU_UNKNOWN for last initializer element.\n+\t(expand_interrupt_handler_prologue): Remove unused variable insn.\n+\t(bfin_load_pic_reg): Likewise.\n+\t(bfin_rtx_costs): Make code / outer_code variables of type\n+\tenum rtx_code, copied from re-named parameters.\n+\t(bfin_local_alignment): Change align argument and return type\n+\tto unsigned.\n+\t(bfin_adjust_cost): Remove unused variable insn_type.\n+\tDeclare variables at start of block.\n+\t(struct loop_info): Rename to...\n+\t(struct loop_info_d).\n+\t(workaround_rts_anomaly): Change type of icode to int.\n+\t(harmless_null_pointer_p): Cast REGNO (..) to int before comparison\n+\twith int-typed variable.\n+\t(note_np_check_stores): Likewise.\n+\t(trapping_loads_p): Remove unused variable pat.\n+\t(bfin_expand_binop_builtin): Use expand_normal.\n+\t(bfin_expand_unop_builtin): Likewise.\n+\t(bfin_expand_builtin): Likewise.\n+\tSet tmode before use.\n+\n 2010-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR debug/46375"}, {"sha": "66bacb5fb6eb7c70fa503909c51098afa7f998be", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "patch": "@@ -105,7 +105,7 @@ extern void emit_pic_move (rtx *, Mmode);\n extern void asm_conditional_branch (rtx, rtx *, int, int);\n extern rtx bfin_gen_compare (rtx, Mmode);\n \n-extern int bfin_local_alignment (tree, int);\n+extern unsigned bfin_local_alignment (tree, unsigned);\n extern rtx bfin_va_arg (tree, tree);\n \n extern void bfin_expand_prologue (void);"}, {"sha": "db2f73cb6ca743e681e220a1380a3381b9449c2e", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c176fcafc5ab0c863b45feb5a3d21fa3c45857/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=d3c176fcafc5ab0c863b45feb5a3d21fa3c45857", "patch": "@@ -56,6 +56,7 @@\n #include \"cfglayout.h\"\n #include \"timevar.h\"\n #include \"df.h\"\n+#include \"sel-sched.h\"\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n@@ -336,7 +337,7 @@ struct bfin_cpu bfin_cpus[] =\n    | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n    | WA_05000074},\n \n-  {NULL, 0, 0, 0}\n+  {NULL, BFIN_CPU_UNKNOWN, 0, 0}\n };\n \n int splitting_for_sched, splitting_loops;\n@@ -1255,14 +1256,13 @@ expand_interrupt_handler_prologue (rtx spreg, e_funkind fkind, bool all)\n       rtx r0reg = gen_rtx_REG (SImode, REG_R0);\n       rtx r1reg = gen_rtx_REG (SImode, REG_R1);\n       rtx r2reg = gen_rtx_REG (SImode, REG_R2);\n-      rtx insn;\n \n-      insn = emit_move_insn (r0reg, gen_rtx_REG (SImode, REG_SEQSTAT));\n-      insn = emit_insn (gen_ashrsi3 (r0reg, r0reg, GEN_INT (26)));\n-      insn = emit_insn (gen_ashlsi3 (r0reg, r0reg, GEN_INT (26)));\n-      insn = emit_move_insn (r1reg, spreg);\n-      insn = emit_move_insn (r2reg, gen_rtx_REG (Pmode, REG_FP));\n-      insn = emit_insn (gen_addsi3 (r2reg, r2reg, GEN_INT (8)));\n+      emit_move_insn (r0reg, gen_rtx_REG (SImode, REG_SEQSTAT));\n+      emit_insn (gen_ashrsi3 (r0reg, r0reg, GEN_INT (26)));\n+      emit_insn (gen_ashlsi3 (r0reg, r0reg, GEN_INT (26)));\n+      emit_move_insn (r1reg, spreg);\n+      emit_move_insn (r2reg, gen_rtx_REG (Pmode, REG_FP));\n+      emit_insn (gen_addsi3 (r2reg, r2reg, GEN_INT (8)));\n     }\n }\n \n@@ -1311,7 +1311,7 @@ static rtx\n bfin_load_pic_reg (rtx dest)\n {\n   struct cgraph_local_info *i = NULL;\n-  rtx addr, insn;\n+  rtx addr;\n  \n   i = cgraph_local_info (current_function_decl);\n  \n@@ -1326,7 +1326,7 @@ bfin_load_pic_reg (rtx dest)\n     addr = gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n \t\t\t gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n \t\t\t\t\t UNSPEC_LIBRARY_OFFSET));\n-  insn = emit_insn (gen_movsi (dest, gen_rtx_MEM (Pmode, addr)));\n+  emit_insn (gen_movsi (dest, gen_rtx_MEM (Pmode, addr)));\n   return dest;\n }\n \n@@ -3117,8 +3117,10 @@ bfin_legitimate_constant_p (rtx x)\n }\n \n static bool\n-bfin_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n+bfin_rtx_costs (rtx x, int code_i, int outer_code_i, int *total, bool speed)\n {\n+  enum rtx_code code = (enum rtx_code) code_i;\n+  enum rtx_code outer_code = (enum rtx_code) outer_code_i;\n   int cost2 = COSTS_N_INSNS (1);\n   rtx op0, op1;\n \n@@ -3613,8 +3615,8 @@ bfin_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n    the object would ordinarily have.  The value of this macro is used\n    instead of that alignment to align the object.  */\n \n-int\n-bfin_local_alignment (tree type, int align)\n+unsigned\n+bfin_local_alignment (tree type, unsigned align)\n {\n   /* Increasing alignment for (relatively) big types allows the builtin\n      memcpy can use 32 bit loads/stores.  */\n@@ -3637,7 +3639,7 @@ bfin_issue_rate (void)\n static int\n bfin_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n {\n-  enum attr_type insn_type, dep_insn_type;\n+  enum attr_type dep_insn_type;\n   int dep_insn_code_number;\n \n   /* Anti and output dependencies have zero cost.  */\n@@ -3650,16 +3652,17 @@ bfin_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n   if (dep_insn_code_number < 0 || recog_memoized (insn) < 0)\n     return cost;\n \n-  insn_type = get_attr_type (insn);\n   dep_insn_type = get_attr_type (dep_insn);\n \n   if (dep_insn_type == TYPE_MOVE || dep_insn_type == TYPE_MCLD)\n     {\n       rtx pat = PATTERN (dep_insn);\n+      rtx dest, src;\n+\n       if (GET_CODE (pat) == PARALLEL)\n \tpat = XVECEXP (pat, 0, 0);\n-      rtx dest = SET_DEST (pat);\n-      rtx src = SET_SRC (pat);\n+      dest = SET_DEST (pat);\n+      src = SET_SRC (pat);\n       if (! ADDRESS_REGNO_P (REGNO (dest))\n \t  || ! (MEM_P (src) || D_REGNO_P (REGNO (src))))\n \treturn cost;\n@@ -3718,13 +3721,13 @@ bfin_hardware_loop (void)\n #define MAX_LSETUP_DISTANCE 30\n \n /* We need to keep a vector of loops */\n-typedef struct loop_info *loop_info;\n+typedef struct loop_info_d *loop_info;\n DEF_VEC_P (loop_info);\n DEF_VEC_ALLOC_P (loop_info,heap);\n \n /* Information about a loop we have found (or are in the process of\n    finding).  */\n-struct GTY (()) loop_info\n+struct GTY (()) loop_info_d\n {\n   /* loop number, for dumps */\n   int loop_no;\n@@ -3785,10 +3788,10 @@ struct GTY (()) loop_info\n   int clobber_loop1;\n \n   /* Next loop in the graph. */\n-  struct loop_info *next;\n+  struct loop_info_d *next;\n \n   /* Immediate outer loop of this loop.  */\n-  struct loop_info *outer;\n+  struct loop_info_d *outer;\n \n   /* Vector of blocks only within the loop, including those within\n      inner loops.  */\n@@ -4596,7 +4599,7 @@ bfin_discover_loops (bitmap_obstack *stack, FILE *dump_file)\n \t      continue;\n \t    }\n \n-\t  loop = XNEW (struct loop_info);\n+\t  loop = XNEW (struct loop_info_d);\n \t  loop->next = loops;\n \t  loops = loop;\n \t  loop->loop_no = nloops++;\n@@ -5057,7 +5060,8 @@ workaround_rts_anomaly (void)\n \t    }\n \t  else\n \t    {\n-\t      enum insn_code icode = recog_memoized (insn);\n+\t      int icode = recog_memoized (insn);\n+\n \t      if (icode == CODE_FOR_link)\n \t\tthis_cycles = 4;\n \t      else if (icode == CODE_FOR_unlink)\n@@ -5109,10 +5113,10 @@ harmless_null_pointer_p (rtx mem, int np_reg)\n   mem = XEXP (mem, 0);\n   if (GET_CODE (mem) == POST_INC || GET_CODE (mem) == POST_DEC)\n     mem = XEXP (mem, 0);\n-  if (REG_P (mem) && REGNO (mem) == np_reg)\n+  if (REG_P (mem) && (int) REGNO (mem) == np_reg)\n     return true;\n   if (GET_CODE (mem) == PLUS\n-      && REG_P (XEXP (mem, 0)) && REGNO (XEXP (mem, 0)) == np_reg)\n+      && REG_P (XEXP (mem, 0)) && (int) REGNO (XEXP (mem, 0)) == np_reg)\n     {\n       mem = XEXP (mem, 1);\n       if (GET_CODE (mem) == CONST_INT && INTVAL (mem) > 0)\n@@ -5126,7 +5130,6 @@ harmless_null_pointer_p (rtx mem, int np_reg)\n static bool\n trapping_loads_p (rtx insn, int np_reg, bool after_np_branch)\n {\n-  rtx pat = PATTERN (insn);\n   rtx mem = SET_SRC (single_set (insn));\n \n   if (!after_np_branch)\n@@ -5184,9 +5187,10 @@ bool np_after_branch = false;\n \n /* Subroutine of workaround_speculation, called through note_stores.  */\n static void\n-note_np_check_stores (rtx x, const_rtx pat, void *data ATTRIBUTE_UNUSED)\n+note_np_check_stores (rtx x, const_rtx pat ATTRIBUTE_UNUSED,\n+\t\t      void *data ATTRIBUTE_UNUSED)\n {\n-  if (REG_P (x) && (REGNO (x) == REG_CC || REGNO (x) == np_check_regno))\n+  if (REG_P (x) && (REGNO (x) == REG_CC || (int) REGNO (x) == np_check_regno))\n     np_check_regno = -1;\n }\n \n@@ -6244,8 +6248,8 @@ bfin_expand_binop_builtin (enum insn_code icode, tree exp, rtx target,\n   rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n   tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode op0mode = GET_MODE (op0);\n   enum machine_mode op1mode = GET_MODE (op1);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n@@ -6301,7 +6305,7 @@ bfin_expand_unop_builtin (enum insn_code icode, tree exp,\n {\n   rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n   enum machine_mode op0mode = GET_MODE (op0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n@@ -6365,7 +6369,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n     case BFIN_BUILTIN_DIFFLH_2X16:\n     case BFIN_BUILTIN_SUM_2X16:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       icode = (fcode == BFIN_BUILTIN_DIFFHL_2X16 ? CODE_FOR_subhilov2hi3\n \t       : fcode == BFIN_BUILTIN_DIFFLH_2X16 ? CODE_FOR_sublohiv2hi3\n \t       : CODE_FOR_ssaddhilov2hi3);\n@@ -6393,8 +6397,8 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n     case BFIN_BUILTIN_MULT_1X32X32NS:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       if (! target\n \t  || !register_operand (target, SImode))\n \ttarget = gen_reg_rtx (SImode);\n@@ -6452,10 +6456,11 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n     case BFIN_BUILTIN_CPLX_MUL_16_S40:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       accvec = gen_reg_rtx (V2PDImode);\n       icode = CODE_FOR_flag_macv2hi_parts;\n+      tmode = insn_data[icode].operand[0].mode;\n \n       if (! target\n \t  || GET_MODE (target) != V2HImode\n@@ -6488,11 +6493,12 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       arg2 = CALL_EXPR_ARG (exp, 2);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       accvec = gen_reg_rtx (V2PDImode);\n       icode = CODE_FOR_flag_macv2hi_parts;\n+      tmode = insn_data[icode].operand[0].mode;\n \n       if (! target\n \t  || GET_MODE (target) != V2HImode\n@@ -6542,7 +6548,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n     case BFIN_BUILTIN_CPLX_SQU:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       accvec = gen_reg_rtx (V2PDImode);\n       icode = CODE_FOR_flag_mulv2hi;\n       tmp1 = gen_reg_rtx (V2HImode);"}]}