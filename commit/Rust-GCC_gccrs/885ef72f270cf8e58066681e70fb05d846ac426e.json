{"sha": "885ef72f270cf8e58066681e70fb05d846ac426e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1ZWY3MmYyNzBjZjhlNTgwNjY2ODFlNzBmYjA1ZDg0NmFjNDI2ZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-05-30T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-05-30T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "b41daa02cd6d17f395f57e378244619f431d642f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b41daa02cd6d17f395f57e378244619f431d642f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/885ef72f270cf8e58066681e70fb05d846ac426e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885ef72f270cf8e58066681e70fb05d846ac426e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885ef72f270cf8e58066681e70fb05d846ac426e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885ef72f270cf8e58066681e70fb05d846ac426e/comments", "author": null, "committer": null, "parents": [{"sha": "ee969a36d9887e1a3230fe3de2d398fd6c6dac49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee969a36d9887e1a3230fe3de2d398fd6c6dac49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee969a36d9887e1a3230fe3de2d398fd6c6dac49"}], "stats": {"total": 463, "additions": 462, "deletions": 1}, "files": [{"sha": "b7c702b50a5046f119897a8f8e82023e94d4385c", "filename": "config/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,9 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* cet.m4: Replace save_CFLAGS and save_LDFLAGS with\n+\tcet_save_CFLAGS and cet_save_LDFLAGS.\n+\n 2020-05-18  Jason Merrill  <jason@redhat.com>\n \n \t* ax_cxx_compile_stdcxx.m4: Import from autoconf archive with"}, {"sha": "7e9df6bdae516db5e23eb55eea3a3022f5f9a555", "filename": "contrib/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,27 @@\n+2020-05-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config-list.mk (LIST): Remove rs6000-ibm-aix5.3.0.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Find empty change descriptions.\n+\t* gcc-changelog/test_email.py: New test.\n+\t* gcc-changelog/test_patches.txt: New patch that tests that.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* git-backport.py: The script did 'git co HEAD~' when\n+\tthere was no modified ChangeLog file in a successful\n+\tgit cherry pick.\n+\tRun cherry-pick --continue without editor.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Properly\n+\thandle duplicite authors.\n+\t* gcc-changelog/test_email.py: New test.\n+\t* gcc-changelog/test_patches.txt: New patch.\n+\n 2020-05-28  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-changelog/git_email.py (GitEmail.__init__): Interpret file"}, {"sha": "c4d8bc2545749e14cf40c43d4a2a1fdc1c12c32e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,149 @@\n+2020-05-29  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/altivec.md (altivec_vmrghw_direct): Prefer VSX form.\n+\t(altivec_vmrglw_direct): Ditto.\n+\t(altivec_vperm_<mode>_direct): Ditto.\n+\t(altivec_vperm_v8hiv16qi): Ditto.\n+\t(*altivec_vperm_<mode>_uns_internal): Ditto.\n+\t(*altivec_vpermr_<mode>_internal): Ditto.\n+\t(vperm_v8hiv4si): Ditto.\n+\t(vperm_v16qiv8hi): Ditto.\n+\n+2020-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-in.c (streamer_read_chain): Move here from\n+\ttree-streamer-in.c.\n+\t(stream_read_tree_ref): New.\n+\t(lto_input_tree_1): Simplify.\n+\t* lto-streamer-out.c (stream_write_tree_ref): New.\n+\t(lto_write_tree_1): Simplify.\n+\t(lto_output_tree_1): Simplify.\n+\t(DFS::DFS_write_tree): Simplify.\n+\t(streamer_write_chain): Move here from tree-stremaer-out.c.\n+\t* lto-streamer.h (lto_output_tree_ref): Update prototype.\n+\t(stream_read_tree_ref): Declare\n+\t(stream_write_tree_ref): Declare\n+\t* tree-streamer-in.c (streamer_read_chain): Update to use\n+\tstream_read_tree_ref.\n+\t(lto_input_ts_common_tree_pointers): Likewise.\n+\t(lto_input_ts_vector_tree_pointers): Likewise.\n+\t(lto_input_ts_poly_tree_pointers): Likewise.\n+\t(lto_input_ts_complex_tree_pointers): Likewise.\n+\t(lto_input_ts_decl_minimal_tree_pointers): Likewise.\n+\t(lto_input_ts_decl_common_tree_pointers): Likewise.\n+\t(lto_input_ts_decl_with_vis_tree_pointers): Likewise.\n+\t(lto_input_ts_field_decl_tree_pointers): Likewise.\n+\t(lto_input_ts_function_decl_tree_pointers): Likewise.\n+\t(lto_input_ts_type_common_tree_pointers): Likewise.\n+\t(lto_input_ts_type_non_common_tree_pointers): Likewise.\n+\t(lto_input_ts_list_tree_pointers): Likewise.\n+\t(lto_input_ts_vec_tree_pointers): Likewise.\n+\t(lto_input_ts_exp_tree_pointers): Likewise.\n+\t(lto_input_ts_block_tree_pointers): Likewise.\n+\t(lto_input_ts_binfo_tree_pointers): Likewise.\n+\t(lto_input_ts_constructor_tree_pointers): Likewise.\n+\t(lto_input_ts_omp_clause_tree_pointers): Likewise.\n+\t* tree-streamer-out.c (streamer_write_chain): Update to use\n+\tstream_write_tree_ref.\n+\t(write_ts_common_tree_pointers): Likewise.\n+\t(write_ts_vector_tree_pointers): Likewise.\n+\t(write_ts_poly_tree_pointers): Likewise.\n+\t(write_ts_complex_tree_pointers): Likewise.\n+\t(write_ts_decl_minimal_tree_pointers): Likewise.\n+\t(write_ts_decl_common_tree_pointers): Likewise.\n+\t(write_ts_decl_non_common_tree_pointers): Likewise.\n+\t(write_ts_decl_with_vis_tree_pointers): Likewise.\n+\t(write_ts_field_decl_tree_pointers): Likewise.\n+\t(write_ts_function_decl_tree_pointers): Likewise.\n+\t(write_ts_type_common_tree_pointers): Likewise.\n+\t(write_ts_type_non_common_tree_pointers): Likewise.\n+\t(write_ts_list_tree_pointers): Likewise.\n+\t(write_ts_vec_tree_pointers): Likewise.\n+\t(write_ts_exp_tree_pointers): Likewise.\n+\t(write_ts_block_tree_pointers): Likewise.\n+\t(write_ts_binfo_tree_pointers): Likewise.\n+\t(write_ts_constructor_tree_pointers): Likewise.\n+\t(write_ts_omp_clause_tree_pointers): Likewise.\n+\t(streamer_write_tree_body): Likewise.\n+\t(streamer_write_integer_cst): Likewise.\n+\t* tree-streamer.h (streamer_read_chain):Declare.\n+\t(streamer_write_chain):Declare.\n+\t(streamer_write_tree_body): Update prototype.\n+\t(streamer_write_integer_cst): Update prototype.\n+\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n+2020-05-29  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (add<mode>3_vcc_zext_dup): Add early clobber.\n+\t(add<mode>3_vcc_zext_dup_exec): Likewise.\n+\t(add<mode>3_vcc_zext_dup2): Likewise.\n+\t(add<mode>3_vcc_zext_dup2_exec): Likewise.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95272\n+\t* tree-vectorizer.h (_slp_tree::representative): Add.\n+\t(SLP_TREE_REPRESENTATIVE): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Adjust SLP\n+\tnode gathering.\n+\t(vectorizable_live_operation): Use the representative to\n+\tattach the reduction info to.\n+\t* tree-vect-slp.c (_slp_tree::_slp_tree): Initialize\n+\tSLP_TREE_REPRESENTATIVE.\n+\t(vect_create_new_slp_node): Likewise.\n+\t(slp_copy_subtree): Copy it.\n+\t(vect_slp_rearrange_stmts): Re-arrange even COND_EXPR stmts.\n+\t(vect_slp_analyze_node_operations_1): Pass the representative\n+\tto vect_analyze_stmt.\n+\t(vect_schedule_slp_instance): Pass the representative to\n+\tvect_transform_stmt.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95356\n+\t* tree-vect-stmts.c (vectorizable_shift): Do in-place SLP\n+\tnode hacking during analysis.\n+\n+2020-05-29  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/95362\n+\t* lto-streamer-out.c (lto_output_tree): Disable redundant streaming.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95403\n+\t* tree-vect-stmts.c (vect_init_vector_1): Guard against NULL\n+\tstmt_vinfo.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95315\n+\t* omp-general.c (omp_resolve_declare_variant): Fix up addition of\n+\tdeclare variant cgraph node removal callback.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95052\n+\t* expr.c (store_expr): If expr_size is constant and significantly\n+\tlarger than TREE_STRING_LENGTH, set temp to just the\n+\tTREE_STRING_LENGTH portion of the STRING_CST.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95393\n+\t* tree-ssa-phiopt.c (minmax_replacement): Use gimple_build\n+\tto build the min/max expression so we simplify cases like\n+\tMAX(0, s) immediately.\n+\n+2020-05-29  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<LOGICAL:optab><mode>3): Add support\n+\tfor unpacked EOR, ORR, AND.\n+\n 2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n \n \t* Makefile.in: don't look for libiberty in the \"pic\" subdirectory"}, {"sha": "cadcec3f8ad50d6faa811174f511c59853541dcd", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1 +1 @@\n-20200529\n+20200530"}, {"sha": "95fb2b447ed96de4181420a559dd814f5472b540", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,46 @@\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95181\n+\t* class.c (add_method): Let special member function templates\n+\tcoexist if they are not equivalently constrained, or in a class\n+\ttemplate.\n+\n+2020-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95371\n+\t* pt.c (process_template_parm): Set DECL_TEMPLATE_INFO\n+\ton the DECL_TEMPLATE_RESULT.\n+\n+2020-05-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95344\n+\t* cp-gimplify.c (cp_fold) <case MODIFY_EXPR>: Don't set\n+\tTREE_THIS_VOLATILE here.\n+\t(cp_fold): Set it here along with TREE_NO_WARNING.\n+\n+2020-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95311\n+\tPR c++/95221\n+\t* class.c (build_vfn_ref): Don't fold the INDIRECT_REF.\n+\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92652\n+\tPR c++/93698\n+\tPR c++/94128\n+\t* parser.c (cp_parser_requires_clause_expression): Temporarily\n+\tincrement processing_template_decl only if it is 0.\n+\t(cp_parser_constraint_expression): Likewise.\n+\t(cp_parser_requires_expression): Likewise.\n+\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95241\n+\t* constexpr.c (get_or_insert_ctor_field): Add limited support\n+\tfor RANGE_EXPR index lookups.\n+\n 2020-05-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/95328"}, {"sha": "127bd2a02972cfdc7bb019529688073d408bb2c8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,11 @@\n+2020-05-29  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95090\n+\t* class.c (get_unique_type_string): Enlarge temporary for\n+\tname-mangling.  Use strncpy to prevent buffer overrun.\n+\t(get_unique_hashed_string): Enlarge temporary.\n+\t(gfc_hash_value): Enlarge temporary for name-mangling.\n+\n 2020-05-28  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95373"}, {"sha": "48354eb0923f4fa3d6315fcce66a9ca91e61a224", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,105 @@\n+2020-05-29  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/vsx-vector-6.p9.c: Allow xxperm as perm as well.\n+\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95181\n+\t* g++.dg/concepts/pr95181.C: New test.\n+\t* g++.dg/concepts/pr95181-2.C: New test.\n+\n+2020-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95371\n+\t* g++.dg/cpp2a/concepts-ttp1.C: New test.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/95390\n+\t* gfortran.dg/findloc_8.f90: New test.\n+\n+2020-05-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95344\n+\t* c-c++-common/Wparentheses-2.c: New test.\n+\n+2020-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95311\n+\t* g++.dg/ubsan/vptr-16.C: New test.\n+\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92652\n+\tPR c++/93698\n+\tPR c++/94128\n+\t* g++.dg/cpp2a/concepts-lambda8.C: New test.\n+\t* g++.dg/cpp2a/concepts-lambda9.C: New test.\n+\t* g++.dg/cpp2a/concepts-lambda10.C: New test.\n+\n+2020-05-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95241\n+\t* g++.dg/cpp0x/constexpr-array25.C: New test.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95272\n+\t* gcc.dg/vect/pr95272.c: New testcase.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95403\n+\t* gfortran.dg/vect/pr95403.f: New testcase.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95315\n+\t* gcc.dg/gomp/pr95315-2.c: New test.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95052\n+\t* gcc.target/i386/pr95052.c: New test.\n+\n+2020-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95393\n+\t* gcc.dg/tree-ssa/phi-opt-21.c: New testcase.\n+\t* g++.dg/vect/slp-pr87105.cc: Adjust.\n+\n+2020-05-29  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* gcc.target/aarch64/sve/load_const_offset_2.c: Force using packed\n+\tvectors.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_1.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_2.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_3.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_4.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_5.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_6.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_7.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_1.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_2.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_3.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_4.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_5.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_6.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_7.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_1.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_2.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_3.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_4.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_5.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_6.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_7.c: New test.\n+\t* gcc.target/aarch64/sve/scatter_store_6.c: Force using packed vectors.\n+\t* gcc.target/aarch64/sve/scatter_store_7.c: Force using packed vectors.\n+\t* gcc.target/aarch64/sve/strided_load_3.c: Force using packed vectors.\n+\t* gcc.target/aarch64/sve/strided_store_3.c: Force using packed vectors.\n+\t* gcc.target/aarch64/sve/unpack_signed_1.c: Force using packed vectors.\n+\n 2020-05-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/95328"}, {"sha": "0a26f3ee80e588f769485fa7a97774e14ef29c17", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "cd33dc26d407335639fa3eb8bf56482f1d11b355", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "e5a2e56508ecf8c9916c8b440f6189987a9e59f5", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "6e16145b669f06cb0f14ea65027239862ca97f12", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.in (AR): Substitute @AR@."}, {"sha": "2a8a540d187c721858597b80fa0f7d3f38b3ad6f", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.in (AR): Substitute @AR@."}, {"sha": "81ff41fc02ceae263eaffab659c710ad485acac7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-28  Dong JianQiang  <dongjianqiang2@huawei.com>\n \n \tPR gcov-profile/95332"}, {"sha": "549bd05b1f1d25d6e03b198bff538549db54bf7d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,19 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n+2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/95390\n+\t* Makefile.am (i_findloc0_c): Add findloc0_i10.c.\n+\t(i_findloc1_c): Add findloc1_i10.c.\n+\t* gfortran.map (GFORTRAN_10.2): New symbol version, export\n+\t_gfortran_{,m,s}findloc{0,1}_c10 symbols.\n+\t* Makefile.in: Regenerated.\n+\t* generated/findloc0_c10.c: Generated.\n+\t* generated/findloc1_c10.c: Generated.\n+\n 2020-05-28  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR libfortran/95104"}, {"sha": "849f83609b8c2cd21226d5dc647a4f6cd05c4dd0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/95191"}, {"sha": "16bcbf7c6990ea5cf461b8ad9f62f8bc894a8bbc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-demangle.c (dlang_attributes): Add @live attribute."}, {"sha": "d0602a6f6de722609a7c84a01e8266381a82dc82", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "9b2d90ae3a4d5c8278ab2588662bd64b9721c790", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "73b84c58fd204d3138523efec30b122013ac9f18", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "9f23bbc05ac24e76363ea11c7577cff1e741f4d3", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "e1da53bdcd524d05035c0d0419e508ee4a89842e", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,13 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* HOWTO_MERGE: Do not mention not existing argument.\n+\t* README.gcc: Update LLVM repository location.\n+\n 2020-05-26  Martin Liska  <mliska@suse.cz>\n \n \t* LOCAL_PATCHES: Use git hash instead of SVN id."}, {"sha": "3891d204fac3b4826913745d6aaa879bb25d1639", "filename": "libssp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "019315c7355e87288974e09114c39c3fe143355e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,15 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n+2020-05-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/95079\n+\t* include/bits/hashtable_policy.h (_Insert_base<>::try_emplace): New.\n+\t* include/bits/unordered_map.h (unordered_map<>::try_emplace): Adapt.\n+\t(unordered_map<>::insert_or_assign): Adapt.\n+\n 2020-05-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/95282"}, {"sha": "8e7b9513fcb6e034bf500166498fccdfc37d52b6", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "bdd92bf966990916a12c0d66bf69e50211e10c02", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n 2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n \n \t* lto-plugin.c (skip_in_suffix): New."}, {"sha": "d65a2dedc94a7346f3c41fed34a3aa306fb6d596", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,17 @@\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* bugzilla-close-candidate.py: Fix sorting of branches.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* bugzilla-close-candidate.py: Fix parsing of SVN revisions.\n+\tFix skipping of PRs that contain Can be closed message.\n+\n+2020-05-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* bugzilla-close-candidate.py: Support both SVN and GIT messages\n+\tin PRs. Remove need of usage of the bugzilla API key.\n+\n 2020-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* update_version_git: Rewrite using"}, {"sha": "09e2778f247e8cb15e2c12e37726d059863c5ed0", "filename": "zlib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ef72f270cf8e58066681e70fb05d846ac426e/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ef72f270cf8e58066681e70fb05d846ac426e/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=885ef72f270cf8e58066681e70fb05d846ac426e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/95413\n+\t* configure: Regenerated.\n+\n \n                 ChangeLog file for zlib\n "}]}