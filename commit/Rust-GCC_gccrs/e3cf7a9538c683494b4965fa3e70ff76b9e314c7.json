{"sha": "e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjZjdhOTUzOGM2ODM0OTRiNDk2NWZhM2U3MGZmNzZiOWUzMTRjNw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-17T15:22:37Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-17T15:22:37Z"}, "message": "re PR target/54607 ([avr]: Canadian cross build fails because gen-avr-mmcu-texi.c is compiled with the wrong compiler)\n\n\tPR target/54607\n\t* config.gcc (tm_file,avr): Add avr/avr-arch.h.\n\t* config/avr/t-avr (gen-avr-mmcu-texi): Use CC_FOR_BUILD to\n\tcompile.  Don't depend on TM_H.  Use CFLAGS_FOR_BUILD.\n\t* config/avr/avr.h (avr_arch, base_arch_s, mcu_type_s): Source out\n\tto...\n\t* config/avr/avr-arch.h: ...this new file.\n\t* config/avr/gen-avr-mmcu-texi.c: Include avr-arch.h, stdio.h,\n\tstdlib.h.\n\t* comparator: Make letters smaller than digits.\n\t* config/avr/avr-devices.c: Don't include headers if used in\n\tgen-avr-mmcu-texi.c.\n\t* doc/avr-mmcu.texi: Regenerate.\n\nFrom-SVN: r191390", "tree": {"sha": "92c612c0afc3dec11f361bf5f0e2430e4bc1c0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92c612c0afc3dec11f361bf5f0e2430e4bc1c0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ab1ff46b119d7e5e3420999499689b90e73358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ab1ff46b119d7e5e3420999499689b90e73358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ab1ff46b119d7e5e3420999499689b90e73358"}], "stats": {"total": 368, "additions": 226, "deletions": 142}, "files": [{"sha": "c7a92fcd5c4350711cd53c4adde90e1f7ae44029", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -1,3 +1,19 @@\n+2012-09-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54607\n+\t* config.gcc (tm_file,avr): Add avr/avr-arch.h.\n+\t* config/avr/t-avr (gen-avr-mmcu-texi): Use CC_FOR_BUILD to\n+\tcompile.  Don't depend on TM_H.  Use CFLAGS_FOR_BUILD.\n+\t* config/avr/avr.h (avr_arch, base_arch_s, mcu_type_s): Source out\n+\tto...\n+\t* config/avr/avr-arch.h: ...this new file.\n+\t* config/avr/gen-avr-mmcu-texi.c: Include avr-arch.h, stdio.h,\n+\tstdlib.h.\n+\t* comparator: Make letters smaller than digits.\n+\t* config/avr/avr-devices.c: Don't include headers if used in\n+\tgen-avr-mmcu-texi.c.\n+\t* doc/avr-mmcu.texi: Regenerate.\n+\n 2012-09-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* rtl.h (CONST_FIXED_P): New predicate macro."}, {"sha": "4d6b3aca6ea874b11a803b1809fe424bbb6e3355", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -886,13 +886,13 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtemseabi*)\n \ttm_file=\"${tm_file} arm/aout.h arm/arm.h\"\n \t;;\n avr-*-rtems*)\n-\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n+\ttm_file=\"elfos.h avr/elf.h avr/avr-arch.h avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"avr/t-avr avr/t-multilib t-rtems avr/t-rtems\"\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n avr-*-*)\n-\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/avr-stdint.h\"\n+\ttm_file=\"elfos.h avr/elf.h avr/avr-arch.h avr/avr.h dbxelf.h avr/avr-stdint.h\"\n \tif test x${with_avrlibc} != xno; then\n \t    tm_file=\"${tm_file} ${cpu_type}/avrlibc.h\"\n \t    tm_defines=\"${tm_defines} WITH_AVRLIBC\""}, {"sha": "b28bec9b86b1a3643e7656905f616e79a8b7b83f", "filename": "gcc/config/avr/avr-arch.h", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -0,0 +1,156 @@\n+/* Definitions of types that are used to store AVR architecture and\n+   device information.\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay (avr@gjlay.de)\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+    \n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* This enum supplies indices into the avr_arch_types[] table below. */\n+\n+enum avr_arch\n+{\n+  ARCH_UNKNOWN,\n+  ARCH_AVR1,\n+  ARCH_AVR2,\n+  ARCH_AVR25,\n+  ARCH_AVR3,\n+  ARCH_AVR31,\n+  ARCH_AVR35,\n+  ARCH_AVR4,\n+  ARCH_AVR5,\n+  ARCH_AVR51,\n+  ARCH_AVR6,\n+  ARCH_AVRXMEGA2,\n+  ARCH_AVRXMEGA4,\n+  ARCH_AVRXMEGA5,\n+  ARCH_AVRXMEGA6,\n+  ARCH_AVRXMEGA7\n+};\n+\n+\n+/* Architecture-specific properties.  */\n+\n+struct base_arch_s\n+{\n+  /* Assembler only.  */\n+  int asm_only;\n+\n+  /* Core have 'MUL*' instructions.  */\n+  int have_mul;\n+\n+  /* Core have 'CALL' and 'JMP' instructions.  */\n+  int have_jmp_call;\n+\n+  /* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n+  int have_movw_lpmx;\n+\n+  /* Core have 'ELPM' instructions.  */\n+  int have_elpm;\n+\n+  /* Core have 'ELPM Rx,Z' instructions.  */\n+  int have_elpmx;\n+\n+  /* Core have 'EICALL' and 'EIJMP' instructions.  */\n+  int have_eijmp_eicall;\n+\n+  /* This is an XMEGA core.  */\n+  int xmega_p;\n+\n+  /* This core has the RAMPD special function register\n+     and thus also the RAMPX, RAMPY and RAMPZ registers.  */\n+  int have_rampd;\n+  \n+  /* Default start of data section address for architecture.  */\n+  int default_data_section_start;\n+\n+  /* Offset between SFR address and RAM address:\n+     SFR-address = RAM-address - sfr_offset  */\n+  int sfr_offset;\n+\n+  /* Architecture id to built-in define __AVR_ARCH__ (NULL -> no macro) */\n+  const char *const macro;\n+  \n+  /* Architecture name.  */\n+  const char *const arch_name;  \n+};\n+\n+\n+/* Device-specific properties.  */\n+\n+struct mcu_type_s\n+{\n+  /* Device name.  */\n+  const char *const name;\n+  \n+  /* Index in avr_arch_types[].  */\n+  enum avr_arch arch; \n+  \n+  /* Must lie outside user's namespace.  NULL == no macro.  */\n+  const char *const macro;\n+  \n+  /* Stack pointer have 8 bits width.  */\n+  int short_sp;\n+  \n+  /* Some AVR devices have a core erratum when skipping a 2-word instruction.\n+     Skip instructions are:  SBRC, SBRS, SBIC, SBIS, CPSE.\n+     Problems will occur with return address is IRQ executes during the\n+     skip sequence.\n+\n+     A support ticket from Atmel returned the following information:\n+\n+         Subject: (ATTicket:644469) On AVR skip-bug core Erratum\n+         From: avr@atmel.com                    Date: 2011-07-27\n+         (Please keep the subject when replying to this mail)\n+\n+         This errata exists only in AT90S8515 and ATmega103 devices.\n+\n+         For information please refer the following respective errata links\n+            http://www.atmel.com/dyn/resources/prod_documents/doc2494.pdf\n+            http://www.atmel.com/dyn/resources/prod_documents/doc1436.pdf  */\n+\n+  /* Core Erratum:  Must not skip 2-word instruction.  */\n+  int errata_skip;\n+  \n+  /* Start of data section.  */\n+  int data_section_start;\n+  \n+  /* Number of 64k segments in the flash.  */\n+  int n_flash;\n+\n+  /* Name of device library.  */\n+  const char *const library_name; \n+};\n+\n+/* Map architecture to its texinfo string.  */\n+\n+struct arch_info_s\n+{\n+  /* Architecture ID.  */\n+  enum avr_arch arch;\n+\n+  /* textinfo source to describe the archtiecture.  */\n+  const char *texinfo;\n+};\n+\n+/* Preprocessor macros to define depending on MCU type.  */\n+\n+extern const char *avr_extra_arch_macro;\n+extern const struct base_arch_s *avr_current_arch;\n+extern const struct mcu_type_s *avr_current_device;\n+extern const struct mcu_type_s avr_mcu_types[];\n+extern const struct base_arch_s avr_arch_types[];"}, {"sha": "3ee1eff49caaa85c8afdb59e3ae9ba0a841bdaee", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -18,10 +18,12 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef IN_GEN_AVR_MMCU_TEXI\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#endif /* IN_GEN_AVR_MMCU_TEXI */\n \n /* List of all known AVR MCU architectures.\n    Order as of enum avr_arch from avr.h.  */"}, {"sha": "8488ecd3e08e3910bebb2d1987b29350124de12b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -21,133 +21,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-struct base_arch_s\n-{\n-  /* Assembler only.  */\n-  int asm_only;\n-\n-  /* Core have 'MUL*' instructions.  */\n-  int have_mul;\n-\n-  /* Core have 'CALL' and 'JMP' instructions.  */\n-  int have_jmp_call;\n-\n-  /* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n-  int have_movw_lpmx;\n-\n-  /* Core have 'ELPM' instructions.  */\n-  int have_elpm;\n-\n-  /* Core have 'ELPM Rx,Z' instructions.  */\n-  int have_elpmx;\n-\n-  /* Core have 'EICALL' and 'EIJMP' instructions.  */\n-  int have_eijmp_eicall;\n-\n-  /* This is an XMEGA core.  */\n-  int xmega_p;\n-\n-  /* This core has the RAMPD special function register\n-     and thus also the RAMPX, RAMPY and RAMPZ registers.  */\n-  int have_rampd;\n-  \n-  /* Default start of data section address for architecture.  */\n-  int default_data_section_start;\n-\n-  /* Offset between SFR address and RAM address:\n-     SFR-address = RAM-address - sfr_offset  */\n-  int sfr_offset;\n-\n-  /* Architecture id to built-in define __AVR_ARCH__ (NULL -> no macro) */\n-  const char *const macro;\n-  \n-  /* Architecture name.  */\n-  const char *const arch_name;  \n-};\n-\n-/* These names are used as the index into the avr_arch_types[] table \n-   above.  */\n-\n-enum avr_arch\n-{\n-  ARCH_UNKNOWN,\n-  ARCH_AVR1,\n-  ARCH_AVR2,\n-  ARCH_AVR25,\n-  ARCH_AVR3,\n-  ARCH_AVR31,\n-  ARCH_AVR35,\n-  ARCH_AVR4,\n-  ARCH_AVR5,\n-  ARCH_AVR51,\n-  ARCH_AVR6,\n-  ARCH_AVRXMEGA2,\n-  ARCH_AVRXMEGA4,\n-  ARCH_AVRXMEGA5,\n-  ARCH_AVRXMEGA6,\n-  ARCH_AVRXMEGA7\n-};\n-\n-struct mcu_type_s {\n-  /* Device name.  */\n-  const char *const name;\n-  \n-  /* Index in avr_arch_types[].  */\n-  enum avr_arch arch; \n-  \n-  /* Must lie outside user's namespace.  NULL == no macro.  */\n-  const char *const macro;\n-  \n-  /* Stack pointer have 8 bits width.  */\n-  int short_sp;\n-  \n-  /* Some AVR devices have a core erratum when skipping a 2-word instruction.\n-     Skip instructions are:  SBRC, SBRS, SBIC, SBIS, CPSE.\n-     Problems will occur with return address is IRQ executes during the\n-     skip sequence.\n-\n-     A support ticket from Atmel returned the following information:\n-\n-         Subject: (ATTicket:644469) On AVR skip-bug core Erratum\n-         From: avr@atmel.com                    Date: 2011-07-27\n-         (Please keep the subject when replying to this mail)\n-\n-         This errata exists only in AT90S8515 and ATmega103 devices.\n-\n-         For information please refer the following respective errata links\n-            http://www.atmel.com/dyn/resources/prod_documents/doc2494.pdf\n-            http://www.atmel.com/dyn/resources/prod_documents/doc1436.pdf  */\n-\n-  /* Core Erratum:  Must not skip 2-word instruction.  */\n-  int errata_skip;\n-  \n-  /* Start of data section.  */\n-  int data_section_start;\n-  \n-  /* Number of 64k segments in the flash.  */\n-  int n_flash;\n-\n-  /* Name of device library.  */\n-  const char *const library_name; \n-};\n-\n-struct arch_info_s {\n-  /* Architecture ID.  */\n-  enum avr_arch arch;\n-\n-  /* textinfo source to describe the archtiecture.  */\n-  const char *texinfo;\n-};\n-\n-/* Preprocessor macros to define depending on MCU type.  */\n-extern const char *avr_extra_arch_macro;\n-extern const struct base_arch_s *avr_current_arch;\n-extern const struct mcu_type_s *avr_current_device;\n-extern const struct mcu_type_s avr_mcu_types[];\n-extern const struct base_arch_s avr_arch_types[];\n-\n typedef struct\n {\n   /* Id of the address space as used in c_register_addr_space */"}, {"sha": "d5567e7099074b001e23ed8511d101851d5cd202", "filename": "gcc/config/avr/gen-avr-mmcu-texi.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -18,18 +18,52 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#define IN_GEN_AVR_MMCU_TEXI\n+\n+#include \"avr-arch.h\"\n #include \"avr-devices.c\"\n \n static const char*\n mcu_name[sizeof avr_mcu_types / sizeof avr_mcu_types[0]];\n \n+static int letter (char c)\n+{\n+  return c >= 'a' && c <= 'z';\n+}\n+\n+static int digit (char c)\n+{\n+  return c >= '0' && c <= '9';\n+}\n+\n static int\n comparator (const void *va, const void *vb)\n {\n-  const char* const *a = (const char* const*) va;\n-  const char* const *b = (const char* const*) vb;\n+  const char *a = *(const char* const*) va;\n+  const char *b = *(const char* const*) vb;\n+\n+  while (*a && *b)\n+    {\n+      /* Make letters smaller than digits so that `atmega16a' follows\n+         `atmega16' without `atmega161' etc. between them.  */\n+      \n+      if (letter (*a) && digit (*b))\n+        return -1;\n+\n+      if (digit (*a) && letter (*b))\n+        return 1;\n+\n+      if (*a != *b)\n+        return *a - *b;\n+      \n+      a++;\n+      b++;\n+    }\n \n-  return strcmp (*a, *b);\n+  return *a - *b;\n } \n \n static void\n@@ -61,6 +95,7 @@ int main (void)\n \n   printf (\"@c This file is generated automatically using\\n\");\n   printf (\"@c gcc/config/avr/gen-avr-mmcu-texi.c from:\\n\");\n+  printf (\"@c    gcc/config/avr/avr-arch.h\\n\");\n   printf (\"@c    gcc/config/avr/avr-devices.c\\n\");\n   printf (\"@c    gcc/config/avr/avr-mcus.def\\n\\n\");\n "}, {"sha": "f4cd26f59cfabc9dc5f812568e2fb9f63b8fa31d", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -44,8 +44,9 @@ $(srcdir)/config/avr/avr-tables.opt: $(srcdir)/config/avr/genopt.sh $(AVR_MCUS)\n \t$(SHELL) $< $(AVR_MCUS) > $@\n \n gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.c \\\n-  $(TM_H) $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< -o $@\n+  $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c \\\n+  $(srcdir)/config/avr/avr-arch.h\n+\t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $< -o $@\n \n # Make sure that the -mmcu= documentation is in sync with the compiler.\n $(srcdir)/doc/avr-mmcu.texi: s-avr-mmcu-texi; @true"}, {"sha": "9306e08002cb234bbd61f6e5eb28d8432cd0694f", "filename": "gcc/doc/avr-mmcu.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fdoc%2Favr-mmcu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3cf7a9538c683494b4965fa3e70ff76b9e314c7/gcc%2Fdoc%2Favr-mmcu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Favr-mmcu.texi?ref=e3cf7a9538c683494b4965fa3e70ff76b9e314c7", "patch": "@@ -4,6 +4,7 @@\n \n @c This file is generated automatically using\n @c gcc/config/avr/gen-avr-mmcu-texi.c from:\n+@c    gcc/config/avr/avr-arch.h\n @c    gcc/config/avr/avr-devices.c\n @c    gcc/config/avr/avr-mcus.def\n \n@@ -13,35 +14,35 @@\n \n @item avr2\n ``Classic'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90c8534}, @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90s8515}, @code{at90s8535}, @code{attiny22}, @code{attiny26}.\n+@*@var{mcu}@tie{}= @code{attiny22}, @code{attiny26}, @code{at90c8534}, @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90s8515}, @code{at90s8535}.\n \n @item avr25\n ``Classic'' devices with up to 8@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{at86rf401}, @code{ata6289}, @code{attiny13}, @code{attiny13a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny24}, @code{attiny24a}, @code{attiny25}, @code{attiny261}, @code{attiny261a}, @code{attiny4313}, @code{attiny43u}, @code{attiny44}, @code{attiny44a}, @code{attiny45}, @code{attiny461}, @code{attiny461a}, @code{attiny48}, @code{attiny84}, @code{attiny84a}, @code{attiny85}, @code{attiny861}, @code{attiny861a}, @code{attiny87}, @code{attiny88}.\n+@*@var{mcu}@tie{}= @code{ata6289}, @code{attiny13}, @code{attiny13a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny24}, @code{attiny24a}, @code{attiny25}, @code{attiny261}, @code{attiny261a}, @code{attiny43u}, @code{attiny4313}, @code{attiny44}, @code{attiny44a}, @code{attiny45}, @code{attiny461}, @code{attiny461a}, @code{attiny48}, @code{attiny84}, @code{attiny84a}, @code{attiny85}, @code{attiny861}, @code{attiny861a}, @code{attiny87}, @code{attiny88}, @code{at86rf401}.\n \n @item avr3\n ``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of  program memory.\n @*@var{mcu}@tie{}= @code{at43usb355}, @code{at76c711}.\n \n @item avr31\n ``Classic'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at43usb320}, @code{atmega103}.\n+@*@var{mcu}@tie{}= @code{atmega103}, @code{at43usb320}.\n \n @item avr35\n ``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{at90usb162}, @code{at90usb82}, @code{atmega16u2}, @code{atmega32u2}, @code{atmega8u2}, @code{attiny167}.\n+@*@var{mcu}@tie{}= @code{atmega16u2}, @code{atmega32u2}, @code{atmega8u2}, @code{attiny167}, @code{at90usb162}, @code{at90usb82}.\n \n @item avr4\n ``Enhanced'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}, @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega8}, @code{atmega8515}, @code{atmega8535}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{atmega8hva}.\n+@*@var{mcu}@tie{}= @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega8}, @code{atmega8hva}, @code{atmega8515}, @code{atmega8535}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}.\n \n @item avr5\n ``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90can32}, @code{at90can64}, @code{at90pwm216}, @code{at90pwm316}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{atmega16}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega16a}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega16m1}, @code{atmega16u4}, @code{atmega32}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega325}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega325a}, @code{atmega325p}, @code{atmega328}, @code{atmega328p}, @code{atmega329}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega32c1}, @code{atmega32hvb}, @code{atmega32m1}, @code{atmega32u4}, @code{atmega32u6}, @code{atmega406}, @code{atmega64}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega645}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega645a}, @code{atmega645p}, @code{atmega649}, @code{atmega6490}, @code{atmega649a}, @code{atmega649p}, @code{atmega64c1}, @code{atmega64hve}, @code{atmega64m1}, @code{m3000}.\n+@*@var{mcu}@tie{}= @code{atmega16}, @code{atmega16a}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega16m1}, @code{atmega16u4}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega32}, @code{atmega32c1}, @code{atmega32hvb}, @code{atmega32m1}, @code{atmega32u4}, @code{atmega32u6}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega325}, @code{atmega325a}, @code{atmega325p}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega328}, @code{atmega328p}, @code{atmega329}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega406}, @code{atmega64}, @code{atmega64c1}, @code{atmega64hve}, @code{atmega64m1}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega645}, @code{atmega645a}, @code{atmega645p}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega649}, @code{atmega649a}, @code{atmega649p}, @code{atmega6490}, @code{at90can32}, @code{at90can64}, @code{at90pwm216}, @code{at90pwm316}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{m3000}.\n \n @item avr51\n ``Enhanced'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}, @code{atmega128}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284p}, @code{atmega128rfa1}.\n+@*@var{mcu}@tie{}= @code{atmega128}, @code{atmega128rfa1}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284p}, @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}.\n \n @item avr6\n ``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB of program memory.\n@@ -69,6 +70,6 @@\n \n @item avr1\n This ISA is implemented by the minimal AVR core and supported for assembler only.\n-@*@var{mcu}@tie{}= @code{at90s1200}, @code{attiny11}, @code{attiny12}, @code{attiny15}, @code{attiny28}.\n+@*@var{mcu}@tie{}= @code{attiny11}, @code{attiny12}, @code{attiny15}, @code{attiny28}, @code{at90s1200}.\n \n @end table"}]}