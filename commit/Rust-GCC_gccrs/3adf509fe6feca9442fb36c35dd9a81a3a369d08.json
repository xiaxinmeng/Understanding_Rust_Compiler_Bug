{"sha": "3adf509fe6feca9442fb36c35dd9a81a3a369d08", "node_id": "C_kwDOANBUbNoAKDNhZGY1MDlmZTZmZWNhOTQ0MmZiMzZjMzVkZDlhODFhM2EzNjlkMDg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-10T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-10T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "d7a0c1e6a7a605754c970d7185dcbf4dcbe3fafc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7a0c1e6a7a605754c970d7185dcbf4dcbe3fafc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3adf509fe6feca9442fb36c35dd9a81a3a369d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adf509fe6feca9442fb36c35dd9a81a3a369d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adf509fe6feca9442fb36c35dd9a81a3a369d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adf509fe6feca9442fb36c35dd9a81a3a369d08/comments", "author": null, "committer": null, "parents": [{"sha": "91b27d984ce17473c80896bd79c63e2c50185d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b27d984ce17473c80896bd79c63e2c50185d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b27d984ce17473c80896bd79c63e2c50185d4e"}], "stats": {"total": 516, "additions": 515, "deletions": 1}, "files": [{"sha": "89ecd2578df3dfeb2845094b9117d4c9f85cc6a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,238 @@\n+2022-02-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104462\n+\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_XSAVE_UNSET):\n+\tAlso include OPTION_MASK_ISA2_AVX2_UNSET.\n+\n+2022-02-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104458\n+\t* config/i386/i386-expand.cc (ix86_split_idivmod):\n+\tForce operands[2] and operands[3] into a register..\n+\n+2022-02-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\tPR target/97040\n+\t* config/v850/v850.md (*v850_fnmasf4): Renamed from fnmasf4.\n+\t(*v850_fnmssf4): Renamed from fnmssf4\n+\n+2022-02-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* godump.cc (go_force_record_alignment): Really name the alignment\n+\tfield \"_\" (complete 2021-12-29 change).\n+\n+2022-02-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtins.def (VREPLACE_UN_UV2DI): Change\n+\tfunction prototype.\n+\t(VREPLACE_UN_UV4SI): Likewise.\n+\t(VREPLACE_UN_V2DF): Likewise.\n+\t(VREPLACE_UN_V2DI): Likewise.\n+\t(VREPLACE_UN_V4SF): Likewise.\n+\t(VREPLACE_UN_V4SI): Likewise.\n+\t* config/rs6000/rs6000-overload.def (VEC_REPLACE_UN): Change all\n+\tfunction prototypes.\n+\t* config/rs6000/vsx.md (vreplace_un_<mode>): Remove define_expand.\n+\t(vreplace_un_<mode>): New define_insn.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (VDCSIF): New mode iterator.\n+\t(VDBL): Handle SF.\n+\t(single_wx, single_type, single_dtype, dblq): New mode attributes.\n+\t* config/aarch64/aarch64-simd.md (load_pair_lanes<mode>): Extend\n+\tfrom VDC to VDCSIF.\n+\t(store_pair_lanes<mode>): Likewise.\n+\t(*aarch64_combine_internal<mode>): Likewise.\n+\t(*aarch64_combine_internal_be<mode>): Likewise.\n+\t(*aarch64_combinez<mode>): Likewise.\n+\t(*aarch64_combinez_be<mode>): Likewise.\n+\t* config/aarch64/aarch64.cc (aarch64_classify_address): Handle\n+\t8-byte modes for ADDR_QUERY_LDP_STP_N.\n+\t(aarch64_print_operand): Likewise for %y.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (@aarch64_split_simd_mov<mode>):\n+\tUse aarch64_combine instead of move_lo/hi_quad.  Tabify.\n+\t(move_lo_quad_<mode>, aarch64_simd_move_hi_quad_<mode>): Delete.\n+\t(aarch64_simd_move_hi_quad_be_<mode>, move_hi_quad_<mode>): Delete.\n+\t(vec_pack_trunc_<mode>): Take general_operand elements and use\n+\taarch64_combine rather than move_lo/hi_quad to combine them.\n+\t(vec_pack_trunc_df): Likewise.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_split_simd_combine):\n+\tDelete.\n+\t* config/aarch64/aarch64-simd.md (@aarch64_combinez<mode>): Rename\n+\tto...\n+\t(*aarch64_combinez<mode>): ...this.\n+\t(@aarch64_combinez_be<mode>): Rename to...\n+\t(*aarch64_combinez_be<mode>): ...this.\n+\t(@aarch64_vec_concat<mode>): New expander.\n+\t(aarch64_combine<mode>): Use it.\n+\t(@aarch64_simd_combine<mode>): Delete.\n+\t* config/aarch64/aarch64.cc (aarch64_split_simd_combine): Delete.\n+\t(aarch64_expand_vector_init): Use aarch64_vec_concat.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/predicates.md (aarch64_reg_or_mem_pair_operand):\n+\tNew predicate.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_combine_internal<mode>)\n+\t(*aarch64_combine_internal_be<mode>): New patterns.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>)\n+\t(move_lo_quad_internal_be_<mode>): Delete.\n+\t(move_lo_quad_<mode>): Use aarch64_combine<Vhalf> instead of the above.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_mergeable_load_pair_p):\n+\tDeclare.\n+\t* config/aarch64/aarch64-simd.md (load_pair_lanes<mode>): Use\n+\taarch64_mergeable_load_pair_p instead of inline check.\n+\t* config/aarch64/aarch64.cc (aarch64_expand_vector_init): Likewise.\n+\t(aarch64_check_consecutive_mems): Allow the reversed parameter\n+\tto be null.\n+\t(aarch64_mergeable_load_pair_p): New function.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (vec_set<mode>): Allow the\n+\telement to be an aarch64_simd_nonimmediate_operand.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_set<mode>): Use\n+\taarch64_simd_nonimmediate_operand instead of\n+\taarch64_simd_general_operand.\n+\t(@aarch64_combinez<mode>): Use nonimmediate_operand instead of\n+\tgeneral_operand.\n+\t(@aarch64_combinez_be<mode>): Likewise.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104464\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Postpone\n+\tthrowing check to after unproblematic replacement.\n+\n+2022-02-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/104420\n+\t* match.pd (mult @0 real_zerop): Tweak conditions for constant\n+\tfolding X*0.0 (or X*-0.0) to HONOR_SIGNED_ZEROS when appropriate.\n+\n+2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/104407\n+\t* dwarf2out.cc (mangle_referenced_decls): New function.\n+\t(tree_add_const_value_attribute): Don't call rtl_for_decl_init if\n+\tearly_dwarf.  Instead walk the initializer and try to mangle vars or\n+\tfunctions referenced from it.\n+\n+2022-02-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104288\n+\t* gimple-range-cache.cc (non_null_ref::set_nonnull): New.\n+\t(non_null_ref::adjust_range): Move to header.\n+\t(ranger_cache::range_of_def): Don't check non-null.\n+\t(ranger_cache::entry_range): Don't check non-null.\n+\t(ranger_cache::range_on_edge): Check for nonnull on normal edges.\n+\t(ranger_cache::update_to_nonnull): New.\n+\t(non_null_loadstore): New.\n+\t(ranger_cache::block_apply_nonnull): New.\n+\t* gimple-range-cache.h (class non_null_ref): Update prototypes.\n+\t(non_null_ref::adjust_range): Move to here and inline.\n+\t(class ranger_cache): Update prototypes.\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block): Do\n+\tnot search dominators.\n+\t(path_range_query::adjust_for_non_null_uses): Ditto.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Check on-entry for\n+\tdef overrides.  Do not check nonnull.\n+\t(gimple_ranger::range_on_entry): Check dominators for nonnull.\n+\t(gimple_ranger::range_on_edge): Check for nonnull on normal edges..\n+\t(gimple_ranger::register_side_effects): New.\n+\t* gimple-range.h (gimple_ranger::register_side_effects): New.\n+\t* tree-vrp.cc (rvrp_folder::fold_stmt): Call register_side_effects.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104445\n+\tPR tree-optimization/102832\n+\t* optabs-query.h (can_vec_extract): New.\n+\t* optabs-query.cc (can_vec_extract): Likewise.\n+\t* tree-vect-loop.cc (vect_find_reusable_accumulator): Check\n+\twe can extract a hi/lo part from the larger vector, rework\n+\tcheck iteration from larger to smaller sizes.\n+\n+2022-02-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/35513\n+\tPR target/100593\n+\t* config/i386/gnu-property.cc: Include \"i386-protos.h\".\n+\t(file_end_indicate_exec_stack_and_gnu_property): Generate\n+\ta GNU_PROPERTY_1_NEEDED note for -mno-direct-extern-access or\n+\tnodirect_extern_access attribute.\n+\t* config/i386/i386-options.cc\n+\t(handle_nodirect_extern_access_attribute): New function.\n+\t(ix86_attribute_table): Add nodirect_extern_access attribute.\n+\t* config/i386/i386-protos.h (ix86_force_load_from_GOT_p): Add a\n+\tbool argument.\n+\t(ix86_has_no_direct_extern_access): New.\n+\t* config/i386/i386.cc (ix86_has_no_direct_extern_access): New.\n+\t(ix86_force_load_from_GOT_p): Add a bool argument to indicate\n+\tcall operand.  Force non-call load from GOT for\n+\t-mno-direct-extern-access or nodirect_extern_access attribute.\n+\t(legitimate_pic_address_disp_p): Avoid copy relocation in PIE\n+\tfor -mno-direct-extern-access or nodirect_extern_access attribute.\n+\t(ix86_print_operand): Pass true to ix86_force_load_from_GOT_p\n+\tfor call operand.\n+\t(asm_preferred_eh_data_format): Use PC-relative format for\n+\t-mno-direct-extern-access to avoid copy relocation.  Check\n+\tptr_mode instead of TARGET_64BIT when selecting DW_EH_PE_sdata4.\n+\t(ix86_binds_local_p): Set ix86_has_no_direct_extern_access to\n+\ttrue for -mno-direct-extern-access or nodirect_extern_access\n+\tattribute.  Don't treat protected data as extern and avoid copy\n+\trelocation on common symbol with -mno-direct-extern-access or\n+\tnodirect_extern_access attribute.\n+\t(ix86_reloc_rw_mask): New to avoid copy relocation for\n+\t-mno-direct-extern-access.\n+\t(TARGET_ASM_RELOC_RW_MASK): New.\n+\t* config/i386/i386.opt: Add -mdirect-extern-access.\n+\t* doc/extend.texi: Document nodirect_extern_access attribute.\n+\t* doc/invoke.texi: Document -m[no-]direct-extern-access.\n+\n+2022-02-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104441\n+\t* config/i386/i386.cc (ix86_avx_u128_mode_source): New function.\n+\t(ix86_avx_u128_mode_needed): Return AVX_U128_ANY for debug INSN.\n+\tCall ix86_avx_u128_mode_source to check mode for each component\n+\tof source operand.\n+\n+2022-02-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104451\n+\t* config/i386/sse.md (<insn><mode>3): lowpart_subreg\n+\toperands[2] from SImode to QImode.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104450\n+\t* gimple-isel.cc: Pass cfun around.\n+\t(+gimple_expand_vec_cond_expr): Do not combine a throwing\n+\tcomparison with the select.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/104453\n+\t* config/i386/i386.cc (ix86_gimple_fold_builtin): Guard shift\n+\tfolding for NULL LHS.\n+\n 2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n \n \tPR rtl-optimization/104198"}, {"sha": "65c020f9c5e4676b8b8e9e789c0ea99aa186580d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1 +1 @@\n-20220209\n+20220210"}, {"sha": "0b2150d50696058be8a38812f5980c5561abbbfa", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,11 @@\n+2022-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104452\n+\t* region-model.cc (selftest::test_bit_range_regions): New.\n+\t(selftest::analyzer_region_model_cc_tests): Call it.\n+\t* region.h (bit_range_region::key_t::hash): Fix hashing of m_bits\n+\tto avoid using uninitialized data.\n+\n 2022-02-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104417"}, {"sha": "f0c02fe153c5d2f9bfbb079b0cdb0d1d4fd4c5ea", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,8 @@\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Update values\n+\tof __cpp_constexpr and __cpp_concepts for C++20.\n+\n 2022-01-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR preprocessor/104030"}, {"sha": "faf7a19dec5ffdc6f72173dfb4e8652fdc10284b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,12 @@\n+2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/104427\n+\t* c-parser.cc (c_parser_postfix_expression)\n+\t<case RID_BUILTIN_ASSOC_BARRIER>: Use parser_build_unary_op\n+\tinstead of build1_loc to build PAREN_EXPR.\n+\t* c-typeck.cc (build_unary_op): Handle PAREN_EXPR.\n+\t* c-fold.cc (c_fully_fold_internal): Likewise.\n+\n 2022-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* Make-lang.in: Rename .c names to .cc."}, {"sha": "e34eb57ead59c0499a7c169e58fb62da8cf4afab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,32 @@\n+2022-02-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104432\n+\t* call.cc (build_new_method_call): When a non-dependent call\n+\tresolves to a specialization of a member template, always build\n+\tthe pruned overload set using the member template, not the\n+\tspecialization.\n+\t* pt.cc (filter_memfn_lookup): New parameter newtype.  Simplify\n+\tand correct how members from the new lookup set are matched to\n+\tthose from the old one.\n+\t(tsubst_baselink): Pass binfo_type as newtype to\n+\tfilter_memfn_lookup.\n+\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103752\n+\t* module.cc (trees_out::core_vals): Stream explicit specifier.\n+\t(trees_in::core_vals): Likewise.\n+\t* pt.cc (store_explicit_specifier): No longer static.\n+\t(tsubst_function_decl): Clear DECL_HAS_DEPENDENT_EXPLICIT_SPEC_P.\n+\t* cp-tree.h (lookup_explicit_specifier): Declare.\n+\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96876\n+\t* typeck2.cc (split_nonconstant_init_1): Push cleanups for\n+\tpreceding members with constant initialization.\n+\t(maybe_push_temp_cleanup): Do nothing if -fno-exceptions.\n+\n 2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/104379"}, {"sha": "7c8c265a2f3fa8efa9c581847946dd1a9e4a6319", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,10 @@\n+2022-02-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/66193\n+\t* arith.cc (reduce_binary_ac): When reducing binary expressions,\n+\ttry simplification.  Handle case of empty constructor.\n+\t(reduce_binary_ca): Likewise.\n+\n 2022-02-03  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104311"}, {"sha": "dd94ab35fbe820725b6e5a835fcc3061f84552cf", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,14 @@\n+2022-02-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* gospec.cc (RTLIB, RT_LIBRARY): Define.\n+\t(lang_specific_driver): Add -lrt if linking statically on\n+\tGNU/Linux.\n+\n+2022-02-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define builtins\n+\t__atomic_load_1 and __atomic_store_1.\n+\n 2022-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* config-lang.in: Rename .c names to .cc."}, {"sha": "6979fdd35aed05bd41200dae44767ea383a9b0b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,200 @@\n+2022-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/uninit-1.c: Add test coverage for shifts,\n+\tcomparisons, +, -, *, /, and __builtin_strlen.\n+\t* gcc.dg/analyzer/uninit-CWE-457-examples.c: New test.\n+\n+2022-02-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/66193\n+\t* gfortran.dg/array_constructor_55.f90: New test.\n+\n+2022-02-09  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/Wstringop-overflow-69.c: Add -Wno-psabi.\n+\t* gcc.dg/loop-unswitch-6.c: Omit -fcompare-debug on AIX.\n+\n+2022-02-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104441\n+\t* gcc.target/i386/pr104441-1a.c: Compile with -march=x86-64.\n+\t* gcc.target/i386/pr104441-1b.c: Likewise.\n+\n+2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/104427\n+\t* gcc.dg/pr104427.c: New test.\n+\n+2022-02-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104462\n+\t* gcc.target/i386/pr104462.c: New test.\n+\n+2022-02-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104458\n+\t* gcc.target/i386/pr104458.c: New test.\n+\n+2022-02-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* gcc.misc-tests/godump-1.c: Adjust for alignment field rename.\n+\n+2022-02-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-replace-word-runnable.c: Handle expected\n+\tprototypes for each call to vec_replace_unaligned.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vec-init-13.c: New test.\n+\t* gcc.target/aarch64/vec-init-14.c: Likewise.\n+\t* gcc.target/aarch64/vec-init-15.c: Likewise.\n+\t* gcc.target/aarch64/vec-init-16.c: Likewise.\n+\t* gcc.target/aarch64/vec-init-17.c: Likewise.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vec-init-12.c: New test.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vec-init-9.c: New test.\n+\t* gcc.target/aarch64/vec-init-10.c: Likewise.\n+\t* gcc.target/aarch64/vec-init-11.c: Likewise.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vec-init-8.c: New test.\n+\n+2022-02-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vec-init-6.c: New file.\n+\t* gcc.target/aarch64/vec-init-7.c: New file.\n+\n+2022-02-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104432\n+\t* g++.dg/template/non-dependent19.C: New test.\n+\t* g++.dg/template/non-dependent19a.C: New test.\n+\t* g++.dg/template/non-dependent20.C: New test.\n+\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103752\n+\t* g++.dg/modules/explicit-bool-1_b.C: New test.\n+\t* g++.dg/modules/explicit-bool-1_a.H: New test.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104464\n+\t* gcc.dg/pr104464.c: New testcase.\n+\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/feat-cxx2b.C: Adjust.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Adjust.\n+\n+2022-02-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/104420\n+\t* gcc.dg/pr104420-1.c: New test case.\n+\t* gcc.dg/pr104420-2.c: New test case.\n+\t* gcc.dg/pr104420-3.c: New test case.\n+\t* gcc.dg/pr104420-4.c: New test case.\n+\t* gcc.dg/pr96392.c: Remove incorrect test.\n+\n+2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/104407\n+\t* g++.dg/debug/dwarf2/pr104407.C: New test.\n+\n+2022-02-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104288\n+\t* gcc.dg/pr104288.c: New.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104445\n+\tPR tree-optimization/102832\n+\t* gcc.dg/vect/pr104445.c: New testcase.\n+\t* gcc.dg/vect/pr102832.c: New file.\n+\n+2022-02-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/35513\n+\tPR target/100593\n+\t* g++.target/i386/pr35513-1.C: New file.\n+\t* g++.target/i386/pr35513-2.C: Likewise.\n+\t* gcc.target/i386/pr35513-1a.c: Likewise.\n+\t* gcc.target/i386/pr35513-1b.c: Likewise.\n+\t* gcc.target/i386/pr35513-2a.c: Likewise.\n+\t* gcc.target/i386/pr35513-2b.c: Likewise.\n+\t* gcc.target/i386/pr35513-3a.c: Likewise.\n+\t* gcc.target/i386/pr35513-3b.c: Likewise.\n+\t* gcc.target/i386/pr35513-4a.c: Likewise.\n+\t* gcc.target/i386/pr35513-4b.c: Likewise.\n+\t* gcc.target/i386/pr35513-5a.c: Likewise.\n+\t* gcc.target/i386/pr35513-5b.c: Likewise.\n+\t* gcc.target/i386/pr35513-6a.c: Likewise.\n+\t* gcc.target/i386/pr35513-6b.c: Likewise.\n+\t* gcc.target/i386/pr35513-7a.c: Likewise.\n+\t* gcc.target/i386/pr35513-7b.c: Likewise.\n+\t* gcc.target/i386/pr35513-8.c: Likewise.\n+\t* gcc.target/i386/pr35513-9a.c: Likewise.\n+\t* gcc.target/i386/pr35513-9b.c: Likewise.\n+\t* gcc.target/i386/pr35513-10a.c: Likewise.\n+\t* gcc.target/i386/pr35513-10b.c: Likewise.\n+\t* gcc.target/i386/pr35513-11a.c: Likewise.\n+\t* gcc.target/i386/pr35513-11b.c: Likewise.\n+\t* gcc.target/i386/pr35513-12a.c: Likewise.\n+\t* gcc.target/i386/pr35513-12b.c: Likewise.\n+\n+2022-02-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104441\n+\t* gcc.target/i386/pr104441-1a.c: New test.\n+\t* gcc.target/i386/pr104441-1b.c: Likewise.\n+\n+2022-02-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104451\n+\t* gcc.target/i386/pr104451.c: New test.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104450\n+\t* g++.dg/torture/pr104450.C: New testcase.\n+\n+2022-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/104453\n+\t* gcc.target/i386/pr104453.c: New testcase.\n+\n+2022-02-09  Joel Teichroeb  <joel@teichroeb.net>\n+\n+\tPR analyzer/101081\n+\t* gcc.dg/analyzer/analyzer-verbosity-2a.c: Replace #include of\n+\tstdio.h with declarations needed by the test.\n+\t* gcc.dg/analyzer/analyzer-verbosity-3a.c: Likewise.\n+\t* gcc.dg/analyzer/edges-1.c: Likewise.\n+\t* gcc.dg/analyzer/file-1.c: Likewise.\n+\t* gcc.dg/analyzer/file-2.c: Likewise.\n+\t* gcc.dg/analyzer/file-paths-1.c: Likewise.\n+\t* gcc.dg/analyzer/file-pr58237.c: Likewise.\n+\t* gcc.dg/analyzer/pr99716-1.c: Likewise.\n+\n+2022-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104452\n+\t* gcc.dg/analyzer/pr104452.c: New test.\n+\n+2022-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96876\n+\t* g++.dg/cpp1z/aggr-base11.C: New test.\n+\t* g++.dg/eh/aggregate2.C: New test.\n+\n 2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n \n \tPR rtl-optimization/104198"}, {"sha": "c3ea31f9dc09f0d21fd680c4f5814c7d05e6a293", "filename": "gotools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,9 @@\n+2022-02-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* configure.ac (RT_LIBS): Define.\n+\t* Makefile.am (check-runtime): Set GOLIBS to $(RT_LIBS).\n+\t* configure, Makefile.in: Regenerate.\n+\n 2021-09-21  Ian Lance Taylor  <iant@golang.org>\n \n \t* Makefile.am (check-runtime): Add goroot.go to --extrafiles."}, {"sha": "7c2902ca4584685608e491270ef9475295db921e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf509fe6feca9442fb36c35dd9a81a3a369d08/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf509fe6feca9442fb36c35dd9a81a3a369d08/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3adf509fe6feca9442fb36c35dd9a81a3a369d08", "patch": "@@ -1,3 +1,10 @@\n+2022-02-09  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\tPR libstdc++/104442\n+\t* include/bits/atomic_wait.h (__waiter::_M_do_wait_v): Move spin\n+\t loop inside do loop so that threads failing the wait, reload\n+\t _M_ver.\n+\n 2022-02-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/fs_dir.cc (_Dir(DIR*, const path&)): Change first"}]}