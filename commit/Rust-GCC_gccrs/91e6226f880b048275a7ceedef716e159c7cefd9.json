{"sha": "91e6226f880b048275a7ceedef716e159c7cefd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlNjIyNmY4ODBiMDQ4Mjc1YTdjZWVkZWY3MTZlMTU5YzdjZWZkOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-07T16:13:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-17T14:27:51Z"}, "message": "libstdc++: Remove inheritance from elements in std::tuple\n\nThis fixes a number of std::tuple bugs by no longer making use of the\nempty base-class optimization. By using the C++20 [[no_unique_address]]\nattribute we can always store the element as a data member, while still\ncompressing the layout of tuples containing empty types.\n\nSince we no longer use inheritance we could also apply the compression\noptimization for final types and for tuples of tuples, but doing so\nwould be an ABI break.\n\nUsing [[no_unique_address]] more liberally for the unstable std::__8\nconfiguration is left for a later date. There may be reasons not to\napply the attribute unconditionally, e.g. see the discussion about\nguaranteed elision in PR 94062.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/55713\n\tPR libstdc++/71096\n\tPR libstdc++/93147\n\t* include/std/tuple [__has_cpp_attribute(no_unique_address)]\n\t(_Head_base<Idx, Head, true>): New definition of the partial\n\tspecialization, using [[no_unique_address]] instead of\n\tinheritance.\n\t* testsuite/libstdc++-prettyprinters/48362.cc: Adjust expected\n\toutput.\n\t* testsuite/20_util/tuple/comparison_operators/93147.cc: New test.\n\t* testsuite/20_util/tuple/creation_functions/55713.cc: New test.\n\t* testsuite/20_util/tuple/element_access/71096.cc: New test.", "tree": {"sha": "d5ffabee1f664bdd289651273cb5c7cfac81435d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ffabee1f664bdd289651273cb5c7cfac81435d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e6226f880b048275a7ceedef716e159c7cefd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e6226f880b048275a7ceedef716e159c7cefd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e6226f880b048275a7ceedef716e159c7cefd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e6226f880b048275a7ceedef716e159c7cefd9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "929c4051afa22859831432d8feccfd1148ce7664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929c4051afa22859831432d8feccfd1148ce7664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929c4051afa22859831432d8feccfd1148ce7664"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "d4a35f0fe7fb002398c7b13a8a51504530bff029", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=91e6226f880b048275a7ceedef716e159c7cefd9", "patch": "@@ -73,6 +73,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   bool = __empty_not_final<_Head>::value>\n     struct _Head_base;\n \n+#if __has_cpp_attribute(no_unique_address)\n+  template<size_t _Idx, typename _Head>\n+    struct _Head_base<_Idx, _Head, true>\n+    {\n+      constexpr _Head_base()\n+      : _M_head_impl() { }\n+\n+      constexpr _Head_base(const _Head& __h)\n+      : _M_head_impl(__h) { }\n+\n+      constexpr _Head_base(const _Head_base&) = default;\n+      constexpr _Head_base(_Head_base&&) = default;\n+\n+      template<typename _UHead>\n+\tconstexpr _Head_base(_UHead&& __h)\n+\t: _M_head_impl(std::forward<_UHead>(__h)) { }\n+\n+      _GLIBCXX20_CONSTEXPR\n+      _Head_base(allocator_arg_t, __uses_alloc0)\n+      : _M_head_impl() { }\n+\n+      template<typename _Alloc>\n+\t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n+\t: _M_head_impl(allocator_arg, *__a._M_a) { }\n+\n+      template<typename _Alloc>\n+\t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n+\t: _M_head_impl(*__a._M_a) { }\n+\n+      template<typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n+\t_Head_base(__uses_alloc0, _UHead&& __uhead)\n+\t: _M_head_impl(std::forward<_UHead>(__uhead)) { }\n+\n+      template<typename _Alloc, typename _UHead>\n+\t_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\n+\t: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))\n+\t{ }\n+\n+      template<typename _Alloc, typename _UHead>\n+\t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n+\t: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\n+\n+      static constexpr _Head&\n+      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }\n+\n+      static constexpr const _Head&\n+      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }\n+\n+      [[no_unique_address]] _Head _M_head_impl;\n+    };\n+#else\n   template<size_t _Idx, typename _Head>\n     struct _Head_base<_Idx, _Head, true>\n     : public _Head\n@@ -119,6 +171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr const _Head&\n       _M_head(const _Head_base& __b) noexcept { return __b; }\n     };\n+#endif\n \n   template<size_t _Idx, typename _Head>\n     struct _Head_base<_Idx, _Head, false>"}, {"sha": "b6c61d5717b3a7ef823740f08f122b1d99ef827e", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/93147.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F93147.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F93147.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F93147.cc?ref=91e6226f880b048275a7ceedef716e159c7cefd9", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+\n+#include <tuple>\n+\n+struct A {\n+    bool operator == (A) const { return true; }\n+};\n+\n+struct B {\n+    bool operator == (B) const { return true; }\n+};\n+\n+using Tuple = std::tuple<A, B>;\n+\n+bool example(Tuple a, Tuple b)\n+{\n+    return a == b; // PR libstdc++/93147\n+}"}, {"sha": "05a90198fde697a0f290ec8b4c88d8599e704280", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/55713.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F55713.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F55713.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F55713.cc?ref=91e6226f880b048275a7ceedef716e159c7cefd9", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <tuple>\n+\n+struct A { };\n+\n+void f(A);\n+\n+struct B { B(std::tuple<A>); };\n+\n+void f(B);\n+\n+void test01()\n+{\n+  f(std::make_tuple(A())); // PR libstdc++/55713\n+}"}, {"sha": "6fa882f25d5772b95f964067fa9d3d28dc6a50c0", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/71096.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F71096.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F71096.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F71096.cc?ref=91e6226f880b048275a7ceedef716e159c7cefd9", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <tuple>\n+\n+struct A {};\n+struct B : std::tuple<A> {};\n+\n+void\n+test01()\n+{\n+  std::tuple<B> t;\n+  std::get<0>(t); // PR libstdc++/71096\n+}"}, {"sha": "f8ff6fba5a76653111af3c7b4bca1ac903743515", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/48362.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e6226f880b048275a7ceedef716e159c7cefd9/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc?ref=91e6226f880b048275a7ceedef716e159c7cefd9", "patch": "@@ -29,7 +29,7 @@ main()\n // { dg-final { note-test t1 {empty std::tuple} } }\n \n   std::tuple<std::string, int, std::tuple<>> t2{ \"Johnny\", 5, {} };\n-// { dg-final { regexp-test t2 {std::tuple containing = {\\[1\\] = \"Johnny\", \\[2\\] = 5, \\[3\\] = {<std::(__8::)?tuple<>> = empty std::tuple, <No data fields>}}} } }\n+// { dg-final { regexp-test t2 {std::tuple containing = {\\[1\\] = \"Johnny\", \\[2\\] = 5, \\[3\\] = empty std::tuple}} } }\n \n   std::cout << \"\\n\";\n   return 0; // Mark SPOT"}]}