{"sha": "5976e643ed10a021367870663b1105aaf064393a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3NmU2NDNlZDEwYTAyMTM2Nzg3MDY2M2IxMTA1YWFmMDY0MzkzYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-10-30T00:56:59Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-10-30T00:56:59Z"}, "message": "re PR rtl-optimization/17581 (Long long arithmetic fails inside a switch/case statement when compiled with -O2)\n\n\n\tPR rtl-optimization/17581\n\t* cselib.c (cselib_process_insn): The last instruction of a libcall\n\tblock, with the REG_RETVAL note, should be considered in the libcall.\n\t* gcse.c (do_local_cprop): Allow constants to be propagated outside\n\tof libcall blocks.\n\t(adjust_libcall_notes): Use simplify_replace_rtx instead of\n\treplace_rtx to avoid creating invalid RTL in REG_RETVAL notes.\n\n\t* gcc.dg/pr17581-1.c: New test case.\n\nFrom-SVN: r89873", "tree": {"sha": "3e72bc5f754672ecac841d4642054de785714fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e72bc5f754672ecac841d4642054de785714fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5976e643ed10a021367870663b1105aaf064393a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5976e643ed10a021367870663b1105aaf064393a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5976e643ed10a021367870663b1105aaf064393a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5976e643ed10a021367870663b1105aaf064393a/comments", "author": null, "committer": null, "parents": [{"sha": "8b5a12daa03d076b8b57dc565333eecb8d1880d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5a12daa03d076b8b57dc565333eecb8d1880d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5a12daa03d076b8b57dc565333eecb8d1880d0"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "6ac0249c5561fbb6bc366ba64acc70a5be1fec01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5976e643ed10a021367870663b1105aaf064393a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5976e643ed10a021367870663b1105aaf064393a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5976e643ed10a021367870663b1105aaf064393a", "patch": "@@ -1,3 +1,13 @@\n+2004-10-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/17581\n+\t* cselib.c (cselib_process_insn): The last instruction of a libcall\n+\tblock, with the REG_RETVAL note, should be considered in the libcall.\n+\t* gcse.c (do_local_cprop): Allow constants to be propagated outside\n+\tof libcall blocks.\n+\t(adjust_libcall_notes): Use simplify_replace_rtx instead of\n+\treplace_rtx to avoid creating invalid RTL in REG_RETVAL notes.\n+\n 2004-10-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (create_phi_node): Don't zero PHI_REWRITTEN."}, {"sha": "eb0b52a2edcdd84119132c648a099e676743a0ba", "filename": "gcc/cselib.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5976e643ed10a021367870663b1105aaf064393a/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5976e643ed10a021367870663b1105aaf064393a/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=5976e643ed10a021367870663b1105aaf064393a", "patch": "@@ -1346,8 +1346,6 @@ cselib_process_insn (rtx insn)\n \n   if (find_reg_note (insn, REG_LIBCALL, NULL))\n     cselib_current_insn_in_libcall = true;\n-  if (find_reg_note (insn, REG_RETVAL, NULL))\n-    cselib_current_insn_in_libcall = false;\n   cselib_current_insn = insn;\n \n   /* Forget everything at a CODE_LABEL, a volatile asm, or a setjmp.  */\n@@ -1358,12 +1356,16 @@ cselib_process_insn (rtx insn)\n \t  && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n \t  && MEM_VOLATILE_P (PATTERN (insn))))\n     {\n+      if (find_reg_note (insn, REG_RETVAL, NULL))\n+        cselib_current_insn_in_libcall = false;\n       clear_table ();\n       return;\n     }\n \n   if (! INSN_P (insn))\n     {\n+      if (find_reg_note (insn, REG_RETVAL, NULL))\n+        cselib_current_insn_in_libcall = false;\n       cselib_current_insn = 0;\n       return;\n     }\n@@ -1399,6 +1401,8 @@ cselib_process_insn (rtx insn)\n       if (GET_CODE (XEXP (x, 0)) == CLOBBER)\n \tcselib_invalidate_rtx (XEXP (XEXP (x, 0), 0));\n \n+  if (find_reg_note (insn, REG_RETVAL, NULL))\n+    cselib_current_insn_in_libcall = false;\n   cselib_current_insn = 0;\n \n   if (n_useless_values > MAX_USELESS_VALUES)"}, {"sha": "f277801bcedcb7624448c3484808a052ea0f0480", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5976e643ed10a021367870663b1105aaf064393a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5976e643ed10a021367870663b1105aaf064393a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=5976e643ed10a021367870663b1105aaf064393a", "patch": "@@ -3134,7 +3134,8 @@ do_local_cprop (rtx x, rtx insn, int alter_jumps, rtx *libcall_sp)\n \t  rtx this_rtx = l->loc;\n \t  rtx note;\n \n-\t  if (l->in_libcall)\n+\t  /* Don't CSE non-constant values out of libcall blocks.  */\n+\t  if (l->in_libcall && ! CONSTANT_P (this_rtx))\n \t    continue;\n \n \t  if (gcse_constant_p (this_rtx))\n@@ -3222,7 +3223,7 @@ adjust_libcall_notes (rtx oldreg, rtx newval, rtx insn, rtx *libcall_sp)\n \t      return true;\n \t    }\n \t}\n-      XEXP (note, 0) = replace_rtx (XEXP (note, 0), oldreg, newval);\n+      XEXP (note, 0) = simplify_replace_rtx (XEXP (note, 0), oldreg, newval);\n       insn = end;\n     }\n   return true;"}, {"sha": "eebb2e8a6fb16b5a9cf3cbd9453ec97e794c9724", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5976e643ed10a021367870663b1105aaf064393a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5976e643ed10a021367870663b1105aaf064393a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5976e643ed10a021367870663b1105aaf064393a", "patch": "@@ -1,3 +1,8 @@\n+2004-10-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/17581\n+\t* gcc.dg/pr17581-1.c: New test case.\n+\n 2004-10-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/conversion/dr195.C: Adjust expected errors for DR195 not"}, {"sha": "757661e76835106d6ba891d812c2e4763ad649f6", "filename": "gcc/testsuite/gcc.dg/pr17581-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5976e643ed10a021367870663b1105aaf064393a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17581-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5976e643ed10a021367870663b1105aaf064393a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17581-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17581-1.c?ref=5976e643ed10a021367870663b1105aaf064393a", "patch": "@@ -0,0 +1,28 @@\n+/* PR rtl-optimization/17581 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x)\n+{\n+  unsigned long long tmp = 0;\n+\n+  switch(x) {\n+    case 21:\n+      tmp |= 1;\n+      tmp |= 2;\n+      tmp |= 8;\n+      break;\n+    default:\n+      break;\n+  }\n+  \n+  return (int)tmp;\n+}\n+\n+int main()\n+{\n+  if (foo(21) != 11)\n+    abort ();\n+  return 0;\n+}\n+"}]}