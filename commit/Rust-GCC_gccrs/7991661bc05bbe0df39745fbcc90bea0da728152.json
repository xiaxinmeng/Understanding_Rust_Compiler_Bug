{"sha": "7991661bc05bbe0df39745fbcc90bea0da728152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5MTY2MWJjMDViYmUwZGYzOTc0NWZiY2M5MGJlYTBkYTcyODE1Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-06-28T06:06:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-06-28T06:06:28Z"}, "message": "gfortran.h: Define HAVE_mpc_pow.\n\ngcc/fortran:\n\n\t* gfortran.h: Define HAVE_mpc_pow.\n\t* arith.c (complex_reciprocal, complex_pow): If HAVE_mpc_pow,\n\tdon't define these functions.\n\t(arith_power): If HAVE_mpc_pow, use mpc_pow.\n\ngcc/testsuite:\n\t* gfortran.dg/integer_exponentiation_4.f90: Temporarily\n\tcomment out some values and add some cases.\n\nFrom-SVN: r149023", "tree": {"sha": "20925d63681f5dfdb8f47f1109e25f886c8bdf7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20925d63681f5dfdb8f47f1109e25f886c8bdf7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7991661bc05bbe0df39745fbcc90bea0da728152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7991661bc05bbe0df39745fbcc90bea0da728152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7991661bc05bbe0df39745fbcc90bea0da728152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7991661bc05bbe0df39745fbcc90bea0da728152/comments", "author": null, "committer": null, "parents": [{"sha": "6f8b0efc7a8a61e68ff25ae0e817d7b50ebdeef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8b0efc7a8a61e68ff25ae0e817d7b50ebdeef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8b0efc7a8a61e68ff25ae0e817d7b50ebdeef3"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "61196df9ba84efb209753ab71af6771caf298e94", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7991661bc05bbe0df39745fbcc90bea0da728152", "patch": "@@ -1,3 +1,10 @@\n+2009-06-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.h: Define HAVE_mpc_pow.\n+\t* arith.c (complex_reciprocal, complex_pow): If HAVE_mpc_pow,\n+\tdon't define these functions.\n+\t(arith_power): If HAVE_mpc_pow, use mpc_pow.\n+\n 2009-06-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39997"}, {"sha": "dddf7e003ced5c3cd547b6e67122dd57d7f4acf8", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7991661bc05bbe0df39745fbcc90bea0da728152", "patch": "@@ -896,6 +896,7 @@ gfc_arith_divide (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \n /* Compute the reciprocal of a complex number (guaranteed nonzero).  */\n \n+#if ! defined(HAVE_mpc_pow)\n static void\n complex_reciprocal (gfc_expr *op)\n {\n@@ -922,6 +923,7 @@ complex_reciprocal (gfc_expr *op)\n   }\n #endif\n }\n+#endif /* ! HAVE_mpc_pow */\n \n \n /* Raise a complex number to positive power (power > 0).\n@@ -932,6 +934,7 @@ complex_reciprocal (gfc_expr *op)\n    \"Seminumerical Algorithms\", Vol. 2, \"The Art of Computer Programming\",\n    3rd Edition, 1998.  */\n \n+#if ! defined(HAVE_mpc_pow)\n static void\n complex_pow (gfc_expr *result, gfc_expr *base, mpz_t power)\n {\n@@ -988,6 +991,7 @@ complex_pow (gfc_expr *result, gfc_expr *base, mpz_t power)\n \n   mpfr_clears (x_r, x_i, tmp, re, im, NULL);\n }\n+#endif /* ! HAVE_mpc_pow */\n \n \n /* Raise a number to a power.  */\n@@ -1107,6 +1111,15 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \n \t    case BT_COMPLEX:\n \t      {\n+#ifdef HAVE_mpc_pow\n+\t\tmpc_t apower;\n+\t\tgfc_set_model (mpc_realref (op1->value.complex));\n+\t\tmpc_init2 (apower, mpfr_get_default_prec());\n+\t\tmpc_set_z (apower, op2->value.integer, GFC_MPC_RND_MODE);\n+\t\tmpc_pow(result->value.complex, op1->value.complex, apower,\n+\t\t\tGFC_MPC_RND_MODE);\n+\t\tmpc_clear (apower);\n+#else\n \t\tmpz_t apower;\n \n \t\t/* Compute op1**abs(op2)  */\n@@ -1118,6 +1131,7 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t\t/* If (op2 < 0), compute the inverse.  */\n \t\tif (power_sign < 0)\n \t\t  complex_reciprocal (result);\n+#endif /* HAVE_mpc_pow */\n \t      }\n \t      break;\n \n@@ -1159,6 +1173,10 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t      return ARITH_PROHIBIT;\n \t  }\n \n+#ifdef HAVE_mpc_pow\n+\tmpc_pow (result->value.complex, op1->value.complex,\n+\t\t op2->value.complex, GFC_MPC_RND_MODE);\n+#else\n \t{\n \tmpfr_t x, y, r, t;\n \n@@ -1211,6 +1229,7 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \tmpfr_mul (mpc_imagref (result->value.complex), x, y, GFC_RND_MODE);\n \tmpfr_clears (r, t, x, y, NULL);\n \t}\n+#endif /* HAVE_mpc_pow */\n       }\n       break;\n     default:"}, {"sha": "80991689770a1507b0c8a8d4a5ca19ea63effc25", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7991661bc05bbe0df39745fbcc90bea0da728152", "patch": "@@ -1558,6 +1558,9 @@ gfc_intrinsic_sym;\n #include <mpfr.h>\n #ifdef HAVE_mpc\n #include <mpc.h>\n+# if MPC_VERSION >= MPC_VERSION_NUM(0,6,1)\n+#  define HAVE_mpc_pow\n+# endif\n #else\n #define mpc_realref(X) ((X).r)\n #define mpc_imagref(X) ((X).i)"}, {"sha": "aa693ce4c34efd15e80a6f07887e525da7b30cbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7991661bc05bbe0df39745fbcc90bea0da728152", "patch": "@@ -1,3 +1,8 @@\n+2009-06-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.dg/integer_exponentiation_4.f90: Temporarily\n+\tcomment out some values and add some cases.\n+\n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR testsuite/40567"}, {"sha": "e934d285794c93a86014caa86ebc9d872dd341df", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_4.f90", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7991661bc05bbe0df39745fbcc90bea0da728152/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90?ref=7991661bc05bbe0df39745fbcc90bea0da728152", "patch": "@@ -38,7 +38,10 @@ program test\n   print *, nearest(1.0,-1.0)**(-huge(0)) ! { dg-error \"Arithmetic overflow\" }\n \n !!!!!! COMPLEX BASE !!!!!!\n-  print *, (2.0,-4.3)**huge(0) ! { dg-error \"Arithmetic NaN\" }\n-  print *, (2.0,-4.3)**(-huge(0)) ! { dg-error \"Arithmetic NaN\" }\n+! Put these lines back in (and \"no-\" -> \"dg-\") prior to gcc-4.5.\n+!  print *, (2.0,-4.3)**huge(0) ! { no-error \"Arithmetic overflow\" }\n+!  print *, (2.0,-4.3)**huge(0_8) ! { no-error \"Arithmetic overflow\" }\n+!  print *, (2.0,-4.3)**(-huge(0))\n+!  print *, (2.0,-4.3)**(-huge(0_8))\n \n end program test"}]}