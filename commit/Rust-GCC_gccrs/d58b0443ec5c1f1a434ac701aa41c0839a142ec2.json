{"sha": "d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4YjA0NDNlYzVjMWYxYTQzNGFjNzAxYWE0MWMwODM5YTE0MmVjMg==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2006-08-19T15:35:11Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2006-08-19T15:35:11Z"}, "message": "backtrace.h (fallback_backtrace): Add \"0x55 0x8B 0xEC\" as another sequence that can indicate a \"pushl %ebp...\n\n\t* sysdep/i386/backtrace.h (fallback_backtrace): Add \"0x55 0x8B 0xEC\"\n\tas another sequence that can indicate a \"pushl %ebp; movl %esp, %ebp\"\n\tfunction prologue.\n\nFrom-SVN: r116258", "tree": {"sha": "52f2ce6b1ebaf98f737ac9e240293bcf305b5470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f2ce6b1ebaf98f737ac9e240293bcf305b5470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58b0443ec5c1f1a434ac701aa41c0839a142ec2/comments", "author": null, "committer": null, "parents": [{"sha": "4f8e2b0e6ed872fed74d8babe77d4513190b84b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8e2b0e6ed872fed74d8babe77d4513190b84b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8e2b0e6ed872fed74d8babe77d4513190b84b4"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "1e3680f59c759dfcc6aba914fc349a9b649c6187", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58b0443ec5c1f1a434ac701aa41c0839a142ec2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58b0443ec5c1f1a434ac701aa41c0839a142ec2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "patch": "@@ -1,3 +1,9 @@\n+2006-08-19  Ranjit Mathew  <rmathew@gcc.gnu.org>\n+\n+\t* sysdep/i386/backtrace.h (fallback_backtrace): Add \"0x55 0x8B 0xEC\"\n+\tas another sequence that can indicate a \"pushl %ebp; movl %esp, %ebp\"\n+\tfunction prologue.\n+\n 2006-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.am (install-exec-hook): Support $(DESTDIR)."}, {"sha": "63b3274613789c035739d7d896e945ffb7860a7d", "filename": "libjava/sysdep/i386/backtrace.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58b0443ec5c1f1a434ac701aa41c0839a142ec2/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58b0443ec5c1f1a434ac701aa41c0839a142ec2/libjava%2Fsysdep%2Fi386%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fi386%2Fbacktrace.h?ref=d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "patch": "@@ -71,8 +71,9 @@ fallback_backtrace (_Unwind_Trace_Fn trace_fn, _Jv_UnwindState *state)\n \n       /* Try to locate a \"pushl %ebp; movl %esp, %ebp\" function prologue\n          by scanning backwards at even addresses below the return address.\n-         This instruction sequence is encoded as 0x55 0x89 0xE5.  We give up\n-         if we do not find this sequence even after scanning 1024K of memory.\n+         This instruction sequence is encoded either as 0x55 0x89 0xE5 or as\n+         0x55 0x8B 0xEC.  We give up if we do not find this sequence even\n+         after scanning 1024K of memory.\n          FIXME: This is not robust and will probably give us false positives,\n          but this is about the best we can do if we do not have DWARF-2 unwind\n          information based exception handling.  */\n@@ -83,8 +84,9 @@ fallback_backtrace (_Unwind_Trace_Fn trace_fn, _Jv_UnwindState *state)\n       for ( ; scan_addr >= limit_addr; scan_addr -= 2)\n         {\n           unsigned char *scan_bytes = (unsigned char *)scan_addr;\n-          if (scan_bytes[0] == 0x55 && scan_bytes[1] == 0x89\n-              && scan_bytes[2] == 0xE5)\n+          if (scan_bytes[0] == 0x55\n+              && ((scan_bytes[1] == 0x89 && scan_bytes[2] == 0xE5)\n+                  || (scan_bytes[1] == 0x8B && scan_bytes[2] == 0xEC)))\n             {\n               ctx.meth_addr = scan_addr;\n               break;"}]}