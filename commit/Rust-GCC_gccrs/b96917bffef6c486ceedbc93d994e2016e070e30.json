{"sha": "b96917bffef6c486ceedbc93d994e2016e070e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2OTE3YmZmZWY2YzQ4NmNlZWRiYzkzZDk5NGUyMDE2ZTA3MGUzMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-05-17T06:34:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-05-17T06:34:48Z"}, "message": "varasm.c (struct constant_descriptor_tree): Add hash field.\n\n\t* varasm.c (struct constant_descriptor_tree): Add hash field.\n\t(const_desc_hash): Just return hash field.\n\t(const_desc_eq): If hash values are different, return 0 immediately.\n\t(output_constant_def): Compute hash field of temporary key, use\n\thtab_find_slot_with_hash instead of htab_find_slot.  Set hash in\n\tnewly built constant descriptor.\n\t(lookup_constant_def): Compute hash field of temporary key, use\n\thtab_find_with_hash instead of htab_find.\n\nFrom-SVN: r99813", "tree": {"sha": "4d0630c9230d9c00c783fe5d8b8a6cc1265b7388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0630c9230d9c00c783fe5d8b8a6cc1265b7388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b96917bffef6c486ceedbc93d994e2016e070e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96917bffef6c486ceedbc93d994e2016e070e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96917bffef6c486ceedbc93d994e2016e070e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96917bffef6c486ceedbc93d994e2016e070e30/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8de1f441bb72de63213667ce2af8152e3d2ce801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de1f441bb72de63213667ce2af8152e3d2ce801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de1f441bb72de63213667ce2af8152e3d2ce801"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "8ba8ea981dcf28d111898b5109caf38e8de94e8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96917bffef6c486ceedbc93d994e2016e070e30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96917bffef6c486ceedbc93d994e2016e070e30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b96917bffef6c486ceedbc93d994e2016e070e30", "patch": "@@ -1,3 +1,14 @@\n+2005-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* varasm.c (struct constant_descriptor_tree): Add hash field.\n+\t(const_desc_hash): Just return hash field.\n+\t(const_desc_eq): If hash values are different, return 0 immediately.\n+\t(output_constant_def): Compute hash field of temporary key, use\n+\thtab_find_slot_with_hash instead of htab_find_slot.  Set hash in\n+\tnewly built constant descriptor.\n+\t(lookup_constant_def): Compute hash field of temporary key, use\n+\thtab_find_with_hash instead of htab_find.\n+\n 2005-05-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sse.md (mulv4si3): New."}, {"sha": "4590d9212fbbdee92eab46ff19e7f6d24a2c40f7", "filename": "gcc/varasm.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96917bffef6c486ceedbc93d994e2016e070e30/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96917bffef6c486ceedbc93d994e2016e070e30/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b96917bffef6c486ceedbc93d994e2016e070e30", "patch": "@@ -2361,6 +2361,11 @@ struct constant_descriptor_tree GTY(())\n \n   /* The value of the constant.  */\n   tree value;\n+\n+  /* Hash of value.  Computing the hash from value each time\n+     hashfn is called can't work properly, as that means recursive\n+     use of the hash table during hash table expansion.  */\n+  hashval_t hash;\n };\n \n static GTY((param_is (struct constant_descriptor_tree)))\n@@ -2374,7 +2379,7 @@ static void maybe_output_constant_def_contents (struct constant_descriptor_tree\n static hashval_t\n const_desc_hash (const void *ptr)\n {\n-  return const_hash_1 (((struct constant_descriptor_tree *)ptr)->value);\n+  return ((struct constant_descriptor_tree *)ptr)->hash;\n }\n \n static hashval_t\n@@ -2474,8 +2479,11 @@ const_hash_1 (const tree exp)\n static int\n const_desc_eq (const void *p1, const void *p2)\n {\n-  return compare_constant (((struct constant_descriptor_tree *)p1)->value,\n-\t\t\t   ((struct constant_descriptor_tree *)p2)->value);\n+  const struct constant_descriptor_tree *c1 = p1;\n+  const struct constant_descriptor_tree *c2 = p2;\n+  if (c1->hash != c2->hash)\n+    return 0;\n+  return compare_constant (c1->value, c2->value);\n }\n \n /* Compare t1 and t2, and return 1 only if they are known to result in\n@@ -2745,12 +2753,14 @@ output_constant_def (tree exp, int defer)\n   /* Look up EXP in the table of constant descriptors.  If we didn't find\n      it, create a new one.  */\n   key.value = exp;\n-  loc = htab_find_slot (const_desc_htab, &key, INSERT);\n+  key.hash = const_hash_1 (exp);\n+  loc = htab_find_slot_with_hash (const_desc_htab, &key, key.hash, INSERT);\n \n   desc = *loc;\n   if (desc == 0)\n     {\n       desc = build_constant_desc (exp);\n+      desc->hash = key.hash;\n       *loc = desc;\n     }\n \n@@ -2853,7 +2863,8 @@ lookup_constant_def (tree exp)\n   struct constant_descriptor_tree key;\n \n   key.value = exp;\n-  desc = htab_find (const_desc_htab, &key);\n+  key.hash = const_hash_1 (exp);\n+  desc = htab_find_with_hash (const_desc_htab, &key, key.hash);\n \n   return (desc ? desc->rtl : NULL_RTX);\n }"}]}