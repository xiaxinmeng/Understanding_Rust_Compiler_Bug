{"sha": "5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwMzhjNGNiMTE0ODBiYjhlZTY4YmRjNzE4NDZhMGFiZmUxMWYwMg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-25T20:43:23Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-25T20:43:23Z"}, "message": "bitmap.c: Use type-safe memory allocation macros from libiberty.\n\n\t* bitmap.c: Use type-safe memory allocation macros from libiberty.\n\t* c-common.c: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-lang.c: Likewise.\n\t* c-lex.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* c-parse.in: Likewise.\n\t* c-typeck.c: Likewise.\n\t* genconditions.c: Likewise.\n\t* gengtype-lex.l: Likewise.\n\t* gengtype-yacc.y: Likewise.\n\t* gengtype.c: Likewise.\n\t* genmodes.c: Likewise.\n\t* gensupport.c: Likewise.\n\t* read-rtl.c: Likewise.\n\t* read-rtl.c (read_constants): Use INSERT instead of TRUE in call to\n\thtab_find_slot().\n\nFrom-SVN: r85163", "tree": {"sha": "d0ebdb183f6e1572fbcf9e7c4fd5488f5016e704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ebdb183f6e1572fbcf9e7c4fd5488f5016e704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b12a648242a3b58bfa7a3e2d24c9f7404ab35df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12a648242a3b58bfa7a3e2d24c9f7404ab35df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12a648242a3b58bfa7a3e2d24c9f7404ab35df0"}], "stats": {"total": 182, "additions": 102, "deletions": 80}, "files": [{"sha": "10d9060d29e82d30a69de02239baed24946b74e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -1,3 +1,23 @@\n+2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* bitmap.c: Use type-safe memory allocation macros from libiberty.\n+\t* c-common.c: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-lang.c: Likewise.\n+\t* c-lex.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* c-parse.in: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* genconditions.c: Likewise.\n+\t* gengtype-lex.l: Likewise.\n+\t* gengtype-yacc.y: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* genmodes.c: Likewise.\n+\t* gensupport.c: Likewise.\n+\t* read-rtl.c: Likewise.\n+\t* read-rtl.c (read_constants): Use INSERT instead of TRUE in call to\n+\thtab_find_slot().\n+\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* c-decl.c (groktypename, groktypename_in_param_context): Rename"}, {"sha": "2f4769b6e4688f7f4dd17ec516b75259d8f8320d", "filename": "gcc/bitmap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -131,7 +131,7 @@ bitmap_element_allocate (bitmap head)\n \t\t\t\t\t  obstack_chunk_free);\n \t    }\n \n-\t  element = obstack_alloc (&bitmap_obstack, sizeof (bitmap_element));\n+\t  element = XOBNEW (&bitmap_obstack, bitmap_element);\n \t}\n     }\n   else\n@@ -142,7 +142,7 @@ bitmap_element_allocate (bitmap head)\n           bitmap_ggc_free = element->next;\n \t}\n       else\n-\telement = ggc_alloc (sizeof (bitmap_element));\n+\telement = GGC_NEW (bitmap_element);\n     }\n \n   memset (element->bits, 0, sizeof (element->bits));\n@@ -716,7 +716,7 @@ bitmap\n bitmap_initialize (bitmap head, int using_obstack)\n {\n   if (head == NULL && ! using_obstack)\n-    head = ggc_alloc (sizeof (*head));\n+    head = GGC_NEW (struct bitmap_head_def);\n \n   head->first = head->current = 0;\n   head->using_obstack = using_obstack;"}, {"sha": "245203613d64aa6c79516c3496f574a438848adb", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -1051,7 +1051,7 @@ static struct tlist *\n new_tlist (struct tlist *next, tree t, tree writer)\n {\n   struct tlist *l;\n-  l = obstack_alloc (&tlist_obstack, sizeof *l);\n+  l = XOBNEW (&tlist_obstack, struct tlist);\n   l->next = next;\n   l->expr = t;\n   l->writer = writer;\n@@ -1322,7 +1322,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n \n \tif (! t)\n \t  {\n-\t    t = obstack_alloc (&tlist_obstack, sizeof *t);\n+\t    t = XOBNEW (&tlist_obstack, struct tlist_cache);\n \t    t->next = save_expr_cache;\n \t    t->expr = x;\n \t    save_expr_cache = t;"}, {"sha": "1c4510ad5905c4c7cb3a50fb93a5ab88c08933ee", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -428,7 +428,7 @@ bind (tree name, tree decl, struct c_scope *scope, bool invisible, bool nested)\n       binding_freelist = b->prev;\n     }\n   else\n-    b = ggc_alloc (sizeof (struct c_binding));\n+    b = GGC_NEW (struct c_binding);\n \n   b->shadowed = 0;\n   b->decl = decl;\n@@ -603,7 +603,7 @@ push_scope (void)\n \t  scope_freelist = scope->outer;\n \t}\n       else\n-\tscope = ggc_alloc_cleared (sizeof (struct c_scope));\n+\tscope = GGC_CNEW (struct c_scope);\n \n       scope->keep          = keep_next_level_flag;\n       scope->outer         = current_scope;\n@@ -1858,7 +1858,7 @@ pushdecl (tree x)\n \n   /* Functions need the lang_decl data.  */\n   if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_LANG_SPECIFIC (x))\n-    DECL_LANG_SPECIFIC (x) = ggc_alloc_cleared (sizeof (struct lang_decl));\n+    DECL_LANG_SPECIFIC (x) = GGC_CNEW (struct lang_decl);\n \n   /* Must set DECL_CONTEXT for everything not at file scope or\n      DECL_FILE_SCOPE_P won't work.  Local externs don't count\n@@ -4495,7 +4495,7 @@ grokdeclarator (tree declarator, tree declspecs,\n \tdecl = build_decl_attribute_variant (decl, decl_attr);\n \n \tDECL_LANG_SPECIFIC (decl)\n-\t  = ggc_alloc_cleared (sizeof (struct lang_decl));\n+\t  = GGC_CNEW (struct lang_decl);\n \n \tif (pedantic && type_quals && ! DECL_IN_SYSTEM_HEADER (decl))\n \t  pedwarn (\"ISO C forbids qualified function types\");\n@@ -5324,8 +5324,9 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n           ensure that this lives as long as the rest of the struct decl.\n           All decls in an inline function need to be saved.  */\n \n-        space = ggc_alloc_cleared (sizeof (struct lang_type));\n-        space2 = ggc_alloc (sizeof (struct sorted_fields_type) + len * sizeof (tree));\n+        space = GGC_CNEW (struct lang_type);\n+        space2 = GGC_NEWVAR (struct sorted_fields_type,\n+\t\t\t     sizeof (struct sorted_fields_type) + len * sizeof (tree));\n \n         len = 0;\n \tspace->s = space2;\n@@ -5548,7 +5549,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \n   /* Record the min/max values so that we can warn about bit-field\n      enumerations that are too small for the values.  */\n-  lt = ggc_alloc_cleared (sizeof (struct lang_type));\n+  lt = GGC_CNEW (struct lang_type);\n   lt->enum_min = minnode;\n   lt->enum_max = maxnode;\n   TYPE_LANG_SPECIFIC (enumtype) = lt;\n@@ -6451,7 +6452,7 @@ void\n c_push_function_context (struct function *f)\n {\n   struct language_function *p;\n-  p = ggc_alloc (sizeof (struct language_function));\n+  p = GGC_NEW (struct language_function);\n   f->language = p;\n \n   p->base.x_stmt_tree = c_stmt_tree;\n@@ -6505,7 +6506,7 @@ c_dup_lang_specific_decl (tree decl)\n   if (!DECL_LANG_SPECIFIC (decl))\n     return;\n \n-  ld = ggc_alloc (sizeof (struct lang_decl));\n+  ld = GGC_NEW (struct lang_decl);\n   memcpy (ld, DECL_LANG_SPECIFIC (decl), sizeof (struct lang_decl));\n   DECL_LANG_SPECIFIC (decl) = ld;\n }\n@@ -6631,7 +6632,7 @@ static void\n c_write_global_declarations_1 (tree globals)\n {\n   size_t len = list_length (globals);\n-  tree *vec = xmalloc (sizeof (tree) * len);\n+  tree *vec = XNEWVEC (tree, len);\n   size_t i;\n   tree decl;\n "}, {"sha": "0e1473b13e73d4df55bc65d0f20ecca38b8ac72b", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -122,7 +122,7 @@ get_fileinfo (const char *name)\n   if (n)\n     return (struct c_fileinfo *) n->value;\n \n-  fi = xmalloc (sizeof (struct c_fileinfo));\n+  fi = XNEW (struct c_fileinfo);\n   fi->time = 0;\n   fi->interface_only = 0;\n   fi->interface_unknown = 1;"}, {"sha": "69f0810df8646825aaf1864e186b2412cdd33f0d", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -285,11 +285,11 @@ void\n c_initialize_diagnostics (diagnostic_context *context)\n {\n   pretty_printer *base = context->printer;\n-  c_pretty_printer *pp = xmalloc (sizeof (c_pretty_printer));\n+  c_pretty_printer *pp = XNEW (c_pretty_printer);\n   memcpy (pp_base (pp), base, sizeof (pretty_printer));\n   pp_c_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;\n \n-  /* It is safe to free this object because it was previously malloc()'d.  */\n-  free (base);\n+  /* It is safe to free this object because it was previously XNEW()'d.  */\n+  XDELETE (base);\n }"}, {"sha": "2b4ab9f76dc9b370e7d1812422f8470b7e056683", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -226,7 +226,7 @@ c_common_init_options (unsigned int argc, const char ** ARG_UNUSED (argv))\n   flag_exceptions = c_dialect_cxx ();\n   warn_pointer_arith = c_dialect_cxx ();\n \n-  deferred_opts = xmalloc (argc * sizeof (struct deferred_opt));\n+  deferred_opts = XNEWVEC (struct deferred_opt, argc);\n \n   result = lang_flags[c_language];\n \n@@ -913,7 +913,7 @@ c_common_post_options (const char **pfilename)\n   /* Canonicalize the input and output filenames.  */\n   if (in_fnames == NULL)\n     {\n-      in_fnames = xmalloc (sizeof (in_fnames[0]));\n+      in_fnames = XNEWVEC (const char *, 1);\n       in_fnames[0] = \"\";\n     }\n   else if (strcmp (in_fnames[0], \"-\") == 0)\n@@ -1256,7 +1256,7 @@ add_prefixed_path (const char *suffix, size_t chain)\n   prefix     = iprefix ? iprefix : cpp_GCC_INCLUDE_DIR;\n   prefix_len = iprefix ? strlen (iprefix) : cpp_GCC_INCLUDE_DIR_len;\n \n-  path = xmalloc (prefix_len + suffix_len + 1);\n+  path = (char *) xmalloc (prefix_len + suffix_len + 1);\n   memcpy (path, prefix, prefix_len);\n   memcpy (path + prefix_len, suffix, suffix_len);\n   path[prefix_len + suffix_len] = '\\0';"}, {"sha": "13178890173b11a346b02a5137b9afcc0f58bb7d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -3451,7 +3451,7 @@ init_reswords (void)\n   if (!c_dialect_objc ())\n      mask |= D_OBJC;\n \n-  ridpointers = ggc_calloc ((int) RID_MAX, sizeof (tree));\n+  ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n   for (i = 0; i < N_reswords; i++)\n     {\n       /* If a keyword is disabled, do not enter it into the table"}, {"sha": "0f4211c0e1f7c6ce757243bb06864212f017eec9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -3756,10 +3756,10 @@ static int spelling_size;\t\t/* Size of the spelling stack.  */\n     {\t\t\t\t\t\t\t\t\t\\\n       spelling_size += 10;\t\t\t\t\t\t\\\n       if (spelling_base == 0)\t\t\t\t\t\t\\\n-\tspelling_base = xmalloc (spelling_size * sizeof (struct spelling)); \\\n+\tspelling_base = XNEWVEC (struct spelling, spelling_size);\t\\\n       else\t\t\t\t\t\t\t\t\\\n-        spelling_base = xrealloc (spelling_base,\t\t\\\n-\t\t\t\t  spelling_size * sizeof (struct spelling)); \\\n+        spelling_base = XRESIZEVEC (struct spelling, spelling_base,\t\\\n+\t\t\t\t    spelling_size);\t\t\t\\\n       RESTORE_SPELLING_DEPTH (depth);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -4309,7 +4309,7 @@ void\n start_init (tree decl, tree asmspec_tree, int top_level)\n {\n   const char *locus;\n-  struct initializer_stack *p = xmalloc (sizeof (struct initializer_stack));\n+  struct initializer_stack *p = XNEW (struct initializer_stack);\n   const char *asmspec = 0;\n \n   if (asmspec_tree)\n@@ -4411,7 +4411,7 @@ finish_init (void)\n void\n really_start_incremental_init (tree type)\n {\n-  struct constructor_stack *p = xmalloc (sizeof (struct constructor_stack));\n+  struct constructor_stack *p = XNEW (struct constructor_stack);\n \n   if (type == 0)\n     type = TREE_TYPE (constructor_decl);\n@@ -4548,7 +4548,7 @@ push_init_level (int implicit)\n \tvalue = find_init_member (constructor_index);\n     }\n \n-  p = xmalloc (sizeof (struct constructor_stack));\n+  p = XNEW (struct constructor_stack);\n   p->type = constructor_type;\n   p->fields = constructor_fields;\n   p->index = constructor_index;\n@@ -4941,7 +4941,7 @@ push_range_stack (tree range_end)\n {\n   struct constructor_range_stack *p;\n \n-  p = ggc_alloc (sizeof (struct constructor_range_stack));\n+  p = GGC_NEW (struct constructor_range_stack);\n   p->prev = constructor_range_stack;\n   p->next = 0;\n   p->fields = constructor_fields;\n@@ -5122,7 +5122,7 @@ add_pending_init (tree purpose, tree value)\n \t}\n     }\n \n-  r = ggc_alloc (sizeof (struct init_node));\n+  r = GGC_NEW (struct init_node);\n   r->purpose = purpose;\n   r->value = value;\n \n@@ -6391,8 +6391,9 @@ c_start_case (tree exp)\n     }\n \n   /* Add this new SWITCH_STMT to the stack.  */\n-  cs = xmalloc (sizeof (*cs));\n-  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, orig_type);\n+  cs = XNEW (struct c_switch);\n+  cs->switch_stmt = build_stmt ((enum tree_code) SWITCH_STMT, exp, NULL_TREE,\n+\t\t\t\torig_type);\n   cs->orig_type = orig_type;\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->next = c_switch_stack;\n@@ -6440,7 +6441,7 @@ c_finish_case (tree body)\n   /* Pop the stack.  */\n   c_switch_stack = cs->next;\n   splay_tree_delete (cs->cases);\n-  free (cs);\n+  XDELETE (cs);\n }\n \f\n /* Emit an if statement.  IF_LOCUS is the location of the 'if'.  COND,"}, {"sha": "94a6bc439295ca4d932910801326f3fd6691dde2", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -57,7 +57,7 @@ add_condition (const char *expr)\n   if (expr[0] == 0)\n     return;\n \n-  test = xmalloc (sizeof (struct c_test));\n+  test = XNEW (struct c_test);\n   test->expr = expr;\n \n   *(htab_find_slot (condition_table, test, INSERT)) = test;"}, {"sha": "8cff1bcb677db0786525a2e8f3602a7203b648c9", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -433,10 +433,10 @@ push_macro_expansion (const char *name, unsigned name_len,\n     if (strlen (macro_defs[ix].name) == name_len\n         && !memcmp (name, macro_defs[ix].name, name_len))\n       {\n-        macro_t *expansion = xmalloc (sizeof (*expansion));\n+        macro_t *expansion = XNEW (macro_t);\n \n \texpansion->next = macro_expns;\n-\texpansion->name = xmemdup (arg, arg_len, arg_len+1);\n+\texpansion->name = (char *) xmemdup (arg, arg_len, arg_len+1);\n \texpansion->expansion = macro_defs[ix].expansion;\n \tmacro_expns = expansion;\n \treturn;"}, {"sha": "0d64d97c7d0e5f9794bfd11267c895099897ee68", "filename": "gcc/gengtype-yacc.y", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype-yacc.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype-yacc.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-yacc.y?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -160,21 +160,21 @@ yacc_ids: /* empty */\n \t{ $$ = NULL; }\n      | yacc_ids ID\n         {\n-\t  pair_p p = xcalloc (1, sizeof (*p));\n+\t  pair_p p = XCNEW (struct pair);\n \t  p->next = $1;\n \t  p->line = lexer_line;\n-\t  p->opt = xmalloc (sizeof (*(p->opt)));\n+\t  p->opt = XNEW (struct options);\n \t  p->opt->name = \"tag\";\n \t  p->opt->next = NULL;\n \t  p->opt->info = (char *)$2;\n \t  $$ = p;\n \t}\n      | yacc_ids CHAR\n         {\n-\t  pair_p p = xcalloc (1, sizeof (*p));\n+\t  pair_p p = XCNEW (struct pair);\n \t  p->next = $1;\n \t  p->line = lexer_line;\n-\t  p->opt = xmalloc (sizeof (*(p->opt)));\n+\t  p->opt = XNEW (struct options);\n \t  p->opt->name = \"tag\";\n \t  p->opt->next = NULL;\n \t  p->opt->info = xasprintf (\"'%s'\", $2);\n@@ -185,7 +185,7 @@ yacc_ids: /* empty */\n struct_fields: { $$ = NULL; }\n \t       | type optionsopt ID bitfieldopt ';' struct_fields\n \t          {\n-\t            pair_p p = xmalloc (sizeof (*p));\n+\t            pair_p p = XNEW (struct pair);\n \t\t    p->type = adjust_field_type ($1, $2);\n \t\t    p->opt = $2;\n \t\t    p->name = $3;\n@@ -195,7 +195,7 @@ struct_fields: { $$ = NULL; }\n \t\t  }\n \t       | type optionsopt ID ARRAY ';' struct_fields\n \t          {\n-\t            pair_p p = xmalloc (sizeof (*p));\n+\t            pair_p p = XNEW (struct pair);\n \t\t    p->type = adjust_field_type (create_array ($1, $4), $2);\n \t\t    p->opt = $2;\n \t\t    p->name = $3;\n@@ -205,7 +205,7 @@ struct_fields: { $$ = NULL; }\n \t\t  }\n \t       | type optionsopt ID ARRAY ARRAY ';' struct_fields\n \t          {\n-\t            pair_p p = xmalloc (sizeof (*p));\n+\t            pair_p p = XNEW (struct pair);\n \t\t    p->type = create_array (create_array ($1, $5), $4);\n \t\t    p->opt = $2;\n \t\t    p->name = $3;\n@@ -314,7 +314,7 @@ stringseq: STRING\n \t     {\n \t       size_t l1 = strlen ($1);\n \t       size_t l2 = strlen ($2);\n-\t       char *s = xrealloc ((char *)$1, l1 + l2 + 1);\n+\t       char *s = (char *) xrealloc ((char *)$1, l1 + l2 + 1);\n \t       memcpy (s + l1, $2, l2 + 1);\n \t       free ((void *)$2);\n \t       $$ = s;"}, {"sha": "441420c7feeeda7fcc1a99c0b92f239c7e197466", "filename": "gcc/gengtype.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -117,7 +117,7 @@ do_typedef (const char *s, type_p t, struct fileloc *pos)\n \treturn;\n       }\n \n-  p = xmalloc (sizeof (struct pair));\n+  p = XNEW (struct pair);\n   p->next = typedefs;\n   p->name = s;\n   p->type = t;\n@@ -173,7 +173,7 @@ new_structure (const char *name, int isunion, struct fileloc *pos,\n \telse if (si->u.s.line.file != NULL && si->u.s.bitmap != bitmap)\n \t  {\n \t    ls = si;\n-\t    si = xcalloc (1, sizeof (struct type));\n+\t    si = XCNEW (struct type);\n \t    memcpy (si, ls, sizeof (struct type));\n \t    ls->kind = TYPE_LANG_STRUCT;\n \t    ls->u.s.lang_struct = si;\n@@ -187,7 +187,7 @@ new_structure (const char *name, int isunion, struct fileloc *pos,\n \n \tif (ls != NULL && s == NULL)\n \t  {\n-\t    s = xcalloc (1, sizeof (struct type));\n+\t    s = XCNEW (struct type);\n \t    s->next = ls->u.s.lang_struct;\n \t    ls->u.s.lang_struct = s;\n \t    s->u.s.lang_struct = ls;\n@@ -197,7 +197,7 @@ new_structure (const char *name, int isunion, struct fileloc *pos,\n \n   if (s == NULL)\n     {\n-      s = xcalloc (1, sizeof (struct type));\n+      s = XCNEW (struct type);\n       s->next = structures;\n       structures = s;\n     }\n@@ -233,7 +233,7 @@ find_structure (const char *name, int isunion)\n \t&& UNION_P (s) == isunion)\n       return s;\n \n-  s = xcalloc (1, sizeof (struct type));\n+  s = XCNEW (struct type);\n   s->next = structures;\n   structures = s;\n   s->kind = isunion ? TYPE_UNION : TYPE_STRUCT;\n@@ -258,7 +258,7 @@ find_param_structure (type_p t, type_p param[NUM_PARAM])\n       break;\n   if (res == NULL)\n     {\n-      res = xcalloc (1, sizeof (*res));\n+      res = XCNEW (struct type);\n       res->kind = TYPE_PARAM_STRUCT;\n       res->next = param_structs;\n       param_structs = res;\n@@ -273,9 +273,9 @@ find_param_structure (type_p t, type_p param[NUM_PARAM])\n type_p\n create_scalar_type (const char *name, size_t name_len)\n {\n-  type_p r = xcalloc (1, sizeof (struct type));\n+  type_p r = XCNEW (struct type);\n   r->kind = TYPE_SCALAR;\n-  r->u.sc = xmemdup (name, name_len, name_len + 1);\n+  r->u.sc = (char *) xmemdup (name, name_len, name_len + 1);\n   return r;\n }\n \n@@ -286,7 +286,7 @@ create_pointer (type_p t)\n {\n   if (! t->pointer_to)\n     {\n-      type_p r = xcalloc (1, sizeof (struct type));\n+      type_p r = XCNEW (struct type);\n       r->kind = TYPE_POINTER;\n       r->u.p = t;\n       t->pointer_to = r;\n@@ -301,7 +301,7 @@ create_array (type_p t, const char *len)\n {\n   type_p v;\n \n-  v = xcalloc (1, sizeof (*v));\n+  v = XCNEW (struct type);\n   v->kind = TYPE_ARRAY;\n   v->u.a.p = t;\n   v->u.a.len = len;\n@@ -312,7 +312,7 @@ create_array (type_p t, const char *len)\n options_p\n create_option (const char *name, void *info)\n {\n-  options_p o = xmalloc (sizeof (*o));\n+  options_p o = XNEW (struct options);\n   o->name = name;\n   o->info = info;\n   return o;\n@@ -325,7 +325,7 @@ void\n note_variable (const char *s, type_p t, options_p o, struct fileloc *pos)\n {\n   pair_p n;\n-  n = xmalloc (sizeof (*n));\n+  n = XNEW (struct pair);\n   n->name = s;\n   n->type = t;\n   n->line = *pos;\n@@ -412,7 +412,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n       return &string_type;\n     }\n \n-  nodot = xmalloc (sizeof (*nodot));\n+  nodot = XNEW (struct options);\n   nodot->next = NULL;\n   nodot->name = \"dot\";\n   nodot->info = \"\";\n@@ -434,10 +434,10 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n       {\n \tpair_p old_note_flds = note_flds;\n \n-\tnote_flds = xmalloc (sizeof (*note_flds));\n+\tnote_flds = XNEW (struct pair);\n \tnote_flds->line.file = __FILE__;\n \tnote_flds->line.line = __LINE__;\n-\tnote_flds->opt = xmalloc (sizeof (*note_flds->opt));\n+\tnote_flds->opt = XNEW (struct options);\n \tnote_flds->opt->next = nodot;\n \tnote_flds->opt->name = \"tag\";\n \tnote_flds->opt->info = xasprintf (\"%d\", c);\n@@ -586,7 +586,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t      break;\n \t    }\n \n-\t  subfields = xmalloc (sizeof (*subfields));\n+\t  subfields = XNEW (struct pair);\n \t  subfields->next = old_subf;\n \t  subfields->type = t;\n \t  subfields->name = xasprintf (\".fld[%lu].%s\", (unsigned long)aindex,\n@@ -595,15 +595,15 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t  subfields->line.line = __LINE__;\n \t  if (t == note_union_tp)\n \t    {\n-\t      subfields->opt = xmalloc (sizeof (*subfields->opt));\n+\t      subfields->opt = XNEW (struct options);\n \t      subfields->opt->next = nodot;\n \t      subfields->opt->name = \"desc\";\n \t      subfields->opt->info = \"NOTE_LINE_NUMBER (&%0)\";\n \t    }\n \t  else if (t == basic_block_tp)\n \t    {\n \t      /* We don't presently GC basic block structures...  */\n-\t      subfields->opt = xmalloc (sizeof (*subfields->opt));\n+\t      subfields->opt = XNEW (struct options);\n \t      subfields->opt->next = nodot;\n \t      subfields->opt->name = \"skip\";\n \t      subfields->opt->info = NULL;\n@@ -612,15 +612,15 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t    subfields->opt = nodot;\n \t}\n \n-      flds = xmalloc (sizeof (*flds));\n+      flds = XNEW (struct pair);\n       flds->next = old_flds;\n       flds->name = \"\";\n       sname = xasprintf (\"rtx_def_%s\", rtx_name[i]);\n       new_structure (sname, 0, &lexer_line, subfields, NULL);\n       flds->type = find_structure (sname, 0);\n       flds->line.file = __FILE__;\n       flds->line.line = __LINE__;\n-      flds->opt = xmalloc (sizeof (*flds->opt));\n+      flds->opt = XNEW (struct options);\n       flds->opt->next = nodot;\n       flds->opt->name = \"tag\";\n       ftag = xstrdup (rtx_name[i]);\n@@ -652,24 +652,24 @@ adjust_field_tree_exp (type_p t, options_p opt ATTRIBUTE_UNUSED)\n       return &string_type;\n     }\n \n-  nodot = xmalloc (sizeof (*nodot));\n+  nodot = XNEW (struct options);\n   nodot->next = NULL;\n   nodot->name = \"dot\";\n   nodot->info = \"\";\n \n-  flds = xmalloc (sizeof (*flds));\n+  flds = XNEW (struct pair);\n   flds->next = NULL;\n   flds->name = \"\";\n   flds->type = t;\n   flds->line.file = __FILE__;\n   flds->line.line = __LINE__;\n-  flds->opt = xmalloc (sizeof (*flds->opt));\n+  flds->opt = XNEW (struct options);\n   flds->opt->next = nodot;\n   flds->opt->name = \"length\";\n   flds->opt->info = \"TREE_CODE_LENGTH (TREE_CODE ((tree) &%0))\";\n   {\n     options_p oldopt = flds->opt;\n-    flds->opt = xmalloc (sizeof (*flds->opt));\n+    flds->opt = XNEW (struct options);\n     flds->opt->next = oldopt;\n     flds->opt->name = \"default\";\n     flds->opt->info = \"\";\n@@ -998,7 +998,7 @@ create_file (const char *name, const char *oname)\n   outf_p f;\n   size_t i;\n \n-  f = xcalloc (sizeof (*f), 1);\n+  f = XCNEW (struct outf);\n   f->next = output_files;\n   f->name = oname;\n   output_files = f;\n@@ -1028,7 +1028,7 @@ oprintf (outf_p o, const char *format, ...)\n       do {\n \tnew_len *= 2;\n       } while (o->bufused + slength >= new_len);\n-      o->buf = xrealloc (o->buf, new_len);\n+      o->buf = (char *) xrealloc (o->buf, new_len);\n       o->buflength = new_len;\n     }\n   memcpy (o->buf + o->bufused, s, slength);\n@@ -2716,7 +2716,7 @@ write_roots (pair_p variables)\n \t  break;\n       if (fli == NULL)\n \t{\n-\t  fli = xmalloc (sizeof (*fli));\n+\t  fli = XNEW (struct flist);\n \t  fli->f = f;\n \t  fli->next = flp;\n \t  fli->started_p = 0;"}, {"sha": "2a3bb6ccc886b585e695be800b2f13385bfc1636", "filename": "gcc/genmodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -226,7 +226,7 @@ new_adjust (const char *name,\n \treturn;\n       }\n \n-  a = xmalloc (sizeof (struct mode_adjust));\n+  a = XNEW (struct mode_adjust);\n   a->mode = mode;\n   a->adjustment = adjustment;\n   a->file = file;"}, {"sha": "d253378f522f6062d2484b7c1ce4fef2847ae090", "filename": "gcc/gensupport.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -144,7 +144,7 @@ static struct queue_elem *\n queue_pattern (rtx pattern, struct queue_elem ***list_tail,\n \t       const char *filename, int lineno)\n {\n-  struct queue_elem *e = xmalloc (sizeof (*e));\n+  struct queue_elem *e = XNEW(struct queue_elem);\n   e->data = pattern;\n   e->filename = filename;\n   e->lineno = lineno;\n@@ -594,7 +594,7 @@ alter_predicate_for_insn (rtx pattern, int alt, int max_op, int lineno)\n \t  {\n \t    size_t c_len = strlen (c);\n \t    size_t len = alt * (c_len + 1);\n-\t    char *new_c = xmalloc (len);\n+\t    char *new_c = XNEWVEC(char, len);\n \n \t    memcpy (new_c, c, c_len);\n \t    for (i = 1; i < alt; ++i)\n@@ -887,7 +887,7 @@ process_define_cond_exec (void)\n static char *\n save_string (const char *s, int len)\n {\n-  char *result = xmalloc (len + 1);\n+  char *result = XNEWVEC (char, len + 1);\n \n   memcpy (result, s, len);\n   result[len] = 0;\n@@ -921,7 +921,7 @@ init_md_reader_args (int argc, char **argv)\n \t      {\n \t\tstruct file_name_list *dirtmp;\n \n-\t\tdirtmp = xmalloc (sizeof (struct file_name_list));\n+\t\tdirtmp = XNEW (struct file_name_list);\n \t\tdirtmp->next = 0;\t/* New one goes on the end */\n \t\tif (first_dir_md_include == 0)\n \t\t  first_dir_md_include = dirtmp;\n@@ -1122,7 +1122,7 @@ maybe_eval_c_test (const char *expr)\n     return -1;\n \n   dummy.expr = expr;\n-  test = htab_find (condition_table, &dummy);\n+  test = (const struct c_test *)htab_find (condition_table, &dummy);\n   if (!test)\n     abort ();\n "}, {"sha": "3252a0fcd9f65cb8a1967ec050eb29f980eb1c05", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d038c4cb11480bb8ee68bdc71846a0abfe11f02/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=5d038c4cb11480bb8ee68bdc71846a0abfe11f02", "patch": "@@ -439,10 +439,10 @@ read_constants (FILE *infile, char *tmp_char)\n \n       if (c != '(')\n \tfatal_expected_char (infile, '(', c);\n-      def = xmalloc (sizeof (struct md_constant));\n+      def = XNEW (struct md_constant);\n       def->name = tmp_char;\n       read_name (tmp_char, infile);\n-      entry_ptr = htab_find_slot (defs, def, TRUE);\n+      entry_ptr = htab_find_slot (defs, def, INSERT);\n       if (! *entry_ptr)\n \tdef->name = xstrdup (tmp_char);\n       c = read_skip_spaces (infile);"}]}