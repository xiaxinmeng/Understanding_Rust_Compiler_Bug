{"sha": "c23da840b2427b1cf9a2d3275b869165d49d9df1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzZGE4NDBiMjQyN2IxY2Y5YTJkMzI3NWI4NjkxNjVkNDlkOWRmMQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-04-22T07:24:06Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-04-22T07:24:06Z"}, "message": "* rtl-factoring.c (collect_patterns_seqs): Handle CC0 targets.\n\nFrom-SVN: r134551", "tree": {"sha": "ef4f5f501d6f17a8d45c557f6f0f7bb73597c155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4f5f501d6f17a8d45c557f6f0f7bb73597c155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c23da840b2427b1cf9a2d3275b869165d49d9df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23da840b2427b1cf9a2d3275b869165d49d9df1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23da840b2427b1cf9a2d3275b869165d49d9df1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23da840b2427b1cf9a2d3275b869165d49d9df1/comments", "author": null, "committer": null, "parents": [{"sha": "0a58c87e58465a6b993892e87d956c5d7569a5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a58c87e58465a6b993892e87d956c5d7569a5c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a58c87e58465a6b993892e87d956c5d7569a5c1"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "6396413c6c8f6549e69baba771b7e5bdbcc2f043", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23da840b2427b1cf9a2d3275b869165d49d9df1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23da840b2427b1cf9a2d3275b869165d49d9df1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c23da840b2427b1cf9a2d3275b869165d49d9df1", "patch": "@@ -1,3 +1,7 @@\n+2008-04-22  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* rtl-factoring.c (collect_patterns_seqs): Handle CC0 targets.\n+\n 2008-04-21  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* coverage.c: Include tree-pass.h."}, {"sha": "8882f0f6e48b6f31689c736d8bd7cd7d027f6ad8", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23da840b2427b1cf9a2d3275b869165d49d9df1/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23da840b2427b1cf9a2d3275b869165d49d9df1/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=c23da840b2427b1cf9a2d3275b869165d49d9df1", "patch": "@@ -444,15 +444,17 @@ collect_pattern_seqs (void)\n   htab_iterator hti0, hti1, hti2;\n   p_hash_bucket hash_bucket;\n   p_hash_elem e0, e1;\n-#ifdef STACK_REGS\n+#if defined STACK_REGS || defined HAVE_CC0\n   basic_block bb;\n-  bitmap_head stack_reg_live;\n+  bitmap_head dont_collect;\n \n   /* Extra initialization step to ensure that no stack registers (if present)\n-     are live across abnormal edges. Set a flag in STACK_REG_LIVE for an insn\n-     if a stack register is live after the insn.  */\n-  bitmap_initialize (&stack_reg_live, NULL);\n+     or cc0 code (if present) are live across abnormal edges.\n+     Set a flag in DONT_COLLECT for an insn if a stack register is live\n+     after the insn or the insn is cc0 setter or user.  */\n+  bitmap_initialize (&dont_collect, NULL);\n \n+#ifdef STACK_REGS\n   FOR_EACH_BB (bb)\n   {\n     regset_head live;\n@@ -476,7 +478,7 @@ collect_pattern_seqs (void)\n \t      {\n \t\tif (REGNO_REG_SET_P (&live, reg))\n \t\t  {\n-\t\t    bitmap_set_bit (&stack_reg_live, INSN_UID (insn));\n+\t\t    bitmap_set_bit (&dont_collect, INSN_UID (insn));\n \t\t    break;\n \t\t  }\n \t      }\n@@ -493,6 +495,28 @@ collect_pattern_seqs (void)\n   }\n #endif\n \n+#ifdef HAVE_CC0\n+  /* Mark CC0 setters and users as ineligible for collection into sequences.\n+     This is an over-conservative fix, since it is OK to include\n+     a cc0_setter, but only if we also include the corresponding cc0_user,\n+     and vice versa.  */\n+  FOR_EACH_BB (bb)\n+  {\n+    rtx insn;\n+    rtx next_tail;\n+\n+    next_tail = NEXT_INSN (BB_END (bb));\n+\n+    for (insn = BB_HEAD (bb); insn != next_tail; insn = NEXT_INSN (insn))\n+      {\n+\tif (INSN_P (insn) && reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n+\t  bitmap_set_bit (&dont_collect, INSN_UID (insn));\n+      }\n+  }\n+#endif\n+\n+#endif /* defined STACK_REGS || defined HAVE_CC0 */\n+\n   /* Initialize PATTERN_SEQS to empty.  */\n   pattern_seqs = 0;\n \n@@ -505,15 +529,15 @@ collect_pattern_seqs (void)\n         FOR_EACH_HTAB_ELEMENT (hash_bucket->seq_candidates, e1, p_hash_elem,\n                                hti2)\n           if (e0 != e1\n-#ifdef STACK_REGS\n-              && !bitmap_bit_p (&stack_reg_live, INSN_UID (e0->insn))\n-              && !bitmap_bit_p (&stack_reg_live, INSN_UID (e1->insn))\n+#if defined STACK_REGS || defined HAVE_CC0\n+              && !bitmap_bit_p (&dont_collect, INSN_UID (e0->insn))\n+              && !bitmap_bit_p (&dont_collect, INSN_UID (e1->insn))\n #endif\n              )\n             match_seqs (e0, e1);\n-#ifdef STACK_REGS\n+#if defined STACK_REGS || defined HAVE_CC0\n   /* Free unused data.  */\n-  bitmap_clear (&stack_reg_live);\n+  bitmap_clear (&dont_collect);\n #endif\n }\n "}]}