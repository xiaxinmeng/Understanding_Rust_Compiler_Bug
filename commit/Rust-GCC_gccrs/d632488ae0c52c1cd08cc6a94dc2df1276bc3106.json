{"sha": "d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzMjQ4OGFlMGM1MmMxY2QwOGNjNmE5NGRjMmRmMTI3NmJjMzEwNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-05-02T22:25:28Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-05-02T22:25:28Z"}, "message": "re PR libstdc++/44015 (template parameters not documented)\n\n2012-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/44015\n\t* include/bits/basic_ios.h: Add tparam markup for\n\t* doxygen.  include/bits/basic_string.h: Same.\n\t* include/bits/forward_list.h: Same.\n\t* include/bits/stl_bvector.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/stl_list.h: Same.  include/bits/stl_map.h:\n\t* Same.  include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/stl_pair.h: Same.\n\t* include/bits/stl_queue.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/stl_stack.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\t* include/bits/unordered_map.h: Same.\n\t* include/bits/unordered_set.h: Same.  include/std/array:\n\t* Same.  include/std/atomic: Same.  include/std/fstream:\n\t* Same.  include/std/istream: Same.  include/std/ostream:\n\t* Same.  include/std/sstream: Same.\n\t* include/std/streambuf: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/*:\n          Adjust line numbers.\n\t* testsuite/23_containers/list/requirements/dr438/*: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/*: Same.\n\nFrom-SVN: r187066", "tree": {"sha": "ba0bf39208e696e02ec59124e2f75b06049e6150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0bf39208e696e02ec59124e2f75b06049e6150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/comments", "author": null, "committer": null, "parents": [{"sha": "daccad6dd9fc5fce8e89407c6af6a2244b04352e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daccad6dd9fc5fce8e89407c6af6a2244b04352e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daccad6dd9fc5fce8e89407c6af6a2244b04352e"}], "stats": {"total": 241, "additions": 190, "deletions": 51}, "files": [{"sha": "63895589879cb9794c94faa2c8d55a33f5e5c214", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,3 +1,30 @@\n+2012-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/44015\n+\t* include/bits/basic_ios.h: Add tparam markup for\n+\t* doxygen.  include/bits/basic_string.h: Same.\n+\t* include/bits/forward_list.h: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/stl_list.h: Same.  include/bits/stl_map.h:\n+\t* Same.  include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/stl_pair.h: Same.\n+\t* include/bits/stl_queue.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/stl_stack.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\t* include/bits/unordered_map.h: Same.\n+\t* include/bits/unordered_set.h: Same.  include/std/array:\n+\t* Same.  include/std/atomic: Same.  include/std/fstream:\n+\t* Same.  include/std/istream: Same.  include/std/ostream:\n+\t* Same.  include/std/sstream: Same.\n+\t* include/std/streambuf: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/*:\n+          Adjust line numbers.\n+\t* testsuite/23_containers/list/requirements/dr438/*: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/*: Same.\n+\n 2012-05-02  DJ Delorie  <dj@redhat.com>\n \n \t* crossconfig.m4: Since we know that all TPF builds are cross-"}, {"sha": "384bb4fc0ddd4ddad8b54d225816e6c43762387c", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -52,11 +52,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *__f;\n     }\n \n-  // 27.4.5  Template class basic_ios\n   /**\n-   *  @brief  Virtual base class for all stream classes.\n+   *  @brief Template class basic_ios, virtual base class for all\n+   *  stream classes. \n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  Most of the member functions called dispatched on stream objects\n    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.\n   */"}, {"sha": "24562c462b817a231f82dbbde9dddfa883b54457", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -55,6 +55,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup strings\n    *  @ingroup sequences\n    *\n+   *  @tparam _CharT  Type of character\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and a\n    *  <a href=\"tables.html#67\">sequence</a>.  Of the"}, {"sha": "ce355048a86983cdbf8b8596e3d46738f6e46e78", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -376,6 +376,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#67\">sequence</a>, including the\n    *  <a href=\"tables.html#68\">optional sequence requirements</a> with the"}, {"sha": "3adbfa1ddf2f217542b163bad6cbf39b0a4937e6", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -500,13 +500,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  @brief  A specialization of vector for booleans which offers fixed time\n    *  access to individual elements in any order.\n    *\n+   *  @ingroup sequences\n+   *\n+   *  @tparam _Alloc  Allocator type.\n+   *\n    *  Note that vector<bool> does not actually meet the requirements for being\n    *  a container.  This is because the reference and pointer types are not\n    *  really references and pointers to bool.  See DR96 for details.  @see\n    *  vector for function documentation.\n    *\n-   *  @ingroup sequences\n-   *\n    *  In some terminology a %vector can be described as a dynamic\n    *  C-style array, it offers fast and efficient access to individual\n    *  elements in any order and saves the user from worrying about"}, {"sha": "157df3ba30a9421992a6f79170869902d1274121", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -649,6 +649,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and a\n    *  <a href=\"tables.html#67\">sequence</a>, including the"}, {"sha": "b568cd701b07675d39730f0b3033097389a9bcbe", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -411,6 +411,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and a\n    *  <a href=\"tables.html#67\">sequence</a>, including the"}, {"sha": "881f938063d2b26b4cccd87f88454610ee7d3058", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -73,6 +73,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup associative_containers\n    *\n+   *  @tparam _Key  Type of key objects.\n+   *  @tparam  _Tp  Type of mapped objects.\n+   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.\n+   *  @tparam _Alloc  Allocator type, defaults to \n+   *                  allocator<pair<const _Key, _Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and an\n    *  <a href=\"tables.html#69\">associative container</a> (using unique keys)."}, {"sha": "6c92bcd198eb35a121cc38dee9981b4ea10a757d", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -72,6 +72,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup associative_containers\n    *\n+   *  @tparam _Key  Type of key objects.\n+   *  @tparam  _Tp  Type of mapped objects.\n+   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.\n+   *  @tparam _Alloc  Allocator type, defaults to \n+   *                  allocator<pair<const _Key, _Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and an\n    *  <a href=\"tables.html#69\">associative container</a> (using equivalent"}, {"sha": "ecf9e54eb95c51845fec23f70ec16ae4340e496c", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -72,6 +72,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup associative_containers\n    *\n+   *\n+   *  @tparam _Key  Type of key objects.\n+   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Key>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and an\n    *  <a href=\"tables.html#69\">associative container</a> (using equivalent"}, {"sha": "45a1c61fea1a7ba82076192973cfb3172f4d0da3", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -83,7 +83,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Index_tuple;\n #endif\n \n-  /// Struct holding two objects of arbitrary type.\n+ /**\n+   *  @brief Struct holding two objects of arbitrary type.\n+   *\n+   *  @tparam _T1  Type of first object.\n+   *  @tparam _T2  Type of second object.\n+   */\n   template<class _T1, class _T2>\n     struct pair\n     {"}, {"sha": "82ab85e8b4842b1d059eafe28105d2d6ff029a28", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Queue implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n+// 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -70,6 +70,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.\n+   *\n    *  Meets many of the requirements of a\n    *  <a href=\"tables.html#65\">container</a>,\n    *  but does not define anything to do with iterators.  Very few of the\n@@ -326,6 +329,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Sequence  Type of underlying sequence, defaults to vector<_Tp>.\n+   *  @tparam _Compare  Comparison function object type, defaults to \n+   *                    less<_Sequence::value_type>.\n+   *\n    *  This is not a true container, but an @e adaptor.  It holds\n    *  another container, and provides a wrapper interface to that\n    *  container.  The wrapper is what enforces priority-based sorting "}, {"sha": "312e57a4ab95b2e3f0987286fd5a1717374501d8", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -72,16 +72,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup associative_containers\n    *\n+   *  @tparam _Key  Type of key objects.\n+   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Key>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and an\n    *  <a href=\"tables.html#69\">associative container</a> (using unique keys).\n    *\n    *  Sets support bidirectional iterators.\n    *\n-   *  @tparam  _Key  Type of key objects.\n-   *  @tparam  _Compare  Comparison function object type, defaults to less<Key>.\n-   *  @tparam  _Alloc  Allocator type, defaults to allocator<Key>.\n-   *\n    *  The private tree data is declared exactly the same way for set and\n    *  multiset; the distinction is made entirely in how the tree functions are\n    *  called (*_unique versus *_equal, same as the standard)."}, {"sha": "4f61bfbbdf640c1837796e493e3c4721c8ee0d1d", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Stack implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n+// 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -70,6 +70,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.\n+   *\n    *  Meets many of the requirements of a\n    *  <a href=\"tables.html#65\">container</a>,\n    *  but does not define anything to do with iterators.  Very few of the"}, {"sha": "6e229aa9df2d6c1967ee7c7ba174f507dc78012a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -192,6 +192,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup sequences\n    *\n+   *  @tparam _Tp  Type of element.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n+   *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n    *  <a href=\"tables.html#66\">reversible container</a>, and a\n    *  <a href=\"tables.html#67\">sequence</a>, including the"}, {"sha": "bd3e46d892b76b3eb663ae234308b8c1852a0e54", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -77,16 +77,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup unordered_associative_containers\n    *\n-   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n-   *  <a href=\"tables.html#xx\">unordered associative container</a>\n-   *\n    *  @tparam  _Key  Type of key objects.\n    *  @tparam  _Tp  Type of mapped objects.\n    *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.\n    *  @tparam  _Pred  Predicate function object type, defaults\n    *                  to equal_to<_Value>.\n    *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.\n    *\n+   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n+   *  <a href=\"tables.html#xx\">unordered associative container</a>\n+   *\n    * The resulting value type of the container is std::pair<const _Key, _Tp>.\n    *\n    *  Base is _Hashtable, dispatched at compile time via template\n@@ -141,16 +141,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup unordered_associative_containers\n    *\n-   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n-   *  <a href=\"tables.html#xx\">unordered associative container</a>\n-   *\n    *  @tparam  _Key  Type of key objects.\n    *  @tparam  _Tp  Type of mapped objects.\n    *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.\n    *  @tparam  _Pred  Predicate function object type, defaults\n    *                  to equal_to<_Value>.\n    *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.\n    *\n+   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n+   *  <a href=\"tables.html#xx\">unordered associative container</a>\n+   *\n    * The resulting value type of the container is std::pair<const _Key, _Tp>.\n    *\n    *  Base is _Hashtable, dispatched at compile time via template"}, {"sha": "32b606a16cd4ee4017f2372b51455030ad68a905", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -72,9 +72,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup unordered_associative_containers\n    *\n-   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n-   *  <a href=\"tables.html#xx\">unordered associative container</a>\n-   *\n    *  @tparam  _Value  Type of key objects.\n    *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.\n \n@@ -83,6 +80,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.\n    *\n+   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n+   *  <a href=\"tables.html#xx\">unordered associative container</a>\n+   *\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __uset_hashtable.\n    */\n@@ -135,15 +135,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *\n    *  @ingroup unordered_associative_containers\n    *\n-   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n-   *  <a href=\"tables.html#xx\">unordered associative container</a>\n-   *\n    *  @tparam  _Value  Type of key objects.\n    *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.\n    *  @tparam  _Pred  Predicate function object type, defaults\n    *                  to equal_to<_Value>.\n    *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.\n    *\n+   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n+   *  <a href=\"tables.html#xx\">unordered associative container</a>\n+   *\n    *  Base is _Hashtable, dispatched at compile time via template\n    *  alias __umset_hashtable.\n    */"}, {"sha": "58263ce418a2cc098b92ec7588827bc861faa290", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -55,8 +55,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  Sets support random access iterators.\n    *\n-   *  @param  Tp  Type of element. Required to be a complete type.\n-   *  @param  N  Number of elements.\n+   *  @tparam  Tp  Type of element. Required to be a complete type.\n+   *  @tparam  N  Number of elements.\n   */\n   template<typename _Tp, std::size_t _Nm>\n     struct array"}, {"sha": "6a08b28a68ad566beda2a6908726a82fd279b974", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -148,8 +148,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n \n-  /// atomic\n-  /// 29.4.3, Generic atomic type, primary class template.\n+  /**\n+   *  @brief Generic atomic type, primary class template.\n+   *\n+   *  @tparam _Tp  Type to be made atomic, must be trivally copyable.\n+   */\n   template<typename _Tp>\n     struct atomic\n     {"}, {"sha": "098b5b1248c47f628ddfab40466e735134313881", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -55,16 +55,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  The actual work of input and output (for files).\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This class associates both its input and output sequence with an\n    *  external disk file, and maintains a joint file position for both\n    *  sequences.  Many of its semantics are described in terms of similar\n    *  behavior in the Standard C Library's @c FILE streams.\n+   *\n+   *  Requirements on traits_type, specific to this class:\n+   *  - traits_type::pos_type must be fpos<traits_type::state_type>\n+   *  - traits_type::off_type must be streamoff\n+   *  - traits_type::state_type must be Assignable and DefaultConstructible,\n+   *  - traits_type::state_type() must be the initial state for codecvt.\n    */\n-  // Requirements on traits_type, specific to this class:\n-  // traits_type::pos_type must be fpos<traits_type::state_type>\n-  // traits_type::off_type must be streamoff\n-  // traits_type::state_type must be Assignable and DefaultConstructible,\n-  // and traits_type::state_type() must be the initial state for codecvt.\n   template<typename _CharT, typename _Traits>\n     class basic_filebuf : public basic_streambuf<_CharT, _Traits>\n     {\n@@ -411,6 +416,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling input for files.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This class supports reading from named files, using the inherited\n    *  functions from std::basic_istream.  To control the associated\n    *  sequence, an instance of std::basic_filebuf is used, which this page\n@@ -579,6 +588,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling output for files.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This class supports reading from named files, using the inherited\n    *  functions from std::basic_ostream.  To control the associated\n    *  sequence, an instance of std::basic_filebuf is used, which this page\n@@ -752,6 +765,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling input and output for files.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This class supports reading from and writing to named files, using\n    *  the inherited functions from std::basic_iostream.  To control the\n    *  associated sequence, an instance of std::basic_filebuf is used, which"}, {"sha": "abc71206a06108e2d2f276bd27d99c63044f5237", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Input streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,6 +48,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Template class basic_istream.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This is the base class for all input streams.  It provides text\n    *  formatting of all builtin types, and communicates with any class\n    *  derived from basic_streambuf to do the actual input.\n@@ -782,6 +786,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Template class basic_iostream\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This class multiply inherits from the input and output stream classes\n    *  simply to provide a single interface.\n   */"}, {"sha": "eb8b885e17bb53a8b8c3d82865bf308b17d58094", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Output streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,6 +48,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Template class basic_ostream.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This is the base class for all output streams.  It provides text\n    *  formatting of all builtin types, and communicates with any class\n    *  derived from basic_streambuf to do the actual output."}, {"sha": "6237853906f30ce742fb3cea38425e252f2e68ac", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // String based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// 2006, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,6 +48,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  The actual work of input and output (for std::string).\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n    *  This class associates either or both of its input and output sequences\n    *  with a sequence of characters, which can be initialized from, or made\n    *  available as, a @c std::basic_string.  (Paraphrased from [27.7.1]/1.)\n@@ -254,6 +259,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling input for std::string.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n    *  This class supports reading from objects of type std::basic_string,\n    *  using the inherited functions from std::basic_istream.  To control\n    *  the associated sequence, an instance of std::basic_stringbuf is used,\n@@ -364,6 +374,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling output for std::string.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n    *  This class supports writing to objects of type std::basic_string,\n    *  using the inherited functions from std::basic_ostream.  To control\n    *  the associated sequence, an instance of std::basic_stringbuf is used,\n@@ -474,6 +489,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Controlling input and output for std::string.\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n    *  This class supports reading from and writing to objects of type\n    *  std::basic_string, using the inherited functions from\n    *  std::basic_iostream.  To control the associated sequence, an instance"}, {"sha": "9b1dc5599b91866e7d014bff36a5c9407369b4f2", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -1,7 +1,7 @@\n // Stream buffer classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -56,6 +56,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  The actual work of input and output (interface).\n    *  @ingroup io\n    *\n+   *  @tparam _CharT  Type of character stream.\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n    *  This is a base class.  Derived stream buffers each control a\n    *  pair of character sequences:  one for input, and one for output.\n    *"}, {"sha": "b220df3b013b45407b87c0c4fcdf72b801e8316d", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1696 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1699 }\n \n #include <deque>\n "}, {"sha": "94dd71909824d378babcc041cb7095effd728ff5", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1629 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1632 }\n \n #include <deque>\n "}, {"sha": "5950b22a944354aab44f3bd71e8aebbe0b53df96", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1629 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1632 }\n \n #include <deque>\n #include <utility>"}, {"sha": "1abfd7de72f180bceb9147f69ad4ba846d9eb03b", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1780 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1783 }\n \n #include <deque>\n "}, {"sha": "65a6d41201463230d7b036d019fcad83e8ae6152", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1568 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1571 }\n \n #include <list>\n "}, {"sha": "34caa3b5d2f47f156ac92ce85d5b062cee739819", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1524 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n \n #include <list>\n "}, {"sha": "d1709c32ace5d4a7b968cdd07a8fc6a18d49a5b4", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1524 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n \n #include <list>\n #include <utility>"}, {"sha": "2651f3b62ca68ad1b30f5da01fac225e6499f841", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1524 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1527 }\n \n #include <list>\n "}, {"sha": "320f4dd0d693b1a8deb032fa4e2bfb6ed15fbe03", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1233 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1236 }\n \n #include <vector>\n "}, {"sha": "78a6ead9be8ebd95065acbd1d83506e736fd1932", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1163 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1166 }\n \n #include <vector>\n "}, {"sha": "af12c6d08f89b61db2d2802402c4b790e170b9dd", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1163 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1166 }\n \n #include <vector>\n #include <utility>"}, {"sha": "da881801c102f835870d844bb6c6d72fc9d25fc4", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d632488ae0c52c1cd08cc6a94dc2df1276bc3106/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1274 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1277 }\n \n #include <vector>\n "}]}