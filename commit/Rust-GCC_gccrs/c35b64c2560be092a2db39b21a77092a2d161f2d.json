{"sha": "c35b64c2560be092a2db39b21a77092a2d161f2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1YjY0YzI1NjBiZTA5MmEyZGIzOWIyMWE3NzA5MmEyZDE2MWYyZA==", "commit": {"author": {"name": "David Mosberger", "email": "davidm@hpl.hp.com", "date": "2003-05-07T22:29:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-05-07T22:29:33Z"}, "message": "crtbegin.asm (__do_jv_register_classes): Don't forget to preserve gp.\n\n        * config/ia64/crtbegin.asm (__do_jv_register_classes): Don't\n        forget to preserve gp.\n        * config/ia64/crtend.asm (__do_global_ctors_au): Ditto.\n\n        * config/ia64/crtbegin.asm (__do_jv_register_classes): Add missing\n        .prologue directive.\n        Use .skip instead of data8 for .bss section to make Intel\n        Assembler (ias) happy.  Minor whitespace fixups.  Make \"nop 0\"\n        explicit in the .mib bundles and remove the unnecessary stop\n        bits.  Replace local labels with normal labels, to make ias\n        happy.  Don't register __do_global_ctors_aux here, do it in\n        crtend.asm instead.\n\n        * config/ia64/crtend.asm [HAVE_INIT_FINI_ARRAY]: Register\n        __do_global_ctors_aux in .init_array section instead of\n        declaring it as a hidden global.  Replace local labels with\n        ordinary labels to make ias happy.\n\nFrom-SVN: r66584", "tree": {"sha": "dca3dd1a796ef7f7220a101d20224a3807a92820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca3dd1a796ef7f7220a101d20224a3807a92820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c35b64c2560be092a2db39b21a77092a2d161f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35b64c2560be092a2db39b21a77092a2d161f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35b64c2560be092a2db39b21a77092a2d161f2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35b64c2560be092a2db39b21a77092a2d161f2d/comments", "author": null, "committer": null, "parents": [{"sha": "a944ceb94a99f5a271e2bd84a5a922858e5f699f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944ceb94a99f5a271e2bd84a5a922858e5f699f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a944ceb94a99f5a271e2bd84a5a922858e5f699f"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "fb935f1e0d6e0ce40ea01dc9d9c0ef053d0a0362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c35b64c2560be092a2db39b21a77092a2d161f2d", "patch": "@@ -1,3 +1,23 @@\n+2003-05-07  David Mosberger <davidm@hpl.hp.com>\n+\n+        * config/ia64/crtbegin.asm (__do_jv_register_classes): Don't\n+\tforget to preserve gp.\n+        * config/ia64/crtend.asm (__do_global_ctors_au): Ditto.\n+\n+        * config/ia64/crtbegin.asm (__do_jv_register_classes): Add missing\n+        .prologue directive.\n+        Use .skip instead of data8 for .bss section to make Intel\n+        Assembler (ias) happy.  Minor whitespace fixups.  Make \"nop 0\"\n+        explicit in the .mib bundles and remove the unnecessary stop\n+        bits.  Replace local labels with normal labels, to make ias\n+        happy.  Don't register __do_global_ctors_aux here, do it in\n+        crtend.asm instead.\n+\n+        * config/ia64/crtend.asm [HAVE_INIT_FINI_ARRAY]: Register\n+        __do_global_ctors_aux in .init_array section instead of\n+        declaring it as a hidden global.  Replace local labels with\n+        ordinary labels to make ias happy.\n+\n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n         PR c++/10570"}, {"sha": "540cee2801f934af9246fb9fc6ca8f8db3d5add8", "filename": "gcc/config/ia64/crtbegin.asm", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm?ref=c35b64c2560be092a2db39b21a77092a2d161f2d", "patch": "@@ -48,20 +48,20 @@ __dso_handle:\n \tdata8\t__dso_handle\n #else\n \t.section .bss\n+\t.align 8\n __dso_handle:\n-\tdata8\t0\n+\t.skip\t8\n #endif\n \t.hidden __dso_handle\n \n \n #ifdef HAVE_INITFINI_ARRAY\n \n-.section .fini_array,\"a\"\n+.section .fini_array, \"a\"\n \tdata8 @fptr(__do_global_dtors_aux)\n \n-.section .init_array,\"a\"\n+.section .init_array, \"a\"\n \tdata8 @fptr(__do_jv_register_classes)\n-\tdata8 @fptr(__do_global_ctors_aux)\n \n #else /* !HAVE_INITFINI_ARRAY */\n /*\n@@ -88,9 +88,9 @@ __dso_handle:\n \t  ;;\n \t}\n \t{ .mib\n+\t  nop 0\n \t  mov b6 = r2\n \t  br.call.sptk.many b0 = b6\n-\t  ;;\n \t}\n \n /* Likewise for _init.  */\n@@ -106,9 +106,9 @@ __dso_handle:\n \t  ;;\n \t}\n \t{ .mib\n+\t  nop 0\n \t  mov b6 = r2\n \t  br.call.sptk.many b0 = b6\n-\t  ;;\n \t}\n #endif /* !HAVE_INITFINI_ARRAY */\n \n@@ -127,8 +127,7 @@ __do_global_dtors_aux:\n \n \tmov loc2 = gp\n \tnop 0\n-\tbr.sptk.many 1f\n-\t;;\n+\tbr.sptk.many .entry\n #else\n \t/*\n \t\tif (__cxa_finalize)\n@@ -164,15 +163,15 @@ __do_global_dtors_aux:\n \n \tnop 0\n \tnop 0\n-\tbr.sptk.many 1f\n+\tbr.sptk.many .entry\n #endif\n \t/*\n \t\tdo {\n \t\t  dtor_ptr++;\n \t\t  (*(dtor_ptr-1)) ();\n \t\t} while (dtor_ptr);\n \t*/\n-0:\n+.loop:\n \tst8 [loc0] = r15\t\t// update dtor_ptr (in memory)\n \tld8 r17 = [r16], 8\t\t// r17 <- dtor's entry-point\n \tnop 0\n@@ -182,7 +181,7 @@ __do_global_dtors_aux:\n \tmov b6 = r17\n \tbr.call.sptk.many rp = b6\n \n-1:\tld8 r15 = [loc0]\t\t// r15 <- dtor_ptr (gp-relative)\n+.entry:\tld8 r15 = [loc0]\t\t// r15 <- dtor_ptr (gp-relative)\n \t;;\n \tadd r16 = r15, loc2\t\t// r16 <- dtor_ptr (absolute)\n \tadds r15 = 8, r15\n@@ -194,15 +193,16 @@ __do_global_dtors_aux:\n \t;;\n \n \tcmp.ne p6, p0 = r0, r16\n-(p6)\tbr.cond.sptk.few 0b\n+(p6)\tbr.cond.sptk.few .loop\n \tbr.ret.sptk.many rp\n \t.endp __do_global_dtors_aux\n \n \t.align\t32\n \t.proc\t__do_jv_register_classes\n __do_jv_register_classes:\n+\t.prologue\n \t.save ar.pfs, r33\n-\talloc loc1 = ar.pfs, 0, 2, 1, 0\n+\talloc loc1 = ar.pfs, 0, 3, 1, 0\n \tmovl out0 = @gprel(__JCR_LIST__)\n \t;;\n \n@@ -224,15 +224,15 @@ __do_jv_register_classes:\n \n \tld8 r15 = [r14], 8\n \t;;\n-\tld8 gp = [r14]\n+\tnop 0\n \tmov b6 = r15\n \n-\tnop 0\n-\tnop 0\n+\tmov loc2 = gp\n+\tld8 gp = [r14]\n \tbr.call.sptk.many rp = b6\n \t;;\n \n-\tnop 0\n+\tmov gp = loc2\n \tmov rp = loc0\n \tmov ar.pfs = loc1\n "}, {"sha": "885e0f946e525204eef2412f1ee038dd389bb9ed", "filename": "gcc/config/ia64/crtend.asm", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35b64c2560be092a2db39b21a77092a2d161f2d/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtend.asm?ref=c35b64c2560be092a2db39b21a77092a2d161f2d", "patch": "@@ -33,7 +33,12 @@ __DTOR_END__:\n __JCR_END__:\n \tdata8\t0\n \n-#ifndef HAVE_INITFINI_ARRAY\n+#ifdef HAVE_INITFINI_ARRAY\n+\n+.section .init_array, \"a\"\n+\tdata8 @fptr(__do_global_ctors_aux)\n+\n+#else /* !HAVE_INITFINI_ARRAY */\n /*\n  * Fragment of the ELF _init routine that invokes our dtor cleanup.\n  *\n@@ -66,12 +71,6 @@ __JCR_END__:\n \n .text\n \t.align 32\n-#ifdef HAVE_INITFINI_ARRAY\n-\t/* This is referenced from crtbegin.o.  */\n-\t.globl __do_global_ctors_aux\n-\t.type __do_global_ctors_aux,@function\n-\t.hidden __do_global_ctors_aux\n-#endif\n \t.proc __do_global_ctors_aux\n __do_global_ctors_aux:\n \t.prologue\n@@ -80,7 +79,7 @@ __do_global_ctors_aux:\n \t\t  (*p) ();\n \t*/\n \t.save ar.pfs, r34\n-\talloc loc2 = ar.pfs, 0, 4, 0, 0\n+\talloc loc2 = ar.pfs, 0, 5, 0, 0\n \tmovl loc0 = @gprel(__CTOR_END__ - 8)\n \t;;\n \n@@ -93,10 +92,10 @@ __do_global_ctors_aux:\n \t;;\n \n \tcmp.eq p6, p0 = -1, loc3\n-\tnop 0\n-(p6)\tbr.cond.spnt.few 2f\n+\tmov loc4 = gp\n+(p6)\tbr.cond.spnt.few .exit\n \n-0:\tld8 r15 = [loc3], 8\n+.loop:\tld8 r15 = [loc3], 8\n \t;;\n \tld8 gp = [loc3]\n \tmov b6 = r15\n@@ -108,9 +107,9 @@ __do_global_ctors_aux:\n \n \tcmp.ne p6, p0 = -1, loc3\n \tnop 0\n-(p6)\tbr.cond.sptk.few 0b\n+(p6)\tbr.cond.sptk.few .loop\n \n-2:\tnop.m 0\n+.exit:\tmov gp = loc3\n \tmov rp = loc1\n \tmov ar.pfs = loc2\n "}]}