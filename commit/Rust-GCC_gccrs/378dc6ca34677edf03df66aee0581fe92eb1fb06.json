{"sha": "378dc6ca34677edf03df66aee0581fe92eb1fb06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4ZGM2Y2EzNDY3N2VkZjAzZGY2NmFlZTA1ODFmZTkyZWIxZmIwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T15:34:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T15:34:11Z"}, "message": "[multiple changes]\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* atree.ads, atree.adb (Ekind_In): New 10 and 11 parameter versions.\n\t* contracts.ads, contracts.adb (Analyze_Initial_Declaration_Contract):\n\tNew routine.\n\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body):\n\tAnalyze the contract of the initial declaration.\n\t(Analyze_Subprogram_Body_Helper): Analyze the contract of the\n\tinitial declaration.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Analyze the contract\n\tof the initial declaration.\n\t* sem_ch9.adb (Analyze_Entry_Body): Analyze the contract of\n\tthe initial declaration.\n\t(Analyze_Protected_Body): Analyze\n\tthe contract of the initial declaration.\n\t(Analyze_Task_Body): Analyze the contract of the initial declaration.\n\t* sem_prag.adb (Add_Entity_To_Name_Buffer): Use \"type\" rather\n\tthan \"unit\" as it makes the error messages sound better.\n\t(Add_Item_To_Name_Buffer): Update comment on usage. The routine\n\tnow supports discriminants and current instances of concurrent\n\ttypes.\n\t(Analyze_Depends_In_Decl_Part): Install the discriminants\n\tof a task type.\n\t(Analyze_Global_In_Decl_Part): Install the discriminants of a task type.\n\t(Analyze_Global_Item): Add processing for current instances of\n\tconcurrent types and include discriminants as valid global items.\n\t(Analyze_Input_Output): Discriminants and current instances of\n\tconcurrent types are now valid items. Update various error messages.\n\t(Check_Usage): Current instances of protected and task types behaves\n\tas formal parameters.\n\t(Collect_Subprogram_Inputs_Outputs): There is\n\tno longer need to manually analyze [Refined_]Global thanks to\n\tfreezing of initial declaration contracts.  Add processing for\n\tthe current instance of a concurrent type.\n\t(Find_Role): Add categorizations for discriminants, protected and task\n\ttypes.\n\t(Is_CCT_Instance): New routine.\n\t(Match_Items): Update the comment on usage. Update internal comments.\n\t* sem_prag.ads (Collect_Subprogram_Inputs_Outputs): Update the\n\tcomment on usage.\n\t* sem_util.adb (Entity_Of): Ensure that the entity is an object\n\twhen traversing a potential renaming chain.\n\t(Fix_Msg): Use \"type\" rather than \"unit\" as it makes the error messages\n\tsound better.\n\t* sem_util.ads (Fix_Msg): Update the comment on usage.\n\n2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n\n\t* par.adb (Par): Do not generate an error when generating\n\tSCIL for predefined units or new children of system and co.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.adb: Access_Disp_Table applies to a private\n\textension.\n\nFrom-SVN: r229373", "tree": {"sha": "671be3274034e31dc8d5e24152ade37aafc63c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/671be3274034e31dc8d5e24152ade37aafc63c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378dc6ca34677edf03df66aee0581fe92eb1fb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378dc6ca34677edf03df66aee0581fe92eb1fb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378dc6ca34677edf03df66aee0581fe92eb1fb06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378dc6ca34677edf03df66aee0581fe92eb1fb06/comments", "author": null, "committer": null, "parents": [{"sha": "e802444145fa89d9f82a2e5302a324340d0622c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e802444145fa89d9f82a2e5302a324340d0622c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e802444145fa89d9f82a2e5302a324340d0622c9"}], "stats": {"total": 571, "additions": 521, "deletions": 50}, "files": [{"sha": "cec92831d622635d42c6acb3138aa414c70d3154", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -1,3 +1,59 @@\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* atree.ads, atree.adb (Ekind_In): New 10 and 11 parameter versions.\n+\t* contracts.ads, contracts.adb (Analyze_Initial_Declaration_Contract):\n+\tNew routine.\n+\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body):\n+\tAnalyze the contract of the initial declaration.\n+\t(Analyze_Subprogram_Body_Helper): Analyze the contract of the\n+\tinitial declaration.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Analyze the contract\n+\tof the initial declaration.\n+\t* sem_ch9.adb (Analyze_Entry_Body): Analyze the contract of\n+\tthe initial declaration.\n+\t(Analyze_Protected_Body): Analyze\n+\tthe contract of the initial declaration.\n+\t(Analyze_Task_Body): Analyze the contract of the initial declaration.\n+\t* sem_prag.adb (Add_Entity_To_Name_Buffer): Use \"type\" rather\n+\tthan \"unit\" as it makes the error messages sound better.\n+\t(Add_Item_To_Name_Buffer): Update comment on usage. The routine\n+\tnow supports discriminants and current instances of concurrent\n+\ttypes.\n+\t(Analyze_Depends_In_Decl_Part): Install the discriminants\n+\tof a task type.\n+\t(Analyze_Global_In_Decl_Part): Install the discriminants of a task type.\n+\t(Analyze_Global_Item): Add processing for current instances of\n+\tconcurrent types and include discriminants as valid global items.\n+\t(Analyze_Input_Output): Discriminants and current instances of\n+\tconcurrent types are now valid items. Update various error messages.\n+\t(Check_Usage): Current instances of protected and task types behaves\n+\tas formal parameters.\n+\t(Collect_Subprogram_Inputs_Outputs): There is\n+\tno longer need to manually analyze [Refined_]Global thanks to\n+\tfreezing of initial declaration contracts.  Add processing for\n+\tthe current instance of a concurrent type.\n+\t(Find_Role): Add categorizations for discriminants, protected and task\n+\ttypes.\n+\t(Is_CCT_Instance): New routine.\n+\t(Match_Items): Update the comment on usage. Update internal comments.\n+\t* sem_prag.ads (Collect_Subprogram_Inputs_Outputs): Update the\n+\tcomment on usage.\n+\t* sem_util.adb (Entity_Of): Ensure that the entity is an object\n+\twhen traversing a potential renaming chain.\n+\t(Fix_Msg): Use \"type\" rather than \"unit\" as it makes the error messages\n+\tsound better.\n+\t* sem_util.ads (Fix_Msg): Update the comment on usage.\n+\n+2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par.adb (Par): Do not generate an error when generating\n+\tSCIL for predefined units or new children of system and co.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.adb: Access_Disp_Table applies to a private\n+\textension.\n+\n 2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_Generalized_Indexing): In ASIS mode, when"}, {"sha": "b03da9141655591118649a4c929c92bf7a094f3f", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -1125,6 +1125,60 @@ package body Atree is\n              T = V9;\n    end Ekind_In;\n \n+   function Ekind_In\n+     (T   : Entity_Kind;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return T = V1 or else\n+             T = V2 or else\n+             T = V3 or else\n+             T = V4 or else\n+             T = V5 or else\n+             T = V6 or else\n+             T = V7 or else\n+             T = V8 or else\n+             T = V9 or else\n+             T = V10;\n+   end Ekind_In;\n+\n+   function Ekind_In\n+     (T   : Entity_Kind;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind;\n+      V11 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return T = V1  or else\n+             T = V2  or else\n+             T = V3  or else\n+             T = V4  or else\n+             T = V5  or else\n+             T = V6  or else\n+             T = V7  or else\n+             T = V8  or else\n+             T = V9  or else\n+             T = V10 or else\n+             T = V11;\n+   end Ekind_In;\n+\n    function Ekind_In\n      (E  : Entity_Id;\n       V1 : Entity_Kind;\n@@ -1225,6 +1279,42 @@ package body Atree is\n       return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9);\n    end Ekind_In;\n \n+   function Ekind_In\n+     (E   : Entity_Id;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10);\n+   end Ekind_In;\n+\n+   function Ekind_In\n+     (E   : Entity_Id;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind;\n+      V11 : Entity_Kind) return Boolean\n+   is\n+   begin\n+      return\n+        Ekind_In (Ekind (E), V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11);\n+   end Ekind_In;\n+\n    ------------------------\n    -- Set_Reporting_Proc --\n    ------------------------"}, {"sha": "56763c74d273d8fe26e33a2644b77872a01f399e", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -802,6 +802,33 @@ package Atree is\n       V8 : Entity_Kind;\n       V9 : Entity_Kind) return Boolean;\n \n+   function Ekind_In\n+     (E   : Entity_Id;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind) return Boolean;\n+\n+   function Ekind_In\n+     (E   : Entity_Id;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind;\n+      V11 : Entity_Kind) return Boolean;\n+\n    function Ekind_In\n      (T  : Entity_Kind;\n       V1 : Entity_Kind;\n@@ -870,6 +897,33 @@ package Atree is\n       V8 : Entity_Kind;\n       V9 : Entity_Kind) return Boolean;\n \n+   function Ekind_In\n+     (T   : Entity_Kind;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind) return Boolean;\n+\n+   function Ekind_In\n+     (T   : Entity_Kind;\n+      V1  : Entity_Kind;\n+      V2  : Entity_Kind;\n+      V3  : Entity_Kind;\n+      V4  : Entity_Kind;\n+      V5  : Entity_Kind;\n+      V6  : Entity_Kind;\n+      V7  : Entity_Kind;\n+      V8  : Entity_Kind;\n+      V9  : Entity_Kind;\n+      V10 : Entity_Kind;\n+      V11 : Entity_Kind) return Boolean;\n+\n    pragma Inline (Ekind_In);\n    --  Inline all above functions\n "}, {"sha": "30318dc63f67d3973c2ed7c6765fa1cc32d6d3d2", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -578,6 +578,39 @@ package body Contracts is\n       end if;\n    end Analyze_Entry_Or_Subprogram_Contract;\n \n+   ------------------------------------------\n+   -- Analyze_Initial_Declaration_Contract --\n+   ------------------------------------------\n+\n+   procedure Analyze_Initial_Declaration_Contract (Body_Decl : Node_Id) is\n+      Spec_Id : constant Entity_Id := Unique_Defining_Entity (Body_Decl);\n+\n+   begin\n+      --  Note that stubs are excluded because the compiler always analyzes the\n+      --  proper body when a stub is encountered.\n+\n+      if Nkind (Body_Decl) = N_Entry_Body then\n+         Analyze_Entry_Or_Subprogram_Contract (Spec_Id);\n+\n+      elsif Nkind (Body_Decl) = N_Package_Body then\n+         Analyze_Package_Contract (Spec_Id);\n+\n+      elsif Nkind (Body_Decl) = N_Protected_Body then\n+         Analyze_Protected_Contract (Spec_Id);\n+\n+      elsif Nkind (Body_Decl) = N_Subprogram_Body then\n+         if Present (Corresponding_Spec (Body_Decl)) then\n+            Analyze_Entry_Or_Subprogram_Contract (Spec_Id);\n+         end if;\n+\n+      elsif Nkind (Body_Decl) = N_Task_Body then\n+         Analyze_Task_Contract (Spec_Id);\n+\n+      else\n+         raise Program_Error;\n+      end if;\n+   end Analyze_Initial_Declaration_Contract;\n+\n    -----------------------------\n    -- Analyze_Object_Contract --\n    -----------------------------"}, {"sha": "21c609d5b2adbe7ac35fbb8522f642b49f86b105", "filename": "gcc/ada/contracts.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fcontracts.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fcontracts.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.ads?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -58,7 +58,7 @@ package Contracts is\n    --    Volatile_Function\n \n    procedure Analyze_Enclosing_Package_Body_Contract (Body_Decl : Node_Id);\n-   --  Analyze the contract of the nearest package body (if any) enclosing\n+   --  Analyze the contract of the nearest package body (if any) which encloses\n    --  package or subprogram body Body_Decl.\n \n    procedure Analyze_Entry_Or_Subprogram_Body_Contract (Body_Id : Entity_Id);\n@@ -86,6 +86,10 @@ package Contracts is\n    --    Precondition\n    --    Test_Case\n \n+   procedure Analyze_Initial_Declaration_Contract (Body_Decl : Node_Id);\n+   --  Analyze the contract of the initial declaration of entry body, package\n+   --  body, protected body, subprogram body or task body Body_Decl.\n+\n    procedure Analyze_Object_Contract (Obj_Id : Entity_Id);\n    --  Analyze all delayed pragmas chained on the contract of object Obj_Id as\n    --  if they appeared at the end of the declarative region. The pragmas to be"}, {"sha": "8769631e4c26f88564d0dd28eb13360902c366e3", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -705,6 +705,7 @@ package body Einfo is\n    function Access_Disp_Table (Id : E) return L is\n    begin\n       pragma Assert (Ekind_In (Id, E_Record_Type,\n+                                   E_Record_Type_With_Private,\n                                    E_Record_Subtype));\n       return Elist16 (Implementation_Base_Type (Id));\n    end Access_Disp_Table;"}, {"sha": "dc57387627681912857ad6a1e31cc868b0bb1d9a", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -1577,11 +1577,14 @@ begin\n                --  versions of these files. Another exception is System.RPC\n                --  and its children. This allows a user to supply their own\n                --  communication layer.\n+               --  Similarly we do not generate an error in CodePeer mode\n+               --  to allow users to analyze third party compier packages.\n \n                if Comp_Unit_Node /= Error\n                  and then Operating_Mode = Generate_Code\n                  and then Current_Source_Unit = Main_Unit\n                  and then not GNAT_Mode\n+                 and then not CodePeer_Mode\n                then\n                   declare\n                      Uname : constant String :="}, {"sha": "f6ecdcf579095f98af0b999563c02a98f0e8da5f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -1378,6 +1378,15 @@ package body Sem_Ch6 is\n             Analyze_Aspect_Specifications_On_Body_Or_Stub (N);\n          end if;\n \n+         --  A generic subprogram body \"freezes\" the contract of its initial\n+         --  declaration. This analysis depends on attribute Corresponding_Spec\n+         --  being set. Only bodies coming from source should cause this type\n+         --  of \"freezing\".\n+\n+         if Comes_From_Source (N) then\n+            Analyze_Initial_Declaration_Contract (N);\n+         end if;\n+\n          Analyze_Declarations (Declarations (N));\n          Check_Completion;\n \n@@ -3756,6 +3765,14 @@ package body Sem_Ch6 is\n          Analyze_Aspect_Specifications_On_Body_Or_Stub (N);\n       end if;\n \n+      --  A subprogram body \"freezes\" the contract of its initial declaration.\n+      --  This analysis depends on attribute Corresponding_Spec being set. Only\n+      --  bodies coming from source should cause this type of \"freezing\".\n+\n+      if Comes_From_Source (N) then\n+         Analyze_Initial_Declaration_Contract (N);\n+      end if;\n+\n       Analyze_Declarations (Declarations (N));\n \n       --  Verify that the SPARK_Mode of the body agrees with that of its spec"}, {"sha": "229d29dbe3a593794b53b71849575a7e6a6b1d7d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -763,6 +763,14 @@ package body Sem_Ch7 is\n          Declare_Inherited_Private_Subprograms (Spec_Id);\n       end if;\n \n+      --  A package body \"freezes\" the contract of its initial declaration.\n+      --  This analysis depends on attribute Corresponding_Spec being set. Only\n+      --  bodies coming from source shuld cause this type of \"freezing\".\n+\n+      if Comes_From_Source (N) then\n+         Analyze_Initial_Declaration_Contract (N);\n+      end if;\n+\n       if Present (Declarations (N)) then\n          Analyze_Declarations (Declarations (N));\n          Inspect_Deferred_Constant_Completion (Declarations (N));"}, {"sha": "2b3e42bf0982c3be6533e601820d0c0afc59a97c", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -1354,6 +1354,11 @@ package body Sem_Ch9 is\n            (Sloc (N), Entry_Name, P_Type, N, Decls);\n       end if;\n \n+      --  An entry body \"freezes\" the contract of its initial declaration. This\n+      --  analysis depends on attribute Corresponding_Body being set.\n+\n+      Analyze_Initial_Declaration_Contract (N);\n+\n       if Present (Decls) then\n          Analyze_Declarations (Decls);\n          Inspect_Deferred_Constant_Completion (Decls);\n@@ -1811,11 +1816,14 @@ package body Sem_Ch9 is\n       Set_Corresponding_Body (Parent (Spec_Id), Body_Id);\n       Set_Has_Completion (Spec_Id);\n       Install_Declarations (Spec_Id);\n-\n       Expand_Protected_Body_Declarations (N, Spec_Id);\n-\n       Last_E := Last_Entity (Spec_Id);\n \n+      --  A protected body \"freezes\" the contract of its initial declaration.\n+      --  This analysis depends on attribute Corresponding_Spec being set.\n+\n+      Analyze_Initial_Declaration_Contract (N);\n+\n       Analyze_Declarations (Declarations (N));\n \n       --  For visibility purposes, all entities in the body are private. Set\n@@ -2818,9 +2826,9 @@ package body Sem_Ch9 is\n \n    begin\n       --  A task body \"freezes\" the contract of the nearest enclosing package\n-      --  body. This ensures that any annotations referenced by the contract\n-      --  of an entry or subprogram body declared within the current protected\n-      --  body are available.\n+      --  body. This ensures that annotations referenced by the contract of an\n+      --  entry or subprogram body declared within the current protected body\n+      --  are available.\n \n       Analyze_Enclosing_Package_Body_Contract (N);\n \n@@ -2884,6 +2892,11 @@ package body Sem_Ch9 is\n       Install_Declarations (Spec_Id);\n       Last_E := Last_Entity (Spec_Id);\n \n+      --  A task body \"freezes\" the contract of its initial declaration. This\n+      --  analysis depends on attribute Corresponding_Spec being set.\n+\n+      Analyze_Initial_Declaration_Contract (N);\n+\n       Analyze_Declarations (Decls);\n       Inspect_Deferred_Constant_Completion (Decls);\n "}, {"sha": "c7c3f377ba839f7c5f2fb8df41e0f26df93a0be1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 227, "deletions": 39, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -237,6 +237,11 @@ package body Sem_Prag is\n    --  Determine whether dependency clause Clause is surrounded by extra\n    --  parentheses. If this is the case, issue an error message.\n \n+   function Is_CCT_Instance (Ref : Node_Id) return Boolean;\n+   --  Subsidiary to the analysis of pragmas [Refined_]Depends and [Refined_]\n+   --  Global. Determine whether reference Ref denotes the current instance of\n+   --  a concurrent type.\n+\n    function Is_Unconstrained_Or_Tagged_Item (Item : Entity_Id) return Boolean;\n    --  Subsidiary to Collect_Subprogram_Inputs_Outputs and the analysis of\n    --  pragma Depends. Determine whether the type of dependency item Item is\n@@ -520,11 +525,14 @@ package body Sem_Prag is\n       --  to the name buffer. The individual kinds are as follows:\n       --    E_Abstract_State           - \"state\"\n       --    E_Constant                 - \"constant\"\n+      --    E_Discriminant             - \"discriminant\"\n       --    E_Generic_In_Out_Parameter - \"generic parameter\"\n       --    E_Generic_Out_Parameter    - \"generic parameter\"\n       --    E_In_Parameter             - \"parameter\"\n       --    E_In_Out_Parameter         - \"parameter\"\n       --    E_Out_Parameter            - \"parameter\"\n+      --    E_Protected_Type           - \"current instance of protected type\"\n+      --    E_Task_Type                - \"current instance of task type\"\n       --    E_Variable                 - \"global\"\n \n       procedure Analyze_Dependency_Clause\n@@ -571,6 +579,9 @@ package body Sem_Prag is\n          elsif Ekind (Item_Id) = E_Constant then\n             Add_Str_To_Name_Buffer (\"constant\");\n \n+         elsif Ekind (Item_Id) = E_Discriminant then\n+            Add_Str_To_Name_Buffer (\"discriminant\");\n+\n          elsif Ekind_In (Item_Id, E_Generic_In_Out_Parameter,\n                                   E_Generic_In_Parameter)\n          then\n@@ -579,6 +590,12 @@ package body Sem_Prag is\n          elsif Is_Formal (Item_Id) then\n             Add_Str_To_Name_Buffer (\"parameter\");\n \n+         elsif Ekind (Item_Id) = E_Protected_Type then\n+            Add_Str_To_Name_Buffer (\"current instance of protected type\");\n+\n+         elsif Ekind (Item_Id) = E_Task_Type then\n+            Add_Str_To_Name_Buffer (\"current instance of task type\");\n+\n          elsif Ekind (Item_Id) = E_Variable then\n             Add_Str_To_Name_Buffer (\"global\");\n \n@@ -811,13 +828,27 @@ package body Sem_Prag is\n                if Present (Item_Id) then\n                   if Ekind_In (Item_Id, E_Abstract_State,\n                                         E_Constant,\n+                                        E_Discriminant,\n                                         E_Generic_In_Out_Parameter,\n                                         E_Generic_In_Parameter,\n                                         E_In_Parameter,\n                                         E_In_Out_Parameter,\n                                         E_Out_Parameter,\n+                                        E_Protected_Type,\n+                                        E_Task_Type,\n                                         E_Variable)\n                   then\n+                     --  The item denotes a concurrent type, but it is not the\n+                     --  current instance of an enclosing concurrent type.\n+\n+                     if Ekind_In (Item_Id, E_Protected_Type, E_Task_Type)\n+                       and then not Is_CCT_Instance (Item)\n+                     then\n+                        SPARK_Msg_N\n+                          (\"invalid use of subtype mark in dependency \"\n+                           & \"relation\", Item);\n+                     end if;\n+\n                      --  Ensure that the item fulfils its role as input and/or\n                      --  output as specified by pragma Global or the enclosing\n                      --  context.\n@@ -923,16 +954,17 @@ package body Sem_Prag is\n \n                   else\n                      SPARK_Msg_N\n-                       (\"item must denote parameter, variable, or state\",\n-                        Item);\n+                       (\"item must denote parameter, variable, state or \"\n+                        & \"current instance of concurren type\", Item);\n                   end if;\n \n                --  All other input/output items are illegal\n                --  (SPARK RM 6.1.5(1)). This is a syntax error, always report.\n \n                else\n                   Error_Msg_N\n-                    (\"item must denote parameter, variable, or state\", Item);\n+                    (\"item must denote parameter, variable, state or current \"\n+                     & \"instance of concurrent type\", Item);\n                end if;\n             end if;\n          end Analyze_Input_Output;\n@@ -1059,6 +1091,9 @@ package body Sem_Prag is\n             elsif Ekind (Item_Id) = E_Constant then\n                Item_Is_Input := True;\n \n+            elsif Ekind (Item_Id) = E_Discriminant then\n+               Item_Is_Input := True;\n+\n             --  Generic parameter cases\n \n             elsif Ekind (Item_Id) = E_Generic_In_Parameter then\n@@ -1098,6 +1133,29 @@ package body Sem_Prag is\n                   Item_Is_Output := True;\n                end if;\n \n+            --  Protected types\n+\n+            elsif Ekind (Item_Id) = E_Protected_Type then\n+\n+               --  A protected type acts as a formal parameter of mode IN when\n+               --  it applies to a protected function.\n+\n+               if Ekind (Spec_Id) = E_Function then\n+                  Item_Is_Input := True;\n+\n+               --  Otherwise the protected type acts as a formal of mode IN OUT\n+\n+               else\n+                  Item_Is_Input  := True;\n+                  Item_Is_Output := True;\n+               end if;\n+\n+            --  Task types\n+\n+            elsif Ekind (Item_Id) = E_Task_Type then\n+               Item_Is_Input  := True;\n+               Item_Is_Output := True;\n+\n             --  Variable case\n \n             else pragma Assert (Ekind (Item_Id) = E_Variable);\n@@ -1303,7 +1361,12 @@ package body Sem_Prag is\n             if Present (Item_Id)\n               and then not Contains (Used_Items, Item_Id)\n             then\n-               if Is_Formal (Item_Id) then\n+               --  The current instance of a concurrent type behaves as a\n+               --  formal parameter (SPARK RM 6.1.4).\n+\n+               if Is_Formal (Item_Id)\n+                 or else Ekind_In (Item_Id, E_Protected_Type, E_Task_Type)\n+               then\n                   Usage_Error (Item_Id);\n \n                --  States and global objects are not used properly only when\n@@ -1658,9 +1721,13 @@ package body Sem_Prag is\n                Push_Scope (Spec_Id);\n \n                if Ekind (Spec_Id) = E_Task_Type then\n-                  null;\n+                  if Has_Discriminants (Spec_Id) then\n+                     Install_Discriminants (Spec_Id);\n+                  end if;\n+\n                elsif Is_Generic_Subprogram (Spec_Id) then\n                   Install_Generic_Formals (Spec_Id);\n+\n                else\n                   Install_Formals (Spec_Id);\n                end if;\n@@ -1902,20 +1969,68 @@ package body Sem_Prag is\n                      return;\n                   end if;\n \n+               --  A global item may denote a concurrent type as long as it is\n+               --  the current instance of an enclosing concurrent type\n+               --  (SPARK RM 6.1.4).\n+\n+               elsif Ekind_In (Item_Id, E_Protected_Type, E_Task_Type) then\n+                  if Is_CCT_Instance (Item) then\n+\n+                     --  Pragma [Refined_]Global associated with a protected\n+                     --  subprogram cannot mention the current instance of a\n+                     --  protected type because the instance behaves as a\n+                     --  formal parameter.\n+\n+                     if Ekind (Item_Id) = E_Protected_Type\n+                       and then Scope (Spec_Id) = Item_Id\n+                     then\n+                        Error_Msg_Name_1 := Chars (Item_Id);\n+                        SPARK_Msg_NE\n+                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                           & \"cannot reference current instance of protected \"\n+                           & \"type %\"), Item, Spec_Id);\n+                        return;\n+\n+                     --  Pragma [Refined_]Global associated with a task type\n+                     --  cannot mention the current instance of a task type\n+                     --  because the instance behaves as a formal parameter.\n+\n+                     elsif Ekind (Item_Id) = E_Task_Type\n+                       and then Spec_Id = Item_Id\n+                     then\n+                        Error_Msg_Name_1 := Chars (Item_Id);\n+                        SPARK_Msg_NE\n+                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                           & \"cannot reference current instance of task type \"\n+                           & \"%\"), Item, Spec_Id);\n+                        return;\n+                     end if;\n+\n+                  --  Otherwise the global item denotes a subtype mark that is\n+                  --  not a current instance.\n+\n+                  else\n+                     SPARK_Msg_N\n+                       (\"invalid use of subtype mark in global list\", Item);\n+                     return;\n+                  end if;\n+\n                --  A formal object may act as a global item inside a generic\n \n                elsif Is_Formal_Object (Item_Id) then\n                   null;\n \n-               --  The only legal references are those to abstract states and\n-               --  objects (SPARK RM 6.1.4(4)).\n+               --  The only legal references are those to abstract states,\n+               --  discriminants and objects (SPARK RM 6.1.4(4)).\n \n                elsif not Ekind_In (Item_Id, E_Abstract_State,\n                                             E_Constant,\n+                                            E_Discriminant,\n                                             E_Variable)\n                then\n                   SPARK_Msg_N\n-                    (\"global item must denote object or state\", Item);\n+                    (\"global item must denote object, state or current \"\n+                     & \"instance of concurrent type\", Item);\n                   return;\n                end if;\n \n@@ -1971,15 +2086,28 @@ package body Sem_Prag is\n \n                elsif Ekind (Item_Id) = E_Constant then\n \n-                  --  A constant is read-only item, therefore it cannot act as\n-                  --  an output.\n+                  --  A constant is a read-only item, therefore it cannot act\n+                  --  as an output.\n \n                   if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n                      SPARK_Msg_NE\n                        (\"constant & cannot act as output\", Item, Item_Id);\n                      return;\n                   end if;\n \n+               --  Discriminant related checks\n+\n+               elsif Ekind (Item_Id) = E_Discriminant then\n+\n+                  --  A discriminant is a read-only item, therefore it cannot\n+                  --  act as an output.\n+\n+                  if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n+                     SPARK_Msg_NE\n+                       (\"discriminant & cannot act as output\", Item, Item_Id);\n+                     return;\n+                  end if;\n+\n                --  Variable related checks. These are only relevant when\n                --  SPARK_Mode is on as they are not standard Ada legality\n                --  rules.\n@@ -2025,7 +2153,9 @@ package body Sem_Prag is\n             --  (SPARK RM 6.1.4(4)).\n \n             else\n-               Error_Msg_N (\"global item must denote object or state\", Item);\n+               Error_Msg_N\n+                 (\"global item must denote object, state or current instance \"\n+                  & \"of concurrent type\", Item);\n                return;\n             end if;\n \n@@ -2286,9 +2416,13 @@ package body Sem_Prag is\n             Push_Scope (Spec_Id);\n \n             if Ekind (Spec_Id) = E_Task_Type then\n-               null;\n+               if Has_Discriminants (Spec_Id) then\n+                  Install_Discriminants (Spec_Id);\n+               end if;\n+\n             elsif Is_Generic_Subprogram (Spec_Id) then\n                Install_Generic_Formals (Spec_Id);\n+\n             else\n                Install_Formals (Spec_Id);\n             end if;\n@@ -20040,7 +20174,7 @@ package body Sem_Prag is\n                      Add_Str_To_Name_Buffer (\"package\");\n \n                   elsif Ekind_In (E, E_Protected_Body, E_Protected_Type) then\n-                     Add_Str_To_Name_Buffer (\"protected unit\");\n+                     Add_Str_To_Name_Buffer (\"protected type\");\n \n                   elsif Ekind_In (E, E_Function,\n                                      E_Generic_Function,\n@@ -20052,7 +20186,7 @@ package body Sem_Prag is\n \n                   else\n                      pragma Assert (Ekind_In (E, E_Task_Body, E_Task_Type));\n-                     Add_Str_To_Name_Buffer (\"task unit\");\n+                     Add_Str_To_Name_Buffer (\"task type\");\n                   end if;\n                end Add_Entity_To_Name_Buffer;\n \n@@ -23030,17 +23164,19 @@ package body Sem_Prag is\n          --    1) Both items denote null\n          --    2) Dep_Item denotes null and Ref_Item is Empty (special case)\n          --    3) Both items denote attribute 'Result\n-         --    4) Both items denote the same formal parameter\n-         --    5) Both items denote the same object\n-         --    6) Dep_Item is an abstract state with visible null refinement\n+         --    4) Both items denote the same object\n+         --    5) Both items denote the same formal parameter\n+         --    6) Both items denote the same current instance of a type\n+         --    7) Both items denote the same discriminant\n+         --    8) Dep_Item is an abstract state with visible null refinement\n          --       and Ref_Item denotes null.\n-         --    7) Dep_Item is an abstract state with visible null refinement\n+         --    9) Dep_Item is an abstract state with visible null refinement\n          --       and Ref_Item is Empty (special case).\n-         --    8) Dep_Item is an abstract state with visible non-null\n+         --   10) Dep_Item is an abstract state with visible non-null\n          --       refinement and Ref_Item denotes one of its constituents.\n-         --    9) Dep_Item is an abstract state without a visible refinement\n+         --   11) Dep_Item is an abstract state without a visible refinement\n          --       and Ref_Item denotes the same state.\n-         --  When scenario 8 is in effect, the entity of the abstract state\n+         --  When scenario 10 is in effect, the entity of the abstract state\n          --  denoted by Dep_Item is added to list Refined_States.\n \n          procedure Record_Item (Item_Id : Entity_Id);\n@@ -23127,7 +23263,8 @@ package body Sem_Prag is\n             then\n                Matched := True;\n \n-            --  Abstract states, formal parameters and objects\n+            --  Abstract states, current instances of concurrent types,\n+            --  discriminants, formal parameters and objects.\n \n             elsif Is_Entity_Name (Dep_Item) then\n \n@@ -23175,7 +23312,8 @@ package body Sem_Prag is\n                      Matched := True;\n                   end if;\n \n-               --  A formal parameter or an object matches itself\n+               --  A current instance of a concurrent type, discriminant,\n+               --  formal parameter or an object matches itself.\n \n                elsif Is_Entity_Name (Ref_Item)\n                  and then Entity_Of (Ref_Item) = Dep_Item_Id\n@@ -26364,7 +26502,7 @@ package body Sem_Prag is\n       Depends   : Node_Id;\n       Formal    : Entity_Id;\n       Global    : Node_Id;\n-      List      : Node_Id;\n+      Typ       : Entity_Id;\n \n    --  Start of processing for Collect_Subprogram_Inputs_Outputs\n \n@@ -26425,21 +26563,7 @@ package body Sem_Prag is\n \n       if Present (Global) then\n          Global_Seen := True;\n-         List := Expression (Get_Argument (Global, Spec_Id));\n-\n-         --  The pragma may not have been analyzed because of the arbitrary\n-         --  declaration order of aspects. Make sure that it is analyzed for\n-         --  the purposes of item extraction.\n-\n-         if not Analyzed (List) then\n-            if Pragma_Name (Global) = Name_Refined_Global then\n-               Analyze_Refined_Global_In_Decl_Part (Global);\n-            else\n-               Analyze_Global_In_Decl_Part (Global);\n-            end if;\n-         end if;\n-\n-         Collect_Global_List (List);\n+         Collect_Global_List (Expression (Get_Argument (Global, Spec_Id)));\n \n       --  When the related subprogram lacks pragma [Refined_]Global, fall back\n       --  to [Refined_]Depends if the caller requests this behavior. Synthesize\n@@ -26463,6 +26587,45 @@ package body Sem_Prag is\n             Collect_Dependency_Clause (Clauses);\n          end if;\n       end if;\n+\n+      if Ekind (Scope (Spec_Id)) = E_Protected_Type then\n+         Typ := Scope (Spec_Id);\n+\n+         --  A single protected type declaration does not have a current\n+         --  instance because the type is technically an object.\n+\n+         if Is_Single_Concurrent_Type_Declaration (Declaration_Node (Typ)) then\n+            null;\n+\n+         --  Otherwise the current instance of the protected type acts as a\n+         --  formal parameter of mode IN for functions and IN OUT for entries\n+         --  and procedures (SPARK RM 6.1.4).\n+\n+         else\n+            Append_New_Elmt (Typ, Subp_Inputs);\n+\n+            if Ekind_In (Spec_Id, E_Entry, E_Entry_Family, E_Procedure) then\n+               Append_New_Elmt (Typ, Subp_Outputs);\n+            end if;\n+         end if;\n+\n+      elsif Ekind (Spec_Id) = E_Task_Type then\n+         Typ := Spec_Id;\n+\n+         --  A single task type declaration does not have a current instance\n+         --  because the type is technically an object.\n+\n+         if Is_Single_Concurrent_Type_Declaration (Declaration_Node (Typ)) then\n+            null;\n+\n+         --  Otherwise the current instance of the task type acts as a formal\n+         --  parameter of mode IN OUT (SPARK RM 6.1.4).\n+\n+         else\n+            Append_New_Elmt (Typ, Subp_Inputs);\n+            Append_New_Elmt (Typ, Subp_Outputs);\n+         end if;\n+      end if;\n    end Collect_Subprogram_Inputs_Outputs;\n \n    ---------------------------------\n@@ -27022,6 +27185,31 @@ package body Sem_Prag is\n       return Add_Config_Static_String (Arg);\n    end Is_Config_Static_String;\n \n+   ---------------------\n+   -- Is_CCT_Instance --\n+   ---------------------\n+\n+   function Is_CCT_Instance (Ref : Node_Id) return Boolean is\n+      Ref_Id : constant Entity_Id := Entity (Ref);\n+      S      : Entity_Id;\n+\n+   begin\n+      --  Climb the scope chain looking for an enclosing concurrent type that\n+      --  matches the referenced entity.\n+\n+      S := Current_Scope;\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Ekind_In (S, E_Protected_Type, E_Task_Type) and then S = Ref_Id\n+         then\n+            return True;\n+         end if;\n+\n+         S := Scope (S);\n+      end loop;\n+\n+      return False;\n+   end Is_CCT_Instance;\n+\n    -------------------------------\n    -- Is_Elaboration_SPARK_Mode --\n    -------------------------------"}, {"sha": "a4e0bd843c06a9d671b9465dabe777d66ab14e32", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -300,9 +300,10 @@ package Sem_Prag is\n    --  and Subp_Outputs (outputs). The inputs and outputs are gathered from:\n    --    1) The formal parameters of the subprogram\n    --    2) The generic formal parameters of the generic subprogram\n-   --    3) The items of pragma [Refined_]Global\n+   --    3) The current instance of a concurrent type\n+   --    4) The items of pragma [Refined_]Global\n    --         or\n-   --    4) The items of pragma [Refined_]Depends if there is no pragma\n+   --    5) The items of pragma [Refined_]Depends if there is no pragma\n    --       [Refined_]Global present and flag Synthesize is set to True.\n    --  If the subprogram has no inputs and/or outputs, then the returned list\n    --  is No_Elist. Flag Global_Seen is set when the related subprogram has"}, {"sha": "112c6e764ac6ca116a9c7a7b003418b971d16f3d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -6347,7 +6347,10 @@ package body Sem_Util is\n          --  Follow a possible chain of renamings to reach the root renamed\n          --  object.\n \n-         while Present (Id) and then Present (Renamed_Object (Id)) loop\n+         while Present (Id)\n+           and then Is_Object (Id)\n+           and then Present (Renamed_Object (Id))\n+         loop\n             if Is_Entity_Name (Renamed_Object (Id)) then\n                Id := Entity (Renamed_Object (Id));\n             else\n@@ -7113,7 +7116,7 @@ package body Sem_Util is\n                Res_Index := Res_Index + 5;\n \n             elsif Is_Task then\n-               Res (Res_Index .. Res_Index + 8) := \"task unit\";\n+               Res (Res_Index .. Res_Index + 8) := \"task type\";\n                Res_Index := Res_Index + 9;\n \n             else"}, {"sha": "67bc7f194038ffa45e08452eebe3b97af2f2d4ba", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378dc6ca34677edf03df66aee0581fe92eb1fb06/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=378dc6ca34677edf03df66aee0581fe92eb1fb06", "patch": "@@ -770,7 +770,7 @@ package Sem_Util is\n    --  the Ekind of Id as follows:\n    --    * Replace \"subprogram\" with\n    --      - \"entry\" when Id is an entry [family]\n-   --      - \"task unit\" when Id is a single task object, task type or task\n+   --      - \"task type\" when Id is a single task object, task type or task\n    --         body.\n    --    * Replace \"protected\" with\n    --      - \"task\" when Id is a single task object, task type or task body"}]}