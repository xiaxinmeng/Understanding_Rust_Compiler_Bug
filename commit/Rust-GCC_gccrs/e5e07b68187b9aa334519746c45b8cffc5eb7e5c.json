{"sha": "e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlMDdiNjgxODdiOWFhMzM0NTE5NzQ2YzQ1YjhjZmZjNWViN2U1Yw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-01-17T13:17:21Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-01-17T13:17:21Z"}, "message": "[AArch64] Fix shrinkwrapping interactions with atomics (PR92692)\n\nThe separate shrinkwrapping pass may insert stores in the middle\nof atomics loops which can cause issues on some implementations.\nAvoid this by delaying splitting atomics patterns until after\nprolog/epilog generation.\n\ngcc/\n\tPR target/92692\n\t* config/aarch64/aarch64.c (aarch64_split_compare_and_swap)\n\tAdd assert to ensure prolog has been emitted.\n\t(aarch64_split_atomic_op): Likewise.\n\t* config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)\n\tUse epilogue_completed rather than reload_completed.\n\t(aarch64_atomic_exchange<mode>): Likewise.\n\t(aarch64_atomic_<atomic_optab><mode>): Likewise.\n\t(atomic_nand<mode>): Likewise.\n\t(aarch64_atomic_fetch_<atomic_optab><mode>): Likewise.\n\t(atomic_fetch_nand<mode>): Likewise.\n\t(aarch64_atomic_<atomic_optab>_fetch<mode>): Likewise.\n\t(atomic_nand_fetch<mode>): Likewise.", "tree": {"sha": "6f5915fd6e2d44a27bcec52891749cf1d9c08128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5915fd6e2d44a27bcec52891749cf1d9c08128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/comments", "author": null, "committer": null, "parents": [{"sha": "f788c2d66a6ee1ded65dafccbc5e485d42af4808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f788c2d66a6ee1ded65dafccbc5e485d42af4808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f788c2d66a6ee1ded65dafccbc5e485d42af4808"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "06bcb81acc841ab8ebe0c858ba61f38906c9afbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "patch": "@@ -1,3 +1,19 @@\n+2020-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/92692\n+\t* config/aarch64/aarch64.c (aarch64_split_compare_and_swap)\n+\tAdd assert to ensure prolog has been emitted.\n+\t(aarch64_split_atomic_op): Likewise.\n+\t* config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)\n+\tUse epilogue_completed rather than reload_completed.\n+\t(aarch64_atomic_exchange<mode>): Likewise.\n+\t(aarch64_atomic_<atomic_optab><mode>): Likewise.\n+\t(atomic_nand<mode>): Likewise.\n+\t(aarch64_atomic_fetch_<atomic_optab><mode>): Likewise.\n+\t(atomic_fetch_nand<mode>): Likewise.\n+\t(aarch64_atomic_<atomic_optab>_fetch<mode>): Likewise.\n+\t(atomic_nand_fetch<mode>): Likewise.\n+\n 2020-01-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/93133"}, {"sha": "ea9d6a12b12f9065ff9c40d005d71b0280bce312", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "patch": "@@ -18375,6 +18375,9 @@ aarch64_emit_post_barrier (enum memmodel model)\n void\n aarch64_split_compare_and_swap (rtx operands[])\n {\n+  /* Split after prolog/epilog to avoid interactions with shrinkwrapping.  */\n+  gcc_assert (epilogue_completed);\n+\n   rtx rval, mem, oldval, newval, scratch, x, model_rtx;\n   machine_mode mode;\n   bool is_weak;\n@@ -18469,6 +18472,9 @@ void\n aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \t\t\t rtx value, rtx model_rtx, rtx cond)\n {\n+  /* Split after prolog/epilog to avoid interactions with shrinkwrapping.  */\n+  gcc_assert (epilogue_completed);\n+\n   machine_mode mode = GET_MODE (mem);\n   machine_mode wmode = (mode == DImode ? DImode : SImode);\n   const enum memmodel model = memmodel_from_int (INTVAL (model_rtx));"}, {"sha": "996947799b5ef8445e9786b94e1ce62fd16e5b5c", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e07b68187b9aa334519746c45b8cffc5eb7e5c/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=e5e07b68187b9aa334519746c45b8cffc5eb7e5c", "patch": "@@ -56,7 +56,7 @@\n    (clobber (match_scratch:SI 7 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_compare_and_swap (operands);\n@@ -80,7 +80,7 @@\n    (clobber (match_scratch:SI 7 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_compare_and_swap (operands);\n@@ -104,7 +104,7 @@\n    (clobber (match_scratch:SI 7 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_compare_and_swap (operands);\n@@ -223,7 +223,7 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (SET, operands[0], NULL, operands[1],\n@@ -344,7 +344,7 @@\n   (clobber (match_scratch:SI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (<CODE>, NULL, operands[3], operands[0],\n@@ -400,7 +400,7 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n      aarch64_split_atomic_op (NOT, NULL, operands[3], operands[0],\n@@ -504,7 +504,7 @@\n    (clobber (match_scratch:SI 5 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (<CODE>, operands[0], operands[4], operands[1],\n@@ -551,7 +551,7 @@\n    (clobber (match_scratch:SI 5 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (NOT, operands[0], operands[4], operands[1],\n@@ -604,7 +604,7 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (<CODE>, NULL, operands[0], operands[1],\n@@ -628,7 +628,7 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n   \"\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& epilogue_completed\"\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (NOT, NULL, operands[0], operands[1],"}]}