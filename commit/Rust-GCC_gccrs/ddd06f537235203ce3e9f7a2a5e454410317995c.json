{"sha": "ddd06f537235203ce3e9f7a2a5e454410317995c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkMDZmNTM3MjM1MjAzY2UzZTlmN2EyYTVlNDU0NDEwMzE3OTk1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-28T21:25:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-28T21:25:20Z"}, "message": "runtime: Better detection of memory allocation request overflow.\n\nFrom-SVN: r191841", "tree": {"sha": "c312f5f6a11f323dc9f8d70c8f1604219de561bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c312f5f6a11f323dc9f8d70c8f1604219de561bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd06f537235203ce3e9f7a2a5e454410317995c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd06f537235203ce3e9f7a2a5e454410317995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd06f537235203ce3e9f7a2a5e454410317995c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd06f537235203ce3e9f7a2a5e454410317995c/comments", "author": null, "committer": null, "parents": [{"sha": "e78410bf1198e3ce4a37678c991821359b0fde79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78410bf1198e3ce4a37678c991821359b0fde79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78410bf1198e3ce4a37678c991821359b0fde79"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "d0a1612ad2a9ebc6767b6dcf248d3029a76934ab", "filename": "libgo/runtime/chan.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fchan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fchan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.c?ref=ddd06f537235203ce3e9f7a2a5e454410317995c", "patch": "@@ -3,6 +3,8 @@\n // license that can be found in the LICENSE file.\n \n #include \"runtime.h\"\n+#include \"arch.h\"\n+#include \"malloc.h\"\n #include \"go-type.h\"\n \n #define\tNOSELGEN\t1\n@@ -88,7 +90,7 @@ runtime_makechan_c(ChanType *t, int64 hint)\n \t\n \telem = t->__element_type;\n \n-\tif(hint < 0 || (int32)hint != hint || (elem->__size > 0 && (uintptr)hint > ((uintptr)-1) / elem->__size))\n+\tif(hint < 0 || (int32)hint != hint || (elem->__size > 0 && (uintptr)hint > MaxMem / elem->__size))\n \t\truntime_panicstring(\"makechan: size out of range\");\n \n \tn = sizeof(*c);"}, {"sha": "dac4c902c154de5078cf9cb8c6df2cb90b66eeb5", "filename": "libgo/runtime/go-append.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fgo-append.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fgo-append.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-append.c?ref=ddd06f537235203ce3e9f7a2a5e454410317995c", "patch": "@@ -54,6 +54,9 @@ __go_append (struct __go_open_array a, void *bvalues, uintptr_t bcount,\n \t  while (m < count);\n \t}\n \n+      if ((uintptr) m > MaxMem / element_size)\n+\truntime_panicstring (\"growslice: cap out of range\");\n+\n       n = __go_alloc (m * element_size);\n       __builtin_memcpy (n, a.__values, a.__count * element_size);\n "}, {"sha": "822c9b68f0a43873b1c7f9609a8ba1e8b3deb846", "filename": "libgo/runtime/go-make-slice.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fgo-make-slice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fgo-make-slice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-make-slice.c?ref=ddd06f537235203ce3e9f7a2a5e454410317995c", "patch": "@@ -37,7 +37,7 @@ __go_make_slice2 (const struct __go_type_descriptor *td, uintptr_t len,\n   if (cap < len\n       || (uintptr_t) icap != cap\n       || (std->__element_type->__size > 0\n-\t  && cap > (uintptr_t) -1U / std->__element_type->__size))\n+\t  && cap > MaxMem / std->__element_type->__size))\n     runtime_panicstring (\"makeslice: cap out of range\");\n \n   ret.__count = ilen;"}, {"sha": "96cb609367fcb9ddd7089bb7b30bdbd4f3355929", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd06f537235203ce3e9f7a2a5e454410317995c/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=ddd06f537235203ce3e9f7a2a5e454410317995c", "patch": "@@ -128,6 +128,15 @@ enum\n \tMaxGcproc = 4,\n };\n \n+// Maximum memory allocation size, a hint for callers.\n+// This must be a #define instead of an enum because it\n+// is so large.\n+#if __SIZEOF_POINTER__ == 8\n+#define\tMaxMem\t(16ULL<<30)\t/* 16 GB */\n+#else\n+#define\tMaxMem\t((uintptr)-1)\n+#endif\n+\n // A generic linked list of blocks.  (Typically the block is bigger than sizeof(MLink).)\n struct MLink\n {"}]}