{"sha": "cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhMDRiOTY2MDJlMmE2ZGZiZmU5YjVkMDJkMjc5NGNkNTE4MDBhNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-11-27T12:52:31Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-11-27T12:52:31Z"}, "message": "s390.opt (m31, [...]): Add the option to be overridden.\n\n2007-11-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.opt (m31, m64, mesa, mzarch, msoft-float,\n\tmhard-float, mlong-double-64, mlong-double-128): Add the\n\toption to be overridden.\n\nFrom-SVN: r130466", "tree": {"sha": "cb0cc685f8cfe24203c3e4125ed7ff908c1a6ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0cc685f8cfe24203c3e4125ed7ff908c1a6ab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6/comments", "author": null, "committer": null, "parents": [{"sha": "f4577fcd487059390e485acfd3517648652e6557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4577fcd487059390e485acfd3517648652e6557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4577fcd487059390e485acfd3517648652e6557"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "da216cede43d4adf6235d195ff09ff7650f3820a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "patch": "@@ -1,3 +1,9 @@\n+2007-11-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.opt (m31, m64, mesa, mzarch, msoft-float,\n+\tmhard-float, mlong-double-64, mlong-double-128): Add the\n+\toption to be overridden.\n+\n 2007-11-27  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (fold_builtin_1): Verify the argument types"}, {"sha": "9b6d9df580221184f549e6506c13ee9aa586c2d9", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba04b96602e2a6dfbfe9b5d02d2794cd51800a6/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=cba04b96602e2a6dfbfe9b5d02d2794cd51800a6", "patch": "@@ -19,11 +19,11 @@\n ; <http://www.gnu.org/licenses/>.\n \n m31\n-Target Report RejectNegative InverseMask(64BIT)\n+Target Report RejectNegative Negative(m64) InverseMask(64BIT)\n 31 bit ABI\n \n m64\n-Target Report RejectNegative Mask(64BIT)\n+Target Report RejectNegative Negative(m31) Mask(64BIT)\n 64 bit ABI\n \n march=\n@@ -39,7 +39,7 @@ Target Report Mask(DEBUG_ARG)\n Additional debug prints\n \n mesa\n-Target Report RejectNegative InverseMask(ZARCH)\n+Target Report RejectNegative Negative(mzarch) InverseMask(ZARCH)\n ESA/390 architecture\n \n mfused-madd\n@@ -55,11 +55,11 @@ Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Enable hardware floating point\n \n mlong-double-128\n-Target Report RejectNegative Mask(LONG_DOUBLE_128)\n+Target Report RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)\n Use 128-bit long double\n \n mlong-double-64\n-Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n+Target Report RejectNegative Negative(mlong-double-128) InverseMask(LONG_DOUBLE_128)\n Use 64-bit long double\n \n mpacked-stack\n@@ -71,7 +71,7 @@ Target Report Mask(SMALL_EXEC)\n Use bras for executable < 64k\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target Report RejectNegative Negative(mhard-float) Mask(SOFT_FLOAT)\n Disable hardware floating point\n \n mstack-guard=\n@@ -99,5 +99,5 @@ Target RejectNegative Joined\n Warn if a single function's framesize exceeds the given framesize\n \n mzarch\n-Target Report RejectNegative Mask(ZARCH)\n+Target Report RejectNegative Negative(mesa) Mask(ZARCH)\n z/Architecture"}]}