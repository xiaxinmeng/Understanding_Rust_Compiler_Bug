{"sha": "a876231c40c9e3488d91bd64aa7a12c939babe51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3NjIzMWM0MGM5ZTM0ODhkOTFiZDY0YWE3YTEyYzkzOWJhYmU1MQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2017-01-20T21:03:41Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T21:03:41Z"}, "message": "[AArch64] Only build & test pauth code for LP64\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c (aarch64_init_builtins): Register\n\tregister pauth builtins for LP64 only.\n\nlibgcc/\n\t* config/aarch64/aarch64-unwind.h: Empty this file on ILP32.\n\t* unwind-dw2.c (execute_cfa_program):  Only multiplexing\n\tDW_CFA_GNU_window_save for AArch64 and LP64.\n\ngcc/testsuite/\n\t* testsuite/gcc.target/aarch64/return_address_sign_1.c: Enable on LP64\n\tonly.\n\t* testsuite/gcc.target/aarch64/return_address_sign_2.c: Likewise.\n\t* testsuite/gcc.target/aarch64/return_address_sign_3.c: Likewise.\n\nFrom-SVN: r244732", "tree": {"sha": "32abdbe25b84dfdbd24f7c5db95c8890a88fc093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32abdbe25b84dfdbd24f7c5db95c8890a88fc093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a876231c40c9e3488d91bd64aa7a12c939babe51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a876231c40c9e3488d91bd64aa7a12c939babe51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a876231c40c9e3488d91bd64aa7a12c939babe51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a876231c40c9e3488d91bd64aa7a12c939babe51/comments", "author": null, "committer": null, "parents": [{"sha": "5dc8f5d9e6765ec1083afe8968dd88d8aa029150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc8f5d9e6765ec1083afe8968dd88d8aa029150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc8f5d9e6765ec1083afe8968dd88d8aa029150"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "10a6978125128bdf4985bceaa7deb5d5fd11f69a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,3 +1,8 @@\n+2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_init_builtins): Register\n+\tregister pauth builtins for LP64 only.\n+\n 2017-01-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79152"}, {"sha": "f09399f4c158112c90c270856bffb4cafd03e7d4", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -983,9 +983,14 @@ aarch64_init_builtins (void)\n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();\n \n-/* Initialize pointer authentication builtins which are backed by instructions\n-   in NOP encoding space.  */\n-  aarch64_init_pauth_hint_builtins ();\n+  /* Initialize pointer authentication builtins which are backed by instructions\n+     in NOP encoding space.\n+\n+     NOTE: these builtins are supposed to be used by libgcc unwinder only, as\n+     there is no support on return address signing under ILP32, we don't\n+     register them.  */\n+  if (!TARGET_ILP32)\n+    aarch64_init_pauth_hint_builtins ();\n }\n \n tree"}, {"sha": "292731d487d7511cd6437db6fb1fe8c32f90378b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,3 +1,10 @@\n+2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* testsuite/gcc.target/aarch64/return_address_sign_1.c: Enable on LP64\n+\tonly.\n+\t* testsuite/gcc.target/aarch64/return_address_sign_2.c: Likewise.\n+\t* testsuite/gcc.target/aarch64/return_address_sign_3.c: Likewise.\n+\n 2017-01-20  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79495"}, {"sha": "f87c3d28d1edff473a787a39a436e57076f97508", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,6 +1,7 @@\n /* Testing return address signing where no combined instructions used.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msign-return-address=all\" } */\n+/* { dg-require-effective-target lp64 } */\n \n int foo (int);\n "}, {"sha": "c5c1439b92e6637f85c47c6161cd797c0d68df25", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,6 +1,7 @@\n /* Testing return address signing where combined instructions used.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msign-return-address=all\" } */\n+/* { dg-require-effective-target lp64 } */\n \n int foo (int);\n int bar (int, int);"}, {"sha": "7d9ec6eebd1ce452013d2895a551671c59e98f0c", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,6 +1,7 @@\n /* Testing the disable of return address signing.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msign-return-address=all\" } */\n+/* { dg-require-effective-target lp64 } */\n \n int bar (int, int);\n "}, {"sha": "98aa1043e944ba735a38774c935ce318fa318702", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1,3 +1,9 @@\n+2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-unwind.h: Empty this file on ILP32.\n+\t* unwind-dw2.c (execute_cfa_program):  Only multiplexing\n+\tDW_CFA_GNU_window_save for AArch64 and LP64.\n+\n 2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/linux-unwind.h: Always include aarch64-unwind.h."}, {"sha": "94e0d3426fd521f06221ab8bf6c5213d8ce28e6f", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -22,7 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#ifndef AARCH64_UNWIND_H\n+#if !defined (AARCH64_UNWIND_H) && !defined (__ILP32__)\n #define AARCH64_UNWIND_H\n \n #define DWARF_REGNUM_AARCH64_RA_STATE 34\n@@ -84,4 +84,4 @@ aarch64_frob_update_context (struct _Unwind_Context *context,\n   return;\n }\n \n-#endif /* defined AARCH64_UNWIND_H */\n+#endif /* defined AARCH64_UNWIND_H && defined __ILP32__ */"}, {"sha": "3f26eaf73de3116b538dc8ba0a99f12de939c5e5", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a876231c40c9e3488d91bd64aa7a12c939babe51/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=a876231c40c9e3488d91bd64aa7a12c939babe51", "patch": "@@ -1187,7 +1187,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_GNU_window_save:\n-#ifdef __aarch64__\n+#if defined (__aarch64__) && !defined (__ILP32__)\n \t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n \t     return address signing status.  */\n \t  fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset ^= 1;"}]}