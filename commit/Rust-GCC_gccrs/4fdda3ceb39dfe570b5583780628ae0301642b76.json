{"sha": "4fdda3ceb39dfe570b5583780628ae0301642b76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkZGEzY2ViMzlkZmU1NzBiNTU4Mzc4MDYyOGFlMDMwMTY0MmI3Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-14T00:02:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-14T00:02:42Z"}, "message": "PR c++/86099 - ICE with trivial copy and non-trivial default ctor.\n\n\t* constexpr.c (instantiate_cx_fn_r): Don't synthesize trivial\n\tconstructors.\n\nFrom-SVN: r261576", "tree": {"sha": "ea0c1a92e87036b9a00e85dac50eaf0db7639338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea0c1a92e87036b9a00e85dac50eaf0db7639338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fdda3ceb39dfe570b5583780628ae0301642b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdda3ceb39dfe570b5583780628ae0301642b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fdda3ceb39dfe570b5583780628ae0301642b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdda3ceb39dfe570b5583780628ae0301642b76/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cef3733596c6424dee18d7e36bc41162628653b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cef3733596c6424dee18d7e36bc41162628653b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cef3733596c6424dee18d7e36bc41162628653b"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "245b6364e2ba7b6533a2d4997d66a39c19f73d6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4fdda3ceb39dfe570b5583780628ae0301642b76", "patch": "@@ -1,5 +1,9 @@\n 2018-06-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/86099 - ICE with trivial copy and non-trivial default ctor.\n+\t* constexpr.c (instantiate_cx_fn_r): Don't synthesize trivial\n+\tconstructors.\n+\n \tPR c++/86094 - wrong code with defaulted move ctor.\n \t* class.c (classtype_has_non_deleted_move_ctor): New.\n \t* tree.c (maybe_warn_parm_abi, type_has_nontrivial_copy_init):"}, {"sha": "93de6162c04089c47314a5ddd392a78a4740b88a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4fdda3ceb39dfe570b5583780628ae0301642b76", "patch": "@@ -4841,6 +4841,7 @@ instantiate_cx_fn_r (tree *tp, int *walk_subtrees, void */*data*/)\n   if (TREE_CODE (*tp) == FUNCTION_DECL\n       && DECL_DECLARED_CONSTEXPR_P (*tp)\n       && !DECL_INITIAL (*tp)\n+      && !trivial_fn_p (*tp)\n       && DECL_TEMPLOID_INSTANTIATION (*tp))\n     {\n       ++function_depth;"}, {"sha": "e3520bc6b4448a0a9155ab60328c5c29efdd1aa5", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template18.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdda3ceb39dfe570b5583780628ae0301642b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template18.C?ref=4fdda3ceb39dfe570b5583780628ae0301642b76", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/86099\n+// { dg-do compile { target c++11 } }\n+\n+template <int a> struct e { static constexpr int c = a; };\n+template <bool a> using d = e<a>;\n+template <bool, typename> struct aa;\n+template <typename...> struct j;\n+template <typename f, typename g> struct j<f, g> : aa<f::c, g>::h {};\n+template <typename i> struct n : d<i::c> {};\n+template <typename k, typename l = k> l m(int);\n+template <typename k> auto ab() -> decltype(m<k>(0));\n+template <typename...> struct p;\n+template <typename k, typename o> struct p<k, o> : e<noexcept(k(ab<o>()))> {};\n+template <typename> struct r;\n+class s;\n+template <typename, typename... q>\n+struct ac : j<d<true>, p<r<s>, q...>> {};\n+template <typename k> struct ae : ac<k, k> {};\n+template <bool, typename ad> struct aa { typedef ad h; };\n+template <typename k> struct w : j<n<ae<k>>, d<true>> {};\n+template <typename t> struct r {\n+  t f;\n+  int af;\n+  r(r &&) = default;\n+};\n+template <typename k, typename = typename aa<w<k>::c, k>::h> void v(k *);\n+template <typename ag, typename ah, typename ai> ah aj(ag x, ah, ai) { v(x); return 0; }\n+template <typename> struct y { typedef int ak; };\n+template <typename, typename = int> class z {\n+public:\n+  template <typename...> void al();\n+};\n+template <typename k, typename am> template <typename...> void z<k, am>::al() {\n+  r<s> *u;\n+  typename y<am>::ak a = aj(u, a, int());\n+}\n+class s {\n+  char *an = nullptr;\n+};\n+void ao() {\n+  z<int> b;\n+  b.al();\n+}"}]}