{"sha": "af16db699d865a4324173656b33fa1abd27c8aa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNmRiNjk5ZDg2NWE0MzI0MTczNjU2YjMzZmExYWJkMjdjOGFhMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-10-05T13:57:06Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-10-05T13:57:06Z"}, "message": "tree-ssa.c (verify_ssa): Verify phi arguments only contain renamed names.\n\n2004-10-05  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa.c (verify_ssa): Verify phi arguments only\n\tcontain renamed names.\n\nFrom-SVN: r88554", "tree": {"sha": "1bbbc089162b201e4346c19a838fed85a7a4d594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bbbc089162b201e4346c19a838fed85a7a4d594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af16db699d865a4324173656b33fa1abd27c8aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af16db699d865a4324173656b33fa1abd27c8aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af16db699d865a4324173656b33fa1abd27c8aa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af16db699d865a4324173656b33fa1abd27c8aa0/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29cb3c21e8702b3ef62181bf3a377ad30a2b149c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29cb3c21e8702b3ef62181bf3a377ad30a2b149c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29cb3c21e8702b3ef62181bf3a377ad30a2b149c"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "63c93cedd23fb5061d4be3c7cb7d507a312981db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16db699d865a4324173656b33fa1abd27c8aa0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16db699d865a4324173656b33fa1abd27c8aa0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af16db699d865a4324173656b33fa1abd27c8aa0", "patch": "@@ -1,3 +1,8 @@\n+2004-10-05  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa.c (verify_ssa): Verify phi arguments only\n+\tcontain renamed names.\n+\n 2004-10-05  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/linux.h: Formatting, whitespace."}, {"sha": "4b79989d50201f95960ebab03d1031a59386d2ce", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16db699d865a4324173656b33fa1abd27c8aa0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16db699d865a4324173656b33fa1abd27c8aa0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=af16db699d865a4324173656b33fa1abd27c8aa0", "patch": "@@ -541,9 +541,22 @@ verify_ssa (void)\n       block_stmt_iterator bsi;\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tif (verify_def (bb, definition_block, PHI_RESULT (phi), phi,\n+\t{\n+\t  int i;\n+\t  if (verify_def (bb, definition_block, PHI_RESULT (phi), phi,\n \t\t\t!is_gimple_reg (PHI_RESULT (phi))))\n \t  goto err;\n+\t  for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n+\t    {\n+\t      tree def = PHI_ARG_DEF (phi, i);\n+\t      if (TREE_CODE (def) != SSA_NAME && !is_gimple_min_invariant (def))\n+\t\t{\n+\t\t  error (\"PHI argument is not SSA_NAME, or invariant\");\n+\t\t  print_generic_stmt (stderr, phi, TDF_VOPS);\n+\t\t  goto err;\n+\t\t}\n+\t    }\n+\t}\n \n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \t{"}]}