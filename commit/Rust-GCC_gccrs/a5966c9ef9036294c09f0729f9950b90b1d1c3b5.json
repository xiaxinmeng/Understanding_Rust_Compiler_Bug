{"sha": "a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5NjZjOWVmOTAzNjI5NGMwOWYwNzI5Zjk5NTBiOTBiMWQxYzNiNQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2003-11-12T00:37:34Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2003-11-12T00:37:34Z"}, "message": "Makefile.am: Add GdkPixbufDecoder.java and gnu_java_awt_peer_gtk_GdkPixbufDecoder.c\n\n2003-11-11  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* Makefile.am: Add GdkPixbufDecoder.java and\n\tgnu_java_awt_peer_gtk_GdkPixbufDecoder.c\n\t* Makefile.in: Regenerate.\n\t* gnu/java/awt/image/ImageDecoder.java (ImageDecoder(byte[],int,int)):\n\tNew constructor.\n\t(startProduction): Create ByteArrayInputStream when url and filename are\n\tnull.\n\t(produce): Declare stream parameter as InputStream.\n\t* gnu/java/awt/image/XBMDecoder.java (produce): Declare stream parameter\n\tas InputStream.\n\t* gnu/java/awt/peer/gtk/GdkPixbufDecoder.java\n\t(GdkPixbufDecoder(byte[],int,int)): New constructor.\n\t(produce): Declare stream parameter as InputStream.\n\t* gnu/java/awt/peer/gtk/GtkComponentPeer.java (prepareImage): Throw NPE\n\tif image is null.  Set image's observer before running PrepareImage\n\tthread.  Pass image to startProduction.\n\t* gnu/java/awt/peer/gtk/GtkImage.java: Add null checks before calls to\n\tsource's member functions.\n\t(observer): New field.\n\t(setObserver): New method.\n\t(setDimensions, setPixels, imageComplete): Call observer's imageUpdate.\n\t* gnu/java/awt/peer/gtk/GtkToolkit.java (checkImage, getImage): Return\n\tnew GtkImage.\n\t(prepareImage): Implement.\n\t* java/awt/Component.java: Add static fields incrementalDraw and\n\tredrawRate.\n\t(imageUpdate): Implement.\n\t(createImage): Call Toolkit's createImage if peer is null.\n\t(prepareImage): Throw NPE if image is null.\n\t* java/awt/MediaTracker.java: Fix return value.\n\nFrom-SVN: r73476", "tree": {"sha": "76d0f90da057662bc2f5deb1bc000be30244807e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76d0f90da057662bc2f5deb1bc000be30244807e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/comments", "author": null, "committer": null, "parents": [{"sha": "c754c6f1311f79ce60dfdf9e8d61b9557a36808f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c754c6f1311f79ce60dfdf9e8d61b9557a36808f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c754c6f1311f79ce60dfdf9e8d61b9557a36808f"}], "stats": {"total": 254, "additions": 207, "deletions": 47}, "files": [{"sha": "70402e9b01620ee0442051bf50c670b1044743a6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -1,3 +1,36 @@\n+2003-11-11  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* Makefile.am: Add GdkPixbufDecoder.java and\n+\tgnu_java_awt_peer_gtk_GdkPixbufDecoder.c\n+\t* Makefile.in: Regenerate.\n+\t* gnu/java/awt/image/ImageDecoder.java (ImageDecoder(byte[],int,int)):\n+\tNew constructor.\n+\t(startProduction): Create ByteArrayInputStream when url and filename are\n+\tnull.\n+\t(produce): Declare stream parameter as InputStream.\n+\t* gnu/java/awt/image/XBMDecoder.java (produce): Declare stream parameter\n+\tas InputStream.\n+\t* gnu/java/awt/peer/gtk/GdkPixbufDecoder.java\n+\t(GdkPixbufDecoder(byte[],int,int)): New constructor.\n+\t(produce): Declare stream parameter as InputStream.\n+\t* gnu/java/awt/peer/gtk/GtkComponentPeer.java (prepareImage): Throw NPE\n+\tif image is null.  Set image's observer before running PrepareImage\n+\tthread.  Pass image to startProduction.\n+\t* gnu/java/awt/peer/gtk/GtkImage.java: Add null checks before calls to\n+\tsource's member functions.\n+\t(observer): New field.\n+\t(setObserver): New method.\n+\t(setDimensions, setPixels, imageComplete): Call observer's imageUpdate.\n+\t* gnu/java/awt/peer/gtk/GtkToolkit.java (checkImage, getImage): Return\n+\tnew GtkImage.\n+\t(prepareImage): Implement.\n+\t* java/awt/Component.java: Add static fields incrementalDraw and\n+\tredrawRate.\n+\t(imageUpdate): Implement.\n+\t(createImage): Call Toolkit's createImage if peer is null.\n+\t(prepareImage): Throw NPE if image is null.\n+\t* java/awt/MediaTracker.java: Fix return value.\n+\n 2003-11-11  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkLabelPeer.java (create()): Call new create."}, {"sha": "352294a3d6cf559fb36c701cc638015985b1d8a2", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -170,6 +170,7 @@ libgcj_la_LINK = $(LIBLINK)\n gtk_c_source_files = \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c \\\n@@ -206,6 +207,7 @@ jni/classpath/primlib.c\n gtk_awt_peer_sources = \\\n gnu/java/awt/peer/gtk/GdkFontMetrics.java \\\n gnu/java/awt/peer/gtk/GdkGraphics.java \\\n+gnu/java/awt/peer/gtk/GdkPixbufDecoder.java \\\n gnu/java/awt/peer/gtk/GtkArg.java \\\n gnu/java/awt/peer/gtk/GtkArgList.java \\\n gnu/java/awt/peer/gtk/GtkButtonPeer.java \\"}, {"sha": "34cb4135b64a8e65d74c246e9718ab60e3ad2905", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -261,6 +261,7 @@ libgcj_la_LINK = $(LIBLINK)\n gtk_c_source_files = \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c \\\n@@ -297,6 +298,7 @@ jni/classpath/primlib.c\n gtk_awt_peer_sources = \\\n gnu/java/awt/peer/gtk/GdkFontMetrics.java \\\n gnu/java/awt/peer/gtk/GdkGraphics.java \\\n+gnu/java/awt/peer/gtk/GdkPixbufDecoder.java \\\n gnu/java/awt/peer/gtk/GtkArg.java \\\n gnu/java/awt/peer/gtk/GtkArgList.java \\\n gnu/java/awt/peer/gtk/GtkButtonPeer.java \\\n@@ -2624,8 +2626,9 @@ lib_gnu_java_awt_peer_gtk_la_LDFLAGS =\n lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES = \n lib_gnu_java_awt_peer_gtk_la_OBJECTS =  \\\n gnu/java/awt/peer/gtk/GdkFontMetrics.lo \\\n-gnu/java/awt/peer/gtk/GdkGraphics.lo gnu/java/awt/peer/gtk/GtkArg.lo \\\n-gnu/java/awt/peer/gtk/GtkArgList.lo \\\n+gnu/java/awt/peer/gtk/GdkGraphics.lo \\\n+gnu/java/awt/peer/gtk/GdkPixbufDecoder.lo \\\n+gnu/java/awt/peer/gtk/GtkArg.lo gnu/java/awt/peer/gtk/GtkArgList.lo \\\n gnu/java/awt/peer/gtk/GtkButtonPeer.lo \\\n gnu/java/awt/peer/gtk/GtkCanvasPeer.lo \\\n gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.lo \\\n@@ -2662,6 +2665,7 @@ gnu/java/awt/peer/gtk/GtkToolkit.lo \\\n gnu/java/awt/peer/gtk/GtkWindowPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.lo \\\n@@ -2827,6 +2831,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/awt/peer/GLightweightPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GdkFontMetrics.P \\\n .deps/gnu/java/awt/peer/gtk/GdkGraphics.P \\\n+.deps/gnu/java/awt/peer/gtk/GdkPixbufDecoder.P \\\n .deps/gnu/java/awt/peer/gtk/GtkArg.P \\\n .deps/gnu/java/awt/peer/gtk/GtkArgList.P \\\n .deps/gnu/java/awt/peer/gtk/GtkButtonPeer.P \\\n@@ -4284,6 +4289,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/jni/classpath/primlib.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.P \\"}, {"sha": "d44efce5d77ed665b60c430e47289b235a6018c3", "filename": "libjava/gnu/java/awt/image/ImageDecoder.java", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FImageDecoder.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -48,6 +48,10 @@ public abstract class ImageDecoder implements ImageProducer\n   Vector consumers = new Vector ();\n   String filename;\n   URL url;\n+  byte[] data;\n+  int offset;\n+  int length;\n+  InputStream input;\n \n   public static ColorModel cm;\n \n@@ -69,6 +73,13 @@ public ImageDecoder (URL url)\n     this.url = url;\n   }\n \n+  public ImageDecoder (byte[] imagedata, int imageoffset, int imagelength)\n+  {\n+    data = imagedata;\n+    offset = imageoffset;\n+    length = imagelength;\n+  }\n+\n   public void addConsumer (ImageConsumer ic) \n   {\n     consumers.addElement (ic);\n@@ -90,11 +101,22 @@ public void startProduction (ImageConsumer ic)\n     Vector list = (Vector) consumers.clone ();\n     try \n       {\n-\tFileInputStream is = (url == null) ? new FileInputStream (filename) :\n-\t                                  (FileInputStream) url.openStream();\n-\t\t\t\t\t\t  \n-\tproduce (list, is);\n-      } \n+\t// Create the input stream here rather than in the\n+\t// ImageDecoder constructors so that exceptions cause\n+\t// imageComplete to be called with an appropriate error\n+\t// status.\n+\tif (url != null)\n+\t  input = url.openStream();\n+\telse\n+\t  {\n+\t    if (filename != null)\n+\t      input = new FileInputStream (filename);\n+\t    else\n+\t      input = new ByteArrayInputStream (data, offset, length);\n+\t  }\n+\n+\tproduce (list, input);\n+      }\n     catch (Exception e)\n       {\n \tfor (int i = 0; i < list.size (); i++)\n@@ -109,5 +131,5 @@ public void requestTopDownLeftRightResend (ImageConsumer ic)\n   { \n   }\n \n-  abstract void produce (Vector v, FileInputStream is) throws IOException;\n+  abstract void produce (Vector v, InputStream is) throws IOException;\n }"}, {"sha": "b80fd55de54f9bff77a4b3da2614901b7efe9394", "filename": "libjava/gnu/java/awt/image/XBMDecoder.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fimage%2FXBMDecoder.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -62,7 +62,7 @@ public XBMDecoder (URL url)\n     super (url);\n   }\n \n-  public void produce (Vector v, FileInputStream is) throws IOException\n+  public void produce (Vector v, InputStream is) throws IOException\n   {\n     reader = new BufferedReader (new InputStreamReader (is));\n     int width = -1, height = -1;"}, {"sha": "3cc42cb3f4496be578c43bd142565e4caf35b402", "filename": "libjava/gnu/java/awt/peer/gtk/GdkPixbufDecoder.java", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkPixbufDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkPixbufDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkPixbufDecoder.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -41,6 +41,7 @@\n import java.awt.image.*;\n import java.io.FileDescriptor;\n import java.io.FileInputStream;\n+import java.io.InputStream;\n import java.io.IOException;\n import java.net.URL;\n import java.util.Vector;\n@@ -85,6 +86,12 @@ public GdkPixbufDecoder (URL url)\n     initState ();\n   }\n \n+  public GdkPixbufDecoder (byte[] imagedata, int imageoffset, int imagelength)\n+  {\n+    super (imagedata, imageoffset, imagelength);\n+    initState ();\n+  }\n+\n   // called back by native side\n   void areaPrepared (int width, int height)\n   {\n@@ -122,7 +129,7 @@ void areaUpdated (int x, int y, int width, int height,\n   // this object, feeding back decoded pixel blocks, which we pass to each\n   // of the ImageConsumers in the provided Vector.\n \n-  void produce (Vector v, FileInputStream is) throws IOException\n+  public void produce (Vector v, InputStream is) throws IOException\n   {\n     curr = v;\n \n@@ -213,5 +220,4 @@ public static BufferedImage createBufferedImage (String filename)\n     dec.startProduction (bb);\n     return bb.getBufferedImage ();\n   }\n-\n }"}, {"sha": "f4c143b0dfc2544f4019efcf9f1dd1a20305dbd6", "filename": "libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -230,6 +230,9 @@ public Dimension preferredSize()\n   public boolean prepareImage (Image image, int width, int height,\n \t\t\t       ImageObserver observer) \n   {\n+    if (image == null)\n+      throw new NullPointerException ();\n+\n     GtkImage i = (GtkImage) image;\n \n     if (i.isLoaded ()) return true;\n@@ -242,13 +245,12 @@ class PrepareImage extends Thread\n       PrepareImage (GtkImage image, ImageObserver observer)\n       {\n \tthis.image = image;\n-\tthis.observer = observer;\n+\timage.setObserver (observer);\n       }\n       \n       public void run ()\n       {\n-\t// XXX: need to return data to image observer\n-\timage.source.startProduction (null);\n+\timage.source.startProduction (image);\n       }\n     }\n "}, {"sha": "5f8d2237b7c67deafaef552a39026989738389c9", "filename": "libjava/gnu/java/awt/peer/gtk/GtkImage.java", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -60,6 +60,7 @@ public class GtkImage extends Image implements ImageConsumer\n   Vector propertyObservers = new Vector ();\n \n   ImageProducer source;\n+  ImageObserver observer;\n   Graphics g;\n \n   /* Variables in which we stored cached data, if possible.\n@@ -79,9 +80,15 @@ public class GtkImage extends Image implements ImageConsumer\n     source = producer;\n     this.g = g;\n \n-    source.addConsumer (this);\n+    if (source != null)\n+      source.addConsumer (this);\n   }\n-  \n+\n+  public void setObserver (ImageObserver observer)\n+  {\n+    this.observer = observer;\n+  }\n+\n   public synchronized int \n   getWidth (ImageObserver observer)\n   {\n@@ -135,8 +142,11 @@ public class GtkImage extends Image implements ImageConsumer\n     pixelCache = null;\n     model = null;\n \n-    source.removeConsumer (this);\n-    source.addConsumer (this);\n+    if (source != null)\n+      {\n+\tsource.removeConsumer (this);\n+\tsource.addConsumer (this);\n+      }\n   }\n \n   public boolean\n@@ -166,6 +176,12 @@ public class GtkImage extends Image implements ImageConsumer\n \tImageObserver io = (ImageObserver) heightObservers.elementAt (i);\n \tio.imageUpdate (this, ImageObserver.HEIGHT, -1, -1, width, height);\n       }\n+\n+    if (observer != null)\n+      observer.imageUpdate (this,\n+\t\t\t    (ImageObserver.WIDTH\n+\t\t\t     | ImageObserver.HEIGHT),\n+\t\t\t    -1, -1, width, height);\n   }\n \n   public synchronized void \n@@ -200,6 +216,11 @@ public class GtkImage extends Image implements ImageConsumer\n   {\n     setPixels (x, y, width, height, cm, convertPixels (pixels), offset,\n \t       scansize);\n+\n+    if (observer != null)\n+      observer.imageUpdate (this,\n+\t\t\t    ImageObserver.SOMEBITS,\n+\t\t\t    x, y, width, height);\n   }\n \n   public synchronized void \n@@ -241,7 +262,20 @@ public class GtkImage extends Image implements ImageConsumer\n     if (status == ImageConsumer.SINGLEFRAMEDONE)\n       isCacheable = false;\n \n-    source.removeConsumer (this);\n+    if (observer != null)\n+      {\n+\tif (status == ImageConsumer.IMAGEERROR)\n+\t  observer.imageUpdate (null,\n+\t\t\t\tImageObserver.ERROR,\n+\t\t\t\t-1, -1, -1, -1);\n+\telse\n+\t  observer.imageUpdate (null,\n+\t\t\t\tImageObserver.ALLBITS,\n+\t\t\t\t-1, -1, -1, -1);\n+      }\n+\n+    if (source != null)\n+      source.removeConsumer (this);\n   }\n \n   public synchronized void\n@@ -254,8 +288,11 @@ public class GtkImage extends Image implements ImageConsumer\n       }\n     else\n       {\n-\tsource.startProduction (painter);\n-\tsource.removeConsumer (painter);\n+\tif (source != null)\n+\t  {\n+\t    source.startProduction (painter);\n+\t    source.removeConsumer (painter);\n+\t  }\n       }\n   }\n "}, {"sha": "7f8ae2ecd03046aa7e2c2c8438af0f8b2256cde8", "filename": "libjava/gnu/java/awt/peer/gtk/GtkToolkit.java", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -56,6 +56,7 @@\n import gnu.java.awt.EmbeddedWindowSupport;\n import gnu.java.awt.peer.EmbeddedWindowPeer;\n import gnu.classpath.Configuration;\n+import gnu.java.awt.peer.gtk.GdkPixbufDecoder;\n \n /* This class uses a deprecated method java.awt.peer.ComponentPeer.getPeer().\n    This merits comment.  We are basically calling Sun's bluff on this one.\n@@ -91,24 +92,17 @@ public GtkToolkit ()\n   public int checkImage (Image image, int width, int height, \n \t\t\t ImageObserver observer) \n   {\n-    return ImageObserver.ALLBITS;\n-\n-//      GtkImage i = (GtkImage) image;\n-//      return i.checkImage ();\n+    return ((GtkImage) image).checkImage ();\n   }\n \n   public Image createImage (String filename)\n   {\n-    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n-    // return new GtkImage (new GdkPixbufDecoder (filename), null);\n-    return null;\n+    return new GtkImage (new GdkPixbufDecoder (filename), null);\n   }\n \n   public Image createImage (URL url)\n   {\n-    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n-    // return new GtkImage (new GdkPixbufDecoder (url), null);\n-    return null;\n+    return new GtkImage (new GdkPixbufDecoder (url), null);\n   }\n \n   public Image createImage (ImageProducer producer) \n@@ -117,10 +111,12 @@ public Image createImage (ImageProducer producer)\n   }\n \n   public Image createImage (byte[] imagedata, int imageoffset,\n-\t\t\t    int imagelength) \n+\t\t\t    int imagelength)\n   {\n-    // System.out.println (\"createImage byte[] NOT SUPPORTED\");\n-    return null;\n+    return new GtkImage (new GdkPixbufDecoder (imagedata,\n+\t\t\t\t\t       imageoffset,\n+\t\t\t\t\t       imagelength),\n+\t\t\t null);\n   }\n \n   public ColorModel getColorModel () \n@@ -144,16 +140,12 @@ public FontMetrics getFontMetrics (Font font)\n \n   public Image getImage (String filename) \n   {\n-    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n-    // return new GtkImage (new GdkPixbufDecoder (filename), null);\n-    return null;\n+    return new GtkImage (new GdkPixbufDecoder (filename), null);\n   }\n \n   public Image getImage (URL url) \n   {\n-    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n-    // return new GtkImage (new GdkPixbufDecoder (url), null);\n-    return null;\n+    return new GtkImage (new GdkPixbufDecoder (url), null);\n   }\n \n   public PrintJob getPrintJob (Frame frame, String jobtitle, Properties props) \n@@ -177,6 +169,31 @@ public Clipboard getSystemClipboard()\n   public boolean prepareImage (Image image, int width, int height, \n \t\t\t       ImageObserver observer) \n   {\n+    if (image == null)\n+      throw new NullPointerException ();\n+\n+    GtkImage i = (GtkImage) image;\n+\n+    if (i.isLoaded ()) return true;\n+\n+    class PrepareImage extends Thread\n+    {\n+      GtkImage image;\n+      ImageObserver observer;\n+\n+      PrepareImage (GtkImage image, ImageObserver observer)\n+      {\n+\tthis.image = image;\n+\timage.setObserver (observer);\n+      }\n+      \n+      public void run ()\n+      {\n+\timage.source.startProduction (image);\n+      }\n+    }\n+\n+    new PrepareImage (i, observer).start ();\n     return false;\n   }\n "}, {"sha": "74b4daed2a0cee05e0faeba706cff354377cdce4", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -555,6 +555,17 @@\n    */\n   transient BufferStrategy bufferStrategy;\n \n+  /**\n+   * The system properties that affect image updating.\n+   */\n+  private static transient boolean incrementalDraw;\n+  private static transient Long redrawRate;\n+\n+  static\n+  {\n+    incrementalDraw = Boolean.getBoolean (\"awt.image.incrementalDraw\");\n+    redrawRate = Long.getLong (\"awt.image.redrawrate\");\n+  }\n \f\n   // Public and protected API.\n \n@@ -1832,7 +1843,9 @@ public void printAll(Graphics g)\n    * @param y the Y coordinate\n    * @param w the width\n    * @param h the height\n-   * @return true if the image has been fully loaded\n+   * @return false if the image is completely loaded, loading has been\n+   * aborted, or an error has occurred.  true if more updates are\n+   * required.\n    * @see ImageObserver\n    * @see Graphics#drawImage(Image, int, int, Color, ImageObserver)\n    * @see Graphics#drawImage(Image, int, int, ImageObserver)\n@@ -1842,8 +1855,24 @@ public void printAll(Graphics g)\n    */\n   public boolean imageUpdate(Image img, int flags, int x, int y, int w, int h)\n   {\n-    // XXX Implement.\n-    throw new Error(\"not implemented\");\n+    if ((flags & (FRAMEBITS | ALLBITS)) != 0)\n+      repaint ();\n+    else if ((flags & SOMEBITS) != 0)\n+      {\n+\tif (incrementalDraw)\n+\t  {\n+\t    if (redrawRate != null)\n+\t      {\n+\t\tlong tm = redrawRate.longValue();\n+\t\tif (tm < 0)\n+\t\t  tm = 0;\n+\t\trepaint (tm);\n+\t      }\n+\t    else\n+\t      repaint (100);\n+\t  }\n+      }\n+    return (flags & (ALLBITS | ABORT | ERROR)) == 0;\n   }\n \n   /**\n@@ -1854,8 +1883,11 @@ public boolean imageUpdate(Image img, int flags, int x, int y, int w, int h)\n    */\n   public Image createImage(ImageProducer producer)\n   {\n-    // XXX What if peer or producer is null?\n-    return peer.createImage(producer);\n+    // Sun allows producer to be null.\n+    if (peer != null)\n+      return peer.createImage(producer);\n+    else\n+      return getToolkit().createImage(producer);\n   }\n \n   /**\n@@ -1930,6 +1962,9 @@ public VolatileImage createVolatileImage(int width, int height,\n    */\n   public boolean prepareImage(Image image, ImageObserver observer)\n   {\n+    if (image == null)\n+      throw new NullPointerException ();\n+\n     return prepareImage(image, image.getWidth(observer),\n                         image.getHeight(observer), observer);\n   }"}, {"sha": "b1157349b5b6c3e424146bd9d6b3898ee7800acf", "filename": "libjava/java/awt/MediaTracker.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fjava%2Fawt%2FMediaTracker.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5966c9ef9036294c09f0729f9950b90b1d1c3b5/libjava%2Fjava%2Fawt%2FMediaTracker.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMediaTracker.java?ref=a5966c9ef9036294c09f0729f9950b90b1d1c3b5", "patch": "@@ -88,8 +88,8 @@ else if ((flags & ALLBITS) != 0)\n       {\n \tMediaTracker.this.notifyAll();\n       }\n-      \n-      return ((status & COMPLETE) != 0);\n+      // If status is not COMPLETE then we need more updates.\n+      return (status & COMPLETE) == 0;\n     }\n   }\n "}]}