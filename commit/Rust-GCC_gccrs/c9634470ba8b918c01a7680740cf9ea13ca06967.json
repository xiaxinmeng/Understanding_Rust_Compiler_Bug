{"sha": "c9634470ba8b918c01a7680740cf9ea13ca06967", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2MzQ0NzBiYThiOTE4YzAxYTc2ODA3NDBjZjllYTEzY2EwNjk2Nw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-03-12T13:29:16Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-12T13:29:16Z"}, "message": "d/dmd: Merge upstream dmd 7423993c9\n\nFixes C++ mangling for substituted basic types that are target-specific.\nIntroduces a new method that currently does nothing, but could in future\nmake use of flag_abi_version as extern(C++) integration improves in\nlatter versions of the D front-end.\n\nReviewed-on: https://github.com/dlang/dmd/pull/9439\n\ngcc/d/ChangeLog:\n\n2019-03-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* d-lang.cc (d_init_options): Set global.params.cplusplus to C++14.\n\t* d-target.cc (Target::cppFundamentalType): New method.\n\nFrom-SVN: r269611", "tree": {"sha": "279986d79aff26484061e545bce82c387b8edb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/279986d79aff26484061e545bce82c387b8edb0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9634470ba8b918c01a7680740cf9ea13ca06967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9634470ba8b918c01a7680740cf9ea13ca06967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9634470ba8b918c01a7680740cf9ea13ca06967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9634470ba8b918c01a7680740cf9ea13ca06967/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df2a91dece0ac6e410e3cf48b39cba8c3744c5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a91dece0ac6e410e3cf48b39cba8c3744c5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a91dece0ac6e410e3cf48b39cba8c3744c5f3"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "c91a05079b73519338531785fa71ce9e89059b95", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -1,3 +1,8 @@\n+2019-03-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc (d_init_options): Set global.params.cplusplus to C++14.\n+\t* d-target.cc (Target::cppFundamentalType): New method.\n+\n 2019-03-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/89041"}, {"sha": "d97525a590e645ae097710b6595381b9816e72d6", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -282,6 +282,9 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   global.params.betterC = false;\n   global.params.allInst = false;\n \n+  /* Default extern(C++) mangling to C++14.  */\n+  global.params.cplusplus = CppStdRevisionCpp14;\n+\n   global.params.linkswitches = new Strings ();\n   global.params.libfiles = new Strings ();\n   global.params.objfiles = new Strings ();"}, {"sha": "e0cfbafe0b9e565983c6383651c4798009a52cd3", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -385,6 +385,15 @@ Target::cppParameterType (Parameter *arg)\n   return t;\n }\n \n+/* Checks whether TYPE is a vendor-specific fundamental type.  Stores the result\n+   in IS_FUNDAMENTAL and returns true if the parameter was set.  */\n+\n+bool\n+Target::cppFundamentalType (const Type *, bool &)\n+{\n+  return false;\n+}\n+\n /* Return the default system linkage for the target.  */\n \n LINK"}, {"sha": "f58b620d84492390cb912b3854412a83ef93ef90", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -1,4 +1,4 @@\n-fcc235e8e25f7758266f7874edd5abefb9943e0b\n+7423993c996ed9f73d6ba6d58f625ad3c778ca1d\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "9b24fd2c2e46d0bcd826256f71944ba6e011f2b7", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -120,6 +120,40 @@ class CppMangleVisitor : public Visitor\n                 !getQualifier(s));      // at global level\n     }\n \n+    /************************\n+     * Determine if type is a C++ fundamental type.\n+     * Params:\n+     *  t = type to check\n+     * Returns:\n+     *  true if it is a fundamental type\n+     */\n+    static bool isFundamentalType(Type *t)\n+    {\n+        // First check the target whether some specific ABI is being followed.\n+        bool isFundamental;\n+        if (Target::cppFundamentalType(t, isFundamental))\n+            return isFundamental;\n+        if (t->ty == Tenum)\n+        {\n+            // Peel off enum type from special types.\n+            TypeEnum *te = (TypeEnum *)t;\n+            if (te->sym->isSpecial())\n+                t = te->sym->getMemtype(Loc());\n+        }\n+\n+        // Fundamental arithmetic types:\n+        // 1. integral types: bool, char, int, ...\n+        // 2. floating point types: float, double, real\n+        // 3. void\n+        // 4. null pointer: std::nullptr_t (since C++11)\n+        if (t->ty == Tvoid || t->ty == Tbool)\n+            return true;\n+        else if (t->ty == Tnull && global.params.cplusplus >= CppStdRevisionCpp11)\n+            return true;\n+        else\n+            return t->isTypeBasic() && (t->isintegral() || t->isreal());\n+    }\n+\n     /******************************\n      * Write the mangled representation of the template arguments.\n      * Params:\n@@ -741,7 +775,8 @@ class CppMangleVisitor : public Visitor\n      */\n     void writeBasicType(Type *t, char p, char c)\n     {\n-        if (p || t->isConst())\n+        // Only do substitutions for non-fundamental types.\n+        if (!isFundamentalType(t) || t->isConst())\n         {\n             if (substitute(t))\n                 return;\n@@ -767,6 +802,22 @@ class CppMangleVisitor : public Visitor\n         if (t->isImmutable() || t->isShared())\n             return error(t);\n \n+        // Handle any target-specific basic types.\n+        if (const char *tm = Target::cppTypeMangle(t))\n+        {\n+            // Only do substitutions for non-fundamental types.\n+            if (!isFundamentalType(t) || t->isConst())\n+            {\n+                if (substitute(t))\n+                    return;\n+                else\n+                    append(t);\n+            }\n+            CV_qualifiers(t);\n+            buf->writestring(tm);\n+            return;\n+        }\n+\n         /* <builtin-type>:\n          * v        void\n          * w        wchar_t\n@@ -832,17 +883,6 @@ class CppMangleVisitor : public Visitor\n             case Tcomplex80:    p = 'C'; c = 'e';       break;\n \n             default:\n-                // Handle any target-specific basic types.\n-                if (const char *tm = Target::cppTypeMangle(t))\n-                {\n-                    if (substitute(t))\n-                        return;\n-                    else\n-                        append(t);\n-                    CV_qualifiers(t);\n-                    buf->writestring(tm);\n-                    return;\n-                }\n                 return error(t);\n         }\n         writeBasicType(t, p, c);"}, {"sha": "e2d42c7b67b8e093a166b09ac8c29ba68843825b", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -55,6 +55,14 @@ enum CPU\n     native              // the machine the compiler is being run on\n };\n \n+enum CppStdRevision\n+{\n+    CppStdRevisionCpp98 = 199711,\n+    CppStdRevisionCpp11 = 201103,\n+    CppStdRevisionCpp14 = 201402,\n+    CppStdRevisionCpp17 = 201703\n+};\n+\n // Put command line switches in here\n struct Param\n {\n@@ -114,6 +122,7 @@ struct Param\n     bool check10378;    // check for issues transitioning to 10738\n     bool bug10378;      // use pre-bugzilla 10378 search strategy\n     bool vsafe;         // use enhanced @safe checking\n+    unsigned cplusplus;     // version of C++ name mangling to support\n     bool showGaggedErrors;  // print gagged errors anyway\n \n     CPU cpu;                // CPU instruction set to target"}, {"sha": "1729bc33ffa33c9a36e6fc6829336f15a4400885", "filename": "gcc/d/dmd/target.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Fd%2Fdmd%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.h?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -71,5 +71,6 @@ struct Target\n     static const char *cppTypeInfoMangle(ClassDeclaration *cd);\n     static const char *cppTypeMangle(Type *t);\n     static Type *cppParameterType(Parameter *p);\n+    static bool cppFundamentalType(const Type *t, bool& isFundamental);\n     static LINK systemLinkage();\n };"}, {"sha": "6b2bafbe7bca64dbae464d31269dd81c6a73de92", "filename": "gcc/testsuite/gdc.test/runnable/cppa.d", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -619,13 +619,18 @@ else\n     alias c_long_double myld;\n \n extern (C++) myld testld(myld);\n+extern (C++) myld testldld(myld, myld);\n \n \n void test15()\n {\n     myld ld = 5.0;\n     ld = testld(ld);\n     assert(ld == 6.0);\n+\n+    myld ld2 = 5.0;\n+    ld2 = testldld(ld2, ld2);\n+    assert(ld2 == 6.0);\n }\n \n /****************************************/"}, {"sha": "587145c61c30aa9ae9c1c9f9841a2c262dc70d77", "filename": "gcc/testsuite/gdc.test/runnable/extra-files/cppb.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fextra-files%2Fcppb.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9634470ba8b918c01a7680740cf9ea13ca06967/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fextra-files%2Fcppb.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fextra-files%2Fcppb.cpp?ref=c9634470ba8b918c01a7680740cf9ea13ca06967", "patch": "@@ -439,6 +439,12 @@ long double testld(long double ld)\n     return ld + 1;\n }\n \n+long double testldld(long double ld1, long double ld2)\n+{\n+    assert(ld1 == 5);\n+    return ld2 + 1;\n+}\n+\n long testl(long lng)\n {\n     assert(lng == 5);"}]}