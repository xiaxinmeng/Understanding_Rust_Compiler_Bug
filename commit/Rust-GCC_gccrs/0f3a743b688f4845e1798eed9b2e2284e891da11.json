{"sha": "0f3a743b688f4845e1798eed9b2e2284e891da11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzYTc0M2I2ODhmNDg0NWUxNzk4ZWVkOWIyZTIyODRlODkxZGExMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-13T09:32:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-13T09:32:16Z"}, "message": "i386: Add combiner splitter to optimize V2SImode memory rotation [PR96166]\n\nSince the x86 backend enabled V2SImode vectorization (with\nTARGET_MMX_WITH_SSE), slp vectorization can kick in and emit\n        movq    (%rdi), %xmm1\n        pshufd  $225, %xmm1, %xmm0\n        movq    %xmm0, (%rdi)\ninstead of\n        rolq    $32, (%rdi)\nwe used to emit (or emit when slp vectorization is disabled).\nI think the rotate is both smaller and faster, so this patch adds\na combiner splitter to optimize that back.\n\n2021-02-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96166\n\t* config/i386/mmx.md (*mmx_pshufd_1): Add a combine splitter for\n\tswap of V2SImode elements in memory into DImode memory rotate by 32.\n\n\t* gcc.target/i386/pr96166.c: New test.", "tree": {"sha": "d0ae1048cc10ce9b7db5822a0bebd4ae8921cb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ae1048cc10ce9b7db5822a0bebd4ae8921cb88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3a743b688f4845e1798eed9b2e2284e891da11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3a743b688f4845e1798eed9b2e2284e891da11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3a743b688f4845e1798eed9b2e2284e891da11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3a743b688f4845e1798eed9b2e2284e891da11/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab095dad5e1970ceae598ec9c98b07cce3eb599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab095dad5e1970ceae598ec9c98b07cce3eb599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab095dad5e1970ceae598ec9c98b07cce3eb599"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "0f51e616755dffe6550e2ddc602ef48f489dba7b", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3a743b688f4845e1798eed9b2e2284e891da11/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3a743b688f4845e1798eed9b2e2284e891da11/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=0f3a743b688f4845e1798eed9b2e2284e891da11", "patch": "@@ -2076,6 +2076,17 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+;; Optimize V2SImode load from memory, swapping the elements and\n+;; storing back into the memory into DImode rotate of the memory by 32.\n+(define_split\n+  [(set (match_operand:V2SI 0 \"memory_operand\")\n+\t(vec_select:V2SI (match_dup 0)\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_64BIT && (TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\"\n+  [(set (match_dup 0)\n+\t(rotate:DI (match_dup 0) (const_int 32)))]\n+  \"operands[0] = adjust_address (operands[0], DImode, 0);\")\n+\n (define_insn \"mmx_pswapdv2si2\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y,Yv\")\n \t(vec_select:V2SI"}, {"sha": "4d020220dc4ed0ab42817abbaf30475245000de2", "filename": "gcc/testsuite/gcc.target/i386/pr96166.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3a743b688f4845e1798eed9b2e2284e891da11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96166.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3a743b688f4845e1798eed9b2e2284e891da11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96166.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96166.c?ref=0f3a743b688f4845e1798eed9b2e2284e891da11", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/96166 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O3 -mtune=generic -masm=att\" } */\n+/* { dg-final { scan-assembler \"rolq\\\\s\\\\\\$32, \\\\\\(%\\[re]di\\\\\\)\" } } */\n+\n+static inline void\n+swap (int *x, int *y)\n+{\n+  int tmp = *x;\n+  *x = *y;\n+  *y = tmp;\n+}\n+\n+void\n+bar (int (*x)[2])\n+{\n+  int y[2];\n+  __builtin_memcpy (&y, x, sizeof *x);\n+  swap (&y[0], &y[1]);\n+  __builtin_memcpy (x, &y, sizeof *x);\n+}"}]}