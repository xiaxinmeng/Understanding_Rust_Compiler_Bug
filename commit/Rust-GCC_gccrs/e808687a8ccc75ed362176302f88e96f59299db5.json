{"sha": "e808687a8ccc75ed362176302f88e96f59299db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwODY4N2E4Y2NjNzVlZDM2MjE3NjMwMmY4OGU5NmY1OTI5OWRiNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-11-06T23:04:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-06T23:04:28Z"}, "message": "generic-morestack.c (__generic_morestack): Align the returned stack pointer to a 32 byte boundary.\n\n\t* generic-morestack.c (__generic_morestack): Align the returned\n\tstack pointer to a 32 byte boundary.\n\t* config/i386/morestack.S (__morestack_non_split) [32-bit]: Don't\n\tincrement the return address until we have decided that we don't\n\thave a varargs function.\n\t(__morestack) [32-bit]: Align stack correctly when calling C\n\tfunctions.\n\t(__morestack) [64-bit]: Likewise.\n\nFrom-SVN: r193264", "tree": {"sha": "e9afce1a7b828481e60a55ca8c52c5871dfda253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9afce1a7b828481e60a55ca8c52c5871dfda253"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e808687a8ccc75ed362176302f88e96f59299db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e808687a8ccc75ed362176302f88e96f59299db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e808687a8ccc75ed362176302f88e96f59299db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e808687a8ccc75ed362176302f88e96f59299db5/comments", "author": null, "committer": null, "parents": [{"sha": "b142d8a2b55117e93f0fa47f5ea65fd23c08f551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b142d8a2b55117e93f0fa47f5ea65fd23c08f551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b142d8a2b55117e93f0fa47f5ea65fd23c08f551"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "0458afe298d94ef92d6144ca14871d21bbbcac75", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e808687a8ccc75ed362176302f88e96f59299db5", "patch": "@@ -1,3 +1,14 @@\n+2012-11-06  Ian Lance Taylor  <iant@google.com>\n+\n+\t* generic-morestack.c (__generic_morestack): Align the returned\n+\tstack pointer to a 32 byte boundary.\n+\t* config/i386/morestack.S (__morestack_non_split) [32-bit]: Don't\n+\tincrement the return address until we have decided that we don't\n+\thave a varargs function.\n+\t(__morestack) [32-bit]: Align stack correctly when calling C\n+\tfunctions.\n+\t(__morestack) [64-bit]: Likewise.\n+\n 2012-11-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* configure: Regenerate."}, {"sha": "21c82415fe511da30926a7c372028ced612f5079", "filename": "libgcc/config/i386/morestack.S", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fmorestack.S?ref=e808687a8ccc75ed362176302f88e96f59299db5", "patch": "@@ -200,18 +200,19 @@ __morestack_non_split:\n \n \tjb\t2f\t\t\t# Get more space if we need it.\n \n-\t# This breaks call/return prediction, as described above.\n-\tincq\t8(%rsp)\t\t\t# Increment the return address.\n-\n \t# If the instruction that we return to is\n \t#   leaq  24(%rbp), %r11n\n \t# then we have been called by a varargs function that expects\n \t# %ebp to hold a real value.  That can only work if we do the\n \t# full stack split routine.  FIXME: This is fragile.\n \tmovq\t8(%rsp),%rax\n+\tincq\t%rax\t\t\t# Skip ret instruction in caller.\n \tcmpl\t$0x185d8d4c,(%rax)\n \tje\t2f\n \n+\t# This breaks call/return prediction, as described above.\n+\tincq\t8(%rsp)\t\t\t# Increment the return address.\n+\n \tpopq\t%rax\t\t\t# Restore register.\n \n \t.cfi_adjust_cfa_offset -8\t# Adjust for popped register.\n@@ -296,9 +297,13 @@ __morestack:\n \t# argument size is pushed then the new stack frame size is\n \t# pushed.\n \n-\t# Align stack to 16-byte boundary with enough space for saving\n-\t# registers and passing parameters to functions we call.\n-\tsubl\t$40,%esp\n+\t# In the body of a non-leaf function, the stack pointer will\n+\t# be aligned to a 16-byte boundary.  That is CFA + 12 in the\n+\t# stack picture above: (CFA + 12) % 16 == 0.  At this point we\n+\t# have %esp == CFA - 8, so %esp % 16 == 12.  We need some\n+\t# space for saving registers and passing parameters, and we\n+\t# need to wind up with %esp % 16 == 0.\n+\tsubl\t$44,%esp\n \n \t# Because our cleanup code may need to clobber %ebx, we need\n \t# to save it here so the unwinder can restore the value used\n@@ -393,13 +398,15 @@ __morestack:\n \n \tmovl\t%ebp,%esp\t\t# Restore stack pointer.\n \n+\t# As before, we now have %esp % 16 == 12.\n+\n \tpushl\t%eax\t\t\t# Push return value on old stack.\n \tpushl\t%edx\n-\tsubl\t$8,%esp\t\t\t# Align stack to 16-byte boundary.\n+\tsubl\t$4,%esp\t\t\t# Align stack to 16-byte boundary.\n \n \tcall\t__morestack_unblock_signals\n \n-\taddl\t$8,%esp\n+\taddl\t$4,%esp\n \tpopl\t%edx\t\t\t# Restore return value.\n \tpopl\t%eax\n \n@@ -485,15 +492,21 @@ __morestack:\n \tpushq\t%r9\n \n \tpushq\t%r11\n-\tpushq\t$0\t\t\t# For alignment.\n+\n+\t# We entered morestack with the stack pointer aligned to a\n+\t# 16-byte boundary (the call to morestack's caller used 8\n+\t# bytes, and the call to morestack used 8 bytes).  We have now\n+\t# pushed 10 registers, so we are still aligned to a 16-byte\n+\t# boundary.\n \n \tcall\t__morestack_block_signals\n \n \tleaq\t-8(%rbp),%rdi\t\t# Address of new frame size.\n \tleaq\t24(%rbp),%rsi\t\t# The caller's parameters.\n-\taddq\t$8,%rsp\n \tpopq\t%rdx\t\t\t# The size of the parameters.\n \n+\tsubq\t$8,%rsp\t\t\t# Align stack.\n+\n \tcall\t__generic_morestack\n \n \tmovq\t-8(%rbp),%r10\t\t# Reload modified frame size\n@@ -564,13 +577,17 @@ __morestack:\n \n \tmovq\t%rbp,%rsp\t\t# Restore stack pointer.\n \n+\t# Now (%rsp & 16) == 8.\n+\n+\tsubq\t$8,%rsp\t\t\t# For alignment.\n \tpushq\t%rax\t\t\t# Push return value on old stack.\n \tpushq\t%rdx\n \n \tcall\t__morestack_unblock_signals\n \n \tpopq\t%rdx\t\t\t# Restore return value.\n \tpopq\t%rax\n+\taddq\t$8,%rsp\n \n \t.cfi_remember_state\n \tpopq\t%rbp"}, {"sha": "89b2773af9df8b65ef57f7542cf09c28e674b5b1", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808687a8ccc75ed362176302f88e96f59299db5/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=e808687a8ccc75ed362176302f88e96f59299db5", "patch": "@@ -549,6 +549,7 @@ __generic_morestack (size_t *pframe_size, void *old_stack, size_t param_size)\n   char *to;\n   void *ret;\n   size_t i;\n+  size_t aligned;\n \n   current = __morestack_current_segment;\n \n@@ -580,15 +581,19 @@ __generic_morestack (size_t *pframe_size, void *old_stack, size_t param_size)\n \n   *pframe_size = current->size - param_size;\n \n+  /* Align the returned stack to a 32-byte boundary.  */\n+  aligned = (param_size + 31) & ~ (size_t) 31;\n+\n #ifdef STACK_GROWS_DOWNWARD\n   {\n     char *bottom = (char *) (current + 1) + current->size;\n-    to = bottom - param_size;\n-    ret = bottom - param_size;\n+    to = bottom - aligned;\n+    ret = bottom - aligned;\n   }\n #else\n   to = current + 1;\n-  ret = (char *) (current + 1) + param_size;\n+  to += aligned - param_size;\n+  ret = (char *) (current + 1) + aligned;\n #endif\n \n   /* We don't call memcpy to avoid worrying about the dynamic linker"}]}