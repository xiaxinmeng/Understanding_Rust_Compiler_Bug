{"sha": "05779e2c89e06d09a6b685797e87723f7906a5ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3NzllMmM4OWUwNmQwOWE2YjY4NTc5N2U4NzcyM2Y3OTA2YTVjZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-03T00:39:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-04T03:35:34Z"}, "message": "libstdc++: Fix use of is_nothrow_assignable_v in <bits/ranges_uninitialized.h>\n\nWe are passing a value type as the first argument to is_nothrow_assignable_v,\nbut the result of that is inevitably false.  Since this predicate is a part of\nthe condition that guards the corresponding optimizations for these algorithms,\nthis bug means these optimizations are never used.  We should be passing a\nreference type to is_nothrow_assignable_v instead.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_uninitialized.h\n\t(uninitialized_copy_fn::operator()): Pass a reference type as the first\n\targument to is_nothrow_assignable_v.\n\t(uninitialized_copy_fn::operator()): Likewise.\n\t(uninitialized_move_fn::operator()): Likewise.  Return an in_out_result\n\twith the input iterator stripped of its move_iterator.\n\t(uninitialized_move_n_fn::operator()): Likewise.\n\t(uninitialized_fill_fn::operator()): Pass a reference type as the first\n\targument to is_nothrow_assignable_v.\n\t(uninitialized_fill_n_fn::operator()): Likewise.", "tree": {"sha": "8fae04431c834ede3aa8d0c7e77a6525bb2274bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fae04431c834ede3aa8d0c7e77a6525bb2274bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05779e2c89e06d09a6b685797e87723f7906a5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05779e2c89e06d09a6b685797e87723f7906a5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05779e2c89e06d09a6b685797e87723f7906a5ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05779e2c89e06d09a6b685797e87723f7906a5ce/comments", "author": null, "committer": null, "parents": [{"sha": "7f327e8765c25552a1a6ae7d8747f74786f243dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f327e8765c25552a1a6ae7d8747f74786f243dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f327e8765c25552a1a6ae7d8747f74786f243dd"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "45ff06d4ea705054cb5f99c758e9cdaf8890d7f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05779e2c89e06d09a6b685797e87723f7906a5ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05779e2c89e06d09a6b685797e87723f7906a5ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05779e2c89e06d09a6b685797e87723f7906a5ce", "patch": "@@ -1,3 +1,16 @@\n+2020-03-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_uninitialized.h\n+\t(uninitialized_copy_fn::operator()): Pass a reference type as the first\n+\targument to is_nothrow_assignable_v.\n+\t(uninitialized_copy_fn::operator()): Likewise.\n+\t(uninitialized_move_fn::operator()): Likewise.  Return an in_out_result\n+\twith the input iterator stripped of its move_iterator.\n+\t(uninitialized_move_n_fn::operator()): Likewise.\n+\t(uninitialized_fill_fn::operator()): Pass a reference type as the first\n+\targument to is_nothrow_assignable_v.\n+\t(uninitialized_fill_n_fn::operator()): Likewise.\n+\n 2020-03-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94013"}, {"sha": "f97a07a9b4a298106d1f7fc464ae2a79cca64b2b", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05779e2c89e06d09a6b685797e87723f7906a5ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05779e2c89e06d09a6b685797e87723f7906a5ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=05779e2c89e06d09a6b685797e87723f7906a5ce", "patch": "@@ -269,7 +269,7 @@ namespace ranges\n \tif constexpr (sized_sentinel_for<_ISent, _Iter>\n \t\t      && sized_sentinel_for<_OSent, _Out>\n \t\t      && is_trivial_v<_OutType>\n-\t\t      && is_nothrow_assignable_v<_OutType,\n+\t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_reference_t<_Iter>>)\n \t  {\n \t    auto __d1 = ranges::distance(__ifirst, __ilast);\n@@ -316,7 +316,7 @@ namespace ranges\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_Sent, _Out>\n \t\t      && is_trivial_v<_OutType>\n-\t\t      && is_nothrow_assignable_v<_OutType,\n+\t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_reference_t<_Iter>>)\n \t  {\n \t    auto __d = ranges::distance(__ofirst, __olast);\n@@ -354,13 +354,15 @@ namespace ranges\n \tif constexpr (sized_sentinel_for<_ISent, _Iter>\n \t\t      && sized_sentinel_for<_OSent, _Out>\n \t\t      && is_trivial_v<_OutType>\n-\t\t      && is_nothrow_assignable_v<_OutType,\n+\t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_rvalue_reference_t<_Iter>>)\n \t  {\n \t    auto __d1 = ranges::distance(__ifirst, __ilast);\n \t    auto __d2 = ranges::distance(__ofirst, __olast);\n-\t    return ranges::copy_n(std::make_move_iterator(__ifirst),\n-\t\t\t\t  std::min(__d1, __d2), __ofirst);\n+\t    auto [__in, __out]\n+\t      = ranges::copy_n(std::make_move_iterator(__ifirst),\n+\t\t\t       std::min(__d1, __d2), __ofirst);\n+\t    return {std::move(__in).base(), __out};\n \t  }\n \telse\n \t  {\n@@ -404,12 +406,14 @@ namespace ranges\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_Sent, _Out>\n \t\t      && is_trivial_v<_OutType>\n-\t\t      && is_nothrow_assignable_v<_OutType,\n+\t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_rvalue_reference_t<_Iter>>)\n \t  {\n \t    auto __d = ranges::distance(__ofirst, __olast);\n-\t    return ranges::copy_n(std::make_move_iterator(__ifirst),\n-\t\t\t\t  std::min(__n, __d), __ofirst);\n+\t    auto [__in, __out]\n+\t      = ranges::copy_n(std::make_move_iterator(__ifirst),\n+\t\t\t       std::min(__n, __d), __ofirst);\n+\t    return {std::move(__in).base(), __out};\n \t  }\n \telse\n \t  {\n@@ -436,7 +440,7 @@ namespace ranges\n       {\n \tusing _ValueType = remove_reference_t<iter_reference_t<_Iter>>;\n \tif constexpr (is_trivial_v<_ValueType>\n-\t\t      && is_nothrow_assignable_v<_ValueType, const _Tp&>)\n+\t\t      && is_nothrow_assignable_v<_ValueType&, const _Tp&>)\n \t  return ranges::fill(__first, __last, __x);\n \telse\n \t  {\n@@ -469,7 +473,7 @@ namespace ranges\n       {\n \tusing _ValueType = remove_reference_t<iter_reference_t<_Iter>>;\n \tif constexpr (is_trivial_v<_ValueType>\n-\t\t      && is_nothrow_assignable_v<_ValueType, const _Tp&>)\n+\t\t      && is_nothrow_assignable_v<_ValueType&, const _Tp&>)\n \t  return ranges::fill_n(__first, __n, __x);\n \telse\n \t  {"}]}