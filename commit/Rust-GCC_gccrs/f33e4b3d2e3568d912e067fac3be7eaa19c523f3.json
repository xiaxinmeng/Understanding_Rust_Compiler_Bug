{"sha": "f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzZTRiM2QyZTM1NjhkOTEyZTA2N2ZhYzNiZTdlYWExOWM1MjNmMw==", "commit": {"author": {"name": "Carey Evans", "email": "carey.evans@gmail.com", "date": "2005-10-29T22:44:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-29T22:44:23Z"}, "message": "re PR libstdc++/22087 (ctype<char> tables are offset by one on DJGPP)\n\n2005-10-29  Carey Evans  <carey.evans@gmail.com>\n\n\tPR libstdc++/22087\n\t* config/os/djgpp/ctype_inline.h: Fix.\n\t* config/os/djgpp/ctype_noninline.h: Likewise.\n\nFrom-SVN: r105999", "tree": {"sha": "756ad7d68b78f262c6a4c6f4dd22bd40308f4dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/756ad7d68b78f262c6a4c6f4dd22bd40308f4dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/comments", "author": null, "committer": null, "parents": [{"sha": "06bc79e0bb193e7199913cfab1a112b5c3f3da34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc79e0bb193e7199913cfab1a112b5c3f3da34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc79e0bb193e7199913cfab1a112b5c3f3da34"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "4aeee69f030a5727341ebbb5a43f67845fb7d412", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "patch": "@@ -1,3 +1,9 @@\n+2005-10-29  Carey Evans  <carey.evans@gmail.com>\n+\n+\tPR libstdc++/22087\n+\t* config/os/djgpp/ctype_inline.h: Fix.\n+\t* config/os/djgpp/ctype_noninline.h: Likewise.\n+\n 2005-10-28  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24559"}, {"sha": "2383325518f7ce529f666c111e5f433c475e3b12", "filename": "libstdc++-v3/config/os/djgpp/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h?ref=f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,7 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const \n-  { return _M_table[static_cast<unsigned char>(__c + 1)] & __m; }\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n@@ -52,7 +52,8 @@\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !this->is(__m, *__low))\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -61,7 +62,8 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && this->is(__m, *__low) != 0)\n+    while (__low < __high \n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "0c905492c502fb2a8013f6c11ae9d8f4ac66de41", "filename": "libstdc++-v3/config/os/djgpp/ctype_noninline.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4b3d2e3568d912e067fac3be7eaa19c523f3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h?ref=f33e4b3d2e3568d912e067fac3be7eaa19c523f3", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,13 +35,13 @@\n \n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n-  { return 0; }\n+  { return __dj_ctype_flags+1; }\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n-  _M_table(__table ? __table : __dj_ctype_flags)  \n+  _M_table(__table ? __table : classic_table()) \n   { \n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n@@ -52,7 +52,7 @@\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n-  _M_table(__table ? __table : __dj_ctype_flags)  \n+  _M_table(__table ? __table : classic_table()) \n   { \n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n@@ -62,29 +62,29 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[static_cast<int>(__c)+1]; }\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = ::toupper(static_cast<int> (*__low));\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[static_cast<int>(__c)+1]; }\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = ::tolower(static_cast<int> (*__low));\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;"}]}