{"sha": "df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5YmFkODE4MzlmZDllNTMyMzU0M2NiZmU3NGQ5ODU5ZWI0ZGMxYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-11T14:07:36Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-11T14:07:36Z"}, "message": "2004-01-11  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/lang/reflect/TypeSignature.java\n\t(getEncodingOfClass): Documentation fixed.\n\t(getClassForEncoding): Give class loader to Class.forName().\n\tDocumentation fixed.\n\nFrom-SVN: r75675", "tree": {"sha": "32cd778fa636f63b86cde43da3d7b0cbefc0a7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32cd778fa636f63b86cde43da3d7b0cbefc0a7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9bad81839fd9e5323543cbfe74d9859eb4dc1a/comments", "author": null, "committer": null, "parents": [{"sha": "fc58328a061153ec2f9535fad8e6ab1cda20d149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc58328a061153ec2f9535fad8e6ab1cda20d149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc58328a061153ec2f9535fad8e6ab1cda20d149"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "c5c273ac9eedad9f2e91f02ced237bfe11ab7acd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9bad81839fd9e5323543cbfe74d9859eb4dc1a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9bad81839fd9e5323543cbfe74d9859eb4dc1a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "patch": "@@ -1,3 +1,10 @@\n+2004-01-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/lang/reflect/TypeSignature.java\n+\t(getEncodingOfClass): Documentation fixed.\n+\t(getClassForEncoding): Give class loader to Class.forName().\n+\tDocumentation fixed.\n+\n 2004-01-11  Sascha Brawer  <brawer@dandelis.ch>\n \n \t* javax/swing/undo/CompoundEdit.java (serialVersionUID): Added."}, {"sha": "714160c18713eef75248c0260799411b95c205a2", "filename": "libjava/gnu/java/lang/reflect/TypeSignature.java", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9bad81839fd9e5323543cbfe74d9859eb4dc1a/libjava%2Fgnu%2Fjava%2Flang%2Freflect%2FTypeSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9bad81839fd9e5323543cbfe74d9859eb4dc1a/libjava%2Fgnu%2Fjava%2Flang%2Freflect%2FTypeSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Flang%2Freflect%2FTypeSignature.java?ref=df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "patch": "@@ -1,5 +1,5 @@\n /* TypeSignature.java -- Class used to compute type signatures\n-   Copyright (C) 1998, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -139,7 +139,10 @@ public static String getEncodingOfClass(Class clazz)\n    * accepts both object and descriptor formats, but must know which style\n    * of string is being passed in (usually, descriptor should be true). In\n    * descriptor format, \"I\" is treated as int.class, in object format, it\n-   * is treated as a class named I in the unnamed package.\n+   * is treated as a class named I in the unnamed package. This method is\n+   * strictly equivalent to {@link #getClassForEncoding(java.lang.String, boolean, java.lang.ClassLoader)}\n+   * with a class loader equal to <code>null</code>. In that case, it\n+   * uses the default class loader on the calling stack.\n    *\n    * @param type_code the class name to decode\n    * @param descriptor if the string is in descriptor format\n@@ -156,21 +159,22 @@ public static Class getClassForEncoding(String type_code, boolean descriptor)\n   /**\n    * This function is the inverse of <code>getEncodingOfClass</code>. This\n    * accepts both object and descriptor formats, but must know which style\n-   * of string is being passed in (usually, descriptor should be true).In\n+   * of string is being passed in (usually, descriptor should be true). In\n    * descriptor format, \"I\" is treated as int.class, in object format, it\n-   * is treated as a class named I in the unnamed package. It also\n-  * accepts a <code>ClassLoader</code>, which is used to load the class.\n+   * is treated as a class named I in the unnamed package.\n    *\n-   * @param type_code the class name to decode\n-   * @param descriptor if the string is in descriptor format\n-   * @param loader the class loader used to load the class\n-   * @return the corresponding Class object\n-   * @throws ClassNotFoundException if the class cannot be located\n+   * @param type_code The class name to decode.\n+   * @param descriptor If the string is in descriptor format.\n+   * @param loader The class loader when resolving generic object name. If\n+   * <code>loader</code> is null then it uses the default class loader on the\n+   * calling stack.\n+   * @return the corresponding Class object.\n+   * @throws ClassNotFoundException if the class cannot be located.\n    * @see #getEncodingOfClass(Class, boolean)\n    * @see #getClassForEncoding(String, boolean)\n    */\n   public static Class getClassForEncoding(String type_code, boolean descriptor,\n-\t\t\t\t\t  ClassLoader loader)\n+\t\t \t\t\t  ClassLoader loader)\n     throws ClassNotFoundException\n   {\n     if (descriptor)\n@@ -204,7 +208,7 @@ public static Class getClassForEncoding(String type_code, boolean descriptor,\n           case '[':\n           }\n       }\n-    return Class.forName(type_code.replace('/', '.'));\n+    return Class.forName(type_code.replace('/', '.'), true, loader);\n   }\n \n   /**"}]}