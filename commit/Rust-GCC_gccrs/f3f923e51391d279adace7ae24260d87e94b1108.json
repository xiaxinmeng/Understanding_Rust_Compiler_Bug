{"sha": "f3f923e51391d279adace7ae24260d87e94b1108", "node_id": "C_kwDOANBUbNoAKGYzZjkyM2U1MTM5MWQyNzlhZGFjZTdhZTI0MjYwZDg3ZTk0YjExMDg", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-11-26T21:37:46Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-12-13T13:54:01Z"}, "message": "Leverage sysroot for VxWorks\n\nThe build of a VxWorks toolchain relies a lot on system headers\nand VxWorks has a few very specific features that require special\nprocessing. For example, different sets of headers for the kernel\nvs the rtp modes, which the compiler knows about by way of -mrtp\non the command line.\n\nIf we manage to avoid the need for fixincludes on recent versions\nof VxWorks (>= 7), we still need to handle at least VxWorks 6.9 at\nthis stage.\n\nWe sort of get away with locating the correct headers at\nrun-time thanks to environment variables and various tests for\n-mrtp in cpp specs, but getting fixincludes to work for old\nconfigurations has always been tricky and getting a toolchain\nto build with c++/libstdc++ support gets trickier with every\nmove to a more recent release.\n\nsysroot_headers_suffix_spec is a pretty powerful device to help\naddress such issues, and this patch introduces changes that let\nus get advantage of it.\n\nThe general idea is to leverage the assumption that compilations\noccur with --sysroot=$VSB_DIR on vx7 or --sysroot=$WIND_BASE/target\nprior to that.\n\nFor the toolchains we build, this is achieved with a few\nconfigure options like:\n\n  --with-sysroot\n  --with-build-sysroot=${WIND_BASE}/target\n  --with-specs=%{!sysroot=*:--sysroot=%:getenv(WIND_BASE /target)}\n\nThis also allows simplifying the libgcc compilation flags control\nand we take the opportunity to merge t-vxworks7 into t-vxworks as\nthe two files were differing only on the libgcc2 flags part.\n\n2021-12-09  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/t-vxworks: Clear NATIVE_SYSTEM_HEADER_DIR.\n\t* config/vxworks.h (SYSROOT_HEADERS_SUFFIX_SPEC): Define, for\n\tVxWorks 7 and earlier.\n\t(VXWORKS_ADDITIONAL_CPP_SPEC): Simplify accordingly.\n\t(STARTFILE_PREFIX_SPEC): Adjust accordingly.\n\t* config/rs6000/vxworks.h (STARTFILE_PREFIX_SPEC): Adjust.\n\nlibgcc/\n\t* config/t-vxworks (LIBGCC2_INCLUDES): Simplify and handle\n\tboth VxWorks7 and earlier.\n\t* config/t-vxworks7: Remove.\n\t* config.host: Remove special case for vxworks7.", "tree": {"sha": "8dc16865ed3772d51c706522289ff5d376124731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc16865ed3772d51c706522289ff5d376124731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f923e51391d279adace7ae24260d87e94b1108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f923e51391d279adace7ae24260d87e94b1108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f923e51391d279adace7ae24260d87e94b1108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f923e51391d279adace7ae24260d87e94b1108/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf710b5116e6186204edd6a0168202fd8ef0389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf710b5116e6186204edd6a0168202fd8ef0389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf710b5116e6186204edd6a0168202fd8ef0389"}], "stats": {"total": 116, "additions": 61, "deletions": 55}, "files": [{"sha": "fbe09027163fd3778c84bfeade02850cd3163774", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=f3f923e51391d279adace7ae24260d87e94b1108", "patch": "@@ -206,7 +206,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef  STARTFILE_PREFIX_SPEC\n #define STARTFILE_PREFIX_SPEC\t\t\t\t\t\t\\\n- \"%{mrtp:%{!shared:%:getenv(WIND_BASE /target/lib/usr/lib/ppc/PPC32/common)}}\"\n+ \"%{mrtp:%{!shared:/lib/usr/lib/ppc/PPC32/common}}\"\n \n /* For aggregates passing, use the same, consistent ABI as Linux.  */\n #define AGGREGATE_PADDING_FIXED 0"}, {"sha": "689de141644259c502014917a4d5579aba8e220b", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=f3f923e51391d279adace7ae24260d87e94b1108", "patch": "@@ -24,6 +24,14 @@ vxworks-c.o: $(srcdir)/config/vxworks-c.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+# We leverage $sysroot to find target system headers only, distributed\n+# in a VxWorks (a)typical fashion with a different set of headers for\n+# rtp vs kernel mode.  We setup SYSROOT_HEADERS_SUFFIX_SPEC to handle\n+# this, and need to clear NATIVE_SYSTEM_HEADER_DIR to prevent it from\n+# interfering.\n+\n+NATIVE_SYSTEM_HEADER_DIR =\n+\n # Both the kernel and RTP headers provide limits.h.  They embed VxWorks\n # specificities and are dated on some configurations so we both need to\n # provide our own version and make sure the system one gets exposed."}, {"sha": "a89e3d68c62dab4c76d35effb48588243aa70ab4", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f923e51391d279adace7ae24260d87e94b1108/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=f3f923e51391d279adace7ae24260d87e94b1108", "patch": "@@ -28,45 +28,70 @@ along with GCC; see the file COPYING3.  If not see\n    like a traditional Unix, with more external files.  Most of our specs\n    must be aware of the difference.  */\n \n-/* We look for the VxWorks header files using the environment\n-   variables that are set in VxWorks to indicate the location of the\n-   system header files.  We use -idirafter so that the GCC's own\n-   header-file directories (containing <stddef.h>, etc.) come before\n-   the VxWorks system header directories.  */\n+/* Help locate system headers, assuming $sysroot set to $VSB_DIR on vx7 and\n+   $WIND_BASE/target prior to that.  Specs allow tailoring for RTP vs kernel,\n+   and -idirafter allows putting system directories after GCC's own directories\n+   for standard headers such as <stddef.h> or fixed include.\n+\n+   Regarding fixed includes, note the effect of sysroot_headers_suffix_spec:\n+\n+   For the case of VxWorks prior to 7 below, we have:\n+\n+     #define SYSROOT_HEADERS_SUFFIX_SPEC \"%{mrtp:/usr/h;:/h}\"\n+\n+   This results in\n+\n+     $build_sysroot/h     ---> $prefix/include-fixed\n+     $build_sysroot/usr/h ---> $prefix/include-fixed/mrtp for -mrtp\n+\n+   This is very different from what we'd get without a headers_suffix,\n+   which would be:\n+\n+     $build_sysroot     ---> $prefix/include-fixed/h\n+                                                  /usr/h\n+\n+   From (say) #include <assert.h>, we would find the fixed version\n+   in the first case, not in the second.  */\n \n /* Since we provide a default -isystem, expand -isystem on the command\n-   line early.  */\n+   line early.  Then restrict the amount of references we add when compiling\n+   self-tests, as these may be run in contexts where the VxWorks environment\n+   isn't available.  */\n \n-/* Self-tests may be run in contexts where the VxWorks environment isn't\n-   available.  Prevent attempts at designating the location of runtime header\n-   files, libraries or startfiles, which would fail on unset environment\n-   variables and aren't needed for such tests.  */\n #if TARGET_VXWORKS7\n \n+/* We arrange not rely on fixed includes for vx7 and the headers spread over\n+   common kernel/rtp directories in addition to specific ones for each mode.\n+   Setup sysroot_headers_suffix_spec to deal with kernel/rtp distinction.  */\n+\n+#undef SYSROOT_HEADERS_SUFFIX_SPEC\n+#define SYSROOT_HEADERS_SUFFIX_SPEC \"%{mrtp:/usr/h;:/krnl/h}\"\n+\n #undef VXWORKS_ADDITIONAL_CPP_SPEC\n #define VXWORKS_ADDITIONAL_CPP_SPEC                     \\\n  \"%{!nostdinc:%{!fself-test=*:                          \\\n     %{isystem*}                                         \\\n-    %{mrtp: -idirafter %:getenv(VSB_DIR /h)             \\\n-            -idirafter %:getenv(VSB_DIR /share/h)       \\\n-            -idirafter %:getenv(VSB_DIR /usr/h/public)  \\\n-            -idirafter %:getenv(VSB_DIR /usr/h)         \\\n-      ;:    -idirafter %:getenv(VSB_DIR /h)             \\\n-            -idirafter %:getenv(VSB_DIR /share/h)       \\\n-            -idirafter %:getenv(VSB_DIR /krnl/h/system) \\\n-            -idirafter %:getenv(VSB_DIR /krnl/h/public)}}}\"\n+    -idirafter %:getenv(VSB_DIR /h)  \\\n+    -idirafter %:getenv(VSB_DIR /share/h)  \\\n+    -idirafter =/system \\\n+    -idirafter =/public \\\n+  }}\"\n \n #else /* TARGET_VXWORKS7 */\n \n+/* Prior to vx7, rtp and kernel headers are fairly segregated and fixincludes\n+   is needed on each set of headers to cope with expectations of not so old\n+   libstdc++.  A perfect use case for sysroot_headers_suffix.  */\n+\n+#undef SYSROOT_HEADERS_SUFFIX_SPEC\n+#define SYSROOT_HEADERS_SUFFIX_SPEC \"%{mrtp:/usr/h;:/h}\"\n+\n #undef VXWORKS_ADDITIONAL_CPP_SPEC\n #define VXWORKS_ADDITIONAL_CPP_SPEC\t\t\\\n  \"%{!nostdinc:%{!fself-test=*:\t\t\t\\\n     %{isystem*}\t\t\t\t\t\\\n-    %{mrtp: -idirafter %:getenv(WIND_USR /h)\t\\\n-\t    -idirafter %:getenv(WIND_USR /h/wrn/coreip) \\\n-      ;:    -idirafter %:getenv(WIND_BASE /target/h) \\\n-\t    -idirafter %:getenv(WIND_BASE /target/h/wrn/coreip) \\\n-}}}\"\n+    -idirafter =/wrn/coreip \\\n+  }}\"\n \n #endif\n \n@@ -119,8 +144,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #if TARGET_VXWORKS7\n #undef  STARTFILE_PREFIX_SPEC\n-#define STARTFILE_PREFIX_SPEC \\\n-  \"%{!fself-test=*:%:getenv(VSB_DIR /usr/lib/common)}\"\n+#define STARTFILE_PREFIX_SPEC \"/usr/lib/common\"\n #define TLS_SYM \"-u __tls__\"\n #else\n #define TLS_SYM \"\""}, {"sha": "1c1b60cac0b2393e013fa26a03c115aa8c8a6b3f", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f923e51391d279adace7ae24260d87e94b1108/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f923e51391d279adace7ae24260d87e94b1108/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=f3f923e51391d279adace7ae24260d87e94b1108", "patch": "@@ -325,9 +325,6 @@ case ${host} in\n   tmake_file=\"vms/t-vms\"\n   extra_parts=\"crt0.o crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n   ;;\n-*-*-vxworks7*)\n-  tmake_file=t-vxworks7\n-  ;;\n *-*-vxworksae*)\n   tmake_file=t-vxworksae\n   ;;"}, {"sha": "aa7947449764b6b9792290d6ab714da6196d600e", "filename": "libgcc/config/t-vxworks", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f923e51391d279adace7ae24260d87e94b1108/libgcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f923e51391d279adace7ae24260d87e94b1108/libgcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks?ref=f3f923e51391d279adace7ae24260d87e94b1108", "patch": "@@ -13,9 +13,8 @@ LIB2FUNCS_EXCLUDE += _clear_cache\n LIBGCC2_INCLUDES = -nostdinc -I. \\\n   -I$(MULTIBUILDTOP)../../gcc/include-fixed$(MULTISUBDIR) \\\n   -I$(MULTIBUILDTOP)../../gcc/include \\\n-  `case \"/$(MULTIDIR)\" in \\\n-     */mrtp*) echo -I$(WIND_USR)/h -I$(WIND_USR)/h/wrn/coreip ;; \\\n-     *) echo -I$(WIND_BASE)/target/h -I$(WIND_BASE)/target/h/wrn/coreip ;; \\\n-   esac`\n+  $(if $(findstring vxworks7, $(target_noncanonical)), \\\n+    -I$(VSB_DIR)/h -I$(VSB_DIR)/share/h -I=/system -I=/public, \\\n+    -I=/ -I=/wrn/coreip)\n \n CRTSTUFF_T_CFLAGS = $(LIBGCC2_INCLUDES)"}, {"sha": "180784bf3a17a4e318c2decd1837aab7687917da", "filename": "libgcc/config/t-vxworks7", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf710b5116e6186204edd6a0168202fd8ef0389/libgcc%2Fconfig%2Ft-vxworks7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf710b5116e6186204edd6a0168202fd8ef0389/libgcc%2Fconfig%2Ft-vxworks7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks7?ref=7bf710b5116e6186204edd6a0168202fd8ef0389", "patch": "@@ -1,22 +0,0 @@\n-# Don't build libgcc.a with debug info\n-LIBGCC2_DEBUG_CFLAGS =\n-\n-# We provide our own implementation for __clear_cache, using a\n-# VxWorks specific entry point.\n-LIB2FUNCS_EXCLUDE += _clear_cache\n-\n-# This ensures that the correct target headers are used; some VxWorks\n-# system headers have names that collide with GCC's internal (host)\n-# headers, e.g. regs.h. Make sure the local libgcc headers still\n-# prevail (e.g. unwind.h), and that gcc provided header files intended\n-# to be user visible eventually are visible as well.\n-LIBGCC2_INCLUDES = -nostdinc -I. \\\n-  -I$(MULTIBUILDTOP)../../gcc/include-fixed$(MULTISUBDIR) \\\n-  -I$(VSB_DIR)/h -I$(VSB_DIR)/share/h \\\n-  -I$(MULTIBUILDTOP)../../gcc/include \\\n-  `case \"/$(MULTIDIR)\" in \\\n-      */mrtp*) echo -I$(VSB_DIR)/usr/h/public -I$(VSB_DIR)/usr/h ;; \\\n-      *) echo -I$(VSB_DIR)/krnl/h/system -I$(VSB_DIR)/krnl/h/public ;; \\\n-   esac`\n-\n-CRTSTUFF_T_CFLAGS = $(LIBGCC2_INCLUDES)"}]}