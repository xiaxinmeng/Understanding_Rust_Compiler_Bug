{"sha": "4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwZTNiNWFjMzVjMGYyYjJiN2I5M2FlZTgxZGRiMTBhNDVmZjZkMw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-13T02:44:59Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-13T02:44:59Z"}, "message": "remove unnecessary calls to vec::release\n\nThere's no point in calling release () on an auto_vec just before it goes\nout of scope.\n\ngcc/ChangeLog:\n\n2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* tree-data-ref.c (find_data_references_in_stmt): Remove\n\tunnecessary call to vec::release.\n\t(graphite_find_data_references_in_stmt): Likewise.\n\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): Likewise.\n\t* tree-vect-stmts.c (vectorizable_condition): Likewise.\n\nFrom-SVN: r238286", "tree": {"sha": "68d440848ec2763264e4694d2d3088d6e6abf11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68d440848ec2763264e4694d2d3088d6e6abf11c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/comments", "author": null, "committer": null, "parents": [{"sha": "8c6812476a028328a11c68079d1714c9f81b6279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6812476a028328a11c68079d1714c9f81b6279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6812476a028328a11c68079d1714c9f81b6279"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "db920bd90a4109385864059c2bae9f66f5c8b6e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "patch": "@@ -1,3 +1,11 @@\n+2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* tree-data-ref.c (find_data_references_in_stmt): Remove\n+\tunnecessary call to vec::release.\n+\t(graphite_find_data_references_in_stmt): Likewise.\n+\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_condition): Likewise.\n+\n 2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* cfgexpand.c (expand_used_vars): Make the type of a local variable auto_vec."}, {"sha": "337d278790a2b3e6ddffd0ffc539fbdd0672ebde", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "patch": "@@ -3999,7 +3999,7 @@ find_data_references_in_stmt (struct loop *nest, gimple *stmt,\n       gcc_assert (dr != NULL);\n       datarefs->safe_push (dr);\n     }\n-  references.release ();\n+\n   return ret;\n }\n \n@@ -4029,7 +4029,6 @@ graphite_find_data_references_in_stmt (loop_p nest, loop_p loop, gimple *stmt,\n       datarefs->safe_push (dr);\n     }\n \n-  references.release ();\n   return ret;\n }\n "}, {"sha": "8051a669b37ab79b240d62f364711fa11e20b275", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "patch": "@@ -865,7 +865,7 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n   if (TREE_CODE (ref1) == MEM_REF)\n     {\n       if (!integer_zerop (TREE_OPERAND (ref1, 1)))\n-\tgoto may_overlap;\n+\treturn false;\n       ref1 = TREE_OPERAND (TREE_OPERAND (ref1, 0), 0);\n     }\n \n@@ -878,7 +878,7 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n   if (TREE_CODE (ref2) == MEM_REF)\n     {\n       if (!integer_zerop (TREE_OPERAND (ref2, 1)))\n-\tgoto may_overlap;\n+\treturn false;\n       ref2 = TREE_OPERAND (TREE_OPERAND (ref2, 0), 0);\n     }\n \n@@ -898,23 +898,23 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n       do\n \t{\n \t  if (component_refs1.is_empty ())\n-\t    goto may_overlap;\n+\t    return false;\n \t  ref1 = component_refs1.pop ();\n \t}\n       while (!RECORD_OR_UNION_TYPE_P (TREE_TYPE (TREE_OPERAND (ref1, 0))));\n \n       do\n \t{\n \t  if (component_refs2.is_empty ())\n-\t     goto may_overlap;\n+\t     return false;\n \t  ref2 = component_refs2.pop ();\n \t}\n       while (!RECORD_OR_UNION_TYPE_P (TREE_TYPE (TREE_OPERAND (ref2, 0))));\n \n       /* Beware of BIT_FIELD_REF.  */\n       if (TREE_CODE (ref1) != COMPONENT_REF\n \t  || TREE_CODE (ref2) != COMPONENT_REF)\n-\tgoto may_overlap;\n+\treturn false;\n \n       tree field1 = TREE_OPERAND (ref1, 1);\n       tree field2 = TREE_OPERAND (ref2, 1);\n@@ -927,12 +927,10 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n \n       /* We cannot disambiguate fields in a union or qualified union.  */\n       if (type1 != type2 || TREE_CODE (type1) != RECORD_TYPE)\n-\t goto may_overlap;\n+\t return false;\n \n       if (field1 != field2)\n \t{\n-\t  component_refs1.release ();\n-\t  component_refs2.release ();\n \t  /* A field and its representative need to be considered the\n \t     same.  */\n \t  if (DECL_BIT_FIELD_REPRESENTATIVE (field1) == field2\n@@ -946,9 +944,6 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n \t}\n     }\n \n-may_overlap:\n-  component_refs1.release ();\n-  component_refs2.release ();\n   return false;\n }\n "}, {"sha": "ce5536c69276962bd8bd426f9e032c04e472bd78", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4a0e3b5ac35c0f2b2b7b93aee81ddb10a45ff6d3", "patch": "@@ -7686,9 +7686,6 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n \t      if (!masked)\n \t\tvec_oprnds1 = vec_defs.pop ();\n \t      vec_oprnds0 = vec_defs.pop ();\n-\n-              ops.release ();\n-              vec_defs.release ();\n             }\n           else\n             {"}]}