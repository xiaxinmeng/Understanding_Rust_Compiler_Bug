{"sha": "049d2def48689b21149b6a7ad19c865e1d393627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ZDJkZWY0ODY4OWIyMTE0OWI2YTdhZDE5Yzg2NWUxZDM5MzYyNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-06-18T11:17:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-06-18T11:17:53Z"}, "message": "tidy\n\nFrom-SVN: r43440", "tree": {"sha": "0ceeb3a7a93e7cb129032c4067c41e688c18b8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ceeb3a7a93e7cb129032c4067c41e688c18b8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049d2def48689b21149b6a7ad19c865e1d393627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049d2def48689b21149b6a7ad19c865e1d393627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049d2def48689b21149b6a7ad19c865e1d393627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049d2def48689b21149b6a7ad19c865e1d393627/comments", "author": null, "committer": null, "parents": [{"sha": "3b40a214319bbfdad0128bf6d6cf861656232872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b40a214319bbfdad0128bf6d6cf861656232872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b40a214319bbfdad0128bf6d6cf861656232872"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "013b3ba75769bc91fbf4b23ad4577b7b9230b76f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d2def48689b21149b6a7ad19c865e1d393627/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d2def48689b21149b6a7ad19c865e1d393627/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=049d2def48689b21149b6a7ad19c865e1d393627", "patch": "@@ -7658,11 +7658,10 @@ dfs_accumulate_vtbl_inits (binfo, orig_binfo, rtti_binfo, t, l)\n \t 1) We are in the same place.\n \t 2) We are a primary base within a lost primary virtual base of\n \t RTTI_BINFO.\n-\t 3) We are not primary to anything else in RTTI_BINFO.  */\n+\t 3) We are primary to something not a base of RTTI_BINFO.  */\n \t  \n       tree b = BINFO_PRIMARY_BASE_OF (binfo);\n       tree last = NULL_TREE;\n-      tree primary = NULL_TREE;\n \n       /* First, look through the bases we are primary to for RTTI_BINFO\n \t or a virtual base.  */\n@@ -7686,14 +7685,12 @@ dfs_accumulate_vtbl_inits (binfo, orig_binfo, rtti_binfo, t, l)\n       if (b == rtti_binfo\n \t  || (b && binfo_for_vbase (BINFO_TYPE (b),\n \t\t\t\t    BINFO_TYPE (rtti_binfo))))\n-\tprimary = last;\n-      /* Otherwise, this is case 3 and we get our own.  */\n+\t/* Just set our BINFO_VTABLE to point to LAST, as we may not have\n+\t   set LAST's BINFO_VTABLE yet.  We'll extract the actual vptr in\n+\t   binfo_ctor_vtable after everything's been set up.  */\n+\tvtbl = last;\n \n-      if (primary)\n-\t/* We're the primary of some binfo that we may not have\n-\t   met in the inheritance graph walk of RTTI_BINFO.  Just\n-\t   point to it.  */\n-\tvtbl = primary;\n+      /* Otherwise, this is case 3 and we get our own.  */\n     }\n   else if (!BINFO_NEW_VTABLE_MARKED (orig_binfo, BINFO_TYPE (rtti_binfo)))\n     return inits;"}]}