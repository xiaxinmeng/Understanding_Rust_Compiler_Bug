{"sha": "0701bb567b104631c85fbb5987e10d86c3b86705", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwMWJiNTY3YjEwNDYzMWM4NWZiYjU5ODdlMTBkODZjM2I4NjcwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-01T18:14:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-01T18:14:29Z"}, "message": "re PR c++/49813 ([C++0x] sinh vs asinh vs constexpr)\n\n\tPR c++/49813\n\t* semantics.c (potential_constant_expression_1): Allow any builtin.\n\t(morally_constexpr_builtin_function_p): Remove.\n\nFrom-SVN: r177066", "tree": {"sha": "c813542dd02fd8e19cea0ad998ec3b0934b19034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c813542dd02fd8e19cea0ad998ec3b0934b19034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0701bb567b104631c85fbb5987e10d86c3b86705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0701bb567b104631c85fbb5987e10d86c3b86705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0701bb567b104631c85fbb5987e10d86c3b86705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0701bb567b104631c85fbb5987e10d86c3b86705/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03acddfe0cd541d7f37345a8c2eb3f905d14389a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acddfe0cd541d7f37345a8c2eb3f905d14389a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03acddfe0cd541d7f37345a8c2eb3f905d14389a"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "b40b290fb50e21839489d459f93ef8b919eede7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0701bb567b104631c85fbb5987e10d86c3b86705", "patch": "@@ -1,3 +1,9 @@\n+2011-08-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49813\n+\t* semantics.c (potential_constant_expression_1): Allow any builtin.\n+\t(morally_constexpr_builtin_function_p): Remove.\n+\n 2011-07-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49867"}, {"sha": "47b714fc04d78a33d3bd0b300dbc7e8878810691", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0701bb567b104631c85fbb5987e10d86c3b86705", "patch": "@@ -7523,32 +7523,6 @@ check_automatic_or_tls (tree ref)\n }\n #endif\n \n-/* Return true if the DECL designates a builtin function that is\n-   morally constexpr, in the sense that its parameter types and\n-   return type are literal types and the compiler is allowed to\n-   fold its invocations.  */\n-\n-static bool\n-morally_constexpr_builtin_function_p (tree decl)\n-{\n-  tree funtype = TREE_TYPE (decl);\n-  tree t;\n-\n-  if (!is_builtin_fn (decl))\n-    return false;\n-  if (!literal_type_p (TREE_TYPE (funtype)))\n-    return false;\n-  for (t = TYPE_ARG_TYPES (funtype); t != NULL ; t = TREE_CHAIN (t))\n-    {\n-      if (t == void_list_node)\n-        return true;\n-      if (!literal_type_p (TREE_VALUE (t)))\n-        return false;\n-    }\n-  /* We assume no varargs builtins are suitable.  */\n-  return t != NULL;\n-}\n-\n /* Return true if T denotes a potentially constant expression.  Issue\n    diagnostic as appropriate under control of FLAGS.  If WANT_RVAL is true,\n    an lvalue-rvalue conversion is implied.\n@@ -7656,7 +7630,9 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \t\tif (builtin_valid_in_constant_expr_p (fun))\n \t\t  return true;\n \t\tif (!DECL_DECLARED_CONSTEXPR_P (fun)\n-\t\t    && !morally_constexpr_builtin_function_p (fun))\n+\t\t    /* Allow any built-in function; if the expansion\n+\t\t       isn't constant, we'll deal with that then.  */\n+\t\t    && !is_builtin_fn (fun))\n \t\t  {\n \t\t    if (flags & tf_error)\n \t\t      {"}, {"sha": "aa7354b19b98c93597217e64d99f245470779f22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0701bb567b104631c85fbb5987e10d86c3b86705", "patch": "@@ -1,3 +1,8 @@\n+2011-08-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49813\n+\t* g++.dg/cpp0x/constexpr-builtin1.C: New.\n+\n 2011-08-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/49927"}, {"sha": "b3f5576360b2d052e482658532de280b58285366", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-builtin1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-builtin1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0701bb567b104631c85fbb5987e10d86c3b86705/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-builtin1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-builtin1.C?ref=0701bb567b104631c85fbb5987e10d86c3b86705", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/49813\n+// { dg-options -std=c++0x }\n+\n+inline constexpr bool\n+isinf(long double __x)\n+{ return __builtin_isinf(__x); }\n+\n+inline constexpr bool\n+isinf(double __x)\n+{ return __builtin_isinf(__x); }\n+\n+inline constexpr bool\n+isnan(long double __x)\n+{ return __builtin_isnan(__x); }\n+\n+int main()\n+{\n+  constexpr long double num1 = __builtin_isinf(1.l); // Ok.\n+\n+  constexpr long double num2 = isinf(1.l);           // Error.\n+\n+  constexpr double      num3 = isinf(1.);            // Ok.\n+\n+  constexpr long double num4 = isnan(1.l);           // Ok.\n+}"}]}