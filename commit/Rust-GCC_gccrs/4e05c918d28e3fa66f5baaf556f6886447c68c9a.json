{"sha": "4e05c918d28e3fa66f5baaf556f6886447c68c9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUwNWM5MThkMjhlM2ZhNjZmNWJhYWY1NTZmNjg4NjQ0N2M2OGM5YQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-22T17:21:28Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-06-04T20:27:47Z"}, "message": "libstdc++: Specialize copy/copy_n for istreambuf_iterator and deque iterators\n\nAdd __copy_n_a overloads for std::deque iterators to replace with C memmove\nwhen possible. Expose std::copy_n implementation details in pre-C++11 modes\nand use it for std::copy overloads.\n\nlibstdc++-v3/ChangeLog\n\n\t* include/bits/stl_algo.h (__copy_n_a): Move to ...\n\t* include/bits/stl_algobase.h (__copy_n_a): ...here. Add __strict\n\tparameter.\n\t(__copy_n_a(istreambuf_iterator<>, _Size, _Deque_iterator<>, bool)):\n\tDeclare.\n\t(__niter_base(const _Safe_iterator<_Ite, _Seq,\n\trandom_access_iterator_tag>&)): Declare.\n\t(__copy_move_a2(istreambuf_iterator<>, istreambuf_iterator<>,\n\t_Deque_iterator<>)): Declare.\n\t* include/bits/deque.tcc\n\t(__copy_move_a2(istreambuf_iterator<>, istreambuf_iterator<>,\n\t_Deque_iterator<>)): New.\n\t(__copy_n_a(istreambuf_iterator<>, _Size, _Deque_iterator<>, bool)):\n\tNew.\n\t* include/bits/streambuf_iterator.h\n\t(__copy_n_a(istreambuf_iterator<>, _Size, _CharT*, bool)): Adapt.\n\t* include/debug/safe_iterator.tcc (__niter_base): New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc\n\t(test03): New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/debug/deque_neg.cc:\n\tNew test.\n\t* testsuite/25_algorithms/copy_n/debug/istreambuf_ite_deque_neg.cc:\n\tNew test.\n\t* testsuite/25_algorithms/copy_n/istreambuf_iterator/2.cc: New test.\n\t* testsuite/25_algorithms/copy_n/istreambuf_iterator/deque.cc:\n\tNew test.", "tree": {"sha": "43106801a994eaaf30b9ce5134b76ac524143f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43106801a994eaaf30b9ce5134b76ac524143f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e05c918d28e3fa66f5baaf556f6886447c68c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e05c918d28e3fa66f5baaf556f6886447c68c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e05c918d28e3fa66f5baaf556f6886447c68c9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e05c918d28e3fa66f5baaf556f6886447c68c9a/comments", "author": null, "committer": null, "parents": [{"sha": "8e788ac671626344fa79390808c4d02302387d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e788ac671626344fa79390808c4d02302387d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e788ac671626344fa79390808c4d02302387d0f"}], "stats": {"total": 384, "additions": 349, "deletions": 35}, "files": [{"sha": "1d32a1691c79713c0bcc7d024e9e10e01f3518f3", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -1065,6 +1065,57 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       return __result;\n     }\n \n+  template<bool _IsMove, typename _CharT>\n+    typename __gnu_cxx::__enable_if<\n+      __is_char<_CharT>::__value,\n+      _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\n+    __copy_move_a2(\n+\tistreambuf_iterator<_CharT, char_traits<_CharT> > __first,\n+\tistreambuf_iterator<_CharT, char_traits<_CharT> > __last,\n+\t_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> __result)\n+    {\n+      if (__first == __last)\n+\treturn __result;\n+\n+      for (;;)\n+\t{\n+\t  const std::ptrdiff_t __len = __result._M_last - __result._M_cur;\n+\t  const std::ptrdiff_t __nb\n+\t    = std::__copy_n_a(__first, __len, __result._M_cur, false)\n+\t    - __result._M_cur;\n+\t  __result += __nb;\n+\n+\t  if (__nb != __len)\n+\t    break;\n+\t}\n+\n+      return __result;\n+    }\n+\n+  template<typename _CharT, typename _Size>\n+    typename __gnu_cxx::__enable_if<\n+      __is_char<_CharT>::__value,\n+      _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\n+    __copy_n_a(\n+      istreambuf_iterator<_CharT, char_traits<_CharT> > __it, _Size __size,\n+      _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> __result,\n+      bool __strict)\n+    {\n+      if (__size == 0)\n+\treturn __result;\n+\n+      do\n+\t{\n+\t  const _Size __len\n+\t    = std::min<_Size>(__result._M_last - __result._M_cur, __size);\n+\t  std::__copy_n_a(__it, __len, __result._M_cur, __strict);\n+\t  __result += __len;\n+\t  __size -= __len;\n+\t}\n+      while (__size != 0);\n+      return __result;\n+    }\n+\n   template<bool _IsMove,\n \t   typename _Tp, typename _Ref, typename _Ptr, typename _OI>\n     _OI"}, {"sha": "fd6edd0d5f4a5a2937cb64f54542228611d6e8b8", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -705,31 +705,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __result;\n     }\n \n-  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n-    _GLIBCXX20_CONSTEXPR\n-    _OutputIterator\n-    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result)\n-    {\n-      if (__n > 0)\n-\t{\n-\t  while (true)\n-\t    {\n-\t      *__result = *__first;\n-\t      ++__result;\n-\t      if (--__n > 0)\n-\t\t++__first;\n-\t      else\n-\t\tbreak;\n-\t    }\n-\t}\n-      return __result;\n-    }\n- \n-  template<typename _CharT, typename _Size>\n-    __enable_if_t<__is_char<_CharT>::__value, _CharT*>\n-    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT>>,\n-\t       _Size, _CharT*);\n-\n   template<typename _InputIterator, typename _Size, typename _OutputIterator>\n     _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n@@ -738,7 +713,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return std::__niter_wrap(__result,\n \t\t\t       __copy_n_a(__first, __n,\n-\t\t\t\t\t  std::__niter_base(__result)));\n+\t\t\t\t\t  std::__niter_base(__result), true));\n     }\n \n   template<typename _RandomAccessIterator, typename _Size,"}, {"sha": "0163d8f902d697b5652668e107791bd1fd918383", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -314,6 +314,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)\n     { return __it; }\n \n+  template<typename _Ite, typename _Seq>\n+    _Ite\n+    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,\n+\t\t std::random_access_iterator_tag>&);\n+\n   // Reverse the __niter_base transformation to get a\n   // __normal_iterator back again (this assumes that __normal_iterator\n   // is only used to wrap random access iterators, like pointers).\n@@ -466,6 +471,15 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n \t\t   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n \n+  template<bool _IsMove, typename _CharT>\n+    typename __gnu_cxx::__enable_if<\n+      __is_char<_CharT>::__value,\n+      _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\n+    __copy_move_a2(\n+\tistreambuf_iterator<_CharT, char_traits<_CharT> >,\n+\tistreambuf_iterator<_CharT, char_traits<_CharT> >,\n+\t_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);\n+\n   template<bool _IsMove, typename _II, typename _OI>\n     _GLIBCXX20_CONSTEXPR\n     inline _OI\n@@ -539,6 +553,41 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \t\t  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,\n \t\t  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);\n \n+  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    _GLIBCXX20_CONSTEXPR\n+    _OutputIterator\n+    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,\n+\t       bool)\n+    {\n+      if (__n > 0)\n+\t{\n+\t  while (true)\n+\t    {\n+\t      *__result = *__first;\n+\t      ++__result;\n+\t      if (--__n > 0)\n+\t\t++__first;\n+\t      else\n+\t\tbreak;\n+\t    }\n+\t}\n+      return __result;\n+    }\n+\n+  template<typename _CharT, typename _Size>\n+    typename __gnu_cxx::__enable_if<\n+      __is_char<_CharT>::__value, _CharT*>::__type\n+    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n+\t       _Size, _CharT*, bool);\n+\n+  template<typename _CharT, typename _Size>\n+    typename __gnu_cxx::__enable_if<\n+      __is_char<_CharT>::__value,\n+      _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\n+    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,\n+\t       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>,\n+\t       bool);\n+\n   /**\n    *  @brief Copies the range [first,last) into result.\n    *  @ingroup mutating_algorithms"}, {"sha": "184c82cd5bf83375c735d2664d604cab20bded2d", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -82,11 +82,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__copy_move_a2(istreambuf_iterator<_CharT2>,\n \t\t       istreambuf_iterator<_CharT2>, _CharT2*);\n \n-#if __cplusplus >= 201103L\n       template<typename _CharT2, typename _Size>\n-\tfriend __enable_if_t<__is_char<_CharT2>::__value, _CharT2*>\n-\t__copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*);\n-#endif\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t\t\t\t       _CharT2*>::__type\n+\t__copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*, bool);\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n@@ -396,10 +395,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __result;\n     }\n \n-#if __cplusplus >= 201103L\n   template<typename _CharT, typename _Size>\n-    __enable_if_t<__is_char<_CharT>::__value, _CharT*>\n-    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result)\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    _CharT*>::__type\n+    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,\n+\t       bool __strict __attribute__((__unused__)))\n     {\n       if (__n == 0)\n \treturn __result;\n@@ -409,12 +409,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      ._M_iterator(__it));\n       _CharT* __beg = __result;\n       __result += __it._M_sbuf->sgetn(__beg, __n);\n-      __glibcxx_requires_cond(__result - __beg == __n,\n+      __glibcxx_requires_cond(!__strict || __result - __beg == __n,\n \t\t\t      _M_message(__gnu_debug::__msg_inc_istreambuf)\n \t\t\t      ._M_iterator(__it));\n       return __result;\n     }\n-#endif // C++11\n \n   template<typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,"}, {"sha": "888ac803ae53cbe58cdccfd19bbb59a161991a92", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -234,6 +234,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  template<typename _Ite, typename _Seq>\n+    _Ite\n+    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,\n+\t\t std::random_access_iterator_tag>& __it)\n+    { return __it.base(); }\n+\n   template<bool _IsMove,\n \t   typename _Ite, typename _Seq, typename _Cat, typename _OI>\n     _OI"}, {"sha": "bc23497ff0ecdc54f17d9601d8fb974ed83994bd", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -22,6 +22,7 @@\n #include <algorithm>\n #include <cstring>\n #include <vector>\n+#include <deque>\n \n #include <testsuite_hooks.h>\n \n@@ -76,9 +77,34 @@ void test02()\n   VERIFY( !memcmp(buffer.data(), buffer_ref, 16500) );\n }\n \n+void test03()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+\t   fbuf(\"istream_unformatted-1.txt\");\n+\n+  char buffer_ref[16500];\n+  std::deque<char> buffer(16500, 'a');\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  in_iterator_type end;\n+  copy(beg, end, buffer.begin());\n+\n+  VERIFY( fbuf_ref.good() );\n+  VERIFY( fbuf.good() );\n+\n+  VERIFY( std::equal(buffer.begin(), buffer.end(), buffer_ref) );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "26627e37440534f728f8810f67d246659cfb9285", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/debug/deque_neg.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2Fdebug%2Fdeque_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2Fdebug%2Fdeque_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2Fdebug%2Fdeque_neg.cc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <sstream>\n+#include <deque>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+  deque<char> d(sizeof(data1) - 2, '0');\n+\n+  copy(beg1, end1, d.begin());\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ede641820b5d93942157fb51a075818caa3e6533", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/debug/istreambuf_ite_deque_neg.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fdebug%2Fistreambuf_ite_deque_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fdebug%2Fistreambuf_ite_deque_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fdebug%2Fistreambuf_ite_deque_neg.cc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 xfail *-*-* } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <deque>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+\t   fbuf(\"istream_unformatted-1.txt\");\n+\n+  char buffer_ref[16500];\n+  deque<char> dq(17000, 'a');\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  copy_n(beg, 17000, dq.begin());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5e1a0c2b75bf313d8c84d8d556d96e67c4d59af6", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/istreambuf_iterator/2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2F2.cc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-fileio \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <cstring>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+\t   fbuf(\"istream_unformatted-1.txt\");\n+\n+  char buffer_ref[16500],\n+       buffer[16501];\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  copy_n(beg, 16500, buffer);\n+\n+  VERIFY( fbuf_ref.good() );\n+  VERIFY( fbuf.good() );\n+\n+  VERIFY( !memcmp(buffer, buffer_ref, 16500) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ace73701b90ea55635073038763ce070963c225a", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/istreambuf_iterator/deque.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2Fdeque.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e05c918d28e3fa66f5baaf556f6886447c68c9a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2Fdeque.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fistreambuf_iterator%2Fdeque.cc?ref=4e05c918d28e3fa66f5baaf556f6886447c68c9a", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-fileio \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <deque>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+\t   fbuf(\"istream_unformatted-1.txt\");\n+\n+  char buffer_ref[16500];\n+  deque<char> dq(16500, 'a');\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  copy_n(beg, 16500, dq.begin());\n+\n+  VERIFY( fbuf_ref.good() );\n+  VERIFY( fbuf.good() );\n+\n+  VERIFY( equal(dq.begin(), dq.end(), buffer_ref) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}