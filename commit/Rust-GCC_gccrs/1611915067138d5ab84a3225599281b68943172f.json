{"sha": "1611915067138d5ab84a3225599281b68943172f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxMTkxNTA2NzEzOGQ1YWI4NGEzMjI1NTk5MjgxYjY4OTQzMTcyZg==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2007-03-07T18:05:39Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2007-03-07T18:05:39Z"}, "message": "Win32Process.java: Added nested class EOFInputStream.\n\n\t* java/lang/Win32Process.java: Added nested class EOFInputStream.\n\t* java/lang/natWin32Process.cc (ChildProcessPipe): Added DUMMY\n\tenum and implementation.\n\t(startProcess): Use redirect flag.\n\t* classpath/lib/java/lang/Win32Process.class: Regenerated.\n\t* classpath/lib/java/lang/Win32Process$EOFInputStream.class: New.\n\t* gcj/javaprims.h: Regenerated.\n\t* java/lang/Win32Process$EOFInputStream.h: New.\n\nFrom-SVN: r122668", "tree": {"sha": "9946e4ef3a910462a687ebc5181b8f1776dcf5ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9946e4ef3a910462a687ebc5181b8f1776dcf5ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1611915067138d5ab84a3225599281b68943172f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1611915067138d5ab84a3225599281b68943172f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1611915067138d5ab84a3225599281b68943172f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1611915067138d5ab84a3225599281b68943172f/comments", "author": null, "committer": null, "parents": [{"sha": "3f3e5a9ade742e4cc257309cb1748d03601ad18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3e5a9ade742e4cc257309cb1748d03601ad18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3e5a9ade742e4cc257309cb1748d03601ad18c"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "47ad13801125aa1b14d43d58943f53562a56298f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1611915067138d5ab84a3225599281b68943172f", "patch": "@@ -1,3 +1,14 @@\n+2007-03-07  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* java/lang/Win32Process.java: Added nested class EOFInputStream.\n+\t* java/lang/natWin32Process.cc (ChildProcessPipe): Added DUMMY\n+\tenum and implementation.\n+\t(startProcess): Use redirect flag.\n+\t* classpath/lib/java/lang/Win32Process.class: Regenerated.\n+\t* classpath/lib/java/lang/Win32Process$EOFInputStream.class: New.\n+\t* gcj/javaprims.h: Regenerated.\n+\t* java/lang/Win32Process$EOFInputStream.h: New.\n+\n 2007-03-07  Andrew Haley  <aph@redhat.com>\n \n \t* libgcj_bc.c (JvRunMainName): Declare."}, {"sha": "a43b1f155bdde53b030e61f72326dd4d0295ba94", "filename": "libjava/classpath/lib/java/lang/Win32Process$EOFInputStream.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process%24EOFInputStream.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process%24EOFInputStream.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process%24EOFInputStream.class?ref=1611915067138d5ab84a3225599281b68943172f"}, {"sha": "200aaaac5e1b728f88aa93396341db4abb8edce5", "filename": "libjava/classpath/lib/java/lang/Win32Process.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class?ref=1611915067138d5ab84a3225599281b68943172f"}, {"sha": "e4c29fe613812c6aa97c1a584f26ca043edb942c", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=1611915067138d5ab84a3225599281b68943172f", "patch": "@@ -255,6 +255,7 @@ extern \"Java\"\n       class VirtualMachineError;\n       class Void;\n       class Win32Process;\n+      class Win32Process$EOFInputStream;\n       namespace annotation\n       {\n         class Annotation;"}, {"sha": "b0224f332f759675862a0c59c7a486c31e3d6f5b", "filename": "libjava/java/lang/Win32Process$EOFInputStream.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FWin32Process%24EOFInputStream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FWin32Process%24EOFInputStream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FWin32Process%24EOFInputStream.h?ref=1611915067138d5ab84a3225599281b68943172f", "patch": "@@ -0,0 +1,23 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __java_lang_Win32Process$EOFInputStream__\n+#define __java_lang_Win32Process$EOFInputStream__\n+\n+#pragma interface\n+\n+#include <java/io/InputStream.h>\n+\n+class java::lang::Win32Process$EOFInputStream : public ::java::io::InputStream\n+{\n+\n+  Win32Process$EOFInputStream();\n+public:\n+  virtual jint read();\n+public: // actually package-private\n+  static ::java::lang::Win32Process$EOFInputStream * instance;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __java_lang_Win32Process$EOFInputStream__"}, {"sha": "f22b548820f03286d8ab53b7579fede0b5ba2273", "filename": "libjava/java/lang/Win32Process.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FWin32Process.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FWin32Process.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FWin32Process.java?ref=1611915067138d5ab84a3225599281b68943172f", "patch": "@@ -85,4 +85,13 @@ private native void startProcess (String[] progarray,\n \t\t\t\t    boolean redirect)\n     throws IOException;\n   private native void cleanup ();\n+\n+  private static class EOFInputStream extends InputStream\n+  {\n+    static EOFInputStream instance = new EOFInputStream();\n+    public int read()\n+    {\n+      return -1;\n+    }\n+  }\n }"}, {"sha": "0e7f60d6cadba9789f25738f8a3f87fd08d223ef", "filename": "libjava/java/lang/natWin32Process.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1611915067138d5ab84a3225599281b68943172f/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatWin32Process.cc?ref=1611915067138d5ab84a3225599281b68943172f", "patch": "@@ -25,6 +25,7 @@ details.  */\n #include <java/io/FileOutputStream.h>\n #include <java/io/IOException.h>\n #include <java/lang/OutOfMemoryError.h>\n+#include <java/lang/Win32Process$EOFInputStream.h>\n #include <gnu/java/nio/channels/FileChannelImpl.h>\n \n using gnu::java::nio::channels::FileChannelImpl;\n@@ -146,7 +147,7 @@ class ChildProcessPipe\n public:\n   // Indicates from the child process' point of view\n   // whether the pipe is for reading or writing.\n-  enum EType {INPUT, OUTPUT};\n+  enum EType {INPUT, OUTPUT, DUMMY};\n \n   ChildProcessPipe(EType eType);\n   ~ChildProcessPipe();\n@@ -163,8 +164,11 @@ class ChildProcessPipe\n };\n \n ChildProcessPipe::ChildProcessPipe(EType eType):\n-  m_eType(eType)\n+  m_eType(eType), m_hRead(0), m_hWrite(0)\n {\n+  if (eType == DUMMY)\n+    return;\n+  \n   SECURITY_ATTRIBUTES sAttrs;\n \n   // Explicitly allow the handles to the pipes to be inherited.\n@@ -195,7 +199,8 @@ ChildProcessPipe::~ChildProcessPipe()\n   // Close the parent end of the pipe. This\n   // destructor is called after the child process\n   // has been spawned.\n-  CloseHandle(getChildHandle());\n+  if (m_eType != DUMMY)\n+    CloseHandle(getChildHandle());\n }\n \n HANDLE ChildProcessPipe::getParentHandle()\n@@ -284,15 +289,19 @@ java::lang::Win32Process::startProcess (jstringArray progarray,\n       // on each of standard streams.\n       ChildProcessPipe aChildStdIn(ChildProcessPipe::INPUT);\n       ChildProcessPipe aChildStdOut(ChildProcessPipe::OUTPUT);\n-      ChildProcessPipe aChildStdErr(ChildProcessPipe::OUTPUT);\n+      ChildProcessPipe aChildStdErr(redirect ? ChildProcessPipe::DUMMY\n+\t\t\t\t    : ChildProcessPipe::OUTPUT);\n \n       outputStream = new FileOutputStream (new FileChannelImpl (\n                            (jint) aChildStdIn.getParentHandle (),\n \t\t\t   FileChannelImpl::WRITE));\n       inputStream = new FileInputStream (new FileChannelImpl (\n                            (jint) aChildStdOut.getParentHandle (),\n \t\t\t   FileChannelImpl::READ));\n-      errorStream = new FileInputStream (new FileChannelImpl (\n+      if (redirect)\n+        errorStream = Win32Process$EOFInputStream::instance;\n+      else\n+        errorStream = new FileInputStream (new FileChannelImpl (\n                            (jint) aChildStdErr.getParentHandle (),\n \t\t\t   FileChannelImpl::READ));\n \n@@ -310,7 +319,8 @@ java::lang::Win32Process::startProcess (jstringArray progarray,\n \n       si.hStdInput = aChildStdIn.getChildHandle();\n       si.hStdOutput = aChildStdOut.getChildHandle();\n-      si.hStdError = aChildStdErr.getChildHandle();\n+      si.hStdError = redirect ? aChildStdOut.getChildHandle()\n+                              : aChildStdErr.getChildHandle();\n \n       // Spawn the process. CREATE_NO_WINDOW only applies when\n       // starting a console application; it suppresses the"}]}