{"sha": "213694e56e6265044bc85dbf43bda9028f05dba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzNjk0ZTU2ZTYyNjUwNDRiYzg1ZGJmNDNiZGE5MDI4ZjA1ZGJhNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-17T16:33:55Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-17T16:33:55Z"}, "message": "PR tree-optimization/88800 - Spurious -Werror=array-bounds for non-taken branch\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/88800\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Avoid checking\n\tNO_WARNING bit here.  Avoid folding out-of-bounds calls.\n\t* gimple-ssa-warn-restrict.c (maybe_diag_offset_bounds): Remove\n\tredundant argument.  Add new argument and issue diagnostics under\n\tits control.  Detect out-of-bounds access even with warnings\n\tdisabled.\n\t(check_bounds_or_overlap): Change return type.  Add argument.\n\t(wrestrict_dom_walker::check_call): Adjust.\n\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap): Add argument.\n\t* tree-ssa-strlen.c (handle_builtin_strcpy): Adjust to change in\n\tcheck_bounds_or_overlap's return value.\n\t(handle_builtin_stxncpy): Same.\n\t(handle_builtin_strcat): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/88800\n\t* c-c++-common/Wrestrict.c: Adjust.\n\t* gcc.dg/Warray-bounds-37.c: New test.\n\t* gcc.dg/builtin-memcpy-2.c: New test.\n\t* gcc.dg/builtin-memcpy.c: New test.\n\nFrom-SVN: r268037", "tree": {"sha": "6e55de74c41ab1ba9949e3447f390dbb4c09b935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e55de74c41ab1ba9949e3447f390dbb4c09b935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213694e56e6265044bc85dbf43bda9028f05dba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213694e56e6265044bc85dbf43bda9028f05dba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213694e56e6265044bc85dbf43bda9028f05dba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213694e56e6265044bc85dbf43bda9028f05dba7/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16d46c7bfda76b5b3e88a2d9a809aacdc3ed8e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d46c7bfda76b5b3e88a2d9a809aacdc3ed8e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d46c7bfda76b5b3e88a2d9a809aacdc3ed8e1a"}], "stats": {"total": 265, "additions": 221, "deletions": 44}, "files": [{"sha": "9089aa1922b54078d7da9c0586d95a34b926b109", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -1,3 +1,20 @@\n+2019-01-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/88800\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Avoid checking\n+\tNO_WARNING bit here.  Avoid folding out-of-bounds calls.\n+\t* gimple-ssa-warn-restrict.c (maybe_diag_offset_bounds): Remove\n+\tredundant argument.  Add new argument and issue diagnostics under\n+\tits control.  Detect out-of-bounds access even with warnings\n+\tdisabled.\n+\t(check_bounds_or_overlap): Change return type.  Add argument.\n+\t(wrestrict_dom_walker::check_call): Adjust.\n+\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap): Add argument.\n+\t* tree-ssa-strlen.c (handle_builtin_strcpy): Adjust to change in\n+\tcheck_bounds_or_overlap's return value.\n+\t(handle_builtin_stxncpy): Same.\n+\t(handle_builtin_strcat): Same.\n+\n 2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>"}, {"sha": "500e551996a7679708d714d27082530eb5002d15", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -697,8 +697,6 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n   tree destvar, srcvar;\n   location_t loc = gimple_location (stmt);\n \n-  bool nowarn = gimple_no_warning_p (stmt);\n-\n   /* If the LEN parameter is a constant zero or in range where\n      the only valid value is zero, return DEST.  */\n   if (size_must_be_zero_p (len))\n@@ -766,12 +764,16 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t  unsigned ilen = tree_to_uhwi (len);\n \t  if (pow2p_hwi (ilen))\n \t    {\n-\t      /* Detect invalid bounds and overlapping copies and issue\n-\t\t either -Warray-bounds or -Wrestrict.  */\n-\t      if (!nowarn\n-\t\t  && check_bounds_or_overlap (as_a <gcall *>(stmt),\n-\t\t\t\t\t      dest, src, len, len))\n-\t      \tgimple_set_no_warning (stmt, true);\n+\t      /* Detect out-of-bounds accesses without issuing warnings.\n+\t\t Avoid folding out-of-bounds copies but to avoid false\n+\t\t positives for unreachable code defer warning until after\n+\t\t DCE has worked its magic.\n+\t\t -Wrestrict is still diagnosed.  */\n+\t      if (int warning = check_bounds_or_overlap (as_a <gcall *>(stmt),\n+\t\t\t\t\t\t\t dest, src, len, len,\n+\t\t\t\t\t\t\t false, false))\n+\t\tif (warning != OPT_Wrestrict)\n+\t\t  return false;\n \n \t      scalar_int_mode mode;\n \t      tree type = lang_hooks.types.type_for_size (ilen * 8, 1);\n@@ -1038,10 +1040,16 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t    }\n \t}\n \n-      /* Detect invalid bounds and overlapping copies and issue either\n-\t -Warray-bounds or -Wrestrict.  */\n-      if (!nowarn)\n-\tcheck_bounds_or_overlap (as_a <gcall *>(stmt), dest, src, len, len);\n+      /* Same as above, detect out-of-bounds accesses without issuing\n+\t warnings.  Avoid folding out-of-bounds copies but to avoid\n+\t false positives for unreachable code defer warning until\n+\t after DCE has worked its magic.\n+\t -Wrestrict is still diagnosed.  */\n+      if (int warning = check_bounds_or_overlap (as_a <gcall *>(stmt),\n+\t\t\t\t\t\t dest, src, len, len,\n+\t\t\t\t\t\t false, false))\n+\tif (warning != OPT_Wrestrict)\n+\t  return false;\n \n       gimple *new_stmt;\n       if (is_gimple_reg_type (TREE_TYPE (srcvar)))"}, {"sha": "42c87190dd8cf21a7be52b9fe92c73280a4d0f80", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -1329,6 +1329,9 @@ maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n   if (!acs.overlap ())\n     return false;\n \n+  if (gimple_no_warning_p (call))\n+    return true;\n+\n   /* For convenience.  */\n   const builtin_memref &dstref = *acs.dstref;\n   const builtin_memref &srcref = *acs.srcref;\n@@ -1568,7 +1571,7 @@ maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n   return true;\n }\n \n-/* Validate REF offsets in an EXPRession passed as an argument to a CALL\n+/* Validate REF offsets in an expression passed as an argument to a CALL\n    to a built-in function FUNC to make sure they are within the bounds\n    of the referenced object if its size is known, or PTRDIFF_MAX otherwise.\n    Both initial values of the offsets and their final value computed by\n@@ -1578,21 +1581,27 @@ maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n \n static bool\n maybe_diag_offset_bounds (location_t loc, gimple *call, tree func, int strict,\n-\t\t\t  tree expr, const builtin_memref &ref)\n+\t\t\t  const builtin_memref &ref, bool do_warn)\n {\n-  if (!warn_array_bounds)\n+  /* Check for out-bounds pointers regardless of warning options since\n+     the result is used to make codegen decisions.  */\n+  offset_int ooboff[] = { ref.offrange[0], ref.offrange[1] };\n+  tree oobref = ref.offset_out_of_bounds (strict, ooboff);\n+  if (!oobref)\n     return false;\n \n-  if (ref.ref && TREE_NO_WARNING (ref.ref))\n+  /* Return true without issuing a warning.  */\n+  if (!do_warn)\n+    return true;\n+\n+  if (!warn_array_bounds)\n     return false;\n \n-  offset_int ooboff[] = { ref.offrange[0], ref.offrange[1] };\n-  tree oobref = ref.offset_out_of_bounds (strict, ooboff);\n-  if (!oobref)\n+  if (ref.ref && TREE_NO_WARNING (ref.ref))\n     return false;\n \n-  if (EXPR_HAS_LOCATION (expr))\n-    loc = EXPR_LOCATION (expr);\n+  if (EXPR_HAS_LOCATION (ref.ptr))\n+    loc = EXPR_LOCATION (ref.ptr);\n \n   loc = expansion_point_location_if_in_system_header (loc);\n \n@@ -1811,7 +1820,7 @@ wrestrict_dom_walker::check_call (gimple *call)\n       || (dstwr && !INTEGRAL_TYPE_P (TREE_TYPE (dstwr))))\n     return;\n \n-  if (check_bounds_or_overlap (call, dst, src, dstwr, NULL_TREE))\n+  if (!check_bounds_or_overlap (call, dst, src, dstwr, NULL_TREE))\n     return;\n \n   /* Avoid diagnosing the call again.  */\n@@ -1823,12 +1832,14 @@ wrestrict_dom_walker::check_call (gimple *call)\n /* Attempt to detect and diagnose invalid offset bounds and (except for\n    memmove) overlapping copy in a call expression EXPR from SRC to DST\n    and DSTSIZE and SRCSIZE bytes, respectively.  Both DSTSIZE and\n-   SRCSIZE may be NULL.  Return false when one or the other has been\n-   detected and diagnosed, true otherwise.  */\n+   SRCSIZE may be NULL.  DO_WARN is false to detect either problem\n+   without issue a warning.  Return the OPT_Wxxx constant corresponding\n+   to the warning if one has been detected and zero otherwise.  */\n \n-bool\n+int\n check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n-\t\t\t tree srcsize, bool bounds_only /* = false */)\n+\t\t\t tree srcsize, bool bounds_only /* = false */,\n+\t\t\t bool do_warn /* = true */)\n {\n   location_t loc = gimple_nonartificial_location (call);\n   loc = expansion_point_location_if_in_system_header (loc);\n@@ -1847,11 +1858,12 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n   /* Validate offsets first to make sure they are within the bounds\n      of the destination object if its size is known, or PTRDIFF_MAX\n      otherwise.  */\n-  if (maybe_diag_offset_bounds (loc, call, func, strict, dst, dstref)\n-      || maybe_diag_offset_bounds (loc, call, func, strict, src, srcref))\n+  if (maybe_diag_offset_bounds (loc, call, func, strict, dstref, do_warn)\n+      || maybe_diag_offset_bounds (loc, call, func, strict, srcref, do_warn))\n     {\n-      gimple_set_no_warning (call, true);\n-      return false;\n+      if (do_warn)\n+\tgimple_set_no_warning (call, true);\n+      return OPT_Warray_bounds;\n     }\n \n   bool check_overlap\n@@ -1861,7 +1873,7 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t       && DECL_FUNCTION_CODE (func) != BUILT_IN_MEMMOVE_CHK)));\n \n   if (!check_overlap)\n-    return true;\n+    return 0;\n \n   if (operand_equal_p (dst, src, 0))\n     {\n@@ -1875,20 +1887,20 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t\t      \"%G%qD source argument is the same as destination\",\n \t\t      call, func);\n \t  gimple_set_no_warning (call, true);\n-\t  return false;\n+\t  return OPT_Wrestrict;\n \t}\n \n-      return true;\n+      return 0;\n     }\n \n   /* Return false when overlap has been detected.  */\n   if (maybe_diag_overlap (loc, call, acs))\n     {\n       gimple_set_no_warning (call, true);\n-      return false;\n+      return OPT_Wrestrict;\n     }\n \n-  return true;\n+  return 0;\n }\n \n gimple_opt_pass *"}, {"sha": "47835de84c6a3b1fadfaa42f7cc5b0c7ddf8eb7e", "filename": "gcc/gimple-ssa-warn-restrict.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-ssa-warn-restrict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Fgimple-ssa-warn-restrict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.h?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -20,7 +20,7 @@\n \n #ifndef GIMPLE_SSA_WARN_RESTRICT_H\n \n-extern bool check_bounds_or_overlap (gimple *, tree, tree, tree, tree,\n-\t\t\t\t     bool = false);\n+extern int check_bounds_or_overlap (gimple *, tree, tree, tree, tree,\n+\t\t\t\t    bool = false, bool = true);\n \n #endif /* GIMPLE_SSA_WARN_RESTRICT_H */"}, {"sha": "31b171b628bce20dc36f11344f970b27e83f7407", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -1,3 +1,11 @@\n+2019-01-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/88800\n+\t* c-c++-common/Wrestrict.c: Adjust.\n+\t* gcc.dg/Warray-bounds-37.c: New test.\n+\t* gcc.dg/builtin-memcpy-2.c: New test.\n+\t* gcc.dg/builtin-memcpy.c: New test.\n+\n 2019-01-17  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/88850"}, {"sha": "d0e3c3411fea593613e45e3db3e81e0467864273", "filename": "gcc/testsuite/c-c++-common/Wrestrict.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -636,7 +636,7 @@ void test_strcpy_cst (ptrdiff_t i)\n   T (\"012\", a, a + 3);\n   /* The following doesn't overlap but it should trigger -Wstringop-overflow\n      for reading past the end.  */\n-  T (\"012\", a, a + sizeof a);\n+  T (\"012\", a, a + sizeof a);     /* { dg-warning \"\\\\\\[-Wstringop-overflow\" \"pr81437\" { xfail *-*-* } } */\n \n   /* The terminating nul written to d[2] overwrites s[0].  */\n   T (\"0123\", a, a + 2);           /* { dg-warning \"accessing 3 bytes at offsets 0 and 2 overlaps 1 byte at offset 2\" } */\n@@ -651,9 +651,9 @@ void test_strcpy_cst (ptrdiff_t i)\n   T (\"012\", a + 2, a);            /* { dg-warning \"accessing 4 bytes at offsets 2 and 0 overlaps 2 bytes at offset 2\" \"strcpy\" } */\n   T (\"012\", a + 3, a);            /* { dg-warning \"accessing 4 bytes at offsets 3 and 0 overlaps 1 byte at offset 3\" \"strcpy\" } */\n   T (\"012\", a + 4, a);\n-  /* The following doesn't overlap but it should trigger -Wstrinop-ovewrflow\n+  /* The following doesn't overlap but it triggers -Wstringop-overflow\n      for writing past the end.  */\n-  T (\"012\", a + sizeof a, a);\n+  T (\"012\", a + sizeof a, a);     /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n }\n \n /* Exercise strcpy with constant or known arguments offset by a range."}, {"sha": "57d218a4fc6750400fd364fb95f20c7576861e45", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-37.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-37.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -0,0 +1,47 @@\n+/* PR tree-optimization/88800 - Spurious -Werror=array-bounds for non-taken\n+   branch\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern void* memmove (void*, const void*, __SIZE_TYPE__);\n+\n+struct A\n+{\n+  const char *s;\n+  int n;\n+};\n+\n+void f (void*);\n+\n+struct B\n+{\n+  char d[5];\n+  int n;\n+};\n+\n+__attribute__ ((always_inline)) inline void\n+g (struct B *p, struct A a)\n+{\n+  int i = a.n;\n+  if (i <= 5)\n+    p->n = i;\n+  else {\n+    p->n = -1;\n+    f (p);\n+  }\n+\n+  if (p->n >= 0)\n+    memmove (p->d, a.s, a.n);   /* { dg-bogus \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void h (void)\n+{\n+  char c[8] = \"\";\n+\n+  struct A a;\n+  a.s = c;\n+  a.n = 8;\n+\n+  struct B b;\n+  g (&b, a);\n+}"}, {"sha": "bddff935fc4c164e5864cc9842daa3525280a432", "filename": "gcc/testsuite/gcc.dg/builtin-memcpy-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy-2.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -0,0 +1,42 @@\n+/* PR tree-optimization/88800 - Spurious -Werror=array-bounds for non-taken\n+   branch\n+   Verify that out-of-bounds memcpy calls are not folded even when\n+   warnings are disabled.\n+   { dg-do compile }\n+   { dg-options \"-O2 -w -fdump-tree-optimized\" } */\n+\n+extern void* memcpy (void*, const void*, __SIZE_TYPE__);\n+\n+char a1[1], a2[2], a4[4], a8[8], a16[16], a32[32];\n+\n+void f1 (const void *p)\n+{\n+  memcpy (a1, p, sizeof a1 * 2);\n+}\n+\n+void f2 (const void *p)\n+{\n+  memcpy (a2, p, sizeof a2 * 2);\n+}\n+\n+void f4 (const void *p)\n+{\n+  memcpy (a4, p, sizeof a4 * 2);\n+}\n+\n+void f8 (const void *p)\n+{\n+  memcpy (a8, p, sizeof a8 * 2);\n+}\n+\n+void f16 (const void *p)\n+{\n+  memcpy (a16, p, sizeof a16 * 2);\n+}\n+\n+void f32 (const void *p)\n+{\n+  memcpy (a32, p, sizeof a32 * 2);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"memcpy\" 6 \"optimized\" } } */"}, {"sha": "85e25396f5616371b2b572fb280deae6fefbcf0e", "filename": "gcc/testsuite/gcc.dg/builtin-memcpy.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memcpy.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -0,0 +1,43 @@\n+/* PR tree-optimization/88800 - Spurious -Werror=array-bounds for non-taken\n+   branch\n+   Verify that out-of-bounds memcpy calls are not folded when warnings are\n+   enabled (builtin-memcpy-2.c verifies they're not folded with warnings\n+   disabled).\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+extern void* memcpy (void*, const void*, __SIZE_TYPE__);\n+\n+char a1[1], a2[2], a4[4], a8[8], a16[16], a32[32];\n+\n+void f1 (const void *p)\n+{\n+  memcpy (a1, p, sizeof a1 * 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void f2 (const void *p)\n+{\n+  memcpy (a2, p, sizeof a2 * 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void f4 (const void *p)\n+{\n+  memcpy (a4, p, sizeof a4 * 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void f8 (const void *p)\n+{\n+  memcpy (a8, p, sizeof a8 * 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void f16 (const void *p)\n+{\n+  memcpy (a16, p, sizeof a16 * 2);  /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void f32 (const void *p)\n+{\n+  memcpy (a32, p, sizeof a32 * 2);  /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"memcpy\" 6 \"optimized\" } } */"}, {"sha": "df569708309140915ab1f0eadecfabaacf6dbaf9", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213694e56e6265044bc85dbf43bda9028f05dba7/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=213694e56e6265044bc85dbf43bda9028f05dba7", "patch": "@@ -1742,7 +1742,7 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n   if (const strinfo *chksi = olddsi ? olddsi : dsi)\n     if (si\n-\t&& !check_bounds_or_overlap (stmt, chksi->ptr, si->ptr, NULL_TREE, len))\n+\t&& check_bounds_or_overlap (stmt, chksi->ptr, si->ptr, NULL_TREE, len))\n       {\n \tgimple_set_no_warning (stmt, true);\n \tset_no_warning = true;\n@@ -2214,7 +2214,7 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n   else\n     srcsize = NULL_TREE;\n \n-  if (!check_bounds_or_overlap (stmt, dst, src, dstsize, srcsize))\n+  if (check_bounds_or_overlap (stmt, dst, src, dstsize, srcsize))\n     {\n       gimple_set_no_warning (stmt, true);\n       return;\n@@ -2512,7 +2512,7 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n \ttree sptr = si && si->ptr ? si->ptr : src;\n \n-\tif (!check_bounds_or_overlap (stmt, dst, sptr, NULL_TREE, slen))\n+\tif (check_bounds_or_overlap (stmt, dst, sptr, NULL_TREE, slen))\n \t  {\n \t    gimple_set_no_warning (stmt, true);\n \t    set_no_warning = true;\n@@ -2622,7 +2622,7 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n       tree sptr = si && si->ptr ? si->ptr : src;\n \n-      if (!check_bounds_or_overlap (stmt, dst, sptr, dstlen, srcsize))\n+      if (check_bounds_or_overlap (stmt, dst, sptr, dstlen, srcsize))\n \t{\n \t  gimple_set_no_warning (stmt, true);\n \t  set_no_warning = true;"}]}