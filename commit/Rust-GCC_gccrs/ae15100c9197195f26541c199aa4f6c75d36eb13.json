{"sha": "ae15100c9197195f26541c199aa4f6c75d36eb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxNTEwMGM5MTk3MTk1ZjI2NTQxYzE5OWFhNGY2Yzc1ZDM2ZWIxMw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-09-30T08:58:04Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-09-30T08:58:04Z"}, "message": "Use gcc/coretypes.h:enum offload_abi in mkoffloads\n\n\tgcc/\n\t* config/i386/intelmic-mkoffload.c (target_ilp32): Remove\n\tvariable, replacing it with...\n\t(offload_abi): ... this new variable.  Adjust all users.\n\t* config/nvptx/mkoffload.c (target_ilp32, offload_abi): Likewise.\n\nFrom-SVN: r228283", "tree": {"sha": "1c98979db61e3eb568723a1a113b495dba60c20c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c98979db61e3eb568723a1a113b495dba60c20c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae15100c9197195f26541c199aa4f6c75d36eb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae15100c9197195f26541c199aa4f6c75d36eb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae15100c9197195f26541c199aa4f6c75d36eb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae15100c9197195f26541c199aa4f6c75d36eb13/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e2a5450e9eb72202262f7407be4afab19556f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2a5450e9eb72202262f7407be4afab19556f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2a5450e9eb72202262f7407be4afab19556f9e"}], "stats": {"total": 153, "additions": 108, "deletions": 45}, "files": [{"sha": "d29e5d9d1862959c3cb7ad853a5a312540ff4bbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae15100c9197195f26541c199aa4f6c75d36eb13", "patch": "@@ -1,3 +1,10 @@\n+2015-09-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/i386/intelmic-mkoffload.c (target_ilp32): Remove\n+\tvariable, replacing it with...\n+\t(offload_abi): ... this new variable.  Adjust all users.\n+\t* config/nvptx/mkoffload.c (target_ilp32, offload_abi): Likewise.\n+\n 2015-09-30  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure.ac: Remove extraneous ;;."}, {"sha": "065d408d955ab53c478affac9916dda428140fad", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 61, "deletions": 29, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=ae15100c9197195f26541c199aa4f6c75d36eb13", "patch": "@@ -42,8 +42,7 @@ int num_temps = 0;\n const int MAX_NUM_TEMPS = 10;\n const char *temp_files[MAX_NUM_TEMPS];\n \n-/* Shows if we should compile binaries for i386 instead of x86-64.  */\n-bool target_ilp32 = false;\n+enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n /* Delete tempfiles and exit function.  */\n void\n@@ -200,10 +199,17 @@ find_target_compiler (const char *name)\n static void\n compile_for_target (struct obstack *argv_obstack)\n {\n-  if (target_ilp32)\n-    obstack_ptr_grow (argv_obstack, \"-m32\");\n-  else\n-    obstack_ptr_grow (argv_obstack, \"-m64\");\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      obstack_ptr_grow (argv_obstack, \"-m64\");\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      obstack_ptr_grow (argv_obstack, \"-m32\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   obstack_ptr_grow (argv_obstack, NULL);\n   char **argv = XOBFINISH (argv_obstack, char **);\n \n@@ -379,10 +385,17 @@ generate_host_descr_file (const char *host_compiler)\n   new_argv[new_argc++] = \"-c\";\n   new_argv[new_argc++] = \"-fPIC\";\n   new_argv[new_argc++] = \"-shared\";\n-  if (target_ilp32)\n-    new_argv[new_argc++] = \"-m32\";\n-  else\n-    new_argv[new_argc++] = \"-m64\";\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      new_argv[new_argc++] = \"-m64\";\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      new_argv[new_argc++] = \"-m32\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   new_argv[new_argc++] = src_filename;\n   new_argv[new_argc++] = \"-o\";\n   new_argv[new_argc++] = obj_filename;\n@@ -442,10 +455,17 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   objcopy_argv[3] = \"-I\";\n   objcopy_argv[4] = \"binary\";\n   objcopy_argv[5] = \"-O\";\n-  if (target_ilp32)\n-    objcopy_argv[6] = \"elf32-i386\";\n-  else\n-    objcopy_argv[6] = \"elf64-x86-64\";\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      objcopy_argv[6] = \"elf64-x86-64\";\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      objcopy_argv[6] = \"elf32-i386\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   objcopy_argv[7] = target_so_filename;\n   objcopy_argv[8] = \"--rename-section\";\n   objcopy_argv[9] = rename_section_opt;\n@@ -518,17 +538,22 @@ main (int argc, char **argv)\n      passed with @file.  Expand them into argv before processing.  */\n   expandargv (&argc, &argv);\n \n-  /* Find out whether we should compile binaries for i386 or x86-64.  */\n-  for (int i = argc - 1; i > 0; i--)\n-    if (strncmp (argv[i], \"-foffload-abi=\", sizeof (\"-foffload-abi=\") - 1) == 0)\n-      {\n-\tif (strstr (argv[i], \"ilp32\"))\n-\t  target_ilp32 = true;\n-\telse if (!strstr (argv[i], \"lp64\"))\n-\t  fatal_error (input_location,\n-\t\t       \"unrecognizable argument of option -foffload-abi\");\n-\tbreak;\n-      }\n+  /* Scan the argument vector.  */\n+  for (int i = 1; i < argc; i++)\n+    {\n+#define STR \"-foffload-abi=\"\n+      if (strncmp (argv[i], STR, strlen (STR)) == 0)\n+\t{\n+\t  if (strcmp (argv[i] + strlen (STR), \"lp64\") == 0)\n+\t    offload_abi = OFFLOAD_ABI_LP64;\n+\t  else if (strcmp (argv[i] + strlen (STR), \"ilp32\") == 0)\n+\t    offload_abi = OFFLOAD_ABI_ILP32;\n+\t  else\n+\t    fatal_error (input_location,\n+\t\t\t \"unrecognizable argument of option \" STR);\n+\t}\n+#undef STR\n+    }\n \n   const char *target_so_filename\n     = prepare_target_image (target_compiler, argc, argv);\n@@ -541,10 +566,17 @@ main (int argc, char **argv)\n   const char *new_argv[9];\n   new_argv[new_argc++] = \"ld\";\n   new_argv[new_argc++] = \"-m\";\n-  if (target_ilp32)\n-    new_argv[new_argc++] = \"elf_i386\";\n-  else\n-    new_argv[new_argc++] = \"elf_x86_64\";\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      new_argv[new_argc++] = \"elf_x86_64\";\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      new_argv[new_argc++] = \"elf_i386\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   new_argv[new_argc++] = \"--relocatable\";\n   new_argv[new_argc++] = host_descr_filename;\n   new_argv[new_argc++] = target_so_filename;"}, {"sha": "fe0e8cd56ec906f42ee35da9b7914e35d59760b6", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15100c9197195f26541c199aa4f6c75d36eb13/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=ae15100c9197195f26541c199aa4f6c75d36eb13", "patch": "@@ -126,8 +126,7 @@ static id_map *var_ids, **vars_tail = &var_ids;\n static const char *ptx_name;\n static const char *ptx_cfile_name;\n \n-/* Shows if we should compile binaries for i386 instead of x86-64.  */\n-bool target_ilp32 = false;\n+enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n /* Delete tempfiles.  */\n \n@@ -926,7 +925,17 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, compiler);\n-  obstack_ptr_grow (&argv_obstack, target_ilp32 ? \"-m32\" : \"-m64\");\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      obstack_ptr_grow (&argv_obstack, \"-m64\");\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      obstack_ptr_grow (&argv_obstack, \"-m32\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   obstack_ptr_grow (&argv_obstack, infile);\n   obstack_ptr_grow (&argv_obstack, \"-c\");\n   obstack_ptr_grow (&argv_obstack, \"-o\");\n@@ -1004,23 +1013,38 @@ main (int argc, char **argv)\n      passed with @file.  Expand them into argv before processing.  */\n   expandargv (&argc, &argv);\n \n-  /* Find out whether we should compile binaries for i386 or x86-64.  */\n-  for (int i = argc - 1; i > 0; i--)\n-    if (strncmp (argv[i], \"-foffload-abi=\", sizeof (\"-foffload-abi=\") - 1) == 0)\n-      {\n-\tif (strstr (argv[i], \"ilp32\"))\n-\t  target_ilp32 = true;\n-\telse if (!strstr (argv[i], \"lp64\"))\n-\t  fatal_error (input_location,\n-\t\t       \"unrecognizable argument of option -foffload-abi\");\n-\tbreak;\n-      }\n+  /* Scan the argument vector.  */\n+  for (int i = 1; i < argc; i++)\n+    {\n+#define STR \"-foffload-abi=\"\n+      if (strncmp (argv[i], STR, strlen (STR)) == 0)\n+\t{\n+\t  if (strcmp (argv[i] + strlen (STR), \"lp64\") == 0)\n+\t    offload_abi = OFFLOAD_ABI_LP64;\n+\t  else if (strcmp (argv[i] + strlen (STR), \"ilp32\") == 0)\n+\t    offload_abi = OFFLOAD_ABI_ILP32;\n+\t  else\n+\t    fatal_error (input_location,\n+\t\t\t \"unrecognizable argument of option \" STR);\n+\t}\n+#undef STR\n+    }\n \n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, driver);\n   obstack_ptr_grow (&argv_obstack, \"-xlto\");\n-  obstack_ptr_grow (&argv_obstack, target_ilp32 ? \"-m32\" : \"-m64\");\n+  switch (offload_abi)\n+    {\n+    case OFFLOAD_ABI_LP64:\n+      obstack_ptr_grow (&argv_obstack, \"-m64\");\n+      break;\n+    case OFFLOAD_ABI_ILP32:\n+      obstack_ptr_grow (&argv_obstack, \"-m32\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   obstack_ptr_grow (&argv_obstack, \"-S\");\n \n   for (int ix = 1; ix != argc; ix++)\n@@ -1039,7 +1063,7 @@ main (int argc, char **argv)\n \n   /* PR libgomp/65099: Currently, we only support offloading in 64-bit\n      configurations.  */\n-  if (!target_ilp32)\n+  if (offload_abi == OFFLOAD_ABI_LP64)\n     {\n       ptx_name = make_temp_file (\".mkoffload\");\n       obstack_ptr_grow (&argv_obstack, \"-o\");"}]}