{"sha": "b722c82c7d27d1458c98299ebdab2754bbcdb67b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMmM4MmM3ZDI3ZDE0NThjOTgyOTllYmRhYjI3NTRiYmNkYjY3Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-29T07:38:20Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-29T07:38:20Z"}, "message": "* extend.texi: Update documentation for default format attributes.\n\nFrom-SVN: r37844", "tree": {"sha": "f226db8f7b8376e8ec3b05be047fdd8b28bd184f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f226db8f7b8376e8ec3b05be047fdd8b28bd184f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b722c82c7d27d1458c98299ebdab2754bbcdb67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b722c82c7d27d1458c98299ebdab2754bbcdb67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b722c82c7d27d1458c98299ebdab2754bbcdb67b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b722c82c7d27d1458c98299ebdab2754bbcdb67b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fa3508b695c71257891097a26969090792f6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01fa3508b695c71257891097a26969090792f6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01fa3508b695c71257891097a26969090792f6af"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "42a9f7003699b11494301a0c356af90ab124de3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b722c82c7d27d1458c98299ebdab2754bbcdb67b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b722c82c7d27d1458c98299ebdab2754bbcdb67b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b722c82c7d27d1458c98299ebdab2754bbcdb67b", "patch": "@@ -1,3 +1,7 @@\n+2000-11-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* extend.texi: Update documentation for default format attributes.\n+\n Tue Nov 28 21:56:45 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa/pa-64.h (ASM_OUTPUT_SECTION_NAME): Use a hash table, not"}, {"sha": "ed89139705eec0293ec40da28a0c06d098151211", "filename": "gcc/extend.texi", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b722c82c7d27d1458c98299ebdab2754bbcdb67b/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b722c82c7d27d1458c98299ebdab2754bbcdb67b/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=b722c82c7d27d1458c98299ebdab2754bbcdb67b", "patch": "@@ -1525,7 +1525,8 @@ string argument (starting from 1), while @var{first-to-check} is the\n number of the first argument to check against the format string.  For\n functions where the arguments are not available to be checked (such as\n @code{vprintf}), specify the third parameter as zero.  In this case the\n-compiler only checks the format string for consistency.\n+compiler only checks the format string for consistency.  For\n+@code{strftime} formats, the third parameter is required to be zero.\n \n In the example above, the format string (@code{my_format}) is the second\n argument of the function @code{my_print}, and the arguments to check\n@@ -1534,12 +1535,16 @@ attribute are 2 and 3.\n \n The @code{format} attribute allows you to identify your own functions\n which take format strings as arguments, so that GNU CC can check the\n-calls to these functions for errors.  The compiler always checks formats\n-for the ANSI library functions @code{printf}, @code{fprintf},\n+calls to these functions for errors.  The compiler always (unless\n+@samp{-ffreestanding} is used) checks formats\n+for the standard library functions @code{printf}, @code{fprintf},\n @code{sprintf}, @code{scanf}, @code{fscanf}, @code{sscanf}, @code{strftime},\n @code{vprintf}, @code{vfprintf} and @code{vsprintf} whenever such\n warnings are requested (using @samp{-Wformat}), so there is no need to\n-modify the header file @file{stdio.h}.\n+modify the header file @file{stdio.h}.  In C99 mode, the functions\n+@code{snprintf}, @code{vsnprintf}, @code{vscanf}, @code{vfscanf} and\n+@code{vsscanf} are also checked.\n+@xref{C Dialect Options,,Options Controlling C Dialect}.\n \n @item format_arg (@var{string-index})\n @cindex @code{format_arg} function attribute\n@@ -1568,7 +1573,9 @@ functions which modify format strings, so that GNU CC can check the\n calls to @code{printf}, @code{scanf}, or @code{strftime} function whose\n operands are a call to one of your own function.  The compiler always\n treats @code{gettext}, @code{dgettext}, and @code{dcgettext} in this\n-manner.\n+manner except when strict ISO C support is requested by @samp{-ansi} or\n+an appropriate @samp{-std} option, or @samp{-ffreestanding} is used.\n+@xref{C Dialect Options,,Options Controlling C Dialect}.\n \n @item no_instrument_function\n @cindex @code{no_instrument_function} function attribute"}]}