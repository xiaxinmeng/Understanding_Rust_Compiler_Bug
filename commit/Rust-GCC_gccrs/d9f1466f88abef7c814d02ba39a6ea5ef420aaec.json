{"sha": "d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmMTQ2NmY4OGFiZWY3YzgxNGQwMmJhMzlhNmVhNWVmNDIwYWFlYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-14T22:34:48Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-14T22:48:42Z"}, "message": "Teach compute_objsize about placement new [PR100876].\n\nResolves:\nPR c++/100876 - -Wmismatched-new-delete should understand placement new when it's not inlined\n\ngcc/ChangeLog:\n\n\tPR c++/100876\n\t* builtins.c (gimple_call_return_array): Check for attribute fn spec.\n\tHandle calls to placement new.\n\t(ndecl_dealloc_argno): Avoid placement delete.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100876\n\t* g++.dg/warn/Wmismatched-new-delete-4.C: New test.\n\t* g++.dg/warn/Wmismatched-new-delete-5.C: New test.\n\t* g++.dg/warn/Wstringop-overflow-7.C: New test.\n\t* g++.dg/warn/Wfree-nonheap-object-6.C: New test.\n\t* g++.dg/analyzer/placement-new.C: Prune out expected warning.", "tree": {"sha": "53117d901ee3c9d69128975777777ce05f14ec3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53117d901ee3c9d69128975777777ce05f14ec3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9598d89a9f5a327ecdfa6f6978a0cfbe4447111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9598d89a9f5a327ecdfa6f6978a0cfbe4447111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9598d89a9f5a327ecdfa6f6978a0cfbe4447111"}], "stats": {"total": 210, "additions": 207, "deletions": 3}, "files": [{"sha": "75419cc4edc0aa5057dad9d777ed5cbb9b34f0f7", "filename": "gcc/builtins.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -5159,11 +5159,42 @@ static tree\n gimple_call_return_array (gimple *stmt, offset_int offrng[2],\n \t\t\t  range_query *rvals)\n {\n-  if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n-      || gimple_call_num_args (stmt) < 1)\n+  {\n+    /* Check for attribute fn spec to see if the function returns one\n+       of its arguments.  */\n+    attr_fnspec fnspec = gimple_call_fnspec (as_a <gcall *>(stmt));\n+    unsigned int argno;\n+    if (fnspec.returns_arg (&argno))\n+      {\n+\toffrng[0] = offrng[1] = 0;\n+\treturn gimple_call_arg (stmt, argno);\n+      }\n+  }\n+\n+  if (gimple_call_num_args (stmt) < 1)\n     return NULL_TREE;\n \n   tree fn = gimple_call_fndecl (stmt);\n+  if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+    {\n+      /* See if this is a call to placement new.  */\n+      if (!fn\n+\t  || !DECL_IS_OPERATOR_NEW_P (fn)\n+\t  || DECL_IS_REPLACEABLE_OPERATOR_NEW_P (fn))\n+\treturn NULL_TREE;\n+\n+      tree fname = DECL_ASSEMBLER_NAME (fn);\n+      if (!id_equal (fname, \"_ZnwmPv\")       // ordinary form\n+\t  && !id_equal (fname, \"_ZnamPv\"))   // array form\n+\treturn NULL_TREE;\n+\n+      if (gimple_call_num_args (stmt) != 2)\n+\treturn NULL_TREE;\n+\n+      offrng[0] = offrng[1] = 0;\n+      return gimple_call_arg (stmt, 1);\n+    }\n+\n   switch (DECL_FUNCTION_CODE (fn))\n     {\n     case BUILT_IN_MEMCPY:\n@@ -13285,7 +13316,17 @@ fndecl_dealloc_argno (tree fndecl)\n {\n   /* A call to operator delete isn't recognized as one to a built-in.  */\n   if (DECL_IS_OPERATOR_DELETE_P (fndecl))\n-    return 0;\n+    {\n+      if (DECL_IS_REPLACEABLE_OPERATOR (fndecl))\n+\treturn 0;\n+\n+      /* Avoid placement delete that's not been inlined.  */\n+      tree fname = DECL_ASSEMBLER_NAME (fndecl);\n+      if (id_equal (fname, \"_ZdlPvS_\")       // ordinary form\n+\t  || id_equal (fname, \"_ZdaPvS_\"))   // array form\n+\treturn UINT_MAX;\n+      return 0;\n+    }\n \n   /* TODO: Handle user-defined functions with attribute malloc?  Handle\n      known non-built-ins like fopen?  */"}, {"sha": "b648a428247710231f0f9a003faf97f17f99ab65", "filename": "gcc/testsuite/g++.dg/analyzer/placement-new.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fplacement-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fplacement-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fplacement-new.C?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -24,3 +24,5 @@ void test_3 (void)\n   int *p = new(buf) int (42);\n   delete p; // { dg-warning \"memory not on the heap\" }\n }\n+\n+// { dg-prune-output \"-Wfree-nonheap-object\" }"}, {"sha": "83b6ff9157c9481a67f26122287e2c9fde94b400", "filename": "gcc/testsuite/g++.dg/warn/Wfree-nonheap-object-6.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-6.C?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile }\n+   { dg-options \"-O0 -Wall\" } */\n+\n+#if __cplusplus < 201103L\n+# define noexcept throw ()\n+#endif\n+\n+void* operator new (__SIZE_TYPE__, void* __p) noexcept;\n+void operator delete (void*, void*);\n+\n+void* operator new[] (__SIZE_TYPE__, void* __p) noexcept;\n+void operator delete[] (void*, void*) noexcept;\n+\n+struct A { A (); ~A (); int i; };\n+\n+extern void *p;\n+\n+void nowarn_placement_new ()\n+{\n+  char a[sizeof (A)];\n+  p = new (a) A ();           // { dg-bogus \"-Wfree-nonheap-object\" }\n+}\n+\n+\n+void warn_placement_new ()\n+{\n+  char a[sizeof (A)];\n+  p = new (a + 1) A ();       // { dg-warning \"\\\\\\[-Wplacement-new\" }\n+                              // { dg-bogus \"-Wfree-nonheap-object\" \"bogus\" { target *-*-* } .-1 }\n+}\n+\n+\n+void nowarn_placement_new_array ()\n+{\n+  char a[sizeof (A)];\n+  p = new (a) A[1];           // { dg-bogus \"-Wfree-nonheap-object\" }\n+}\n+\n+\n+void warn_placement_new_array ()\n+{\n+  char a[sizeof (A)];\n+  p = new (a + 1) A[1];       // { dg-warning \"\\\\\\[-Wplacement-new\" }\n+                              // { dg-bogus \"-Wfree-nonheap-object\" \"bogus\" { target *-*-* } .-1 }\n+}"}, {"sha": "4320181e4d7a603347711dbf0552d7d4a129bcdc", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-new-delete-4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-4.C?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -0,0 +1,37 @@\n+/* PR c++/100876 - -Wmismatched-new-delete should either look through\n+   or ignore placement new\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall\" } */\n+\n+extern \"C\" {\n+  void* malloc (__SIZE_TYPE__);\n+  void free (void*);\n+}\n+\n+void* operator new (__SIZE_TYPE__, void*);\n+void* operator new[] (__SIZE_TYPE__, void*);\n+\n+void nowarn_placement_new ()\n+{\n+  free (new (malloc (sizeof (int))) int ());      // { dg-bogus \"-Wmismatched-new-delete\" }\n+}\n+\n+void nowarn_placement_array_new ()\n+{\n+  free (new (malloc (sizeof (int) * 2)) int[2]);  // { dg-bogus \"-Wmismatched-new-delete\" }\n+}\n+\n+\n+void warn_placement_new ()\n+{\n+  void *p = malloc (sizeof (int));\n+  int *q = new (p) int ();\n+  delete q;                   // { dg-warning \"-Wmismatched-new-delete\" }\n+}\n+\n+void warn_placement_array_new ()\n+{\n+  void *p = malloc (sizeof (int));\n+  int *q = new (p) int[2];\n+  delete q;                   // { dg-warning \"-Wmismatched-new-delete\" }\n+}"}, {"sha": "92c75df40d9c964ca7af0019283c7ba4e77164a3", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-new-delete-5.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-5.C?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -0,0 +1,37 @@\n+/* PR c++/100876 - -Wmismatched-new-delete should either look through\n+   or ignore placement new\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern \"C\" {\n+  void* malloc (__SIZE_TYPE__);\n+  void free (void*);\n+}\n+\n+inline void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+inline void* operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+void nowarn_placement_new ()\n+{\n+  free (new (malloc (sizeof (int))) int ());      // { dg-bogus \"-Wmismatched-new-delete\" }\n+}\n+\n+void nowarn_placement_array_new ()\n+{\n+  free (new (malloc (sizeof (int) * 2)) int[2]);  // { dg-bogus \"-Wmismatched-new-delete\" }\n+}\n+\n+\n+void warn_placement_new ()\n+{\n+  void *p = malloc (sizeof (int));\n+  int *q = new (p) int ();\n+  delete q;                   // { dg-warning \"-Wmismatched-new-delete\" }\n+}\n+\n+void warn_placement_array_new ()\n+{\n+  void *p = malloc (sizeof (int));\n+  int *q = new (p) int[2];\n+  delete q;                   // { dg-warning \"-Wmismatched-new-delete\" }\n+}"}, {"sha": "d3d28f43d0a96af8a6bb3fb8aefe1d8e743f46b8", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overflow-7.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f1466f88abef7c814d02ba39a6ea5ef420aaec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-7.C?ref=d9f1466f88abef7c814d02ba39a6ea5ef420aaec", "patch": "@@ -0,0 +1,42 @@\n+/* PR c++/100876 - -Wmismatched-new-delete should either look through\n+   or ignore placement new\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -Wno-array-bounds\" } */\n+\n+inline void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+inline void* operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+void* nowarn_placement_new_memset ()\n+{\n+  struct S { int i; };\n+  void *p = __builtin_malloc (sizeof (S));\n+  S *q = new (p) S;\n+  __builtin_memset (q, 0, sizeof (S));\n+  return q;\n+}\n+\n+void* warn_placement_new_memset ()\n+{\n+  struct S { int i; };\n+  void *p = __builtin_malloc (sizeof (S));\n+  S *q = new (p) S;\n+  __builtin_memset (q, 0, sizeof (S) + 1);  // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return q;\n+}\n+\n+void* nowarn_placement_new_array_strncpy (const char *s)\n+{\n+  void *p = __builtin_malloc (5);\n+  char *q = new (p) char[5];\n+  __builtin_strncpy (q, s, 5);\n+  return q;\n+\n+}\n+\n+void* warn_placement_new_array_strncpy (const char *s)\n+{\n+  void *p = __builtin_malloc (4);\n+  char *q = new (p) char[5];\n+  __builtin_strncpy (q, s, 5);  // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return q;\n+}"}]}