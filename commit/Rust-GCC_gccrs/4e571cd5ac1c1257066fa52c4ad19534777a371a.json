{"sha": "4e571cd5ac1c1257066fa52c4ad19534777a371a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1NzFjZDVhYzFjMTI1NzA2NmZhNTJjNGFkMTk1MzQ3NzdhMzcxYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-11T10:39:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-11T10:39:37Z"}, "message": "stl_bvector.h (__fill_bvector(_Bit_iterator, _Bit_iterator, bool)): New.\n\n2006-08-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_bvector.h (__fill_bvector(_Bit_iterator,\n\t_Bit_iterator, bool)): New.\n\t(fill(_Bit_iterator, _Bit_iterator, const bool&)): Use it.\n\nFrom-SVN: r116081", "tree": {"sha": "828e8a33403942c4b4c0bc0d11dd5737513b7a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/828e8a33403942c4b4c0bc0d11dd5737513b7a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e571cd5ac1c1257066fa52c4ad19534777a371a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e571cd5ac1c1257066fa52c4ad19534777a371a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e571cd5ac1c1257066fa52c4ad19534777a371a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e571cd5ac1c1257066fa52c4ad19534777a371a/comments", "author": null, "committer": null, "parents": [{"sha": "e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d0c1939bb8267a7b1dac0aedaa8e8c22ef2cad"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "6fde3f2b601e6041cb1f466f44171fd94b1faf02", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e571cd5ac1c1257066fa52c4ad19534777a371a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e571cd5ac1c1257066fa52c4ad19534777a371a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e571cd5ac1c1257066fa52c4ad19534777a371a", "patch": "@@ -1,3 +1,9 @@\n+2006-08-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_bvector.h (__fill_bvector(_Bit_iterator,\n+\t_Bit_iterator, bool)): New.\n+\t(fill(_Bit_iterator, _Bit_iterator, const bool&)): Use it.\n+\n 2006-08-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random.tcc (gamma_distribution<>::operator()): Fixes"}, {"sha": "a48e964815bdcd0f710704e7307e93a245c4d721", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e571cd5ac1c1257066fa52c4ad19534777a371a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e571cd5ac1c1257066fa52c4ad19534777a371a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=4e571cd5ac1c1257066fa52c4ad19534777a371a", "patch": "@@ -353,18 +353,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n   { return __x + __n; }\n \n+  inline void\n+  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)\n+  {\n+    for (; __first != __last; ++__first)\n+      *__first = __x;\n+  }\n+\n   inline void\n   fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)\n   {\n     if (__first._M_p != __last._M_p)\n       {\n-\tstd::__fill<true>::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);\n-\tstd::__fill<true>::fill(__first, _Bit_iterator(__first._M_p + 1, 0),\n-\t\t\t\t__x);\n-\tstd::__fill<true>::fill(_Bit_iterator(__last._M_p, 0), __last, __x);\n+\tstd::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);\n+\t__fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);\n+\t__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);\n       }\n     else\n-      std::__fill<true>::fill(__first, __last, __x);\n+      __fill_bvector(__first, __last, __x);\n   }\n \n   template<class _Alloc>"}]}