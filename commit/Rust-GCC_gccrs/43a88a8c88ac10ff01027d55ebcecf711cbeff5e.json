{"sha": "43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhODhhOGM4OGFjMTBmZjAxMDI3ZDU1ZWJjZWNmNzExY2JlZmY1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-24T12:49:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-24T12:49:05Z"}, "message": "elfos.h: Follow spelling conventions.\n\n\t* config/elfos.h: Follow spelling conventions.\n\t* config/alpha/alpha.h: Likewise.\n\t* config/arc/arc.h: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/avr/avr.h: Likewise.\n\t* config/cris/cris.md: Likewise.\n\t* config/d30v/d30v.h: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/frv/frv.h: Likewise.\n\t* config/h8300/h8300.c: Likewise.\n\t* config/h8300/h8300.h: Likewise.\n\t* config/h8300/h8300.md: Likewise.\n\t* config/i386/cygwin.h: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/i386/sysv3.h: Likewise.\n\t* config/i960/i960.h: Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ia64/ia64.md: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\t* config/m32r/m32r.h: Likewise.\n\t* config/m68k/m68k.h: Likewise.\n\t* config/m88k/m88k.h: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/mcore/mcore.h: Likewise.\n\t* config/mcore/mcore.md: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mmix/mmix.h: Likewise.\n\t* config/mmix/mmix.md: Likewise.\n\t* config/ns32k/netbsd.h: Likewise.\n\t* config/ns32k/ns32k.h: Likewise.\n\t* config/ns32k/ns32k.md: Likewise.\n\t* config/pa/pa.h: Likewise.\n\t* config/romp/romp.h: Likewise.\n\t* config/rs6000/rs6000.h: Likewise.\n\t* config/rs6000/rs6000.md: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/stormy16/stormy-abi: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/vax/vax.h: Likewise.\n\nFrom-SVN: r57468", "tree": {"sha": "33674578636ffae9acafca71051eaaed0b4313bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33674578636ffae9acafca71051eaaed0b4313bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/comments", "author": null, "committer": null, "parents": [{"sha": "b0da12fba8780a90417d6ea1c3fa15813b82ffe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0da12fba8780a90417d6ea1c3fa15813b82ffe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0da12fba8780a90417d6ea1c3fa15813b82ffe2"}], "stats": {"total": 168, "additions": 105, "deletions": 63}, "files": [{"sha": "40c46836f5765c63871ae3d3afafcfd69dc7f4c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1,3 +1,45 @@\n+2002-09-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/elfos.h: Follow spelling conventions.\n+\t* config/alpha/alpha.h: Likewise.\n+\t* config/arc/arc.h: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/cris/cris.md: Likewise.\n+\t* config/d30v/d30v.h: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/frv/frv.h: Likewise.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/h8300/h8300.h: Likewise.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/i386/cygwin.h: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/sysv3.h: Likewise.\n+\t* config/i960/i960.h: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ia64/ia64.md: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\t* config/m32r/m32r.h: Likewise.\n+\t* config/m68k/m68k.h: Likewise.\n+\t* config/m88k/m88k.h: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/mcore/mcore.h: Likewise.\n+\t* config/mcore/mcore.md: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/mmix/mmix.h: Likewise.\n+\t* config/mmix/mmix.md: Likewise.\n+\t* config/ns32k/netbsd.h: Likewise.\n+\t* config/ns32k/ns32k.h: Likewise.\n+\t* config/ns32k/ns32k.md: Likewise.\n+\t* config/pa/pa.h: Likewise.\n+\t* config/romp/romp.h: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/stormy16/stormy-abi: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/vax/vax.h: Likewise.\n+\n 2002-09-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* version.c (version_string): Now const char[].\n@@ -577,7 +619,7 @@ Tue Aug 27 20:07:01 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tremaining_in_alignment.\n \n \t* doc/tm.texi: (TARGET_MS_BITFIELD_LAYOUT_P): Update.\n-\t(pragma pack): Add paragraph on MSVC bitfield packing.\n+\t(pragma pack): Add paragraph on MSVC bit-field packing.\n \n 2002-09-18  Richard Earnshaw  (reanrsha@arm.com)\n \n@@ -6441,7 +6483,7 @@ Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t(TARGET_SWITCHES): Add -mieee-compare option.\n \t(OVERRIDE_OPTIONS): 32332 is a subset of\n \t32532. Don't use IEEE_COMPARE -funsafe-math-optimizations.\n-\t(TARGET_SWITCHES): Fix description of bitfield option.\n+\t(TARGET_SWITCHES): Fix description of bit-field option.\n \t* config/ns32k/netbsd.h (TARGET_DEFAULT): Add\n \t-mieee-compare option. Remove 32332 flag.\n "}, {"sha": "0b70284d5992d9e47fb3b8dc5662f1cbeafc078d", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -493,7 +493,7 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  */"}, {"sha": "3c4904a7a923d1582e70418f1e9268675d235bfa", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -231,7 +231,7 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  */"}, {"sha": "1d57485b8ec1381a61f9a383625cfdb02be87806", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1858,9 +1858,9 @@\n ;;; ??? This pattern is bogus.  If operand3 has bits outside the range\n ;;; represented by the bitfield, then this will produce incorrect results.\n ;;; Somewhere, the value needs to be truncated.  On targets like the m68k,\n-;;; which have a real bitfield insert instruction, the truncation happens\n-;;; in the bitfield insert instruction itself.  Since arm does not have a\n-;;; bitfield insert instruction, we would have to emit code here to truncate\n+;;; which have a real bit-field insert instruction, the truncation happens\n+;;; in the bit-field insert instruction itself.  Since arm does not have a\n+;;; bit-field insert instruction, we would have to emit code here to truncate\n ;;; the value before we insert.  This loses some of the advantage of having\n ;;; this insv pattern, so this pattern needs to be reevalutated.\n "}, {"sha": "4281d01a25455c774e1a46bc1ad84d5e6fc9cb9b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1845,9 +1845,9 @@ progmem_section ()\t\t\t\t\t\t\t      \\\n \n #define OBJC_PROLOGUE {}\n /* A C statement to output any assembler statements which are\n-   required to precede any Objective C object definitions or message\n+   required to precede any Objective-C object definitions or message\n    sending.  The statement is executed only when compiling an\n-   Objective C program.  */\n+   Objective-C program.  */\n \n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)"}, {"sha": "1683192189c8a62dbafeafd1d93ebb9cb741a75b", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -4689,7 +4689,7 @@\n ;; Please also add a self-contained test-case.\n \n ;; We have trouble with and:s and shifts.  Maybe something is broken in\n-;; gcc?  Or it could just be that bitfield insn expansion is a bit\n+;; gcc?  Or it could just be that bit-field insn expansion is a bit\n ;; suboptimal when not having extzv insns.\n \n (define_peephole"}, {"sha": "dc0ac2099758b88c0e454ebb09d561c5b506af41", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -2222,7 +2222,7 @@ typedef struct machine_function GTY(())\n    Defined in svr4.h.  */\n /* #define TARGET_MEM_FUNCTIONS */\n \n-/* Define this macro to generate code for Objective C message sending using the\n+/* Define this macro to generate code for Objective-C message sending using the\n    calling convention of the NeXT system.  This calling convention involves\n    passing the object, the selector and the method arguments all at once to the\n    method-lookup library function.\n@@ -2800,8 +2800,8 @@ extern const char *d30v_branch_cost_string;\n /* #define ASM_OUTPUT_IDENT(STREAM, STRING) */\n \n /* A C statement to output any assembler statements which are required to\n-   precede any Objective C object definitions or message sending.  The\n-   statement is executed only when compiling an Objective C program.  */\n+   precede any Objective-C object definitions or message sending.  The\n+   statement is executed only when compiling an Objective-C program.  */\n /* #define OBJC_PROLOGUE */\n \n \f\n@@ -4129,7 +4129,7 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    instructions.\n \n    If both types of instructions truncate the count (for shifts) and position\n-   (for bitfield operations), or if no variable-position bitfield instructions\n+   (for bit-field operations), or if no variable-position bit-field instructions\n    exist, you should define this macro.\n \n    However, on some machines, such as the 80386 and the 680x0, truncation only"}, {"sha": "987622812f06486f7e0ff2eb38367797e04cc839", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define NO_DOLLAR_IN_LABEL\n \n-/* Writing `int' for a bitfield forces int alignment for the structure.  */\n+/* Writing `int' for a bit-field forces int alignment for the structure.  */\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n "}, {"sha": "cea0b571902ccd3c0384c4becb1da57fc8441f85", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -7858,7 +7858,7 @@ frv_adjust_field_align (field, computed)\n \n       /* If this isn't a :0 field and if the previous element is a bitfield\n \t also, see if the type is different, if so, we will need to align the\n-\t bitfield to the next boundary */\n+\t bit-field to the next boundary */\n       if (prev\n \t  && ! DECL_PACKED (field)\n \t  && ! integer_zerop (DECL_SIZE (field))"}, {"sha": "f5fe93ee0b6d54c8066ffef4b01fac2dc9d3fbe2", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -688,13 +688,13 @@ extern int g_switch_set;          /* whether -G xx was passed.  */\n /* Define this if you wish to imitate the way many other C compilers handle\n    alignment of bitfields and the structures that contain them.\n \n-   The behavior is that the type written for a bitfield (`int', `short', or\n+   The behavior is that the type written for a bit-field (`int', `short', or\n    other integer type) imposes an alignment for the entire structure, as if the\n    structure really did contain an ordinary field of that type.  In addition,\n-   the bitfield is placed within the structure so that it would fit within such\n+   the bit-field is placed within the structure so that it would fit within such\n    a field, not crossing a boundary for it.\n \n-   Thus, on most machines, a bitfield whose type is written as `int' would not\n+   Thus, on most machines, a bit-field whose type is written as `int' would not\n    cross a four-byte boundary, and would force four-byte alignment for the\n    whole structure.  (The alignment used may not be four bytes; it is\n    controlled by the other alignment parameters.)\n@@ -711,7 +711,7 @@ extern int g_switch_set;          /* whether -G xx was passed.  */\n    `STRUCTURE_SIZE_BOUNDARY' as large as `BIGGEST_ALIGNMENT'.  Then every\n    structure can be accessed with fullwords.\n \n-   Unless the machine has bitfield instructions or you define\n+   Unless the machine has bit-field instructions or you define\n    `STRUCTURE_SIZE_BOUNDARY' that way, you must define\n    `PCC_BITFIELD_TYPE_MATTERS' to have a nonzero value.\n "}, {"sha": "2d3c3f4be16352e476667b3447dc2f80d1b926c9", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -941,7 +941,7 @@ jump_address_operand (op, mode)\n   return 0;\n }\n \n-/* Recognize valid operands for bitfield instructions.  */\n+/* Recognize valid operands for bit-field instructions.  */\n \n extern int rtx_equal_function_value_matters;\n "}, {"sha": "2c41f42d5953eec25af1dac2049e34bd267e3d5f", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -224,7 +224,7 @@ extern int target_flags;\n    structure layouts.  */\n #define EMPTY_FIELD_BOUNDARY 16\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS  0\n \n /* No data type wants to be aligned rounder than this."}, {"sha": "5ac93fc655c4c27d120233410d698c1a011a77f1", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1991,7 +1991,7 @@\n   \"TARGET_H8300\"\n   \"\n {\n-  /* We only have single bit bitfield instructions.  */\n+  /* We only have single bit bit-field instructions.  */\n   if (INTVAL (operands[1]) != 1)\n     FAIL;\n \n@@ -2019,7 +2019,7 @@\n   \"TARGET_H8300\"\n   \"\n {\n-  /* We only have single bit bitfield instructions.  */\n+  /* We only have single bit bit-field instructions.  */\n   if (INTVAL (operands[2]) != 1)\n     FAIL;\n "}, {"sha": "680bf74da775c492e31afe880569982e54fb7ace", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -418,7 +418,7 @@ extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n #undef\tBIGGEST_FIELD_ALIGNMENT\n #define BIGGEST_FIELD_ALIGNMENT 64\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #undef PCC_BITFIELD_TYPE_MATTERS\n #define PCC_BITFIELD_TYPE_MATTERS 1\n #define GROUP_BITFIELDS_BY_ALIGN TYPE_NATIVE(rec)"}, {"sha": "68fa7409b7ea44b4995a1c64da466f63a4c903cd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -784,7 +784,7 @@ extern int x86_prefetch_sse;\n \n /* If bit field type is int, don't let it cross an int,\n    and give entire struct the alignment of an int.  */\n-/* Required on the 386 since it doesn't have bitfield insns.  */\n+/* Required on the 386 since it doesn't have bit-field insns.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \f\n /* Standard register usage.  */"}, {"sha": "93f94450124321f9a8a9535252a769c1975a8298", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -42,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n \n-/* Writing `int' for a bitfield forces int alignment for the structure.  */\n+/* Writing `int' for a bit-field forces int alignment for the structure.  */\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n "}, {"sha": "0c9763f0610bd2a448b0aabc992426231130e464", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1126,7 +1126,7 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Nonzero if access to memory by bytes is no faster than for words.\n-   Value changed to 1 after reports of poor bitfield code with g++.\n+   Value changed to 1 after reports of poor bit-field code with g++.\n    Indications are that code is usually as good, sometimes better.  */   \n \n #define SLOW_BYTE_ACCESS 1"}, {"sha": "1d96eafc8ecb21fb248da42ac3ee539f2302d7cd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -329,10 +329,10 @@ while (0)\n \n /* Define this if you wish to imitate the way many other C compilers handle\n    alignment of bitfields and the structures that contain them.\n-   The behavior is that the type written for a bitfield (`int', `short', or\n+   The behavior is that the type written for a bit-field (`int', `short', or\n    other integer type) imposes an alignment for the entire structure, as if the\n    structure really did contain an ordinary field of that type.  In addition,\n-   the bitfield is placed within the structure so that it would fit within such\n+   the bit-field is placed within the structure so that it would fit within such\n    a field, not crossing a boundary for it.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n "}, {"sha": "4a256907e705330364904895debf18e4a8b37c45", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1244,7 +1244,7 @@\n   \"dep %0 = %3, %0, %2, %1\"\n   [(set_attr \"itanium_class\" \"ishf\")])\n \n-;; Combine doesn't like to create bitfield insertions into zero.\n+;; Combine doesn't like to create bit-field insertions into zero.\n (define_insn \"*depz_internal\"\n   [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n \t(and:DI (ashift:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")"}, {"sha": "e05b02c2b0c16352137490afa9c802973b91fa34", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1990,9 +1990,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define OBJC_PROLOGUE {}\n /* A C statement to output any assembler statements which are\n-   required to precede any Objective C object definitions or message\n+   required to precede any Objective-C object definitions or message\n    sending.  The statement is executed only when compiling an\n-   Objective C program.  */\n+   Objective-C program.  */\n \n #define ASM_OUTPUT_DOUBLE(STREAM, VALUE) \\\n   fprintf ((STREAM), \".double %.20e\\n\", (VALUE))"}, {"sha": "f5513b8449ff54f92844159f2f3167b12efeefb8", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -480,7 +480,7 @@ extern enum m32r_sdata m32r_sdata;\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  */"}, {"sha": "3650b91feef26a8b1105365f40153534d61af34b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -69,7 +69,7 @@ extern int target_flags;\n #define MASK_68881\t2\n #define TARGET_68881 (target_flags & MASK_68881)\n \n-/* Compile using 68020 bitfield insns.  */\n+/* Compile using 68020 bit-field insns.  */\n #define MASK_BITFIELD\t4\n #define TARGET_BITFIELD (target_flags & MASK_BITFIELD)\n "}, {"sha": "b36c5f50a822eedd33db647307836f68441f44f0", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -383,7 +383,7 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* Maximum size (in bits) to use for the largest integral type that"}, {"sha": "7068ca696e10d0694fb96c0b4f862bb3d0c9c801", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1729,7 +1729,7 @@ mcore_expand_insv (operands)\n       return 1;\n     }\n \n-  /* Look at some bitfield placements that we aren't interested\n+  /* Look at some bit-field placements that we aren't interested\n      in handling ourselves, unless specifically directed to do so.  */\n   if (! TARGET_W_FIELD)\n     return 0;\t\t/* Generally, give up about now.  */"}, {"sha": "7bce37cd227a48bf22e3ad353c4b4aed9f5957e7", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -284,7 +284,7 @@ extern int mcore_stack_increment;\n /* Every structures size must be a multiple of 8 bits.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* Look at the fundamental type that is used for a bitfield and use \n+/* Look at the fundamental type that is used for a bit-field and use \n    that to impose alignment on the enclosing structure.\n    struct s {int a:8}; should have same alignment as \"int\", not \"char\".  */\n #define\tPCC_BITFIELD_TYPE_MATTERS\t1"}, {"sha": "7e74a98e061ec243162ff5fe42ab71d4aaec10c5", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -2881,7 +2881,7 @@\n     }\n   else if (CONST_OK_FOR_K ((1 << INTVAL (operands[2])) - 1))\n     {\n-      /* A narrow bitfield (<=5 bits) means we can do a shift to put\n+      /* A narrow bit-field (<=5 bits) means we can do a shift to put\n          it in place and then use an andi to extract it.\n          This is as good as a shiftleft/shiftright. */\n "}, {"sha": "4d2a33ad83450aae838e5c8320e7f7341615147d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1575,14 +1575,14 @@ do {\t\t\t\t\t\t\t\\\n    handle alignment of bitfields and the structures that contain\n    them.\n \n-   The behavior is that the type written for a bitfield (`int',\n+   The behavior is that the type written for a bit-field (`int',\n    `short', or other integer type) imposes an alignment for the\n    entire structure, as if the structure really did contain an\n-   ordinary field of that type.  In addition, the bitfield is placed\n+   ordinary field of that type.  In addition, the bit-field is placed\n    within the structure so that it would fit within such a field,\n    not crossing a boundary for it.\n \n-   Thus, on most machines, a bitfield whose type is written as `int'\n+   Thus, on most machines, a bit-field whose type is written as `int'\n    would not cross a four-byte boundary, and would force four-byte\n    alignment for the whole structure.  (The alignment used may not\n    be four bytes; it is controlled by the other alignment"}, {"sha": "e3d22d6a0e647dbabb84dd883771b49a625a4209", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -261,7 +261,7 @@ extern int target_flags;\n \n \n /* Node: Storage Layout */\n-/* I see no bitfield instructions.  Anyway, the common order is from low\n+/* I see no bit-field instructions.  Anyway, the common order is from low\n    to high, as the power of two, hence little-endian.  */\n #define BITS_BIG_ENDIAN 0\n #define BYTES_BIG_ENDIAN 1"}, {"sha": "3f4435ca1f7b3d50f9cd6645a205783f8e671a10", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -1081,7 +1081,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n    PUSHGO $%p3,%a1\")\n \n ;; I hope untyped_call and untyped_return are not needed for MMIX.\n-;; Users of Objective C will notice.\n+;; Users of Objective-C will notice.\n \n ; Generated by GCC.\n (define_expand \"return\""}, {"sha": "595a36c8fb499cdc52181b62c998d25b62270012", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Compile for the floating point unit & 32532 by default;\n    Don't assume SB is zero;\n-   Don't use bitfield instructions;\n+   Don't use bit-field instructions;\n    FPU is 32381;\n    Use multiply-add instructions */\n "}, {"sha": "e6de13ca79c61339ee1e79d7d1215a4cb3bb913f", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -126,7 +126,7 @@ extern int target_flags;\n \n #define TARGET_HIMEM (target_flags & MASK_HIMEM)\n \n-/* Compile using bitfield insns.  */\n+/* Compile using bit-field insns.  */\n #define TARGET_BITFIELD ((target_flags & MASK_NO_BITFIELD) == 0)\n \n #define TARGET_IEEE_COMPARE (target_flags & MASK_IEEE_COMPARE)\n@@ -276,7 +276,7 @@ while (0)\n \n /* If bit field type is int, don't let it cross an int,\n    and give entire struct the alignment of an int.  */\n-/* Required on the 386 since it doesn't have a full set of bitfield insns.\n+/* Required on the 386 since it doesn't have a full set of bit-field insns.\n    (There is no signed extv insn.)  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \f"}, {"sha": "3929eb95cc1062ebac633e1b03a19819ada092c8", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -2124,7 +2124,7 @@\n }\")\n \n ;; extract(base, width, offset)\n-;; Signed bitfield extraction is not supported in hardware on the\n+;; Signed bit-field extraction is not supported in hardware on the\n ;; NS 32032.  It is therefore better to let GCC figure out a\n ;; good strategy for generating the proper instruction sequence\n ;; and represent it as rtl.\n@@ -2169,7 +2169,7 @@\n }\")\n \n ;; The exts/ext instructions have the problem that they always access\n-;; 32 bits even if the bitfield is smaller. For example the instruction\n+;; 32 bits even if the bit-field is smaller. For example the instruction\n ;; \textsd 7(r1),r0,2,5\n ;; would read not only at address 7(r1) but also at 8(r1) to 10(r1).\n ;; If these addresses are in a different (unmapped) page a memory fault"}, {"sha": "0f18ff07a6ee590d571a9e90dd645df703f2907c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -434,7 +434,7 @@ do {\t\t\t\t\t\t\t\t\\\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  This is set"}, {"sha": "1e3f6476d76c63775fdb872bd428e00e6592e715", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -111,7 +111,7 @@ extern int target_flags;\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* Make strings word-aligned so strcpy from constants will be faster.  */"}, {"sha": "d1d84ef24db0175a663ce45f628dfef4d811c497", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -632,7 +632,7 @@ extern int rs6000_default_long_calls;\n #define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n   (TARGET_SPE && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* Make strings word-aligned so strcpy from constants will be faster."}, {"sha": "132ca76c2425a39d0e60c2302060bd2bf7a996e6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -3823,7 +3823,7 @@\n   if (which_alternative == 1)\n      return \\\"#\\\";\n \n-  /* If the bitfield being tested fits in the upper or lower half of a\n+  /* If the bit-field being tested fits in the upper or lower half of a\n      word, it is possible to use andiu. or andil. to test it.  This is\n      useful because the condition register set-use delay is smaller for\n      andi[ul]. than for rlinm.  This doesn't work when the starting bit\n@@ -3883,7 +3883,7 @@\n      return \\\"#\\\";\n \n   /* Since we are using the output value, we can't ignore any need for\n-     a shift.  The bitfield must end at the LSB.  */\n+     a shift.  The bit-field must end at the LSB.  */\n   if (start >= 16 && start + size == 32)\n     {\n       operands[3] = GEN_INT ((1 << size) - 1);"}, {"sha": "b793fd7d71df6011714549eae16be473f636c4c8", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -771,7 +771,7 @@ if (TARGET_ARCH64\t\t\t\t\\\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  */"}, {"sha": "23eaa7b63210436b686b2a0964f71346ad53b294", "filename": "gcc/config/stormy16/stormy-abi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy-abi?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -149,7 +149,7 @@ the storage unit being relocated.\n \n In the 'Field' column, the first number indicates whether the\n relocation refers to a byte, word or doubleword.  The second number,\n-if any, indicates the size of the bitfield into which the relocation\n+if any, indicates the size of the bit-field into which the relocation\n is to occur (and also the size for overflow checking).  The third\n-number indicates the first bit of the bitfield in the word or\n+number indicates the first bit of the bit-field in the word or\n doubleword, counting the LSB as bit 0."}, {"sha": "147da5c47e1a8fa3024ef4d360c448dc80dcc0fe", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -158,7 +158,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n-/* Define this macro if the type of Objective C selectors should be `int'.\n+/* Define this macro if the type of Objective-C selectors should be `int'.\n \n    If this macro is not defined, then selectors should have the type `struct\n    objc_selector *'.  */\n@@ -2004,7 +2004,7 @@ enum reg_class\n    C compiler that comes with the system takes care of doing them.  */\n /* #define perform_...  */\n \n-/* Define this macro to generate code for Objective C message sending using the\n+/* Define this macro to generate code for Objective-C message sending using the\n    calling convention of the NeXT system.  This calling convention involves\n    passing the object, the selector and the method arguments all at once to the\n    method-lookup library function.\n@@ -2592,8 +2592,8 @@ do {\t\t\t\t\t\t\t\\\n /* #define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) */\n \n /* A C statement to output any assembler statements which are required to\n-   precede any Objective C object definitions or message sending.  The\n-   statement is executed only when compiling an Objective C program.  */\n+   precede any Objective-C object definitions or message sending.  The\n+   statement is executed only when compiling an Objective-C program.  */\n /* #define OBJC_PROLOGUE */\n \n \f\n@@ -3764,7 +3764,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    instructions.\n \n    If both types of instructions truncate the count (for shifts) and position\n-   (for bitfield operations), or if no variable-position bitfield instructions\n+   (for bit-field operations), or if no variable-position bit-field instructions\n    exist, you should define this macro.\n \n    However, on some machines, such as the 80386 and the 680x0, truncation only"}, {"sha": "f4d74ac770764ac83d8f2d3ca635f5b0404fb8e3", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a88a8c88ac10ff01027d55ebcecf711cbeff5e/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=43a88a8c88ac10ff01027d55ebcecf711cbeff5e", "patch": "@@ -141,7 +141,7 @@ extern int target_flags;\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS (! TARGET_VAXC_ALIGNMENT)\n \n /* No data type wants to be aligned rounder than this.  */"}]}