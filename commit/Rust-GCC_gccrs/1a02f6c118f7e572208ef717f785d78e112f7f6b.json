{"sha": "1a02f6c118f7e572208ef717f785d78e112f7f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwMmY2YzExOGY3ZTU3MjIwOGVmNzE3Zjc4NWQ3OGUxMTJmN2Y2Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-06T14:41:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-06T14:41:22Z"}, "message": "re PR tree-optimization/66772 (ICE at -O2 and -O3 on x86_64-linux-gnu)\n\n2015-07-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66772\n\t* tree-ssa-ccp.c (ccp_visit_phi_node): Make sure that copy\n\tvalues are available in the PHI node BB when there are\n\tstill unexecutable edges.\n\n\t* gcc.dg/torture/pr66772-1.c: New testcase.\n\t* gcc.dg/torture/pr66772-2.c: Likewise.\n\nFrom-SVN: r225459", "tree": {"sha": "8a0f6f699215e47e3df794c0f8c1e8b5155409b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0f6f699215e47e3df794c0f8c1e8b5155409b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a02f6c118f7e572208ef717f785d78e112f7f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a02f6c118f7e572208ef717f785d78e112f7f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a02f6c118f7e572208ef717f785d78e112f7f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a02f6c118f7e572208ef717f785d78e112f7f6b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe55a82362706dc6453e7d9af16b3cbe8e0e9922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe55a82362706dc6453e7d9af16b3cbe8e0e9922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe55a82362706dc6453e7d9af16b3cbe8e0e9922"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "d3929fa41f680dbe86b144a397a1c38ad0edd590", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a02f6c118f7e572208ef717f785d78e112f7f6b", "patch": "@@ -1,3 +1,10 @@\n+2015-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66772\n+\t* tree-ssa-ccp.c (ccp_visit_phi_node): Make sure that copy\n+\tvalues are available in the PHI node BB when there are\n+\tstill unexecutable edges.\n+\n 2015-07-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66767"}, {"sha": "f7f15ddb74c68cdfd41a7262b30db1afe98c5038", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a02f6c118f7e572208ef717f785d78e112f7f6b", "patch": "@@ -1,3 +1,9 @@\n+2015-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66772\n+\t* gcc.dg/torture/pr66772-1.c: New testcase.\n+\t* gcc.dg/torture/pr66772-2.c: Likewise.\n+\n 2015-07-06  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n \t* gcc.target/mips/near-far-3.c: Allow the call to near_func to use"}, {"sha": "cb6e87c23c0d3f643694222c8774aa7b6db6f554", "filename": "gcc/testsuite/gcc.dg/torture/pr66733-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-1.c?ref=1a02f6c118f7e572208ef717f785d78e112f7f6b", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+int a;\n+\n+int\n+fn1 ()\n+{\n+  return 1;\n+}\n+\n+void\n+fn2 ()\n+{\n+  int b, j;\n+  for (;;)\n+    {\n+      int c = 1;\n+      if (j)\n+\t{\n+\t  if (c)\n+\t    break;\n+\t}\n+      else\n+\tb = a;\n+      fn1 () && b;\n+      j = fn1 ();\n+    }\n+}"}, {"sha": "6687bd0c7f071b3368d96701856e4651e6a93b02", "filename": "gcc/testsuite/gcc.dg/torture/pr66733-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66733-2.c?ref=1a02f6c118f7e572208ef717f785d78e112f7f6b", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, e, f;\n+\n+void fn1 (int p) { }\n+\n+int\n+fn2 (int p)\n+{\n+  return a ? p % a : 0; \n+}\n+\n+short\n+fn3 (int p)\n+{\n+  return (1 >> p) < 1 ? 1 : p;\n+}\n+\n+int\n+fn4 ()\n+{\n+  int g = 0, h = 1;\n+  if (b)\n+    goto lbl;\n+  fn2 (0);\n+  if (fn3 (1))\n+    fn1 (e && c);\n+  if (h)\n+    {\n+      int i = 1;\n+lbl:\n+      if (i)\n+\treturn 0;\n+      for (; g < 1; g++)\n+\t;\n+    }\n+  for (;;)\n+    f || g > 0;\n+}\n+\n+int\n+main ()\n+{\n+  fn4 (); \n+  return 0;\n+}"}, {"sha": "05a3e57333ec5452109c0cd68ecb2fea4b58c9f4", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a02f6c118f7e572208ef717f785d78e112f7f6b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=1a02f6c118f7e572208ef717f785d78e112f7f6b", "patch": "@@ -1081,6 +1081,7 @@ ccp_visit_phi_node (gphi *phi)\n   new_val.mask = 0;\n \n   bool first = true;\n+  bool non_exec_edge = false;\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       /* Compute the meet operator over all the PHI arguments flowing\n@@ -1121,6 +1122,22 @@ ccp_visit_phi_node (gphi *phi)\n \t  if (new_val.lattice_val == VARYING)\n \t    break;\n \t}\n+      else\n+\tnon_exec_edge = true;\n+    }\n+\n+  /* In case there were non-executable edges and the value is a copy\n+     make sure its definition dominates the PHI node.  */\n+  if (non_exec_edge\n+      && new_val.lattice_val == CONSTANT\n+      && TREE_CODE (new_val.value) == SSA_NAME\n+      && ! SSA_NAME_IS_DEFAULT_DEF (new_val.value)\n+      && ! dominated_by_p (CDI_DOMINATORS, gimple_bb (phi),\n+\t\t\t   gimple_bb (SSA_NAME_DEF_STMT (new_val.value))))\n+    {\n+      new_val.lattice_val = VARYING;\n+      new_val.value = NULL_TREE;\n+      new_val.mask = -1;\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}]}