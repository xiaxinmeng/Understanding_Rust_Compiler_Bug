{"sha": "c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiYjViYzU0ZmVhYjRiYWMwZGYwNGYzNThlYzllODM5YTMyYjJhMg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-01-17T16:31:42Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-01-17T16:31:42Z"}, "message": "[AArch64] PR82964: Fix 128-bit immediate ICEs\n\nThis fixes PR82964 which reports ICEs for some CONST_WIDE_INT immediates.\nIt turns out decimal floating point CONST_DOUBLE get changed into\nCONST_WIDE_INT without checking the constraint on the operand, which \nresults in failures.  Avoid this by only allowing SF/DF/TF mode floating\npoint constants in aarch64_legitimate_constant_p.  A similar issue can\noccur with 128-bit immediates which may be emitted even when disallowed\nin aarch64_legitimate_constant_p, and the constraints in movti_aarch64\ndon't match.  Fix this with a new constraint and allowing valid immediates\nin aarch64_legitimate_constant_p.\n\nRather than allowing all 128-bit immediates and expanding in up to 8\nMOV/MOVK instructions, limit them to 4 instructions and use a literal\nload for other cases.  Improve a few TImode tests to use a literal and\nensure they are skipped with -fpic.\n\nThis fixes all reported failures.\n\n    gcc/\n\tPR target/82964\n\t* config/aarch64/aarch64.md (movti_aarch64): Use Uti constraint.\n\t* config/aarch64/aarch64.c (aarch64_mov128_immediate): New function.\n\t(aarch64_legitimate_constant_p): Just support CONST_DOUBLE \n\tSF/DF/TF mode to avoid creating illegal CONST_WIDE_INT immediates.\n\t* config/aarch64/aarch64-protos.h (aarch64_mov128_immediate):\n\tAdd declaration.\n\t* config/aarch64/constraints.md (aarch64_movti_operand):\n\tLimit immediates.\n\t* config/aarch64/predicates.md (Uti): Add new constraint.\n\n    gcc/testsuite/\n\tPR target/79041\n\tPR target/82964\n\t* gcc.target/aarch64/pr79041-2.c: Improve test, disable with fpic.\n\t* gcc.target/aarch64/pr78733.c: Improve test, disable with fpic.\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@linaro.org>\n\nFrom-SVN: r256800", "tree": {"sha": "d60853b6b564dede8ede977b91f00593a440328b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60853b6b564dede8ede977b91f00593a440328b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/comments", "author": null, "committer": null, "parents": [{"sha": "dd4770ec17abd5b6954144b882c291ded188cf56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4770ec17abd5b6954144b882c291ded188cf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4770ec17abd5b6954144b882c291ded188cf56"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "85262662b49eb8304bbb58f5df35ff3c529e0bef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -1,3 +1,16 @@\n+2018-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (movti_aarch64): Use Uti constraint.\n+\t* config/aarch64/aarch64.c (aarch64_mov128_immediate): New function.\n+\t(aarch64_legitimate_constant_p): Just support CONST_DOUBLE \n+\tSF/DF/TF mode to avoid creating illegal CONST_WIDE_INT immediates.\n+\t* config/aarch64/aarch64-protos.h (aarch64_mov128_immediate):\n+\tAdd declaration.\n+\t* config/aarch64/constraints.md (aarch64_movti_operand):\n+\tLimit immediates.\n+\t* config/aarch64/predicates.md (Uti): Add new constraint.\n+\n 2018-01-17 Carl Love  <cel@us.ibm.com>\n \t* config/rs6000/vsx.md (define_expand xl_len_r,\n \tdefine_expand stxvl, define_expand *stxvl): Add match_dup argument."}, {"sha": "ef1b0bc8e28582287c8141429644a5a40375c441", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -475,6 +475,8 @@ void aarch64_split_128bit_move (rtx, rtx);\n \n bool aarch64_split_128bit_move_p (rtx, rtx);\n \n+bool aarch64_mov128_immediate (rtx);\n+\n void aarch64_split_simd_combine (rtx, rtx, rtx);\n \n void aarch64_split_simd_move (rtx, rtx);"}, {"sha": "17efac7a727bc1c5b16891af6af041faaf3116ef", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -2393,6 +2393,24 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n   return num_insns;\n }\n \n+/* Return whether imm is a 128-bit immediate which is simple enough to\n+   expand inline.  */\n+bool\n+aarch64_mov128_immediate (rtx imm)\n+{\n+  if (GET_CODE (imm) == CONST_INT)\n+    return true;\n+\n+  gcc_assert (CONST_WIDE_INT_NUNITS (imm) == 2);\n+\n+  rtx lo = GEN_INT (CONST_WIDE_INT_ELT (imm, 0));\n+  rtx hi = GEN_INT (CONST_WIDE_INT_ELT (imm, 1));\n+\n+  return aarch64_internal_mov_immediate (NULL_RTX, lo, false, DImode)\n+\t + aarch64_internal_mov_immediate (NULL_RTX, hi, false, DImode) <= 4;\n+}\n+\n+\n /* Return the number of temporary registers that aarch64_add_offset_1\n    would need to add OFFSET to a register.  */\n \n@@ -11738,7 +11756,10 @@ static bool\n aarch64_legitimate_constant_p (machine_mode mode, rtx x)\n {\n   /* Support CSE and rematerialization of common constants.  */\n-  if (CONST_INT_P (x) || CONST_DOUBLE_P (x) || GET_CODE (x) == CONST_VECTOR)\n+  if (CONST_INT_P (x)\n+      || (CONST_DOUBLE_P (x)\n+\t  && (mode == SFmode || mode == DFmode || mode == TFmode))\n+      || GET_CODE (x) == CONST_VECTOR)\n     return true;\n \n   /* Do not allow vector struct mode constants for Advanced SIMD.\n@@ -11748,10 +11769,6 @@ aarch64_legitimate_constant_p (machine_mode mode, rtx x)\n   if (vec_flags == (VEC_ADVSIMD | VEC_STRUCT))\n     return false;\n \n-  /* Do not allow wide int constants - this requires support in movti.  */\n-  if (CONST_WIDE_INT_P (x))\n-    return false;\n-\n   /* Only accept variable-length vector constants if they can be\n      handled directly.\n "}, {"sha": "a6ecb391309494087416913c11f339cf10357977", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -1079,9 +1079,9 @@\n \n (define_insn \"*movti_aarch64\"\n   [(set (match_operand:TI 0\n-\t \"nonimmediate_operand\"  \"=r, w,r,w,r,m,m,w,m\")\n+\t \"nonimmediate_operand\"  \"=   r,w, r,w,r,m,m,w,m\")\n \t(match_operand:TI 1\n-\t \"aarch64_movti_operand\" \" rn,r,w,w,m,r,Z,m,w\"))]\n+\t \"aarch64_movti_operand\" \" rUti,r, w,w,m,r,Z,m,w\"))]\n   \"(register_operand (operands[0], TImode)\n     || aarch64_reg_or_zero (operands[1], TImode))\"\n   \"@"}, {"sha": "3eb07f11894a9223a007e6668d35cbb72012c3fa", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -87,6 +87,12 @@\n  (and (match_code \"const_int\")\n       (match_test \"aarch64_move_imm (ival, DImode)\")))\n \n+(define_constraint \"Uti\"\n+ \"A constant that can be used with a 128-bit MOV immediate operation.\"\n+ (and (ior (match_code \"const_int\")\n+\t   (match_code \"const_wide_int\"))\n+      (match_test \"aarch64_mov128_immediate (op)\")))\n+\n (define_constraint \"UsO\"\n  \"A constant that can be used with a 32-bit and operation.\"\n  (and (match_code \"const_int\")"}, {"sha": "159e74a1ed737c49063620564c2125215c37a4b6", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -293,15 +293,14 @@\n \t    (match_test \"aarch64_mov_operand_p (op, mode)\"))))\n \n (define_predicate \"aarch64_movti_operand\"\n-  (and (match_code \"reg,subreg,mem,const_int\")\n-       (ior (match_operand 0 \"register_operand\")\n-\t    (ior (match_operand 0 \"memory_operand\")\n-\t\t (match_operand 0 \"const_int_operand\")))))\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"memory_operand\")\n+       (and (match_operand 0 \"const_scalar_int_operand\")\n+\t    (match_test \"aarch64_mov128_immediate (op)\"))))\n \n (define_predicate \"aarch64_reg_or_imm\"\n-  (and (match_code \"reg,subreg,const_int\")\n-       (ior (match_operand 0 \"register_operand\")\n-\t    (match_operand 0 \"const_int_operand\"))))\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"const_scalar_int_operand\")))\n \n ;; True for integer comparisons and for FP comparisons other than LTGT or UNEQ.\n (define_special_predicate \"aarch64_comparison_operator\""}, {"sha": "f51f41710c686986d414896e782295581493f16f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -1,3 +1,11 @@\n+2018-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR target/79041\n+\tPR target/82964\n+\t* gcc.target/aarch64/pr79041-2.c: Improve test, disable with fpic.\n+\t* gcc.target/aarch64/pr78733.c: Improve test, disable with fpic.\n+\n 2018-01-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* lib/target-supports.exp: Fix -march arguments in arm arch effective"}, {"sha": "4695b5c1b2b7c9b515995e242dd38e0519a48a2b", "filename": "gcc/testsuite/gcc.target/aarch64/pr78733.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78733.c?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -1,10 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mpc-relative-literal-loads\" } */\n+/* { dg-options \"-O2 -mcmodel=large -mpc-relative-literal-loads\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-fpic\" } { \"\" } } */\n \n __int128\n t (void)\n {\n-  return (__int128)1 << 80;\n+  return ((__int128)0x123456789abcdef << 64) | 0xfedcba987654321;\n }\n \n /* { dg-final { scan-assembler \"adr\" } } */\n+/* { dg-final { scan-assembler-not \"adrp\" } } */"}, {"sha": "4695b5c1b2b7c9b515995e242dd38e0519a48a2b", "filename": "gcc/testsuite/gcc.target/aarch64/pr79041-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr79041-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr79041-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr79041-2.c?ref=c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mcmodel=large -mpc-relative-literal-loads\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-fpic\" } { \"\" } } */\n \n __int128\n t (void)\n {\n-  return (__int128)1 << 80;\n+  return ((__int128)0x123456789abcdef << 64) | 0xfedcba987654321;\n }\n \n /* { dg-final { scan-assembler \"adr\" } } */"}]}