{"sha": "7502c5970d0af6cc71c2a906d55d95a31322bc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwMmM1OTcwZDBhZjZjYzcxYzJhOTA2ZDU1ZDk1YTMxMzIyYmMwNw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-03-10T17:57:58Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-03-10T17:57:58Z"}, "message": "rs6000: float128 on BE and 32-bit\n\nThis fixes float128 on BE and on 32-bit.\n\nThe configure tests need to use -mabi=altivec for 32-bit, since it is\nnot the default there.  That also enables the \"vector\" keyword, used by\nthe tests.  To do this it temporarily adds a few flags to the CFLAGS\nvariable.\n\nIt also fixes a syntax error in the libgcc_cv_powerpc_float128_hw test\n(the function name was missing in the function declaration).\n\nRegenerating config.in (via autoreconf) removed the duplicate definition\nof HAVE_SOLARIS_CRTS.\n\nFinally, this adds a \"-mfloat128-hardware requires -m64\" test to\nrs6000.c: all the current patterns need 64-bit registers.  Maybe we'll\nwant to add float128 hardware support to 32-bit some day, but certainly\nnot today.\n\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Disallow\n\t-mfloat128-hardware without -m64.\n\nlibgcc/\n\t* configure.ac (test for libgcc_cv_powerpc_float128): Temporarily\n\tmodify CFLAGS.  Add -mabi=altivec -mvsx -mfloat128.\n\t(test for libgcc_cv_powerpc_float128_hw): Add -mpower9-vector and\n\t-mfloat128-hardware to the CFLAGS.  Fix syntax error in the C snippet.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r246043", "tree": {"sha": "16e2a026b5e756c50a081d806968d0a5851baaf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e2a026b5e756c50a081d806968d0a5851baaf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7502c5970d0af6cc71c2a906d55d95a31322bc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7502c5970d0af6cc71c2a906d55d95a31322bc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7502c5970d0af6cc71c2a906d55d95a31322bc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7502c5970d0af6cc71c2a906d55d95a31322bc07/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c942f3edab10854aecdf92e8bd79ca6bc33bc66"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "518178a886a9ad8e1a14065adf573a531d456b46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -1,5 +1,10 @@\n+2017-03-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Disallow\n+\t-mfloat128-hardware without -m64.\n+\n 2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n- \n+\n \tPR target/79941\n \t* config/rs6000/rs6000.c (builtin_function_type): Add VMUL*U[HB]\n \tentries to the case statement that marks unsigned arguments to"}, {"sha": "e3627c9c8cad5541ce485145df415b95f1f95c1e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -4686,6 +4686,14 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n+  if (TARGET_FLOAT128_HW && !TARGET_64BIT)\n+    {\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0)\n+\terror (\"-mfloat128-hardware requires -m64\");\n+\n+      rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n+    }\n+\n   if (TARGET_FLOAT128_HW && !TARGET_FLOAT128_KEYWORD\n       && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0\n       && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_KEYWORD) == 0)"}, {"sha": "470fbb7266cd3a2d2cfff9d8fea85171a102fd8c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -1,3 +1,12 @@\n+2017-03-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* configure.ac (test for libgcc_cv_powerpc_float128): Temporarily\n+\tmodify CFLAGS.  Add -mabi=altivec -mvsx -mfloat128.\n+\t(test for libgcc_cv_powerpc_float128_hw): Add -mpower9-vector and\n+\t-mfloat128-hardware to the CFLAGS.  Fix syntax error in the C snippet.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2017-03-02  Jonathan Yong <10walls@gmail.com>\n \n \t* config/i386/gthr-win32.h: Define NOGDI before"}, {"sha": "25aa0d93bab8660e2e836caab1565860dee94ea9", "filename": "libgcc/config.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -21,9 +21,6 @@\n /* Define if the system-provided CRTs are present on Solaris. */\n #undef HAVE_SOLARIS_CRTS\n \n-/* Define if the system-provided CRTs are present on Solaris. */\n-#undef HAVE_SOLARIS_CRTS\n-\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n "}, {"sha": "45c459788c3da5bc077883e7b38243e54420ef8d", "filename": "libgcc/configure", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -4779,15 +4779,16 @@ case ${host} in\n # software libraries, and whether the assembler can handle xsaddqp\n # for hardware support.\n powerpc*-*-linux*)\n+  saved_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC ISA 2.06 to build __float128 libraries\" >&5\n $as_echo_n \"checking for PowerPC ISA 2.06 to build __float128 libraries... \" >&6; }\n if test \"${libgcc_cv_powerpc_float128+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#pragma GCC target (\"vsx\")\n-     vector double dadd (vector double a, vector double b) { return a + b; }\n+vector double dadd (vector double a, vector double b) { return a + b; }\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   libgcc_cv_powerpc_float128=yes\n@@ -4799,19 +4800,19 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128\" >&5\n $as_echo \"$libgcc_cv_powerpc_float128\" >&6; }\n \n+  CFLAGS=\"$CFLAGS -mpower9-vector -mfloat128-hardware\"\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC ISA 3.0 to build hardware __float128 libraries\" >&5\n $as_echo_n \"checking for PowerPC ISA 3.0 to build hardware __float128 libraries... \" >&6; }\n if test \"${libgcc_cv_powerpc_float128_hw+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#pragma GCC target (\"vsx,power9-vector\")\n-     #include <sys/auxv.h>\n+#include <sys/auxv.h>\n      #ifndef AT_PLATFORM\n      #error \"AT_PLATFORM is not defined\"\n      #endif\n-     vector unsigned char (vector unsigned char a, vector unsigned char b)\n+     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n      {\n        vector unsigned char ret;\n        __asm__ (\"xsaddqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n@@ -4830,6 +4831,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n+  CFLAGS=\"$saved_CFLAGS\"\n esac\n \n # Collect host-machine-specific information."}, {"sha": "af1514737092278d294be5f72e5c0ef18997f6d8", "filename": "libgcc/configure.ac", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7502c5970d0af6cc71c2a906d55d95a31322bc07/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=7502c5970d0af6cc71c2a906d55d95a31322bc07", "patch": "@@ -379,23 +379,24 @@ case ${host} in\n # software libraries, and whether the assembler can handle xsaddqp\n # for hardware support.\n powerpc*-*-linux*)\n+  saved_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n   AC_CACHE_CHECK([for PowerPC ISA 2.06 to build __float128 libraries],\n \t\t [libgcc_cv_powerpc_float128],\n \t\t [AC_COMPILE_IFELSE(\n-    [#pragma GCC target (\"vsx\")\n-     vector double dadd (vector double a, vector double b) { return a + b; }],\n+    [vector double dadd (vector double a, vector double b) { return a + b; }],\n     [libgcc_cv_powerpc_float128=yes],\n     [libgcc_cv_powerpc_float128=no])])\n \n+  CFLAGS=\"$CFLAGS -mpower9-vector -mfloat128-hardware\"\n   AC_CACHE_CHECK([for PowerPC ISA 3.0 to build hardware __float128 libraries],\n \t\t [libgcc_cv_powerpc_float128_hw],\n \t\t [AC_COMPILE_IFELSE(\n-    [#pragma GCC target (\"vsx,power9-vector\")\n-     #include <sys/auxv.h>\n+    [#include <sys/auxv.h>\n      #ifndef AT_PLATFORM\n      #error \"AT_PLATFORM is not defined\"\n      #endif\n-     vector unsigned char (vector unsigned char a, vector unsigned char b)\n+     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n      {\n        vector unsigned char ret;\n        __asm__ (\"xsaddqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n@@ -406,6 +407,7 @@ powerpc*-*-linux*)\n \t__attribute__ ((__ifunc__ (\"add_resolver\")));],\n     [libgcc_cv_powerpc_float128_hw=yes],\n     [libgcc_cv_powerpc_float128_hw=no])])\n+  CFLAGS=\"$saved_CFLAGS\"\n esac\n \n # Collect host-machine-specific information."}]}