{"sha": "b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwMmI3YjZiN2E5YTk1ZWYyZTgzOWVjZmVhMjFmY2M5YWY2YTFmNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T18:46:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T18:46:11Z"}, "message": "system.h (PROMOTE_FUNCTION_ARGS, [...]): Poison.\n\n\t* system.h (PROMOTE_FUNCTION_ARGS, STRUCT_VALUE_INCOMING, and\n\tSTRICT_ARGUMENT_NAMING): Poison.\n\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS): Define as\n\thook_bool_tree_false.\n\t* targhooks.c (default_promote_function_args): Remove.\n\t(default_struct_value_rtx): Don't use STRUCT_VALUE_INCOMING.\n\tDon't check incoming.\n\t(default_strict_argument_naming): Don't use\n\tSTRICT_ARGUMENT_NAMING.\n\t* targhooks.h: Remove the prototype for\n\tdefault_promote_function_args.\n\nFrom-SVN: r77047", "tree": {"sha": "41333abb9966a1f3d28bd5978b59385afa68dc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41333abb9966a1f3d28bd5978b59385afa68dc53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/comments", "author": null, "committer": null, "parents": [{"sha": "a0524eb3f5ea62777e9e838f724ab4965c1a98ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0524eb3f5ea62777e9e838f724ab4965c1a98ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0524eb3f5ea62777e9e838f724ab4965c1a98ef"}], "stats": {"total": 68, "additions": 24, "deletions": 44}, "files": [{"sha": "a08af876499b9ac5d7e9e94fac86f516d2e13d07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "patch": "@@ -1,3 +1,17 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* system.h (PROMOTE_FUNCTION_ARGS, STRUCT_VALUE_INCOMING, and\n+\tSTRICT_ARGUMENT_NAMING): Poison.\n+\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS): Define as\n+\thook_bool_tree_false.\n+\t* targhooks.c (default_promote_function_args): Remove.\n+\t(default_struct_value_rtx): Don't use STRUCT_VALUE_INCOMING.\n+\tDon't check incoming.\n+\t(default_strict_argument_naming): Don't use\n+\tSTRICT_ARGUMENT_NAMING.\n+\t* targhooks.h: Remove the prototype for\n+\tdefault_promote_function_args.\n+\n 2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/i386/i386-protos.h: Remove the prototype for"}, {"sha": "52a9eb7d42ea1026cde74b83c065c83222efba4c", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "patch": "@@ -602,7 +602,8 @@ typedef char _Bool;\n \tDIVDI3_LIBCALL UDIVSI3_LIBCALL UDIVDI3_LIBCALL MODSI3_LIBCALL\t\\\n \tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE \\\n \tPRETEND_OUTGOING_VARARGS_NAMED STRUCT_VALUE_INCOMING_REGNUM\t\\\n-\tASM_OUTPUT_SECTION_NAME\n+\tASM_OUTPUT_SECTION_NAME PROMOTE_FUNCTION_ARGS\t\t\t\\\n+\tSTRUCT_VALUE_INCOMING STRICT_ARGUMENT_NAMING\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "02c00d081cfe0650e9d0f5a994af5b05d2125a3c", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "patch": "@@ -325,7 +325,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n #define TARGET_PCH_VALID_P default_pch_valid_p\n \n-#define TARGET_PROMOTE_FUNCTION_ARGS default_promote_function_args\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n #define TARGET_PROMOTE_FUNCTION_RETURN default_promote_function_return\n #define TARGET_PROMOTE_PROTOTYPES default_promote_prototypes\n "}, {"sha": "fe2647e476ced4f3874137c11a256f1a9b4c1915", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "patch": "@@ -78,16 +78,6 @@ default_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n   return VOIDmode;\n }\n \n-bool\n-default_promote_function_args (tree fntype ATTRIBUTE_UNUSED)\n-{\n-#ifdef PROMOTE_FUNCTION_ARGS\n-  return true;\n-#else\n-  return false;\n-#endif\n-}\n-\n bool\n default_promote_function_return (tree fntype ATTRIBUTE_UNUSED)\n {\n@@ -108,38 +98,18 @@ default_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n }\n \n rtx\n-default_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED, int incoming)\n+default_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t\t  int incoming ATTRIBUTE_UNUSED)\n {\n-  rtx rv = 0;\n-  if (incoming)\n-    {\n-#ifdef STRUCT_VALUE_INCOMING\n-      rv = STRUCT_VALUE_INCOMING;\n-#else\n #ifdef STRUCT_VALUE\n-      rv = STRUCT_VALUE;\n+  return STRUCT_VALUE;\n #else\n-#ifndef STRUCT_VALUE_REGNUM\n-      abort();\n+#ifdef STRUCT_VALUE_REGNUM\n+  return gen_rtx_REG (Pmode, STRUCT_VALUE_REGNUM);\n #else\n-      rv = gen_rtx_REG (Pmode, STRUCT_VALUE_REGNUM);\n-#endif\n+  abort ();\n #endif\n #endif\n-    }\n-  else\n-    {\n-#ifdef STRUCT_VALUE\n-      rv = STRUCT_VALUE;\n-#else\n-#ifndef STRUCT_VALUE_REGNUM\n-      abort();\n-#else\n-      rv = gen_rtx_REG (Pmode, STRUCT_VALUE_REGNUM);\n-#endif\n-#endif\n-    }\n-  return rv;\n }\n \n bool\n@@ -179,11 +149,7 @@ default_setup_incoming_varargs (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n bool\n default_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n {\n-#ifdef STRICT_ARGUMENT_NAMING\n-  return STRICT_ARGUMENT_NAMING;\n-#else\n-  return 0;\n-#endif\n+  return false;\n }\n \n bool"}, {"sha": "d91dda395bf396a0c4736ba1f97f40cbf73ffb52", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=b602b7b6b7a9a95ef2e839ecfea21fcc9af6a1f7", "patch": "@@ -23,7 +23,6 @@ extern void default_external_libcall (rtx);\n extern enum machine_mode default_cc_modes_compatible (enum machine_mode,\n \t\t\t\t\t\t      enum machine_mode);\n \n-extern bool default_promote_function_args (tree);\n extern bool default_promote_function_return (tree);\n extern bool default_promote_prototypes (tree);\n "}]}