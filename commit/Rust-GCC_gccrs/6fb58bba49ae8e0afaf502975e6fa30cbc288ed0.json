{"sha": "6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiNThiYmE0OWFlOGUwYWZhZjUwMjk3NWU2ZmEzMGNiYzI4OGVkMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-05-02T19:39:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-05-02T19:39:04Z"}, "message": "re PR c/15698 (no error in presence of broken builtin fn + K&R declaration)\n\n\tPR c/15698\n\t* c-tree.h (C_DECL_BUILTIN_PROTOTYPE): New.\n\t* c-decl.c (current_function_prototype_built_in,\n\tcurrent_function_prototype_arg_types): New.\n\t(merge_decls): Keep source location of prototype followed by\n\tnonprototype declaration.  Update C_DECL_BUILTIN_PROTOTYPE.\n\t(builtin_function): Set C_DECL_BUILTIN_PROTOTYPE.\n\t(start_function): Always set current_function_prototype_locus,\n\tcurrent_function_prototype_built_in and\n\tcurrent_function_prototype_arg_types.  Check for external\n\tprototype whether or not visible for external function and set\n\tcurrent_function_prototype_arg_types accordingly.\n\t(store_parm_decls_oldstyle): Use\n\tcurrent_function_prototype_arg_types for checking old-style\n\tdefinition against prototype.  Give warnings only if\n\tcurrent_function_prototype_built_in).\n\ntestsuite:\n\t* gcc.dg/builtins-30.c: Update expected messages.\n\t* gcc.dg/pr15698-1.c, gcc.dg/pr15698-2.c, gcc.dg/pr15698-3.c,\n\tgcc.dg/pr15698-4.c, gcc.dg/pr15698-5.c, gcc.dg/pr15698-6.c,\n\tgcc.dg/pr15698-7.c, pr15698-8.c: New tests.\n\nFrom-SVN: r99118", "tree": {"sha": "d9cc9fb4c89fa7f24c4b6b67239e8a3bb79274eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9cc9fb4c89fa7f24c4b6b67239e8a3bb79274eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "806aa9014b8ce5c3d896ff8cde6ef5021bd73043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806aa9014b8ce5c3d896ff8cde6ef5021bd73043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806aa9014b8ce5c3d896ff8cde6ef5021bd73043"}], "stats": {"total": 257, "additions": 233, "deletions": 24}, "files": [{"sha": "4183ec0f5dfee6e0bb5a56a0d579d4b812910bdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -1,3 +1,22 @@\n+2005-05-02  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/15698\n+\t* c-tree.h (C_DECL_BUILTIN_PROTOTYPE): New.\n+\t* c-decl.c (current_function_prototype_built_in,\n+\tcurrent_function_prototype_arg_types): New.\n+\t(merge_decls): Keep source location of prototype followed by\n+\tnonprototype declaration.  Update C_DECL_BUILTIN_PROTOTYPE.\n+\t(builtin_function): Set C_DECL_BUILTIN_PROTOTYPE.\n+\t(start_function): Always set current_function_prototype_locus,\n+\tcurrent_function_prototype_built_in and\n+\tcurrent_function_prototype_arg_types.  Check for external\n+\tprototype whether or not visible for external function and set\n+\tcurrent_function_prototype_arg_types accordingly.\n+\t(store_parm_decls_oldstyle): Use\n+\tcurrent_function_prototype_arg_types for checking old-style\n+\tdefinition against prototype.  Give warnings only if\n+\tcurrent_function_prototype_built_in).\n+\n 2005-05-02  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* ggc.h (ggc_alloc_zone_pass_stat): New macro."}, {"sha": "c8516c7501b3e1df044d2de705e4873699ef9f19", "filename": "gcc/c-decl.c", "status": "modified", "additions": 105, "deletions": 22, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -98,6 +98,14 @@ static int enum_overflow;\n \n static location_t current_function_prototype_locus;\n \n+/* Whether this prototype was built-in.  */\n+\n+static bool current_function_prototype_built_in;\n+\n+/* The argument type information of this prototype.  */\n+\n+static tree current_function_prototype_arg_types;\n+\n /* The argument information structure for the function currently being\n    defined.  */\n \n@@ -1574,6 +1582,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n {\n   int new_is_definition = (TREE_CODE (newdecl) == FUNCTION_DECL\n \t\t\t   && DECL_INITIAL (newdecl) != 0);\n+  int new_is_prototype = (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t\t\t  && TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0);\n+  int old_is_prototype = (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t\t\t  && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) != 0);\n \n   /* For real parm decl following a forward decl, rechain the old decl\n      in its new location and clear TREE_ASM_WRITTEN (it's not a\n@@ -1647,8 +1659,12 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n   if (TREE_DEPRECATED (newdecl))\n     TREE_DEPRECATED (olddecl) = 1;\n \n-  /* Keep source location of definition rather than declaration.  */\n-  if (DECL_INITIAL (newdecl) == 0 && DECL_INITIAL (olddecl) != 0)\n+  /* Keep source location of definition rather than declaration and of\n+     prototype rather than non-prototype unless that prototype is\n+     built-in.  */\n+  if ((DECL_INITIAL (newdecl) == 0 && DECL_INITIAL (olddecl) != 0)\n+      || (old_is_prototype && !new_is_prototype\n+\t  && !C_DECL_BUILTIN_PROTOTYPE (olddecl)))\n     DECL_SOURCE_LOCATION (newdecl) = DECL_SOURCE_LOCATION (olddecl);\n \n   /* Merge the unused-warning information.  */\n@@ -1764,6 +1780,11 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n \t  DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n \t  C_DECL_DECLARED_BUILTIN (newdecl) = 1;\n+\t  if (new_is_prototype)\n+\t    C_DECL_BUILTIN_PROTOTYPE (newdecl) = 0;\n+\t  else\n+\t    C_DECL_BUILTIN_PROTOTYPE (newdecl)\n+\t      = C_DECL_BUILTIN_PROTOTYPE (olddecl);\n \t}\n \n       /* Also preserve various other info from the definition.  */\n@@ -2706,6 +2727,7 @@ builtin_function (const char *name, tree type, int function_code,\n   DECL_LANG_SPECIFIC (decl) = GGC_CNEW (struct lang_decl);\n   DECL_BUILT_IN_CLASS (decl) = cl;\n   DECL_FUNCTION_CODE (decl) = function_code;\n+  C_DECL_BUILTIN_PROTOTYPE (decl) = (TYPE_ARG_TYPES (type) != 0);\n   if (library_name)\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n \n@@ -5716,14 +5738,53 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   /* If this definition isn't a prototype and we had a prototype declaration\n      before, copy the arg type info from that prototype.  */\n   old_decl = lookup_name_in_scope (DECL_NAME (decl1), current_scope);\n-  if (old_decl != 0 && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n-      && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n-\t\t    TREE_TYPE (TREE_TYPE (old_decl)))\n-      && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n-    {\n-      TREE_TYPE (decl1) = composite_type (TREE_TYPE (old_decl),\n-\t\t\t\t\t  TREE_TYPE (decl1));\n-      current_function_prototype_locus = DECL_SOURCE_LOCATION (old_decl);\n+  current_function_prototype_locus = UNKNOWN_LOCATION;\n+  current_function_prototype_built_in = false;\n+  current_function_prototype_arg_types = NULL_TREE;\n+  if (TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n+    {\n+      if (old_decl != 0 && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n+\t  && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n+\t\t\tTREE_TYPE (TREE_TYPE (old_decl))))\n+\t{\n+\t  TREE_TYPE (decl1) = composite_type (TREE_TYPE (old_decl),\n+\t\t\t\t\t      TREE_TYPE (decl1));\n+\t  current_function_prototype_locus = DECL_SOURCE_LOCATION (old_decl);\n+\t  current_function_prototype_built_in\n+\t    = C_DECL_BUILTIN_PROTOTYPE (old_decl);\n+\t  current_function_prototype_arg_types\n+\t    = TYPE_ARG_TYPES (TREE_TYPE (decl1));\n+\t}\n+      if (TREE_PUBLIC (decl1))\n+\t{\n+\t  /* If there is an external prototype declaration of this\n+\t     function, record its location but do not copy information\n+\t     to this decl.  This may be an invisible declaration\n+\t     (built-in or in a scope which has finished) or simply\n+\t     have more refined argument types than any declaration\n+\t     found above.  */\n+\t  struct c_binding *b;\n+\t  for (b = I_SYMBOL_BINDING (DECL_NAME (decl1)); b; b = b->shadowed)\n+\t    if (B_IN_SCOPE (b, external_scope))\n+\t      break;\n+\t  if (b)\n+\t    {\n+\t      tree ext_decl, ext_type;\n+\t      ext_decl = b->decl;\n+\t      ext_type = b->type ? b->type : TREE_TYPE (ext_decl);\n+\t      if (TREE_CODE (ext_type) == FUNCTION_TYPE\n+\t\t  && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n+\t\t\t\tTREE_TYPE (ext_type)))\n+\t\t{\n+\t\t  current_function_prototype_locus\n+\t\t    = DECL_SOURCE_LOCATION (ext_decl);\n+\t\t  current_function_prototype_built_in\n+\t\t    = C_DECL_BUILTIN_PROTOTYPE (ext_decl);\n+\t\t  current_function_prototype_arg_types\n+\t\t    = TYPE_ARG_TYPES (ext_type);\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   /* Optionally warn of old-fashioned def with no previous prototype.  */\n@@ -6063,21 +6124,27 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n      set the DECL_ARG_TYPE of each argument according to\n      the type previously specified, and report any mismatches.  */\n \n-  if (TYPE_ARG_TYPES (TREE_TYPE (fndecl)))\n+  if (current_function_prototype_arg_types)\n     {\n       tree type;\n       for (parm = DECL_ARGUMENTS (fndecl),\n-\t     type = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+\t     type = current_function_prototype_arg_types;\n \t   parm || (type && (TYPE_MAIN_VARIANT (TREE_VALUE (type))\n \t\t\t     != void_type_node));\n \t   parm = TREE_CHAIN (parm), type = TREE_CHAIN (type))\n \t{\n \t  if (parm == 0 || type == 0\n \t      || TYPE_MAIN_VARIANT (TREE_VALUE (type)) == void_type_node)\n \t    {\n-\t      error (\"number of arguments doesn%'t match prototype\");\n-\t      error (\"%Hprototype declaration\",\n-\t\t     &current_function_prototype_locus);\n+\t      if (current_function_prototype_built_in)\n+\t\twarning (0, \"number of arguments doesn%'t match \"\n+\t\t\t \"built-in prototype\");\n+\t      else\n+\t\t{\n+\t\t  error (\"number of arguments doesn%'t match prototype\");\n+\t\t  error (\"%Hprototype declaration\",\n+\t\t\t &current_function_prototype_locus);\n+\t\t}\n \t      break;\n \t    }\n \t  /* Type for passing arg must be consistent with that\n@@ -6104,17 +6171,33 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n \n \t\t  if (pedantic)\n \t\t    {\n-\t\t      pedwarn (\"promoted argument %qD \"\n-\t\t\t       \"doesn%'t match prototype\", parm);\n-\t\t      pedwarn (\"%Hprototype declaration\",\n-\t\t\t       &current_function_prototype_locus);\n+\t\t      /* ??? Is it possible to get here with a\n+\t\t\t built-in prototype or will it always have\n+\t\t\t been diagnosed as conflicting with an\n+\t\t\t old-style definition and discarded?  */\n+\t\t      if (current_function_prototype_built_in)\n+\t\t\twarning (0, \"promoted argument %qD \"\n+\t\t\t\t \"doesn%'t match built-in prototype\", parm);\n+\t\t      else\n+\t\t\t{\n+\t\t\t  pedwarn (\"promoted argument %qD \"\n+\t\t\t\t   \"doesn%'t match prototype\", parm);\n+\t\t\t  pedwarn (\"%Hprototype declaration\",\n+\t\t\t\t   &current_function_prototype_locus);\n+\t\t\t}\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n-\t\t  error (\"argument %qD doesn%'t match prototype\", parm);\n-\t\t  error (\"%Hprototype declaration\",\n-\t\t\t &current_function_prototype_locus);\n+\t\t  if (current_function_prototype_built_in)\n+\t\t    warning (0, \"argument %qD doesn%'t match \"\n+\t\t\t     \"built-in prototype\", parm);\n+\t\t  else\n+\t\t    {\n+\t\t      error (\"argument %qD doesn%'t match prototype\", parm);\n+\t\t      error (\"%Hprototype declaration\",\n+\t\t\t     &current_function_prototype_locus);\n+\t\t    }\n \t\t}\n \t    }\n \t}"}, {"sha": "c22ae8ab8d10d004a82c05e42f73b7d348ae5bd4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -89,6 +89,11 @@ struct lang_type GTY(())\n #define C_DECL_DECLARED_BUILTIN(EXP)\t\t\\\n   DECL_LANG_FLAG_3 (FUNCTION_DECL_CHECK (EXP))\n \n+/* For FUNCTION_DECLs, evaluates true if the decl is built-in, has a\n+   built-in prototype and does not have a non-built-in prototype.  */\n+#define C_DECL_BUILTIN_PROTOTYPE(EXP)\t\t\\\n+  DECL_LANG_FLAG_6 (FUNCTION_DECL_CHECK (EXP))\n+\n /* Record whether a decl was declared register.  This is strictly a\n    front-end flag, whereas DECL_REGISTER is used for code generation;\n    they may differ for structures with volatile fields.  */"}, {"sha": "d39b39b755b44064e20889bad5759ec32deb2c26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -1,3 +1,11 @@\n+2005-05-02  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/15698\n+\t* gcc.dg/builtins-30.c: Update expected messages.\n+\t* gcc.dg/pr15698-1.c, gcc.dg/pr15698-2.c, gcc.dg/pr15698-3.c,\n+\tgcc.dg/pr15698-4.c, gcc.dg/pr15698-5.c, gcc.dg/pr15698-6.c,\n+\tgcc.dg/pr15698-7.c, pr15698-8.c: New tests.\n+\n 2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR tree-optimization/21294"}, {"sha": "d65b8948ee101061ba3179f7960ac2dbf29bc4c0", "filename": "gcc/testsuite/gcc.dg/builtins-30.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -8,20 +8,22 @@ extern double strtod (const char *, char **);\n    specifying too few arguments... */\n double cos ()\n {  /* { dg-warning \"shadows a built-in\" } */\n+  /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" \"built-in\" { target *-*-* } 10 } */\n   return strtod (\"nan\", 0);\n }\n \n /* the right number, but the wrong type, arguments... */\n double sin (foo)\n      int foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n-{\n+{  /* { dg-warning \"warning: argument 'foo' doesn't match built-in prototype\" } */\n   return strtod (\"nan\", 0);\n }\n \n /* or too many arguments.  */\n long double cosl (foo, bar)\n      const char *foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n      int bar UNUSED;\n-{\n+{  /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" } */\n+  /* { dg-warning \"warning: argument 'foo' doesn't match built-in prototype\" \"foo\" { target *-*-* } 26 } */\n   return strtod (\"nan\", 0);\n }"}, {"sha": "6b1c4e2ee3fd3af4cdc1af4fa39ddbb134296cb8", "filename": "gcc/testsuite/gcc.dg/pr15698-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-1.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,23 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Original test.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+int\tfoobar ();\n+\n+int func (int blah)\n+{\n+  char *rindex();\n+}\n+\n+int foobar ()\n+{\n+  return 0;\n+}\n+\n+char *rindex(a, b)\n+     register char *a, b;\n+{ /* { dg-warning \"warning: argument 'a' doesn't match built-in prototype\" } */\n+  return 0;\n+}"}, {"sha": "c0d635aba62e6271a544f88d8ff68ecea0c1bfa4", "filename": "gcc/testsuite/gcc.dg/pr15698-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-2.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,9 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Prototype at inner scope.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+void f() { void g(void); } /* { dg-error \"error: prototype declaration\" } */\n+void g(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */"}, {"sha": "15d998a8c5a402da90bb903aebfc3f4759ce5d09", "filename": "gcc/testsuite/gcc.dg/pr15698-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-3.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,11 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Prototype not last declaration.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+void f();\n+void f(int); /* { dg-error \"error: prototype declaration\" } */\n+void f();\n+void f(a) long a; {} /* { dg-error \"error: argument 'a' doesn't match prototype\" } */"}, {"sha": "b1554f48b4db48755c21caea177aafbc43291675", "filename": "gcc/testsuite/gcc.dg/pr15698-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-4.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,9 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Unprototyped built-in function with user prototype.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+int isnan(void); /* { dg-error \"error: prototype declaration\" } */\n+int isnan(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */"}, {"sha": "c87e133c5f166fef0466297fc7d56fd161333011", "filename": "gcc/testsuite/gcc.dg/pr15698-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-5.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,10 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Unprototyped built-in function with user prototype at\n+   inner scope.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+void f(void) { int isnan(void); } /* { dg-error \"error: prototype declaration\" } */\n+int isnan(a) int a; {} /* { dg-error \"error: number of arguments doesn't match prototype\" } */"}, {"sha": "bca51f28c7ab00cc1deabce55faa06f030ad1357", "filename": "gcc/testsuite/gcc.dg/pr15698-6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-6.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,9 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Prototyped built-in function, wrong number of\n+   arguments.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+char *strchr(a) const char *a; { return 0; } /* { dg-warning \"warning: number of arguments doesn't match built-in prototype\" } */"}, {"sha": "b75f8153dec00c4eb3a593aab64349c47097181f", "filename": "gcc/testsuite/gcc.dg/pr15698-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-7.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,10 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Prototyped built-in function, wrong number of\n+   arguments, with explicit prototype as well.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+char *strchr(const char *, int); /* { dg-error \"error: prototype declaration\" } */\n+char *strchr(a) const char *a; { return 0; } /* { dg-error \"error: number of arguments doesn't match prototype\" } */"}, {"sha": "b9b6595a7fad632b5f089ead715e7b511e57a435", "filename": "gcc/testsuite/gcc.dg/pr15698-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb58bba49ae8e0afaf502975e6fa30cbc288ed0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15698-8.c?ref=6fb58bba49ae8e0afaf502975e6fa30cbc288ed0", "patch": "@@ -0,0 +1,11 @@\n+/* Test diagnostics for old-style definition not matching prior\n+   prototype are present and give correct location for that prototype\n+   (bug 15698).  Prototype refined at inner scope with only refinement\n+   conflicting with definition.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+int f(int (*)[]);\n+int g() { int f(int (*)[2]); } /* { dg-error \"error: prototype declaration\" } */\n+int f(a) int (*a)[3]; { return 0; } /* { dg-error \"error: argument 'a' doesn't match prototype\" } */"}]}