{"sha": "bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3ZWJlOWRhNzQ1YTYyMTg0MDUyZGQxYjE1ZjRkZDEwZmJkYzlmNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-26T20:59:21Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-26T21:13:22Z"}, "message": "OpenACC: Fix pattern in dg-bogus in Fortran testcases again\n\nIt turned out that a compiler built without offloading support\nand one with can produce slightly different diagnostic.\n\nOffloading support implies ENABLE_OFFLOAD which implies that\ng->have_offload is set when offloading is actually needed.\nIn cgraphunit.c, the latter causes flag_generate_offload = 1,\nwhich in turn affects tree.c's free_lang_data.\n\nThe result is that the front-end specific diagnostic gets reset\n('tree_diagnostics_defaults (global_dc)'), which affects in this\ncase 'Warning' vs. 'warning' via the Fortran frontend.\n\nResult: 'Warning:' vs. 'warning:'.\nSide note: Other FE also override the diagnostic, leading to\nsimilar differences, e.g. the C++ FE outputs mangled function\nnames differently, cf. patch thread.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f:\n\tUse [Ww]arning in dg-bogus as FE diagnostic and default\n\tdiagnostic differ and the result depends on ENABLE_OFFLOAD.\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/goacc/classify-serial.f95:\n\tUse [Ww]arning in dg-bogus as FE diagnostic and default\n\tdiagnostic differ and the result depends on ENABLE_OFFLOAD.\n\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.", "tree": {"sha": "bc4786996642467c9a4455070d804d6e1926be8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4786996642467c9a4455070d804d6e1926be8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6455a099ec74071ba9c011cc314a48cadbe2bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6455a099ec74071ba9c011cc314a48cadbe2bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6455a099ec74071ba9c011cc314a48cadbe2bfe"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "6dcb1b170f86957952a561d170d3e9313aabbf57", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-serial.f95", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -18,9 +18,9 @@ program main\n   call setup(a, b)\n \n   !$acc serial loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n-  ! { dg-bogus \"Warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n-  ! { dg-bogus \"Warning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n-  ! { dg-bogus \"Warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "238482b91a499e96c88464383473bcbd881c8403", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-decompose-2.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -122,7 +122,7 @@ program main\n   !$acc end kernels\n \n   !$acc kernels\n-  ! { dg-bogus \"Warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } .-1 }\n   y = f_g (a(5)) ! { dg-line l_part[incr c_part] }\n   !TODO If such a construct is placed in its own part (like it is, here), can't this actually use gang paralelism, instead of \"gang-single\"?\n   ! { dg-message \"note: beginning 'gang-single' part in OpenACC 'kernels' region\" \"\" { target *-*-* } l_part$c_part }"}, {"sha": "835619c650923e8577960d2a0bacfe3f80d3f428", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-mod-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -56,7 +56,7 @@ end subroutine w_1\n   subroutine g_1\n     implicit none\n     !$acc routine gang\n-    ! { dg-bogus \"Warning: region is worker partitioned but does not contain worker partitioned code\" \"TODO default 'gang' 'vector'\" { xfail *-*-* } .-3 }\n+    ! { dg-bogus \"\\[Ww\\]arning: region is worker partitioned but does not contain worker partitioned code\" \"TODO default 'gang' 'vector'\" { xfail *-*-* } .-3 }\n \n     integer :: i\n "}, {"sha": "1fe1b4711077b652849fc14a484b390850155ef0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-1.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -18,7 +18,7 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n-!     { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n !     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n !     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 + 5\n@@ -43,7 +43,7 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n-!     { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n !     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n !     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 * 5"}, {"sha": "0221ab812815fc86759354765b12e74e81e0a9d7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-2.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -18,7 +18,7 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n-!     { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n !     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n !     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 + 5\n@@ -43,7 +43,7 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n-!     { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n !     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n !     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 * 5"}, {"sha": "f69ab5a66429cf49b93a4312f2d1be8187944399", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -87,9 +87,9 @@ program main\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial copy (vectors_actual) &\n   !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n-  ! { dg-bogus \"Warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n-  ! { dg-bogus \"Warning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n-  ! { dg-bogus \"Warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n   if (acc_on_device (acc_device_nvidia)) then\n      ! The GCC nvptx back end enforces vector_length (32).\n      ! It's unclear if that's actually permissible here;"}, {"sha": "99b1441136d6f1bde8f8131ecd2441789a3c1d9d", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-reduction.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90?ref=bd7ebe9da745a62184052dd1b15f4dd10fbdc9f4", "patch": "@@ -13,7 +13,7 @@ program reduction\n   s2 = 0\n \n   !$acc parallel reduction(+:s1,s2) num_gangs (n) copy(s1)\n-  ! { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n   s1 = s1 + 1\n   s2 = s2 + 1\n   !$acc end parallel\n@@ -44,7 +44,7 @@ subroutine redsub(s1, s2, n)\n   integer :: s1, s2, n\n \n   !$acc parallel reduction(+:s1,s2) num_gangs (10)  copy(s1)\n-  ! { dg-bogus \"Warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n   s1 = s1 + 1\n   s2 = s2 + 1\n   !$acc end parallel"}]}