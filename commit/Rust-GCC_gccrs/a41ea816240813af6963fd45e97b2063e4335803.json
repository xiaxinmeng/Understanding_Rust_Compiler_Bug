{"sha": "a41ea816240813af6963fd45e97b2063e4335803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxZWE4MTYyNDA4MTNhZjY5NjNmZDQ1ZTk3YjIwNjNlNDMzNTgwMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-09T10:44:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-09T10:44:13Z"}, "message": "[multiple changes]\n\n2004-02-09  Albert Lee  <lee@gnat.com>\n\n\t* errno.c: define _SGI_MP_SOURCE for task-safe errno on IRIX\n\n2004-02-09  Ed Schonberg  <schonberg@gnat.com>\n\n\t* exp_ch3.adb (Build_Slice_Assignment): Handle properly case of null\n\tslices.\n\n\t* exp_ch6.adb (Expand_Call): Do not inline a call when the subprogram\n\tis nested in an instance that is not frozen yet, to avoid\n\torder-of-elaboration problems in gigi.\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Access): Within an inlined\n\tbody the attribute is legal.\n\n2004-02-09  Robert Dewar  <dewar@gnat.com>\n\n\t* s-rident.ads: Minor comment correction\n\n\t* targparm.adb: Remove dependence on uintp completely. There was\n\talways a bug in Make in that it called Targparm before initializing\n\tthe Uint package. The old code appeared to get away with this, but\n\tthe new code did not! This caused an assertion error in gnatmake.\n\n\t* targparm.ads: Fix bad comment, restriction pragmas with parameters\n\tare indeed fully supported.\n\nFrom-SVN: r77531", "tree": {"sha": "a7fdab111d66cef67c5aaf972703425f9ebca4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7fdab111d66cef67c5aaf972703425f9ebca4e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a41ea816240813af6963fd45e97b2063e4335803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41ea816240813af6963fd45e97b2063e4335803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41ea816240813af6963fd45e97b2063e4335803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41ea816240813af6963fd45e97b2063e4335803/comments", "author": null, "committer": null, "parents": [{"sha": "8bd928214aa1b068dce6901f867351a1846d81a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd928214aa1b068dce6901f867351a1846d81a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd928214aa1b068dce6901f867351a1846d81a2"}], "stats": {"total": 166, "additions": 128, "deletions": 38}, "files": [{"sha": "750937b26ac3edf9513de49311c1971e1beb99e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -1,3 +1,31 @@\n+2004-02-09  Albert Lee  <lee@gnat.com>\n+\n+\t* errno.c: define _SGI_MP_SOURCE for task-safe errno on IRIX\n+\n+2004-02-09  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* exp_ch3.adb (Build_Slice_Assignment): Handle properly case of null\n+\tslices.\n+\n+\t* exp_ch6.adb (Expand_Call): Do not inline a call when the subprogram\n+\tis nested in an instance that is not frozen yet, to avoid\n+\torder-of-elaboration problems in gigi.\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Access): Within an inlined\n+\tbody the attribute is legal.\n+\n+2004-02-09  Robert Dewar  <dewar@gnat.com>\n+\n+\t* s-rident.ads: Minor comment correction\n+\n+\t* targparm.adb: Remove dependence on uintp completely. There was\n+\talways a bug in Make in that it called Targparm before initializing\n+\tthe Uint package. The old code appeared to get away with this, but\n+\tthe new code did not! This caused an assertion error in gnatmake.\n+\n+\t* targparm.ads: Fix bad comment, restriction pragmas with parameters\n+\tare indeed fully supported.\n+\n 2004-02-06  Alan Modra  <amodra@bigpond.net.au>\n \n \t* misc.c (default_pass_by_ref): Update INIT_CUMULATIVE_ARGS call."}, {"sha": "ef69fd0da81c90e20bc9ebdb1c8ef34b65bb5f65", "filename": "gcc/ada/errno.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ferrno.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ferrno.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrno.c?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 1992-2003 Free Software Foundation, Inc.         *\n+ *           Copyright (C) 1992-2004 Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -39,6 +39,7 @@\n \n #define _REENTRANT\n #define _THREAD_SAFE\n+#define _SGI_MP_SOURCE\n \n #include <errno.h>\n int"}, {"sha": "55d905162155e8eb3a75b7bc5acbfbf61a87701b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -2505,16 +2505,20 @@ package body Exp_Ch3 is\n    --       end if;\n \n    --       loop\n+   --             if Rev then\n+   --                exit when Li1 < Left_Lo;\n+   --             else\n+   --                exit when Li1 > Left_Hi;\n+   --             end if;\n+\n    --             Target (Li1) := Source (Ri1);\n \n    --             if Rev then\n-   --                exit when Li2 = Left_Lo;\n-   --                Li2 := Index'pred (Li2);\n-   --                Ri2 := Index'pred (Ri2);\n+   --                Li1 := Index'pred (Li1);\n+   --                Ri1 := Index'pred (Ri1);\n    --             else\n-   --                exit when Li2 = Left_Hi;\n-   --                Li2 := Index'succ (Li2);\n-   --                Ri2 := Index'succ (Ri2);\n+   --                Li1 := Index'succ (Li1);\n+   --                Ri1 := Index'succ (Ri1);\n    --             end if;\n    --       end loop;\n    --    end Assign;\n@@ -2561,7 +2565,6 @@ package body Exp_Ch3 is\n       Stats : List_Id;\n \n    begin\n-\n       --  Build declarations for indices\n \n       Decls := New_List;\n@@ -2630,7 +2633,7 @@ package body Exp_Ch3 is\n                   Expressions => New_List (New_Occurrence_Of (Rnn, Loc))))),\n           End_Label  => Empty);\n \n-      --  Build the increment/decrement statements\n+      --  Build exit condition.\n \n       declare\n          F_Ass : constant List_Id := New_List;\n@@ -2640,17 +2643,31 @@ package body Exp_Ch3 is\n          Append_To (F_Ass,\n            Make_Exit_Statement (Loc,\n              Condition =>\n-               Make_Op_Eq (Loc,\n+               Make_Op_Gt (Loc,\n                  Left_Opnd  => New_Occurrence_Of (Lnn, Loc),\n                  Right_Opnd => New_Occurrence_Of (Left_Hi, Loc))));\n \n          Append_To (B_Ass,\n            Make_Exit_Statement (Loc,\n              Condition =>\n-               Make_Op_Eq (Loc,\n+               Make_Op_Lt (Loc,\n                  Left_Opnd  => New_Occurrence_Of (Lnn, Loc),\n                  Right_Opnd => New_Occurrence_Of (Left_Lo, Loc))));\n \n+         Prepend_To (Statements (Loops),\n+           Make_If_Statement (Loc,\n+             Condition       => New_Occurrence_Of (Rev, Loc),\n+             Then_Statements => B_Ass,\n+             Else_Statements => F_Ass));\n+      end;\n+\n+      --  Build the increment/decrement statements\n+\n+      declare\n+         F_Ass : constant List_Id := New_List;\n+         B_Ass : constant List_Id := New_List;\n+\n+      begin\n          Append_To (F_Ass,\n            Make_Assignment_Statement (Loc,\n              Name => New_Occurrence_Of (Lnn, Loc),"}, {"sha": "7632e29e0b711ed77c4be0e268b22bf89524514c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -1915,12 +1915,43 @@ package body Exp_Ch6 is\n       then\n          if Is_Inlined (Subp) then\n \n-            declare\n+            Inlined_Subprogram : declare\n                Bod         : Node_Id;\n                Must_Inline : Boolean := False;\n                Spec        : constant Node_Id := Unit_Declaration_Node (Subp);\n                Scop        : constant Entity_Id := Scope (Subp);\n \n+               function In_Unfrozen_Instance return Boolean;\n+               --  If the subprogram comes from an instance in the same\n+               --  unit, and the instance is not yet frozen, inlining might\n+               --  trigger order-of-elaboration problems in gigi.\n+\n+               --------------------------\n+               -- In_Unfrozen_Instance --\n+               --------------------------\n+\n+               function In_Unfrozen_Instance return Boolean is\n+                  S : Entity_Id := Scop;\n+\n+               begin\n+                  while Present (S)\n+                    and then S /= Standard_Standard\n+                  loop\n+                     if Is_Generic_Instance (S)\n+                       and then Present (Freeze_Node (S))\n+                       and then not Analyzed (Freeze_Node (S))\n+                     then\n+                        return True;\n+                     end if;\n+\n+                     S := Scope (S);\n+                  end loop;\n+\n+                  return False;\n+               end In_Unfrozen_Instance;\n+\n+            --  Start of processing for Inlined_Subprogram\n+\n             begin\n                --  Verify that the body to inline has already been seen,\n                --  and that if the body is in the current unit the inlining\n@@ -1943,14 +1974,7 @@ package body Exp_Ch6 is\n                then\n                   Must_Inline := False;\n \n-               --  If the subprogram comes from an instance in the same\n-               --  unit, and the instance is not yet frozen, inlining might\n-               --  trigger order-of-elaboration problems in gigi.\n-\n-               elsif Is_Generic_Instance (Scop)\n-                 and then Present (Freeze_Node (Scop))\n-                 and then not Analyzed (Freeze_Node (Scop))\n-               then\n+               elsif In_Unfrozen_Instance then\n                   Must_Inline := False;\n \n                else\n@@ -1998,7 +2022,7 @@ package body Exp_Ch6 is\n                        N, Subp);\n                   end if;\n                end if;\n-            end;\n+            end Inlined_Subprogram;\n          end if;\n       end if;\n "}, {"sha": "50229e82e6cec1e096da5635df9c27d88b369101", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -155,7 +155,6 @@ package System.Rident is\n    --  Synonyms permitted for historical purposes of compatibility\n \n    --   No_Requeue         synonym for No_Requeue_Statements\n-   --   No_Tasking         synonym for Max_Tasks => 0\n    --   No_Task_Attributes synonym for No_Task_Attributes_Package\n \n    subtype All_Restrictions is Restriction_Id range"}, {"sha": "fe0389b6bf90310c77afe023d4c425b2f9eb7989", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -605,10 +605,14 @@ package body Sem_Attr is\n          --  prefix may have been a tagged formal object, which is\n          --  defined to be aliased even when the actual might not be\n          --  (other instance cases will have been caught in the generic).\n+         --  Similarly, within an inlined body we know that the attribute\n+         --  is legal in the original subprogram, and therefore legal in\n+         --  the expansion.\n \n          if Aname /= Name_Unrestricted_Access\n            and then not Is_Aliased_View (P)\n            and then not In_Instance\n+           and then not In_Inlined_Body\n          then\n             Error_Attr (\"prefix of % attribute must be aliased\", P);\n          end if;"}, {"sha": "4896da37f7e22d1199d2ef251e125b5110dd8483", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -29,7 +29,6 @@ with Namet;  use Namet;\n with Opt;    use Opt;\n with Osint;  use Osint;\n with Output; use Output;\n-with Uintp;  use Uintp;\n \n package body Targparm is\n    use ASCII;\n@@ -193,7 +192,7 @@ package body Targparm is\n       Source_Last  : Source_Ptr)\n    is\n       P : Source_Ptr;\n-      V : Uint;\n+      --  Scans source buffer containing source of system.ads\n \n       Fatal : Boolean := False;\n       --  Set True if a fatal error is detected\n@@ -221,7 +220,7 @@ package body Targparm is\n          elsif System_Text (P .. P + 20) = \"pragma Restrictions (\" then\n             P := P + 21;\n \n-            Rloop : for K in Partition_Boolean_Restrictions loop\n+            Rloop : for K in All_Boolean_Restrictions loop\n                declare\n                   Rname : constant String := Restriction_Id'Image (K);\n \n@@ -249,6 +248,9 @@ package body Targparm is\n                   Rname : constant String :=\n                             All_Parameter_Restrictions'Image (K);\n \n+                  V : Natural;\n+                  --  Accumulates value\n+\n                begin\n                   for J in Rname'Range loop\n                      if Fold_Upper (System_Text (P + Source_Ptr (J - 1)))\n@@ -262,22 +264,36 @@ package body Targparm is\n                                                       \" => \"\n                   then\n                      P := P + Rname'Length + 4;\n-                     V := Uint_0;\n \n+                     V := 0;\n                      loop\n                         if System_Text (P) in '0' .. '9' then\n-                           V := 10 * V + Character'Pos (System_Text (P)) - 48;\n+                           declare\n+                              pragma Unsuppress (Overflow_Check);\n+\n+                           begin\n+                              --  Accumulate next digit\n+\n+                              V := 10 * V +\n+                                   Character'Pos (System_Text (P)) -\n+                                   Character'Pos ('0');\n+\n+                           exception\n+                              --  On overflow, we just ignore the pragma since\n+                              --  that is the standard handling in this case.\n+\n+                              when Constraint_Error =>\n+                                 goto Line_Loop_Continue;\n+                           end;\n+\n                         elsif System_Text (P) = '_' then\n                            null;\n+\n                         elsif System_Text (P) = ')' then\n-                           if UI_Is_In_Int_Range (V) then\n-                              Restrictions_On_Target.Value (K) :=\n-                                Integer (UI_To_Int (V));\n-                              Restrictions_On_Target.Set (K) := True;\n-                              goto Line_Loop_Continue;\n-                           else\n-                              exit Ploop;\n-                           end if;\n+                           Restrictions_On_Target.Value (K) := V;\n+                           Restrictions_On_Target.Set (K) := True;\n+                           goto Line_Loop_Continue;\n+\n                         else\n                            exit Ploop;\n                         end if;"}, {"sha": "01e8a15a6b85b6c546ad0764f92c13a589d72d17", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41ea816240813af6963fd45e97b2063e4335803/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=a41ea816240813af6963fd45e97b2063e4335803", "patch": "@@ -104,9 +104,10 @@ package Targparm is\n    --  if a pragma Suppress_Exception_Locations appears, then the flag\n    --  Opt.Exception_Locations_Suppressed is set to True.\n \n-   --  The only other pragma allowed is a pragma Restrictions that gives the\n-   --  simple name of a restriction for which partition consistency is always\n-   --  required (see definition of Rident.Restriction_Info).\n+   --  The only other pragma allowed is a pragma Restrictions that specifies\n+   --  a restriction that will be imposed on all units in the partition. Note\n+   --  that in this context, only one restriction can be specified in a single\n+   --  pragma, and the pragma must appear on its own on a single source line.\n \n    Restrictions_On_Target : Restrictions_Info;\n    --  Records restrictions specified by system.ads. Only the Set and Value"}]}