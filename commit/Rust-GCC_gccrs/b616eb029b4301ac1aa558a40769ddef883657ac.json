{"sha": "b616eb029b4301ac1aa558a40769ddef883657ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxNmViMDI5YjQzMDFhYzFhYTU1OGE0MDc2OWRkZWY4ODM2NTdhYw==", "commit": {"author": {"name": "Janis Johnson", "email": "janosjo@codesourcery.com", "date": "2012-06-15T19:45:54Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2012-06-15T19:45:54Z"}, "message": "gcov.exp (verify-lines, [...]): Use testname that includes flags, passed in as new argument, in pass/fail messages.\n\n\t* lib/gcov.exp (verify-lines, verify-branches, verify-calls): Use\n\ttestname that includes flags, passed in as new argument, in\n\tpass/fail messages.\n\t(run_gcov): Get testname from dg-test, use it in pass/fail messages\n\tand pass it to verify-* procedures.\n\nFrom-SVN: r188681", "tree": {"sha": "c7a354d4305634155d5bbe29783ec743af6dcae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a354d4305634155d5bbe29783ec743af6dcae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b616eb029b4301ac1aa558a40769ddef883657ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b616eb029b4301ac1aa558a40769ddef883657ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b616eb029b4301ac1aa558a40769ddef883657ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b616eb029b4301ac1aa558a40769ddef883657ac/comments", "author": null, "committer": null, "parents": [{"sha": "165b955b34bb39d052720232a26d3f2607f6c56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165b955b34bb39d052720232a26d3f2607f6c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165b955b34bb39d052720232a26d3f2607f6c56a"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "bcff75712cf8d6131c5fd6c907eb3e42ec744d15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b616eb029b4301ac1aa558a40769ddef883657ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b616eb029b4301ac1aa558a40769ddef883657ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b616eb029b4301ac1aa558a40769ddef883657ac", "patch": "@@ -1,5 +1,11 @@\n 2012-06-15  Janis Johnson  <janosjo@codesourcery.com>\n \n+\t* lib/gcov.exp (verify-lines, verify-branches, verify-calls): Use\n+\ttestname that includes flags, passed in as new argument, in\n+\tpass/fail messages.\n+\t(run_gcov): Get testname from dg-test, use it in pass/fail messages\n+\tand pass it to verify-* procedures.\n+\n \t* g++.dg/torture/stackalign/stackalign.exp: Combine stack\n \talignment torture options with usual torture options.\n "}, {"sha": "601330b1ff602b6f2fe802a527af4aa7013ca272", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b616eb029b4301ac1aa558a40769ddef883657ac/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b616eb029b4301ac1aa558a40769ddef883657ac/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=b616eb029b4301ac1aa558a40769ddef883657ac", "patch": "@@ -34,12 +34,14 @@ proc clean-gcov { testcase } {\n #\n # verify-lines -- check that line counts are as expected\n #\n-# TESTCASE is the name of the test.\n+# TESTNAME is the name of the test, including unique flags.\n+# TESTCASE is the name of the test file.\n # FILE is the name of the gcov output file.\n #\n-proc verify-lines { testcase file } {\n+proc verify-lines { testname testcase file } {\n     #send_user \"verify-lines\\n\"\n     global subdir\n+\n     set failed 0\n     set fd [open $file r]\n     while { [gets $fd line] >= 0 } {\n@@ -54,13 +56,13 @@ proc verify-lines { testcase file } {\n \t\t}\n \t    }\n \t    if { $is == \"\" } {\n-\t\tfail \"$subdir/$testcase:$n:no data available for this line\"\n+\t\tfail \"$testname line $n: no data available\"\n \t\tincr failed\n \t    } elseif { $is != $shouldbe } {\n-\t\tfail \"$subdir/$testcase:$n:is $is:should be $shouldbe\"\n+\t\tfail \"$testname line $n: is $is:should be $shouldbe\"\n \t\tincr failed\n \t    } else {\n-\t\tpass \"$subdir/$testcase:$n line count\"\n+\t\tpass \"$testname count for line $n\"\n \t    }\n \t}\n     }\n@@ -71,7 +73,8 @@ proc verify-lines { testcase file } {\n #\n # verify-branches -- check that branch percentages are as expected\n #\n-# TESTCASE is the name of the test.\n+# TESTNAME is the name of the test, including unique flags.\n+# TESTCASE is the name of the test file.\n # FILE is the name of the gcov output file.\n #\n # Checks are based on comments in the source file.  This means to look for\n@@ -86,8 +89,9 @@ proc verify-lines { testcase file } {\n # branch instructions.  Don't check for branches that might be\n # optimized away or replaced with predicated instructions.\n #\n-proc verify-branches { testcase file } {\n+proc verify-branches { testname testcase file } {\n     #send_user \"verify-branches\\n\"\n+\n     set failed 0\n     set shouldbe \"\"\n     set fd [open $file r]\n@@ -99,7 +103,7 @@ proc verify-branches { testcase file } {\n \t    if [regexp \"branch\\\\((\\[0-9 \\]+)\\\\)\" \"$line\" all new_shouldbe] {\n \t\t# All percentages in the current list should have been seen.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    fail \"$n: expected branch percentages not found: $shouldbe\"\n+\t\t    fail \"$testname line $n: expected branch percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t    set shouldbe \"\"\n \t\t}\n@@ -117,14 +121,14 @@ proc verify-branches { testcase file } {\n \t    } elseif [regexp \"branch +\\[0-9\\]+ taken (-\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall taken] {\n \t\t# Percentages should never be negative.\n-\t\tfail \"$n: negative percentage: $taken\"\n+\t\tfail \"$testname line $n: negative percentage: $taken\"\n \t\tincr failed\n \t    } elseif [regexp \"branch +\\[0-9\\]+ taken (\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall taken] {\n \t\t#send_user \"$n: taken = $taken\\n\"\n \t\t# Percentages should never be greater than 100.\n \t\tif {$taken > 100} {\n-\t\t    fail \"$n: percentage greater than 100: $taken\"\n+\t\t    fail \"$testname line $n: branch percentage greater than 100: $taken\"\n \t\t    incr failed\n \t\t}\n \t\tif {$taken > 50} {\n@@ -139,7 +143,7 @@ proc verify-branches { testcase file } {\n \t    } elseif [regexp \"branch\\\\(end\\\\)\" \"$line\"] {\n \t\t# All percentages in the list should have been seen by now.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    fail \"$n: expected branch percentages not found: $shouldbe\"\n+\t\t    fail \"$testname line n: expected branch percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t}\n \t\tset shouldbe \"\"\n@@ -148,7 +152,7 @@ proc verify-branches { testcase file } {\n     }\n     # All percentages in the list should have been seen.\n     if {[llength $shouldbe] != 0} {\n-\tfail \"$n: expected branch percentages not found: $shouldbe\"\n+\tfail \"$testname line $n: expected branch percentages not found: $shouldbe\"\n \tincr failed\n     }\n     close $fd\n@@ -158,7 +162,8 @@ proc verify-branches { testcase file } {\n #\n # verify-calls -- check that call return percentages are as expected\n #\n-# TESTCASE is the name of the test.\n+# TESTNAME is the name of the test, including unique flags.\n+# TESTCASE is the name of the test file.\n # FILE is the name of the gcov output file.\n #\n # Checks are based on comments in the source file.  This means to look for\n@@ -173,8 +178,9 @@ proc verify-branches { testcase file } {\n # call instructions.  Don't check for calls that are inserted by the\n # compiler or that might be inlined.\n #\n-proc verify-calls { testcase file } {\n+proc verify-calls { testname testcase file } {\n     #send_user \"verify-calls\\n\"\n+\n     set failed 0\n     set shouldbe \"\"\n     set fd [open $file r]\n@@ -186,7 +192,7 @@ proc verify-calls { testcase file } {\n \t    if [regexp \"returns\\\\((\\[0-9 \\]+)\\\\)\" \"$line\" all new_shouldbe] {\n \t\t# All percentages in the current list should have been seen.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    fail \"$n: expected return percentages not found: $shouldbe\"\n+\t\t    fail \"$testname line $n: expected return percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t    set shouldbe \"\"\n \t\t}\n@@ -195,7 +201,7 @@ proc verify-calls { testcase file } {\n \t    } elseif [regexp \"call +\\[0-9\\]+ returned (-\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall returns] {\n \t\t# Percentages should never be negative.\n-\t\tfail \"$n: negative percentage: $returns\"\n+\t\tfail \"$testname line $n: negative percentage: $returns\"\n \t\tincr failed\n \t    } elseif [regexp \"call +\\[0-9\\]+ returned (\\[0-9\\]+)%\" \"$line\" \\\n \t\t\tall returns] {\n@@ -212,7 +218,7 @@ proc verify-calls { testcase file } {\n \t    } elseif [regexp \"returns\\\\(end\\\\)\" \"$line\"] {\n \t\t# All percentages in the list should have been seen by now.\n \t\tif {[llength $shouldbe] != 0} {\n-\t\t    fail \"$n: expected return percentages not found: $shouldbe\"\n+\t\t    fail \"$testname line $n: expected return percentages not found: $shouldbe\"\n \t\t    incr failed\n \t\t}\n \t\tset shouldbe \"\"\n@@ -221,7 +227,7 @@ proc verify-calls { testcase file } {\n     }\n     # All percentages in the list should have been seen.\n     if {[llength $shouldbe] != 0} {\n-\tfail \"$n: expected return percentages not found: $shouldbe\"\n+\tfail \"$testname line $n: expected return percentages not found: $shouldbe\"\n \tincr failed\n     }\n     close $fd\n@@ -259,7 +265,10 @@ proc run-gcov { args } {\n \t}\n     }\n \n-    # Extract the test name from the arguments.\n+    # Get the test name, including options that make it unique, from gnu-test 2 levels up.\n+    upvar 2 name testname\n+\n+    # Extract the test file name from the arguments.\n     set testcase [lindex $gcov_args end]\n \n     verbose \"Running $GCOV $testcase\" 2\n@@ -269,7 +278,7 @@ proc run-gcov { args } {\n \tif { $xfailed } {\n \t    setup_xfail \"*-*-*\"\n \t}\n-\tfail \"$subdir/$testcase gcov failed: [lindex $result 1]\"\n+\tfail \"$testname gcov failed: [lindex $result 1]\"\n \tclean-gcov $testcase\n \treturn\n     }\n@@ -280,24 +289,24 @@ proc run-gcov { args } {\n \tif { $xfailed } {\n \t    setup_xfail \"*-*-*\"\n \t}\n-        fail \"$subdir/$testcase gcov failed: $testcase.gcov does not exist\"\n+        fail \"$testname gcov failed: $testcase.gov does not exist\"\n         clean-gcov $testcase\n         return\n     }\n     remote_upload host $testcase.gcov $testcase.gcov\n \n     # Check that line execution counts are as expected.\n-    set lfailed [verify-lines $testcase $testcase.gcov]\n+    set lfailed [verify-lines $testname $testcase $testcase.gcov]\n \n     # If requested via the .x file, check that branch and call information\n     # is correct.\n     if { $gcov_verify_branches } {\n-\tset bfailed [verify-branches $testcase $testcase.gcov]\n+\tset bfailed [verify-branches $testname $testcase $testcase.gcov]\n     } else {\n \tset bfailed 0\n     }\n     if { $gcov_verify_calls } {\n-\tset cfailed [verify-calls $testcase $testcase.gcov]\n+\tset cfailed [verify-calls $testname $testcase $testcase.gcov]\n     } else {\n \tset cfailed 0\n     }\n@@ -309,9 +318,9 @@ proc run-gcov { args } {\n \tsetup_xfail \"*-*-*\"\n     }\n     if { $tfailed > 0 } {\n-\tfail \"$subdir/$testcase gcov: $lfailed failures in line counts, $bfailed in branch percentages, $cfailed in return percentages\"\n+\tfail \"$testname gcov: $lfailed failures in line counts, $bfailed in branch percentages, $cfailed in return percentages\"\n     } else {\n-\tpass \"$subdir/$testcase gcov\"\n+\tpass \"$testname gcov\"\n \tclean-gcov $testcase\n     }\n }"}]}