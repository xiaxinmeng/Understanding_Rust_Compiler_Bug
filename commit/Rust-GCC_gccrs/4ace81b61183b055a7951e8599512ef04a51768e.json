{"sha": "4ace81b61183b055a7951e8599512ef04a51768e", "node_id": "C_kwDOANBUbNoAKDRhY2U4MWI2MTE4M2IwNTVhNzk1MWU4NTk5NTEyZWYwNGE1MTc2OGU", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-16T21:05:53Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-17T03:49:24Z"}, "message": "Docs: Fix some too-long lines in Texinfo manual.\n\ngcc/ChangeLog:\n\t* doc/extend.texi (Common Function Attributes) <access>: Fix bad\n\tline breaks in examples.\n\t<malloc>: Fix bad line breaks in running text, also copy-edit\n\tfor consistency.\n\t(Extended Asm) <Generic Operand Modifiers>: Fix @multitable width.\n\t* doc/invoke.texi (Option Summary) <Developer Options>: Fix misplaced\n\t@gol.\n\t(C++ Dialect Options) <-fcontracts>: Add line break in example.\n\t<-Wctad-maybe-unsupported>: Likewise.\n\t<-Winvalid-constexpr>: Likewise.\n\t(Warning Options) <-Wdangling-pointer>: Likewise.\n\t<-Winterference-size>: Likewise.\n\t<-Wvla-parameter>: Likewise.\n\t(Static Analyzer Options): Fix bad line breaks in running text,\n\tplus add some missing markup.\n\t(Optimize Options) <openacc-privatization>: Fix more bad line\n\tbreaks in running text.", "tree": {"sha": "d9fa95330d67985de9ad99f615384cf6c4f7ddf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fa95330d67985de9ad99f615384cf6c4f7ddf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ace81b61183b055a7951e8599512ef04a51768e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ace81b61183b055a7951e8599512ef04a51768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ace81b61183b055a7951e8599512ef04a51768e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ace81b61183b055a7951e8599512ef04a51768e/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf80413deb5c1eacbefd685e106c6351b75ecf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf80413deb5c1eacbefd685e106c6351b75ecf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf80413deb5c1eacbefd685e106c6351b75ecf2"}], "stats": {"total": 110, "additions": 66, "deletions": 44}, "files": [{"sha": "39d45df8d8979c1b632825af4a8da16bee5ee8ad", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ace81b61183b055a7951e8599512ef04a51768e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ace81b61183b055a7951e8599512ef04a51768e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4ace81b61183b055a7951e8599512ef04a51768e", "patch": "@@ -2611,8 +2611,11 @@ the @code{puts} function, or the second and third arguments to\n the @code{memcpy} function.\n \n @smallexample\n-__attribute__ ((access (read_only, 1))) int puts (const char*);\n-__attribute__ ((access (read_only, 2, 3))) void* memcpy (void*, const void*, size_t);\n+__attribute__ ((access (read_only, 1)))\n+int puts (const char*);\n+\n+__attribute__ ((access (read_only, 2, 3)))\n+void* memcpy (void*, const void*, size_t);\n @end smallexample\n \n The @code{read_write} access mode applies to arguments of pointer types\n@@ -2624,7 +2627,8 @@ of the use of the @code{read_write} access mode is the first argument to\n the @code{strcat} function.\n \n @smallexample\n-__attribute__ ((access (read_write, 1), access (read_only, 2))) char* strcat (char*, const char*);\n+__attribute__ ((access (read_write, 1), access (read_only, 2)))\n+char* strcat (char*, const char*);\n @end smallexample\n \n The @code{write_only} access mode applies to arguments of pointer types\n@@ -2636,8 +2640,11 @@ the @code{strcpy} function, or the first two arguments to the @code{fgets}\n function.\n \n @smallexample\n-__attribute__ ((access (write_only, 1), access (read_only, 2))) char* strcpy (char*, const char*);\n-__attribute__ ((access (write_only, 1, 2), access (read_write, 3))) int fgets (char*, int, FILE*);\n+__attribute__ ((access (write_only, 1), access (read_only, 2)))\n+char* strcpy (char*, const char*);\n+\n+__attribute__ ((access (write_only, 1, 2), access (read_write, 3)))\n+int fgets (char*, int, FILE*);\n @end smallexample\n \n The access mode @code{none} specifies that the pointer to which it applies\n@@ -3444,22 +3451,23 @@ deallocation pairs marked with the @code{malloc}.  In particular:\n @itemize @bullet\n \n @item\n-The analyzer will emit a @option{-Wanalyzer-mismatching-deallocation}\n+The analyzer emits a @option{-Wanalyzer-mismatching-deallocation}\n diagnostic if there is an execution path in which the result of an\n allocation call is passed to a different deallocator.\n \n @item\n-The analyzer will emit a @option{-Wanalyzer-double-free}\n+The analyzer emits a @option{-Wanalyzer-double-free}\n diagnostic if there is an execution path in which a value is passed\n more than once to a deallocation call.\n \n @item\n-The analyzer will consider the possibility that an allocation function\n-could fail and return NULL.  It will emit\n-@option{-Wanalyzer-possible-null-dereference} and\n-@option{-Wanalyzer-possible-null-argument} diagnostics if there are\n+The analyzer considers the possibility that an allocation function\n+could fail and return null.  If there are\n execution paths in which an unchecked result of an allocation call is\n-dereferenced or passed to a function requiring a non-null argument.\n+dereferenced or passed to a function requiring a non-null argument,\n+it emits\n+@option{-Wanalyzer-possible-null-dereference} and\n+@option{-Wanalyzer-possible-null-argument} diagnostics.\n If the allocator always returns non-null, use\n @code{__attribute__ ((returns_nonnull))} to suppress these warnings.\n For example:\n@@ -3469,26 +3477,26 @@ char *xstrdup (const char *)\n @end smallexample\n \n @item\n-The analyzer will emit a @option{-Wanalyzer-use-after-free}\n+The analyzer emits a @option{-Wanalyzer-use-after-free}\n diagnostic if there is an execution path in which the memory passed\n by pointer to a deallocation call is used after the deallocation.\n \n @item\n-The analyzer will emit a @option{-Wanalyzer-malloc-leak} diagnostic if\n+The analyzer emits a @option{-Wanalyzer-malloc-leak} diagnostic if\n there is an execution path in which the result of an allocation call\n is leaked (without being passed to the deallocation function).\n \n @item\n-The analyzer will emit a @option{-Wanalyzer-free-of-non-heap} diagnostic\n+The analyzer emits a @option{-Wanalyzer-free-of-non-heap} diagnostic\n if a deallocation function is used on a global or on-stack variable.\n \n @end itemize\n \n-The analyzer assumes that deallocators can gracefully handle the @code{NULL}\n+The analyzer assumes that deallocators can gracefully handle the null\n pointer.  If this is not the case, the deallocator can be marked with\n @code{__attribute__((nonnull))} so that @option{-fanalyzer} can emit\n a @option{-Wanalyzer-possible-null-argument} diagnostic for code paths\n-in which the deallocator is called with NULL.\n+in which the deallocator is called with null.\n \n @cindex @code{no_icf} function attribute\n @item no_icf\n@@ -11039,7 +11047,7 @@ lab:\n @noindent\n The following table shows the modifiers supported by all targets and their effects:\n \n-@multitable {Modifier} {Description} {Example}\n+@multitable @columnfractions 0.15 0.7 0.15\n @headitem Modifier @tab Description @tab Example\n @item @code{c}\n @tab Require a constant operand and print the constant expression with no punctuation."}, {"sha": "10c9fd835717a965c51bebede60f4069766ed67f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ace81b61183b055a7951e8599512ef04a51768e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ace81b61183b055a7951e8599512ef04a51768e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4ace81b61183b055a7951e8599512ef04a51768e", "patch": "@@ -715,8 +715,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Developer Options,,GCC Developer Options}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n -dumpfullversion  -fcallgraph-info@r{[}=su,da@r{]}\n--fchecking  -fchecking=@var{n}\n--fdbg-cnt-list @gol  -fdbg-cnt=@var{counter-value-list} @gol\n+-fchecking  -fchecking=@var{n} @gol\n+-fdbg-cnt-list  -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n -fdisable-rtl-@var{pass-name}=@var{range-list} @gol\n@@ -3168,7 +3168,8 @@ into shape for a future C++ standard.\n On violation of a checked contract, the violation handler is called.\n Users can replace the violation handler by defining\n @smallexample\n-void handle_contract_violation (const std::experimental::contract_violation&);\n+void\n+handle_contract_violation (const std::experimental::contract_violation&);\n @end smallexample\n \n There are different sets of additional flags that can be used together\n@@ -3711,7 +3712,8 @@ struct allow_ctad_t; // any name works\n template <typename T> struct S @{\n   S(T) @{ @}\n @};\n-S(allow_ctad_t) -> S<void>; // guide with incomplete parameter type will never be considered\n+// Guide with incomplete parameter type will never be considered.\n+S(allow_ctad_t) -> S<void>;\n @end smallexample\n \n @opindex Wctor-dtor-privacy\n@@ -3903,7 +3905,8 @@ void f (int& i);\n constexpr void\n g (int& i)\n @{\n-  f(i); // warns by default in C++20, in C++23 only with -Winvalid-constexpr\n+  // Warns by default in C++20, in C++23 only with -Winvalid-constexpr.\n+  f(i);\n @}\n @end smallexample\n \n@@ -9062,7 +9065,8 @@ For example\n int f (int c1, int c2, x)\n @{\n   char *p = strchr ((char[])@{ c1, c2 @}, c3);\n-  return p ? *p : 'x';   // warning: dangling pointer to a compound literal\n+  // warning: dangling pointer to a compound literal\n+  return p ? *p : 'x';\n @}\n @end smallexample\n In the following function the store of the address of the local variable\n@@ -9071,7 +9075,8 @@ In the following function the store of the address of the local variable\n void g (int **p)\n @{\n   int x = 7;\n-  *p = &x;   // warning: storing the address of a local variable in *p\n+  // warning: storing the address of a local variable in *p\n+  *p = &x;\n @}\n @end smallexample\n \n@@ -9091,7 +9096,8 @@ void f (char *s)\n       char a[12] = \"tmpname\";\n       s = a;\n     @}\n-  strcat (s, \".tmp\");   // warning: dangling pointer to a may be used\n+  // warning: dangling pointer to a may be used\n+  strcat (s, \".tmp\");\n   ...\n @}\n @end smallexample\n@@ -9840,8 +9846,10 @@ avoid false sharing in concurrent code:\n \n @smallexample\n struct independent_fields @{\n-  alignas(std::hardware_destructive_interference_size) std::atomic<int> one;\n-  alignas(std::hardware_destructive_interference_size) std::atomic<int> two;\n+  alignas(std::hardware_destructive_interference_size)\n+    std::atomic<int> one;\n+  alignas(std::hardware_destructive_interference_size)\n+    std::atomic<int> two;\n @};\n @end smallexample\n \n@@ -9994,14 +10002,16 @@ parameter in excess of the actual VLA bound triggers a warning as well.\n \n @smallexample\n void f (int n, int[n]);\n-void f (int, int[]);     // warning: argument 2 previously declared as a VLA\n+// warning: argument 2 previously declared as a VLA\n+void f (int, int[]);\n \n void g (int n)\n @{\n     if (n > 4)\n       return;\n     int a[n];\n-    f (sizeof a, a);     // warning: access to a by f may be out of bounds\n+    // warning: access to a by f may be out of bounds\n+    f (sizeof a, a);\n   @dots{}\n @}\n \n@@ -10190,9 +10200,8 @@ limit.  The @option{-Wanalyzer-too-complex} option warns if this occurs.\n @opindex Wanalyzer-allocation-size\n @opindex Wno-analyzer-allocation-size\n @item -Wno-analyzer-allocation-size\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-allocation-size}\n-to disable it.\n+This warning requires @option{-fanalyzer}, which enables it;\n+to disable it, use @option{-Wno-analyzer-allocation-size}.\n \n This diagnostic warns for paths through the code in which a pointer to\n a buffer is assigned to point at a buffer with a size that is not a\n@@ -10473,10 +10482,10 @@ See @uref{https://cwe.mitre.org/data/definitions/762.html, CWE-762: Mismatched M\n @opindex Wanalyzer-out-of-bounds\n @opindex Wno-analyzer-out-of-bounds\n @item -Wno-analyzer-out-of-bounds\n-This warning requires @option{-fanalyzer} to enable it; use\n+This warning requires @option{-fanalyzer}, which enables it; use\n @option{-Wno-analyzer-out-of-bounds} to disable it.\n \n-This diagnostic warns for path through the code in which a buffer is\n+This diagnostic warns for paths through the code in which a buffer is\n definitely read or written out-of-bounds.  The diagnostic applies for\n cases where the analyzer is able to determine a constant offset and for\n accesses past the end of a buffer, also a constant capacity.  Further,\n@@ -10870,6 +10879,7 @@ memory-management functions:\n @item @code{strndup}\n @end itemize\n \n+@noindent\n of the following functions for working with file descriptors:\n \n @itemize @bullet\n@@ -10884,6 +10894,7 @@ of the following functions for working with file descriptors:\n @item @code{socket}, @code{bind}, @code{listen}, @code{accept}, and @code{connect}\n @end itemize\n \n+@noindent\n of the following functions for working with @code{<stdio.h>} streams:\n @itemize @bullet\n @item The built-in functions @code{__builtin_fprintf},\n@@ -10910,6 +10921,7 @@ of the following functions for working with @code{<stdio.h>} streams:\n @item @code{fwrite}\n @end itemize\n \n+@noindent\n and of the following functions:\n \n @itemize @bullet\n@@ -10934,10 +10946,12 @@ In addition, various functions with an @code{__analyzer_} prefix have\n special meaning to the analyzer, described in the GCC Internals manual.\n \n Pertinent parameters for controlling the exploration are:\n-@option{--param analyzer-bb-explosion-factor=@var{value}},\n-@option{--param analyzer-max-enodes-per-program-point=@var{value}},\n-@option{--param analyzer-max-recursion-depth=@var{value}}, and\n-@option{--param analyzer-min-snodes-for-call-summary=@var{value}}.\n+@itemize @bullet\n+@item @option{--param analyzer-bb-explosion-factor=@var{value}}\n+@item @option{--param analyzer-max-enodes-per-program-point=@var{value}}\n+@item @option{--param analyzer-max-recursion-depth=@var{value}}\n+@item @option{--param analyzer-min-snodes-for-call-summary=@var{value}}\n+@end itemize\n \n The following options control the analyzer.\n \n@@ -11140,7 +11154,7 @@ other events intended for debugging the analyzer.\n @item -fdump-analyzer\n Dump internal details about what the analyzer is doing to\n @file{@var{file}.analyzer.txt}.\n-This option is overridden by @option{-fdump-analyzer-stderr}.\n+@option{-fdump-analyzer-stderr} overrides this option.\n \n @opindex fdump-analyzer-stderr\n @item -fdump-analyzer-stderr\n@@ -12953,7 +12967,8 @@ callers are impacted, therefore need to be patched as well.\n @option{-flive-patching=inline-clone} disables the following optimization flags:\n @gccoptlist{-fwhole-program  -fipa-pta  -fipa-reference  -fipa-ra @gol\n -fipa-icf  -fipa-icf-functions  -fipa-icf-variables @gol\n--fipa-bit-cp  -fipa-vrp  -fipa-pure-const  -fipa-reference-addressable @gol\n+-fipa-bit-cp  -fipa-vrp  -fipa-pure-const @gol\n+-fipa-reference-addressable @gol\n -fipa-stack-alignment -fipa-modref}\n \n @item inline-only-static\n@@ -16172,9 +16187,8 @@ constructs are handled by the @samp{parloops} pass, en bloc.\n This is the current default.\n \n @item openacc-privatization\n-Specify mode of OpenACC privatization diagnostics for\n-@option{-fopt-info-omp-note} and applicable\n-@option{-fdump-tree-*-details}.\n+Control whether the @option{-fopt-info-omp-note} and applicable\n+@option{-fdump-tree-*-details} options emit OpenACC privatization diagnostics.\n With @option{--param=openacc-privatization=quiet}, don't diagnose.\n This is the current default.\n With @option{--param=openacc-privatization=noisy}, do diagnose."}]}