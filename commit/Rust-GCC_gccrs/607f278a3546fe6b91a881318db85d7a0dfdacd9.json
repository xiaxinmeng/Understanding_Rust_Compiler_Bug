{"sha": "607f278a3546fe6b91a881318db85d7a0dfdacd9", "node_id": "C_kwDOANBUbNoAKDYwN2YyNzhhMzU0NmZlNmI5MWE4ODEzMThkYjg1ZDdhMGRmZGFjZDk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-24T00:17:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-24T00:17:23Z"}, "message": "Daily bump.", "tree": {"sha": "35b39951556201936a1b570cc0bcd9c561553f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b39951556201936a1b570cc0bcd9c561553f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/607f278a3546fe6b91a881318db85d7a0dfdacd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607f278a3546fe6b91a881318db85d7a0dfdacd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607f278a3546fe6b91a881318db85d7a0dfdacd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607f278a3546fe6b91a881318db85d7a0dfdacd9/comments", "author": null, "committer": null, "parents": [{"sha": "4cbc71691e47b1ca6b64feb0af678606705d2f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc71691e47b1ca6b64feb0af678606705d2f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbc71691e47b1ca6b64feb0af678606705d2f92"}], "stats": {"total": 496, "additions": 495, "deletions": 1}, "files": [{"sha": "c5d6570c219860dbb28399e93fee08e201f284ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,213 @@\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* doc/invoke.texi (-mbranch-protection): Update documentation.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/sparc/freebsd.h (ENDFILE_SPEC): Don't add crtfastmath.o\n+\tfor -shared.\n+\t* config/sparc/linux.h (ENDFILE_SPEC): Likewise.\n+\t* config/sparc/linux64.h (ENDFILE_SPEC): Likewise.\n+\t* config/sparc/sp-elf.h (ENDFILE_SPEC): Likewise.\n+\t* config/sparc/sp64-elf.h (ENDFILE_SPEC): Likewise.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/aout.h (ra_auth_code): Add entry in enum.\n+\t* config/arm/arm.cc (emit_multi_reg_push): Add RA_AUTH_CODE register\n+\tto dwarf frame expression.\n+\t(arm_emit_multi_reg_pop): Restore RA_AUTH_CODE register.\n+\t(arm_expand_prologue): Update frame related information and reg notes\n+\tfor pac/pacbit insn.\n+\t(arm_regno_class): Check for pac pseudo reigster.\n+\t(arm_dbx_register_number): Assign ra_auth_code register number in dwarf.\n+\t(arm_init_machine_status): Set pacspval_needed to zero.\n+\t(arm_debugger_regno): Check for PAC register.\n+\t(arm_unwind_emit_sequence): Print .save directive with ra_auth_code\n+\tregister.\n+\t(arm_unwind_emit_set): Add entry for IP_REGNUM in switch case.\n+\t(arm_unwind_emit): Update REG_CFA_REGISTER case._\n+\t* config/arm/arm.h (FIRST_PSEUDO_REGISTER): Modify.\n+\t(DWARF_PAC_REGNUM): Define.\n+\t(IS_PAC_REGNUM): Likewise.\n+\t(enum reg_class): Add PAC_REG entry.\n+\t(machine_function): Add pacbti_needed state to structure.\n+\t* config/arm/arm.md (RA_AUTH_CODE): Define.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config.gcc ($tm_file): Update variable.\n+\t* config/arm/arm-mlib.h: Create new header file.\n+\t* config/arm/t-rmprofile (MULTI_ARCH_DIRS_RM): Rename mbranch-protection\n+\tmultilib arch directory.\n+\t(MULTILIB_REUSE): Add multilib reuse rules.\n+\t(MULTILIB_MATCHES): Add multilib match rules.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-cpus.in (cortex-m85): Define new CPU.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Likewise.\n+\t* doc/invoke.texi (Arm Options): Document -mcpu=cortex-m85.\n+\t* (-mfix-cmse-cve-2021-35465): Likewise.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108482\n+\t* tree-vect-generic.cc (expand_vector_operations): Fold remaining\n+\t.LOOP_DIST_ALIAS calls.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config.gcc (arm*-*-*): Add 'aarch-bti-insert.o' object.\n+\t* config/arm/arm-protos.h: Update.\n+\t* config/arm/aarch-common-protos.h: Declare\n+\t'aarch_bti_arch_check'.\n+\t* config/arm/arm.cc (aarch_bti_enabled) Update.\n+\t(aarch_bti_j_insn_p, aarch_pac_insn_p, aarch_gen_bti_c)\n+\t(aarch_gen_bti_j, aarch_bti_arch_check): New functions.\n+\t* config/arm/arm.md (bti_nop): New insn.\n+\t* config/arm/t-arm (PASSES_EXTRA): Add 'arm-passes.def'.\n+\t(aarch-bti-insert.o): New target.\n+\t* config/arm/unspecs.md (VUNSPEC_BTI_NOP): New unspec.\n+\t* config/arm/aarch-bti-insert.cc (rest_of_insert_bti): Verify arch\n+\tcompatibility.\n+\t(gate): Make use of 'aarch_bti_arch_check'.\n+\t* config/arm/arm-passes.def: New file.\n+\t* config/aarch64/aarch64.cc (aarch_bti_arch_check): New function.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Rename 'aarch64-bti-insert.o' into\n+\t'aarch-bti-insert.o'.\n+\t* config/aarch64/aarch64-protos.h: Remove 'aarch64_bti_enabled'\n+\tproto.\n+\t* config/aarch64/aarch64.cc (aarch_bti_enabled): Rename.\n+\t(aarch_bti_j_insn_p, aarch_pac_insn_p): New functions.\n+\t(aarch64_output_mi_thunk)\n+\t(aarch64_print_patchable_function_entry)\n+\t(aarch64_file_end_indicate_exec_stack): Update renamed function\n+\tcalls to renamed functions.\n+\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Likewise.\n+\t* config/aarch64/t-aarch64 (aarch-bti-insert.o): Update\n+\ttarget.\n+\t* config/aarch64/aarch64-bti-insert.cc: Delete.\n+\t* config/arm/aarch-bti-insert.cc: New file including and\n+\tgeneralizing code from aarch64-bti-insert.cc.\n+\t* config/arm/aarch-common-protos.h: Update.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm.h (arm_arch8m_main): Declare it.\n+\t* config/arm/arm-protos.h (arm_current_function_pac_enabled_p):\n+\tDeclare it.\n+\t* config/arm/arm.cc (arm_arch8m_main): Define it.\n+\t(arm_option_reconfigure_globals): Set arm_arch8m_main.\n+\t(arm_compute_frame_layout, arm_expand_prologue)\n+\t(thumb2_expand_return, arm_expand_epilogue)\n+\t(arm_conditional_register_usage): Update for pac codegen.\n+\t(arm_current_function_pac_enabled_p): New function.\n+\t(aarch_bti_enabled) New function.\n+\t(use_return_insn): Return zero when pac is enabled.\n+\t* config/arm/arm.md (pac_ip_lr_sp, pacbti_ip_lr_sp, aut_ip_lr_sp):\n+\tAdd new patterns.\n+\t* config/arm/unspecs.md (UNSPEC_PAC_NOP)\n+\t(VUNSPEC_PACBTI_NOP, VUNSPEC_AUT_NOP): Add unspecs.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/t-rmprofile: Add multilib rules for march +pacbti and\n+\tmbranch-protection.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* config/arm/arm.cc (arm_file_start): Emit EABI attributes for\n+\tTag_PAC_extension, Tag_BTI_extension, TAG_BTI_use, TAG_PACRET_use.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* ginclude/unwind-arm-common.h (_Unwind_VRS_RegClass): Introduce\n+\tnew pseudo register class _UVRSC_PAC.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* config/arm/arm-c.cc (arm_cpu_builtins): Define\n+\t__ARM_FEATURE_BTI_DEFAULT, __ARM_FEATURE_PAC_DEFAULT,\n+\t__ARM_FEATURE_PAUTH and __ARM_FEATURE_BTI.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* doc/sourcebuild.texi: Document arm_pacbti_hw.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\t    Richard Earnshaw  <Richard.Earnshaw@arm.com>\n+\n+\t* config/arm/arm.cc (arm_configure_build_target): Parse and validate\n+\t-mbranch-protection option and initialize appropriate data structures.\n+\t* config/arm/arm.opt (-mbranch-protection): New option.\n+\t* doc/invoke.texi (Arm Options): Document it.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_HAVE_PACBTI): New macro.\n+\t* config/arm/arm-cpus.in (pacbti): New feature.\n+\t* doc/invoke.texi (Arm Options): Document it.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc: Include aarch-common.h.\n+\t(all_architectures): Fix comment.\n+\t(aarch64_parse_extension): Rename return type, enum value names.\n+\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Rename\n+\tfactored out aarch_ra_sign_scope and aarch_ra_sign_key variables.\n+\tAlso rename corresponding enum values.\n+\t* config/aarch64/aarch64-opts.h (aarch64_function_type): Factor\n+\tout aarch64_function_type and move it to common code as\n+\taarch_function_type in aarch-common.h.\n+\t* config/aarch64/aarch64-protos.h: Include common types header,\n+\tmove out types aarch64_parse_opt_result and aarch64_key_type to\n+\taarch-common.h\n+\t* config/aarch64/aarch64.cc: Move mbranch-protection parsing types\n+\tand functions out into aarch-common.h and aarch-common.cc.  Fix up\n+\tall the name changes resulting from the move.\n+\t* config/aarch64/aarch64.md: Fix up aarch64_ra_sign_key type name change\n+\tand enum value.\n+\t* config/aarch64/aarch64.opt: Include aarch-common.h to import\n+\ttype move.  Fix up name changes from factoring out common code and\n+\tdata.\n+\t* config/arm/aarch-common-protos.h: Export factored out routines to both\n+\tbackends.\n+\t* config/arm/aarch-common.cc: Include newly factored out types.\n+\tMove all mbranch-protection code and data structures from\n+\taarch64.cc.\n+\t* config/arm/aarch-common.h: New header that declares types shared\n+\tbetween aarch32 and aarch64 backends.\n+\t* config/arm/arm-protos.h: Declare types and variables that are\n+\tmade common to aarch64 and aarch32 backends - aarch_ra_sign_key,\n+\taarch_ra_sign_scope and aarch_enable_bti.\n+\t* config/arm/arm.opt (config/arm/aarch-common.h): Include header.\n+\t(aarch_ra_sign_scope, aarch_enable_bti): Declare variable.\n+\t* config/arm/arm.cc: Add missing includes.\n+\n+2023-01-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/install.texi (amdgcn, nvptx): Require newlib 4.3.0.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108449\n+\t* cgraphunit.cc (check_global_declaration): Do not turn\n+\tundefined statics into externs.\n+\n 2023-01-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config/pru/pru.h (CLZ_DEFINED_VALUE_AT_ZERO): Fix value for QI"}, {"sha": "9ed1bcf7f8f22db9e0234bb1fe253fe3cd979a7c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1 +1 @@\n-20230123\n+20230124"}, {"sha": "05d42524bf32678329927a4776fd70284ff417ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,35 @@\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/107267\n+\t* cp-gimplify.cc (cp_gimplify_init_expr): Allow unexpected elision\n+\tof trivial types.\n+\n+2023-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107797\n+\t* cvt.cc (ocp_convert): copy_warning when creating a new\n+\tCOMPOUND_EXPR.\n+\t* init.cc (build_new_1): Suppress -Wunused-value on\n+\tcompiler-generated COMPOUND_EXPRs.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108195\n+\t* call.cc (build_user_type_conversion_1): Check whether the\n+\titerators also find a list ctor.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108496\n+\t* decl.cc (grokdeclarator): Check whether DECL_RESULT is already\n+\tset.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53288\n+\tDR 1299\n+\t* call.cc (extend_ref_init_temps_1): Handle ptrmem expression.\n+\n 2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/108437"}, {"sha": "a2f8ec7174a3d1aa554883725bf8416af4aa5445", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,22 @@\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108502\n+\t* dependency.cc (gfc_check_dependency): Prevent NULL pointer\n+\tdereference while recursively checking expressions.\n+\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108501\n+\t* interface.cc (get_expr_storage_size): Check array subscript triplets\n+\tthat we actually have integer values before trying to extract with\n+\tmpz_get_si.\n+\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108420\n+\t* iresolve.cc (check_charlen_present): Preserve character length if\n+\tthere is no array constructor.\n+\n 2023-01-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/102595"}, {"sha": "1fad9e14c7308dd8d3e2f01ad0da0dd5122d8f33", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,42 @@\n+2023-01-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/108182\n+\tPR modula2/108480\n+\t* Make-lang.in: Pass libsubdir to the language init\n+\tbuild.\n+\t* gm2-lang.cc (INCLUDE_VECTOR): Define.\n+\t(add_one_import_path): New.\n+\t(add_m2_import_paths): New.\n+\t(gm2_langhook_post_options): Arrange to add the include\n+\tpaths (and add the system ones) in the same order as C\n+\tuses.\n+\t* gm2spec.cc (build_archive_path): Remove.\n+\t(add_default_combination): Remove.\n+\t(add_default_archives): Remove.\n+\t(add_default_libs): We no longer need a '-L' option, just\n+\temit the -l and each library in use.\n+\t(build_include_path): Remove.\n+\t(add_include): Remove.\n+\t(add_default_includes): Remove.\n+\t(library_installed): Remove.\n+\t(check_valid_library): Remove.\n+\t(check_valid_list): Remove.\n+\t(convert_abbreviation): Diagnose unhandled cases.\n+\t(lang_specific_driver): Skip options where we will add back\n+\ta validated version.\n+\t* lang-specs.h (M2CPP): Reformat, append %I when -fcpp is not\n+\tin use.  Revise the cc1gm2 spec to omit mentioning options that\n+\tare handled in the c pre-processor line.\n+\t* lang.opt: Allow preprocessing and path options as input to the\n+\tcc1gm2 invocation, so that they can be passed to the preprocessor\n+\tinvocation.\n+\n+2023-01-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/108405\n+\t* gm2-libs-iso/Preemptive.mod (initPreemptive): Use a value for\n+\textra space that is divisible by common OS pagesizes.\n+\n 2023-01-20  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* gm2-libs/Args.mod (GetArg): Check index before"}, {"sha": "c9d2bc3d7efb462817ef9ca1763ef7d6f4e2311b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,123 @@\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/107267\n+\t* g++.dg/cpp0x/move2.C: New test.\n+\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108502\n+\t* gfortran.dg/pr108502.f90: New test.\n+\n+2023-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107797\n+\t* g++.dg/warn/Wunused-value-1.C: New test.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108195\n+\t* g++.dg/cpp0x/initlist-vect2.C: New test.\n+\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108501\n+\t* gfortran.dg/pr108501.f90: New test.\n+\n+2023-01-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108420\n+\t* gfortran.dg/pr108420.f90: New test.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108496\n+\t* g++.dg/template/explicit-instantiation5.C: New test.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* g++.target/arm/pac-1.C: New test.\n+\t* gcc.target/arm/pac-15.c: Likewise.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp (multilib_config \"rmprofile\"): Update\n+\ttests.\n+\t* gcc.target/arm/pac-12.c: New test.\n+\t* gcc.target/arm/pac-13.c: Likewise.\n+\t* gcc.target/arm/pac-14.c: Likewise.\n+\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add tests for cortex-m85.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108482\n+\t* gcc.dg/torture/pr108482.c: New testcase.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/bti-1.c: New testcase.\n+\t* gcc.target/arm/bti-2.c: Likewise.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/pac.h : New file.\n+\t* gcc.target/arm/pac-1.c : New test case.\n+\t* gcc.target/arm/pac-2.c : Likewise.\n+\t* gcc.target/arm/pac-3.c : Likewise.\n+\t* gcc.target/arm/pac-4.c : Likewise.\n+\t* gcc.target/arm/pac-5.c : Likewise.\n+\t* gcc.target/arm/pac-6.c : Likewise.\n+\t* gcc.target/arm/pac-7.c : Likewise.\n+\t* gcc.target/arm/pac-8.c : Likewise.\n+\t* gcc.target/arm/pac-9.c : Likewise.\n+\t* gcc.target/arm/pac-10.c : Likewise.\n+\t* gcc.target/arm/pac-11.c : Likewise.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add pacbti related entries.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* gcc.target/arm/acle/pacbti-m-predef-1.c: New test.\n+\t* gcc.target/arm/acle/pacbti-m-predef-3.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-6.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-7.c: Likewise.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_mbranch_protection_ok): New function.\n+\t* gcc.target/arm/acle/pacbti-m-predef-2.c: New test.\n+\t* gcc.target/arm/acle/pacbti-m-predef-4.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-5.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-8.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-9.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-10.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-11.c: Likewise.\n+\t* gcc.target/arm/acle/pacbti-m-predef-12.c: Likewise.\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\n+\t* lib/target-supports.exp:\n+\t(check_effective_target_arm_pacbti_hw): New.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108449\n+\t* gcc.dg/pr108449.c: New testcase.\n+\n+2023-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53288\n+\tDR 1299\n+\t* g++.dg/init/lifetime4.C: New test.\n+\n 2023-01-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gm2/case/pass/case-pass.exp: Update for removal of concatenated"}, {"sha": "cefc8d22b3702cafa9585a26334dffe00fa32755", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,22 @@\n+2023-01-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/pr-support.c (__gnu_unwind_execute): Decode opcode\n+\t\"0xb5\".\n+\n+2023-01-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Tejas Belagod   <tbelagod@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/pr-support.c (__gnu_unwind_execute): Decode\n+\texception opcode (0xb4) for saving RA_AUTH_CODE and authenticate\n+\twith AUTG if found.\n+\t* config/arm/unwind-arm.c (struct pseudo_regs): New.\n+\t(phase1_vrs): Introduce new field to store pseudo-reg state.\n+\t(phase2_vrs): Likewise.\n+\t(_Unwind_VRS_Get): Load pseudo register state from virtual reg set.\n+\t(_Unwind_VRS_Set): Store pseudo register state to virtual reg set.\n+\t(_Unwind_VRS_Pop): Load pseudo register value from stack into VRS.\n+\n 2023-01-18  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \tPR target/107678"}, {"sha": "fd67e1aa9c2f09069b43e3987392afd67b27126f", "filename": "libgm2/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,38 @@\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR modula2/108144\n+\t* libm2cor/Makefile.am: Revert previous change, instead\n+\tdrop the redundant $(MULTIDIR).\n+\t* libm2iso/Makefile.am: Likewise.\n+\t* libm2log/Makefile.am: Likewise.\n+\t* libm2min/Makefile.am: Likewise.\n+\t* libm2pim/Makefile.am: Likewise.\n+\t* libm2cor/Makefile.in: Regenerate.\n+\t* libm2iso/Makefile.in: Likewise.\n+\t* libm2log/Makefile.in: Likewise.\n+\t* libm2min/Makefile.in: Likewise.\n+\t* libm2pim/Makefile.in: Likewise.\n+\n+2023-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR modula2/108144\n+\t* configure.ac: Apply config-ml.pl to the generated Makefiles.\n+\tSet multilib_arg, use AM_PROG_LIBTOOL.\n+\t* configure: Regenerate.\n+\t* Makefile.am (AM_MAKEFLAGS): Do not override MULTI* flags.\n+\t* Makefile.in: Regenerate.\n+\t* libm2cor/Makefile.am: Install to $(toolexeclibdir)$(M2LIBDIR)\n+\trather than $(inst_libdir)/$(MULTIDIR)$(M2LIBDIR).\n+\t* libm2iso/Makefile.am: Likewise.\n+\t* libm2log/Makefile.am: Likewise.\n+\t* libm2min/Makefile.am: Likewise.\n+\t* libm2pim/Makefile.am: Likewise.\n+\t* libm2cor/Makefile.in: Regenerate.\n+\t* libm2iso/Makefile.in: Likewise.\n+\t* libm2log/Makefile.in: Likewise.\n+\t* libm2min/Makefile.in: Likewise.\n+\t* libm2pim/Makefile.in: Likewise.\n+\n 2023-01-19  Richard Biener  <rguenther@suse.de>\n \n \tPR modula2/108144"}, {"sha": "8d89b43e15bf0a719e7bf769245fe71e8f7fb28d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,8 @@\n+2023-01-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.0): Set non-rectangular\n+\tloop nest back to 'P' as Fortran support is incomplete.\n+\n 2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/108459"}, {"sha": "b1e17cfd5c6a1ef2b1529df261041390879749c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607f278a3546fe6b91a881318db85d7a0dfdacd9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607f278a3546fe6b91a881318db85d7a0dfdacd9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=607f278a3546fe6b91a881318db85d7a0dfdacd9", "patch": "@@ -1,3 +1,18 @@\n+2023-01-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>::_Unchecked): New.\n+\t(_Safe_iterator(const _Safe_iterator&, _Unchecked)): New.\n+\t(_Safe_iterator::operator++(int)): Use latter.\n+\t(_Safe_iterator::operator--(int)): Likewise.\n+\t(_Safe_iterator(_Iterator, const _Safe_sequence_base*)): Remove !_M_insular()\n+\tcheck.\n+\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::_Unchecked):\n+\tNew.\n+\t(_Safe_local_iterator(const _Safe_local_iterator&, _Unchecked)): New.\n+\t(_Safe_local_iterator::operator++(int)): Use latter.\n+\t* src/c++11/debug.cc (_S_debug_messages): Add as comment the _Debug_msg_id\n+\tentry associated to the array entry.\n+\n 2023-01-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (u8path): Add deprecated attribute."}]}