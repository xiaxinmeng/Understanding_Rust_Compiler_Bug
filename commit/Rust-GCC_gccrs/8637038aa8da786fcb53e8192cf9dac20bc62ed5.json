{"sha": "8637038aa8da786fcb53e8192cf9dac20bc62ed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzNzAzOGFhOGRhNzg2ZmNiNTNlODE5MmNmOWRhYzIwYmM2MmVkNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-11T09:48:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-11T09:48:31Z"}, "message": "ostream.tcc (basic_ostream<>::operator<<(long), [...]): Don't deal with oct and hex and casts to unsigned here...\n\n2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/ostream.tcc (basic_ostream<>::operator<<(long),\n\tbasic_ostream<>::operator<<(long long)): Don't deal with oct\n\tand hex and casts to unsigned here...\n\t* include/bits/locale_facets.tcc (__int_to_char(_CharT*, long,\n\tconst _CharT*, ios_base::fmtflags), __int_to_char(_CharT*, long\n\tlong, const _CharT*, ios_base::fmtflags)): ... do that here,\n\tinstead, as per Table 57.\n\t(num_put<>::_M_insert_int): Tidy treatment of numeric base and\n\tsign.\n\t* include/std/std_ostream.h (operator<<(short), operator<<(int)):\n\tAdjust logic, as per the letter of the resolution of DR117 [WP].\n\t* testsuite/22_locale/num_put/put/char/10.cc: New.\n\t* testsuite/22_locale/num_put/put/wchar_t/10.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/7.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/7.cc:\n\tLikewise.\n\nFrom-SVN: r101872", "tree": {"sha": "6343aca46f182bb041925af7a81b63923d2157c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6343aca46f182bb041925af7a81b63923d2157c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8637038aa8da786fcb53e8192cf9dac20bc62ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637038aa8da786fcb53e8192cf9dac20bc62ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8637038aa8da786fcb53e8192cf9dac20bc62ed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637038aa8da786fcb53e8192cf9dac20bc62ed5/comments", "author": null, "committer": null, "parents": [{"sha": "1f97667f30ad19585986527b282e4ae0d1b3a1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f97667f30ad19585986527b282e4ae0d1b3a1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f97667f30ad19585986527b282e4ae0d1b3a1a3"}], "stats": {"total": 368, "additions": 319, "deletions": 49}, "files": [{"sha": "7ab1fca13bb2b8d6f6f169a3e0f3109c925c8f7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -1,3 +1,23 @@\n+2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/ostream.tcc (basic_ostream<>::operator<<(long),\n+\tbasic_ostream<>::operator<<(long long)): Don't deal with oct\n+\tand hex and casts to unsigned here...\n+\t* include/bits/locale_facets.tcc (__int_to_char(_CharT*, long,\n+\tconst _CharT*, ios_base::fmtflags), __int_to_char(_CharT*, long\n+\tlong, const _CharT*, ios_base::fmtflags)): ... do that here,\n+\tinstead, as per Table 57.\n+\t(num_put<>::_M_insert_int): Tidy treatment of numeric base and\n+\tsign.\n+\t* include/std/std_ostream.h (operator<<(short), operator<<(int)):\n+\tAdjust logic, as per the letter of the resolution of DR117 [WP].\n+\t* testsuite/22_locale/num_put/put/char/10.cc: New.\n+\t* testsuite/22_locale/num_put/put/wchar_t/10.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/7.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/7.cc:\n+\tLikewise.\n+\n 2005-07-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* testsuite/ext/pb_assoc/example/tree_order_statistics_join.cc:"}, {"sha": "5fe251b427fa093ea4ef0a153de3c96b1920b683", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -820,15 +820,19 @@ namespace std\n       __len = static_cast<int>(__w);\n     }\n \n-  // Forwarding functions to peel signed from unsigned integer types.\n+  // Forwarding functions to peel signed from unsigned integer types and\n+  // either cast or compute the absolute value for the former, depending\n+  // on __basefield.\n   template<typename _CharT>\n     inline int\n     __int_to_char(_CharT* __bufend, long __v, const _CharT* __lit,\n \t\t  ios_base::fmtflags __flags)\n     {\n-      unsigned long __ul = static_cast<unsigned long>(__v);\n-      if (__v < 0)\n-\t__ul = -__ul;\n+      unsigned long __ul = __v;\n+      const ios_base::fmtflags __basefield = __flags & ios_base::basefield;\n+      if (__builtin_expect(__basefield != ios_base::oct\n+\t\t\t   && __basefield != ios_base::hex, true))\n+\t__ul = __v < 0 ? -__v : __ul;\n       return __int_to_char(__bufend, __ul, __lit, __flags, false);\n     }\n \n@@ -844,9 +848,11 @@ namespace std\n     __int_to_char(_CharT* __bufend, long long __v, const _CharT* __lit,\n \t\t  ios_base::fmtflags __flags)\n     {\n-      unsigned long long __ull = static_cast<unsigned long long>(__v);\n-      if (__v < 0)\n-\t__ull = -__ull;\n+      unsigned long long __ull = __v;\n+      const ios_base::fmtflags __basefield = __flags & ios_base::basefield;\n+      if (__builtin_expect(__basefield != ios_base::oct\n+\t\t\t   && __basefield != ios_base::hex, true))\n+\t__ull = __v < 0 ? -__v : __ull;\n       return __int_to_char(__bufend, __ull, __lit, __flags, false);\n     }\n \n@@ -966,16 +972,11 @@ namespace std\n \t    else if (__v)\n \t      *--__cs = __lit[__num_base::_S_ominus], ++__len;\n \t  }\n-\telse if (__basefield == ios_base::oct)\n+\telse if (__flags & ios_base::showbase && __v)\n \t  {\n-\t    // Octal.\n-\t    if (__flags & ios_base::showbase && __v)\n+\t    if (__basefield == ios_base::oct)\n \t      *--__cs = __lit[__num_base::_S_odigits], ++__len;\n-\t  }\n-\telse\n-\t  {\n-\t    // Hex.\n-\t    if (__flags & ios_base::showbase && __v)\n+\t    else\n \t      {\n \t\t// 'x' or 'X'\n \t\tconst bool __uppercase = __flags & ios_base::uppercase;\n@@ -1213,8 +1214,8 @@ namespace std\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     num_put<_CharT, _OutIter>::\n-    do_put(iter_type __s, ios_base& __b, char_type __fill, long long __v) const\n-    { return _M_insert_int(__s, __b, __fill, __v); }\n+    do_put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const\n+    { return _M_insert_int(__s, __io, __fill, __v); }\n \n   template<typename _CharT, typename _OutIter>\n     _OutIter"}, {"sha": "b4ea5b978fac0d68a4ab41c901468cc762494dc1", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -1,6 +1,6 @@\n // ostream classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -130,19 +130,8 @@ namespace std\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try\n \t    {\n-\t      bool __b = false;\n-\t      const char_type __c = this->fill();\n-\t      const ios_base::fmtflags __fmt = (this->flags()\n-\t\t\t\t\t\t& ios_base::basefield);\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n-\t\t{\n-\t\t  const unsigned long __l = static_cast<unsigned long>(__n);\n-\t\t  __b = __np.put(*this, *this, __c, __l).failed();\n-\t\t}\n-\t      else\n-\t\t__b = __np.put(*this, *this, __c, __n).failed();\n-\t      if (__b)\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n@@ -188,20 +177,8 @@ namespace std\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try\n \t    {\n-\t      bool __b = false;\n-\t      const char_type __c = this->fill();\n-\t      const ios_base::fmtflags __fmt = (this->flags()\n-\t\t\t\t\t\t& ios_base::basefield);\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n-\t\t{\n-\t\t  const unsigned long long __l = (static_cast<\n-\t\t\t\t\t\t  unsigned long long>(__n));\n-\t\t  __b = __np.put(*this, *this, __c, __l).failed();\n-\t\t}\n-\t      else\n-\t\t__b = __np.put(*this, *this, __c, __n).failed();\n-\t      if (__b)\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)"}, {"sha": "b484cabd8a59d8053840987550adfd896f4a40b5", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -175,9 +175,9 @@ namespace std\n       __ostream_type& \n       operator<<(short __n)\n       { \n-\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t  return this->operator<<(static_cast<unsigned long>\n+\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t  return this->operator<<(static_cast<long>\n \t\t\t\t  (static_cast<unsigned short>(__n)));\n \telse\n \t  return this->operator<<(static_cast<long>(__n));\n@@ -190,9 +190,9 @@ namespace std\n       __ostream_type& \n       operator<<(int __n)\n       { \n-\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t  return this->operator<<(static_cast<unsigned long>\n+\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t  return this->operator<<(static_cast<long>\n \t\t\t\t  (static_cast<unsigned int>(__n)));\n \telse\n \t  return this->operator<<(static_cast<long>(__n));"}, {"sha": "97c5712e37de4e7560721c36861b5199c63f7d1f", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/10.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F10.cc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -0,0 +1,68 @@\n+// 2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+\n+  const string empty;\n+\n+  stringstream ss;\n+  ss.imbue(loc_c);\n+  const num_put<char>& np = use_facet<num_put<char> >(ss.getloc()); \n+\n+  long l = -1;\n+  unsigned long ul = 0;\n+\n+  ss.setf(ios::hex, ios::basefield);\n+  np.put(ss.rdbuf(), ss, '+', l);\n+  VERIFY( ss.str() != \"1\" );\n+  ss >> ul;\n+  VERIFY( ul == static_cast<unsigned long>(l) );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG  \n+  long long ll = -1LL;\n+  unsigned long long ull = 0ULL;\n+\n+  ss.str(empty);\n+  ss.clear();\n+  np.put(ss.rdbuf(), ss, '+', ll);\n+  VERIFY( ss.str() != \"1\" );\n+  ss >> ull;\n+  VERIFY( ull == static_cast<unsigned long long>(ll) );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+"}, {"sha": "2e9243c2487286a76aebc581baa78aabc292a63c", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/10.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F10.cc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -0,0 +1,68 @@\n+// 2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+\n+  const wstring empty;\n+\n+  wstringstream ss;\n+  ss.imbue(loc_c);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(ss.getloc()); \n+\n+  long l = -1;\n+  unsigned long ul = 0;\n+\n+  ss.setf(ios::hex, ios::basefield);\n+  np.put(ss.rdbuf(), ss, L'+', l);\n+  VERIFY( ss.str() != L\"1\" );\n+  ss >> ul;\n+  VERIFY( ul == static_cast<unsigned long>(l) );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG  \n+  long long ll = -1LL;\n+  unsigned long long ull = 0ULL;\n+\n+  ss.str(empty);\n+  ss.clear();\n+  np.put(ss.rdbuf(), ss, L'+', ll);\n+  VERIFY( ss.str() != L\"1\" );\n+  ss >> ull;\n+  VERIFY( ull == static_cast<unsigned long long>(ll) );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+"}, {"sha": "4382473586e77e8228d391acd44978b3243dafdb", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/7.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F7.cc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -0,0 +1,68 @@\n+// 2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.2  Arithmetic inserters\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  stringstream ostr1, ostr2, ostr3, ostr4;\n+\n+  ostr1.setf(ios_base::oct);\n+  ostr1.setf(ios_base::hex);\n+\n+  short s = -1;\n+  ostr1 << s;\n+  VERIFY( ostr1.str() == \"-1\" );\n+\n+  ostr2.setf(ios_base::oct);\n+  ostr2.setf(ios_base::hex);\n+\n+  int i = -1;\n+  ostr2 << i;\n+  VERIFY( ostr2.str() == \"-1\" );\n+\n+  ostr3.setf(ios_base::oct);\n+  ostr3.setf(ios_base::hex);\n+\n+  long l = -1;\n+  ostr3 << l;\n+  VERIFY( ostr3.str() == \"-1\" );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  ostr4.setf(ios_base::oct);\n+  ostr4.setf(ios_base::hex);\n+\n+  long long ll = -1LL;\n+  ostr4 << ll;\n+  VERIFY( ostr4.str() == \"-1\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "87013e7ae7aee0a0435060ddd7101c653d9255a6", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/7.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637038aa8da786fcb53e8192cf9dac20bc62ed5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F7.cc?ref=8637038aa8da786fcb53e8192cf9dac20bc62ed5", "patch": "@@ -0,0 +1,68 @@\n+// 2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.2  Arithmetic inserters\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringstream ostr1, ostr2, ostr3, ostr4;\n+\n+  ostr1.setf(ios_base::oct);\n+  ostr1.setf(ios_base::hex);\n+\n+  short s = -1;\n+  ostr1 << s;\n+  VERIFY( ostr1.str() == L\"-1\" );\n+\n+  ostr2.setf(ios_base::oct);\n+  ostr2.setf(ios_base::hex);\n+\n+  int i = -1;\n+  ostr2 << i;\n+  VERIFY( ostr2.str() == L\"-1\" );\n+\n+  ostr3.setf(ios_base::oct);\n+  ostr3.setf(ios_base::hex);\n+\n+  long l = -1;\n+  ostr3 << l;\n+  VERIFY( ostr3.str() == L\"-1\" );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  ostr4.setf(ios_base::oct);\n+  ostr4.setf(ios_base::hex);\n+\n+  long long ll = -1LL;\n+  ostr4 << ll;\n+  VERIFY( ostr4.str() == L\"-1\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}