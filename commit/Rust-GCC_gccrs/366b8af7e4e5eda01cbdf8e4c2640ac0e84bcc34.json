{"sha": "366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2YjhhZjdlNGU1ZWRhMDFjYmRmOGU0YzI2NDBhYzBlODRiY2MzNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-03-26T07:35:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:35:19Z"}, "message": "a-taster.adb, [...]: Minor reformatting.\n\n2008-03-26  Robert Dewar  <dewar@adacore.com>\n\n\t* a-taster.adb, s-shasto.adb, s-soflin.adb, s-taasde.adb, s-taenca.adb,\n\ta-sytaco.adb, a-sytaco.ads, a-tasatt.adb, a-taside.adb,\n\ta-intnam-lynxos.ads, a-retide.adb, a-intnam-tru64.ads, a-intnam-aix.ads,\n\ta-intnam-irix.ads, a-intnam-hpux.ads, a-intnam-linux.ads,\n\ta-intnam-solaris.ads, a-caldel-vms.adb, a-intnam-vms.ads,\n\ta-excpol-abort.adb, a-intnam-mingw.ads, s-interr.adb, s-interr.ads,\n\ts-intman.ads, s-gloloc.adb, s-osinte-lynxos-3.ads,\n\ts-interr-sigaction.adb, s-osinte-hpux.ads, s-osinte-solaris-posix.ads,\n\ta-intnam-freebsd.ads, s-osinte-freebsd.ads, s-osinte-lynxos.ads,\n\ts-taspri-lynxos.ads, s-osinte-tru64.ads, s-osinte-tru64.ads,\n\ts-taspri-tru64.ads, s-osinte-aix.ads, s-osinte-irix.ads,\n\ts-osinte-hpux-dce.ads, s-taprop-hpux-dce.adb, s-taspri-hpux-dce.ads,\n\ts-osinte-linux.ads, s-osinte-dummy.ads, s-taprop-dummy.adb,\n\ts-taspri-dummy.ads, s-interr-dummy.adb, s-osinte-solaris.ads,\n\ts-osinte-mingw.ads, s-taprop-solaris.adb, s-taspri-solaris.ads,\n\ts-inmaop-vms.adb, s-interr-vms.adb, s-intman-vms.ads, s-osinte-vms.ads,\n\ts-osinte-vms.ads, s-taprop-vms.adb, s-taspri-vms.ads,\n\ts-taspri-mingw.ads, s-interr-vxworks.adb, s-inmaop-posix.adb,\n\ts-intman-vxworks.ads, s-osinte-vxworks.ads, s-osprim-vxworks.adb,\n\ts-taspri-vxworks.ads, s-taspri-posix.ads, a-caldel.adb, a-calend.adb,\n\ta-elchha.adb, a-dynpri.adb, a-except.adb, a-except.ads, a-interr.ads,\n\ta-textio.adb, a-tigeau.ads, atree.adb, s-taprob.adb, s-taprop.ads,\n\ts-tarest.adb, s-tarest.ads, s-tasini.adb, s-taskin.adb, s-taskin.ads,\n\ts-tasque.adb, s-tasren.adb, s-tasren.ads, s-tassta.adb, s-tassta.ads,\n\ts-tasuti.adb, s-tataat.adb, s-tataat.ads, s-tpoben.adb, s-tpoben.ads,\n\ts-tpobop.adb, s-tpobop.ads, s-tposen.adb, s-tposen.ads, s-valrea.adb,\n\ts-valuti.adb, a-intnam-darwin.ads, s-osinte-darwin.ads, s-solita.adb,\n\ta-ztinau.ads, s-osinte-linux-hppa.ads, a-except-2005.adb,\n\ta-except-2005.ads, a-rttiev.adb, s-osinte-vxworks6.ads, s-regexp.adb,\n\ts-tasloc.adb: Minor reformatting.\n\tUpdate comments.\n\tRemove \"used for\" sections from comments.\n\nFrom-SVN: r133546", "tree": {"sha": "f4283c76a38a1de33842f56020e3fffd6f796a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4283c76a38a1de33842f56020e3fffd6f796a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/comments", "author": null, "committer": null, "parents": [{"sha": "4e0ede3df752962d473249716152e00d779eec66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0ede3df752962d473249716152e00d779eec66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0ede3df752962d473249716152e00d779eec66"}], "stats": {"total": 2059, "additions": 687, "deletions": 1372}, "files": [{"sha": "ed52533d081a513addd1dce32fbb5ad32b8b33c8", "filename": "gcc/ada/a-caldel-vms.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-caldel-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-caldel-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel-vms.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,10 +35,7 @@\n --  This is the Alpha/VMS version\n \n with System.OS_Primitives;\n---  Used for Max_Sensible_Delay\n-\n with System.Soft_Links;\n---  Used for Timed_Delay\n \n package body Ada.Calendar.Delays is\n "}, {"sha": "3410b6135fe1b601acda1d05c1cfee454f4e21c1", "filename": "gcc/ada/a-caldel.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-caldel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-caldel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2006, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,17 +33,9 @@\n ------------------------------------------------------------------------------\n \n with System.OS_Primitives;\n---  Used for Delay_Modes\n---           Max_Sensible_Delay\n-\n with System.Soft_Links;\n---  Used for Timed_Delay\n-\n with System.Traces;\n---  Used for Send_Trace_Info\n-\n with System.Parameters;\n---  used for Runtime_Traces\n \n package body Ada.Calendar.Delays is\n "}, {"sha": "1fe977d68a492b11aa3535997ca1d39a0bb84ed4", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,6 @@\n with Ada.Unchecked_Conversion;\n \n with System.OS_Primitives;\n---  used for Clock\n \n package body Ada.Calendar is\n "}, {"sha": "5950cf82f9085af49d86e43091ded0e77487a956", "filename": "gcc/ada/a-dynpri.adb", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-dynpri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-dynpri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dynpri.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,21 +32,9 @@\n ------------------------------------------------------------------------------\n \n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Set_Priority\n---           Wakeup\n---           Self\n-\n with System.Tasking;\n---  used for Task_Id\n-\n with System.Parameters;\n---  used for Single_Lock\n-\n with System.Soft_Links;\n---  use for Abort_Defer\n---          Abort_Undefer\n \n with Ada.Unchecked_Conversion;\n "}, {"sha": "fc4f9621b172a95edd3d548957cac206e0adf67e", "filename": "gcc/ada/a-elchha.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,11 +38,7 @@ pragma Compiler_Unit;\n pragma Warnings (On);\n \n with System.Standard_Library; use System.Standard_Library;\n---  Used for Adafinal\n-\n with System.Soft_Links;\n---  Used for Task_Termination_Handler\n---           Task_Termination_NT\n \n procedure Ada.Exceptions.Last_Chance_Handler\n   (Except : Exception_Occurrence)"}, {"sha": "402a04cbe85000f291dcc37e037ebe3fc9a5d4d5", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,16 +31,14 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version is used for all Ada 2005 builds. It differs from a-except.ads\n---  only with respect to the addition of Wide_[Wide]Exception_Name functions.\n+--  This version of Ada.Exceptions fully supports both Ada 95 and Ada 2005.\n+--  It is used in all situations except for the build of the compiler and\n+--  other basic tools. For these latter builds, we use an Ada 95-only version.\n \n --  The reason for this splitting off of a separate version is that bootstrap\n --  compilers often will be used that do not support Ada 2005 features, and\n --  Ada.Exceptions is part of the compiler sources.\n \n---  The base version of this unit Ada.Exceptions omits the Wide version of\n---  Exception_Name and is used to build the compiler and other basic tools.\n-\n pragma Style_Checks (All_Checks);\n --  No subprogram ordering check, due to logical grouping\n "}, {"sha": "6dae91ff467a25c619c6f96799a0e429f0b2be4f", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -35,18 +35,14 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version is used for all Ada 2005 builds. It differs from a-except.ads\n---  only with respect to the addition of Wide_[Wide]Exception_Name functions.\n---  The additional entities are marked with pragma Ada_05, so this extended\n---  unit is also perfectly suitable for use in Ada 95 or Ada 83 mode.\n+--  This version of Ada.Exceptions fully supports both Ada 95 and Ada 2005.\n+--  It is used in all situations except for the build of the compiler and\n+--  other basic tools. For these latter builds, we use an Ada 95-only version.\n \n --  The reason for this splitting off of a separate version is that bootstrap\n --  compilers often will be used that do not support Ada 2005 features, and\n --  Ada.Exceptions is part of the compiler sources.\n \n---  The base version of this unit Ada.Exceptions omits the Wide version of\n---  Exception_Name and is used to build the compiler and other basic tools.\n-\n pragma Polling (Off);\n --  We must turn polling off for this unit, because otherwise we get\n --  elaboration circularities with ourself."}, {"sha": "a07bf294203d7e8d9cbade4ccbc7c02bcd4a3ccc", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "a97ccb44032222f2e95b9da3f3f6608ed92784c6", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "dd5635bb8594ca2c3e110d37279a6a8b83476be1", "filename": "gcc/ada/a-excpol-abort.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-excpol-abort.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-excpol-abort.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-excpol-abort.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,6 @@ pragma Warnings (Off);\n --  It is safe in the context of the run-time to violate the rules!\n \n with System.Soft_Links;\n---  used for Check_Abort_Status\n \n pragma Warnings (On);\n "}, {"sha": "8ccbd886a7d1c65f6473288169b8c7cac2b30305", "filename": "gcc/ada/a-interr.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-interr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-interr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-interr.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -36,7 +36,6 @@\n ------------------------------------------------------------------------------\n \n with System.Interrupts;\n---  used for Ada_Interrupt_ID\n \n package Ada.Interrupts is\n "}, {"sha": "cf01fc0a79646e88f3f2d2a3b506952b82046e23", "filename": "gcc/ada/a-intnam-aix.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-aix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,13 +51,12 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n    --  Beware that the mapping of names to signals may be many-to-one. There\n-   --  may be aliases. Also, for all signal names that are not supported on the\n-   --  current system the value of the corresponding constant will be zero.\n+   --  may be aliases. Also, for all signal names that are not supported on\n+   --  the current system the value of the corresponding constant will be zero.\n \n    SIGHUP : constant Interrupt_ID :=\n      System.OS_Interface.SIGHUP;      --  hangup"}, {"sha": "fbbb185835b21262640b4d0bdb4017938e03cb9e", "filename": "gcc/ada/a-intnam-darwin.ads", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-darwin.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,108 +45,107 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n    --  Beware that the mapping of names to signals may be many-to-one. There\n    --  may be aliases. Also, for all signal names that are not supported on the\n    --  current system the value of the corresponding constant will be zero.\n \n-   SIGHUP : constant Interrupt_ID :=\n+   SIGHUP    : constant Interrupt_ID :=\n      System.OS_Interface.SIGHUP;      --  hangup\n \n-   SIGINT : constant Interrupt_ID :=\n+   SIGINT    : constant Interrupt_ID :=\n      System.OS_Interface.SIGINT;      --  interrupt (rubout)\n \n-   SIGQUIT : constant Interrupt_ID :=\n+   SIGQUIT   : constant Interrupt_ID :=\n      System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n \n-   SIGILL : constant Interrupt_ID :=\n+   SIGILL    : constant Interrupt_ID :=\n      System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n \n-   SIGTRAP : constant Interrupt_ID :=\n+   SIGTRAP   : constant Interrupt_ID :=\n      System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n \n-   SIGIOT : constant Interrupt_ID :=\n+   SIGIOT    : constant Interrupt_ID :=\n      System.OS_Interface.SIGIOT;      --  IOT instruction\n \n-   SIGABRT : constant Interrupt_ID := --  used by abort,\n+   SIGABRT   : constant Interrupt_ID := --  used by abort,\n      System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n \n-   SIGEMT : constant Interrupt_ID :=\n+   SIGEMT    : constant Interrupt_ID :=\n      System.OS_Interface.SIGEMT;      --  EMT instruction\n \n-   SIGFPE : constant Interrupt_ID :=\n+   SIGFPE    : constant Interrupt_ID :=\n      System.OS_Interface.SIGFPE;      --  floating point exception\n \n-   SIGKILL : constant Interrupt_ID :=\n+   SIGKILL   : constant Interrupt_ID :=\n      System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n \n-   SIGBUS : constant Interrupt_ID :=\n+   SIGBUS    : constant Interrupt_ID :=\n      System.OS_Interface.SIGBUS;      --  bus error\n \n-   SIGSEGV : constant Interrupt_ID :=\n+   SIGSEGV   : constant Interrupt_ID :=\n      System.OS_Interface.SIGSEGV;     --  segmentation violation\n \n-   SIGSYS : constant Interrupt_ID :=\n+   SIGSYS    : constant Interrupt_ID :=\n      System.OS_Interface.SIGSYS;      --  bad argument to system call\n \n-   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+   SIGPIPE   : constant Interrupt_ID := --  write on a pipe with\n      System.OS_Interface.SIGPIPE;     --  no one to read it\n \n-   SIGALRM : constant Interrupt_ID :=\n+   SIGALRM   : constant Interrupt_ID :=\n      System.OS_Interface.SIGALRM;     --  alarm clock\n \n-   SIGTERM : constant Interrupt_ID :=\n+   SIGTERM   : constant Interrupt_ID :=\n      System.OS_Interface.SIGTERM;     --  software termination signal from kill\n \n-   SIGURG : constant Interrupt_ID :=\n+   SIGURG    : constant Interrupt_ID :=\n      System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n \n-   SIGSTOP : constant Interrupt_ID :=\n+   SIGSTOP   : constant Interrupt_ID :=\n      System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n \n-   SIGTSTP : constant Interrupt_ID :=\n+   SIGTSTP   : constant Interrupt_ID :=\n      System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n \n-   SIGCONT : constant Interrupt_ID :=\n+   SIGCONT   : constant Interrupt_ID :=\n      System.OS_Interface.SIGCONT;     --  stopped process has been continued\n \n-   SIGCHLD : constant Interrupt_ID :=\n+   SIGCHLD   : constant Interrupt_ID :=\n      System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n \n-   SIGTTIN : constant Interrupt_ID :=\n+   SIGTTIN   : constant Interrupt_ID :=\n      System.OS_Interface.SIGTTIN;     --  background tty read attempted\n \n-   SIGTTOU : constant Interrupt_ID :=\n+   SIGTTOU   : constant Interrupt_ID :=\n      System.OS_Interface.SIGTTOU;     --  background tty write attempted\n \n-   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+   SIGIO     : constant Interrupt_ID :=   --  input/output possible,\n      System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n \n-   SIGXCPU : constant Interrupt_ID :=\n+   SIGXCPU   : constant Interrupt_ID :=\n      System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n \n-   SIGXFSZ : constant Interrupt_ID :=\n+   SIGXFSZ   : constant Interrupt_ID :=\n      System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n \n    SIGVTALRM : constant Interrupt_ID :=\n      System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n \n-   SIGPROF : constant Interrupt_ID :=\n+   SIGPROF   : constant Interrupt_ID :=\n      System.OS_Interface.SIGPROF;     --  profiling timer expired\n \n-   SIGWINCH : constant Interrupt_ID :=\n+   SIGWINCH  : constant Interrupt_ID :=\n      System.OS_Interface.SIGWINCH;    --  window size change\n \n-   SIGINFO : constant Interrupt_ID :=\n+   SIGINFO   : constant Interrupt_ID :=\n      System.OS_Interface.SIGINFO;      -- information request\n \n-   SIGUSR1 : constant Interrupt_ID :=\n+   SIGUSR1   : constant Interrupt_ID :=\n      System.OS_Interface.SIGUSR1;     --  user defined signal 1\n \n-   SIGUSR2 : constant Interrupt_ID :=\n+   SIGUSR2   : constant Interrupt_ID :=\n      System.OS_Interface.SIGUSR2;     --  user defined signal 2\n \n end Ada.Interrupts.Names;"}, {"sha": "fdae2170510a176353a5424e8668765ccfd4fc9f", "filename": "gcc/ada/a-intnam-freebsd.ads", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-freebsd.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,10 +34,13 @@\n --  This is the FreeBSD THREADS version of this package\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n+   --  Beware that the mapping of names to signals may be many-to-one. There\n+   --  may be aliases. Also, for all signal names that are not supported on\n+   --  the current system the value of the corresponding constant will be zero.\n+\n    SIGHUP : constant Interrupt_ID :=\n      System.OS_Interface.SIGHUP;      --  hangup\n \n@@ -128,9 +131,4 @@ package Ada.Interrupts.Names is\n    SIGUSR2 : constant Interrupt_ID :=\n      System.OS_Interface.SIGUSR2;     --  user defined signal 2\n \n-   --  Beware that the mapping of names to signals may be\n-   --  many-to-one.  There may be aliases.  Also, for all\n-   --  signal names that are not supported on the current system\n-   --  the value of the corresponding constant will be zero.\n-\n end Ada.Interrupts.Names;"}, {"sha": "2f7b91963f8dfa5957ceba89f93509b16a4c9851", "filename": "gcc/ada/a-intnam-hpux.ads", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-hpux.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,8 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,14 +46,12 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n-   --  Beware that the mapping of names to signals may be\n-   --  many-to-one.  There may be aliases.  Also, for all\n-   --  signal names that are not supported on the current system\n-   --  the value of the corresponding constant will be zero.\n+   --  Beware that the mapping of names to signals may be many-to-one. There\n+   --  may be aliases. Also, for all signal names that are not supported on\n+   --  the current system the value of the corresponding constant will be zero.\n \n    SIGHUP : constant Interrupt_ID :=\n      System.OS_Interface.SIGHUP;      --  hangup"}, {"sha": "0e7c55919f83be6fa3a45ef3ed0fe163e5713128", "filename": "gcc/ada/a-intnam-irix.ads", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-irix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,8 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can redistribute it  and/or modify it  under --\n -- terms  of  the  GNU  Library General Public License  as published by the --\n@@ -53,14 +52,12 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n-   --  Beware that the mapping of names to signals may be\n-   --  many-to-one.  There may be aliases.  Also, for all\n-   --  signal names that are not supported on the current system\n-   --  the value of the corresponding constant will be zero.\n+   --  Beware that the mapping of names to signals may be many-to-one. There\n+   --  may be aliases. Also, for all signal names that are not supported on\n+   --  the current system the value of the corresponding constant will be zero.\n \n    SIGHUP : constant Interrupt_ID :=\n      System.OS_Interface.SIGHUP;      --  hangup"}, {"sha": "5425eb32ae3e91b719ff60516c5843ac537203d8", "filename": "gcc/ada/a-intnam-linux.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-linux.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,6 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n "}, {"sha": "0f4196261c7d15264a2434a300a72f97625ebce9", "filename": "gcc/ada/a-intnam-lynxos.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-lynxos.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,6 @@\n --  SIGINT: made available for Ada handler\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n "}, {"sha": "d7a2de73f3a3f240476e404bfb64459cd500b23e", "filename": "gcc/ada/a-intnam-mingw.ads", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-mingw.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,30 +37,29 @@\n --  by the local system.\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n \n    --  Beware that the mapping of names to signals may be many-to-one. There\n    --  may be aliases. Also, for all signal names that are not supported on the\n    --  current system the value of the corresponding constant will be zero.\n \n-   SIGINT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+   SIGINT  : constant Interrupt_ID :=  -- interrupt (rubout)\n+               System.OS_Interface.SIGINT;\n \n-   SIGILL : constant Interrupt_ID :=\n-     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+   SIGILL  : constant Interrupt_ID :=  -- illegal instruction (not reset)\n+               System.OS_Interface.SIGILL;\n \n-   SIGABRT : constant Interrupt_ID := --  used by abort,\n-     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+   SIGABRT : constant Interrupt_ID :=  -- used by abort (use SIGIOT in future)\n+               System.OS_Interface.SIGABRT;\n \n-   SIGFPE : constant Interrupt_ID :=\n-     System.OS_Interface.SIGFPE;      --  floating point exception\n+   SIGFPE  : constant Interrupt_ID :=  -- floating point exception\n+               System.OS_Interface.SIGFPE;\n \n-   SIGSEGV : constant Interrupt_ID :=\n-     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+   SIGSEGV : constant Interrupt_ID :=  -- segmentation violation\n+               System.OS_Interface.SIGSEGV;\n \n-   SIGTERM : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+   SIGTERM : constant Interrupt_ID :=  -- software termination signal from kill\n+               System.OS_Interface.SIGTERM;\n \n end Ada.Interrupts.Names;"}, {"sha": "f14f7624f2733f30c165f91476d1cf3738153b5f", "filename": "gcc/ada/a-intnam-solaris.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-solaris.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,7 +48,6 @@\n --  SIGINT: made available for Ada handlers\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n "}, {"sha": "ec7c9078f5d131495ac2f032deca3413d6fb0375", "filename": "gcc/ada/a-intnam-tru64.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-tru64.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,6 @@\n --  SIGINT: made available for Ada handler\n \n with System.OS_Interface;\n---  used for names of interrupts\n \n package Ada.Interrupts.Names is\n "}, {"sha": "8cfe0ba63aed634964654890cad00de9951d17e1", "filename": "gcc/ada/a-intnam-vms.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-intnam-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-vms.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,7 @@\n --  supported by the local system.\n \n with System.OS_Interface;\n+\n package Ada.Interrupts.Names is\n \n    package OS renames System.OS_Interface;"}, {"sha": "42d2d173d533e0e89f6ac3ffaf832ad9d54e726f", "filename": "gcc/ada/a-retide.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-retide.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-retide.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-retide.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,15 +32,9 @@\n ------------------------------------------------------------------------------\n \n with Ada.Exceptions;\n---  Used for Raise_Exception\n \n with System.Tasking;\n---  Used for Task_Id\n---           Initialize\n-\n with System.Task_Primitives.Operations;\n---  Used for Timed_Delay\n---           Self\n \n package body Ada.Real_Time.Delays is\n "}, {"sha": "7031dfbc7c3407d369005dd46f2bb61757507be0", "filename": "gcc/ada/a-rttiev.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-rttiev.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-rttiev.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rttiev.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2005-2006, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2005-2008, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,6 @@\n with System.Task_Primitives.Operations;\n with System.Tasking.Utilities;\n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n \n with Ada.Containers.Doubly_Linked_Lists;\n pragma Elaborate_All (Ada.Containers.Doubly_Linked_Lists);\n@@ -46,7 +45,6 @@ pragma Elaborate_All (Ada.Containers.Doubly_Linked_Lists);\n package body Ada.Real_Time.Timing_Events is\n \n    use System.Task_Primitives.Operations;\n-   --  for Write_Lock and Unlock\n \n    package SSL renames System.Soft_Links;\n "}, {"sha": "cf4d115cc1477f5d3ede48b2d0cb59f63defe23a", "filename": "gcc/ada/a-sytaco.adb", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-sytaco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-sytaco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,20 +31,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Tasking;\n---  Used for Detect_Blocking\n---           Self\n-\n with Ada.Exceptions;\n---  Used for Raise_Exception\n \n+with System.Tasking;\n with System.Task_Primitives.Operations;\n---  Used for Initialize\n---           Finalize\n---           Current_State\n---           Set_False\n---           Set_True\n---           Suspend_Until_True\n \n package body Ada.Synchronous_Task_Control is\n "}, {"sha": "db102f679b3f57be4ea0aae51cb77ae1aac1a2ad", "filename": "gcc/ada/a-sytaco.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-sytaco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-sytaco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -36,10 +36,8 @@\n ------------------------------------------------------------------------------\n \n with System.Task_Primitives;\n---  Used for Suspension_Object\n \n with Ada.Finalization;\n---  Used for Limited_Controlled\n \n package Ada.Synchronous_Task_Control is\n    pragma Preelaborate_05;"}, {"sha": "0140df956d4ae4024d828ca4f2a7790eca5560ec", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2007, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -222,39 +222,13 @@\n --  instantiated from within a local context.\n \n with System.Error_Reporting;\n---  Used for Shutdown;\n-\n with System.Storage_Elements;\n---  Used for Integer_Address\n-\n with System.Task_Primitives.Operations;\n---  Used for Write_Lock\n---           Unlock\n---           Lock/Unlock_RTS\n-\n with System.Tasking;\n---  Used for Access_Address\n---           Task_Id\n---           Direct_Index_Vector\n---           Direct_Index\n-\n with System.Tasking.Initialization;\n---  Used for Defer_Abort\n---           Undefer_Abort\n---           Initialize_Attributes_Link\n---           Finalize_Attributes_Link\n-\n with System.Tasking.Task_Attributes;\n---  Used for Access_Node\n---           Access_Dummy_Wrapper\n---           Deallocator\n---           Instance\n---           Node\n---           Access_Instance\n \n with Ada.Exceptions;\n---  Used for Raise_Exception\n-\n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n "}, {"sha": "e9431d1649932997d92128a228e5f9bb8a3d72b8", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,6 @@ pragma Warnings (Off);\n --  It is safe in the context of the run-time to violate the rules!\n \n with System.Tasking.Utilities;\n---  Used for Abort_Tasks\n \n pragma Warnings (On);\n "}, {"sha": "1a1e6492575283c0bc347d26293637c034403ccc", "filename": "gcc/ada/a-taster.adb", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-taster.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-taster.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taster.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,21 +32,9 @@\n ------------------------------------------------------------------------------\n \n with System.Tasking;\n---  used for Task_Id\n-\n with System.Task_Primitives.Operations;\n---  used for Self\n---           Write_Lock\n---           Unlock\n---           Lock_RTS\n---           Unlock_RTS\n-\n with System.Parameters;\n---  used for Single_Lock\n-\n with System.Soft_Links;\n---  use for Abort_Defer\n---          Abort_Undefer\n \n with Ada.Unchecked_Conversion;\n "}, {"sha": "050e71d500ce2726427d09f345103e97c72acedc", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -1037,7 +1037,7 @@ package body Ada.Text_IO is\n          Item := ASCII.NUL;\n \n       --  If we are before an upper half character just return it (this can\n-      --  happen if there are two calls to Look_Ahead in a row.\n+      --  happen if there are two calls to Look_Ahead in a row).\n \n       elsif File.Before_Upper_Half_Character then\n          End_Of_Line := False;\n@@ -2253,7 +2253,7 @@ begin\n    Standard_In.Is_Text_File       := True;\n    Standard_In.Access_Method      := 'T';\n    Standard_In.Self               := Standard_In;\n-   Standard_In.WC_Method         := Default_WCEM;\n+   Standard_In.WC_Method          := Default_WCEM;\n \n    Standard_Out.Stream            := stdout;\n    Standard_Out.Name              := Out_Name'Access;"}, {"sha": "16299b03b7fcb875435b699add4c4340ac95eb03", "filename": "gcc/ada/a-tigeau.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-tigeau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-tigeau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tigeau.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,7 +178,7 @@ private package Ada.Text_IO.Generic_Aux is\n    procedure String_Skip (Str : String; Ptr : out Integer);\n    --  Used in the Get from string procedures to skip leading blanks in the\n    --  string. Ptr is set to the index of the first non-blank. If the string\n-   --  is all blanks, then the excption End_Error is raised, Note that blank\n+   --  is all blanks, then the exception End_Error is raised, Note that blank\n    --  is defined as a space or horizontal tab (RM A.10.6(5)).\n \n    procedure Ungetc (ch : Integer; File : File_Type);"}, {"sha": "71454eb3b908aec8dcf7e3f0577418cf5fd63b9d", "filename": "gcc/ada/a-ztinau.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-ztinau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fa-ztinau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztinau.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,10 +32,10 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines for Ada.Wide_Wide_Text_IO.Integer_IO\n---  that are shared among separate instantiations of this package. The\n---  routines in this package are identical semantically to those in Integer_IO\n---  itself, except that the generic parameter Num has been replaced by Integer\n---  or Long_Long_Integer, and the default parameters have been removed because\n+--  that are shared among separate instantiations of this package. The routines\n+--  in this package are identical semantically to those in Integer_IO itself,\n+--  except that the generic parameter Num has been replaced by Integer or\n+--  Long_Long_Integer, and the default parameters have been removed because\n --  they are supplied explicitly by the calls from within the generic template.\n \n private package Ada.Wide_Wide_Text_IO.Integer_Aux is"}, {"sha": "2f504ba7a9e7904f5db24ac1be1da3296e81e7ed", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2738,12 +2738,13 @@ package body Atree is\n \n       if Field2 (Cur_Node) not in Node_Range then\n          return Traverse_Field (Cur_Node, Field2 (Cur_Node), 2);\n-      elsif Is_Syntactic_Field (Nkind (Cur_Node), 2) and then\n-        Field2 (Cur_Node) /= Empty_List_Or_Node\n+\n+      elsif Is_Syntactic_Field (Nkind (Cur_Node), 2)\n+        and then Field2 (Cur_Node) /= Empty_List_Or_Node\n       then\n-         --  Here is the tail recursion step, we reset Cur_Node and jump\n-         --  back to the start of the procedure, which has the same\n-         --  semantic effect as a call.\n+         --  Here is the tail recursion step, we reset Cur_Node and jump back\n+         --  to the start of the procedure, which has the same semantic effect\n+         --  as a call.\n \n          Cur_Node := Node_Id (Field2 (Cur_Node));\n          goto Tail_Recurse;"}, {"sha": "2ab69089426a755b3de65313959cc06431aaf3dc", "filename": "gcc/ada/s-gloloc.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-gloloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-gloloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gloloc.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,6 @@\n ------------------------------------------------------------------------------\n \n with System.Soft_Links;\n---  used for Lock_Task, Unlock_Task\n \n package body System.Global_Locks is\n "}, {"sha": "3a10e73bc51a5724ba86ab8189fa7dbb6a9c39f8", "filename": "gcc/ada/s-inmaop-posix.adb", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-inmaop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-inmaop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-posix.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,13 +2,12 @@\n --                                                                          --\n --                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n --                                                                          --\n---          S Y S T E M . I N T E R R U P T _ M A N A G E M E N T .         --\n---                            O P E R A T I O N S                           --\n+--                  SYSTEM.INTERRUPT_MANAGEMENT.OPERATIONS                  --\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2007, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,20 +32,14 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a POSIX-like version of this package.\n---  Note: this file can only be used for POSIX compliant systems.\n+--  This is a POSIX-like version of this package\n+\n+--  Note: this file can only be used for POSIX compliant systems\n \n with Interfaces.C;\n---  used for int\n---           size_t\n---           unsigned\n \n with System.OS_Interface;\n---  used for various type, constant, and operations\n-\n with System.Storage_Elements;\n---  used for To_Address\n---           Integer_Address\n \n package body System.Interrupt_Management.Operations is\n "}, {"sha": "34eaf09547dc0f231e96e893350d6ebad5c37646", "filename": "gcc/ada/s-inmaop-vms.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-inmaop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-inmaop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-vms.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,19 +34,11 @@\n --  This is a OpenVMS/Alpha version of this package\n \n with System.OS_Interface;\n---  used for various type, constant, and operations\n-\n with System.Aux_DEC;\n---  used for Short_Address\n-\n with System.Parameters;\n-\n with System.Tasking;\n-\n with System.Tasking.Initialization;\n-\n with System.Task_Primitives.Operations;\n-\n with System.Task_Primitives.Operations.DEC;\n \n with Ada.Unchecked_Conversion;"}, {"sha": "075c8b5755ced112fd8b6547419721493c83c7e6", "filename": "gcc/ada/s-interr-dummy.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-dummy.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2007, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,6 @@\n \n --  This version is for systems that do not support interrupts (or signals)\n \n-with Ada.Exceptions;\n-\n package body System.Interrupts is\n \n    pragma Warnings (Off); -- kill warnings on unreferenced formals\n@@ -293,9 +291,7 @@ package body System.Interrupts is\n \n    procedure Unimplemented is\n    begin\n-      Ada.Exceptions.Raise_Exception\n-        (Program_Error'Identity, \"interrupts/signals not implemented\");\n-      raise Program_Error;\n+      raise Program_Error with \"interrupts/signals not implemented\";\n    end Unimplemented;\n \n end System.Interrupts;"}, {"sha": "a63b35aaaa3f974e89abd1b4a8835148bf0d1b35", "filename": "gcc/ada/s-interr-sigaction.adb", "status": "modified", "additions": 21, "deletions": 47, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-sigaction.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,47 +34,22 @@\n --  This is the IRIX & NT version of this package\n \n with Ada.Task_Identification;\n---  used for Task_Id\n+with Ada.Unchecked_Conversion;\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n+with Interfaces.C;\n \n with System.Storage_Elements;\n---  used for To_Address\n---           To_Integer\n-\n with System.Task_Primitives.Operations;\n---  used for Self\n---           Sleep\n---           Wakeup\n---           Write_Lock\n---           Unlock\n-\n with System.Tasking.Utilities;\n---  used for Make_Independent\n-\n with System.Tasking.Rendezvous;\n---  used for Call_Simple\n-\n with System.Tasking.Initialization;\n---  used for Defer_Abort\n---           Undefer_Abort\n-\n with System.Interrupt_Management;\n-\n with System.Parameters;\n---  used for Single_Lock\n-\n-with Interfaces.C;\n---  used for int\n-\n-with Ada.Unchecked_Conversion;\n \n package body System.Interrupts is\n \n    use Parameters;\n    use Tasking;\n-   use Ada.Exceptions;\n    use System.OS_Interface;\n    use Interfaces.C;\n \n@@ -183,8 +158,8 @@ package body System.Interrupts is\n    function Is_Entry_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Descriptors (Interrupt).T /= Null_Task;\n@@ -197,11 +172,11 @@ package body System.Interrupts is\n    function Is_Handler_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n+      else\n+         return Descriptors (Interrupt).Kind /= Unknown;\n       end if;\n-\n-      return Descriptors (Interrupt).Kind /= Unknown;\n    end Is_Handler_Attached;\n \n    ----------------\n@@ -370,9 +345,9 @@ package body System.Interrupts is\n \n              or else not Is_Registered (New_Handler))\n       then\n-         Raise_Exception (Program_Error'Identity,\n+         raise Program_Error with\n            \"Trying to overwrite a static Interrupt Handler with a \" &\n-           \"dynamic Handler\");\n+           \"dynamic Handler\";\n       end if;\n \n       if Handlers (Interrupt) = null then\n@@ -420,12 +395,12 @@ package body System.Interrupts is\n          --  In case we have an Interrupt Entry already installed.\n          --  raise a program error. (propagate it to the caller).\n \n-         Raise_Exception (Program_Error'Identity,\n-           \"An interrupt is already installed\");\n-      end if;\n+         raise Program_Error with \"An interrupt is already installed\";\n \n-      Old_Handler := Current_Handler (Interrupt);\n-      Attach_Handler (New_Handler, Interrupt, Static);\n+      else\n+         Old_Handler := Current_Handler (Interrupt);\n+         Attach_Handler (New_Handler, Interrupt, Static);\n+      end if;\n    end Exchange_Handler;\n \n    --------------------\n@@ -442,13 +417,12 @@ package body System.Interrupts is\n       end if;\n \n       if Descriptors (Interrupt).Kind = Task_Entry then\n-         Raise_Exception (Program_Error'Identity,\n-           \"Trying to detach an Interrupt Entry\");\n+         raise Program_Error with \"Trying to detach an Interrupt Entry\";\n       end if;\n \n       if not Static and then Descriptors (Interrupt).Static then\n-         Raise_Exception (Program_Error'Identity,\n-           \"Trying to detach a static Interrupt Handler\");\n+         raise Program_Error with\n+           \"Trying to detach a static Interrupt Handler\";\n       end if;\n \n       Descriptors (Interrupt) :=\n@@ -548,8 +522,8 @@ package body System.Interrupts is\n       end if;\n \n       if Descriptors (Interrupt).Kind /= Unknown then\n-         Raise_Exception (Program_Error'Identity,\n-           \"A binding for this interrupt is already present\");\n+         raise Program_Error with\n+           \"A binding for this interrupt is already present\";\n       end if;\n \n       if Handlers (Interrupt) = null then"}, {"sha": "3a7124025c26feab0b0f3f180daaa0aae3187e25", "filename": "gcc/ada/s-interr-vms.adb", "status": "modified", "additions": 49, "deletions": 96, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vms.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,77 +49,29 @@\n --  rendezvous.\n \n with Ada.Task_Identification;\n---  used for Task_Id type\n-\n-with Ada.Exceptions;\n---  used for Raise_Exception\n+with Ada.Unchecked_Conversion;\n \n with System.Task_Primitives;\n---  used for RTS_Lock\n---           Self\n-\n with System.Interrupt_Management;\n---  used for Reserve\n---           Interrupt_ID\n---           Interrupt_Mask\n---           Abort_Task_Interrupt\n \n with System.Interrupt_Management.Operations;\n---  used for Thread_Block_Interrupt\n---           Thread_Unblock_Interrupt\n---           Install_Default_Action\n---           Install_Ignore_Action\n---           Copy_Interrupt_Mask\n---           Set_Interrupt_Mask\n---           Empty_Interrupt_Mask\n---           Fill_Interrupt_Mask\n---           Add_To_Interrupt_Mask\n---           Delete_From_Interrupt_Mask\n---           Interrupt_Wait\n---           Interrupt_Self_Process\n---           Get_Interrupt_Mask\n---           Set_Interrupt_Mask\n---           IS_Member\n---           Environment_Mask\n pragma Elaborate_All (System.Interrupt_Management.Operations);\n \n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Abort\n---           Wakeup_Task\n---           Sleep\n---           Initialize_Lock\n-\n with System.Task_Primitives.Interrupt_Operations;\n---  used for Set_Interrupt_ID\n-\n with System.Storage_Elements;\n---  used for To_Address\n---           To_Integer\n---           Integer_Address\n-\n with System.Tasking.Utilities;\n---  used for Make_Independent\n \n with System.Tasking.Rendezvous;\n---  used for Call_Simple\n pragma Elaborate_All (System.Tasking.Rendezvous);\n \n with System.Tasking.Initialization;\n---  used for Defer_Abort\n---           Undefer_Abort\n-\n with System.Parameters;\n---  used for Single_Lock\n-\n-with Ada.Unchecked_Conversion;\n \n package body System.Interrupts is\n \n    use Tasking;\n    use System.Parameters;\n-   use Ada.Exceptions;\n \n    package POP renames System.Task_Primitives.Operations;\n    package PIO renames System.Task_Primitives.Interrupt_Operations;\n@@ -345,8 +297,8 @@ package body System.Interrupts is\n    function Is_Entry_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return User_Entry (Interrupt).T /= Null_Task;\n@@ -359,8 +311,8 @@ package body System.Interrupts is\n    function Is_Handler_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return User_Handler (Interrupt).H /= null;\n@@ -373,8 +325,8 @@ package body System.Interrupts is\n    function Is_Blocked (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Blocked (Interrupt);\n@@ -387,8 +339,8 @@ package body System.Interrupts is\n    function Is_Ignored (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Ignored (Interrupt);\n@@ -403,8 +355,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       --  ??? Since Parameterless_Handler is not Atomic, the current\n@@ -432,8 +384,8 @@ package body System.Interrupts is\n       Static      : Boolean := False) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Attach_Handler (New_Handler, Interrupt, Static);\n@@ -460,8 +412,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Exchange_Handler\n@@ -486,8 +438,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Detach_Handler (Interrupt, Static);\n@@ -500,8 +452,8 @@ package body System.Interrupts is\n    function Reference (Interrupt : Interrupt_ID) return System.Address is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Storage_Elements.To_Address\n@@ -526,8 +478,8 @@ package body System.Interrupts is\n \n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Bind_Interrupt_To_Entry (T, E, Interrupt);\n@@ -550,8 +502,8 @@ package body System.Interrupts is\n    procedure Block_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Block_Interrupt (Interrupt);\n@@ -564,8 +516,8 @@ package body System.Interrupts is\n    procedure Unblock_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Unblock_Interrupt (Interrupt);\n@@ -579,8 +531,8 @@ package body System.Interrupts is\n      (Interrupt : Interrupt_ID) return System.Tasking.Task_Id is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Last_Unblocker (Interrupt);\n@@ -593,8 +545,8 @@ package body System.Interrupts is\n    procedure Ignore_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Ignore_Interrupt (Interrupt);\n@@ -607,8 +559,8 @@ package body System.Interrupts is\n    procedure Unignore_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Unignore_Interrupt (Interrupt);\n@@ -648,21 +600,21 @@ package body System.Interrupts is\n       is\n       begin\n          if User_Entry (Interrupt).T /= Null_Task then\n+\n             --  In case we have an Interrupt Entry already installed.\n             --  raise a program error. (propagate it to the caller).\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"An interrupt is already installed\");\n+            raise Program_Error with \"An interrupt is already installed\";\n          end if;\n \n-         --  Note : A null handler with Static = True will\n-         --  pass the following check. That is the case when we want to\n-         --  Detach a handler regardless of the Static status\n-         --  of the current_Handler.\n-         --  We don't check anything if Restoration is True, since we\n-         --  may be detaching a static handler to restore a dynamic one.\n+         --  Note: A null handler with Static=True will pass the following\n+         --  check. That is the case when we want to Detach a handler\n+         --  regardless of the Static status of the current_Handler. We don't\n+         --  check anything if Restoration is True, since we may be detaching\n+         --  a static handler to restore a dynamic one.\n \n          if not Restoration and then not Static\n+\n             --  Tries to overwrite a static Interrupt Handler with a\n             --  dynamic Handler\n \n@@ -673,9 +625,9 @@ package body System.Interrupts is\n \n                         or else not Is_Registered (New_Handler))\n          then\n-            Raise_Exception (Program_Error'Identity,\n+            raise Program_Error with\n               \"Trying to overwrite a static Interrupt Handler with a \" &\n-              \"dynamic Handler\");\n+              \"dynamic Handler\";\n          end if;\n \n          --  The interrupt should no longer be ingnored if it was ever ignored\n@@ -722,11 +674,12 @@ package body System.Interrupts is\n       is\n       begin\n          if User_Entry (Interrupt).T /= Null_Task then\n+\n             --  In case we have an Interrupt Entry installed.\n             --  raise a program error. (propagate it to the caller).\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"An interrupt entry is already installed\");\n+            raise Program_Error with\n+              \"An interrupt entry is already installed\";\n          end if;\n \n          --  Note : Static = True will pass the following check. That is the\n@@ -737,8 +690,8 @@ package body System.Interrupts is\n             --  Tries to detach a static Interrupt Handler.\n             --  raise a program error.\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"Trying to detach a static Interrupt Handler\");\n+            raise Program_Error with\n+              \"Trying to detach a static Interrupt Handler\";\n          end if;\n \n          --  The interrupt should no longer be ignored if\n@@ -849,8 +802,8 @@ package body System.Interrupts is\n                if User_Handler (Interrupt).H /= null\n                  or else User_Entry (Interrupt).T /= Null_Task\n                then\n-                  Raise_Exception (Program_Error'Identity,\n-                    \"A binding for this interrupt is already present\");\n+                  raise Program_Error with\n+                    \"A binding for this interrupt is already present\";\n                end if;\n \n                --  The interrupt should no longer be ingnored if"}, {"sha": "ec14f11c89911b11c4458f288fa3e01a5d26d6be", "filename": "gcc/ada/s-interr-vxworks.adb", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vxworks.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,54 +56,31 @@\n --  any time.\n \n --  Within this package, the lock L is used to protect the various status\n---  tables. If there is a Server_Task associated with a signal or interrupt,\n---  we use the per-task lock of the Server_Task instead so that we protect the\n---  status between Interrupt_Manager and Server_Task. Protection among\n---  service requests are ensured via user calls to the Interrupt_Manager\n---  entries.\n+--  tables. If there is a Server_Task associated with a signal or interrupt, we\n+--  use the per-task lock of the Server_Task instead so that we protect the\n+--  status between Interrupt_Manager and Server_Task. Protection among service\n+--  requests are ensured via user calls to the Interrupt_Manager entries.\n \n --  This is the VxWorks version of this package, supporting vectored hardware\n --  interrupts.\n \n with Ada.Unchecked_Conversion;\n-\n-with System.OS_Interface; use System.OS_Interface;\n-\n-with Interfaces.VxWorks;\n-\n with Ada.Task_Identification;\n---  used for Task_Id type\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n+with Interfaces.VxWorks;\n \n+with System.OS_Interface; use System.OS_Interface;\n with System.Interrupt_Management;\n---  used for Reserve\n-\n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Abort\n---           Wakeup_Task\n---           Sleep\n---           Initialize_Lock\n-\n with System.Storage_Elements;\n---  used for To_Address\n---           To_Integer\n---           Integer_Address\n-\n with System.Tasking.Utilities;\n---  used for Make_Independent\n \n with System.Tasking.Rendezvous;\n---  used for Call_Simple\n pragma Elaborate_All (System.Tasking.Rendezvous);\n \n package body System.Interrupts is\n \n    use Tasking;\n-   use Ada.Exceptions;\n \n    package POP renames System.Task_Primitives.Operations;\n \n@@ -310,9 +287,8 @@ package body System.Interrupts is\n    procedure Check_Reserved_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception\n-           (Program_Error'Identity,\n-            \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       else\n          return;\n       end if;\n@@ -744,9 +720,7 @@ package body System.Interrupts is\n \n    procedure Unimplemented (Feature : String) is\n    begin\n-      Raise_Exception\n-        (Program_Error'Identity,\n-         Feature & \" not implemented on VxWorks\");\n+      raise Program_Error with Feature & \" not implemented on VxWorks\";\n    end Unimplemented;\n \n    -----------------------\n@@ -823,8 +797,8 @@ package body System.Interrupts is\n             --  If an interrupt entry is installed raise\n             --  Program_Error. (propagate it to the caller).\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"An interrupt entry is already installed\");\n+            raise Program_Error with\n+              \"An interrupt entry is already installed\";\n          end if;\n \n          --  Note : Static = True will pass the following check. This is the\n@@ -836,8 +810,8 @@ package body System.Interrupts is\n             --  Trying to detach a static Interrupt Handler. raise\n             --  Program_Error.\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"Trying to detach a static Interrupt Handler\");\n+            raise Program_Error with\n+              \"Trying to detach a static Interrupt Handler\";\n          end if;\n \n          Old_Handler := User_Handler (Interrupt).H;\n@@ -869,9 +843,7 @@ package body System.Interrupts is\n             --  If an interrupt entry is already installed, raise\n             --  Program_Error. (propagate it to the caller).\n \n-            Raise_Exception\n-              (Program_Error'Identity,\n-               \"An interrupt is already installed\");\n+            raise Program_Error with \"An interrupt is already installed\";\n          end if;\n \n          --  Note : A null handler with Static = True will\n@@ -892,10 +864,9 @@ package body System.Interrupts is\n \n            or else not Is_Registered (New_Handler))\n          then\n-            Raise_Exception\n-              (Program_Error'Identity,\n+            raise Program_Error with\n                \"Trying to overwrite a static Interrupt Handler with a \" &\n-               \"dynamic Handler\");\n+               \"dynamic Handler\";\n          end if;\n \n          --  Save the old handler\n@@ -1003,9 +974,8 @@ package body System.Interrupts is\n                   if User_Handler (Interrupt).H /= null\n                     or else User_Entry (Interrupt).T /= Null_Task\n                   then\n-                     Raise_Exception\n-                       (Program_Error'Identity,\n-                        \"A binding for this interrupt is already present\");\n+                     raise Program_Error with\n+                       \"A binding for this interrupt is already present\";\n                   end if;\n \n                   User_Entry (Interrupt) := Entry_Assoc'(T => T, E => E);"}, {"sha": "7b4175eab597499823912ef8d5b0ac131ee6c6f7", "filename": "gcc/ada/s-interr.adb", "status": "modified", "additions": 41, "deletions": 89, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,78 +55,30 @@\n --  one Server_Task per interrupt.\n \n with Ada.Task_Identification;\n---  used for Task_Id type\n-\n-with Ada.Exceptions;\n---  used for Raise_Exception\n \n with System.Task_Primitives;\n---  used for RTS_Lock\n---           Self\n-\n with System.Interrupt_Management;\n---  used for Reserve\n---           Interrupt_ID\n---           Interrupt_Mask\n---           Abort_Task_Interrupt\n \n with System.Interrupt_Management.Operations;\n---  used for Thread_Block_Interrupt\n---           Thread_Unblock_Interrupt\n---           Install_Default_Action\n---           Install_Ignore_Action\n---           Copy_Interrupt_Mask\n---           Set_Interrupt_Mask\n---           Empty_Interrupt_Mask\n---           Fill_Interrupt_Mask\n---           Add_To_Interrupt_Mask\n---           Delete_From_Interrupt_Mask\n---           Interrupt_Wait\n---           Interrupt_Self_Process\n---           Get_Interrupt_Mask\n---           Set_Interrupt_Mask\n---           IS_Member\n---           Environment_Mask\n---           All_Tasks_Mask\n pragma Elaborate_All (System.Interrupt_Management.Operations);\n \n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Abort\n---           Wakeup_Task\n---           Sleep\n---           Initialize_Lock\n-\n with System.Task_Primitives.Interrupt_Operations;\n---  used for Set_Interrupt_ID\n-\n with System.Storage_Elements;\n---  used for To_Address\n---           To_Integer\n---           Integer_Address\n-\n with System.Tasking.Utilities;\n---  used for Make_Independent\n \n with System.Tasking.Rendezvous;\n---  used for Call_Simple\n pragma Elaborate_All (System.Tasking.Rendezvous);\n \n with System.Tasking.Initialization;\n---  used for Defer_Abort\n---           Undefer_Abort\n-\n with System.Parameters;\n---  used for Single_Lock\n \n with Ada.Unchecked_Conversion;\n \n package body System.Interrupts is\n \n    use Parameters;\n    use Tasking;\n-   use Ada.Exceptions;\n \n    package POP renames System.Task_Primitives.Operations;\n    package PIO renames System.Task_Primitives.Interrupt_Operations;\n@@ -285,8 +237,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Attach_Handler (New_Handler, Interrupt, Static);\n@@ -310,8 +262,8 @@ package body System.Interrupts is\n \n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Bind_Interrupt_To_Entry (T, E, Interrupt);\n@@ -324,8 +276,8 @@ package body System.Interrupts is\n    procedure Block_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Block_Interrupt (Interrupt);\n@@ -340,8 +292,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       --  ??? Since Parameterless_Handler is not Atomic, the current\n@@ -368,8 +320,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Detach_Handler (Interrupt, Static);\n@@ -404,8 +356,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Exchange_Handler\n@@ -464,8 +416,8 @@ package body System.Interrupts is\n    procedure Ignore_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Ignore_Interrupt (Interrupt);\n@@ -506,8 +458,8 @@ package body System.Interrupts is\n    function Is_Blocked (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Blocked (Interrupt);\n@@ -520,8 +472,8 @@ package body System.Interrupts is\n    function Is_Entry_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return User_Entry (Interrupt).T /= Null_Task;\n@@ -534,8 +486,8 @@ package body System.Interrupts is\n    function Is_Handler_Attached (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return User_Handler (Interrupt).H /= null;\n@@ -548,8 +500,8 @@ package body System.Interrupts is\n    function Is_Ignored (Interrupt : Interrupt_ID) return Boolean is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Ignored (Interrupt);\n@@ -608,8 +560,8 @@ package body System.Interrupts is\n    function Reference (Interrupt : Interrupt_ID) return System.Address is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Storage_Elements.To_Address\n@@ -656,8 +608,8 @@ package body System.Interrupts is\n    procedure Unblock_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Unblock_Interrupt (Interrupt);\n@@ -672,8 +624,8 @@ package body System.Interrupts is\n    is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       return Last_Unblocker (Interrupt);\n@@ -686,8 +638,8 @@ package body System.Interrupts is\n    procedure Unignore_Interrupt (Interrupt : Interrupt_ID) is\n    begin\n       if Is_Reserved (Interrupt) then\n-         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n-           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+         raise Program_Error with\n+           \"Interrupt\" & Interrupt_ID'Image (Interrupt) & \" is reserved\";\n       end if;\n \n       Interrupt_Manager.Unignore_Interrupt (Interrupt);\n@@ -825,8 +777,8 @@ package body System.Interrupts is\n             --  In case we have an Interrupt Entry installed.\n             --  raise a program error. (propagate it to the caller).\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"An interrupt entry is already installed\");\n+            raise Program_Error with\n+              \"An interrupt entry is already installed\";\n          end if;\n \n          --  Note : Static = True will pass the following check. That is the\n@@ -838,8 +790,8 @@ package body System.Interrupts is\n             --  Tries to detach a static Interrupt Handler.\n             --  raise a program error.\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"Trying to detach a static Interrupt Handler\");\n+            raise Program_Error with\n+              \"Trying to detach a static Interrupt Handler\";\n          end if;\n \n          --  The interrupt should no longer be ignored if\n@@ -876,8 +828,8 @@ package body System.Interrupts is\n             --  In case we have an Interrupt Entry already installed.\n             --  raise a program error. (propagate it to the caller).\n \n-            Raise_Exception (Program_Error'Identity,\n-              \"An interrupt is already installed\");\n+            raise Program_Error with\n+              \"An interrupt is already installed\";\n          end if;\n \n          --  Note : A null handler with Static = True will pass the\n@@ -899,9 +851,9 @@ package body System.Interrupts is\n \n                         or else not Is_Registered (New_Handler))\n          then\n-            Raise_Exception (Program_Error'Identity,\n+            raise Program_Error with\n               \"Trying to overwrite a static Interrupt Handler with a \" &\n-              \"dynamic Handler\");\n+              \"dynamic Handler\";\n          end if;\n \n          --  The interrupt should no longer be ingnored if\n@@ -1062,8 +1014,8 @@ package body System.Interrupts is\n                   if User_Handler (Interrupt).H /= null\n                     or else User_Entry (Interrupt).T /= Null_Task\n                   then\n-                     Raise_Exception (Program_Error'Identity,\n-                       \"A binding for this interrupt is already present\");\n+                     raise Program_Error with\n+                       \"A binding for this interrupt is already present\";\n                   end if;\n \n                   --  The interrupt should no longer be ingnored if"}, {"sha": "1eecfdb9af9a258bb165473e6fbc746771c407fb", "filename": "gcc/ada/s-interr.ads", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-interr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,24 +35,19 @@\n --  Any changes to this interface may require corresponding compiler changes.\n \n --  This package encapsulates the implementation of interrupt or signal\n---  handlers.  It is logically an extension of the body of Ada.Interrupts.\n---  It is made a child of System to allow visibility of various\n---  runtime system internal data and operations.\n+--  handlers. It is logically an extension of the body of Ada.Interrupts. It\n+--  is made a child of System to allow visibility of various runtime system\n+--  internal data and operations.\n \n --  See System.Interrupt_Management for core interrupt/signal interfaces\n \n---  These two packages are separated in order to allow\n---  System.Interrupt_Management to be used without requiring the whole\n---  tasking implementation to be linked and elaborated.\n+--  These two packages are separated to allow System.Interrupt_Management to be\n+--  used without requiring the whole tasking implementation to be linked and\n+--  elaborated.\n \n with System.Tasking;\n---  used for Task_Id\n-\n with System.Tasking.Protected_Objects.Entries;\n---  used for Protection_Entries\n-\n with System.OS_Interface;\n---  used for Max_Interrupt\n \n package System.Interrupts is\n \n@@ -73,11 +68,9 @@ package System.Interrupts is\n \n    type Interrupt_ID is range 0 .. System.OS_Interface.Max_Interrupt;\n \n-   --  The following renaming is introduced so that the type is accessible\n-   --  through rtsfind, otherwise the name clashes with its homonym in\n-   --  ada.interrupts.\n-\n    subtype System_Interrupt_Id is Interrupt_ID;\n+   --  This synonym is introduced so that the type is accessible through\n+   --  rtsfind, otherwise the name clashes with its homonym in Ada.Interrupts.\n \n    type Parameterless_Handler is access protected procedure;\n \n@@ -97,10 +90,10 @@ package System.Interrupts is\n    function Current_Handler\n      (Interrupt : Interrupt_ID) return Parameterless_Handler;\n \n-   --  Calling the following procedures with New_Handler = null\n-   --  and Static = true means that we want to modify the current handler\n-   --  regardless of the previous handler's binding status.\n-   --  (i.e. we do not care whether it is a dynamic or static handler)\n+   --  Calling the following procedures with New_Handler = null and Static =\n+   --  true means that we want to modify the current handler regardless of the\n+   --  previous handler's binding status. (i.e. we do not care whether it is a\n+   --  dynamic or static handler)\n \n    procedure Attach_Handler\n      (New_Handler : Parameterless_Handler;\n@@ -150,8 +143,8 @@ package System.Interrupts is\n    function Unblocked_By\n      (Interrupt : Interrupt_ID) return System.Tasking.Task_Id;\n    --  It returns the ID of the last Task which Unblocked this Interrupt.\n-   --  It returns Null_Task if no tasks have ever requested the\n-   --  Unblocking operation or the Interrupt is currently Blocked.\n+   --  It returns Null_Task if no tasks have ever requested the Unblocking\n+   --  operation or the Interrupt is currently Blocked.\n \n    function Is_Blocked (Interrupt : Interrupt_ID) return Boolean;\n    --  Comment needed ???\n@@ -169,9 +162,9 @@ package System.Interrupts is\n    --  other low-level interface that changes the signal action or signal mask\n    --  needs a careful thought.\n \n-   --  One may acheive the effect of system calls first making RTS blocked\n-   --  (by calling Block_Interrupt) for the signal under consideration.\n-   --  This will make all the tasks in RTS blocked for the Interrupt.\n+   --  One may acheive the effect of system calls first making RTS blocked (by\n+   --  calling Block_Interrupt) for the signal under consideration. This will\n+   --  make all the tasks in RTS blocked for the Interrupt.\n \n    ----------------------\n    -- Protection Types --"}, {"sha": "ac06d118d54134c3348d5c8fdf36f9d3037111db", "filename": "gcc/ada/s-intman-vms.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vms.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,8 +48,6 @@\n --  implemented as visible arrays rather than functions.)\n \n with System.OS_Interface;\n---  used for Signal\n---           sigset_t\n \n package System.Interrupt_Management is\n    pragma Preelaborate;"}, {"sha": "538c4e5a0e1b23861ade54016e128e883716bd4d", "filename": "gcc/ada/s-intman-vxworks.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,10 +48,8 @@\n --  sets are implemeneted using visible arrays rather than functions.\n \n with System.OS_Interface;\n---  used for sigset_t\n \n with Interfaces.C;\n---  used for int\n \n package System.Interrupt_Management is\n    pragma Preelaborate;"}, {"sha": "ae68d27a334dd2a18bc9795dad34918497ba5fe3", "filename": "gcc/ada/s-intman.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-intman.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,10 +46,8 @@\n --  rather than functions.\n \n with System.OS_Interface;\n---  used for sigset_t\n \n with Interfaces.C;\n---  used for int\n \n package System.Interrupt_Management is\n    pragma Preelaborate;"}, {"sha": "65db80a49deea01629000a5c094888c985610ad8", "filename": "gcc/ada/s-osinte-aix.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,14 +35,15 @@\n --  This is a AIX (Native THREADS) version of this package\n \n --  This package encapsulates all direct interfaces to OS services that are\n---  needed by children of System.\n+--  needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "da97aa0323cd3a7007f02271f794b8d9ed0fdfc8", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,12 +35,13 @@\n --  This is Darwin pthreads version of this package\n \n --  This package includes all direct interfaces to OS services that are needed\n---  by children of System.\n+--  by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Elaborate_Body. It is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "f459a64fdc65db533488abec1aa7bec157bd7320", "filename": "gcc/ada/s-osinte-dummy.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-dummy.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2005, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8794e995bd8cc9f49075393463e9818a901a5441", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,14 +36,15 @@\n --  This is the FreeBSD PTHREADS version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "687f9ecf6ade6e52a3483882058c7f1e824e79df", "filename": "gcc/ada/s-osinte-hpux-dce.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux-dce.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,14 +35,15 @@\n --  This is the HP-UX version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "0e368919eeb8315eec48220df16d6150d20c55c3", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --               Copyright (C) 1991-1994, Florida State University          --\n---            Copyright (C) 1995-2007, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1995-2008, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,18 +34,16 @@\n \n --  This is a HPUX 11.0 (Native THREADS) version of this package\n \n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n-\n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  This package encapsulates all direct interfaces to OS services that are\n+--  needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "15bd4007225f3014e7da1461a65e69d6d6aed5cb", "filename": "gcc/ada/s-osinte-irix.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,15 +34,16 @@\n \n --  This is the SGI Pthreads version of this package\n \n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  This package encapsulates all direct interfaces to OS services that are\n+--  needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n \n    pragma Preelaborate;"}, {"sha": "2467f09cf5b5db267e06a2a083a838d53733836f", "filename": "gcc/ada/s-osinte-linux-hppa.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux-hppa.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -8,7 +8,7 @@\n --                          (GNU/Linux-HPPA Version)                        --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,15 +35,16 @@\n \n --  This is a GNU/Linux (GNU/LinuxThreads) version of this package\n \n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  This package encapsulates all direct interfaces to OS services that are\n+--  needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "bb06c01a0b8d9936c61f589e5a9dc3e1eb2896ab", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,14 +35,15 @@\n --  This is a GNU/Linux (GNU/LinuxThreads) version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "f6ceec0790af8c6630c5297db768dd8e1e48958e", "filename": "gcc/ada/s-osinte-lynxos-3.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos-3.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,14 +35,15 @@\n --  This is a LynxOS (Native) version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "901076312617099958bc15502f0034c71671b8f4", "filename": "gcc/ada/s-osinte-lynxos.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,14 +35,15 @@\n --  This is a LynxOS (POSIX Threads) version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n-with Interfaces.C;\n with Ada.Unchecked_Conversion;\n \n+with Interfaces.C;\n+\n package System.OS_Interface is\n    pragma Preelaborate;\n "}, {"sha": "e0a3d7c75df84e6c10cece2404fdd90253e8d87c", "filename": "gcc/ada/s-osinte-mingw.ads", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-mingw.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,13 +35,15 @@\n --  This is a NT (native) version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with Interfaces.C.Strings;\n+\n with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n@@ -75,6 +77,8 @@ package System.OS_Interface is\n \n    type PLONG  is access all Interfaces.C.long;\n    type PDWORD is access all DWORD;\n+   type BYTE is new Interfaces.C.unsigned_char;\n+   subtype CHAR is Interfaces.C.char;\n \n    type BOOL is new Boolean;\n    for BOOL'Size use Interfaces.C.unsigned_long'Size;\n@@ -95,6 +99,19 @@ package System.OS_Interface is\n    NO_ERROR : constant := 0;\n    FUNC_ERR : constant := -1;\n \n+   -----------\n+   -- Files --\n+   -----------\n+\n+   type SECURITY_ATTRIBUTES is record\n+      nLength             : DWORD;\n+      pSecurityDescriptor : PVOID;\n+      bInheritHandle      : BOOL;\n+   end record;\n+\n+   function CloseHandle (hObject : HANDLE) return BOOL;\n+   pragma Import (Stdcall, CloseHandle, \"CloseHandle\");\n+\n    ------------------------\n    -- System Information --\n    ------------------------\n@@ -259,30 +276,22 @@ package System.OS_Interface is\n    function To_PTHREAD_START_ROUTINE is new\n      Ada.Unchecked_Conversion (System.Address, PTHREAD_START_ROUTINE);\n \n-   type SECURITY_ATTRIBUTES is record\n-      nLength              : DWORD;\n-      pSecurityDescriptor  : PVOID;\n-      bInheritHandle       : BOOL;\n-   end record;\n-\n-   type PSECURITY_ATTRIBUTES is access all SECURITY_ATTRIBUTES;\n-\n    function CreateThread\n-     (pThreadAttributes    : PSECURITY_ATTRIBUTES;\n-      dwStackSize          : DWORD;\n-      pStartAddress        : PTHREAD_START_ROUTINE;\n-      pParameter           : PVOID;\n-      dwCreationFlags      : DWORD;\n-      pThreadId            : PDWORD) return HANDLE;\n+     (pThreadAttributes : access SECURITY_ATTRIBUTES;\n+      dwStackSize       : DWORD;\n+      pStartAddress     : PTHREAD_START_ROUTINE;\n+      pParameter        : PVOID;\n+      dwCreationFlags   : DWORD;\n+      pThreadId         : PDWORD) return HANDLE;\n    pragma Import (Stdcall, CreateThread, \"CreateThread\");\n \n    function BeginThreadEx\n-     (pThreadAttributes    : PSECURITY_ATTRIBUTES;\n-      dwStackSize          : DWORD;\n-      pStartAddress        : PTHREAD_START_ROUTINE;\n-      pParameter           : PVOID;\n-      dwCreationFlags      : DWORD;\n-      pThreadId            : PDWORD) return HANDLE;\n+     (pThreadAttributes : access SECURITY_ATTRIBUTES;\n+      dwStackSize       : DWORD;\n+      pStartAddress     : PTHREAD_START_ROUTINE;\n+      pParameter        : PVOID;\n+      dwCreationFlags   : DWORD;\n+      pThreadId         : PDWORD) return HANDLE;\n    pragma Import (C, BeginThreadEx, \"_beginthreadex\");\n \n    Debug_Process                     : constant := 16#00000001#;\n@@ -373,11 +382,8 @@ package System.OS_Interface is\n    -- Semaphores, Events and Mutexes --\n    ------------------------------------\n \n-   function CloseHandle (hObject : HANDLE) return BOOL;\n-   pragma Import (Stdcall, CloseHandle, \"CloseHandle\");\n-\n    function CreateSemaphore\n-     (pSemaphoreAttributes : PSECURITY_ATTRIBUTES;\n+     (pSemaphoreAttributes : access SECURITY_ATTRIBUTES;\n       lInitialCount        : Interfaces.C.long;\n       lMaximumCount        : Interfaces.C.long;\n       pName                : PSZ) return HANDLE;\n@@ -396,7 +402,7 @@ package System.OS_Interface is\n    pragma Import (Stdcall, ReleaseSemaphore, \"ReleaseSemaphore\");\n \n    function CreateEvent\n-     (pEventAttributes : PSECURITY_ATTRIBUTES;\n+     (pEventAttributes : access SECURITY_ATTRIBUTES;\n       bManualReset     : BOOL;\n       bInitialState    : BOOL;\n       pName            : PSZ) return HANDLE;\n@@ -418,7 +424,7 @@ package System.OS_Interface is\n    pragma Import (Stdcall, PulseEvent, \"PulseEvent\");\n \n    function CreateMutex\n-     (pMutexAttributes : PSECURITY_ATTRIBUTES;\n+     (pMutexAttributes : access SECURITY_ATTRIBUTES;\n       bInitialOwner    : BOOL;\n       pName            : PSZ) return HANDLE;\n    pragma Import (Stdcall, CreateMutex, \"CreateMutexA\");"}, {"sha": "c45dca19cfcec24a3f35ea13e2d3becc74ee6c78", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,12 +35,13 @@\n --  This is a Solaris (POSIX Threads) version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is"}, {"sha": "32213ccabd4bcdbcdf19b6ba066ce4629febbf3a", "filename": "gcc/ada/s-osinte-solaris.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,12 +35,13 @@\n --  This is a Solaris (native) version of this package\n \n --  This package includes all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is"}, {"sha": "512267780b0074ebc3044964965fe62deff1050e", "filename": "gcc/ada/s-osinte-tru64.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-tru64.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,15 +32,16 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the DEC Unix 4.0/5.1 version of this package\n+--  This is the Tru64 version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is"}, {"sha": "74f08ea466419230e67db5010db030296704b975", "filename": "gcc/ada/s-osinte-vms.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vms.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,13 +35,15 @@\n --  This is a OpenVMS/Alpha version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with Ada.Unchecked_Conversion;\n+\n with System.Aux_DEC;\n \n package System.OS_Interface is"}, {"sha": "3204b4bb267fb93d7fa2e20f5c86de705635961c", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,12 +35,13 @@\n --  This is the VxWorks version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n+\n with System.VxWorks;\n \n package System.OS_Interface is"}, {"sha": "4ef43c9c31f0813be6931c60f63eef8e67b4f678", "filename": "gcc/ada/s-osinte-vxworks6.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vxworks6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osinte-vxworks6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks6.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --            Copyright (C) 1991-1994, Florida State University             --\n---          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@\n --  This is the VxWorks 6.x version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  that are needed by the tasking run-time (libgnarl).\n \n --  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n@@ -135,12 +135,12 @@ package System.OS_Interface is\n    -- Signal processing definitions --\n    -----------------------------------\n \n-   --  The how in sigprocmask().\n+   --  The how in sigprocmask()\n    SIG_BLOCK   : constant := 1;\n    SIG_UNBLOCK : constant := 2;\n    SIG_SETMASK : constant := 3;\n \n-   --  The sa_flags in struct sigaction.\n+   --  The sa_flags in struct sigaction\n    SA_SIGINFO   : constant := 16#0002#;\n    SA_ONSTACK   : constant := 16#0004#;\n "}, {"sha": "62fde6a7af172ca2f5af8357a36c4a4931e153bd", "filename": "gcc/ada/s-osprim-vxworks.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osprim-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-osprim-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-vxworks.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,6 @@ with System.OS_Interface;\n --  create a dependency on libgnarl in libgnat, which is not desirable.\n \n with Interfaces.C;\n---  used for type int\n \n package body System.OS_Primitives is\n "}, {"sha": "5dd775725bb5874d8bc607e2e2baf01167df1dae", "filename": "gcc/ada/s-shasto.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-shasto.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-shasto.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -31,7 +31,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Exceptions;\n with Ada.IO_Exceptions;\n with Ada.Streams;\n \n@@ -483,10 +482,8 @@ package body System.Shared_Storage is\n                   --  Error if we cannot create the file\n \n                   when others =>\n-                     Ada.Exceptions.Raise_Exception\n-                       (Program_Error'Identity,\n-                        \"Cannot create shared variable file for \"\"\" &\n-                        S & '\"'); -- \"\n+                     raise Program_Error with\n+                        \"Cannot create shared variable file for \"\"\" & S & '\"';\n                end;\n          end;\n "}, {"sha": "c54a31e045ed82528cab1777984eaa0667a98d4a", "filename": "gcc/ada/s-soflin.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,15 +36,13 @@ pragma Compiler_Unit;\n pragma Warnings (On);\n \n pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  an infinite loop from the code within the Poll routine itself.\n+--  We must turn polling off for this unit, because otherwise we get an\n+--  infinite loop from the code within the Poll routine itself.\n \n with System.Parameters;\n---  Used for Sec_Stack_Ratio\n \n pragma Warnings (Off);\n---  Disable warnings since System.Secondary_Stack is currently not\n---  Preelaborate\n+--  Disable warnings since System.Secondary_Stack is currently not Preelaborate\n with System.Secondary_Stack;\n pragma Warnings (On);\n "}, {"sha": "ecf0f23899543abb359e41ba298b0c0024921c2b", "filename": "gcc/ada/s-solita.adb", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-solita.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-solita.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-solita.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,31 +32,20 @@\n ------------------------------------------------------------------------------\n \n pragma Style_Checks (All_Checks);\n---  Turn off subprogram alpha ordering check, since we group soft link\n---  bodies and dummy soft link bodies together separately in this unit.\n+--  Turn off subprogram alpha ordering check, since we group soft link bodies\n+--  and dummy soft link bodies together separately in this unit.\n \n pragma Polling (Off);\n---  Turn polling off for this package. We don't need polling during any\n---  of the routines in this package, and more to the point, if we try\n---  to poll it can cause infinite loops.\n+--  Turn polling off for this package. We don't need polling during any of the\n+--  routines in this package, and more to the point, if we try to poll it can\n+--  cause infinite loops.\n \n-with System.Task_Primitives.Operations;\n---  Used for Self\n---           Timed_Delay\n+with Ada.Exceptions;\n+with Ada.Exceptions.Is_Null_Occurrence;\n \n+with System.Task_Primitives.Operations;\n with System.Tasking;\n---  Used for Task_Id\n---           Cause_Of_Termination\n-\n with System.Stack_Checking;\n---  Used for Stack_Access\n-\n-with Ada.Exceptions;\n---  Used for Exception_Id\n---           Exception_Occurrence\n---           Save_Occurrence\n-\n-with Ada.Exceptions.Is_Null_Occurrence;\n \n package body System.Soft_Links.Tasking is\n "}, {"sha": "84a8504fb11dc042d5190ae47792db6fcb1d27d2", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,46 +35,17 @@ pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n --  tasking operations. It causes infinite loops and other problems.\n \n-with Ada.Exceptions;\n---  Used for Raise_Exception\n+with Ada.Unchecked_Conversion;\n+with Ada.Task_Identification;\n \n with System.Task_Primitives.Operations;\n---  Used for Write_Lock,\n---           Unlock,\n---           Self,\n---           Monotonic_Clock,\n---           Self,\n---           Timed_Sleep,\n---           Wakeup,\n---           Yield\n-\n with System.Tasking.Utilities;\n---  Used for Make_Independent\n-\n with System.Tasking.Initialization;\n---  Used for Defer_Abort\n---           Undefer_Abort\n-\n with System.Tasking.Debug;\n---  Used for Trace\n-\n with System.OS_Primitives;\n---  used for Max_Sensible_Delay\n-\n-with Ada.Task_Identification;\n---  used for Task_Id type\n-\n with System.Interrupt_Management.Operations;\n---  used for Setup_Interrupt_Mask\n-\n with System.Parameters;\n---  used for Single_Lock\n---           Runtime_Traces\n-\n with System.Traces.Tasking;\n---  used for Send_Trace_Info\n-\n-with Ada.Unchecked_Conversion;\n \n package body System.Tasking.Async_Delays is\n \n@@ -228,8 +199,7 @@ package body System.Tasking.Async_Delays is\n         \"async delay from within abort-deferred region\");\n \n       if Self_Id.ATC_Nesting_Level = ATC_Level'Last then\n-         Ada.Exceptions.Raise_Exception (Storage_Error'Identity,\n-           \"not enough ATC nesting levels\");\n+         raise Storage_Error with \"not enough ATC nesting levels\";\n       end if;\n \n       Self_Id.ATC_Nesting_Level := Self_Id.ATC_Nesting_Level + 1;"}, {"sha": "0f4b0c8fa4dc3dc8795e2c9c481df94638b8ccc0", "filename": "gcc/ada/s-taenca.adb", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,36 +32,13 @@\n ------------------------------------------------------------------------------\n \n with System.Task_Primitives.Operations;\n---  used for STPO.Write_Lock\n---           Unlock\n---           STPO.Get_Priority\n---           Sleep\n---           Timed_Sleep\n-\n with System.Tasking.Initialization;\n---  used for Change_Base_Priority\n---           Defer_Abort/Undefer_Abort\n-\n with System.Tasking.Protected_Objects.Entries;\n---  used for To_Protection\n-\n with System.Tasking.Protected_Objects.Operations;\n---  used for PO_Service_Entries\n-\n with System.Tasking.Queuing;\n---  used for Requeue_Call_With_New_Prio\n---           Onqueue\n---           Dequeue_Call\n-\n with System.Tasking.Utilities;\n---  used for Exit_One_ATC_Level\n-\n with System.Parameters;\n---  used for Single_Lock\n---           Runtime_Traces\n-\n with System.Traces;\n---  used for Send_Trace_Info\n \n package body System.Tasking.Entry_Calls is\n "}, {"sha": "547dcb7226461d7180b114e19786ad2e0d550b25", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2006, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,19 +37,9 @@ pragma Polling (Off);\n --  tasking operations. It causes infinite loops and other problems.\n \n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Self\n---           Set_Ceiling\n-\n with System.Parameters;\n---  used for Runtime_Traces\n-\n with System.Traces;\n---  used for Send_Trace_Info\n-\n with System.Soft_Links.Tasking;\n---  Used for Init_Tasking_Soft_Links\n \n package body System.Tasking.Protected_Objects is\n "}, {"sha": "20f8404e0fc543e072d8d1c39ce09c0913bb9b6d", "filename": "gcc/ada/s-taprop-dummy.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-dummy.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,15 +33,14 @@\n \n --  This is a no tasking version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.Error_Reporting;\n---  used for Shutdown\n \n package body System.Task_Primitives.Operations is\n "}, {"sha": "329c56f8ccbbb59458d1d1bebc8022e0486c19b7", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,50 +33,34 @@\n \n --  This is a HP-UX DCE threads (HPUX 10) version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n+\n+with Interfaces.C;\n \n+with System.Tasking.Debug;\n with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n+with System.OS_Primitives;\n+with System.Task_Primitives.Interrupt_Operations;\n \n pragma Warnings (Off);\n with System.Interrupt_Management.Operations;\n---  used for Set_Interrupt_Mask\n---           All_Tasks_Mask\n pragma Elaborate_All (System.Interrupt_Management.Operations);\n-\n pragma Warnings (On);\n \n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n-with Interfaces.C;\n---  used for int\n---           size_t\n-\n-with System.Task_Primitives.Interrupt_Operations;\n---  used for Get_Interrupt_ID\n-\n with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;"}, {"sha": "068d3401f627009ac4edd127d9f63b73047276e2", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,47 +33,32 @@\n \n --  This is a Solaris (native) version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n+with Ada.Unchecked_Deallocation;\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n+with Interfaces.C;\n \n+with System.Tasking.Debug;\n+with System.Interrupt_Management;\n with System.OS_Primitives;\n---  used for Delay_Modes\n+with System.Task_Info;\n \n pragma Warnings (Off);\n with System.OS_Lib;\n---  used for String_Access, Getenv\n-\n pragma Warnings (On);\n \n-with Interfaces.C;\n---  used for int\n---           size_t\n-\n-with System.Task_Info;\n---  to initialize Task_Info for a C thread, in function Self\n-\n with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;"}, {"sha": "f1be10194a4661b4eab652a8fa472d689d79182d", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,32 +33,22 @@\n \n --  This is a OpenVMS/Alpha version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n---  used for int\n---           size_t\n \n+with System.Tasking.Debug;\n+with System.OS_Primitives;\n with System.Soft_Links;\n---  used for Get_Exc_Stack_Addr\n---           Abort_Defer/Undefer\n-\n with System.Aux_DEC;\n---  used for Short_Address\n-\n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n "}, {"sha": "7938ae1002e17aff9b6531fc7e61044d35ddf047", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,17 +31,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n with System.Parameters;\n---  used for Size_Type\n-\n with System.Tasking;\n---  used for Task_Id\n-\n with System.OS_Interface;\n---  used for Thread_Id\n \n package System.Task_Primitives.Operations is\n    pragma Preelaborate;"}, {"sha": "08802c6e22f7fb26584a8df75198db3fec455749", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1999-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1999-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,31 +46,18 @@ pragma Polling (Off);\n --  tasking operations. It causes infinite loops and other problems.\n \n with Ada.Exceptions;\n---  used for Exception_Occurrence\n \n with System.Task_Primitives.Operations;\n---  used for Enter_Task\n---           Write_Lock\n---           Unlock\n---           Wakeup\n---           Get_Priority\n-\n-with System.Soft_Links;\n---  used for the non-tasking routines (*_NT) that refer to global data.\n---  They are needed here before the tasking run time has been elaborated.\n---  used for Create_TSD\n---  This package also provides initialization routines for task specific data.\n---  The GNARL must call these to be sure that all non-tasking\n---  Ada constructs will work.\n-\n with System.Soft_Links.Tasking;\n---  Used for Init_Tasking_Soft_Links\n-\n with System.Secondary_Stack;\n---  used for SS_Init;\n-\n with System.Storage_Elements;\n---  used for Storage_Array;\n+\n+with System.Soft_Links;\n+--  Used for the non-tasking routines (*_NT) that refer to global data. They\n+--  are needed here before the tasking run time has been elaborated. used for\n+--  Create_TSD This package also provides initialization routines for task\n+--  specific data. The GNARL must call these to be sure that all non-tasking\n+--  Ada constructs will work.\n \n package body System.Tasking.Restricted.Stages is\n "}, {"sha": "6f0e36b43e61b64315d694004c86544222e7c07e", "filename": "gcc/ada/s-tarest.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,10 +46,7 @@\n --  System.Protected_Objects.Single_Entry\n \n with System.Task_Info;\n---  used for Task_Info_Type\n-\n with System.Parameters;\n---  used for Size_Type\n \n package System.Tasking.Restricted.Stages is\n    pragma Elaborate_Body;"}, {"sha": "557bf9a8cb31773dbf18671848a9b1b43e0976e3", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,38 +32,22 @@\n ------------------------------------------------------------------------------\n \n pragma Style_Checks (All_Checks);\n---  Turn off subprogram alpha ordering check, since we group soft link\n---  bodies and dummy soft link bodies together separately in this unit.\n+--  Turn off subprogram alpha ordering check, since we group soft link bodies\n+--  and dummy soft link bodies together separately in this unit.\n \n pragma Polling (Off);\n---  Turn polling off for this package. We don't need polling during any\n---  of the routines in this package, and more to the point, if we try\n---  to poll it can cause infinite loops.\n+--  Turn polling off for this package. We don't need polling during any of the\n+--  routines in this package, and more to the point, if we try to poll it can\n+--  cause infinite loops.\n \n with Ada.Exceptions;\n---  Used for Exception_Occurrence_Access\n \n with System.Task_Primitives;\n---  Used for Lock\n-\n with System.Task_Primitives.Operations;\n---  Used for Set_Priority\n---           Write_Lock\n---           Unlock\n---           Initialize_Lock\n-\n with System.Soft_Links;\n---  Used for the non-tasking routines (*_NT) that refer to global data.\n---  They are needed here before the tasking run time has been elaborated.\n-\n with System.Soft_Links.Tasking;\n---  Used for Init_Tasking_Soft_Links\n-\n with System.Tasking.Debug;\n---  Used for Trace\n-\n with System.Parameters;\n---  used for Single_Lock\n \n package body System.Tasking.Initialization is\n "}, {"sha": "7d78f5112a745eb3c40c251caab9571775ac668f", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,14 +32,11 @@\n ------------------------------------------------------------------------------\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.Task_Primitives.Operations;\n---  used for Self\n-\n with System.Storage_Elements;\n---  Needed for initializing Stack_Info.Size\n \n package body System.Tasking is\n "}, {"sha": "045f176db0230077c06f3a6645feb39e5b438681", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,25 +37,13 @@\n --  Any changes to this interface may require corresponding compiler changes.\n \n with Ada.Exceptions;\n---  Used for Exception_Id\n---           Exception_Occurrence\n+with Ada.Unchecked_Conversion;\n \n with System.Parameters;\n---  used for Size_Type\n-\n with System.Task_Info;\n---  used for Task_Info_Type\n-\n with System.Soft_Links;\n---  used for TSD\n-\n with System.Task_Primitives;\n---  used for Private_Data\n-\n with System.Stack_Usage;\n---  used for Stack_Analyzer\n-\n-with Ada.Unchecked_Conversion;\n \n package System.Tasking is\n    pragma Preelaborate;"}, {"sha": "6220c6ba02254cd7a4759d20318ea15976876305", "filename": "gcc/ada/s-tasloc.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasloc.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1997-2007, AdaCore                     --\n+--                     Copyright (C) 1997-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,6 @@\n ------------------------------------------------------------------------------\n \n with System.Soft_Links;\n---  used for Lock_Task, Unlock_Task\n \n package body System.Task_Lock is\n "}, {"sha": "06cb9c13d6ed26cab2c02cfb063ce336712ba0cb", "filename": "gcc/ada/s-taspri-dummy.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-dummy.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,8 @@\n --  This is a no tasking version of this package\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "9ed8b0111290ad4286db8362502e9ad8a3a779c8", "filename": "gcc/ada/s-taspri-hpux-dce.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-hpux-dce.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,13 +36,10 @@\n --  This package provides low-level support for most tasking features\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "7d85e67392f899eb7e5be9af23bc5abe4544822d", "filename": "gcc/ada/s-taspri-lynxos.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-lynxos.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,13 +35,10 @@\n --  This is a LynxOS version of this package, derived from s-taspri-posix.ads\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "5997cba640c090ea35d9f534be0ece0d6f675aee", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,13 +34,10 @@\n --  This is a NT (native) version of this package\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "c59a780c16123160e5029808390bcb9b79199555", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,13 +37,10 @@\n --  Note: this file can only be used for POSIX compliant systems\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "810f89c61a65f82aa8d4c1f8bb9f8cdeb5127461", "filename": "gcc/ada/s-taspri-solaris.ads", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-solaris.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,16 +36,13 @@\n --  This package provides low-level support for most tasking features\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n-with System.OS_Interface;\n---  used for mutex_t\n---           cond_t\n---           thread_t\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with Ada.Unchecked_Conversion;\n \n+with System.OS_Interface;\n+\n package System.Task_Primitives is\n    pragma Preelaborate;\n "}, {"sha": "d666dfea396a49c71fb7ed684cd536eaec29be9a", "filename": "gcc/ada/s-taspri-tru64.ads", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-tru64.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,17 +36,12 @@\n --  This package provides low-level support for most tasking features\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "d2e78cb6cb6e069cbb7b805cf9b8a8b405e3ae78", "filename": "gcc/ada/s-taspri-vms.ads", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vms.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,17 +36,12 @@\n --  This package provides low-level support for most tasking features\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n \n package System.Task_Primitives is\n    pragma Preelaborate;"}, {"sha": "b499b217becb78657db13581a13753a713526fc1", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2001-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,8 @@\n --  This is a VxWorks version of this package\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n "}, {"sha": "7a4aac8d3868055ba2447bf76c264d8b0df7db3c", "filename": "gcc/ada/s-tasque.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasque.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasque.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasque.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,19 +31,13 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version of the body implements queueing policy according to the\n---  policy specified by the pragma Queuing_Policy. When no such pragma\n---  is specified FIFO policy is used as default.\n+--  This version of the body implements queueing policy according to the policy\n+--  specified by the pragma Queuing_Policy. When no such pragma is specified\n+--  FIFO policy is used as default.\n \n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n-\n with System.Tasking.Initialization;\n---  used for Wakeup_Entry_Caller\n-\n with System.Parameters;\n---  used for Single_Lock\n \n package body System.Tasking.Queuing is\n "}, {"sha": "d7cbc01ebc884e95e1027bff22c929eec3feb70f", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,53 +32,15 @@\n ------------------------------------------------------------------------------\n \n with System.Task_Primitives.Operations;\n---  used for Get_Priority\n---           Set_Priority\n---           Write_Lock\n---           Unlock\n---           Sleep\n---           Wakeup\n---           Timed_Sleep\n-\n with System.Tasking.Entry_Calls;\n---  Used for Wait_For_Completion\n---           Wait_For_Completion_With_Timeout\n---           Wait_Until_Abortable\n-\n with System.Tasking.Initialization;\n---  used for Defer_Abort\n---           Undefer_Abort\n---           Do_Pending_Action\n-\n with System.Tasking.Queuing;\n---  used for Enqueue\n---           Dequeue_Head\n---           Select_Task_Entry_Call\n---           Count_Waiting\n-\n with System.Tasking.Utilities;\n---  used for Check_Exception\n---           Make_Passive\n---           Wakeup_Entry_Caller\n---           Exit_One_ATC_Level\n-\n with System.Tasking.Protected_Objects.Operations;\n---  used for PO_Do_Or_Queue\n---           PO_Service_Entries\n---           Lock_Entries\n-\n with System.Tasking.Debug;\n---  used for Trace\n-\n with System.Restrictions;\n---  used for Abort_Allowed\n-\n with System.Parameters;\n---  used for Single_Lock\n---           Runtime_Traces\n-\n with System.Traces.Tasking;\n---  used for Send_Trace_Info\n \n package body System.Tasking.Rendezvous is\n \n@@ -402,8 +364,7 @@ package body System.Tasking.Rendezvous is\n       if System.Tasking.Detect_Blocking\n         and then STPO.Self.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       Call_Synchronous\n@@ -1037,8 +998,7 @@ package body System.Tasking.Rendezvous is\n                end if;\n \n                Initialization.Undefer_Abort (Self_Id);\n-               Ada.Exceptions.Raise_Exception\n-                 (Program_Error'Identity, \"Entry call not a delay mode\");\n+               raise Program_Error with \"Entry call not a delay mode\";\n             end if;\n       end case;\n \n@@ -1351,8 +1311,7 @@ package body System.Tasking.Rendezvous is\n       if System.Tasking.Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       if Parameters.Runtime_Traces then\n@@ -1719,8 +1678,7 @@ package body System.Tasking.Rendezvous is\n       if System.Tasking.Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       Initialization.Defer_Abort (Self_Id);"}, {"sha": "73f74ba75fe8d32710f065b313c29329bb6e6243", "filename": "gcc/ada/s-tasren.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasren.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasren.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,10 +35,8 @@\n --  Any changes to this interface may require corresponding compiler changes.\n \n with Ada.Exceptions;\n---  Used for, Exception_Id\n \n with System.Tasking.Protected_Objects.Entries;\n---  used for Protection_Entries\n \n package System.Tasking.Rendezvous is\n "}, {"sha": "22da42bb08f08632c2e30d1c62061168909a03db", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 136, "deletions": 191, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,79 +32,36 @@\n ------------------------------------------------------------------------------\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with Ada.Exceptions;\n---  Used for Raise_Exception\n+with Ada.Unchecked_Deallocation;\n \n with System.Tasking.Debug;\n---  Used for enabling tasking facilities with gdb\n-\n with System.Address_Image;\n---  Used for the function itself\n-\n with System.Task_Primitives.Operations;\n---  Used for Finalize_Lock\n---           Enter_Task\n---           Write_Lock\n---           Unlock\n---           Sleep\n---           Wakeup\n---           Get_Priority\n---           Lock/Unlock_RTS\n---           New_ATCB\n-\n-with System.Soft_Links;\n---  These are procedure pointers to non-tasking routines that use task\n---  specific data. In the absence of tasking, these routines refer to global\n---  data. In the presense of tasking, they must be replaced with pointers to\n---  task-specific versions. Also used for Create_TSD, Destroy_TSD,\n---  Get_Current_Excep, Finalize_Global_List, Task_Termination, Handler.\n-\n-with System.Tasking.Initialization;\n---  Used for Remove_From_All_Tasks_List\n---           Defer_Abort\n---           Undefer_Abort\n---           Finalize_Attributes_Link\n---           Initialize_Attributes_Link\n-\n-pragma Elaborate_All (System.Tasking.Initialization);\n---  This insures that tasking is initialized if any tasks are created\n-\n with System.Tasking.Utilities;\n---  Used for Make_Passive\n---           Abort_One_Task\n---           Abort_Tasks\n-\n with System.Tasking.Queuing;\n---  Used for Dequeue_Head\n-\n with System.Tasking.Rendezvous;\n---  Used for Call_Simple\n-\n with System.OS_Primitives;\n---  Used for Delay_Modes\n-\n with System.Secondary_Stack;\n---  Used for SS_Init\n-\n with System.Storage_Elements;\n---  Used for Storage_Array\n-\n with System.Restrictions;\n---  Used for Abort_Allowed\n-\n with System.Standard_Library;\n---  Used for Exception_Trace\n-\n with System.Traces.Tasking;\n---  Used for Send_Trace_Info\n+with System.Stack_Usage;\n \n-with Ada.Unchecked_Deallocation;\n---  To recover from failure of ATCB initialization\n+with System.Soft_Links;\n+--  These are procedure pointers to non-tasking routines that use task\n+--  specific data. In the absence of tasking, these routines refer to global\n+--  data. In the presense of tasking, they must be replaced with pointers to\n+--  task-specific versions. Also used for Create_TSD, Destroy_TSD,\n+--  Get_Current_Excep, Finalize_Global_List, Task_Termination, Handler.\n \n-with System.Stack_Usage;\n+with System.Tasking.Initialization;\n+pragma Elaborate_All (System.Tasking.Initialization);\n+--  This insures that tasking is initialized if any tasks are created\n \n package body System.Tasking.Stages is\n \n@@ -166,20 +123,20 @@ package body System.Tasking.Stages is\n    --  This procedure must be called with abort deferred.\n \n    procedure Abort_Dependents (Self_ID : Task_Id);\n-   --  Abort all the direct dependents of Self at its current master\n-   --  nesting level, plus all of their dependents, transitively.\n-   --  RTS_Lock should be locked by the caller.\n+   --  Abort all the direct dependents of Self at its current master nesting\n+   --  level, plus all of their dependents, transitively. RTS_Lock should be\n+   --  locked by the caller.\n \n    procedure Vulnerable_Free_Task (T : Task_Id);\n-   --  Recover all runtime system storage associated with the task T.\n-   --  This should only be called after T has terminated and will no\n-   --  longer be referenced.\n+   --  Recover all runtime system storage associated with the task T. This\n+   --  should only be called after T has terminated and will no longer be\n+   --  referenced.\n    --\n-   --  For tasks created by an allocator that fails, due to an exception,\n-   --  it is called from Expunge_Unactivated_Tasks.\n+   --  For tasks created by an allocator that fails, due to an exception, it is\n+   --  called from Expunge_Unactivated_Tasks.\n    --\n-   --  It is also called from Ada.Unchecked_Deallocation, for objects that\n-   --  are or contain tasks.\n+   --  It is also called from Ada.Unchecked_Deallocation, for objects that are\n+   --  or contain tasks.\n    --\n    --  Different code is used at master completion, in Terminate_Dependents,\n    --  due to a need for tighter synchronization with the master.\n@@ -233,28 +190,27 @@ package body System.Tasking.Stages is\n    -- Activate_Tasks --\n    --------------------\n \n-   --  Note that locks of activator and activated task are both locked\n-   --  here. This is necessary because C.Common.State and\n-   --  Self.Common.Wait_Count have to be synchronized. This is safe from\n-   --  deadlock because the activator is always created before the activated\n-   --  task. That satisfies our in-order-of-creation ATCB locking policy.\n-\n-   --  At one point, we may also lock the parent, if the parent is\n-   --  different from the activator. That is also consistent with the\n-   --  lock ordering policy, since the activator cannot be created\n-   --  before the parent.\n-\n-   --  Since we are holding both the activator's lock, and Task_Wrapper\n-   --  locks that before it does anything more than initialize the\n-   --  low-level ATCB components, it should be safe to wait to update\n-   --  the counts until we see that the thread creation is successful.\n-\n-   --  If the thread creation fails, we do need to close the entries\n-   --  of the task. The first phase, of dequeuing calls, only requires\n-   --  locking the acceptor's ATCB, but the waking up of the callers\n-   --  requires locking the caller's ATCB. We cannot safely do this\n-   --  while we are holding other locks. Therefore, the queue-clearing\n-   --  operation is done in a separate pass over the activation chain.\n+   --  Note that locks of activator and activated task are both locked here.\n+   --  This is necessary because C.Common.State and Self.Common.Wait_Count have\n+   --  to be synchronized. This is safe from deadlock because the activator is\n+   --  always created before the activated task. That satisfies our\n+   --  in-order-of-creation ATCB locking policy.\n+\n+   --  At one point, we may also lock the parent, if the parent is different\n+   --  from the activator. That is also consistent with the lock ordering\n+   --  policy, since the activator cannot be created before the parent.\n+\n+   --  Since we are holding both the activator's lock, and Task_Wrapper locks\n+   --  that before it does anything more than initialize the low-level ATCB\n+   --  components, it should be safe to wait to update the counts until we see\n+   --  that the thread creation is successful.\n+\n+   --  If the thread creation fails, we do need to close the entries of the\n+   --  task. The first phase, of dequeuing calls, only requires locking the\n+   --  acceptor's ATCB, but the waking up of the callers requires locking the\n+   --  caller's ATCB. We cannot safely do this while we are holding other\n+   --  locks. Therefore, the queue-clearing operation is done in a separate\n+   --  pass over the activation chain.\n \n    procedure Activate_Tasks (Chain_Access : Activation_Chain_Access) is\n       Self_ID        : constant Task_Id := STPO.Self;\n@@ -272,8 +228,7 @@ package body System.Tasking.Stages is\n       if System.Tasking.Detect_Blocking\n         and then Self_ID.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       pragma Debug\n@@ -299,8 +254,8 @@ package body System.Tasking.Stages is\n             All_Elaborated := False;\n          end if;\n \n-         --  Reverse the activation chain so that tasks are\n-         --  activated in the same order they're declared.\n+         --  Reverse the activation chain so that tasks are activated in the\n+         --  same order they're declared.\n \n          Next_C := C.Common.Activation_Link;\n          C.Common.Activation_Link := Last_C;\n@@ -313,8 +268,7 @@ package body System.Tasking.Stages is\n       if not All_Elaborated then\n          Unlock_RTS;\n          Initialization.Undefer_Abort_Nestable (Self_ID);\n-         Raise_Exception\n-           (Program_Error'Identity, \"Some tasks have not been elaborated\");\n+         raise Program_Error with \"Some tasks have not been elaborated\";\n       end if;\n \n       --  Activate all the tasks in the chain. Creation of the thread of\n@@ -341,10 +295,10 @@ package body System.Tasking.Stages is\n                  (C.Common.Compiler_Data.Pri_Stack_Info.Size),\n                Activate_Prio, Success);\n \n-            --  There would be a race between the created task and the\n-            --  creator to do the following initialization, if we did not\n-            --  have a Lock/Unlock_RTS pair in the task wrapper to prevent\n-            --  it from racing ahead.\n+            --  There would be a race between the created task and the creator\n+            --  to do the following initialization, if we did not have a\n+            --  Lock/Unlock_RTS pair in the task wrapper to prevent it from\n+            --  racing ahead.\n \n             if Success then\n                C.Common.State := Runnable;\n@@ -380,8 +334,8 @@ package body System.Tasking.Stages is\n          Unlock_RTS;\n       end if;\n \n-      --  Close the entries of any tasks that failed thread creation,\n-      --  and count those that have not finished activation.\n+      --  Close the entries of any tasks that failed thread creation, and count\n+      --  those that have not finished activation.\n \n       Write_Lock (Self_ID);\n       Self_ID.Common.State := Activator_Sleep;\n@@ -428,8 +382,7 @@ package body System.Tasking.Stages is\n \n       if Self_ID.Common.Activation_Failed then\n          Self_ID.Common.Activation_Failed := False;\n-         Raise_Exception (Tasking_Error'Identity,\n-           \"Failure during activation\");\n+         raise Tasking_Error with \"Failure during activation\";\n       end if;\n    end Activate_Tasks;\n \n@@ -500,8 +453,8 @@ package body System.Tasking.Stages is\n    -- Create_Task --\n    -----------------\n \n-   --  Compiler interface only. Do not call from within the RTS.\n-   --  This must be called to create a new task.\n+   --  Compiler interface only. Do not call from within the RTS. This must be\n+   --  called to create a new task.\n \n    procedure Create_Task\n      (Priority      : Integer;\n@@ -534,15 +487,13 @@ package body System.Tasking.Stages is\n            \"create task after awaiting termination\";\n       end if;\n \n-      --  If pragma Detect_Blocking is active must be checked whether\n-      --  this potentially blocking operation is called from a\n-      --  protected action.\n+      --  If pragma Detect_Blocking is active must be checked whether this\n+      --  potentially blocking operation is called from a protected action.\n \n       if System.Tasking.Detect_Blocking\n         and then Self_ID.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       pragma Debug\n@@ -572,19 +523,18 @@ package body System.Tasking.Stages is\n       exception\n          when others =>\n             Initialization.Undefer_Abort_Nestable (Self_ID);\n-            Raise_Exception (Storage_Error'Identity, \"Cannot allocate task\");\n+            raise Storage_Error with \"Cannot allocate task\";\n       end;\n \n-      --  RTS_Lock is used by Abort_Dependents and Abort_Tasks.\n-      --  Up to this point, it is possible that we may be part of\n-      --  a family of tasks that is being aborted.\n+      --  RTS_Lock is used by Abort_Dependents and Abort_Tasks. Up to this\n+      --  point, it is possible that we may be part of a family of tasks that\n+      --  is being aborted.\n \n       Lock_RTS;\n       Write_Lock (Self_ID);\n \n-      --  Now, we must check that we have not been aborted.\n-      --  If so, we should give up on creating this task,\n-      --  and simply return.\n+      --  Now, we must check that we have not been aborted. If so, we should\n+      --  give up on creating this task, and simply return.\n \n       if not Self_ID.Callable then\n          pragma Assert (Self_ID.Pending_ATC_Level = 0);\n@@ -610,8 +560,7 @@ package body System.Tasking.Stages is\n          Unlock (Self_ID);\n          Unlock_RTS;\n          Initialization.Undefer_Abort_Nestable (Self_ID);\n-         Raise_Exception\n-           (Storage_Error'Identity, \"Failed to initialize task\");\n+         raise Storage_Error with \"Failed to initialize task\";\n       end if;\n \n       if Master = Foreign_Task_Level + 2 then\n@@ -710,8 +659,8 @@ package body System.Tasking.Stages is\n       Initialization.Defer_Abort_Nestable (Self_ID);\n \n       --  ???\n-      --  Experimentation has shown that abort is sometimes (but not\n-      --  always) already deferred when this is called.\n+      --  Experimentation has shown that abort is sometimes (but not always)\n+      --  already deferred when this is called.\n \n       --  That may indicate an error. Find out what is going on\n \n@@ -749,9 +698,9 @@ package body System.Tasking.Stages is\n    ---------------------------\n \n    --  ???\n-   --  We have a potential problem here if finalization of global\n-   --  objects does anything with signals or the timer server, since\n-   --  by that time those servers have terminated.\n+   --  We have a potential problem here if finalization of global objects does\n+   --  anything with signals or the timer server, since by that time those\n+   --  servers have terminated.\n \n    --  It is hard to see how that would occur\n \n@@ -767,11 +716,10 @@ package body System.Tasking.Stages is\n    begin\n       if Self_ID.Deferral_Level = 0 then\n          --  ???\n-         --  In principle, we should be able to predict whether\n-         --  abort is already deferred here (and it should not be deferred\n-         --  yet but in practice it seems Finalize_Global_Tasks is being\n-         --  called sometimes, from RTS code for exceptions, with abort already\n-         --  deferred.\n+         --  In principle, we should be able to predict whether abort is\n+         --  already deferred here (and it should not be deferred yet but in\n+         --  practice it seems Finalize_Global_Tasks is being called sometimes,\n+         --  from RTS code for exceptions, with abort already deferred.\n \n          Initialization.Defer_Abort_Nestable (Self_ID);\n \n@@ -802,17 +750,17 @@ package body System.Tasking.Stages is\n       end if;\n \n       --  We need to explicitely wait for the task to be terminated here\n-      --  because on true concurrent system, we may end this procedure\n-      --  before the tasks are really terminated.\n+      --  because on true concurrent system, we may end this procedure before\n+      --  the tasks are really terminated.\n \n       Write_Lock (Self_ID);\n \n       loop\n          exit when Utilities.Independent_Task_Count = 0;\n \n-         --  We used to yield here, but this did not take into account\n-         --  low priority tasks that would cause dead lock in some cases\n-         --  (true FIFO scheduling).\n+         --  We used to yield here, but this did not take into account low\n+         --  priority tasks that would cause dead lock in some cases (true\n+         --  FIFO scheduling).\n \n          Timed_Sleep\n            (Self_ID, 0.01, System.OS_Primitives.Relative,\n@@ -1086,9 +1034,9 @@ package body System.Tasking.Stages is\n \n       Stack_Guard (Self_ID, True);\n \n-      --  Initialize low-level TCB components, that cannot be initialized\n-      --  by the creator. Enter_Task sets Self_ID.Known_Tasks_Index and\n-      --  also Self_ID.LL.Thread\n+      --  Initialize low-level TCB components, that cannot be initialized by\n+      --  the creator. Enter_Task sets Self_ID.Known_Tasks_Index and also\n+      --  Self_ID.LL.Thread\n \n       Enter_Task (Self_ID);\n \n@@ -1163,7 +1111,7 @@ package body System.Tasking.Stages is\n                Cause := Abnormal;\n             end if;\n          when others =>\n-            --  ??? Using an E : others here causes CD2C11A to fail on Tru64.\n+            --  ??? Using an E : others here causes CD2C11A to fail on Tru64\n \n             Initialization.Defer_Abort_Nestable (Self_ID);\n \n@@ -1231,10 +1179,10 @@ package body System.Tasking.Stages is\n    -- Terminate_Task --\n    --------------------\n \n-   --  Before we allow the thread to exit, we must clean up. This is a\n-   --  a delicate job. We must wake up the task's master, who may immediately\n-   --  try to deallocate the ATCB out from under the current task WHILE IT IS\n-   --  STILL EXECUTING.\n+   --  Before we allow the thread to exit, we must clean up. This is a a\n+   --  delicate job. We must wake up the task's master, who may immediately try\n+   --  to deallocate the ATCB out from under the current task WHILE IT IS STILL\n+   --  EXECUTING.\n \n    --  To avoid this, the parent task must be blocked up to the latest\n    --  statement executed. The trouble is that we have another step that we\n@@ -1314,8 +1262,8 @@ package body System.Tasking.Stages is\n       SSL.Destroy_TSD (Self_ID.Common.Compiler_Data);\n       Initialization.Final_Task_Unlock (Self_ID);\n \n-      --  WARNING: past this point, this thread must assume that the ATCB\n-      --  has been deallocated. It should not be accessed again.\n+      --  WARNING: past this point, this thread must assume that the ATCB has\n+      --  been deallocated. It should not be accessed again.\n \n       if Master_of_Task > 0 then\n          STPO.Exit_Task;\n@@ -1440,9 +1388,9 @@ package body System.Tasking.Stages is\n       Unlock (Self_ID);\n       Unlock (Activator);\n \n-      --  After the activation, active priority should be the same\n-      --  as base priority. We must unlock the Activator first,\n-      --  though, since it should not wait if we have lower priority.\n+      --  After the activation, active priority should be the same as base\n+      --  priority. We must unlock the Activator first, though, since it\n+      --  should not wait if we have lower priority.\n \n       if Get_Priority (Self_ID) /= Self_ID.Common.Base_Priority then\n          Write_Lock (Self_ID);\n@@ -1523,12 +1471,12 @@ package body System.Tasking.Stages is\n         (Self_ID.Deferral_Level > 0\n           or else not System.Restrictions.Abort_Allowed);\n \n-      --  Count how many active dependent tasks this master currently\n-      --  has, and record this in Wait_Count.\n+      --  Count how many active dependent tasks this master currently has, and\n+      --  record this in Wait_Count.\n \n-      --  This count should start at zero, since it is initialized to\n-      --  zero for new tasks, and the task should not exit the\n-      --  sleep-loops that use this count until the count reaches zero.\n+      --  This count should start at zero, since it is initialized to zero for\n+      --  new tasks, and the task should not exit the sleep-loops that use this\n+      --  count until the count reaches zero.\n \n       --  While we're counting, if we run across any unactivated tasks that\n       --  belong to this master, we summarily terminate them as required by\n@@ -1543,6 +1491,7 @@ package body System.Tasking.Stages is\n          --  Terminate unactivated (never-to-be activated) tasks\n \n          if C.Common.Activator = Self_ID and then C.Master_of_Task = CM then\n+\n             pragma Assert (C.Common.State = Unactivated);\n             --  Usually, C.Common.Activator = Self_ID implies C.Master_of_Task\n             --  = CM. The only case where C is pending activation by this\n@@ -1581,9 +1530,8 @@ package body System.Tasking.Stages is\n \n       --  Wait until dependent tasks are all terminated or ready to terminate.\n       --  While waiting, the task may be awakened if the task's priority needs\n-      --  changing, or this master is aborted. In the latter case, we want\n-      --  to abort the dependents, and resume waiting until Wait_Count goes\n-      --  to zero.\n+      --  changing, or this master is aborted. In the latter case, we abort the\n+      --  dependents, and resume waiting until Wait_Count goes to zero.\n \n       Write_Lock (Self_ID);\n \n@@ -1612,9 +1560,8 @@ package body System.Tasking.Stages is\n       Self_ID.Common.State := Runnable;\n       Unlock (Self_ID);\n \n-      --  Dependents are all terminated or on terminate alternatives.\n-      --  Now, force those on terminate alternatives to terminate, by\n-      --  aborting them.\n+      --  Dependents are all terminated or on terminate alternatives. Now,\n+      --  force those on terminate alternatives to terminate, by aborting them.\n \n       pragma Assert (Check_Unactivated_Tasks);\n \n@@ -1644,14 +1591,14 @@ package body System.Tasking.Stages is\n          --  rules prevent us from doing that without releasing the locks on C\n          --  and Self_ID. Releasing and retaking those locks would be wasteful\n          --  at best, and should not be considered further without more\n-         --  detailed analysis of potential concurrent accesses to the\n-         --  ATCBs of C and Self_ID.\n+         --  detailed analysis of potential concurrent accesses to the ATCBs\n+         --  of C and Self_ID.\n \n-         --  Count how many \"alive\" dependent tasks this master currently\n-         --  has, and record this in Wait_Count. This count should start at\n-         --  zero, since it is initialized to zero for new tasks, and the\n-         --  task should not exit the sleep-loops that use this count until\n-         --  the count reaches zero.\n+         --  Count how many \"alive\" dependent tasks this master currently has,\n+         --  and record this in Wait_Count. This count should start at zero,\n+         --  since it is initialized to zero for new tasks, and the task should\n+         --  not exit the sleep-loops that use this count until the count\n+         --  reaches zero.\n \n          pragma Assert (Self_ID.Common.Wait_Count = 0);\n \n@@ -1699,10 +1646,10 @@ package body System.Tasking.Stages is\n       --  fast as we can, so there is no point.\n \n       --  Remove terminated tasks from the list of Self_ID's dependents, but\n-      --  don't free their ATCBs yet, because of lock order restrictions,\n-      --  which don't allow us to call \"free\" or \"malloc\" while holding any\n-      --  other locks. Instead, we put those ATCBs to be freed onto a\n-      --  temporary list, called To_Be_Freed.\n+      --  don't free their ATCBs yet, because of lock order restrictions, which\n+      --  don't allow us to call \"free\" or \"malloc\" while holding any other\n+      --  locks. Instead, we put those ATCBs to be freed onto a temporary list,\n+      --  called To_Be_Freed.\n \n       if not Single_Lock then\n          Lock_RTS;\n@@ -1747,13 +1694,12 @@ package body System.Tasking.Stages is\n \n       --  ???\n       --  The check \"T.Common.Parent /= null ...\" below is to prevent dangling\n-      --  references to terminated library-level tasks, which could\n-      --  otherwise occur during finalization of library-level objects.\n-      --  A better solution might be to hook task objects into the\n-      --  finalization chain and deallocate the ATCB when the task\n-      --  object is deallocated. However, this change is not likely\n-      --  to gain anything significant, since all this storage should\n-      --  be recovered en-masse when the process exits.\n+      --  references to terminated library-level tasks, which could otherwise\n+      --  occur during finalization of library-level objects. A better solution\n+      --  might be to hook task objects into the finalization chain and\n+      --  deallocate the ATCB when the task object is deallocated. However,\n+      --  this change is not likely to gain anything significant, since all\n+      --  this storage should be recovered en-masse when the process exits.\n \n       while To_Be_Freed /= null loop\n          T := To_Be_Freed;\n@@ -1803,6 +1749,7 @@ package body System.Tasking.Stages is\n       --  ATCB. That would not cover the case of unactivated tasks. It also\n       --  would force us to keep the underlying thread around past termination,\n       --  since references to the ATCB are possible past termination.\n+\n       --  Currently, we get rid of the thread as soon as the task terminates,\n       --  and let the parent recover the ATCB later.\n \n@@ -1812,9 +1759,8 @@ package body System.Tasking.Stages is\n       --  that no longer have ATCBs. It is not clear how much this would gain,\n       --  since the user-level task object would still be occupying storage.\n \n-      --  Make next master level up active.\n-      --  We don't need to lock the ATCB, since the value is only updated by\n-      --  each task for itself.\n+      --  Make next master level up active. We don't need to lock the ATCB,\n+      --  since the value is only updated by each task for itself.\n \n       Self_ID.Master_Within := CM - 1;\n    end Vulnerable_Complete_Master;\n@@ -1876,9 +1822,8 @@ package body System.Tasking.Stages is\n          Unlock_RTS;\n       end if;\n \n-      --  If Self_ID.Master_Within = Self_ID.Master_of_Task + 2\n-      --  we may have dependent tasks for which we need to wait.\n-      --  Otherwise, we can just exit.\n+      --  If Self_ID.Master_Within = Self_ID.Master_of_Task + 2 we may have\n+      --  dependent tasks for which we need to wait. Otherwise we just exit.\n \n       if Self_ID.Master_Within = Self_ID.Master_of_Task + 2 then\n          Vulnerable_Complete_Master (Self_ID);\n@@ -1889,17 +1834,17 @@ package body System.Tasking.Stages is\n    -- Vulnerable_Free_Task --\n    --------------------------\n \n-   --  Recover all runtime system storage associated with the task T.\n-   --  This should only be called after T has terminated and will no\n-   --  longer be referenced.\n+   --  Recover all runtime system storage associated with the task T. This\n+   --  should only be called after T has terminated and will no longer be\n+   --  referenced.\n \n-   --  For tasks created by an allocator that fails, due to an exception,\n-   --  it is called from Expunge_Unactivated_Tasks.\n+   --  For tasks created by an allocator that fails, due to an exception, it\n+   --  is called from Expunge_Unactivated_Tasks.\n \n-   --  For tasks created by elaboration of task object declarations it\n-   --  is called from the finalization code of the Task_Wrapper procedure.\n-   --  It is also called from Ada.Unchecked_Deallocation, for objects that\n-   --  are or contain tasks.\n+   --  For tasks created by elaboration of task object declarations it is\n+   --  called from the finalization code of the Task_Wrapper procedure. It is\n+   --  also called from Ada.Unchecked_Deallocation, for objects that are or\n+   --  contain tasks.\n \n    procedure Vulnerable_Free_Task (T : Task_Id) is\n    begin"}, {"sha": "e96e2d906e7087689185b584ff347bf709825cf6", "filename": "gcc/ada/s-tassta.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tassta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tassta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,14 +37,12 @@\n \n --  Note: Only the compiler is allowed to use this interface, by generating\n --  direct calls to it, via Rtsfind.\n+\n --  Any changes to this interface may require corresponding compiler changes\n --  in exp_ch9.adb and possibly exp_ch7.adb\n \n with System.Task_Info;\n---  used for Task_Info_Type\n-\n with System.Parameters;\n---  used for Size_Type\n \n package System.Tasking.Stages is\n    pragma Elaborate_Body;"}, {"sha": "0706444b4800a30fd5850f7968d0f7ccf74c6363", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,39 +31,20 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides RTS Internal Declarations.\n+--  This package provides RTS Internal Declarations\n+\n --  These declarations are not part of the GNARLI\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Wakeup\n---           Unlock\n---           Sleep\n---           Abort_Task\n---           Lock/Unlock_RTS\n-\n with System.Tasking.Initialization;\n---  Used for Defer_Abort\n---           Undefer_Abort\n---           Locked_Abort_To_Level\n-\n with System.Tasking.Queuing;\n---  used for Dequeue_Call\n---           Dequeue_Head\n-\n with System.Parameters;\n---  used for Single_Lock\n---           Runtime_Traces\n-\n with System.Traces.Tasking;\n---  used for Send_Trace_Info\n \n package body System.Tasking.Utilities is\n \n@@ -129,8 +110,7 @@ package body System.Tasking.Utilities is\n       if System.Tasking.Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       Initialization.Defer_Abort_Nestable (Self_Id);"}, {"sha": "695f5164ecd6c6a20908e10155e15d1faadce8c8", "filename": "gcc/ada/s-tataat.adb", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tataat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tataat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2007, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,16 +32,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Task_Primitives.Operations;\n---  used for Write_Lock\n---           Unlock\n---           Lock/Unlock_RTS\n+with Ada.Unchecked_Conversion;\n \n+with System.Task_Primitives.Operations;\n with System.Tasking.Initialization;\n---  used for Defer_Abort\n---           Undefer_Abort\n-\n-with Ada.Unchecked_Conversion;\n \n package body System.Tasking.Task_Attributes is\n "}, {"sha": "43608af448b84f2f2178f761da595710300a8b6b", "filename": "gcc/ada/s-tataat.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tataat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tataat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2007, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,10 +35,8 @@\n --  This package provides support for the body of Ada.Task_Attributes\n \n with Ada.Finalization;\n---  Used for Limited_Controlled\n \n with System.Storage_Elements;\n---  Used for Integer_Address\n \n package System.Tasking.Task_Attributes is\n "}, {"sha": "fd8a16814e8b59477a30e4284df0986aba6bb9c4", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                  --\n --                                                                          --\n---      S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .   --\n---                               E N T R I E S                              --\n+--                SYSTEM.TASKING.PROTECTED_OBJECTS.ENTRIES                  --\n --                                                                          --\n---                                  B o d y                                 --\n+--                               B o d y                                    --\n --                                                                          --\n---         Copyright (C) 1998-2007, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,40 +43,20 @@\n \n --  Note: the compiler generates direct calls to this interface, via Rtsfind\n \n-with Ada.Exceptions;\n---  Used for Exception_Occurrence_Access\n---           Raise_Exception\n-\n with System.Task_Primitives.Operations;\n---  Used for Initialize_Lock\n---           Write_Lock\n---           Unlock\n---           Get_Priority\n---           Wakeup\n---           Set_Ceiling\n+with System.Restrictions;\n+with System.Parameters;\n \n with System.Tasking.Initialization;\n---  Used for Defer_Abort,\n---           Undefer_Abort,\n---           Change_Base_Priority\n-\n pragma Elaborate_All (System.Tasking.Initialization);\n---  This insures that tasking is initialized if any protected objects are\n---  created.\n-\n-with System.Restrictions;\n---  Used for Abort_Allowed\n-\n-with System.Parameters;\n---  Used for Single_Lock\n+--  To insure that tasking is initialized if any protected objects are created\n \n package body System.Tasking.Protected_Objects.Entries is\n \n    package STPO renames System.Task_Primitives.Operations;\n \n    use Parameters;\n    use Task_Primitives.Operations;\n-   use Ada.Exceptions;\n \n    ----------------\n    -- Local Data --\n@@ -126,7 +105,7 @@ package body System.Tasking.Protected_Objects.Entries is\n          STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n \n          if Ceiling_Violation then\n-            Raise_Exception (Program_Error'Identity, \"Ceiling Violation\");\n+            raise Program_Error with \"Ceiling Violation\";\n          end if;\n \n          if Single_Lock then\n@@ -246,8 +225,7 @@ package body System.Tasking.Protected_Objects.Entries is\n    is\n    begin\n       if Object.Finalized then\n-         Raise_Exception\n-           (Program_Error'Identity, \"Protected Object is finalized\");\n+         raise Program_Error with \"Protected Object is finalized\";\n       end if;\n \n       --  If pragma Detect_Blocking is active then, as described in the ARM\n@@ -306,7 +284,7 @@ package body System.Tasking.Protected_Objects.Entries is\n       Lock_Entries (Object, Ceiling_Violation);\n \n       if Ceiling_Violation then\n-         Raise_Exception (Program_Error'Identity, \"Ceiling Violation\");\n+         raise Program_Error with \"Ceiling Violation\";\n       end if;\n    end Lock_Entries;\n \n@@ -319,8 +297,7 @@ package body System.Tasking.Protected_Objects.Entries is\n \n    begin\n       if Object.Finalized then\n-         Raise_Exception\n-           (Program_Error'Identity, \"Protected Object is finalized\");\n+         raise Program_Error with \"Protected Object is finalized\";\n       end if;\n \n       --  If pragma Detect_Blocking is active then, as described in the ARM\n@@ -345,7 +322,7 @@ package body System.Tasking.Protected_Objects.Entries is\n       Read_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Ceiling_Violation then\n-         Raise_Exception (Program_Error'Identity, \"Ceiling Violation\");\n+         raise Program_Error with \"Ceiling Violation\";\n       end if;\n \n       --  We are entering in a protected action, so that we increase the"}, {"sha": "afbdc6bac0d7e75b9275c6090d2facd380f5270c", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                  --\n --                                                                          --\n---      S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .   --\n---                               E N T R I E S                              --\n+--                SYSTEM.TASKING.PROTECTED_OBJECTS.ENTRIES                  --\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,20 +31,20 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains all the simple primitives related to\n---  Protected_Objects with entries (i.e init, lock, unlock).\n+--  This package contains all simple primitives related to Protected_Objects\n+--  with entries (i.e init, lock, unlock).\n+\n --  The handling of protected objects with no entries is done in\n --  System.Tasking.Protected_Objects, the complex routines for protected\n --  objects with entries in System.Tasking.Protected_Objects.Operations.\n+\n --  The split between Entries and Operations is needed to break circular\n --  dependencies inside the run time.\n \n --  Note: the compiler generates direct calls to this interface, via Rtsfind.\n --  Any changes to this interface may require corresponding compiler changes.\n \n with Ada.Finalization;\n---  used for Limited_Controlled\n-\n with Ada.Unchecked_Conversion;\n \n package System.Tasking.Protected_Objects.Entries is"}, {"sha": "7ff99e5e34dd623fe85de19680f713242d8e5cdc", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 12, "deletions": 50, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n --                                                                          --\n---     S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .    --\n---                             O P E R A T I O N S                          --\n+--               SYSTEM.TASKING.PROTECTED_OBJECTS.OPERATIONS                --\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,8 +31,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains all the extended primitives related to\n---  Protected_Objects with entries.\n+--  This package contains all extended primitives related to Protected_Objects\n+--  with entries.\n \n --  The handling of protected objects with no entries is done in\n --  System.Tasking.Protected_Objects, the simple routines for protected\n@@ -46,51 +45,18 @@\n --  Note: the compiler generates direct calls to this interface, via Rtsfind.\n \n with System.Task_Primitives.Operations;\n---  used for Initialize_Lock\n---           Write_Lock\n---           Unlock\n---           Get_Priority\n---           Wakeup\n-\n with System.Tasking.Entry_Calls;\n---  used for Wait_For_Completion\n---           Wait_Until_Abortable\n---           Wait_For_Completion_With_Timeout\n-\n-with System.Tasking.Initialization;\n---  Used for Defer_Abort,\n---           Undefer_Abort,\n---           Change_Base_Priority\n-\n-pragma Elaborate_All (System.Tasking.Initialization);\n---  This insures that tasking is initialized if any protected objects are\n---  created.\n-\n with System.Tasking.Queuing;\n---  used for Enqueue\n---           Broadcast_Program_Error\n---           Select_Protected_Entry_Call\n---           Onqueue\n---           Count_Waiting\n-\n with System.Tasking.Rendezvous;\n---  used for Task_Do_Or_Queue\n-\n with System.Tasking.Utilities;\n---  used for Exit_One_ATC_Level\n-\n with System.Tasking.Debug;\n---  used for Trace\n-\n with System.Parameters;\n---  used for Single_Lock\n---           Runtime_Traces\n-\n with System.Traces.Tasking;\n---  used for Send_Trace_Info\n-\n with System.Restrictions;\n---  used for Run_Time_Restrictions\n+\n+with System.Tasking.Initialization;\n+pragma Elaborate_All (System.Tasking.Initialization);\n+--  Insures that tasking is initialized if any protected objects are created\n \n package body System.Tasking.Protected_Objects.Operations is\n \n@@ -580,8 +546,7 @@ package body System.Tasking.Protected_Objects.Operations is\n       end if;\n \n       if Self_ID.ATC_Nesting_Level = ATC_Level'Last then\n-         Raise_Exception\n-           (Storage_Error'Identity, \"not enough ATC nesting levels\");\n+         raise Storage_Error with \"not enough ATC nesting levels\";\n       end if;\n \n       --  If pragma Detect_Blocking is active then Program_Error must be\n@@ -591,8 +556,7 @@ package body System.Tasking.Protected_Objects.Operations is\n       if Detect_Blocking\n         and then Self_ID.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       --  Self_ID.Deferral_Level should be 0, except when called from Finalize,\n@@ -981,8 +945,7 @@ package body System.Tasking.Protected_Objects.Operations is\n \n    begin\n       if Self_Id.ATC_Nesting_Level = ATC_Level'Last then\n-         Raise_Exception (Storage_Error'Identity,\n-           \"not enough ATC nesting levels\");\n+         raise Storage_Error with \"not enough ATC nesting levels\";\n       end if;\n \n       --  If pragma Detect_Blocking is active then Program_Error must be\n@@ -992,8 +955,7 @@ package body System.Tasking.Protected_Objects.Operations is\n       if Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       if Runtime_Traces then"}, {"sha": "8620c796f4394e87c503722b1d0e7caa01775aba", "filename": "gcc/ada/s-tpobop.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpobop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tpobop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n --                                                                          --\n---     S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .    --\n---                             O P E R A T I O N S                          --\n+--               SYSTEM.TASKING.PROTECTED_OBJECTS.OPERATIONS                --\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +44,6 @@\n --  Any changes to this interface may require corresponding compiler changes.\n \n with Ada.Exceptions;\n---  Used for Exception_Id\n \n with System.Tasking.Protected_Objects.Entries;\n "}, {"sha": "cfa7d3a7e7e57ae49e3b0ebc7c6ef13c81b4d128", "filename": "gcc/ada/s-tposen.adb", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                  --\n --                                                                          --\n---     S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .    --\n---                          S I N G L E _ E N T R Y                         --\n+--             SYSTEM.TASKING.PROTECTED_OBJECTS.SINGLE_ENTRY                --\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---         Copyright (C) 1998-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,8 +32,8 @@\n ------------------------------------------------------------------------------\n \n pragma Style_Checks (All_Checks);\n---  Turn off subprogram ordering check, since restricted GNARLI\n---  subprograms are gathered together at end.\n+--  Turn off subprogram ordering check, since restricted GNARLI subprograms are\n+--  gathered together at end.\n \n --  This package provides an optimized version of Protected_Objects.Operations\n --  and Protected_Objects.Entries making the following assumptions:\n@@ -60,19 +59,12 @@ pragma Polling (Off);\n --  operations. It can cause  infinite loops and other problems.\n \n pragma Suppress (All_Checks);\n-\n-with System.Task_Primitives.Operations;\n---  used for Self\n---           Finalize_Lock\n---           Write_Lock\n---           Unlock\n+--  Why is this required ???\n \n with Ada.Exceptions;\n---  used for Exception_Id\n---           Raise_Exception\n \n+with System.Task_Primitives.Operations;\n with System.Parameters;\n---  used for Single_Lock\n \n package body System.Tasking.Protected_Objects.Single_Entry is\n \n@@ -155,7 +147,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       use type Ada.Exceptions.Exception_Id;\n \n       E : constant Ada.Exceptions.Exception_Id :=\n-        Entry_Call.Exception_To_Raise;\n+            Entry_Call.Exception_To_Raise;\n \n    begin\n       if E /= Ada.Exceptions.Null_Id then\n@@ -560,8 +552,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       if Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       Lock_Entry (Object);\n@@ -686,8 +677,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       if Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n       STPO.Write_Lock (Object.L'Access, Ceiling_Violation);"}, {"sha": "f8bf9114409945680de83d64f1f21d94e373feb6", "filename": "gcc/ada/s-tposen.ads", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tposen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-tposen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.ads?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -2,12 +2,11 @@\n --                                                                          --\n --                GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                  --\n --                                                                          --\n---     S Y S T E M . T A S K I N G . P R O T E C T E D _ O B J E C T S .    --\n---                          S I N G L E _ E N T R Y                         --\n+--             SYSTEM.TASKING.PROTECTED_OBJECTS.SINGLE_ENTRY                --\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,13 +34,13 @@\n --  This package provides an optimized version of Protected_Objects.Operations\n --  and Protected_Objects.Entries making the following assumptions:\n --\n---  PO have only one entry\n---  There is only one caller at a time (No_Entry_Queue)\n---  There is no dynamic priority support (No_Dynamic_Priorities)\n---  No Abort Statements\n---    (No_Abort_Statements, Max_Asynchronous_Select_Nesting => 0)\n---  PO are at library level\n---  None of the tasks will terminate (no need for finalization)\n+--    PO have only one entry\n+--    There is only one caller at a time (No_Entry_Queue)\n+--    There is no dynamic priority support (No_Dynamic_Priorities)\n+--    No Abort Statements\n+--      (No_Abort_Statements, Max_Asynchronous_Select_Nesting => 0)\n+--    PO are at library level\n+--    None of the tasks will terminate (no need for finalization)\n --\n --  This interface is intended to be used in the ravenscar profile, the\n --  compiler is responsible for ensuring that the conditions mentioned above\n@@ -268,7 +267,7 @@ package System.Tasking.Protected_Objects.Single_Entry is\n \n    function Protected_Count_Entry (Object : Protection_Entry)\n      return Natural;\n-   --  Return the number of entry calls on Object (0 or 1).\n+   --  Return the number of entry calls on Object (0 or 1)\n \n    function Protected_Single_Entry_Caller (Object : Protection_Entry)\n      return Task_Id;"}, {"sha": "ead49f80649225c8240b8ff31e0219fc77d0739e", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,7 +56,7 @@ package body System.Val_Real is\n       P : Integer;\n       --  Local copy of string pointer\n \n-      Base   : Long_Long_Float;\n+      Base : Long_Long_Float;\n       --  Base value\n \n       Uval : Long_Long_Float;"}, {"sha": "50be73acd9f74041497c6b57839308cd662bce1c", "filename": "gcc/ada/s-valuti.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34/gcc%2Fada%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.adb?ref=366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -72,7 +72,6 @@ package body System.Val_Util is\n             S (J) := To_Upper (S (J));\n          end loop;\n       end if;\n-\n    end Normalize_String;\n \n    -------------------\n@@ -156,7 +155,6 @@ package body System.Val_Util is\n \n       Ptr.all := P;\n       return X;\n-\n    end Scan_Exponent;\n \n    --------------------"}]}