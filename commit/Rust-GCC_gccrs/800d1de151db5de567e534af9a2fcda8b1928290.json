{"sha": "800d1de151db5de567e534af9a2fcda8b1928290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwZDFkZTE1MWRiNWRlNTY3ZTUzNGFmOWEyZmNkYThiMTkyODI5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-22T22:28:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-22T22:28:18Z"}, "message": "Remove alpha-winnt code from the backend.\n\nFrom-SVN: r171312", "tree": {"sha": "142b188284244e1af1f13e11413d25988fb0f185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142b188284244e1af1f13e11413d25988fb0f185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/800d1de151db5de567e534af9a2fcda8b1928290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800d1de151db5de567e534af9a2fcda8b1928290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/800d1de151db5de567e534af9a2fcda8b1928290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800d1de151db5de567e534af9a2fcda8b1928290/comments", "author": null, "committer": null, "parents": [{"sha": "c59ddd2b82fd68d7976f70173d3eb9c0ef66bd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59ddd2b82fd68d7976f70173d3eb9c0ef66bd14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59ddd2b82fd68d7976f70173d3eb9c0ef66bd14"}], "stats": {"total": 130, "additions": 26, "deletions": 104}, "files": [{"sha": "5cc8ec56c592e001b0c06376b365d88f473316d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=800d1de151db5de567e534af9a2fcda8b1928290", "patch": "@@ -1,3 +1,16 @@\n+2011-03-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_expand_prologue): Don't test\n+\tTARGET_ABI_WINDOWS_NT.\n+\t(alpha_output_function_end_prologue): Likewise.\n+\t* config/alpha/alpha.h (TARGET_ABI_OSF): Likewise.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Likewise.\n+\t* config/alpha/alpha.md (call, call_value, tablejump): Likewise.\n+\t(trap, *movsi_nt_vms): Likewise.\n+\t(call_nt, call_value_nt, *call_nt_1, *call_value_nt_1): Remove.\n+\t(*tablejump_osf_nt_internal): Remove.\n+\t* config/alpha/predicates.md (input_operand): Only test Pmode.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/alpha/alpha.c (alpha_handle_option): Access target_flags"}, {"sha": "2b2c3dab682030b0683a22176f94cf7d765d6464", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=800d1de151db5de567e534af9a2fcda8b1928290", "patch": "@@ -7777,19 +7777,11 @@ alpha_expand_prologue (void)\n \t  emit_move_insn (last, const0_rtx);\n \t}\n \n-      if (TARGET_ABI_WINDOWS_NT || flag_stack_check)\n+      if (flag_stack_check)\n \t{\n-\t  /* For NT stack unwind (done by 'reverse execution'), it's\n-\t     not OK to take the result of a loop, even though the value\n-\t     is already in ptr, so we reload it via a single operation\n-\t     and subtract it to sp.\n-\n-\t     Same if -fstack-check is specified, because the probed stack\n-\t     size is not equal to the frame size.\n-\n-\t     Yes, that's correct -- we have to reload the whole constant\n-\t     into a temporary via ldah+lda then subtract from sp.  */\n-\n+\t  /* If -fstack-check is specified we have to load the entire\n+\t     constant into a register and subtract from the sp in one go,\n+\t     because the probed stack size is not equal to the frame size.  */\n \t  HOST_WIDE_INT lo, hi;\n \t  lo = ((frame_size & 0xffff) ^ 0x8000) - 0x8000;\n \t  hi = frame_size - lo;\n@@ -8142,8 +8134,6 @@ alpha_output_function_end_prologue (FILE *file)\n {\n   if (TARGET_ABI_OPEN_VMS)\n     fputs (\"\\t.prologue\\n\", file);\n-  else if (TARGET_ABI_WINDOWS_NT)\n-    fputs (\"\\t.prologue 0\\n\", file);\n   else if (!flag_inhibit_size_directive)\n     fprintf (file, \"\\t.prologue %d\\n\",\n \t     alpha_function_needs_gp || cfun->is_thunk);"}, {"sha": "14fc731ef24b604bb610fc27aaf6c3dd14fc2057", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=800d1de151db5de567e534af9a2fcda8b1928290", "patch": "@@ -146,9 +146,8 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define TARGET_FP\t(!TARGET_SOFT_FP)\n \n /* These are for target os support and cannot be changed at runtime.  */\n-#define TARGET_ABI_WINDOWS_NT 0\n-#define TARGET_ABI_OPEN_VMS 0\n-#define TARGET_ABI_OSF (!TARGET_ABI_WINDOWS_NT && !TARGET_ABI_OPEN_VMS)\n+#define TARGET_ABI_OPEN_VMS\t0\n+#define TARGET_ABI_OSF\t\t(!TARGET_ABI_OPEN_VMS)\n \n #ifndef TARGET_AS_CAN_SUBTRACT_LABELS\n #define TARGET_AS_CAN_SUBTRACT_LABELS TARGET_GAS\n@@ -1123,8 +1122,7 @@ do {\t\t\t\t\t\t\\\n /* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.%s $L%d\\n\", TARGET_ABI_WINDOWS_NT ? \"long\" : \"gprel32\", \\\n-\t   (VALUE))\n+  fprintf (FILE, \"\\t.gprel32 $L%d\\n\", (VALUE))\n \n /* This is how to output an assembler line\n    that says to advance the location counter"}, {"sha": "d25af88a11473daa7d785131efdba5e122bcc853", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 5, "deletions": 82, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=800d1de151db5de567e534af9a2fcda8b1928290", "patch": "@@ -4252,9 +4252,7 @@\n    (use (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  if (TARGET_ABI_WINDOWS_NT)\n-    emit_call_insn (gen_call_nt (operands[0], operands[1]));\n-  else if (TARGET_ABI_OPEN_VMS)\n+  if (TARGET_ABI_OPEN_VMS)\n     emit_call_insn (gen_call_vms (operands[0], operands[2]));\n   else\n     emit_call_insn (gen_call_osf (operands[0], operands[1]));\n@@ -4285,19 +4283,6 @@\n     operands[0] = copy_to_mode_reg (Pmode, operands[0]);\n })\n \n-(define_expand \"call_nt\"\n-  [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (clobber (reg:DI 26))])]\n-  \"\"\n-{\n-  gcc_assert (MEM_P (operands[0]));\n-\n-  operands[0] = XEXP (operands[0], 0);\n-  if (GET_CODE (operands[0]) != SYMBOL_REF && !REG_P (operands[0]))\n-    operands[0] = force_reg (DImode, operands[0]);\n-})\n-\n ;;\n ;; call openvms/alpha\n ;; op 0: symbol ref for called function\n@@ -4344,9 +4329,7 @@\n    (use (match_operand 4 \"\" \"\"))]\n   \"\"\n {\n-  if (TARGET_ABI_WINDOWS_NT)\n-    emit_call_insn (gen_call_value_nt (operands[0], operands[1], operands[2]));\n-  else if (TARGET_ABI_OPEN_VMS)\n+  if (TARGET_ABI_OPEN_VMS)\n     emit_call_insn (gen_call_value_vms (operands[0], operands[1],\n \t\t\t\t\toperands[3]));\n   else\n@@ -4381,20 +4364,6 @@\n     operands[1] = copy_to_mode_reg (Pmode, operands[1]);\n })\n \n-(define_expand \"call_value_nt\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (clobber (reg:DI 26))])]\n-  \"\"\n-{\n-  gcc_assert (MEM_P (operands[1]));\n-\n-  operands[1] = XEXP (operands[1], 0);\n-  if (GET_CODE (operands[1]) != SYMBOL_REF && !REG_P (operands[1]))\n-    operands[1] = force_reg (DImode, operands[1]);\n-})\n-\n (define_expand \"call_value_vms\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:DI (match_operand:DI 1 \"\" \"\"))\n@@ -4601,18 +4570,6 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,8\")])\n \n-(define_insn \"*call_nt_1\"\n-  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,s\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:DI 26))]\n-  \"TARGET_ABI_WINDOWS_NT\"\n-  \"@\n-   jsr $26,(%0)\n-   bsr $26,%0\n-   jsr $26,%0\"\n-  [(set_attr \"type\" \"jsr\")\n-   (set_attr \"length\" \"*,*,12\")])\n-\n ; GAS relies on the order and position of instructions output below in order\n ; to generate relocs for VMS link to potentially optimize the call.\n ; Please do not molest.\n@@ -4708,13 +4665,7 @@\n \t      (use (label_ref:DI (match_operand 1 \"\" \"\")))])]\n   \"\"\n {\n-  if (TARGET_ABI_WINDOWS_NT)\n-    {\n-      rtx dest = gen_reg_rtx (DImode);\n-      emit_insn (gen_extendsidi2 (dest, operands[0]));\n-      operands[0] = dest;\n-    }\n-  else if (TARGET_ABI_OSF)\n+  if (TARGET_ABI_OSF)\n     {\n       rtx dest = gen_reg_rtx (DImode);\n       emit_insn (gen_extendsidi2 (dest, operands[0]));\n@@ -4723,18 +4674,6 @@\n     }\n })\n \n-(define_insn \"*tablejump_osf_nt_internal\"\n-  [(set (pc)\n-\t(match_operand:DI 0 \"register_operand\" \"r\"))\n-   (use (label_ref:DI (match_operand 1 \"\" \"\")))]\n-  \"(TARGET_ABI_OSF || TARGET_ABI_WINDOWS_NT)\n-   && alpha_tablejump_addr_vec (insn)\"\n-{\n-  operands[2] = alpha_tablejump_best_label (insn);\n-  return \"jmp $31,(%0),%2\";\n-}\n-  [(set_attr \"type\" \"ibr\")])\n-\n (define_insn \"*tablejump_internal\"\n   [(set (pc)\n \t(match_operand:DI 0 \"register_operand\" \"r\"))\n@@ -4752,12 +4691,9 @@\n   [(set_attr \"type\" \"callpal\")])\n \n ;; BUGCHK is documented common to OSF/1 and VMS PALcode.\n-;; NT does not document anything at 0x81 -- presumably it would generate\n-;; the equivalent of SIGILL, but this isn't that important.\n-;; ??? Presuming unicosmk uses either OSF/1 or VMS PALcode.\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]\n-  \"!TARGET_ABI_WINDOWS_NT\"\n+  \"\"\n   \"call_pal 0x81\"\n   [(set_attr \"type\" \"callpal\")])\n \n@@ -4972,7 +4908,7 @@\n (define_insn \"*movsi_nt_vms\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,r,m\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,s,n,m,rJ\"))]\n-  \"(TARGET_ABI_WINDOWS_NT || TARGET_ABI_OPEN_VMS)\n+  \"TARGET_ABI_OPEN_VMS\n     && (register_operand (operands[0], SImode)\n         || reg_or_0_operand (operands[1], SImode))\"\n   \"@\n@@ -7670,19 +7606,6 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,8\")])\n \n-(define_insn \"*call_value_nt_1\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,R,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI 26))]\n-  \"TARGET_ABI_WINDOWS_NT\"\n-  \"@\n-   jsr $26,(%1)\n-   bsr $26,%1\n-   jsr $26,%1\"\n-  [(set_attr \"type\" \"jsr\")\n-   (set_attr \"length\" \"*,*,12\")])\n-\n ; GAS relies on the order and position of instructions output below in order\n ; to generate relocs for VMS link to potentially optimize the call.\n ; Please do not molest."}, {"sha": "9514b8a1272118c43261e74e7fa04089d7858aa0", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800d1de151db5de567e534af9a2fcda8b1928290/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=800d1de151db5de567e534af9a2fcda8b1928290", "patch": "@@ -195,9 +195,7 @@\n \t\t  || gotdtp_symbolic_operand (op, mode)\n \t\t  || gottp_symbolic_operand (op, mode));\n \t}\n-\n-      /* This handles both the Windows/NT and OSF cases.  */\n-      return mode == ptr_mode || mode == DImode;\n+      return mode == Pmode;\n \n     case HIGH:\n       return (TARGET_EXPLICIT_RELOCS"}]}