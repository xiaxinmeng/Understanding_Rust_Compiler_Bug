{"sha": "5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwZjAwOWM5MjZjYzc4ZmIxNWYxYzVjZmE0NjA3MWE0MzU5YzllOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2014-05-13T13:51:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-13T13:51:32Z"}, "message": "fold-const.c (optimize_bit_field_compare): Use wi:: operations instead of const_binop.\n\ngcc/\n\t* fold-const.c (optimize_bit_field_compare): Use wi:: operations\n\tinstead of const_binop.\n\t(fold_binary_loc): Likewise.\n\nFrom-SVN: r210378", "tree": {"sha": "a2681403400c9db983ff2514e2db4f046aee6a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2681403400c9db983ff2514e2db4f046aee6a3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9/comments", "author": null, "committer": null, "parents": [{"sha": "460d1e22353835f4cf8749aedd07387185146eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460d1e22353835f4cf8749aedd07387185146eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460d1e22353835f4cf8749aedd07387185146eb6"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "0561b7b594e30bf4a2a0d7050ef9f85ac6179f88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "patch": "@@ -1,3 +1,9 @@\n+2014-05-13  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* fold-const.c (optimize_bit_field_compare): Use wi:: operations\n+\tinstead of const_binop.\n+\t(fold_binary_loc): Likewise.\n+\n 2014-05-13  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* tree-dfa.h (get_addr_base_and_unit_offset_1): Update array index"}, {"sha": "5e064dfa98ce52bceafa94fdab642b7ebe521be4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0f009c926cc78fb15f1c5cfa46071a4359c9e9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5c0f009c926cc78fb15f1c5cfa46071a4359c9e9", "patch": "@@ -3444,7 +3444,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n {\n   HOST_WIDE_INT lbitpos, lbitsize, rbitpos, rbitsize, nbitpos, nbitsize;\n   tree type = TREE_TYPE (lhs);\n-  tree signed_type, unsigned_type;\n+  tree unsigned_type;\n   int const_p = TREE_CODE (rhs) == INTEGER_CST;\n   enum machine_mode lmode, rmode, nmode;\n   int lunsignedp, runsignedp;\n@@ -3489,7 +3489,6 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \n   /* Set signed and unsigned types of the precision of this mode for the\n      shifts below.  */\n-  signed_type = lang_hooks.types.type_for_mode (nmode, 0);\n   unsigned_type = lang_hooks.types.type_for_mode (nmode, 1);\n \n   /* Compute the bit position and size for the new reference and our offset\n@@ -3538,10 +3537,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \n   if (lunsignedp)\n     {\n-      if (! integer_zerop (const_binop (RSHIFT_EXPR,\n-\t\t\t\t\tfold_convert_loc (loc,\n-\t\t\t\t\t\t\t  unsigned_type, rhs),\n-\t\t\t\t\tsize_int (lbitsize))))\n+      if (wi::lrshift (rhs, lbitsize) != 0)\n \t{\n \t  warning (0, \"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n@@ -3550,10 +3546,8 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n     }\n   else\n     {\n-      tree tem = const_binop (RSHIFT_EXPR,\n-\t\t\t      fold_convert_loc (loc, signed_type, rhs),\n-\t\t\t      size_int (lbitsize - 1));\n-      if (! integer_zerop (tem) && ! integer_all_onesp (tem))\n+      wide_int tem = wi::arshift (rhs, lbitsize - 1);\n+      if (tem != 0 && tem != -1)\n \t{\n \t  warning (0, \"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n@@ -10356,9 +10350,8 @@ fold_binary_loc (location_t loc,\n \t      && TREE_CODE (arg1) == BIT_AND_EXPR\n \t      && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n \t      && TREE_CODE (TREE_OPERAND (arg1, 1)) == INTEGER_CST\n-\t      && integer_zerop (const_binop (BIT_AND_EXPR,\n-\t\t\t\t\t     TREE_OPERAND (arg0, 1),\n-\t\t\t\t\t     TREE_OPERAND (arg1, 1))))\n+\t      && wi::bit_and (TREE_OPERAND (arg0, 1),\n+\t\t\t      TREE_OPERAND (arg1, 1)) == 0)\n \t    {\n \t      code = BIT_IOR_EXPR;\n \t      goto bit_ior;\n@@ -11478,9 +11471,8 @@ fold_binary_loc (location_t loc,\n \t  && TREE_CODE (arg1) == BIT_AND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == INTEGER_CST\n-\t  && integer_zerop (const_binop (BIT_AND_EXPR,\n-\t\t\t\t\t TREE_OPERAND (arg0, 1),\n-\t\t\t\t\t TREE_OPERAND (arg1, 1))))\n+\t  && wi::bit_and (TREE_OPERAND (arg0, 1),\n+\t\t\t  TREE_OPERAND (arg1, 1)) == 0)\n \t{\n \t  code = BIT_IOR_EXPR;\n \t  goto bit_ior;"}]}