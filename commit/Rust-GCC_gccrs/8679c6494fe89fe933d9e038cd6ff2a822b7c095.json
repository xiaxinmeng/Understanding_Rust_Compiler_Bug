{"sha": "8679c6494fe89fe933d9e038cd6ff2a822b7c095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY3OWM2NDk0ZmU4OWZlOTMzZDllMDM4Y2Q2ZmYyYTgyMmI3YzA5NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-06T18:38:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-06T18:38:27Z"}, "message": "loop.c (loop_dump_aux): Do not print RTL when not available.\n\n\t* loop.c (loop_dump_aux): Do not print RTL when not available.\n\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates): Do not use\n\tfrontend specific type nodes.\n\t(produce_memory_decl_rtl): Break out from ...\n\t(prepare_decl_rtl): ... here.  Handle ADDR_EXPR correctly.\n\t(get_computation_at): Avoid random tree sharing.\n\t(tree_ssa_iv_optimize): Verify tree sharing; dump loops.\n\nFrom-SVN: r87123", "tree": {"sha": "f72c63e6697abafff17258561de44474a212859b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72c63e6697abafff17258561de44474a212859b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8679c6494fe89fe933d9e038cd6ff2a822b7c095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8679c6494fe89fe933d9e038cd6ff2a822b7c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8679c6494fe89fe933d9e038cd6ff2a822b7c095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8679c6494fe89fe933d9e038cd6ff2a822b7c095/comments", "author": null, "committer": null, "parents": [{"sha": "93f8bd9e6ec8df413b53d840b5b44e8f5d18f249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f8bd9e6ec8df413b53d840b5b44e8f5d18f249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f8bd9e6ec8df413b53d840b5b44e8f5d18f249"}], "stats": {"total": 79, "additions": 57, "deletions": 22}, "files": [{"sha": "89bb645d3bbaac53c31bbf7ad3256931c12305c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8679c6494fe89fe933d9e038cd6ff2a822b7c095", "patch": "@@ -1,3 +1,13 @@\n+2004-09-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (loop_dump_aux): Do not print RTL when not available.\n+\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates): Do not use\n+\tfrontend specific type nodes.\n+\t(produce_memory_decl_rtl): Break out from ...\n+\t(prepare_decl_rtl): ... here.  Handle ADDR_EXPR correctly.\n+\t(get_computation_at): Avoid random tree sharing.\n+\t(tree_ssa_iv_optimize): Verify tree sharing; dump loops.\n+\n 2004-09-06  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (rtl.o, bitmap.o): Correct dependencies, remove"}, {"sha": "8f1ace8f1c453d8ce80381ba25b81c7e41869dde", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8679c6494fe89fe933d9e038cd6ff2a822b7c095", "patch": "@@ -10645,7 +10645,7 @@ loop_dump_aux (const struct loop *loop, FILE *file,\n {\n   rtx label;\n \n-  if (! loop || ! file)\n+  if (! loop || ! file || !BB_HEAD (loop->first))\n     return;\n \n   /* Print diagnostics to compare our concept of a loop with"}, {"sha": "0464c73641bb4f3fd0877ce175e1719f3c2f4efc", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8679c6494fe89fe933d9e038cd6ff2a822b7c095/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=8679c6494fe89fe933d9e038cd6ff2a822b7c095", "patch": "@@ -1561,15 +1561,16 @@ add_standard_iv_candidates (struct ivopts_data *data)\n {\n   /* Add 0 + 1 * iteration candidate.  */\n   add_candidate (data,\n-\t\t fold_convert (unsigned_type_node, integer_zero_node),\n-      \t\t fold_convert (unsigned_type_node, integer_one_node),\n+\t\t build_int_cst (unsigned_intSI_type_node, 0),\n+      \t\t build_int_cst (unsigned_intSI_type_node, 1),\n \t\t true, NULL);\n \n-  /* The same for a long type.  */\n-  add_candidate (data,\n-\t\t fold_convert (long_unsigned_type_node, integer_zero_node),\n-\t\t fold_convert (long_unsigned_type_node, integer_one_node),\n-\t\t true, NULL);\n+  /* The same for a long type if it is still fast enought.  */\n+  if (BITS_PER_WORD > 32)\n+    add_candidate (data,\n+\t\t   build_int_cst (unsigned_intDI_type_node, 0),\n+\t\t   build_int_cst (unsigned_intDI_type_node, 1),\n+\t\t   true, NULL);\n }\n \n \n@@ -1883,6 +1884,24 @@ seq_cost (rtx seq)\n   return cost;\n }\n \n+/* Produce DECL_RTL for object obj so it looks like it is stored in memory.  */\n+static rtx\n+produce_memory_decl_rtl (tree obj, int *regno)\n+{\n+  rtx x;\n+  if (!obj)\n+    abort ();\n+  if (TREE_STATIC (obj) || DECL_EXTERNAL (obj))\n+    {\n+      const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (obj));\n+      x = gen_rtx_SYMBOL_REF (Pmode, name);\n+    }\n+  else\n+    x = gen_raw_REG (Pmode, (*regno)++);\n+\n+  return gen_rtx_MEM (DECL_MODE (obj), x);\n+}\n+\n /* Prepares decl_rtl for variables referred in *EXPR_P.  Callback for\n    walk_tree.  DATA contains the actual fake register number.  */\n \n@@ -1895,6 +1914,17 @@ prepare_decl_rtl (tree *expr_p, int *ws, void *data)\n \n   switch (TREE_CODE (*expr_p))\n     {\n+    case ADDR_EXPR:\n+      for (expr_p = &TREE_OPERAND (*expr_p, 0);\n+\t   (handled_component_p (*expr_p)\n+\t    || TREE_CODE (*expr_p) == REALPART_EXPR\n+\t    || TREE_CODE (*expr_p) == IMAGPART_EXPR);\n+\t   expr_p = &TREE_OPERAND (*expr_p, 0));\n+      obj = *expr_p;\n+      if (DECL_P (obj))\n+        x = produce_memory_decl_rtl (obj, regno);\n+      break;\n+\n     case SSA_NAME:\n       *ws = 0;\n       obj = SSA_NAME_VAR (*expr_p);\n@@ -1912,18 +1942,7 @@ prepare_decl_rtl (tree *expr_p, int *ws, void *data)\n \tbreak;\n \n       if (DECL_MODE (obj) == BLKmode)\n-\t{\n-\t  if (TREE_STATIC (obj)\n-\t      || DECL_EXTERNAL (obj))\n-\t    {\n-\t      const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (obj));\n-\t      x = gen_rtx_SYMBOL_REF (Pmode, name);\n-\t    }\n-\t  else\n-\t    x = gen_raw_REG (Pmode, (*regno)++);\n-\n-\t  x = gen_rtx_MEM (DECL_MODE (obj), x);\n-\t}\n+\tx = produce_memory_decl_rtl (obj, regno);\n       else\n \tx = gen_raw_REG (DECL_MODE (obj), (*regno)++);\n \n@@ -1983,8 +2002,10 @@ static tree\n get_computation_at (struct loop *loop,\n \t\t    struct iv_use *use, struct iv_cand *cand, tree at)\n {\n-  tree ubase = use->iv->base, ustep = use->iv->step;\n-  tree cbase = cand->iv->base, cstep = cand->iv->step;\n+  tree ubase = unsave_expr_now (use->iv->base);\n+  tree ustep = unsave_expr_now (use->iv->step);\n+  tree cbase = unsave_expr_now (cand->iv->base);\n+  tree cstep = unsave_expr_now (cand->iv->step);\n   tree utype = TREE_TYPE (ubase), ctype = TREE_TYPE (cbase);\n   tree uutype;\n   tree expr, delta;\n@@ -4387,15 +4408,19 @@ tree_ssa_iv_optimize (struct loops *loops)\n \n #ifdef ENABLE_CHECKING\n   verify_loop_closed_ssa ();\n+  verify_stmts ();\n #endif\n \n   /* Scan the loops, inner ones first.  */\n   while (loop != loops->tree_root)\n     {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tflow_loop_dump (loop, dump_file, NULL, 1);\n       if (tree_ssa_iv_optimize_loop (&data, loop))\n \t{\n #ifdef ENABLE_CHECKING\n \t  verify_loop_closed_ssa ();\n+          verify_stmts ();\n #endif\n \t}\n "}]}