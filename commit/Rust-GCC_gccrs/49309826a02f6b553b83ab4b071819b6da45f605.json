{"sha": "49309826a02f6b553b83ab4b071819b6da45f605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzMDk4MjZhMDJmNmI1NTNiODNhYjRiMDcxODE5YjZkYTQ1ZjYwNQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-16T14:10:12Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-16T14:10:12Z"}, "message": "re PR fortran/34952 (Document lack of support for ENCODE/DECODE)\n\n\tPR fortran/34952\n\t* gfortran.texi: Create new section for unimplemented extensions.\n\tAdd \"STRUCTURE and RECORD\" and \"ENCODE and DECODE statements\".\n\tRemove \"smaller projects\" list. Fix a few typos.\n\nFrom-SVN: r132366", "tree": {"sha": "4f4ecae4af90de7a96d51d3ed4bcf5792bf8dc8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4ecae4af90de7a96d51d3ed4bcf5792bf8dc8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49309826a02f6b553b83ab4b071819b6da45f605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49309826a02f6b553b83ab4b071819b6da45f605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49309826a02f6b553b83ab4b071819b6da45f605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49309826a02f6b553b83ab4b071819b6da45f605/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ab737796e2b4ef8be5b890a491ab4f84eef1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ab737796e2b4ef8be5b890a491ab4f84eef1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ab737796e2b4ef8be5b890a491ab4f84eef1de"}], "stats": {"total": 263, "additions": 220, "deletions": 43}, "files": [{"sha": "c23b81f5e30462094994f10ecaa299580a6b0839", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49309826a02f6b553b83ab4b071819b6da45f605/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49309826a02f6b553b83ab4b071819b6da45f605/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=49309826a02f6b553b83ab4b071819b6da45f605", "patch": "@@ -1,3 +1,10 @@\n+2008-02-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/34952\n+\t* gfortran.texi: Create new section for unimplemented extensions.\n+\tAdd \"STRUCTURE and RECORD\" and \"ENCODE and DECODE statements\".\n+\tRemove \"smaller projects\" list. Fix a few typos.\n+\n 2008-02-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* intrinsic.texi: Rename INDEX node to avoid clashing with"}, {"sha": "87be7e8c3aa2f80f437d8ead67e7eaf3d970dedc", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 213, "deletions": 43, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49309826a02f6b553b83ab4b071819b6da45f605/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49309826a02f6b553b83ab4b071819b6da45f605/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=49309826a02f6b553b83ab4b071819b6da45f605", "patch": "@@ -613,8 +613,7 @@ the first letter is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.\n This is the default.\n \n @node GFORTRAN_UNBUFFERED_PRECONNECTED\n-@section @env{GFORTRAN_UNBUFFERED_PRECONNECTED}---Don't buffer I/O on\n-preconnected units\n+@section @env{GFORTRAN_UNBUFFERED_PRECONNECTED}---Don't buffer I/O on preconnected units\n \n The environment variable named @env{GFORTRAN_UNBUFFERED_PRECONNECTED} controls\n whether I/O on a preconnected unit (i.e STDOUT or STDERR) is unbuffered.  If \n@@ -877,7 +876,24 @@ BOZ as argument of INT, REAL, DBLE and CMPLX.\n \n @node Extensions\n @chapter Extensions\n-@cindex Extension\n+@cindex extensions\n+\n+The two sections below detail the extensions to standard Fortran that are\n+implemented in GNU Fortran, as well as some of the popular or\n+historically important extensions that are not (or not yet) implemented.\n+For the latter case, we explain the alternatives available to GNU Fortran\n+users, including replacement by standard-conforming code or GNU\n+extensions.\n+\n+@menu\n+* Extensions implemented in GNU Fortran::\n+* Extensions not implemented in GNU Fortran::\n+@end menu\n+\n+\n+@node Extensions implemented in GNU Fortran\n+@section Extensions implemented in GNU Fortran\n+@cindex extensions, implemented\n \n GNU Fortran implements a number of extensions over standard\n Fortran. This chapter contains information on their syntax and\n@@ -910,7 +926,7 @@ of extensions, and @option{-std=legacy} allows both without warning.\n @end menu\n \n @node Old-style kind specifications\n-@section Old-style kind specifications\n+@subsection Old-style kind specifications\n @cindex kind, old-style\n \n GNU Fortran allows old-style kind specifications in declarations. These\n@@ -934,7 +950,7 @@ where @code{k} is equal to @code{size} for most types, but is equal to\n @code{size/2} for the @code{COMPLEX} type.\n \n @node Old-style variable initialization\n-@section Old-style variable initialization\n+@subsection Old-style variable initialization\n \n GNU Fortran allows old-style initialization of variables of the\n form:\n@@ -968,7 +984,7 @@ or in @code{DATA} statements automatically acquire the @code{SAVE}\n attribute.\n \n @node Extensions to namelist\n-@section Extensions to namelist\n+@subsection Extensions to namelist\n @cindex Namelist\n \n GNU Fortran fully supports the Fortran 95 standard for namelist I/O\n@@ -1037,7 +1053,7 @@ elements will be given the values 1.00 and 2.00.\n @end smallexample\n \n @node X format descriptor without count field\n-@section @code{X} format descriptor without count field\n+@subsection @code{X} format descriptor without count field\n \n To support legacy codes, GNU Fortran permits the count field of the\n @code{X} edit descriptor in @code{FORMAT} statements to be omitted.\n@@ -1049,7 +1065,7 @@ When omitted, the count is implicitly assumed to be one.\n @end smallexample\n \n @node Commas in FORMAT specifications\n-@section Commas in @code{FORMAT} specifications\n+@subsection Commas in @code{FORMAT} specifications\n \n To support legacy codes, GNU Fortran allows the comma separator\n to be omitted immediately before and after character string edit\n@@ -1062,7 +1078,7 @@ descriptors in @code{FORMAT} statements.\n \n \n @node Missing period in FORMAT specifications\n-@section Missing period in @code{FORMAT} specifications\n+@subsection Missing period in @code{FORMAT} specifications\n \n To support legacy codes, GNU Fortran allows missing periods in format\n specifications if and only if @option{-std=legacy} is given on the\n@@ -1076,15 +1092,15 @@ discouraged.\n @end smallexample\n \n @node I/O item lists\n-@section I/O item lists\n+@subsection I/O item lists\n @cindex I/O item lists\n \n To support legacy codes, GNU Fortran allows the input item list\n of the @code{READ} statement, and the output item lists of the\n @code{WRITE} and @code{PRINT} statements, to start with a comma.\n \n @node BOZ literal constants\n-@section BOZ literal constants\n+@subsection BOZ literal constants\n @cindex BOZ literal constants\n \n Besides decimal constants, Fortran also supports binary (@code{b}),\n@@ -1133,14 +1149,14 @@ option can be used as a workaround for legacy code that initializes\n integers in this manner.\n \n @node Real array indices\n-@section Real array indices\n+@subsection Real array indices\n @cindex array, indices of type real\n \n As an extension, GNU Fortran allows the use of @code{REAL} expressions\n or variables as array indices.\n \n @node Unary operators\n-@section Unary operators\n+@subsection Unary operators\n @cindex operators, unary\n \n As an extension, GNU Fortran allows unary plus and unary minus operators\n@@ -1152,7 +1168,7 @@ the need for parenthesis.\n @end smallexample\n \n @node Implicitly convert LOGICAL and INTEGER values\n-@section Implicitly convert @code{LOGICAL} and @code{INTEGER} values\n+@subsection Implicitly convert @code{LOGICAL} and @code{INTEGER} values\n @cindex conversion, to integer\n @cindex conversion, to logical\n \n@@ -1178,7 +1194,7 @@ However, there is no implicit conversion of @code{INTEGER} values in\n in I/O operations.\n \n @node Hollerith constants support\n-@section Hollerith constants support\n+@subsection Hollerith constants support\n @cindex Hollerith constants\n \n GNU Fortran supports Hollerith constants in assignments, function\n@@ -1220,8 +1236,8 @@ obtained by using the @code{TRANSFER} statement, as in this example.\n \n \n @node Cray pointers\n-@section Cray pointers\n-@cindex pointer, cray\n+@subsection Cray pointers\n+@cindex pointer, Cray\n \n Cray pointers are part of a non-standard extension that provides a\n C-like pointer in Fortran.  This is accomplished through a pair of\n@@ -1348,8 +1364,8 @@ variables in the invoked function.  Subsequent changes to the pointer\n will not change the base address of the array that was passed.\n \n @node CONVERT specifier\n-@section CONVERT specifier\n-@cindex CONVERT specifier\n+@subsection @code{CONVERT} specifier\n+@cindex @code{CONVERT} specifier\n \n GNU Fortran allows the conversion of unformatted data between little-\n and big-endian representation to facilitate moving of data\n@@ -1397,7 +1413,7 @@ to you, it is best if you use this only for data that needs to be\n portable.\n \n @node OpenMP\n-@section OpenMP\n+@subsection OpenMP\n @cindex OpenMP\n \n OpenMP (Open Multi-Processing) is an application programming\n@@ -1456,11 +1472,11 @@ thus not recommended.\n @end itemize\n \n @node Argument list functions\n-@section Argument list functions %VAL, %REF and %LOC\n+@subsection Argument list functions @code{%VAL}, @code{%REF} and @code{%LOC}\n @cindex argument list functions\n-@cindex %VAL\n-@cindex %REF\n-@cindex %LOC\n+@cindex @code{%VAL}\n+@cindex @code{%REF}\n+@cindex @code{%LOC}\n \n GNU Fortran supports argument list functions @code{%VAL}, @code{%REF} \n and @code{%LOC} statements, for backward compatibility with g77. \n@@ -1496,6 +1512,168 @@ For details refer to the g77 manual\n Also, the gfortran testsuite c_by_val.f and its partner c_by_val.c are\n worth a look.\n \n+\n+\n+@node Extensions not implemented in GNU Fortran\n+@section Extensions not implemented in GNU Fortran\n+@cindex extensions, not implemented\n+\n+The long history of the Fortran language, its wide use and broad\n+userbase, the large number of different compiler vendors and the lack of\n+some features crucial to users in the first standards have lead to the\n+existence of an important number of extensions to the language. While\n+some of the most useful or popular extensions are supported by the GNU\n+Fortran compiler, not all existing extensions are supported. This section\n+aims at listing these extensions and offering advice on how best make\n+code that uses them running with the GNU Fortran compiler.\n+\n+@c More can be found here:\n+@c   -- http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/Missing-Features.html\n+@c   -- the list of fortran and libgfortran bugs closed as WONTFIX:\n+@c      http://tinyurl.com/2u4h5y\n+\n+@menu\n+* STRUCTURE and RECORD::\n+@c * UNION and MAP::\n+* ENCODE and DECODE statements::\n+@c * Expressions in FORMAT statements::\n+@c * Q edit descriptor::\n+@c * AUTOMATIC statement::\n+@c * TYPE and ACCEPT I/O Statements::\n+@c * .XOR. operator::\n+@c * CARRIAGECONTROL, DEFAULTFILE, DISPOSE and RECORDTYPE I/O specifiers::\n+@c * Omitted arguments in procedure call:\n+@end menu\n+\n+\n+@node STRUCTURE and RECORD\n+@subsection @code{STRUCTURE} and @code{RECORD}\n+@cindex @code{STRUCTURE}\n+@cindex @code{RECORD}\n+\n+Structures are user-defined aggregate data types; this functionality was\n+standardized in Fortran 90 with an different syntax, under the name of\n+``derived types''. Here is an example of code using the non portable\n+structure syntax:\n+\n+@example\n+! Declaring a structure named ``item'' and containing three fields:\n+! an integer ID, an description string and a floating-point price.\n+STRUCTURE /item/\n+  INTEGER id\n+  CHARACTER(LEN=200) description\n+  REAL price\n+END STRUCTURE\n+\n+! Define two variables, an single record of type ``item''\n+! named ``pear'', and an array of items named ``store_catalog''\n+RECORD /item/ pear, store_catalog(100)\n+\n+! We can directly access the fields of both variables\n+pear.id = 92316\n+pear.description = \"juicy D'Anjou pear\"\n+pear.price = 0.15\n+store_catalog(7).id = 7831\n+store_catalog(7).description = \"milk bottle\"\n+store_catalog(7).price = 1.2\n+\n+! We can also manipulates the whole structure\n+store_catalog(12) = pear\n+print *, store_catalog(12)\n+@end example\n+\n+@noindent\n+This code can easily be rewritten in the Fortran 90 syntax as following:\n+\n+@example\n+! ``STRUCTURE /name/ ... END STRUCTURE'' becomes\n+! ``TYPE name ... END TYPE''\n+TYPE item\n+  INTEGER id\n+  CHARACTER(LEN=200) description\n+  REAL price\n+END TYPE\n+\n+! ``RECORD /name/ variable'' becomes ``TYPE(name) variable''\n+TYPE(item) pear, store_catalog(100)\n+\n+! Instead of using a dot (.) to access fields of a record, the\n+! standard syntax uses a percent sign (%)\n+pear%id = 92316\n+pear%description = \"juicy D'Anjou pear\"\n+pear%price = 0.15\n+store_catalog(7)%id = 7831\n+store_catalog(7)%description = \"milk bottle\"\n+store_catalog(7)%price = 1.2\n+\n+! Assignments of a whole variable don't change\n+store_catalog(12) = pear\n+print *, store_catalog(12)\n+@end example\n+\n+\n+@c @node UNION and MAP\n+@c @subsection @code{UNION} and @code{MAP}\n+@c @cindex @code{UNION}\n+@c @cindex @code{MAP}\n+@c\n+@c For help writing this one, see\n+@c http://www.eng.umd.edu/~nsw/ench250/fortran1.htm#UNION and\n+@c http://www.tacc.utexas.edu/services/userguides/pgi/pgiws_ug/pgi32u06.htm\n+\n+\n+@node ENCODE and DECODE statements\n+@subsection @code{ENCODE} and @code{DECODE} statements\n+@cindex @code{ENCODE}\n+@cindex @code{DECODE}\n+\n+GNU Fortran doesn't support the @code{ENCODE} and @code{DECODE}\n+statements.  These statements are best replaced by @code{READ} and\n+@code{WRITE} statements involving internal files (@code{CHARACTER}\n+variables and arrays), which have been part of the Fortran standard since\n+Fortran 77. For example, replace a code fragment like\n+\n+@smallexample\n+      INTEGER*1 LINE(80)\n+      REAL A, B, C\n+c     ... Code that sets LINE\n+      DECODE (80, 9000, LINE) A, B, C\n+ 9000 FORMAT (1X, 3(F10.5))\n+@end smallexample\n+\n+@noindent\n+with the following:\n+\n+@smallexample\n+      CHARACTER(LEN=80) LINE\n+      REAL A, B, C\n+c     ... Code that sets LINE\n+      READ (UNIT=LINE, FMT=9000) A, B, C\n+ 9000 FORMAT (1X, 3(F10.5))\n+@end smallexample\n+\n+Similarly, replace a code fragment like\n+\n+@smallexample\n+      INTEGER*1 LINE(80)\n+      REAL A, B, C\n+c     ... Code that sets A, B and C\n+      ENCODE (80, 9000, LINE) A, B, C\n+ 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n+@end smallexample\n+\n+@noindent\n+with the following:\n+\n+@smallexample\n+      INTEGER*1 LINE(80)\n+      REAL A, B, C\n+c     ... Code that sets A, B and C\n+      WRITE (UNIT=LINE, FMT=9000) A, B, C\n+ 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n+@end smallexample\n+\n+\n @c ---------------------------------------------------------------------\n @c Intrinsic Procedures\n @c ---------------------------------------------------------------------\n@@ -1594,7 +1772,7 @@ GNU Fortran project:\n \n @itemize @minus\n @item Bill Clodius\n-@item Dominique d'Humieres\n+@item Dominique d'Humi@`eres\n @item Kate Hedstrom\n @item Erik Schnetter\n @end itemize\n@@ -1613,27 +1791,19 @@ list above, please contact us.\n @table @emph\n \n @item Help build the test suite\n-Solicit more code for donation to the test suite.\n-We can keep code private on request.\n+Solicit more code for donation to the test suite: the more extensive the\n+testsuite, the smaller the risk of breaking things in the future! We can\n+keep code private on request.\n \n @item Bug hunting/squishing\n-Find bugs and write more test cases!\n-Test cases are especially very welcome,\n-because it allows us to concentrate on fixing bugs\n-instead of isolating them.\n-\n-@item Smaller projects (``bug'' fixes):\n-  @itemize @minus\n-  @item Allow init exprs to be numbers raised to integer powers.\n-  @item Implement correct rounding.\n-  @item Implement F restrictions on Fortran 95 syntax.\n-  @item See about making Emacs-parsable error messages.\n-  @end itemize\n-@end table\n+Find bugs and write more test cases! Test cases are especially very\n+welcome, because it allows us to concentrate on fixing bugs instead of\n+isolating them. Going through the bugzilla database at\n+@url{http://gcc.gnu.org/bugzilla/} to reduce testcases posted there and\n+add more information (for example, for which version does the testcase\n+work, for which versions does it fail?) is also very helpful.\n \n-If you wish to work on the runtime libraries,\n-please contact a project maintainer.\n-@c TODO: email!\n+@end table\n \n \n @node Proposed Extensions"}]}