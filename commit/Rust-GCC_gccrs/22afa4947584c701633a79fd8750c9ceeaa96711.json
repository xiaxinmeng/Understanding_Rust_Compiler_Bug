{"sha": "22afa4947584c701633a79fd8750c9ceeaa96711", "node_id": "C_kwDOANBUbNoAKDIyYWZhNDk0NzU4NGM3MDE2MzNhNzlmZDg3NTBjOWNlZWFhOTY3MTE", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-01-24T21:36:25Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-01-28T21:00:38Z"}, "message": "Fortran: fix ICE in compare_bound_int [PR108527]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/108527\n\t* resolve.cc (compare_bound_int): Expression to compare must be of\n\ttype INTEGER.\n\t(compare_bound_mpz_t): Likewise.\n\t(check_dimension): Fix comment on checks applied to array section\n\tand clean up associated logic.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/108527\n\t* gfortran.dg/pr108527.f90: New test.\n\nCo-authored-by: Steven G. Kargl <kargl@gcc.gnu.org>", "tree": {"sha": "0ad3fd13f8d8659b748cd4c7f1a1d347111a9444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ad3fd13f8d8659b748cd4c7f1a1d347111a9444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22afa4947584c701633a79fd8750c9ceeaa96711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22afa4947584c701633a79fd8750c9ceeaa96711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22afa4947584c701633a79fd8750c9ceeaa96711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22afa4947584c701633a79fd8750c9ceeaa96711/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba9ff8f30d4245294ea2583de1dc28f1c7ccf7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba9ff8f30d4245294ea2583de1dc28f1c7ccf7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba9ff8f30d4245294ea2583de1dc28f1c7ccf7b"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "100b2382e22f9881df44b6c9c221f14fd6bcf248", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22afa4947584c701633a79fd8750c9ceeaa96711/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22afa4947584c701633a79fd8750c9ceeaa96711/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=22afa4947584c701633a79fd8750c9ceeaa96711", "patch": "@@ -4575,12 +4575,11 @@ compare_bound_int (gfc_expr *a, int b)\n {\n   int i;\n \n-  if (a == NULL || a->expr_type != EXPR_CONSTANT)\n+  if (a == NULL\n+      || a->expr_type != EXPR_CONSTANT\n+      || a->ts.type != BT_INTEGER)\n     return CMP_UNKNOWN;\n \n-  if (a->ts.type != BT_INTEGER)\n-    gfc_internal_error (\"compare_bound_int(): Bad expression\");\n-\n   i = mpz_cmp_si (a->value.integer, b);\n \n   if (i < 0)\n@@ -4598,12 +4597,11 @@ compare_bound_mpz_t (gfc_expr *a, mpz_t b)\n {\n   int i;\n \n-  if (a == NULL || a->expr_type != EXPR_CONSTANT)\n+  if (a == NULL\n+      || a->expr_type != EXPR_CONSTANT\n+      || a->ts.type != BT_INTEGER)\n     return CMP_UNKNOWN;\n \n-  if (a->ts.type != BT_INTEGER)\n-    gfc_internal_error (\"compare_bound_int(): Bad expression\");\n-\n   i = mpz_cmp (a->value.integer, b);\n \n   if (i < 0)\n@@ -4733,23 +4731,24 @@ check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)\n #define AR_END (ar->end[i] ? ar->end[i] : as->upper[i])\n \n \tcompare_result comp_start_end = compare_bound (AR_START, AR_END);\n+\tcompare_result comp_stride_zero = compare_bound_int (ar->stride[i], 0);\n \n \t/* Check for zero stride, which is not allowed.  */\n-\tif (compare_bound_int (ar->stride[i], 0) == CMP_EQ)\n+\tif (comp_stride_zero == CMP_EQ)\n \t  {\n \t    gfc_error (\"Illegal stride of zero at %L\", &ar->c_where[i]);\n \t    return false;\n \t  }\n \n-\t/* if start == len || (stride > 0 && start < len)\n-\t\t\t   || (stride < 0 && start > len),\n+\t/* if start == end || (stride > 0 && start < end)\n+\t\t\t   || (stride < 0 && start > end),\n \t   then the array section contains at least one element.  In this\n \t   case, there is an out-of-bounds access if\n \t   (start < lower || start > upper).  */\n-\tif (compare_bound (AR_START, AR_END) == CMP_EQ\n-\t    || ((compare_bound_int (ar->stride[i], 0) == CMP_GT\n-\t\t || ar->stride[i] == NULL) && comp_start_end == CMP_LT)\n-\t    || (compare_bound_int (ar->stride[i], 0) == CMP_LT\n+\tif (comp_start_end == CMP_EQ\n+\t    || ((comp_stride_zero == CMP_GT || ar->stride[i] == NULL)\n+\t\t&& comp_start_end == CMP_LT)\n+\t    || (comp_stride_zero == CMP_LT\n \t        && comp_start_end == CMP_GT))\n \t  {\n \t    if (compare_bound (AR_START, as->lower[i]) == CMP_LT)"}, {"sha": "c97ba3111cbff1cf5affe889402d94eba4df7d1c", "filename": "gcc/testsuite/gfortran.dg/pr108527.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22afa4947584c701633a79fd8750c9ceeaa96711/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108527.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22afa4947584c701633a79fd8750c9ceeaa96711/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108527.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108527.f90?ref=22afa4947584c701633a79fd8750c9ceeaa96711", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR fortran/108527 - ICE in compare_bound_int\n+! Contributed by G.Steinmetz\n+\n+program p\n+  integer, parameter :: a((2.)) = [4,8] ! { dg-error \"must be of INTEGER type\" }\n+  integer(a(1:1)) :: b                  ! { dg-error \"out of bounds\" }\n+end\n+\n+! { dg-prune-output \"Parameter array\" }"}]}