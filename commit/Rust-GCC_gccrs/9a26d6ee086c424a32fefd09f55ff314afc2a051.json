{"sha": "9a26d6ee086c424a32fefd09f55ff314afc2a051", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyNmQ2ZWUwODZjNDI0YTMyZmVmZDA5ZjU1ZmYzMTRhZmMyYTA1MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-11T21:29:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-11T21:29:42Z"}, "message": "c-tree.h (enum c_storage_class): New.\n\n\t* c-tree.h (enum c_storage_class): New.\n\t(struct c_declspecs): Add storage_class, inline_p and thread_p.\n\t* c-decl.c (shadow_tag_warned): Give errors for \"inline\" in empty\n\tdeclarations and \"auto\" or \"register\" in file scope empty\n\tdeclarations.  Give more specific warnings for other cases of\n\tstorage class specifiers in empty declarations.\n\t(grokdeclarator): Update for new structures.  Don't check for\n\tmultiple storage classes.  Diagnose file-scope \"register\" if\n\tpedantic.\n\t(build_null_declspecs): Update.\n\t(declspecs_add_scspec): Update.  Diagnose multiple storage class\n\tspecifiers and invalid uses of \"__thread\".\n\ntestsuite:\n\t* gcc.dg/declspec-4.c, gcc.dg/declspec-5.c, gcc.dg/declspec-6.c,\n\tgcc.dg/tls/diag-2.c: Update expected messages.\n\t* gcc.dg/991209-1.c: Specify compilation options.  Update expected\n\tmessages.\n\t* gcc.dg/pr14289-2.c, gcc.dg/pr14289-3.c: Remove.\n\t* gcc.dg/declspec-7.c, gcc.dg/declspec-8.c, gcc.dg/declspec-9.c,\n\tgcc.dg/declspec-10.c, gcc.dg/declspec-11.c, gcc.dg/tls/diag-4.c,\n\tgcc.dg/tls/diag-5.c: New tests.\n\nFrom-SVN: r87374", "tree": {"sha": "2e7db2782d1466e19e91914d252ee32d24f2052e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7db2782d1466e19e91914d252ee32d24f2052e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a26d6ee086c424a32fefd09f55ff314afc2a051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a26d6ee086c424a32fefd09f55ff314afc2a051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a26d6ee086c424a32fefd09f55ff314afc2a051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a26d6ee086c424a32fefd09f55ff314afc2a051/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6858057449b72a53389616073b72b3778c2cf63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6858057449b72a53389616073b72b3778c2cf63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6858057449b72a53389616073b72b3778c2cf63"}], "stats": {"total": 607, "additions": 449, "deletions": 158}, "files": [{"sha": "db61ded7e2d5aaaff6d70b8d7d14d8b828f4d74a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -1,3 +1,18 @@\n+2004-09-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-tree.h (enum c_storage_class): New.\n+\t(struct c_declspecs): Add storage_class, inline_p and thread_p.\n+\t* c-decl.c (shadow_tag_warned): Give errors for \"inline\" in empty\n+\tdeclarations and \"auto\" or \"register\" in file scope empty\n+\tdeclarations.  Give more specific warnings for other cases of\n+\tstorage class specifiers in empty declarations.\n+\t(grokdeclarator): Update for new structures.  Don't check for\n+\tmultiple storage classes.  Diagnose file-scope \"register\" if\n+\tpedantic.\n+\t(build_null_declspecs): Update.\n+\t(declspecs_add_scspec): Update.  Diagnose multiple storage class\n+\tspecifiers and invalid uses of \"__thread\".\n+\n 2004-09-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* tree.c (tree_code_size): New function, bulk of code from tree_size."}, {"sha": "60b613fe1d38030cf82a88f2d3a6c8839d4228b3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 196, "deletions": 125, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -2741,6 +2741,36 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n       warned = 1;\n     }\n \n+  if (declspecs->inline_p)\n+    {\n+      error (\"%<inline%> in empty declaration\");\n+      warned = 1;\n+    }\n+\n+  if (current_scope == file_scope && declspecs->storage_class == csc_auto)\n+    {\n+      error (\"%<auto%> in file-scope empty declaration\");\n+      warned = 1;\n+    }\n+\n+  if (current_scope == file_scope && declspecs->storage_class == csc_register)\n+    {\n+      error (\"%<register%> in file-scope empty declaration\");\n+      warned = 1;\n+    }\n+\n+  if (!warned && !in_system_header && declspecs->storage_class != csc_none)\n+    {\n+      warning (\"useless storage class specifier in empty declaration\");\n+      warned = 2;\n+    }\n+\n+  if (!warned && !in_system_header && declspecs->thread_p)\n+    {\n+      warning (\"useless %<__thread%> in empty declaration\");\n+      warned = 2;\n+    }\n+\n   if (!warned && !in_system_header && declspecs->specbits)\n     {\n       warning (\"useless keyword or type name in empty declaration\");\n@@ -3597,11 +3627,12 @@ grokdeclarator (const struct c_declarator *declarator,\n {\n   int specbits = declspecs->specbits;\n   tree type = declspecs->type;\n+  bool threadp = declspecs->thread_p;\n+  enum c_storage_class storage_class = declspecs->storage_class;\n   int constp;\n   int restrictp;\n   int volatilep;\n   int type_quals = TYPE_UNQUALIFIED;\n-  int inlinep;\n   int defaulted_int = 0;\n   const char *name, *orig_name;\n   tree typedef_type = 0;\n@@ -3682,7 +3713,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t  | (1 << (int) RID_UNSIGNED)\n \t\t\t  | (1 << (int) RID_COMPLEX))))\n \t  /* Don't warn about typedef foo = bar.  */\n-\t  && ! (specbits & (1 << (int) RID_TYPEDEF) && initialized)\n+\t  && ! (storage_class == csc_typedef && initialized)\n \t  && ! in_system_header)\n \t{\n \t  /* Issue a warning if this is an ISO C 99 program or if -Wreturn-type\n@@ -3866,7 +3897,6 @@ grokdeclarator (const struct c_declarator *declarator,\n     = !! (specbits & 1 << (int) RID_RESTRICT) + TYPE_RESTRICT (element_type);\n   volatilep\n     = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (element_type);\n-  inlinep = !! (specbits & (1 << (int) RID_INLINE));\n   if (pedantic && !flag_isoc99)\n     {\n       if (constp > 1)\n@@ -3882,99 +3912,82 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t| (restrictp ? TYPE_QUAL_RESTRICT : 0)\n \t\t| (volatilep ? TYPE_QUAL_VOLATILE : 0));\n \n-  /* Warn if two storage classes are given. Default to `auto'.  */\n-\n-  {\n-    int nclasses = 0;\n-\n-    if (specbits & 1 << (int) RID_AUTO) nclasses++;\n-    if (specbits & 1 << (int) RID_STATIC) nclasses++;\n-    if (specbits & 1 << (int) RID_EXTERN) nclasses++;\n-    if (specbits & 1 << (int) RID_REGISTER) nclasses++;\n-    if (specbits & 1 << (int) RID_TYPEDEF) nclasses++;\n-\n-    /* \"static __thread\" and \"extern __thread\" are allowed.  */\n-    if ((specbits & (1 << (int) RID_THREAD\n-\t\t     | 1 << (int) RID_STATIC\n-\t\t     | 1 << (int) RID_EXTERN)) == (1 << (int) RID_THREAD))\n-      nclasses++;\n-\n-    /* Warn about storage classes that are invalid for certain\n-       kinds of declarations (parameters, typenames, etc.).  */\n-\n-    if (nclasses > 1)\n-      error (\"multiple storage classes in declaration of `%s'\", name);\n-    else if (funcdef_flag\n-\t     && (specbits\n-\t\t & ((1 << (int) RID_REGISTER)\n-\t\t    | (1 << (int) RID_AUTO)\n-\t\t    | (1 << (int) RID_TYPEDEF)\n-\t\t    | (1 << (int) RID_THREAD))))\n-      {\n-\tif (specbits & 1 << (int) RID_AUTO\n-\t    && (pedantic || current_scope == file_scope))\n-\t  pedwarn (\"function definition declared `auto'\");\n-\tif (specbits & 1 << (int) RID_REGISTER)\n-\t  error (\"function definition declared `register'\");\n-\tif (specbits & 1 << (int) RID_TYPEDEF)\n-\t  error (\"function definition declared `typedef'\");\n-\tif (specbits & 1 << (int) RID_THREAD)\n-\t  error (\"function definition declared `__thread'\");\n-\tspecbits &= ~((1 << (int) RID_TYPEDEF) | (1 << (int) RID_REGISTER)\n-\t\t      | (1 << (int) RID_AUTO) | (1 << (int) RID_THREAD));\n-      }\n-    else if (decl_context != NORMAL && nclasses > 0)\n-      {\n-\tif (decl_context == PARM && specbits & 1 << (int) RID_REGISTER)\n-\t  ;\n-\telse\n-\t  {\n-\t    switch (decl_context)\n-\t      {\n-\t      case FIELD:\n-\t\terror (\"storage class specified for structure field `%s'\",\n-\t\t       name);\n-\t\tbreak;\n-\t      case PARM:\n-\t\terror (\"storage class specified for parameter `%s'\", name);\n-\t\tbreak;\n-\t      default:\n-\t\terror (\"storage class specified for typename\");\n-\t\tbreak;\n-\t      }\n-\t    specbits &= ~((1 << (int) RID_TYPEDEF) | (1 << (int) RID_REGISTER)\n-\t\t\t  | (1 << (int) RID_AUTO) | (1 << (int) RID_STATIC)\n-\t\t\t  | (1 << (int) RID_EXTERN) | (1 << (int) RID_THREAD));\n-\t  }\n-      }\n-    else if (specbits & 1 << (int) RID_EXTERN && initialized && ! funcdef_flag)\n-      {\n-\t/* `extern' with initialization is invalid if not at file scope.  */\n-\tif (current_scope == file_scope)\n-\t  warning (\"`%s' initialized and declared `extern'\", name);\n-\telse\n-\t  error (\"`%s' has both `extern' and initializer\", name);\n-      }\n-    else if (current_scope == file_scope)\n-      {\n-\tif (specbits & 1 << (int) RID_AUTO)\n-\t  error (\"file-scope declaration of `%s' specifies `auto'\", name);\n-      }\n-    else\n-      {\n-\tif (specbits & 1 << (int) RID_EXTERN && funcdef_flag)\n-\t  error (\"nested function `%s' declared `extern'\", name);\n-\telse if ((specbits & (1 << (int) RID_THREAD\n-\t\t\t       | 1 << (int) RID_EXTERN\n-\t\t\t       | 1 << (int) RID_STATIC))\n-\t\t == (1 << (int) RID_THREAD))\n-\t  {\n-\t    error (\"function-scope `%s' implicitly auto and declared `__thread'\",\n-\t\t   name);\n-\t    specbits &= ~(1 << (int) RID_THREAD);\n-\t  }\n-      }\n-  }\n+  /* Warn about storage classes that are invalid for certain\n+     kinds of declarations (parameters, typenames, etc.).  */\n+\n+  if (funcdef_flag\n+      && (threadp\n+\t  || storage_class == csc_auto\n+\t  || storage_class == csc_register\n+\t  || storage_class == csc_typedef))\n+    {\n+      if (storage_class == csc_auto\n+\t  && (pedantic || current_scope == file_scope))\n+\tpedwarn (\"function definition declared %<auto%>\");\n+      if (storage_class == csc_register)\n+\terror (\"function definition declared %<register%>\");\n+      if (storage_class == csc_typedef)\n+\terror (\"function definition declared %<typedef%>\");\n+      if (threadp)\n+\terror (\"function definition declared %<__thread%>\");\n+      threadp = false;\n+      if (storage_class == csc_auto\n+\t  || storage_class == csc_register\n+\t  || storage_class == csc_typedef)\n+\tstorage_class = csc_none;\n+    }\n+  else if (decl_context != NORMAL && (storage_class != csc_none || threadp))\n+    {\n+      if (decl_context == PARM && storage_class == csc_register)\n+\t;\n+      else\n+\t{\n+\t  switch (decl_context)\n+\t    {\n+\t    case FIELD:\n+\t      error (\"storage class specified for structure field %qs\",\n+\t\t     name);\n+\t      break;\n+\t    case PARM:\n+\t      error (\"storage class specified for parameter %qs\", name);\n+\t      break;\n+\t    default:\n+\t      error (\"storage class specified for typename\");\n+\t      break;\n+\t    }\n+\t  storage_class = csc_none;\n+\t  threadp = false;\n+\t}\n+    }\n+  else if (storage_class == csc_extern\n+\t   && initialized\n+\t   && !funcdef_flag)\n+    {\n+      /* 'extern' with initialization is invalid if not at file scope.  */\n+      if (current_scope == file_scope)\n+\twarning (\"%qs initialized and declared %<extern%>\", name);\n+      else\n+\terror (\"%qs has both %<extern%> and initializer\", name);\n+    }\n+  else if (current_scope == file_scope)\n+    {\n+      if (storage_class == csc_auto)\n+\terror (\"file-scope declaration of `%s' specifies `auto'\", name);\n+      if (pedantic && storage_class == csc_register)\n+\tpedwarn (\"file-scope declaration of %qs specifies %<register%>\", name);\n+    }\n+  else\n+    {\n+      if (storage_class == csc_extern && funcdef_flag)\n+\terror (\"nested function `%s' declared `extern'\", name);\n+      else if (threadp && storage_class == csc_none)\n+\t{\n+\t  error (\"function-scope %qs implicitly auto and declared \"\n+\t\t \"%<__thread%>\",\n+\t\t name);\n+\t  threadp = false;\n+\t}\n+    }\n \n   /* Now figure out the structure of the declarator proper.\n      Descend through it, creating more complex types, until we reach\n@@ -4337,7 +4350,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n \n-  if (specbits & (1 << (int) RID_TYPEDEF))\n+  if (storage_class == csc_typedef)\n     {\n       tree decl;\n       /* Note that the grammar rejects storage classes\n@@ -4394,10 +4407,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   if (VOID_TYPE_P (type) && decl_context != PARM\n       && ! ((decl_context != FIELD && TREE_CODE (type) != FUNCTION_TYPE)\n-\t    && ((specbits & (1 << (int) RID_EXTERN))\n+\t    && (storage_class == csc_extern\n \t\t|| (current_scope == file_scope\n-\t\t    && !(specbits\n-\t\t\t & ((1 << (int) RID_STATIC) | (1 << (int) RID_REGISTER)))))))\n+\t\t    && !(storage_class == csc_static\n+\t\t\t || storage_class == csc_register)))))\n     {\n       error (\"variable or field `%s' declared void\", name);\n       type = integer_type_node;\n@@ -4508,8 +4521,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE)\n       {\n-\tif (specbits & (1 << (int) RID_REGISTER)\n-\t    || specbits & (1 << (int) RID_THREAD))\n+\tif (storage_class == csc_register || threadp)\n \t  error (\"invalid storage class for function `%s'\", name);\n \telse if (current_scope != file_scope)\n \t  {\n@@ -4518,12 +4530,12 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       6.7.1p5, and `extern' makes no difference.  However,\n \t       GCC allows 'auto', perhaps with 'inline', to support\n \t       nested functions.  */\n-\t    if (specbits & (1 << (int) RID_AUTO))\n+\t    if (storage_class == csc_auto)\n \t      {\n \t\tif (pedantic)\n \t\t  pedwarn (\"invalid storage class for function `%s'\", name);\n \t      }\n-\t    if (specbits & (1 << (int) RID_STATIC))\n+\t    if (storage_class == csc_static)\n \t      error (\"invalid storage class for function `%s'\", name);\n \t  }\n \n@@ -4546,14 +4558,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t   scope and are explicitly declared \"auto\".  This is\n \t   forbidden by standard C (C99 6.7.1p5) and is interpreted by\n \t   GCC to signify a forward declaration of a nested function.  */\n-\tif ((specbits & (1 << RID_AUTO)) && current_scope != file_scope)\n+\tif (storage_class == csc_auto && current_scope != file_scope)\n \t  DECL_EXTERNAL (decl) = 0;\n \telse\n \t  DECL_EXTERNAL (decl) = 1;\n \n \t/* Record absence of global scope for `static' or `auto'.  */\n \tTREE_PUBLIC (decl)\n-\t  = !(specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_AUTO)));\n+\t  = !(storage_class == csc_static || storage_class == csc_auto);\n \n \t/* For a function definition, record the argument information\n \t   block where store_parm_decls will look for it.  */\n@@ -4566,10 +4578,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t/* Record presence of `inline', if it is reasonable.  */\n \tif (MAIN_NAME_P (declarator->u.id))\n \t  {\n-\t    if (inlinep)\n+\t    if (declspecs->inline_p)\n \t      warning (\"cannot inline function `main'\");\n \t  }\n-\telse if (inlinep)\n+\telse if (declspecs->inline_p)\n \t  {\n \t    /* Record that the function is declared `inline'.  */\n \t    DECL_DECLARED_INLINE_P (decl) = 1;\n@@ -4581,7 +4593,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    if (initialized)\n \t      {\n \t\tDECL_INLINE (decl) = 1;\n-\t\tif (specbits & (1 << (int) RID_EXTERN))\n+\t\tif (storage_class == csc_extern)\n \t\t  current_extern_inline = 1;\n \t      }\n \t  }\n@@ -4595,7 +4607,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       {\n \t/* It's a variable.  */\n \t/* An uninitialized decl with `extern' is a reference.  */\n-\tint extern_ref = !initialized && (specbits & (1 << (int) RID_EXTERN));\n+\tint extern_ref = !initialized && storage_class == csc_extern;\n \n \t/* Move type qualifiers down to element of an array.  */\n \tif (TREE_CODE (type) == ARRAY_TYPE && type_quals)\n@@ -4632,32 +4644,32 @@ grokdeclarator (const struct c_declarator *declarator,\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \n-\tif (inlinep)\n+\tif (declspecs->inline_p)\n \t  pedwarn (\"%Jvariable '%D' declared `inline'\", decl, decl);\n \n \t/* At file scope, an initialized extern declaration may follow\n \t   a static declaration.  In that case, DECL_EXTERNAL will be\n \t   reset later in start_decl.  */\n-\tDECL_EXTERNAL (decl) = !!(specbits & (1 << (int) RID_EXTERN));\n+\tDECL_EXTERNAL (decl) = (storage_class == csc_extern);\n \n \t/* At file scope, the presence of a `static' or `register' storage\n \t   class specifier, or the absence of all storage class specifiers\n \t   makes this declaration a definition (perhaps tentative).  Also,\n \t   the absence of both `static' and `register' makes it public.  */\n \tif (current_scope == file_scope)\n \t  {\n-\t    TREE_PUBLIC (decl) = !(specbits & ((1 << (int) RID_STATIC)\n-\t\t\t\t\t       | (1 << (int) RID_REGISTER)));\n+\t    TREE_PUBLIC (decl) = !(storage_class == csc_static\n+\t\t\t\t   || storage_class == csc_register);\n \t    TREE_STATIC (decl) = !extern_ref;\n \t  }\n \t/* Not at file scope, only `static' makes a static definition.  */\n \telse\n \t  {\n-\t    TREE_STATIC (decl) = (specbits & (1 << (int) RID_STATIC)) != 0;\n+\t    TREE_STATIC (decl) = (storage_class == csc_static);\n \t    TREE_PUBLIC (decl) = extern_ref;\n \t  }\n \n-\tif (specbits & 1 << (int) RID_THREAD)\n+\tif (threadp)\n \t  {\n \t    if (targetm.have_tls)\n \t      DECL_THREAD_LOCAL (decl) = 1;\n@@ -4671,7 +4683,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     /* Record `register' declaration for warnings on &\n        and in case doing stupid register allocation.  */\n \n-    if (specbits & (1 << (int) RID_REGISTER))\n+    if (storage_class == csc_register)\n       {\n \tC_DECL_REGISTER (decl) = 1;\n \tDECL_REGISTER (decl) = 1;\n@@ -6720,13 +6732,16 @@ build_null_declspecs (void)\n   ret->decl_attr = 0;\n   ret->attrs = 0;\n   ret->specbits = 0;\n+  ret->storage_class = csc_none;\n   ret->non_sc_seen_p = false;\n   ret->typedef_p = false;\n   ret->typedef_signed_p = false;\n   ret->deprecated_p = false;\n   ret->explicit_int_p = false;\n   ret->explicit_char_p = false;\n   ret->long_long_p = false;\n+  ret->inline_p = false;\n+  ret->thread_p = false;\n   return ret;\n }\n \n@@ -6826,23 +6841,79 @@ struct c_declspecs *\n declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n {\n   enum rid i;\n+  enum c_storage_class n = csc_none;\n+  bool dupe = false;\n   gcc_assert (TREE_CODE (scspec) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (scspec));\n   i = C_RID_CODE (scspec);\n   if (extra_warnings && specs->non_sc_seen_p)\n     warning (\"%qs is not at beginning of declaration\",\n \t     IDENTIFIER_POINTER (scspec));\n-  if (specs->specbits & (1 << (int) i))\n-    error (\"duplicate %qs\", IDENTIFIER_POINTER (scspec));\n-  /* Diagnose \"__thread extern\" and \"__thread static\".  */\n-  if (specs->specbits & (1 << (int) RID_THREAD))\n-    {\n-      if (i == RID_EXTERN)\n+  switch (i)\n+    {\n+    case RID_INLINE:\n+      /* GCC has hitherto given an error for duplicate inline, but\n+\t this should be revisited since C99 permits duplicate\n+\t inline.  */\n+      dupe = specs->inline_p;\n+      specs->inline_p = true;\n+      break;\n+    case RID_THREAD:\n+      dupe = specs->thread_p;\n+      if (specs->storage_class == csc_auto)\n+\terror (\"%<__thread%> used with %<auto%>\");\n+      else if (specs->storage_class == csc_register)\n+\terror (\"%<__thread%> used with %<register%>\");\n+      else if (specs->storage_class == csc_typedef)\n+\terror (\"%<__thread%> used with %<typedef%>\");\n+      else\n+\tspecs->thread_p = true;\n+      break;\n+    case RID_AUTO:\n+      n = csc_auto;\n+      break;\n+    case RID_EXTERN:\n+      n = csc_extern;\n+      /* Diagnose \"__thread extern\".  */\n+      if (specs->thread_p)\n \terror (\"%<__thread%> before %<extern%>\");\n-      else if (i == RID_STATIC)\t\n+      break;\n+    case RID_REGISTER:\n+      n = csc_register;\n+      break;\n+    case RID_STATIC:\n+      n = csc_static;\n+      /* Diagnose \"__thread static\".  */\n+      if (specs->thread_p)\n \terror (\"%<__thread%> before %<static%>\");\n+      break;\n+    case RID_TYPEDEF:\n+      n = csc_typedef;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  if (n != csc_none && n == specs->storage_class)\n+    dupe = true;\n+  if (dupe)\n+    error (\"duplicate %qs\", IDENTIFIER_POINTER (scspec));\n+  if (n != csc_none)\n+    {\n+      if (specs->storage_class != csc_none && n != specs->storage_class)\n+\t{\n+\t  error (\"multiple storage classes in declaration specifiers\");\n+\t}\n+      else\n+\t{\n+\t  specs->storage_class = n;\n+\t  if (n != csc_extern && n != csc_static && specs->thread_p)\n+\t    {\n+\t      error (\"%<__thread%> used with %qs\",\n+\t\t     IDENTIFIER_POINTER (scspec));\n+\t      specs->thread_p = false;\n+\t    }\n+\t}\n     }\n-  specs->specbits |= 1 << (int) i;\n   return specs;\n }\n "}, {"sha": "e48d3015326f9fd01abb6d57c7712aba1c0478e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -1,3 +1,14 @@\n+2004-09-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/declspec-4.c, gcc.dg/declspec-5.c, gcc.dg/declspec-6.c,\n+\tgcc.dg/tls/diag-2.c: Update expected messages.\n+\t* gcc.dg/991209-1.c: Specify compilation options.  Update expected\n+\tmessages.\n+\t* gcc.dg/pr14289-2.c, gcc.dg/pr14289-3.c: Remove.\n+\t* gcc.dg/declspec-7.c, gcc.dg/declspec-8.c, gcc.dg/declspec-9.c,\n+\tgcc.dg/declspec-10.c, gcc.dg/declspec-11.c, gcc.dg/tls/diag-4.c,\n+\tgcc.dg/tls/diag-5.c: New tests.\n+\n 2004-09-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.dg/20040910-1.c: Correct dg-error regexp."}, {"sha": "2381922c660fc5256aee18b88a79105e36d1587b", "filename": "gcc/testsuite/gcc.dg/991209-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2F991209-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2F991209-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F991209-1.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-ansi -pedantic\" } */\n \n int foo ()\n {\n   return 1;\n }\n \n-register char *stack_ptr __asm (\"%esp\");\n+register char *stack_ptr __asm (\"%esp\"); /* { dg-warning \"warning: file-scope declaration of 'stack_ptr' specifies 'register'\" } */"}, {"sha": "454cb1d54801cf40c13f752493978637195dfa59", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,45 @@\n+/* Test declaration specifiers.  Test various checks on storage class\n+   and function specifiers that depend on information about the\n+   declaration, not just the specifiers.  Test with -pedantic.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+auto void f0 (void) {} /* { dg-warning \"warning: function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+\n+void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f5 (register int);\n+void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+\n+auto int x; /* { dg-error \"error: file-scope declaration of `x' specifies `auto'\" } */\n+register int y; /* { dg-warning \"warning: file-scope declaration of 'y' specifies 'register'\" } */\n+\n+void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function `x' declared `extern'\" } */\n+/* { dg-warning \"warning: ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n+\n+void\n+g (void)\n+{\n+  void a; /* { dg-error \"error: variable or field `a' declared void\" } */\n+  const void b; /* { dg-error \"error: variable or field `b' declared void\" } */\n+  static void c; /* { dg-error \"error: variable or field `c' declared void\" } */\n+}\n+\n+void p;\n+const void p1;\n+extern void q;\n+extern const void q1;\n+static void r; /* { dg-error \"error: variable or field `r' declared void\" } */\n+static const void r1; /* { dg-error \"error: variable or field `r1' declared void\" } */\n+\n+register void f8 (void); /* { dg-error \"error: invalid storage class for function `f8'\" } */\n+/* { dg-warning \"warning: file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n+\n+void i (void) { auto void y (void) {} } /* { dg-warning \"warning: ISO C forbids nested functions\" } */\n+/* { dg-warning \"warning: function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n+\n+inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function `main'\" } */"}, {"sha": "c418de135d68f0a5638747b90f716d3b49b3bdc7", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,45 @@\n+/* Test declaration specifiers.  Test various checks on storage class\n+   and function specifiers that depend on information about the\n+   declaration, not just the specifiers.  Test with -pedantic-errors.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+auto void f0 (void) {} /* { dg-error \"error: function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+\n+void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f5 (register int);\n+void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+\n+auto int x; /* { dg-error \"error: file-scope declaration of `x' specifies `auto'\" } */\n+register int y; /* { dg-error \"error: file-scope declaration of 'y' specifies 'register'\" } */\n+\n+void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function `x' declared `extern'\" } */\n+/* { dg-error \"error: ISO C forbids nested functions\" \"nested\" { target *-*-* } 21 } */\n+\n+void\n+g (void)\n+{\n+  void a; /* { dg-error \"error: variable or field `a' declared void\" } */\n+  const void b; /* { dg-error \"error: variable or field `b' declared void\" } */\n+  static void c; /* { dg-error \"error: variable or field `c' declared void\" } */\n+}\n+\n+void p;\n+const void p1;\n+extern void q;\n+extern const void q1;\n+static void r; /* { dg-error \"error: variable or field `r' declared void\" } */\n+static const void r1; /* { dg-error \"error: variable or field `r1' declared void\" } */\n+\n+register void f8 (void); /* { dg-error \"error: invalid storage class for function `f8'\" } */\n+/* { dg-error \"error: file-scope declaration of 'f8' specifies 'register'\" \"register function\" { target *-*-* } 39 } */\n+\n+void i (void) { auto void y (void) {} } /* { dg-error \"error: ISO C forbids nested functions\" } */\n+/* { dg-error \"error: function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n+\n+inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function `main'\" } */"}, {"sha": "fbc6c3667cabfc0b25375fbcf59836f82045ad8f", "filename": "gcc/testsuite/gcc.dg/declspec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-4.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -22,7 +22,7 @@ int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n /* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 22 } */\n T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n /* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 25 } */\n union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n "}, {"sha": "febbfb32edc42c756fee64e08685f988563d3fb8", "filename": "gcc/testsuite/gcc.dg/declspec-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-5.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -22,7 +22,7 @@ int; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n /* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 22 } */\n T; /* { dg-warning \"warning: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n /* { dg-warning \"warning: empty declaration\" \"long\" { target *-*-* } 25 } */\n union { long b; }; /* { dg-warning \"warning: unnamed struct/union that defines no instances\" } */\n "}, {"sha": "305eed78bd921df364745d7765df26cad84a76f1", "filename": "gcc/testsuite/gcc.dg/declspec-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-6.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -22,7 +22,7 @@ int; /* { dg-error \"error: useless type name in empty declaration\" } */\n long; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n /* { dg-error \"error: empty declaration\" \"long\" { target *-*-* } 22 } */\n T; /* { dg-error \"error: useless type name in empty declaration\" } */\n-static const; /* { dg-warning \"warning: useless keyword or type name in empty declaration\" } */\n+static const; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n /* { dg-error \"error: empty declaration\" \"long\" { target *-*-* } 25 } */\n union { long b; }; /* { dg-error \"error: unnamed struct/union that defines no instances\" } */\n "}, {"sha": "bb63d952d88f135a9fa22065366f96f6de842fe3", "filename": "gcc/testsuite/gcc.dg/declspec-7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,39 @@\n+/* Test declaration specifiers.  Test checks on storage class\n+   specifiers that can be made at parse time rather than for each\n+   declarator.  Note that __thread is tested in\n+   gcc.dg/tls/diag-*.c.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Duplicate specifiers.  */\n+\n+inline inline void f0 (void), /* { dg-error \"error: duplicate 'inline'\" } */\n+  f1 (void);\n+\n+static static int a, /* { dg-error \"error: duplicate 'static'\" } */\n+  b;\n+\n+extern extern int c, /* { dg-error \"error: duplicate 'extern'\" } */\n+  d;\n+\n+typedef typedef int e, /* { dg-error \"error: duplicate 'typedef'\" } */\n+  f;\n+\n+void\n+h (void)\n+{\n+  auto auto int p, /* { dg-error \"error: duplicate 'auto'\" } */\n+    q;\n+\n+  register register int r, /* { dg-error \"error: duplicate 'register'\" } */\n+    s;\n+}\n+\n+/* Multiple specifiers.  */\n+\n+static extern int x, /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n+  y;\n+\n+extern typedef long z, /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n+  w;"}, {"sha": "ea60126fe4408616a4e30e616bfda5ab6e049a8a", "filename": "gcc/testsuite/gcc.dg/declspec-8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-8.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,32 @@\n+/* Test declaration specifiers.  Test checks on storage class\n+   specifiers and function specifiers in empty declarations.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* The constraints on storage class specifiers and function specifiers\n+   must be met for empty declarations where they are useless.  Thus\n+   there may be only one storage class specifier (C90 6.5.1, C99\n+   6.7.1#2) and \"inline\" must not be used because the declaration is\n+   not that of an identifier for a function (C99 6.7.4#1), and\n+   \"register\" and \"auto\" must not be used at file scope (C90 6.7, C99\n+   6.9#2).  */\n+\n+static static struct s; /* { dg-error \"error: duplicate 'static'\" } */\n+/* { dg-warning \"warning: useless storage class specifier in empty declaration\" \"static static\" { target *-*-* } 15 } */\n+\n+static extern struct t; /* { dg-error \"error: multiple storage classes in declaration specifiers\" } */\n+/* { dg-warning \"warning: useless storage class specifier in empty declaration\" \"static extern\" { target *-*-* } 18 } */\n+\n+inline union u; /* { dg-error \"error: 'inline' in empty declaration\" } */\n+\n+auto struct v; /* { dg-error \"error: 'auto' in file-scope empty declaration\" } */\n+\n+register struct w; /* { dg-error \"error: 'register' in file-scope empty declaration\" } */\n+\n+void\n+f (void)\n+{\n+  auto union p; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+  register struct q; /* { dg-warning \"warning: useless storage class specifier in empty declaration\" } */\n+}"}, {"sha": "855393c943d26626d3c24ac080e35800954800d8", "filename": "gcc/testsuite/gcc.dg/declspec-9.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,43 @@\n+/* Test declaration specifiers.  Test various checks on storage class\n+   and function specifiers that depend on information about the\n+   declaration, not just the specifiers.  Test with no special\n+   options.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+auto void f0 (void) {} /* { dg-warning \"warning: function definition declared 'auto'\" } */\n+register void f1 (void) {} /* { dg-error \"error: function definition declared 'register'\" } */\n+typedef void f2 (void) {} /* { dg-error \"error: function definition declared 'typedef'\" } */\n+\n+void f3 (auto int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f4 (extern int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f5 (register int);\n+void f6 (static int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+void f7 (typedef int); /* { dg-error \"error: storage class specified for parameter 'type name'\" } */\n+\n+auto int x; /* { dg-error \"error: file-scope declaration of `x' specifies `auto'\" } */\n+register int y;\n+\n+void h (void) { extern void x (void) {} } /* { dg-error \"error: nested function `x' declared `extern'\" } */\n+\n+void\n+g (void)\n+{\n+  void a; /* { dg-error \"error: variable or field `a' declared void\" } */\n+  const void b; /* { dg-error \"error: variable or field `b' declared void\" } */\n+  static void c; /* { dg-error \"error: variable or field `c' declared void\" } */\n+}\n+\n+void p;\n+const void p1;\n+extern void q;\n+extern const void q1;\n+static void r; /* { dg-error \"error: variable or field `r' declared void\" } */\n+static const void r1; /* { dg-error \"error: variable or field `r1' declared void\" } */\n+\n+register void f8 (void); /* { dg-error \"error: invalid storage class for function `f8'\" } */\n+\n+void i (void) { auto void y (void) {} }\n+\n+inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function `main'\" } */"}, {"sha": "7530b468caca87059130872b6208cbdefd3a6cfa", "filename": "gcc/testsuite/gcc.dg/pr14289-2.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6858057449b72a53389616073b72b3778c2cf63/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6858057449b72a53389616073b72b3778c2cf63/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-2.c?ref=e6858057449b72a53389616073b72b3778c2cf63", "patch": "@@ -1,12 +0,0 @@\n-/* PR middle-end/14289 */\n-/* { dg-do compile { target i?86-*-* } } */\n-/* { dg-options \"-O0\" } */\n-\n-static register int a[2] asm(\"ebx\");  /* { dg-error \"multiple storage\" } */\n-\n-void Nase(void)\n-{\n-  int i=6;\n-  a[i]=5;  /* { dg-error \"address of global\" } */\n-}\n-"}, {"sha": "7cfbf78ce0508dc749ac430e7d3fced07e6ad024", "filename": "gcc/testsuite/gcc.dg/pr14289-3.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6858057449b72a53389616073b72b3778c2cf63/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6858057449b72a53389616073b72b3778c2cf63/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14289-3.c?ref=e6858057449b72a53389616073b72b3778c2cf63", "patch": "@@ -1,12 +0,0 @@\n-/* PR middle-end/14289 */\n-/* { dg-do compile { target i?86-*-* } } */\n-/* { dg-options \"-O0\" } */\n-\n-extern register int a[2] asm(\"ebx\");  /* { dg-error \"multiple storage\" } */\n-\n-void Nase(void)\n-{\n-  int i=6;\n-  a[i]=5;  /* { dg-error \"address of global\" } */\n-}\n-"}, {"sha": "5e7e17bee5ab64144f2c64ef8bff08a66fa364f9", "filename": "gcc/testsuite/gcc.dg/tls/diag-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -3,19 +3,19 @@\n __thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n __thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n __thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n-typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n+typedef __thread int g4;\t/* { dg-error \"'__thread' used with 'typedef'\" } */\n \n void foo()\n {\n-  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared `__thread'\" } */\n-  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n+  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared '__thread'\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"'__thread' used with 'auto'\" } */\n   __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n-  register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n+  register __thread int l4;\t/* { dg-error \"'__thread' used with 'register'\" } */\n }\n \n __thread void f1 ();\t\t/* { dg-error \"invalid storage class for function\" } */\n extern __thread void f2 ();\t/* { dg-error \"invalid storage class for function\" } */\n static __thread void f3 ();\t/* { dg-error \"invalid storage class for function\" } */\n-__thread void f4 () { }\t\t/* { dg-error \"function definition declared `__thread'\" } */\n+__thread void f4 () { }\t\t/* { dg-error \"function definition declared '__thread'\" } */\n \n void bar(__thread int p1);\t/* { dg-error \"storage class specified for parameter\" } */"}, {"sha": "df3705d04ee2f1f3c6f4ff621cff7016ccf1efe9", "filename": "gcc/testsuite/gcc.dg/tls/diag-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,10 @@\n+/* Invalid __thread specifiers.  As diag-4.c but some cases in\n+   different orders.  */\n+\n+__thread typedef int g4;\t/* { dg-error \"'__thread' used with 'typedef'\" } */\n+\n+void foo()\n+{\n+  __thread auto int l2;\t\t/* { dg-error \"'__thread' used with 'auto'\" } */\n+  __thread register int l4;\t/* { dg-error \"'__thread' used with 'register'\" } */\n+}"}, {"sha": "623832c3812f5e6bd5a49af0732fdf013260fadd", "filename": "gcc/testsuite/gcc.dg/tls/diag-5.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26d6ee086c424a32fefd09f55ff314afc2a051/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c?ref=9a26d6ee086c424a32fefd09f55ff314afc2a051", "patch": "@@ -0,0 +1,3 @@\n+/* __thread specifiers on empty declarations.  */\n+\n+__thread struct foo; /* { dg-warning \"warning: useless '__thread' in empty declaration\" } */"}]}