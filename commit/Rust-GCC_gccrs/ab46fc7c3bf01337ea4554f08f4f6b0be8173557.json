{"sha": "ab46fc7c3bf01337ea4554f08f4f6b0be8173557", "node_id": "C_kwDOANBUbNoAKGFiNDZmYzdjM2JmMDEzMzdlYTQ1NTRmMDhmNGY2YjBiZTgxNzM1NTc", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-16T07:02:39Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-16T09:12:09Z"}, "message": "OpenACC privatization diagnostics vs. 'assert' [PR102841]\n\nIt's an orthogonal concern why these diagnostics do appear at all for\nnon-offloaded OpenACC constructs (where they're not relevant at all); PR90115.\n\nDepending on how 'assert' is implemented, it may cause temporaries to be\ncreated, and/or may lower into 'COND_EXPR's, and\n'gcc/gimplify.cc:gimplify_cond_expr' uses 'create_tmp_var (type, \"iftmp\")'.\n\nFix-up for commit 11b8286a83289f5b54e813f14ff56d730c3f3185\n\"[OpenACC privatization] Largely extend diagnostics and\ncorresponding testsuite coverage [PR90115]\".\n\n\tPR testsuite/102841\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-7.c: Adjust.", "tree": {"sha": "46a5e4883e3c5cbb053b5459edf0b09246bc2c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a5e4883e3c5cbb053b5459edf0b09246bc2c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab46fc7c3bf01337ea4554f08f4f6b0be8173557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab46fc7c3bf01337ea4554f08f4f6b0be8173557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab46fc7c3bf01337ea4554f08f4f6b0be8173557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab46fc7c3bf01337ea4554f08f4f6b0be8173557/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570d5bff9af537265a3e0935140786e5fdf51de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570d5bff9af537265a3e0935140786e5fdf51de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570d5bff9af537265a3e0935140786e5fdf51de1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "50b4fc264d0c3c1aa1f051d5642668f7310bd1c4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab46fc7c3bf01337ea4554f08f4f6b0be8173557/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab46fc7c3bf01337ea4554f08f4f6b0be8173557/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c?ref=ab46fc7c3bf01337ea4554f08f4f6b0be8173557", "patch": "@@ -4,7 +4,9 @@\n    { dg-additional-options \"--param=openacc-privatization=noisy\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n-   for testing/documenting aspects of that functionality.  */\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types) or 'assert' implementation:\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+   { dg-prune-output {note: variable 'iftmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n \n /* C/C++ variant of 'libgomp.oacc-fortran/host_data-5.F90' */\n \n@@ -25,7 +27,6 @@ foo (float *p, intptr_t host_p, int cond)\n \n #pragma acc data copy(p[0:100])\n     /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n-    /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n     {\n       /* Not inside a host_data construct, so p is still the host pointer.  */\n       assert (p == (float *) host_p);\n@@ -54,7 +55,6 @@ foo (float *p, intptr_t host_p, int cond)\n \n #pragma acc host_data use_device(p) if(cond)\n       /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n-      /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-2 } */\n       {\n #if ACC_MEM_SHARED\n \tassert (p == (float *) host_p);"}]}