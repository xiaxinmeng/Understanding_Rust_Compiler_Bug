{"sha": "a01da83b2291abdccd8abe66eff604c50e3c71f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxZGE4M2IyMjkxYWJkY2NkOGFiZTY2ZWZmNjA0YzUwZTNjNzFmMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-10T20:12:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-10T20:12:57Z"}, "message": "toplev.c: Fix formatting.\n\n\t* toplev.c: Fix formatting.\n\t* tree.c: Likewise.\n\t* tree-dump.c: Likewise.\n\t* unroll.c: Likewise.\n\t* unwind-dw2.c: Likewise.\n\t* unwind-dw2-fde.c: Likewise.\n\t* unwind-dw2-fde-glibc.c: Likewise.\n\t* unwind-sjlj.c: Likewise.\n\nFrom-SVN: r48749", "tree": {"sha": "6a84e83a4ac5cdeb8d3b26f3d9d3dd04135fad57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a84e83a4ac5cdeb8d3b26f3d9d3dd04135fad57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01da83b2291abdccd8abe66eff604c50e3c71f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01da83b2291abdccd8abe66eff604c50e3c71f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01da83b2291abdccd8abe66eff604c50e3c71f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01da83b2291abdccd8abe66eff604c50e3c71f0/comments", "author": null, "committer": null, "parents": [{"sha": "9f85bca76fd08f9bab2d9b0d4535ce5d90acfaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f85bca76fd08f9bab2d9b0d4535ce5d90acfaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f85bca76fd08f9bab2d9b0d4535ce5d90acfaea"}], "stats": {"total": 123, "additions": 72, "deletions": 51}, "files": [{"sha": "8935aff49311879a253a7143d6b712c796aee77a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,3 +1,14 @@\n+2002-01-10  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* toplev.c: Fix formatting.\n+\t* tree.c: Likewise.\n+\t* tree-dump.c: Likewise.\n+\t* unroll.c: Likewise.\n+\t* unwind-dw2.c: Likewise.\n+\t* unwind-dw2-fde.c: Likewise.\n+\t* unwind-dw2-fde-glibc.c: Likewise.\n+\t* unwind-sjlj.c: Likewise.\n+\n 2002-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/invoke.texi: Document PDP-11 options."}, {"sha": "7fd0af7884287885365ea4311743b7a2347c6392", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1701,8 +1701,8 @@ set_float_handler (handler)\n \n int\n do_float_handler (fn, data)\n-  void (*fn) PARAMS ((PTR));\n-  PTR data;\n+     void (*fn) PARAMS ((PTR));\n+     PTR data;\n {\n   jmp_buf buf;\n \n@@ -2861,7 +2861,7 @@ rest_of_compilation (decl)\n       ggc_collect ();\n       flag_cse_skip_blocks = save_csb;\n       flag_cse_follow_jumps = save_cfj;\n-     }\n+    }\n \n   /* Move constant computations out of loops.  */\n \n@@ -3027,7 +3027,7 @@ rest_of_compilation (decl)\n       if (initialize_uninitialized_subregs ())\n \t{\n \t  /* Insns were inserted, so things might look a bit different.  */\n-\t  insns = get_insns();\n+\t  insns = get_insns ();\n \t  life_analysis (insns, rtl_dump_file, \n \t\t\t (PROP_LOG_LINKS | PROP_REG_INFO | PROP_DEATH_NOTES));\n \t}\n@@ -3704,7 +3704,7 @@ display_help ()\n static void\n display_target_options ()\n {\n-  int undoc,i;\n+  int undoc, i;\n   static bool displayed = false;\n \n   /* Avoid double printing for --help --target-help.  */\n@@ -3853,9 +3853,9 @@ decode_f_option (arg)\n     }\n \n   if (!strcmp (arg, \"fast-math\"))\n-    set_fast_math_flags();\n+    set_fast_math_flags ();\n   else if (!strcmp (arg, \"no-fast-math\"))\n-    set_no_fast_math_flags();\n+    set_no_fast_math_flags ();\n   else if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n \t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n     {"}, {"sha": "9eac6e075f104610203ddcf9750408f22d336111", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,5 +1,5 @@\n /* Tree-dumping functionality for intermediate representation.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>\n \n This file is part of GCC.\n@@ -331,7 +331,7 @@ dequeue_and_dump (di)\n \t  break;\n \t      \n \tdefault:\n-\t  abort();\n+\t  abort ();\n \t}\n     }\n   else if (DECL_P (t))"}, {"sha": "61252e7b70e761c257159a97815a0dee4011439e", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,6 +1,6 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2911,7 +2911,7 @@ merge_dllimport_decl_attributes (old, new)\n \n   if (delete_dllimport_p)\n     {\n-      tree prev,t;\n+      tree prev, t;\n \n       /* Scan the list for dllimport and delete it.  */\n       for (prev = NULL_TREE, t = a; t; prev = t, t = TREE_CHAIN (t))\n@@ -3270,7 +3270,7 @@ attribute_list_contained (l1, l2)\n \n   /* Maybe the lists are equal.  */\n   if (t1 == 0 && t2 == 0)\n-     return 1;\n+    return 1;\n \n   for (; t2 != 0; t2 = TREE_CHAIN (t2))\n     {\n@@ -3708,7 +3708,7 @@ build_reference_type (to_type)\n \n tree\n build_type_no_quals (t)\n-  tree t;\n+     tree t;\n {\n   switch (TREE_CODE (t))\n     {\n@@ -3789,7 +3789,7 @@ build_range_type (type, lowval, highval)\n    of just highval (maxval).  */\n \n tree\n-build_index_2_type (lowval,highval)\n+build_index_2_type (lowval, highval)\n      tree lowval, highval;\n {\n   return build_range_type (sizetype, lowval, highval);\n@@ -3869,7 +3869,7 @@ build_array_type (elt_type, index_type)\n \n tree\n get_inner_array_type (array)\n-    tree array;\n+     tree array;\n {\n   tree type = TREE_TYPE (array);\n "}, {"sha": "047e98395d7150f603a4bdae7c2e58513c32345b", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,5 +1,5 @@\n /* Try to unroll loops, and split induction variables.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson, Cygnus Support/UC Berkeley.\n \n@@ -4053,7 +4053,7 @@ loop_iterations (loop)\n      not HOST_WIDE_INT, disregard higher bits that might have come\n      into the picture due to sign extension of initial and final\n      values.  */\n-  abs_diff &= ((unsigned HOST_WIDE_INT)1\n+  abs_diff &= ((unsigned HOST_WIDE_INT) 1\n \t       << (GET_MODE_BITSIZE (GET_MODE (iteration_var)) - 1)\n \t       << 1) - 1;\n "}, {"sha": "ebebddda6eb36085d1a7a3725da6205c0979d992", "filename": "gcc/unwind-dw2-fde-glibc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2-fde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2-fde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-glibc.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n    This file is part of GNU CC.\n@@ -151,7 +151,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n     {\n       /* For dynamicly linked executables and shared libraries,\n \t DT_PLTGOT is the gp value for that object.  */\n-      ElfW(Dyn) *dyn = (ElfW(Dyn) *)(p_dynamic->p_vaddr + load_base);\n+      ElfW(Dyn) *dyn = (ElfW(Dyn) *) (p_dynamic->p_vaddr + load_base);\n       for (; dyn->d_tag != DT_NULL ; dyn++)\n \tif (dyn->d_tag == DT_PLTGOT)\n \t  {"}, {"sha": "4181e45b1f594063a82e80d87d089a9ac5781fb7", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -541,16 +541,18 @@ fde_merge (struct object *ob, fde_compare_t fde_compare,\n   if (i2 > 0)\n     {\n       i1 = v1->count;\n-      do {\n-        i2--;\n-        fde2 = v2->array[i2];\n-        while (i1 > 0 && fde_compare (ob, v1->array[i1-1], fde2) > 0)\n-          {\n-            v1->array[i1+i2] = v1->array[i1-1];\n-            i1--;\n-          }\n+      do\n+\t{\n+\t  i2--;\n+\t  fde2 = v2->array[i2];\n+\t  while (i1 > 0 && fde_compare (ob, v1->array[i1-1], fde2) > 0)\n+\t    {\n+\t      v1->array[i1+i2] = v1->array[i1-1];\n+\t      i1--;\n+\t    }\n         v1->array[i1+i2] = fde2;\n-      } while (i2 > 0);\n+\t}\n+      while (i2 > 0);\n       v1->count += v2->count;\n     }\n }"}, {"sha": "e502d66857e8b54af31594eb5c2d91a047453b9a", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,5 +1,6 @@\n /* DWARF2 exception handling and frame unwind runtime interface routines.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -524,14 +525,14 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t    {\n \t    case DW_OP_deref:\n \t      {\n-\t\tvoid *ptr = (void *)(_Unwind_Ptr) result;\n+\t\tvoid *ptr = (void *) (_Unwind_Ptr) result;\n \t\tresult = (_Unwind_Ptr) read_pointer (ptr);\n \t      }\n \t      break;\n \n \t    case DW_OP_deref_size:\n \t      {\n-\t\tvoid *ptr = (void *)(_Unwind_Ptr) result;\n+\t\tvoid *ptr = (void *) (_Unwind_Ptr) result;\n \t\tswitch (*op_ptr++)\n \t\t  {\n \t\t  case 1:\n@@ -1096,14 +1097,16 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n /* Fill in CONTEXT for top-of-stack.  The only valid registers at this\n    level will be the return address and the CFA.  */\n    \n-#define uw_init_context(CONTEXT)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  /* Do any necessary initialization to access arbitrary stack frames.\t\\\n-     On the SPARC, this means flushing the register windows.  */\t\\\n-  __builtin_unwind_init ();\t\t\t\t\t\t\\\n-  uw_init_context_1 (CONTEXT, __builtin_dwarf_cfa (),\t\t\t\\\n-\t\t     __builtin_return_address (0));\t\t\t\\\n-} while (0)\n+#define uw_init_context(CONTEXT)\t\t\t\t\t   \\\n+  do\t\t\t\t\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* Do any necessary initialization to access arbitrary stack frames. \\\n+\t On the SPARC, this means flushing the register windows.  */\t   \\\n+      __builtin_unwind_init ();\t\t\t\t\t\t   \\\n+      uw_init_context_1 (CONTEXT, __builtin_dwarf_cfa (),\t\t   \\\n+\t\t\t __builtin_return_address (0));\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  while (0)\n \n static void\n uw_init_context_1 (struct _Unwind_Context *context,\n@@ -1137,12 +1140,14 @@ uw_init_context_1 (struct _Unwind_Context *context,\n    macro because __builtin_eh_return must be invoked in the context of\n    our caller.  */\n \n-#define uw_install_context(CURRENT, TARGET)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  long offset = uw_install_context_1 ((CURRENT), (TARGET));\t\t\\\n-  void *handler = __builtin_frob_return_addr ((TARGET)->ra);\t\t\\\n-  __builtin_eh_return (offset, handler);\t\t\t\t\\\n-} while (0)\n+#define uw_install_context(CURRENT, TARGET)\t\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      long offset = uw_install_context_1 ((CURRENT), (TARGET));\t\t \\\n+      void *handler = __builtin_frob_return_addr ((TARGET)->ra);\t \\\n+      __builtin_eh_return (offset, handler);\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  while (0)\n \n static inline void\n init_dwarf_reg_size_table (void)"}, {"sha": "2161b71b7fc658aa1e9445200faa8178756dc2e2", "filename": "gcc/unwind-sjlj.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01da83b2291abdccd8abe66eff604c50e3c71f0/gcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-sjlj.c?ref=a01da83b2291abdccd8abe66eff604c50e3c71f0", "patch": "@@ -1,5 +1,6 @@\n /* DWARF2 exception handling and frame unwind runtime interface routines.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -251,11 +252,13 @@ uw_init_context (struct _Unwind_Context *context)\n \n /* ??? There appear to be bugs in integrate.c wrt __builtin_longjmp and\n    virtual-stack-vars.  An inline version of this segfaults on Sparc.  */\n-#define uw_install_context(CURRENT, TARGET)\t\\\n-  do {\t\t\t\t\t\t\\\n-    _Unwind_SjLj_SetContext ((TARGET)->fc);\t\\\n-    longjmp ((TARGET)->fc->jbuf, 1);\t\t\\\n-  } while (0)\n+#define uw_install_context(CURRENT, TARGET)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      _Unwind_SjLj_SetContext ((TARGET)->fc);\t\t\\\n+      longjmp ((TARGET)->fc->jbuf, 1);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n \n \n static inline _Unwind_Ptr"}]}