{"sha": "1a80db971def22067b3ccbb27b995cd5b86488c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4MGRiOTcxZGVmMjIwNjdiM2NjYmIyN2I5OTVjZDViODY0ODhjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-28T09:58:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-28T09:58:47Z"}, "message": "configure.ac: Don't define ENABLE_CHECKING whenever --enable-checking is seen...\n\n\t* configure.ac: Don't define ENABLE_CHECKING whenever\n\t--enable-checking is seen, instead use similar --enable-checking=yes\n\tvs. --enable-checking=release default as gcc/ subdir has and\n\tdefine ENABLE_CHECKING if ENABLE_CHECKING is defined in gcc/.\n\tDefine ENABLE_VALGRIND_CHECKING if requested.\n\t* lex.c (new_buff): If ENABLE_VALGRIND_CHECKING, put _cpp_buff\n\tstruct first in the allocated buffer and result->base after it.\n\t(_cpp_free_buff): If ENABLE_VALGRIND_CHECKING, free buff itself\n\tinstead of buff->base.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.\n\nFrom-SVN: r196333", "tree": {"sha": "02e8deb1f6a0854b3d5c12df42f42b182142adcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e8deb1f6a0854b3d5c12df42f42b182142adcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a80db971def22067b3ccbb27b995cd5b86488c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a80db971def22067b3ccbb27b995cd5b86488c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a80db971def22067b3ccbb27b995cd5b86488c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a80db971def22067b3ccbb27b995cd5b86488c0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff24afc8d09134862051b36afe786fd4818a9da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff24afc8d09134862051b36afe786fd4818a9da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff24afc8d09134862051b36afe786fd4818a9da4"}], "stats": {"total": 123, "additions": 115, "deletions": 8}, "files": [{"sha": "7a94c90b6d3152450ce92ed3986948951e4b53a8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1a80db971def22067b3ccbb27b995cd5b86488c0", "patch": "@@ -1,3 +1,17 @@\n+2013-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Don't define ENABLE_CHECKING whenever\n+\t--enable-checking is seen, instead use similar --enable-checking=yes\n+\tvs. --enable-checking=release default as gcc/ subdir has and\n+\tdefine ENABLE_CHECKING if ENABLE_CHECKING is defined in gcc/.\n+\tDefine ENABLE_VALGRIND_CHECKING if requested.\n+\t* lex.c (new_buff): If ENABLE_VALGRIND_CHECKING, put _cpp_buff\n+\tstruct first in the allocated buffer and result->base after it.\n+\t(_cpp_free_buff): If ENABLE_VALGRIND_CHECKING, free buff itself\n+\tinstead of buff->base.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/55582"}, {"sha": "1b0b25555cf0136bece11c3a94d043c01fc8ad84", "filename": "libcpp/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=1a80db971def22067b3ccbb27b995cd5b86488c0", "patch": "@@ -21,6 +21,10 @@\n    language is requested. */\n #undef ENABLE_NLS\n \n+/* Define if you want to workaround valgrind (a memory checker) warnings about\n+   possible memory leaks because of libcpp use of interior pointers. */\n+#undef ENABLE_VALGRIND_CHECKING\n+\n /* Define to 1 if you have `alloca', as a function or macro. */\n #undef HAVE_ALLOCA\n "}, {"sha": "f21b361577f98354f9de541f7aa1781a32549a5f", "filename": "libcpp/configure", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=1a80db971def22067b3ccbb27b995cd5b86488c0", "patch": "@@ -1333,7 +1333,11 @@ Optional Features:\n   --enable-werror-always  enable -Werror despite compiler version\n   --disable-rpath         do not hardcode runtime library paths\n   --enable-maintainer-mode enable rules only needed by maintainers\n-  --enable-checking      enable expensive run-time checks\n+  --enable-checking[=LIST]\n+                          enable expensive run-time checks. With LIST, enable\n+                          only specific categories of checks. Categories are:\n+                          yes,no,all,none,release. Flags are: misc,valgrind or\n+                          other strings\n   --enable-canonical-system-headers\n                           enable or disable system headers canonicalization\n \n@@ -7083,20 +7087,54 @@ else\n fi\n \n \n+# Enable expensive internal checks\n+is_release=\n+if test -f $srcdir/../gcc/DEV-PHASE \\\n+   && test x\"`cat $srcdir/../gcc/DEV-PHASE`\" != xexperimental; then\n+  is_release=yes\n+fi\n+\n # Check whether --enable-checking was given.\n if test \"${enable_checking+set}\" = set; then :\n-  enableval=$enable_checking;\n+  enableval=$enable_checking; ac_checking_flags=\"${enableval}\"\n+else\n+\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n else\n-  enable_checking=no\n+  ac_checking_flags=release\n+fi\n fi\n \n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in release $ac_checking_flags\n+do\n+\tcase $check in\n+\t# these set all the flags to specific states\n+\tyes|all) ac_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none|release) ac_checking= ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n+\tmisc) ac_checking=1 ;;\n+\tvalgrind) ac_valgrind_checking=1 ;;\n+\t# accept\n+\t*) ;;\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n \n-if test $enable_checking != no ; then\n+if test x$ac_checking != x ; then\n \n $as_echo \"#define ENABLE_CHECKING 1\" >>confdefs.h\n \n fi\n \n+if test x$ac_valgrind_checking != x ; then\n+\n+$as_echo \"#define ENABLE_VALGRIND_CHECKING 1\" >>confdefs.h\n+\n+fi\n+\n # Check whether --enable-canonical-system-headers was given.\n if test \"${enable_canonical_system_headers+set}\" = set; then :\n   enableval=$enable_canonical_system_headers;"}, {"sha": "e0c4ae6958fc5423a3040089ff2a9732568b4380", "filename": "libcpp/configure.ac", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=1a80db971def22067b3ccbb27b995cd5b86488c0", "patch": "@@ -123,15 +123,53 @@ else\n fi\n AC_SUBST(MAINT)\n \n-AC_ARG_ENABLE(checking,\n-[  --enable-checking      enable expensive run-time checks],,\n-enable_checking=no)\n+# Enable expensive internal checks\n+is_release=\n+if test -f $srcdir/../gcc/DEV-PHASE \\\n+   && test x\"`cat $srcdir/../gcc/DEV-PHASE`\" != xexperimental; then\n+  is_release=yes\n+fi\n \n-if test $enable_checking != no ; then\n+AC_ARG_ENABLE(checking,\n+[AS_HELP_STRING([[--enable-checking[=LIST]]],\n+\t\t[enable expensive run-time checks.  With LIST,\n+\t\t enable only specific categories of checks.\n+\t\t Categories are: yes,no,all,none,release.\n+\t\t Flags are: misc,valgrind or other strings])],\n+[ac_checking_flags=\"${enableval}\"],[\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n+else\n+  ac_checking_flags=release\n+fi])\n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in release $ac_checking_flags\n+do\n+\tcase $check in\n+\t# these set all the flags to specific states\n+\tyes|all) ac_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none|release) ac_checking= ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n+\tmisc) ac_checking=1 ;;\n+\tvalgrind) ac_valgrind_checking=1 ;;\n+\t# accept\n+\t*) ;;\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n+                \n+if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1,\n [Define if you want more run-time sanity checks.])\n fi\n \n+if test x$ac_valgrind_checking != x ; then\n+  AC_DEFINE(ENABLE_VALGRIND_CHECKING, 1,\n+[Define if you want to workaround valgrind (a memory checker) warnings about\n+ possible memory leaks because of libcpp use of interior pointers.])\n+fi\n+\n AC_ARG_ENABLE(canonical-system-headers,\n [  --enable-canonical-system-headers\n                           enable or disable system headers canonicalization],"}, {"sha": "570c00733cb10b696edfbb7bcddde51db5d956f9", "filename": "libcpp/lex.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a80db971def22067b3ccbb27b995cd5b86488c0/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=1a80db971def22067b3ccbb27b995cd5b86488c0", "patch": "@@ -2846,8 +2846,17 @@ new_buff (size_t len)\n     len = MIN_BUFF_SIZE;\n   len = CPP_ALIGN (len);\n \n+#ifdef ENABLE_VALGRIND_CHECKING\n+  /* Valgrind warns about uses of interior pointers, so put _cpp_buff\n+     struct first.  */\n+  size_t slen = CPP_ALIGN2 (sizeof (_cpp_buff), 2 * DEFAULT_ALIGNMENT);\n+  base = XNEWVEC (unsigned char, len + slen);\n+  result = (_cpp_buff *) base;\n+  base += slen;\n+#else\n   base = XNEWVEC (unsigned char, len + sizeof (_cpp_buff));\n   result = (_cpp_buff *) (base + len);\n+#endif\n   result->base = base;\n   result->cur = base;\n   result->limit = base + len;\n@@ -2934,7 +2943,11 @@ _cpp_free_buff (_cpp_buff *buff)\n   for (; buff; buff = next)\n     {\n       next = buff->next;\n+#ifdef ENABLE_VALGRIND_CHECKING\n+      free (buff);\n+#else\n       free (buff->base);\n+#endif\n     }\n }\n "}]}