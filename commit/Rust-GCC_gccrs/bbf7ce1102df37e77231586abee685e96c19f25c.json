{"sha": "bbf7ce1102df37e77231586abee685e96c19f25c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJmN2NlMTEwMmRmMzdlNzcyMzE1ODZhYmVlNjg1ZTk2YzE5ZjI1Yw==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-04-02T12:03:48Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-04-02T12:03:48Z"}, "message": "builtins.c (is_builtin_name): New.\n\n2009-04-02  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* builtins.c (is_builtin_name): New.\n\t(called_as_built_in): Use is_builtin_name.\n\t* tree.h (is_builtin_name): New.\n\t* varasm.c (incorporeal_function_p): Use is_builtin_name\n\nFrom-SVN: r145444", "tree": {"sha": "ada50fd14e79e9d014f08296118dd44ba72f361a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada50fd14e79e9d014f08296118dd44ba72f361a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf7ce1102df37e77231586abee685e96c19f25c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf7ce1102df37e77231586abee685e96c19f25c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf7ce1102df37e77231586abee685e96c19f25c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf7ce1102df37e77231586abee685e96c19f25c/comments", "author": null, "committer": null, "parents": [{"sha": "47e4dfcf4a4770e17ade0a4a1d10cc41e2675554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e4dfcf4a4770e17ade0a4a1d10cc41e2675554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e4dfcf4a4770e17ade0a4a1d10cc41e2675554"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "af401e7804f725775918ff94598e507d410b72b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbf7ce1102df37e77231586abee685e96c19f25c", "patch": "@@ -1,3 +1,10 @@\n+2009-04-02  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* builtins.c (is_builtin_name): New.\n+\t(called_as_built_in): Use is_builtin_name.\n+\t* tree.h (is_builtin_name): New.\n+\t* varasm.c (incorporeal_function_p): Use is_builtin_name\n+\n 2009-04-02  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/sh/linux-unwind.h: Disable when inhibit_libc is defined."}, {"sha": "9f0f4ac4fba1cd53384ed1b06be7ac034eb49740", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=bbf7ce1102df37e77231586abee685e96c19f25c", "patch": "@@ -241,20 +241,30 @@ static tree do_mpfr_bessel_n (tree, tree, tree,\n static tree do_mpfr_remquo (tree, tree, tree);\n static tree do_mpfr_lgamma_r (tree, tree, tree);\n \n-/* Return true if NODE should be considered for inline expansion regardless\n-   of the optimization level.  This means whenever a function is invoked with\n-   its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n-\n-static bool called_as_built_in (tree node)\n+bool\n+is_builtin_name (const char *name)\n {\n-  const char *name = IDENTIFIER_POINTER (DECL_NAME (node));\n   if (strncmp (name, \"__builtin_\", 10) == 0)\n     return true;\n   if (strncmp (name, \"__sync_\", 7) == 0)\n     return true;\n   return false;\n }\n \n+/* Return true if NODE should be considered for inline expansion regardless\n+   of the optimization level.  This means whenever a function is invoked with\n+   its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n+\n+static bool\n+called_as_built_in (tree node)\n+{\n+  /* Note that we must use DECL_NAME, not DECL_ASSEMBLER_NAME_SET_P since\n+     we want the name used to call the function, not the name it\n+     will have. */\n+  const char *name = IDENTIFIER_POINTER (DECL_NAME (node));\n+  return is_builtin_name (name);\n+}\n+\n /* Return the alignment in bits of EXP, an object.\n    Don't return more than MAX_ALIGN no matter what, ALIGN is the inital\n    guessed alignment e.g. from type alignment.  */"}, {"sha": "1f262f622e52ed6d47dfdc5b09b07283a9d85fc4", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bbf7ce1102df37e77231586abee685e96c19f25c", "patch": "@@ -4896,6 +4896,7 @@ extern tree build_string_literal (int, const char *);\n extern bool validate_arglist (const_tree, ...);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n extern int get_pointer_alignment (tree, unsigned int);\n+extern bool is_builtin_name(const char*);\n extern int get_object_alignment (tree, unsigned int, unsigned int);\n extern tree fold_call_stmt (gimple, bool);\n extern tree gimple_fold_builtin_snprintf_chk (gimple, tree, enum built_in_function);"}, {"sha": "4e414442e54776bf4dae12ae6c165572116fa8cd", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf7ce1102df37e77231586abee685e96c19f25c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=bbf7ce1102df37e77231586abee685e96c19f25c", "patch": "@@ -2256,7 +2256,7 @@ incorporeal_function_p (tree decl)\n \treturn true;\n \n       name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      if (strncmp (name, \"__builtin_\", strlen (\"__builtin_\")) == 0)\n+      if (is_builtin_name (name))\n \treturn true;\n     }\n   return false;"}]}