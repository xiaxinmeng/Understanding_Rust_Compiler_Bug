{"sha": "d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyNTliMDdiMDQ5YzMwOTMzOWM4YjFmZGU0YzZhYzNmZjg4NmNjMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2009-06-10T16:31:29Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-06-10T16:31:29Z"}, "message": "tree.h (tree_base): Add packed_flag and user_align fields.\n\ngcc/\n\t* tree.h (tree_base): Add packed_flag and user_align fields.\n\tDecrease size of spare field.\n\t(TYPE_USER_ALIGN): Use user_align from tree_base.\n\t(DECL_USER_ALIGN): Likewise.\n\t(TYPE_PACKED): Use packed_flag from tree_base.\n\t(DECL_PACKED): Likewise.\n\t(tree_type): Delete packed_flag and user_align fields.  Widen\n\tprecision field.  Widen mode field and shuffle fields to align\n\tmode on an 8-bit boundary.\n\t(tree_decl_common): Delete decl_flag_1 and user_align fields.\n\tRenumber decl_flag_* fields.  Fix comments.  Widen\n\tdecl_common_unused field.\n\t(DECL_HAS_VALUE_EXPR_P): Adjust for renumbering of decl_flag_*\n\tfields.\n\t(DECL_EXTERNAL): Likewise.\n\t(DECL_BIT_FIELD): Likewise.\n\t(DECL_NONADDRESSABLE_P): Likewise.\n\t(TYPE_DECL_SUPRESS_DEBUG): Likewise.\n\t* config/arm/arm-modes.def (XImode): Make it an INT_MODE.\n\ngcc/testsuite/\n\t* gcc.target/arm/neon-modes-1.c: New test.\n\nFrom-SVN: r148348", "tree": {"sha": "5057b605e5e082279e2ea302cde5316635f1c7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5057b605e5e082279e2ea302cde5316635f1c7c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/comments", "author": null, "committer": null, "parents": [{"sha": "c25696045a8422510cc2bdea80cd68eabc16d25f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25696045a8422510cc2bdea80cd68eabc16d25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25696045a8422510cc2bdea80cd68eabc16d25f"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "c3fe425cbafc303e4135323d313b8aac9405f4b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "patch": "@@ -1,3 +1,25 @@\n+2009-06-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (tree_base): Add packed_flag and user_align fields.\n+\tDecrease size of spare field.\n+\t(TYPE_USER_ALIGN): Use user_align from tree_base.\n+\t(DECL_USER_ALIGN): Likewise.\n+\t(TYPE_PACKED): Use packed_flag from tree_base.\n+\t(DECL_PACKED): Likewise.\n+\t(tree_type): Delete packed_flag and user_align fields.  Widen\n+\tprecision field.  Widen mode field and shuffle fields to align\n+\tmode on an 8-bit boundary.\n+\t(tree_decl_common): Delete decl_flag_1 and user_align fields.\n+\tRenumber decl_flag_* fields.  Fix comments.  Widen\n+\tdecl_common_unused field.\n+\t(DECL_HAS_VALUE_EXPR_P): Adjust for renumbering of decl_flag_*\n+\tfields.\n+\t(DECL_EXTERNAL): Likewise.\n+\t(DECL_BIT_FIELD): Likewise.\n+\t(DECL_NONADDRESSABLE_P): Likewise.\n+\t(TYPE_DECL_SUPRESS_DEBUG): Likewise.\n+\t* config/arm/arm-modes.def (XImode): Make it an INT_MODE.\n+\n 2009-06-10  Ian Lance Taylor  <iant@google.com>\n \n \t* vec.h (DEF_VEC_ALLOC_I): Use DEF_VEC_NONALLOC_FUNCS_I."}, {"sha": "73b5b4d3d0df85a0f1ec24e4a57e8a111a3999f2", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "patch": "@@ -62,6 +62,4 @@ VECTOR_MODES (FLOAT, 16);     /*       V8HF V4SF V2DF */\n INT_MODE (EI, 24);\n INT_MODE (OI, 32);\n INT_MODE (CI, 48);\n-/* ??? This should actually have 512 bits but the precision only has 9\n-   bits.  */\n-FRACTIONAL_INT_MODE (XI, 511, 64);\n+INT_MODE (XI, 64);"}, {"sha": "0a0f7bb0a7f399900a277331797592f3bfb22a63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "patch": "@@ -1,3 +1,7 @@\n+2009-06-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc.target/arm/neon-modes-1.c: New test.\n+\n 2009-06-10  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* g++.dg/torture/pr31579.C: Cast pointer"}, {"sha": "6ee13af014295cd4e16a0440337eee92405620e6", "filename": "gcc/testsuite/gcc.target/arm/neon-modes-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-1.c?ref=d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+void neon_internal_error(int *dst, int *src)\n+{\n+  uint16x8x4_t sval;\n+\n+  sval = vld4q_u16((void *)src);\n+  vst4q_u16((void *)dst,sval);\n+}"}, {"sha": "3f695fddab4c3dce9a11e2dda2ca05e182a6bb51", "filename": "gcc/tree.h", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8259b07b049c309339c8b1fde4c6ac3ff886cc3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d8259b07b049c309339c8b1fde4c6ac3ff886cc3", "patch": "@@ -373,8 +373,10 @@ struct GTY(()) tree_base {\n   unsigned lang_flag_6 : 1;\n \n   unsigned visited : 1;\n+  unsigned packed_flag : 1;\n+  unsigned user_align : 1;\n \n-  unsigned spare : 23;\n+  unsigned spare : 21;\n \n   union tree_ann_d *ann;\n };\n@@ -2108,7 +2110,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n /* 1 if the alignment for this type was requested by \"aligned\" attribute,\n    0 if it is the default for this type.  */\n-#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->type.user_align)\n+#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->common.base.user_align)\n \n /* The alignment for NODE, in bytes.  */\n #define TYPE_ALIGN_UNIT(NODE) (TYPE_ALIGN (NODE) / BITS_PER_UNIT)\n@@ -2219,7 +2221,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n-#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->type.packed_flag)\n+#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->common.base.packed_flag)\n \n /* Used by type_contains_placeholder_p to avoid recomputation.\n    Values are: 0 (unknown), 1 (false), 2 (true).  Never access\n@@ -2237,25 +2239,23 @@ struct GTY(()) tree_type {\n   tree attributes;\n   unsigned int uid;\n \n-  unsigned int precision : 9;\n-  ENUM_BITFIELD(machine_mode) mode : 7;\n-\n-  unsigned string_flag : 1;\n+  unsigned int precision : 10;\n   unsigned no_force_blk_flag : 1;\n   unsigned needs_constructing_flag : 1;\n   unsigned transparent_union_flag : 1;\n-  unsigned packed_flag : 1;\n   unsigned restrict_flag : 1;\n   unsigned contains_placeholder_bits : 2;\n \n+  ENUM_BITFIELD(machine_mode) mode : 8;\n+\n+  unsigned string_flag : 1;\n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n   unsigned lang_flag_2 : 1;\n   unsigned lang_flag_3 : 1;\n   unsigned lang_flag_4 : 1;\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n-  unsigned user_align : 1;\n \n   unsigned int align;\n   alias_set_type alias_set;\n@@ -2509,7 +2509,7 @@ struct GTY(()) tree_decl_minimal {\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)\n /* Set if the alignment of this DECL has been set by the user, for\n    example with an 'aligned' attribute.  */\n-#define DECL_USER_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.user_align)\n+#define DECL_USER_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->common.base.user_align)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -2546,7 +2546,7 @@ struct GTY(()) tree_decl_minimal {\n    example, for a FUNCTION_DECL, DECL_SAVED_TREE may be non-NULL and\n    DECL_EXTERNAL may be true simultaneously; that can be the case for\n    a C99 \"extern inline\" function.  */\n-#define DECL_EXTERNAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.decl_flag_2)\n+#define DECL_EXTERNAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.decl_flag_1)\n \n /* Nonzero in a ..._DECL means this variable is ref'd from a nested function.\n    For VAR_DECL nodes, PARM_DECL nodes, and FUNCTION_DECL nodes.\n@@ -2615,7 +2615,6 @@ struct GTY(()) tree_decl_common {\n   unsigned ignored_flag : 1;\n   unsigned abstract_flag : 1;\n   unsigned artificial_flag : 1;\n-  unsigned user_align : 1;\n   unsigned preserve_flag: 1;\n   unsigned debug_expr_is_from : 1;\n \n@@ -2631,22 +2630,20 @@ struct GTY(()) tree_decl_common {\n   /* In LABEL_DECL, this is DECL_ERROR_ISSUED.\n      In VAR_DECL and PARM_DECL, this is DECL_REGISTER.  */\n   unsigned decl_flag_0 : 1;\n-  /* In FIELD_DECL, this is DECL_PACKED.  */\n-  unsigned decl_flag_1 : 1;\n   /* In FIELD_DECL, this is DECL_BIT_FIELD\n      In VAR_DECL and FUNCTION_DECL, this is DECL_EXTERNAL.\n-     In TYPE_DECL, this is TYPE_DECL_SUPRESS_DEBUG.  */\n-  unsigned decl_flag_2 : 1;\n+     In TYPE_DECL, this is TYPE_DECL_SUPPRESS_DEBUG.  */\n+  unsigned decl_flag_1 : 1;\n   /* In FIELD_DECL, this is DECL_NONADDRESSABLE_P\n-     In VAR_DECL and PARM_DECL, this is DECL_HAS_VALUE_EXPR.  */\n-  unsigned decl_flag_3 : 1;\n+     In VAR_DECL and PARM_DECL, this is DECL_HAS_VALUE_EXPR_P.  */\n+  unsigned decl_flag_2 : 1;\n   /* Logically, these two would go in a theoretical base shared by var and\n      parm decl. */\n   unsigned gimple_reg_flag : 1;\n   /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_BY_REFERENCE.  */\n   unsigned decl_by_reference_flag : 1;\n   /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n-  unsigned decl_common_unused : 2;\n+  unsigned decl_common_unused : 4;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;\n@@ -2672,7 +2669,7 @@ extern void decl_value_expr_insert (tree, tree);\n    decl itself.  This should only be used for debugging; once this field has\n    been set, the decl itself may not legitimately appear in the function.  */\n #define DECL_HAS_VALUE_EXPR_P(NODE) \\\n-  (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_flag_3)\n+  (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_flag_2)\n #define DECL_VALUE_EXPR(NODE) \\\n   (decl_value_expr_lookup (DECL_WRTL_CHECK (NODE)))\n #define SET_DECL_VALUE_EXPR(NODE, VAL)\t\t\t\\\n@@ -2750,11 +2747,11 @@ struct GTY(()) tree_decl_with_rtl {\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->field_decl.fcontext)\n \n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n-#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_1)\n+#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->common.base.packed_flag)\n \n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n-#define DECL_BIT_FIELD(NODE) (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_2)\n+#define DECL_BIT_FIELD(NODE) (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_1)\n \n /* Used in a FIELD_DECL to indicate that we cannot form the address of\n    this component.  This makes it possible for Type-Based Alias Analysis\n@@ -2772,7 +2769,7 @@ struct GTY(()) tree_decl_with_rtl {\n    accesses to s.i must not be given the alias set of the type of 'i'\n    (int) but instead directly that of the type of 's' (struct S).  */\n #define DECL_NONADDRESSABLE_P(NODE) \\\n-  (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_3)\n+  (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_2)\n \n struct GTY(()) tree_field_decl {\n   struct tree_decl_common common;\n@@ -3242,7 +3239,7 @@ struct GTY(()) tree_function_decl {\n    into stabs.  Instead it will generate cross reference ('x') of names.\n    This uses the same flag as DECL_EXTERNAL.  */\n #define TYPE_DECL_SUPPRESS_DEBUG(NODE) \\\n-  (TYPE_DECL_CHECK (NODE)->decl_common.decl_flag_2)\n+  (TYPE_DECL_CHECK (NODE)->decl_common.decl_flag_1)\n \n /* Getter of the imported declaration associated to the\n    IMPORTED_DECL node.  */"}]}