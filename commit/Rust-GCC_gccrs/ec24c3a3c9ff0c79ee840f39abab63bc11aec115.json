{"sha": "ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyNGMzYTNjOWZmMGM3OWVlODQwZjM5YWJhYjYzYmMxMWFlYzExNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-04-01T08:41:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-04-01T08:41:14Z"}, "message": "re PR middle-end/35781 (Revision 133759 breaks ia64)\n\n\n\tPR middle-end/35781\n\t* m32c/m32.c (m32c_leaf_function_p, m32c_function_needs_enter): Use\n\trtl.emit instead cfun->emit.\n\t* sparc/sparc.h (INIT_EXPANDERS): Likewise.\n\t* ia64/ia64.h (INIT_EXPANDERS): Likewise.\n\nCo-Authored-By: Andreas Tobler <andreast@gcc.gnu.org>\nCo-Authored-By: James E Wilson <wilson@tuliptree.org>\n\nFrom-SVN: r133786", "tree": {"sha": "d66f591193d4af8aab566e51f5d27fe3c446a867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66f591193d4af8aab566e51f5d27fe3c446a867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/comments", "author": null, "committer": null, "parents": [{"sha": "1b82c3aabead02b8028068a11314c97082ca95c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b82c3aabead02b8028068a11314c97082ca95c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b82c3aabead02b8028068a11314c97082ca95c3"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "581e622c47fc16641292528029c1543541857e0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "patch": "@@ -1,3 +1,13 @@\n+2008-04-01  Jan Hubicka  <jh@suse.cz>\n+\t    Jim Wilson  <wilson@tuliptree.org>\n+\t    Andreas Tobler <andreast@gcc.gnu.org>\n+\n+\tPR middle-end/35781\n+\t* m32c/m32.c (m32c_leaf_function_p, m32c_function_needs_enter): Use\n+\trtl.emit instead cfun->emit.\n+\t* sparc/sparc.h (INIT_EXPANDERS): Likewise.\n+\t* ia64/ia64.h (INIT_EXPANDERS): Likewise.\n+\n 2008-04-01  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/c-tree.texi (Function Basics): Fix grammatical error."}, {"sha": "618ba24814bf3cd54f54904206d71d33b3368491", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "patch": "@@ -982,7 +982,7 @@ enum reg_class\n #define INIT_EXPANDERS\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n     ia64_init_expanders ();                             \\\n-    if (cfun && cfun->emit->regno_pointer_align)\t\\\n+    if (rtl.emit.regno_pointer_align)\t\\\n       REGNO_POINTER_ALIGN (ARG_POINTER_REGNUM) = 64;\t\\\n   } while (0)\n "}, {"sha": "37caaf974fc6a6e90f88a767b6a508d8c14b10f0", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "patch": "@@ -3889,20 +3889,20 @@ m32c_leaf_function_p (void)\n   struct sequence_stack *seq;\n   int rv;\n \n-  saved_first = cfun->emit->x_first_insn;\n-  saved_last = cfun->emit->x_last_insn;\n-  for (seq = cfun->emit->sequence_stack; seq && seq->next; seq = seq->next)\n+  saved_first = rtl.emit.x_first_insn;\n+  saved_last = rtl.emit.x_last_insn;\n+  for (seq = rtl.emit.sequence_stack; seq && seq->next; seq = seq->next)\n     ;\n   if (seq)\n     {\n-      cfun->emit->x_first_insn = seq->first;\n-      cfun->emit->x_last_insn = seq->last;\n+      rtl.emit.x_first_insn = seq->first;\n+      rtl.emit.x_last_insn = seq->last;\n     }\n \n   rv = leaf_function_p ();\n \n-  cfun->emit->x_first_insn = saved_first;\n-  cfun->emit->x_last_insn = saved_last;\n+  rtl.emit.x_first_insn = saved_first;\n+  rtl.emit.x_last_insn = saved_last;\n   return rv;\n }\n \n@@ -3918,7 +3918,7 @@ m32c_function_needs_enter (void)\n   rtx fb = gen_rtx_REG (Pmode, FB_REGNO);\n \n   insn = get_insns ();\n-  for (seq = cfun->emit->sequence_stack;\n+  for (seq = rtl.emit.sequence_stack;\n        seq;\n        insn = seq->first, seq = seq->next);\n "}, {"sha": "fcea576233414567af6118a1ee842d1d3221439c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24c3a3c9ff0c79ee840f39abab63bc11aec115/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=ec24c3a3c9ff0c79ee840f39abab63bc11aec115", "patch": "@@ -953,7 +953,7 @@ extern int sparc_mode_class[];\n /* Given the stack bias, the stack pointer isn't actually aligned.  */\n #define INIT_EXPANDERS\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t \\\n-    if (cfun && cfun->emit->regno_pointer_align && SPARC_STACK_BIAS)\t \\\n+    if (rtl.emit.regno_pointer_align && SPARC_STACK_BIAS)\t \\\n       {\t\t\t\t\t\t\t\t\t \\\n \tREGNO_POINTER_ALIGN (STACK_POINTER_REGNUM) = BITS_PER_UNIT;\t \\\n \tREGNO_POINTER_ALIGN (HARD_FRAME_POINTER_REGNUM) = BITS_PER_UNIT; \\"}]}