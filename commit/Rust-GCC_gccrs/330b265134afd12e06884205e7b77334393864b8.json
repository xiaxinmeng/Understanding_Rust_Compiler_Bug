{"sha": "330b265134afd12e06884205e7b77334393864b8", "node_id": "C_kwDOANBUbNoAKDMzMGIyNjUxMzRhZmQxMmUwNjg4NDIwNWU3Yjc3MzM0MzkzODY0Yjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-16T09:48:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-16T09:48:58Z"}, "message": "Merge #926\n\n926: macros: Add multiple macro syntax tests r=CohenArthur a=CohenArthur\n\nThis PR adds test cases for macros, including parsing and execution.\r\n\r\nI am unsure on how to check for proper execution: The solution I have chosen so far is to make sure that a correct amount of lines is printed, which I'm not entirely satisfied with. \r\n\r\nAnother solution would be to increase a global integer to use when exiting, which we can then assert on using dejagnu, which is cleaner but relies on unsafe rust code.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "8efd84f917a1a684e0813b55c552f140e89337d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8efd84f917a1a684e0813b55c552f140e89337d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330b265134afd12e06884205e7b77334393864b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDMiLCRBK7hj4Ov3rIwAAKU8IAKstRMCf8OkWIO+PTfKGKgF2\nTeZMtryOiah6gWUL7wiiCXILo3eMvnZnBRpOgOpEmyo7PwJJDS+2gHVqRITd2uRf\nwzo4vvY1ZTCNIpWmht7jogDkF8lP9c3SW5GgpnL8eJyFLIQDjI4vztA5uy3av3iJ\n9L+MmPiL2+h9Bt8Kvut+B7BEkVkR47/qGRl5XhDzPf/XGxpEKp/6p7D5yyGX3eIL\nvnnm9uY3c3oHcCP2tcqYesKdBMwdegNaiQFBXfL7OQlC6CMU4h7v1mouL3HeQsp/\nJkJjLhCn8NWHgTHo+PzbqaqKow318VW5d2ftXdiqaopDhKCNrMvbXz5eOoAnxwQ=\n=+jgq\n-----END PGP SIGNATURE-----\n", "payload": "tree 8efd84f917a1a684e0813b55c552f140e89337d2\nparent c7275a7fb89f324e7cd7881d12a49287a89f1c74\nparent 08dbb4e32263e611691dc73519b95a97e638fb41\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645004938 +0000\ncommitter GitHub <noreply@github.com> 1645004938 +0000\n\nMerge #926\n\n926: macros: Add multiple macro syntax tests r=CohenArthur a=CohenArthur\n\nThis PR adds test cases for macros, including parsing and execution.\r\n\r\nI am unsure on how to check for proper execution: The solution I have chosen so far is to make sure that a correct amount of lines is printed, which I'm not entirely satisfied with. \r\n\r\nAnother solution would be to increase a global integer to use when exiting, which we can then assert on using dejagnu, which is cleaner but relies on unsafe rust code.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b265134afd12e06884205e7b77334393864b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330b265134afd12e06884205e7b77334393864b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b265134afd12e06884205e7b77334393864b8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7275a7fb89f324e7cd7881d12a49287a89f1c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7275a7fb89f324e7cd7881d12a49287a89f1c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7275a7fb89f324e7cd7881d12a49287a89f1c74"}, {"sha": "08dbb4e32263e611691dc73519b95a97e638fb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dbb4e32263e611691dc73519b95a97e638fb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08dbb4e32263e611691dc73519b95a97e638fb41"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "8cd941891d0127d3628958fe9b448ef554ba705e", "filename": "gcc/testsuite/rust/compile/macro1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_parens {\n+    () => ();\n+}"}, {"sha": "a437655ef70828bf6359767a67c2a5c93edc2610", "filename": "gcc/testsuite/rust/compile/macro2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_brackets {\n+    [] => [];\n+}"}, {"sha": "e5d3e93e07baa4a2eaeb0c1556a12774f3589ce5", "filename": "gcc/testsuite/rust/compile/macro3.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_curlies {\n+    {} => {};\n+}"}, {"sha": "47ff6c93d87aa98052c53ef6b0a3ce3fa8906222", "filename": "gcc/testsuite/rust/compile/macro4.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! one_keyword {\n+    (kw) => {};\n+}"}, {"sha": "a5d80952e28422c95e4476624d9ebe7fff641d7e", "filename": "gcc/testsuite/rust/compile/macro5.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! rust_keyword {\n+    (fn) => {};\n+}"}, {"sha": "eab5a0285cf453b103472b03809a2e871d4d3513", "filename": "gcc/testsuite/rust/execute/xfail/macro1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,32 @@\n+// { dg-output \"macro\\nmacro\\nmacro\\nmacro\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"macro\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    printf(c_p);\n+}\n+\n+macro_rules! empty0 {\n+    () => ( f() );\n+}\n+\n+macro_rules! empty1 {\n+    {} => { f() };\n+}\n+\n+macro_rules! empty2 {\n+    [] => [ f() ];\n+}\n+\n+// using multiple parens/brackets/curlies variants allows us to make sure we\n+// parse everything properly\n+fn main() {\n+    empty0!();\n+    empty1!{};\n+    empty2![];\n+}"}, {"sha": "49bd6a8c02655b1507f9d5689ea114133427c24e", "filename": "gcc/testsuite/rust/execute/xfail/macro2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro2.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,30 @@\n+// { dg-output \"arg\\narg\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"arg\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    printf(c_p);\n+}\n+\n+macro_rules! kw0 {\n+    (keyword) => { f() };\n+}\n+\n+macro_rules! kw1 {\n+    (fn) => { f() };\n+}\n+\n+macro_rules! kw2 {\n+    (kw0 kw1 kw3) => { f() };\n+}\n+\n+fn main() {\n+    kw0!(keyword);\n+    kw1!(fn);\n+    kw2!(kw0 kw1 kw3);\n+}"}, {"sha": "0d99d7165ac40bc32c8e4b69c8540df2ad3bf102", "filename": "gcc/testsuite/rust/execute/xfail/macro3.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b265134afd12e06884205e7b77334393864b8/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro3.rs?ref=330b265134afd12e06884205e7b77334393864b8", "patch": "@@ -0,0 +1,45 @@\n+// { dg-output \"invok\\ninvok\\ninvok\\ninvok\\ninvok\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"invok\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    printf(c_p);\n+}\n+\n+macro_rules! invocation0 {\n+    (valid) => { f() };\n+    () => { };\n+}\n+\n+macro_rules! invocation1 {\n+    (valid) => { };\n+    () => { f() };\n+}\n+\n+macro_rules! invocation2 {\n+    (valid) => { f() };\n+    (invalid) => { };\n+}\n+\n+macro_rules! invocation3 {\n+    (this is a valid invocation) => { f() };\n+    (not this one) => { };\n+}\n+\n+macro_rules! invocation4 {\n+    (fn f() {}) => { f() };\n+    (not a keyword) => { };\n+}\n+\n+fn main() {\n+    invocation0!(valid);\n+    invocation1!();\n+    invocation2!(valid);\n+    invocation3!(this is a valid invocation);\n+    invocation4!(fn f() {});\n+}"}]}