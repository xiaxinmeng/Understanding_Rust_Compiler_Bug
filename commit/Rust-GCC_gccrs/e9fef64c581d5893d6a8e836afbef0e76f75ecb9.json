{"sha": "e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmZWY2NGM1ODFkNTg5M2Q2YThlODM2YWZiZWYwZTc2Zjc1ZWNiOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2001-12-30T16:48:59Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2001-12-30T16:48:59Z"}, "message": "mmix.md (\"*call_real\"): Fix typo in comment.\n\n\t* config/mmix/mmix.md (\"*call_real\"): Fix typo in comment.\n\t* config/mmix/mmix.h (EXTRA_CONSTRAINT): Pass MMIX_REG_OK_STRICT\n\tto mmix_extra_constraint.\n\t* config/mmix/mmix.c (mmix_secondary_reload_class): Only handle\n\tnon-global register classes.  Mark now unused parameters as such.\n\t(mmix_extra_constraint, 'U'): Use new parameter strict and call\n\tcalling memory_operand_p or strict_memory_address_p, not\n\taddress_operand.\n\t* config/mmix/mmix-protos.h (mmix_extra_constraint): Add parameter.\n\nFrom-SVN: r48402", "tree": {"sha": "f14933bc7e33f69bf9f09aa3bb51acf87467e54b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14933bc7e33f69bf9f09aa3bb51acf87467e54b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/comments", "author": null, "committer": null, "parents": [{"sha": "f6e67fa57e69c982c4895216323b74056fd3d7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e67fa57e69c982c4895216323b74056fd3d7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e67fa57e69c982c4895216323b74056fd3d7ad"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "32d6170e19212eb7feef8c048f8556959d2097e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "patch": "@@ -1,3 +1,15 @@\n+2001-12-30  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (\"*call_real\"): Fix typo in comment.\n+\t* config/mmix/mmix.h (EXTRA_CONSTRAINT): Pass MMIX_REG_OK_STRICT\n+\tto mmix_extra_constraint.\n+\t* config/mmix/mmix.c (mmix_secondary_reload_class): Only handle\n+\tnon-global register classes.  Mark now unused parameters as such.\n+\t(mmix_extra_constraint, 'U'): Use new parameter strict and call\n+\tcalling memory_operand_p or strict_memory_address_p, not\n+\taddress_operand.\n+\t* config/mmix/mmix-protos.h (mmix_extra_constraint): Add parameter.\n+\n 2001-12-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* unroll.c: Move include files above first use of `const'."}, {"sha": "6e0b70c3dfd91b137eaf6293adea149b69b90cf0", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "patch": "@@ -108,7 +108,7 @@ extern enum reg_class mmix_secondary_reload_class\n   PARAMS ((enum reg_class, enum machine_mode, rtx, int));\n extern int mmix_const_ok_for_letter_p PARAMS ((HOST_WIDE_INT, int));\n extern int mmix_const_double_ok_for_letter_p PARAMS ((rtx, int));\n-extern int mmix_extra_constraint PARAMS ((rtx, int));\n+extern int mmix_extra_constraint PARAMS ((rtx, int, int));\n extern rtx mmix_dynamic_chain_address PARAMS ((rtx));\n extern rtx mmix_return_addr_rtx PARAMS ((int, rtx));\n extern rtx mmix_eh_return_stackadj_rtx PARAMS ((void));"}, {"sha": "5227270e448774dded632d8de53ee73527c22d4e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "patch": "@@ -269,28 +269,15 @@ mmix_preferred_output_reload_class (x, class)\n enum reg_class\n mmix_secondary_reload_class (class, mode, x, in_p)\n      enum reg_class class;\n-     enum machine_mode mode;\n-     rtx x;\n-     int in_p;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     rtx x ATTRIBUTE_UNUSED;\n+     int in_p ATTRIBUTE_UNUSED;\n {\n   if (class == REMAINDER_REG\n       || class == HIMULT_REG\n       || class == SYSTEM_REGS)\n     return GENERAL_REGS;\n \n-  if (mode != DImode || in_p)\n-    return NO_REGS;\n-\n-  /* We have to help reload. */\n-  if (mode == DImode && GET_CODE (x) == MEM\n-      && ! address_operand (XEXP (x, 0), GET_MODE (x)))\n-    return GENERAL_REGS;\n-\n-  /* FIXME: Optimize this; there are lots of PLUS:es that don't need a\n-     reload register.  */\n-  if (GET_CODE (x) == PLUS)\n-    return GENERAL_REGS;\n-\n   return NO_REGS;\n }\n \n@@ -330,14 +317,22 @@ mmix_const_double_ok_for_letter_p (value, c)\n    CONST_INT:s, but rather often as CONST_DOUBLE:s.  */\n \n int\n-mmix_extra_constraint (x, c)\n+mmix_extra_constraint (x, c, strict)\n      rtx x;\n      int c;\n+     int strict;\n {\n   HOST_WIDEST_INT value;\n \n+  /* When checking for an address, we need to handle strict vs. non-strict\n+     register checks.  Don't use address_operand, but instead its\n+     equivalent (its callee, which it is just a wrapper for),\n+     memory_operand_p and the strict-equivalent strict_memory_address_p.  */\n   if (c == 'U')\n-    return address_operand (x, Pmode);\n+    return\n+      strict\n+      ? strict_memory_address_p (Pmode, x)\n+      : memory_address_p (Pmode, x);\n \n   if (GET_CODE (x) != CONST_DOUBLE || GET_MODE (x) != VOIDmode)\n     return 0;"}, {"sha": "1c552d7f8cdfcb83b636fc994b2682f38cf33c92", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "patch": "@@ -589,7 +589,7 @@ enum reg_class\n  mmix_const_ok_for_letter_p (VALUE, C)\n \n #define EXTRA_CONSTRAINT(VALUE, C)\t\\\n- mmix_extra_constraint (VALUE, C)\n+ mmix_extra_constraint (VALUE, C, MMIX_REG_OK_STRICT)\n \n /* Do we need anything serious here?  Yes, any FLOT constant.  */\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\\"}, {"sha": "cdc43cd1c8b5a63cf85c6b09cfb0479c9d002113", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fef64c581d5893d6a8e836afbef0e76f75ecb9/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=e9fef64c581d5893d6a8e836afbef0e76f75ecb9", "patch": "@@ -1038,7 +1038,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; rarely compared to addresses in registers, disparaging the\n ;; first (\"p\") alternative by adding ? in the first operand\n ;; might do the trick.  We define 'U' as a synonym to 'p', but without the\n-;; caveats (and vary small advantages) of 'p'.\n+;; caveats (and very small advantages) of 'p'.\n (define_insn \"*call_real\"\n   [(call (mem:QI\n \t  (match_operand:DI 0 \"mmix_symbolic_or_address_operand\" \"s,rU\"))"}]}