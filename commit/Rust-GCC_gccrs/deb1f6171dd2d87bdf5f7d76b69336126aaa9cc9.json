{"sha": "deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGViMWY2MTcxZGQyZDg3YmRmNWY3ZDc2YjY5MzM2MTI2YWFhOWNjOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-31T17:50:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-31T17:50:08Z"}, "message": "re PR target/49920 (unable to find a register to spill in class \u2018DIREG\u2019)\n\n\tPR target/49920\n\t* config/i386/i386.md (strset): Do not expand strset_singleop\n\twhen %eax or $edi are fixed.\n\t(*strsetdi_rex_1): Disable when %eax or %edi are fixed.\n\t(*strsetsi_1): Ditto.\n\t(*strsethi_1): Ditto.\n\t(*strsetqi_1): Ditto.\n\t(*rep_stosdi_rex64): Disable when %eax, %ecx or %edi are fixed.\n\t(*rep_stossi): Ditto.\n\t(*rep_stosqi): Ditto.\n\t(cmpstrnsi): Also fail when %ecx is fixed.\n\t(*cmpstrnqi_nz_1): Disable when %ecx, %esi or %edi are fixed.\n\t(*cmpstrnqi_1): Ditto.\n\t(*strlenqi_1): Ditto.\n\t(*strmovdi_rex_1): Disable when %esi or %edi are fixed.\n\t(*strmovsi_1): Ditto.\n\t(*strmovhi_1): Ditto.\n\t(*strmovqi_1): Ditto.\n\t(*rep_movdi_rex64): Disable when %ecx, %esi or %edi are fixed.\n\t(*rep_movsi): Ditto.\n\t(*rep_movqi): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/49920\n\t* gcc.target/i386/pr49920.c: New test.\n\nFrom-SVN: r176979", "tree": {"sha": "3b737a65716e966b955f7fa5d5efa360c774f2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b737a65716e966b955f7fa5d5efa360c774f2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/comments", "author": null, "committer": null, "parents": [{"sha": "ba4a11ba527c82438130de74c0e9ebdd9f55fde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4a11ba527c82438130de74c0e9ebdd9f55fde8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4a11ba527c82438130de74c0e9ebdd9f55fde8"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "e092d00873d45e2f70c4a4070669c449f60843a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "patch": "@@ -1,3 +1,27 @@\n+2011-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49920\n+\t* config/i386/i386.md (strset): Do not expand strset_singleop\n+\twhen %eax or $edi are fixed.\n+\t(*strsetdi_rex_1): Disable when %eax or %edi are fixed.\n+\t(*strsetsi_1): Ditto.\n+\t(*strsethi_1): Ditto.\n+\t(*strsetqi_1): Ditto.\n+\t(*rep_stosdi_rex64): Disable when %eax, %ecx or %edi are fixed.\n+\t(*rep_stossi): Ditto.\n+\t(*rep_stosqi): Ditto.\n+\t(cmpstrnsi): Also fail when %ecx is fixed.\n+\t(*cmpstrnqi_nz_1): Disable when %ecx, %esi or %edi are fixed.\n+\t(*cmpstrnqi_1): Ditto.\n+\t(*strlenqi_1): Ditto.\n+\t(*strmovdi_rex_1): Disable when %esi or %edi are fixed.\n+\t(*strmovsi_1): Ditto.\n+\t(*strmovhi_1): Ditto.\n+\t(*strmovqi_1): Ditto.\n+\t(*rep_movdi_rex64): Disable when %ecx, %esi or %edi are fixed.\n+\t(*rep_movsi): Ditto.\n+\t(*rep_movqi): Ditto.\n+\n 2011-07-31  Mikael Pettersson  <mikpe@it.uu.se>\n \n \tPR target/47908\n@@ -40,8 +64,7 @@\n \tUse scaninvent instead of /proc/cpuinfo if __sgi__.\n \t* config.host: Also use driver-native.o, mips/x-native on\n \tmips-sgi-irix*.\n-\t* config/mips/iris6.h [__mips__] (host_detect_local_cpu):\n-\tDeclare.\n+\t* config/mips/iris6.h [__mips__] (host_detect_local_cpu): Declare.\n \t(EXTRA_SPEC_FUNCTIONS, MARCH_MTUNE_NATIVE_SPECS): Define.\n \t(DRIVER_SELF_SPECS): Add MARCH_MTUNE_NATIVE_SPECS.\n "}, {"sha": "5dfa43ee427e6fc93f349f0023fd8c492a1cf7d3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "patch": "@@ -15421,7 +15421,8 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n \t\t (const_int 8)))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && !(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -15436,7 +15437,7 @@\n    (set (match_operand:P 1 \"register_operand\" \"=S\")\n \t(plus:P (match_dup 3)\n \t\t(const_int 4)))]\n-  \"\"\n+  \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -15451,7 +15452,7 @@\n    (set (match_operand:P 1 \"register_operand\" \"=S\")\n \t(plus:P (match_dup 3)\n \t\t(const_int 2)))]\n-  \"\"\n+  \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -15466,7 +15467,7 @@\n    (set (match_operand:P 1 \"register_operand\" \"=S\")\n \t(plus:P (match_dup 3)\n \t\t(const_int 1)))]\n-  \"\"\n+  \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n@@ -15501,7 +15502,8 @@\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && !(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15520,7 +15522,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n-  \"\"\n+  \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15537,7 +15539,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n-  \"\"\n+  \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15580,7 +15582,9 @@\n   operands[3] = gen_rtx_PLUS (Pmode, operands[0],\n \t\t\t      GEN_INT (GET_MODE_SIZE (GET_MODE\n \t\t\t\t\t\t      (operands[2]))));\n-  if (TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n+  /* Can't use this if the user has appropriated eax or edi.  */\n+  if ((TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n+      && !(fixed_regs[AX_REG] || fixed_regs[DI_REG]))\n     {\n       emit_insn (gen_strset_singleop (operands[0], operands[1], operands[2],\n \t\t\t\t      operands[3]));\n@@ -15602,7 +15606,8 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int 8)))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && !(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n   \"stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -15614,7 +15619,7 @@\n    (set (match_operand:P 0 \"register_operand\" \"=D\")\n \t(plus:P (match_dup 1)\n \t\t(const_int 4)))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n   \"stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -15626,7 +15631,7 @@\n    (set (match_operand:P 0 \"register_operand\" \"=D\")\n \t(plus:P (match_dup 1)\n \t\t(const_int 2)))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -15638,7 +15643,7 @@\n    (set (match_operand:P 0 \"register_operand\" \"=D\")\n \t(plus:P (match_dup 1)\n \t\t(const_int 1)))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n@@ -15669,7 +15674,8 @@\n \t(const_int 0))\n    (use (match_operand:DI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && !(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15686,7 +15692,7 @@\n \t(const_int 0))\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15702,7 +15708,7 @@\n \t(const_int 0))\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n   \"rep{%;} stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -15727,8 +15733,8 @@\n   if (optimize_insn_for_size_p () && !TARGET_INLINE_ALL_STRINGOPS)\n     FAIL;\n \n-  /* Can't use this if the user has appropriated esi or edi.  */\n-  if (fixed_regs[SI_REG] || fixed_regs[DI_REG])\n+  /* Can't use this if the user has appropriated ecx, esi or edi.  */\n+  if (fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n     FAIL;\n \n   out = operands[0];\n@@ -15823,7 +15829,7 @@\n    (clobber (match_operand:P 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n-  \"\"\n+  \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n@@ -15863,7 +15869,7 @@\n    (clobber (match_operand:P 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n-  \"\"\n+  \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n   \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n@@ -15904,7 +15910,7 @@\n \t\t   (match_operand:P 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n   \"repnz{%;} scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")"}, {"sha": "e6beacd7f2510ffd1a48814844be0e925f4d1df8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "patch": "@@ -1,3 +1,8 @@\n+2011-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49920\n+\t* gcc.target/i386/pr49920.c: New test.\n+\n 2011-07-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/tree-ssa/20050314-1.c: Dump and cleanup lim1 pass only."}, {"sha": "ef2a185122e15dcdc94399181d055c3ddd1fd8f2", "filename": "gcc/testsuite/gcc.target/i386/pr49920.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49920.c?ref=deb1f6171dd2d87bdf5f7d76b69336126aaa9cc9", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target ia32 } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *malloc (size_t);\n+\n+register unsigned int MR_mr0 asm (\"esi\");\n+register unsigned int MR_mr1 asm (\"edi\");\n+\n+void ml_backend__ml_closure_gen_module11 (void)\n+{\n+  unsigned int MR_tempr1, MR_tempr2, MR_tempr3;\n+\n+  MR_tempr1 = (unsigned int)((char *) malloc (sizeof (unsigned int)) + 4);\n+  MR_tempr3 = ((unsigned int *) MR_mr0)[0];\n+\n+  ((unsigned int *) (MR_tempr1 - 4))[0] = MR_tempr3;\n+\n+  MR_tempr2 = (unsigned int)((char *) malloc (2 * sizeof (unsigned int)));\n+\n+  ((unsigned int *) MR_tempr2)[1] = MR_tempr1;\n+}"}]}