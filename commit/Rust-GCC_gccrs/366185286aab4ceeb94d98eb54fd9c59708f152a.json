{"sha": "366185286aab4ceeb94d98eb54fd9c59708f152a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2MTg1Mjg2YWFiNGNlZWI5NGQ5OGViNTRmZDljNTk3MDhmMTUyYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T18:10:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T18:10:11Z"}, "message": "(common_type): Use TYPE_MAIN_VARIANT when preferring\nlong int to int (when width is the same).\n\n(check_format): With -Wformat, warn about\nprintf(\"%ld\", 1) even if sizeof (int) == sizeof (long),\nsince the code isn't portable.  Similarly for \"%d\" vs 1L.\n\n(convert_arguments) [PROMOTE_PROTOTYPES]:\nWith -Wconversion, use unpromoted type to check for signedness changes.\n\nFrom-SVN: r4935", "tree": {"sha": "946b52405b7212d1a870b567e708061872e551b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946b52405b7212d1a870b567e708061872e551b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366185286aab4ceeb94d98eb54fd9c59708f152a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366185286aab4ceeb94d98eb54fd9c59708f152a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366185286aab4ceeb94d98eb54fd9c59708f152a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366185286aab4ceeb94d98eb54fd9c59708f152a/comments", "author": null, "committer": null, "parents": [{"sha": "edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "af934e373e2b40ea5548cdf0cdbe274667d257b8", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366185286aab4ceeb94d98eb54fd9c59708f152a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366185286aab4ceeb94d98eb54fd9c59708f152a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=366185286aab4ceeb94d98eb54fd9c59708f152a", "patch": "@@ -231,12 +231,12 @@ common_type (t1, t2)\n \n       /* Same precision.  Prefer longs to ints even when same size.  */\n \n-      if (t1 == long_unsigned_type_node\n-\t  || t2 == long_unsigned_type_node)\n+      if (TYPE_MAIN_VARIANT (t1) == long_unsigned_type_node\n+\t  || TYPE_MAIN_VARIANT (t2) == long_unsigned_type_node)\n \treturn long_unsigned_type_node;\n \n-      if (t1 == long_integer_type_node\n-\t  || t2 == long_integer_type_node)\n+      if (TYPE_MAIN_VARIANT (t1) == long_integer_type_node\n+\t  || TYPE_MAIN_VARIANT (t2) == long_integer_type_node)\n \t{\n \t  /* But preserve unsignedness from the other type,\n \t     since long cannot hold all the values of an unsigned int.  */\n@@ -1787,7 +1787,8 @@ check_format (info, params)\n \t  /* Don't warn about differences merely in signedness.  */\n \t  && !(TREE_CODE (wanted_type) == INTEGER_TYPE\n \t       && TREE_CODE (cur_type) == INTEGER_TYPE\n-\t       && TYPE_PRECISION (wanted_type) == TYPE_PRECISION (cur_type)))\n+\t       && (wanted_type == (TREE_UNSIGNED (wanted_type)\n+\t\t\t\t   ? unsigned_type : signed_type) (cur_type))))\n \t{\n \t  register char *this;\n \t  register char *that;\n@@ -1998,6 +1999,7 @@ convert_arguments (typelist, values, name, fundecl)\n \t  else\n \t    {\n \t      tree parmname;\n+\t      tree type0 = type;\n #ifdef PROMOTE_PROTOTYPES\n \t      /* Rather than truncating and then reextending,\n \t\t convert directly to int, if that's the type we will want.  */"}]}