{"sha": "9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxOTAyYTllN2UzY2IwNmQzM2FkMmMxZTFlMDAyZDJiYTA5NzNlYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2012-10-01T08:39:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:39:43Z"}, "message": "aspects.ads: Type_Invariant'class is a valid aspect.\n\n2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.ads: Type_Invariant'class is a valid aspect.\n\t* sem_ch6.adb (Is_Public_Subprogram_For): with the exception of\n\tinitialization procedures, subprograms that do not come from\n\tsource are not public for the purpose of invariant checking.\n\t* sem_ch13.adb (Build_Invariant_Procedure): Handle properly the\n\tcase of a non-private type in a package without a private part,\n\twhen the type inherits invariants from its ancestor.\n\n2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Build_Record_Invariant_Proc): new procedure to\n\tgenerate a checking procedure for record types that may have\n\tcomponents whose types have type invariants declared.\n\nFrom-SVN: r191901", "tree": {"sha": "1ced32edb6dcc6893cad6b2430c07f37d1c79a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ced32edb6dcc6893cad6b2430c07f37d1c79a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8dde8759781d78310905ed3c2fb8b78e84964a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dde8759781d78310905ed3c2fb8b78e84964a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8dde8759781d78310905ed3c2fb8b78e84964a9"}], "stats": {"total": 227, "additions": 218, "deletions": 9}, "files": [{"sha": "d0f86178e5721d53686f4fbbf460af12aa6e29a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "patch": "@@ -1,3 +1,19 @@\n+2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads: Type_Invariant'class is a valid aspect.\n+\t* sem_ch6.adb (Is_Public_Subprogram_For): with the exception of\n+\tinitialization procedures, subprograms that do not come from\n+\tsource are not public for the purpose of invariant checking.\n+\t* sem_ch13.adb (Build_Invariant_Procedure): Handle properly the\n+\tcase of a non-private type in a package without a private part,\n+\twhen the type inherits invariants from its ancestor.\n+\n+2012-10-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Invariant_Proc): new procedure to\n+\tgenerate a checking procedure for record types that may have\n+\tcomponents whose types have type invariants declared.\n+\n 2012-10-01  Vincent Pucci  <pucci@adacore.com>\n \n \t* system-solaris-sparcv9.ads, system-mingw.ads, system-vms_64.ads: Flag"}, {"sha": "12e5e6b52c9496dce34b6885c5d90a8a61f3be66", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "patch": "@@ -191,11 +191,12 @@ package Aspects is\n    --  The following array indicates aspects that accept 'Class\n \n    Class_Aspect_OK : constant array (Aspect_Id) of Boolean :=\n-                       (Aspect_Invariant     => True,\n-                        Aspect_Pre           => True,\n-                        Aspect_Predicate     => True,\n-                        Aspect_Post          => True,\n-                        others               => False);\n+                       (Aspect_Invariant      => True,\n+                        Aspect_Pre            => True,\n+                        Aspect_Predicate      => True,\n+                        Aspect_Post           => True,\n+                        Aspect_Type_Invariant => True,\n+                        others                => False);\n \n    --  The following array indicates aspects that a subtype inherits from\n    --  its base type. True means that the subtype inherits the aspect from"}, {"sha": "293c902389da568ef71931bbff6e95208ab8443f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "patch": "@@ -118,6 +118,10 @@ package body Exp_Ch3 is\n    --  Build record initialization procedure. N is the type declaration\n    --  node, and Rec_Ent is the corresponding entity for the record type.\n \n+   procedure Build_Record_Invariant_Proc (R_Type : Entity_Id; Nod : Node_Id);\n+   --  If the record type has components whose types have invariant, build\n+   --  an invariant procedure for the record type itself.\n+\n    procedure Build_Slice_Assignment (Typ : Entity_Id);\n    --  Build assignment procedure for one-dimensional arrays of controlled\n    --  types. Other array and slice assignments are expanded in-line, but\n@@ -3611,6 +3615,174 @@ package body Exp_Ch3 is\n       end if;\n    end Build_Record_Init_Proc;\n \n+   --------------------------------\n+   -- Build_Record_Invariant_Proc --\n+   --------------------------------\n+\n+   procedure Build_Record_Invariant_Proc (R_Type : Entity_Id; Nod : Node_Id) is\n+      Loc : constant Source_Ptr := Sloc (Nod);\n+\n+      Object_Name : constant Name_Id := New_Internal_Name ('I');\n+      --  Name for argument of invariant procedure\n+\n+      Object_Entity : constant Node_Id :=\n+                        Make_Defining_Identifier (Loc, Object_Name);\n+      --  The procedure declaration entity for the argument\n+\n+      Invariant_Found : Boolean;\n+      --  Set if any component needs an invariant check.\n+\n+      Proc_Id   : Entity_Id;\n+      Proc_Body : Node_Id;\n+      Stmts     : List_Id;\n+      Type_Def  : Node_Id;\n+\n+      function Build_Invariant_Checks (Comp_List : Node_Id) return List_Id;\n+      --  Recursive procedure that generates a list of checks for components\n+      --  that need it, and recurses through variant parts when present.\n+\n+      function Build_Component_Invariant_Call (Comp : Entity_Id)\n+      return Node_Id;\n+      --  Build call to invariant procedure for a record component.\n+\n+      ------------------------------------\n+      -- Build_Component_Invariant_Call --\n+      ------------------------------------\n+\n+      function Build_Component_Invariant_Call (Comp : Entity_Id)\n+      return Node_Id\n+      is\n+         Sel_Comp : Node_Id;\n+\n+      begin\n+         Invariant_Found := True;\n+         Sel_Comp :=\n+           Make_Selected_Component (Loc,\n+             Prefix      => New_Occurrence_Of (Object_Entity, Loc),\n+             Selector_Name => New_Occurrence_Of (Comp, Loc));\n+\n+         return\n+           Make_Procedure_Call_Statement (Loc,\n+             Name                   =>\n+               New_Occurrence_Of\n+                 (Invariant_Procedure (Etype (Comp)), Loc),\n+             Parameter_Associations => New_List (Sel_Comp));\n+      end Build_Component_Invariant_Call;\n+\n+      ----------------------------\n+      -- Build_Invariant_Checks --\n+      ----------------------------\n+\n+      function Build_Invariant_Checks (Comp_List : Node_Id) return List_Id is\n+         Decl     : Node_Id;\n+         Id       : Entity_Id;\n+         Stmts    : List_Id;\n+\n+      begin\n+         Stmts := New_List;\n+         Decl := First_Non_Pragma (Component_Items (Comp_List));\n+\n+         while Present (Decl) loop\n+            if Nkind (Decl) = N_Component_Declaration then\n+               Id  := Defining_Identifier (Decl);\n+               if Has_Invariants (Etype (Id)) then\n+                  Append_To (Stmts, Build_Component_Invariant_Call (Id));\n+               end if;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+\n+         if Present (Variant_Part (Comp_List)) then\n+            declare\n+               Variant_Alts  : constant List_Id := New_List;\n+               Var_Loc       : Source_Ptr;\n+               Variant       : Node_Id;\n+               Variant_Stmts : List_Id;\n+\n+            begin\n+               Variant :=\n+                 First_Non_Pragma (Variants (Variant_Part (Comp_List)));\n+               while Present (Variant) loop\n+                  Variant_Stmts :=\n+                    Build_Invariant_Checks (Component_List (Variant));\n+                  Var_Loc := Sloc (Variant);\n+                  Append_To (Variant_Alts,\n+                    Make_Case_Statement_Alternative (Var_Loc,\n+                      Discrete_Choices =>\n+                        New_Copy_List (Discrete_Choices (Variant)),\n+                      Statements => Variant_Stmts));\n+\n+                  Next_Non_Pragma (Variant);\n+               end loop;\n+\n+               --  The expression in the case statement is the reference to\n+               --  the discriminant of the target object.\n+\n+               Append_To (Stmts,\n+                 Make_Case_Statement (Var_Loc,\n+                   Expression =>\n+                     Make_Selected_Component (Var_Loc,\n+                      Prefix => New_Occurrence_Of (Object_Entity, Var_Loc),\n+                      Selector_Name => New_Occurrence_Of\n+                        (Entity\n+                          (Name (Variant_Part (Comp_List))), Var_Loc)),\n+                      Alternatives => Variant_Alts));\n+            end;\n+         end if;\n+\n+         return Stmts;\n+      end Build_Invariant_Checks;\n+\n+   begin\n+      Invariant_Found := False;\n+      Type_Def := Type_Definition (Parent (R_Type));\n+      if Nkind (Type_Def) = N_Record_Definition\n+        and then  not Null_Present (Type_Def)\n+      then\n+         Stmts :=\n+           Build_Invariant_Checks (Component_List (Type_Def));\n+      else\n+         return;\n+      end if;\n+\n+      if not Invariant_Found then\n+         return;\n+      end if;\n+\n+      Proc_Id :=\n+        Make_Defining_Identifier (Loc,\n+           Chars => New_External_Name (Chars (R_Type), \"Invariant\"));\n+      Set_Has_Invariants (Proc_Id);\n+      Set_Has_Invariants (R_Type);\n+      Set_Invariant_Procedure (R_Type, Proc_Id);\n+\n+      Proc_Body :=\n+        Make_Subprogram_Body (Loc,\n+          Specification =>\n+            Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name       => Proc_Id,\n+              Parameter_Specifications => New_List (\n+                Make_Parameter_Specification (Loc,\n+                  Defining_Identifier => Object_Entity,\n+                  Parameter_Type      => New_Occurrence_Of (R_Type, Loc)))),\n+\n+          Declarations               => Empty_List,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (Loc,\n+              Statements => Stmts));\n+\n+      Set_Ekind          (Proc_Id, E_Procedure);\n+      Set_Is_Public      (Proc_Id, Is_Public (R_Type));\n+      Set_Is_Internal    (Proc_Id);\n+      Set_Has_Completion (Proc_Id);\n+\n+      --  The procedure body is placed after the freeze node for the type.\n+\n+      Insert_After (Nod, Proc_Body);\n+      Analyze (Proc_Body);\n+   end Build_Record_Invariant_Proc;\n+\n    ----------------------------\n    -- Build_Slice_Assignment --\n    ----------------------------\n@@ -6637,6 +6809,10 @@ package body Exp_Ch3 is\n             end loop;\n          end;\n       end if;\n+\n+      if not Has_Invariants (Def_Id) then\n+         Build_Record_Invariant_Proc (Def_Id, N);\n+      end if;\n    end Expand_Freeze_Record_Type;\n \n    ------------------------------"}, {"sha": "c93fd7e37f147199655641c5cef67ad806d38f18", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "patch": "@@ -5188,9 +5188,6 @@ package body Sem_Ch13 is\n                  Statements => Stmts));\n \n          --  Insert procedure declaration and spec at the appropriate points.\n-         --  Skip this if there are no private declarations (that's an error\n-         --  that will be diagnosed elsewhere, and there is no point in having\n-         --  an invariant procedure set if the full declaration is missing).\n \n          if Present (Private_Decls) then\n \n@@ -5214,6 +5211,19 @@ package body Sem_Ch13 is\n             if In_Private_Part (Current_Scope) then\n                Analyze (PBody);\n             end if;\n+\n+         --  If there are no private declarations this may be an error that\n+         --  will be diagnosed elsewhere. However, if this is a non-private\n+         --  type that inherits invariants, it needs no completion and there\n+         --  may be no private part. In this case insert invariant procedure\n+         --  at end of current declarative list, and analyze at once, given\n+         --  that the type is about to be frozen.\n+\n+         elsif not Is_Private_Type (Typ) then\n+            Append_To (Visible_Decls, PDecl);\n+            Append_To (Visible_Decls, PBody);\n+            Analyze (PDecl);\n+            Analyze (PBody);\n          end if;\n       end if;\n    end Build_Invariant_Procedure;"}, {"sha": "c71c2db3eaa80071b39b6ef4fa565a8890029c47", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9e1902a9e7e3cb06d33ad2c1e1e002d2ba0973ec", "patch": "@@ -11342,10 +11342,16 @@ package body Sem_Ch6 is\n          --  If the subprogram declaration is not a list member, it must be\n          --  an Init_Proc, in which case we want to consider it to be a\n          --  public subprogram, since we do get initializations to deal with.\n+         --  Other internally generated subprograms are not public.\n \n-         if not Is_List_Member (DD) then\n+         if not Is_List_Member (DD)\n+           and then Is_Init_Proc (DD)\n+         then\n             return True;\n \n+         elsif not Comes_From_Source (DD) then\n+            return False;\n+\n          --  Otherwise we test whether the subprogram is declared in the\n          --  visible declarations of the package containing the type.\n "}]}