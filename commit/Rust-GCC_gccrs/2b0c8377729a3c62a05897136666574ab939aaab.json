{"sha": "2b0c8377729a3c62a05897136666574ab939aaab", "node_id": "C_kwDOANBUbNoAKDJiMGM4Mzc3NzI5YTNjNjJhMDU4OTcxMzY2NjY1NzRhYjkzOWFhYWI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-26T15:15:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-17T22:09:24Z"}, "message": "c++: constexpr ref to array of array [PR102307]\n\nThe problem here is that first check_initializer calls\nbuild_aggr_init_full_exprs, which does overload resolution, but then in the\ncase of failed constexpr throws away the result and does it again in\nbuild_functional_cast.  But in the first overload resolution,\nreshape_init_array_1 decided to reuse the inner CONSTRUCTORs because\ntf_error is set, so we know we're committed.  But the second pass gets\nconfused by the CONSTRUCTORs with non-init-list types.\n\nFixed by avoiding a second pass: instead, pass the call from build_aggr_init\nto build_cplus_new, which will turn it into a TARGET_EXPR.  I don't bother\nto change the object argument because it will be replaced later in\nsimplify_aggr_init_expr.\n\n\tPR c++/102307\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (check_initializer): Use build_cplus_new in case of\n\tconstexpr failure.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-array2.C: New test.", "tree": {"sha": "7e773340c84575e560cb9d78468a761c16866b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e773340c84575e560cb9d78468a761c16866b08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b0c8377729a3c62a05897136666574ab939aaab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0c8377729a3c62a05897136666574ab939aaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0c8377729a3c62a05897136666574ab939aaab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0c8377729a3c62a05897136666574ab939aaab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c05a2d1a8e4697ea95d65c5da601aeae327e7a7"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "381259cb9cf849be1f7aea31080f3bcd4d8c9465", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0c8377729a3c62a05897136666574ab939aaab/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0c8377729a3c62a05897136666574ab939aaab/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=2b0c8377729a3c62a05897136666574ab939aaab", "patch": "@@ -7413,12 +7413,19 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t      /* Declared constexpr or constinit, but no suitable initializer;\n \t\t massage init appropriately so we can pass it into\n \t\t store_init_value for the error.  */\n-\t      if (CLASS_TYPE_P (type)\n-\t\t  && (!init || TREE_CODE (init) == TREE_LIST))\n+\t      tree new_init = NULL_TREE;\n+\t      if (!processing_template_decl\n+\t\t  && TREE_CODE (init_code) == CALL_EXPR)\n+\t\tnew_init = build_cplus_new (type, init_code, tf_none);\n+\t      else if (CLASS_TYPE_P (type)\n+\t\t       && (!init || TREE_CODE (init) == TREE_LIST))\n+\t\tnew_init = build_functional_cast (input_location, type,\n+\t\t\t\t\t\t  init, tf_none);\n+\t      if (new_init)\n \t\t{\n-\t\t  init = build_functional_cast (input_location, type,\n-\t\t\t\t\t\tinit, tf_none);\n-\t\t  if (TREE_CODE (init) == TARGET_EXPR)\n+\t\t  init = new_init;\n+\t\t  if (TREE_CODE (init) == TARGET_EXPR\n+\t\t      && !(flags & LOOKUP_ONLYCONVERTING))\n \t\t    TARGET_EXPR_DIRECT_INIT_P (init) = true;\n \t\t}\n \t      init_code = NULL_TREE;"}, {"sha": "c30e3f2361d8b2e8c810d041894a1cb1855b418f", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-array2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0c8377729a3c62a05897136666574ab939aaab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-array2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0c8377729a3c62a05897136666574ab939aaab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-array2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-array2.C?ref=2b0c8377729a3c62a05897136666574ab939aaab", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/102307\n+// { dg-do compile { target c++11 } }\n+\n+#include <array>\n+template <unsigned N, unsigned M> struct Matrix {\n+  constexpr Matrix(double const (&arr)[N][M]); // { dg-warning \"never defined\" }\n+  constexpr Matrix(std::array<std::array<double, M>, N> const &arr);\n+};\n+int main() {\n+  constexpr Matrix<2, 3>\n+    mat {{ {1.0, 2.0, 3.0}, {4.0, 5.0, 6.0} }}; // { dg-error \"before its definition\" }\n+}"}]}