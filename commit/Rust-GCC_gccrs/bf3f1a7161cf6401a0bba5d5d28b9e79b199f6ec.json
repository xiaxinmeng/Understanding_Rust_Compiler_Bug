{"sha": "bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzZjFhNzE2MWNmNjQwMWEwYmJhNWQ1ZDI4YjllNzliMTk5ZjZlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "1999-12-22T09:01:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "1999-12-22T09:01:59Z"}, "message": "libio.h (_IO_cookie_io_functions_t): Use _IO_off_t instead of _IO_fpos_t.\n\n\n\t* libio.h (_IO_cookie_io_functions_t): Use _IO_off_t instead of\n\t_IO_fpos_t.\n\t(_IO_seekoff, _IO_seekpos): Likewise. Use _IO_off64_t instead of\n\t_IO_fpos64_t.\n\t* libioP.h (_IO_seekoff_t, _IO_seekpos_t, _IO_seek_t): Likewise.\n\t(_IO_seekoff, _IO_seekpos): Likewise.\n\t(_IO_default_seekoff, _IO_default_seekpos): Likewise.\n\t(_IO_default_seek): Likewise.\n\t(_IO_file_seekoff, _IO_file_seek, _IO_str_seekoff): Likewise.\n\t* streambuf.h (streampos): Typedef to _IO_off_t resp. _IO_off64_t.\n\t* parsestream.h (class parsebuf::pos_at_line_start): Change type\n\tto _IO_off_t.\n\nFrom-SVN: r31068", "tree": {"sha": "5f116c7f174938acd751cdac89f633761c44642d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f116c7f174938acd751cdac89f633761c44642d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6a898ba9e5640269015a0f035adfdc10d18bd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a898ba9e5640269015a0f035adfdc10d18bd40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a898ba9e5640269015a0f035adfdc10d18bd40"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "f827e3d313d817513f7c3b53131b9a6652b76e79", "filename": "libio/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "patch": "@@ -1,3 +1,18 @@\n+1999-12-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libio.h (_IO_cookie_io_functions_t): Use _IO_off_t instead of\n+\t_IO_fpos_t.\n+\t(_IO_seekoff, _IO_seekpos): Likewise. Use _IO_off64_t instead of\n+\t_IO_fpos64_t.\n+\t* libioP.h (_IO_seekoff_t, _IO_seekpos_t, _IO_seek_t): Likewise.\n+\t(_IO_seekoff, _IO_seekpos): Likewise.\n+\t(_IO_default_seekoff, _IO_default_seekpos): Likewise.\n+\t(_IO_default_seek): Likewise.\n+\t(_IO_file_seekoff, _IO_file_seek, _IO_str_seekoff): Likewise.\n+\t* streambuf.h (streampos): Typedef to _IO_off_t resp. _IO_off64_t.\n+\t* parsestream.h (class parsebuf::pos_at_line_start): Change type\n+\tto _IO_off_t.\n+\n 1999-12-21  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* filebuf.cc (open): Support ios::ate if _G_HAVE_IO_FILE_OPEN."}, {"sha": "b4dffa85ea43337f6d23b3c2babbdaa4fb09d4e5", "filename": "libio/libio.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Flibio.h?ref=bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "patch": "@@ -277,7 +277,7 @@ typedef struct\n {\n   _IO_ssize_t (*read) __PMT ((struct _IO_FILE *, void *, _IO_ssize_t));\n   _IO_ssize_t (*write) __PMT ((struct _IO_FILE *, const void *, _IO_ssize_t));\n-  _IO_fpos_t (*seek) __PMT ((struct _IO_FILE *, _IO_off_t, int));\n+  _IO_off_t (*seek) __PMT ((struct _IO_FILE *, _IO_off_t, int));\n   int (*close) __PMT ((struct _IO_FILE *));\n } _IO_cookie_io_functions_t;\n \n@@ -348,11 +348,11 @@ extern _IO_ssize_t _IO_padn __P ((_IO_FILE *, int, _IO_ssize_t));\n extern _IO_size_t _IO_sgetn __P ((_IO_FILE *, void *, _IO_size_t));\n \n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n-extern _IO_fpos64_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos64_t, int));\n+extern _IO_off64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_off64_t _IO_seekpos __P ((_IO_FILE *, _IO_off64_t, int));\n #else\n-extern _IO_fpos_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n-extern _IO_fpos_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+extern _IO_off_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_off_t _IO_seekpos __P ((_IO_FILE *, _IO_off_t, int));\n #endif\n \n extern void _IO_free_backup_area __P ((_IO_FILE *));"}, {"sha": "be70f526bbe600580b5f96e0360a86d5426e05be", "filename": "libio/libioP.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "patch": "@@ -146,10 +146,10 @@ typedef _IO_size_t (*_IO_xsgetn_t) __PMT ((_IO_FILE *FP, void *DATA,\n    It matches the streambuf::seekoff virtual function.\n    It is also used for the ANSI fseek function. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off64_t OFF,\n+typedef _IO_off64_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off64_t OFF,\n \t\t\t\t\t  int DIR, int MODE));\n #else\n-typedef _IO_fpos_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off_t OFF,\n+typedef _IO_off_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off_t OFF,\n \t\t\t\t\t  int DIR, int MODE));\n #endif\n #define _IO_SEEKOFF(FP, OFF, DIR, MODE) JUMP3 (__seekoff, FP, OFF, DIR, MODE)\n@@ -160,9 +160,9 @@ typedef _IO_fpos_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off_t OFF,\n    It is also used for the ANSI fgetpos and fsetpos functions.  */\n /* The _IO_seek_cur and _IO_seek_end options are not allowed. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_fpos64_t, int));\n+typedef _IO_off64_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_off64_t, int));\n #else\n-typedef _IO_fpos_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_fpos_t, int));\n+typedef _IO_off_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_off_t, int));\n #endif\n #define _IO_SEEKPOS(FP, POS, FLAGS) JUMP2 (__seekpos, FP, POS, FLAGS)\n \n@@ -213,9 +213,9 @@ typedef _IO_ssize_t (*_IO_write_t) __PMT ((_IO_FILE *,const void *,_IO_ssize_t))\n    It matches the streambuf::sys_seek virtual function, which is\n    specific to this implementation. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off64_t, int));\n+typedef _IO_off64_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off64_t, int));\n #else\n-typedef _IO_fpos_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off_t, int));\n+typedef _IO_off_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off_t, int));\n #endif\n #define _IO_SYSSEEK(FP, OFFSET, MODE) JUMP2 (__seek, FP, OFFSET, MODE)\n \n@@ -298,11 +298,11 @@ struct _IO_FILE_plus\n /* Generic functions */\n \n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n-extern _IO_fpos64_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos64_t, int));\n+extern _IO_off64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_off64_t _IO_seekpos __P ((_IO_FILE *, _IO_off64_t, int));\n #else\n-extern _IO_fpos_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n-extern _IO_fpos_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+extern _IO_off_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_off_t _IO_seekpos __P ((_IO_FILE *, _IO_off_t, int));\n #endif\n \n extern void _IO_switch_to_main_get_area __P ((_IO_FILE *));\n@@ -340,22 +340,22 @@ extern _IO_size_t _IO_default_xsputn __P ((_IO_FILE *, const void *,\n \t\t\t\t\t   _IO_size_t));\n extern _IO_size_t _IO_default_xsgetn __P ((_IO_FILE *, void *, _IO_size_t));\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_default_seekoff __P ((_IO_FILE *,\n+extern _IO_off64_t _IO_default_seekoff __P ((_IO_FILE *,\n \t\t\t\t\t      _IO_off64_t, int, int));\n-extern _IO_fpos64_t _IO_default_seekpos __P ((_IO_FILE *,\n-\t\t\t\t\t      _IO_fpos64_t, int));\n+extern _IO_off64_t _IO_default_seekpos __P ((_IO_FILE *,\n+\t\t\t\t\t      _IO_off64_t, int));\n #else\n-extern _IO_fpos_t _IO_default_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n-extern _IO_fpos_t _IO_default_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+extern _IO_off_t _IO_default_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_off_t _IO_default_seekpos __P ((_IO_FILE *, _IO_off_t, int));\n #endif\n extern _IO_ssize_t _IO_default_write __P ((_IO_FILE *, const void *,\n \t\t\t\t\t   _IO_ssize_t));\n extern _IO_ssize_t _IO_default_read __P ((_IO_FILE *, void *, _IO_ssize_t));\n extern int _IO_default_stat __P ((_IO_FILE *, void *));\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_default_seek __P ((_IO_FILE *, _IO_off64_t, int));\n+extern _IO_off64_t _IO_default_seek __P ((_IO_FILE *, _IO_off64_t, int));\n #else\n-extern _IO_fpos_t _IO_default_seek __P ((_IO_FILE *, _IO_off_t, int));\n+extern _IO_off_t _IO_default_seek __P ((_IO_FILE *, _IO_off_t, int));\n #endif\n extern int _IO_default_sync __P ((_IO_FILE *));\n #define _IO_default_close ((_IO_close_t) _IO_default_sync)\n@@ -389,11 +389,11 @@ extern void _IO_flush_all_linebuffered __P ((void));\n extern int _IO_file_doallocate __P ((_IO_FILE *));\n extern _IO_FILE* _IO_file_setbuf __P ((_IO_FILE *, char *, _IO_ssize_t));\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n-extern _IO_fpos64_t _IO_file_seek __P ((_IO_FILE *, _IO_off64_t, int));\n+extern _IO_off64_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_off64_t _IO_file_seek __P ((_IO_FILE *, _IO_off64_t, int));\n #else\n-extern _IO_fpos_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n-extern _IO_fpos_t _IO_file_seek __P ((_IO_FILE *, _IO_off_t, int));\n+extern _IO_off_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_off_t _IO_file_seek __P ((_IO_FILE *, _IO_off_t, int));\n #endif\n extern _IO_size_t _IO_file_xsputn __P ((_IO_FILE *, const void *, _IO_size_t));\n extern int _IO_file_stat __P ((_IO_FILE *, void *));\n@@ -427,9 +427,9 @@ extern int _IO_str_underflow __P ((_IO_FILE *));\n extern int _IO_str_overflow __P ((_IO_FILE *, int));\n extern int _IO_str_pbackfail __P ((_IO_FILE *, int));\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-extern _IO_fpos64_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_off64_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n #else\n-extern _IO_fpos_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_off_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n #endif\n extern void _IO_str_finish __P ((_IO_FILE *, int));\n \n@@ -544,12 +544,12 @@ extern int _IO_vscanf __P ((const char *, _IO_va_list));\n    where an _IO_fpos_t is a struct.\n    Note that _IO_off_t must be an integral type. */\n \n-/* _IO_pos_BAD is an _IO_fpos_t value indicating error, unknown, or EOF. */\n+/* _IO_pos_BAD is an _IO_off_t value indicating error, unknown, or EOF. */\n #ifndef _IO_pos_BAD\n # if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-#  define _IO_pos_BAD ((_IO_fpos64_t) -1)\n+#  define _IO_pos_BAD ((_IO_off64_t) -1)\n # else\n-#  define _IO_pos_BAD ((_IO_fpos_t) -1)\n+#  define _IO_pos_BAD ((_IO_off_t) -1)\n # endif\n #endif\n /* _IO_pos_as_off converts an _IO_fpos_t value to an _IO_off_t value. */"}, {"sha": "97655bcbf6911cced379ccf898972f4221932758", "filename": "libio/parsestream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Fparsestream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Fparsestream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fparsestream.h?ref=bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "patch": "@@ -42,7 +42,7 @@ extern \"C++\" {\n \n class parsebuf : public streambuf {\n   protected:\n-    _IO_fpos_t pos_at_line_start;\n+    _IO_off_t pos_at_line_start;\n     long _line_length;\n     unsigned long __line_number;\n     char *buf_start;"}, {"sha": "193c4993827f39df7743bd809fe765bf6929eaa4", "filename": "libio/streambuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec/libio%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.h?ref=bf3f1a7161cf6401a0bba5d5d28b9e79b199f6ec", "patch": "@@ -72,10 +72,10 @@ class ostream; class streambuf;\n \n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n typedef _IO_off64_t streamoff;\n-typedef _IO_fpos64_t streampos;\n+typedef _IO_off64_t streampos;\n #else\n typedef _IO_off_t streamoff;\n-typedef _IO_fpos_t streampos;\n+typedef _IO_off_t streampos;\n #endif\n typedef _IO_ssize_t streamsize;\n "}]}