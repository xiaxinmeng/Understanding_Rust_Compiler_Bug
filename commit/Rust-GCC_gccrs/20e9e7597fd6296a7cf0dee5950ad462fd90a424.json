{"sha": "20e9e7597fd6296a7cf0dee5950ad462fd90a424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlOWU3NTk3ZmQ2Mjk2YTdjZjBkZWU1OTUwYWQ0NjJmZDkwYTQyNA==", "commit": {"author": {"name": "Trevor Smigiel", "email": "Trevor_Smigiel@playstation.sony.com", "date": "2006-12-05T03:55:38Z"}, "committer": {"name": "Trevor Smigiel", "email": "tsmigiel@gcc.gnu.org", "date": "2006-12-05T03:55:38Z"}, "message": "spu-protos.c (spu_split_address): Add.\n\n\t* config/spu/spu-protos.c (spu_split_address): Add.\n\t* config/spu/spu.c (spu_split_address): Add.\n\t(print_operand): Handle HIGH.\n\t(spu_legitimate_address):  Don't test for aligned CONST.\n\t(spu_expand_mov):  Don't split addresses here.\n\t* config/spu/constraints.md (A): Don't test legitimate_const.\n\t* config/spu/spu.md: Add split of movsi patterns for PIC mode.\n\t(ceq_di): Use correct predicates.\n\nFrom-SVN: r119532", "tree": {"sha": "65123aef957e7b411075e3f63f039c152f1e6510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65123aef957e7b411075e3f63f039c152f1e6510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e9e7597fd6296a7cf0dee5950ad462fd90a424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e9e7597fd6296a7cf0dee5950ad462fd90a424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e9e7597fd6296a7cf0dee5950ad462fd90a424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e9e7597fd6296a7cf0dee5950ad462fd90a424/comments", "author": null, "committer": null, "parents": [{"sha": "304c85e6f0293474bd1737715de270562bce87cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304c85e6f0293474bd1737715de270562bce87cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304c85e6f0293474bd1737715de270562bce87cd"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "d2a87437d79603226d2d34d8f8908c930b5297ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20e9e7597fd6296a7cf0dee5950ad462fd90a424", "patch": "@@ -1,3 +1,14 @@\n+2006-12-04  Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n+\n+\t* config/spu/spu-protos.c (spu_split_address): Add.\n+\t* config/spu/spu.c (spu_split_address): Add.\n+\t(print_operand): Handle HIGH.\n+\t(spu_legitimate_address):  Don't test for aligned CONST.\n+\t(spu_expand_mov):  Don't split addresses here.\n+\t* config/spu/constraints.md (A): Don't test legitimate_const.\n+\t* config/spu/spu.md: Add split of movsi patterns for PIC mode.\n+\t(ceq_di): Use correct predicates.\n+\n 2006-12-04  Eric Christopher  <echristo@apple.com>\n \n \t* config/darwin.h: Update copyright notice."}, {"sha": "4fa96ce224c4cb8ee8e963c139b57c089d7f6a3f", "filename": "gcc/config/spu/constraints.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fconstraints.md?ref=20e9e7597fd6296a7cf0dee5950ad462fd90a424", "patch": "@@ -28,10 +28,7 @@\n   \"An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 32 bit value.\"\n   (ior (and (match_code \"const_int,const_double,const_vector\")\n \t    (match_test \"immediate_load_p (op, SImode)\"))\n-       (and (match_test \"!TARGET_LARGE_MEM && !flag_pic\")\n-\t    (ior (match_code \"symbol_ref,label_ref\")\n-\t\t (and (match_code \"const\")\n-\t\t      (match_test \"legitimate_const (op, 0)\"))))))\n+       (match_code \"symbol_ref,label_ref,high,const\")))\n \n (define_constraint \"B\"\n   \"An immediate for arithmetic instructions (e.g., ai, ceqi).  const_int is treated as a 32 bit value.\""}, {"sha": "3239745ee0e8cfe300657827238e2e804e63ffb7", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=20e9e7597fd6296a7cf0dee5950ad462fd90a424", "patch": "@@ -34,6 +34,7 @@ extern HOST_WIDE_INT const_double_to_hwint (rtx x);\n extern rtx hwint_to_const_double (enum machine_mode mode, HOST_WIDE_INT v);\n extern void print_operand_address (FILE * file, register rtx addr);\n extern void print_operand (FILE * file, rtx x, int code);\n+extern void spu_split_address (rtx * ops);\n extern int spu_saved_regs_size (void);\n extern int direct_return (void);\n extern void spu_expand_prologue (void);"}, {"sha": "d6c420a444d81cdfdcbcf0404e11110cc952e5f4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=20e9e7597fd6296a7cf0dee5950ad462fd90a424", "patch": "@@ -1088,6 +1088,8 @@ print_operand (FILE * file, rtx x, int code)\n \t}\n       else if (xcode == SYMBOL_REF || xcode == LABEL_REF || xcode == CONST)\n \tfprintf (file, \"a\");\n+      else if (xcode == HIGH)\n+\tfprintf (file, \"hu\");\n       else\n \tgcc_unreachable ();\n       return;\n@@ -1118,6 +1120,11 @@ print_operand (FILE * file, rtx x, int code)\n \t}\n       else if (xcode == CONST || xcode == SYMBOL_REF || xcode == LABEL_REF)\n \toutput_addr_const (file, x);\n+      else if (xcode == HIGH)\n+\t{\n+\t  output_addr_const (file, XEXP (x, 0));\n+\t  fprintf (file, \"@h\");\n+\t}\n       else\n \tgcc_unreachable ();\n       return;\n@@ -1267,6 +1274,27 @@ get_pic_reg (void)\n   return pic_reg;\n }\n \n+/* Split constant addresses to handle cases that are too large.  Also, add in\n+   the pic register when in PIC mode. */\n+void\n+spu_split_address (rtx * ops)\n+{\n+  if (TARGET_LARGE_MEM\n+      || (GET_CODE (ops[1]) == CONST && !legitimate_const (ops[1], 0)))\n+    {\n+      emit_insn (gen_high (ops[0], ops[1]));\n+      emit_insn (gen_low (ops[0], ops[0], ops[1]));\n+    }\n+  else if (flag_pic)\n+    emit_insn (gen_pic (ops[0], ops[1]));\n+  if (flag_pic)\n+    {\n+      rtx pic_reg = get_pic_reg ();\n+      emit_insn (gen_addsi3 (ops[0], ops[0], pic_reg));\n+      current_function_uses_pic_offset_table = 1;\n+    }\n+}\n+\n /* SAVING is TRUE when we are generating the actual load and store\n    instructions for REGNO.  When determining the size of the stack\n    needed for saving register we must allocate enough space for the\n@@ -2408,7 +2436,7 @@ spu_legitimate_address (enum machine_mode mode ATTRIBUTE_UNUSED,\n       return !TARGET_LARGE_MEM;\n \n     case CONST:\n-      return !TARGET_LARGE_MEM && legitimate_const (x, 1);\n+      return !TARGET_LARGE_MEM && legitimate_const (x, 0);\n \n     case CONST_INT:\n       return INTVAL (x) >= 0 && INTVAL (x) <= 0x3ffff;\n@@ -3091,34 +3119,6 @@ spu_expand_mov (rtx * ops, enum machine_mode mode)\n \t  emit_insn (gen_rtx_SET (VOIDmode, to, gen_rtx_IOR (mode, to, lo)));\n \t  return 1;\n \t}\n-      if ((GET_CODE (ops[1]) == CONST\n-\t    && !legitimate_const (ops[1], 0))\n-\t  || (TARGET_LARGE_MEM\n-\t      && (GET_CODE (ops[1]) == CONST\n-\t          || GET_CODE (ops[1]) == SYMBOL_REF\n-\t\t  || GET_CODE (ops[1]) == LABEL_REF)))\n-\t{\n-\t  emit_insn (gen_high (ops[0], ops[1]));\n-\t  emit_insn (gen_low (ops[0], ops[0], ops[1]));\n-\t  if (flag_pic)\n-\t    {\n-\t      rtx pic_reg = get_pic_reg ();\n-\t      emit_insn (gen_addsi3 (ops[0], ops[0], pic_reg));\n-\t      current_function_uses_pic_offset_table = 1;\n-\t    }\n-\t  return 1;\n-\t}\n-      if (flag_pic\n-\t  && (GET_CODE (ops[1]) == SYMBOL_REF\n-\t      || GET_CODE (ops[1]) == LABEL_REF\n-\t      || GET_CODE (ops[1]) == CONST))\n-\t{\n-\t  rtx pic_reg = get_pic_reg ();\n-\t  emit_insn (gen_pic (ops[0], ops[1]));\n-\t  emit_insn (gen_addsi3 (ops[0], ops[0], pic_reg));\n-\t  current_function_uses_pic_offset_table = 1;\n-\t  return 1;\n-\t}\n       return 0;\n     }\n   else"}, {"sha": "4f048801ecfcf126ebcc613ef93655176eda657f", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e9e7597fd6296a7cf0dee5950ad462fd90a424/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=20e9e7597fd6296a7cf0dee5950ad462fd90a424", "patch": "@@ -237,6 +237,29 @@\n       DONE;\n   })\n \n+(define_split \n+  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"s\"))]\n+\n+  \"(flag_pic || TARGET_LARGE_MEM\n+    || (GET_CODE (operands[1]) == CONST\n+        && !legitimate_const (operands[1], 0)))\n+   && (reload_in_progress || reload_completed)\n+   && (GET_CODE (operands[1]) == CONST\n+       || GET_CODE (operands[1]) == SYMBOL_REF\n+       || GET_CODE (operands[1]) == LABEL_REF)\"\n+  [(parallel\n+    [(set (match_dup:SI 0)\n+\t  (match_dup:SI 1))\n+     (use (const_int 0))])\n+   (set (match_dup:SI 0)\n+\t(plus:SI (match_dup:SI 0)\n+\t\t (match_dup:SI 2)))]\n+  {\n+    spu_split_address(operands);\n+    DONE;\n+  })\n+\n (define_insn \"pic\"\n   [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n@@ -2408,9 +2431,9 @@\n   ceq<bh>i\\t%0,%1,%2\")\n \n (define_insn_and_split \"ceq_di\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (eq:SI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t       (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n+        (eq:SI (match_operand:DI 1 \"spu_reg_operand\" \"r\")\n+\t       (match_operand:DI 2 \"spu_reg_operand\" \"r\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\""}]}