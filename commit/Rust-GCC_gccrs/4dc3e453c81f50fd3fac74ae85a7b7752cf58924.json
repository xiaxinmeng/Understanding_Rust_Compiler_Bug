{"sha": "4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjM2U0NTNjODFmNTBmZDNmYWM3NGFlODVhN2I3NzUyY2Y1ODkyNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-13T12:03:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-13T12:03:13Z"}, "message": "stl_deque.h (deque<>::push_back(_Args&&...), [...]): Remove.\n\n2008-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_deque.h (deque<>::push_back(_Args&&...),\n\tdeque<>::push_front(_Args&&...)): Remove.\n\t(deque<>::push_back(value_type&&),\n\tdeque<>::push_front(value_type&&)): Add.\n\t(deque<>::push_back(const value_type&),\n\tdeque<>::push_front(const value_type&)): Add back.\n\t(deque<>::emplace_back(_Args&&...),\n\tdeque<>::emplace_front(_Args&&...)): Declare...\n\t* include/bits/deque.tcc: ... and define.\t\n\t* include/bits/stl_list.h (list<>::push_back(_Args&&...),\n\tlist<>::push_front(_Args&&...)): Remove.\n\t(list<>::push_back(value_type&&), list<>::push_front(value_type&&),\n\tlist<>::emplace_back(_Args&&...), list<>::emplace_front(_Args&&...)):\n\tAdd.\n\t(list<>::push_back(const value_type&),\n\tlist<>::push_front(const value_type&)): Add back.\n\t* include/bits/stl_vector.h (vector<>::push_back(_Args&&...)): Remove.\n\t(vector<>::push_back(value_type&&)): Add.\n\t(vector<>::push_back(const value_type&)): Add back.\n\t(vector<>::emplace_back(_Args&&...)): Declare...\n\t* include/bits/vector.tcc: ... and define.\n\t* include/bits/stl_queue.h (queue<>::push(_Args&&...),\n\tpriority_queue<>::push(_Args&&...)): Remove.\n\t(queue<>::push(value_type&&), queue<>::emplace(_Args&&...),\n\tpriority_queue<>::push(value_type&&),\n\tpriority_queue<>::emplace(_Args&&...)): Add.\n\t(queue<>::push(const value_type&),\n\tpriority_queue<>::push(const value_type&)): Add back.\n\t* include/bits/stl_stack.h (stack<>::push(_Args&&...)): Remove.\n\t(stack<>::push(value_type&&), stack<>::emplace(_Args&&...)): Add.\n\t(stack<>::push(const value_type&)): Add back.\n\t* include/debug/deque (deque<>::push_back(_Args&&...),\n\tdeque<>::push_front(_Args&&...)): Remove.\n\t(deque<>::push_back(value_type&&), deque<>::push_front(value_type&&),\n\tdeque<>::emplace_back(_Args&&...), deque<>::emplace_front(_Args&&...)):\n\tAdd.\n\t(deque<>::push_back(const value_type&),\n\tdeque<>::push_front(const value_type&)): Add back.\n\t* include/debug/list (list<>::push_back(_Args&&...),\n\tlist<>::push_front(_Args&&...)): Remove.\n\t(list<>::push_back(value_type&&), list<>::push_front(value_type&&),\n\tlist<>::emplace_back(_Args&&...), list<>::emplace_front(_Args&&...)):\n\tAdd.\n\t(list<>::push_back(const value_type&),\n\tlist<>::push_front(const value_type&)): Add back.\n\t* include/debug/vector (vector<>::push_back(_Args&&...)): Remove.\n\t(vector<>::push_back(value_type&&),\n\tvector<>::emplace_back(_Args&&...)): Add.\n\t(vector<>::push_back(const value_type&)): Add back.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r136750", "tree": {"sha": "493ca684950ee53a5812faa7bc131c613ff0d358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/493ca684950ee53a5812faa7bc131c613ff0d358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/comments", "author": null, "committer": null, "parents": [{"sha": "ca789c7ff656bb004bd6693a1274a79b124af40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca789c7ff656bb004bd6693a1274a79b124af40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca789c7ff656bb004bd6693a1274a79b124af40f"}], "stats": {"total": 334, "additions": 242, "deletions": 92}, "files": [{"sha": "ebfca51c964b6cdbc4bcd7cdcf24233980a06b98", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,3 +1,79 @@\n+2008-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_deque.h (deque<>::push_back(_Args&&...),\n+\tdeque<>::push_front(_Args&&...)): Remove.\n+\t(deque<>::push_back(value_type&&),\n+\tdeque<>::push_front(value_type&&)): Add.\n+\t(deque<>::push_back(const value_type&),\n+\tdeque<>::push_front(const value_type&)): Add back.\n+\t(deque<>::emplace_back(_Args&&...),\n+\tdeque<>::emplace_front(_Args&&...)): Declare...\n+\t* include/bits/deque.tcc: ... and define.\t\n+\t* include/bits/stl_list.h (list<>::push_back(_Args&&...),\n+\tlist<>::push_front(_Args&&...)): Remove.\n+\t(list<>::push_back(value_type&&), list<>::push_front(value_type&&),\n+\tlist<>::emplace_back(_Args&&...), list<>::emplace_front(_Args&&...)):\n+\tAdd.\n+\t(list<>::push_back(const value_type&),\n+\tlist<>::push_front(const value_type&)): Add back.\n+\t* include/bits/stl_vector.h (vector<>::push_back(_Args&&...)): Remove.\n+\t(vector<>::push_back(value_type&&)): Add.\n+\t(vector<>::push_back(const value_type&)): Add back.\n+\t(vector<>::emplace_back(_Args&&...)): Declare...\n+\t* include/bits/vector.tcc: ... and define.\n+\t* include/bits/stl_queue.h (queue<>::push(_Args&&...),\n+\tpriority_queue<>::push(_Args&&...)): Remove.\n+\t(queue<>::push(value_type&&), queue<>::emplace(_Args&&...),\n+\tpriority_queue<>::push(value_type&&),\n+\tpriority_queue<>::emplace(_Args&&...)): Add.\n+\t(queue<>::push(const value_type&),\n+\tpriority_queue<>::push(const value_type&)): Add back.\n+\t* include/bits/stl_stack.h (stack<>::push(_Args&&...)): Remove.\n+\t(stack<>::push(value_type&&), stack<>::emplace(_Args&&...)): Add.\n+\t(stack<>::push(const value_type&)): Add back.\n+\t* include/debug/deque (deque<>::push_back(_Args&&...),\n+\tdeque<>::push_front(_Args&&...)): Remove.\n+\t(deque<>::push_back(value_type&&), deque<>::push_front(value_type&&),\n+\tdeque<>::emplace_back(_Args&&...), deque<>::emplace_front(_Args&&...)):\n+\tAdd.\n+\t(deque<>::push_back(const value_type&),\n+\tdeque<>::push_front(const value_type&)): Add back.\n+\t* include/debug/list (list<>::push_back(_Args&&...),\n+\tlist<>::push_front(_Args&&...)): Remove.\n+\t(list<>::push_back(value_type&&), list<>::push_front(value_type&&),\n+\tlist<>::emplace_back(_Args&&...), list<>::emplace_front(_Args&&...)):\n+\tAdd.\n+\t(list<>::push_back(const value_type&),\n+\tlist<>::push_front(const value_type&)): Add back.\n+\t* include/debug/vector (vector<>::push_back(_Args&&...)): Remove.\n+\t(vector<>::push_back(value_type&&),\n+\tvector<>::emplace_back(_Args&&...)): Add.\n+\t(vector<>::push_back(const value_type&)): Add back.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2008-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/array (array<>::assign): Do not define in"}, {"sha": "9c1096f77bacaf7a33d1d3a2ba3b613c57806617", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -85,6 +85,41 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       return *this;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      void\n+      deque<_Tp, _Alloc>::\n+      emplace_front(_Args&&... __args)\n+      {\n+\tif (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)\n+\t  {\n+\t    this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,\n+\t\t\t\t    std::forward<_Args>(__args)...);\n+\t    --this->_M_impl._M_start._M_cur;\n+\t  }\n+\telse\n+\t  _M_push_front_aux(std::forward<_Args>(__args)...);\n+      }\n+\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      void\n+      deque<_Tp, _Alloc>::\n+      emplace_back(_Args&&... __args)\n+      {\n+\tif (this->_M_impl._M_finish._M_cur\n+\t    != this->_M_impl._M_finish._M_last - 1)\n+\t  {\n+\t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n+\t\t\t\t    std::forward<_Args>(__args)...);\n+\t    ++this->_M_impl._M_finish._M_cur;\n+\t  }\n+\telse\n+\t  _M_push_back_aux(std::forward<_Args>(__args)...);\n+      }\n+#endif\n+\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::"}, {"sha": "b778f15a0755280c2c36d17c44e066d64d7636d5", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1117,7 +1117,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  data to it.  Due to the nature of a %deque this operation\n        *  can be done in constant time.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const value_type& __x)\n       {\n@@ -1129,20 +1128,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_push_front_aux(__x);\n       }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_front(value_type&& __x)\n+      { emplace_front(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_front(_Args&&... __args)\n-\t{\n-\t  if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)\n-\t    {\n-\t      this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,\n-\t\t\t\t      std::forward<_Args>(__args)...);\n-\t      --this->_M_impl._M_start._M_cur;\n-\t    }\n-\t  else\n-\t    _M_push_front_aux(std::forward<_Args>(__args)...);\n-\t}\n+        emplace_front(_Args&&... __args);\n #endif\n \n       /**\n@@ -1154,7 +1148,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  to it.  Due to the nature of a %deque this operation can be\n        *  done in constant time.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       {\n@@ -1167,21 +1160,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_push_back_aux(__x);\n       }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_back(value_type&& __x)\n+      { emplace_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_back(_Args&&... __args)\n-\t{\n-\t  if (this->_M_impl._M_finish._M_cur\n-\t      != this->_M_impl._M_finish._M_last - 1)\n-\t    {\n-\t      this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n-\t\t\t\t      std::forward<_Args>(__args)...);\n-\t      ++this->_M_impl._M_finish._M_cur;\n-\t    }\n-\t  else\n-\t    _M_push_back_aux(std::forward<_Args>(__args)...);\n-\t}\n+        emplace_back(_Args&&... __args);\n #endif\n \n       /**"}, {"sha": "08fb89ef11771918b1e94c1aa1b1cd2248e66b1e", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -833,15 +833,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  done in constant time, and does not invalidate iterators and\n        *  references.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const value_type& __x)\n       { this->_M_insert(begin(), __x); }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_front(value_type&& __x)\n+      { this->_M_insert(begin(), std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_front(_Args&&... __args)\n-\t{ this->_M_insert(begin(), std::forward<_Args>(__args)...); }\n+        emplace_front(_Args&&... __args)\n+        { this->_M_insert(begin(), std::forward<_Args>(__args)...); }\n #endif\n \n       /**\n@@ -870,15 +874,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  in constant time, and does not invalidate iterators and\n        *  references.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       { this->_M_insert(end(), __x); }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_back(value_type&& __x)\n+      { this->_M_insert(end(), std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_back(_Args&&... __args)\n-\t{ this->_M_insert(end(), std::forward<_Args>(__args)...); }\n+        emplace_back(_Args&&... __args)\n+        { this->_M_insert(end(), std::forward<_Args>(__args)...); }\n #endif\n \n       /**"}, {"sha": "053a59c1650bcf6c523014256a11ac958667c926", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // Queue implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -220,16 +220,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  to it.  The time complexity of the operation depends on the\n        *  underlying sequence.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push(const value_type& __x)\n       { c.push_back(__x); }\n-#else\n-      // NB: DR 756.\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      { c.push_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push(_Args&&... __args)\n-\t{ c.push_back(std::forward<_Args>(__args)...); }\n+        emplace(_Args&&... __args)\n+\t{ c.emplace_back(std::forward<_Args>(__args)...); }\n #endif\n \n       /**\n@@ -509,20 +512,26 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  The time complexity of the operation depends on the underlying\n        *  sequence.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push(const value_type& __x)\n       {\n \tc.push_back(__x);\n \tstd::push_heap(c.begin(), c.end(), comp);\n       }\n-#else\n-      // NB: DR 756.\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      {\n+\tc.push_back(std::move(__x));\n+\tstd::push_heap(c.begin(), c.end(), comp);\n+      }\n+\n       template<typename... _Args>\n         void\n-        push(_Args&&... __args)\n-\t{ \n-\t  c.push_back(std::forward<_Args>(__args)...);\n+        emplace(_Args&&... __args)\n+\t{\n+\t  c.emplace_back(std::forward<_Args>(__args)...);\n \t  std::push_heap(c.begin(), c.end(), comp);\n \t}\n #endif"}, {"sha": "13e4b7a461500bdafe36439a59d4a33c48c4d681", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // Stack implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -184,16 +184,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  to it.  The time complexity of the operation depends on the\n        *  underlying sequence.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push(const value_type& __x)\n       { c.push_back(__x); }\n-#else\n-      // NB: DR 756.\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push(value_type&& __x)\n+      { c.push_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push(_Args&&... __args)\n-\t{ c.push_back(std::forward<_Args>(__args)...); }\n+        emplace(_Args&&... __args)\n+\t{ c.emplace_back(std::forward<_Args>(__args)...); }\n #endif\n \n       /**"}, {"sha": "aa874089d52622c97d92cd72ac289942d09ca1d5", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -681,7 +681,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  done in constant time if the %vector has preallocated space\n        *  available.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       {\n@@ -693,20 +692,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_insert_aux(end(), __x);\n       }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_back(value_type&& __x)\n+      { emplace_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_back(_Args&&... __args)\n-\t{\n-\t  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n-\t    {\n-\t      this->_M_impl.construct(this->_M_impl._M_finish,\n-\t\t\t\t      std::forward<_Args>(__args)...);\n-\t      ++this->_M_impl._M_finish;\n-\t    }\n-\t  else\n-\t    _M_insert_aux(end(), std::forward<_Args>(__args)...);\n-\t}\n+        emplace_back(_Args&&... __args);\n #endif\n \n       /**"}, {"sha": "04f76ca2c2c73ea2d7c6bdbd5f91c7e8fa4b0f4e", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -88,6 +88,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      void\n+      vector<_Tp, _Alloc>::\n+      emplace_back(_Args&&... __args)\n+      {\n+\tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n+\t  {\n+\t    this->_M_impl.construct(this->_M_impl._M_finish,\n+\t\t\t\t    std::forward<_Args>(__args)...);\n+\t    ++this->_M_impl._M_finish;\n+\t  }\n+\telse\n+\t  _M_insert_aux(end(), std::forward<_Args>(__args)...);\n+      }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     typename vector<_Tp, _Alloc>::iterator\n     vector<_Tp, _Alloc>::"}, {"sha": "c37381f084fd1949cc9a9edfafc6cf02caa5b3fc", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -254,7 +254,6 @@ namespace __debug\n       }\n \n       // 23.2.1.3 modifiers:\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const _Tp& __x)\n       {\n@@ -268,20 +267,29 @@ namespace __debug\n \t_Base::push_back(__x);\n \tthis->_M_invalidate_all();\n       }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_front(_Tp&& __x)\n+      { emplace_front(std::move(__x)); }\n+\n+      void\n+      push_back(_Tp&& __x)\n+      { emplace_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_front(_Args&&... __args)\n+        emplace_front(_Args&&... __args)\n \t{\n-\t  _Base::push_front(std::forward<_Args>(__args)...);\n+\t  _Base::emplace_front(std::forward<_Args>(__args)...);\n \t  this->_M_invalidate_all();\n \t}\n \n       template<typename... _Args>\n         void\n-        push_back(_Args&&... __args)\n+        emplace_back(_Args&&... __args)\n \t{\n-\t  _Base::push_back(std::forward<_Args>(__args)...);\n+\t  _Base::emplace_back(std::forward<_Args>(__args)...);\n \t  this->_M_invalidate_all();\n \t}\n "}, {"sha": "7ab0bddff99354333afcc3ef784b7989f499b27c", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -280,6 +280,10 @@ namespace __debug\n       // 23.2.2.3 modifiers:\n       using _Base::push_front;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      using _Base::emplace_front;\n+#endif\n+\n       void\n       pop_front()\n       {\n@@ -291,6 +295,10 @@ namespace __debug\n \n       using _Base::push_back;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      using _Base::emplace_back;\n+#endif\n+\n       void\n       pop_back()\n       {"}, {"sha": "12bd52f0b2bf6f07af2b1e4a5e894766de6f1266", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -289,7 +289,6 @@ namespace __debug\n       using _Base::data;\n \n       // 23.2.4.3 modifiers:\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const _Tp& __x)\n       {\n@@ -299,13 +298,18 @@ namespace __debug\n \t  this->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n       }\n-#else\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      push_back(_Tp&& __x)\n+      { emplace_back(std::move(__x)); }\n+\n       template<typename... _Args>\n         void\n-        push_back(_Args&&... __args)\n+        emplace_back(_Args&&... __args)\n \t{\n \t  bool __realloc = _M_requires_reallocation(this->size() + 1);\n-\t  _Base::push_back(std::forward<_Args>(__args)...);\n+\t  _Base::emplace_back(std::forward<_Args>(__args)...);\n \t  if (__realloc)\n \t    this->_M_invalidate_all();\n \t  _M_update_guaranteed_capacity();"}, {"sha": "2cb464cb86ce4791b0aa8810e9f7c81ad69d10ca", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007 Free Software Foundation\n+// Copyright (C) 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1449 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1436 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "57c865f34c0e6f8d087a613b69879d6e0d9c09e6", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1388 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1375 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "a46674c52dc01dc62716aa07217e75602e062bd7", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1388 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1375 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "3ae748ca316aad7aa22b017217ad373fb4091ffa", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1533 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1520 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "8eeff630927d5a713b704c075bbbeead52c8e448", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1317 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1325 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "06b71622421083e28720ab968800115907459690", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1286 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "bfe871077d71ad8f8a53e9e4de490e5d70b6e390", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1286 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "d75ed067e2429a9ee3343410db4bb3b693cff9b7", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1286 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1294 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "64c6a98dfb53dbff45a1aee77da698e536e6b907", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 992 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 986 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "34e602da583b4cce5754086e46191de0462407ef", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 932 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 926 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "f1af46c43a25b12eaa4c0443fe77de321417fd48", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 932 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 926 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "a95f57857d814bc35ec1ae76b315074c04b5f514", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3e453c81f50fd3fac74ae85a7b7752cf58924/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=4dc3e453c81f50fd3fac74ae85a7b7752cf58924", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007 Free Software Foundation\n+// Copyright (C) 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1033 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1027 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}]}