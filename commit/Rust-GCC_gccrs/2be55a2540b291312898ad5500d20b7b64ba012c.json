{"sha": "2be55a2540b291312898ad5500d20b7b64ba012c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlNTVhMjU0MGIyOTEzMTI4OThhZDU1MDBkMjBiN2I2NGJhMDEyYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-10T12:40:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-10T12:40:51Z"}, "message": "tm.texi.in (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n\n\t* doc/tm.texi.in (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* opts-common.c (tm.h): Don't include.\n\t(target_option_translations): Remove.\n\t(decode_cmdline_options_to_array): Don't handle translating\n\toptions.\n\t* system.h (TARGET_OPTION_TRANSLATE_TABLE): Poison.\n\t* config/darwin-driver.c: Don't condition includes on\n\tCROSS_DIRECTORY_STRUCTURE.\n\t(darwin_default_min_version): Make static.\n\t(darwin_driver_init): New.  Call darwin_default_min_version if not\n\tCROSS_DIRECTORY_STRUCTURE.\n\t* config/darwin.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t(DRIVER_SELF_SPECS, DARWIN_CC1_SPEC): Define.\n\t(ASM_SPEC): Add %{static}.\n\t(darwin_default_min_version): Don't declare.\n\t(darwin_driver_init): Declare.\n\t(GCC_DRIVER_HOST_INITIALIZATION): Define to call\n\tdarwin_driver_init, independent of CROSS_DIRECTORY_STRUCTURE.\n\t* config/darwin.opt (all_load, allowable_client,\n\tarch_errors_fatal, bind_at_load, bundle, bundle_loader,\n\tdead_strip, dependency-file, dylib_file, dynamic, dynamiclib,\n\texported_symbols_list, filelist, findirect-virtual-calls,\n\tflat_namespace, force_cpusubtype_ALL, force_flat_namespace,\n\tframework, fterminated-vtables, gfull, gused, image_base, init,\n\tinstall_name, multi_module, multiply_defined,\n\tmultiply_defined_unused, no_dead_strip_inits_and_terms,\n\tseg_addr_table, seg_addr_table_filename, segaddr,\n\tsegs_read_only_addr, segs_read_write_addr, single_module,\n\tumbrella, unexported_symbols_list, weak_reference_mismatches,\n\tZall_load, Zarch_errors_fatal, Zbind_at_load, Zbundle,\n\tZdead_strip, Zdynamic, Zdynamiclib, Zflat_namespace,\n\tZforce_cpusubtype_ALL, Zforce_flat_namespace, Zmulti_module,\n\tZno_dead_strip_inits_and_terms, Zsingle_module): New.\n\t* config/i386/darwin.h (CC1_SPEC): Add DARWIN_CC1_SPEC.\n\t(ASM_SPEC): Add %{static}.\n\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t* config/mep/mep.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t(DRIVER_SELF_SPECS): Handle options formerly in\n\tTARGET_OPTION_TRANSLATE_TABLE.\n\t* config/mep/mep.opt (mfar): New.\n\t* config/picochip/picochip.h (TARGET_OPTION_TRANSLATE_TABLE):\n\tRemove.\n\t(DRIVER_SELF_SPECS): Define.  Handle options formerly in\n\tTARGET_OPTION_TRANSLATE_TABLE.\n\t* config/rs6000/darwin.h (CC1_SPEC): Handle -faltivec and\n\t-fno-altivec.\n\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t* config/rs6000/darwin.opt (Waltivec-long-deprecated, faltivec,\n\tffix-and-continue, findirect-data): New.\n\t* config/rx/rx.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n\t* config/rx/rx.opt (nofpu): Make into alias of mnofpu.\n\t(mnofpu): Define mask and use Report here.\n\nFrom-SVN: r166534", "tree": {"sha": "243df70204f66b1998017f534c2c7f2ff08aa244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/243df70204f66b1998017f534c2c7f2ff08aa244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be55a2540b291312898ad5500d20b7b64ba012c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be55a2540b291312898ad5500d20b7b64ba012c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be55a2540b291312898ad5500d20b7b64ba012c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be55a2540b291312898ad5500d20b7b64ba012c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6532e8a053ffec70ea1637fdf50e3838db0d122a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6532e8a053ffec70ea1637fdf50e3838db0d122a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6532e8a053ffec70ea1637fdf50e3838db0d122a"}], "stats": {"total": 586, "additions": 331, "deletions": 255}, "files": [{"sha": "91b407c382af4780f9b391fb1f2683036596f57c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -1,3 +1,59 @@\n+2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/tm.texi.in (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* opts-common.c (tm.h): Don't include.\n+\t(target_option_translations): Remove.\n+\t(decode_cmdline_options_to_array): Don't handle translating\n+\toptions.\n+\t* system.h (TARGET_OPTION_TRANSLATE_TABLE): Poison.\n+\t* config/darwin-driver.c: Don't condition includes on\n+\tCROSS_DIRECTORY_STRUCTURE.\n+\t(darwin_default_min_version): Make static.\n+\t(darwin_driver_init): New.  Call darwin_default_min_version if not\n+\tCROSS_DIRECTORY_STRUCTURE.\n+\t* config/darwin.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t(DRIVER_SELF_SPECS, DARWIN_CC1_SPEC): Define.\n+\t(ASM_SPEC): Add %{static}.\n+\t(darwin_default_min_version): Don't declare.\n+\t(darwin_driver_init): Declare.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Define to call\n+\tdarwin_driver_init, independent of CROSS_DIRECTORY_STRUCTURE.\n+\t* config/darwin.opt (all_load, allowable_client,\n+\tarch_errors_fatal, bind_at_load, bundle, bundle_loader,\n+\tdead_strip, dependency-file, dylib_file, dynamic, dynamiclib,\n+\texported_symbols_list, filelist, findirect-virtual-calls,\n+\tflat_namespace, force_cpusubtype_ALL, force_flat_namespace,\n+\tframework, fterminated-vtables, gfull, gused, image_base, init,\n+\tinstall_name, multi_module, multiply_defined,\n+\tmultiply_defined_unused, no_dead_strip_inits_and_terms,\n+\tseg_addr_table, seg_addr_table_filename, segaddr,\n+\tsegs_read_only_addr, segs_read_write_addr, single_module,\n+\tumbrella, unexported_symbols_list, weak_reference_mismatches,\n+\tZall_load, Zarch_errors_fatal, Zbind_at_load, Zbundle,\n+\tZdead_strip, Zdynamic, Zdynamiclib, Zflat_namespace,\n+\tZforce_cpusubtype_ALL, Zforce_flat_namespace, Zmulti_module,\n+\tZno_dead_strip_inits_and_terms, Zsingle_module): New.\n+\t* config/i386/darwin.h (CC1_SPEC): Add DARWIN_CC1_SPEC.\n+\t(ASM_SPEC): Add %{static}.\n+\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t* config/mep/mep.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t(DRIVER_SELF_SPECS): Handle options formerly in\n+\tTARGET_OPTION_TRANSLATE_TABLE.\n+\t* config/mep/mep.opt (mfar): New.\n+\t* config/picochip/picochip.h (TARGET_OPTION_TRANSLATE_TABLE):\n+\tRemove.\n+\t(DRIVER_SELF_SPECS): Define.  Handle options formerly in\n+\tTARGET_OPTION_TRANSLATE_TABLE.\n+\t* config/rs6000/darwin.h (CC1_SPEC): Handle -faltivec and\n+\t-fno-altivec.\n+\t(SUBTARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t* config/rs6000/darwin.opt (Waltivec-long-deprecated, faltivec,\n+\tffix-and-continue, findirect-data): New.\n+\t* config/rx/rx.h (TARGET_OPTION_TRANSLATE_TABLE): Remove.\n+\t* config/rx/rx.opt (nofpu): Make into alias of mnofpu.\n+\t(mnofpu): Define mask and use Report here.\n+\n 2010-11-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc/config/s390/s390.c (s390_emit_prologue): Report the stack"}, {"sha": "bf27336ce296220971877a2cabc540e21cb24b18", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -18,21 +18,22 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#ifndef CROSS_DIRECTORY_STRUCTURE\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"gcc.h\"\n #include \"opts.h\"\n+\n+#ifndef CROSS_DIRECTORY_STRUCTURE\n #include <sys/sysctl.h>\n #include \"xregex.h\"\n \n /* When running on a Darwin system and using that system's headers and\n    libraries, default the -mmacosx-version-min flag to be the version\n    of the system on which the compiler is running.  */\n \n-void\n+static void\n darwin_default_min_version (unsigned int *decoded_options_count,\n \t\t\t    struct cl_decoded_option **decoded_options)\n {\n@@ -138,3 +139,51 @@ darwin_default_min_version (unsigned int *decoded_options_count,\n }\n \n #endif /* CROSS_DIRECTORY_STRUCTURE */\n+\n+/* Translate -filelist and -framework options in *DECODED_OPTIONS\n+   (size *DECODED_OPTIONS_COUNT) to use -Xlinker so that they are\n+   considered to be linker inputs in the case that no other inputs are\n+   specified.  Handling these options in DRIVER_SELF_SPECS does not\n+   suffice because specs are too late to add linker inputs, and\n+   handling them in LINK_SPEC does not suffice because the linker will\n+   not be called if there are no other inputs.  When native, also\n+   default the -mmacosx-version-min flag.  */\n+\n+void\n+darwin_driver_init (unsigned int *decoded_options_count,\n+\t\t    struct cl_decoded_option **decoded_options)\n+{\n+  unsigned int i;\n+\n+  for (i = 1; i < *decoded_options_count; i++)\n+    {\n+      if ((*decoded_options)[i].errors & CL_ERR_MISSING_ARG)\n+\tcontinue;\n+      switch ((*decoded_options)[i].opt_index)\n+\t{\n+\tcase OPT_filelist:\n+\tcase OPT_framework:\n+\t  ++*decoded_options_count;\n+\t  *decoded_options = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t\t *decoded_options,\n+\t\t\t\t\t *decoded_options_count);\n+\t  memmove (*decoded_options + i + 2,\n+\t\t   *decoded_options + i + 1,\n+\t\t   ((*decoded_options_count - i - 2)\n+\t\t    * sizeof (struct cl_decoded_option)));\n+\t  generate_option (OPT_Xlinker, (*decoded_options)[i].arg, 1,\n+\t\t\t   CL_DRIVER, &(*decoded_options)[i + 1]);\n+\t  generate_option (OPT_Xlinker,\n+\t\t\t   (*decoded_options)[i].canonical_option[0], 1,\n+\t\t\t   CL_DRIVER, &(*decoded_options)[i]);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n+#ifndef CROSS_DIRECTORY_STRUCTURE\n+  darwin_default_min_version (decoded_options_count, decoded_options);\n+#endif\n+}"}, {"sha": "5a4be8a1a4fa1c941d1a56ecb4238e3ffbd89452", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 15, "deletions": 71, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -123,71 +123,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* True if pragma ms_struct is in effect.  */\n extern GTY(()) int darwin_ms_struct;\n \n-/* This table intercepts weirdo options whose names would interfere\n-   with normal driver conventions, and either translates them into\n-   standardly-named options, or adds a 'Z' so that they can get to\n-   specs processing without interference.\n-\n-   Do not expand a linker option to \"-Xlinker -<option>\", since that\n-   forfeits the ability to control via spec strings later.  However,\n-   as a special exception, do this translation with -filelist, because\n-   otherwise the driver will think there are no input files and quit.\n-   (The alternative would be to hack the driver to recognize -filelist\n-   specially, but it's simpler to use the translation table.)\n-\n-   Note that an option name with a prefix that matches another option\n-   name, that also takes an argument, needs to be modified so the\n-   prefix is different, otherwise a '*' after the shorter option will\n-   match with the longer one.\n-\n-   The SUBTARGET_OPTION_TRANSLATE_TABLE macro, which _must_ be defined\n-   in gcc/config/{i386,rs6000}/darwin.h, should contain any additional\n-   command-line option translations specific to the particular target\n-   architecture.  */\n-\n-#define TARGET_OPTION_TRANSLATE_TABLE \\\n-  { \"-all_load\", \"-Zall_load\" },  \\\n-  { \"-allowable_client\", \"-Zallowable_client\" },  \\\n-  { \"-arch_errors_fatal\", \"-Zarch_errors_fatal\" },  \\\n-  { \"-bind_at_load\", \"-Zbind_at_load\" },  \\\n-  { \"-bundle\", \"-Zbundle\" },  \\\n-  { \"-bundle_loader\", \"-Zbundle_loader\" },  \\\n-  { \"-weak_reference_mismatches\", \"-Zweak_reference_mismatches\" },  \\\n-  { \"-dead_strip\", \"-Zdead_strip\" }, \\\n-  { \"-no_dead_strip_inits_and_terms\", \"-Zno_dead_strip_inits_and_terms\" }, \\\n-  { \"-dependency-file\", \"-MF\" }, \\\n-  { \"-dylib_file\", \"-Zdylib_file\" }, \\\n-  { \"-dynamic\", \"-Zdynamic\" },  \\\n-  { \"-dynamiclib\", \"-Zdynamiclib\" },  \\\n-  { \"-exported_symbols_list\", \"-Zexported_symbols_list\" },  \\\n-  { \"-gfull\", \"-g -fno-eliminate-unused-debug-symbols\" }, \\\n-  { \"-gused\", \"-g -feliminate-unused-debug-symbols\" }, \\\n-  { \"-segaddr\", \"-Zsegaddr\" }, \\\n-  { \"-segs_read_only_addr\", \"-Zsegs_read_only_addr\" }, \\\n-  { \"-segs_read_write_addr\", \"-Zsegs_read_write_addr\" }, \\\n-  { \"-seg_addr_table\", \"-Zseg_addr_table\" }, \\\n-  { \"-seg_addr_table_filename\", \"-Zfn_seg_addr_table_filename\" }, \\\n-  { \"-umbrella\", \"-Zumbrella\" }, \\\n-  { \"-fapple-kext\", \"-fapple-kext -static -Wa,-static\" }, \\\n-  { \"-filelist\", \"-Xlinker -filelist -Xlinker\" },  \\\n-  { \"-findirect-virtual-calls\", \"-fapple-kext\" }, \\\n-  { \"-flat_namespace\", \"-Zflat_namespace\" },  \\\n-  { \"-force_cpusubtype_ALL\", \"-Zforce_cpusubtype_ALL\" },  \\\n-  { \"-force_flat_namespace\", \"-Zforce_flat_namespace\" },  \\\n-  { \"-framework\", \"-Xlinker -framework -Xlinker\" },  \\\n-  { \"-fterminated-vtables\", \"-fapple-kext\" }, \\\n-  { \"-image_base\", \"-Zimage_base\" },  \\\n-  { \"-init\", \"-Zinit\" },  \\\n-  { \"-install_name\", \"-Zinstall_name\" },  \\\n-  { \"-mkernel\", \"-mkernel -static -Wa,-static\" }, \\\n-  { \"-multiply_defined_unused\", \"-Zmultiplydefinedunused\" },  \\\n-  { \"-multiply_defined\", \"-Zmultiply_defined\" },  \\\n-  { \"-multi_module\", \"-Zmulti_module\" },  \\\n-  { \"-static\", \"-static -Wa,-static\" },  \\\n-  { \"-shared\", \"-Zdynamiclib\" }, \\\n-  { \"-single_module\", \"-Zsingle_module\" },  \\\n-  { \"-unexported_symbols_list\", \"-Zunexported_symbols_list\" }, \\\n-  SUBTARGET_OPTION_TRANSLATE_TABLE\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n+  \"%{gfull:-g -fno-eliminate-unused-debug-symbols} %<gfull\",\t\\\n+  \"%{gused:-g -feliminate-unused-debug-symbols} %<gused\",\t\\\n+  \"%{fapple-kext|mkernel:-static}\",\t\t\t\t\\\n+  \"%{shared:-Zdynamiclib} %<shared\"\n+\n+#define DARWIN_CC1_SPEC\t\t\t\t\t\t\t\\\n+  \"%{findirect-virtual-calls: -fapple-kext} %<findirect-virtual-calls \" \\\n+  \"%{fterminated-vtables: -fapple-kext} %<fterminated-vtables \"\t\t\\\n+  \"%<filelist* %<framework*\"\n \n #define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n@@ -416,7 +361,8 @@ extern GTY(()) int darwin_ms_struct;\n \n /* Default Darwin ASM_SPEC, very simple.  */\n #define ASM_SPEC \"-arch %(darwin_arch) \\\n-  %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL}\"\n+  %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL} \\\n+  %{static}\"\n \n /* We still allow output of STABS.  */\n \n@@ -1037,12 +983,10 @@ __enable_execute_stack (void *addr)                                     \\\n \n #define TARGET_HAS_TARGETCM 1\n \n-#ifndef CROSS_DIRECTORY_STRUCTURE\n-extern void darwin_default_min_version (unsigned int *decoded_options_count,\n-\t\t\t\t\tstruct cl_decoded_option **decoded_options);\n+extern void darwin_driver_init (unsigned int *decoded_options_count,\n+\t\t\t\tstruct cl_decoded_option **decoded_options);\n #define GCC_DRIVER_HOST_INITIALIZATION \\\n-  darwin_default_min_version (&decoded_options_count, &decoded_options)\n-#endif /* CROSS_DIRECTORY_STRUCTURE */\n+  darwin_driver_init (&decoded_options_count, &decoded_options)\n \n /* The Apple assembler and linker do not support constructor priorities.  */\n #undef SUPPORTS_INIT_PRIORITY"}, {"sha": "0e234d9c62a45ae1cffa733988e8cb3454b374ec", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -18,10 +18,128 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+; Various linker options have a -Z added so that they can get to specs\n+; processing without interference.  Note that an option name with a\n+; prefix that matches another option name, that also takes an\n+; argument, being mapped to a -Z linker option, needs to be modified\n+; so the prefix is different, otherwise a '*' after the shorter option\n+; will match with the longer one.\n+\n+all_load\n+Driver Alias(Zall_load)\n+\n+allowable_client\n+Driver Separate Alias(Zallowable_client)\n+\n+arch_errors_fatal\n+Driver Alias(Zarch_errors_fatal)\n+\n+bind_at_load\n+Driver Alias(Zbind_at_load)\n+\n+bundle\n+Driver Alias(Zbundle)\n+\n+bundle_loader\n+Driver Separate Alias(Zbundle_loader)\n+\n+dead_strip\n+Driver Alias(Zdead_strip)\n+\n+dependency-file\n+C ObjC C++ ObjC++ Separate Alias(MF) MissingArgError(missing filename after %qs)\n+\n+dylib_file\n+Driver Separate Alias(Zdylib_file)\n+\n+dynamic\n+Driver Alias(Zdynamic)\n+\n+dynamiclib\n+Driver Alias(Zdynamiclib)\n+\n+exported_symbols_list\n+Driver Separate Alias(Zexported_symbols_list)\n+\n+filelist\n+Driver RejectNegative Separate\n+\n+findirect-virtual-calls\n+Driver RejectNegative\n+\n+flat_namespace\n+Driver RejectNegative Alias(Zflat_namespace)\n+\n+force_cpusubtype_ALL\n+Driver RejectNegative Alias(Zforce_cpusubtype_ALL)\n+\n+force_flat_namespace\n+Driver RejectNegative Alias(Zforce_flat_namespace)\n+\n+framework\n+Driver RejectNegative Separate\n+\n+fterminated-vtables\n+Driver RejectNegative\n+\n+gfull\n+Driver\n+\n+gused\n+Driver\n+\n+image_base\n+Driver Separate Alias(Zimage_base)\n+\n+init\n+Driver Separate Alias(Zinit)\n+\n+install_name\n+Driver Separate Alias(Zinstall_name)\n+\n mconstant-cfstrings\n Target Report Var(darwin_constant_cfstrings) Init(1)\n Generate compile-time CFString objects\n \n+multi_module\n+Driver RejectNegative Alias(Zmulti_module)\n+\n+multiply_defined\n+Driver RejectNegative Separate Alias(Zmultiply_defined)\n+\n+multiply_defined_unused\n+Driver RejectNegative Separate Alias(Zmultiplydefinedunused)\n+\n+no_dead_strip_inits_and_terms\n+Driver Alias(Zno_dead_strip_inits_and_terms)\n+\n+seg_addr_table\n+Driver Separate Alias(Zseg_addr_table)\n+\n+seg_addr_table_filename\n+Driver Separate Alias(Zfn_seg_addr_table_filename)\n+\n+segaddr\n+Driver Separate Args(2) Alias(Zsegaddr)\n+\n+segs_read_only_addr\n+Driver Separate Alias(Zsegs_read_only_addr)\n+\n+segs_read_write_addr\n+Driver Separate Alias(Zsegs_read_write_addr)\n+\n+single_module\n+Driver Alias(Zsingle_module)\n+\n+umbrella\n+Driver Separate Alias(Zumbrella)\n+\n+unexported_symbols_list\n+Driver Separate Alias(Zunexported_symbols_list)\n+\n+weak_reference_mismatches\n+Driver Separate Alias(Zweak_reference_mismatches)\n+\n Wnonportable-cfstrings\n Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n Warn if constant CFString objects contain non-portable characters\n@@ -63,21 +181,51 @@ iframework\n Target RejectNegative C ObjC C++ ObjC++ Joined Separate \n -iframework <dir>\tAdd <dir> to the end of the system framework include path\n \n+Zall_load\n+Driver\n+\n Zallowable_client\n Driver Separate\n \n+Zarch_errors_fatal\n+Driver\n+\n+Zbind_at_load\n+Driver\n+\n+Zbundle\n+Driver\n+\n Zbundle_loader\n Driver Separate\n \n+Zdead_strip\n+Driver\n+\n Zdylib_file\n Driver Separate\n \n+Zdynamic\n+Driver\n+\n+Zdynamiclib\n+Driver\n+\n Zexported_symbols_list\n Driver Separate\n \n Zfn_seg_addr_table_filename\n Driver Separate\n \n+Zflat_namespace\n+Driver\n+\n+Zforce_cpusubtype_ALL\n+Driver\n+\n+Zforce_flat_namespace\n+Driver\n+\n Zimage_base\n Driver Separate\n \n@@ -87,12 +235,18 @@ Driver Separate\n Zinstall_name\n Driver Separate\n \n+Zmulti_module\n+Driver\n+\n Zmultiply_defined\n Driver Separate\n \n Zmultiplydefinedunused\n Driver Separate\n \n+Zno_dead_strip_inits_and_terms\n+Driver\n+\n Zseg_addr_table\n Driver Separate\n \n@@ -105,6 +259,9 @@ Driver Separate\n Zsegs_read_write_addr\n Driver Separate\n \n+Zsingle_module\n+Driver\n+\n Zumbrella\n Driver Separate\n "}, {"sha": "1f2c2e4bb699417bc4c0d2fa211374ced2669136", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -110,10 +110,12 @@ extern int darwin_emit_branch_islands;\n #define CC1_SPEC \"%(cc1_cpu) \\\n   %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}} \\\n   %{!mmacosx-version-min=*:-mmacosx-version-min=%(darwin_minversion)} \\\n-  %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }}\"\n+  %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }} \" \\\n+  DARWIN_CC1_SPEC\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"-arch %(darwin_arch) -force_cpusubtype_ALL\"\n+#define ASM_SPEC \"-arch %(darwin_arch) -force_cpusubtype_ALL \\\n+  %{static}\"\n \n #define DARWIN_ARCH_SPEC \"%{m64:x86_64;:i386}\"\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n@@ -141,11 +143,6 @@ extern int darwin_emit_branch_islands;\n   { \"darwin_crt2\", \"\" },                                        \\\n   { \"darwin_subarch\", DARWIN_SUBARCH_SPEC },\n \n-/* Use the following macro for any Darwin/x86-specific command-line option\n-   translation.  */\n-#define SUBTARGET_OPTION_TRANSLATE_TABLE \\\n-  { \"\", \"\" }\n-\n /* The Darwin assembler mostly follows AT&T syntax.  */\n #undef ASSEMBLER_DIALECT\n #define ASSEMBLER_DIALECT ASM_ATT"}, {"sha": "49b7f38b7d09580ca21b87e21ecece2d8b72dc21", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -132,17 +132,6 @@ crtbegin.o%s\"\n \n #define TARGET_VERSION fprintf (stderr, \" (Toshiba Media Processor (MeP))\");\n \n-/* The MeP config tool will add TARGET_OPTION_TRANSLATE_TABLE here.  */\n-#define TARGET_OPTION_TRANSLATE_TABLE \\\n-  {\"-mall-opts\", \"-maverage -mmult -mdiv -mbitops -mleadz \\\n-                  -mabsdiff -mminmax -mclip -msatur -mdebug\" }, \\\n-  {\"-mno-opts\", \"-mno-average -mno-mult -mno-div -mno-bitops -mno-leadz \\\n-                  -mno-absdiff -mno-minmax -mno-clip -mno-satur -mno-debug\" }, \\\n-  {\"-mfar\", \"-ml -mtf -mc=far\" } \\\n-/* start-target-option-table */ \\\n-, {\"-mconfig=default\", \"-mconfig=default -mmult -mdiv -D__MEP_CONFIG_ISA=1\" } \\\n-/* end-target-option-table */\n-\n /* The MeP config tool will replace this as appropriate.  */\n #define DEFAULT_ENDIAN_SPEC \"%{!meb: -mel}\"\n \n@@ -152,7 +141,13 @@ crtbegin.o%s\"\n /* Don't add an endian option when building the libraries.  */\n #define DRIVER_SELF_SPECS \\\n   \"%{!mlibrary:\" DEFAULT_ENDIAN_SPEC \"}\", \\\n-  \"%{mlibrary: \" LIBRARY_CONFIG_SPEC \" %{!mel:-meb}}\"\n+  \"%{mlibrary: \" LIBRARY_CONFIG_SPEC \" %{!mel:-meb}}\", \\\n+  \"%{mall-opts:-maverage -mmult -mdiv -mbitops -mleadz \\\n+     -mabsdiff -mminmax -mclip -msatur -mdebug} %<mall-opts\", \\\n+  \"%{mno-opts:-mno-average -mno-mult -mno-div -mno-bitops -mno-leadz \\\n+     -mno-absdiff -mno-minmax -mno-clip -mno-satur -mno-debug} %<mno-opts\", \\\n+  \"%{mfar:-ml -mtf -mc=far} %<mfar\", \\\n+  \"%{mconfig=default:-mmult -mdiv -D__MEP_CONFIG_ISA=1}\"\n \n /* The MeP config tool will add COPROC_SELECTION_TABLE here.  */\n /* start-coproc-selection-table */"}, {"sha": "148c5aa6384aaa51ceca663c54a628f0a69ec716", "filename": "gcc/config/mep/mep.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fmep%2Fmep.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fmep%2Fmep.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.opt?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -83,6 +83,9 @@ mel\n Target Mask(LITTLE_ENDIAN) RejectNegative\n Use little-endian byte order\n \n+mfar\n+Driver RejectNegative\n+\n mio-volatile\n Target Mask(IO_VOLATILE) \n __io vars are volatile by default"}, {"sha": "72b836528f6869309c465ee791bc33ffe8fc4879", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -60,19 +60,19 @@ extern enum picochip_dfa_type picochip_schedule_type;\n \n /* Translate requests for particular AEs into their respective ISA\n    options. Note that byte access is enabled by default. */\n-#define TARGET_OPTION_TRANSLATE_TABLE\t\t\t      \\\n-  { \"-mae=ANY\",   \"-mmul-type=none -mno-byte-access\" },\t      \\\n-  { \"-mae=ANY2\",  \"-mmul-type=none -mno-byte-access\" },\t      \\\n-  { \"-mae=ANY3\",  \"-mmul-type=none\" },\t\t\t      \\\n-  { \"-mae=STAN\",  \"-mmul-type=none -mno-byte-access\" },\t      \\\n-  { \"-mae=STAN2\", \"-mmul-type=mac -mno-byte-access\" },\t      \\\n-  { \"-mae=STAN3\", \"-mmul-type=mac \" },\t\t\t      \\\n-  { \"-mae=MAC\",   \"-mmul-type=mac -mno-byte-access\" },\t      \\\n-  { \"-mae=MUL\",   \"-mmul-type=mul\" },\t\t\t      \\\n-  { \"-mae=MEM\",   \"-mmul-type=mul\" },\t\t\t      \\\n-  { \"-mae=MEM2\",  \"-mmul-type=mul\" },\t\t\t      \\\n-  { \"-mae=CTRL\",  \"-mmul-type=mul\" },\t\t\t      \\\n-  { \"-mae=CTRL2\", \"-mmul-type=mul\" }\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n+  \"%{mae=ANY:-mmul-type=none -mno-byte-access} %<mae=ANY\",\t\\\n+  \"%{mae=ANY2:-mmul-type=none -mno-byte-access} %<mae=ANY2\",\t\\\n+  \"%{mae=ANY3:-mmul-type=none} %<mae=ANY3\",\t\t\t\\\n+  \"%{mae=STAN:-mmul-type=none -mno-byte-access} %<mae=STAN\",\t\\\n+  \"%{mae=STAN2:-mmul-type=mac -mno-byte-access} %<mae=STAN2\",\t\\\n+  \"%{mae=STAN3:-mmul-type=mac} %<mae=STAN3\",\t\t\t\\\n+  \"%{mae=MAC:-mmul-type=mac -mno-byte-access} %<mae=MAC\",\t\\\n+  \"%{mae=MUL:-mmul-type=mul} %<mae=MUL\",\t\t\t\\\n+  \"%{mae=MEM:-mmul-type=mul} %<mae=MEM\",\t\t\t\\\n+  \"%{mae=MEM2:-mmul-type=mul} %<mae=MEM2\",\t\t\t\\\n+  \"%{mae=CTRL:-mmul-type=mul} %<mae=CTRL\",\t\t\t\\\n+  \"%{mae=CTRL2:-mmul-type=mul} %<mae=CTRL2\"\n \n /* Specify the default options, so that the multilib build doesn't\n    need to provide special cases for the defaults. */"}, {"sha": "5f2cace341c2166c8e7db1323b8be66570cf8623", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -90,14 +90,18 @@ extern int darwin_emit_branch_islands;\n \n \n /* We want -fPIC by default, unless we're using -static to compile for\n-   the kernel or some such.  */\n+   the kernel or some such.  The \"-faltivec\" option should have been\n+   called \"-maltivec\" all along.  */\n \n #define CC1_SPEC \"\\\n   %(cc1_cpu) \\\n   %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }} \\\n   %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n   %{!mmacosx-version-min=*:-mmacosx-version-min=%(darwin_minversion)} \\\n-  %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}}\"\n+  %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}} \\\n+  %{faltivec:-maltivec -include altivec.h} %{fno-altivec:-mno-altivec} \\\n+  %<faltivec %<fno-altivec \" \\\n+  DARWIN_CC1_SPEC\n \n #define DARWIN_ARCH_SPEC \"%{m64:ppc64;:ppc}\"\n \n@@ -146,18 +150,6 @@ extern int darwin_emit_branch_islands;\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START rs6000_darwin_file_start\n \n-/* The \"-faltivec\" option should have been called \"-maltivec\" all\n-   along.  -ffix-and-continue and -findirect-data is for compatibility\n-   for old compilers.  */\n-\n-#define SUBTARGET_OPTION_TRANSLATE_TABLE\t\t\t\t\\\n-  { \"-ffix-and-continue\", \"-mfix-and-continue\" },\t\t\t\\\n-  { \"-findirect-data\", \"-mfix-and-continue\" },\t\t\t\t\\\n-  { \"-faltivec\", \"-maltivec -include altivec.h\" },\t\t\t\\\n-  { \"-fno-altivec\", \"-mno-altivec\" },\t\t\t\t\t\\\n-  { \"-Waltivec-long-deprecated\",\t\"-mwarn-altivec-long\" },\t\\\n-  { \"-Wno-altivec-long-deprecated\", \"-mno-warn-altivec-long\" }\n-\n /* Make both r2 and r13 available for allocation.  */\n #define FIXED_R2 0\n #define FIXED_R13 0"}, {"sha": "3787511b6606fed4ca6ccb14d5de88c2460b371b", "filename": "gcc/config/rs6000/darwin.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.opt?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -19,6 +19,20 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+Waltivec-long-deprecated\n+Driver Alias(mwarn-altivec-long)\n+\n+faltivec\n+Driver\n+\n+; -ffix-and-continue and -findirect-data are for compatibility for old\n+; compilers.\n+ffix-and-continue\n+Driver RejectNegative Alias(mfix-and-continue)\n+\n+findirect-data\n+Driver RejectNegative Alias(mfix-and-continue)\n+\n m64\n Target RejectNegative Negative(m32) Mask(64BIT)\n Generate 64-bit code"}, {"sha": "8262f0b87a6d8f46f179b9c66872d85dbc30cb46", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -619,10 +619,6 @@ extern int rx_float_compare_mode;\n #define ARG_POINTER_CFA_OFFSET(FNDECL)\t\t4\n #define FRAME_POINTER_CFA_OFFSET(FNDECL)\t4\n \f\n-/* Translate -nofpu into -mnofpu so that it gets passed from gcc to cc1.  */\n-#define TARGET_OPTION_TRANSLATE_TABLE \\\n-  {\"-nofpu\", \"-mnofpu\" }\n-\n #define TARGET_USE_FPU\t\t(! TARGET_NO_USE_FPU)\n \n /* This macro is used to decide when RX FPU instructions can be used.  */"}, {"sha": "35143dd0f55794dedb52451a821775efbef62bac", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -30,11 +30,11 @@ Target RejectNegative InverseMask(64BIT_DOUBLES) Report\n Stores doubles in 32 bits.  This is the default.\n \n nofpu\n-Target RejectNegative Mask(NO_USE_FPU) Report\n+Target RejectNegative Alias(mnofpu)\n Disable the use of RX FPU instructions.  \n \n mnofpu\n-Target RejectNegative Mask(NO_USE_FPU) MaskExists Undocumented\n+Target RejectNegative Mask(NO_USE_FPU) Report Undocumented\n \n fpu\n Target RejectNegative InverseMask(NO_USE_FPU) Report"}, {"sha": "c9bba978f4a491a11dfa7308216a88bd45d0858e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -99,26 +99,6 @@ from being defined in the @file{.h} file to being part of the\n @c prevent bad page break with this line\n You can control the compilation driver.\n \n-@defmac TARGET_OPTION_TRANSLATE_TABLE\n-If defined, a list of pairs of strings, the first of which is a\n-potential command line target to the @file{gcc} driver program, and the\n-second of which is a space-separated (tabs and other whitespace are not\n-supported) list of options with which to replace the first option.  The\n-target defining this list is responsible for assuring that the results\n-are valid.  Replacement options may not be the @code{--opt} style, they\n-must be the @code{-opt} style.  It is the intention of this macro to\n-provide a mechanism for substitution that affects the multilibs chosen,\n-such as one option that enables many options, some of which select\n-multilibs.  Example nonsensical definition, where @option{-malt-abi},\n-@option{-EB}, and @option{-mspoo} cause different multilibs to be chosen:\n-\n-@smallexample\n-#define TARGET_OPTION_TRANSLATE_TABLE \\\n-@{ \"-fast\",   \"-march=fast-foo -malt-abi -I/usr/fast-foo\" @}, \\\n-@{ \"-compat\", \"-EB -malign=4 -mspoo\" @}\n-@end smallexample\n-@end defmac\n-\n @defmac DRIVER_SELF_SPECS\n A list of specs for the driver itself.  It should be a suitable\n initializer for an array of strings, with no surrounding braces."}, {"sha": "a28850f664a58c5d432b762f884b381f8f470375", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -99,26 +99,6 @@ from being defined in the @file{.h} file to being part of the\n @c prevent bad page break with this line\n You can control the compilation driver.\n \n-@defmac TARGET_OPTION_TRANSLATE_TABLE\n-If defined, a list of pairs of strings, the first of which is a\n-potential command line target to the @file{gcc} driver program, and the\n-second of which is a space-separated (tabs and other whitespace are not\n-supported) list of options with which to replace the first option.  The\n-target defining this list is responsible for assuring that the results\n-are valid.  Replacement options may not be the @code{--opt} style, they\n-must be the @code{-opt} style.  It is the intention of this macro to\n-provide a mechanism for substitution that affects the multilibs chosen,\n-such as one option that enables many options, some of which select\n-multilibs.  Example nonsensical definition, where @option{-malt-abi},\n-@option{-EB}, and @option{-mspoo} cause different multilibs to be chosen:\n-\n-@smallexample\n-#define TARGET_OPTION_TRANSLATE_TABLE \\\n-@{ \"-fast\",   \"-march=fast-foo -malt-abi -I/usr/fast-foo\" @}, \\\n-@{ \"-compat\", \"-EB -malign=4 -mspoo\" @}\n-@end smallexample\n-@end defmac\n-\n @defmac DRIVER_SELF_SPECS\n A list of specs for the driver itself.  It should be a suitable\n initializer for an array of strings, with no surrounding braces."}, {"sha": "94fa8299f6e8d52e0fd7950ca8f643021ee4b017", "filename": "gcc/opts-common.c", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\"\n-#include \"tm.h\" /* For TARGET_OPTION_TRANSLATE_TABLE.  */\n \n static void prune_options (struct cl_decoded_option **, unsigned int *);\n \n@@ -567,17 +566,6 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   return result;\n }\n \n-#ifdef TARGET_OPTION_TRANSLATE_TABLE\n-static const struct {\n-  const char *const option_found;\n-  const char *const replacements;\n-} target_option_translations[] =\n-{\n-  TARGET_OPTION_TRANSLATE_TABLE,\n-  { 0, 0 }\n-};\n-#endif\n-\n /* Decode command-line options (ARGC and ARGV being the arguments of\n    main) into an array, setting *DECODED_OPTIONS to a pointer to that\n    array and *DECODED_OPTIONS_COUNT to the number of entries in the\n@@ -593,7 +581,7 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t\t\t\t struct cl_decoded_option **decoded_options,\n \t\t\t\t unsigned int *decoded_options_count)\n {\n-  unsigned int n, i, target_translate_from;\n+  unsigned int n, i;\n   struct cl_decoded_option *opt_array;\n   unsigned int num_decoded_options;\n   bool argv_copied = false;\n@@ -613,7 +601,6 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n   opt_array[0].errors = 0;\n   num_decoded_options = 1;\n \n-  target_translate_from = 1;\n   for (i = 1; i < argc; i += n)\n     {\n       const char *opt = argv[i];\n@@ -627,81 +614,6 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t  continue;\n \t}\n \n-      if (i >= target_translate_from && (lang_mask & CL_DRIVER))\n-\t{\n-#ifdef TARGET_OPTION_TRANSLATE_TABLE\n-\t  int tott_idx;\n-\n-\t  for (tott_idx = 0;\n-\t       target_option_translations[tott_idx].option_found;\n-\t       tott_idx++)\n-\t    {\n-\t      if (strcmp (target_option_translations[tott_idx].option_found,\n-\t\t\t  argv[i]) == 0)\n-\t\t{\n-\t\t  unsigned int spaces = 0;\n-\t\t  unsigned int m = 0;\n-\t\t  const char *sp;\n-\t\t  char *np;\n-\n-\t\t  for (sp = target_option_translations[tott_idx].replacements;\n-\t\t       *sp; sp++)\n-\t\t    {\n-\t\t      if (*sp == ' ')\n-\t\t\t{\n-\t\t\t  spaces++;\n-\t\t\t  while (*sp == ' ')\n-\t\t\t    sp++;\n-\t\t\t  sp--;\n-\t\t\t}\n-\t\t    }\n-\n-\t\t  if (spaces)\n-\t\t    {\n-\t\t      int new_argc = argc + spaces;\n-\t\t      if (argv_copied)\n-\t\t\targv = XRESIZEVEC (const char *, argv, new_argc + 1);\n-\t\t      else\n-\t\t\t{\n-\t\t\t  const char **new_argv = XNEWVEC (const char *,\n-\t\t\t\t\t\t\t   new_argc + 1);\n-\t\t\t  memcpy (new_argv, argv,\n-\t\t\t\t  (argc + 1) * sizeof (const char *));\n-\t\t\t  argv = new_argv;\n-\t\t\t  argv_copied = true;\n-\t\t\t}\n-\t\t      memmove (&argv[i] + spaces, &argv[i],\n-\t\t\t       (argc + 1 - i) * sizeof (const char *));\n-\t\t      argc = new_argc;\n-\t\t      opt_array = XRESIZEVEC (struct cl_decoded_option,\n-\t\t\t\t\t      opt_array, argc);\n-\t\t    }\n-\n-\t\t  sp = target_option_translations[tott_idx].replacements;\n-\t\t  np = xstrdup (sp);\n-\n-\t\t  while (1)\n-\t\t    {\n-\t\t      while (*np == ' ')\n-\t\t\tnp++;\n-\t\t      if (*np == 0)\n-\t\t\tbreak;\n-\t\t      argv[i + m++] = np;\n-\t\t      while (*np != ' ' && *np)\n-\t\t\tnp++;\n-\t\t      if (*np == 0)\n-\t\t\tbreak;\n-\t\t      *np++ = 0;\n-\t\t    }\n-\n-\t\t  target_translate_from = i + m;\n-\t\t  gcc_assert (m == spaces + 1);\n-\t\t  break;\n-\t\t}\n-\t    }\n-#endif\n-\t}\n-\n       n = decode_cmdline_option (argv + i, lang_mask,\n \t\t\t\t &opt_array[num_decoded_options]);\n       num_decoded_options++;"}, {"sha": "a4f1da6c1704affd5c8e5307c6ac7a2b0b511938", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be55a2540b291312898ad5500d20b7b64ba012c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2be55a2540b291312898ad5500d20b7b64ba012c", "patch": "@@ -776,7 +776,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tSTACK_CHECK_PROBE_INTERVAL STACK_CHECK_PROBE_LOAD\t\t   \\\n \tORDER_REGS_FOR_LOCAL_ALLOC FUNCTION_OUTGOING_VALUE\t\t   \\\n \tASM_DECLARE_CONSTANT_NAME MODIFY_TARGET_NAME SWITCHES_NEED_SPACES  \\\n-\tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG\n+\tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG \\\n+\tTARGET_OPTION_TRANSLATE_TABLE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}