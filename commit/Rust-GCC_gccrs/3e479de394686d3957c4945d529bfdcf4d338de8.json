{"sha": "3e479de394686d3957c4945d529bfdcf4d338de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0NzlkZTM5NDY4NmQzOTU3YzQ5NDVkNTI5YmZkY2Y0ZDMzOGRlOA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-08-12T13:19:40Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-12T13:19:40Z"}, "message": "real.h (struct real_format): New member round_towards_zero.\n\nChangeLog:\n\n\t* real.h (struct real_format): New member round_towards_zero.\n\t* real.c (round_for_format): Respect fmt->round_towards_zero.\n\t(ieee_single_format, mips_single_format, motorola_single_format,\n\tspu_single_format, ieee_double_format, mips_double_format,\n\tmotorola_double_format, ieee_extended_motorola_format,\n\tieee_extended_intel_96_format, ieee_extended_intel_128_format,\n\tieee_extended_intel_96_round_53_format, ibm_extended_format,\n\tmips_extended_format, ieee_quad_format, mips_quad_format,\n\tvax_f_format, vax_d_format, vax_g_format): Initialize it.\n\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\n\n\t* builtins.s (do_mpfr_arg1): Consider round_towards_zero member of\n\treal_format to choose rounding mode when calling MPFR functions.\n\t(do_mpfr_arg2, do_mpfr_arg3, do_mpfr_sincos): Likewise.\n\t(do_mpfr_bessel_n, do_mpfr_remquo, do_mpfr_lgamma_r): Likewise.\n\n\t* real.h (real_to_decimal_for_mode): Add prototype.\n\t* real.c (real_to_decimal_for_mode): Renames old real_to_decimal.\n\tRespect target rounding mode when generating decimal representation.\n\t(real_to_decimal): New stub for backwards compatibility.\n\t* c-cppbuiltin.c (builtin_define_with_hex_fp_value): Use\n\treal_to_decimal_for_mode instead of real_to_decimal.\n\n\t* config/spu/spu.md (\"floatdisf2\", \"floatunsdisf2\"): New.\n\n\ntestsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/20031003-1.c (main): Update test to\n\taccommodate SPU single-precision rounding mode.\n\t* gcc.c-torture/execute/conversion.c (test_float_to_integer,\n\ttest_float_to_longlong_integer): Likewise.\n\t* gcc.c-torture/execute/ieee/rbug.c (main): Likewise.\n\t* gcc.dg/hex-round-1.c: Skip test on SPU.\n\t* gcc.dg/hex-round-2.c: Likewise.\n\nCo-Authored-By: Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n\nFrom-SVN: r139014", "tree": {"sha": "8520ed37f4f8d6016d590082a4aa6d51a73e1cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8520ed37f4f8d6016d590082a4aa6d51a73e1cdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e479de394686d3957c4945d529bfdcf4d338de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e479de394686d3957c4945d529bfdcf4d338de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e479de394686d3957c4945d529bfdcf4d338de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e479de394686d3957c4945d529bfdcf4d338de8/comments", "author": null, "committer": null, "parents": [{"sha": "88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f091f5aec9a1d5a9deebe5cd743dcab2760d84"}], "stats": {"total": 301, "additions": 261, "deletions": 40}, "files": [{"sha": "33e866cb5cc3f291e4d85c623cdb92be7ee30aca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -1,3 +1,31 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\t    Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n+\n+\t* real.h (struct real_format): New member round_towards_zero.\n+\t* real.c (round_for_format): Respect fmt->round_towards_zero.\n+\t(ieee_single_format, mips_single_format, motorola_single_format,\n+\tspu_single_format, ieee_double_format, mips_double_format,\n+\tmotorola_double_format, ieee_extended_motorola_format,\n+\tieee_extended_intel_96_format, ieee_extended_intel_128_format,\n+\tieee_extended_intel_96_round_53_format, ibm_extended_format,\n+\tmips_extended_format, ieee_quad_format, mips_quad_format,\n+\tvax_f_format, vax_d_format, vax_g_format): Initialize it.\n+\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\n+\n+\t* builtins.s (do_mpfr_arg1): Consider round_towards_zero member of\n+\treal_format to choose rounding mode when calling MPFR functions.\n+\t(do_mpfr_arg2, do_mpfr_arg3, do_mpfr_sincos): Likewise.\n+\t(do_mpfr_bessel_n, do_mpfr_remquo, do_mpfr_lgamma_r): Likewise.\n+\n+\t* real.h (real_to_decimal_for_mode): Add prototype.\n+\t* real.c (real_to_decimal_for_mode): Renames old real_to_decimal.\n+\tRespect target rounding mode when generating decimal representation.\n+\t(real_to_decimal): New stub for backwards compatibility.\n+\t* c-cppbuiltin.c (builtin_define_with_hex_fp_value): Use\n+\treal_to_decimal_for_mode instead of real_to_decimal.\n+\n+\t* config/spu/spu.md (\"floatdisf2\", \"floatunsdisf2\"): New.\n+\n 2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \t    Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n "}, {"sha": "c062d3a251a3b62140cdaba6e437170adf92a60a", "filename": "gcc/builtins.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -12867,14 +12867,16 @@ do_mpfr_arg1 (tree arg, tree type, int (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t),\n \t  && (!min || real_compare (inclusive ? GE_EXPR: GT_EXPR , ra, min))\n \t  && (!max || real_compare (inclusive ? LE_EXPR: LT_EXPR , ra, max)))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  int inexact;\n \t  mpfr_t m;\n \n \t  mpfr_init2 (m, prec);\n \t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = func (m, m, GMP_RNDN);\n+\t  inexact = func (m, m, rnd);\n \t  result = do_mpfr_ckconv (m, type, inexact);\n \t  mpfr_clear (m);\n \t}\n@@ -12909,15 +12911,17 @@ do_mpfr_arg2 (tree arg1, tree arg2, tree type,\n \n       if (real_isfinite (ra1) && real_isfinite (ra2))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  int inexact;\n \t  mpfr_t m1, m2;\n \n \t  mpfr_inits2 (prec, m1, m2, NULL);\n \t  mpfr_from_real (m1, ra1, GMP_RNDN);\n \t  mpfr_from_real (m2, ra2, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = func (m1, m1, m2, GMP_RNDN);\n+\t  inexact = func (m1, m1, m2, rnd);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n \t  mpfr_clears (m1, m2, NULL);\n \t}\n@@ -12955,7 +12959,9 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n \n       if (real_isfinite (ra1) && real_isfinite (ra2) && real_isfinite (ra3))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  int inexact;\n \t  mpfr_t m1, m2, m3;\n \n@@ -12964,7 +12970,7 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n \t  mpfr_from_real (m2, ra2, GMP_RNDN);\n \t  mpfr_from_real (m3, ra3, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = func (m1, m1, m2, m3, GMP_RNDN);\n+\t  inexact = func (m1, m1, m2, m3, rnd);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n \t  mpfr_clears (m1, m2, m3, NULL);\n \t}\n@@ -12998,15 +13004,17 @@ do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n \n       if (real_isfinite (ra))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  tree result_s, result_c;\n \t  int inexact;\n \t  mpfr_t m, ms, mc;\n \n \t  mpfr_inits2 (prec, m, ms, mc, NULL);\n \t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = mpfr_sin_cos (ms, mc, m, GMP_RNDN);\n+\t  inexact = mpfr_sin_cos (ms, mc, m, rnd);\n \t  result_s = do_mpfr_ckconv (ms, type, inexact);\n \t  result_c = do_mpfr_ckconv (mc, type, inexact);\n \t  mpfr_clears (m, ms, mc, NULL);\n@@ -13071,14 +13079,17 @@ do_mpfr_bessel_n (tree arg1, tree arg2, tree type,\n \t  && real_isfinite (ra)\n \t  && (!min || real_compare (inclusive ? GE_EXPR: GT_EXPR , ra, min)))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n+\t  tree result_s, result_c;\n \t  int inexact;\n \t  mpfr_t m;\n \n \t  mpfr_init2 (m, prec);\n \t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = func (m, n, m, GMP_RNDN);\n+\t  inexact = func (m, n, m, rnd);\n \t  result = do_mpfr_ckconv (m, type, inexact);\n \t  mpfr_clear (m);\n \t}\n@@ -13112,7 +13123,9 @@ do_mpfr_remquo (tree arg0, tree arg1, tree arg_quo)\n \n       if (real_isfinite (ra0) && real_isfinite (ra1))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  tree result_rem;\n \t  long integer_quo;\n \t  mpfr_t m0, m1;\n@@ -13121,7 +13134,7 @@ do_mpfr_remquo (tree arg0, tree arg1, tree arg_quo)\n \t  mpfr_from_real (m0, ra0, GMP_RNDN);\n \t  mpfr_from_real (m1, ra1, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  mpfr_remquo (m0, &integer_quo, m0, m1, GMP_RNDN);\n+\t  mpfr_remquo (m0, &integer_quo, m0, m1, rnd);\n \t  /* Remquo is independent of the rounding mode, so pass\n \t     inexact=0 to do_mpfr_ckconv().  */\n \t  result_rem = do_mpfr_ckconv (m0, type, /*inexact=*/ 0);\n@@ -13189,15 +13202,17 @@ do_mpfr_lgamma_r (tree arg, tree arg_sg, tree type)\n \t  && ra->cl != rvc_zero\n \t  && !(real_isneg(ra) && real_isinteger(ra, TYPE_MODE (type))))\n         {\n-\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  const int prec = fmt->p;\n+\t  const mp_rnd_t rnd = fmt->round_towards_zero? GMP_RNDZ : GMP_RNDN;\n \t  int inexact, sg;\n \t  mpfr_t m;\n \t  tree result_lg;\n \n \t  mpfr_init2 (m, prec);\n \t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n-\t  inexact = mpfr_lgamma (m, &sg, m, GMP_RNDN);\n+\t  inexact = mpfr_lgamma (m, &sg, m, rnd);\n \t  result_lg = do_mpfr_ckconv (m, type, inexact);\n \t  mpfr_clear (m);\n \t  if (result_lg)"}, {"sha": "f1a454fed9a59658194d2f854bcc279148c0b279", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -852,7 +852,7 @@ builtin_define_with_int_value (const char *macro, HOST_WIDE_INT value)\n /* Pass an object-like macro a hexadecimal floating-point value.  */\n static void\n builtin_define_with_hex_fp_value (const char *macro,\n-\t\t\t\t  tree type ATTRIBUTE_UNUSED, int digits,\n+\t\t\t\t  tree type, int digits,\n \t\t\t\t  const char *hex_str, \n \t\t\t\t  const char *fp_suffix,\n \t\t\t\t  const char *fp_cast)\n@@ -871,7 +871,8 @@ builtin_define_with_hex_fp_value (const char *macro,\n      then print it back out as decimal.  */\n \n   real_from_string (&real, hex_str);\n-  real_to_decimal (dec_str, &real, sizeof (dec_str), digits, 0);\n+  real_to_decimal_for_mode (dec_str, &real, sizeof (dec_str), digits, 0,\n+\t\t\t    TYPE_MODE (type));\n \n   /* Assemble the macro in the following fashion\n      macro = fp_cast [dec_str fp_suffix] */"}, {"sha": "2de1938550d9b78802d0697602797d1f39dc8c3f", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -78,6 +78,7 @@ const struct real_format pdp11_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -97,6 +98,7 @@ const struct real_format pdp11_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n "}, {"sha": "ffe46f5317963ec98d901d751e15e1d57b9eae92", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -664,6 +664,65 @@\n   \"frds\\t%0,%1\"\n   [(set_attr \"type\" \"fpd\")])\n \n+(define_expand \"floatdisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:DI 1 \"register_operand\" \"\")))]\n+  \"\"\n+  {\n+    rtx c0 = gen_reg_rtx (SImode);\n+    rtx r0 = gen_reg_rtx (DImode);\n+    rtx r1 = gen_reg_rtx (SFmode);\n+    rtx r2 = gen_reg_rtx (SImode);\n+    rtx setneg = gen_reg_rtx (SImode);\n+    rtx isneg = gen_reg_rtx (SImode);\n+    rtx neg = gen_reg_rtx (DImode);\n+    rtx mask = gen_reg_rtx (DImode);\n+\n+    emit_move_insn (c0, GEN_INT (-0x80000000ll));\n+\n+    emit_insn (gen_negdi2 (neg, operands[1]));\n+    emit_insn (gen_cgt_di_m1 (isneg, operands[1]));\n+    emit_insn (gen_extend_compare (mask, isneg));\n+    emit_insn (gen_selb (r0, neg, operands[1], mask));\n+    emit_insn (gen_andc_si (setneg, c0, isneg));\n+\n+    emit_insn (gen_floatunsdisf2 (r1, r0));\n+\n+    emit_insn (gen_iorsi3 (r2, gen_rtx_SUBREG (SImode, r1, 0), setneg));\n+    emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, r2, 0));\n+    DONE;\n+  })\n+\n+(define_insn_and_split \"floatunsdisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (unsigned_float:SF (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SF 2 \"=r\"))\n+   (clobber (match_scratch:SF 3 \"=r\"))\n+   (clobber (match_scratch:SF 4 \"=r\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:SF 0)\n+        (unsigned_float:SF (match_dup:DI 1)))]\n+  {\n+    rtx op1_v4si = gen_rtx_REG (V4SImode, REGNO (operands[1]));\n+    rtx op2_v4sf = gen_rtx_REG (V4SFmode, REGNO (operands[2]));\n+    rtx op2_ti = gen_rtx_REG (TImode, REGNO (operands[2]));\n+    rtx op3_ti = gen_rtx_REG (TImode, REGNO (operands[3]));\n+\n+    REAL_VALUE_TYPE scale;\n+    real_2expN (&scale, 32, SFmode);\n+\n+    emit_insn (gen_floatunsv4siv4sf2 (op2_v4sf, op1_v4si));\n+    emit_insn (gen_shlqby_ti (op3_ti, op2_ti, GEN_INT (4)));\n+\n+    emit_move_insn (operands[4],\n+\t\t    CONST_DOUBLE_FROM_REAL_VALUE (scale, SFmode));\n+    emit_insn (gen_fma_sf (operands[0],\n+\t\t\t   operands[2], operands[4], operands[3]));\n+    DONE;\n+  })\n+\n ;; Do (double)(operands[1]+0x80000000u)-(double)0x80000000\n (define_expand \"floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")"}, {"sha": "806e2f88f36cc0843f39534060840c05871056d9", "filename": "gcc/real.c", "status": "modified", "additions": 96, "deletions": 24, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -1443,20 +1443,30 @@ rtd_divmod (REAL_VALUE_TYPE *num, REAL_VALUE_TYPE *den)\n /* Render R as a decimal floating point constant.  Emit DIGITS significant\n    digits in the result, bounded by BUF_SIZE.  If DIGITS is 0, choose the\n    maximum for the representation.  If CROP_TRAILING_ZEROS, strip trailing\n-   zeros.  */\n+   zeros.  If MODE is VOIDmode, round to nearest value.  Otherwise, round\n+   to a string that, when parsed back in mode MODE, yields the same value.  */\n \n #define M_LOG10_2\t0.30102999566398119521\n \n void\n-real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig, size_t buf_size,\n-\t\t size_t digits, int crop_trailing_zeros)\n+real_to_decimal_for_mode (char *str, const REAL_VALUE_TYPE *r_orig,\n+\t\t\t  size_t buf_size, size_t digits,\n+\t\t\t  int crop_trailing_zeros, enum machine_mode mode)\n {\n+  const struct real_format *fmt = NULL;\n   const REAL_VALUE_TYPE *one, *ten;\n   REAL_VALUE_TYPE r, pten, u, v;\n   int dec_exp, cmp_one, digit;\n   size_t max_digits;\n   char *p, *first, *last;\n   bool sign;\n+  bool round_up;\n+\n+  if (mode != VOIDmode)\n+   {\n+     fmt = REAL_MODE_FORMAT (mode);\n+     gcc_assert (fmt);\n+   }\n \n   r = *r_orig;\n   switch (r.cl)\n@@ -1672,17 +1682,31 @@ real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig, size_t buf_size,\n   digit = rtd_divmod (&r, &pten);\n \n   /* Round the result.  */\n-  if (digit == 5)\n+  if (fmt && fmt->round_towards_zero)\n     {\n-      /* Round to nearest.  If R is nonzero there are additional\n-\t nonzero digits to be extracted.  */\n+      /* If the format uses round towards zero when parsing the string\n+\t back in, we need to always round away from zero here.  */\n       if (cmp_significand_0 (&r))\n \tdigit++;\n-      /* Round to even.  */\n-      else if ((p[-1] - '0') & 1)\n-\tdigit++;\n+      round_up = digit > 0;\n     }\n-  if (digit > 5)\n+  else\n+    {\n+      if (digit == 5)\n+\t{\n+\t  /* Round to nearest.  If R is nonzero there are additional\n+\t     nonzero digits to be extracted.  */\n+\t  if (cmp_significand_0 (&r))\n+\t    digit++;\n+\t  /* Round to even.  */\n+\t  else if ((p[-1] - '0') & 1)\n+\t    digit++;\n+\t}\n+\n+      round_up = digit > 5;\n+    }\n+\n+  if (round_up)\n     {\n       while (p > first)\n \t{\n@@ -1716,6 +1740,26 @@ real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig, size_t buf_size,\n \n   /* Append the exponent.  */\n   sprintf (last, \"e%+d\", dec_exp);\n+\n+#ifdef ENABLE_CHECKING\n+  /* Verify that we can read the original value back in.  */\n+  if (mode != VOIDmode)\n+    {\n+      real_from_string (&r, str);\n+      real_convert (&r, mode, &r);\n+      gcc_assert (real_identical (&r, r_orig));\n+    }\n+#endif\n+}\n+\n+/* Likewise, except always uses round-to-nearest.  */\n+\n+void\n+real_to_decimal (char *str, const REAL_VALUE_TYPE *r_orig, size_t buf_size,\n+\t\t size_t digits, int crop_trailing_zeros)\n+{\n+  real_to_decimal_for_mode (str, r_orig, buf_size,\n+\t\t\t    digits, crop_trailing_zeros, VOIDmode);\n }\n \n /* Render R as a hexadecimal floating point constant.  Emit DIGITS\n@@ -2389,9 +2433,8 @@ static void\n round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n {\n   int p2, np2, i, w;\n-  unsigned long sticky;\n-  bool guard, lsb;\n   int emin2m1, emax2;\n+  bool round_up = false;\n \n   if (r->decimal)\n     {\n@@ -2463,21 +2506,28 @@ round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n \t}\n     }\n \n-  /* There are P2 true significand bits, followed by one guard bit,\n-     followed by one sticky bit, followed by stuff.  Fold nonzero\n-     stuff into the sticky bit.  */\n+  if (!fmt->round_towards_zero)\n+    {\n+      /* There are P2 true significand bits, followed by one guard bit,\n+         followed by one sticky bit, followed by stuff.  Fold nonzero\n+         stuff into the sticky bit.  */\n+      unsigned long sticky;\n+      bool guard, lsb;\n \n-  sticky = 0;\n-  for (i = 0, w = (np2 - 1) / HOST_BITS_PER_LONG; i < w; ++i)\n-    sticky |= r->sig[i];\n-  sticky |=\n-    r->sig[w] & (((unsigned long)1 << ((np2 - 1) % HOST_BITS_PER_LONG)) - 1);\n+      sticky = 0;\n+      for (i = 0, w = (np2 - 1) / HOST_BITS_PER_LONG; i < w; ++i)\n+\tsticky |= r->sig[i];\n+      sticky |= r->sig[w]\n+\t\t& (((unsigned long)1 << ((np2 - 1) % HOST_BITS_PER_LONG)) - 1);\n \n-  guard = test_significand_bit (r, np2 - 1);\n-  lsb = test_significand_bit (r, np2);\n+      guard = test_significand_bit (r, np2 - 1);\n+      lsb = test_significand_bit (r, np2);\n \n-  /* Round to even.  */\n-  if (guard && (sticky || lsb))\n+      /* Round to even.  */\n+      round_up = guard && (sticky || lsb);\n+    }\n+\n+  if (round_up)\n     {\n       REAL_VALUE_TYPE u;\n       get_zero (&u, 0);\n@@ -2817,6 +2867,7 @@ const struct real_format ieee_single_format =\n     128,\n     31,\n     31,\n+    false,\n     true,\n     true,\n     true,\n@@ -2836,6 +2887,7 @@ const struct real_format mips_single_format =\n     128,\n     31,\n     31,\n+    false,\n     true,\n     true,\n     true,\n@@ -2855,6 +2907,7 @@ const struct real_format motorola_single_format =\n     128,\n     31,\n     31,\n+    false,\n     true,\n     true,\n     true,\n@@ -2885,6 +2938,7 @@ const struct real_format spu_single_format =\n     129,\n     31,\n     31,\n+    true,\n     false,\n     false,\n     true,\n@@ -3092,6 +3146,7 @@ const struct real_format ieee_double_format =\n     1024,\n     63,\n     63,\n+    false,\n     true,\n     true,\n     true,\n@@ -3111,6 +3166,7 @@ const struct real_format mips_double_format =\n     1024,\n     63,\n     63,\n+    false,\n     true,\n     true,\n     true,\n@@ -3130,6 +3186,7 @@ const struct real_format motorola_double_format =\n     1024,\n     63,\n     63,\n+    false,\n     true,\n     true,\n     true,\n@@ -3467,6 +3524,7 @@ const struct real_format ieee_extended_motorola_format =\n     16384,\n     95,\n     95,\n+    false,\n     true,\n     true,\n     true,\n@@ -3486,6 +3544,7 @@ const struct real_format ieee_extended_intel_96_format =\n     16384,\n     79,\n     79,\n+    false,\n     true,\n     true,\n     true,\n@@ -3505,6 +3564,7 @@ const struct real_format ieee_extended_intel_128_format =\n     16384,\n     79,\n     79,\n+    false,\n     true,\n     true,\n     true,\n@@ -3526,6 +3586,7 @@ const struct real_format ieee_extended_intel_96_round_53_format =\n     16384,\n     79,\n     79,\n+    false,\n     true,\n     true,\n     true,\n@@ -3612,6 +3673,7 @@ const struct real_format ibm_extended_format =\n     1024,\n     127,\n     -1,\n+    false,\n     true,\n     true,\n     true,\n@@ -3631,6 +3693,7 @@ const struct real_format mips_extended_format =\n     1024,\n     127,\n     -1,\n+    false,\n     true,\n     true,\n     true,\n@@ -3892,6 +3955,7 @@ const struct real_format ieee_quad_format =\n     16384,\n     127,\n     127,\n+    false,\n     true,\n     true,\n     true,\n@@ -3911,6 +3975,7 @@ const struct real_format mips_quad_format =\n     16384,\n     127,\n     127,\n+    false,\n     true,\n     true,\n     true,\n@@ -4214,6 +4279,7 @@ const struct real_format vax_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4233,6 +4299,7 @@ const struct real_format vax_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4252,6 +4319,7 @@ const struct real_format vax_g_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \f\n@@ -4321,6 +4389,7 @@ const struct real_format decimal_single_format =\n     96,\n     31,\n     31,\n+    false,\n     true,\n     true,\n     true,\n@@ -4341,6 +4410,7 @@ const struct real_format decimal_double_format =\n     384,\n     63,\n     63,\n+    false,\n     true,\n     true,\n     true,\n@@ -4361,6 +4431,7 @@ const struct real_format decimal_quad_format =\n     6144,\n     127,\n     127,\n+    false,\n     true,\n     true,\n     true, \n@@ -4404,6 +4475,7 @@ const struct real_format real_internal_format =\n     MAX_EXP,\n     -1,\n     -1,\n+    false,\n     true,\n     true,\n     false,"}, {"sha": "d849a2e43c673a90a65d01515d37edb66b9f31bd", "filename": "gcc/real.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -147,6 +147,9 @@ struct real_format\n      or -1 for a complex encoding.  */\n   int signbit_rw;\n \n+  /* Default rounding mode for operations on this format.  */\n+  bool round_towards_zero;\n+\n   /* Properties of the format.  */\n   bool has_nans;\n   bool has_inf;\n@@ -216,6 +219,11 @@ extern bool exact_real_truncate (enum machine_mode, const REAL_VALUE_TYPE *);\n extern void real_to_decimal (char *, const REAL_VALUE_TYPE *, size_t,\n \t\t\t     size_t, int);\n \n+/* Render R as a decimal floating point constant, rounded so as to be\n+   parsed back to the same value when interpreted in mode MODE.  */\n+extern void real_to_decimal_for_mode (char *, const REAL_VALUE_TYPE *, size_t,\n+\t\t\t\t      size_t, int, enum machine_mode);\n+\n /* Render R as a hexadecimal floating point constant.  */\n extern void real_to_hexadecimal (char *, const REAL_VALUE_TYPE *,\n \t\t\t\t size_t, size_t, int);"}, {"sha": "427c066f40e924bffb934bda8cbd51c149a7591b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -1,3 +1,13 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.c-torture/execute/20031003-1.c (main): Update test to\n+\taccommodate SPU single-precision rounding mode.\n+\t* gcc.c-torture/execute/conversion.c (test_float_to_integer,\n+\ttest_float_to_longlong_integer): Likewise.\n+\t* gcc.c-torture/execute/ieee/rbug.c (main): Likewise.\n+\t* gcc.dg/hex-round-1.c: Skip test on SPU.\n+\t* gcc.dg/hex-round-2.c: Likewise.\n+\n 2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.c-torture/execute/ieee/inf-2.c (testf): Skip on the SPU."}, {"sha": "5d172e7e604f167096f5771d97383c316f5dae5f", "filename": "gcc/testsuite/gcc.c-torture/execute/20031003-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031003-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031003-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031003-1.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -19,8 +19,14 @@ int main()\n #if INT_MAX == 2147483647\n   if (f1() != 2147483647)\n     abort ();\n+#ifdef __SPU__\n+  /* SPU float rounds towards zero.  */\n+  if (f2() != 0x7fffff80)\n+    abort ();\n+#else\n   if (f2() != 2147483647)\n     abort ();\n+#endif\n #endif\n   return 0;\n }"}, {"sha": "82d681acfe61a0a6eeb2a9c0ead3060fce8f5666", "filename": "gcc/testsuite/gcc.c-torture/execute/conversion.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -284,9 +284,15 @@ test_float_to_integer()\n     abort();\n   if (f2u(1.99) != 1)\n     abort();\n+#ifdef __SPU__\n+  /* SPU float rounds towards zero.  */\n+  if (f2u((float) ((~0U) >> 1)) != 0x7fffff80)\n+    abort();\n+#else\n   if (f2u((float) ((~0U) >> 1)) != (~0U) >> 1 &&\t/* 0x7fffffff */\n       f2u((float) ((~0U) >> 1)) != ((~0U) >> 1) + 1)\n     abort();\n+#endif\n   if (f2u((float) ~((~0U) >> 1)) != ~((~0U) >> 1))\t/* 0x80000000 */\n     abort();\n \n@@ -439,9 +445,15 @@ test_float_to_longlong_integer()\n     abort();\n   if (f2ull(1.99) != 1LL)\n     abort();\n+#ifdef __SPU__\n+  /* SPU float rounds towards zero.  */\n+  if (f2ull((float) ((~0ULL) >> 1)) != 0x7fffff8000000000ULL)\n+    abort();\n+#else\n   if (f2ull((float) ((~0ULL) >> 1)) != (~0ULL) >> 1 &&\t/* 0x7fffffff */\n       f2ull((float) ((~0ULL) >> 1)) != ((~0ULL) >> 1) + 1)\n     abort();\n+#endif\n   if (f2ull((float) ~((~0ULL) >> 1)) != ~((~0ULL) >> 1)) /* 0x80000000 */\n     abort();\n "}, {"sha": "1586bd7d43ba3361cafbddd8c95f23c50df8e350", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/rbug.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Frbug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Frbug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Frbug.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -41,8 +41,14 @@ main ()\n   k = 0x8234508000000001ULL;\n   x = s (k);\n   k = (unsigned long long) x;\n+#ifdef __SPU__\n+  /* SPU float rounds towards zero.  */\n+  if (k != 0x8234500000000000ULL)\n+    abort ();\n+#else\n   if (k != 0x8234510000000000ULL)\n     abort ();\n+#endif\n \n   exit (0);\n }"}, {"sha": "e1283cae37b3ad1bbe4b86c3839131a1c40e0d8c", "filename": "gcc/testsuite/gcc.dg/hex-round-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -1,6 +1,7 @@\n /* Test for hexadecimal float rounding: bug 21720.  */\n /* { dg-do link } */\n /* { dg-options \"-O -std=gnu99\" } */\n+/* { dg-skip-if \"SPU float rounds towards zero\" { spu-*-* } } */\n \n #include <float.h>\n "}, {"sha": "af49536abac47637342628381e260e278480cb55", "filename": "gcc/testsuite/gcc.dg/hex-round-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e479de394686d3957c4945d529bfdcf4d338de8/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c?ref=3e479de394686d3957c4945d529bfdcf4d338de8", "patch": "@@ -2,6 +2,7 @@\n    in number.  */\n /* { dg-do link } */\n /* { dg-options \"-O -std=gnu99\" } */\n+/* { dg-skip-if \"SPU float rounds towards zero\" { spu-*-* } } */\n \n #include <float.h>\n "}]}