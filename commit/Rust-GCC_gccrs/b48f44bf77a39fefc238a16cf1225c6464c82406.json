{"sha": "b48f44bf77a39fefc238a16cf1225c6464c82406", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZjQ0YmY3N2EzOWZlZmMyMzhhMTZjZjEyMjVjNjQ2NGM4MjQwNg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-05-17T19:13:26Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-05-17T19:13:26Z"}, "message": "[PR89433] Repeated use of the C/C++ OpenACC 'routine' directive\n\n\tgcc/\n\tPR middle-end/89433\n\t* omp-general.c (oacc_verify_routine_clauses): Change formal\n\tparameters.  Add checking if already marked with an OpenACC\n\t'routine' directive.  Adjust all users.\n\tgcc/c/\n\tPR c/89433\n\t* c-parser.c (c_finish_oacc_routine): Rework checking if already\n\tmarked with an OpenACC 'routine' directive.\n\tgcc/cp/\n\tPR c++/89433\n\t* parser.c (cp_finalize_oacc_routine): Rework checking if already\n\tmarked with an OpenACC 'routine' directive.\n\tgcc/testsuite/\n\tPR testsuite/89433\n\t* c-c++-common/goacc/routine-5.c: Update.\n\t* c-c++-common/goacc/routine-level-of-parallelism-1.c: Likewise.\n\t* c-c++-common/goacc/routine-level-of-parallelism-2.c: New file.\n\nFrom-SVN: r271345", "tree": {"sha": "f549ea742dbc826500b30235525ef9fb96769ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f549ea742dbc826500b30235525ef9fb96769ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48f44bf77a39fefc238a16cf1225c6464c82406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48f44bf77a39fefc238a16cf1225c6464c82406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48f44bf77a39fefc238a16cf1225c6464c82406", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48f44bf77a39fefc238a16cf1225c6464c82406/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bf04509f437ff175c001a1c84a13b3a845174eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf04509f437ff175c001a1c84a13b3a845174eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf04509f437ff175c001a1c84a13b3a845174eb"}], "stats": {"total": 554, "additions": 437, "deletions": 117}, "files": [{"sha": "bee1292ac229ca16ae878e56636d800521517b5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -1,5 +1,10 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR middle-end/89433\n+\t* omp-general.c (oacc_verify_routine_clauses): Change formal\n+\tparameters.  Add checking if already marked with an OpenACC\n+\t'routine' directive.  Adjust all users.\n+\n \tPR middle-end/89433\n \t* omp-general.c (oacc_build_routine_dims): Move some of its\n \tprocessing into..."}, {"sha": "cfbd164fdc3c5306b2eec6f4169036be2b890f88", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -1,5 +1,9 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR c/89433\n+\t* c-parser.c (c_finish_oacc_routine): Rework checking if already\n+\tmarked with an OpenACC 'routine' directive.\n+\n \tPR c/89433\n \t* c-parser.c (c_parser_oacc_routine): Normalize order of clauses.\n \t(c_finish_oacc_routine): Call oacc_verify_routine_clauses."}, {"sha": "8f610242435fe42e95679f9d4e05ad199ae62706", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -15884,35 +15884,39 @@ c_finish_oacc_routine (struct oacc_routine_data *data, tree fndecl,\n       return;\n     }\n \n-  oacc_verify_routine_clauses (&data->clauses, data->loc);\n-\n-  if (oacc_get_fn_attrib (fndecl))\n+  int compatible\n+    = oacc_verify_routine_clauses (fndecl, &data->clauses, data->loc,\n+\t\t\t\t   \"#pragma acc routine\");\n+  if (compatible < 0)\n     {\n-      error_at (data->loc,\n-\t\t\"%<#pragma acc routine%> already applied to %qD\", fndecl);\n       data->error_seen = true;\n       return;\n     }\n-\n-  if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n+  if (compatible > 0)\n     {\n-      error_at (data->loc,\n-\t\tTREE_USED (fndecl)\n-\t\t? G_(\"%<#pragma acc routine%> must be applied before use\")\n-\t\t: G_(\"%<#pragma acc routine%> must be applied before \"\n-\t\t     \"definition\"));\n-      data->error_seen = true;\n-      return;\n     }\n+  else\n+    {\n+      if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n+\t{\n+\t  error_at (data->loc,\n+\t\t    TREE_USED (fndecl)\n+\t\t    ? G_(\"%<#pragma acc routine%> must be applied before use\")\n+\t\t    : G_(\"%<#pragma acc routine%> must be applied before\"\n+\t\t\t \" definition\"));\n+\t  data->error_seen = true;\n+\t  return;\n+\t}\n \n-  /* Process the routine's dimension clauses.  */\n-  tree dims = oacc_build_routine_dims (data->clauses);\n-  oacc_replace_fn_attrib (fndecl, dims);\n+      /* Set the routine's level of parallelism.  */\n+      tree dims = oacc_build_routine_dims (data->clauses);\n+      oacc_replace_fn_attrib (fndecl, dims);\n \n-  /* Add an \"omp declare target\" attribute.  */\n-  DECL_ATTRIBUTES (fndecl)\n-    = tree_cons (get_identifier (\"omp declare target\"),\n-\t\t data->clauses, DECL_ATTRIBUTES (fndecl));\n+      /* Add an \"omp declare target\" attribute.  */\n+      DECL_ATTRIBUTES (fndecl)\n+\t= tree_cons (get_identifier (\"omp declare target\"),\n+\t\t     data->clauses, DECL_ATTRIBUTES (fndecl));\n+    }\n \n   /* Remember that we've used this \"#pragma acc routine\".  */\n   data->fndecl_seen = true;"}, {"sha": "39aaab966c90839d1398e712e0166208ec24a849", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -1,5 +1,9 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR c++/89433\n+\t* parser.c (cp_finalize_oacc_routine): Rework checking if already\n+\tmarked with an OpenACC 'routine' directive.\n+\n \tPR c++/89433\n \t* parser.c (cp_parser_oacc_routine)\n \t(cp_parser_late_parsing_oacc_routine): Normalize order of clauses."}, {"sha": "6705d64389c1ed90ca49c2f20edaee49526f6e22", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -40272,36 +40272,42 @@ cp_finalize_oacc_routine (cp_parser *parser, tree fndecl, bool is_defn)\n \t  return;\n \t}\n \n-      oacc_verify_routine_clauses (&parser->oacc_routine->clauses,\n-\t\t\t\t   parser->oacc_routine->loc);\n-\n-      if (oacc_get_fn_attrib (fndecl))\n+      int compatible\n+\t= oacc_verify_routine_clauses (fndecl, &parser->oacc_routine->clauses,\n+\t\t\t\t       parser->oacc_routine->loc,\n+\t\t\t\t       \"#pragma acc routine\");\n+      if (compatible < 0)\n \t{\n-\t  error_at (parser->oacc_routine->loc,\n-\t\t    \"%<#pragma acc routine%> already applied to %qD\", fndecl);\n \t  parser->oacc_routine = NULL;\n \t  return;\n \t}\n-\n-      if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n+      if (compatible > 0)\n \t{\n-\t  error_at (parser->oacc_routine->loc,\n-\t\t    TREE_USED (fndecl)\n-\t\t    ? G_(\"%<#pragma acc routine%> must be applied before use\")\n-\t\t    : G_(\"%<#pragma acc routine%> must be applied before \"\n-\t\t\t \"definition\"));\n-\t  parser->oacc_routine = NULL;\n-\t  return;\n \t}\n+      else\n+\t{\n+\t  if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n+\t    {\n+\t      error_at (parser->oacc_routine->loc,\n+\t\t\tTREE_USED (fndecl)\n+\t\t\t? G_(\"%<#pragma acc routine%> must be applied before\"\n+\t\t\t     \" use\")\n+\t\t\t: G_(\"%<#pragma acc routine%> must be applied before\"\n+\t\t\t     \" definition\"));\n+\t      parser->oacc_routine = NULL;\n+\t      return;\n+\t    }\n \n-      /* Process the routine's dimension clauses.  */\n-      tree dims = oacc_build_routine_dims (parser->oacc_routine->clauses);\n-      oacc_replace_fn_attrib (fndecl, dims);\n+\t  /* Set the routine's level of parallelism.  */\n+\t  tree dims = oacc_build_routine_dims (parser->oacc_routine->clauses);\n+\t  oacc_replace_fn_attrib (fndecl, dims);\n \n-      /* Add an \"omp declare target\" attribute.  */\n-      DECL_ATTRIBUTES (fndecl)\n-\t= tree_cons (get_identifier (\"omp declare target\"),\n-\t\t     parser->oacc_routine->clauses, DECL_ATTRIBUTES (fndecl));\n+\t  /* Add an \"omp declare target\" attribute.  */\n+\t  DECL_ATTRIBUTES (fndecl)\n+\t    = tree_cons (get_identifier (\"omp declare target\"),\n+\t\t\t parser->oacc_routine->clauses,\n+\t\t\t DECL_ATTRIBUTES (fndecl));\n+\t}\n \n       /* Don't unset parser->oacc_routine here: we may still need it to\n \t diagnose wrong usage.  But, remember that we've used this \"#pragma acc"}, {"sha": "82f0a04eab01c23754a4c1ae91570dcae729c998", "filename": "gcc/omp-general.c", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -610,11 +610,14 @@ oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n \n /* Verify OpenACC routine clauses.\n \n+   Returns 0 if FNDECL should be marked with an OpenACC 'routine' directive, 1\n+   if it has already been marked in compatible way, and -1 if incompatible.\n    Upon returning, the chain of clauses will contain exactly one clause\n    specifying the level of parallelism.  */\n \n-void\n-oacc_verify_routine_clauses (tree *clauses, location_t loc)\n+int\n+oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n+\t\t\t     const char *routine_str)\n {\n   tree c_level = NULL_TREE;\n   tree c_p = NULL_TREE;\n@@ -659,6 +662,80 @@ oacc_verify_routine_clauses (tree *clauses, location_t loc)\n       OMP_CLAUSE_CHAIN (c_level) = *clauses;\n       *clauses = c_level;\n     }\n+  /* In *clauses, we now have exactly one clause specifying the level of\n+     parallelism.  */\n+\n+  tree attr\n+    = lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (fndecl));\n+  if (attr != NULL_TREE)\n+    {\n+      /* If a \"#pragma acc routine\" has already been applied, just verify\n+\t this one for compatibility.  */\n+      /* Collect previous directive's clauses.  */\n+      tree c_level_p = NULL_TREE;\n+      for (tree c = TREE_VALUE (attr); c; c = OMP_CLAUSE_CHAIN (c))\n+\tswitch (OMP_CLAUSE_CODE (c))\n+\t  {\n+\t  case OMP_CLAUSE_GANG:\n+\t  case OMP_CLAUSE_WORKER:\n+\t  case OMP_CLAUSE_VECTOR:\n+\t  case OMP_CLAUSE_SEQ:\n+\t    gcc_checking_assert (c_level_p == NULL_TREE);\n+\t    c_level_p = c;\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+      gcc_checking_assert (c_level_p != NULL_TREE);\n+      /* ..., and compare to current directive's, which we've already collected\n+\t above.  */\n+      tree c_diag;\n+      tree c_diag_p;\n+      /* Matching level of parallelism?  */\n+      if (OMP_CLAUSE_CODE (c_level) != OMP_CLAUSE_CODE (c_level_p))\n+\t{\n+\t  c_diag = c_level;\n+\t  c_diag_p = c_level_p;\n+\t  goto incompatible;\n+\t}\n+      /* Compatible.  */\n+      return 1;\n+\n+    incompatible:\n+      if (c_diag != NULL_TREE)\n+\terror_at (OMP_CLAUSE_LOCATION (c_diag),\n+\t\t  \"incompatible %qs clause when applying\"\n+\t\t  \" %<%s%> to %qD, which has already been\"\n+\t\t  \" marked with an OpenACC 'routine' directive\",\n+\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c_diag)],\n+\t\t  routine_str, fndecl);\n+      else if (c_diag_p != NULL_TREE)\n+\terror_at (loc,\n+\t\t  \"missing %qs clause when applying\"\n+\t\t  \" %<%s%> to %qD, which has already been\"\n+\t\t  \" marked with an OpenACC 'routine' directive\",\n+\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c_diag_p)],\n+\t\t  routine_str, fndecl);\n+      else\n+\tgcc_unreachable ();\n+      if (c_diag_p != NULL_TREE)\n+\tinform (OMP_CLAUSE_LOCATION (c_diag_p),\n+\t\t\"... with %qs clause here\",\n+\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c_diag_p)]);\n+      else\n+\t{\n+\t  /* In the front ends, we don't preserve location information for the\n+\t     OpenACC routine directive itself.  However, that of c_level_p\n+\t     should be close.  */\n+\t  location_t loc_routine = OMP_CLAUSE_LOCATION (c_level_p);\n+\t  inform (loc_routine, \"... without %qs clause near to here\",\n+\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c_diag)]);\n+\t}\n+      /* Incompatible.  */\n+      return -1;\n+    }\n+\n+  return 0;\n }\n \n /*  Process the OpenACC 'routine' directive clauses to generate an attribute"}, {"sha": "f96d3c7768a0e1ff6e6ad13b83ca56407a250ba1", "filename": "gcc/omp-general.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -84,7 +84,8 @@ extern tree oacc_launch_pack (unsigned code, tree device, unsigned op);\n extern tree oacc_replace_fn_attrib_attr (tree attribs, tree dims);\n extern void oacc_replace_fn_attrib (tree fn, tree dims);\n extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);\n-extern void oacc_verify_routine_clauses (tree *, location_t);\n+extern int oacc_verify_routine_clauses (tree, tree *, location_t,\n+\t\t\t\t\tconst char *);\n extern tree oacc_build_routine_dims (tree clauses);\n extern tree oacc_get_fn_attrib (tree fn);\n extern bool offloading_function_p (tree fn);"}, {"sha": "ed94f19e1dbd6ed1f0ccb4f8254c733058a921ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -1,5 +1,10 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR testsuite/89433\n+\t* c-c++-common/goacc/routine-5.c: Update.\n+\t* c-c++-common/goacc/routine-level-of-parallelism-1.c: Likewise.\n+\t* c-c++-common/goacc/routine-level-of-parallelism-2.c: New file.\n+\n \tPR testsuite/89433\n \t* c-c++-common/goacc/routine-2.c: Update, and move some test\n \tinto..."}, {"sha": "a68c6be9be5dcfc2ff84d611ad4ff75838250ba9", "filename": "gcc/testsuite/c-c++-common/goacc/routine-5.c", "status": "modified", "additions": 2, "deletions": 44, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -150,61 +150,19 @@ void f_static_assert();\n \n #pragma acc routine\n __extension__ extern void ex1();\n-#pragma acc routine (ex1) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*ex1\" } */\n+#pragma acc routine (ex1) worker /* { dg-error \"has already been marked with an OpenACC 'routine' directive\" } */\n \n #pragma acc routine\n __extension__ __extension__ __extension__ __extension__ __extension__ void ex2()\n {\n }\n-#pragma acc routine (ex2) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*ex2\" } */\n+#pragma acc routine (ex2) worker /* { dg-error \"has already been marked with an OpenACC 'routine' directive\" } */\n \n #pragma acc routine /* { dg-error \".#pragma acc routine. not immediately followed by function declaration or definition\" } */\n __extension__ int ex3;\n #pragma acc routine (ex3) /* { dg-error \".ex3. does not refer to a function\" } */\n \n \n-/* \"#pragma acc routine\" already applied.  */\n-\n-extern void fungsi_1();\n-#pragma acc routine(fungsi_1) gang\n-#pragma acc routine(fungsi_1) gang /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_1\" } */\n-#pragma acc routine(fungsi_1) worker /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_1\" } */\n-#pragma acc routine(fungsi_1) vector /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_1\" } */\n-\n-#pragma acc routine seq\n-extern void fungsi_2();\n-#pragma acc routine(fungsi_2) seq /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_2.\" } */\n-#pragma acc routine(fungsi_2) worker /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_2.\" } */\n-#pragma acc routine(fungsi_2) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_2.\" } */\n-\n-#pragma acc routine vector\n-extern void fungsi_3();\n-#pragma acc routine vector /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_3.\" } */\n-void fungsi_3()\n-{\n-}\n-\n-extern void fungsi_4();\n-#pragma acc routine (fungsi_4) worker\n-#pragma acc routine gang /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_4.\" } */\n-void fungsi_4()\n-{\n-}\n-\n-#pragma acc routine gang\n-void fungsi_5()\n-{\n-}\n-#pragma acc routine (fungsi_5) worker /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_5.\" } */\n-\n-#pragma acc routine seq\n-void fungsi_6()\n-{\n-}\n-#pragma acc routine seq /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*fungsi_6.\" } */\n-extern void fungsi_6();\n-\n-\n /* \"#pragma acc routine\" must be applied before.  */\n \n void Bar ();"}, {"sha": "4fdeb1461f81165b3384eb21e9ec40a474ddb3ca", "filename": "gcc/testsuite/c-c++-common/goacc/routine-level-of-parallelism-1.c", "status": "modified", "additions": 209, "deletions": 24, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -41,21 +41,21 @@ void s_2 (void)\n void g_3 (void)\n {\n }\n-#pragma acc routine (g_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_3.\" } */ \\\n+#pragma acc routine (g_3) \\\n   gang \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (g_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_3.\" } */ \\\n+#pragma acc routine (g_3) \\\n   gang \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n \n extern void w_3 (void);\n #pragma acc routine (w_3) \\\n   worker \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (w_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_3.\" } */ \\\n+#pragma acc routine (w_3) \\\n   worker \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (w_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_3.\" } */ \\\n+#pragma acc routine (w_3) \\\n   worker \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n \n@@ -65,21 +65,21 @@ extern void w_3 (void);\n void v_3 (void)\n {\n }\n-#pragma acc routine (v_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_3.\" } */ \\\n+#pragma acc routine (v_3) \\\n   vector \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (v_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_3.\" } */ \\\n+#pragma acc routine (v_3) \\\n   vector \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n \n extern void s_3 (void);\n #pragma acc routine (s_3) \\\n   seq \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (s_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_3.\" } */ \\\n+#pragma acc routine (s_3) \\\n   seq \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (s_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_3.\" } */ \\\n+#pragma acc routine (s_3) \\\n   seq \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n \n@@ -90,12 +90,12 @@ extern void s_3 (void);\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n extern void g_4 (void);\n-#pragma acc routine (g_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_4.\" } */ \\\n+#pragma acc routine (g_4) \\\n   gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (g_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_4.\" } */ \\\n+#pragma acc routine (g_4) \\\n   gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n@@ -107,12 +107,12 @@ extern void w_4 (void);\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (w_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_4.\" } */ \\\n+#pragma acc routine (w_4) \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (w_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_4.\" } */ \\\n+#pragma acc routine (w_4) \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n@@ -126,12 +126,12 @@ extern void w_4 (void);\n void v_4 (void)\n {\n }\n-#pragma acc routine (v_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_4.\" } */ \\\n+#pragma acc routine (v_4) \\\n   vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (v_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_4.\" } */ \\\n+#pragma acc routine (v_4) \\\n   vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n   seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n@@ -145,12 +145,12 @@ void v_4 (void)\n void s_4 (void)\n {\n }\n-#pragma acc routine (s_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_4.\" } */ \\\n+#pragma acc routine (s_4) \\\n   seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n   gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n-#pragma acc routine (s_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_4.\" } */ \\\n+#pragma acc routine (s_4) \\\n   seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n   vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n@@ -168,15 +168,15 @@ void s_4 (void)\n void g_5 (void)\n {\n }\n-#pragma acc routine (g_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_5.\" } */ \\\n+#pragma acc routine (g_5) \\\n   gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n-#pragma acc routine (g_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_5.\" } */ \\\n+#pragma acc routine (g_5) \\\n   gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n@@ -194,15 +194,15 @@ void g_5 (void)\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n extern void w_5 (void);\n-#pragma acc routine (w_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_5.\" } */ \\\n+#pragma acc routine (w_5) \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n-#pragma acc routine (w_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_5.\" } */ \\\n+#pragma acc routine (w_5) \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n@@ -220,15 +220,15 @@ extern void w_5 (void);\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n extern void v_5 (void);\n-#pragma acc routine (v_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_5.\" } */ \\\n+#pragma acc routine (v_5) \\\n   vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n-#pragma acc routine (v_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_5.\" } */ \\\n+#pragma acc routine (v_5) \\\n   vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n@@ -246,19 +246,204 @@ extern void s_5 (void);\n   /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n-#pragma acc routine (s_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_5.\" } */ \\\n+#pragma acc routine (s_5) \\\n   seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n-#pragma acc routine (s_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_5.\" } */ \\\n+#pragma acc routine (s_5) \\\n   seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n   worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n   /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n   /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n   gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n   /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+\n+/* Like the *_5 tests, but with the order of clauses changed in the second and\n+   following routine directives for the specific *_5 function.  */\n+\n+#pragma acc routine \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+void g_6 (void)\n+{\n+}\n+#pragma acc routine (g_6) \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*g_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (g_6) \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*g_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc routine \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+extern void w_6 (void);\n+#pragma acc routine (w_6) \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*w_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (w_6) \\\n+  seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*w_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc routine \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+extern void v_6 (void);\n+#pragma acc routine (v_6) \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*v_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (v_6) \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \"incompatible .gang. clause when applying .#pragma acc routine. to .\\[void \\]*v_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+extern void s_6 (void);\n+#pragma acc routine (s_6) \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (s_6) \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*s_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (s_6) \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \"incompatible .worker. clause when applying .#pragma acc routine. to .\\[void \\]*s_6\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+\n+/* Like the *_6 tests, but without all the duplicate clauses, so that the\n+   routine directives are valid in isolation.  */\n+\n+#pragma acc routine \\\n+  gang\n+void g_7 (void)\n+{\n+}\n+#pragma acc routine (g_7) \\\n+  vector /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*g_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (g_7) \\\n+  seq /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*g_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+#pragma acc routine \\\n+  worker\n+extern void w_7 (void);\n+#pragma acc routine (w_7) \\\n+  vector /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*w_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (w_7) \\\n+  seq /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*w_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+#pragma acc routine \\\n+  vector\n+extern void v_7 (void);\n+#pragma acc routine (v_7) \\\n+  seq /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*v_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (v_7) \\\n+  gang /* { dg-error \"incompatible .gang. clause when applying .#pragma acc routine. to .\\[void \\]*v_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+extern void s_7 (void);\n+#pragma acc routine (s_7) \\\n+  seq\n+#pragma acc routine (s_7) \\\n+  vector /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*s_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (s_7) \\\n+  worker /* { dg-error \"incompatible .worker. clause when applying .#pragma acc routine. to .\\[void \\]*s_7\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+\n+/* Test cases for implicit seq clause.  */\n+\n+#pragma acc routine \\\n+  gang\n+void g_8 (void)\n+{\n+}\n+#pragma acc routine (g_8) /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*g_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+#pragma acc routine \\\n+  worker\n+extern void w_8 (void);\n+#pragma acc routine (w_8) /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*w_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+#pragma acc routine \\\n+  vector\n+extern void v_8 (void);\n+#pragma acc routine (v_8) /* { dg-error \"incompatible .seq. clause when applying .#pragma acc routine. to .\\[void \\]*v_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+\n+extern void s_8 (void);\n+#pragma acc routine (s_8)\n+#pragma acc routine (s_8) \\\n+  vector /* { dg-error \"incompatible .vector. clause when applying .#pragma acc routine. to .\\[void \\]*s_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (s_8) \\\n+  gang /* { dg-error \"incompatible .gang. clause when applying .#pragma acc routine. to .\\[void \\]*s_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */\n+#pragma acc routine (s_8) \\\n+  worker /* { dg-error \"incompatible .worker. clause when applying .#pragma acc routine. to .\\[void \\]*s_8\\[\\\\(\\\\)\\]*., which has already been marked with an OpenACC 'routine' directive\" } */"}, {"sha": "a066f2b9c2ba00b8b29a48d4c168e1d114d85ef1", "filename": "gcc/testsuite/c-c++-common/goacc/routine-level-of-parallelism-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -0,0 +1,71 @@\n+/* Test various aspects of clauses specifying compatible levels of parallelism\n+   with the OpenACC 'routine' directive.  The Fortran counterpart is\n+   '../../gfortran.dg/goacc/routine-level-of-parallelism-1.f90'.  */\n+\n+#pragma acc routine gang\n+void g_1 (void)\n+{\n+}\n+#pragma acc routine (g_1) gang\n+#pragma acc routine (g_1) gang\n+\n+\n+extern void w_1 (void);\n+#pragma acc routine (w_1) worker\n+#pragma acc routine (w_1) worker\n+#pragma acc routine (w_1) worker\n+\n+\n+#pragma acc routine vector\n+extern void v_1 (void);\n+#pragma acc routine (v_1) vector\n+#pragma acc routine (v_1) vector\n+\n+\n+/* Also test the implicit seq clause.  */\n+\n+#pragma acc routine seq\n+extern void s_1_1 (void);\n+#pragma acc routine (s_1_1)\n+#pragma acc routine (s_1_1) seq\n+#pragma acc routine (s_1_1)\n+#pragma acc routine (s_1_1) seq\n+\n+#pragma acc routine\n+extern void s_1_2 (void);\n+#pragma acc routine (s_1_2)\n+#pragma acc routine (s_1_2) seq\n+#pragma acc routine (s_1_2)\n+#pragma acc routine (s_1_2) seq\n+\n+extern void s_2_1 (void);\n+#pragma acc routine (s_2_1) seq\n+#pragma acc routine (s_2_1)\n+#pragma acc routine (s_2_1) seq\n+#pragma acc routine (s_2_1)\n+#pragma acc routine (s_2_1) seq\n+\n+extern void s_2_2 (void);\n+#pragma acc routine (s_2_2)\n+#pragma acc routine (s_2_2)\n+#pragma acc routine (s_2_2) seq\n+#pragma acc routine (s_2_2)\n+#pragma acc routine (s_2_2) seq\n+\n+#pragma acc routine seq\n+void s_3_1 (void)\n+{\n+}\n+#pragma acc routine (s_3_1)\n+#pragma acc routine (s_3_1) seq\n+#pragma acc routine (s_3_1)\n+#pragma acc routine (s_3_1) seq\n+\n+#pragma acc routine\n+void s_3_2 (void)\n+{\n+}\n+#pragma acc routine (s_3_2)\n+#pragma acc routine (s_3_2) seq\n+#pragma acc routine (s_3_2)\n+#pragma acc routine (s_3_2) seq"}, {"sha": "83b8c24b41d8b1d11c466ad0853712ee0a800cd3", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-level-of-parallelism-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48f44bf77a39fefc238a16cf1225c6464c82406/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90?ref=b48f44bf77a39fefc238a16cf1225c6464c82406", "patch": "@@ -1,6 +1,6 @@\n-! Test various aspects of clauses specifying compatible levels of\n-! parallelism with the OpenACC routine directive.  The Fortran counterpart is\n-! c-c++-common/goacc/routine-level-of-parallelism-2.c\n+! Test various aspects of clauses specifying compatible levels of parallelism\n+! with the OpenACC routine directive.  The C/C++ counterpart is\n+! '../../c-c++-common/goacc/routine-level-of-parallelism-2.c'.\n \n subroutine g_1\n   !$acc routine gang"}]}