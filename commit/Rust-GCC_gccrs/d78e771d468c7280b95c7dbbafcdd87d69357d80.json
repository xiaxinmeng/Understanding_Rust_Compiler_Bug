{"sha": "d78e771d468c7280b95c7dbbafcdd87d69357d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4ZTc3MWQ0NjhjNzI4MGI5NWM3ZGJiYWZjZGQ4N2Q2OTM1N2Q4MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-07T06:03:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-07T06:03:17Z"}, "message": "tree.c (tree_size): For all 'c' and 'x' nodes...\n\n        * tree.c (tree_size): For all 'c' and 'x' nodes, look directly\n        at the sizes of the relevant structures, rather than relying\n        on TREE_CODE_LENGTH.  Call lang_hooks.tree_size to get the\n        sizes of any such we don't know about.  Use\n        lang_hooks.identifier_size for IDENTIFIER_NODE.\n\n        (initializer_zerop): Use CONSTRUCTOR_ELTS.\n        * tree.def: Update commentary.  Make fourth element of\n        the definition for all 'c' and 'x' nodes zero.\n\n        * langhooks.h: New hook, tree_size / LANG_HOOKS_TREE_SIZE.\n        * langhooks-def.h: Update to match.\n        * langhooks.c: New default, lhd_tree_size.\n\n        * c-common.def (SRCLOC): Kill.\n        * c-pretty-print.c (pp_c_postfix_expression [case SRCLOC]):\n        Remove entirely - was already #if-ed out.\n\nada:\n        * ada-tree.def: Make fourth element for GNAT_LOOP_ID zero.\n        * misc.c (gnat_tree_size): New function.\n        (LANG_HOOKS_TREE_SIZE): Override.\ncp:\n        * cp-tree.def: Make fourth element for all 'c' and 'x' nodes zero.\n        * cp-lang.c (cp_tree_size): New function.\n        (LANG_HOOKS_TREE_SIZE): Override.\n\n        * cp-tree.h (SOURCE_LOCUS, SRCLOC_FILE, SRCLOC_LINE, struct\n        tree_srcloc, TS_CP_COMMON, TS_CP_SRCLOC): Kill.\n        (union lang_tree_node): Remove common and srcloc members.\n        (build_srcloc_here): Don't prototype.\n        * decl.c (cp_tree_node_structure): Kill SRCLOC case.\n        * pt.c (pending_templates): Correct comment.\n        * tree.c (build_srcloc, build_srcloc_here): Kill.\n\nFrom-SVN: r65323", "tree": {"sha": "85a5a4cad3cfe432c546c4df2134dac37924265c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a5a4cad3cfe432c546c4df2134dac37924265c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78e771d468c7280b95c7dbbafcdd87d69357d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78e771d468c7280b95c7dbbafcdd87d69357d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78e771d468c7280b95c7dbbafcdd87d69357d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78e771d468c7280b95c7dbbafcdd87d69357d80/comments", "author": null, "committer": null, "parents": [{"sha": "a9c89a57f64d057fac96a9bbdbcde6ba7656ad55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c89a57f64d057fac96a9bbdbcde6ba7656ad55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c89a57f64d057fac96a9bbdbcde6ba7656ad55"}], "stats": {"total": 520, "additions": 274, "deletions": 246}, "files": [{"sha": "292c63e8ed34363d2056a205e0fcd6dcdbabb4d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 139, "deletions": 118, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -1,33 +1,54 @@\n+2003-04-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.c (tree_size): For all 'c' and 'x' nodes, look directly\n+\tat the sizes of the relevant structures, rather than relying\n+\ton TREE_CODE_LENGTH.  Call lang_hooks.tree_size to get the\n+\tsizes of any such we don't know about.  Use\n+\tlang_hooks.identifier_size for IDENTIFIER_NODE.\n+\n+\t(initializer_zerop): Use CONSTRUCTOR_ELTS.\n+\t* tree.def: Update commentary.  Make fourth element of\n+\tthe definition for all 'c' and 'x' nodes zero.\n+\n+\t* langhooks.h: New hook, tree_size / LANG_HOOKS_TREE_SIZE.\n+\t* langhooks-def.h: Update to match.\n+\t* langhooks.c: New default, lhd_tree_size.\n+\n+\t* c-common.def (SRCLOC): Kill.\n+\t* c-pretty-print.c (pp_c_postfix_expression [case SRCLOC]):\n+\tRemove entirely - was already #if-ed out.\n+\n+\n 2003-04-06  Zack Weinberg  <zack@codesourcery.com>\n \n \t* mklibgcc.in: Use a here document to avoid running afoul of\n \tshells that generate control-A from \"echo \\1\".\n \n 2003-04-06  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/invoke.texi (RS/6000 and PowerPC Options): Document -mspe\n-        option.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mspe\n+\toption.\n \n-        * config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n-        rs6000_spe.\n+\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n+\trs6000_spe.\n \n-        * config/rs6000/eabi.h (TARGET_E500): Define.\n+\t* config/rs6000/eabi.h (TARGET_E500): Define.\n \n-        * config/rs6000/rs6000.h (TARGET_E500): Define.\n-        (TARGET_OPTIONS): Add spe= option.\n-        Declare rs6000_spe and rs6000_spe_string extern.\n+\t* config/rs6000/rs6000.h (TARGET_E500): Define.\n+\t(TARGET_OPTIONS): Add spe= option.\n+\tDeclare rs6000_spe and rs6000_spe_string extern.\n \n-        * config/rs6000/rs6000.c (branch_positive_comparison_operator):\n-        Change TARGET_SPE to TARGET_E500.\n-        (ccr_bit): Change TARGET_SPE to TARGET_E500.  Check for\n-        !TARGET_FPRS.\n-        (print_operand): Same.\n-        (rs6000_generate_compare): Same.\n-        (output_cbranch): Same.\n-        (rs6000_spe): Declare.\n-        (rs6000_spe_string): Declare.\n-        (rs6000_override_options): Call rs6000_parse_spe_option.\n-        (rs6000_parse_spe_option): New.\n+\t* config/rs6000/rs6000.c (branch_positive_comparison_operator):\n+\tChange TARGET_SPE to TARGET_E500.\n+\t(ccr_bit): Change TARGET_SPE to TARGET_E500.  Check for\n+\t!TARGET_FPRS.\n+\t(print_operand): Same.\n+\t(rs6000_generate_compare): Same.\n+\t(output_cbranch): Same.\n+\t(rs6000_spe): Declare.\n+\t(rs6000_spe_string): Declare.\n+\t(rs6000_override_options): Call rs6000_parse_spe_option.\n+\t(rs6000_parse_spe_option): New.\n \n 2003-04-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -150,15 +171,15 @@\n \n Fri Apr  4 17:43:52 2003  Olivier Hainque <hainque@act-europe.fr>\n \n-        * emit-rtl.c (get_mem_attrs): Adjust alignment tests determining\n-        use of default attributes to agree MEM_ALIGN macro.\n+\t* emit-rtl.c (get_mem_attrs): Adjust alignment tests determining\n+\tuse of default attributes to agree MEM_ALIGN macro.\n \n Fri Apr  4 17:33:24 2003  Joel Brobecker  <brobecker@gnat.com>\n \n-        * dbxout.c (dbxout_type): When printing type index of range type\n+\t* dbxout.c (dbxout_type): When printing type index of range type\n \twhose bounds are printed in octal format, print type of parent type if\n \tit exists so enumerated type descriptions are not transformed\n-        into unsigned types.\n+\tinto unsigned types.\n \n 2003-04-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -307,7 +328,7 @@ Thu Apr  3 17:08:09 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n 2003-04-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/sparc/sol2-bi.h (ASM_CPU64_DEFAULT_SPEC): Add -TSO.\n-        (DEF_ARCH64_SPEC): Likewise.\n+\t(DEF_ARCH64_SPEC): Likewise.\n \n Thu Apr  3 09:53:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -367,8 +388,8 @@ Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-02  Richard Henderson  <rth@redhat.com>\n \n-        * dwarf2out.c (output_call_frame_info): Ignore fde->nothrow as an\n-        optimization when flag_exceptions not enabled.\n+\t* dwarf2out.c (output_call_frame_info): Ignore fde->nothrow as an\n+\toptimization when flag_exceptions not enabled.\n \n 2003-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -394,42 +415,42 @@ Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-01  Richard Henderson  <rth@redhat.com>\n \n-        * except.c (convert_from_eh_region_ranges_1): Smash REG_EH_REGION\n-        notes for nothrow calls if flag_forced_unwind_exceptions.\n-        (build_post_landing_pads): Mind flag_forced_unwind_exceptions.\n-        (sjlj_find_directly_reachable_regions): Likewise.\n-        (reachable_handlers): Likewise.\n-        (can_throw_external): Likewise.\n-        (collect_one_action_chain): Record cleanups after catch-all and\n-        must-not-throw if flag_forced_unwind_exceptions.\n-        * flags.h (flag_forced_unwind_exceptions): Declare.\n-        * toplev.c (flag_forced_unwind_exceptions): New.\n-        (lang_independent_options): Add it.\n+\t* except.c (convert_from_eh_region_ranges_1): Smash REG_EH_REGION\n+\tnotes for nothrow calls if flag_forced_unwind_exceptions.\n+\t(build_post_landing_pads): Mind flag_forced_unwind_exceptions.\n+\t(sjlj_find_directly_reachable_regions): Likewise.\n+\t(reachable_handlers): Likewise.\n+\t(can_throw_external): Likewise.\n+\t(collect_one_action_chain): Record cleanups after catch-all and\n+\tmust-not-throw if flag_forced_unwind_exceptions.\n+\t* flags.h (flag_forced_unwind_exceptions): Declare.\n+\t* toplev.c (flag_forced_unwind_exceptions): New.\n+\t(lang_independent_options): Add it.\n \t* doc/invoke.text: Add it.\n \n 2003-04-01  David Mosberger <davidm@hpl.hp.com>\n \n-        * config/ia64/crti.asm: Clean up trailing whitespace.\n-        Remove trailing hashes (#) from identifiers.\n+\t* config/ia64/crti.asm: Clean up trailing whitespace.\n+\tRemove trailing hashes (#) from identifiers.\n \n-        * config/ia64/crtn.asm: Ditto.\n+\t* config/ia64/crtn.asm: Ditto.\n \n-        * config/ia64/crtend.asm: Remove trailing hashes (#) from\n-        identifiers.\n-        (__do_global_ctors_aux): Align to 32-byte boundary.  Add unwind\n-        directives.  Drop explicit bundling---it just makes the code\n-        harder to read.  Don't save/restore gp needlessly.\n+\t* config/ia64/crtend.asm: Remove trailing hashes (#) from\n+\tidentifiers.\n+\t(__do_global_ctors_aux): Align to 32-byte boundary.  Add unwind\n+\tdirectives.  Drop explicit bundling---it just makes the code\n+\tharder to read.  Don't save/restore gp needlessly.\n \n-        * config/ia64/crtbegin.asm: Remove trailing hashes (#) from\n-        identifiers (they're only needed if the identifier would clash\n-        with a register name otherwise).\n-        (__do_global_dtors_aux): Align to 32-byte boundary. Add unwind\n-        directives.  Drop explicit bundling---it just makes the code\n-        harder to read.\n-        (__do_jv_register_classes): Ditto.\n-        (.fini_array): Remove \"progbits\" (newer\n-        assemblers don't like wrong section-types).\n-        (.init_array): Ditto.\n+\t* config/ia64/crtbegin.asm: Remove trailing hashes (#) from\n+\tidentifiers (they're only needed if the identifier would clash\n+\twith a register name otherwise).\n+\t(__do_global_dtors_aux): Align to 32-byte boundary. Add unwind\n+\tdirectives.  Drop explicit bundling---it just makes the code\n+\tharder to read.\n+\t(__do_jv_register_classes): Ditto.\n+\t(.fini_array): Remove \"progbits\" (newer\n+\tassemblers don't like wrong section-types).\n+\t(.init_array): Ditto.\n \n 2003-04-01  Roger Sayle  <roger@eyesopen.com>\n \n@@ -546,56 +567,56 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-02-31  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * testsuite/gcc.c-torture/execute/simd-3.c: New.\n-\n-        * expr.c (expand_expr): Handle VECTOR_CST.\n-        (const_vector_from_tree): New.\n-\n-        * varasm.c (output_constant): Handle VECTOR_CST.\n-\n-        * c-typeck.c (digest_init): Build a vector constant from a\n-        VECTOR_TYPE.\n-\n-        * config/rs6000/rs6000.c: Remove prototype for\n-        easy_vector_constant.\n-        (easy_vector_constant): Add mode parameter.  Rewrite to handle\n-        more easy constants.\n-        (rs6000_emit_move): Pass mode to easy_vector_constant.\n-        Call emit_easy_vector_insn for SPE V2SI vector constant moves.\n-        (emit_easy_vector_insn): New.\n-        (easy_vector_same): New.\n-        (EASY_VECTOR_15): New macro.\n-        (EASY_VECTOR_15_ADD_SELF): New macro.\n-        (bdesc_2arg): Rename to xorv2si3.\n-        (easy_vector_constant_add_self): New.\n-        (input_operand): Allow vector constants.\n-\n-        * config/rs6000/rs6000.h (PREDICATE_CODES): Add\n-        easy_vector_constant, easy_vector_constant_add_self.\n-        (EXTRA_CONSTRAINT): Add 'W'.\n-\n-        * config/rs6000/rs6000-protos.h: Add prototype for\n-        easy_vector_constant, emit_easy_vector_insn.\n-\n-        * config/rs6000/altivec.md (xorv8hi3): New.\n-        (xorv16qi3): New.\n-        Remove all _const0 patterns.\n-        (movv4si_internal): Rewrite to use code.  Add vector constant to\n-        vector alternative.  Add splitter.\n-        (movv8hi_internal): Same.\n-        (movv16qi_internal): Same.\n-        (movv4sf_internal): Same.\n-        Change the unspecs for vspltis* to use constants.\n-\n-        * config/rs6000/spe.md (\"xorv4hi3\"): New.\n-        (\"spe_evxor\"): Rename to xorv2si3.\n-        (\"xorv1di3\"): New.\n-        Remove all _const0 patterns.\n-        (movv2si_internal): Rewrite to use code.  Add vector constant to\n-        alternatives.  Add splitter.\n-        (movv4hi_internal): Add vector constant to alternatives.\n-        (movv1di_internal): Same.\n-        (movv2sf_internal): Same.\n+\t* testsuite/gcc.c-torture/execute/simd-3.c: New.\n+\n+\t* expr.c (expand_expr): Handle VECTOR_CST.\n+\t(const_vector_from_tree): New.\n+\n+\t* varasm.c (output_constant): Handle VECTOR_CST.\n+\n+\t* c-typeck.c (digest_init): Build a vector constant from a\n+\tVECTOR_TYPE.\n+\n+\t* config/rs6000/rs6000.c: Remove prototype for\n+\teasy_vector_constant.\n+\t(easy_vector_constant): Add mode parameter.  Rewrite to handle\n+\tmore easy constants.\n+\t(rs6000_emit_move): Pass mode to easy_vector_constant.\n+\tCall emit_easy_vector_insn for SPE V2SI vector constant moves.\n+\t(emit_easy_vector_insn): New.\n+\t(easy_vector_same): New.\n+\t(EASY_VECTOR_15): New macro.\n+\t(EASY_VECTOR_15_ADD_SELF): New macro.\n+\t(bdesc_2arg): Rename to xorv2si3.\n+\t(easy_vector_constant_add_self): New.\n+\t(input_operand): Allow vector constants.\n+\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add\n+\teasy_vector_constant, easy_vector_constant_add_self.\n+\t(EXTRA_CONSTRAINT): Add 'W'.\n+\n+\t* config/rs6000/rs6000-protos.h: Add prototype for\n+\teasy_vector_constant, emit_easy_vector_insn.\n+\n+\t* config/rs6000/altivec.md (xorv8hi3): New.\n+\t(xorv16qi3): New.\n+\tRemove all _const0 patterns.\n+\t(movv4si_internal): Rewrite to use code.  Add vector constant to\n+\tvector alternative.  Add splitter.\n+\t(movv8hi_internal): Same.\n+\t(movv16qi_internal): Same.\n+\t(movv4sf_internal): Same.\n+\tChange the unspecs for vspltis* to use constants.\n+\n+\t* config/rs6000/spe.md (\"xorv4hi3\"): New.\n+\t(\"spe_evxor\"): Rename to xorv2si3.\n+\t(\"xorv1di3\"): New.\n+\tRemove all _const0 patterns.\n+\t(movv2si_internal): Rewrite to use code.  Add vector constant to\n+\talternatives.  Add splitter.\n+\t(movv4hi_internal): Add vector constant to alternatives.\n+\t(movv1di_internal): Same.\n+\t(movv2sf_internal): Same.\n \n 2003-03-31  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -759,8 +780,8 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-03-30  Richard Henderson  <rth@redhat.com>\n \n \tPR opt/10011, opt/10252:\n-        * toplev.c (rest_of_compilation): Run purge_builtin_constant_p\n-        before post-gcse cse pass.\n+\t* toplev.c (rest_of_compilation): Run purge_builtin_constant_p\n+\tbefore post-gcse cse pass.\n \n 2003-03-30  Roger Sayle  <roger@eyesopen.com>\n \n@@ -786,8 +807,8 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n-        * Makefile.in (STRICT_WARN): Don't warn for ISO C constructs.\n-        (STRICT2_WARN): Likewise.\n+\t* Makefile.in (STRICT_WARN): Don't warn for ISO C constructs.\n+\t(STRICT2_WARN): Likewise.\n \n 2003-03-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -910,7 +931,7 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(load_mems): Adjust replace_loop_mems call.\n \n 2003-03-28  Eric Botcazou  <ebotcazou@libertysurf.fr>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \tPR target/10114 and PR target/10084\n \t* dwarf2out.c (mem_loc_descriptor): Handle LO_SUM.\n@@ -961,13 +982,13 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-27  David Mosberger  <davidm@hpl.hp.com>\n \n-        * unwind-libunwind.c (uw_frame_state_for): Adjust for libunwind\n-        v0.9 API change: replace read of UNW_REG_HANDLER with\n-        unw_get_proc_info().\n-        (_Unwind_GetLanguageSpecificData): Replace read of UNW_REG_LSDA\n-        with unw_get_proc_info().\n-        (_Unwind_GetRegionStart): Replace UNW_REG_PROC_START with\n-        unw_get_proc_info().\n+\t* unwind-libunwind.c (uw_frame_state_for): Adjust for libunwind\n+\tv0.9 API change: replace read of UNW_REG_HANDLER with\n+\tunw_get_proc_info().\n+\t(_Unwind_GetLanguageSpecificData): Replace read of UNW_REG_LSDA\n+\twith unw_get_proc_info().\n+\t(_Unwind_GetRegionStart): Replace UNW_REG_PROC_START with\n+\tunw_get_proc_info().\n \n 2003-03-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -993,7 +1014,7 @@ Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-26  Vladimir Makarov  <vmakarov@redhat.com>\n \n-        * config/rs6000/8540.md: New file.\n+\t* config/rs6000/8540.md: New file.\n \n \t* config/rs6000/{40x.md, 603.md, 6xx.md, 7450.md, 7xx.md, mpc.md,\n \tpower4.md, rios1.md, rios2.md, rs64.md}: Add mult_compare to"}, {"sha": "1993f767b7b6ccba0ce4f890030d50db53ee4a79", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -1,3 +1,9 @@\n+2003-04-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ada-tree.def: Make fourth element for GNAT_LOOP_ID zero.\n+\t* misc.c (gnat_tree_size): New function.\n+\t(LANG_HOOKS_TREE_SIZE): Override.\n+\n 2003-04-03  Jason Merrill  <jason@redhat.com>\n \n \t* misc.c (gnat_adjust_rli): #if 0.\n@@ -90,10 +96,10 @@\n \n 2003-01-29  Laurent Guerby <guerby@acm.org>\n \n-        PR ada/8344\n-        * final.c: rename to adafinal.c to avoid file name conflicts with gcc file.\n-        * Makefile.in: match previous change.\n-        * Make-lang.in: match previous change.\n+\tPR ada/8344\n+\t* final.c: rename to adafinal.c to avoid file name conflicts with gcc file.\n+\t* Makefile.in: match previous change.\n+\t* Make-lang.in: match previous change.\n \n 2003-01-29\tJoel Sherrill <joel@OARcorp.com>\n "}, {"sha": "b6172c037d7eae9b2c9d16dadaa22d19d193da60", "filename": "gcc/ada/ada-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2Fada-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2Fada-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.def?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -77,4 +77,4 @@ DEFTREECODE (GNAT_NOP_EXPR, \"gnat_nop_expr\", '1', 1)\n \n    ??? This should be redone at some point.  */\n \n-DEFTREECODE (GNAT_LOOP_ID, \"gnat_loop_id\", 'x', 1)\n+DEFTREECODE (GNAT_LOOP_ID, \"gnat_loop_id\", 'x', 0)"}, {"sha": "93a52eb338afe22a807915d1416b0f19280109c2", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -79,6 +79,7 @@ extern FILE *asm_out_file;\n extern int save_argc;\n extern char **save_argv;\n \n+static size_t gnat_tree_size\t\tPARAMS ((enum tree_code));\n static bool gnat_init\t\t\tPARAMS ((void));\n static void gnat_init_options\t\tPARAMS ((void));\n static int gnat_decode_option\t\tPARAMS ((int, char **));\n@@ -98,6 +99,8 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_NAME\t\t\t\"GNU Ada\"\n #undef  LANG_HOOKS_IDENTIFIER_SIZE\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct tree_identifier)\n+#undef  LANG_HOOKS_TREE_SIZE\n+#define LANG_HOOKS_TREE_SIZE\t\tgnat_tree_size\n #undef  LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT\t\t\tgnat_init\n #undef  LANG_HOOKS_INIT_OPTIONS\n@@ -335,6 +338,19 @@ internal_error_function (msgid, ap)\n   Compiler_Abort (fp, -1);\n }\n \n+/* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */\n+static size_t\n+gnat_tree_size (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case GNAT_LOOP_ID:\treturn sizeof (struct tree_loop_id);\n+    default:\n+      abort ();\n+    }\n+  /* NOTREACHED */\n+}\n+\n /* Perform all the initialization steps that are language-specific.  */\n \n static bool"}, {"sha": "dfdec8c4df078adabf35d2a7dabae8e005e3df91", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -25,9 +25,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Tree nodes relevant to both C and C++. These were originally in\n cp-tree.def in the cp subdir.  */\n \n-/* A node to remember a source position.  */\n-DEFTREECODE (SRCLOC, \"srcloc\", 'x', 2)\n-\n DEFTREECODE (SIZEOF_EXPR, \"sizeof_expr\", '1', 1)\n DEFTREECODE (ARROW_EXPR, \"arrow_expr\", 'e', 1)\n DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", '1', 1)"}, {"sha": "65023996272c5711a024aa038a1b772cf07c4c45", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -718,30 +718,6 @@ pp_c_postfix_expression (ppi, e)\n       pp_initializer (ppi, e);\n       break;\n       \n-#if 0\n-    case SRCLOC:\n-      pp_left_paren (ppi);\n-      pp_identifier (ppi, \"__location__\");\n-      pp_right_paren (ppi);\n-      pp_whitespace (ppi);\n-      pp_left_brace (ppi);\n-      pp_dot (ppi);\n-      pp_identifier (ppi, \"file\");\n-      pp_whitespace (ppi);\n-      pp_equal (ppi);\n-      pp_c_whitespace (ppi);\n-      pp_c_expression (ppi, SRCLOC_FILE (e));\n-      pp_separate_with (ppi, ',');\n-      pp_dot (ppi);\n-      pp_identifier (ppi, \"line\");\n-      pp_whitespace (ppi);\n-      pp_equal (ppi);\n-      pp_c_whitespace (ppi);\n-      pp_c_expression (ppi, SRCLOC_LINE (e));\n-      pp_right_brace (ppi);\n-      break;\n-#endif\n-\n     case VA_ARG_EXPR:\n       pp_c_identifier (ppi, \"__builtin_va_arg\");\n       pp_c_left_paren (ppi);"}, {"sha": "8311500c56ba6a906f1d3cc5e9217f94415dacd0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -1,3 +1,17 @@\n+2003-04-06  Zack Weinberg   <zack@codesourcery.com>\n+\n+\t* cp-tree.def: Make fourth element for all 'c' and 'x' nodes zero.\n+\t* cp-lang.c (cp_tree_size): New function.\n+\t(LANG_HOOKS_TREE_SIZE): Override.\n+\n+\t* cp-tree.h (SOURCE_LOCUS, SRCLOC_FILE, SRCLOC_LINE, struct\n+\ttree_srcloc, TS_CP_COMMON, TS_CP_SRCLOC): Kill.\n+\t(union lang_tree_node): Remove common and srcloc members.\n+\t(build_srcloc_here): Don't prototype.\n+\t* decl.c (cp_tree_node_structure): Kill SRCLOC case.\n+\t* pt.c (pending_templates): Correct comment.\n+\t* tree.c (build_srcloc, build_srcloc_here): Kill.\n+\n 2003-04-06  Zack Weinberg   <zack@codesourcery.com>\n \n \t* call.c: Include intl.h.\n@@ -3897,7 +3911,7 @@\n \n 2002-08-11  Gabriel Dos Reis  <gdr@nerim.net>\n \n-\t* decl.c (duplicate_decls): Replace DECL_SOURCE_FILE +\n+\t* decl.c (duplicate_decls): Replace DECL_SOURCE_FILE\n \tDECL_SOURCE_LINE with DECL_SOURCE_LOCATION.\n \t* optimize.c (maybe_clone_body): Likewise.\n \t* pt.c (tsubst_enum): Likewise."}, {"sha": "0caa3360a77ad22c50bf7c093b67ba2411a1beee", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -34,10 +34,13 @@ static HOST_WIDE_INT cxx_get_alias_set (tree);\n static bool ok_to_generate_alias_set_for_type (tree);\n static bool cxx_warn_unused_global_decl (tree);\n static tree cp_expr_size (tree);\n+static size_t cp_tree_size (enum tree_code);\n static bool cp_var_mod_type_p (tree);\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n+#undef LANG_HOOKS_TREE_SIZE\n+#define LANG_HOOKS_TREE_SIZE cp_tree_size\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n #undef LANG_HOOKS_FINISH\n@@ -318,6 +321,24 @@ cp_expr_size (tree exp)\n     return lhd_expr_size (exp);\n }\n \n+/* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */\n+static size_t\n+cp_tree_size (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case PTRMEM_CST: \t\treturn sizeof (struct ptrmem_cst);\n+    case BASELINK:\t\treturn sizeof (struct tree_baselink);\n+    case TEMPLATE_PARM_INDEX: \treturn sizeof (template_parm_index);\n+    case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n+    case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n+    case WRAPPER:\t\treturn sizeof (struct tree_wrapper);\n+    default:\n+      abort ();\n+    }\n+  /* NOTREACHED */\n+}\n+\n /* Returns true if T is a variably modified type, in the sense of C99.\n    This routine needs only check cases that cannot be handled by the\n    language-independent logic in tree-inline.c.  */"}, {"sha": "2d340f3d8d6a3f5d125ea733b84a1669d87821f0", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -47,7 +47,7 @@ DEFTREECODE (OFFSET_REF, \"offset_ref\", 'r', 2)\n /* A pointer-to-member constant.  For a pointer-to-member constant\n    `X::Y' The PTRMEM_CST_CLASS is the RECORD_TYPE for `X' and the\n    PTRMEM_CST_MEMBER is the _DECL for `Y'.  */\n-DEFTREECODE (PTRMEM_CST, \"ptrmem_cst\", 'c', 2)\n+DEFTREECODE (PTRMEM_CST, \"ptrmem_cst\", 'c', 0)\n \n /* For NEW_EXPR, operand 0 is the placement list.\n    Operand 1 is the new-declarator.\n@@ -105,7 +105,7 @@ DEFTREECODE (ALIAS_DECL, \"alias_decl\", 'd', 0)\n    the type of the expression.  This type is either a FUNCTION_TYPE,\n    METHOD_TYPE, or `unknown_type_node' indicating that the function is\n    overloaded. */\n-DEFTREECODE (BASELINK, \"baselink\", 'x', 3)\n+DEFTREECODE (BASELINK, \"baselink\", 'x', 0)\n \n /* Template definition.  The following fields have the specified uses,\n    although there are other macros in cp-tree.h that should be used for\n@@ -157,16 +157,7 @@ DEFTREECODE (TEMPLATE_DECL, \"template_decl\", 'd', 0)\n    The LEVEL is the level of the parameter when we are worrying about\n    the types of things; the ORIG_LEVEL is the level when we are\n    worrying about instantiating things.  */\n-DEFTREECODE (TEMPLATE_PARM_INDEX, \"template_parm_index\", 'x', \n-\t     /* The addition of (sizeof(tree) - 1) in the next expression\n-\t\tis to handle the case when padding pushes us past an even\n-\t\tmultiple of sizeof(tree).  */\n-\t     /* We used to try to calculate this using\n-\t\t1+3*sizeof(HOST_WIDE_INT), but that fails if alignment\n-\t\tmakes it bigger.  */\n-\t     ((sizeof (template_parm_index) - sizeof (struct tree_common))\n-\t      + sizeof (tree) - 1)\n-\t     / sizeof (tree))\n+DEFTREECODE (TEMPLATE_PARM_INDEX, \"template_parm_index\", 'x', 0)\n \n /* Index into a template parameter list.  This parameter must be a type.\n    The TYPE_FIELDS value will be a TEMPLATE_PARM_INDEX.  */\n@@ -212,7 +203,7 @@ DEFTREECODE (USING_DECL, \"using_decl\", 'd', 0)\n DEFTREECODE (USING_STMT, \"using_directive\", 'e', 1)\n \n /* An un-parsed default argument.  Looks like an IDENTIFIER_NODE.  */\n-DEFTREECODE (DEFAULT_ARG, \"default_arg\", 'x', 2)\n+DEFTREECODE (DEFAULT_ARG, \"default_arg\", 'x', 0)\n \n /* A template-id, like foo<int>.  The first operand is the template.\n    The second is the TREE_LIST or TREE_VEC of explicitly specified\n@@ -224,11 +215,11 @@ DEFTREECODE (TEMPLATE_ID_EXPR, \"template_id_expr\", 'e', 2)\n \n /* A list-like node for chaining overloading candidates. TREE_TYPE is \n    the original name, and the parameter is the FUNCTION_DECL.  */\n-DEFTREECODE (OVERLOAD, \"overload\", 'x', 1)\n+DEFTREECODE (OVERLOAD, \"overload\", 'x', 0)\n \n /* A generic wrapper for something not tree that we want to include in\n    tree structure.  */\n-DEFTREECODE (WRAPPER, \"wrapper\", 'x', 1)\n+DEFTREECODE (WRAPPER, \"wrapper\", 'x', 0)\n \n /* Used to represent deferred name lookup for dependent names while\n    parsing a template declaration.  The first argument is an"}, {"sha": "2986d6b6ae3d6a2ba10135ce7490b8d484b79b3e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -353,17 +353,6 @@ struct tree_wrapper GTY(())\n   struct z_candidate *z_c;\n };\n \n-#define SOURCE_LOCUS(NODE) \\\n-   (((struct tree_srcloc*)SRCLOC_CHECK (NODE))->locus)\n-#define SRCLOC_FILE(NODE) SOURCE_LOCUS (NODE).file\n-#define SRCLOC_LINE(NODE) SOURCE_LOCUS (NODE).line\n-\n-struct tree_srcloc GTY(())\n-{\n-  struct tree_common common;\n-  location_t locus;\n-};\n-\n /* Macros for access to language-specific slots in an identifier.  */\n \n #define IDENTIFIER_NAMESPACE_BINDINGS(NODE)\t\\\n@@ -466,7 +455,6 @@ struct tree_default_arg GTY (())\n };\n \n enum cp_tree_node_structure_enum {\n-  TS_CP_COMMON,\n   TS_CP_GENERIC,\n   TS_CP_IDENTIFIER,\n   TS_CP_TPI,\n@@ -475,7 +463,6 @@ enum cp_tree_node_structure_enum {\n   TS_CP_OVERLOAD,\n   TS_CP_BASELINK,\n   TS_CP_WRAPPER,\n-  TS_CP_SRCLOC,\n   TS_CP_DEFAULT_ARG,\n   LAST_TS_CP_ENUM\n };\n@@ -484,15 +471,13 @@ enum cp_tree_node_structure_enum {\n union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n        chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n {\n-  struct tree_common GTY ((tag (\"TS_CP_COMMON\"))) common;\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;\n   struct template_parm_index_s GTY ((tag (\"TS_CP_TPI\"))) tpi;\n   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n   struct tree_wrapper GTY ((tag (\"TS_CP_WRAPPER\"))) wrapper;\n-  struct tree_srcloc GTY ((tag (\"TS_CP_SRCLOC\"))) srcloc;\n   struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;\n   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\n };\n@@ -4212,7 +4197,6 @@ extern tree decl_namespace_context\t\t(tree);\n extern tree lvalue_type\t\t\t\t(tree);\n extern tree error_type\t\t\t\t(tree);\n extern tree build_zc_wrapper\t\t\t(struct z_candidate *);\n-extern tree build_srcloc_here\t\t\t(void);\n extern int varargs_function_p\t\t\t(tree);\n extern int really_overloaded_fn\t\t\t(tree);\n extern int cp_tree_equal\t\t\t(tree, tree);"}, {"sha": "4734d76d00673705814e31979b998e53579a0607", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -14405,7 +14405,6 @@ cp_tree_node_structure (union lang_tree_node * t)\n     case PTRMEM_CST:\t\treturn TS_CP_PTRMEM;\n     case BASELINK:              return TS_CP_BASELINK;\n     case WRAPPER:\t\treturn TS_CP_WRAPPER;\n-    case SRCLOC:\t\treturn TS_CP_SRCLOC;\n     default:\t\t\treturn TS_CP_GENERIC;\n     }\n }"}, {"sha": "b5ea239c51e15597775cb2564688c23a4ff60021", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -49,11 +49,10 @@ typedef int (*tree_fn_t) PARAMS ((tree, void*));\n \n /* The PENDING_TEMPLATES is a TREE_LIST of templates whose\n    instantiations have been deferred, either because their definitions\n-   were not yet available, or because we were putting off doing the\n-   work.  The TREE_PURPOSE of each entry is a SRCLOC indicating where\n-   the instantiate request occurred; the TREE_VALUE is either a DECL\n-   (for a function or static data member), or a TYPE (for a class)\n-   indicating what we are hoping to instantiate.  */\n+   were not yet available, or because we were putting off doing the work.\n+   The TREE_PURPOSE of each entry is either a DECL (for a function or\n+   static data member), or a TYPE (for a class) indicating what we are\n+   hoping to instantiate.  The TREE_VALUE is not used.  */\n static GTY(()) tree pending_templates;\n static GTY(()) tree last_pending_template;\n "}, {"sha": "97d297a8c31d093d58a93a9c7a55b94d5744cb6e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -43,7 +43,6 @@ static hashval_t list_hash_pieces PARAMS ((tree, tree, tree));\n static hashval_t list_hash PARAMS ((const void *));\n static cp_lvalue_kind lvalue_p_1 PARAMS ((tree, int, int));\n static tree no_linkage_helper PARAMS ((tree *, int *, void *));\n-static tree build_srcloc PARAMS ((const char *, int));\n static tree mark_local_for_remap_r PARAMS ((tree *, int *, void *));\n static tree cp_unsave_r PARAMS ((tree *, int *, void *));\n static tree build_target_expr PARAMS ((tree, tree));\n@@ -1824,26 +1823,6 @@ build_zc_wrapper (ptr)\n   return t;\n }\n \n-static tree\n-build_srcloc (file, line)\n-     const char *file;\n-     int line;\n-{\n-  tree t;\n-\n-  t = make_node (SRCLOC);\n-  SRCLOC_FILE (t) = file;\n-  SRCLOC_LINE (t) = line;\n-\n-  return t;\n-}\n-\n-tree\n-build_srcloc_here ()\n-{\n-  return build_srcloc (input_filename, lineno);\n-}\n-\n /* The type of ARG when used as an lvalue.  */\n \n tree"}, {"sha": "1c2244a6276e7bcc41682ea5fcc0e1ec4a62b917", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -65,6 +65,7 @@ extern bool lhd_warn_unused_global_decl PARAMS ((tree));\n extern void lhd_incomplete_type_error PARAMS ((tree, tree));\n extern tree lhd_type_promotes_to PARAMS ((tree));\n extern tree lhd_expr_size PARAMS ((tree));\n+extern size_t lhd_tree_size PARAMS ((enum tree_code));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -116,6 +117,7 @@ void write_global_declarations PARAMS ((void));\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION lhd_print_error_function\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n+#define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n \n #define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n #define LANG_HOOKS_FUNCTION_FINAL\tlhd_do_nothing_f\n@@ -238,6 +240,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n #define LANG_HOOKS_INITIALIZER { \\\n   LANG_HOOKS_NAME, \\\n   LANG_HOOKS_IDENTIFIER_SIZE, \\\n+  LANG_HOOKS_TREE_SIZE, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_DECODE_OPTION, \\\n   LANG_HOOKS_POST_OPTIONS, \\"}, {"sha": "d4f3e3584d6fd969898e7f2f42e0796b761b7fd2", "filename": "gcc/langhooks.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -458,6 +458,17 @@ lhd_expr_size (exp)\n     return size_in_bytes (TREE_TYPE (exp));\n }\n \n+/* lang_hooks.tree_size: Determine the size of a tree with code C,\n+   which is a language-specific tree code in category 'x'.  The\n+   default expects never to be called.  */\n+size_t\n+lhd_tree_size (c)\n+     enum tree_code c ATTRIBUTE_UNUSED;\n+{\n+  abort ();\n+  return 0;\n+}\n+\n /* lang_hooks.decls.final_write_globals: perform final processing on\n    global variables.  */\n void"}, {"sha": "70ad952b6f3fbc394b5e7c24e6c526d9437d6e99", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -193,6 +193,11 @@ struct lang_hooks\n      identifier nodes long enough for the language-specific slots.  */\n   size_t identifier_size;\n \n+  /* Determines the size of any language-specific 'x' or 'c' nodes.\n+     Since it is called from make_node, the only information available\n+     is the tree code.  Expected to abort on unrecognized codes.  */\n+  size_t (*tree_size) PARAMS ((enum tree_code));\n+\n   /* The first callback made to the front end, for simple\n      initialization needed before any calls to decode_option.  */\n   void (*init_options) PARAMS ((void));"}, {"sha": "ecee8f397c4ed5bd9a4b9d763a09ecfff0eae342", "filename": "gcc/tree.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -182,28 +182,32 @@ tree_size (node)\n \t      + TREE_CODE_LENGTH (code) * sizeof (char *) - sizeof (char *));\n \n     case 'c':  /* a constant */\n-      /* We can't use TREE_CODE_LENGTH for INTEGER_CST, since the number of\n-\t words is machine-dependent due to varying length of HOST_WIDE_INT,\n-\t which might be wider than a pointer (e.g., long long).  Similarly\n-\t for REAL_CST, since the number of words is machine-dependent due\n-\t to varying size and alignment of `double'.  */\n-      if (code == INTEGER_CST)\n-\treturn sizeof (struct tree_int_cst);\n-      else if (code == REAL_CST)\n-\treturn sizeof (struct tree_real_cst);\n-      else\n-\treturn (sizeof (struct tree_common)\n-\t\t+ TREE_CODE_LENGTH (code) * sizeof (char *));\n+      switch (code)\n+\t{\n+\tcase INTEGER_CST:\treturn sizeof (struct tree_int_cst);\n+\tcase REAL_CST:\t\treturn sizeof (struct tree_real_cst);\n+\tcase COMPLEX_CST:\treturn sizeof (struct tree_complex);\n+\tcase VECTOR_CST:\treturn sizeof (struct tree_vector);\n+\tcase STRING_CST:\treturn sizeof (struct tree_string);\n+\tdefault:\n+\t  return (*lang_hooks.tree_size) (code);\n+\t}\n \n     case 'x':  /* something random, like an identifier.  */\n-      {\n-\tsize_t length;\n-\tlength = (sizeof (struct tree_common)\n-\t\t  + TREE_CODE_LENGTH (code) * sizeof (char *));\n-\tif (code == TREE_VEC)\n-\t  length += TREE_VEC_LENGTH (node) * sizeof (char *) - sizeof (char *);\n-\treturn length;\n-      }\n+      switch (code)\n+\t{\n+\tcase IDENTIFIER_NODE:\treturn lang_hooks.identifier_size;\n+\tcase TREE_LIST:\t\treturn sizeof (struct tree_list);\n+\tcase TREE_VEC:\t\treturn (sizeof (struct tree_vec)\n+\t\t\t\t\t+ TREE_VEC_LENGTH(node) * sizeof(char *)\n+\t\t\t\t\t- sizeof (char *));\n+\n+\tcase ERROR_MARK:\n+\tcase PLACEHOLDER_EXPR:\treturn sizeof (struct tree_common);\n+\n+\tdefault:\n+\t  return (*lang_hooks.tree_size) (code);\n+\t}\n \n     default:\n       abort ();\n@@ -4817,7 +4821,7 @@ initializer_zerop (init)\n       {\n \tif (AGGREGATE_TYPE_P (TREE_TYPE (init)))\n \t  {\n-\t    tree aggr_init = TREE_OPERAND (init, 1);\n+\t    tree aggr_init = CONSTRUCTOR_ELTS (init);\n \n \t    while (aggr_init)\n \t      {"}, {"sha": "a8f35ca9da95a264a161a2c832645bb489f28f55", "filename": "gcc/tree.def", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e771d468c7280b95c7dbbafcdd87d69357d80/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=d78e771d468c7280b95c7dbbafcdd87d69357d80", "patch": "@@ -34,9 +34,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    's' for codes for expressions with inherent side effects.\n    'e' for codes for other kinds of expressions.  */\n \n-/* For `r', `e', `<', `1', `2', `s' and `x' nodes,\n-   the 4th element is the number of argument slots to allocate.\n-   This determines the size of the tree node object.  */\n+/* For `r', `e', `<', `1', `2', and `s' nodes, which use struct\n+   tree_exp, the 4th element is the number of argument slots to\n+   allocate.  This determines the size of the tree node object.\n+   Other nodes use different structures, and the size is determined\n+   by the tree_union member structure; the 4th element should be\n+   zero.  Languages that define language-specific 'x' or 'c' codes\n+   must define the tree_size langhook to say how big they are.  */\n \n /* Any erroneous construct is parsed into a node of this type.\n    This type of node is accepted without complaint in all contexts\n@@ -49,17 +53,17 @@ DEFTREECODE (ERROR_MARK, \"error_mark\", 'x', 0)\n    Internally it looks like a STRING_CST node.\n    There is only one IDENTIFIER_NODE ever made for any particular name.\n    Use `get_identifier' to get it (or create it, the first time).  */\n-DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", 'x', ((LANG_HOOKS_IDENTIFIER_SIZE - sizeof (struct tree_common) + sizeof (tree) - 1) / sizeof (tree)))\n+DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", 'x', 0)\n \n /* Has the TREE_VALUE and TREE_PURPOSE fields.  */\n /* These nodes are made into lists by chaining through the\n    TREE_CHAIN field.  The elements of the list live in the\n    TREE_VALUE fields, while TREE_PURPOSE fields are occasionally\n    used as well to get the effect of Lisp association lists.  */\n-DEFTREECODE (TREE_LIST, \"tree_list\", 'x', 2)\n+DEFTREECODE (TREE_LIST, \"tree_list\", 'x', 0)\n \n /* These nodes contain an array of tree nodes.  */\n-DEFTREECODE (TREE_VEC, \"tree_vec\", 'x', 2)\n+DEFTREECODE (TREE_VEC, \"tree_vec\", 'x', 0)\n \n /* A symbol binding block.  These are arranged in a tree,\n    where the BLOCK_SUBBLOCKS field contains a chain of subblocks\n@@ -257,22 +261,20 @@ DEFTREECODE (LANG_TYPE, \"lang_type\", 't', 0)\n    Note: constants of type char in Pascal are INTEGER_CST,\n    and so are pointer constants such as nil in Pascal or NULL in C.\n    `(int *) 1' in C also results in an INTEGER_CST.  */\n-DEFTREECODE (INTEGER_CST, \"integer_cst\", 'c', 2)\n+DEFTREECODE (INTEGER_CST, \"integer_cst\", 'c', 0)\n \n-/* Contents are in TREE_REAL_CST field.  Also there is TREE_CST_RTL.  */\n-DEFTREECODE (REAL_CST, \"real_cst\", 'c', 3)\n+/* Contents are in TREE_REAL_CST field.  */\n+DEFTREECODE (REAL_CST, \"real_cst\", 'c', 0)\n \n /* Contents are in TREE_REALPART and TREE_IMAGPART fields,\n-   whose contents are other constant nodes.\n-   Also there is TREE_CST_RTL.  */\n-DEFTREECODE (COMPLEX_CST, \"complex_cst\", 'c', 3)\n+   whose contents are other constant nodes.  */\n+DEFTREECODE (COMPLEX_CST, \"complex_cst\", 'c', 0)\n \n /* Contents are in TREE_VECTOR_CST_ELTS field.  */\n-DEFTREECODE (VECTOR_CST, \"vector_cst\", 'c', 3)     \n+DEFTREECODE (VECTOR_CST, \"vector_cst\", 'c', 0)     \n \n-/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields.\n-   Also there is TREE_CST_RTL.  */\n-DEFTREECODE (STRING_CST, \"string_cst\", 'c', 3)\n+/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields. */\n+DEFTREECODE (STRING_CST, \"string_cst\", 'c', 0)\n \n /* Declarations.  All references to names are represented as ..._DECL nodes.\n    The decls in one binding context are chained through the TREE_CHAIN field."}]}