{"sha": "14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkYjFkZmNkMThlNGQyNzEyYTA0M2JkY2QzOTc2ZmNmYjA2NDJjMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-10T06:28:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-10T08:26:30Z"}, "message": "PR97359: Do not cache relops in GORI cache.\n\nlogical_stmt_cache::cacheable_p() returns true for relops, but\nlogical_combine (which does the caching) doesn't handle them and ICEs.\nThis patch fixes the inconsistency by returning false for relops.\n\nThis was working before because even though logical_combine doesn't\nhandle relops, statements with only one SSA are handled in cache_stmt,\nwhich seems like the only statement we've ever encountered (even through\na full Fedora build).\n\n\tlhs = s_5 > 999;\n\nHowever, with two SSA operands we ICE because logical_combine doesn't\nhandle them:\n\n\tlhs = s_5 > y_8;\n\nWe can either return false for relops in cacheable_p, or fix\nlogical_combine to handle them.  The original idea was to only cache\nANDs and ORs, so I've done the former to unbreak trunk.\n\nWe can decide later if there was ever any benefit in caching relops.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97359\n\t* gimple-range-gori.cc (logical_stmt_cache::cacheable_p): Only\n\thandle ANDs and ORs.\n\t(gori_compute_cache::cache_stmt): Adjust comment.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr97359.c: New test.", "tree": {"sha": "4024be568c83e5548dce3a3f8481a4822947efad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4024be568c83e5548dce3a3f8481a4822947efad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "986427669a701b0fabbb08275ef5cf56d12f8017", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "patch": "@@ -1161,12 +1161,6 @@ logical_stmt_cache::cacheable_p (gimple *stmt, const irange *lhs_range) const\n     {\n       switch (gimple_expr_code (stmt))\n \t{\n-\tcase LT_EXPR:\n-\tcase LE_EXPR:\n-\tcase GT_EXPR:\n-\tcase GE_EXPR:\n-\tcase EQ_EXPR:\n-\tcase NE_EXPR:\n \tcase TRUTH_AND_EXPR:\n \tcase BIT_AND_EXPR:\n \tcase TRUTH_OR_EXPR:\n@@ -1294,7 +1288,7 @@ gori_compute_cache::cache_stmt (gimple *stmt)\n   tree op2 = gimple_range_operand2 (stmt);\n   int_range_max r_true_side, r_false_side;\n \n-  // LHS = s_5 > 999.\n+  // LHS = s_5 && 999.\n   if (TREE_CODE (op2) == INTEGER_CST)\n     {\n       range_operator *handler = range_op_handler (code, TREE_TYPE (lhs));\n@@ -1305,7 +1299,7 @@ gori_compute_cache::cache_stmt (gimple *stmt)\n       handler->op1_range (r_false_side, type, m_bool_zero, op2_range);\n       m_cache->set_range (lhs, op1, tf_range (r_true_side, r_false_side));\n     }\n-  // LHS = s_5 > b_8.\n+  // LHS = s_5 && b_8.\n   else if (tree cached_name = m_cache->same_cached_name (op1, op2))\n     {\n       tf_range op1_range, op2_range;"}, {"sha": "142542e404ccd11fe378803fdfcf7b99ab15f471", "filename": "gcc/testsuite/gcc.dg/pr97359.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db1dfcd18e4d2712a043bdcd3976fcfb0642c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97359.c?ref=14db1dfcd18e4d2712a043bdcd3976fcfb0642c2", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w\" } */\n+\n+typedef unsigned int uint32_t;\n+int a;\n+void b(uint32_t c) {\n+  uint32_t *d = &c;\n+  for (; a;)\n+    for (;; (*d %= a) / (*d > 1 > (c > 0)) ?: d)\n+      ;\n+}"}]}