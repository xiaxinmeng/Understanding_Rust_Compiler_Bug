{"sha": "f5678792a361c36001740659a98cddf99cca99ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2Nzg3OTJhMzYxYzM2MDAxNzQwNjU5YTk4Y2RkZjk5Y2NhOTllYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-09-17T22:29:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-17T22:29:59Z"}, "message": "mips.c (mips_output_mi_thunk): Use mips_function_ok_for_sibcall and const_call_insn_operand to determine if...\n\ngcc/\n\t* config/mips/mips.c (mips_output_mi_thunk): Use\n\tmips_function_ok_for_sibcall and const_call_insn_operand\n\tto determine if a direct sibcall is allowed.  Use\n\tmips_classify_symbol to determine a global pointer is needed.\n\nFrom-SVN: r128560", "tree": {"sha": "22fa10cbaf20373aeba47966c0954be49ede3469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22fa10cbaf20373aeba47966c0954be49ede3469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5678792a361c36001740659a98cddf99cca99ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5678792a361c36001740659a98cddf99cca99ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5678792a361c36001740659a98cddf99cca99ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5678792a361c36001740659a98cddf99cca99ea/comments", "author": null, "committer": null, "parents": [{"sha": "ec49e31c8f371c8da6ad6aebe3b5fe523b6ea881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec49e31c8f371c8da6ad6aebe3b5fe523b6ea881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec49e31c8f371c8da6ad6aebe3b5fe523b6ea881"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "3c574791cc8472a346ccd9448d530cc998861ce7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5678792a361c36001740659a98cddf99cca99ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5678792a361c36001740659a98cddf99cca99ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5678792a361c36001740659a98cddf99cca99ea", "patch": "@@ -1,3 +1,10 @@\n+2007-09-17  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.c (mips_output_mi_thunk): Use\n+\tmips_function_ok_for_sibcall and const_call_insn_operand\n+\tto determine if a direct sibcall is allowed.  Use\n+\tmips_classify_symbol to determine a global pointer is needed.\n+\n 2007-09-17  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.md (*clear_upper32): Use \"W\" as the memory operand."}, {"sha": "b2855721a6f61671b82f3f63522ce8ba3420f5de", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5678792a361c36001740659a98cddf99cca99ea/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5678792a361c36001740659a98cddf99cca99ea/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f5678792a361c36001740659a98cddf99cca99ea", "patch": "@@ -8872,29 +8872,38 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t      tree function)\n {\n   rtx this, temp1, temp2, insn, fnaddr;\n+  bool use_sibcall_p;\n \n   /* Pretend to be a post-reload pass while generating rtl.  */\n   reload_completed = 1;\n \n   /* Mark the end of the (empty) prologue.  */\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n-  /* Pick a global pointer.  Use a call-clobbered register if\n-     TARGET_CALL_SAVED_GP, so that we can use a sibcall.  */\n-  if (TARGET_USE_GOT)\n-    {\n-      cfun->machine->global_pointer =\n-\tTARGET_CALL_SAVED_GP ? 15 : GLOBAL_POINTER_REGNUM;\n+  /* Determine if we can use a sibcall to call FUNCTION directly.  */\n+  fnaddr = XEXP (DECL_RTL (function), 0);\n+  use_sibcall_p = (mips_function_ok_for_sibcall (function, NULL)\n+\t\t   && const_call_insn_operand (fnaddr, Pmode));\n \n-      SET_REGNO (pic_offset_table_rtx, cfun->machine->global_pointer);\n-    }\n+  /* Determine if we need to load FNADDR from the GOT.  */\n+  if (!use_sibcall_p)\n+    switch (mips_classify_symbol (fnaddr, SYMBOL_CONTEXT_LEA))\n+      {\n+      case SYMBOL_GOT_PAGE_OFST:\n+      case SYMBOL_GOT_DISP:\n+\t/* Pick a global pointer.  Use a call-clobbered register if\n+\t   TARGET_CALL_SAVED_GP.  */\n+\tcfun->machine->global_pointer =\n+\t  TARGET_CALL_SAVED_GP ? 15 : GLOBAL_POINTER_REGNUM;\n+\tSET_REGNO (pic_offset_table_rtx, cfun->machine->global_pointer);\n+\n+\t/* Set up the global pointer for n32 or n64 abicalls.  */\n+\tmips_emit_loadgp ();\n+\tbreak;\n \n-  /* Set up the global pointer for n32 or n64 abicalls.  If\n-     LOADGP_ABSOLUTE then the thunk does not use the gp and there is\n-     no need to load it.*/\n-  if (mips_current_loadgp_style () != LOADGP_ABSOLUTE\n-      || !targetm.binds_local_p (function))\n-    mips_emit_loadgp ();\n+      default:\n+\tbreak;\n+      }\n \n   /* We need two temporary registers in some cases.  */\n   temp1 = gen_rtx_REG (Pmode, 2);\n@@ -8936,9 +8945,12 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Jump to the target function.  Use a sibcall if direct jumps are\n      allowed, otherwise load the address into a register first.  */\n-  fnaddr = XEXP (DECL_RTL (function), 0);\n-  if (TARGET_MIPS16 || TARGET_USE_GOT || SYMBOL_REF_LONG_CALL_P (fnaddr)\n-      || mips_use_mips16_mode_p (function))\n+  if (use_sibcall_p)\n+    {\n+      insn = emit_call_insn (gen_sibcall_internal (fnaddr, const0_rtx));\n+      SIBLING_CALL_P (insn) = 1;\n+    }\n+  else\n     {\n       /* This is messy.  gas treats \"la $25,foo\" as part of a call\n \t sequence and may allow a global \"foo\" to be lazily bound.\n@@ -8962,11 +8974,6 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \tmips_emit_move (gen_rtx_REG (Pmode, PIC_FUNCTION_ADDR_REGNUM), temp1);\n       emit_jump_insn (gen_indirect_jump (temp1));\n     }\n-  else\n-    {\n-      insn = emit_call_insn (gen_sibcall_internal (fnaddr, const0_rtx));\n-      SIBLING_CALL_P (insn) = 1;\n-    }\n \n   /* Run just enough of rest_of_compilation.  This sequence was\n      \"borrowed\" from alpha.c.  */"}]}