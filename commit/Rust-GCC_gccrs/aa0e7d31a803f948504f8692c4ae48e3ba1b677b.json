{"sha": "aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "node_id": "C_kwDOANBUbNoAKGFhMGU3ZDMxYTgwM2Y5NDg1MDRmODY5MmM0YWU0OGUzYmExYjY3N2I", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-10-14T00:07:31Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:34Z"}, "message": "ada: Rework CUDA host-side invocation of device-side elaboration code\n\nWhen the binder is invoked with a \"-d_c\" switch, add an argument to that\nswitch which is the library name on the device side; so \"-d_c\" becomes\n\"-d_c=some_library_name\". This does not effect the case where \"-d_c\" is\nspecified as a switch for compilation (as opposed to binding). Use this\nnew piece of information in the code generated by the binder to invoke\nelaboration code on the device side from the host side.\n\ngcc/ada/\n\n\t* opt.ads: Declare new string pointer variable, CUDA_Device_Library_Name.\n\tModify comments for existing Boolean variable Enable_CUDA_Device_Expansion.\n\t* switch-b.adb: When \"-d_c\" switch is encountered, check that the next\n\tcharacter is an \"'='; use the remaining characters to initialize\n\tOpt.CUDA_Device_Library_Name.\n\t* bindgen.adb: Remove (for now) most support for host-side invocation of\n\tdevice-side finalization. Make use of the new CUDA_Device_Library_Name\n\tin determining the string used to refer (on the host side) to the\n\tdevice-side initialization procedure. Declare the placeholder routine\n\tthat is named in the CUDA_Execute pragma (and the CUDA_Register_Function\n\tcall) as an exported null procedure, rather than as an imported procedure.\n\tIt is not clear whether it is really necessary to specify the link-name\n\tfor this should-never-be-called subprogram on the host side, but for now it\n\tshouldn't hurt to do so.", "tree": {"sha": "7a82b4350c1fb82382de5fe668bf0fdc38c00476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a82b4350c1fb82382de5fe668bf0fdc38c00476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dee088c9db6a420b60379dd576493d12c055ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dee088c9db6a420b60379dd576493d12c055ffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dee088c9db6a420b60379dd576493d12c055ffd"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "b942985b2e8f48e39a178b3a507681a8ad2b7788", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "patch": "@@ -114,27 +114,25 @@ package body Bindgen is\n    --  For CodePeer, introduce a wrapper subprogram which calls the\n    --  user-defined main subprogram.\n \n-   --  Names for local C-String variables\n+   --  Name for local C-String variable\n \n    Adainit_String_Obj_Name  : constant String := \"Adainit_Name_C_String\";\n-   Adafinal_String_Obj_Name : constant String := \"Adafinal_Name_C_String\";\n \n-   --  Names and link_names for CUDA device adainit/adafinal procs.\n+   --  Name and link_name for CUDA device initialization procedure\n \n-   Device_Subp_Name_Prefix : constant String := \"imported_device_\";\n+   Device_Ada_Init_Subp_Name : constant String := \"Device_Initialization\";\n    Device_Link_Name_Prefix : constant String := \"__device_\";\n \n-   function Device_Ada_Final_Link_Name return String is\n-     (Device_Link_Name_Prefix & Ada_Final_Name.all);\n+   function Device_Link_Name (Suffix : String) return String is\n+     (Device_Link_Name_Prefix &\n+       (if CUDA_Device_Library_Name = null\n+        then \"ada\" -- is this an error path?\n+        else CUDA_Device_Library_Name.all) & Suffix);\n \n-   function Device_Ada_Final_Subp_Name return String is\n-     (Device_Subp_Name_Prefix & Ada_Final_Name.all);\n-\n-   function Device_Ada_Init_Link_Name return String is\n-     (Device_Link_Name_Prefix & Ada_Init_Name.all);\n-\n-   function Device_Ada_Init_Subp_Name return String is\n-     (Device_Subp_Name_Prefix & Ada_Init_Name.all);\n+   function Device_Ada_Init_Link_Name return String\n+     is (Device_Link_Name (Suffix => \"init\"));\n+   function Device_Ada_Final_Link_Name return String\n+     is (Device_Link_Name (Suffix => \"final\"));\n \n    ----------------------------------\n    -- Interface_State Pragma Table --\n@@ -523,12 +521,6 @@ package body Bindgen is\n          WBI (\"      System.Standard_Library.Adafinal;\");\n       end if;\n \n-      --  perform device (as opposed to host) finalization\n-      if Enable_CUDA_Expansion then\n-         WBI (\"      pragma CUDA_Execute (\" &\n-                Device_Ada_Final_Subp_Name & \", 1, 1);\");\n-      end if;\n-\n       WBI (\"   end \" & Ada_Final_Name.all & \";\");\n       WBI (\"\");\n    end Gen_Adafinal;\n@@ -1362,17 +1354,17 @@ package body Bindgen is\n       end loop;\n \n       WBI (\"   procedure \" & Device_Ada_Init_Subp_Name & \";\");\n-      WBI (\"   pragma Import (C, \" & Device_Ada_Init_Subp_Name &\n+      WBI (\"   pragma Export (C, \" & Device_Ada_Init_Subp_Name &\n              \", Link_Name => \"\"\" & Device_Ada_Init_Link_Name & \"\"\");\");\n-      WBI (\"   procedure \" & Device_Ada_Final_Subp_Name & \";\");\n-      WBI (\"   pragma Import (C, \" & Device_Ada_Final_Subp_Name &\n-             \", Link_Name => \"\"\" & Device_Ada_Final_Link_Name & \"\"\");\");\n \n-      --  C-string declarations for adainit and adafinal\n+      --  It would be nice to declare a real body that raises P_E, but\n+      --  generating a subprogram body at the right point is harder\n+      --  than generating a null procedure here.\n+      WBI (\"   procedure \" & Device_Ada_Init_Subp_Name & \" is null;\");\n+\n+      --  C-string declaration for adainit\n       WBI (\"   \" & Adainit_String_Obj_Name\n             & \" : Interfaces.C.Strings.Chars_Ptr;\");\n-      WBI (\"   \" & Adafinal_String_Obj_Name\n-            & \" : Interfaces.C.Strings.Chars_Ptr;\");\n       WBI (\"\");\n \n       WBI (\"\");\n@@ -1455,15 +1447,11 @@ package body Bindgen is\n          end;\n       end loop;\n \n-      --  Register device-side Adainit and Adafinal\n+      --  Register device-side Adainit\n       Gen_CUDA_Register_Function_Call\n         (Kernel_Name   => Device_Ada_Init_Link_Name,\n          Kernel_String => Adainit_String_Obj_Name,\n          Kernel_Proc   => Device_Ada_Init_Subp_Name);\n-      Gen_CUDA_Register_Function_Call\n-        (Kernel_Name   => Device_Ada_Final_Link_Name,\n-         Kernel_String => Adafinal_String_Obj_Name,\n-         Kernel_Proc   => Device_Ada_Final_Subp_Name);\n \n       WBI (\"      CUDA_Register_Fat_Binary_End (Fat_Binary_Handle);\");\n \n@@ -2702,7 +2690,6 @@ package body Bindgen is\n       if not Cumulative_Restrictions.Set (No_Finalization) then\n          WBI (\"\");\n          WBI (\"   procedure \" & Ada_Final_Name.all & \";\");\n-\n          if Enable_CUDA_Device_Expansion then\n             WBI (\"   pragma Export (C, \" & Ada_Final_Name.all &\n                    \", Link_Name => \"\"\" & Device_Ada_Final_Link_Name & \"\"\");\");"}, {"sha": "6f3ced295e5ad687eb4618c631db43996521b2f1", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "patch": "@@ -395,6 +395,10 @@ package Opt is\n    --  Set to True (-C switch) to indicate that the compiler will be invoked\n    --  with a mapping file (-gnatem compiler switch).\n \n+   CUDA_Device_Library_Name : String_Ptr := null;\n+   --  GNATBIND\n+   --  Non-null only if Enable_CUDA_Expansion is True.\n+\n    subtype Debug_Level_Value is Nat range 0 .. 3;\n    Debugger_Level : Debug_Level_Value := 0;\n    --  GNAT, GNATBIND\n@@ -549,9 +553,7 @@ package Opt is\n \n    Enable_CUDA_Device_Expansion : Boolean := False;\n    --  GNATBIND\n-   --  Set to True to enable CUDA device (as opposed to host) expansion:\n-   --    - Binder generates elaboration/finalization code that can be\n-   --      invoked from corresponding binder-generated host-side code.\n+   --  Set to True to enable CUDA device (as opposed to host) expansion.\n \n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT"}, {"sha": "7a732ae3122d04561321c24b7dfe2b4efb02499a", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0e7d31a803f948504f8692c4ae48e3ba1b677b/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=aa0e7d31a803f948504f8692c4ae48e3ba1b677b", "patch": "@@ -168,6 +168,15 @@ package body Switch.B is\n                   if Enable_CUDA_Expansion and Enable_CUDA_Device_Expansion\n                   then\n                      Bad_Switch (Switch_Chars);\n+                  elsif C = 'c' then\n+                     --  specify device library name\n+                     if Ptr >= Max or else Switch_Chars (Ptr + 1) /= '=' then\n+                        Bad_Switch (Switch_Chars);\n+                     else\n+                        CUDA_Device_Library_Name :=\n+                           new String'(Switch_Chars (Ptr + 2 .. Max));\n+                        Ptr := Max;\n+                     end if;\n                   end if;\n \n                   Underscore := False;"}]}