{"sha": "c8e4cb8adf68730357888adf186ab2e686a220ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhlNGNiOGFkZjY4NzMwMzU3ODg4YWRmMTg2YWIyZTY4NmEyMjBhZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-13T10:54:05Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-13T11:52:23Z"}, "message": "Use gen_lowpart_if_possible instead of gen_lowpart to avoid ICE.\n\ngcc/ChangeLog:\n\n\tPR bootstrap/102302\n\t* expmed.c (extract_bit_field_using_extv): Use\n\tgen_lowpart_if_possible instead of gen_lowpart to avoid ICE.", "tree": {"sha": "7c39c094e0732e080dc8997b86b0d4ac1b39a449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c39c094e0732e080dc8997b86b0d4ac1b39a449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8e4cb8adf68730357888adf186ab2e686a220ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e4cb8adf68730357888adf186ab2e686a220ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e4cb8adf68730357888adf186ab2e686a220ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e4cb8adf68730357888adf186ab2e686a220ad/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924326b3e0d75dbb246a4fbabfdd8be417788db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924326b3e0d75dbb246a4fbabfdd8be417788db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924326b3e0d75dbb246a4fbabfdd8be417788db8"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "59734d4841cbd2056a7d5bda9134af79c8024c87", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e4cb8adf68730357888adf186ab2e686a220ad/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e4cb8adf68730357888adf186ab2e686a220ad/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c8e4cb8adf68730357888adf186ab2e686a220ad", "patch": "@@ -1571,14 +1571,16 @@ extract_bit_field_using_extv (const extraction_insn *extv, rtx op0,\n \n   if (GET_MODE (target) != ext_mode)\n     {\n+      rtx temp;\n       /* Don't use LHS paradoxical subreg if explicit truncation is needed\n \t between the mode of the extraction (word_mode) and the target\n \t mode.  Instead, create a temporary and use convert_move to set\n \t the target.  */\n       if (REG_P (target)\n-\t  && TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (target), ext_mode))\n+\t  && TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (target), ext_mode)\n+\t  && (temp = gen_lowpart_if_possible (ext_mode, target)))\n \t{\n-\t  target = gen_lowpart (ext_mode, target);\n+\t  target = temp;\n \t  if (partial_subreg_p (GET_MODE (spec_target), ext_mode))\n \t    spec_target_subreg = target;\n \t}"}]}