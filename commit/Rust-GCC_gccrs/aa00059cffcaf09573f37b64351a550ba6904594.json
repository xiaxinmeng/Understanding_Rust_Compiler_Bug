{"sha": "aa00059cffcaf09573f37b64351a550ba6904594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEwMDA1OWNmZmNhZjA5NTczZjM3YjY0MzUxYTU1MGJhNjkwNDU5NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-16T07:45:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-16T07:45:09Z"}, "message": "tree-nested.h (build_addr): Adjust prototype.\n\n2015-10-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-nested.h (build_addr): Adjust prototype.\n\t* tree-nested.c (build_addr): Remove context argument and use\n\tmark_addressable.\n\t(get_static_chain): Adjust calls to build_addr.\n\t(convert_nl_goto_reference): Likewise.\n\t(convert_tramp_reference_op): Likewise.\n\t(finalize_nesting_tree_1): Likewise.\n\t* value-prof.c (gimple_ic): Likewise.\n\t* gimple-low.c (lower_builtin_setjmp): Likewise.\n\t* tree-parloops.c (take_address_of): Likewise.\n\t(create_call_for_reduction_1): Likewise.\n\t* tree-profile.c (gimple_gen_interval_profiler): Likewise.\n\t(gimple_gen_ic_func_profiler): Likewise.\n\n\tfortran/\n\t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Adjust\n\tcalls to build_addr.\n\t(gfc_conv_intrinsic_mod): Likewise.\n\t(gfc_conv_intrinsic_ctime): Likewise.\n\t(gfc_conv_intrinsic_fdate): Likewise.\n\t(gfc_conv_intrinsic_ttynam): Likewise.\n\t(gfc_conv_intrinsic_minmax_char): Likewise.\n\t(gfc_conv_intrinsic_index_scan_verify): Likewise.\n\t(gfc_conv_intrinsic_trim): Likewise.\n\nFrom-SVN: r228862", "tree": {"sha": "0dc728f8912f6ea1cdde81ca88179a73acf9bb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc728f8912f6ea1cdde81ca88179a73acf9bb5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa00059cffcaf09573f37b64351a550ba6904594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa00059cffcaf09573f37b64351a550ba6904594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa00059cffcaf09573f37b64351a550ba6904594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa00059cffcaf09573f37b64351a550ba6904594/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4856a1f0a1b91d2917ab09b08c55ff4fbf66f94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4856a1f0a1b91d2917ab09b08c55ff4fbf66f94e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4856a1f0a1b91d2917ab09b08c55ff4fbf66f94e"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "307f41e2b4da5724dad78bd64f69a08cc3e758c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -1,3 +1,19 @@\n+2015-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-nested.h (build_addr): Adjust prototype.\n+\t* tree-nested.c (build_addr): Remove context argument and use\n+\tmark_addressable.\n+\t(get_static_chain): Adjust calls to build_addr.\n+\t(convert_nl_goto_reference): Likewise.\n+\t(convert_tramp_reference_op): Likewise.\n+\t(finalize_nesting_tree_1): Likewise.\n+\t* value-prof.c (gimple_ic): Likewise.\n+\t* gimple-low.c (lower_builtin_setjmp): Likewise.\n+\t* tree-parloops.c (take_address_of): Likewise.\n+\t(create_call_for_reduction_1): Likewise.\n+\t* tree-profile.c (gimple_gen_interval_profiler): Likewise.\n+\t(gimple_gen_ic_func_profiler): Likewise.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-icf-gimple.c (func_checker::compare_operand): Compare only"}, {"sha": "6a89d33248b092aaf307087e16575f5d099e7ce7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -1,3 +1,15 @@\n+2015-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Adjust\n+\tcalls to build_addr.\n+\t(gfc_conv_intrinsic_mod): Likewise.\n+\t(gfc_conv_intrinsic_ctime): Likewise.\n+\t(gfc_conv_intrinsic_fdate): Likewise.\n+\t(gfc_conv_intrinsic_ttynam): Likewise.\n+\t(gfc_conv_intrinsic_minmax_char): Likewise.\n+\t(gfc_conv_intrinsic_index_scan_verify): Likewise.\n+\t(gfc_conv_intrinsic_trim): Likewise.\n+\n 2015-10-14  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* parse.c (decode_statement): Initialize M to MATCH_NO."}, {"sha": "15ef5608e95630a05560995ba4a1e38729414fdc", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -873,7 +873,7 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n   fndecl = gfc_get_intrinsic_lib_fndecl (m, expr);\n   rettype = TREE_TYPE (TREE_TYPE (fndecl));\n \n-  fndecl = build_addr (fndecl, current_function_decl);\n+  fndecl = build_addr (fndecl);\n   se->expr = build_call_array_loc (input_location, rettype, fndecl, num_args, args);\n }\n \n@@ -2294,7 +2294,7 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n       /* The builtin should always be available.  */\n       gcc_assert (fmod != NULL_TREE);\n \n-      tmp = build_addr (fmod, current_function_decl);\n+      tmp = build_addr (fmod);\n       se->expr = build_call_array_loc (input_location,\n \t\t\t\t       TREE_TYPE (TREE_TYPE (fmod)),\n                                        tmp, 2, args);\n@@ -2600,7 +2600,7 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   args[0] = gfc_build_addr_expr (NULL_TREE, var);\n   args[1] = gfc_build_addr_expr (NULL_TREE, len);\n \n-  fndecl = build_addr (gfor_fndecl_ctime, current_function_decl);\n+  fndecl = build_addr (gfor_fndecl_ctime);\n   tmp = build_call_array_loc (input_location,\n \t\t\t  TREE_TYPE (TREE_TYPE (gfor_fndecl_ctime)),\n \t\t\t  fndecl, num_args, args);\n@@ -2639,7 +2639,7 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   args[0] = gfc_build_addr_expr (NULL_TREE, var);\n   args[1] = gfc_build_addr_expr (NULL_TREE, len);\n \n-  fndecl = build_addr (gfor_fndecl_fdate, current_function_decl);\n+  fndecl = build_addr (gfor_fndecl_fdate);\n   tmp = build_call_array_loc (input_location,\n \t\t\t  TREE_TYPE (TREE_TYPE (gfor_fndecl_fdate)),\n \t\t\t  fndecl, num_args, args);\n@@ -2849,7 +2849,7 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   args[0] = gfc_build_addr_expr (NULL_TREE, var);\n   args[1] = gfc_build_addr_expr (NULL_TREE, len);\n \n-  fndecl = build_addr (gfor_fndecl_ttynam, current_function_decl);\n+  fndecl = build_addr (gfor_fndecl_ttynam);\n   tmp = build_call_array_loc (input_location,\n \t\t\t  TREE_TYPE (TREE_TYPE (gfor_fndecl_ttynam)),\n \t\t\t  fndecl, num_args, args);\n@@ -2992,7 +2992,7 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n     gcc_unreachable ();\n \n   /* Make the function call.  */\n-  fndecl = build_addr (function, current_function_decl);\n+  fndecl = build_addr (function);\n   tmp = build_call_array_loc (input_location,\n \t\t\t  TREE_TYPE (TREE_TYPE (function)), fndecl,\n \t\t\t  nargs + 4, args);\n@@ -5350,7 +5350,7 @@ gfc_conv_intrinsic_index_scan_verify (gfc_se * se, gfc_expr * expr,\n   else\n     args[4] = convert (logical4_type_node, args[4]);\n \n-  fndecl = build_addr (function, current_function_decl);\n+  fndecl = build_addr (function);\n   se->expr = build_call_array_loc (input_location,\n \t\t\t       TREE_TYPE (TREE_TYPE (function)), fndecl,\n \t\t\t       5, args);\n@@ -6936,7 +6936,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   else\n     gcc_unreachable ();\n \n-  fndecl = build_addr (function, current_function_decl);\n+  fndecl = build_addr (function);\n   tmp = build_call_array_loc (input_location,\n \t\t\t  TREE_TYPE (TREE_TYPE (function)), fndecl,\n \t\t\t  num_args, args);"}, {"sha": "5186ad3b62e901215ffbeb0b605e8bf44396949f", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -751,7 +751,7 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   dest = gimple_call_lhs (stmt);\n \n   /* Build '__builtin_setjmp_setup (BUF, NEXT_LABEL)' and insert.  */\n-  arg = build_addr (next_label, current_function_decl);\n+  arg = build_addr (next_label);\n   t = builtin_decl_implicit (BUILT_IN_SETJMP_SETUP);\n   g = gimple_build_call (t, 2, gimple_call_arg (stmt, 0), arg);\n   gimple_set_location (g, loc);\n@@ -776,7 +776,7 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \n   /* Build '__builtin_setjmp_receiver (NEXT_LABEL)' and insert.  */\n-  arg = build_addr (next_label, current_function_decl);\n+  arg = build_addr (next_label);\n   t = builtin_decl_implicit (BUILT_IN_SETJMP_RECEIVER);\n   g = gimple_build_call (t, 1, arg);\n   gimple_set_location (g, loc);"}, {"sha": "c04c42956cabf8d8e8a593e92c969e93ee20004a", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -180,30 +180,10 @@ create_tmp_var_for (struct nesting_info *info, tree type, const char *prefix)\n    Mark it for addressability as necessary.  */\n \n tree\n-build_addr (tree exp, tree context)\n+build_addr (tree exp)\n {\n-  tree base = exp;\n-  tree save_context;\n-  tree retval;\n-\n-  while (handled_component_p (base))\n-    base = TREE_OPERAND (base, 0);\n-\n-  if (DECL_P (base))\n-    TREE_ADDRESSABLE (base) = 1;\n-\n-  /* Building the ADDR_EXPR will compute a set of properties for\n-     that ADDR_EXPR.  Those properties are unfortunately context\n-     specific, i.e., they are dependent on CURRENT_FUNCTION_DECL.\n-\n-     Temporarily set CURRENT_FUNCTION_DECL to the desired context,\n-     build the ADDR_EXPR, then restore CURRENT_FUNCTION_DECL.  That\n-     way the properties are for the ADDR_EXPR are computed properly.  */\n-  save_context = current_function_decl;\n-  current_function_decl = context;\n-  retval = build_fold_addr_expr (exp);\n-  current_function_decl = save_context;\n-  return retval;\n+  mark_addressable (exp);\n+  return build_fold_addr_expr (exp);\n }\n \n /* Insert FIELD into TYPE, sorted by alignment requirements.  */\n@@ -766,7 +746,7 @@ get_static_chain (struct nesting_info *info, tree target_context,\n \n   if (info->context == target_context)\n     {\n-      x = build_addr (info->frame_decl, target_context);\n+      x = build_addr (info->frame_decl);\n       info->static_chain_added |= 1;\n     }\n   else\n@@ -2162,10 +2142,10 @@ convert_nl_goto_reference (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n   /* Build: __builtin_nl_goto(new_label, &chain->nl_goto_field).  */\n   field = get_nl_goto_field (i);\n   x = get_frame_field (info, target_context, field, gsi);\n-  x = build_addr (x, target_context);\n+  x = build_addr (x);\n   x = gsi_gimplify_val (info, x, gsi);\n   call = gimple_build_call (builtin_decl_implicit (BUILT_IN_NONLOCAL_GOTO),\n-\t\t\t    2, build_addr (new_label, target_context), x);\n+\t\t\t    2, build_addr (new_label), x);\n   gsi_replace (gsi, call, false);\n \n   /* We have handled all of STMT's operands, no need to keep going.  */\n@@ -2271,7 +2251,7 @@ convert_tramp_reference_op (tree *tp, int *walk_subtrees, void *data)\n \n       /* Compute the address of the field holding the trampoline.  */\n       x = get_frame_field (info, target_context, x, &wi->gsi);\n-      x = build_addr (x, target_context);\n+      x = build_addr (x);\n       x = gsi_gimplify_val (info, x, &wi->gsi);\n \n       /* Do machine-specific ugliness.  Normally this will involve\n@@ -2809,7 +2789,7 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \t    continue;\n \n \t  if (use_pointer_in_frame (p))\n-\t    x = build_addr (p, context);\n+\t    x = build_addr (p);\n \t  else\n \t    x = p;\n \n@@ -2852,13 +2832,13 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \t    continue;\n \n \t  gcc_assert (DECL_STATIC_CHAIN (i->context));\n-\t  arg3 = build_addr (root->frame_decl, context);\n+\t  arg3 = build_addr (root->frame_decl);\n \n-\t  arg2 = build_addr (i->context, context);\n+\t  arg2 = build_addr (i->context);\n \n \t  x = build3 (COMPONENT_REF, TREE_TYPE (field),\n \t\t      root->frame_decl, field, NULL_TREE);\n-\t  arg1 = build_addr (x, context);\n+\t  arg1 = build_addr (x);\n \n \t  x = builtin_decl_implicit (BUILT_IN_INIT_TRAMPOLINE);\n \t  stmt = gimple_build_call (x, 3, arg1, arg2, arg3);"}, {"sha": "a9d4481401a551bc777c6853d636b39543746d7d", "filename": "gcc/tree-nested.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-nested.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-nested.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.h?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_NESTED_H\n #define GCC_TREE_NESTED_H\n \n-extern tree build_addr (tree, tree);\n+extern tree build_addr (tree);\n extern void insert_field_into_struct (tree, tree);\n extern void lower_nested_functions (tree);\n "}, {"sha": "6781af45fcfe50ca796267544bc07a80a9f2b6e4", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -540,7 +540,7 @@ take_address_of (tree obj, tree type, edge entry,\n   if (gsi == NULL)\n     return build_fold_addr_expr_with_type (obj, type);\n \n-  name = force_gimple_operand (build_addr (obj, current_function_decl),\n+  name = force_gimple_operand (build_addr (obj),\n \t\t\t       &stmts, true, NULL_TREE);\n   if (!gimple_seq_empty_p (stmts))\n     gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n@@ -1094,7 +1094,7 @@ create_call_for_reduction_1 (reduction_info **slot, struct clsn_data *clsn_data)\n   load_struct = build_simple_mem_ref (clsn_data->load);\n   t = build3 (COMPONENT_REF, type, load_struct, reduc->field, NULL_TREE);\n \n-  addr = build_addr (t, current_function_decl);\n+  addr = build_addr (t);\n \n   /* Create phi node.  */\n   bb = clsn_data->load_bb;"}, {"sha": "0d33c879943e4c5296f83da75b69e544fd4fc948", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -296,7 +296,7 @@ gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base\n \t\t\t\t   value->hdata.intvl.steps);\n \n   ref_ptr = force_gimple_operand_gsi (&gsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+\t\t\t\t      build_addr (ref),\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_interval_profiler_fn, 4,\n@@ -415,8 +415,7 @@ gimple_gen_ic_func_profiler (void)\n \t\t\t\t\t (ENTRY_BLOCK_PTR_FOR_FN (cfun))));\n \n   cur_func = force_gimple_operand_gsi (&gsi,\n-\t\t\t\t       build_addr (current_function_decl,\n-\t\t\t\t\t\t   current_function_decl),\n+\t\t\t\t       build_addr (current_function_decl),\n \t\t\t\t       true, NULL_TREE,\n \t\t\t\t       true, GSI_SAME_STMT);\n   tree_uid = build_int_cst"}, {"sha": "19e288f483b44bf9b72d088cad65075324df20da", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa00059cffcaf09573f37b64351a550ba6904594/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=aa00059cffcaf09573f37b64351a550ba6904594", "patch": "@@ -1376,8 +1376,7 @@ gimple_ic (gcall *icall_stmt, struct cgraph_node *direct_call,\n   load_stmt = gimple_build_assign (tmp0, tmp);\n   gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n \n-  tmp = fold_convert (optype, build_addr (direct_call->decl,\n-\t\t\t\t\t  current_function_decl));\n+  tmp = fold_convert (optype, build_addr (direct_call->decl));\n   load_stmt = gimple_build_assign (tmp1, tmp);\n   gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n "}]}