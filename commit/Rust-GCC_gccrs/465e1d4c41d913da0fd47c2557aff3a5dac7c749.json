{"sha": "465e1d4c41d913da0fd47c2557aff3a5dac7c749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY1ZTFkNGM0MWQ5MTNkYTBmZDQ3YzI1NTdhZmYzYTVkYWM3Yzc0OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-03-03T00:46:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-03-03T00:46:31Z"}, "message": "coverage.c (coverage_counter_ref): Set MEM_NOTRAP_P.\n\n        * coverage.c (coverage_counter_ref): Set MEM_NOTRAP_P.\n        * optabs.c (prepare_cmp_insn): Force trapping memories to registers\n        before the compare, if flag_non_call_exceptions.\n        * g++.dg/other/profile1.C: New.\n\nFrom-SVN: r78806", "tree": {"sha": "9cd7068f6100d96ff5985e0db5be17b96d0a61e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd7068f6100d96ff5985e0db5be17b96d0a61e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/465e1d4c41d913da0fd47c2557aff3a5dac7c749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465e1d4c41d913da0fd47c2557aff3a5dac7c749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465e1d4c41d913da0fd47c2557aff3a5dac7c749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465e1d4c41d913da0fd47c2557aff3a5dac7c749/comments", "author": null, "committer": null, "parents": [{"sha": "27ab3e91289ff7946c6a477de84bddb707d3f74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ab3e91289ff7946c6a477de84bddb707d3f74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ab3e91289ff7946c6a477de84bddb707d3f74d"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "bc92460830bfdf24ba82ae03da9482703b1a821e", "filename": "gcc/testsuite/g++.dg/other/profile1.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465e1d4c41d913da0fd47c2557aff3a5dac7c749/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fprofile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465e1d4c41d913da0fd47c2557aff3a5dac7c749/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fprofile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fprofile1.C?ref=465e1d4c41d913da0fd47c2557aff3a5dac7c749", "patch": "@@ -0,0 +1,51 @@\n+// PR 11767\n+// { dg-do run }\n+// { dg-options \"-fnon-call-exceptions -fprofile-arcs\" }\n+\n+#include <string>\n+\n+typedef unsigned long ACE_UINT32;\n+extern \"C\" void abort();\n+\n+static ACE_UINT32 const msc_maxCurrencyID = 9999;\n+\n+class ResourceBalanceType2\n+{\n+  public:\n+   explicit ResourceBalanceType2(\n+      ACE_UINT32 resourceBalanceTypeID,\n+      ACE_UINT32 isoValue,\n+      const std::string& rc_shortName,\n+      const std::string& rc_symbol\n+    );\n+  public:\n+    const ACE_UINT32 mc_resBalTypeID;\n+    const ACE_UINT32 mc_isoValue;\n+    const std::string mc_shortName;\n+    const std::string mc_symbol;\n+};\n+\n+void f(){}\n+\n+ResourceBalanceType2::ResourceBalanceType2(\n+    ACE_UINT32 resourceBalanceTypeID,\n+    ACE_UINT32 isoValue,\n+    const std::string& rc_shortName,\n+    const std::string& rc_symbol)\n+  : mc_resBalTypeID(resourceBalanceTypeID),\n+    mc_isoValue(isoValue),\n+    mc_shortName(rc_shortName),\n+    mc_symbol(rc_symbol)\n+{\n+  bool isGreater = (mc_isoValue > msc_maxCurrencyID);\n+  f();\n+  bool temp = mc_isoValue > msc_maxCurrencyID;\n+  if (!isGreater) abort();\n+  if (!temp) abort();\n+}\n+\n+int main (int argc, char * argv[])\n+{\n+  ACE_UINT32 const mc_isoValue = 10000;\n+  ResourceBalanceType2 rbResourceBalanceType2(3, mc_isoValue, \"ATM\", \"M\");\n+}"}]}