{"sha": "e4521d118a44d6e3b07612ac3fa9fe93eea17403", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1MjFkMTE4YTQ0ZDZlM2IwNzYxMmFjM2ZhOWZlOTNlZWExNzQwMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-02-12T18:35:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-02-12T18:35:05Z"}, "message": "re PR c++/35144 (ICE in generate_element_copy)\n\n\tPR c++/35144\n\t* tree-sra.c (sra_build_assignment): fold_convert SRC if copying\n\tnon-compatible pointers.\n\t(generate_element_copy): If SRC and DST are RECORD_TYPEs with\n\tdifferent FIELD_DECLs, try harder by comparing field offsets, sizes\n\tand types.\n\n\t* g++.dg/tree-ssa/pr35144.C: New test.\n\nFrom-SVN: r132264", "tree": {"sha": "0c5b420a4940a7a869b6ac259ffcc50432cdc046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c5b420a4940a7a869b6ac259ffcc50432cdc046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4521d118a44d6e3b07612ac3fa9fe93eea17403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4521d118a44d6e3b07612ac3fa9fe93eea17403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4521d118a44d6e3b07612ac3fa9fe93eea17403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4521d118a44d6e3b07612ac3fa9fe93eea17403/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7b8033f3e4f59d5ff54ab68fe5667467a52a273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b8033f3e4f59d5ff54ab68fe5667467a52a273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b8033f3e4f59d5ff54ab68fe5667467a52a273"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "8eb01b693fbaa68b18280808383a7665165c5b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4521d118a44d6e3b07612ac3fa9fe93eea17403", "patch": "@@ -1,5 +1,12 @@\n 2008-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/35144\n+\t* tree-sra.c (sra_build_assignment): fold_convert SRC if copying\n+\tnon-compatible pointers.\n+\t(generate_element_copy): If SRC and DST are RECORD_TYPEs with\n+\tdifferent FIELD_DECLs, try harder by comparing field offsets, sizes\n+\tand types.\n+\n \tPR inline-asm/35160\n \t* function.c (match_asm_constraints_1): Don't replace the same input\n \tmultiple times."}, {"sha": "f8d824d177bbe051bcb36f4964adcb8fd6db1a46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4521d118a44d6e3b07612ac3fa9fe93eea17403", "patch": "@@ -1,5 +1,8 @@\n 2008-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/35144\n+\t* g++.dg/tree-ssa/pr35144.C: New test.\n+\n \tPR inline-asm/35160\n \t* gcc.target/i386/pr35160.c: New test.\n "}, {"sha": "f0bb7bb6363b68534639d7612222d2ea267d3d0e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr35144.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr35144.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr35144.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr35144.C?ref=e4521d118a44d6e3b07612ac3fa9fe93eea17403", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/35144\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct A\n+{\n+  int baz ();\n+};\n+\n+typedef int (A::*P) ();\n+\n+struct B\n+{\n+  B ();\n+  int foo (P x, int y = 0);\n+};\n+\n+struct C\n+{\n+  typedef int (B::*Q) (P, int);\n+  void bar (Q x) { c = x; }\n+  Q c;\n+};\n+\n+extern C c;\n+\n+B::B ()\n+{\n+ c.bar ((C::Q) &B::foo);\n+}"}, {"sha": "26f1af4196a00729f0f72addb7b04bb667ef91c8", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4521d118a44d6e3b07612ac3fa9fe93eea17403/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=e4521d118a44d6e3b07612ac3fa9fe93eea17403", "patch": "@@ -1,7 +1,7 @@\n /* Scalar Replacement of Aggregates (SRA) converts some structure\n    references into scalar references, exposing them to the scalar\n    optimizers.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n      Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -2270,7 +2270,13 @@ sra_build_assignment (tree dst, tree src)\n      Since such accesses under different types require compatibility\n      anyway, there's little point in making tests and/or adding\n      conversions to ensure the types of src and dst are the same.\n-     So we just assume type differences at this point are ok.  */\n+     So we just assume type differences at this point are ok.\n+     The only exception we make here are pointer types, which can be different\n+     in e.g. structurally equal, but non-identical RECORD_TYPEs.  */\n+  if (POINTER_TYPE_P (TREE_TYPE (dst))\n+      && !useless_type_conversion_p (TREE_TYPE (dst), TREE_TYPE (src)))\n+    src = fold_convert (TREE_TYPE (dst), src);\n+\n   return build_gimple_modify_stmt (dst, src);\n }\n \n@@ -2600,7 +2606,33 @@ generate_element_copy (struct sra_elt *dst, struct sra_elt *src, tree *list_p)\n \n \t  continue;\n \t}\n-      gcc_assert (sc);\n+\n+      /* If DST and SRC are structs with the same elements, but do not have\n+\t the same TYPE_MAIN_VARIANT, then lookup of DST FIELD_DECL in SRC\n+\t will fail.  Try harder by finding the corresponding FIELD_DECL\n+\t in SRC.  */\n+      if (!sc)\n+\t{\n+\t  tree f;\n+\n+\t  gcc_assert (useless_type_conversion_p (dst->type, src->type));\n+\t  gcc_assert (TREE_CODE (dc->element) == FIELD_DECL);\n+\t  for (f = TYPE_FIELDS (src->type); f ; f = TREE_CHAIN (f))\n+\t    if (simple_cst_equal (DECL_FIELD_OFFSET (f),\n+\t\t\t\t  DECL_FIELD_OFFSET (dc->element)) > 0\n+\t\t&& simple_cst_equal (DECL_FIELD_BIT_OFFSET (f),\n+\t\t\t\t     DECL_FIELD_BIT_OFFSET (dc->element)) > 0\n+\t\t&& simple_cst_equal (DECL_SIZE (f),\n+\t\t\t\t     DECL_SIZE (dc->element)) > 0\n+\t\t&& (useless_type_conversion_p (TREE_TYPE (dc->element),\n+\t\t\t\t\t       TREE_TYPE (f))\n+\t\t    || (POINTER_TYPE_P (TREE_TYPE (dc->element))\n+\t\t\t&& POINTER_TYPE_P (TREE_TYPE (f)))))\n+\t      break;\n+\t  gcc_assert (f != NULL_TREE);\n+\t  sc = lookup_element (src, f, NULL, NO_INSERT);\n+\t}\n+\n       generate_element_copy (dc, sc, list_p);\n     }\n "}]}