{"sha": "e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhMWU2YTQ0MWY5Y2VkOTQxMjYwOWNkNGQ4YWU4ZWRlNTI2MjhhMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-19T12:05:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-19T12:05:20Z"}, "message": "Introduce PROB_UNINITIALIZED constant and use it in predict.def.\n\n2018-01-19  Martin Liska  <mliska@suse.cz>\n\n\t* predict.c (predict_insn_def): Add new assert.\n\t(struct branch_predictor): Change type to signed integer.\n\t(test_prediction_value_range): Amend test to cover\n\tPROB_UNINITIALIZED.\n\t* predict.def (PRED_LOOP_ITERATIONS): Use the new constant.\n\t(PRED_LOOP_ITERATIONS_GUESSED): Likewise.\n\t(PRED_LOOP_ITERATIONS_MAX): Likewise.\n\t(PRED_LOOP_IV_COMPARE): Likewise.\n\t* predict.h (PROB_UNINITIALIZED): Define new constant.\n\nFrom-SVN: r256887", "tree": {"sha": "4b5b32f73bb7f7d32c6c5d3c9876f543a772cdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b5b32f73bb7f7d32c6c5d3c9876f543a772cdf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1b9a5724b8a05d2d2d51b3e5d13cc785326c74f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b9a5724b8a05d2d2d51b3e5d13cc785326c74f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b9a5724b8a05d2d2d51b3e5d13cc785326c74f"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "38c85feb83e6a9c4a21aadbb97a0274313bf561b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "patch": "@@ -1,3 +1,15 @@\n+2018-01-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (predict_insn_def): Add new assert.\n+\t(struct branch_predictor): Change type to signed integer.\n+\t(test_prediction_value_range): Amend test to cover\n+\tPROB_UNINITIALIZED.\n+\t* predict.def (PRED_LOOP_ITERATIONS): Use the new constant.\n+\t(PRED_LOOP_ITERATIONS_GUESSED): Likewise.\n+\t(PRED_LOOP_ITERATIONS_MAX): Likewise.\n+\t(PRED_LOOP_IV_COMPARE): Likewise.\n+\t* predict.h (PROB_UNINITIALIZED): Define new constant.\n+\n 2018-01-19  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (dump_prediction): Add new format for"}, {"sha": "340c76674344b663a63f10186d9f7ba28795dbb9", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "patch": "@@ -545,6 +545,7 @@ predict_insn_def (rtx_insn *insn, enum br_predictor predictor,\n \t\t  enum prediction taken)\n {\n    int probability = predictor_info[(int) predictor].hitrate;\n+   gcc_assert (probability != PROB_UNINITIALIZED);\n \n    if (taken != TAKEN)\n      probability = REG_BR_PROB_BASE - probability;\n@@ -4196,7 +4197,7 @@ namespace selftest {\n struct branch_predictor\n {\n   const char *name;\n-  unsigned probability;\n+  int probability;\n };\n \n #define DEF_PREDICTOR(ENUM, NAME, HITRATE, FLAGS) { NAME, HITRATE },\n@@ -4211,6 +4212,9 @@ test_prediction_value_range ()\n \n   for (unsigned i = 0; predictors[i].name != NULL; i++)\n     {\n+      if (predictors[i].probability == PROB_UNINITIALIZED)\n+\tcontinue;\n+\n       unsigned p = 100 * predictors[i].probability / REG_BR_PROB_BASE;\n       ASSERT_TRUE (p > 50 && p <= 100);\n     }"}, {"sha": "390b9a35fa7db4636bfc5da30fa37835039fa9dd", "filename": "gcc/predict.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "patch": "@@ -54,7 +54,7 @@ DEF_PREDICTOR (PRED_UNCONDITIONAL, \"unconditional jump\", PROB_ALWAYS,\n /* Use number of loop iterations determined by # of iterations\n    analysis to set probability.  We don't want to use Dempster-Shaffer\n    theory here, as the predictions is exact.  */\n-DEF_PREDICTOR (PRED_LOOP_ITERATIONS, \"loop iterations\", PROB_ALWAYS,\n+DEF_PREDICTOR (PRED_LOOP_ITERATIONS, \"loop iterations\", PROB_UNINITIALIZED,\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Assume that any given atomic operation has low contention,\n@@ -71,11 +71,11 @@ DEF_PREDICTOR (PRED_BUILTIN_EXPECT, \"__builtin_expect\", PROB_VERY_LIKELY,\n \n /* Use number of loop iterations guessed by the contents of the loop.  */\n DEF_PREDICTOR (PRED_LOOP_ITERATIONS_GUESSED, \"guessed loop iterations\",\n-\t       PROB_ALWAYS, PRED_FLAG_FIRST_MATCH)\n+\t       PROB_UNINITIALIZED, PRED_FLAG_FIRST_MATCH)\n \n /* Use number of loop iterations guessed by the contents of the loop.  */\n DEF_PREDICTOR (PRED_LOOP_ITERATIONS_MAX, \"guessed loop iterations\",\n-\t       PROB_ALWAYS, PRED_FLAG_FIRST_MATCH)\n+\t       PROB_UNINITIALIZED, PRED_FLAG_FIRST_MATCH)\n \n /* Branch containing goto is probably not taken.  */\n DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (67), 0)\n@@ -151,7 +151,7 @@ DEF_PREDICTOR (PRED_LOOP_IV_COMPARE_GUESS, \"guess loop iv compare\",\n \n /* Use number of loop iterations determined by # of iterations analysis\n    to set probability of branches that compares IV to loop bound variable.  */\n-DEF_PREDICTOR (PRED_LOOP_IV_COMPARE, \"loop iv compare\", PROB_VERY_LIKELY,\n+DEF_PREDICTOR (PRED_LOOP_IV_COMPARE, \"loop iv compare\", PROB_UNINITIALIZED,\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* In the following code"}, {"sha": "e4d1da090cada6742f5c193c4a91fd0ce13cb527", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #define PROB_ALWAYS\t\t(REG_BR_PROB_BASE)\n #define PROB_UNLIKELY           (REG_BR_PROB_BASE / 5 - 1)\n #define PROB_LIKELY             (REG_BR_PROB_BASE - PROB_UNLIKELY)\n+#define PROB_UNINITIALIZED      (-1)\n \n #define DEF_PREDICTOR(ENUM, NAME, HITRATE, FLAGS) ENUM,\n enum br_predictor"}]}