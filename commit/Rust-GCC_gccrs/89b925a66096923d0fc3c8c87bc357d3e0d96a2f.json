{"sha": "89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliOTI1YTY2MDk2OTIzZDBmYzNjOGM4N2JjMzU3ZDNlMGQ5NmEyZg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-22T08:01:58Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-22T08:01:58Z"}, "message": "Remove unused functions from sparc backend.\n\n\t* config/sparc/sparc.c (short_branch, reg_unused_after): Delete.\n\t* config/sparc/sparc-protos.h (short_branch, reg_unused_after):\n\tGet rid of declarations.\n\nFrom-SVN: r180325", "tree": {"sha": "695eeaf820a65c2ac14c7859b05133ff6bfc63d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/695eeaf820a65c2ac14c7859b05133ff6bfc63d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0237267ba8adbb286e588484a41d2816f61a04c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0237267ba8adbb286e588484a41d2816f61a04c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0237267ba8adbb286e588484a41d2816f61a04c"}], "stats": {"total": 51, "additions": 4, "deletions": 47}, "files": [{"sha": "269c1cd26611e35fb38b429de46088ad0b95439d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "patch": "@@ -10,6 +10,10 @@\n \t* config/sparc/sparc.c (struct processor_costs): To here.\n \t(sparc_costs): Mark static.\n \n+\t* config/sparc/sparc.c (short_branch, reg_unused_after): Delete.\n+\t* config/sparc/sparc-protos.h (short_branch, reg_unused_after):\n+\tGet rid of declarations.\n+\n 2011-10-21  Paul Brook  <paul@codesourcery.com>\n \n \t* config/c6x/c6x.c (c6x_asm_emit_except_personality,"}, {"sha": "289053264dd0469c083e953ed4a68875dedd9d59", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "patch": "@@ -43,7 +43,6 @@ extern void sparc_expand_epilogue (bool);\n extern void sparc_flat_expand_epilogue (bool);\n extern bool sparc_can_use_return_insn_p (void);\n extern int check_pic (int);\n-extern int short_branch (int, int);\n extern void sparc_profile_hook (int);\n extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n@@ -95,7 +94,6 @@ extern int fp_mov_p (rtx);\n extern int fp_high_losum_p (rtx);\n extern int mem_min_alignment (rtx, int);\n extern int pic_address_needs_scratch (rtx);\n-extern int reg_unused_after (rtx, rtx);\n extern int register_ok_for_ldd (rtx);\n extern int memory_ok_for_ldd (rtx);\n extern int registers_ok_for_ldd_peep (rtx, rtx);"}, {"sha": "ba88315515dde8ae36636f470dc4fc31c27173b3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b925a66096923d0fc3c8c87bc357d3e0d96a2f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=89b925a66096923d0fc3c8c87bc357d3e0d96a2f", "patch": "@@ -3176,51 +3176,6 @@ eligible_for_sibcall_delay (rtx trial)\n \n   return eligible_for_restore_insn (trial, false);\n }\n-\n-int\n-short_branch (int uid1, int uid2)\n-{\n-  int delta = INSN_ADDRESSES (uid1) - INSN_ADDRESSES (uid2);\n-\n-  /* Leave a few words of \"slop\".  */\n-  if (delta >= -1023 && delta <= 1022)\n-    return 1;\n-\n-  return 0;\n-}\n-\n-/* Return nonzero if REG is not used after INSN.\n-   We assume REG is a reload reg, and therefore does\n-   not live past labels or calls or jumps.  */\n-int\n-reg_unused_after (rtx reg, rtx insn)\n-{\n-  enum rtx_code code, prev_code = UNKNOWN;\n-\n-  while ((insn = NEXT_INSN (insn)))\n-    {\n-      if (prev_code == CALL_INSN && call_used_regs[REGNO (reg)])\n-\treturn 1;\n-\n-      code = GET_CODE (insn);\n-      if (GET_CODE (insn) == CODE_LABEL)\n-\treturn 1;\n-\n-      if (INSN_P (insn))\n-\t{\n-\t  rtx set = single_set (insn);\n-\t  int in_src = set && reg_overlap_mentioned_p (reg, SET_SRC (set));\n-\t  if (set && in_src)\n-\t    return 0;\n-\t  if (set && reg_overlap_mentioned_p (reg, SET_DEST (set)))\n-\t    return 1;\n-\t  if (set == 0 && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n-\t    return 0;\n-\t}\n-      prev_code = code;\n-    }\n-  return 1;\n-}\n \f\n /* Determine if it's legal to put X into the constant pool.  This\n    is not possible if X contains the address of a symbol that is"}]}