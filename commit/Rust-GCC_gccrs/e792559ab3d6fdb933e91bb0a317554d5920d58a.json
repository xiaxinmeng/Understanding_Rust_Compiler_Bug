{"sha": "e792559ab3d6fdb933e91bb0a317554d5920d58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5MjU1OWFiM2Q2ZmRiOTMzZTkxYmIwYTMxNzU1NGQ1OTIwZDU4YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-01T08:15:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-01T08:15:08Z"}, "message": "gensupport.h (pattern_stats): New structure.\n\ngcc/\n\t* gensupport.h (pattern_stats): New structure.\n\t* gensupport.c (get_pattern_stats_1, get_pattern_stats): New functions.\n\t* genemit.c (max_opno, max_dupno, max_scratch_opno): Delete.\n\t(max_operand_1, max_operand_vec): Delete.\n\t(gen_insn, gen_expand, gen_split): Use get_pattern_stats.\n\nFrom-SVN: r171821", "tree": {"sha": "b2cbc294126307fb76a53c640bd8728491e2e875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cbc294126307fb76a53c640bd8728491e2e875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e792559ab3d6fdb933e91bb0a317554d5920d58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e792559ab3d6fdb933e91bb0a317554d5920d58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e792559ab3d6fdb933e91bb0a317554d5920d58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e792559ab3d6fdb933e91bb0a317554d5920d58a/comments", "author": null, "committer": null, "parents": [{"sha": "90630d1932caf1b04df0fb082c36717fa25d2bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90630d1932caf1b04df0fb082c36717fa25d2bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90630d1932caf1b04df0fb082c36717fa25d2bf3"}], "stats": {"total": 224, "additions": 138, "deletions": 86}, "files": [{"sha": "d048013b65857b41662e3e79bbfab25c4dcda6d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e792559ab3d6fdb933e91bb0a317554d5920d58a", "patch": "@@ -1,3 +1,11 @@\n+2011-04-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gensupport.h (pattern_stats): New structure.\n+\t* gensupport.c (get_pattern_stats_1, get_pattern_stats): New functions.\n+\t* genemit.c (max_opno, max_dupno, max_scratch_opno): Delete.\n+\t(max_operand_1, max_operand_vec): Delete.\n+\t(gen_insn, gen_expand, gen_split): Use get_pattern_stats.\n+\n 2011-03-31  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* emit-rtl.c (emit_pattern_after_setloc): New function."}, {"sha": "aea7cb8b68a48c298a35bb4592b390f10d7cb6a7", "filename": "gcc/genemit.c", "status": "modified", "additions": 25, "deletions": 86, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=e792559ab3d6fdb933e91bb0a317554d5920d58a", "patch": "@@ -29,9 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gensupport.h\"\n \n \n-static int max_opno;\n-static int max_dup_opno;\n-static int max_scratch_opno;\n static int insn_code_number;\n static int insn_index_number;\n \n@@ -56,8 +53,6 @@ struct clobber_ent\n   struct clobber_ent *next;\n };\n \n-static void max_operand_1\t\t(rtx);\n-static int max_operand_vec\t\t(rtx, int);\n static void print_code\t\t\t(RTX_CODE);\n static void gen_exp\t\t\t(rtx, enum rtx_code, char *);\n static void gen_insn\t\t\t(rtx, int);\n@@ -68,58 +63,6 @@ static void output_added_clobbers_hard_reg_p (void);\n static void gen_rtx_scratch\t\t(rtx, enum rtx_code);\n static void output_peephole2_scratches\t(rtx);\n \n-\f\n-static void\n-max_operand_1 (rtx x)\n-{\n-  RTX_CODE code;\n-  int i;\n-  int len;\n-  const char *fmt;\n-\n-  if (x == 0)\n-    return;\n-\n-  code = GET_CODE (x);\n-\n-  if (code == MATCH_OPERAND || code == MATCH_OPERATOR\n-      || code == MATCH_PARALLEL)\n-    max_opno = MAX (max_opno, XINT (x, 0));\n-  if (code == MATCH_DUP || code == MATCH_OP_DUP || code == MATCH_PAR_DUP)\n-    max_dup_opno = MAX (max_dup_opno, XINT (x, 0));\n-  if (code == MATCH_SCRATCH)\n-    max_scratch_opno = MAX (max_scratch_opno, XINT (x, 0));\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  len = GET_RTX_LENGTH (code);\n-  for (i = 0; i < len; i++)\n-    {\n-      if (fmt[i] == 'e' || fmt[i] == 'u')\n-\tmax_operand_1 (XEXP (x, i));\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  int j;\n-\t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    max_operand_1 (XVECEXP (x, i, j));\n-\t}\n-    }\n-}\n-\n-static int\n-max_operand_vec (rtx insn, int arg)\n-{\n-  int len = XVECLEN (insn, arg);\n-  int i;\n-\n-  max_opno = -1;\n-  max_dup_opno = -1;\n-  max_scratch_opno = -1;\n-\n-  for (i = 0; i < len; i++)\n-    max_operand_1 (XVECEXP (insn, arg, i));\n-\n-  return max_opno + 1;\n-}\n \f\n static void\n print_code (RTX_CODE code)\n@@ -317,7 +260,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n static void\n gen_insn (rtx insn, int lineno)\n {\n-  int operands;\n+  struct pattern_stats stats;\n   int i;\n \n   /* See if the pattern for this insn ends with a group of CLOBBERs of (hard)\n@@ -402,14 +345,14 @@ gen_insn (rtx insn, int lineno)\n   printf (\"/* %s:%d */\\n\", read_md_filename, lineno);\n \n   /* Find out how many operands this function has.  */\n-  operands = max_operand_vec (insn, 1);\n-  if (max_dup_opno >= operands)\n+  get_pattern_stats (&stats, XVEC (insn, 1));\n+  if (stats.max_dup_opno > stats.max_opno)\n     fatal (\"match_dup operand number has no match_operand\");\n \n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (insn, 0));\n-  if (operands)\n-    for (i = 0; i < operands; i++)\n+  if (stats.num_generator_args)\n+    for (i = 0; i < stats.num_generator_args; i++)\n       if (i)\n \tprintf (\",\\n\\trtx operand%d ATTRIBUTE_UNUSED\", i);\n       else\n@@ -429,7 +372,7 @@ gen_insn (rtx insn, int lineno)\n     }\n   else\n     {\n-      char *used = XCNEWVEC (char, operands);\n+      char *used = XCNEWVEC (char, stats.num_generator_args);\n \n       printf (\"  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec (%d\",\n \t      XVECLEN (insn, 1));\n@@ -449,7 +392,7 @@ gen_insn (rtx insn, int lineno)\n static void\n gen_expand (rtx expand)\n {\n-  int operands;\n+  struct pattern_stats stats;\n   int i;\n   char *used;\n \n@@ -459,12 +402,12 @@ gen_expand (rtx expand)\n     fatal (\"define_expand for %s lacks a pattern\", XSTR (expand, 0));\n \n   /* Find out how many operands this function has.  */\n-  operands = max_operand_vec (expand, 1);\n+  get_pattern_stats (&stats, XVEC (expand, 1));\n \n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (expand, 0));\n-  if (operands)\n-    for (i = 0; i < operands; i++)\n+  if (stats.num_generator_args)\n+    for (i = 0; i < stats.num_generator_args; i++)\n       if (i)\n \tprintf (\",\\n\\trtx operand%d\", i);\n       else\n@@ -478,7 +421,7 @@ gen_expand (rtx expand)\n      and no MATCH_DUPs are present, we can just return the desired insn\n      like we do for a DEFINE_INSN.  This saves memory.  */\n   if ((XSTR (expand, 3) == 0 || *XSTR (expand, 3) == '\\0')\n-      && operands > max_dup_opno\n+      && stats.max_opno >= stats.max_dup_opno\n       && XVECLEN (expand, 1) == 1)\n     {\n       printf (\"  return \");\n@@ -489,9 +432,9 @@ gen_expand (rtx expand)\n \n   /* For each operand referred to only with MATCH_DUPs,\n      make a local variable.  */\n-  for (i = operands; i <= max_dup_opno; i++)\n+  for (i = stats.num_generator_args; i <= stats.max_dup_opno; i++)\n     printf (\"  rtx operand%d;\\n\", i);\n-  for (; i <= max_scratch_opno; i++)\n+  for (; i <= stats.max_scratch_opno; i++)\n     printf (\"  rtx operand%d ATTRIBUTE_UNUSED;\\n\", i);\n   printf (\"  rtx _val = 0;\\n\");\n   printf (\"  start_sequence ();\\n\");\n@@ -505,11 +448,11 @@ gen_expand (rtx expand)\n   if (XSTR (expand, 3) && *XSTR (expand, 3))\n     {\n       printf (\"  {\\n\");\n-      if (operands > 0 || max_dup_opno >= 0 || max_scratch_opno >= 0)\n-\tprintf (\"    rtx operands[%d];\\n\",\n-\t    MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1));\n+      if (stats.num_operand_vars > 0)\n+\tprintf (\"    rtx operands[%d];\\n\", stats.num_operand_vars);\n+\n       /* Output code to copy the arguments into `operands'.  */\n-      for (i = 0; i < operands; i++)\n+      for (i = 0; i < stats.num_generator_args; i++)\n \tprintf (\"    operands[%d] = operand%d;\\n\", i, i);\n \n       /* Output the special code to be executed before the sequence\n@@ -521,9 +464,7 @@ gen_expand (rtx expand)\n \t (unless we aren't going to use them at all).  */\n       if (XVEC (expand, 1) != 0)\n \t{\n-\t  for (i = 0;\n-\t       i < MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1);\n-\t       i++)\n+\t  for (i = 0; i < stats.num_operand_vars; i++)\n \t    {\n \t      printf (\"    operand%d = operands[%d];\\n\", i, i);\n \t      printf (\"    (void) operand%d;\\n\", i);\n@@ -536,8 +477,7 @@ gen_expand (rtx expand)\n      Use emit_insn to add them to the sequence being accumulated.\n      But don't do this if the user's code has set `no_more' nonzero.  */\n \n-  used = XCNEWVEC (char,\n-\t\t   MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1));\n+  used = XCNEWVEC (char, stats.num_operand_vars);\n \n   for (i = 0; i < XVECLEN (expand, 1); i++)\n     {\n@@ -591,8 +531,8 @@ gen_expand (rtx expand)\n static void\n gen_split (rtx split)\n {\n+  struct pattern_stats stats;\n   int i;\n-  int operands;\n   const char *const name =\n     ((GET_CODE (split) == DEFINE_PEEPHOLE2) ? \"peephole2\" : \"split\");\n   const char *unused;\n@@ -607,10 +547,9 @@ gen_split (rtx split)\n \n   /* Find out how many operands this function has.  */\n \n-  max_operand_vec (split, 2);\n-  operands = MAX (max_opno, MAX (max_dup_opno, max_scratch_opno)) + 1;\n-  unused = (operands == 0 ? \" ATTRIBUTE_UNUSED\" : \"\");\n-  used = XCNEWVEC (char, operands);\n+  get_pattern_stats (&stats, XVEC (split, 2));\n+  unused = (stats.num_operand_vars == 0 ? \" ATTRIBUTE_UNUSED\" : \"\");\n+  used = XCNEWVEC (char, stats.num_operand_vars);\n \n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n@@ -629,7 +568,7 @@ gen_split (rtx split)\n   printf (\"{\\n\");\n \n   /* Declare all local variables.  */\n-  for (i = 0; i < operands; i++)\n+  for (i = 0; i < stats.num_operand_vars; i++)\n     printf (\"  rtx operand%d;\\n\", i);\n   printf (\"  rtx _val = 0;\\n\");\n \n@@ -648,7 +587,7 @@ gen_split (rtx split)\n     }\n \n   /* Output code to copy the arguments back out of `operands'  */\n-  for (i = 0; i < operands; i++)\n+  for (i = 0; i < stats.num_operand_vars; i++)\n     {\n       printf (\"  operand%d = operands[%d];\\n\", i, i);\n       printf (\"  (void) operand%d;\\n\", i);"}, {"sha": "7bdfc41a4a156e44744be6c7d39753295005dc50", "filename": "gcc/gensupport.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=e792559ab3d6fdb933e91bb0a317554d5920d58a", "patch": "@@ -1367,3 +1367,80 @@ record_insn_name (int code, const char *name)\n \n   insn_name_ptr[code] = new_name;\n }\n+\f\n+/* Make STATS describe the operands that appear in rtx X.  */\n+\n+static void\n+get_pattern_stats_1 (struct pattern_stats *stats, rtx x)\n+{\n+  RTX_CODE code;\n+  int i;\n+  int len;\n+  const char *fmt;\n+\n+  if (x == NULL_RTX)\n+    return;\n+\n+  code = GET_CODE (x);\n+  switch (code)\n+    {\n+    case MATCH_OPERAND:\n+    case MATCH_OPERATOR:\n+    case MATCH_PARALLEL:\n+      stats->max_opno = MAX (stats->max_opno, XINT (x, 0));\n+      break;\n+\n+    case MATCH_DUP:\n+    case MATCH_OP_DUP:\n+    case MATCH_PAR_DUP:\n+      stats->num_dups++;\n+      stats->max_dup_opno = MAX (stats->max_dup_opno, XINT (x, 0));\n+      break;\n+\n+    case MATCH_SCRATCH:\n+      stats->max_scratch_opno = MAX (stats->max_scratch_opno, XINT (x, 0));\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  len = GET_RTX_LENGTH (code);\n+  for (i = 0; i < len; i++)\n+    {\n+      if (fmt[i] == 'e' || fmt[i] == 'u')\n+\tget_pattern_stats_1 (stats, XEXP (x, i));\n+      else if (fmt[i] == 'E')\n+\t{\n+\t  int j;\n+\t  for (j = 0; j < XVECLEN (x, i); j++)\n+\t    get_pattern_stats_1 (stats, XVECEXP (x, i, j));\n+\t}\n+    }\n+}\n+\n+/* Make STATS describe the operands that appear in instruction pattern\n+   PATTERN.  */\n+\n+void\n+get_pattern_stats (struct pattern_stats *stats, rtvec pattern)\n+{\n+  int i, len;\n+\n+  stats->max_opno = -1;\n+  stats->max_dup_opno = -1;\n+  stats->max_scratch_opno = -1;\n+  stats->num_dups = 0;\n+\n+  len = GET_NUM_ELEM (pattern);\n+  for (i = 0; i < len; i++)\n+    get_pattern_stats_1 (stats, RTVEC_ELT (pattern, i));\n+\n+  stats->num_generator_args = stats->max_opno + 1;\n+  stats->num_insn_operands = MAX (stats->max_opno,\n+\t\t\t\t  stats->max_scratch_opno) + 1;\n+  stats->num_operand_vars = MAX (stats->max_opno,\n+\t\t\t\t  MAX (stats->max_dup_opno,\n+\t\t\t\t       stats->max_scratch_opno)) + 1;\n+}"}, {"sha": "5ae32d5f40d4f1b00e451ecb12cd33b7d395dff8", "filename": "gcc/gensupport.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792559ab3d6fdb933e91bb0a317554d5920d58a/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=e792559ab3d6fdb933e91bb0a317554d5920d58a", "patch": "@@ -83,4 +83,32 @@ extern void add_predicate (struct pred_data *);\n \n #define FOR_ALL_PREDICATES(p) for (p = first_predicate; p; p = p->next)\n \n+struct pattern_stats\n+{\n+  /* The largest match_operand, match_operator or match_parallel\n+     number found.  */\n+  int max_opno;\n+\n+  /* The largest match_dup, match_op_dup or match_par_dup number found.  */\n+  int max_dup_opno;\n+\n+  /* The largest match_scratch number found.  */\n+  int max_scratch_opno;\n+\n+  /* The number of times match_dup, match_op_dup or match_par_dup appears\n+     in the pattern.  */\n+  int num_dups;\n+\n+  /* The number of rtx arguments to the generator function.  */\n+  int num_generator_args;\n+\n+  /* The number of rtx operands in an insn.  */\n+  int num_insn_operands;\n+\n+  /* The number of operand variables that are needed.  */\n+  int num_operand_vars;\n+};\n+\n+extern void get_pattern_stats (struct pattern_stats *ranges, rtvec vec);\n+\n #endif /* GCC_GENSUPPORT_H */"}]}