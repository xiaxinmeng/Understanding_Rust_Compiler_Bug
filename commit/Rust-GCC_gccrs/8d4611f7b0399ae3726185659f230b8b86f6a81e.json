{"sha": "8d4611f7b0399ae3726185659f230b8b86f6a81e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0NjExZjdiMDM5OWFlMzcyNjE4NTY1OWYyMzBiOGI4NmY2YTgxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T09:57:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T09:57:54Z"}, "message": "[multiple changes]\n\n2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* lib-xref.ads, lib-xref-spark_specific.adb, get_spark_xrefs.adb,\n\tput_spark_xrefs.adb: Minor reformatting.\n\n2016-05-02  Doug Rupp  <rupp@adacore.com>\n\n\t* g-traceb.ads: Document traceback for ARM.\n\n2016-05-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_Tags): Do not generate the\n\texternal name of interface tags adding the suffix counter since\n\tit causes problems at link time when the IP routines are inlined\n\tacross units with optimization.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb (Predicates_Ignared): new flag to indicate\n\tthat predicate checking is disabled for predicated subtypes in\n\tthe context of an Assertion_Policy pragma.\n\t* checks.adb (Apply_Predicate_Check): Do nothing if\n\tPredicates_Ignored is true.\n\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): If\n\tPredicates_Ignores is true, the function Rep_To_Pos does raise\n\tan exception for invalid data.\n\t* exp_ch4.adb (Expand_N_Type_Conversion): IF target is a predicated\n\ttype do not apply check if Predicates_Ignored is true.\n\t* exp_ch5.adb (Expand_N_Case_Statement): If Predicates_Ignored\n\tis true, sem_prag.adb:\n\t* sem_ch3.adb (Analyze_Object_Declaration): If Predicates_Ignored\n\tis true do not emit predicate check on initializing expression.\n\nFrom-SVN: r235730", "tree": {"sha": "2365936e9bc992b4c69d5684b7eaa2106ecd3792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2365936e9bc992b4c69d5684b7eaa2106ecd3792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4611f7b0399ae3726185659f230b8b86f6a81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4611f7b0399ae3726185659f230b8b86f6a81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4611f7b0399ae3726185659f230b8b86f6a81e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4611f7b0399ae3726185659f230b8b86f6a81e/comments", "author": null, "committer": null, "parents": [{"sha": "bcb0389ef322d30c3031fffe2e6ed0ed7df494d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb0389ef322d30c3031fffe2e6ed0ed7df494d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb0389ef322d30c3031fffe2e6ed0ed7df494d6"}], "stats": {"total": 145, "additions": 122, "deletions": 23}, "files": [{"sha": "ee9f265b6a62d2562152a4068ae973e2a09a83e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -1,3 +1,36 @@\n+2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* lib-xref.ads, lib-xref-spark_specific.adb, get_spark_xrefs.adb,\n+\tput_spark_xrefs.adb: Minor reformatting.\n+\n+2016-05-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* g-traceb.ads: Document traceback for ARM.\n+\n+2016-05-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_Tags): Do not generate the\n+\texternal name of interface tags adding the suffix counter since\n+\tit causes problems at link time when the IP routines are inlined\n+\tacross units with optimization.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Predicates_Ignared): new flag to indicate\n+\tthat predicate checking is disabled for predicated subtypes in\n+\tthe context of an Assertion_Policy pragma.\n+\t* checks.adb (Apply_Predicate_Check): Do nothing if\n+\tPredicates_Ignored is true.\n+\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): If\n+\tPredicates_Ignores is true, the function Rep_To_Pos does raise\n+\tan exception for invalid data.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): IF target is a predicated\n+\ttype do not apply check if Predicates_Ignored is true.\n+\t* exp_ch5.adb (Expand_N_Case_Statement): If Predicates_Ignored\n+\tis true, sem_prag.adb:\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If Predicates_Ignored\n+\tis true do not emit predicate check on initializing expression.\n+\n 2016-05-02  Arnaud Charlet  <charlet@adacore.com>\n \n \t* get_spark_xrefs.adb (Get_Nat, Get_Name): Initialize variables when"}, {"sha": "7091b78f3586658dc8d60ac0dd7f077f0ad8ec6b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -2670,6 +2670,9 @@ package body Checks is\n       if Predicate_Checks_Suppressed (Empty) then\n          return;\n \n+      elsif Predicates_Ignored (Typ) then\n+         return;\n+\n       elsif Present (Predicate_Function (Typ)) then\n          S := Current_Scope;\n          while Present (S) and then not Is_Subprogram (S) loop"}, {"sha": "6df97886d5d090138e2dec6ed4e7b14757c0fc1e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -601,8 +601,8 @@ package body Einfo is\n    --    Is_Volatile_Full_Access         Flag285\n    --    Is_Exception_Handler            Flag286\n    --    Rewritten_For_C                 Flag287\n+   --    Predicates_Ignored              Flag288\n \n-   --    (unused)                        Flag288\n    --    (unused)                        Flag289\n    --    (unused)                        Flag300\n \n@@ -2910,6 +2910,12 @@ package body Einfo is\n       return Node14 (Id);\n    end Postconditions_Proc;\n \n+   function Predicates_Ignored (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag288 (Id);\n+   end Predicates_Ignored;\n+\n    function Prival (Id : E) return E is\n    begin\n       pragma Assert (Is_Protected_Component (Id));\n@@ -5971,6 +5977,12 @@ package body Einfo is\n       Set_Node14 (Id, V);\n    end Set_Postconditions_Proc;\n \n+   procedure Set_Predicates_Ignored (Id : E; V : B) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag288 (Id, V);\n+   end Set_Predicates_Ignored;\n+\n    procedure Set_Direct_Primitive_Operations (Id : E; V : L) is\n    begin\n       pragma Assert (Is_Tagged_Type (Id));\n@@ -9130,6 +9142,7 @@ package body Einfo is\n       W (\"Reverse_Bit_Order\",               Flag164 (Id));\n       W (\"Reverse_Storage_Order\",           Flag93  (Id));\n       W (\"Rewritten_For_C\",                 Flag287 (Id));\n+      W (\"Predicates_Ignored\",              Flag288 (Id));\n       W (\"Sec_Stack_Needed_For_Return\",     Flag167 (Id));\n       W (\"Size_Depends_On_Discriminant\",    Flag177 (Id));\n       W (\"Size_Known_At_Compile_Time\",      Flag92  (Id));"}, {"sha": "98d5a53c46b608aaae492b6d3a23f4170cd8006d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -3767,6 +3767,11 @@ package Einfo is\n --       is the special version created for membership tests, where if one of\n --       these raise expressions is executed, the result is to return False.\n \n+--    Predicates_Ignored (Flag288)\n+--       Defined on all types. Indicates whether the subtype declaration is in\n+--       a context where Assertion_Policy is Ignore, in which case no checks\n+--       (static or dynamic) must be generated for objects of the type.\n+\n --    Primitive_Operations (synthesized)\n --       Defined in concurrent types, tagged record types and subtypes, tagged\n --       private types and tagged incomplete types. For concurrent types whose\n@@ -7137,6 +7142,7 @@ package Einfo is\n    function Partial_View_Has_Unknown_Discr      (Id : E) return B;\n    function Pending_Access_Types                (Id : E) return L;\n    function Postconditions_Proc                 (Id : E) return E;\n+   function Predicates_Ignored                  (Id : E) return B;\n    function Prival                              (Id : E) return E;\n    function Prival_Link                         (Id : E) return E;\n    function Private_Dependents                  (Id : E) return L;\n@@ -7489,6 +7495,7 @@ package Einfo is\n    procedure Set_Depends_On_Private              (Id : E; V : B := True);\n    procedure Set_Derived_Type_Link               (Id : E; V : E);\n    procedure Set_Digits_Value                    (Id : E; V : U);\n+   procedure Set_Predicates_Ignored              (Id : E; V : B);\n    procedure Set_Direct_Primitive_Operations     (Id : E; V : L);\n    procedure Set_Directly_Designated_Type        (Id : E; V : E);\n    procedure Set_Disable_Controlled              (Id : E; V : B := True);\n@@ -8637,6 +8644,7 @@ package Einfo is\n    pragma Inline (Partial_View_Has_Unknown_Discr);\n    pragma Inline (Pending_Access_Types);\n    pragma Inline (Postconditions_Proc);\n+   pragma Inline (Predicates_Ignored);\n    pragma Inline (Prival);\n    pragma Inline (Prival_Link);\n    pragma Inline (Private_Dependents);\n@@ -9100,6 +9108,7 @@ package Einfo is\n    pragma Inline (Set_Partial_View_Has_Unknown_Discr);\n    pragma Inline (Set_Pending_Access_Types);\n    pragma Inline (Set_Postconditions_Proc);\n+   pragma Inline (Set_Predicates_Ignored);\n    pragma Inline (Set_Prival);\n    pragma Inline (Set_Prival_Link);\n    pragma Inline (Set_Private_Dependents);"}, {"sha": "7df8b5fc23601875ea5e63ba5980bcd9a0d50e61", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -5034,9 +5034,13 @@ package body Exp_Ch3 is\n          end loop;\n       end if;\n \n-      --  In normal mode, add the others clause with the test\n+      --  In normal mode, add the others clause with the test.\n+      --  If Predicates_Ignored is True, validity checks do not apply to\n+      --  the subtype.\n \n-      if not No_Exception_Handlers_Set then\n+      if not No_Exception_Handlers_Set\n+        and then not Predicates_Ignored (Typ)\n+      then\n          Append_To (Lst,\n            Make_Case_Statement_Alternative (Loc,\n              Discrete_Choices => New_List (Make_Others_Choice (Loc)),"}, {"sha": "3a1b19a4e9ac5eb6778119ed86a970b5f2001793", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -11387,6 +11387,7 @@ package body Exp_Ch4 is\n       --  internal conversions for the purpose of checking predicates.\n \n       if Present (Predicate_Function (Target_Type))\n+        and then not Predicates_Ignored (Target_Type)\n         and then Target_Type /= Operand_Type\n         and then Comes_From_Source (N)\n       then"}, {"sha": "16702eb3661afdae820681a91235ac266cadc390", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -2573,10 +2573,11 @@ package body Exp_Ch5 is\n       --  does not obey the predicate, the value is marked non-static, and\n       --  there can be no corresponding static alternative. In that case we\n       --  replace the case statement with an exception, regardless of whether\n-      --  assertions are enabled or not.\n+      --  assertions are enabled or not, unless predicates are ignored.\n \n       if Compile_Time_Known_Value (Expr)\n         and then Has_Predicates (Etype (Expr))\n+        and then not Predicates_Ignored (Etype (Expr))\n         and then not Is_OK_Static_Expression (Expr)\n       then\n          Rewrite (N,\n@@ -2659,7 +2660,9 @@ package body Exp_Ch5 is\n          --  comes from source -- no need to validity check internally\n          --  generated case statements).\n \n-         if Validity_Check_Default then\n+         if Validity_Check_Default\n+           and then not Predicates_Ignored (Etype (Expr))\n+         then\n             Ensure_Valid (Expr);\n          end if;\n \n@@ -2788,9 +2791,31 @@ package body Exp_Ch5 is\n \n          if not Others_Present then\n             Others_Node := Make_Others_Choice (Sloc (Last_Alt));\n-            Set_Others_Discrete_Choices\n-              (Others_Node, Discrete_Choices (Last_Alt));\n-            Set_Discrete_Choices (Last_Alt, New_List (Others_Node));\n+\n+            --  If Predicates_Ignored is true the value does not satisfy the\n+            --  predicate, and there is no Others choice, Constraint_Error\n+            --  must be raised (4.5.7 (21/3)).\n+\n+            if Predicates_Ignored (Etype (Expr)) then\n+               declare\n+                  Except : constant Node_Id :=\n+                   Make_Raise_Constraint_Error (Loc,\n+                     Reason => CE_Invalid_Data);\n+                  New_Alt : constant Node_Id :=\n+                    Make_Case_Statement_Alternative (Loc,\n+                      Discrete_Choices => New_List (Make_Others_Choice (Loc)),\n+                      Statements => New_List (Except));\n+               begin\n+                  Append (New_Alt, Alternatives (N));\n+                  Analyze_And_Resolve (Except);\n+               end;\n+\n+            else\n+               Set_Others_Discrete_Choices\n+                 (Others_Node, Discrete_Choices (Last_Alt));\n+               Set_Discrete_Choices (Last_Alt, New_List (Others_Node));\n+            end if;\n+\n          end if;\n \n          --  Deal with possible declarations of controlled objects, and also"}, {"sha": "62328d56e985f48851f3b297bef8130cd5c14fac", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6751,8 +6751,7 @@ package body Exp_Disp is\n                if Building_Static_DT (Typ) then\n                   Iface_DT :=\n                     Make_Defining_Identifier (Loc,\n-                      Chars => New_External_Name\n-                                 (Typ_Name, 'T', Suffix_Index => -1));\n+                      Chars => New_External_Name (Typ_Name, 'T'));\n                   Import_DT\n                     (Tag_Typ => Related_Type (Node (AI_Tag_Comp)),\n                      DT      => Iface_DT,"}, {"sha": "e71a0552cfd0259b7254848e03034b133fed8a60", "filename": "gcc/ada/g-traceb.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fg-traceb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fg-traceb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-traceb.ads?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -65,6 +65,8 @@\n --     LynxOS 178 elf PowerPC\n --     Solaris x86\n --     Solaris sparc\n+--     VxWorks ARM\n+--     VxWorks7 ARM\n --     VxWorks PowerPC\n --     VxWorks x86\n --     Windows XP"}, {"sha": "63474ee874204311c3ee0e64eb00f0b8b7379d1f", "filename": "gcc/ada/get_spark_xrefs.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fget_spark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fget_spark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_spark_xrefs.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -114,8 +114,8 @@ procedure Get_SPARK_Xrefs is\n    -------------\n \n    function Get_Nat return Nat is\n-      Val : Nat := 0;\n       C   : Character := Nextc;\n+      Val : Nat := 0;\n \n    begin\n       if C not in '0' .. '9' then"}, {"sha": "10d1a05aaa28cc49b79ed48202e721fd25e1c35b", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -992,9 +992,9 @@ package body SPARK_Specific is\n                Srec : SPARK_Scope_Record renames SPARK_Scope_Table.Table (S);\n \n                Spec_Entity : constant Entity_Id :=\n-                 Unique_Entity (Srec.Scope_Entity);\n+                               Unique_Entity (Srec.Scope_Entity);\n                Spec_Scope  : constant Scope_Index :=\n-                 Entity_Hash_Table.Get (Spec_Entity);\n+                               Entity_Hash_Table.Get (Spec_Entity);\n \n             begin\n                --  Generic spec may be missing in which case Spec_Scope is zero"}, {"sha": "3da57bda67c8928fd6a72984254c5206fdc990a4", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -509,9 +509,9 @@ package Lib.Xref is\n       E_Void                                       => ' ',\n \n       --  The following entities are not ones to which we gather the cross-\n-      --  references, since it does not make sense to do so (e.g. references to\n-      --  a package are to the spec, not the body) Indeed the occurrence of the\n-      --  body entity is considered to be a reference to the spec entity.\n+      --  references, since it does not make sense to do so (e.g. references\n+      --  to a package are to the spec, not the body). Indeed the occurrence of\n+      --  the body entity is considered to be a reference to the spec entity.\n \n       E_Package_Body                               => ' ',\n       E_Protected_Body                             => ' ',"}, {"sha": "a65fa8a92909b311b7ce85c9981c65eaf12c3261", "filename": "gcc/ada/put_spark_xrefs.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fput_spark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fput_spark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_spark_xrefs.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -104,6 +104,7 @@ begin\n \n             begin\n                --  Write only non-empty tables\n+\n                if S.From_Xref <= S.To_Xref then\n \n                   Write_Info_Initiate ('F');\n@@ -133,7 +134,7 @@ begin\n \n                      Output_One_Xref : declare\n                         R : SPARK_Xref_Record renames\n-                          SPARK_Xref_Table.Table (X);\n+                              SPARK_Xref_Table.Table (X);\n \n                      begin\n                         if R.Entity_Line /= Entity_Line"}, {"sha": "9ed1301e45a09284c79d2d458abfa9d99b3debbf", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -3814,14 +3814,15 @@ package body Sem_Ch3 is\n       --  do this in the analyzer and not the expander because the analyzer\n       --  does some substantial rewriting in some cases.\n \n-      --  We need a predicate check if the type has predicates, and if either\n-      --  there is an initializing expression, or for default initialization\n-      --  when we have at least one case of an explicit default initial value\n-      --  and then this is not an internal declaration whose initialization\n-      --  comes later (as for an aggregate expansion).\n+      --  We need a predicate check if the type has predicates that are not\n+      --  ignored, and if either there is an initializing expression, or for\n+      --  default initialization when we have at least one case of an explicit\n+      --  default initial value and then this is not an internal declaration\n+      --  whose initialization comes later (as for an aggregate expansion).\n \n       if not Suppress_Assignment_Checks (N)\n         and then Present (Predicate_Function (T))\n+        and then not Predicates_Ignored (T)\n         and then not No_Initialization (N)\n         and then\n           (Present (E)"}, {"sha": "d4243a370eaceaa3b27b8f64130382d966d91d63", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4611f7b0399ae3726185659f230b8b86f6a81e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8d4611f7b0399ae3726185659f230b8b86f6a81e", "patch": "@@ -18744,8 +18744,15 @@ package body Sem_Prag is\n             --  the rep item chain, for processing when the type is frozen.\n             --  This is accomplished by a call to Rep_Item_Too_Late. We also\n             --  mark the type as having predicates.\n+            --  If the current policy is Ignore mark the subtype accordingly.\n+            --  In the case of predicates we consider them enabled unless an\n+            --  Ignore is specified, to preserve existing warnings.\n \n             Set_Has_Predicates (Typ);\n+            Set_Predicates_Ignored (Typ,\n+              Present (Check_Policy_List)\n+                and then\n+                  Policy_In_Effect (Name_Assertion_Policy) = Name_Ignore);\n             Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n          end Predicate;\n \n@@ -28563,6 +28570,7 @@ package body Sem_Prag is\n             --  RM defined\n \n             Name_Assert                    |\n+            Name_Assertion_Policy          |\n             Name_Static_Predicate          |\n             Name_Dynamic_Predicate         |\n             Name_Pre                       |"}]}