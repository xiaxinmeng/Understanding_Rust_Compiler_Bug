{"sha": "a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzOWNiNWJkOWNjOGEyZmMyMzIwNTVkZDVmOGExZjlmNDVmMDkzYw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-02T15:57:13Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-02T15:57:13Z"}, "message": "2003-03-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileChannelImpl.java\n\t(fd): Type FileDescriptor instead of int.\n\t(lengthInternal): Removed.\n\t(FileChannelImpl): Fixed arguments, check type of file object.\n\t(size): Made it native.\n\t(implPosition): New native method.\n\t(implTruncate): New native method.\n\t(position): Implemented.\n\t(truncate): Implemented.\n\t(nio_mmap_file): Changed arguments.\n\t(nio_munmap_file): Changed arguments.\n\t(nio_msync): Changed arguments.\n\t* gnu/java/nio/natFileChannelImpl.cc\n\t(lengthInternal): Removed.\n\t(size): New method.\n\t(implPosition): New method.\n\t(implTruncate): New method.\n\t(nio_mmap_file): Changed arguments.\n\t(nio_munmap_file): Changed arguments.\n\t(nio_msync): Changed arguments.\n\nFrom-SVN: r63668", "tree": {"sha": "7f7a771b552d63a7e8628e711227791e9c6ab053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7a771b552d63a7e8628e711227791e9c6ab053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/comments", "author": null, "committer": null, "parents": [{"sha": "05eb3436761139129acaf9e4d035fe10e62a8c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05eb3436761139129acaf9e4d035fe10e62a8c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05eb3436761139129acaf9e4d035fe10e62a8c8e"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "7d8c17bf9d14cc977bec57709625dab647d31eb9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "patch": "@@ -1,3 +1,26 @@\n+2003-03-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileChannelImpl.java\n+\t(fd): Type FileDescriptor instead of int.\n+\t(lengthInternal): Removed.\n+\t(FileChannelImpl): Fixed arguments, check type of file object.\n+\t(size): Made it native.\n+\t(implPosition): New native method.\n+\t(implTruncate): New native method.\n+\t(position): Implemented.\n+\t(truncate): Implemented.\n+\t(nio_mmap_file): Changed arguments.\n+\t(nio_munmap_file): Changed arguments.\n+\t(nio_msync): Changed arguments.\n+\t* gnu/java/nio/natFileChannelImpl.cc\n+\t(lengthInternal): Removed.\n+\t(size): New method.\n+\t(implPosition): New method.\n+\t(implTruncate): New method.\n+\t(nio_mmap_file): Changed arguments.\n+\t(nio_munmap_file): Changed arguments.\n+\t(nio_msync): Changed arguments.\n+\n 2003-03-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/dnd/DropTargetContext.java:"}, {"sha": "22835401816ceb6fd2154a552e0cb4ce5628060a", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "patch": "@@ -38,6 +38,7 @@\n package gnu.java.nio;\n \n import java.io.EOFException;\n+import java.io.FileDescriptor;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n@@ -64,41 +65,41 @@ public class FileChannelImpl extends FileChannel\n {\n   public long address;\n   public int length;\n-  public int fd;\n+  public FileDescriptor fd;\n   public MappedByteBuffer buf;\n   public Object file_obj; // just to keep it live...\n \n-  /**\n-   * This method came from java.io.RandomAccessFile\n-   * It is private there so we will repeat it here.\n-   */\n-  private native long lengthInternal (int native_fd) throws IOException;\n-\n-  public FileChannelImpl (int fd, Object obj)\n+  public FileChannelImpl (FileDescriptor fd, boolean write, Object obj)\n   {\n+    if (!(obj instanceof RandomAccessFile)\n+        && !(obj instanceof FileInputStream)\n+        && !(obj instanceof FileOutputStream))\n+      throw new InternalError ();\n+\n     this.fd = fd;\n     this.file_obj = obj;\n   }\n \n-  public long size () throws IOException\n-  {\n-    if (!isOpen ())\n-      throw new ClosedChannelException ();\n+  private native long implPosition ();\n+  private native FileChannel implPosition (long newPosition);\n+  private native FileChannel implTruncate (long size);\n+  \n+  private native long nio_mmap_file (long pos, long size, int mode);\n+  private native void nio_unmmap_file (long address, int size);\n+  private native void nio_msync (long address, int length);\n \n-    return lengthInternal (fd);\n-  }\n+  public native long size () throws IOException;\n     \n   protected void implCloseChannel() throws IOException\n   {\n+    // FIXME\n+    \n     if (address != 0)\n       {\n-        nio_unmmap_file (fd, address, (int) length);\n+        //nio_unmmap_file (fd, address, (int) length);\n         address = 0;\n       }\n \n-    // FIXME\n-    fd = 0;\n-\n     if (file_obj instanceof RandomAccessFile)\n       {\n         RandomAccessFile o = (RandomAccessFile) file_obj;\n@@ -121,14 +122,14 @@ public int read (ByteBuffer dst) throws IOException\n     int s = (int)size();\n \n     if (buf == null)\n-\t    {\n+      {\n         throw new EOFException(\"file not mapped\");\n-\t    }\n+      }\n \n     for (int i=0; i<s; i++)\n-\t    {\n+      {\n         dst.put( buf.get() );\n-\t    }\n+      }\n \n     return s;\n   }\n@@ -165,15 +166,15 @@ public int write (ByteBuffer src) throws IOException\n     int w = 0;\n \n     if (buf == null)\n-\t    {\n+      {\n         throw new EOFException (\"file not mapped\");\n-\t    }\n+      }\n \n     while (src.hasRemaining ())\n-\t    {\n+      {\n         buf.put (src.get ());\n         w++;\n-\t    }\n+      }\n \n     return w;\n   }\n@@ -195,14 +196,14 @@ public int write (ByteBuffer src, long position)\n   public long write(ByteBuffer[] srcs, int offset, int length)\n     throws IOException\n   {\n-    long res = 0;\n+    long result = 0;\n \n     for (int i = offset;i < offset + length;i++)\n-\t    {\n-        res += write (srcs[i]);\n-\t    }\n+      {\n+        result += write (srcs[i]);\n+      }\n     \n-    return res;\n+    return result;\n   }\n \t\t\t\t   \n   public MappedByteBuffer map (FileChannel.MapMode mode, long position,\n@@ -252,7 +253,7 @@ public void force (boolean metaData) throws IOException\n \n     // FIXME: What to do with metaData ?\n     \n-    nio_msync (fd, address, length);\n+    nio_msync (address, length);\n   }\n \n   public long transferTo (long position, long count, WritableByteChannel target)\n@@ -322,7 +323,7 @@ public long position ()\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    throw new Error (\"not implemented\");\n+    return implPosition ();\n   }\n   \n   public FileChannel position (long newPosition)\n@@ -334,7 +335,7 @@ public FileChannel position (long newPosition)\n     if (!isOpen ())\n       throw new ClosedChannelException ();\n \n-    throw new Error (\"not implemented\");\n+    return implPosition (newPosition);\n   }\n   \n   public FileChannel truncate (long size)\n@@ -348,10 +349,6 @@ public FileChannel truncate (long size)\n \n     // FIXME: check for NonWritableChannelException\n \n-    throw new Error (\"not implemented\");\n+    return implTruncate (size);\n   }\n-  \n-  private static native long nio_mmap_file (int fd, long pos, int size, int mode);\n-  private static native void nio_unmmap_file (int fd, long address, int size);\n-  private static native void nio_msync (int fd, long address, int length);\n }"}, {"sha": "8ba838255b59313e6472a5380c7c73386b5a4faa", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "patch": "@@ -25,29 +25,50 @@ details.  */\n #endif\n \n #include <gnu/java/nio/FileChannelImpl.h>\n+#include <java/io/FileDescriptor.h>\n #include <java/io/IOException.h>\n #include <java/nio/channels/FileChannel.h>\n \n jlong\n-gnu::java::nio::FileChannelImpl::lengthInternal (jint fd)\n+gnu::java::nio::FileChannelImpl::size ()\n {\n-  throw new ::java::io::IOException (JvNewStringUTF (\"lengthInternal not implemented\"));\n+  return fd->length ();\n }\n \n jlong\n-gnu::java::nio::FileChannelImpl::nio_mmap_file (jint, jlong, jint, jint)\n+gnu::java::nio::FileChannelImpl::implPosition ()\n+{\n+  return fd->getFilePointer ();\n+}\n+\n+java::nio::channels::FileChannel*\n+gnu::java::nio::FileChannelImpl::implPosition (jlong newPosition)\n+{\n+  fd->seek (newPosition, ::java::io::FileDescriptor::SET, true);\n+  return this;\n+}\n+\n+java::nio::channels::FileChannel*\n+gnu::java::nio::FileChannelImpl::implTruncate (jlong size)\n+{\n+  fd->setLength (size);\n+  return this;\n+}\n+\n+jlong\n+gnu::java::nio::FileChannelImpl::nio_mmap_file (jlong, jlong, jint)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"mmap not implemented\"));\n }\n \n void\n-gnu::java::nio::FileChannelImpl::nio_unmmap_file (jint, jlong, jint)\n+gnu::java::nio::FileChannelImpl::nio_unmmap_file (jlong, jint)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"munmap not implemented\"));\n }\n \n void\n-gnu::java::nio::FileChannelImpl::nio_msync (jint, jlong, jint)\n+gnu::java::nio::FileChannelImpl::nio_msync (jlong, jint)\n {\n   throw new ::java::io::IOException (JvNewStringUTF (\"msync not implemented\"));\n }"}]}