{"sha": "eb491ea5c10955c667ceeda76dede393c93a377b", "node_id": "C_kwDOANBUbNoAKGViNDkxZWE1YzEwOTU1YzY2N2NlZWRhNzZkZWRlMzkzYzkzYTM3N2I", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-09-30T19:11:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-07T16:12:01Z"}, "message": "libiberty: Demangle variadic template lambdas\n\nNow we have templated lambdas, we can have variadic template lambdas,\nand this leads to lambda signatures containing parameter packs.  But\njust like 'auto' inside such a signature, we don't have a containing\ntemplate, and thus fail.  The fix is to check is_lambda_arg, just as\nfor a template parameter.  This allows us to demangle g++'s manglings\nof such lambdas.\n\nIt's not a totally accurate demangling, because we don't mangle the\ntemplate head (that's a separate issue), but it is better than failing\nto demangle.\n\nDue to the way we print subexprs, we add an unnecessary parens around\nthe argument of the pack.  That's an orthogonal problem, for which the\nsolution is to have better knowledge of operator precedence.\n\n\tlibiberty/\n\t* cp-demangle.c (d_print_comp_inner): Allow parameter packs\n\tin a lambda signature.\n\t* testsuite/demangle-expected: Add tests.", "tree": {"sha": "16f99249432a5217c504c73e9ceb05d454ea90e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f99249432a5217c504c73e9ceb05d454ea90e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb491ea5c10955c667ceeda76dede393c93a377b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb491ea5c10955c667ceeda76dede393c93a377b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb491ea5c10955c667ceeda76dede393c93a377b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb491ea5c10955c667ceeda76dede393c93a377b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f4628054358a92a55d52645cf107aa26ff6765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f4628054358a92a55d52645cf107aa26ff6765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f4628054358a92a55d52645cf107aa26ff6765"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "303bfbf709e106b31f7b3b419e683180d32236d8", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb491ea5c10955c667ceeda76dede393c93a377b/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb491ea5c10955c667ceeda76dede393c93a377b/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=eb491ea5c10955c667ceeda76dede393c93a377b", "patch": "@@ -348,7 +348,7 @@ struct d_print_info\n      be bigger than MAX_RECURSION_COUNT.  */\n   int recursion;\n   /* Non-zero if we're printing a lambda argument.  A template\n-     parameter reference actually means 'auto'.  */\n+     parameter reference actually means 'auto', a pack expansion means T...  */\n   int is_lambda_arg;\n   /* The current index into any template argument packs we are using\n      for printing, or -1 to print the whole pack.  */\n@@ -5930,27 +5930,31 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \n     case DEMANGLE_COMPONENT_PACK_EXPANSION:\n       {\n-\tint len;\n-\tint i;\n-\tstruct demangle_component *a = d_find_pack (dpi, d_left (dc));\n+\tstruct demangle_component *a = NULL;\n+\n+\tif (!dpi->is_lambda_arg)\n+\t  a = d_find_pack (dpi, d_left (dc));\n \tif (a == NULL)\n \t  {\n \t    /* d_find_pack won't find anything if the only packs involved\n \t       in this expansion are function parameter packs; in that\n \t       case, just print the pattern and \"...\".  */\n \t    d_print_subexpr (dpi, options, d_left (dc));\n \t    d_append_string (dpi, \"...\");\n-\t    return;\n \t  }\n-\n-\tlen = d_pack_length (a);\n-\tdc = d_left (dc);\n-\tfor (i = 0; i < len; ++i)\n+\telse\n \t  {\n-\t    dpi->pack_index = i;\n-\t    d_print_comp (dpi, options, dc);\n-\t    if (i < len-1)\n-\t      d_append_string (dpi, \", \");\n+\t    int len = d_pack_length (a);\n+\t    int i;\n+\n+\t    dc = d_left (dc);\n+\t    for (i = 0; i < len; ++i)\n+\t      {\n+\t\tif (i)\n+\t\t  d_append_string (dpi, \", \");\n+\t\tdpi->pack_index = i;\n+\t\td_print_comp (dpi, options, dc);\n+\t      }\n \t  }\n       }\n       return;"}, {"sha": "90dd4a13945347e0e9c85a1624d89428e13460a7", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb491ea5c10955c667ceeda76dede393c93a377b/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb491ea5c10955c667ceeda76dede393c93a377b/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=eb491ea5c10955c667ceeda76dede393c93a377b", "patch": "@@ -1574,3 +1574,10 @@ initializer for module Foo.Bar\n \n _ZGIW3FooWP3BarW3Baz\n initializer for module Foo:Bar.Baz\n+\n+_ZZ2L1vENKUlDpT_E_clIJiPiEEEvS0_\n+void L1()::{lambda((auto:1)...)#1}::operator()<int, int*>(int, int*) const\n+\n+_ZZ2L1vENKUlDpT_E_clIJiPiEEEDaS0_\n+auto L1()::{lambda((auto:1)...)#1}::operator()<int, int*>(int, int*) const\n+"}]}