{"sha": "afb4ac68f03545aafe3e3e08f6963be13f7aa955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiNGFjNjhmMDM1NDVhYWZlM2UzZTA4ZjY5NjNiZTEzZjdhYTk1NQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-15T14:33:34Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-15T14:33:34Z"}, "message": "sse.md (unspec): Add UNSPEC_RCP14...\n\n\t* config/i386/sse.md (unspec): Add UNSPEC_RCP14, UNSPEC_RSQRT14,\n\tUNSPEC_FIXUPIMM, UNSPEC_SCALEF, UNSPEC_GETEXP, UNSPEC_GETMANT,\n\tUNSPEC_EXP2, UNSPEC_RCP28, UNSPEC_RSQRT28.\n\t(rcp14<mode>): New.\n\t(srcp14<mode>): Ditto.\n\t(rsqrt14<mode>): Ditto.\n\t(rsqrt14<mode>): Ditto.\n\t(avx512f_vmscalef<mode>): Ditto.\n\t(avx512f_scalef<mode>): Ditto.\n\t(avx512f_getexp<mode>): Ditto.\n\t(avx512f_sgetexp<mode>): Ditto.\n\t(avx512f_fixupimm<mode>): Ditto.\n\t(avx512f_sfixupimm<mode>): Ditto.\n\t(avx512f_rndscale<mode>): Ditto.\n\t(*avx512er_exp2<mode>): Ditto.\n\t(*avx512er_rcp28<mode>): Ditto.\n\t(avx512er_rsqrt28<mode>): Ditto.\n\t(avx512f_getmant<mode>): Ditto.\n\t(avx512f_getmant<mode>): Ditto.\n\t(avx512f_rndscale<mode>): Fix formatting.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203609", "tree": {"sha": "fe25986ca81864900fd8efe43c754d0644fbba51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe25986ca81864900fd8efe43c754d0644fbba51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb4ac68f03545aafe3e3e08f6963be13f7aa955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb4ac68f03545aafe3e3e08f6963be13f7aa955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb4ac68f03545aafe3e3e08f6963be13f7aa955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb4ac68f03545aafe3e3e08f6963be13f7aa955/comments", "author": null, "committer": null, "parents": [{"sha": "4cb1359729c72f65a8b6da12af6baab74082dd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb1359729c72f65a8b6da12af6baab74082dd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb1359729c72f65a8b6da12af6baab74082dd3f"}], "stats": {"total": 249, "additions": 245, "deletions": 4}, "files": [{"sha": "974c778fc9fc00bd4b282d30c6f85651b935ac1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb4ac68f03545aafe3e3e08f6963be13f7aa955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb4ac68f03545aafe3e3e08f6963be13f7aa955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afb4ac68f03545aafe3e3e08f6963be13f7aa955", "patch": "@@ -1,3 +1,35 @@\n+2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (unspec): Add UNSPEC_RCP14, UNSPEC_RSQRT14,\n+\tUNSPEC_FIXUPIMM, UNSPEC_SCALEF, UNSPEC_GETEXP, UNSPEC_GETMANT,\n+\tUNSPEC_EXP2, UNSPEC_RCP28, UNSPEC_RSQRT28.\n+\t(rcp14<mode>): New.\n+\t(srcp14<mode>): Ditto.\n+\t(rsqrt14<mode>): Ditto.\n+\t(rsqrt14<mode>): Ditto.\n+\t(avx512f_vmscalef<mode>): Ditto.\n+\t(avx512f_scalef<mode>): Ditto.\n+\t(avx512f_getexp<mode>): Ditto.\n+\t(avx512f_sgetexp<mode>): Ditto.\n+\t(avx512f_fixupimm<mode>): Ditto.\n+\t(avx512f_sfixupimm<mode>): Ditto.\n+\t(avx512f_rndscale<mode>): Ditto.\n+\t(*avx512er_exp2<mode>): Ditto.\n+\t(*avx512er_rcp28<mode>): Ditto.\n+\t(avx512er_rsqrt28<mode>): Ditto.\n+\t(avx512f_getmant<mode>): Ditto.\n+\t(avx512f_getmant<mode>): Ditto.\n+\t(avx512f_rndscale<mode>): Fix formatting.\n+\n+\n 2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "2046dd58c9b60b4e4c76c939a14d79c1b04e1aaa", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 213, "deletions": 4, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb4ac68f03545aafe3e3e08f6963be13f7aa955/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb4ac68f03545aafe3e3e08f6963be13f7aa955/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=afb4ac68f03545aafe3e3e08f6963be13f7aa955", "patch": "@@ -91,7 +91,13 @@\n   UNSPEC_TESTM\n   UNSPEC_TESTNM\n   UNSPEC_SCATTER\n+  UNSPEC_RCP14\n+  UNSPEC_RSQRT14\n+  UNSPEC_FIXUPIMM\n+  UNSPEC_SCALEF\n   UNSPEC_VTERNLOG\n+  UNSPEC_GETEXP\n+  UNSPEC_GETMANT\n   UNSPEC_ALIGN\n   UNSPEC_CONFLICT\n   UNSPEC_MASKED_EQ\n@@ -100,6 +106,11 @@\n   ;; For AVX512PF support\n   UNSPEC_GATHER_PREFETCH\n   UNSPEC_SCATTER_PREFETCH\n+\n+  ;; For AVX512ER support\n+  UNSPEC_EXP2\n+  UNSPEC_RCP28\n+  UNSPEC_RSQRT28\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -1254,6 +1265,32 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"rcp14<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_RCP14))]\n+  \"TARGET_AVX512F\"\n+  \"vrcp14<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"srcp14<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_RCP14)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vrcp14<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF2 0 \"register_operand\")\n \t(sqrt:VF2 (match_operand:VF2 1 \"nonimmediate_operand\")))]\n@@ -1324,6 +1361,32 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"rsqrt14<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_RSQRT14))]\n+  \"TARGET_AVX512F\"\n+  \"vrsqrt14<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"rsqrt14<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_RSQRT14)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vrsqrt14<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"sse_vmrsqrtv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n@@ -5305,6 +5368,29 @@\n   operands[1] = adjust_address (operands[1], DFmode, INTVAL (operands[2]) * 8);\n })\n \n+(define_insn \"avx512f_vmscalef<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128 [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t\t\t UNSPEC_SCALEF)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"%vscalef<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<ssescalarmode>\")])\n+\n+(define_insn \"avx512f_scalef<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512 [(match_operand:VF_512 1 \"register_operand\" \"v\")\n+\t\t\t(match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")]\n+\t\t       UNSPEC_SCALEF))]\n+  \"TARGET_AVX512F\"\n+  \"%vscalef<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<MODE>\")])\n+\n (define_insn \"avx512f_vternlog<mode>\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n \t(unspec:VI48_512\n@@ -5319,6 +5405,28 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_getexp<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+        (unspec:VF_512 [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+                        UNSPEC_GETEXP))]\n+   \"TARGET_AVX512F\"\n+   \"vgetexp<ssemodesuffix>\\t{%1, %0|%0, %1}\";\n+    [(set_attr \"prefix\" \"evex\")\n+     (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_sgetexp<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128 [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t\t\t UNSPEC_GETEXP)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+   \"TARGET_AVX512F\"\n+   \"vgetexp<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+    [(set_attr \"prefix\" \"evex\")\n+     (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n (define_insn \"avx512f_align<mode>\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n         (unspec:VI48_512 [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n@@ -5330,18 +5438,63 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_fixupimm<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+        (unspec:VF_512\n+          [(match_operand:VF_512 1 \"register_operand\" \"0\")\n+\t   (match_operand:VF_512 2 \"register_operand\" \"v\")\n+           (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+           (match_operand:SI 4 \"const_0_to_255_operand\")]\n+           UNSPEC_FIXUPIMM))]\n+  \"TARGET_AVX512F\"\n+  \"vfixupimm<ssemodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\";\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_sfixupimm<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+          (unspec:VF_128\n+            [(match_operand:VF_128 1 \"register_operand\" \"0\")\n+\t     (match_operand:VF_128 2 \"register_operand\" \"v\")\n+\t     (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n+\t    UNSPEC_FIXUPIMM)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+   \"TARGET_AVX512F\"\n+   \"vfixupimm<ssescalarmodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\";\n+   [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n (define_insn \"avx512f_rndscale<mode>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-       (unspec:VF_512\n-         [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n-          (match_operand:SI 2 \"const_0_to_255_operand\")]\n-         UNSPEC_ROUND))]\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n+\t  UNSPEC_ROUND))]\n   \"TARGET_AVX512F\"\n   \"vrndscale<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"avx512f_rndscale<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n+\t    UNSPEC_ROUND)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vrndscale<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"avx_shufpd256\"\n   [(match_operand:V4DF 0 \"register_operand\")\n    (match_operand:V4DF 1 \"register_operand\")\n@@ -10501,6 +10654,36 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn \"*avx512er_exp2<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_EXP2))]\n+  \"TARGET_AVX512ER\"\n+  \"vexp2<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512er_rcp28<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_RCP28))]\n+  \"TARGET_AVX512ER\"\n+  \"vrcp28<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512er_rsqrt28<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_RSQRT28))]\n+  \"TARGET_AVX512ER\"\n+  \"vrsqrt28<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; XOP instructions\n@@ -12827,6 +13010,32 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_getmant<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n+\t  UNSPEC_GETMANT))]\n+  \"TARGET_AVX512F\"\n+  \"vgetmant<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_getmant<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n+\t    UNSPEC_GETMANT)\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+   \"TARGET_AVX512F\"\n+   \"vgetmant<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+   [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n (define_insn \"clz<mode>2\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n \t(clz:VI48_512"}]}