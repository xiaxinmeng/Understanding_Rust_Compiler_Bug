{"sha": "f3ec182d6ca9829004b3b78fca373b8659bf7c01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlYzE4MmQ2Y2E5ODI5MDA0YjNiNzhmY2EzNzNiODY1OWJmN2MwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-05-08T19:08:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-05-08T19:08:07Z"}, "message": "PR c++/80178 - parameter passing for uncopyable classes\n\n\t* tree.c (type_has_nontrivial_copy_init): True for classes with only\n\tdeleted copy/move ctors.\n\t(remember_deleted_copy, maybe_warn_parm_abi): New.\n\t* decl.c (require_complete_types_for_parms, check_function_type):\n\tCall maybe_warn_parm_abi.\n\t* call.c (convert_for_arg_passing, build_cxx_call): Likewise.\n\nFrom-SVN: r247757", "tree": {"sha": "d0f58768cb3ec5c1371ac6b542dc445f97d43863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f58768cb3ec5c1371ac6b542dc445f97d43863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ec182d6ca9829004b3b78fca373b8659bf7c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ec182d6ca9829004b3b78fca373b8659bf7c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ec182d6ca9829004b3b78fca373b8659bf7c01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ec182d6ca9829004b3b78fca373b8659bf7c01/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49f0c04c37b2f73dd88ccf5d8fc93c1dcb6ef2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f0c04c37b2f73dd88ccf5d8fc93c1dcb6ef2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f0c04c37b2f73dd88ccf5d8fc93c1dcb6ef2c2"}], "stats": {"total": 205, "additions": 187, "deletions": 18}, "files": [{"sha": "13305558d2d99a317f7b493ed7fe79e8367c8864", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -910,6 +910,10 @@ Driver Undocumented\n ;     and introduces new inheriting constructor handling.\n ;     Default in G++ 7.\n ;\n+; 12: Corrects the calling convention for classes with only deleted copy/move\n+;     constructors.\n+;     Default in G++ 8.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "3119d5fb2b2c09fe93e2d330939663db34c89afc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -1,3 +1,13 @@\n+2017-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80178 - parameter passing for uncopyable classes\n+\t* tree.c (type_has_nontrivial_copy_init): True for classes with only\n+\tdeleted copy/move ctors.\n+\t(remember_deleted_copy, maybe_warn_parm_abi): New.\n+\t* decl.c (require_complete_types_for_parms, check_function_type):\n+\tCall maybe_warn_parm_abi.\n+\t* call.c (convert_for_arg_passing, build_cxx_call): Likewise.\n+\n 2017-05-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (builtin_function_1): Set DCL_ANTICIPATED before pushing."}, {"sha": "d9accd16401a365bd6ca6b848e1901aea131aa15", "filename": "gcc/cp/call.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -7352,17 +7352,21 @@ convert_for_arg_passing (tree type, tree val, tsubst_flags_t complain)\n \t   && COMPLETE_TYPE_P (type)\n \t   && tree_int_cst_lt (TYPE_SIZE (type), TYPE_SIZE (integer_type_node)))\n     val = cp_perform_integral_promotions (val, complain);\n-  if ((complain & tf_warning)\n-      && warn_suggest_attribute_format)\n+  if (complain & tf_warning)\n     {\n-      tree rhstype = TREE_TYPE (val);\n-      const enum tree_code coder = TREE_CODE (rhstype);\n-      const enum tree_code codel = TREE_CODE (type);\n-      if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)\n-\t  && coder == codel\n-\t  && check_missing_format_attribute (type, rhstype))\n-\twarning (OPT_Wsuggest_attribute_format,\n-\t\t \"argument of function call might be a candidate for a format attribute\");\n+      if (warn_suggest_attribute_format)\n+\t{\n+\t  tree rhstype = TREE_TYPE (val);\n+\t  const enum tree_code coder = TREE_CODE (rhstype);\n+\t  const enum tree_code codel = TREE_CODE (type);\n+\t  if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)\n+\t      && coder == codel\n+\t      && check_missing_format_attribute (type, rhstype))\n+\t    warning (OPT_Wsuggest_attribute_format,\n+\t\t     \"argument of function call might be a candidate \"\n+\t\t     \"for a format attribute\");\n+\t}\n+      maybe_warn_parm_abi (type, EXPR_LOC_OR_LOC (val, input_location));\n     }\n   return val;\n }\n@@ -8234,7 +8238,10 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n \treturn error_mark_node;\n \n       if (MAYBE_CLASS_TYPE_P (TREE_TYPE (fn)))\n-\tfn = build_cplus_new (TREE_TYPE (fn), fn, complain);\n+\t{\n+\t  fn = build_cplus_new (TREE_TYPE (fn), fn, complain);\n+\t  maybe_warn_parm_abi (TREE_TYPE (fn), loc);\n+\t}\n     }\n   return convert_from_reference (fn);\n }"}, {"sha": "b64fa6dafbc7d476e367da8069d2c7cf0251d16e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -6614,6 +6614,7 @@ extern bool type_has_unique_obj_representations (const_tree);\n extern bool scalarish_type_p\t\t\t(const_tree);\n extern bool type_has_nontrivial_default_init\t(const_tree);\n extern bool type_has_nontrivial_copy_init\t(const_tree);\n+extern void maybe_warn_parm_abi\t\t\t(tree, location_t);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n extern int zero_init_p\t\t\t\t(const_tree);\n extern bool check_abi_tag_redeclaration\t\t(const_tree, const_tree, const_tree);"}, {"sha": "74cf018fa31dfd5b69a2c09f4436f2303308d087", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -12387,6 +12387,9 @@ require_complete_types_for_parms (tree parms)\n \t{\n \t  relayout_decl (parms);\n \t  DECL_ARG_TYPE (parms) = type_passed_as (TREE_TYPE (parms));\n+\n+\t  maybe_warn_parm_abi (TREE_TYPE (parms),\n+\t\t\t       DECL_SOURCE_LOCATION (parms));\n \t}\n       else\n \t/* grokparms or complete_type_or_else will have already issued\n@@ -14639,7 +14642,11 @@ check_function_type (tree decl, tree current_function_parms)\n       TREE_TYPE (decl) = fntype;\n     }\n   else\n-    abstract_virtuals_error (decl, TREE_TYPE (fntype));\n+    {\n+      abstract_virtuals_error (decl, TREE_TYPE (fntype));\n+      maybe_warn_parm_abi (TREE_TYPE (fntype),\n+\t\t\t   DECL_SOURCE_LOCATION (decl));\n+    }\n }\n \n /* True iff FN is an implicitly-defined default constructor.  */"}, {"sha": "858d0d42537e7b47b5489aacc4013f5533a4f485", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 98, "deletions": 6, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"gimplify.h\"\n #include \"attribs.h\"\n+#include \"flags.h\"\n \n static tree bot_manip (tree *, int *, void *);\n static tree bot_replace (tree *, int *, void *);\n@@ -3596,21 +3597,112 @@ type_has_nontrivial_default_init (const_tree t)\n     return 0;\n }\n \n+/* Track classes with only deleted copy/move constructors so that we can warn\n+   if they are used in call/return by value.  */\n+\n+static GTY(()) hash_set<tree>* deleted_copy_types;\n+static void\n+remember_deleted_copy (const_tree t)\n+{\n+  if (!deleted_copy_types)\n+    deleted_copy_types = hash_set<tree>::create_ggc(37);\n+  deleted_copy_types->add (CONST_CAST_TREE (t));\n+}\n+void\n+maybe_warn_parm_abi (tree t, location_t loc)\n+{\n+  if (!deleted_copy_types\n+      || !deleted_copy_types->contains (t))\n+    return;\n+\n+  warning_at (loc, OPT_Wabi, \"the calling convention for %qT changes in \"\n+\t      \"-fabi-version=12 (GCC 8)\", t);\n+  static bool explained = false;\n+  if (!explained)\n+    {\n+      inform (loc, \" because all of its copy and move constructors \"\n+\t      \"are deleted\");\n+      explained = true;\n+    }\n+}\n+\n /* Returns true iff copying an object of type T (including via move\n    constructor) is non-trivial.  That is, T has no non-trivial copy\n-   constructors and no non-trivial move constructors.  */\n+   constructors and no non-trivial move constructors, and not all copy/move\n+   constructors are deleted.  This function implements the ABI notion of\n+   non-trivial copy, which has diverged from the one in the standard.  */\n \n bool\n-type_has_nontrivial_copy_init (const_tree t)\n+type_has_nontrivial_copy_init (const_tree type)\n {\n-  t = strip_array_types (CONST_CAST_TREE (t));\n+  tree t = strip_array_types (CONST_CAST_TREE (type));\n \n   if (CLASS_TYPE_P (t))\n     {\n       gcc_assert (COMPLETE_TYPE_P (t));\n-      return ((TYPE_HAS_COPY_CTOR (t)\n-\t       && TYPE_HAS_COMPLEX_COPY_CTOR (t))\n-\t      || TYPE_HAS_COMPLEX_MOVE_CTOR (t));\n+\n+      if (TYPE_HAS_COMPLEX_COPY_CTOR (t)\n+\t  || TYPE_HAS_COMPLEX_MOVE_CTOR (t))\n+\t/* Nontrivial.  */\n+\treturn true;\n+\n+      if (cxx_dialect < cxx11)\n+\t/* No deleted functions before C++11.  */\n+\treturn false;\n+\n+      /* Before ABI v12 we did a bitwise copy of types with only deleted\n+\t copy/move constructors.  */\n+      if (!abi_version_at_least (12)\n+\t  && !(warn_abi && abi_version_crosses (12)))\n+\treturn false;\n+\n+      bool saw_copy = false;\n+      bool saw_non_deleted = false;\n+\n+      if (CLASSTYPE_LAZY_MOVE_CTOR (t))\n+\tsaw_copy = saw_non_deleted = true;\n+      else if (CLASSTYPE_LAZY_COPY_CTOR (t))\n+\t{\n+\t  saw_copy = true;\n+\t  if (type_has_user_declared_move_constructor (t)\n+\t      || type_has_user_declared_move_assign (t))\n+\t    /* [class.copy]/8 If the class definition declares a move\n+\t       constructor or move assignment operator, the implicitly declared\n+\t       copy constructor is defined as deleted.... */;\n+\t  else\n+\t    /* Any other reason the implicitly-declared function would be\n+\t       deleted would also cause TYPE_HAS_COMPLEX_COPY_CTOR to be\n+\t       set.  */\n+\t    saw_non_deleted = true;\n+\t}\n+\n+      if (!saw_non_deleted && CLASSTYPE_METHOD_VEC (t))\n+\tfor (tree fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+\t  {\n+\t    tree fn = OVL_CURRENT (fns);\n+\t    if (copy_fn_p (fn))\n+\t      {\n+\t\tsaw_copy = true;\n+\t\tif (!DECL_DELETED_FN (fn))\n+\t\t  {\n+\t\t    /* Not deleted, therefore trivial.  */\n+\t\t    saw_non_deleted = true;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  }\n+\n+      gcc_assert (saw_copy);\n+\n+      if (saw_copy && !saw_non_deleted)\n+\t{\n+\t  if (warn_abi && abi_version_crosses (12))\n+\t    remember_deleted_copy (t);\n+\t  if (abi_version_at_least (12))\n+\t    return true;\n+\t}\n+\n+      return false;\n     }\n   else\n     return 0;"}, {"sha": "5534b89ccc66381e31bf9be9317b593f428dadf7", "filename": "gcc/testsuite/g++.dg/abi/invisiref1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1.C?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/80178\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wabi=10 -fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump \"foo .&D\" \"gimple\" } }\n+\n+struct A {\n+  A();\n+  A &operator=(A &&o);\n+  void *p;\n+};\n+void notdefined(A);\n+\n+void foo(A) { }\t\t\t// { dg-warning \"calling convention\" }\n+\n+A baz()\t\t\t\t// { dg-warning \"calling convention\" }\n+{\n+  return {};\n+}\n+\n+void bar() {\n+  foo({});\t\t\t// { dg-warning \"calling convention\" }\n+  notdefined({});\t\t// { dg-warning \"calling convention\" }\n+  baz();\t\t\t// { dg-warning \"calling convention\" }\n+}"}, {"sha": "aff7b1aaa4f474a0b25b33c5f6c65f6710a90a8d", "filename": "gcc/testsuite/g++.dg/abi/invisiref1a.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ec182d6ca9829004b3b78fca373b8659bf7c01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref1a.C?ref=f3ec182d6ca9829004b3b78fca373b8659bf7c01", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/80178\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fabi-version=11 -Wabi -fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump \"foo .D\" \"gimple\" } }\n+\n+struct A {\n+  A();\n+  A &operator=(A &&o);\n+  void *p;\n+};\n+void notdefined(A);\n+\n+void foo(A) { }\t\t\t// { dg-warning \"calling convention\" }\n+\n+A baz()\t\t\t\t// { dg-warning \"calling convention\" }\n+{\n+  return {};\n+}\n+\n+void bar() {\n+  foo({});\t\t\t// { dg-warning \"calling convention\" }\n+  notdefined({});\t\t// { dg-warning \"calling convention\" }\n+  baz();\t\t\t// { dg-warning \"calling convention\" }\n+}"}]}