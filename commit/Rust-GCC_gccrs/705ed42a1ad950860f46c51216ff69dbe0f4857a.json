{"sha": "705ed42a1ad950860f46c51216ff69dbe0f4857a", "node_id": "C_kwDOANBUbNoAKDcwNWVkNDJhMWFkOTUwODYwZjQ2YzUxMjE2ZmY2OWRiZTBmNDg1N2E", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-04T21:04:06Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-10-08T19:19:26Z"}, "message": "Fortran: error recovery for invalid types in array constructors [PR107000]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107000\n\t* arith.cc (gfc_arith_error): Define error message for\n\tARITH_INVALID_TYPE.\n\t(reduce_unary): Catch arithmetic expressions with invalid type.\n\t(reduce_binary_ac): Likewise.\n\t(reduce_binary_ca): Likewise.\n\t(reduce_binary_aa): Likewise.\n\t(eval_intrinsic): Likewise.\n\t(gfc_real2complex): Source expression must be of type REAL.\n\t* gfortran.h (enum arith): Add ARITH_INVALID_TYPE.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107000\n\t* gfortran.dg/pr107000.f90: New test.\n\nCo-authored-by: Mikael Morin <mikael@gcc.gnu.org>", "tree": {"sha": "5f8e301dd5220235bf4172d7c04ea02542394404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8e301dd5220235bf4172d7c04ea02542394404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/705ed42a1ad950860f46c51216ff69dbe0f4857a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705ed42a1ad950860f46c51216ff69dbe0f4857a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705ed42a1ad950860f46c51216ff69dbe0f4857a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705ed42a1ad950860f46c51216ff69dbe0f4857a/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ffbf87ca66f4ed9cd79cff675fabe2109e46e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffbf87ca66f4ed9cd79cff675fabe2109e46e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffbf87ca66f4ed9cd79cff675fabe2109e46e85"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "086b1f856b1b8745fa9a9caa5d69ddb1e12bdbe6", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=705ed42a1ad950860f46c51216ff69dbe0f4857a", "patch": "@@ -118,6 +118,9 @@ gfc_arith_error (arith code)\n     case ARITH_WRONGCONCAT:\n       p = G_(\"Illegal type in character concatenation at %L\");\n       break;\n+    case ARITH_INVALID_TYPE:\n+      p = G_(\"Invalid type in arithmetic operation at %L\");\n+      break;\n \n     default:\n       gfc_internal_error (\"gfc_arith_error(): Bad error code\");\n@@ -1268,7 +1271,10 @@ reduce_unary (arith (*eval) (gfc_expr *, gfc_expr **), gfc_expr *op,\n   head = gfc_constructor_copy (op->value.constructor);\n   for (c = gfc_constructor_first (head); c; c = gfc_constructor_next (c))\n     {\n-      rc = reduce_unary (eval, c->expr, &r);\n+      if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n+\trc = ARITH_INVALID_TYPE;\n+      else\n+\trc = reduce_unary (eval, c->expr, &r);\n \n       if (rc != ARITH_OK)\n \tbreak;\n@@ -1309,6 +1315,8 @@ reduce_binary_ac (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n \n       if (c->expr->expr_type == EXPR_CONSTANT)\n         rc = eval (c->expr, op2, &r);\n+      else if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n+\trc = ARITH_INVALID_TYPE;\n       else\n \trc = reduce_binary_ac (eval, c->expr, op2, &r);\n \n@@ -1361,6 +1369,8 @@ reduce_binary_ca (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n \n       if (c->expr->expr_type == EXPR_CONSTANT)\n \trc = eval (op1, c->expr, &r);\n+      else if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n+\trc = ARITH_INVALID_TYPE;\n       else\n \trc = reduce_binary_ca (eval, op1, c->expr, &r);\n \n@@ -1420,14 +1430,19 @@ reduce_binary_aa (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n        c && d;\n        c = gfc_constructor_next (c), d = gfc_constructor_next (d))\n     {\n+      if ((c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n+\t  || (d->expr->expr_type == EXPR_OP && d->expr->ts.type == BT_UNKNOWN))\n+\trc = ARITH_INVALID_TYPE;\n+      else\n \trc = reduce_binary (eval, c->expr, d->expr, &r);\n-\tif (rc != ARITH_OK)\n-\t  break;\n \n-\tgfc_replace_expr (c->expr, r);\n+      if (rc != ARITH_OK)\n+\tbreak;\n+\n+      gfc_replace_expr (c->expr, r);\n     }\n \n-  if (c || d)\n+  if (rc == ARITH_OK && (c || d))\n     rc = ARITH_INCOMMENSURATE;\n \n   if (rc != ARITH_OK)\n@@ -1638,6 +1653,8 @@ eval_intrinsic (gfc_intrinsic_op op,\n   else\n     rc = reduce_binary (eval.f3, op1, op2, &result);\n \n+  if (rc == ARITH_INVALID_TYPE)\n+    goto runtime;\n \n   /* Something went wrong.  */\n   if (op == INTRINSIC_POWER && rc == ARITH_PROHIBIT)\n@@ -2238,6 +2255,9 @@ gfc_real2complex (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_REAL)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_COMPLEX, kind, &src->where);\n \n   mpc_set_fr (result->value.complex, src->value.real, GFC_MPC_RND_MODE);"}, {"sha": "10bb098d136b6fda25073310c6525058aa7f8f66", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=705ed42a1ad950860f46c51216ff69dbe0f4857a", "patch": "@@ -226,7 +226,7 @@ enum gfc_intrinsic_op\n enum arith\n { ARITH_OK = 1, ARITH_OVERFLOW, ARITH_UNDERFLOW, ARITH_NAN,\n   ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT,\n-  ARITH_WRONGCONCAT\n+  ARITH_WRONGCONCAT, ARITH_INVALID_TYPE\n };\n \n /* Statements.  */"}, {"sha": "30289078c575700abd7bcb68ef10bc938086afa2", "filename": "gcc/testsuite/gfortran.dg/pr107000.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107000.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705ed42a1ad950860f46c51216ff69dbe0f4857a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107000.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107000.f90?ref=705ed42a1ad950860f46c51216ff69dbe0f4857a", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+! PR fortran/107000 - ICE in gfc_real2complex, reduce_unary, reduce_binary_*\n+! Contributed by G.Steinmetz\n+\n+program p\n+  real    :: y(1)\n+  complex :: x(1)\n+  x = (1.0, 2.0) * [real :: -'1']    ! { dg-error \"Operand of unary numeric operator\" }\n+  x = (1.0, 2.0) * [complex :: +'1'] ! { dg-error \"Operand of unary numeric operator\" }\n+  x = [complex :: -'1'] * (1.0, 2.0) ! { dg-error \"Operand of unary numeric operator\" }\n+  y = [complex :: -'1'] * 2          ! { dg-error \"Operand of unary numeric operator\" }\n+  y = 2 * [complex :: -'1']          ! { dg-error \"Operand of unary numeric operator\" }\n+  y = 2 * [complex :: -(.true.)]     ! { dg-error \"Operand of unary numeric operator\" }\n+  y = [complex :: -(.true.)] * 2     ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, - [real ::  -'1' ]        ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, - [real :: [-'1']]        ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, - [real ::  +(.true.) ]   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, - [real :: [+(.true.)]]   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real ::  -'1' ]      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real :: (-'1')]      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real ::  -'1' ] * 2      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: (-'1')] * 2      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [integer :: -('1')]   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [integer :: -('1')] * 2   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real :: 0, (-'1')]   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 0, (-'1')] * 2   ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real :: 0, -'1']     ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 0, -'1'] * 2     ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real :: 0, 1+'1']    ! { dg-error \"Operands of binary numeric operator\" }\n+  print *, [real :: 0, 1+'1'] * 2    ! { dg-error \"Operands of binary numeric operator\" }\n+  print *, [real :: 1, +(.true.)]    ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, -(.true.)]    ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, 2 * [real :: 1, +(.true.)]      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, +(.true.)] * 2      ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [1, 2] * [real :: 1, +(.true.)] ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, +(.true.)] * [1, 2] ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, 2] * [real :: 1, +(.true.)] ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, +(.true.)] * [real :: 1, 2] ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 0, -'1'] * [real :: 1, +(+(.true.))] ! { dg-error \"Operand of unary numeric operator\" }\n+  print *, [real :: 1, [(+(.true.))]] * [real :: 0, [(-'1')]] ! { dg-error \"Operand of unary numeric operator\" }\n+\n+  ! Legal:\n+  print *, 2 * [real :: 1, [2], 3]\n+  print *, [real :: 1, [2], 3] * 2\n+  print *, [real :: 1, [2], 3] * [real :: 1, [2], 3]\n+  print *, [real :: 1, [2], 3] * [integer :: 1, [2], 3]\n+  print *, [real :: 1, [2], 3] * [1, [2], 3]\n+  print *, [real :: 1,  huge(2.0)] * [real :: 1,  real(1.0)]\n+  print *, [real :: 1, -(huge(2.0))] * [real :: 1, +(real(1))]\n+end"}]}