{"sha": "996065b44049d0e525f3e28794868fdaee722f3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2MDY1YjQ0MDQ5ZDBlNTI1ZjNlMjg3OTQ4NjhmZGFlZTcyMmYzZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-02-12T14:38:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-02-12T14:38:25Z"}, "message": "pt.c (maybe_adjust_types_for_deduction, [...]): Remove spurious information in comment.\n\ncp:\n\t* pt.c (maybe_adjust_types_for_deduction, DEDUCE_ORDER case):\n\tRemove spurious information in comment. Allow further\n\tadjustments of REFERENCE_TYPE args.\ntestsuite:\n\t* g++.old-deja/g++.pt/spec40.C: New test.\n\nFrom-SVN: r39604", "tree": {"sha": "806c29a28bcde61c0db22d050ead14290a63b70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/806c29a28bcde61c0db22d050ead14290a63b70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996065b44049d0e525f3e28794868fdaee722f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996065b44049d0e525f3e28794868fdaee722f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996065b44049d0e525f3e28794868fdaee722f3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996065b44049d0e525f3e28794868fdaee722f3f/comments", "author": null, "committer": null, "parents": [{"sha": "82c18d5c67b2d121e8ef05c909f3e442c2ea742e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c18d5c67b2d121e8ef05c909f3e442c2ea742e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c18d5c67b2d121e8ef05c909f3e442c2ea742e"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "d1685b38ea8b2e2b5fbd66ed312343d7ba6ae33d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=996065b44049d0e525f3e28794868fdaee722f3f", "patch": "@@ -1,3 +1,9 @@\n+2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (maybe_adjust_types_for_deduction, DEDUCE_ORDER case):\n+\tRemove spurious information in comment. Allow further\n+\tadjustments of REFERENCE_TYPE args.\n+\n 2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* errfn.c (cp_deprecated): Tweak diagnostic text."}, {"sha": "bad8117162d13b8fd1ee0481b2d92063572af6ae", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=996065b44049d0e525f3e28794868fdaee722f3f", "patch": "@@ -7833,31 +7833,18 @@ maybe_adjust_types_for_deduction (strict, parm, arg)\n          compiler accepts it).\n \n          John also confirms that deduction should proceed as in a function\n-         call. Which implies the usual ARG and PARM bashing as DEDUCE_CALL.\n+         call. Which implies the usual ARG and PARM conversions as DEDUCE_CALL.\n          However, in ordering, ARG can have REFERENCE_TYPE, but no argument\n          to an actual call can have such a type.\n          \n-         When deducing against a REFERENCE_TYPE, we can either not change\n-         PARM's type, or we can change ARG's type too. The latter, though\n-         seemingly more safe, turns out to give the following quirk. Consider\n-         deducing a call to a `const int *' with the following template \n-         function parameters \n-           #1; T const *const &   ; T = int\n-           #2; T *const &         ; T = const int\n-           #3; T *                ; T = const int\n-         It looks like #1 is the more specialized.  Taken pairwise, #1 is\n-         more specialized than #2 and #2 is more specialized than #3, yet\n-         there is no ordering between #1 and #3.\n-         \n-         So, if ARG is a reference, we look though it when PARM is\n-         not a refence. When both are references we don't change either.  */\n+         If both ARG and PARM are REFERENCE_TYPE, we change neither.\n+         If only ARG is a REFERENCE_TYPE, we look through that and then\n+         proceed as with DEDUCE_CALL (which could further convert it).  */\n       if (TREE_CODE (*arg) == REFERENCE_TYPE)\n         {\n           if (TREE_CODE (*parm) == REFERENCE_TYPE)\n             return 0;\n           *arg = TREE_TYPE (*arg);\n-          result |= UNIFY_ALLOW_OUTER_LESS_CV_QUAL;\n-          goto skip_arg;\n         }\n       break;\n     default:\n@@ -7890,7 +7877,6 @@ maybe_adjust_types_for_deduction (strict, parm, arg)\n \t*arg = TYPE_MAIN_VARIANT (*arg);\n     }\n   \n-  skip_arg:;\n   /* [temp.deduct.call]\n      \n      If P is a cv-qualified type, the top level cv-qualifiers"}, {"sha": "4607aa8f6d27d748df62efca2b6195ef3f899788", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=996065b44049d0e525f3e28794868fdaee722f3f", "patch": "@@ -1,3 +1,7 @@\n+2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/spec40.C: New test.\n+\n 2001-02-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.robertl/eb63.C: Remove new initializer list"}, {"sha": "2d0ad90088cfb53e7638a9f71a0f1d1018636e1e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec40.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996065b44049d0e525f3e28794868fdaee722f3f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C?ref=996065b44049d0e525f3e28794868fdaee722f3f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 12 Feb 2001 <nathan@codesourcery.com>\n+\n+// More from bug 1617. We didn't resolve partial ordering properly. The\n+// std is rather vague about it anyway, DR 214 talks about this.\n+\n+template <typename T> int Foo (T const *) {return 1;}\n+template <unsigned I> int Foo (char const (&)[I]) {return 2;}\n+\n+int main ()\n+{\n+  return Foo (\"a\") != 2;\n+}"}]}