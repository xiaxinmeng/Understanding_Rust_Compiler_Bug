{"sha": "a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwZGUyMWZmYmE5YzFjOGI0YzUwOTZiZjlmYWYzZGVlYjA1NGM3Ng==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-12-11T22:04:06Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-12-11T22:04:06Z"}, "message": "re PR fortran/46370 ([Coarray] [OOP] ALLOCATE: Error allocating CLASS coarrays)\n\n2010-12-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46370\n        * primary.c (gfc_match_varspec): Pass information about\n        * codimension\n        to gfc_match_array_ref also for BT_CLASS.\n        * resolve.c (resolve_procedure): Correct check for C612.\n\n2010-12-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46370\n        * gfortran.dg/coarray_14.f90: New.\n\nFrom-SVN: r167715", "tree": {"sha": "8646350dc5a6c869ac5b7a700195ae944f31614a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8646350dc5a6c869ac5b7a700195ae944f31614a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dbe5c7838f306d8867802fa6e394d0fa5e1bf86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbe5c7838f306d8867802fa6e394d0fa5e1bf86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbe5c7838f306d8867802fa6e394d0fa5e1bf86"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "7c3fca8c35c17106736cf8c8b289fe5ebc9031ad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "patch": "@@ -1,3 +1,10 @@\n+2010-12-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46370\n+\t* primary.c (gfc_match_varspec): Pass information about codimension\n+\tto gfc_match_array_ref also for BT_CLASS.\n+\t* resolve.c (resolve_procedure): Correct check for C612.\n+\n 2010-12-11  Mikael Morin   <mikael@gcc.gnu.org>\n \t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n "}, {"sha": "1ec677b287bff7add87ec5740f501f8cada5010c", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "patch": "@@ -1783,7 +1783,11 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n       tail->type = REF_ARRAY;\n \n       m = gfc_match_array_ref (&tail->u.ar, equiv_flag ? NULL : sym->as,\n-\t\t\t       equiv_flag, sym->as ? sym->as->corank : 0);\n+\t\t\t       equiv_flag,\n+\t\t\t       sym->ts.type == BT_CLASS\n+\t\t\t       ? (CLASS_DATA (sym)->as\n+\t\t\t\t  ? CLASS_DATA (sym)->as->corank : 0)\n+\t\t\t       : (sym->as ? sym->as->corank : 0));\n       if (m != MATCH_YES)\n \treturn m;\n "}, {"sha": "ab49e93f8fe86302d74e4a59358d583b9f1ffdce", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "patch": "@@ -5027,13 +5027,6 @@ resolve_variable (gfc_expr *e)\n     {\n       gfc_ref *ref, *ref2 = NULL;\n \n-      if (e->ts.type == BT_CLASS)\n-\t{\n-\t  gfc_error (\"Polymorphic subobject of coindexed object at %L\",\n-\t\t     &e->where);\n-\t  t = FAILURE;\n-\t}\n-\n       for (ref = e->ref; ref; ref = ref->next)\n \t{\n \t  if (ref->type == REF_COMPONENT)\n@@ -5046,6 +5039,14 @@ resolve_variable (gfc_expr *e)\n \tif (ref->type == REF_COMPONENT)\n \t  break;\n \n+      /* Expression itself is not coindexed object.  */\n+      if (ref && e->ts.type == BT_CLASS)\n+\t{\n+\t  gfc_error (\"Polymorphic subobject of coindexed object at %L\",\n+\t\t     &e->where);\n+\t  t = FAILURE;\n+\t}\n+\n       /* Expression itself is coindexed object.  */\n       if (ref == NULL)\n \t{"}, {"sha": "934212fbddbedb0edc40d4b823051dddcc16c46f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "patch": "@@ -1,3 +1,8 @@\n+2010-12-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46370\n+\t* gfortran.dg/coarray_14.f90: New.\n+\n 2010-12-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/46842"}, {"sha": "9230ad4f32b8a715c441ed0350dd11abec53524c", "filename": "gcc/testsuite/gfortran.dg/coarray_14.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70de21ffba9c1c8b4c5096bf9faf3deeb054c76/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_14.f90?ref=a70de21ffba9c1c8b4c5096bf9faf3deeb054c76", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/46370\n+!\n+! Coarray checks\n+!\n+\n+! Check for C1229: \"A data-ref shall not be a polymorphic subobject of a\n+! coindexed object.\" which applies to function and subroutine calls.\n+module m\n+  implicit none\n+  type t\n+  contains\n+    procedure, nopass :: sub=>sub\n+    procedure, nopass :: func=>func\n+  end type t\n+  type t3\n+    type(t) :: nopoly\n+  end type t3\n+  type t2\n+    class(t), allocatable :: poly\n+    class(t3), allocatable :: poly2\n+  end type t2\n+contains\n+  subroutine sub()\n+  end subroutine sub\n+  function func()\n+    integer :: func\n+  end function func\n+end module m\n+\n+subroutine test(x)\n+  use m\n+  type(t2) :: x[*]\n+  integer :: i\n+  call x[1]%poly2%nopoly%sub() ! OK\n+  i = x[1]%poly2%nopoly%func() ! OK\n+  call x[1]%poly%sub() ! { dg-error \"Polymorphic subobject of coindexed object\" }\n+  i = x[1]%poly%func() ! { dg-error \"Polymorphic subobject of coindexed object\" }\n+end subroutine test\n+\n+\n+! Check for C617: \"... a data-ref shall not be a polymorphic subobject of a\n+! coindexed object or ...\" \n+! Before, the second allocate statment was failing - though it is no subobject.\n+program myTest\n+type t\n+end type t\n+class(t), allocatable :: a[:]\n+ allocate (t :: a) ! { dg-error \"Coarray specification required in ALLOCATE statement\" }\n+allocate (t :: a[*]) ! { dg-error \"allocatable scalar coarrays are not yet supported\" }\n+end program myTest\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}