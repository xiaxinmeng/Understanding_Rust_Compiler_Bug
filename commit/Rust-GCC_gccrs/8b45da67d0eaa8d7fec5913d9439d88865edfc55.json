{"sha": "8b45da67d0eaa8d7fec5913d9439d88865edfc55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0NWRhNjdkMGVhYThkN2ZlYzU5MTNkOTQzOWQ4ODg2NWVkZmM1NQ==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-06-16T02:23:44Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-06-16T02:23:44Z"}, "message": "Cutover to system.h:\n\nMon Jun 15 22:21:57 1998  Craig Burley  <burley@gnu.org>\n\tCutover to system.h:\n\t* Make-lang.in:\n\t* Makefile.in:\n\t* ansify.c:\n\t* bad.c:\n\t* bld.c:\n\t* com.c:\n\t* com.h:\n\t* expr.c:\n\t* fini.c:\n\t* g77spec.c:\n\t* implic.c:\n\t* intdoc.c:\n\t* intrin.c:\n\t* lex.c:\n\t* lex.h:\n\t* parse.c:\n\t* proj.c:\n\t* proj.h:\n\t* src.c:\n\t* src.h:\n\t* stb.c:\n\t* ste.c:\n\t* target.c:\n\t* top.c:\n\t* system.j: New file.\n\tUse toplev.h where appropriate:\n\t* Make-lang.in:\n\t* Makefile.in:\n\t* bad.c:\n\t* bld.c:\n\t* com.c:\n\t* lex.c:\n\t* ste.c:\n\t* top.c:\n\t* toplev.j: New file.\n\tConditionalize all dumping/reporting routines so they don't\n\tget built for gcc/egcs:\n\t* bld.c:\n\t* bld.h:\n\t* com.c:\n\t* equiv.c:\n\t* equiv.h:\n\t* sta.c:\n\t* stt.c:\n\t* stt.h:\n\t* symbol.c:\n\t* symbol.h:\n\tUse hconfig.h instead of config.h where appropriate:\n\t* Makefile.in (proj-h.o): Compile with -DUSE_HCONFIG.\n\t* fini.c: Define USE_HCONFIG before including proj.h.\n\t* Makefile.in (deps-kinda): Redirect stderr to stdout,\n\tto eliminate diagnostics vis-a-vis g77spec.c.\n\t* Makefile.in: Regenerate dependencies via deps-kinda.\n\t* lex.c (ffelex_file_fixed, ffelex_file_free): Eliminate\n\tapparently spurious warnings about uninitialized variables\n\t`c', `column', and so on.\n\nFrom-SVN: r20520", "tree": {"sha": "c5d64b68c6b98dba2288a4954b8f7a54c140001e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d64b68c6b98dba2288a4954b8f7a54c140001e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b45da67d0eaa8d7fec5913d9439d88865edfc55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b45da67d0eaa8d7fec5913d9439d88865edfc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b45da67d0eaa8d7fec5913d9439d88865edfc55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b45da67d0eaa8d7fec5913d9439d88865edfc55/comments", "author": null, "committer": null, "parents": [{"sha": "92a3a8d00dbfbf75862836a1b00db408f1ed633b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a3a8d00dbfbf75862836a1b00db408f1ed633b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a3a8d00dbfbf75862836a1b00db408f1ed633b"}], "stats": {"total": 649, "additions": 405, "deletions": 244}, "files": [{"sha": "4f9a05656e11666c7fb18a75e73410ce6b257404", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -1,3 +1,69 @@\n+Mon Jun 15 22:21:57 1998  Craig Burley  <burley@gnu.org>\n+\n+\tCutover to system.h:\n+\t* Make-lang.in:\n+\t* Makefile.in:\n+\t* ansify.c:\n+\t* bad.c:\n+\t* bld.c:\n+\t* com.c:\n+\t* com.h:\n+\t* expr.c:\n+\t* fini.c:\n+\t* g77spec.c:\n+\t* implic.c:\n+\t* intdoc.c:\n+\t* intrin.c:\n+\t* lex.c:\n+\t* lex.h:\n+\t* parse.c:\n+\t* proj.c:\n+\t* proj.h:\n+\t* src.c:\n+\t* src.h:\n+\t* stb.c:\n+\t* ste.c:\n+\t* target.c:\n+\t* top.c:\n+\t* system.j: New file.\n+\n+\tUse toplev.h where appropriate:\n+\t* Make-lang.in:\n+\t* Makefile.in:\n+\t* bad.c:\n+\t* bld.c:\n+\t* com.c:\n+\t* lex.c:\n+\t* ste.c:\n+\t* top.c:\n+\t* toplev.j: New file.\n+\t\n+\tConditionalize all dumping/reporting routines so they don't\n+\tget built for gcc/egcs:\n+\t* bld.c:\n+\t* bld.h:\n+\t* com.c:\n+\t* equiv.c:\n+\t* equiv.h:\n+\t* sta.c:\n+\t* stt.c:\n+\t* stt.h:\n+\t* symbol.c:\n+\t* symbol.h:\n+\n+\tUse hconfig.h instead of config.h where appropriate:\n+\t* Makefile.in (proj-h.o): Compile with -DUSE_HCONFIG.\n+\t* fini.c: Define USE_HCONFIG before including proj.h.\n+\n+\t* Makefile.in (deps-kinda): Redirect stderr to stdout,\n+\tto eliminate diagnostics vis-a-vis g77spec.c.\n+\n+\t* Makefile.in: Regenerate dependencies via deps-kinda.\n+\n+\t* lex.c (ffelex_file_fixed, ffelex_file_free): Eliminate\n+\tapparently spurious warnings about uninitialized variables\n+\t`c', `column', and so on.\n+\n Sat Jun 13 03:13:18 1998  Craig Burley  <burley@gnu.org>\n \n \t* g77spec.c (lang_specific_driver): Print out egcs"}, {"sha": "1b4f5d0abb7cdc5aadfed530d8080fc8fcc0bccb", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -204,12 +204,14 @@ F77_SRCS = \\\n  $(srcdir)/f/symbol.c \\\n  $(srcdir)/f/symbol.def \\\n  $(srcdir)/f/symbol.h \\\n+ $(srcdir)/f/system.j \\\n  $(srcdir)/f/target.c \\\n  $(srcdir)/f/target.h \\\n  $(srcdir)/f/tconfig.j \\\n  $(srcdir)/f/tm.j \\\n  $(srcdir)/f/top.c \\\n  $(srcdir)/f/top.h \\\n+ $(srcdir)/f/toplev.j \\\n  $(srcdir)/f/tree.j \\\n  $(srcdir)/f/type.c \\\n  $(srcdir)/f/type.h \\"}, {"sha": "fff69b335c0b2d7af7909a597f5f220143a67d90", "filename": "gcc/f/Makefile.in", "status": "modified", "additions": 149, "deletions": 144, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMakefile.in?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -245,8 +245,10 @@ INPUT_H = $(srcdir)/input.j $(srcdir)/../input.h\n OUTPUT_H = $(srcdir)/output.j $(srcdir)/../output.h\n RTL_H = $(srcdir)/rtl.j $(srcdir)/../rtl.h $(srcdir)/../rtl.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n+SYSTEM_H = $(srcdir)/system.j $(srcdir)/../system.h\n TCONFIG_H = $(srcdir)/tconfig.j ../tconfig.h\n TM_H = $(srcdir)/tm.j ../tm.h\n+TOPLEV_H = $(srcdir)/toplev.j $(srcdir)/../toplev.h\n TREE_H = $(srcdir)/tree.j $(srcdir)/../tree.h $(srcdir)/../real.h \\\n \t$(srcdir)/../tree.def $(srcdir)/../machmode.h $(srcdir)/../machmode.def\n \n@@ -255,176 +257,177 @@ TREE_H = $(srcdir)/tree.j $(srcdir)/../tree.h $(srcdir)/../real.h \\\n #Note that this command uses the host C compiler;\n # use HOST_CC=\"./xgcc -B./\" to use GCC in the build directory, for example.\n #Also note that this particular build file seems to want to use\n-# substitions: $(CONFIG_H) for config.h; $(TREE_H) for tree.h; and\n-# $(RTL_H) for rtl.h.  deps-kinda uses a sed script to do those\n+# substitions: $(CONFIG_H) for config.h; $(TREE_H) for tree.h;\n+# $(RTL_H) for rtl.h; etc..  deps-kinda uses a sed script to do those\n # substitutions, plus others for elegance.\n \n-ansify.o: ansify.c $(ASSERT_H)\n-bad.o: bad.c proj.h $(CONFIG_H) $(ASSERT_H) bad.h bad.def where.h $(GLIMITS_H) \\\n- top.h malloc.h $(FLAGS_H) com.h com-rt.def $(TREE_H) bld.h bld-op.def bit.h \\\n- info.h info-b.def info-k.def info-w.def target.h lex.h type.h \\\n- intrin.h intrin.def lab.h symbol.h symbol.def equiv.h storag.h \\\n- global.h name.h $(RTL_H)\n-bit.o: bit.c proj.h $(CONFIG_H) $(ASSERT_H) $(GLIMITS_H) bit.h malloc.h\n-bld.o: bld.c proj.h $(CONFIG_H) $(ASSERT_H) bld.h bld-op.def bit.h malloc.h \\\n- com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def info-w.def \\\n- target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h type.h lab.h \\\n- storag.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n- intrin.def $(RTL_H)\n-com.o: com.c proj.h $(CONFIG_H) $(ASSERT_H) $(FLAGS_H) $(RTL_H) $(TREE_H) $(OUTPUT_H) \\\n- $(CONVERT_H) com.h com-rt.def bld.h bld-op.def bit.h malloc.h info.h \\\n- info-b.def info-k.def info-w.def target.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h lex.h type.h intrin.h intrin.def lab.h symbol.h \\\n- symbol.def equiv.h storag.h global.h name.h expr.h implic.h src.h \\\n- st.h\n-data.o: data.c proj.h $(CONFIG_H) $(ASSERT_H) data.h bld.h bld-op.def bit.h \\\n+ansify.o: ansify.c $(HCONFIG_H) $(SYSTEM_H) $(ASSERT_H)\n+bad.o: bad.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bad.h bad.def where.h \\\n+ $(GLIMITS_H) top.h malloc.h $(FLAGS_H) com.h com-rt.def $(TREE_H) bld.h \\\n+ bld-op.def bit.h info.h info-b.def info-k.def info-w.def target.h \\\n+ lex.h type.h intrin.h intrin.def lab.h symbol.h symbol.def equiv.h \\\n+ storag.h global.h name.h $(TOPLEV_H)\n+bit.o: bit.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(GLIMITS_H) bit.h \\\n+ malloc.h\n+bld.o: bld.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bld.h bld-op.def bit.h \\\n  malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n- intrin.h intrin.def $(RTL_H) expr.h st.h\n-equiv.o: equiv.c proj.h $(CONFIG_H) $(ASSERT_H) equiv.h bld.h bld-op.def \\\n- bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n- info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n- type.h lab.h storag.h symbol.h symbol.def global.h name.h intrin.h \\\n- intrin.def $(RTL_H) data.h\n-expr.o: expr.c proj.h $(CONFIG_H) $(ASSERT_H) expr.h bld.h bld-op.def bit.h \\\n- malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n- info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n- type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n- intrin.h intrin.def $(RTL_H) implic.h src.h st.h stamp-str\n-fini.o: fini.c proj.h $(CONFIG_H) $(ASSERT_H) malloc.h\n-global.o: global.c proj.h $(CONFIG_H) $(ASSERT_H) global.h info.h info-b.def \\\n- info-k.def info-w.def target.h $(TREE_H) bad.h bad.def where.h $(GLIMITS_H) \\\n- top.h malloc.h lex.h type.h name.h symbol.h symbol.def bld.h \\\n- bld-op.def bit.h com.h com-rt.def lab.h storag.h $(RTL_H) intrin.h \\\n- intrin.def equiv.h\n-implic.o: implic.c proj.h $(CONFIG_H) $(ASSERT_H) implic.h info.h info-b.def \\\n- info-k.def info-w.def target.h $(TREE_H) bad.h bad.def where.h $(GLIMITS_H) \\\n- top.h malloc.h lex.h type.h symbol.h symbol.def bld.h bld-op.def \\\n- bit.h com.h com-rt.def lab.h storag.h $(RTL_H) intrin.h intrin.def \\\n- equiv.h global.h name.h src.h\n-info.o: info.c proj.h $(CONFIG_H) $(ASSERT_H) info.h info-b.def info-k.def \\\n- info-w.def target.h $(TREE_H) bad.h bad.def where.h $(GLIMITS_H) top.h \\\n- malloc.h lex.h type.h\n-intdoc.o: intdoc.c $(ASSERT_H) intrin.h intrin.def intdoc.h0 intdoc.h0\n-intrin.o: intrin.c proj.h $(CONFIG_H) $(ASSERT_H) intrin.h intrin.def bld.h \\\n+ intrin.h intrin.def\n+com.o: com.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(FLAGS_H) $(RTL_H) $(TOPLEV_H) \\\n+ $(TREE_H) $(OUTPUT_H) $(CONVERT_H) com.h com-rt.def bld.h bld-op.def bit.h \\\n+ malloc.h info.h info-b.def info-k.def info-w.def target.h bad.h \\\n+ bad.def where.h $(GLIMITS_H) top.h lex.h type.h intrin.h intrin.def \\\n+ lab.h symbol.h symbol.def equiv.h storag.h global.h name.h expr.h \\\n+ implic.h src.h st.h\n+data.o: data.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) data.h bld.h \\\n  bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n  info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\\n  lex.h type.h lab.h storag.h symbol.h symbol.def equiv.h global.h \\\n- name.h $(RTL_H) expr.h src.h\n-lab.o: lab.c proj.h $(CONFIG_H) $(ASSERT_H) lab.h com.h com-rt.def $(TREE_H) \\\n- bld.h bld-op.def bit.h malloc.h info.h info-b.def info-k.def \\\n+ name.h intrin.h intrin.def expr.h st.h\n+equiv.o: equiv.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) equiv.h bld.h \\\n+ bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n+ info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\\n+ lex.h type.h lab.h storag.h symbol.h symbol.def global.h name.h \\\n+ intrin.h intrin.def data.h\n+expr.o: expr.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) expr.h bld.h \\\n+ bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n+ info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\\n+ lex.h type.h lab.h storag.h symbol.h symbol.def equiv.h global.h \\\n+ name.h intrin.h intrin.def implic.h src.h st.h stamp-str\n+fini.o: fini.c proj.h $(HCONFIG_H) $(SYSTEM_H) $(ASSERT_H) malloc.h\n+global.o: global.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) global.h info.h \\\n+ info-b.def info-k.def info-w.def target.h $(TREE_H) bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h lex.h type.h name.h symbol.h \\\n+ symbol.def bld.h bld-op.def bit.h com.h com-rt.def lab.h storag.h \\\n+ intrin.h intrin.def equiv.h\n+implic.o: implic.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) implic.h info.h \\\n+ info-b.def info-k.def info-w.def target.h $(TREE_H) bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h lex.h type.h symbol.h symbol.def \\\n+ bld.h bld-op.def bit.h com.h com-rt.def lab.h storag.h intrin.h \\\n+ intrin.def equiv.h global.h name.h src.h\n+info.o: info.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) info.h info-b.def \\\n+ info-k.def info-w.def target.h $(TREE_H) bad.h bad.def where.h $(GLIMITS_H) \\\n+ top.h malloc.h lex.h type.h\n+intdoc.o: intdoc.c $(HCONFIG_H) $(SYSTEM_H) $(ASSERT_H) intrin.h intrin.def \\\n+ intdoc.h0 intdoc.h0\n+intrin.o: intrin.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) intrin.h \\\n+ intrin.def bld.h bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) \\\n+ info.h info-b.def info-k.def info-w.def target.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h lex.h type.h lab.h storag.h symbol.h \\\n+ symbol.def equiv.h global.h name.h expr.h src.h\n+lab.o: lab.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) lab.h com.h com-rt.def \\\n+ $(TREE_H) bld.h bld-op.def bit.h malloc.h info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h intrin.h intrin.def symbol.h symbol.def equiv.h storag.h \\\n- global.h name.h $(RTL_H)\n-lex.o: lex.c proj.h $(CONFIG_H) $(ASSERT_H) top.h malloc.h where.h $(GLIMITS_H) \\\n- bad.h bad.def com.h com-rt.def $(TREE_H) bld.h bld-op.def bit.h info.h \\\n- info-b.def info-k.def info-w.def target.h lex.h type.h intrin.h \\\n- intrin.def lab.h symbol.h symbol.def equiv.h storag.h global.h name.h \\\n- $(RTL_H) src.h $(FLAGS_H) $(INPUT_H) $(OUTPUT_H)\n-malloc.o: malloc.c proj.h $(CONFIG_H) $(ASSERT_H) malloc.h\n-name.o: name.c proj.h $(CONFIG_H) $(ASSERT_H) bad.h bad.def where.h \\\n+ global.h name.h\n+lex.o: lex.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) top.h malloc.h where.h \\\n+ $(GLIMITS_H) bad.h bad.def com.h com-rt.def $(TREE_H) bld.h bld-op.def \\\n+ bit.h info.h info-b.def info-k.def info-w.def target.h lex.h type.h \\\n+ intrin.h intrin.def lab.h symbol.h symbol.def equiv.h storag.h \\\n+ global.h name.h src.h $(FLAGS_H) $(INPUT_H) $(TOPLEV_H) $(OUTPUT_H)\n+malloc.o: malloc.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) malloc.h\n+name.o: name.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bad.h bad.def where.h \\\n  $(GLIMITS_H) top.h malloc.h name.h global.h info.h info-b.def info-k.def \\\n  info-w.def target.h $(TREE_H) lex.h type.h symbol.h symbol.def bld.h \\\n- bld-op.def bit.h com.h com-rt.def lab.h storag.h $(RTL_H) intrin.h \\\n- intrin.def equiv.h src.h\n-parse.o: parse.c proj.h $(CONFIG_H) $(ASSERT_H) top.h malloc.h where.h \\\n- $(GLIMITS_H) com.h com-rt.def $(TREE_H) bld.h bld-op.def bit.h info.h \\\n- info-b.def info-k.def info-w.def target.h bad.h bad.def lex.h type.h \\\n- intrin.h intrin.def lab.h symbol.h symbol.def equiv.h storag.h \\\n- global.h name.h $(RTL_H) version.h $(FLAGS_H)\n-proj.o: proj.c proj.h $(CONFIG_H) $(ASSERT_H) $(GLIMITS_H)\n-src.o: src.c proj.h $(CONFIG_H) $(ASSERT_H) src.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h\n-st.o: st.c proj.h $(CONFIG_H) $(ASSERT_H) st.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h lex.h symbol.h symbol.def bld.h bld-op.def \\\n- bit.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def info-w.def \\\n- target.h type.h lab.h storag.h $(RTL_H) intrin.h intrin.def equiv.h \\\n+ bld-op.def bit.h com.h com-rt.def lab.h storag.h intrin.h intrin.def \\\n+ equiv.h src.h\n+parse.o: parse.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) top.h malloc.h \\\n+ where.h $(GLIMITS_H) com.h com-rt.def $(TREE_H) bld.h bld-op.def bit.h \\\n+ info.h info-b.def info-k.def info-w.def target.h bad.h bad.def lex.h \\\n+ type.h intrin.h intrin.def lab.h symbol.h symbol.def equiv.h storag.h \\\n+ global.h name.h version.h $(FLAGS_H)\n+proj.o: proj.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(GLIMITS_H)\n+src.o: src.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) src.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h\n+st.o: st.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) st.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h lex.h symbol.h symbol.def bld.h \\\n+ bld-op.def bit.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n+ info-w.def target.h type.h lab.h storag.h intrin.h intrin.def equiv.h \\\n  global.h name.h sta.h stamp-str stb.h expr.h stp.h stt.h stc.h std.h \\\n  stv.h stw.h ste.h sts.h stu.h\n-sta.o: sta.c proj.h $(CONFIG_H) $(ASSERT_H) sta.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h lex.h stamp-str symbol.h symbol.def bld.h \\\n- bld-op.def bit.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n- info-w.def target.h type.h lab.h storag.h $(RTL_H) intrin.h intrin.def \\\n- equiv.h global.h name.h implic.h stb.h expr.h stp.h stt.h stc.h std.h \\\n- stv.h stw.h\n-stb.o: stb.c proj.h $(CONFIG_H) $(ASSERT_H) stb.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h expr.h bld.h bld-op.def bit.h com.h \\\n+sta.o: sta.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) sta.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h lex.h stamp-str symbol.h symbol.def \\\n+ bld.h bld-op.def bit.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n+ info-k.def info-w.def target.h type.h lab.h storag.h intrin.h \\\n+ intrin.def equiv.h global.h name.h implic.h stb.h expr.h stp.h stt.h \\\n+ stc.h std.h stv.h stw.h\n+stb.o: stb.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stb.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h expr.h bld.h bld-op.def bit.h com.h \\\n  com-rt.def $(TREE_H) info.h info-b.def info-k.def info-w.def target.h \\\n  lex.h type.h lab.h storag.h symbol.h symbol.def equiv.h global.h \\\n- name.h intrin.h intrin.def $(RTL_H) stp.h stt.h stamp-str src.h sta.h stc.h\n-stc.o: stc.c proj.h $(CONFIG_H) $(ASSERT_H) stc.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h bld.h bld-op.def bit.h com.h com-rt.def \\\n- $(TREE_H) info.h info-b.def info-k.def info-w.def target.h lex.h type.h \\\n- lab.h storag.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n- intrin.def $(RTL_H) expr.h stp.h stt.h stamp-str data.h implic.h src.h sta.h \\\n- std.h stv.h stw.h\n-std.o: std.c proj.h $(CONFIG_H) $(ASSERT_H) std.h bld.h bld-op.def bit.h \\\n- malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n+ name.h intrin.h intrin.def stp.h stt.h stamp-str src.h sta.h stc.h\n+stc.o: stc.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stc.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h bld.h bld-op.def bit.h com.h \\\n+ com-rt.def $(TREE_H) info.h info-b.def info-k.def info-w.def target.h \\\n+ lex.h type.h lab.h storag.h symbol.h symbol.def equiv.h global.h \\\n+ name.h intrin.h intrin.def expr.h stp.h stt.h stamp-str data.h implic.h \\\n+ src.h sta.h std.h stv.h stw.h\n+std.o: std.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) std.h bld.h bld-op.def \\\n+ bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n- intrin.h intrin.def $(RTL_H) stp.h stt.h stamp-str stv.h stw.h sta.h ste.h \\\n- sts.h\n-ste.o: ste.c proj.h $(CONFIG_H) $(ASSERT_H) $(RTL_H) $(TREE_H) $(OUTPUT_H) ste.h \\\n- bld.h bld-op.def bit.h malloc.h com.h com-rt.def info.h info-b.def \\\n+ intrin.h intrin.def stp.h stt.h stamp-str stv.h stw.h sta.h ste.h sts.h\n+ste.o: ste.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(RTL_H) $(TOPLEV_H) ste.h \\\n+ bld.h bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h \\\n+ info-b.def info-k.def info-w.def target.h bad.h bad.def where.h \\\n+ $(GLIMITS_H) top.h lex.h type.h lab.h storag.h symbol.h symbol.def \\\n+ equiv.h global.h name.h intrin.h intrin.def stp.h stt.h stamp-str sts.h \\\n+ stv.h stw.h expr.h sta.h\n+storag.o: storag.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) storag.h bld.h \\\n+ bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n  info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\\n- lex.h type.h lab.h storag.h symbol.h symbol.def equiv.h global.h \\\n- name.h intrin.h intrin.def stp.h stt.h stamp-str sts.h stv.h stw.h expr.h \\\n- sta.h\n-storag.o: storag.c proj.h $(CONFIG_H) $(ASSERT_H) storag.h bld.h bld-op.def \\\n+ lex.h type.h lab.h symbol.h symbol.def equiv.h global.h name.h \\\n+ intrin.h intrin.def data.h\n+stp.o: stp.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stp.h bld.h bld-op.def \\\n  bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n- type.h lab.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n- intrin.def $(RTL_H) data.h\n-stp.o: stp.c proj.h $(CONFIG_H) $(ASSERT_H) stp.h bld.h bld-op.def bit.h \\\n- malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n- info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n- intrin.h intrin.def $(RTL_H) stt.h\n-str.o: str.c proj.h $(CONFIG_H) $(ASSERT_H) src.h bad.h bad.def where.h \\\n- $(GLIMITS_H) top.h malloc.h stamp-str lex.h\n-sts.o: sts.c proj.h $(CONFIG_H) $(ASSERT_H) sts.h malloc.h com.h com-rt.def \\\n- $(TREE_H) bld.h bld-op.def bit.h info.h info-b.def info-k.def info-w.def \\\n- target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h type.h intrin.h \\\n- intrin.def lab.h symbol.h symbol.def equiv.h storag.h global.h name.h \\\n- $(RTL_H)\n-stt.o: stt.c proj.h $(CONFIG_H) $(ASSERT_H) stt.h top.h malloc.h where.h \\\n- $(GLIMITS_H) bld.h bld-op.def bit.h com.h com-rt.def $(TREE_H) info.h \\\n- info-b.def info-k.def info-w.def target.h bad.h bad.def lex.h type.h \\\n- lab.h storag.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n- intrin.def $(RTL_H) stp.h expr.h sta.h stamp-str\n-stu.o: stu.c proj.h $(CONFIG_H) $(ASSERT_H) bld.h bld-op.def bit.h malloc.h \\\n- com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def info-w.def \\\n- target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h type.h lab.h \\\n- storag.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n- intrin.def $(RTL_H) implic.h stu.h sta.h stamp-str\n-stv.o: stv.c proj.h $(CONFIG_H) $(ASSERT_H) stv.h lab.h com.h com-rt.def \\\n- $(TREE_H) bld.h bld-op.def bit.h malloc.h info.h info-b.def info-k.def \\\n+ intrin.h intrin.def stt.h\n+str.o: str.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) src.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h malloc.h stamp-str lex.h\n+sts.o: sts.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) sts.h malloc.h com.h \\\n+ com-rt.def $(TREE_H) bld.h bld-op.def bit.h info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n- type.h intrin.h intrin.def symbol.h symbol.def equiv.h storag.h \\\n- global.h name.h $(RTL_H)\n-stw.o: stw.c proj.h $(CONFIG_H) $(ASSERT_H) stw.h bld.h bld-op.def bit.h \\\n+ type.h intrin.h intrin.def lab.h symbol.h symbol.def equiv.h storag.h \\\n+ global.h name.h\n+stt.o: stt.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stt.h top.h malloc.h \\\n+ where.h $(GLIMITS_H) bld.h bld-op.def bit.h com.h com-rt.def $(TREE_H) \\\n+ info.h info-b.def info-k.def info-w.def target.h bad.h bad.def lex.h \\\n+ type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n+ intrin.h intrin.def stp.h expr.h sta.h stamp-str\n+stu.o: stu.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bld.h bld-op.def bit.h \\\n  malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n- intrin.h intrin.def $(RTL_H) stv.h sta.h stamp-str\n-symbol.o: symbol.c proj.h $(CONFIG_H) $(ASSERT_H) symbol.h symbol.def bld.h \\\n- bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n+ intrin.h intrin.def implic.h stu.h sta.h stamp-str\n+stv.o: stv.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stv.h lab.h com.h \\\n+ com-rt.def $(TREE_H) bld.h bld-op.def bit.h malloc.h info.h info-b.def \\\n  info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\\n- lex.h type.h lab.h storag.h $(RTL_H) intrin.h intrin.def equiv.h \\\n- global.h name.h src.h st.h\n-target.o: target.c proj.h $(CONFIG_H) $(ASSERT_H) $(GLIMITS_H) target.h $(TREE_H) \\\n- bad.h bad.def where.h top.h malloc.h info.h info-b.def info-k.def \\\n- info-w.def type.h lex.h\n-top.o: top.c proj.h $(CONFIG_H) $(ASSERT_H) top.h malloc.h where.h $(GLIMITS_H) \\\n- bad.h bad.def bit.h bld.h bld-op.def com.h com-rt.def $(TREE_H) info.h \\\n- info-b.def info-k.def info-w.def target.h lex.h type.h lab.h storag.h \\\n- symbol.h symbol.def equiv.h global.h name.h intrin.h intrin.def $(RTL_H) \\\n- data.h expr.h implic.h src.h st.h $(FLAGS_H)\n-type.o: type.c proj.h $(CONFIG_H) $(ASSERT_H) type.h malloc.h\n+ lex.h type.h intrin.h intrin.def symbol.h symbol.def equiv.h storag.h \\\n+ global.h name.h\n+stw.o: stw.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) stw.h bld.h bld-op.def \\\n+ bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def info-k.def \\\n+ info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n+ type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n+ intrin.h intrin.def stv.h sta.h stamp-str\n+symbol.o: symbol.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) symbol.h \\\n+ symbol.def bld.h bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) \\\n+ info.h info-b.def info-k.def info-w.def target.h bad.h bad.def \\\n+ where.h $(GLIMITS_H) top.h lex.h type.h lab.h storag.h intrin.h \\\n+ intrin.def equiv.h global.h name.h src.h st.h\n+target.o: target.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(GLIMITS_H) \\\n+ target.h $(TREE_H) bad.h bad.def where.h top.h malloc.h info.h \\\n+ info-b.def info-k.def info-w.def type.h lex.h\n+top.o: top.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) top.h malloc.h where.h \\\n+ $(GLIMITS_H) bad.h bad.def bit.h bld.h bld-op.def com.h com-rt.def \\\n+ $(TREE_H) info.h info-b.def info-k.def info-w.def target.h lex.h type.h \\\n+ lab.h storag.h symbol.h symbol.def equiv.h global.h name.h intrin.h \\\n+ intrin.def data.h expr.h implic.h src.h st.h $(FLAGS_H) $(TOPLEV_H)\n+type.o: type.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) type.h malloc.h\n version.o: version.c\n-where.o: where.c proj.h $(CONFIG_H) $(ASSERT_H) where.h $(GLIMITS_H) top.h \\\n- malloc.h lex.h\n+where.o: where.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) where.h $(GLIMITS_H) \\\n+ top.h malloc.h lex.h\n \n # The rest of this list (Fortran 77 language-specific files) is hand-generated.\n \n@@ -462,7 +465,7 @@ fini.o:\n \t      `echo $(srcdir)/fini.c | sed 's,^\\./,,'` -o $@\n \n proj-h.o: proj.o\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n+\t$(HOST_CC) -c -DUSE_HCONFIG $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t      `echo $(srcdir)/proj.c | sed 's,^\\./,,'` -o $@\n \n # Other than str-*.j, the *.j files are dummy #include files\n@@ -484,7 +487,7 @@ proj-h.o: proj.o\n # as will be the case with proj.h in a clean directory.\n MG=-MG\n deps-kinda:\n-\t$(HOST_CC) -DMAKING_DEPENDENCIES -MM $(MG) *.c | \\\n+\t$(HOST_CC) -DMAKING_DEPENDENCIES -MM $(MG) *.c 2>&1 | \\\n \t  sed -e 's: \\([.]/\\)*assert[.]j: $$(ASSERT_H):g' \\\n \t      -e 's: \\([.]/\\)*config[.]j: $$(CONFIG_H):g' \\\n \t      -e 's: \\([.]/\\)*convert[.]j: $$(CONVERT_H):g' \\\n@@ -494,8 +497,10 @@ deps-kinda:\n \t      -e 's: \\([.]/\\)*input[.]j: $$(INPUT_H):g' \\\n \t      -e 's: \\([.]/\\)*output[.]j: $$(OUTPUT_H):g' \\\n \t      -e 's: \\([.]/\\)*rtl[.]j: $$(RTL_H):g' \\\n+\t      -e 's: \\([.]/\\)*system[.]j: $$(SYSTEM_H):g' \\\n \t      -e 's: \\([.]/\\)*tconfig[.]j: $$(TCONFIG_H):g' \\\n \t      -e 's: \\([.]/\\)*tm[.]j: $$(TM_H):g' \\\n+\t      -e 's: \\([.]/\\)*toplev[.]j: $$(TOPLEV_H):g' \\\n \t      -e 's: \\([.]/\\)*tree[.]j: $$(TREE_H):g' \\\n \t      -e 's: \\([.]/\\)*str[.]h: stamp-str:g' \\\n \t      -e 's:.*g77spec.*::g' \\"}, {"sha": "b1838c1caac1b4a00ce145ecbb7fb73804faf04a", "filename": "gcc/f/ansify.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fansify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fansify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fansify.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -22,12 +22,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* From f/proj.h, which uses #error -- not all C compilers\n    support that, and we want *this* program to be compilable\n    by pretty much any C compiler.  */\n-\n-#include \"assert.j\"\t\t/* Use gcc's assert.h. */\n-#include <stdio.h>\n+#include \"hconfig.j\"\n+#include \"system.j\"\n+#include \"assert.j\"\n #include <stddef.h>\n-#include <stdlib.h>\n-#include <string.h>\n \n typedef enum\n   {"}, {"sha": "a2a4832164e8d1c33c948473e300ed09a1634e29", "filename": "gcc/f/bad.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -37,10 +37,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"bad.h\"\n #include \"flags.j\"\n #include \"com.h\"\n+#include \"toplev.j\"\n #include \"where.h\"\n \n /* Externals defined here. */\n@@ -457,7 +457,7 @@ ffebad_finish ()\n   if (ffebad_places_ == 0)\n     {\n       /* Didn't output \"warning:\" string, capitalize it for message.  */\n-      if ((s[0] != '\\0') && isalpha (s[0]) && islower (s[0]))\n+      if ((s[0] != '\\0') && ISALPHA (s[0]) && ISLOWER (s[0]))\n \t{\n \t  char c;\n \n@@ -486,7 +486,7 @@ ffebad_finish ()\n       if (c == '%')\n \t{\n \t  c = ffebad_message_[++i];\n-\t  if (isalpha (c) && isupper (c))\n+\t  if (ISALPHA (c) && ISUPPER (c))\n \t    {\n \t      index = c - 'A';\n \n@@ -504,7 +504,7 @@ ffebad_finish ()\n \t\t    bufi = ffebad_bufputs_ (buf, bufi, s);\n \t\t}\n \t    }\n-\t  else if (isdigit (c))\n+\t  else if (ISDIGIT (c))\n \t    {\n \t      index = c - '0';\n "}, {"sha": "e8002b8e10fa09ed0f2cf5f532263c892ef194e6", "filename": "gcc/f/bld.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -36,7 +36,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"bld.h\"\n #include \"bit.h\"\n #include \"info.h\"\n@@ -446,6 +445,7 @@ ffebld_constant_cmp (ffebldConstant c1, ffebldConstant c2)\n \n    Displays the constant in summary form.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffebld_constant_dump (ffebldConstant c)\n {\n@@ -863,6 +863,7 @@ ffebld_constant_dump (ffebldConstant c)\n       break;\n     }\n }\n+#endif\n \n /* ffebld_constant_is_magical -- Determine if integer is \"magical\"\n \n@@ -2002,6 +2003,7 @@ ffebld_constant_new_typeless_val (ffebldConst type, ffetargetTypeless val)\n    supplied, is an ffebit object that is consulted as to whether the\n    constant at a particular offset is valid.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffebld_constantarray_dump (ffebldConstantArray array, ffeinfoBasictype bt,\n \t\t      ffeinfoKindtype kt, ffetargetOffset size, ffebit bits)\n@@ -2057,6 +2059,7 @@ ffebld_constantarray_dump (ffebldConstantArray array, ffeinfoBasictype bt,\n   fprintf (dmpout, \"\\\\)\");\n \n }\n+#endif\n \n /* ffebld_constantarray_get -- Get a value from an array of constants\n \n@@ -4409,6 +4412,7 @@ ffebld_constantarray_put (ffebldConstantArray array, ffeinfoBasictype bt,\n \n    See prototype.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffebld_constantunion_dump (ffebldConstantUnion u, ffeinfoBasictype bt,\n \t\t\t   ffeinfoKindtype kt)\n@@ -4737,12 +4741,14 @@ ffebld_constantunion_dump (ffebldConstantUnion u, ffeinfoBasictype bt,\n       break;\n     }\n }\n+#endif\n \n /* ffebld_dump -- Dump expression tree in concise form\n \n    ffebld b;\n    ffebld_dump(b);  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffebld_dump (ffebld b)\n {\n@@ -4870,12 +4876,14 @@ ffebld_dump (ffebld b)\n \t}\n     }\n }\n+#endif\n \n /* ffebld_dump_prefix -- Dump the prefix for a constant of a given type\n \n    ffebld_dump_prefix(dmpout,FFEINFO_basictypeINTEGER,\n \t FFEINFO_kindtypeINTEGER1);  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffebld_dump_prefix (FILE *out, ffeinfoBasictype bt, ffeinfoKindtype kt)\n {\n@@ -5172,6 +5180,7 @@ ffebld_dump_prefix (FILE *out, ffeinfoBasictype bt, ffeinfoKindtype kt)\n       break;\n     }\n }\n+#endif\n \n /* ffebld_init_0 -- Initialize the module\n "}, {"sha": "406ac58c9e718f9edbccb0a0e1b3bbf2afe0f8f9", "filename": "gcc/f/bld.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -477,7 +477,9 @@ extern struct _ffebld_pool_stack_ ffebld_pool_stack_;\n /* Declare functions with prototypes. */\n \n int ffebld_constant_cmp (ffebldConstant c1, ffebldConstant c2);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffebld_constant_dump (ffebldConstant c);\n+#endif\n bool ffebld_constant_is_magical (ffebldConstant c);\n bool ffebld_constant_is_zero (ffebldConstant c);\n #if FFETARGET_okCHARACTER1\n@@ -680,8 +682,10 @@ ffebldConstant ffebld_constant_new_typeless_ov (ffelexToken t);\n ffebldConstant ffebld_constant_new_typeless_val (ffebldConst type,\n \t\t\t\t\t\t ffetargetTypeless val);\n ffebldConstant ffebld_constant_negated (ffebldConstant c);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffebld_constantarray_dump (ffebldConstantArray array, ffeinfoBasictype bt,\n \t\t     ffeinfoKindtype kt, ffetargetOffset size, ffebit bits);\n+#endif\n ffebldConstantUnion ffebld_constantarray_get (ffebldConstantArray array,\n \t   ffeinfoBasictype bt, ffeinfoKindtype kt, ffetargetOffset offset);\n void ffebld_constantarray_kill (ffebldConstantArray array, ffeinfoBasictype bt,\n@@ -698,10 +702,12 @@ void ffebld_constantarray_preparray (void **aptr, void **cptr, size_t *size,\n \t\t\t\t ffeinfoBasictype cbt, ffeinfoKindtype ckt);\n void ffebld_constantarray_put (ffebldConstantArray array, ffeinfoBasictype bt,\n   ffeinfoKindtype kt, ffetargetOffset offset, ffebldConstantUnion constant);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffebld_constantunion_dump (ffebldConstantUnion u, ffeinfoBasictype bt,\n \t\t\t\tffeinfoKindtype kt);\n void ffebld_dump (ffebld b);\n void ffebld_dump_prefix (FILE *out, ffeinfoBasictype bt, ffeinfoKindtype kt);\n+#endif\n void ffebld_init_0 (void);\n void ffebld_init_1 (void);\n void ffebld_init_2 (void);"}, {"sha": "3bb4921ea062e497ce32fe0bb046f0f3b303c5dc", "filename": "gcc/f/com.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -87,9 +87,9 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"proj.h\"\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-#include \"config.j\"\n #include \"flags.j\"\n #include \"rtl.j\"\n+#include \"toplev.j\"\n #include \"tree.j\"\n #include \"output.j\"  /* Must follow tree.j so TREE_CODE is defined! */\n #include \"convert.j\"\n@@ -11484,7 +11484,9 @@ ffecom_end_transition ()\n   if (ffe_is_ffedebug ())\n     {\n       ffestorag_report ();\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n       ffesymbol_report_all ();\n+#endif\n     }\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n@@ -11569,7 +11571,9 @@ ffecom_exec_transition ()\n   if (ffe_is_ffedebug ())\n     {\n       ffestorag_report ();\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n       ffesymbol_report_all ();\n+#endif\n     }\n \n   if (inhibited)"}, {"sha": "db8f4693f87d543d629ebf84103f798542018f07", "filename": "gcc/f/com.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -83,8 +83,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    to build the libf2c with which g77-generated code is linked, or there\n    will probably be bugs, some of them difficult to detect or even trigger.  */\n \n-#include \"config.j\"\n-\n /* Do we need int (for 32-bit or 64-bit systems) or long (16-bit or\n    normally 32-bit) for f2c-type integers? */\n "}, {"sha": "33f2eed6065d53f7145cd9c66f44b7497926b507", "filename": "gcc/f/equiv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fequiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fequiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fequiv.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -866,13 +866,15 @@ ffeequiv_add (ffeequiv eq, ffebld list, ffelexToken t)\n    ffeequiv eq;\n    ffeequiv_dump(eq);  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffeequiv_dump (ffeequiv eq)\n {\n   if (ffeequiv_common (eq) != NULL)\n     fprintf (dmpout, \"(common %s) \", ffesymbol_text (ffeequiv_common (eq)));\n   ffebld_dump (ffeequiv_list (eq));\n }\n+#endif\n \n /* ffeequiv_exec_transition -- Do the hard work on all the equivalence objects\n "}, {"sha": "daf0cee1dc7ad37f616e2eb47848425daf045cec", "filename": "gcc/f/equiv.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fequiv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fequiv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fequiv.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -62,7 +62,9 @@ struct _ffeequiv_\n /* Declare functions with prototypes. */\n \n void ffeequiv_add (ffeequiv eq, ffebld list, ffelexToken t);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffeequiv_dump (ffeequiv eq);\n+#endif\n void ffeequiv_exec_transition (void);\n void ffeequiv_init_2 (void);\n void ffeequiv_kill (ffeequiv victim);"}, {"sha": "7e7bf8678757ea626730b4f82deee243165a2a27", "filename": "gcc/f/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -31,7 +31,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"expr.h\"\n #include \"bad.h\"\n #include \"bld.h\"\n@@ -9477,7 +9476,7 @@ static bool\n ffeexpr_isdigits_ (char *p)\n {\n   for (; *p != '\\0'; ++p)\n-    if (!isdigit (*p))\n+    if (! ISDIGIT (*p))\n       return FALSE;\n   return TRUE;\n }"}, {"sha": "44c749f38610b5de000eec6585962b94d9070861", "filename": "gcc/f/fini.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -19,8 +19,8 @@ along with GNU Fortran; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#define USE_HCONFIG\n #include \"proj.h\"\n-#include <ctype.h>\n #include \"malloc.h\"\n \n #define MAXNAMELEN 100\n@@ -306,7 +306,7 @@ main (int argc, char **argv)\n \t}\n       else if (cc != EOF)\n \t{\n-\t  while (((cc = getc (in)) != EOF) && (!isalnum (cc)))\n+\t  while (((cc = getc (in)) != EOF) && (! ISALNUM (cc)))\n \t    ;\n \t  ungetc (cc, in);\n \t  break;\n@@ -377,7 +377,7 @@ main (int argc, char **argv)\n       for (i = 0; i < newname->namelen; ++i)\n \t{\n \t  cc = buf[i];\n-\t  if (isascii (cc) && isalpha (cc))\n+\t  if (ISALPHA (cc))\n \t    {\n \t      newname->name_uc[i] = toupper (cc);\n \t      newname->name_lc[i] = tolower (cc);"}, {"sha": "7c78018310623f16f7fad7db04769607214caceb", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -45,20 +45,8 @@ Boston, MA 02111-1307, USA.  */\n    `gcc' itself.  */\n \n #include \"config.h\"\n-\n-#include <sys/types.h>\n-#include <stdio.h>\n-\n+#include \"system.h\"\n #include \"gansidecl.h\"\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#endif\n-\n #include <f/version.h>\n \n #ifndef MATH_LIBRARY"}, {"sha": "bee8edfb3a53e19c4e9726e60a6da980407758c0", "filename": "gcc/f/implic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fimplic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fimplic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fimplic.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -31,7 +31,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"implic.h\"\n #include \"info.h\"\n #include \"src.h\"\n@@ -93,7 +92,7 @@ static ffeimplic_\n ffeimplic_lookup_ (char c)\n {\n   /* NOTE: This is definitely ASCII-specific!!  */\n-  if (isalpha (c) || (c == '_'))\n+  if (ISALPHA (c) || (c == '_'))\n     return &ffeimplic_table_[c - 'A'];\n   return NULL;\n }"}, {"sha": "648b75afb74e74fe153077546965092057427190", "filename": "gcc/f/intdoc.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fintdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fintdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -20,16 +20,12 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n /* From f/proj.h, which uses #error -- not all C compilers\n-   support that, and we want _this_ program to be compilable\n+   support that, and we want *this* program to be compilable\n    by pretty much any C compiler.  */\n-\n-#include \"assert.j\"\t\t/* Use gcc's assert.h. */\n-#include <stdio.h>\n+#include \"hconfig.j\"\n+#include \"system.j\"\n+#include \"assert.j\"\n #include <stddef.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#define FFEINTRIN_DOC 1\n-#include \"intrin.h\"\n \n typedef enum\n   {\n@@ -44,6 +40,10 @@ typedef enum\n \n #define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n \n+/* Pull in the intrinsics info, but only the doc parts.  */\n+#define FFEINTRIN_DOC 1\n+#include \"intrin.h\"\n+\n char *family_name (ffeintrinFamily family);\n static void dumpif (ffeintrinFamily fam);\n static void dumpendif (void);"}, {"sha": "6e27d210142f01e60f54402e067d117a5f737a23", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -22,7 +22,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"intrin.h\"\n #include \"expr.h\"\n #include \"info.h\"\n@@ -1553,11 +1552,13 @@ ffeintrin_init_0 ()\n       p3 = ffeintrin_names_[i].name_ic;\n       for (; *p1 != '\\0' && *p2 != '\\0' && *p3 != '\\0'; ++p1, ++p2, ++p3)\n \t{\n-\t  if (!isascii (*p1) || !isascii (*p2) || !isascii (*p3))\n+\t  if (! IN_CTYPE_DOMAIN (*p1)\n+\t      || ! IN_CTYPE_DOMAIN (*p2)\n+\t      || ! IN_CTYPE_DOMAIN (*p3))\n \t    break;\n-\t  if ((isdigit (*p1) || (*p1 == '_')) && (*p1 == *p2) && (*p1 == *p3))\n+\t  if ((ISDIGIT (*p1) || (*p1 == '_')) && (*p1 == *p2) && (*p1 == *p3))\n \t    continue;\n-\t  if (!isupper (*p1) || !islower (*p2)\n+\t  if (! ISUPPER (*p1) || ! ISLOWER (*p2)\n \t      || (*p1 != toupper (*p2)) || ((*p3 != *p1) && (*p3 != *p2)))\n \t    break;\n \t}"}, {"sha": "c62e5b2db9bfa7e1c75bf31e62292c33d407ae04", "filename": "gcc/f/lex.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -20,17 +20,16 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"top.h\"\n #include \"bad.h\"\n #include \"com.h\"\n #include \"lex.h\"\n #include \"malloc.h\"\n #include \"src.h\"\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-#include \"config.j\"\n #include \"flags.j\"\n #include \"input.j\"\n+#include \"toplev.j\"\n #include \"tree.j\"\n #include \"output.j\"  /* Must follow tree.j so TREE_CODE is defined! */\n #endif\n@@ -770,7 +769,7 @@ ffelex_cfelex_ (ffelexToken *xtoken, FILE *finput, int c)\n \t      r = &q[buffer_length];\n \t    }\n \t  c = ffelex_getc_ (finput);\n-\t  if (!isdigit (c))\n+\t  if (! ISDIGIT (c))\n \t    break;\n \t}\n       *p = '\\0';\n@@ -1812,10 +1811,10 @@ ffelex_expecting_character ()\n ffelexHandler\n ffelex_file_fixed (ffewhereFile wf, FILE *f)\n {\n-  register int c;\t\t/* Character currently under consideration. */\n-  register ffewhereColumnNumber column;\t/* Not really; 0 means column 1... */\n+  register int c = 0;\t\t/* Character currently under consideration. */\n+  register ffewhereColumnNumber column = 0;\t/* Not really; 0 means column 1... */\n   bool disallow_continuation_line;\n-  bool ignore_disallowed_continuation;\n+  bool ignore_disallowed_continuation = FALSE;\n   int latest_char_in_file = 0;\t/* For getting back into comment-skipping\n \t\t\t\t   code. */\n   ffelexType lextype;\n@@ -3033,11 +3032,11 @@ ffelex_file_fixed (ffewhereFile wf, FILE *f)\n ffelexHandler\n ffelex_file_free (ffewhereFile wf, FILE *f)\n {\n-  register int c;\t\t/* Character currently under consideration. */\n-  register ffewhereColumnNumber column;\t/* Not really; 0 means column 1... */\n-  bool continuation_line;\n+  register int c = 0;\t\t/* Character currently under consideration. */\n+  register ffewhereColumnNumber column = 0;\t/* Not really; 0 means column 1... */\n+  bool continuation_line = FALSE;\n   ffewhereColumnNumber continuation_column;\n-  int latest_char_in_file;\t/* For getting back into comment-skipping\n+  int latest_char_in_file = 0;\t/* For getting back into comment-skipping\n \t\t\t\t   code. */\n \n   /* Lex is called for a particular file, not for a particular program unit.\n@@ -4314,7 +4313,7 @@ ffelex_splice_tokens (ffelexHandler first, ffelexToken master,\n \n   while (*p != '\\0')\n     {\n-      if (isdigit (*p))\n+      if (ISDIGIT (*p))\n \t{\n \t  t = ffelex_token_number_from_names (master, i);\n \t  p += ffelex_token_length (t);"}, {"sha": "c9a9dd5f800c99215a022f1d382483ca67ca25a1", "filename": "gcc/f/lex.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -92,7 +92,6 @@ typedef lex_sigh__ (*ffelexHandler) (ffelexToken);\n \n /* Include files needed by this one. */\n \n-#include <ctype.h>\n #include \"top.h\"\n #include \"where.h\"\n \n@@ -173,7 +172,7 @@ ffelexToken ffelex_token_use (ffelexToken t);\n #define ffelex_init_3()\n #define ffelex_init_4()\n #define ffelex_is_firstnamechar(c) \\\n-  (isalpha ((c)) || ((c) == '_'))\n+  (ISALPHA ((c)) || ((c) == '_'))\n #define ffelex_terminate_0()\n #define ffelex_terminate_1()\n #define ffelex_terminate_2()"}, {"sha": "6c92de9230e055b0b2bf7ceb1754b1a468a71eb0", "filename": "gcc/f/parse.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fparse.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -20,8 +20,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.\t */\n \n #include \"proj.h\"\n-#include <ctype.h>\n-#include <signal.h>\n #include \"top.h\"\n #include \"com.h\"\n #include \"where.h\""}, {"sha": "6af2df50885ee8d92b1b9b211a9f9d6a26de0c82", "filename": "gcc/f/proj.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fproj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fproj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fproj.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -20,7 +20,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.\t */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"glimits.j\"\n \n #ifndef HAVE_STRTOUL\n@@ -33,7 +32,7 @@ strtoul (const char *nptr, char **endptr, int base)\n   assert (base == 10);\n   assert (endptr == NULL);\n \n-  while (isdigit (*nptr))\n+  while (ISDIGIT (*nptr))\n     {\n       number = old_number * 10 + (*(nptr++) - '0');\n       if ((number <= old_number) && (old_number != 0))"}, {"sha": "e592d8bbb3beda5d55b5dd66bbc9cd58c760fb86", "filename": "gcc/f/proj.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fproj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fproj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fproj.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -24,6 +24,13 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef _H_f_proj\n #define _H_f_proj\n \n+#ifdef USE_HCONFIG\n+#include \"hconfig.j\"\n+#else\n+#include \"config.j\"\n+#endif\n+#include \"system.j\"\n+\n #if !defined (__GNUC__) || (__GNUC__ < 2)\n #error \"You have to use gcc 2.x to build g77 (might be fixed in g77-0.6).\"\n #endif\n@@ -36,18 +43,13 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n #endif\t/* !defined (BUILT_WITH_270) */\n \n-/* Include files everyone gets. */\n-\n-#include \"config.j\"\t\t/* Must come before any other #includes in gcc. */\n-#include \"assert.j\"\t\t/* Use gcc's assert.h. */\n-#include <ctype.h>\n-#include <stdio.h>\n+/* Include files everyone gets.  <assert.h> is needed for assert().\n+   <stddef.h> is needed for offsetof, but technically also NULL,\n+   size_t, ptrdiff_t, and so on.  */\n+#include \"assert.j\"\n #include <stddef.h>\n-#include <stdlib.h>\n-#include <string.h>\n \n /* Generally useful definitions. */\n-\n typedef enum\n   {\n #if !defined(false) || !defined(true)\n@@ -60,8 +62,6 @@ typedef enum\n   } bool;\n \n #define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n-#define STR(s) # s\n-#define STRX(s) STR(s)\n \n #ifndef UNUSED\t/* Compile with -DUNUSED= if cc doesn't support this. */\n #if BUILT_WITH_270"}, {"sha": "3fd1755244161ebf30df819e422fda69bd69cd52", "filename": "gcc/f/src.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsrc.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -29,7 +29,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"src.h\"\n #include \"top.h\"\n "}, {"sha": "0216a7cef0bb5d9405760f72f8b8a6ab0ce65109", "filename": "gcc/f/src.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsrc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsrc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsrc.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -87,9 +87,9 @@ extern bool ffesrc_ok_match_noninit_lower_;\n    characters for which ffelex_is_firstnamechar returns TRUE.  */\n \n #define ffesrc_is_name_init(c) \\\n-  ((isalpha ((c))) || (!(1 || ffe_is_90 ()) && ((c) == '_')))\n+  ((ISALPHA ((c))) || (! (1 || ffe_is_90 ()) && ((c) == '_')))\n #define ffesrc_is_name_noninit(c) \\\n-  ((isalnum ((c))) || (!(1 || ffe_is_90 ()) && ((c) == '_')))\n+  ((ISALNUM ((c))) || (! (1 || ffe_is_90 ()) && ((c) == '_')))\n \n /* Test if source-translated character matches given alphabetic character\n    (passed in both uppercase and lowercase, to allow for custom speedup"}, {"sha": "58156f592bac63d858b22ba0e43412cfe628ab8b", "filename": "gcc/f/sta.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsta.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -1452,7 +1452,9 @@ ffesta_eof ()\n   if (ffe_is_ffedebug ())\n     {\n       ffestorag_report ();\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n       ffesymbol_report_all ();\n+#endif\n     }\n }\n \n@@ -1988,7 +1990,9 @@ ffesta_zero (ffelexToken t)\n   if (ffe_is_ffedebug ())\n     {\n       ffestorag_report ();\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n       ffesymbol_report_all ();\n+#endif\n     }\n \n   ffelex_set_names (TRUE);"}, {"sha": "dc4bda4d98af6f25a976a2c4f9dd593a87f5b26d", "filename": "gcc/f/stb.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstb.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -88,7 +88,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"stb.h\"\n #include \"bad.h\"\n #include \"expr.h\"\n@@ -1916,7 +1915,7 @@ ffestb_do (ffelexToken t)\n \t  goto bad_1;\t\t/* :::::::::::::::::::: */\n \n \tcase FFELEX_typeOPEN_PAREN:\t/* Must be \"DO\" label \"WHILE\". */\n-\t  if (!isdigit (*p))\n+\t  if (! ISDIGIT (*p))\n \t    goto bad_i;\t\t/* :::::::::::::::::::: */\n \t  ffesta_tokens[1] = ffelex_token_number_from_names (ffesta_tokens[0],\n \t\t\t\t\t\t\t     i);\n@@ -1939,7 +1938,7 @@ ffestb_do (ffelexToken t)\n \t      ffesta_tokens[1] = NULL;\n \t      return (ffelexHandler) ffestb_do2_;\n \t    }\n-\t  if (!isdigit (*p))\n+\t  if (! ISDIGIT (*p))\n \t    goto bad_i;\t\t/* :::::::::::::::::::: */\n \t  ffesta_tokens[1] = ffelex_token_number_from_names (ffesta_tokens[0],\n \t\t\t\t\t\t\t     i);\n@@ -1950,7 +1949,7 @@ ffestb_do (ffelexToken t)\n \t  return (ffelexHandler) ffestb_do2_;\n \n \tcase FFELEX_typeEQUALS:\n-\t  if (isdigit (*p))\n+\t  if (ISDIGIT (*p))\n \t    {\n \t      ffesta_tokens[1]\n \t\t= ffelex_token_number_from_names (ffesta_tokens[0], i);\n@@ -1972,7 +1971,7 @@ ffestb_do (ffelexToken t)\n \tcase FFELEX_typeEOS:\n \tcase FFELEX_typeSEMICOLON:\n \t  ffesta_confirmed ();\n-\t  if (isdigit (*p))\n+\t  if (ISDIGIT (*p))\n \t    {\n \t      ffesta_tokens[1]\n \t\t= ffelex_token_number_from_names (ffesta_tokens[0], i);\n@@ -3369,7 +3368,7 @@ ffestb_goto (ffelexToken t)\n       if (ffelex_token_length (ffesta_tokens[0]) != FFESTR_firstlGOTO)\n \t{\n \t  p = ffelex_token_text (ffesta_tokens[0]) + (i = FFESTR_firstlGOTO);\n-\t  if (isdigit (*p))\n+\t  if (ISDIGIT (*p))\n \t    {\n \t      nt = ffelex_token_number_from_names (ffesta_tokens[0], i);\n \t      p += ffelex_token_length (nt);\n@@ -6691,7 +6690,7 @@ ffestb_R838 (ffelexToken t)\n \tcase FFELEX_typePERCENT:\n \tcase FFELEX_typeOPEN_PAREN:\n \t  p = ffelex_token_text (ffesta_tokens[0]) + (i = FFESTR_firstlASSIGN);\n-\t  if (!isdigit (*p))\n+\t  if (! ISDIGIT (*p))\n \t    goto bad_i;\t\t/* :::::::::::::::::::: */\n \t  ffesta_tokens[1]\n \t    = ffelex_token_number_from_names (ffesta_tokens[0], i);\n@@ -9688,7 +9687,7 @@ ffestb_R10014_ (ffelexToken t)\n       p = ffelex_token_text (t) + i;\n       if (*p == '\\0')\n \treturn (ffelexHandler) ffestb_R10015_;\n-      if (!isdigit (*p))\n+      if (! ISDIGIT (*p))\n \t{\n \t  if (ffestb_local_.format.current == FFESTP_formattypeH)\n \t    p = strpbrk (p, \"0123456789\");\n@@ -9766,7 +9765,7 @@ ffestb_R10014_ (ffelexToken t)\n       p = ffelex_token_text (t) + i;\n       if (*p == '\\0')\n \treturn (ffelexHandler) ffestb_R10015_;\n-      if (!isdigit (*p))\n+      if (! ISDIGIT (*p))\n \t{\n \t  ffestb_local_.format.current = FFESTP_formattypeNone;\n \t  p = strpbrk (p, \"0123456789\");\n@@ -10046,7 +10045,7 @@ ffestb_R10015_ (ffelexToken t)\n       p = ffelex_token_text (t) + i;\n       if (*p == '\\0')\n \treturn (ffelexHandler) ffestb_R10015_;\n-      if (!isdigit (*p))\n+      if (! ISDIGIT (*p))\n \t{\n \t  ffestb_local_.format.current = FFESTP_formattypeNone;\n \t  p = strpbrk (p, \"0123456789\");\n@@ -10220,7 +10219,7 @@ ffestb_R10018_ (ffelexToken t)\n       if (*++p == '\\0')\n \treturn (ffelexHandler) ffestb_R10019_;\t/* Go get NUMBER. */\n       i = 1;\n-      if (!isdigit (*p))\n+      if (! ISDIGIT (*p))\n \t{\n \t  ffesta_ffebad_1p (FFEBAD_FORMAT_TEXT_IN_NUMBER, t, 1, NULL);\n \t  return (ffelexHandler) ffestb_R10018_;\n@@ -11903,7 +11902,7 @@ ffestb_R12026_ (ffelexToken t)\n \t    default:\n \t      for (p = ffelex_token_text (ffesta_tokens[2]); *p != '\\0'; ++p)\n \t\t{\n-\t\t  if (!isalpha (*p))\n+\t\t  if (! ISALPHA (*p))\n \t\t    {\n \t\t      ffelex_token_kill (ffesta_tokens[1]);\n \t\t      ffelex_token_kill (ffesta_tokens[2]);\n@@ -12010,7 +12009,7 @@ ffestb_S3P4 (ffelexToken t)\n \t\t    ffeexpr_rhs (ffesta_output_pool, FFEEXPR_contextINCLUDE,\n \t\t\t\t (ffeexprCallback) ffestb_S3P41_)))\n \t  (t);\n-      if (!isdigit (*p))\n+      if (! ISDIGIT (*p))\n \tgoto bad_i;\t\t/* :::::::::::::::::::: */\n       nt = ffelex_token_number_from_names (ffesta_tokens[0], i);\n       p += ffelex_token_length (nt);\n@@ -12443,7 +12442,7 @@ ffestb_V025 (ffelexToken t)\n \t  break;\n \t}\n       p = ffelex_token_text (ffesta_tokens[0]) + (i = FFESTR_firstlDEFINEFILE);\n-      if (isdigit (*p))\n+      if (ISDIGIT (*p))\n \tnt = ffelex_token_number_from_names (ffesta_tokens[0], i);\n       else if (ffesrc_is_name_init (*p))\n \tnt = ffelex_token_name_from_names (ffesta_tokens[0], i, 0);\n@@ -17980,7 +17979,7 @@ ffestb_V020 (ffelexToken t)\n \t  break;\n \t}\n       p = ffelex_token_text (ffesta_tokens[0]) + (i = FFESTR_firstlTYPE);\n-      if (isdigit (*p))\n+      if (ISDIGIT (*p))\n \tffesta_confirmed ();\t/* Else might be '90 TYPE statement. */\n       for (ix = 0; ix < FFESTP_typeix; ++ix)\n \tffestp_file.type.type_spec[ix].kw_or_val_present = FALSE;"}, {"sha": "4a2476dde51e45b50018ff366ebfdef6ee014828", "filename": "gcc/f/ste.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -48,8 +48,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"proj.h\"\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-#include \"config.j\"\n #include \"rtl.j\"\n+#include \"toplev.j\"\n #endif\n \n #include \"ste.h\""}, {"sha": "d2db3798a3d4e0b34edb68080d427da6554bc370", "filename": "gcc/f/stt.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstt.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -121,6 +121,7 @@ ffestt_caselist_create ()\n \n    The cases in the list are dumped with commas separating them.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffestt_caselist_dump (ffesttCaseList list)\n {\n@@ -140,6 +141,7 @@ ffestt_caselist_dump (ffesttCaseList list)\n \t}\n     }\n }\n+#endif\n \n /* ffestt_caselist_kill -- Kill list of cases\n \n@@ -443,6 +445,7 @@ ffestt_dimlist_create ()\n \n    The dims in the list are dumped with commas separating them.\t */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffestt_dimlist_dump (ffesttDimList list)\n {\n@@ -459,6 +462,7 @@ ffestt_dimlist_dump (ffesttDimList list)\n \tffebld_dump (next->upper);\n     }\n }\n+#endif\n \n /* ffestt_dimlist_kill -- Kill list of dims\n \n@@ -614,6 +618,7 @@ ffestt_exprlist_drive (ffesttExprList list, void (*fn) ())\n \n    The exprs in the list are dumped with commas separating them.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffestt_exprlist_dump (ffesttExprList list)\n {\n@@ -626,6 +631,7 @@ ffestt_exprlist_dump (ffesttExprList list)\n       ffebld_dump (next->expr);\n     }\n }\n+#endif\n \n /* ffestt_exprlist_kill -- Kill list of exprs\n \n@@ -851,6 +857,7 @@ ffestt_implist_drive (ffesttImpList list, void (*fn) ())\n \n    The token pairs in the list are dumped with commas separating them.\t*/\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffestt_implist_dump (ffesttImpList list)\n {\n@@ -870,6 +877,7 @@ ffestt_implist_dump (ffesttImpList list)\n \t}\n     }\n }\n+#endif\n \n /* ffestt_implist_kill -- Kill list of token pairs\n \n@@ -934,7 +942,7 @@ ffestt_tokenlist_create ()\n   return tl;\n }\n \n-/* ffestt_tokenlist_drive -- Dump list of tokens\n+/* ffestt_tokenlist_drive -- Drive list of tokens\n \n    ffesttTokenList tl;\n    void fn(ffelexToken t);\n@@ -963,6 +971,7 @@ ffestt_tokenlist_drive (ffesttTokenList tl, void (*fn) ())\n \n    The tokens in the list are dumped with commas separating them.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffestt_tokenlist_dump (ffesttTokenList tl)\n {\n@@ -991,6 +1000,7 @@ ffestt_tokenlist_dump (ffesttTokenList tl)\n \t}\n     }\n }\n+#endif\n \n /* ffestt_tokenlist_handle -- Handle list of tokens\n "}, {"sha": "38ffa41ebcdee832664f7b210ec9b9207c27979b", "filename": "gcc/f/stt.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fstt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstt.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -164,37 +164,49 @@ struct _ffest_format_list_\n void ffestt_caselist_append (ffesttCaseList list, bool range, ffebld case1,\n \t\t\t     ffebld case2, ffelexToken t);\n ffesttCaseList ffestt_caselist_create (void);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_caselist_dump (ffesttCaseList list);\n+#endif\n void ffestt_caselist_kill (ffesttCaseList list);\n void ffestt_dimlist_append (ffesttDimList list, ffebld lower, ffebld upper,\n \t\t\t    ffelexToken t);\n ffebld ffestt_dimlist_as_expr (ffesttDimList list, ffeinfoRank *rank,\n \t\t\t       ffebld *array_size, ffebld *extents,\n \t\t\t       bool is_ugly_assumed);\n ffesttDimList ffestt_dimlist_create (void);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_dimlist_dump (ffesttDimList list);\n+#endif\n void ffestt_dimlist_kill (ffesttDimList list);\n ffestpDimtype ffestt_dimlist_type (ffesttDimList dims, bool is_ugly_assumed);\n void ffestt_exprlist_append (ffesttExprList list, ffebld expr, ffelexToken t);\n ffesttExprList ffestt_exprlist_create (void);\n void ffestt_exprlist_drive (ffesttExprList list, void (*fn) ());\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_exprlist_dump (ffesttExprList list);\n+#endif\n void ffestt_exprlist_kill (ffesttExprList list);\n ffesttFormatList ffestt_formatlist_append (ffesttFormatList list);\n ffesttFormatList ffestt_formatlist_create (ffesttFormatList parent,\n \t\t\t\t\t   ffelexToken t);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_formatlist_dump (ffesttFormatList list);\n+#endif\n void ffestt_formatlist_kill (ffesttFormatList list);\n void ffestt_implist_append (ffesttImpList list, ffelexToken first,\n \t\t\t    ffelexToken last);\n ffesttImpList ffestt_implist_create (void);\n void ffestt_implist_drive (ffesttImpList list, void (*fn) ());\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_implist_dump (ffesttImpList list);\n+#endif\n void ffestt_implist_kill (ffesttImpList list);\n void ffestt_tokenlist_append (ffesttTokenList list, ffelexToken t);\n ffesttTokenList ffestt_tokenlist_create (void);\n void ffestt_tokenlist_drive (ffesttTokenList list, void (*fn) ());\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffestt_tokenlist_dump (ffesttTokenList list);\n+#endif\n ffelexHandler ffestt_tokenlist_handle (ffesttTokenList list,\n \t\t\t\t       ffelexHandler handler);\n void ffestt_tokenlist_kill (ffesttTokenList list);"}, {"sha": "8aa72306ecac0b0791717cc69ec481a060f5f104", "filename": "gcc/f/symbol.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -794,6 +794,7 @@ ffesymbol_drive_sfnames (ffesymbol (*fn) ())\n \n /* Dump info on the symbol for debugging purposes.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffesymbol_dump (ffesymbol s)\n {\n@@ -828,6 +829,7 @@ ffesymbol_dump (ffesymbol s)\n \t     ffeintrin_name_specific (s->specific),\n \t     ffeintrin_name_implementation (s->implementation));\n }\n+#endif\n \n /* Produce generic error message about a symbol.\n \n@@ -1011,6 +1013,7 @@ ffesymbol_reference (ffesymbol s, ffelexToken t, bool explicit)\n \n /* Report info on the symbol for debugging purposes.  */\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n ffesymbol\n ffesymbol_report (ffesymbol s)\n {\n@@ -1172,16 +1175,19 @@ ffesymbol_report (ffesymbol s)\n \n   return s;\n }\n+#endif\n \n /* Report info on the symbols.\t*/\n \n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void\n ffesymbol_report_all ()\n {\n   ffename_space_drive_symbol (ffesymbol_sfunc_, ffesymbol_report);\n   ffename_space_drive_symbol (ffesymbol_local_, ffesymbol_report);\n   ffename_space_drive_symbol (ffesymbol_global_, ffesymbol_report);\n }\n+#endif\n \n /* Resolve symbol that has become known intrinsic or non-intrinsic.  */\n "}, {"sha": "b534ae61acf78c940272bca09d75d37be3af7bc8", "filename": "gcc/f/symbol.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.h?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -180,7 +180,9 @@ ffesymbol ffesymbol_declare_subrunit (ffelexToken t);\n void ffesymbol_drive (ffesymbol (*fn) ());\n void ffesymbol_drive_sfnames (ffesymbol (*fn) ());\n #define ffesymbol_dummyargs(s) ((s)->dummy_args)\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffesymbol_dump (ffesymbol s);\n+#endif\n void ffesymbol_error (ffesymbol s, ffelexToken t);\n #define ffesymbol_equiv(s) ((s)->equiv)\n #define ffesymbol_explicitwhere(s) ((s)->explicit_where)\n@@ -219,8 +221,10 @@ ffesymbol ffesymbol_lookup_local (ffelexToken t);\n #define ffesymbol_ptr_to_namelist(s) (&(s)->namelist)\n #define ffesymbol_rank(s) ffeinfo_rank((s)->info)\n void ffesymbol_reference (ffesymbol s, ffelexToken t, bool explicit);\n+#if FFECOM_targetCURRENT == FFECOM_targetFFE\n ffesymbol ffesymbol_report (ffesymbol s);\n void ffesymbol_report_all (void);\n+#endif\n void ffesymbol_resolve_intrin (ffesymbol s);\n void ffesymbol_retract (bool retract);\n bool ffesymbol_retractable (void);"}, {"sha": "6a37324350d71166dfc865f7861f23954661eab3", "filename": "gcc/f/system.j", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsystem.j", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Fsystem.j", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsystem.j?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -0,0 +1,27 @@\n+/* system.j -- Wrapper for GCC's system.h\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Contributed by James Craig Burley (burley@gnu.org).\n+\n+This file is part of GNU Fortran.\n+\n+GNU Fortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Fortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Fortran; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef MAKING_DEPENDENCIES\n+#ifndef _J_f_system\n+#define _J_f_system\n+#include \"system.h\"\n+#endif\n+#endif"}, {"sha": "b66fdc8907b05998cf330bd16be6e8b9cc0e2d9e", "filename": "gcc/f/target.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -69,7 +69,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Include files. */\n \n #include \"proj.h\"\n-#include <ctype.h>\n #include \"glimits.j\"\n #include \"target.h\"\n #include \"bad.h\"\n@@ -131,7 +130,7 @@ ffetarget_print_char_ (FILE *f, unsigned char c)\n       break;\n \n     default:\n-      if (isprint (c) && isascii (c))\n+      if (ISPRINT (c))\n \tfputc (c, f);\n       else\n \tfprintf (f, \"\\\\%03o\", (unsigned int) c);\n@@ -2386,7 +2385,7 @@ ffetarget_typeless_binary (ffetargetTypeless *xvalue, ffelexToken token)\n       new_value <<= 1;\n       if ((new_value >> 1) != value)\n \toverflow = TRUE;\n-      if (isdigit (c))\n+      if (ISDIGIT (c))\n \tnew_value += c - '0';\n       else\n \tbad_digit = TRUE;\n@@ -2430,7 +2429,7 @@ ffetarget_typeless_octal (ffetargetTypeless *xvalue, ffelexToken token)\n       new_value <<= 3;\n       if ((new_value >> 3) != value)\n \toverflow = TRUE;\n-      if (isdigit (c))\n+      if (ISDIGIT (c))\n \tnew_value += c - '0';\n       else\n \tbad_digit = TRUE;\n@@ -2474,7 +2473,7 @@ ffetarget_typeless_hex (ffetargetTypeless *xvalue, ffelexToken token)\n       new_value <<= 4;\n       if ((new_value >> 4) != value)\n \toverflow = TRUE;\n-      if (isdigit (c))\n+      if (ISDIGIT (c))\n \tnew_value += c - '0';\n       else if ((c >= 'A') && (c <= 'F'))\n \tnew_value += c - 'A' + 10;"}, {"sha": "0b23ab18fe53b05c2842c409ba2e47eaec1d414b", "filename": "gcc/f/top.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -30,7 +30,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Include files. */\n \n-#include <ctype.h>\n #include \"proj.h\"\n #include \"top.h\"\n #include \"bad.h\"\n@@ -56,6 +55,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"where.h\"\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n #include \"flags.j\"\n+#include \"toplev.j\"\n #endif\n \n /* Externals defined here. */\n@@ -151,7 +151,7 @@ ffe_is_digit_string_ (char *s)\n {\n   char *p;\n \n-  for (p = s; isdigit (*p); ++p)\n+  for (p = s; ISDIGIT (*p); ++p)\n     ;\n \n   return (p != s) && (*p == '\\0');"}, {"sha": "9ee892bed8f940a49a19d9780c46a5d428511898", "filename": "gcc/f/toplev.j", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftoplev.j", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b45da67d0eaa8d7fec5913d9439d88865edfc55/gcc%2Ff%2Ftoplev.j", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftoplev.j?ref=8b45da67d0eaa8d7fec5913d9439d88865edfc55", "patch": "@@ -0,0 +1,27 @@\n+/* toplev.j -- Wrapper for GCC's toplev.h\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Contributed by James Craig Burley (burley@gnu.org).\n+\n+This file is part of GNU Fortran.\n+\n+GNU Fortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Fortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Fortran; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef MAKING_DEPENDENCIES\n+#ifndef _J_f_toplev\n+#define _J_f_toplev\n+#include \"toplev.h\"\n+#endif\n+#endif"}]}