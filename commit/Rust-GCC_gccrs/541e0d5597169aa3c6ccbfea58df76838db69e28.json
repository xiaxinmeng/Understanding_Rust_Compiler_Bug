{"sha": "541e0d5597169aa3c6ccbfea58df76838db69e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxZTBkNTU5NzE2OWFhM2M2Y2NiZmVhNThkZjc2ODM4ZGI2OWUyOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-04-10T11:37:14Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-04-10T11:37:14Z"}, "message": "Support multiple files w/ -i option in gcov (PR gcov-profile/80224).\n\n2017-04-10  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/80224\n\t* gcov.c (print_usage): Fix usage string.\n\t(get_gcov_intermediate_filename): Remove.\n\t(output_gcov_file): Use both for normal and intermediate format.\n\t(generate_results): Do not initialize special file for\n\tintermediate format.\n\nFrom-SVN: r246804", "tree": {"sha": "62aac49df9e280669f5218238e4c6cfa4833d119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62aac49df9e280669f5218238e4c6cfa4833d119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541e0d5597169aa3c6ccbfea58df76838db69e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541e0d5597169aa3c6ccbfea58df76838db69e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541e0d5597169aa3c6ccbfea58df76838db69e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541e0d5597169aa3c6ccbfea58df76838db69e28/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba6ee9fc83ea84afad140fe6092109fad187544e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6ee9fc83ea84afad140fe6092109fad187544e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6ee9fc83ea84afad140fe6092109fad187544e"}], "stats": {"total": 71, "additions": 16, "deletions": 55}, "files": [{"sha": "1e03c02ad29637933f6d53c6720e91eebd70af5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e0d5597169aa3c6ccbfea58df76838db69e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e0d5597169aa3c6ccbfea58df76838db69e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=541e0d5597169aa3c6ccbfea58df76838db69e28", "patch": "@@ -1,3 +1,12 @@\n+2017-04-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/80224\n+\t* gcov.c (print_usage): Fix usage string.\n+\t(get_gcov_intermediate_filename): Remove.\n+\t(output_gcov_file): Use both for normal and intermediate format.\n+\t(generate_results): Do not initialize special file for\n+\tintermediate format.\n+\n 2017-04-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80304"}, {"sha": "bb26a1a9787f266f5efa59a979185d88df40203e", "filename": "gcc/gcov.c", "status": "modified", "additions": 7, "deletions": 55, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e0d5597169aa3c6ccbfea58df76838db69e28/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e0d5597169aa3c6ccbfea58df76838db69e28/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=541e0d5597169aa3c6ccbfea58df76838db69e28", "patch": "@@ -653,7 +653,7 @@ print_usage (int error_p)\n   FILE *file = error_p ? stderr : stdout;\n   int status = error_p ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\n \n-  fnotice (file, \"Usage: gcov [OPTION]... SOURCE|OBJ...\\n\\n\");\n+  fnotice (file, \"Usage: gcov [OPTION...] SOURCE|OBJ...\\n\\n\");\n   fnotice (file, \"Print code coverage information.\\n\\n\");\n   fnotice (file, \"  -h, --help                      Print this help, then exit\\n\");\n   fnotice (file, \"  -a, --all-blocks                Show information for every basic block\\n\");\n@@ -791,31 +791,6 @@ process_args (int argc, char **argv)\n   return optind;\n }\n \n-/* Get the name of the gcov file.  The return value must be free'd.\n-\n-   It appends the '.gcov' extension to the *basename* of the file.\n-   The resulting file name will be in PWD.\n-\n-   e.g.,\n-   input: foo.da,       output: foo.da.gcov\n-   input: a/b/foo.cc,   output: foo.cc.gcov  */\n-\n-static char *\n-get_gcov_intermediate_filename (const char *file_name)\n-{\n-  const char *gcov = \".gcov\";\n-  char *result;\n-  const char *cptr;\n-\n-  /* Find the 'basename'.  */\n-  cptr = lbasename (file_name);\n-\n-  result = XNEWVEC (char, strlen (cptr) + strlen (gcov) + 1);\n-  sprintf (result, \"%s%s\", cptr, gcov);\n-\n-  return result;\n-}\n-\n /* Output the result in intermediate format used by 'lcov'.\n \n The intermediate format contains a single file named 'foo.cc.gcov',\n@@ -980,7 +955,11 @@ output_gcov_file (const char *file_name, source_t *src)\n       if (gcov_file)\n         {\n           fnotice (stdout, \"Creating '%s'\\n\", gcov_file_name);\n-          output_lines (gcov_file, src);\n+\n+\t  if (flag_intermediate_format)\n+\t    output_intermediate_file (gcov_file, src);\n+\t  else\n+\t    output_lines (gcov_file, src);\n           if (ferror (gcov_file))\n             fnotice (stderr, \"Error writing output file '%s'\\n\", gcov_file_name);\n           fclose (gcov_file);\n@@ -1002,8 +981,6 @@ generate_results (const char *file_name)\n   unsigned ix;\n   source_t *src;\n   function_t *fn;\n-  FILE *gcov_intermediate_file = NULL;\n-  char *gcov_intermediate_filename = NULL;\n \n   for (ix = n_sources, src = sources; ix--; src++)\n     if (src->num_lines)\n@@ -1033,19 +1010,6 @@ generate_results (const char *file_name)\n \tfile_name = canonicalize_name (file_name);\n     }\n \n-  if (flag_gcov_file && flag_intermediate_format)\n-    {\n-      /* Open the intermediate file.  */\n-      gcov_intermediate_filename = get_gcov_intermediate_filename (file_name);\n-      gcov_intermediate_file = fopen (gcov_intermediate_filename, \"w\");\n-      if (!gcov_intermediate_file)\n-\t{\n-\t  fnotice (stderr, \"Cannot open intermediate output file %s\\n\",\n-\t\t   gcov_intermediate_filename);\n-\t  return;\n-\t}\n-    }\n-\n   for (ix = n_sources, src = sources; ix--; src++)\n     {\n       if (flag_relative_only)\n@@ -1068,23 +1032,11 @@ generate_results (const char *file_name)\n       total_executed += src->coverage.lines_executed;\n       if (flag_gcov_file)\n \t{\n-          if (flag_intermediate_format)\n-            /* Output the intermediate format without requiring source\n-               files.  This outputs a section to a *single* file.  */\n-            output_intermediate_file (gcov_intermediate_file, src);\n-          else\n-            output_gcov_file (file_name, src);\n+\t  output_gcov_file (file_name, src);\n           fnotice (stdout, \"\\n\");\n         }\n     }\n \n-  if (flag_gcov_file && flag_intermediate_format)\n-    {\n-      /* Now we've finished writing the intermediate file.  */\n-      fclose (gcov_intermediate_file);\n-      XDELETEVEC (gcov_intermediate_filename);\n-    }\n-\n   if (!file_name)\n     executed_summary (total_lines, total_executed);\n }"}]}