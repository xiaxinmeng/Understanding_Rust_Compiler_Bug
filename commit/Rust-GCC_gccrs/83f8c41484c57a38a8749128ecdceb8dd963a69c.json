{"sha": "83f8c41484c57a38a8749128ecdceb8dd963a69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmOGM0MTQ4NGM1N2EzOGE4NzQ5MTI4ZWNkY2ViOGRkOTYzYTY5Yw==", "commit": {"author": {"name": "Chris Schlumberger-Socha", "email": "chris.schlumberger-socha@arm.com", "date": "2013-05-23T14:09:39Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-05-23T14:09:39Z"}, "message": "[AArch64] Refactor aarch64_mov_operand predicate.\n\n\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\n\nFrom-SVN: r199259", "tree": {"sha": "3349ef03e41dee3368a71151f22f556d0278223a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3349ef03e41dee3368a71151f22f556d0278223a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f8c41484c57a38a8749128ecdceb8dd963a69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f8c41484c57a38a8749128ecdceb8dd963a69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f8c41484c57a38a8749128ecdceb8dd963a69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f8c41484c57a38a8749128ecdceb8dd963a69c/comments", "author": null, "committer": null, "parents": [{"sha": "6ca935e617b8a290221de84ece668769a763fabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca935e617b8a290221de84ece668769a763fabf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca935e617b8a290221de84ece668769a763fabf"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "3ba9d4eae3e568187b5f2c4551a202aa95a5321e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83f8c41484c57a38a8749128ecdceb8dd963a69c", "patch": "@@ -1,3 +1,11 @@\n+2013-05-23  Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_mov_operand_p): Define.\n+\t* config/aarch64/aarch64.c (aarch64_mov_operand_p): Define.\n+\t* config/aarch64/predicates.md (aarch64_const_address): Remove.\n+\t(aarch64_mov_operand): Use aarch64_mov_operand_p.\n+\n 2013-05-23  Vidya Praveen <vidyapraveen@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (clzv4si2): Support for CLZ"}, {"sha": "91fcde80cf65805bb7f3eb06f31c58bc43314f6b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=83f8c41484c57a38a8749128ecdceb8dd963a69c", "patch": "@@ -146,6 +146,8 @@ bool aarch64_is_long_call_p (rtx);\n bool aarch64_label_mentioned_p (rtx);\n bool aarch64_legitimate_pic_operand_p (rtx);\n bool aarch64_move_imm (HOST_WIDE_INT, enum machine_mode);\n+bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n+\t\t\t    enum machine_mode);\n bool aarch64_pad_arg_upward (enum machine_mode, const_tree);\n bool aarch64_pad_reg_upward (enum machine_mode, const_tree, bool);\n bool aarch64_regno_ok_for_base_p (int, bool);"}, {"sha": "12a705587824cc15bd81dca26dbd35ecafcfc515", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=83f8c41484c57a38a8749128ecdceb8dd963a69c", "patch": "@@ -6455,6 +6455,25 @@ aarch64_simd_imm_scalar_p (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+bool\n+aarch64_mov_operand_p (rtx x,\n+\t\t       enum aarch64_symbol_context context ATTRIBUTE_UNUSED,\n+\t\t       enum machine_mode mode)\n+{\n+\n+  if (GET_CODE (x) == HIGH\n+      && aarch64_valid_symref (XEXP (x, 0), GET_MODE (XEXP (x, 0))))\n+    return true;\n+\n+  if (CONST_INT_P (x) && aarch64_move_imm (INTVAL (x), mode))\n+    return true;\n+\n+  if (GET_CODE (x) == SYMBOL_REF && mode == DImode && CONSTANT_ADDRESS_P (x))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return a const_int vector of VAL.  */\n rtx\n aarch64_simd_gen_const_vector_dup (enum machine_mode mode, int val)"}, {"sha": "16c4385e84568009ecd726f3db50c236d5658eef", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f8c41484c57a38a8749128ecdceb8dd963a69c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=83f8c41484c57a38a8749128ecdceb8dd963a69c", "patch": "@@ -115,10 +115,6 @@\n        (match_test \"aarch64_legitimate_address_p (mode, XEXP (op, 0), PARALLEL,\n \t\t\t\t\t       0)\")))\n \n-(define_predicate \"aarch64_const_address\"\n-  (and (match_code \"symbol_ref\")\n-       (match_test \"mode == DImode && CONSTANT_ADDRESS_P (op)\")))\n-\n (define_predicate \"aarch64_valid_symref\"\n   (match_code \"const, symbol_ref, label_ref\")\n {\n@@ -173,12 +169,7 @@\n   (and (match_code \"reg,subreg,mem,const_int,symbol_ref,high\")\n        (ior (match_operand 0 \"register_operand\")\n \t    (ior (match_operand 0 \"memory_operand\")\n-\t\t (ior (match_test \"GET_CODE (op) == HIGH\n-\t\t\t\t   && aarch64_valid_symref (XEXP (op, 0),\n-\t\t\t\t\t\t\t    GET_MODE (XEXP (op, 0)))\")\n-\t\t      (ior (match_test \"CONST_INT_P (op)\n-\t\t\t\t\t&& aarch64_move_imm (INTVAL (op), mode)\")\n-\t\t\t   (match_test \"aarch64_const_address (op, mode)\")))))))\n+\t\t (match_test \"aarch64_mov_operand_p (op, SYMBOL_CONTEXT_ADR, mode)\")))))\n \n (define_predicate \"aarch64_movti_operand\"\n   (and (match_code \"reg,subreg,mem,const_int\")"}]}