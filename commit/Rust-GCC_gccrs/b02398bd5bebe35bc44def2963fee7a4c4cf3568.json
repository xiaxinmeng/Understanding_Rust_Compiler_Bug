{"sha": "b02398bd5bebe35bc44def2963fee7a4c4cf3568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyMzk4YmQ1YmViZTM1YmM0NGRlZjI5NjNmZWU3YTRjNGNmMzU2OA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-05-22T02:39:35Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-05-22T02:39:35Z"}, "message": "c.opt (Wmissing-include-dirs): New.\n\n\t* c.opt (Wmissing-include-dirs): New.\n\t* c-opts.c (c_common_handle_option): Pass true for user_supplied_p\n\tto add_path () for -I, but false for OPT_idirafter, OPT_iquote and\n\tOPT_isystem. Handle case OPT_Wmissing_include_dirs.\n\t* c-incpath.h (add_path): Add fourth (bool) argument.\n\t* c-incpath.c (add_env_var_paths): Pass false to add_path ().\n\t(add_standard_paths): Likewise.\n\t(remove_duplicates) [REASON_NOENT]: Warn if -Wmissing-include-dirs\n\tis used and the directory was user-supplied via -I.\n\t(add_path): Set p->user_supplied_p.  Remove duplicated code by\n\tusing add_cpp_dir_path ().\n\t* cpplib.h (struct cpp_options): Add warn_missing_include_dirs.\n\t(struct cpp_dir): Add user_supplied_p.\n\t* doc/invoke.texi (Warning Options): Document new option.\n\n[testsuite]\n\t* gcc.dg/cpp/Wmissingdirs.c: New.\n\nFrom-SVN: r82121", "tree": {"sha": "0fb35652621330c19f8e8ce0ffeb987cb15f69d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb35652621330c19f8e8ce0ffeb987cb15f69d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b02398bd5bebe35bc44def2963fee7a4c4cf3568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02398bd5bebe35bc44def2963fee7a4c4cf3568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02398bd5bebe35bc44def2963fee7a4c4cf3568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02398bd5bebe35bc44def2963fee7a4c4cf3568/comments", "author": null, "committer": null, "parents": [{"sha": "12fea1f9fcb7129531fa3f30a0688a80e68b5353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12fea1f9fcb7129531fa3f30a0688a80e68b5353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12fea1f9fcb7129531fa3f30a0688a80e68b5353"}], "stats": {"total": 89, "additions": 68, "deletions": 21}, "files": [{"sha": "9de23e4c27f65427bc6f430bbea2c08b6bc8df1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -1,3 +1,20 @@\n+2004-05-22  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* c.opt (Wmissing-include-dirs): New.\n+\t* c-opts.c (c_common_handle_option): Pass true for user_supplied_p\n+\tto add_path () for -I, but false for OPT_idirafter, OPT_iquote and\n+\tOPT_isystem. Handle case OPT_Wmissing_include_dirs.\n+\t* c-incpath.h (add_path): Add fourth (bool) argument.\n+\t* c-incpath.c (add_env_var_paths): Pass false to add_path ().\n+\t(add_standard_paths): Likewise.\n+\t(remove_duplicates) [REASON_NOENT]: Warn if -Wmissing-include-dirs\n+\tis used and the directory was user-supplied via -I.\n+\t(add_path): Set p->user_supplied_p.  Remove duplicated code by\n+\tusing add_cpp_dir_path ().\n+\t* cpplib.h (struct cpp_options): Add warn_missing_include_dirs.\n+\t(struct cpp_dir): Add user_supplied_p.\n+\t* doc/invoke.texi (Warning Options): Document new option.\n+\n 2004-05-21  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* fold-const.c (fold_read_from_constant_string): Convert result to"}, {"sha": "ea83c1a18b493d5b0ed07c41a22db3b9cb45db6c", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -114,7 +114,7 @@ add_env_var_paths (const char *env_var, int chain)\n \t  path[q - p] = '\\0';\n \t}\n \n-      add_path (path, chain, chain == SYSTEM);\n+      add_path (path, chain, chain == SYSTEM, false);\n     }\n }\n \n@@ -142,7 +142,7 @@ add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n \t      if (!strncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))\n \t\t{\n \t\t  char *str = concat (iprefix, p->fname + len, NULL);\n-\t\t  add_path (str, SYSTEM, p->cxx_aware);\n+\t\t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t\t}\n \t    }\n \t}\n@@ -160,7 +160,7 @@ add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n \t  else\n \t    str = update_path (p->fname, p->component);\n \n-\t  add_path (str, SYSTEM, p->cxx_aware);\n+\t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t}\n     }\n }\n@@ -192,7 +192,13 @@ remove_duplicates (cpp_reader *pfile, struct cpp_dir *head,\n \t  if (errno != ENOENT)\n \t    cpp_errno (pfile, CPP_DL_ERROR, cur->name);\n \t  else\n-\t    reason = REASON_NOENT;\n+\t    {\n+\t      /* If -Wmissing-include-dirs is given, warn. */\n+\t      cpp_options *opts = cpp_get_options (pfile);\n+\t      if (opts->warn_missing_include_dirs && cur->user_supplied_p)\n+\t\tcpp_errno (pfile, CPP_DL_WARNING, cur->name);\n+\t      reason = REASON_NOENT;\n+\t    }\n \t}\n       else if (!S_ISDIR (st.st_mode))\n \tcpp_error_with_line (pfile, CPP_DL_ERROR, 0, 0,\n@@ -317,7 +323,7 @@ add_cpp_dir_path (cpp_dir *p, int chain)\n /* Add PATH to the include chain CHAIN. PATH must be malloc-ed and\n    NUL-terminated.  */\n void\n-add_path (char *path, int chain, int cxx_aware)\n+add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n {\n   cpp_dir *p;\n \n@@ -329,12 +335,9 @@ add_path (char *path, int chain, int cxx_aware)\n   else\n     p->sysp = 0;\n   p->construct = 0;\n+  p->user_supplied_p = user_supplied_p;\n \n-  if (tails[chain])\n-    tails[chain]->next = p;\n-  else\n-    heads[chain] = p;\n-  tails[chain] = p;\n+  add_cpp_dir_path (p, chain);\n }\n \n /* Exported function to handle include chain merging, duplicate"}, {"sha": "1096016784f06ec44a72440f2c0dfd74deeb6f95", "filename": "gcc/c-incpath.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-incpath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-incpath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.h?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -16,7 +16,7 @@ along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n extern void split_quote_chain (void);\n-extern void add_path (char *, int, int);\n+extern void add_path (char *, int, int, bool);\n extern void register_include_chains (cpp_reader *, const char *,\n \t\t\t\t     const char *, int, int, int);\n extern void add_cpp_dir_path (struct cpp_dir *, int);"}, {"sha": "47c702474c7fb7e832acaeea9b220baf909b0e27", "filename": "gcc/c-opts.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -297,7 +297,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_I:\n       if (strcmp (arg, \"-\"))\n-\tadd_path (xstrdup (arg), BRACKET, 0);\n+\tadd_path (xstrdup (arg), BRACKET, 0, true);\n       else\n \t{\n \t  if (quote_chain_split)\n@@ -541,6 +541,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_missing_format_attribute = value;\n       break;\n \n+    case OPT_Wmissing_include_dirs:\n+      cpp_opts->warn_missing_include_dirs = value;\n+      break;\n+\n     case OPT_Wmissing_prototypes:\n       warn_missing_prototypes = value;\n       break;\n@@ -939,7 +943,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_idirafter:\n-      add_path (xstrdup (arg), AFTER, 0);\n+      add_path (xstrdup (arg), AFTER, 0, true);\n       break;\n \n     case OPT_imacros:\n@@ -952,15 +956,15 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_iquote:\n-      add_path (xstrdup (arg), QUOTE, 0);\n+      add_path (xstrdup (arg), QUOTE, 0, true);\n       break;\n \n     case OPT_isysroot:\n       sysroot = arg;\n       break;\n \n     case OPT_isystem:\n-      add_path (xstrdup (arg), SYSTEM, 0);\n+      add_path (xstrdup (arg), SYSTEM, 0, true);\n       break;\n \n     case OPT_iwithprefix:\n@@ -1390,7 +1394,7 @@ add_prefixed_path (const char *suffix, size_t chain)\n   memcpy (path + prefix_len, suffix, suffix_len);\n   path[prefix_len + suffix_len] = '\\0';\n \n-  add_path (path, chain, 0);\n+  add_path (path, chain, 0, false);\n }\n \n /* Handle -D, -U, -A, -imacros, and the first -include.  */"}, {"sha": "209f43ed4c8604c2133f0e1ab02d73d7966bc750", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -289,6 +289,10 @@ Wmissing-format-attribute\n C ObjC C++ ObjC++\n Warn about functions which might be candidates for format attributes\n \n+Wmissing-include-dirs\n+C ObjC C++ ObjC++\n+Warn about user-specified include directories that do not exist\n+\n Wmissing-prototypes\n C ObjC\n Warn about global functions without prototypes"}, {"sha": "d006192afb33f5813e7e404824dca36fe20912fe", "filename": "gcc/cpplib.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -264,6 +264,10 @@ struct cpp_options\n   /* Nonzero means warn if slash-star appears in a comment.  */\n   unsigned char warn_comments;\n \n+  /* Nonzero means warn if a user-supplied include directory does not\n+     exist.  */\n+  unsigned char warn_missing_include_dirs;\n+\n   /* Nonzero means warn if there are any trigraphs.  */\n   unsigned char warn_trigraphs;\n \n@@ -439,6 +443,9 @@ struct cpp_dir\n      directories in the search path.  */\n   ino_t ino;\n   dev_t dev;\n+\n+  /* Is this a user-supplied directory? */\n+  bool user_supplied_p;\n };\n \n /* Name under which this program was invoked.  */"}, {"sha": "1ed9e6588f47c0c37ee4b771bc09c69f65f48219", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -222,7 +222,8 @@ in the following sections.\n -Wno-invalid-offsetof  -Winvalid-pch @gol\n -Wlarger-than-@var{len}  -Wlong-long @gol\n -Wmain  -Wmissing-braces @gol\n--Wmissing-format-attribute  -Wmissing-noreturn @gol\n+-Wmissing-format-attribute  -Wmissing-include-dirs @gol\n+-Wmissing-noreturn @gol\n -Wno-multichar  -Wnonnull  -Wpacked  -Wpadded @gol\n -Wparentheses  -Wpointer-arith  -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n@@ -2224,6 +2225,10 @@ int a[2][2] = @{ 0, 1, 2, 3 @};\n int b[2][2] = @{ @{ 0, 1 @}, @{ 2, 3 @} @};\n @end smallexample\n \n+@item -Wmissing-include-dirs @r{(C, C++, and Objective-C only)}\n+@opindex Wmissing-include-dirs\n+Warn if a user-supplied include directory does not exist.\n+\n @item -Wparentheses\n @opindex Wparentheses\n Warn if parentheses are omitted in certain contexts, such"}, {"sha": "95fc70c754e022eb7c66f8541d6d92979abd5df8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -1,3 +1,7 @@\n+2004-05-22  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* gcc.dg/cpp/Wmissingdirs.c: New.\n+\n 2004-05-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/15301\n@@ -5206,10 +5210,6 @@\n \tPR c++/9559\n \t* g++.dg/init/static1.C: New test.\n \n-2003-06-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-\n-\t* Changelog: Remove \">>>>>>>\" from previous change.\n-\n 2003-06-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* g++.old-deja/g++.niklas/README: Fix spelling for \"testcase\"."}, {"sha": "915aaa8de9885b5f9fa93e501c94af39908167c0", "filename": "gcc/testsuite/gcc.dg/cpp/Wmissingdirs.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWmissingdirs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02398bd5bebe35bc44def2963fee7a4c4cf3568/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWmissingdirs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWmissingdirs.c?ref=b02398bd5bebe35bc44def2963fee7a4c4cf3568", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99 -I /jolly/well/better/not/exist -Wmissing-include-dirs -fno-show-column\" } */\n+\n+/* Test that -Wmissing-include-dirs issues a warning when a specified\n+   directory does not exist.  Source Ben Elliston, 2004-05-13.  */\n+\n+/* { dg-warning \"No such file or directory\" \"-Wmissing-include-dirs\" { target *-*-* } 0 } */"}]}