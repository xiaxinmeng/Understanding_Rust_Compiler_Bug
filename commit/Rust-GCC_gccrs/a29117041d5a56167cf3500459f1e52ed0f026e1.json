{"sha": "a29117041d5a56167cf3500459f1e52ed0f026e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5MTE3MDQxZDVhNTYxNjdjZjM1MDA0NTlmMWU1MmVkMGYwMjZlMQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-08-09T00:05:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-08-09T00:05:10Z"}, "message": "gcc.dg/pr30957-1.c: xfail for mmix.\n\nIV (loop2_unroll) doesn't like the mmix port.  The feelings are mutual.\n\nFor mmix, gcc.dg/pr30957-1.c fails (runtime and rtl-scan) for these\nreasons:\n\n- IV doesn't handle the zero-extension-by-shift sequences generated by\n  middle-end (expr.c:convert_mode_scalar) in the absence of\n  zero-extend patterns in a port.\n\n- (when adding such patterns)\n  IV doesn't understand the subreg constructs generated by middle-end\n  in the absence of addsi3 and compare/branch in SImode (int).\n\n- (when hacking pr30957-1.c to iterate using a register-mode type)\n  IV doesn't understand the admittedly weird SFmode operations\n  (performing in DFmode, then truncating, for lack of SFmode\n  operations, but presence of truncdfsf2 and float_extendsfdf2) in\n  order to perform the \"Expanding Accumulator\" optimization.  When\n  also editing the type in the test to be double instead of float, the\n  test passes.\n\nWhile at least the last point seems like a valid reason to just skip\nthe test for mmix, it also seems possible that IV (and maybe\nconvert_mode_scalar by e.g. adding REG_EQUIV notes) be improved to be\nboth smarter and dumber to actually make the test pass, so I think\nit's better to use xfail.  Smarter: understanding zero-extend-\nby-shift and subregged operations better, and \"seeing\" the\naccumulation through the DF/SFmode truncations and expansions.\nDumber: ignoring the cost; unrolling the several operations per SFmode\nadd anyway.\n\nI'm considering adding a variant of this test with \"double\" and\n\"__SIZE_TYPE__\" iteration types, as that passes for mmix as-is.\nMaybe as a mmix-specific test; the world has suffered enough from the\nquestionable gcc.dg/pr30957-1.c (see the test and its history).\n\ngcc/testsuite:\n\t* gcc.dg/pr30957-1.c: xfail for mmix.", "tree": {"sha": "e57400b3d81009bdf3ccb71ba61c1392bd78af47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57400b3d81009bdf3ccb71ba61c1392bd78af47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a29117041d5a56167cf3500459f1e52ed0f026e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29117041d5a56167cf3500459f1e52ed0f026e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29117041d5a56167cf3500459f1e52ed0f026e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29117041d5a56167cf3500459f1e52ed0f026e1/comments", "author": null, "committer": null, "parents": [{"sha": "e2882e76089cecdc268d0835c54cabfa80b5b0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2882e76089cecdc268d0835c54cabfa80b5b0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2882e76089cecdc268d0835c54cabfa80b5b0be"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "564410913ab3e4b2f11964f5f67bb68f786934f1", "filename": "gcc/testsuite/gcc.dg/pr30957-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29117041d5a56167cf3500459f1e52ed0f026e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29117041d5a56167cf3500459f1e52ed0f026e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c?ref=a29117041d5a56167cf3500459f1e52ed0f026e1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* { dg-do run { xfail { mmix-*-* } } } */\n /* We don't (and don't want to) perform this optimisation on soft-float targets,\n    where each addition is a library call.  /\n /* { dg-require-effective-target hard_float } */\n@@ -33,4 +33,4 @@ main ()\n   exit (0);\n }\n \n-/* { dg-final { scan-rtl-dump \"Expanding Accumulator\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"Expanding Accumulator\" \"loop2_unroll\" { xfail mmix-*-* } } } */"}]}