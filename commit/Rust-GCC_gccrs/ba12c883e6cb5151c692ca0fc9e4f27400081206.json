{"sha": "ba12c883e6cb5151c692ca0fc9e4f27400081206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExMmM4ODNlNmNiNTE1MWM2OTJjYTBmYzllNGYyNzQwMDA4MTIwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-02-13T23:25:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-02-13T23:25:19Z"}, "message": "loop.c (combine_givs_used_by_other): Delete.\n\n        * loop.c (combine_givs_used_by_other): Delete.\n        (combine_givs_benefit_from): Delete.\n        (combine_givs): Deny combination of givs only used once.  Simplify\n        code with the death of combine_givs_benefit_from.\n\nFrom-SVN: r25183", "tree": {"sha": "48e89346e99f29617085e679389accb06ca8bce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48e89346e99f29617085e679389accb06ca8bce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba12c883e6cb5151c692ca0fc9e4f27400081206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba12c883e6cb5151c692ca0fc9e4f27400081206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba12c883e6cb5151c692ca0fc9e4f27400081206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba12c883e6cb5151c692ca0fc9e4f27400081206/comments", "author": null, "committer": null, "parents": [{"sha": "77854601c25eb4c113895a5e2d993ed65e48bb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77854601c25eb4c113895a5e2d993ed65e48bb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77854601c25eb4c113895a5e2d993ed65e48bb37"}], "stats": {"total": 79, "additions": 28, "deletions": 51}, "files": [{"sha": "a1a463051a6179f223e861d4967c835d5633201f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba12c883e6cb5151c692ca0fc9e4f27400081206/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba12c883e6cb5151c692ca0fc9e4f27400081206/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba12c883e6cb5151c692ca0fc9e4f27400081206", "patch": "@@ -1,3 +1,10 @@\n+Sat Feb 13 23:29:42 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* loop.c (combine_givs_used_by_other): Delete.\n+\t(combine_givs_benefit_from): Delete.\n+\t(combine_givs): Deny combination of givs only used once.  Simplify\n+\tcode with the death of combine_givs_benefit_from.\n+\n Sun Feb 14 11:24:05 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n  \t* loop.c (scan_loop): Call reg_in_basic_block_p before"}, {"sha": "080f39386f6b4737c1d666531a676f4eed0a27f2", "filename": "gcc/loop.c", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba12c883e6cb5151c692ca0fc9e4f27400081206/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba12c883e6cb5151c692ca0fc9e4f27400081206/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ba12c883e6cb5151c692ca0fc9e4f27400081206", "patch": "@@ -6768,42 +6768,6 @@ cmp_combine_givs_stats (x, y)\n   return d;\n }\n \n-/* If one of these givs is a DEST_REG that was used once by the other giv,\n-   this is actually a single use.  Return 0 if this is not the case,\n-   -1 if g1 is the DEST_REG involved, and 1 if it was g2.  */\n-\n-static int\n-combine_givs_used_by_other (g1, g2)\n-     struct induction *g1, *g2;\n-{\n-  if (g1->giv_type == DEST_REG\n-      && VARRAY_RTX (reg_single_usage, REGNO (g1->dest_reg)) != 0\n-      && VARRAY_RTX (reg_single_usage, REGNO (g1->dest_reg)) != const0_rtx\n-      && reg_mentioned_p (g1->dest_reg, PATTERN (g2->insn)))\n-    return -1;\n-\n-  if (g2->giv_type == DEST_REG\n-      && VARRAY_RTX (reg_single_usage, REGNO (g2->dest_reg)) != 0\n-      && VARRAY_RTX (reg_single_usage, REGNO (g2->dest_reg)) != const0_rtx\n-      && reg_mentioned_p (g2->dest_reg, PATTERN (g1->insn)))\n-    return 1;\n-\n-  return 0;\n-}\n- \n-static int\n-combine_givs_benefit_from (g1, g2)\n-     struct induction *g1, *g2;\n-{\n-  int tmp = combine_givs_used_by_other (g1, g2);\n-  if (tmp < 0)\n-    return 0;\n-  else if (tmp > 0)\n-    return g2->benefit - g1->benefit;\n-  else\n-    return g2->benefit;\n-}\n-\n /* Check all pairs of givs for iv_class BL and see if any can be combined with\n    any other.  If so, point SAME to the giv combined with and set NEW_REG to\n    be an expression (in terms of the other giv's DEST_REG) equivalent to the\n@@ -6813,6 +6777,9 @@ static void\n combine_givs (bl)\n      struct iv_class *bl;\n {\n+  /* Additional benefit to add for being combined multiple times.  */\n+  const int extra_benefit = 3;\n+\n   struct induction *g1, *g2, **giv_array;\n   int i, j, k, giv_count;\n   struct combine_givs_stats *stats;\n@@ -6840,13 +6807,27 @@ combine_givs (bl)\n   for (i = 0; i < giv_count; i++)\n     {\n       int this_benefit;\n+      rtx single_use;\n \n       g1 = giv_array[i];\n+      stats[i].giv_number = i;\n+\n+      /* If a DEST_REG GIV is used only once, do not allow it to combine\n+\t with anything, for in doing so we will gain nothing that cannot\n+\t be had by simply letting the GIV with which we would have combined\n+\t to be reduced on its own.  The losage shows up in particular with \n+\t DEST_ADDR targets on hosts with reg+reg addressing, though it can\n+\t be seen elsewhere as well.  */\n+      if (g1->giv_type == DEST_REG\n+\t  && (single_use = VARRAY_RTX (reg_single_usage, REGNO (g1->dest_reg)))\n+\t  && single_use != const0_rtx)\n+\tcontinue;\n \n       this_benefit = g1->benefit;\n       /* Add an additional weight for zero addends.  */\n       if (g1->no_const_addval)\n \tthis_benefit += 1;\n+\n       for (j = 0; j < giv_count; j++)\n \t{\n \t  rtx this_combine;\n@@ -6856,12 +6837,9 @@ combine_givs (bl)\n \t      && (this_combine = combine_givs_p (g1, g2)) != NULL_RTX)\n \t    {\n \t      can_combine[i*giv_count + j] = this_combine;\n-\t      this_benefit += combine_givs_benefit_from (g1, g2);\n-\t      /* Add an additional weight for being reused more times.  */\n-\t      this_benefit += 3;\n+\t      this_benefit += g2->benefit + extra_benefit;\n \t    }\n \t}\n-      stats[i].giv_number = i;\n       stats[i].total_benefit = this_benefit;\n     }\n \n@@ -6908,7 +6886,7 @@ combine_givs (bl)\n \t      g1->combined_with++;\n \t      g1->lifetime += g2->lifetime;\n \n-\t      g1_add_benefit += combine_givs_benefit_from (g1, g2);\n+\t      g1_add_benefit += g2->benefit;\n \n \t      /* ??? The new final_[bg]iv_value code does a much better job\n \t\t of finding replaceable giv's, and hence this code may no\n@@ -6922,11 +6900,7 @@ combine_givs (bl)\n \t\t{\n \t\t  int m = stats[l].giv_number;\n \t\t  if (can_combine[m*giv_count + j])\n-\t\t    {\n-\t\t      /* Remove additional weight for being reused.  */\n-\t\t      stats[l].total_benefit -= 3 + \n-\t\t\tcombine_givs_benefit_from (giv_array[m], g2);\n-\t\t    }\n+\t\t    stats[l].total_benefit -= g2->benefit + extra_benefit;\n \t\t}\n \n \t      if (loop_dump_stream)\n@@ -6944,11 +6918,7 @@ combine_givs (bl)\n \t    {\n \t      int m = stats[j].giv_number;\n \t      if (can_combine[m*giv_count + j])\n-\t\t{\n-\t\t  /* Remove additional weight for being reused.  */\n-\t\t  stats[j].total_benefit -= 3 + \n-\t\t    combine_givs_benefit_from (giv_array[m], g1);\n-\t\t}\n+\t\tstats[j].total_benefit -= g1->benefit + extra_benefit;\n \t    }\n \n \t  g1->benefit += g1_add_benefit;"}]}