{"sha": "7c8b1a77881319c8605005ef0730af8c4a522610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4YjFhNzc4ODEzMTljODYwNTAwNWVmMDczMGFmOGM0YTUyMjYxMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-13T06:22:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-13T06:22:51Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r149544", "tree": {"sha": "ee487ee2e449b64eb9dc4609001824c7dc732839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee487ee2e449b64eb9dc4609001824c7dc732839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8b1a77881319c8605005ef0730af8c4a522610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8b1a77881319c8605005ef0730af8c4a522610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8b1a77881319c8605005ef0730af8c4a522610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8b1a77881319c8605005ef0730af8c4a522610/comments", "author": null, "committer": null, "parents": [{"sha": "f964461707d57b51397ffbe3b9c1e5a6178a3f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f964461707d57b51397ffbe3b9c1e5a6178a3f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f964461707d57b51397ffbe3b9c1e5a6178a3f8a"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "e5900bf4ccedb610ede704c000f1b372e2d0ec92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8b1a77881319c8605005ef0730af8c4a522610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8b1a77881319c8605005ef0730af8c4a522610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c8b1a77881319c8605005ef0730af8c4a522610", "patch": "@@ -16,10 +16,10 @@\n \n \t* tree-parloops.c (loop_parallel_p): Call vect_is_simple_reduction\n \twith additional argument.\n-\t* tree-vectorizer.h (enum vect_def_type): Add \n+\t* tree-vectorizer.h (enum vect_def_type): Add\n \tvect_double_reduction_def.\n \t(vect_is_simple_reduction): Add argument.\n-\t* tree-vect-loop.c (vect_determine_vectorization_factor): Fix \n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): Fix\n \tindentation.\n \t(vect_analyze_scalar_cycles_1): Detect double reduction. Call\n \tvect_is_simple_reduction with additional argument.\n@@ -39,7 +39,7 @@\n \treplace relevant uses.\n \t(vectorizable_reduction): Call vect_is_simple_reduction with\n \tadditional argument. Fix indentation. Update epilogue code treatment\n-\taccording to the changes in reduction_code_for_scalar_code. Check \n+\taccording to the changes in reduction_code_for_scalar_code. Check\n \tfor double reduction. Call vect_create_epilog_for_reduction with\n \tadditional argument.\n \t* tree-vect-stmts.c (process_use): Handle double reduction, update\n@@ -172,15 +172,15 @@\n \t* dwarf2asm.c: Include dwarf2.h.\n \n 2009-07-09  Maxim Kuvyrkov  <maxim@codesourcery.com>\n-        \n+\n \t* haifa-sched.c (insn_finishes_cycle_p): New static function.\n-        (max_issue): Use it.\n-        * sched-int.h (struct sched_info: insn_finishes_block_p): New\n-        scheduler hook.\n-        * sched-rgn.c (rgn_insn_finishes_block_p): Implement it.\n-        (region_sched_info): Update.\n-        * sched-ebb.c (ebb_sched_info): Update.\n-        * modulo-sched.c (sms_sched_info): Update.\n+\t(max_issue): Use it.\n+\t* sched-int.h (struct sched_info: insn_finishes_block_p): New\n+\tscheduler hook.\n+\t* sched-rgn.c (rgn_insn_finishes_block_p): Implement it.\n+\t(region_sched_info): Update.\n+\t* sched-ebb.c (ebb_sched_info): Update.\n+\t* modulo-sched.c (sms_sched_info): Update.\n \t* sel-sched-ir.c (sched_sel_haifa_sched_info): Update.\n \n 2009-07-09  Maxim Kuvyrkov  <maxim@codesourcery.com>\n@@ -199,8 +199,8 @@\n \n 2009-07-08  Adam Nemet  <anemet@caviumnetworks.com>\n \n-\t* simplify-rtx.c (simplify_binary_operation_1) <AND>: Transform (and\n-        (truncate)) into (truncate (and)).\n+\t* simplify-rtx.c (simplify_binary_operation_1) <AND>:\n+\tTransform (and (truncate)) into (truncate (and)).\n \n 2009-07-08  Adam Nemet  <anemet@caviumnetworks.com>\n \n@@ -315,9 +315,9 @@\n \n 2009-07-07  Duncan Sands  <baldrick@free.fr>\n \n-        * final.c (pass_clean_state): Give the pass a name.\n-        * passes.c (pass_rest_of_compilation): Likewise.\n-        * tree-optimize.c (pass_all_optimizations): Likewise.\n+\t* final.c (pass_clean_state): Give the pass a name.\n+\t* passes.c (pass_rest_of_compilation): Likewise.\n+\t* tree-optimize.c (pass_all_optimizations): Likewise.\n \n 2009-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -342,8 +342,7 @@\n \n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n-\t* cgraphunit.c: Replace %J by an explicit location. Update all\n-\tcalls.\n+\t* cgraphunit.c: Replace %J by an explicit location.  Update all calls.\n \t* c-decl.c: Likewise.\n \t* function.c: Likewise.\n \t* varasm.c: Likewise.\n@@ -395,8 +394,7 @@\n \n 2009-07-06  Diego Novillo  <dnovillo@google.com>\n \n-\t* tree-pretty-print.c (dump_generic_node): Protect\n-\tagainst NULL op0.\n+\t* tree-pretty-print.c (dump_generic_node): Protect against NULL op0.\n \t(debug_tree_chain): Handle cycles.\n \n 2009-07-06  Nick Clifton  <nickc@redhat.com>\n@@ -410,8 +408,7 @@\n \t(TARGET_CPU_CPP_BUILTINS): Define\n \t__FMOVD_ENABLED__ if TARGET_FMOVD is true.\n \t* config/sh/sh.md (movdf_i4): For alternative 0 use either one or\n-\ttwo fmov instructions depending upon whether TARGET_FMOVD is\n-\tenabled.\n+\ttwo fmov instructions depending upon whether TARGET_FMOVD is enabled.\n \t(split for DF load from memory into register): Also handle\n \tMEMs which consist of REG+DISP addressing.\n \t(split for DF store from register to memory): Likewise.\n@@ -456,8 +453,7 @@\n 2009-07-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/40587\n-\t* ira.c (build_insn_chain): Use DF_LR_OUT instead of\n-\tdf_get_live_out.\n+\t* ira.c (build_insn_chain): Use DF_LR_OUT instead of df_get_live_out.\n \n 2009-07-03  Richard Guenther  <rguenther@suse.de>\n \n@@ -473,9 +469,9 @@\n 2009-07-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34163\n-\t* tree-chrec.c (chrec_convert_1): Fold (T2)(t +- x) to\n-\t(T2)t +- (T2)x if t +- x is known to not overflow and\n-\tthe conversion widens the operation.\n+\t* tree-chrec.c (chrec_convert_1): Fold (T2)(t +- x) to (T2)t +- (T2)x\n+\tif t +- x is known to not overflow and the conversion widens the\n+\toperation.\n \t* Makefile.in (tree-chrec.o): Add $(FLAGS_H) dependency.\n \n 2009-07-03  Jan Hubicka  <jh@suse.cz>\n@@ -2799,7 +2795,7 @@\n \t(vect_finalize_reduction): Handle subtraction, fix comments.\n \t(vectorizable_reduction): Handle nested cycles. In case of nested\n \tcycle keep track of the reduction variable position. Call \n-\tvect_is_simple_reduction with additional parameter. Use original \n+\tvect_is_simple_reduction with additional parameter. Use original\n \tstatement code in reduction epilogue for nested cycle. Call\n \tvect_create_epilog_for_reduction with additional parameter.\n \t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Assert\n@@ -4390,26 +4386,26 @@\n 2009-06-01  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/39129\n-\t* tree-vect-loop-manip.c (conservative_cost_threshold): Change the \n+\t* tree-vect-loop-manip.c (conservative_cost_threshold): Change the\n \tprinted message.\n-\t(vect_do_peeling_for_loop_bound): Use \n+\t(vect_do_peeling_for_loop_bound): Use\n \tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n \tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n \t(vect_loop_versioning): Likewise.\n \t(vect_create_cond_for_alias_checks): Fix indentation.\n-\t* tree-vectorizer.h (struct _loop_vec_info): Fix indentation of the \n+\t* tree-vectorizer.h (struct _loop_vec_info): Fix indentation of the\n \tmacros.\n \t(LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT): Define.\n \t(LOOP_REQUIRES_VERSIONING_FOR_ALIAS): Likewise.\n-\t* tree-vect-loop.c (vect_analyze_loop_form): Change \"too many BBs\" to \n+\t* tree-vect-loop.c (vect_analyze_loop_form): Change \"too many BBs\" to\n \t\"control flow in loop\".\n-\t(vect_estimate_min_profitable_iters): Use \n+\t(vect_estimate_min_profitable_iters): Use\n \tLOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT and\n \tLOOP_REQUIRES_VERSIONING_FOR_ALIAS macros.\n \t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n \t(vect_create_data_ref_ptr): Don't mention array dimension in printing.\n-\t* tree-vect-stmts.c (vectorizable_store): Replace the check that the \n-\tstatement belongs to a group of strided accesses with the exact code \n+\t* tree-vect-stmts.c (vectorizable_store): Replace the check that the\n+\tstatement belongs to a group of strided accesses with the exact code\n \tcheck.\n \t(vectorizable_load): Likewise.\n \t* tree-vect-slp.c (vect_analyze_slp_instance): Spell out \"basic block\"."}]}