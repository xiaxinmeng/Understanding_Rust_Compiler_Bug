{"sha": "6c4e299723b232528d96b081ddb816aeb7ea8497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0ZTI5OTcyM2IyMzI1MjhkOTZiMDgxZGRiODE2YWViN2VhODQ5Nw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-03-25T16:53:14Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-03-25T16:53:14Z"}, "message": "fold-const.c (expr_location_or): New function.\n\n\t* fold-const.c (expr_location_or): New function.\n\t(fold_truth_not_expr): Call it.\n\nFrom-SVN: r171468", "tree": {"sha": "4bb9590eca60bf0f44a6a121b69a7751f1b39015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb9590eca60bf0f44a6a121b69a7751f1b39015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c4e299723b232528d96b081ddb816aeb7ea8497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4e299723b232528d96b081ddb816aeb7ea8497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4e299723b232528d96b081ddb816aeb7ea8497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4e299723b232528d96b081ddb816aeb7ea8497/comments", "author": null, "committer": null, "parents": [{"sha": "0edf1bb291554a150601dfc3a03327f93f4bfc99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edf1bb291554a150601dfc3a03327f93f4bfc99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edf1bb291554a150601dfc3a03327f93f4bfc99"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "fec8d1baa3197e70788d75ed4f756d32e1576e30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4e299723b232528d96b081ddb816aeb7ea8497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4e299723b232528d96b081ddb816aeb7ea8497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c4e299723b232528d96b081ddb816aeb7ea8497", "patch": "@@ -1,3 +1,8 @@\n+2011-03-25  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* fold-const.c (expr_location_or): New function.\n+\t(fold_truth_not_expr): Call it.\n+\n 2011-03-25  Jeff Law  <law@redhat.com>\n \n \t* dwarf2asm.c (dw2_asm_output_encoded_addr_rtx): Add missing"}, {"sha": "017aa8ad9cbbb22f3619699c749fdd5611a0fa35", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4e299723b232528d96b081ddb816aeb7ea8497/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4e299723b232528d96b081ddb816aeb7ea8497/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6c4e299723b232528d96b081ddb816aeb7ea8497", "patch": "@@ -141,6 +141,15 @@ static tree fold_not_const (const_tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n static tree fold_convert_const (enum tree_code, tree, tree);\n \n+/* Return EXPR_LOCATION of T if it is not UNKNOWN_LOCATION.\n+   Otherwise, return LOC.  */\n+\n+static location_t\n+expr_location_or (tree t, location_t loc)\n+{\n+  location_t tloc = EXPR_LOCATION (t);\n+  return tloc != UNKNOWN_LOCATION ? tloc : loc;\n+}\n \n /* Similar to protected_set_expr_location, but never modify x in place,\n    if location can and needs to be set, unshare it.  */\n@@ -3079,23 +3088,15 @@ fold_truth_not_expr (location_t loc, tree arg)\n       return constant_boolean_node (integer_zerop (arg), type);\n \n     case TRUTH_AND_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      loc2 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n-      if (loc2 == UNKNOWN_LOCATION)\n-\tloc2 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n+      loc2 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n       return build2_loc (loc, TRUTH_OR_EXPR, type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)),\n \t\t\t invert_truthvalue_loc (loc2, TREE_OPERAND (arg, 1)));\n \n     case TRUTH_OR_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      loc2 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n-      if (loc2 == UNKNOWN_LOCATION)\n-\tloc2 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n+      loc2 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n       return build2_loc (loc, TRUTH_AND_EXPR, type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)),\n \t\t\t invert_truthvalue_loc (loc2, TREE_OPERAND (arg, 1)));\n@@ -3115,23 +3116,15 @@ fold_truth_not_expr (location_t loc, tree arg)\n \t\t\t   TREE_OPERAND (arg, 1));\n \n     case TRUTH_ANDIF_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      loc2 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n-      if (loc2 == UNKNOWN_LOCATION)\n-\tloc2 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n+      loc2 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n       return build2_loc (loc, TRUTH_ORIF_EXPR, type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)),\n \t\t\t invert_truthvalue_loc (loc2, TREE_OPERAND (arg, 1)));\n \n     case TRUTH_ORIF_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      loc2 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n-      if (loc2 == UNKNOWN_LOCATION)\n-\tloc2 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n+      loc2 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n       return build2_loc (loc, TRUTH_ANDIF_EXPR, type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)),\n \t\t\t invert_truthvalue_loc (loc2, TREE_OPERAND (arg, 1)));\n@@ -3144,12 +3137,8 @@ fold_truth_not_expr (location_t loc, tree arg)\n \ttree arg1 = TREE_OPERAND (arg, 1);\n \ttree arg2 = TREE_OPERAND (arg, 2);\n \n-\tloc1 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-\tloc2 = EXPR_LOCATION (TREE_OPERAND (arg, 2));\n-\tif (loc1 == UNKNOWN_LOCATION)\n-\t  loc1 = loc;\n-\tif (loc2 == UNKNOWN_LOCATION)\n-\t  loc2 = loc;\n+\tloc1 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n+\tloc2 = expr_location_or (TREE_OPERAND (arg, 2), loc);\n \n \t/* A COND_EXPR may have a throw as one operand, which\n \t   then has void type.  Just leave void operands\n@@ -3162,17 +3151,13 @@ fold_truth_not_expr (location_t loc, tree arg)\n       }\n \n     case COMPOUND_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 1));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 1), loc);\n       return build2_loc (loc, COMPOUND_EXPR, type,\n \t\t\t TREE_OPERAND (arg, 0),\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 1)));\n \n     case NON_LVALUE_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n       return invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0));\n \n     CASE_CONVERT:\n@@ -3182,9 +3167,7 @@ fold_truth_not_expr (location_t loc, tree arg)\n       /* ... fall through ...  */\n \n     case FLOAT_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n       return build1_loc (loc, TREE_CODE (arg), type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)));\n \n@@ -3197,9 +3180,7 @@ fold_truth_not_expr (location_t loc, tree arg)\n       return build1_loc (loc, TRUTH_NOT_EXPR, type, arg);\n \n     case CLEANUP_POINT_EXPR:\n-      loc1 = EXPR_LOCATION (TREE_OPERAND (arg, 0));\n-      if (loc1 == UNKNOWN_LOCATION)\n-\tloc1 = loc;\n+      loc1 = expr_location_or (TREE_OPERAND (arg, 0), loc);\n       return build1_loc (loc, CLEANUP_POINT_EXPR, type,\n \t\t\t invert_truthvalue_loc (loc1, TREE_OPERAND (arg, 0)));\n "}]}