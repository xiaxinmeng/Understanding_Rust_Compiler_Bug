{"sha": "d1288d850944f69a795e4ff444a427eba3fec11b", "node_id": "C_kwDOANBUbNoAKGQxMjg4ZDg1MDk0NGY2OWE3OTVlNGZmNDQ0YTQyN2ViYTNmZWMxMWI", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-11-15T14:38:55Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-11-15T15:08:33Z"}, "message": "libatomic: Add support for LSE and LSE2\n\nAdd support for AArch64 LSE and LSE2 to libatomic.  Disable outline atomics,\nand use LSE ifuncs for 1-8 byte atomics and LSE2 ifuncs for 16-byte atomics.\nOn Neoverse V1, 16-byte atomics are ~4x faster due to avoiding locks.\n\nNote this is safe since we swap all 16-byte atomics using the same ifunc,\nso they either use locks or LSE2 atomics, but never a mix. This also improves\nABI compatibility with LLVM: its inlined 16-byte atomics are compatible with\nthe new libatomic if LSE2 is supported.\n\nlibatomic/\n\t* Makefile.in: Regenerated with automake 1.15.1.\n\t* Makefile.am: Add atomic_16.S for AArch64.\n\t* configure.tgt: Disable outline atomics in AArch64 build.\n\t* config/linux/aarch64/atomic_16.S: New file - implementation of\n\tifuncs for 16-byte atomics.\n\t* config/linux/aarch64/host-config.h: Enable ifuncs, use LSE\n\t(HWCAP_ATOMICS) for 1-8-byte atomics and LSE2 (HWCAP_USCAT) for\n\t16-byte atomics.", "tree": {"sha": "0357dd0e95cb2e1825217396f7ff76fe6b1a377b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0357dd0e95cb2e1825217396f7ff76fe6b1a377b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1288d850944f69a795e4ff444a427eba3fec11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1288d850944f69a795e4ff444a427eba3fec11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1288d850944f69a795e4ff444a427eba3fec11b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1288d850944f69a795e4ff444a427eba3fec11b/comments", "author": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5925f0ec54ab5ed773935eec09a602f58fa0ca2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5925f0ec54ab5ed773935eec09a602f58fa0ca2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5925f0ec54ab5ed773935eec09a602f58fa0ca2c"}], "stats": {"total": 545, "additions": 527, "deletions": 18}, "files": [{"sha": "41e5da28512150780a2018386e22b4e70afcfa3f", "filename": "libatomic/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.am?ref=d1288d850944f69a795e4ff444a427eba3fec11b", "patch": "@@ -127,6 +127,8 @@ if HAVE_IFUNC\n if ARCH_AARCH64_LINUX\n IFUNC_OPTIONS\t     = -march=armv8-a+lse\n libatomic_la_LIBADD += $(foreach s,$(SIZES),$(addsuffix _$(s)_1_.lo,$(SIZEOBJS)))\n+libatomic_la_SOURCES += atomic_16.S\n+\n endif\n if ARCH_ARM_LINUX\n IFUNC_OPTIONS\t     = -march=armv7-a+fp -DHAVE_KERNEL64"}, {"sha": "89e29fc60a7fb74341b2f0f805e461847073082c", "filename": "libatomic/Makefile.in", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.in?ref=d1288d850944f69a795e4ff444a427eba3fec11b", "patch": "@@ -90,13 +90,14 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n @ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@am__append_1 = $(foreach s,$(SIZES),$(addsuffix _$(s)_1_.lo,$(SIZEOBJS)))\n-@ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@am__append_2 = $(foreach \\\n+@ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@am__append_2 = atomic_16.S\n+@ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@am__append_3 = $(foreach \\\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\ts,$(SIZES),$(addsuffix \\\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\t_$(s)_1_.lo,$(SIZEOBJS))) \\\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\t$(addsuffix \\\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\t_8_2_.lo,$(SIZEOBJS))\n-@ARCH_I386_TRUE@@HAVE_IFUNC_TRUE@am__append_3 = $(addsuffix _8_1_.lo,$(SIZEOBJS))\n-@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@am__append_4 = $(addsuffix _16_1_.lo,$(SIZEOBJS)) \\\n+@ARCH_I386_TRUE@@HAVE_IFUNC_TRUE@am__append_4 = $(addsuffix _8_1_.lo,$(SIZEOBJS))\n+@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@am__append_5 = $(addsuffix _16_1_.lo,$(SIZEOBJS)) \\\n @ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@\t\t       $(addsuffix _16_2_.lo,$(SIZEOBJS))\n \n subdir = .\n@@ -154,8 +155,11 @@ am__uninstall_files_from_dir = { \\\n   }\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n+@ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@am__objects_1 =  \\\n+@ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@\tatomic_16.lo\n am_libatomic_la_OBJECTS = gload.lo gstore.lo gcas.lo gexch.lo \\\n-\tglfree.lo lock.lo init.lo fenv.lo fence.lo flag.lo\n+\tglfree.lo lock.lo init.lo fenv.lo fence.lo flag.lo \\\n+\t$(am__objects_1)\n libatomic_la_OBJECTS = $(am_libatomic_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -165,9 +169,9 @@ libatomic_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n \t$(libatomic_la_LDFLAGS) $(LDFLAGS) -o $@\n libatomic_convenience_la_DEPENDENCIES = $(libatomic_la_LIBADD)\n-am__objects_1 = gload.lo gstore.lo gcas.lo gexch.lo glfree.lo lock.lo \\\n-\tinit.lo fenv.lo fence.lo flag.lo\n-am_libatomic_convenience_la_OBJECTS = $(am__objects_1)\n+am__objects_2 = gload.lo gstore.lo gcas.lo gexch.lo glfree.lo lock.lo \\\n+\tinit.lo fenv.lo fence.lo flag.lo $(am__objects_1)\n+am_libatomic_convenience_la_OBJECTS = $(am__objects_2)\n libatomic_convenience_la_OBJECTS =  \\\n \t$(am_libatomic_convenience_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n@@ -185,6 +189,16 @@ am__v_at_1 =\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n am__depfiles_maybe = depfiles\n am__mv = mv -f\n+CPPASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)\n+LTCPPASCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) \\\n+\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t$(AM_CCASFLAGS) $(CCASFLAGS)\n+AM_V_CPPAS = $(am__v_CPPAS_@AM_V@)\n+am__v_CPPAS_ = $(am__v_CPPAS_@AM_DEFAULT_V@)\n+am__v_CPPAS_0 = @echo \"  CPPAS   \" $@;\n+am__v_CPPAS_1 = \n COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n@@ -369,6 +383,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -404,9 +419,8 @@ noinst_LTLIBRARIES = libatomic_convenience.la\n @LIBAT_BUILD_VERSIONED_SHLIB_SUN_TRUE@@LIBAT_BUILD_VERSIONED_SHLIB_TRUE@libatomic_version_dep = libatomic.map-sun\n libatomic_version_info = -version-info $(libtool_VERSION)\n libatomic_la_LDFLAGS = $(libatomic_version_info) $(libatomic_version_script) $(lt_host_flags)\n-libatomic_la_SOURCES = gload.c gstore.c gcas.c gexch.c glfree.c lock.c init.c \\\n-\tfenv.c fence.c flag.c\n-\n+libatomic_la_SOURCES = gload.c gstore.c gcas.c gexch.c glfree.c lock.c \\\n+\tinit.c fenv.c fence.c flag.c $(am__append_2)\n SIZEOBJS = load store cas exch fadd fsub fand fior fxor fnand tas\n EXTRA_libatomic_la_SOURCES = $(addsuffix _n.c,$(SIZEOBJS))\n libatomic_la_DEPENDENCIES = $(libatomic_la_LIBADD) $(libatomic_version_dep)\n@@ -432,8 +446,8 @@ all_c_files := $(foreach dir,$(search_path),$(wildcard $(dir)/*.c))\n # Then sort through them to find the one we want, and select the first.\n M_SRC = $(firstword $(filter %/$(M_FILE), $(all_c_files)))\n libatomic_la_LIBADD = $(foreach s,$(SIZES),$(addsuffix \\\n-\t_$(s)_.lo,$(SIZEOBJS))) $(am__append_1) $(am__append_2) \\\n-\t$(am__append_3) $(am__append_4)\n+\t_$(s)_.lo,$(SIZEOBJS))) $(am__append_1) $(am__append_3) \\\n+\t$(am__append_4) $(am__append_5)\n @ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=armv8-a+lse\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=armv7-a+fp -DHAVE_KERNEL64\n @ARCH_I386_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=i586\n@@ -450,7 +464,7 @@ all: auto-config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n \n .SUFFIXES:\n-.SUFFIXES: .c .lo .o .obj\n+.SUFFIXES: .S .c .lo .o .obj\n am--refresh: Makefile\n \t@:\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/../multilib.am $(am__configure_deps)\n@@ -559,6 +573,7 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomic_16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fence.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/flag.Plo@am__quote@\n@@ -570,6 +585,27 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/init.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lock.Plo@am__quote@\n \n+.S.o:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n+@am__fastdepCCAS_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(CPPASCOMPILE) -c -o $@ $<\n+\n+.S.obj:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`\n+@am__fastdepCCAS_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(CPPASCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.S.lo:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)$(LTCPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n+@am__fastdepCCAS_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(LTCPPASCOMPILE) -c -o $@ $<\n+\n .c.o:\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po"}, {"sha": "bced7290dc14afd922ae7ab91ff9500413741def", "filename": "libatomic/config/linux/aarch64/atomic_16.S", "status": "added", "additions": 462, "deletions": 0, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfig%2Flinux%2Faarch64%2Fatomic_16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfig%2Flinux%2Faarch64%2Fatomic_16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Flinux%2Faarch64%2Fatomic_16.S?ref=d1288d850944f69a795e4ff444a427eba3fec11b", "patch": "@@ -0,0 +1,462 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+\t.arch\tarmv8-a+lse\n+\n+#define ENTRY(name)\t\t\\\n+\t.global name;\t\t\\\n+\t.hidden name;\t\t\\\n+\t.type name,%function;\t\\\n+\t.p2align 4;\t\t\\\n+name:\t\t\t\t\\\n+\t.cfi_startproc;\t\t\\\n+\thint\t34\t// bti c\n+\n+#define END(name)\t\t\\\n+\t.cfi_endproc;\t\t\\\n+\t.size name, .-name;\n+\n+#define res0 x0\n+#define res1 x1\n+#define in0  x2\n+#define in1  x3\n+#define tmp0 x6\n+#define tmp1 x7\n+#define exp0 x8\n+#define exp1 x9\n+\n+#ifdef __AARCH64EB__\n+# define reslo x1\n+# define reshi x0\n+# define inlo  x3\n+# define inhi  x2\n+# define tmplo x7\n+# define tmphi x6\n+#else\n+# define reslo x0\n+# define reshi x1\n+# define inlo  x2\n+# define inhi  x3\n+# define tmplo x6\n+# define tmphi x7\n+#endif\n+\n+#define RELAXED 0\n+#define CONSUME 1\n+#define ACQUIRE 2\n+#define RELEASE 3\n+#define ACQ_REL 4\n+#define SEQ_CST 5\n+\n+\n+ENTRY (libat_load_16_i1)\n+\tcbnz\tw1, 1f\n+\tldp\tres0, res1, [x0]\n+\tret\n+1:\n+\tcmp\tw1, ACQUIRE\n+\tb.hi\t2f\n+\tldp\tres0, res1, [x0]\n+\tdmb\tishld\n+\tret\n+2:\n+\tldp\tres0, res1, [x0]\n+\tdmb\tish\n+\tret\n+END (libat_load_16_i1)\n+\n+\n+ENTRY (libat_store_16_i1)\n+\tcbnz\tw4, 1f\n+\tstp\tin0, in1, [x0]\n+\tret\n+1:\n+\tdmb\tish\n+\tstp\tin0, in1, [x0]\n+\tcmp\tw4, SEQ_CST\n+\tbeq\t2f\n+\tret\n+2:\n+\tdmb\tish\n+\tret\n+END (libat_store_16_i1)\n+\n+\n+ENTRY (libat_exchange_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tstxp\tw4, in0, in1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tcmp\tw4, ACQUIRE\n+\tb.hi\t4f\n+3:\n+\tldaxp\tres0, res1, [x5]\n+\tstxp\tw4, in0, in1, [x5]\n+\tcbnz\tw4, 3b\n+\tret\n+4:\n+\tcmp\tw4, RELEASE\n+\tb.ne\t6f\n+5:\n+\tldxp\tres0, res1, [x5]\n+\tstlxp\tw4, in0, in1, [x5]\n+\tcbnz\tw4, 5b\n+\tret\n+6:\n+\tldaxp\tres0, res1, [x5]\n+\tstlxp\tw4, in0, in1, [x5]\n+\tcbnz\tw4, 6b\n+\tret\n+END (libat_exchange_16_i1)\n+\n+\n+ENTRY (libat_compare_exchange_16_i1)\n+\tldp\texp0, exp1, [x1]\n+\tmov\ttmp0, exp0\n+\tmov\ttmp1, exp1\n+\tcbz\tw4, 2f\n+\tcmp\tw4, RELEASE\n+\tb.hs\t3f\n+\tcaspa\texp0, exp1, in0, in1, [x0]\n+0:\n+\tcmp\texp0, tmp0\n+\tccmp\texp1, tmp1, 0, eq\n+\tbne\t1f\n+\tmov\tx0, 1\n+\tret\n+1:\n+\tstp\texp0, exp1, [x1]\n+\tmov\tx0, 0\n+\tret\n+2:\n+\tcasp\texp0, exp1, in0, in1, [x0]\n+\tb\t0b\n+3:\n+\tb.hi\t4f\n+\tcaspl\texp0, exp1, in0, in1, [x0]\n+\tb\t0b\n+4:\n+\tcaspal\texp0, exp1, in0, in1, [x0]\n+\tb\t0b\n+END (libat_compare_exchange_16_i1)\n+\n+\n+ENTRY (libat_fetch_add_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tadds\ttmplo, reslo, inlo\n+\tadc\ttmphi, reshi, inhi\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tadds\ttmplo, reslo, inlo\n+\tadc\ttmphi, reshi, inhi\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_add_16_i1)\n+\n+\n+ENTRY (libat_add_fetch_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tadds\treslo, reslo, inlo\n+\tadc\treshi, reshi, inhi\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tadds\treslo, reslo, inlo\n+\tadc\treshi, reshi, inhi\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_add_fetch_16_i1)\n+\n+\n+ENTRY (libat_fetch_sub_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tsubs\ttmplo, reslo, inlo\n+\tsbc\ttmphi, reshi, inhi\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tsubs\ttmplo, reslo, inlo\n+\tsbc\ttmphi, reshi, inhi\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_sub_16_i1)\n+\n+\n+ENTRY (libat_sub_fetch_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tsubs\treslo, reslo, inlo\n+\tsbc\treshi, reshi, inhi\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tsubs\treslo, reslo, inlo\n+\tsbc\treshi, reshi, inhi\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_sub_fetch_16_i1)\n+\n+\n+ENTRY (libat_fetch_or_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\torr\ttmp0, res0, in0\n+\torr\ttmp1, res1, in1\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\torr\ttmp0, res0, in0\n+\torr\ttmp1, res1, in1\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_or_16_i1)\n+\n+\n+ENTRY (libat_or_fetch_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\torr\tres0, res0, in0\n+\torr\tres1, res1, in1\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\torr\tres0, res0, in0\n+\torr\tres1, res1, in1\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_or_fetch_16_i1)\n+\n+\n+ENTRY (libat_fetch_and_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tand\ttmp0, res0, in0\n+\tand\ttmp1, res1, in1\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tand\ttmp0, res0, in0\n+\tand\ttmp1, res1, in1\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_and_16_i1)\n+\n+\n+ENTRY (libat_and_fetch_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\tand\tres0, res0, in0\n+\tand\tres1, res1, in1\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\tand\tres0, res0, in0\n+\tand\tres1, res1, in1\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_and_fetch_16_i1)\n+\n+\n+ENTRY (libat_fetch_xor_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\teor\ttmp0, res0, in0\n+\teor\ttmp1, res1, in1\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\teor\ttmp0, res0, in0\n+\teor\ttmp1, res1, in1\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_xor_16_i1)\n+\n+\n+ENTRY (libat_xor_fetch_16_i1)\n+\tmov\tx5, x0\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\teor\tres0, res0, in0\n+\teor\tres1, res1, in1\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\teor\tres0, res0, in0\n+\teor\tres1, res1, in1\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_xor_fetch_16_i1)\n+\n+\n+ENTRY (libat_fetch_nand_16_i1)\n+\tmov\tx5, x0\n+\tmvn\tin0, in0\n+\tmvn\tin1, in1\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\torn\ttmp0, in0, res0\n+\torn\ttmp1, in1, res1\n+\tstxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\torn\ttmp0, in0, res0\n+\torn\ttmp1, in1, res1\n+\tstlxp\tw4, tmp0, tmp1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_fetch_nand_16_i1)\n+\n+\n+ENTRY (libat_nand_fetch_16_i1)\n+\tmov\tx5, x0\n+\tmvn\tin0, in0\n+\tmvn\tin1, in1\n+\tcbnz\tw4, 2f\n+1:\n+\tldxp\tres0, res1, [x5]\n+\torn\tres0, in0, res0\n+\torn\tres1, in1, res1\n+\tstxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 1b\n+\tret\n+2:\n+\tldaxp\tres0, res1, [x5]\n+\torn\tres0, in0, res0\n+\torn\tres1, in1, res1\n+\tstlxp\tw4, res0, res1, [x5]\n+\tcbnz\tw4, 2b\n+\tret\n+END (libat_nand_fetch_16_i1)\n+\n+\n+ENTRY (libat_test_and_set_16_i1)\n+\tmov\tw2, 1\n+\tcbnz\tw1, 2f\n+\tswpb\tw0, w2, [x0]\n+\tret\n+\n+2:\tswpalb\tw0, w2, [x0]\n+\tret\n+END (libat_test_and_set_16_i1)\n+\n+\n+/* GNU_PROPERTY_AARCH64_* macros from elf.h for use in asm code.  */\n+#define FEATURE_1_AND 0xc0000000\n+#define FEATURE_1_BTI 1\n+#define FEATURE_1_PAC 2\n+\n+/* Supported features based on the code generation options.  */\n+#if defined(__ARM_FEATURE_BTI_DEFAULT)\n+# define BTI_FLAG FEATURE_1_BTI\n+#else\n+# define BTI_FLAG 0\n+#endif\n+\n+#if __ARM_FEATURE_PAC_DEFAULT & 3\n+# define PAC_FLAG FEATURE_1_PAC\n+#else\n+# define PAC_FLAG 0\n+#endif\n+\n+/* Add a NT_GNU_PROPERTY_TYPE_0 note.  */\n+#define GNU_PROPERTY(type, value)\t\\\n+  .section .note.gnu.property, \"a\";     \\\n+  .p2align 3;\t\t\t\t\\\n+  .word 4;\t\t\t\t\\\n+  .word 16;\t\t\t\t\\\n+  .word 5;\t\t\t\t\\\n+  .asciz \"GNU\";\t\t\t\t\\\n+  .word type;\t\t\t\t\\\n+  .word 4;\t\t\t\t\\\n+  .word value;\t\t\t\t\\\n+  .word 0;\n+\n+#if defined(__linux__) || defined(__FreeBSD__)\n+.section .note.GNU-stack, \"\", %progbits\n+\n+/* Add GNU property note if built with branch protection.  */\n+# if (BTI_FLAG|PAC_FLAG) != 0\n+GNU_PROPERTY (FEATURE_1_AND, BTI_FLAG|PAC_FLAG)\n+# endif\n+#endif"}, {"sha": "d9b5ab31bc85cfe1d5f3773c42442e408b174cbc", "filename": "libatomic/config/linux/aarch64/host-config.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfig%2Flinux%2Faarch64%2Fhost-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfig%2Flinux%2Faarch64%2Fhost-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Flinux%2Faarch64%2Fhost-config.h?ref=d1288d850944f69a795e4ff444a427eba3fec11b", "patch": "@@ -22,14 +22,22 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #if HAVE_IFUNC\n-#include <stdlib.h>\n+#include <sys/auxv.h>\n \n-# ifdef HWCAP_ATOMICS\n-#  define IFUNC_COND_1\t(hwcap & HWCAP_ATOMICS)\n+#ifdef HWCAP_USCAT\n+# if N == 16\n+#  define IFUNC_COND_1\t(hwcap & HWCAP_USCAT)\n # else\n-#  define IFUNC_COND_1\t(false)\n+#  define IFUNC_COND_1\t(hwcap & HWCAP_ATOMICS)\n # endif\n-# define IFUNC_NCOND(N)\t(1)\n+#else\n+#  define IFUNC_COND_1\t(false)\n+#endif\n+#define IFUNC_NCOND(N)\t(1)\n+\n+#if N == 16 && IFUNC_ALT != 0\n+# define DONE 1\n+#endif\n \n #endif /* HAVE_IFUNC */\n "}, {"sha": "57f093603bbe7e3452aaf79d2ecbb7549ac9efa3", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1288d850944f69a795e4ff444a427eba3fec11b/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=d1288d850944f69a795e4ff444a427eba3fec11b", "patch": "@@ -49,6 +49,7 @@ case \"${target_cpu}\" in\n \t\tfi\n \t\t;;\n \tesac\n+\tXCFLAGS=\"${XCFLAGS} -mno-outline-atomics\"\n \t;;\n   arm*)\n \tARCH=arm"}]}