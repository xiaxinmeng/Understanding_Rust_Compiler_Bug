{"sha": "6948720272209507c34879fa1d59ad9372402d71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0ODcyMDI3MjIwOTUwN2MzNDg3OWZhMWQ1OWFkOTM3MjQwMmQ3MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-16T17:54:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-16T17:54:11Z"}, "message": "cris.c (cris_target_asm_function_prologue, [...]): Fix format specifier warnings.\n\n\t* cris.c (cris_target_asm_function_prologue,\n\tcris_target_asm_function_epilogue, cris_print_operand): Fix format\n\tspecifier warnings.\n\nFrom-SVN: r66868", "tree": {"sha": "73f6e088aae9d5745ea89d161d969c718980d4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f6e088aae9d5745ea89d161d969c718980d4a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6948720272209507c34879fa1d59ad9372402d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6948720272209507c34879fa1d59ad9372402d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6948720272209507c34879fa1d59ad9372402d71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6948720272209507c34879fa1d59ad9372402d71/comments", "author": null, "committer": null, "parents": [{"sha": "49e57ab02f39f20afc898af80370242b1ae6e7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e57ab02f39f20afc898af80370242b1ae6e7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e57ab02f39f20afc898af80370242b1ae6e7f5"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "c7419c1b0095fca0ee63c991962577e5dd037210", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6948720272209507c34879fa1d59ad9372402d71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6948720272209507c34879fa1d59ad9372402d71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6948720272209507c34879fa1d59ad9372402d71", "patch": "@@ -1,3 +1,7 @@\n+2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cris.c: Fix format specifier warnings.\n+\n 2003-05-16  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/lib1funcs.asm: Fix typo: LSM instead of LSYM."}, {"sha": "1cf94fddb1dd88a354a92a3be34d7ad71972cdd7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6948720272209507c34879fa1d59ad9372402d71/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6948720272209507c34879fa1d59ad9372402d71/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=6948720272209507c34879fa1d59ad9372402d71", "patch": "@@ -778,13 +778,13 @@ cris_target_asm_function_prologue (file, size)\n \t\t      && (last_movem_reg + 1) * 4 + size <= 128\n \t\t      && cris_cpu_version >= CRIS_CPU_SVINTO\n \t\t      && TARGET_SIDE_EFFECT_PREFIXES)\n-\t\t    fprintf (file, \"\\tmovem $%s,[$sp=$sp-%d]\\n\",\n+\t\t    fprintf (file, \"\\tmovem $%s,[$sp=$sp-\"HOST_WIDE_INT_PRINT_DEC\"]\\n\",\n \t\t\t     reg_names[last_movem_reg],\n \t\t\t     (last_movem_reg + 1) * 4 + size);\n \t\t  else\n \t\t    {\n \t\t      /* Avoid printing multiple subsequent sub:s for sp.  */\n-\t\t      fprintf (file, \"\\tsub%s %d,$sp\\n\",\n+\t\t      fprintf (file, \"\\tsub%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n \t\t\t       ADDITIVE_SIZE_MODIFIER ((last_movem_reg + 1)\n \t\t\t\t\t\t       * 4 + size),\n \t\t\t       (last_movem_reg + 1) * 4 + size);\n@@ -796,7 +796,8 @@ cris_target_asm_function_prologue (file, size)\n \t\t  framesize += (last_movem_reg + 1) * 4 + size;\n \n \t\t  if (TARGET_PDEBUG)\n-\t\t    fprintf (file, \"; frame %d, #regs %d, bytes %d args %d\\n\",\n+\t\t    fprintf (file, \"; frame \"HOST_WIDE_INT_PRINT_DEC\n+\t\t\t     \", #regs %d, bytes %d args %d\\n\",\n \t\t\t     size,\n \t\t\t     last_movem_reg + 1,\n \t\t\t     (last_movem_reg + 1) * 4,\n@@ -809,7 +810,7 @@ cris_target_asm_function_prologue (file, size)\n \t\t{\n \t\t  /* Local vars on stack, but there are no movem:s.\n \t\t     Just allocate space.  */\n-\t\t  fprintf (file, \"\\tSub%s %d,$sp\\n\",\n+\t\t  fprintf (file, \"\\tSub%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n \t\t\t   ADDITIVE_SIZE_MODIFIER (size),\n \t\t\t   size);\n \t\t  framesize += size;\n@@ -844,14 +845,14 @@ cris_target_asm_function_prologue (file, size)\n \t  && (last_movem_reg + 1) * 4 + size <= 128\n \t  && cris_cpu_version >= CRIS_CPU_SVINTO\n \t  && TARGET_SIDE_EFFECT_PREFIXES)\n-\tfprintf (file, \"\\tmovem $%s,[$sp=$sp-%d]\\n\",\n+\tfprintf (file, \"\\tmovem $%s,[$sp=$sp-\"HOST_WIDE_INT_PRINT_DEC\"]\\n\",\n \t\t reg_names[last_movem_reg],\n \t\t (last_movem_reg+1) * 4 + size);\n       else\n \t{\n \t  /* Avoid printing multiple subsequent sub:s for sp.  FIXME:\n \t     Clean up the conditional expression.  */\n-\t  fprintf (file, \"\\tsub%s %d,$sp\\n\",\n+\t  fprintf (file, \"\\tsub%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n \t\t   ADDITIVE_SIZE_MODIFIER ((last_movem_reg + 1) * 4 + size),\n \t\t   (last_movem_reg + 1) * 4 + size);\n \t  /* To be compatible with v0..v3 means we do not use an assignment\n@@ -864,7 +865,8 @@ cris_target_asm_function_prologue (file, size)\n       framesize += (last_movem_reg + 1) * 4 + size;\n \n       if (TARGET_PDEBUG)\n-\tfprintf (file, \"; frame %d, #regs %d, bytes %d args %d\\n\",\n+\tfprintf (file, \"; frame \"HOST_WIDE_INT_PRINT_DEC\n+\t\t \", #regs %d, bytes %d args %d\\n\",\n \t\t size,\n \t\t last_movem_reg + 1,\n \t\t (last_movem_reg + 1) * 4,\n@@ -886,7 +888,7 @@ cris_target_asm_function_prologue (file, size)\n       /* This does not need to be accounted for, for unwind.  */\n \n       /* Local vars on stack, and we could not use movem.  Add a sub here.  */\n-      fprintf (file, \"\\tSub%s %d,$sp\\n\",\n+      fprintf (file, \"\\tSub%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n \t       ADDITIVE_SIZE_MODIFIER (size + cfoa_size),\n \t       cfoa_size + size);\n       framesize += size + cfoa_size;\n@@ -900,7 +902,8 @@ cris_target_asm_function_prologue (file, size)\n \n   if (TARGET_PDEBUG)\n     fprintf (file,\n-\t     \"; parm #%d @ %d; frame %d, FP-SP is %d; leaf: %s%s; fp %s, outg: %d arg %d\\n\",\n+\t     \"; parm #%d @ %d; frame \" HOST_WIDE_INT_PRINT_DEC\n+\t     \", FP-SP is %d; leaf: %s%s; fp %s, outg: %d arg %d\\n\",\n \t     CRIS_MAX_ARGS_IN_REGS + 1, FIRST_PARM_OFFSET (0),\n \t     get_frame_size (),\n \t     cris_initial_frame_pointer_offset (),\n@@ -1187,7 +1190,7 @@ cris_target_asm_function_epilogue (file, size)\n \t  if (*save_last && file)\n \t    fprintf (file, save_last);\n \n-\t  sprintf (save_last, \"\\tadd%s %d,$sp\\n\",\n+\t  sprintf (save_last, \"\\tadd%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n \t\t   ADDITIVE_SIZE_MODIFIER (size), size);\n \t}\n \n@@ -1315,7 +1318,8 @@ cris_print_operand (file, x, code)\n       if (GET_CODE (x) != CONST_INT\n \t  || ! CONST_OK_FOR_LETTER_P (INTVAL (x), 'O'))\n \tLOSE_AND_RETURN (\"invalid operand for 'b' modifier\", x);\n-      fprintf (file, \"%d\", INTVAL (x)| (INTVAL (x) <= 255 ? ~255 : ~65535));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t       INTVAL (x)| (INTVAL (x) <= 255 ? ~255 : ~65535));\n       return;\n \n     case 'x':\n@@ -1409,7 +1413,7 @@ cris_print_operand (file, x, code)\n \t  /* High part of a long long constant.  */\n \t  if (GET_MODE (operand) == VOIDmode)\n \t    {\n-\t      fprintf (file, \"0x%x\", CONST_DOUBLE_HIGH (x));\n+\t      fprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_HIGH (x));\n \t      return;\n \t    }\n \t  else\n@@ -1482,12 +1486,12 @@ cris_print_operand (file, x, code)\n       /* Print the least significant part of operand.  */\n       if (GET_CODE (operand) == CONST_DOUBLE)\n \t{\n-\t  fprintf (file, \"0x%x\", CONST_DOUBLE_LOW (x));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_LOW (x));\n \t  return;\n \t}\n       else if (HOST_BITS_PER_WIDE_INT > 32 && GET_CODE (operand) == CONST_INT)\n \t{\n-\t  fprintf (file, \"0x%x\",\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n \t\t   INTVAL (x) & ((unsigned int) 0x7fffffff * 2 + 1));\n \t  return;\n \t}"}]}