{"sha": "2e29434de909a71522122f18fc66efd40c23ce8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyOTQzNGRlOTA5YTcxNTIyMTIyZjE4ZmM2NmVmZDQwYzIzY2U4Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-30T00:35:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-30T00:35:44Z"}, "message": "compiler: Fix -fgo-prefix handling.\n\nThere was bug in the fix for PR 61880: it only worked fully\ncorrectly for code compiled with -fgo-pkgpath.  For code that\nused -fgo-prefix, or that used neither option, the '.'\nseparating the prefix and the package name was converted to an\nunderscore, which did not happen before.  This broke SWIG and\nany other code that expected specific symbol names.\nFortunately all code compiled in libgo and all code compiled\nby the go tool uses -fgo-pkgpath, so this probably did not\naffect very many people.\n\nThis is an incomplete fix that does not modify the package\nfile format, for use on both mainline and the GCC 4.9 branch.\nA follow on patch will fully fix the problem.\n\nFrom-SVN: r220268", "tree": {"sha": "63c941536dee068ef77d7e77c6f5e54b9f6bc337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c941536dee068ef77d7e77c6f5e54b9f6bc337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e29434de909a71522122f18fc66efd40c23ce8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e29434de909a71522122f18fc66efd40c23ce8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e29434de909a71522122f18fc66efd40c23ce8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e29434de909a71522122f18fc66efd40c23ce8b/comments", "author": null, "committer": null, "parents": [{"sha": "15b127290b48b90e2cb9fabbb7c2a09eade6a9c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b127290b48b90e2cb9fabbb7c2a09eade6a9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b127290b48b90e2cb9fabbb7c2a09eade6a9c9"}], "stats": {"total": 128, "additions": 103, "deletions": 25}, "files": [{"sha": "e37f03446c1b3763b21daf511c95121297a5a857", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -91,6 +91,7 @@ should_export(Named_object* no)\n \n void\n Export::export_globals(const std::string& package_name,\n+\t\t       const std::string& prefix,\n \t\t       const std::string& pkgpath,\n \t\t       int package_priority,\n \t\t       const std::map<std::string, Package*>& imports,\n@@ -140,9 +141,18 @@ Export::export_globals(const std::string& package_name,\n   this->write_string(package_name);\n   this->write_c_string(\";\\n\");\n \n-  // The package path, used for all global symbols.\n-  this->write_c_string(\"pkgpath \");\n-  this->write_string(pkgpath);\n+  // The prefix or package path, used for all global symbols.\n+  if (prefix.empty())\n+    {\n+      go_assert(!pkgpath.empty());\n+      this->write_c_string(\"pkgpath \");\n+      this->write_string(pkgpath);\n+    }\n+  else\n+    {\n+      this->write_c_string(\"prefix \");\n+      this->write_string(prefix);\n+    }\n   this->write_c_string(\";\\n\");\n \n   // The package priority."}, {"sha": "c010a14686c115f608c539a7488e29f2327aa751", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -117,14 +117,17 @@ class Export : public String_dump\n   // Export the identifiers in BINDINGS which are marked for export.\n   // The exporting is done via a series of calls to THIS->STREAM_.  If\n   // is nothing to export, this->stream_->write will not be called.\n-  // PKGPATH is the package path.\n+  // PREFIX is the package prefix.  PKGPATH is the package path.\n+  // Only one of PREFIX and PKGPATH will be non-empty.\n   // PACKAGE_PRIORITY is the priority to use for this package.\n+  // IMPORTS is the explicitly imported packages.\n   // IMPORT_INIT_FN is the name of the import initialization function\n   // for this package; it will be empty if none is needed.\n   // IMPORTED_INIT_FNS is the list of initialization functions for\n   // imported packages.\n   void\n   export_globals(const std::string& package_name,\n+\t\t const std::string& prefix,\n \t\t const std::string& pkgpath,\n \t\t int package_priority,\n \t\t const std::map<std::string, Package*>& imports,"}, {"sha": "9039ce3ab9d3db958fb05e29b1739f9f36a489e8", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -341,22 +341,28 @@ Gogo::set_package_name(const std::string& package_name,\n   // Now that we know the name of the package we are compiling, set\n   // the package path to use for reflect.Type.PkgPath and global\n   // symbol names.\n-  if (!this->pkgpath_set_)\n+  if (this->pkgpath_set_)\n+    this->pkgpath_symbol_ = Gogo::pkgpath_for_symbol(this->pkgpath_);\n+  else\n     {\n       if (!this->prefix_from_option_ && package_name == \"main\")\n-\tthis->pkgpath_ = package_name;\n+\t{\n+\t  this->pkgpath_ = package_name;\n+\t  this->pkgpath_symbol_ = Gogo::pkgpath_for_symbol(package_name);\n+\t}\n       else\n \t{\n \t  if (!this->prefix_from_option_)\n \t    this->prefix_ = \"go\";\n \t  this->pkgpath_ = this->prefix_ + '.' + package_name;\n+\t  this->pkgpath_symbol_ = (Gogo::pkgpath_for_symbol(this->prefix_) + '.'\n+\t\t\t\t   + Gogo::pkgpath_for_symbol(package_name));\n \t}\n       this->pkgpath_set_ = true;\n     }\n \n-  this->pkgpath_symbol_ = Gogo::pkgpath_for_symbol(this->pkgpath_);\n-\n-  this->package_ = this->register_package(this->pkgpath_, location);\n+  this->package_ = this->register_package(this->pkgpath_,\n+\t\t\t\t\t  this->pkgpath_symbol_, location);\n   this->package_->set_package_name(package_name, location);\n \n   if (this->is_main_package())\n@@ -1524,10 +1530,11 @@ Gogo::add_imported_package(const std::string& real_name,\n \t\t\t   const std::string& alias_arg,\n \t\t\t   bool is_alias_exported,\n \t\t\t   const std::string& pkgpath,\n+\t\t\t   const std::string& pkgpath_symbol,\n \t\t\t   Location location,\n \t\t\t   bool* padd_to_globals)\n {\n-  Package* ret = this->register_package(pkgpath, location);\n+  Package* ret = this->register_package(pkgpath, pkgpath_symbol, location);\n   ret->set_package_name(real_name, location);\n \n   *padd_to_globals = false;\n@@ -1556,10 +1563,13 @@ Gogo::add_imported_package(const std::string& real_name,\n // Register a package.  This package may or may not be imported.  This\n // returns the Package structure for the package, creating if it\n // necessary.  LOCATION is the location of the import statement that\n-// led us to see this package.\n+// led us to see this package.  PKGPATH_SYMBOL is the symbol to use\n+// for names in the package; it may be the empty string, in which case\n+// we either get it later or make a guess when we need it.\n \n Package*\n-Gogo::register_package(const std::string& pkgpath, Location location)\n+Gogo::register_package(const std::string& pkgpath,\n+\t\t       const std::string& pkgpath_symbol, Location location)\n {\n   Package* package = NULL;\n   std::pair<Packages::iterator, bool> ins =\n@@ -1569,13 +1579,15 @@ Gogo::register_package(const std::string& pkgpath, Location location)\n       // We have seen this package name before.\n       package = ins.first->second;\n       go_assert(package != NULL && package->pkgpath() == pkgpath);\n+      if (!pkgpath_symbol.empty())\n+\tpackage->set_pkgpath_symbol(pkgpath_symbol);\n       if (Linemap::is_unknown_location(package->location()))\n \tpackage->set_location(location);\n     }\n   else\n     {\n       // First time we have seen this package name.\n-      package = new Package(pkgpath, location);\n+      package = new Package(pkgpath, pkgpath_symbol, location);\n       go_assert(ins.first->second == NULL);\n       ins.first->second = package;\n     }\n@@ -4333,10 +4345,24 @@ Gogo::do_exports()\n   // support streaming to a separate file.\n   Stream_to_section stream;\n \n+  // Write out either the prefix or pkgpath depending on how we were\n+  // invoked.\n+  std::string prefix;\n+  std::string pkgpath;\n+  if (this->pkgpath_from_option_)\n+    pkgpath = this->pkgpath_;\n+  else if (this->prefix_from_option_)\n+    prefix = this->prefix_;\n+  else if (this->is_main_package())\n+    pkgpath = \"main\";\n+  else\n+    prefix = \"go\";\n+\n   Export exp(&stream);\n   exp.register_builtin_types(this);\n   exp.export_globals(this->package_name(),\n-\t\t     this->pkgpath(),\n+\t\t     prefix,\n+\t\t     pkgpath,\n \t\t     this->package_priority(),\n \t\t     this->imports_,\n \t\t     (this->need_init_fn_ && !this->is_main_package()\n@@ -7478,8 +7504,9 @@ Unnamed_label::get_goto(Translate_context* context, Location location)\n \n // Class Package.\n \n-Package::Package(const std::string& pkgpath, Location location)\n-  : pkgpath_(pkgpath), pkgpath_symbol_(Gogo::pkgpath_for_symbol(pkgpath)),\n+Package::Package(const std::string& pkgpath,\n+\t\t const std::string& pkgpath_symbol, Location location)\n+  : pkgpath_(pkgpath), pkgpath_symbol_(pkgpath_symbol),\n     package_name_(), bindings_(new Bindings(NULL)), priority_(0),\n     location_(location), used_(false), is_imported_(false),\n     uses_sink_alias_(false)\n@@ -7503,6 +7530,34 @@ Package::set_package_name(const std::string& package_name, Location location)\n \t     package_name.c_str());\n }\n \n+// Return the pkgpath symbol, which is a prefix for symbols defined in\n+// this package.\n+\n+std::string\n+Package::pkgpath_symbol() const\n+{\n+  if (this->pkgpath_symbol_.empty())\n+    {\n+      // In the general case, this is wrong, because the package might\n+      // have been compiled with -fprefix.  However, it is what we\n+      // used to do, so it is no more wrong than we were before.\n+      return Gogo::pkgpath_for_symbol(this->pkgpath_);\n+    }\n+  return this->pkgpath_symbol_;\n+}\n+\n+// Set the package path symbol.\n+\n+void\n+Package::set_pkgpath_symbol(const std::string& pkgpath_symbol)\n+{\n+  go_assert(!pkgpath_symbol.empty());\n+  if (this->pkgpath_symbol_.empty())\n+    this->pkgpath_symbol_ = pkgpath_symbol;\n+  else\n+    go_assert(this->pkgpath_symbol_ == pkgpath_symbol);\n+}\n+\n // Set the priority.  We may see multiple priorities for an imported\n // package; we want to use the largest one.\n "}, {"sha": "c5a71abea94c97d8dd496e08b999581a26990d43", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -276,14 +276,16 @@ class Gogo\n   add_imported_package(const std::string& real_name, const std::string& alias,\n \t\t       bool is_alias_exported,\n \t\t       const std::string& pkgpath,\n+\t\t       const std::string& pkgpath_symbol,\n \t\t       Location location,\n \t\t       bool* padd_to_globals);\n \n   // Register a package.  This package may or may not be imported.\n   // This returns the Package structure for the package, creating if\n   // it necessary.\n   Package*\n-  register_package(const std::string& pkgpath, Location);\n+  register_package(const std::string& pkgpath,\n+\t\t   const std::string& pkgpath_symbol, Location);\n \n   // Start compiling a function.  ADD_METHOD_TO_TYPE is true if a\n   // method function should be added to the type of its receiver.\n@@ -2622,7 +2624,8 @@ class Unnamed_label\n class Package\n {\n  public:\n-  Package(const std::string& pkgpath, Location location);\n+  Package(const std::string& pkgpath, const std::string& pkgpath_symbol,\n+\t  Location location);\n \n   // Get the package path used for all symbols exported from this\n   // package.\n@@ -2631,9 +2634,12 @@ class Package\n   { return this->pkgpath_; }\n \n   // Return the package path to use for a symbol name.\n-  const std::string&\n-  pkgpath_symbol() const\n-  { return this->pkgpath_symbol_; }\n+  std::string\n+  pkgpath_symbol() const;\n+\n+  // Set the package path symbol.\n+  void\n+  set_pkgpath_symbol(const std::string&);\n \n   // Return the location of the import statement.\n   Location"}, {"sha": "cfc042976f3e7b77fcd77bfb1858f04101c4b424", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -301,23 +301,27 @@ Import::import(Gogo* gogo, const std::string& local_name,\n       this->require_c_string(\";\\n\");\n \n       std::string pkgpath;\n+      std::string pkgpath_symbol;\n       if (this->match_c_string(\"prefix \"))\n \t{\n \t  this->advance(7);\n \t  std::string unique_prefix = this->read_identifier();\n \t  this->require_c_string(\";\\n\");\n \t  pkgpath = unique_prefix + '.' + package_name;\n+\t  pkgpath_symbol = (Gogo::pkgpath_for_symbol(unique_prefix) + '.'\n+\t\t\t    + Gogo::pkgpath_for_symbol(package_name));\n \t}\n       else\n \t{\n \t  this->require_c_string(\"pkgpath \");\n \t  pkgpath = this->read_identifier();\n \t  this->require_c_string(\";\\n\");\n+\t  pkgpath_symbol = Gogo::pkgpath_for_symbol(pkgpath);\n \t}\n \n       this->package_ = gogo->add_imported_package(package_name, local_name,\n \t\t\t\t\t\t  is_local_name_exported,\n-\t\t\t\t\t\t  pkgpath,\n+\t\t\t\t\t\t  pkgpath, pkgpath_symbol,\n \t\t\t\t\t\t  this->location_,\n \t\t\t\t\t\t  &this->add_to_globals_);\n       if (this->package_ == NULL)\n@@ -392,7 +396,7 @@ Import::read_one_import()\n     stream->advance(1);\n   this->require_c_string(\"\\\";\\n\");\n \n-  Package* p = this->gogo_->register_package(pkgpath,\n+  Package* p = this->gogo_->register_package(pkgpath, \"\",\n \t\t\t\t\t     Linemap::unknown_location());\n   p->set_package_name(package_name, this->location());\n }\n@@ -649,7 +653,7 @@ Import::read_type()\n     package = this->package_;\n   else\n     {\n-      package = this->gogo_->register_package(pkgpath,\n+      package = this->gogo_->register_package(pkgpath, \"\",\n \t\t\t\t\t      Linemap::unknown_location());\n       if (!package_name.empty())\n \tpackage->set_package_name(package_name, this->location());"}, {"sha": "ca9622569bd3860414b0c4a2c9db404a57b593d9", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e29434de909a71522122f18fc66efd40c23ce8b/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=2e29434de909a71522122f18fc66efd40c23ce8b", "patch": "@@ -22,7 +22,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   bool add_to_globals;\n   Package* package = this->add_imported_package(\"unsafe\", local_name,\n \t\t\t\t\t\tis_local_name_exported,\n-\t\t\t\t\t\t\"unsafe\", location,\n+\t\t\t\t\t\t\"unsafe\", \"unsafe\", location,\n \t\t\t\t\t\t&add_to_globals);\n \n   if (package == NULL)"}]}