{"sha": "d82dd39a26f2dbcf7aaa649327050659c1d95a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyZGQzOWEyNmYyZGJjZjdhYWE2NDkzMjcwNTA2NTljMWQ5NWExNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-02T17:11:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-02T17:11:53Z"}, "message": "tree.h (build): Remove prototype.\n\n2005-12-02  Richard Guenther  <rguenther@suse.de>\n\n        * tree.h (build): Remove prototype.\n        (build, _buildN1, _buildN2, _buildC1, _buildC2): Remove macros.\n        * tree.c (build): Remove.\n        (build0_stat): Update comment.\n\nFrom-SVN: r107909", "tree": {"sha": "53e7b74cc8c48830a1fcafe6383bae53f37a37ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e7b74cc8c48830a1fcafe6383bae53f37a37ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d82dd39a26f2dbcf7aaa649327050659c1d95a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82dd39a26f2dbcf7aaa649327050659c1d95a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82dd39a26f2dbcf7aaa649327050659c1d95a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82dd39a26f2dbcf7aaa649327050659c1d95a15/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ddd4f6275a34fec5adbe4bc024adf025776dc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddd4f6275a34fec5adbe4bc024adf025776dc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddd4f6275a34fec5adbe4bc024adf025776dc35"}], "stats": {"total": 79, "additions": 8, "deletions": 71}, "files": [{"sha": "b5aab4db03a7258986e779b71681f53520a96865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d82dd39a26f2dbcf7aaa649327050659c1d95a15", "patch": "@@ -1,3 +1,10 @@\n+2005-12-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (build): Remove prototype.\n+\t(build, _buildN1, _buildN2, _buildC1, _buildC2): Remove macros.\n+\t* tree.c (build): Remove.\n+\t(build0_stat): Update comment.\n+\n 2005-12-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (schedule_sm): Use buildN instead of build."}, {"sha": "6a97e4109940f35a128f3794022aa1fb1eb2772f", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 58, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d82dd39a26f2dbcf7aaa649327050659c1d95a15", "patch": "@@ -2691,9 +2691,7 @@ do { tree _node = (NODE); \\\n    Constants, decls, types and misc nodes cannot be.\n \n    We define 5 non-variadic functions, from 0 to 4 arguments.  This is\n-   enough for all extant tree codes.  These functions can be called\n-   directly (preferably!), but can also be obtained via GCC preprocessor\n-   magic within the build macro.  */\n+   enough for all extant tree codes.  */\n \n tree\n build0_stat (enum tree_code code, tree tt MEM_STAT_DECL)\n@@ -2955,61 +2953,6 @@ build7_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   return t;\n }\n \n-/* Backup definition for non-gcc build compilers.  */\n-\n-tree\n-(build) (enum tree_code code, tree tt, ...)\n-{\n-  tree t, arg0, arg1, arg2, arg3, arg4, arg5, arg6;\n-  int length = TREE_CODE_LENGTH (code);\n-  va_list p;\n-\n-  va_start (p, tt);\n-  switch (length)\n-    {\n-    case 0:\n-      t = build0 (code, tt);\n-      break;\n-    case 1:\n-      arg0 = va_arg (p, tree);\n-      t = build1 (code, tt, arg0);\n-      break;\n-    case 2:\n-      arg0 = va_arg (p, tree);\n-      arg1 = va_arg (p, tree);\n-      t = build2 (code, tt, arg0, arg1);\n-      break;\n-    case 3:\n-      arg0 = va_arg (p, tree);\n-      arg1 = va_arg (p, tree);\n-      arg2 = va_arg (p, tree);\n-      t = build3 (code, tt, arg0, arg1, arg2);\n-      break;\n-    case 4:\n-      arg0 = va_arg (p, tree);\n-      arg1 = va_arg (p, tree);\n-      arg2 = va_arg (p, tree);\n-      arg3 = va_arg (p, tree);\n-      t = build4 (code, tt, arg0, arg1, arg2, arg3);\n-      break;\n-    case 7:\n-      arg0 = va_arg (p, tree);\n-      arg1 = va_arg (p, tree);\n-      arg2 = va_arg (p, tree);\n-      arg3 = va_arg (p, tree);\n-      arg4 = va_arg (p, tree);\n-      arg5 = va_arg (p, tree);\n-      arg6 = va_arg (p, tree);\n-      t = build7 (code, tt, arg0, arg1, arg2, arg3, arg4, arg5, arg6);\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  va_end (p);\n-\n-  return t;\n-}\n-\n /* Similar except don't specify the TREE_TYPE\n    and leave the TREE_SIDE_EFFECTS as 0.\n    It is permissible for arguments to be null,"}, {"sha": "6946dd450a8ea94cf83ef6a84a42ec5722c6d4fe", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d82dd39a26f2dbcf7aaa649327050659c1d95a15/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d82dd39a26f2dbcf7aaa649327050659c1d95a15", "patch": "@@ -3137,21 +3137,8 @@ extern tree maybe_get_identifier (const char *);\n \n /* Construct various types of nodes.  */\n \n-extern tree build (enum tree_code, tree, ...);\n extern tree build_nt (enum tree_code, ...);\n \n-#if GCC_VERSION >= 3000 || __STDC_VERSION__ >= 199901L\n-/* Use preprocessor trickery to map \"build\" to \"buildN\" where N is the\n-   expected number of arguments.  This is used for both efficiency (no\n-   varargs), and checking (verifying number of passed arguments).  */\n-#define build(code, ...) \\\n-  _buildN1(build, _buildC1(__VA_ARGS__))(code, __VA_ARGS__)\n-#define _buildN1(BASE, X)\t_buildN2(BASE, X)\n-#define _buildN2(BASE, X)\tBASE##X\n-#define _buildC1(...)\t\t_buildC2(__VA_ARGS__,9,8,7,6,5,4,3,2,1,0,0)\n-#define _buildC2(x,a1,a2,a3,a4,a5,a6,a7,a8,a9,c,...) c\n-#endif\n-\n extern tree build0_stat (enum tree_code, tree MEM_STAT_DECL);\n #define build0(c,t) build0_stat (c,t MEM_STAT_INFO)\n extern tree build1_stat (enum tree_code, tree, tree MEM_STAT_DECL);"}]}