{"sha": "a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5MmFkMmVjZTk5NGUyZTFjZDhkYmUwNmZiN2VmZGE0MDk4Y2JlYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-04-30T15:51:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-04-30T15:51:53Z"}, "message": "class.c, [...]: Fix comment typos.\n\n\t* class.c, cp-tree.h, decl.c, decl2.c, pt.c, rtti.c: Fix\n\tcomment typos.\n\nFrom-SVN: r81344", "tree": {"sha": "0c6c36ac746fdda97974ded09b3490cd97805c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6c36ac746fdda97974ded09b3490cd97805c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/comments", "author": null, "committer": null, "parents": [{"sha": "2fe8b9c8f908a4ea5adcd2fd502bfdd793c5630d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe8b9c8f908a4ea5adcd2fd502bfdd793c5630d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe8b9c8f908a4ea5adcd2fd502bfdd793c5630d"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "2eaab1c67ae7616ac044745c00ae774a76574e84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -1,3 +1,8 @@\n+2004-04-30  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* class.c, cp-tree.h, decl.c, decl2.c, pt.c, rtti.c: Fix\n+\tcomment typos.\n+\n 2004-04-23  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/15064"}, {"sha": "42310338abe21d821f35e187215ddc1e4d0a0eaa", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -4178,7 +4178,7 @@ create_vtable_ptr (tree t, tree* virtuals_p)\n     {\n       /* We build this decl with vtbl_ptr_type_node, which is a\n \t `vtable_entry_type*'.  It might seem more precise to use\n-\t `vtable_entry_type (*)[N]' where N is the number of firtual\n+\t `vtable_entry_type (*)[N]' where N is the number of virtual\n \t functions.  However, that would require the vtable pointer in\n \t base classes to have a different type than the vtable pointer\n \t in derived classes.  We could make that happen, but that"}, {"sha": "fb02e41ec56e95ea7e3b7fc3fb9d8265e3a96b2f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -1394,7 +1394,7 @@ struct lang_type GTY(())\n    way or the other.  */\n #define CLASSTYPE_INTERFACE_KNOWN(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->interface_unknown == 0)\n-/* The opposite of CLASSTYPE_INTERFANCE_KNOWN.  */\n+/* The opposite of CLASSTYPE_INTERFACE_KNOWN.  */\n #define CLASSTYPE_INTERFACE_UNKNOWN(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->interface_unknown)\n "}, {"sha": "f589868e14234ddbea73078392f73ce74aea33a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -3099,7 +3099,7 @@ cp_fname_init (const char* name, tree *type_p)\n    decl, NAME is the initialization string and TYPE_DEP indicates whether\n    NAME depended on the type of the function. We make use of that to detect\n    __PRETTY_FUNCTION__ inside a template fn. This is being done\n-   lazily at the point of first use, so we musn't push the decl now.  */\n+   lazily at the point of first use, so we mustn't push the decl now.  */\n \n static tree\n cp_make_fname_decl (tree id, int type_dep)"}, {"sha": "e094493f988e773749cb92ef481f1b4324b5333e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -2292,7 +2292,7 @@ do_static_initialization (tree decl, tree init)\n   if (flag_use_cxa_atexit)\n     register_dtor_fn (decl);\n \n-  /* Finsh up.  */\n+  /* Finish up.  */\n   finish_static_initialization_or_destruction (guard_if_stmt);\n }\n "}, {"sha": "5d2c95ac155f1aac4f94409f613994f76bf159fa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -3008,7 +3008,7 @@ push_template_decl_real (tree decl, int is_friend)\n \t}\n     }\n \n-  /* The DECL_TI_ARGS of DECL contains full set of arguments refering\n+  /* The DECL_TI_ARGS of DECL contains full set of arguments referring\n      back to its most general template.  If TMPL is a specialization,\n      ARGS may only have the innermost set of arguments.  Add the missing\n      argument levels if necessary.  */"}, {"sha": "9e7805651ce7ea7a259d79ecf05dc45ffbe3959a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a692ad2ece994e2e1cd8dbe06fb7efda4098cbec/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a692ad2ece994e2e1cd8dbe06fb7efda4098cbec", "patch": "@@ -1244,7 +1244,7 @@ get_pseudo_ti_desc (tree type)\n }\n \n /* Make sure the required builtin types exist for generating the type_info\n-   varable definitions.  */\n+   variable definitions.  */\n \n static void\n create_tinfo_types (void)"}]}