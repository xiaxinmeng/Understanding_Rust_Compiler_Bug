{"sha": "5e2f2cd5842d2543721a895c64a3b2a553542344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyZjJjZDU4NDJkMjU0MzcyMWE4OTVjNjRhM2IyYTU1MzU0MjM0NA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-09-25T16:41:45Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-09-25T16:41:45Z"}, "message": "Avoid creating dangling references in case of nested tuples\nfor tuple constructors that construct from other tuples.\n\n2015-09-25  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tAvoid creating dangling references in case of nested tuples\n\tfor tuple constructors that construct from other tuples.\n\t* include/std/tuple (_TC::_NonNestedTuple): New.\n\t* include/std/tuple (tuple::_TNTC): New.\n\t* include/std/tuple (tuple(const tuple<_UElements...>&),\n\ttuple(tuple<_UElements...>&&): Use _TNTC.\n\t* testsuite/20_util/tuple/cons/nested_tuple_construct.cc: New.\n\nFrom-SVN: r228134", "tree": {"sha": "4b6be450261dddabdc4c78c3e479be2e192f2ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6be450261dddabdc4c78c3e479be2e192f2ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e2f2cd5842d2543721a895c64a3b2a553542344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2f2cd5842d2543721a895c64a3b2a553542344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2f2cd5842d2543721a895c64a3b2a553542344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2f2cd5842d2543721a895c64a3b2a553542344/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d9f1e0397b3661f765d21d8397e2a54aa4cd55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d9f1e0397b3661f765d21d8397e2a54aa4cd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d9f1e0397b3661f765d21d8397e2a54aa4cd55"}], "stats": {"total": 114, "additions": 106, "deletions": 8}, "files": [{"sha": "50f6e8b694c6d53b379605b9c76e0d84755d4da6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e2f2cd5842d2543721a895c64a3b2a553542344", "patch": "@@ -1,3 +1,13 @@\n+2015-09-25  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tAvoid creating dangling references in case of nested tuples\n+\tfor tuple constructors that construct from other tuples.\n+\t* include/std/tuple (_TC::_NonNestedTuple): New.\n+\t* include/std/tuple (tuple::_TNTC): New.\n+\t* include/std/tuple (tuple(const tuple<_UElements...>&),\n+\ttuple(tuple<_UElements...>&&): Use _TNTC.\n+\t* testsuite/20_util/tuple/cons/nested_tuple_construct.cc: New.\n+\n 2015-09-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/67707"}, {"sha": "751d7eb97cc238a9cd66329d10f9cf63207d721c", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=5e2f2cd5842d2543721a895c64a3b2a553542344", "patch": "@@ -486,6 +486,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\n     }\n+\n+    template<typename _SrcTuple>\n+    static constexpr bool _NonNestedTuple()\n+    {\n+      return  __and_<__not_<is_convertible<_SrcTuple, _Elements...>>,\n+                     __not_<is_constructible<_Elements..., _SrcTuple>>\n+              >::value;\n+    }\n   };\n \n   template<typename... _Elements>\n@@ -514,6 +522,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return false;\n     }\n+\n+    template<typename... _UElements>\n+    static constexpr bool _NonNestedTuple()\n+    {\n+      return true;\n+    }\n   };\n \n   /// Primary class template, tuple\n@@ -599,40 +613,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr tuple(tuple&&) = default; \n \n-      template<typename... _UElements, typename\n+      // Shortcut for the cases where constructors taking tuples\n+      // must avoid creating temporaries.\n+      template<typename _Dummy> using _TNTC =\n+        _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,\n+            _Elements...>;\n+\n+      template<typename... _UElements, typename _Dummy = void, typename\n         enable_if<_TMC<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n                   && _TMC<_UElements...>::template\n-                    _ImplicitlyConvertibleTuple<_UElements...>(),\n+                    _ImplicitlyConvertibleTuple<_UElements...>()\n+                  && _TNTC<_Dummy>::template\n+                    _NonNestedTuple<const tuple<_UElements...>&>(),\n         bool>::type=true>\n         constexpr tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n-      template<typename... _UElements, typename\n+      template<typename... _UElements, typename _Dummy = void, typename\n         enable_if<_TMC<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n                   && !_TMC<_UElements...>::template\n-                    _ImplicitlyConvertibleTuple<_UElements...>(),\n+                    _ImplicitlyConvertibleTuple<_UElements...>()\n+                  && _TNTC<_Dummy>::template\n+                    _NonNestedTuple<const tuple<_UElements...>&>(),\n         bool>::type=false>\n         explicit constexpr tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n-      template<typename... _UElements, typename\n+      template<typename... _UElements, typename _Dummy = void, typename\n         enable_if<_TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && _TMC<_UElements...>::template\n-                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),\n+                    _ImplicitlyMoveConvertibleTuple<_UElements...>()\n+                  && _TNTC<_Dummy>::template\n+                    _NonNestedTuple<tuple<_UElements...>&&>(),\n         bool>::type=true>\n         constexpr tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n-      template<typename... _UElements, typename\n+      template<typename... _UElements, typename _Dummy = void, typename\n         enable_if<_TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && !_TMC<_UElements...>::template\n-                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),\n+                    _ImplicitlyMoveConvertibleTuple<_UElements...>()\n+                  && _TNTC<_Dummy>::template\n+                    _NonNestedTuple<tuple<_UElements...>&&>(),\n         bool>::type=false>\n         explicit constexpr tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }"}, {"sha": "32ef3cc0259273f3d1e6a383bd1ba1a814957990", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/nested_tuple_construct.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnested_tuple_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f2cd5842d2543721a895c64a3b2a553542344/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnested_tuple_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnested_tuple_construct.cc?ref=5e2f2cd5842d2543721a895c64a3b2a553542344", "patch": "@@ -0,0 +1,60 @@\n+#include <string>\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+static std::string result;\n+\n+struct X {\n+  int state; // this has to be here\n+  X() {\n+    result += \"Def\";\n+  }\n+\n+  X(X const&) {\n+    result += \"Copy\";\n+  }\n+\n+  X(X&&) {\n+    result += \"Move\";\n+  }\n+\n+  ~X() {\n+    result += \"Dtor\";\n+  }\n+};\n+\n+void f()\n+{\n+  X v;\n+  std::tuple<X> t1{v};\n+  std::tuple<std::tuple<X>&&> t2{std::move(t1)};\n+  std::tuple<std::tuple<X>> t3{std::move(t2)};\n+}\n+\n+void f2()\n+{\n+  X v;\n+  std::tuple<X> t1{std::move(v)};\n+  std::tuple<std::tuple<X>&&> t2{std::move(t1)};\n+  std::tuple<std::tuple<X>> t3{std::move(t2)};\n+}\n+\n+void f3()\n+{\n+  std::tuple<X> t1{X{}};\n+  std::tuple<std::tuple<X>&&> t2{std::move(t1)};\n+  std::tuple<std::tuple<X>> t3{std::move(t2)};\n+}\n+\n+int main()\n+{\n+  f();\n+  VERIFY(result == \"DefCopyMoveDtorDtorDtor\");\n+  result = \"\";\n+  f2();\n+  VERIFY(result == \"DefMoveMoveDtorDtorDtor\");\n+  result = \"\";\n+  f3();\n+  VERIFY(result == \"DefMoveDtorMoveDtorDtor\");\n+  result = \"\";\n+}"}]}