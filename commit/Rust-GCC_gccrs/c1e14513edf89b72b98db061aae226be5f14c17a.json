{"sha": "c1e14513edf89b72b98db061aae226be5f14c17a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlMTQ1MTNlZGY4OWI3MmI5OGRiMDYxYWFlMjI2YmU1ZjE0YzE3YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-01-04T18:42:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-01-04T18:42:56Z"}, "message": "c-common.c (c_expand_start_cond): Expect the IF_STMT node to be passed in, do not build it.\n\n        * c-common.c (c_expand_start_cond): Expect the IF_STMT node to\n        be passed in, do not build it.\n        (c_begin_if_stmt): New function.\n        (c_begin_while_stmt, c_finish_while_stmt_cond): Likewise.\n        * c-common.h (c_expand_start_cond): Update prototype.\n        (c_begin_if_stmt): Prototype new function.\n        (c_begin_while_stmt, c_finish_while_stmt_cond): Likewise.\n        * c-parse.in (if_prefix): Use c_begin_if_stmt,\n        c_begin_while_stmt and c_finish_while_stmt_cond.\n\nFrom-SVN: r48539", "tree": {"sha": "8720096cbd63038754878a0595c00744ebf6abdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8720096cbd63038754878a0595c00744ebf6abdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e14513edf89b72b98db061aae226be5f14c17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e14513edf89b72b98db061aae226be5f14c17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e14513edf89b72b98db061aae226be5f14c17a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e14513edf89b72b98db061aae226be5f14c17a/comments", "author": null, "committer": null, "parents": [{"sha": "3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b007b5d6bcefa3c87a920e834a7b1d0a34f38e5"}], "stats": {"total": 106, "additions": 93, "deletions": 13}, "files": [{"sha": "765c1db5a9dafb0c6e73f8afe3b9bc03d4b4d97b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1e14513edf89b72b98db061aae226be5f14c17a", "patch": "@@ -1,3 +1,15 @@\n+Fri Jan  4 11:45:05 2002  Jeffrey A Law  (law@redhat.com)\n+\n+        * c-common.c (c_expand_start_cond): Expect the IF_STMT node to\n+        be passed in, do not build it.\n+        (c_begin_if_stmt): New function.\n+        (c_begin_while_stmt, c_finish_while_stmt_cond): Likewise.\n+        * c-common.h (c_expand_start_cond): Update prototype.\n+        (c_begin_if_stmt): Prototype new function.\n+        (c_begin_while_stmt, c_finish_while_stmt_cond): Likewise.\n+        * c-parse.in (if_prefix): Use c_begin_if_stmt,\n+        c_begin_while_stmt and c_finish_while_stmt_cond.\n+\n 2002-01-04  William Cohen  <wcohen@redhat.com>\n \n \t* config/pa/elf.h (ASM_FILE_START): Reverted to profile_flag."}, {"sha": "b08ef5b77a3c9a74364cb0ad9cff176f000b7938", "filename": "gcc/c-common.c", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c1e14513edf89b72b98db061aae226be5f14c17a", "patch": "@@ -268,15 +268,20 @@ static int if_stack_space = 0;\n static int if_stack_pointer = 0;\n \n /* Record the start of an if-then, and record the start of it\n-   for ambiguous else detection.  */\n+   for ambiguous else detection.\n+\n+   COND is the condition for the if-then statement.\n+\n+   IF_STMT is the statement node that has already been created for\n+   this if-then statement.  It is created before parsing the\n+   condition to keep line number information accurate.  */\n \n void\n-c_expand_start_cond (cond, compstmt_count)\n+c_expand_start_cond (cond, compstmt_count, if_stmt)\n      tree cond;\n      int compstmt_count;\n+     tree if_stmt;\n {\n-  tree if_stmt;\n-\n   /* Make sure there is enough space on the stack.  */\n   if (if_stack_space == 0)\n     {\n@@ -289,7 +294,6 @@ c_expand_start_cond (cond, compstmt_count)\n       if_stack = (if_elt *) xrealloc (if_stack, if_stack_space * sizeof (if_elt));\n     }\n \n-  if_stmt = build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   IF_COND (if_stmt) = cond;\n   add_stmt (if_stmt);\n \n@@ -355,6 +359,46 @@ c_finish_else ()\n   RECHAIN_STMTS (if_stmt, ELSE_CLAUSE (if_stmt));\n }\n \n+/* Begin an if-statement.  Returns a newly created IF_STMT if\n+   appropriate.\n+\n+   Unlike the C++ front-end, we do not call add_stmt here; it is\n+   probably safe to do so, but I am not very familiar with this\n+   code so I am being extra careful not to change its behavior\n+   beyond what is strictly necessary for correctness.  */\n+\n+tree\n+c_begin_if_stmt ()\n+{\n+  tree r;\n+  r = build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n+  return r;\n+}\n+\n+/* Begin a while statement.  Returns a newly created WHILE_STMT if\n+   appropriate.\n+\n+   Unlike the C++ front-end, we do not call add_stmt here; it is\n+   probably safe to do so, but I am not very familiar with this\n+   code so I am being extra careful not to change its behavior\n+   beyond what is strictly necessary for correctness.  */\n+\n+tree\n+c_begin_while_stmt ()\n+{\n+  tree r;\n+  r = build_stmt (WHILE_STMT, NULL_TREE, NULL_TREE);\n+  return r;\n+}\n+\n+void\n+c_finish_while_stmt_cond (cond, while_stmt)\n+     tree while_stmt;\n+     tree cond;\n+{\n+  WHILE_COND (while_stmt) = cond;\n+}\n+\n /* Push current bindings for the function name VAR_DECLS.  */\n \n void"}, {"sha": "296c9af3ac3d3c90605fe4af008590533650d3db", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c1e14513edf89b72b98db061aae226be5f14c17a", "patch": "@@ -337,6 +337,10 @@ extern void expand_stmt                         PARAMS ((tree));\n extern void mark_stmt_tree                      PARAMS ((void *));\n extern void shadow_warning\t\t\tPARAMS ((const char *,\n \t\t\t\t\t\t\t tree, tree));\n+extern tree c_begin_if_stmt\t\t\tPARAMS ((void));\n+extern tree c_begin_while_stmt\t\t\tPARAMS ((void));\n+extern void c_finish_while_stmt_cond\t\tPARAMS ((tree, tree));\n+\n \n /* Extra information associated with a DECL.  Other C dialects extend\n    this structure in various ways.  The C front-end only uses this\n@@ -505,7 +509,7 @@ extern tree c_alignof_expr\t\t\tPARAMS ((tree));\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error\t\t\tPARAMS ((enum tree_code));\n extern tree c_expand_expr_stmt\t\t\tPARAMS ((tree));\n-extern void c_expand_start_cond\t\t\tPARAMS ((tree, int));\n+extern void c_expand_start_cond\t\t\tPARAMS ((tree, int, tree));\n extern void c_finish_then                       PARAMS ((void));\n extern void c_expand_start_else\t\t\tPARAMS ((void));\n extern void c_finish_else                   PARAMS ((void));"}, {"sha": "9434a2fa9ff5808bb98bc42b31f6356e508f3e22", "filename": "gcc/c-parse.in", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e14513edf89b72b98db061aae226be5f14c17a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=c1e14513edf89b72b98db061aae226be5f14c17a", "patch": "@@ -2186,13 +2186,23 @@ simple_if:\n \t;\n \n if_prefix:\n-\t  IF '(' expr ')'\n-\t\t{ c_expand_start_cond (truthvalue_conversion ($3), \n-\t\t\t\t       compstmt_count);\n+\t  /* We must build the IF_STMT node before parsing its\n+\t     condition so that STMT_LINENO refers to the line\n+\t     containing the \"if\", and not the line containing\n+\t     the close-parenthesis.\n+\n+\t     c_begin_if_stmt returns the IF_STMT node, which\n+\t     we later pass to c_expand_start_cond to fill\n+\t     in the condition and other tidbits.  */\n+          IF\n+                { $<ttype>$ = c_begin_if_stmt (); }\n+            '(' expr ')'\n+\t\t{ c_expand_start_cond (truthvalue_conversion ($4), \n+\t\t\t\t       compstmt_count,$<ttype>2);\n \t\t  $<itype>$ = stmt_count;\n \t\t  if_stmt_file = $<filename>-2;\n \t\t  if_stmt_line = $<lineno>-1; }\n-\t;\n+        ;\n \n /* This is a subroutine of stmt.\n    It is used twice, once for valid DO statements\n@@ -2287,12 +2297,22 @@ select_or_iter_stmt:\n    Otherwise a crash is likely.  */\n \t| simple_if ELSE error\n \t\t{ c_expand_end_cond (); }\n+       /* We must build the WHILE_STMT node before parsing its\n+\t  condition so that STMT_LINENO refers to the line\n+\t  containing the \"while\", and not the line containing\n+\t  the close-parenthesis.\n+\n+\t  c_begin_while_stmt returns the WHILE_STMT node, which\n+\t  we later pass to c_finish_while_stmt_cond to fill\n+\t  in the condition and other tidbits.  */\n \t| WHILE\n-                { stmt_count++; }\n+                { stmt_count++; \n+\t\t  $<ttype>$ = c_begin_while_stmt (); }\n \t  '(' expr ')'\n                 { $4 = truthvalue_conversion ($4);\n-\t\t  $<ttype>$ \n-\t\t    = add_stmt (build_stmt (WHILE_STMT, $4, NULL_TREE)); }\n+\t\t  c_finish_while_stmt_cond (truthvalue_conversion ($4),\n+\t\t\t\t\t    $<ttype>2);\n+\t\t  $<ttype>$ = add_stmt ($<ttype>2); }\n \t  c99_block_lineno_labeled_stmt\n \t\t{ RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start"}]}