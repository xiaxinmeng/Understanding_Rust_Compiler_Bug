{"sha": "b0ba442b047dcffd54055c9d0ab591d020a284d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiYTQ0MmIwNDdkY2ZmZDU0MDU1YzlkMGFiNTkxZDAyMGEyODRkOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-27T06:58:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:12Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #1\n\ngcc/ada/\n\n\t* errout.ads (Set_Identifier_Casing): Add pragma Convention C.\n\t* eval_fat.ads (Rounding_Mode): Likewise.\n\t(Machine): Add WARNING comment line.\n\t* exp_code.ads (Clobber_Get_Next): Add pragma Convention C.\n\t* fe.h (Compiler_Abort): Fix return type.\n\t(Set_Identifier_Casing): Change type of parameters.\n\t(Clobber_Get_Next): Change return type.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Code_Statement>: Add cast.", "tree": {"sha": "73ee9b31d437834c86704d92aa6db0b77faf2811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73ee9b31d437834c86704d92aa6db0b77faf2811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0ba442b047dcffd54055c9d0ab591d020a284d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ba442b047dcffd54055c9d0ab591d020a284d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ba442b047dcffd54055c9d0ab591d020a284d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ba442b047dcffd54055c9d0ab591d020a284d8/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730c196aab01296486d21c90ffac2d9f6a338422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c196aab01296486d21c90ffac2d9f6a338422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730c196aab01296486d21c90ffac2d9f6a338422"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "e91c0c5f603f099657ba4c5d0e642bd01f173a05", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=b0ba442b047dcffd54055c9d0ab591d020a284d8", "patch": "@@ -987,6 +987,7 @@ package Errout is\n    procedure Set_Identifier_Casing\n      (Identifier_Name : System.Address;\n       File_Name       : System.Address);\n+   pragma Convention (C, Set_Identifier_Casing);\n    --  This subprogram can be used by the back end for the purposes of\n    --  concocting error messages that are not output via Errout, e.g.\n    --  the messages generated by the gcc back end."}, {"sha": "4947d74b3500eccbc713ff67140df96bd5d25634", "filename": "gcc/ada/eval_fat.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Feval_fat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Feval_fat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.ads?ref=b0ba442b047dcffd54055c9d0ab591d020a284d8", "patch": "@@ -85,8 +85,8 @@ package Eval_Fat is\n \n    type Rounding_Mode is (Floor, Ceiling, Round, Round_Even);\n    for Rounding_Mode use (0, 1, 2, 3);\n+   pragma Convention (C, Rounding_Mode);\n    --  Used to indicate rounding mode for Machine attribute\n-   --  Note that C code in gigi knows that Round_Even is 3\n \n    --  The Machine attribute is special, in that it takes an extra argument\n    --  indicating the rounding mode, and also an argument Enode that is a\n@@ -99,6 +99,8 @@ package Eval_Fat is\n       Mode  : Rounding_Mode;\n       Enode : Node_Id) return T;\n \n+   --  WARNING: There is a matching C declaration of this function in urealp.h\n+\n    procedure Decompose_Int\n      (RT       : R;\n       X        : T;"}, {"sha": "474eafc479ec30a952d70f92d3e50460ced3fc07", "filename": "gcc/ada/exp_code.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Fexp_code.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Fexp_code.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_code.ads?ref=b0ba442b047dcffd54055c9d0ab591d020a284d8", "patch": "@@ -53,6 +53,7 @@ package Exp_Code is\n    --  with subsequent calls to Clobber_Get_Next.\n \n    function Clobber_Get_Next return System.Address;\n+   pragma Convention (C, Clobber_Get_Next);\n    --  Can only be called after a previous call to Clobber_Setup. The\n    --  returned value is a pointer to a null terminated (C format) string\n    --  for the next register argument. Null_Address is returned when there"}, {"sha": "851e4b3687da661d3ec9158678aaf6957872ee4e", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=b0ba442b047dcffd54055c9d0ab591d020a284d8", "patch": "@@ -55,7 +55,7 @@ extern Nat Serious_Errors_Detected;\n \n #define Compiler_Abort\t\tcomperr__compiler_abort\n \n-extern int Compiler_Abort (String_Pointer, String_Pointer, Boolean) ATTRIBUTE_NORETURN;\n+extern void Compiler_Abort (String_Pointer, String_Pointer, Boolean) ATTRIBUTE_NORETURN;\n \n /* debug: */\n \n@@ -103,7 +103,7 @@ extern Node_Id Get_Attribute_Definition_Clause (Entity_Id, unsigned char);\n \n extern void Error_Msg_N\t\t\t(String_Pointer, Node_Id);\n extern void Error_Msg_NE\t\t(String_Pointer, Node_Id, Entity_Id);\n-extern void Set_Identifier_Casing\t(Char *, const Char *);\n+extern void Set_Identifier_Casing\t(void *, const void *);\n \n /* err_vars: */\n \n@@ -145,7 +145,7 @@ extern Node_Id Asm_Input_Value\t\t(void);\n extern Node_Id Asm_Output_Constraint\t(void);\n extern Node_Id Asm_Output_Variable\t(void);\n extern Node_Id Asm_Template\t\t(Node_Id);\n-extern char *Clobber_Get_Next\t\t(void);\n+extern void *Clobber_Get_Next\t\t(void);\n extern void Clobber_Setup\t\t(Node_Id);\n extern Boolean Is_Asm_Volatile\t\t(Node_Id);\n extern void Next_Asm_Input\t\t(void);"}, {"sha": "719cdec817c6bbc65600e18a9ca03d9891b804d2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ba442b047dcffd54055c9d0ab591d020a284d8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=b0ba442b047dcffd54055c9d0ab591d020a284d8", "patch": "@@ -7993,7 +7993,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    }\n \n \t  Clobber_Setup (gnat_node);\n-\t  while ((clobber = Clobber_Get_Next ()))\n+\t  while ((clobber = (char *) Clobber_Get_Next ()))\n \t    gnu_clobbers\n \t      = tree_cons (NULL_TREE,\n \t\t\t   build_string (strlen (clobber) + 1, clobber),"}]}