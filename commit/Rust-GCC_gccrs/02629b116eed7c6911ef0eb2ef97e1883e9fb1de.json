{"sha": "02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2MjliMTE2ZWVkN2M2OTExZWYwZWIyZWY5N2UxODgzZTlmYjFkZQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-10-16T20:17:46Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-10-16T20:17:46Z"}, "message": "PR fortran/95979 - ICE in get_kind, at fortran/simplify.c:129\n\nSimplification of the elemental intrinsic INDEX with constant array-valued\narguments failed with an ICE or did not reduce to a constant array, depending\nalso on the presence of the optional KIND argument.  Add a further attempt of\nsimplification in the case of elemental intrinsics, and make sure the KIND\nargument is not removed prematurely during simplification of INDEX.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/95979\n\t* expr.c (gfc_check_init_expr): Fix check of return code from\n\tgfc_intrinsic_func_interface.\n\t* intrinsic.c (gfc_intrinsic_func_interface): Add further attempt\n\tof simplification of elemental intrinsics with array arguments.\n\t* iresolve.c (gfc_resolve_index_func): Keep optional KIND argument\n\tfor simplification of elemental use of INDEX.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/95979\n\t* gfortran.dg/index_4.f90: New test.", "tree": {"sha": "93f23a96b872c6f78d8cd527b4e10fdd04a45e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93f23a96b872c6f78d8cd527b4e10fdd04a45e2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8d8f3b883cbcc19974f6b2438f54b05769a76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8d8f3b883cbcc19974f6b2438f54b05769a76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8d8f3b883cbcc19974f6b2438f54b05769a76c"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "32d905ad1799162e4bf3dd71b5faf589c145855d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "patch": "@@ -2904,7 +2904,7 @@ gfc_check_init_expr (gfc_expr *e)\n \t\t   && (e->value.function.isym->conversion == 1);\n \n \tif (!conversion && (!gfc_is_intrinsic (sym, 0, e->where)\n-\t    || (m = gfc_intrinsic_func_interface (e, 0)) != MATCH_YES))\n+\t    || (m = gfc_intrinsic_func_interface (e, 0)) == MATCH_NO))\n \t  {\n \t    gfc_error (\"Function %qs in initialization expression at %L \"\n \t\t       \"must be an intrinsic function\","}, {"sha": "f4dfcf77e0b0fbadb8abca5bb298bc14b955f218", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "patch": "@@ -5038,6 +5038,11 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n   if (!sym->module)\n     gfc_intrinsic_symbol (sym);\n \n+  /* Have another stab at simplification since elemental intrinsics with array\n+     actual arguments would be missed by the calls above to do_simplify.  */\n+  if (isym->elemental)\n+    gfc_simplify_expr (expr, 1);\n+\n   return MATCH_YES;\n }\n "}, {"sha": "994a9af4eb8d6dcb016e3596a7e5200d6bbb3d5a", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "patch": "@@ -1296,11 +1296,7 @@ gfc_resolve_index_func (gfc_expr *f, gfc_actual_arglist *a)\n \n   f->ts.type = BT_INTEGER;\n   if (kind)\n-    {\n-      f->ts.kind = mpz_get_si ((kind)->value.integer);\n-      a_back->next = NULL;\n-      gfc_free_actual_arglist (a_kind);\n-    }\n+    f->ts.kind = mpz_get_si ((kind)->value.integer);\n   else\n     f->ts.kind = gfc_default_integer_kind;\n "}, {"sha": "09093784c8c35f46aacc7fdd1cc8d2a6c2a1c413", "filename": "gcc/testsuite/gfortran.dg/index_4.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02629b116eed7c6911ef0eb2ef97e1883e9fb1de/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_4.f90?ref=02629b116eed7c6911ef0eb2ef97e1883e9fb1de", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+! { dg-final { scan-tree-dump-times \"string_index\" 0 \"original\" } }\n+! PR fortran/95979\n+\n+program p\n+  implicit none\n+  integer, parameter :: i0    = index( 'abcd',  'b' , .true. , kind=4)\n+  integer, parameter :: i1(*) = index(['abcd'], 'b' , .true. , kind=4)\n+  integer, parameter :: i2(*) = index( 'abcd' ,['b'], .true.         )\n+  integer, parameter :: i3(*) = index( 'abcd' , 'b' ,[.true.]        )\n+  integer, parameter :: i4(*) = index(['abcd'],['b'],[.true.], kind=8)\n+  if (size (i1) /= 1) stop 1\n+  if (size (i2) /= 1) stop 2\n+  if (size (i3) /= 1) stop 3\n+  if (size (i4) /= 1) stop 4\n+  if (i0 /= 2)        stop 5\n+  if (i1(1) /= 2 .or. i2(1) /= 2 .or. i3(1) /= 2 .or. i4(1) /= 2) stop 6\n+end"}]}