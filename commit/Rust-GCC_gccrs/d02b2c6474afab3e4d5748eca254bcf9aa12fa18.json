{"sha": "d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyYjJjNjQ3NGFmYWIzZTRkNTc0OGVjYTI1NGJjZjlhYTEyZmExOA==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-01-22T19:49:18Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-01-22T19:49:18Z"}, "message": "re PR libfortran/18982 (open(status=\"new\") does not generate an error if the file exists)\n\n2005-01-22  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/18982\n\t* io/unix.c (regular_file):  No need to change flags->action\n\tif an error occurs.  Document this.\n\tNo need to call stat() for STATUS_OLD, open() will\n\tfail anyway.\n\tFor ACTION_UNSPECIFIED, try open for read-write, then for\n\tread-only if open fails with EACCES, then for write-only\n\tif that fails with EACCES again.\n\t* io/unix.c (open_external): Document changed behavior of\n\tregular_file.\ntestsuite/\n\t* gfortran.dg/open_new.f90: New file.\n\nFrom-SVN: r94076", "tree": {"sha": "fda79f894c069363a2ace1fa2cd36b81203001de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda79f894c069363a2ace1fa2cd36b81203001de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/comments", "author": null, "committer": null, "parents": [{"sha": "d7c71ee3e6bd95291f0f33a7fdd7de00980ce3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c71ee3e6bd95291f0f33a7fdd7de00980ce3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c71ee3e6bd95291f0f33a7fdd7de00980ce3fd"}], "stats": {"total": 100, "additions": 70, "deletions": 30}, "files": [{"sha": "b39fb693f0c71c584c508b18c3ffa1c6c5d6e425", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "patch": "@@ -1,3 +1,8 @@\n+2005-01-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/18982\n+\t* gfortran.dg/open_new.f90: New file.\n+\n 2005-01-22  Paul Brook  <paul@codesourcery.com>\n \n \t* namelist_1.f90: New test."}, {"sha": "9e9c95127769843f0fc8a7f47fa46d5d277cc640", "filename": "gcc/testsuite/gfortran.dg/open_new.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new.f90?ref=d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "patch": "@@ -0,0 +1,11 @@\n+! { dg do-run }\n+! PR 18982:  verifies that opening an existing file with\n+!            status=\"new\" is an error\n+program main\n+  nout = 10\n+  open(nout, file=\"foo.dat\", status=\"replace\")     ! make sure foo.dat exists\n+  close(nout)\n+  open(nout, file=\"foo.dat\", status=\"new\",err=100)\n+  call abort                 ! This should never happen\n+100 continue\n+end program main"}, {"sha": "537415f16fe63b5e9c18c094005580717beef3cb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "patch": "@@ -1,3 +1,16 @@\n+2005-01-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/18982\n+\t* io/unix.c (regular_file):  No need to change flags->action\n+\tif an error occurs.  Document this.  \n+\tNo need to call stat() for STATUS_OLD, open() will\n+\tfail anyway.\n+\tFor ACTION_UNSPECIFIED, try open for read-write, then for\n+\tread-only if open fails with EACCES, then for write-only\n+\tif that fails with EACCES again.\n+\t* io/unix.c (open_external): Document changed behavior of\n+\tregular_file.\n+\n 2005-01-22  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \t\n \tPR fortran/19194"}, {"sha": "daa0fb1107263a8dbf22c8369279786488e5fa89", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02b2c6474afab3e4d5748eca254bcf9aa12fa18/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=d02b2c6474afab3e4d5748eca254bcf9aa12fa18", "patch": "@@ -998,16 +998,17 @@ tempfile (void)\n \n \n /* regular_file()-- Open a regular file.\n- * Change flags->action if it is ACTION_UNSPECIFIED on entry.\n+ * Change flags->action if it is ACTION_UNSPECIFIED on entry,\n+ * unless an error occurs.\n  * Returns the descriptor, which is less than zero on error. */\n \n static int\n regular_file (unit_flags *flags)\n {\n   char path[PATH_MAX + 1];\n-  struct stat statbuf;\n   int mode;\n   int rwflag;\n+  int crflag;\n   int fd;\n \n   if (unpack_filename (path, ioparm.file, ioparm.file_len))\n@@ -1040,21 +1041,20 @@ regular_file (unit_flags *flags)\n   switch (flags->status)\n     {\n     case STATUS_NEW:\n-      rwflag |= O_CREAT | O_EXCL;\n+      crflag = O_CREAT | O_EXCL;\n       break;\n \n-    case STATUS_OLD:\t\t/* file must exist, so check for its existence */\n-      if (stat (path, &statbuf) < 0)\n-\treturn -1;\n+    case STATUS_OLD:\t\t/* open will fail if the file does not exist*/\n+      crflag = 0;\n       break;\n \n     case STATUS_UNKNOWN:\n     case STATUS_SCRATCH:\n-      rwflag |= O_CREAT;\n+      crflag = O_CREAT;\n       break;\n \n     case STATUS_REPLACE:\n-        rwflag |= O_CREAT | O_TRUNC;\n+        crflag = O_CREAT | O_TRUNC;\n       break;\n \n     default:\n@@ -1064,29 +1064,39 @@ regular_file (unit_flags *flags)\n   /* rwflag |= O_LARGEFILE; */\n \n   mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n-  fd = open (path, rwflag, mode);\n-  if (flags->action == ACTION_UNSPECIFIED)\n+  fd = open (path, rwflag | crflag, mode);\n+  if (flags->action != ACTION_UNSPECIFIED)\n+      return fd;\n+\n+  if (fd >= 0)\n     {\n-      if (fd < 0)\n-        {\n-          rwflag = rwflag & !O_RDWR | O_RDONLY;\n-          fd = open (path, rwflag, mode);\n-          if (fd < 0)\n-            {\n-\t      rwflag = rwflag & !O_RDONLY | O_WRONLY;\n-              fd = open (path, rwflag, mode);\n-              if (fd < 0)\n-                flags->action = ACTION_READWRITE; /* Could not open at all.  */\n-              else\n-                flags->action = ACTION_WRITE;\n-            }\n-          else\n-            flags->action = ACTION_READ;\n-        }\n-      else\n-        flags->action = ACTION_READWRITE;\n+      flags->action = ACTION_READWRITE;\n+      return fd;\n     }\n-  return fd;\n+  if (errno != EACCES)\n+     return fd;\n+\n+  /* retry for read-only access */\n+  rwflag = O_RDONLY;\n+  fd = open (path, rwflag | crflag, mode);\n+  if (fd >=0)\n+    {\n+      flags->action = ACTION_READ;\n+      return fd;               /* success */\n+    }\n+  \n+  if (errno != EACCES)\n+    return fd;                 /* failure */\n+\n+  /* retry for write-only access */\n+  rwflag = O_WRONLY;\n+  fd = open (path, rwflag | crflag, mode);\n+  if (fd >=0)\n+    {\n+      flags->action = ACTION_WRITE;\n+      return fd;               /* success */\n+    }\n+  return fd;                   /* failure */\n }\n \n \n@@ -1109,7 +1119,8 @@ open_external (unit_flags *flags)\n     }\n   else\n     {\n-      /* regular_file resets flags->action if it is ACTION_UNSPECIFIED.  */\n+      /* regular_file resets flags->action if it is ACTION_UNSPECIFIED and\n+       * if it succeeds */\n       fd = regular_file (flags);\n     }\n "}]}