{"sha": "fb078366c749168c86a97df8423eb0b8f2c948b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwNzgzNjZjNzQ5MTY4Yzg2YTk3ZGY4NDIzZWIwYjhmMmM5NDhiMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-08-15T22:52:40Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-08-15T22:52:40Z"}, "message": "re PR fortran/91443 (-Wargument-mismatch does not catch mismatch for global procedure)\n\n2019-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91443\n\t* frontend-passes.c (check_externals_expr): New function.\n\t(check_externals_code): New function.\n\t(gfc_check_externals): New function.\n\t* gfortran.h (debug): Add prototypes for gfc_symbol * and\n\tgfc_expr *.\n\t(gfc_check_externals): Add prototype.\n\t* interface.c (compare_actual_formal): Do not complain about\n\talternate returns if the formal argument is optional.\n\t(gfc_procedure_use): Handle cases when an error has been issued\n\tpreviously.  Break long line.\n\t* parse.c (gfc_parse_file): Call gfc_check_externals for all\n\texternal procedures.\n\t* resolve.c (resolve_global_procedure): Remove checking of\n\targument list.\n\n2019-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91443\n\t* gfortran.dg/argument_checking_19.f90: New test.\n\t* gfortran.dg/altreturn_10.f90: Change dg-warning to dg-error.\n\t* gfortran.dg/dec_union_11.f90: Add -std=legacy.\n\t* gfortran.dg/hollerith8.f90: Likewise. Remove warning for\n\tHollerith constant.\n\t* gfortran.dg/integer_exponentiation_2.f90: New subroutine gee_i8;\n\tuse it to avoid type mismatches.\n\t* gfortran.dg/pr41011.f: Add -std=legacy.\n\t* gfortran.dg/whole_file_1.f90: Change warnings to errors.\n\t* gfortran.dg/whole_file_2.f90: Likewise.\n\nFrom-SVN: r274551", "tree": {"sha": "a1402a54686f1b73e81b7548effd9221a7061b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1402a54686f1b73e81b7548effd9221a7061b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb078366c749168c86a97df8423eb0b8f2c948b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb078366c749168c86a97df8423eb0b8f2c948b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb078366c749168c86a97df8423eb0b8f2c948b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb078366c749168c86a97df8423eb0b8f2c948b2/comments", "author": null, "committer": null, "parents": [{"sha": "7148dede8a84e17cc0b00190d76fabbc1a717654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7148dede8a84e17cc0b00190d76fabbc1a717654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7148dede8a84e17cc0b00190d76fabbc1a717654"}], "stats": {"total": 243, "additions": 202, "deletions": 41}, "files": [{"sha": "3ddb00728a53de8fee068fce03315036ddd1ee5b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -1,3 +1,21 @@\n+2019-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91443\n+\t* frontend-passes.c (check_externals_expr): New function.\n+\t(check_externals_code): New function.\n+\t(gfc_check_externals): New function.\n+\t* gfortran.h (debug): Add prototypes for gfc_symbol * and\n+\tgfc_expr *.\n+\t(gfc_check_externals): Add prototype.\n+\t* interface.c (compare_actual_formal): Do not complain about\n+\talternate returns if the formal argument is optional.\n+\t(gfc_procedure_use): Handle cases when an error has been issued\n+\tpreviously.  Break long line.\n+\t* parse.c (gfc_parse_file): Call gfc_check_externals for all\n+\texternal procedures.\n+\t* resolve.c (resolve_global_procedure): Remove checking of\n+\targument list.\n+\n 2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/87991\n@@ -7,7 +25,7 @@\n 2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88072\n-\t* misc.c (gfc_typename): Do not point to something that ought not to \n+\t* misc.c (gfc_typename): Do not point to something that ought not to\n \tbe pointed at.\n \n 2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>"}, {"sha": "dd820899b02ae9289493948c7e064db44d77d6f6", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -56,7 +56,6 @@ static gfc_expr* check_conjg_transpose_variable (gfc_expr *, bool *,\n static int call_external_blas (gfc_code **, int *, void *);\n static int matmul_temp_args (gfc_code **, int *,void *data);\n static int index_interchange (gfc_code **, int*, void *);\n-\n static bool is_fe_temp (gfc_expr *e);\n \n #ifdef CHECKING_P\n@@ -5364,3 +5363,100 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n     }\n   return 0;\n }\n+\n+/* As a post-resolution step, check that all global symbols which are\n+   not declared in the source file match in their call signatures.\n+   We do this by looping over the code (and expressions). The first call\n+   we happen to find is assumed to be canonical.  */\n+\n+/* Callback for external functions.  */\n+\n+static int\n+check_externals_expr (gfc_expr **ep, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t      void *data ATTRIBUTE_UNUSED)\n+{\n+  gfc_expr *e = *ep;\n+  gfc_symbol *sym, *def_sym;\n+  gfc_gsymbol *gsym;\n+\n+  if (e->expr_type != EXPR_FUNCTION)\n+    return 0;\n+\n+  sym = e->value.function.esym;\n+\n+  if (sym == NULL || sym->attr.is_bind_c)\n+    return 0;\n+\n+  if (sym->attr.proc != PROC_EXTERNAL && sym->attr.proc != PROC_UNKNOWN)\n+    return 0;\n+\n+  gsym = gfc_find_gsymbol (gfc_gsym_root, sym->name);\n+  if (gsym == NULL)\n+    return 0;\n+\n+  gfc_find_symbol (sym->name, gsym->ns, 0, &def_sym);\n+\n+  if (sym && def_sym)\n+    gfc_procedure_use (def_sym, &e->value.function.actual, &e->where);\n+\n+  return 0;\n+}\n+\n+/* Callback for external code.  */\n+\n+static int\n+check_externals_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t      void *data ATTRIBUTE_UNUSED)\n+{\n+  gfc_code *co = *c;\n+  gfc_symbol *sym, *def_sym;\n+  gfc_gsymbol *gsym;\n+\n+  if (co->op != EXEC_CALL)\n+    return 0;\n+\n+  sym = co->resolved_sym;\n+  if (sym == NULL || sym->attr.is_bind_c)\n+    return 0;\n+\n+  if (sym->attr.proc != PROC_EXTERNAL && sym->attr.proc != PROC_UNKNOWN)\n+    return 0;\n+\n+  if (sym->attr.if_source == IFSRC_IFBODY || sym->attr.if_source == IFSRC_DECL)\n+    return 0;\n+\n+  gsym = gfc_find_gsymbol (gfc_gsym_root, sym->name);\n+  if (gsym == NULL)\n+    return 0;\n+\n+  gfc_find_symbol (sym->name, gsym->ns, 0, &def_sym);\n+\n+  if (sym && def_sym)\n+    gfc_procedure_use (def_sym, &co->ext.actual, &co->loc);\n+\n+  return 0;\n+}\n+\n+/* Called routine.  */\n+\n+void\n+gfc_check_externals (gfc_namespace *ns)\n+{\n+\n+  gfc_clear_error ();\n+\n+  /* Turn errors into warnings if -std=legacy is given by the user.  */\n+\n+  if (!pedantic && !(gfc_option.warn_std & GFC_STD_LEGACY))\n+    gfc_errors_to_warnings (true);\n+\n+  gfc_code_walker (&ns->code, check_externals_code, check_externals_expr, NULL);\n+\n+  for (ns = ns->contained; ns; ns = ns->sibling)\n+    {\n+      if (ns->code == NULL || ns->code->op != EXEC_BLOCK)\n+\tgfc_check_externals (ns);\n+    }\n+\n+  gfc_errors_to_warnings (false);\n+}"}, {"sha": "8a0e8b3f119a3e129fc98a7cec4118107e666122", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -3477,6 +3477,8 @@ void gfc_dump_parse_tree (gfc_namespace *, FILE *);\n void gfc_dump_c_prototypes (gfc_namespace *, FILE *);\n void gfc_dump_external_c_prototypes (FILE *);\n void gfc_dump_global_symbols (FILE *);\n+void debug (gfc_symbol *);\n+void debug (gfc_expr *);\n \n /* parse.c */\n bool gfc_parse_file (void);\n@@ -3551,6 +3553,7 @@ int gfc_dummy_code_callback (gfc_code **, int *, void *);\n int gfc_expr_walker (gfc_expr **, walk_expr_fn_t, void *);\n int gfc_code_walker (gfc_code **, walk_code_fn_t, walk_expr_fn_t, void *);\n bool gfc_has_dimen_vector_ref (gfc_expr *e);\n+void gfc_check_externals (gfc_namespace *);\n \n /* simplify.c */\n "}, {"sha": "d6f6cce4fbf445e62619007cb57350fe896ad0d5", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -2979,10 +2979,15 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \n       if (a->expr == NULL)\n \t{\n-\t  if (where)\n-\t    gfc_error_now (\"Unexpected alternate return specifier in \"\n-\t\t\t   \"subroutine call at %L\", where);\n-\t  return false;\n+\t  if (f->sym->attr.optional)\n+\t    continue;\n+\t  else\n+\t    {\n+\t      if (where)\n+\t\tgfc_error_now (\"Unexpected alternate return specifier in \"\n+\t\t\t       \"subroutine call at %L\", where);\n+\t      return false;\n+\t    }\n \t}\n \n       /* Make sure that intrinsic vtables exist for calls to unlimited\n@@ -3723,6 +3728,9 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \n       for (a = *ap; a; a = a->next)\n \t{\n+\t  if (a->expr && a->expr->error)\n+\t    return false;\n+\n \t  /* Skip g77 keyword extensions like %VAL, %REF, %LOC.  */\n \t  if (a->name != NULL && a->name[0] != '%')\n \t    {\n@@ -3738,6 +3746,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t      gfc_error (\"Assumed-type argument %s at %L requires an explicit \"\n \t\t\t \"interface\", a->expr->symtree->n.sym->name,\n \t\t\t &a->expr->where);\n+\t      a->expr->error = 1;\n \t      break;\n \t    }\n \n@@ -3751,6 +3760,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t      gfc_error (\"Actual argument of LOCK_TYPE or with LOCK_TYPE \"\n \t\t\t \"component at %L requires an explicit interface for \"\n \t\t\t \"procedure %qs\", &a->expr->where, sym->name);\n+\t      a->expr->error = 1;\n \t      break;\n \t    }\n \n@@ -3764,13 +3774,16 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t      gfc_error (\"Actual argument of EVENT_TYPE or with EVENT_TYPE \"\n \t\t\t \"component at %L requires an explicit interface for \"\n \t\t\t \"procedure %qs\", &a->expr->where, sym->name);\n+\t      a->expr->error = 1;\n \t      break;\n \t    }\n \n \t  if (a->expr && a->expr->expr_type == EXPR_NULL\n \t      && a->expr->ts.type == BT_UNKNOWN)\n \t    {\n-\t      gfc_error (\"MOLD argument to NULL required at %L\", &a->expr->where);\n+\t      gfc_error (\"MOLD argument to NULL required at %L\",\n+\t\t\t &a->expr->where);\n+\t      a->expr->error = 1;\n \t      return false;\n \t    }\n \n@@ -3780,6 +3793,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t    {\n \t      gfc_error (\"Assumed-rank argument requires an explicit interface \"\n \t\t\t \"at %L\", &a->expr->where);\n+\t      a->expr->error = 1;\n \t      return false;\n \t    }\n \t}"}, {"sha": "31466d296ad9d303d2399b4ad8dc7cab2c86c942", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -6319,6 +6319,12 @@ gfc_parse_file (void)\n   /* Do the resolution.  */\n   resolve_all_program_units (gfc_global_ns_list);\n \n+\n+  /* Fixup for external procedures.  */\n+  for (gfc_current_ns = gfc_global_ns_list; gfc_current_ns;\n+       gfc_current_ns = gfc_current_ns->sibling)\n+    gfc_check_externals (gfc_current_ns);\n+\n   /* Do the parse tree dump.  */\n   gfc_current_ns = flag_dump_fortran_original ? gfc_global_ns_list : NULL;\n "}, {"sha": "1f48045d8fee4b35d3feed2909654badc941e6fe", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -2506,8 +2506,7 @@ gfc_explicit_interface_required (gfc_symbol *sym, char *errmsg, int err_len)\n \n \n static void\n-resolve_global_procedure (gfc_symbol *sym, locus *where,\n-\t\t\t  gfc_actual_arglist **actual, int sub)\n+resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n {\n   gfc_gsymbol * gsym;\n   gfc_namespace *ns;\n@@ -2615,14 +2614,6 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t\t \" %s\", sym->name, &sym->declared_at, reason);\n \t  goto done;\n \t}\n-\n-      if (!pedantic\n-\t  || ((gfc_option.warn_std & GFC_STD_LEGACY)\n-\t      && !(gfc_option.warn_std & GFC_STD_GNU)))\n-\tgfc_errors_to_warnings (true);\n-\n-      if (sym->attr.if_source != IFSRC_IFBODY)\n-\tgfc_procedure_use (def_sym, actual, where);\n     }\n \n done:\n@@ -3198,8 +3189,7 @@ resolve_function (gfc_expr *expr)\n \n   /* If the procedure is external, check for usage.  */\n   if (sym && is_external_proc (sym))\n-    resolve_global_procedure (sym, &expr->where,\n-\t\t\t      &expr->value.function.actual, 0);\n+    resolve_global_procedure (sym, &expr->where, 0);\n \n   if (sym && sym->ts.type == BT_CHARACTER\n       && sym->ts.u.cl\n@@ -3675,7 +3665,7 @@ resolve_call (gfc_code *c)\n \n   /* If external, check for usage.  */\n   if (csym && is_external_proc (csym))\n-    resolve_global_procedure (csym, &c->loc, &c->ext.actual, 1);\n+    resolve_global_procedure (csym, &c->loc, 1);\n \n   t = true;\n   if (c->resolved_sym == NULL)"}, {"sha": "aeaaac0a4a5d89c050c849e994e7793f7d393f8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -1,3 +1,17 @@\n+2019-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91443\n+\t* gfortran.dg/argument_checking_19.f90: New test.\n+\t* gfortran.dg/altreturn_10.f90: Change dg-warning to dg-error.\n+\t* gfortran.dg/dec_union_11.f90: Add -std=legacy.\n+\t* gfortran.dg/hollerith8.f90: Likewise. Remove warning for\n+\tHollerith constant.\n+\t* gfortran.dg/integer_exponentiation_2.f90: New subroutine gee_i8;\n+\tuse it to avoid type mismatches.\n+\t* gfortran.dg/pr41011.f: Add -std=legacy.\n+\t* gfortran.dg/whole_file_1.f90: Change warnings to errors.\n+\t* gfortran.dg/whole_file_2.f90: Likewise.\n+\n 2019-08-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91445"}, {"sha": "a388c3c714f08d04cb1d4dd9e582e2019c374bcd", "filename": "gcc/testsuite/gfortran.dg/altreturn_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -14,6 +14,6 @@ subroutine sub (x)\n end\n subroutine sub2\n    call sub (*99) ! { dg-error \"Unexpected alternate return specifier\" }\n-   call sub (99.) ! { dg-warning \"Type mismatch in argument\" }\n+   call sub (99.) ! { dg-error \"Type mismatch in argument\" }\n 99 stop\n end"}, {"sha": "4460226831ef1eb15bf45e47327dd849ea8a7d2b", "filename": "gcc/testsuite/gfortran.dg/argument_checking_19.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_19.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR 91443 - this was not caught.\n+module x\n+contains\n+  subroutine a\n+    call foo(1) ! { dg-error \"Type mismatch in argument\" }\n+  end subroutine a\n+end module x\n+\n+subroutine foo(a)\n+  real :: a\n+  print *,a\n+end subroutine foo\n+\n+program main\n+  use x\n+  call a\n+end program main"}, {"sha": "41e23b267efe57fc6790f3f848cf2dd52ee4a5b1", "filename": "gcc/testsuite/gfortran.dg/dec_union_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_11.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-g -fdec-structure\" }\n+! { dg-options \"-g -fdec-structure -std=legacy\" }\n !\n ! Test a regression where typespecs of unions containing character buffers of\n ! different lengths where copied, resulting in a bad gimple tree state."}, {"sha": "384904d4e6cbf226c063a702c2f5e7eec69a26c1", "filename": "gcc/testsuite/gfortran.dg/hollerith8.f90", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith8.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -1,9 +1,9 @@\n ! { dg-do run }\n-! { dg-options \"-std=gnu\" }\n+! { dg-options \"-std=legacy\" }\n ! PR43217 Output of Hollerith constants which are not a multiple of 4 bytes\n ! Test case prepared from OP by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n program hello2\n-  call wrtout (9hHELLO YOU, 9)\n+  call wrtout (9hHELLO YOU, 9) ! { dg-warning \"Rank mismatch\" }\n   stop\n end\n \n@@ -22,5 +22,3 @@ subroutine wrtout (iarray, nchrs)\n  &    outstr.ne.\"48454C4C 4F20594F 55202020\") STOP 1\n   return\n end\n-! { dg-warning \"Hollerith constant\" \"\" { target *-*-* } 6 }\n-! { dg-warning \"Rank mismatch\" \"\" { target *-*-* } 6 }"}, {"sha": "ec018ff43ef582f8418730cd0fd5a706b52cf144", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_2.f90", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -139,16 +139,16 @@ subroutine foo(a)\n   call gee_i(i**(-huge(0_4)))\n   call gee_i(i**(-huge(0_4)-1_4))\n \n-  call gee_i(i**0_8) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**1_8) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**2_8) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**3_8) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**(-1_8)) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**(-2_8)) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**(-3_8)) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**huge(0_8)) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**(-huge(0_8))) ! { dg-warning \"Type mismatch in argument\" }\n-  call gee_i(i**(-huge(0_8)-1_8)) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i8(i**0_8)\n+  call gee_i8(i**1_8)\n+  call gee_i8(i**2_8)\n+  call gee_i8(i**3_8)\n+  call gee_i8(i**(-1_8))\n+  call gee_i8(i**(-2_8))\n+  call gee_i8(i**(-3_8))\n+  call gee_i8(i**huge(0_8))\n+  call gee_i8(i**(-huge(0_8)))\n+  call gee_i8(i**(-huge(0_8)-1_8))\n \n   ! Real\n   call gee_r(a**0_1)\n@@ -245,6 +245,10 @@ subroutine gee_i(i)\n   integer :: i\n end subroutine gee_i\n \n+subroutine gee_i8(i)\n+  integer(kind=8) :: i\n+end subroutine gee_i8\n+\n subroutine gee_r(r)\n   real :: r\n end subroutine gee_r"}, {"sha": "5a3218581d39c4ef7e241d8a8546e93662b1b32a", "filename": "gcc/testsuite/gfortran.dg/pr41011.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41011.f?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3\" }\n+! { dg-options \"-O3 -std=legacy\" }\n       CALL UVSET(NX,NY,NZ,HVAR,ZET,NP,DZ,DKM,UM,VM,UG,VG,TM,DCDX, ! { dg-warning \"Rank mismatch\" }\n      *ITY,ISH,NSMT,F)\n          CALL DCTDX(NX,NY,NX1,NFILT,C(MLAG),DCDX(MLAG),HELP,HELPA,"}, {"sha": "c865395fcaa6e46f4a610c23d4717de58443395e", "filename": "gcc/testsuite/gfortran.dg/whole_file_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -19,7 +19,7 @@ subroutine b\n     integer :: u1\n   end type\n   type (u) :: q\n-  call a(q)  ! { dg-warning \"Type mismatch\" }\n+  call a(q)  ! { dg-error \"Type mismatch\" }\n   print *, q%u1\n end subroutine\n \n@@ -36,7 +36,7 @@ subroutine d\n     integer :: u1\n   end type\n   type (u) :: q\n-  call c(q)  ! { dg-warning \"Type mismatch\" }\n+  call c(q)  ! { dg-error \"Type mismatch\" }\n   print *, q%u1\n end subroutine\n "}, {"sha": "0d4457461786ea38dde5306f7c06c15f0f4e06e7", "filename": "gcc/testsuite/gfortran.dg/whole_file_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb078366c749168c86a97df8423eb0b8f2c948b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90?ref=fb078366c749168c86a97df8423eb0b8f2c948b2", "patch": "@@ -14,8 +14,8 @@ function a(b)\n program gg\n real :: h\n character (5) :: chr = 'hello'\n-h = a(); ! { dg-warning \"Missing actual argument\" }\n-call test ([chr]) ! { dg-warning \"Rank mismatch\" }\n+h = a(); ! { dg-error \"Missing actual argument\" }\n+call test ([chr]) ! { dg-error \"Rank mismatch\" }\n end program gg\n \n subroutine test (a)"}]}