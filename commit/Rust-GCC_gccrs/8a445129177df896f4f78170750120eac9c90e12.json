{"sha": "8a445129177df896f4f78170750120eac9c90e12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0NDUxMjkxNzdkZjg5NmY0Zjc4MTcwNzUwMTIwZWFjOWM5MGUxMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-03-28T21:22:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-03-28T21:22:58Z"}, "message": "builtins.c (expand_builtin_memset_args): Use gen_int_mode instead of GEN_INT.\n\ngcc/\n2011-03-28  Richard Sandiford  <richard.sandiford@linaro.org>\n\n\t* builtins.c (expand_builtin_memset_args): Use gen_int_mode\n\tinstead of GEN_INT.\n\nFrom-SVN: r171632", "tree": {"sha": "80568baafe1e9bc6c32eea525f52e073d00899f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80568baafe1e9bc6c32eea525f52e073d00899f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a445129177df896f4f78170750120eac9c90e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a445129177df896f4f78170750120eac9c90e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a445129177df896f4f78170750120eac9c90e12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a445129177df896f4f78170750120eac9c90e12/comments", "author": null, "committer": null, "parents": [{"sha": "8060754453f32ae22612a63a2abe5f116c9bb687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8060754453f32ae22612a63a2abe5f116c9bb687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8060754453f32ae22612a63a2abe5f116c9bb687"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "eae651961a19c73b38c3e8f03772232ebffbe808", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a445129177df896f4f78170750120eac9c90e12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a445129177df896f4f78170750120eac9c90e12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a445129177df896f4f78170750120eac9c90e12", "patch": "@@ -1,3 +1,8 @@\n+2011-03-28  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* builtins.c (expand_builtin_memset_args): Use gen_int_mode\n+\tinstead of GEN_INT.\n+\n 2011-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cfgexpand.c (expand_gimple_cond): Always set the source location and"}, {"sha": "29274f4f794e617da2151c778d12f2d620b9e06d", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a445129177df896f4f78170750120eac9c90e12/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a445129177df896f4f78170750120eac9c90e12/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8a445129177df896f4f78170750120eac9c90e12", "patch": "@@ -3935,6 +3935,7 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n {\n   tree fndecl, fn;\n   enum built_in_function fcode;\n+  enum machine_mode val_mode;\n   char c;\n   unsigned int dest_align;\n   rtx dest_mem, dest_addr, len_rtx;\n@@ -3969,14 +3970,14 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n \n   len_rtx = expand_normal (len);\n   dest_mem = get_memory_rtx (dest, len);\n+  val_mode = TYPE_MODE (unsigned_char_type_node);\n \n   if (TREE_CODE (val) != INTEGER_CST)\n     {\n       rtx val_rtx;\n \n       val_rtx = expand_normal (val);\n-      val_rtx = convert_to_mode (TYPE_MODE (unsigned_char_type_node),\n-\t\t\t\t val_rtx, 0);\n+      val_rtx = convert_to_mode (val_mode, val_rtx, 0);\n \n       /* Assume that we can memset by pieces if we can store\n        * the coefficients by pieces (in the required modes).\n@@ -3987,8 +3988,7 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n \t\t\t\t  builtin_memset_read_str, &c, dest_align,\n \t\t\t\t  true))\n \t{\n-\t  val_rtx = force_reg (TYPE_MODE (unsigned_char_type_node),\n-\t\t\t       val_rtx);\n+\t  val_rtx = force_reg (val_mode, val_rtx);\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_memset_gen_str, val_rtx, dest_align,\n \t\t\t   true, 0);\n@@ -4014,7 +4014,8 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n \t\t\t\t  true))\n \tstore_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t builtin_memset_read_str, &c, dest_align, true, 0);\n-      else if (!set_storage_via_setmem (dest_mem, len_rtx, GEN_INT (c),\n+      else if (!set_storage_via_setmem (dest_mem, len_rtx,\n+\t\t\t\t\tgen_int_mode (c, val_mode),\n \t\t\t\t\tdest_align, expected_align,\n \t\t\t\t\texpected_size))\n \tgoto do_libcall;"}]}