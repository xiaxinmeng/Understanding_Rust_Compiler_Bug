{"sha": "acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "node_id": "C_kwDOANBUbNoAKGFjZjNhMjFjYmMyNmIzOWI3M2MwMDA2MzAwZjM1ZmYwMTdkZGQ2Y2I", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:37:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:37:02Z"}, "message": "libstdc++: Reduce header dependencies for C++20 std::erase [PR92546]\n\nThis reduces the preprocessed size of <deque>, <string> and <vector> by\nnot including <bits/stl_algo.h> for std::remove and std::remove_if.\n\nAlso unwrap iterators using __niter_base, to avoid redundant debug mode\nchecks.\n\n\tPR libstdc++/92546\n\t* include/bits/erase_if.h (__erase_nodes_if): Use __niter_base to\n\tunwrap debug iterators.\n\t* include/bits/refwrap.h: Do not error if included in C++03.\n\t* include/bits/stl_algo.h (__remove_if): Move to ...\n\t* include/bits/stl_algobase.h (__remove_if): ... here.\n\t* include/std/deque (erase, erase_if): Use __remove_if instead of\n\tremove and remove_if.\n\t* include/std/string (erase, erase_if): Likewise.\n\t* include/std/vector (erase, erase_if): Likewise.", "tree": {"sha": "deb9da5edff5a2769cc22233ebf2d99cc8307232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb9da5edff5a2769cc22233ebf2d99cc8307232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7793bea465019683b3a07d7ffceb6eae22def5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7793bea465019683b3a07d7ffceb6eae22def5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7793bea465019683b3a07d7ffceb6eae22def5"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "7716e1a953ce0726a03452e2c5949bbadaf0ef7b", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -51,7 +51,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __erase_nodes_if(_Container& __cont, _Predicate __pred)\n       {\n \ttypename _Container::size_type __num = 0;\n-\tfor (auto __iter = __cont.begin(), __last = __cont.end();\n+\tfor (auto __iter = std::__niter_base(__cont.begin()),\n+\t     __last = std::__niter_base(__cont.end());\n \t     __iter != __last;)\n \t  {\n \t    if (__pred(*__iter))"}, {"sha": "a549efbce9a2e5df1323cfc5713bf4ec737580bf", "filename": "libstdc++-v3/include/bits/refwrap.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -32,9 +32,7 @@\n \n #pragma GCC system_header\n \n-#if __cplusplus < 201103L\n-# include <bits/c++0x_warning.h>\n-#else\n+#if __cplusplus >= 201103L\n \n #include <bits/move.h>\n #include <bits/invoke.h>"}, {"sha": "bc611a95ef4e5ebc782ba0fb0e2843d621f8f272", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -810,26 +810,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif // C++11\n \n-  template<typename _ForwardIterator, typename _Predicate>\n-    _GLIBCXX20_CONSTEXPR\n-    _ForwardIterator\n-    __remove_if(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t_Predicate __pred)\n-    {\n-      __first = std::__find_if(__first, __last, __pred);\n-      if (__first == __last)\n-\treturn __first;\n-      _ForwardIterator __result = __first;\n-      ++__first;\n-      for (; __first != __last; ++__first)\n-\tif (!__pred(__first))\n-\t  {\n-\t    *__result = _GLIBCXX_MOVE(*__first);\n-\t    ++__result;\n-\t  }\n-      return __result;\n-    }\n-\n   /**\n    *  @brief Remove elements from a sequence.\n    *  @ingroup mutating_algorithms"}, {"sha": "0e0586836a6275b493c414006530b2f9be51d348", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -2125,6 +2125,26 @@ _GLIBCXX_END_NAMESPACE_ALGO\n       return __n;\n     }\n \n+  template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n+    _ForwardIterator\n+    __remove_if(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t_Predicate __pred)\n+    {\n+      __first = std::__find_if(__first, __last, __pred);\n+      if (__first == __last)\n+\treturn __first;\n+      _ForwardIterator __result = __first;\n+      ++__first;\n+      for (; __first != __last; ++__first)\n+\tif (!__pred(__first))\n+\t  {\n+\t    *__result = _GLIBCXX_MOVE(*__first);\n+\t    ++__result;\n+\t  }\n+      return __result;\n+    }\n+\n #if __cplusplus >= 201103L\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>"}, {"sha": "b2a7cee483aabdd3cfb9b83135623b730bfaa689", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -58,13 +58,11 @@\n #pragma GCC system_header\n \n #include <bits/stl_algobase.h>\n-#if __cplusplus > 201703L\n-#  include <bits/stl_algo.h> // For remove and remove_if\n-#endif // C++20\n #include <bits/allocator.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_deque.h>\n+#include <bits/refwrap.h>\n #include <bits/range_access.h>\n #include <bits/deque.tcc>\n \n@@ -97,19 +95,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n+      using namespace __gnu_cxx;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n-\t\t   __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__end),\n+\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n+      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n       return __osz - __cont.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n+      using namespace __gnu_cxx;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n-\t\t   __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__end),\n+\t\t\t\t      __ops::__iter_equals_val(__value)));\n+      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n       return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7f994147a330fcd1bc33e1567a0abf75bf6693ee", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -48,9 +48,7 @@\n #include <bits/stl_function.h> // For less\n #include <ext/numeric_traits.h>\n #include <bits/stl_algobase.h>\n-#if __cplusplus > 201703L\n-#  include <bits/stl_algo.h> // For remove and remove_if\n-#endif // C++20\n+#include <bits/refwrap.h>\n #include <bits/range_access.h>\n #include <bits/basic_string.h>\n #include <bits/basic_string.tcc>\n@@ -125,19 +123,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n     {\n+      using namespace __gnu_cxx;\n+      using _It = typename basic_string<_CharT, _Traits, _Alloc>::iterator;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n-\t\t   __cont.end());\n+      _It __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__cont.end()),\n+\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n+      __cont.erase(__removed, __cont.end());\n       return __osz - __cont.size();\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n     inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n     {\n+      using namespace __gnu_cxx;\n+      using _It = typename basic_string<_CharT, _Traits, _Alloc>::iterator;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n-\t\t   __cont.end());\n+      _It __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__cont.end()),\n+\t\t\t\t      __ops::__iter_equals_val(__value)));\n+      __cont.erase(__removed, __cont.end());\n       return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3b275e249fc6220e159dffdf7fd1654536ee088f", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf3a21cbc26b39b73c0006300f35ff017ddd6cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=acf3a21cbc26b39b73c0006300f35ff017ddd6cb", "patch": "@@ -58,14 +58,12 @@\n #pragma GCC system_header\n \n #include <bits/stl_algobase.h>\n-#if __cplusplus > 201703L\n-#  include <bits/stl_algo.h> // For remove and remove_if\n-#endif // C++20\n #include <bits/allocator.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_vector.h>\n #include <bits/stl_bvector.h>\n+#include <bits/refwrap.h>\n #include <bits/range_access.h>\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n@@ -107,19 +105,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n+      using namespace __gnu_cxx;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n-\t\t   __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__end),\n+\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n+      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n       return __osz - __cont.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n+      using namespace __gnu_cxx;\n       const auto __osz = __cont.size();\n-      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n-\t\t   __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n+\t\t\t\t      std::__niter_base(__end),\n+\t\t\t\t      __ops::__iter_equals_val(__value)));\n+      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n       return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}]}