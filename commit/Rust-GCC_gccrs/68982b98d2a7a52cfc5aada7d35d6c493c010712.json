{"sha": "68982b98d2a7a52cfc5aada7d35d6c493c010712", "node_id": "C_kwDOANBUbNoAKDY4OTgyYjk4ZDJhN2E1MmNmYzVhYWRhN2QzNWQ2YzQ5M2MwMTA3MTI", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-03-29T22:56:13Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-29T22:56:13Z"}, "message": "CRIS: Make rtx-cost 0 for many CONST_INT \"quick\" operands\n\nStepping through a gdb session inspecting costs that cause\ngcc.dg/tree-ssa/slsr-13.c to fail, exposed that before this\npatch, cris_rtx_costs told that a shift of 1 of a register\ncosts 5, while adding two registers costs 4.\n\nMaking the cost of a quick-immediate constant equal to using\na register (default 0) reflects actual performance and\nsize-cost better.  It also happens to make\ngcc.dg/tree-ssa/slsr-13.c pass with what looks like better\ncode being generated, and improves coremark performance by\n0.4%.\n\nBut, blindly doing this for *all* valid operands that fit\nthe \"quick-immediate\" addressing mode, trips interaction\nwith other factors*, with the end result mixed at best.  So,\ndo this only for MINUS and logical operations for the time\nbeing, and only for modes that fit in one register.\n\n*) Examples of \"other factors\":\n\n- A bad default implementation of insn_cost or actually,\npattern_cost, that looks only at the set_src_cost and\nfurthermore sees such a cost of 0 as invalid.  (Compare to\nthe more sane set_rtx_cost.)  This naturally tripped up\ncombine and ifcvt, causing all sorts of changes, good and\nbad.\n\n- Having the same cost, to compare a register with 0 as with\n-31..31, means a compare insn of an eliminable form no\nlonger looks preferable.\n\n\t* config/cris/cris.cc (cris_rtx_costs) [CONST_INT]: Return 0\n\tfor many quick operands, for register-sized modes.", "tree": {"sha": "079b93ce956cc6de2a9bc3f2aba453787d617dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079b93ce956cc6de2a9bc3f2aba453787d617dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68982b98d2a7a52cfc5aada7d35d6c493c010712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68982b98d2a7a52cfc5aada7d35d6c493c010712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68982b98d2a7a52cfc5aada7d35d6c493c010712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68982b98d2a7a52cfc5aada7d35d6c493c010712/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3be4e43a6a0f429648ea188c8e110b74268fed27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be4e43a6a0f429648ea188c8e110b74268fed27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be4e43a6a0f429648ea188c8e110b74268fed27"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "05dead9c0778c17a7a4d59ecf1c097fa1830403b", "filename": "gcc/config/cris/cris.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68982b98d2a7a52cfc5aada7d35d6c493c010712/gcc%2Fconfig%2Fcris%2Fcris.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68982b98d2a7a52cfc5aada7d35d6c493c010712/gcc%2Fconfig%2Fcris%2Fcris.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.cc?ref=68982b98d2a7a52cfc5aada7d35d6c493c010712", "patch": "@@ -1884,7 +1884,28 @@ cris_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno,\n \tif (val == 0)\n \t  *total = 0;\n \telse if (val < 32 && val >= -32)\n-\t  *total = 1;\n+\t  switch (outer_code)\n+\t    {\n+\t      /* For modes that fit in one register we tell they cost\n+\t\t the same as with register operands.  DImode operations\n+\t\t needs careful consideration for more basic reasons:\n+\t\t shifting by a non-word-size amount needs more\n+\t\t operations than an addition by a register pair.\n+\t\t Deliberately excluding SET, PLUS and comparisons and\n+\t\t also not including the full -64..63 range for (PLUS\n+\t\t and) MINUS.  */\n+\t    case MINUS: case ASHIFT: case LSHIFTRT:\n+\t    case ASHIFTRT: case AND: case IOR:\n+\t      if (GET_MODE_SIZE(mode) <= UNITS_PER_WORD)\n+\t\t{\n+\t\t  *total = 0;\n+\t\t  break;\n+\t\t}\n+\t      /* FALL THROUGH.  */\n+\t    default:\n+\t      *total = 1;\n+\t      break;\n+\t    }\n \t/* Eight or 16 bits are a word and cycle more expensive.  */\n \telse if (val <= 32767 && val >= -32768)\n \t  *total = 2;"}]}