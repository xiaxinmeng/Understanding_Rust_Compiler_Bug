{"sha": "b5b6485f1cc54f21713b5b03c5d63d56839ca458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViNjQ4NWYxY2M1NGYyMTcxM2I1YjAzYzVkNjNkNTY4MzljYTQ1OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-23T18:18:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-23T18:18:31Z"}, "message": "ipa-reference.h (ipa_reference_var_uid): Move offline.\n\n\t* ipa-reference.h (ipa_reference_var_uid): Move offline.\n\t* ipa-reference.c (reference_vars_map_t): new type.\n\t(ipa_reference_vars_map, ipa_reference_vars_uids): New static vars.\n\t(ipa_reference_var_uid): Implement.\n\t(varpool_node_hooks): New static var.\n\t(varpool_removal_hook): New function.\n\t(is_improper): Do not check bitmap for id==-1\n\t(get_static_name): Update.\n\t(ipa_init): Initialize new datastructures.\n\t(analyze_function): Do not recompute ids.\n\t(propagate): Free reference_vars_to_consider.\n\t(stream_out_bitmap): Update.\n\t(ipa_reference_read_optimization_summary): Update.\n\nFrom-SVN: r277345", "tree": {"sha": "1e0f5c75195d6a231237d32919da05dd22e97f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0f5c75195d6a231237d32919da05dd22e97f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5b6485f1cc54f21713b5b03c5d63d56839ca458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b6485f1cc54f21713b5b03c5d63d56839ca458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b6485f1cc54f21713b5b03c5d63d56839ca458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b6485f1cc54f21713b5b03c5d63d56839ca458/comments", "author": null, "committer": null, "parents": [{"sha": "9fdaaf77726f041c05b1e5cba428526c7cc69ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdaaf77726f041c05b1e5cba428526c7cc69ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdaaf77726f041c05b1e5cba428526c7cc69ad7"}], "stats": {"total": 140, "additions": 104, "deletions": 36}, "files": [{"sha": "4cd0fda8f1cc5fbdb211a7fe6fff522ca2c37130", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5b6485f1cc54f21713b5b03c5d63d56839ca458", "patch": "@@ -1,3 +1,19 @@\n+2019-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-reference.h (ipa_reference_var_uid): Move offline.\n+\t* ipa-reference.c (reference_vars_map_t): new type.\n+\t(ipa_reference_vars_map, ipa_reference_vars_uids): New static vars.\n+\t(ipa_reference_var_uid): Implement.\n+\t(varpool_node_hooks): New static var.\n+\t(varpool_removal_hook): New function.\n+\t(is_improper): Do not check bitmap for id==-1\n+\t(get_static_name): Update.\n+\t(ipa_init): Initialize new datastructures.\n+\t(analyze_function): Do not recompute ids.\n+\t(propagate): Free reference_vars_to_consider.\n+\t(stream_out_bitmap): Update.\n+\t(ipa_reference_read_optimization_summary): Update.\n+\n 2019-10-23  qing zhao  <qing.zhao@oracle.com>\n \n \tPR gcov-profile/91971"}, {"sha": "1e35438bdd850e677eabe842ed649d80fcfc5f87", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 87, "deletions": 30, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=b5b6485f1cc54f21713b5b03c5d63d56839ca458", "patch": "@@ -93,9 +93,11 @@ typedef struct ipa_reference_vars_info_d *ipa_reference_vars_info_t;\n \n /* This map contains all of the static variables that are\n    being considered by the compilation level alias analysis.  */\n-typedef hash_map<int_hash <unsigned int, -1U>, tree>\n-\t reference_vars_to_consider_t;\n-static reference_vars_to_consider_t *reference_vars_to_consider;\n+typedef hash_map<tree, int> reference_vars_map_t;\n+static reference_vars_map_t *ipa_reference_vars_map;\n+static int ipa_reference_vars_uids;\n+static vec<tree> *reference_vars_to_consider;\n+varpool_node_hook_list *varpool_node_hooks;\n \n /* Set of all interesting module statics.  A bit is set for every module\n    static we are considering.  This is added to the local info when asm\n@@ -137,6 +139,31 @@ class ipa_ref_opt_summary_t: public fast_function_summary\n \n static ipa_ref_opt_summary_t *ipa_ref_opt_sum_summaries = NULL;\n \n+/* Return ID used by ipa-reference bitmaps.  -1 if failed.  */\n+int\n+ipa_reference_var_uid (tree t)\n+{\n+  if (!ipa_reference_vars_map)\n+    return -1;\n+  int *id = ipa_reference_vars_map->get\n+    (symtab_node::get (t)->ultimate_alias_target (NULL)->decl);\n+  if (!id)\n+    return -1;\n+  return *id;\n+}\n+\n+/* Return ID used by ipa-reference bitmaps.  Create new entry if\n+   T is not in map.  Set EXISTED accordinly  */\n+int\n+ipa_reference_var_get_or_insert_uid (tree t, bool *existed)\n+{\n+  int &id = ipa_reference_vars_map->get_or_insert\n+    (symtab_node::get (t)->ultimate_alias_target (NULL)->decl, existed);\n+  if (!*existed)\n+    id = ipa_reference_vars_uids++;\n+  return id;\n+}\n+\n /* Return the ipa_reference_vars structure starting from the cgraph NODE.  */\n static inline ipa_reference_vars_info_t\n get_reference_vars_info (struct cgraph_node *node)\n@@ -257,7 +284,9 @@ is_improper (symtab_node *n, void *v ATTRIBUTE_UNUSED)\n static inline bool\n is_proper_for_analysis (tree t)\n {\n-  if (bitmap_bit_p (ignore_module_statics, ipa_reference_var_uid (t)))\n+  int id = ipa_reference_var_uid (t);\n+\n+  if (id != -1 && bitmap_bit_p (ignore_module_statics, id))\n     return false;\n \n   if (symtab_node::get (t)\n@@ -273,7 +302,7 @@ is_proper_for_analysis (tree t)\n static const char *\n get_static_name (int index)\n {\n-  return fndecl_name (*reference_vars_to_consider->get (index));\n+  return fndecl_name ((*reference_vars_to_consider)[index]);\n }\n \n /* Dump a set of static vars to FILE.  */\n@@ -402,6 +431,16 @@ propagate_bits (ipa_reference_global_vars_info_t x_global, struct cgraph_node *x\n     }\n }\n \n+/* Delete NODE from map.  */\n+\n+static void\n+varpool_removal_hook (varpool_node *node, void *)\n+{\n+  int *id = ipa_reference_vars_map->get (node->decl)\n+  if (id)\n+    ipa_reference_vars_map->remove (*id);\n+}\n+\n static bool ipa_init_p = false;\n \n /* The init routine for analyzing global static variable usage.  See\n@@ -414,8 +453,19 @@ ipa_init (void)\n \n   ipa_init_p = true;\n \n-  if (dump_file)\n-    reference_vars_to_consider = new reference_vars_to_consider_t(251);\n+  vec_alloc (reference_vars_to_consider, 10);\n+\n+\n+  if (ipa_ref_opt_sum_summaries != NULL)\n+    {\n+      delete ipa_ref_opt_sum_summaries;\n+      ipa_ref_opt_sum_summaries = NULL;\n+      delete ipa_reference_vars_map;\n+    }\n+  ipa_reference_vars_map = new reference_vars_map_t(257);\n+  varpool_node_hooks\n+\t = symtab->add_varpool_removal_hook (varpool_removal_hook, NULL);\n+  ipa_reference_vars_uids = 0;\n \n   bitmap_obstack_initialize (&local_info_obstack);\n   bitmap_obstack_initialize (&optimization_summary_obstack);\n@@ -424,12 +474,6 @@ ipa_init (void)\n \n   if (ipa_ref_var_info_summaries == NULL)\n     ipa_ref_var_info_summaries = new ipa_ref_var_info_summary_t (symtab);\n-\n-  if (ipa_ref_opt_sum_summaries != NULL)\n-    {\n-      delete ipa_ref_opt_sum_summaries;\n-      ipa_ref_opt_sum_summaries = NULL;\n-    }\n }\n \n \n@@ -464,29 +508,31 @@ analyze_function (struct cgraph_node *fn)\n   local = init_function_info (fn);\n   for (i = 0; fn->iterate_reference (i, ref); i++)\n     {\n+      int id;\n+      bool existed;\n       if (!is_a <varpool_node *> (ref->referred))\n \tcontinue;\n       var = ref->referred->decl;\n       if (!is_proper_for_analysis (var))\n \tcontinue;\n       /* This is a variable we care about.  Check if we have seen it\n \t before, and if not add it the set of variables we care about.  */\n-      if (all_module_statics\n-\t  && bitmap_set_bit (all_module_statics, ipa_reference_var_uid (var)))\n+      id = ipa_reference_var_get_or_insert_uid (var, &existed);\n+      if (!existed)\n \t{\n+\t  bitmap_set_bit (all_module_statics, id);\n \t  if (dump_file)\n-\t    reference_vars_to_consider->put (ipa_reference_var_uid (var),\n-\t\t\t\t\t\tvar);\n+\t    reference_vars_to_consider->safe_push (var);\n \t}\n       switch (ref->use)\n \t{\n \tcase IPA_REF_LOAD:\n-          bitmap_set_bit (local->statics_read, ipa_reference_var_uid (var));\n+          bitmap_set_bit (local->statics_read, id);\n \t  break;\n \tcase IPA_REF_STORE:\n \t  if (ref->cannot_lead_to_return ())\n \t    break;\n-          bitmap_set_bit (local->statics_written, ipa_reference_var_uid (var));\n+          bitmap_set_bit (local->statics_written, id);\n \t  break;\n \tcase IPA_REF_ADDR:\n \t  break;\n@@ -896,7 +942,7 @@ propagate (void)\n     }\n \n   if (dump_file)\n-    delete reference_vars_to_consider;\n+    vec_free (reference_vars_to_consider);\n   reference_vars_to_consider = NULL;\n   return remove_p ? TODO_remove_functions : 0;\n }\n@@ -966,7 +1012,7 @@ stream_out_bitmap (struct lto_simple_output_block *ob,\n     return;\n   EXECUTE_IF_AND_IN_BITMAP (bits, ltrans_statics, 0, index, bi)\n     {\n-      tree decl = *reference_vars_to_consider->get (index);\n+      tree decl = (*reference_vars_to_consider) [index];\n       lto_output_var_decl_index (ob->decl_state, ob->main_stream, decl);\n     }\n }\n@@ -984,22 +1030,23 @@ ipa_reference_write_optimization_summary (void)\n   auto_bitmap ltrans_statics;\n   int i;\n \n-  reference_vars_to_consider = new reference_vars_to_consider_t (251);\n+  vec_alloc (reference_vars_to_consider, ipa_reference_vars_uids);\n+  reference_vars_to_consider->safe_grow (ipa_reference_vars_uids);\n \n   /* See what variables we are interested in.  */\n   for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n     {\n       symtab_node *snode = lto_symtab_encoder_deref (encoder, i);\n       varpool_node *vnode = dyn_cast <varpool_node *> (snode);\n+      int id;\n+\n       if (vnode\n-\t  && bitmap_bit_p (all_module_statics,\n-\t\t\t    ipa_reference_var_uid (vnode->decl))\n+\t  && (id = ipa_reference_var_uid (vnode->decl)) != -1\n \t  && referenced_from_this_partition_p (vnode, encoder))\n \t{\n \t  tree decl = vnode->decl;\n-\t  bitmap_set_bit (ltrans_statics, ipa_reference_var_uid (decl));\n-\t  reference_vars_to_consider->put\n-\t\t (ipa_reference_var_uid (decl), decl);\n+\t  bitmap_set_bit (ltrans_statics, id);\n+\t  (*reference_vars_to_consider)[id] = decl;\n \t  ltrans_statics_bitcount ++;\n \t}\n     }\n@@ -1055,8 +1102,12 @@ ipa_reference_read_optimization_summary (void)\n   unsigned int j = 0;\n   bitmap_obstack_initialize (&optimization_summary_obstack);\n \n-  if (ipa_ref_opt_sum_summaries == NULL)\n-    ipa_ref_opt_sum_summaries = new ipa_ref_opt_summary_t (symtab);\n+  gcc_checking_assert (ipa_ref_opt_sum_summaries == NULL);\n+  ipa_ref_opt_sum_summaries = new ipa_ref_opt_summary_t (symtab);\n+  ipa_reference_vars_map = new reference_vars_map_t(257);\n+  varpool_node_hooks\n+\t = symtab->add_varpool_removal_hook (varpool_removal_hook, NULL);\n+  ipa_reference_vars_uids = 0;\n \n   all_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n \n@@ -1083,8 +1134,11 @@ ipa_reference_read_optimization_summary (void)\n \t      unsigned int var_index = streamer_read_uhwi (ib);\n \t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n \t\t\t\t\t\t\t     var_index);\n+\t      bool existed;\n \t      bitmap_set_bit (all_module_statics,\n-\t\t\t      ipa_reference_var_uid (v_decl));\n+\t\t\t      ipa_reference_var_get_or_insert_uid\n+\t\t\t\t (v_decl, &existed));\n+\t      gcc_checking_assert (!existed);\n \t      if (dump_file)\n \t\tfprintf (dump_file, \" %s\", fndecl_name (v_decl));\n \t    }\n@@ -1235,6 +1289,9 @@ ipa_reference_c_finalize (void)\n     {\n       delete ipa_ref_opt_sum_summaries;\n       ipa_ref_opt_sum_summaries = NULL;\n+      delete ipa_reference_vars_map;\n+      ipa_reference_vars_map = NULL;\n+      symtab->remove_varpool_removal_hook (varpool_node_hooks)\n     }\n \n   if (ipa_init_p)"}, {"sha": "6563db6defaf0b6913454709b1500faaf51e180d", "filename": "gcc/ipa-reference.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2Fipa-reference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b6485f1cc54f21713b5b03c5d63d56839ca458/gcc%2Fipa-reference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.h?ref=b5b6485f1cc54f21713b5b03c5d63d56839ca458", "patch": "@@ -25,12 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n bitmap ipa_reference_get_not_read_global (struct cgraph_node *fn);\n bitmap ipa_reference_get_not_written_global (struct cgraph_node *fn);\n void ipa_reference_c_finalize (void);\n-\n-inline int\n-ipa_reference_var_uid (tree t)\n-{\n-  return DECL_UID (symtab_node::get (t)->ultimate_alias_target (NULL)->decl);\n-}\n+int ipa_reference_var_uid (tree t);\n \n #endif  /* GCC_IPA_REFERENCE_H  */\n "}]}