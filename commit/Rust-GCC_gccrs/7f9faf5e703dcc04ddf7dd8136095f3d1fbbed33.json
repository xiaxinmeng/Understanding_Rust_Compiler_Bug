{"sha": "7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5ZmFmNWU3MDNkY2MwNGRkZjdkZDgxMzYwOTVmM2QxZmJiZWQzMw==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-11-29T15:19:39Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-11-29T15:19:39Z"}, "message": "re PR c++/29022 (ICE using operator int in invalid class hierarchy)\n\n\tPR c++/29022\n\t* parser.c (cp_parser_class_head): Move processing\n\tof any base classes to...\n\t(cp_parser_class_specifier) ...here. Take an extra\n\ttree* parameter for any base classes. Only process\n\tthem if the opening brace was found.\n\n\t* g++.dg/inherit/virtual2.C: New test.\n\t* g++.dg/inherit/virtual3.C: Likewise.\n\t* g++.old-deja/g++.bugs/900121_05.C: Adjust error markers.\n\t* g++.dg/inherit/error2.C: Likewise.\n\t* g++.dg/template/instantiate1.C: Likewise.\n\nFrom-SVN: r119318", "tree": {"sha": "8dfe031c7bde6e8643739d129b93e39020aca30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dfe031c7bde6e8643739d129b93e39020aca30e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/comments", "author": null, "committer": null, "parents": [{"sha": "8b65a354f0a738cf9e1bfe507ce146ca56b518bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b65a354f0a738cf9e1bfe507ce146ca56b518bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b65a354f0a738cf9e1bfe507ce146ca56b518bc"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "149516cd9052f77ab6db13a98a891647d8cd48fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -1,3 +1,12 @@\n+2006-11-29  Lee Millward  <lee.millward@codesourcery.com> \n+\n+\tPR c++/29022\n+\t* parser.c (cp_parser_class_head): Move processing\n+\tof any base classes to...\n+\t(cp_parser_class_specifier) ...here. Take an extra\n+\ttree* parameter for any base classes. Only process\n+\tthem if the opening brace was found.\n+\t\n 2006-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/29735"}, {"sha": "ad4d454baaf1100fe33766911d84a04a294a7b97", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -1639,7 +1639,7 @@ static tree cp_parser_class_name\n static tree cp_parser_class_specifier\n   (cp_parser *);\n static tree cp_parser_class_head\n-  (cp_parser *, bool *, tree *);\n+  (cp_parser *, bool *, tree *, tree *);\n static enum tag_types cp_parser_class_key\n   (cp_parser *);\n static void cp_parser_member_specification_opt\n@@ -13090,13 +13090,15 @@ cp_parser_class_specifier (cp_parser* parser)\n   bool saved_in_function_body;\n   tree old_scope = NULL_TREE;\n   tree scope = NULL_TREE;\n+  tree bases;\n \n   push_deferring_access_checks (dk_no_deferred);\n \n   /* Parse the class-head.  */\n   type = cp_parser_class_head (parser,\n \t\t\t       &nested_name_specifier_p,\n-\t\t\t       &attributes);\n+\t\t\t       &attributes,\n+\t\t\t       &bases);\n   /* If the class-head was a semantic disaster, skip the entire body\n      of the class.  */\n   if (!type)\n@@ -13113,6 +13115,19 @@ cp_parser_class_specifier (cp_parser* parser)\n       return error_mark_node;\n     }\n \n+  /* Process the base classes. If they're invalid, skip the \n+     entire class body.  */\n+  if (!xref_basetypes (type, bases))\n+    {\n+      cp_parser_skip_to_closing_brace (parser);\n+\n+      /* Consuming the closing brace yields better error messages\n+         later on.  */\n+      cp_lexer_consume_token (parser->lexer);\n+      pop_deferring_access_checks ();\n+      return error_mark_node;\n+    }\n+\n   /* Issue an error message if type-definitions are forbidden here.  */\n   cp_parser_check_type_definition (parser);\n   /* Remember that we are defining one more class.  */\n@@ -13268,7 +13283,8 @@ cp_parser_class_specifier (cp_parser* parser)\n static tree\n cp_parser_class_head (cp_parser* parser,\n \t\t      bool* nested_name_specifier_p,\n-\t\t      tree *attributes_p)\n+\t\t      tree *attributes_p,\n+\t\t      tree *bases)\n {\n   tree nested_name_specifier;\n   enum tag_types class_key;\n@@ -13281,7 +13297,6 @@ cp_parser_class_head (cp_parser* parser,\n   bool invalid_explicit_specialization_p = false;\n   tree pushed_scope = NULL_TREE;\n   unsigned num_templates;\n-  tree bases;\n \n   /* Assume no nested-name-specifier will be present.  */\n   *nested_name_specifier_p = false;\n@@ -13569,6 +13584,8 @@ cp_parser_class_head (cp_parser* parser,\n       type = NULL_TREE;\n       goto done;\n     }\n+  else if (type == error_mark_node)\n+    type = NULL_TREE;\n \n   /* We will have entered the scope containing the class; the names of\n      base classes should be looked up in that context.  For example:\n@@ -13577,15 +13594,11 @@ cp_parser_class_head (cp_parser* parser,\n        struct A::C : B {};\n \n      is valid.  */\n-  bases = NULL_TREE;\n+  *bases = NULL_TREE;\n \n   /* Get the list of base-classes, if there is one.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n-    bases = cp_parser_base_clause (parser);\n-\n-  /* Process the base classes.  */\n-  if (!xref_basetypes (type, bases))\n-    type = NULL_TREE;\n+    *bases = cp_parser_base_clause (parser);\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "64bea987349bde763d64fcdba702d353aae2c006", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -1,3 +1,12 @@\n+2006-11-29  Lee Millward  <lee.millward@codesourcery.com>\n+\n+\tPR c++/29022\n+\t* g++.dg/inherit/virtual2.C: New test.\n+\t* g++.dg/inherit/virtual3.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900121_05.C: Adjust error markers.\n+\t* g++.dg/inherit/error2.C: Likewise.\n+\t* g++.dg/template/instantiate1.C: Likewise.\n+\t\n 2006-11-28  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR tree-opt/29984"}, {"sha": "7d5e2e5d689fe940d4e4dc6e40d8b2005344d295", "filename": "gcc/testsuite/g++.dg/inherit/error2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -3,14 +3,14 @@\n \n struct A\n {\n-  virtual A* foo();\n+  virtual A* foo();    // { dg-error \"overriding\" }\n };\n \n struct B : virtual A;  // { dg-error \"before\" }\n \n struct C : A\n {\n-  virtual B* foo();\n+  virtual B* foo();    // { dg-error \"invalid covariant\" }\n };\n \n B* C::foo() { return 0; }"}, {"sha": "9769d4ab730c13c6ddc1113eff2047f1711f023c", "filename": "gcc/testsuite/g++.dg/inherit/virtual2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual2.C?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -0,0 +1,13 @@\n+//PR c++/29022\n+\n+struct A\n+{\n+  operator int();\n+};\n+\n+struct B : virtual A, A<0> {};  // { dg-error \"token\" }\n+\n+int foo(B &b)\n+{\n+  return b;                     // { dg-error \"cannot convert\" }\n+}"}, {"sha": "65ae76c0b3dbd1378cd5ba9c888feab794766655", "filename": "gcc/testsuite/g++.dg/inherit/virtual3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual3.C?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -0,0 +1,13 @@\n+//PR c++/29022\n+\n+struct A\n+{\n+  operator int();\n+};\n+\n+struct B : virtual A;\t// { dg-error \"token\" }\n+\n+int foo(B &b)\n+{\n+  return b;\t\t// { dg-error \"cannot convert\" }\n+}"}, {"sha": "0c739d0f61550a5724bbebc8e434af679dc6ad13", "filename": "gcc/testsuite/g++.dg/template/instantiate1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -16,6 +16,6 @@ template <class T> struct Z {\t// { dg-error \"declaration\" }\n   Y<Z<T> > y;\t\t\t// { dg-error \"instantiated\" }\n };\n \n-struct ZZ : Z<int>\t\t// { dg-error \"instantiated\" }\n+struct ZZ : Z<int>\n {\n };"}, {"sha": "62db5b343afed32430aaae18e27b75861ab894ec", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900121_05.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900121_05.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900121_05.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900121_05.C?ref=7f9faf5e703dcc04ddf7dd8136095f3d1fbbed33", "patch": "@@ -24,7 +24,7 @@ union u1 {\n   int u1_member_1;\n };\n \n-struct s1 : public u1 {\t\t\t/* { dg-error \"\" } base class is a union */\n+struct s1 : public u1 {\t\t\t/* { dg-error \"base type\" } */\n   int s1_member_0;\n };\n "}]}