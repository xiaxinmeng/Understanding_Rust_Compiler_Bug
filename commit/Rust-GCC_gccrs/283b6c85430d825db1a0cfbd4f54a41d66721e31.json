{"sha": "283b6c85430d825db1a0cfbd4f54a41d66721e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzYjZjODU0MzBkODI1ZGIxYTBjZmJkNGY1NGE0MWQ2NjcyMWUzMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-12-16T15:49:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-12-16T15:49:42Z"}, "message": "[AArch64] Properly cost zero_extend+ashift forms of ubfi[xz]\n\n\t* config/aarch64/aarch64.c (aarch64_extend_bitfield_pattern_p):\n\tNew function.\n\t(aarch64_rtx_costs, ZERO_EXTEND, SIGN_EXTEND cases): Use the above\n\tto handle extend+shift rtxes.\n\nFrom-SVN: r231698", "tree": {"sha": "a22a8a0307a6b40dea66cb671b888c5e439eb57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22a8a0307a6b40dea66cb671b888c5e439eb57f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283b6c85430d825db1a0cfbd4f54a41d66721e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b6c85430d825db1a0cfbd4f54a41d66721e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283b6c85430d825db1a0cfbd4f54a41d66721e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b6c85430d825db1a0cfbd4f54a41d66721e31/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "077067a5f30559fd97ffbf2d9f8f636442d8905a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077067a5f30559fd97ffbf2d9f8f636442d8905a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077067a5f30559fd97ffbf2d9f8f636442d8905a"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "ef9db370a1588a79c103f1db891ca3914cb498f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b6c85430d825db1a0cfbd4f54a41d66721e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b6c85430d825db1a0cfbd4f54a41d66721e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=283b6c85430d825db1a0cfbd4f54a41d66721e31", "patch": "@@ -1,3 +1,10 @@\n+2015-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_extend_bitfield_pattern_p):\n+\tNew function.\n+\t(aarch64_rtx_costs, ZERO_EXTEND, SIGN_EXTEND cases): Use the above\n+\tto handle extend+shift rtxes.\n+\n 2015-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/68696"}, {"sha": "e3e5b6b2d1011abce6058ac5ae33010d7c8c5366", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283b6c85430d825db1a0cfbd4f54a41d66721e31/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283b6c85430d825db1a0cfbd4f54a41d66721e31/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=283b6c85430d825db1a0cfbd4f54a41d66721e31", "patch": "@@ -6146,6 +6146,50 @@ aarch64_if_then_else_costs (rtx op0, rtx op1, rtx op2, int *cost, bool speed)\n   return false;\n }\n \n+/* Check whether X is a bitfield operation of the form shift + extend that\n+   maps down to a UBFIZ/SBFIZ/UBFX/SBFX instruction.  If so, return the\n+   operand to which the bitfield operation is applied.  Otherwise return\n+   NULL_RTX.  */\n+\n+static rtx\n+aarch64_extend_bitfield_pattern_p (rtx x)\n+{\n+  rtx_code outer_code = GET_CODE (x);\n+  machine_mode outer_mode = GET_MODE (x);\n+\n+  if (outer_code != ZERO_EXTEND && outer_code != SIGN_EXTEND\n+      && outer_mode != SImode && outer_mode != DImode)\n+    return NULL_RTX;\n+\n+  rtx inner = XEXP (x, 0);\n+  rtx_code inner_code = GET_CODE (inner);\n+  machine_mode inner_mode = GET_MODE (inner);\n+  rtx op = NULL_RTX;\n+\n+  switch (inner_code)\n+    {\n+      case ASHIFT:\n+\tif (CONST_INT_P (XEXP (inner, 1))\n+\t    && (inner_mode == QImode || inner_mode == HImode))\n+\t  op = XEXP (inner, 0);\n+\tbreak;\n+      case LSHIFTRT:\n+\tif (outer_code == ZERO_EXTEND && CONST_INT_P (XEXP (inner, 1))\n+\t    && (inner_mode == QImode || inner_mode == HImode))\n+\t  op = XEXP (inner, 0);\n+\tbreak;\n+      case ASHIFTRT:\n+\tif (outer_code == SIGN_EXTEND && CONST_INT_P (XEXP (inner, 1))\n+\t    && (inner_mode == QImode || inner_mode == HImode))\n+\t  op = XEXP (inner, 0);\n+\tbreak;\n+      default:\n+\tbreak;\n+    }\n+\n+  return op;\n+}\n+\n /* Calculate the cost of calculating X, storing it in *COST.  Result\n    is true if the total cost of the operation has now been calculated.  */\n static bool\n@@ -6837,6 +6881,15 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t  return true;\n \t}\n \n+      op0 = aarch64_extend_bitfield_pattern_p (x);\n+      if (op0)\n+\t{\n+\t  *cost += rtx_cost (op0, mode, ZERO_EXTEND, 0, speed);\n+\t  if (speed)\n+\t    *cost += extra_cost->alu.bfx;\n+\t  return true;\n+\t}\n+\n       if (speed)\n \t{\n \t  if (VECTOR_MODE_P (mode))\n@@ -6868,6 +6921,15 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t  return true;\n \t}\n \n+      op0 = aarch64_extend_bitfield_pattern_p (x);\n+      if (op0)\n+\t{\n+\t  *cost += rtx_cost (op0, mode, SIGN_EXTEND, 0, speed);\n+\t  if (speed)\n+\t    *cost += extra_cost->alu.bfx;\n+\t  return true;\n+\t}\n+\n       if (speed)\n \t{\n \t  if (VECTOR_MODE_P (mode))"}]}