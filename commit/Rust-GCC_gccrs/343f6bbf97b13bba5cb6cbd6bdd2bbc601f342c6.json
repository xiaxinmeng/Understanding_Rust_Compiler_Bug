{"sha": "343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzZjZiYmY5N2IxM2JiYTVjYjZjYmQ2YmRkMmJiYzYwMWYzNDJjNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-12-11T17:37:25Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-12-11T17:37:25Z"}, "message": "re PR middle-end/18641 (Another ICE caused by reload of a pseudo reg into f0 for a DImode expr)\n\n2004-12-11  David Edelsohn  <edelsohn@gnu.org>\n            Ulrich Weigand  <uweigand@de.ibm.com>\n\n        PR target/18641\n        * config/rs6000/darwin.h (PREFERRED_RELOAD_CLASS): Reload all\n        constants into all register classes intersecting with FLOAT_REGS\n        via memory.\n        * config/rs6000/rs6000.h (PREFERRED_RELOAD_CLASS): Same.\n        * config/rs6000/rs6000.md (movdi_internal32): Ignore FPRs when\n        choosing register preferences.\n        (movdi_internal64): Same.\n\nCo-Authored-By: Ulrich Weigand <uweigand@de.ibm.com>\n\nFrom-SVN: r92032", "tree": {"sha": "ce58e675bcb9e263056532c0fccf952149a8dc78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce58e675bcb9e263056532c0fccf952149a8dc78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/comments", "author": null, "committer": null, "parents": [{"sha": "3bb18f492119d3ea6a326eb6a3b50ecc4557270b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb18f492119d3ea6a326eb6a3b50ecc4557270b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb18f492119d3ea6a326eb6a3b50ecc4557270b"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "d4f8a76cc457679994c0d172b9552468c87d8eca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "patch": "@@ -1,3 +1,15 @@\n+2004-12-11  David Edelsohn  <edelsohn@gnu.org>\n+\t    Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR target/18641\n+\t* config/rs6000/darwin.h (PREFERRED_RELOAD_CLASS): Reload all\n+\tconstants into all register classes intersecting with FLOAT_REGS\n+\tvia memory.\n+\t* config/rs6000/rs6000.h (PREFERRED_RELOAD_CLASS): Same.\n+\t* config/rs6000/rs6000.md (movdi_internal32): Ignore FPRs when\n+\tchoosing register preferences.\n+\t(movdi_internal64): Same.\n+\n 2004-12-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-into-ssa.c (rewrite_ssa_into_ssa): Free SSA_NAME_AUX"}, {"sha": "51a52ef026e0a4433f0367a6e4f1e8afd58894d3", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "patch": "@@ -342,8 +342,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef PREFERRED_RELOAD_CLASS\n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\\\n-  ((GET_CODE (X) == CONST_DOUBLE\t\t\t\t\\\n-    && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\t\\\n+  ((CONSTANT_P (X)\t\t\t\t\t\t\\\n+    && reg_classes_intersect_p ((CLASS), FLOAT_REGS))\t\t\\\n    ? NO_REGS\t\t\t\t\t\t\t\\\n    : ((GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == HIGH)\t\\\n       && reg_class_subset_p (BASE_REGS, (CLASS)))\t\t\\"}, {"sha": "6e74c0e0148a5876b4ed9ba87cc1f145c0b1f63e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "patch": "@@ -1397,13 +1397,13 @@ enum reg_class\n  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\\\n-  (((GET_CODE (X) == CONST_DOUBLE\t\t\t\\\n-     && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\\\n-    ? NO_REGS \t\t\t\t\t\t\\\n-    : (GET_MODE_CLASS (GET_MODE (X)) == MODE_INT \t\\\n-       && (CLASS) == NON_SPECIAL_REGS)\t\t\t\\\n-    ? GENERAL_REGS\t\t\t\t\t\\\n-    : (CLASS)))\n+  ((CONSTANT_P (X)\t\t\t\t\t\\\n+    && reg_classes_intersect_p ((CLASS), FLOAT_REGS))\t\\\n+   ? NO_REGS \t\t\t\t\t\t\\\n+   : (GET_MODE_CLASS (GET_MODE (X)) == MODE_INT \t\\\n+      && (CLASS) == NON_SPECIAL_REGS)\t\t\t\\\n+   ? GENERAL_REGS\t\t\t\t\t\\\n+   : (CLASS))\n \n /* Return the register class of a scratch register needed to copy IN into\n    or out of a register in CLASS in MODE.  If it can be done directly,"}, {"sha": "51c4039c1ef1a46cc20223c1614e09a4d027b157", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "patch": "@@ -8496,7 +8496,7 @@\n ; List r->r after r->\"o<>\", otherwise reload will try to reload a\n ; non-offsettable address by using r->r which won't make progress.\n (define_insn \"*movdi_internal32\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=o<>,r,r,f,f,m,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=o<>,r,r,*f,*f,m,r\")\n \t(match_operand:DI 1 \"input_operand\" \"r,r,m,f,m,f,IJKnGHF\"))]\n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n@@ -8567,7 +8567,7 @@\n }\")\n \n (define_insn \"*movdi_internal64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,??f,f,m,r,*h,*h\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,*f,*f,m,r,*h,*h\")\n \t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,f,m,f,*h,r,0\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)"}]}