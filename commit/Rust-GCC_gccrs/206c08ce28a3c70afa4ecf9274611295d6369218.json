{"sha": "206c08ce28a3c70afa4ecf9274611295d6369218", "node_id": "C_kwDOANBUbNoAKDIwNmMwOGNlMjhhM2M3MGFmYTRlY2Y5Mjc0NjExMjk1ZDYzNjkyMTg", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-08T21:08:59Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-08T21:59:57Z"}, "message": "rs6000: Add escape-newline support for builtins files\n\n2021-11-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def (VEC_INIT_V16QI): Use\n\tescape-newline support.\n\t(VEC_INIT_V4SI): Likewise.\n\t(VEC_INIT_V8HI): Likewise.\n\t(PACK_V1TI): Likewise.\n\t(DIVDEU): Likewise.\n\t(VFIRSTMISMATCHOREOSINDEX_V16QI): Likewise.\n\t(VFIRSTMISMATCHOREOSINDEX_V8HI): Likewise.\n\t(VFIRSTMISMATCHOREOSINDEX_V4SI): Likewise.\n\t(CMPRB2): Likewise.\n\t(VSTDCP): Likewise.\n\t(VSIEDP): Likewise.\n\t(FMAF128_ODD): Likewise.\n\t(VSCEQPUO): Likewise.\n\t(VSIEQP): Likewise.\n\t(VSIEQPF): Likewise.\n\t(VSTDCQP): Likewise.\n\t(PACK_TD): Likewise.\n\t(TABORTDC): Likewise.\n\t(TABORTDCI): Likewise.\n\t(SE_LXVRBX): Likewise.\n\t(SE_LXVRHX): Likewise.\n\t(SE_LXVRWX): Likewise.\n\t(SE_LXVRDX): Likewise.\n\t(VREPLACE_UN_UV2DI): Likewise.\n\t(VREPLACE_UN_UV4SI): Likewise.\n\t(VREPLACE_UN_V2DI): Likewise.\n\t(VREPLACE_ELT_UV2DI): Likewise.\n\t(VREPLACE_ELT_V2DI): Likewise.\n\t(ZE_LXVRBX): Likewise.\n\t(ZE_LXVRHX): Likewise.\n\t(ZE_LXVRWX): Likewise.\n\t(ZE_LXVRDX): Likewise.\n\t(CFUGED): Likewise.\n\t(CNTLZDM): Likewise.\n\t(CNTTZDM): Likewise.\n\t(PDEPD): Likewise.\n\t(PEXTD): Likewise.\n\t(PMXVBF16GER2): Likewise.\n\t(PMXVBF16GER2_INTERNAL): Likewise.\n\t(PMXVBF16GER2NN): Likewise.\n\t(PMXVBF16GER2NN_INTERNAL): Likewise.\n\t(PMXVBF16GER2NP): Likewise.\n\t(PMXVBF16GER2NP_INTERNAL): Likewise.\n\t(PMXVBF16GER2PN): Likewise.\n\t(PMXVBF16GER2PN_INTERNAL): Likewise.\n\t(PMXVBF16GER2PP): Likewise.\n\t(PMXVBF16GER2PP_INTERNAL): Likewise.\n\t(PMXVF16GER2): Likewise.\n\t(PMXVF16GER2_INTERNAL): Likewise.\n\t(PMXVF16GER2NN): Likewise.\n\t(PMXVF16GER2NN_INTERNAL): Likewise.\n\t(PMXVF16GER2NP): Likewise.\n\t(PMXVF16GER2NP_INTERNAL): Likewise.\n\t(PMXVF16GER2PN): Likewise.\n\t(PMXVF16GER2PN_INTERNAL): Likewise.\n\t(PMXVF16GER2PP): Likewise.\n\t(PMXVF16GER2PP_INTERNAL): Likewise.\n\t(PMXVF32GER_INTERNAL): Likewise.\n\t(PMXVF32GERNN): Likewise.\n\t(PMXVF32GERNN_INTERNAL): Likewise.\n\t(PMXVF32GERNP): Likewise.\n\t(PMXVF32GERNP_INTERNAL): Likewise.\n\t(PMXVF32GERPN): Likewise.\n\t(PMXVF32GERPN_INTERNAL): Likewise.\n\t(PMXVF32GERPP): Likewise.\n\t(PMXVF32GERPP_INTERNAL): Likewise.\n\t(PMXVF64GER): Likewise.\n\t(PMXVF64GER_INTERNAL): Likewise.\n\t(PMXVF64GERNN): Likewise.\n\t(PMXVF64GERNN_INTERNAL): Likewise.\n\t(PMXVF64GERNP): Likewise.\n\t(PMXVF64GERNP_INTERNAL): Likewise.\n\t(PMXVF64GERPN): Likewise.\n\t(PMXVF64GERPN_INTERNAL): Likewise.\n\t(PMXVF64GERPP): Likewise.\n\t(PMXVF64GERPP_INTERNAL): Likewise.\n\t(PMXVI16GER2): Likewise.\n\t(PMXVI16GER2_INTERNAL): Likewise.\n\t(PMXVI16GER2PP): Likewise.\n\t(PMXVI16GER2PP_INTERNAL): Likewise.\n\t(PMXVI16GER2S): Likewise.\n\t(PMXVI16GER2S_INTERNAL): Likewise.\n\t(PMXVI16GER2SPP): Likewise.\n\t(PMXVI16GER2SPP_INTERNAL): Likewise.\n\t(PMXVI4GER8): Likewise.\n\t(PMXVI4GER8_INTERNAL): Likewise.\n\t(PMXVI4GER8PP): Likewise.\n\t(PMXVI4GER8PP_INTERNAL): Likewise.\n\t(PMXVI8GER4): Likewise.\n\t(PMXVI8GER4_INTERNAL): Likewise.\n\t(PMXVI8GER4PP): Likewise.\n\t(PMXVI8GER4PP_INTERNAL): Likewise.\n\t(PMXVI8GER4SPP): Likewise.\n\t(PMXVI8GER4SPP_INTERNAL): Likewise.\n\t* config/rs6000/rs6000-gen-builtins.c (MAXLINES): New macro.\n\t(linebuf): Increase size.\n\t(lines): New variable.\n\t(lastline): Likewise.\n\t(real_line_pos): New function.\n\t(diag): Change signature.\n\t(bif_diag): Change signature; support escape-newline handling.\n\t(ovld_diag): Likewise.\n\t(fatal): Move earlier.\n\t(consume_whitespace): Adjust diag call.\n\t(advance_line): Add escape-newline handling; call fatal.\n\t(safe_inc_pos): Adjust diag call.\n\t(match_identifier): Likewise.\n\t(match_integer): Likewise.\n\t(match_to_right_bracket): Call fatal instead of diag; adjust diag\n\tcall.\n\t(match_basetype): Adjust diag calls.\n\t(match_bracketed_pair): Likewise.\n\t(match_const_restriction): Likewise.\n\t(match_type): Likewise.\n\t(parse_args): Likewise.\n\t(parse_bif_attrs): Likewise.\n\t(complete_vector_type): Likewise.\n\t(complete_base_type): Likewise.\n\t(parse_prototype): Likewise.\n\t(parse_bif_entry): Likewise.\n\t(parse_bif_stanza): Likewise.\n\t(parse_ovld_entry): Likewise.\n\t(parse_ovld_stanza): Likewise.\n\t(main): Allocate buffers for lines[].", "tree": {"sha": "d63010cce8fd968d96d290a2d520b2c758b8d38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d63010cce8fd968d96d290a2d520b2c758b8d38b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206c08ce28a3c70afa4ecf9274611295d6369218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c08ce28a3c70afa4ecf9274611295d6369218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206c08ce28a3c70afa4ecf9274611295d6369218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c08ce28a3c70afa4ecf9274611295d6369218/comments", "author": null, "committer": null, "parents": [{"sha": "6c5fffd127ec00038f379773f751bf803bc548b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5fffd127ec00038f379773f751bf803bc548b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5fffd127ec00038f379773f751bf803bc548b0"}], "stats": {"total": 574, "additions": 363, "deletions": 211}, "files": [{"sha": "1dd8f6b40b27ebdb5e16100aa508d62fd618fab0", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 193, "deletions": 95, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c08ce28a3c70afa4ecf9274611295d6369218/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c08ce28a3c70afa4ecf9274611295d6369218/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=206c08ce28a3c70afa4ecf9274611295d6369218", "patch": "@@ -1094,16 +1094,22 @@\n   const signed short __builtin_vec_ext_v8hi (vss, signed int);\n     VEC_EXT_V8HI nothing {extract}\n \n-  const vsc __builtin_vec_init_v16qi (signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char, signed char);\n+  const vsc __builtin_vec_init_v16qi (signed char, signed char, signed char, \\\n+            signed char, signed char, signed char, signed char, signed char, \\\n+            signed char, signed char, signed char, signed char, signed char, \\\n+            signed char, signed char, signed char);\n     VEC_INIT_V16QI nothing {init}\n \n   const vf __builtin_vec_init_v4sf (float, float, float, float);\n     VEC_INIT_V4SF nothing {init}\n \n-  const vsi __builtin_vec_init_v4si (signed int, signed int, signed int, signed int);\n+  const vsi __builtin_vec_init_v4si (signed int, signed int, signed int, \\\n+                                     signed int);\n     VEC_INIT_V4SI nothing {init}\n \n-  const vss __builtin_vec_init_v8hi (signed short, signed short, signed short, signed short, signed short, signed short, signed short, signed short);\n+  const vss __builtin_vec_init_v8hi (signed short, signed short, signed short,\\\n+             signed short, signed short, signed short, signed short, \\\n+             signed short);\n     VEC_INIT_V8HI nothing {init}\n \n   const vsc __builtin_vec_set_v16qi (vsc, signed char, const int<4>);\n@@ -2023,7 +2029,8 @@\n   const unsigned int __builtin_divweu (unsigned int, unsigned int);\n     DIVWEU diveu_si {}\n \n-  const vsq __builtin_pack_vector_int128 (unsigned long long, unsigned long long);\n+  const vsq __builtin_pack_vector_int128 (unsigned long long, \\\n+                                          unsigned long long);\n     PACK_V1TI packv1ti {}\n \n   void __builtin_ppc_speculation_barrier ();\n@@ -2038,7 +2045,8 @@\n   const signed long long __builtin_divde (signed long long, signed long long);\n     DIVDE dive_di {}\n \n-  const unsigned long long __builtin_divdeu (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_divdeu (unsigned long long, \\\n+                                             unsigned long long);\n     DIVDEU diveu_di {}\n \n \n@@ -2515,13 +2523,16 @@\n   const signed int __builtin_altivec_first_mismatch_index_v4si (vsi, vsi);\n     VFIRSTMISMATCHINDEX_V4SI first_mismatch_index_v4si {}\n \n-  const signed int __builtin_altivec_first_mismatch_or_eos_index_v16qi (vsc, vsc);\n+  const signed int \\\n+      __builtin_altivec_first_mismatch_or_eos_index_v16qi (vsc, vsc);\n     VFIRSTMISMATCHOREOSINDEX_V16QI first_mismatch_or_eos_index_v16qi {}\n \n-  const signed int __builtin_altivec_first_mismatch_or_eos_index_v8hi (vss, vss);\n+  const signed int \\\n+      __builtin_altivec_first_mismatch_or_eos_index_v8hi (vss, vss);\n     VFIRSTMISMATCHOREOSINDEX_V8HI first_mismatch_or_eos_index_v8hi {}\n \n-  const signed int __builtin_altivec_first_mismatch_or_eos_index_v4si (vsi, vsi);\n+  const signed int \\\n+      __builtin_altivec_first_mismatch_or_eos_index_v4si (vsi, vsi);\n     VFIRSTMISMATCHOREOSINDEX_V4SI first_mismatch_or_eos_index_v4si {}\n \n   const vsc __builtin_altivec_vadub (vsc, vsc);\n@@ -2695,7 +2706,8 @@\n   const signed int __builtin_scalar_byte_in_range (signed int, signed int);\n     CMPRB cmprb {}\n \n-  const signed int __builtin_scalar_byte_in_either_range (signed int, signed int);\n+  const signed int \\\n+      __builtin_scalar_byte_in_either_range (signed int, signed int);\n     CMPRB2 cmprb2 {}\n \n   const vsll __builtin_vsx_extract4b (vsc, const int[0,12]);\n@@ -2734,10 +2746,12 @@\n   const signed int __builtin_vsx_scalar_cmp_exp_dp_unordered (double, double);\n     VSCEDPUO xscmpexpdp_unordered {}\n \n-  const signed int __builtin_vsx_scalar_test_data_class_dp (double, const int<7>);\n+  const signed int \\\n+      __builtin_vsx_scalar_test_data_class_dp (double, const int<7>);\n     VSTDCDP xststdcdp {}\n \n-  const signed int __builtin_vsx_scalar_test_data_class_sp (float, const int<7>);\n+  const signed int \\\n+      __builtin_vsx_scalar_test_data_class_sp (float, const int<7>);\n     VSTDCSP xststdcsp {}\n \n   const signed int __builtin_vsx_scalar_test_neg_dp (double);\n@@ -2835,7 +2849,8 @@\n   const signed long __builtin_vsx_scalar_extract_sig (double);\n     VSESDP xsxsigdp {}\n \n-  const double __builtin_vsx_scalar_insert_exp (unsigned long long, unsigned long long);\n+  const double __builtin_vsx_scalar_insert_exp (unsigned long long, \\\n+                                                unsigned long long);\n     VSIEDP xsiexpdp {}\n \n   const double __builtin_vsx_scalar_insert_exp_dp (double, unsigned long long);\n@@ -2853,7 +2868,8 @@\n   fpmath _Float128 __builtin_divf128_round_to_odd (_Float128, _Float128);\n     DIVF128_ODD divkf3_odd {}\n \n-  fpmath _Float128 __builtin_fmaf128_round_to_odd (_Float128, _Float128, _Float128);\n+  fpmath _Float128 __builtin_fmaf128_round_to_odd (_Float128, _Float128, \\\n+                                                   _Float128);\n     FMAF128_ODD fmakf4_odd {}\n \n   fpmath _Float128 __builtin_mulf128_round_to_odd (_Float128, _Float128);\n@@ -2868,7 +2884,8 @@\n   const signed int __builtin_vsx_scalar_cmp_exp_qp_lt (_Float128, _Float128);\n     VSCEQPLT xscmpexpqp_lt_kf {}\n \n-  const signed int __builtin_vsx_scalar_cmp_exp_qp_unordered (_Float128, _Float128);\n+  const signed int \\\n+      __builtin_vsx_scalar_cmp_exp_qp_unordered (_Float128, _Float128);\n     VSCEQPUO xscmpexpqp_unordered_kf {}\n \n   fpmath _Float128 __builtin_sqrtf128_round_to_odd (_Float128);\n@@ -2886,13 +2903,16 @@\n   const signed __int128 __builtin_vsx_scalar_extract_sigq (_Float128);\n     VSESQP xsxsigqp_kf {}\n \n-  const _Float128 __builtin_vsx_scalar_insert_exp_q (unsigned __int128, unsigned long long);\n+  const _Float128 __builtin_vsx_scalar_insert_exp_q (unsigned __int128, \\\n+                                                     unsigned long long);\n     VSIEQP xsiexpqp_kf {}\n \n-  const _Float128 __builtin_vsx_scalar_insert_exp_qp (_Float128, unsigned long long);\n+  const _Float128 __builtin_vsx_scalar_insert_exp_qp (_Float128, \\\n+                                                      unsigned long long);\n     VSIEQPF xsiexpqpf_kf {}\n \n-  const signed int __builtin_vsx_scalar_test_data_class_qp (_Float128, const int<7>);\n+  const signed int __builtin_vsx_scalar_test_data_class_qp (_Float128, \\\n+                                                            const int<7>);\n     VSTDCQP xststdcqp_kf {}\n \n   const signed int __builtin_vsx_scalar_test_neg_qp (_Float128);\n@@ -2941,7 +2961,8 @@\n   const signed long long __builtin_dxexq (_Decimal128);\n     DXEXQ dfp_dxex_td {}\n \n-  const _Decimal128 __builtin_pack_dec128 (unsigned long long, unsigned long long);\n+  const _Decimal128 __builtin_pack_dec128 (unsigned long long, \\\n+                                           unsigned long long);\n     PACK_TD packtd {}\n \n   void __builtin_set_fpscr_drn (const int[0,7]);\n@@ -3017,10 +3038,12 @@\n   unsigned int __builtin_tabort (unsigned int);\n     TABORT tabort {htm,htmcr}\n \n-  unsigned int __builtin_tabortdc (unsigned long long, unsigned long long, unsigned long long);\n+  unsigned int __builtin_tabortdc (unsigned long long, unsigned long long, \\\n+                                   unsigned long long);\n     TABORTDC tabortdc {htm,htmcr}\n \n-  unsigned int __builtin_tabortdci (unsigned long long, unsigned long long, unsigned long long);\n+  unsigned int __builtin_tabortdci (unsigned long long, unsigned long long, \\\n+                                    unsigned long long);\n     TABORTDCI tabortdci {htm,htmcr}\n \n   unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int);\n@@ -3115,16 +3138,20 @@\n   const vui __builtin_altivec_mtvsrwm (unsigned long long);\n     MTVSRWM vec_mtvsr_v4si {}\n \n-  pure signed __int128 __builtin_altivec_se_lxvrbx (signed long, const signed char *);\n+  pure signed __int128 __builtin_altivec_se_lxvrbx (signed long, \\\n+                                                    const signed char *);\n     SE_LXVRBX vsx_lxvrbx {lxvrse}\n \n-  pure signed __int128 __builtin_altivec_se_lxvrhx (signed long, const signed short *);\n+  pure signed __int128 __builtin_altivec_se_lxvrhx (signed long, \\\n+                                                    const signed short *);\n     SE_LXVRHX vsx_lxvrhx {lxvrse}\n \n-  pure signed __int128 __builtin_altivec_se_lxvrwx (signed long, const signed int *);\n+  pure signed __int128 __builtin_altivec_se_lxvrwx (signed long, \\\n+                                                    const signed int *);\n     SE_LXVRWX vsx_lxvrwx {lxvrse}\n \n-  pure signed __int128 __builtin_altivec_se_lxvrdx (signed long, const signed long long *);\n+  pure signed __int128 __builtin_altivec_se_lxvrdx (signed long, \\\n+                                                    const signed long long *);\n     SE_LXVRDX vsx_lxvrdx {lxvrse}\n \n   void __builtin_altivec_tr_stxvrbx (vsq, signed long, signed char *);\n@@ -3358,16 +3385,19 @@\n   const vull __builtin_altivec_vpextd (vull, vull);\n     VPEXTD vpextd {}\n \n-  const vull __builtin_altivec_vreplace_un_uv2di (vull, unsigned long long, const int<4>);\n+  const vull __builtin_altivec_vreplace_un_uv2di (vull, unsigned long long, \\\n+                                                  const int<4>);\n     VREPLACE_UN_UV2DI vreplace_un_v2di {}\n \n-  const vui __builtin_altivec_vreplace_un_uv4si (vui, unsigned int, const int<4>);\n+  const vui __builtin_altivec_vreplace_un_uv4si (vui, unsigned int, \\\n+                                                 const int<4>);\n     VREPLACE_UN_UV4SI vreplace_un_v4si {}\n \n   const vd __builtin_altivec_vreplace_un_v2df (vd, double, const int<4>);\n     VREPLACE_UN_V2DF vreplace_un_v2df {}\n \n-  const vsll __builtin_altivec_vreplace_un_v2di (vsll, signed long long, const int<4>);\n+  const vsll __builtin_altivec_vreplace_un_v2di (vsll, signed long long, \\\n+                                                 const int<4>);\n     VREPLACE_UN_V2DI vreplace_un_v2di {}\n \n   const vf __builtin_altivec_vreplace_un_v4sf (vf, float, const int<4>);\n@@ -3376,7 +3406,8 @@\n   const vsi __builtin_altivec_vreplace_un_v4si (vsi, signed int, const int<4>);\n     VREPLACE_UN_V4SI vreplace_un_v4si {}\n \n-  const vull __builtin_altivec_vreplace_uv2di (vull, unsigned long long, const int<1>);\n+  const vull __builtin_altivec_vreplace_uv2di (vull, unsigned long long, \\\n+                                               const int<1>);\n     VREPLACE_ELT_UV2DI vreplace_elt_v2di {}\n \n   const vui __builtin_altivec_vreplace_uv4si (vui, unsigned int, const int<2>);\n@@ -3385,7 +3416,8 @@\n   const vd __builtin_altivec_vreplace_v2df (vd, double, const int<1>);\n     VREPLACE_ELT_V2DF vreplace_elt_v2df {}\n \n-  const vsll __builtin_altivec_vreplace_v2di (vsll, signed long long, const int<1>);\n+  const vsll __builtin_altivec_vreplace_v2di (vsll, signed long long, \\\n+                                              const int<1>);\n     VREPLACE_ELT_V2DI vreplace_elt_v2di {}\n \n   const vf __builtin_altivec_vreplace_v4sf (vf, float, const int<2>);\n@@ -3553,33 +3585,42 @@\n   const vss __builtin_vsx_xxpermx_v8hi (vss, vss, vuc, const int<3>);\n     XXPERMX_V8HI xxpermx {}\n \n-  pure unsigned __int128 __builtin_altivec_ze_lxvrbx (signed long, const unsigned char *);\n+  pure unsigned __int128 __builtin_altivec_ze_lxvrbx (signed long, \\\n+                                                      const unsigned char *);\n     ZE_LXVRBX vsx_lxvrbx {lxvrze}\n \n-  pure unsigned __int128 __builtin_altivec_ze_lxvrhx (signed long, const unsigned short *);\n+  pure unsigned __int128 __builtin_altivec_ze_lxvrhx (signed long, \\\n+                                                      const unsigned short *);\n     ZE_LXVRHX vsx_lxvrhx {lxvrze}\n \n-  pure unsigned __int128 __builtin_altivec_ze_lxvrwx (signed long, const unsigned int *);\n+  pure unsigned __int128 __builtin_altivec_ze_lxvrwx (signed long, \\\n+                                                      const unsigned int *);\n     ZE_LXVRWX vsx_lxvrwx {lxvrze}\n \n-  pure unsigned __int128 __builtin_altivec_ze_lxvrdx (signed long, const unsigned long long *);\n+  pure unsigned __int128 \\\n+      __builtin_altivec_ze_lxvrdx (signed long, const unsigned long long *);\n     ZE_LXVRDX vsx_lxvrdx {lxvrze}\n \n \n [power10-64]\n-  const unsigned long long __builtin_cfuged (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_cfuged (unsigned long long, \\\n+                                             unsigned long long);\n     CFUGED cfuged {}\n \n-  const unsigned long long __builtin_cntlzdm (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_cntlzdm (unsigned long long, \\\n+                                              unsigned long long);\n     CNTLZDM cntlzdm {}\n \n-  const unsigned long long __builtin_cnttzdm (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_cnttzdm (unsigned long long, \\\n+                                              unsigned long long);\n     CNTTZDM cnttzdm {}\n \n-  const unsigned long long __builtin_pdepd (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_pdepd (unsigned long long, \\\n+                                            unsigned long long);\n     PDEPD pdepd {}\n \n-  const unsigned long long __builtin_pextd (unsigned long long, unsigned long long);\n+  const unsigned long long __builtin_pextd (unsigned long long, \\\n+                                            unsigned long long);\n     PEXTD pextd {}\n \n \n@@ -3614,178 +3655,235 @@\n   vuc __builtin_mma_disassemble_pair_internal (v256, const int<2>);\n     DISASSEMBLE_PAIR_INTERNAL vsx_disassemble_pair {mma}\n \n-  void __builtin_mma_pmxvbf16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvbf16ger2 (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>, const int<2>);\n     PMXVBF16GER2 nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvbf16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvbf16ger2_internal (vuc, vuc, const int<4>, \\\n+                                            const int<4>, const int<2>);\n     PMXVBF16GER2_INTERNAL mma_pmxvbf16ger2 {mma}\n \n-  void __builtin_mma_pmxvbf16ger2nn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvbf16ger2nn (v512 *, vuc, vuc, const int<4>, \\\n+                                     const int<4>, const int<2>);\n     PMXVBF16GER2NN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvbf16ger2nn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvbf16ger2nn_internal (v512, vuc, vuc, const int<4>, \\\n+                                              const int<4>, const int<2>);\n     PMXVBF16GER2NN_INTERNAL mma_pmxvbf16ger2nn {mma,quad}\n \n-  void __builtin_mma_pmxvbf16ger2np (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvbf16ger2np (v512 *, vuc, vuc, const int<4>, \\\n+                                     const int<4>, const int<2>);\n     PMXVBF16GER2NP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvbf16ger2np_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvbf16ger2np_internal (v512, vuc, vuc, const int<4>, \\\n+                                              const int<4>, const int<2>);\n     PMXVBF16GER2NP_INTERNAL mma_pmxvbf16ger2np {mma,quad}\n \n-  void __builtin_mma_pmxvbf16ger2pn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvbf16ger2pn (v512 *, vuc, vuc, const int<4>, \\\n+                                     const int<4>, const int<2>);\n     PMXVBF16GER2PN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvbf16ger2pn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvbf16ger2pn_internal (v512, vuc, vuc, const int<4>, \\\n+                                              const int<4>, const int<2>);\n     PMXVBF16GER2PN_INTERNAL mma_pmxvbf16ger2pn {mma,quad}\n \n-  void __builtin_mma_pmxvbf16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvbf16ger2pp (v512 *, vuc, vuc, const int<4>, \\\n+                                     const int<4>, const int<2>);\n     PMXVBF16GER2PP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvbf16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvbf16ger2pp_internal (v512, vuc, vuc, const int<4>, \\\n+                                              const int<4>, const int<2>);\n     PMXVBF16GER2PP_INTERNAL mma_pmxvbf16ger2pp {mma,quad}\n \n-  void __builtin_mma_pmxvf16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf16ger2 (v512 *, vuc, vuc, const int<4>, \\\n+                                  const int<4>, const int<2>);\n     PMXVF16GER2 nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvf16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf16ger2_internal (vuc, vuc, const int<4>, \\\n+                                           const int<4>, const int<2>);\n     PMXVF16GER2_INTERNAL mma_pmxvf16ger2 {mma}\n \n-  void __builtin_mma_pmxvf16ger2nn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf16ger2nn (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<2>);\n     PMXVF16GER2NN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf16ger2nn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf16ger2nn_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<2>);\n     PMXVF16GER2NN_INTERNAL mma_pmxvf16ger2nn {mma,quad}\n \n-  void __builtin_mma_pmxvf16ger2np (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf16ger2np (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<2>);\n     PMXVF16GER2NP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf16ger2np_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf16ger2np_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<2>);\n     PMXVF16GER2NP_INTERNAL mma_pmxvf16ger2np {mma,quad}\n \n-  void __builtin_mma_pmxvf16ger2pn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf16ger2pn (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<2>);\n     PMXVF16GER2PN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf16ger2pn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf16ger2pn_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<2>);\n     PMXVF16GER2PN_INTERNAL mma_pmxvf16ger2pn {mma,quad}\n \n-  void __builtin_mma_pmxvf16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf16ger2pp (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<2>);\n     PMXVF16GER2PP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf16ger2pp_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<2>);\n     PMXVF16GER2PP_INTERNAL mma_pmxvf16ger2pp {mma,quad}\n \n   void __builtin_mma_pmxvf32ger (v512 *, vuc, vuc, const int<4>, const int<4>);\n     PMXVF32GER nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvf32ger_internal (vuc, vuc, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvf32ger_internal (vuc, vuc, const int<4>, \\\n+                                          const int<4>);\n     PMXVF32GER_INTERNAL mma_pmxvf32ger {mma}\n \n-  void __builtin_mma_pmxvf32gernn (v512 *, vuc, vuc, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvf32gernn (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>);\n     PMXVF32GERNN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf32gernn_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvf32gernn_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>);\n     PMXVF32GERNN_INTERNAL mma_pmxvf32gernn {mma,quad}\n \n-  void __builtin_mma_pmxvf32gernp (v512 *, vuc, vuc, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvf32gernp (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>);\n     PMXVF32GERNP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf32gernp_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvf32gernp_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>);\n     PMXVF32GERNP_INTERNAL mma_pmxvf32gernp {mma,quad}\n \n-  void __builtin_mma_pmxvf32gerpn (v512 *, vuc, vuc, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvf32gerpn (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>);\n     PMXVF32GERPN nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf32gerpn_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvf32gerpn_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>);\n     PMXVF32GERPN_INTERNAL mma_pmxvf32gerpn {mma,quad}\n \n-  void __builtin_mma_pmxvf32gerpp (v512 *, vuc, vuc, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvf32gerpp (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>);\n     PMXVF32GERPP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf32gerpp_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvf32gerpp_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>);\n     PMXVF32GERPP_INTERNAL mma_pmxvf32gerpp {mma,quad}\n \n-  void __builtin_mma_pmxvf64ger (v512 *, v256, vuc, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf64ger (v512 *, v256, vuc, const int<4>, \\\n+                                 const int<2>);\n     PMXVF64GER nothing {mma,pair,mmaint}\n \n-  v512 __builtin_mma_pmxvf64ger_internal (v256, vuc, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf64ger_internal (v256, vuc, const int<4>, \\\n+                                          const int<2>);\n     PMXVF64GER_INTERNAL mma_pmxvf64ger {mma,pair}\n \n-  void __builtin_mma_pmxvf64gernn (v512 *, v256, vuc, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf64gernn (v512 *, v256, vuc, const int<4>, \\\n+                                   const int<2>);\n     PMXVF64GERNN nothing {mma,pair,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf64gernn_internal (v512, v256, vuc, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf64gernn_internal (v512, v256, vuc, const int<4>, \\\n+                                            const int<2>);\n     PMXVF64GERNN_INTERNAL mma_pmxvf64gernn {mma,pair,quad}\n \n-  void __builtin_mma_pmxvf64gernp (v512 *, v256, vuc, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf64gernp (v512 *, v256, vuc, const int<4>, \\\n+                                   const int<2>);\n     PMXVF64GERNP nothing {mma,pair,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf64gernp_internal (v512, v256, vuc, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf64gernp_internal (v512, v256, vuc, const int<4>, \\\n+                                            const int<2>);\n     PMXVF64GERNP_INTERNAL mma_pmxvf64gernp {mma,pair,quad}\n \n-  void __builtin_mma_pmxvf64gerpn (v512 *, v256, vuc, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf64gerpn (v512 *, v256, vuc, const int<4>, \\\n+                                   const int<2>);\n     PMXVF64GERPN nothing {mma,pair,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf64gerpn_internal (v512, v256, vuc, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf64gerpn_internal (v512, v256, vuc, const int<4>, \\\n+                                            const int<2>);\n     PMXVF64GERPN_INTERNAL mma_pmxvf64gerpn {mma,pair,quad}\n \n-  void __builtin_mma_pmxvf64gerpp (v512 *, v256, vuc, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvf64gerpp (v512 *, v256, vuc, const int<4>, \\\n+                                   const int<2>);\n     PMXVF64GERPP nothing {mma,pair,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvf64gerpp_internal (v512, v256, vuc, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvf64gerpp_internal (v512, v256, vuc, const int<4>, \\\n+                                            const int<2>);\n     PMXVF64GERPP_INTERNAL mma_pmxvf64gerpp {mma,pair,quad}\n \n-  void __builtin_mma_pmxvi16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvi16ger2 (v512 *, vuc, vuc, const int<4>, \\\n+                                  const int<4>, const int<2>);\n     PMXVI16GER2 nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvi16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvi16ger2_internal (vuc, vuc, const int<4>, \\\n+                                           const int<4>, const int<2>);\n     PMXVI16GER2_INTERNAL mma_pmxvi16ger2 {mma}\n \n-  void __builtin_mma_pmxvi16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvi16ger2pp (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<2>);\n     PMXVI16GER2PP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvi16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvi16ger2pp_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<2>);\n     PMXVI16GER2PP_INTERNAL mma_pmxvi16ger2pp {mma,quad}\n \n-  void __builtin_mma_pmxvi16ger2s (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvi16ger2s (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>, const int<2>);\n     PMXVI16GER2S nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvi16ger2s_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvi16ger2s_internal (vuc, vuc, const int<4>, \\\n+                                            const int<4>, const int<2>);\n     PMXVI16GER2S_INTERNAL mma_pmxvi16ger2s {mma}\n \n-  void __builtin_mma_pmxvi16ger2spp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  void __builtin_mma_pmxvi16ger2spp (v512 *, vuc, vuc, const int<4>, \\\n+                                     const int<4>, const int<2>);\n     PMXVI16GER2SPP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvi16ger2spp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+  v512 __builtin_mma_pmxvi16ger2spp_internal (v512, vuc, vuc, const int<4>, \\\n+                                              const int<4>, const int<2>);\n     PMXVI16GER2SPP_INTERNAL mma_pmxvi16ger2spp {mma,quad}\n \n-  void __builtin_mma_pmxvi4ger8 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<8>);\n+  void __builtin_mma_pmxvi4ger8 (v512 *, vuc, vuc, const int<4>, \\\n+                                 const int<4>, const int<8>);\n     PMXVI4GER8 nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvi4ger8_internal (vuc, vuc, const int<4>, const int<4>, const int<8>);\n+  v512 __builtin_mma_pmxvi4ger8_internal (vuc, vuc, const int<4>, \\\n+                                          const int<4>, const int<8>);\n     PMXVI4GER8_INTERNAL mma_pmxvi4ger8 {mma}\n \n-  void __builtin_mma_pmxvi4ger8pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvi4ger8pp (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>, const int<4>);\n     PMXVI4GER8PP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvi4ger8pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvi4ger8pp_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>, const int<4>);\n     PMXVI4GER8PP_INTERNAL mma_pmxvi4ger8pp {mma,quad}\n \n-  void __builtin_mma_pmxvi8ger4 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvi8ger4 (v512 *, vuc, vuc, const int<4>, \\\n+                                 const int<4>, const int<4>);\n     PMXVI8GER4 nothing {mma,mmaint}\n \n-  v512 __builtin_mma_pmxvi8ger4_internal (vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvi8ger4_internal (vuc, vuc, const int<4>, \\\n+                                          const int<4>, const int<4>);\n     PMXVI8GER4_INTERNAL mma_pmxvi8ger4 {mma}\n \n-  void __builtin_mma_pmxvi8ger4pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvi8ger4pp (v512 *, vuc, vuc, const int<4>, \\\n+                                   const int<4>, const int<4>);\n     PMXVI8GER4PP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvi8ger4pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvi8ger4pp_internal (v512, vuc, vuc, const int<4>, \\\n+                                            const int<4>, const int<4>);\n     PMXVI8GER4PP_INTERNAL mma_pmxvi8ger4pp {mma,quad}\n \n-  void __builtin_mma_pmxvi8ger4spp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  void __builtin_mma_pmxvi8ger4spp (v512 *, vuc, vuc, const int<4>, \\\n+                                    const int<4>, const int<4>);\n     PMXVI8GER4SPP nothing {mma,quad,mmaint}\n \n-  v512 __builtin_mma_pmxvi8ger4spp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+  v512 __builtin_mma_pmxvi8ger4spp_internal (v512, vuc, vuc, const int<4>, \\\n+                                             const int<4>, const int<4>);\n     PMXVI8GER4SPP_INTERNAL mma_pmxvi8ger4spp {mma,quad}\n \n   void __builtin_mma_xvbf16ger2 (v512 *, vuc, vuc);"}, {"sha": "1655a2fd7656223d968a2417d97dd4d5c6d5bfa6", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 170, "deletions": 116, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c08ce28a3c70afa4ecf9274611295d6369218/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c08ce28a3c70afa4ecf9274611295d6369218/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=206c08ce28a3c70afa4ecf9274611295d6369218", "patch": "@@ -183,11 +183,20 @@ static const char *defines_path;\n /* Position information.  Note that \"pos\" is zero-indexed, but users\n    expect one-indexed column information, so representations of \"pos\"\n    as columns in diagnostic messages must be adjusted.  */\n+#define MAXLINES 4\n #define LINELEN 1024\n-static char linebuf[LINELEN];\n+static char linebuf[LINELEN * MAXLINES];\n static int line;\n static int pos;\n \n+/* Escape-newline support.  For readability, we prefer to allow developers\n+   to use escape-newline to continue long lines to the next one.  We\n+   maintain a buffer of \"original\" lines here, which are concatenated into\n+   linebuf, above, and which can be used to convert the virtual line\n+   position \"line / pos\" into actual line and position information.  */\n+static char *lines[MAXLINES];\n+static int lastline;\n+\n /* Used to determine whether a type can be void (only return types).  */\n enum void_status\n {\n@@ -568,31 +577,65 @@ static typemap type_map[TYPE_MAP_SIZE] =\n     { \"vp8hi\",\t\t\"pixel_V8HI\" },\n   };\n \n+/* From a possibly extended line with a virtual position, calculate\n+   the current line and character position.  */\n+static void\n+real_line_pos (int diagpos, int *real_line, int *real_pos)\n+{\n+  *real_line = line - lastline;\n+  *real_pos = diagpos;\n+\n+  for (int i = 0; i < MAXLINES; i++)\n+    {\n+      int len = strlen(lines[i]);\n+      if (*real_pos <= len)\n+\tbreak;\n+\n+      (*real_line)++;\n+      *real_pos -= len - 2;\n+    }\n+\n+  /* Convert from zero-base to one-base for printing.  */\n+  (*real_pos)++;\n+}\n+\n /* Pointer to a diagnostic function.  */\n-static void (*diag) (const char *, ...)\n-  __attribute__ ((format (printf, 1, 2)));\n+static void (*diag) (int, const char *, ...)\n+  __attribute__ ((format (printf, 2, 3)));\n \n /* Custom diagnostics.  */\n-static void __attribute__ ((format (printf, 1, 2)))\n-bif_diag (const char * fmt, ...)\n+static void __attribute__ ((format (printf, 2, 3)))\n+bif_diag (int diagpos, const char * fmt, ...)\n {\n   va_list args;\n-  fprintf (stderr, \"%s:%d: \", bif_path, line);\n+  int real_line, real_pos;\n+  real_line_pos (diagpos, &real_line, &real_pos);\n+  fprintf (stderr, \"%s:%d:%d: \", bif_path, real_line, real_pos);\n   va_start (args, fmt);\n   vfprintf (stderr, fmt, args);\n   va_end (args);\n }\n \n-static void __attribute__ ((format (printf, 1, 2)))\n-ovld_diag (const char * fmt, ...)\n+static void __attribute__ ((format (printf, 2, 3)))\n+ovld_diag (int diagpos, const char * fmt, ...)\n {\n   va_list args;\n-  fprintf (stderr, \"%s:%d: \", ovld_path, line);\n+  int real_line, real_pos;\n+  real_line_pos (diagpos, &real_line, &real_pos);\n+  fprintf (stderr, \"%s:%d:%d: \", ovld_path, real_line, real_pos);\n   va_start (args, fmt);\n   vfprintf (stderr, fmt, args);\n   va_end (args);\n }\n \n+/* Produce a fatal error message.  */\n+static void\n+fatal (const char *msg)\n+{\n+  fprintf (stderr, \"FATAL: %s\\n\", msg);\n+  abort ();\n+}\n+\n /* Pass over whitespace (other than a newline, which terminates the scan).  */\n static void\n consume_whitespace (void)\n@@ -602,7 +645,7 @@ consume_whitespace (void)\n \n   if (pos >= LINELEN)\n     {\n-      diag (\"line length overrun at %d.\\n\", pos);\n+      diag (pos, \"line length overrun.\\n\");\n       exit (1);\n     }\n \n@@ -620,8 +663,28 @@ advance_line (FILE *file)\n \treturn 0;\n       line++;\n       size_t len = strlen (linebuf);\n+\n+      /* Escape-newline processing.  */\n+      lastline = 0;\n+      if (len > 1)\n+\t{\n+\t  strcpy (lines[0], linebuf);\n+\t  while (linebuf[len - 2] == '\\\\'\n+\t\t && linebuf[len - 1] == '\\n')\n+\t    {\n+\t      lastline++;\n+\t      if (lastline == MAXLINES)\n+\t\tfatal (\"number of supported overflow lines exceeded\");\n+\t      line++;\n+\t      if (!fgets (lines[lastline], LINELEN, file))\n+\t\tfatal (\"unexpected end of file\");\n+\t      strcpy (&linebuf[len - 2], lines[lastline]);\n+\t      len += strlen (lines[lastline]) - 2;\n+\t    }\n+\t}\n+\n       if (linebuf[len - 1] != '\\n')\n-\t(*diag) (\"line doesn't terminate with newline\\n\");\n+\tfatal (\"line doesn't terminate with newline\");\n       pos = 0;\n       consume_whitespace ();\n       if (linebuf[pos] != '\\n' && linebuf[pos] != ';')\n@@ -634,7 +697,7 @@ safe_inc_pos (void)\n {\n   if (++pos >= LINELEN)\n     {\n-      (*diag) (\"line length overrun.\\n\");\n+      diag (pos, \"line length overrun.\\n\");\n       exit (1);\n     }\n }\n@@ -651,7 +714,7 @@ match_identifier (void)\n \n   if (lastpos >= LINELEN - 1)\n     {\n-      diag (\"line length overrun at %d.\\n\", lastpos);\n+      diag (lastpos, \"line length overrun.\\n\");\n       exit (1);\n     }\n \n@@ -681,7 +744,7 @@ match_integer (void)\n \n   if (lastpos >= LINELEN - 1)\n     {\n-      diag (\"line length overrun at %d.\\n\", lastpos);\n+      diag (lastpos, \"line length overrun.\\n\");\n       exit (1);\n     }\n \n@@ -705,16 +768,13 @@ match_to_right_bracket (void)\n   while (lastpos < LINELEN - 1 && linebuf[lastpos + 1] != ']')\n     {\n       if (linebuf[lastpos + 1] == '\\n')\n-\t{\n-\t  (*diag) (\"no ']' found before end of line.\\n\");\n-\t  exit (1);\n-\t}\n+\tfatal (\"no ']' found before end of line.\\n\");\n       ++lastpos;\n     }\n \n   if (lastpos >= LINELEN - 1)\n     {\n-      diag (\"line length overrun at %d.\\n\", lastpos);\n+      diag (lastpos, \"line length overrun.\\n\");\n       exit (1);\n     }\n \n@@ -740,14 +800,6 @@ handle_pointer (typeinfo *typedata)\n     }\n }\n \n-/* Produce a fatal error message.  */\n-static void\n-fatal (const char *msg)\n-{\n-  fprintf (stderr, \"FATAL: %s\\n\", msg);\n-  abort ();\n-}\n-\n static bif_stanza\n stanza_name_to_stanza (const char *stanza_name)\n {\n@@ -771,7 +823,7 @@ match_basetype (typeinfo *typedata)\n   char *token = match_identifier ();\n   if (!token)\n     {\n-      (*diag) (\"missing base type in return type at column %d\\n\", pos + 1);\n+      diag (pos, \"missing base type in return type\\n\");\n       return 0;\n     }\n \n@@ -825,7 +877,7 @@ match_basetype (typeinfo *typedata)\n     typedata->base = BT_IBM128;\n   else\n     {\n-      (*diag) (\"unrecognized base type at column %d\\n\", oldpos + 1);\n+      diag (oldpos, \"unrecognized base type\\n\");\n       return 0;\n     }\n \n@@ -845,13 +897,13 @@ match_bracketed_pair (typeinfo *typedata, char open, char close,\n       char *x = match_integer ();\n       if (x == NULL)\n \t{\n-\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  diag (oldpos, \"malformed integer.\\n\");\n \t  return 0;\n \t}\n       consume_whitespace ();\n       if (linebuf[pos] != ',')\n \t{\n-\t  (*diag) (\"missing comma at column %d.\\n\", pos + 1);\n+\t  diag (pos, \"missing comma.\\n\");\n \t  return 0;\n \t}\n       safe_inc_pos ();\n@@ -860,7 +912,7 @@ match_bracketed_pair (typeinfo *typedata, char open, char close,\n       char *y = match_integer ();\n       if (y == NULL)\n \t{\n-\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  diag (oldpos, \"malformed integer.\\n\");\n \t  return 0;\n \t}\n       typedata->restr = restr;\n@@ -870,7 +922,7 @@ match_bracketed_pair (typeinfo *typedata, char open, char close,\n       consume_whitespace ();\n       if (linebuf[pos] != close)\n \t{\n-\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  diag (pos, \"malformed restriction.\\n\");\n \t  return 0;\n \t}\n       safe_inc_pos ();\n@@ -905,7 +957,7 @@ match_const_restriction (typeinfo *typedata)\n       char *x = match_integer ();\n       if (x == NULL)\n \t{\n-\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  diag (oldpos, \"malformed integer.\\n\");\n \t  return 0;\n \t}\n       consume_whitespace ();\n@@ -918,15 +970,15 @@ match_const_restriction (typeinfo *typedata)\n \t}\n       else if (linebuf[pos] != ',')\n \t{\n-\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  diag (pos, \"malformed restriction.\\n\");\n \t  return 0;\n \t}\n       safe_inc_pos ();\n       oldpos = pos;\n       char *y = match_integer ();\n       if (y == NULL)\n \t{\n-\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  diag (oldpos, \"malformed integer.\\n\");\n \t  return 0;\n \t}\n       typedata->restr = RES_RANGE;\n@@ -936,7 +988,7 @@ match_const_restriction (typeinfo *typedata)\n       consume_whitespace ();\n       if (linebuf[pos] != '>')\n \t{\n-\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  diag (pos, \"malformed restriction.\\n\");\n \t  return 0;\n \t}\n       safe_inc_pos ();\n@@ -1217,8 +1269,7 @@ match_type (typeinfo *typedata, int voidok)\n \treturn 1;\n       if (typedata->base != BT_INT)\n \t{\n-\t  (*diag)(\"'const' at %d requires pointer or integer type\",\n-\t\t  oldpos + 1);\n+\t  diag (oldpos, \"'const' requires pointer or integer type\\n\");\n \t  return 0;\n \t}\n       consume_whitespace ();\n@@ -1248,7 +1299,7 @@ parse_args (prototype *protoptr)\n   consume_whitespace ();\n   if (linebuf[pos] != '(')\n     {\n-      (*diag) (\"missing '(' at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing '('.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n@@ -1266,7 +1317,7 @@ parse_args (prototype *protoptr)\n \t  {\n \t    if (restr_cnt >= MAXRESTROPNDS)\n \t      {\n-\t\t(*diag) (\"More than two %d operands\\n\", MAXRESTROPNDS);\n+\t\tdiag (pos, \"More than two %d operands\\n\", MAXRESTROPNDS);\n \t\treturn PC_PARSEFAIL;\n \t      }\n \t    restr_opnd[restr_cnt] = *nargs + 1;\n@@ -1283,20 +1334,20 @@ parse_args (prototype *protoptr)\n \t  safe_inc_pos ();\n \telse if (linebuf[pos] != ')')\n \t  {\n-\t    (*diag) (\"arg not followed by ',' or ')' at column %d.\\n\",\n-\t\t     pos + 1);\n+\t    diag (pos, \"arg not followed by ',' or ')'.\\n\");\n \t    return PC_PARSEFAIL;\n \t  }\n \n #ifdef DEBUG\n-\t(*diag) (\"argument type: isvoid = %d, isconst = %d, isvector = %d, \"\n-\t\t \"issigned = %d, isunsigned = %d, isbool = %d, ispixel = %d, \"\n-\t\t \"ispointer = %d, base = %d, restr = %d, val1 = \\\"%s\\\", \"\n-\t\t \"val2 = \\\"%s\\\", pos = %d.\\n\",\n-\t\t argtype->isvoid, argtype->isconst, argtype->isvector,\n-\t\t argtype->issigned, argtype->isunsigned, argtype->isbool,\n-\t\t argtype->ispixel, argtype->ispointer, argtype->base,\n-\t\t argtype->restr, argtype->val1, argtype->val2, pos + 1);\n+\tdiag (0,\n+\t      \"argument type: isvoid = %d, isconst = %d, isvector = %d, \"\n+\t      \"issigned = %d, isunsigned = %d, isbool = %d, ispixel = %d, \"\n+\t      \"ispointer = %d, base = %d, restr = %d, val1 = \\\"%s\\\", \"\n+\t      \"val2 = \\\"%s\\\", pos = %d.\\n\",\n+\t      argtype->isvoid, argtype->isconst, argtype->isvector,\n+\t      argtype->issigned, argtype->isunsigned, argtype->isbool,\n+\t      argtype->ispixel, argtype->ispointer, argtype->base,\n+\t      argtype->restr, argtype->val1, argtype->val2, pos + 1);\n #endif\n       }\n     else\n@@ -1306,7 +1357,7 @@ parse_args (prototype *protoptr)\n \tpos = oldpos;\n \tif (linebuf[pos] != ')')\n \t  {\n-\t    (*diag) (\"badly terminated arg list at column %d.\\n\", pos + 1);\n+\t    diag (pos, \"badly terminated arg list.\\n\");\n \t    return PC_PARSEFAIL;\n \t  }\n \tsafe_inc_pos ();\n@@ -1323,7 +1374,7 @@ parse_bif_attrs (attrinfo *attrptr)\n   consume_whitespace ();\n   if (linebuf[pos] != '{')\n     {\n-      (*diag) (\"missing attribute set at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing attribute set.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n@@ -1383,7 +1434,7 @@ parse_bif_attrs (attrinfo *attrptr)\n \t  attrptr->isendian = 1;\n \telse\n \t  {\n-\t    (*diag) (\"unknown attribute at column %d.\\n\", oldpos + 1);\n+\t    diag (oldpos, \"unknown attribute.\\n\");\n \t    return PC_PARSEFAIL;\n \t  }\n \n@@ -1392,8 +1443,7 @@ parse_bif_attrs (attrinfo *attrptr)\n \t  safe_inc_pos ();\n \telse if (linebuf[pos] != '}')\n \t  {\n-\t    (*diag) (\"arg not followed by ',' or '}' at column %d.\\n\",\n-\t\t     pos + 1);\n+\t    diag (pos, \"arg not followed by ',' or '}'.\\n\");\n \t    return PC_PARSEFAIL;\n \t  }\n       }\n@@ -1402,26 +1452,27 @@ parse_bif_attrs (attrinfo *attrptr)\n \tpos = oldpos;\n \tif (linebuf[pos] != '}')\n \t  {\n-\t    (*diag) (\"badly terminated attr set at column %d.\\n\", pos + 1);\n+\t    diag (pos, \"badly terminated attr set.\\n\");\n \t    return PC_PARSEFAIL;\n \t  }\n \tsafe_inc_pos ();\n       }\n   } while (attrname);\n \n #ifdef DEBUG\n-  (*diag) (\"attribute set: init = %d, set = %d, extract = %d, nosoft = %d, \"\n-\t   \"ldvec = %d, stvec = %d, reve = %d, pred = %d, htm = %d, \"\n-\t   \"htmspr = %d, htmcr = %d, mma = %d, quad = %d, pair = %d, \"\n-\t   \"mmaint = %d, no32bit = %d, 32bit = %d, cpu = %d, ldstmask = %d, \"\n-\t   \"lxvrse = %d, lxvrze = %d, endian = %d.\\n\",\n-\t   attrptr->isinit, attrptr->isset, attrptr->isextract,\n-\t   attrptr->isnosoft, attrptr->isldvec, attrptr->isstvec,\n-\t   attrptr->isreve, attrptr->ispred, attrptr->ishtm, attrptr->ishtmspr,\n-\t   attrptr->ishtmcr, attrptr->ismma, attrptr->isquad, attrptr->ispair,\n-\t   attrptr->ismmaint, attrptr->isno32bit, attrptr->is32bit,\n-\t   attrptr->iscpu, attrptr->isldstmask, attrptr->islxvrse,\n-\t   attrptr->islxvrze, attrptr->isendian);\n+  diag (0,\n+\t\"attribute set: init = %d, set = %d, extract = %d, nosoft = %d, \"\n+\t\"ldvec = %d, stvec = %d, reve = %d, pred = %d, htm = %d, \"\n+\t\"htmspr = %d, htmcr = %d, mma = %d, quad = %d, pair = %d, \"\n+\t\"mmaint = %d, no32bit = %d, 32bit = %d, cpu = %d, ldstmask = %d, \"\n+\t\"lxvrse = %d, lxvrze = %d, endian = %d.\\n\",\n+\tattrptr->isinit, attrptr->isset, attrptr->isextract,\n+\tattrptr->isnosoft, attrptr->isldvec, attrptr->isstvec,\n+\tattrptr->isreve, attrptr->ispred, attrptr->ishtm, attrptr->ishtmspr,\n+\tattrptr->ishtmcr, attrptr->ismma, attrptr->isquad, attrptr->ispair,\n+\tattrptr->ismmaint, attrptr->isno32bit, attrptr->is32bit,\n+\tattrptr->iscpu, attrptr->isldstmask, attrptr->islxvrse,\n+\tattrptr->islxvrze, attrptr->isendian);\n #endif\n \n   return PC_OK;\n@@ -1483,7 +1534,7 @@ complete_vector_type (typeinfo *typeptr, char *buf, int *bufi)\n       *bufi += 4;\n       break;\n     default:\n-      (*diag) (\"unhandled basetype %d.\\n\", typeptr->base);\n+      diag (pos, \"unhandled basetype %d.\\n\", typeptr->base);\n       exit (1);\n     }\n }\n@@ -1543,7 +1594,7 @@ complete_base_type (typeinfo *typeptr, char *buf, int *bufi)\n       memcpy (&buf[*bufi], \"if\", 2);\n       break;\n     default:\n-      (*diag) (\"unhandled basetype %d.\\n\", typeptr->base);\n+      diag (pos, \"unhandled basetype %d.\\n\", typeptr->base);\n       exit (1);\n     }\n \n@@ -1664,20 +1715,20 @@ parse_prototype (prototype *protoptr)\n   int success = match_type (ret_type, VOID_OK);\n   if (!success)\n     {\n-      (*diag) (\"missing or badly formed return type at column %d.\\n\",\n-\t       oldpos + 1);\n+      diag (oldpos, \"missing or badly formed return type.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n #ifdef DEBUG\n-  (*diag) (\"return type: isvoid = %d, isconst = %d, isvector = %d, \"\n-\t   \"issigned = %d, isunsigned = %d, isbool = %d, ispixel = %d, \"\n-\t   \"ispointer = %d, base = %d, restr = %d, val1 = \\\"%s\\\", \"\n-\t   \"val2 = \\\"%s\\\", pos = %d.\\n\",\n-\t   ret_type->isvoid, ret_type->isconst, ret_type->isvector,\n-\t   ret_type->issigned, ret_type->isunsigned, ret_type->isbool,\n-\t   ret_type->ispixel, ret_type->ispointer, ret_type->base,\n-\t   ret_type->restr, ret_type->val1, ret_type->val2, pos + 1);\n+  diag (0,\n+\t\"return type: isvoid = %d, isconst = %d, isvector = %d, \"\n+\t\"issigned = %d, isunsigned = %d, isbool = %d, ispixel = %d, \"\n+\t\"ispointer = %d, base = %d, restr = %d, val1 = \\\"%s\\\", \"\n+\t\"val2 = \\\"%s\\\", pos = %d.\\n\",\n+\tret_type->isvoid, ret_type->isconst, ret_type->isvector,\n+\tret_type->issigned, ret_type->isunsigned, ret_type->isbool,\n+\tret_type->ispixel, ret_type->ispointer, ret_type->base,\n+\tret_type->restr, ret_type->val1, ret_type->val2, pos + 1);\n #endif\n \n   /* Get the bif name.  */\n@@ -1686,12 +1737,12 @@ parse_prototype (prototype *protoptr)\n   *bifname = match_identifier ();\n   if (!*bifname)\n     {\n-      (*diag) (\"missing function name at column %d.\\n\", oldpos + 1);\n+      diag (oldpos, \"missing function name.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n #ifdef DEBUG\n-  (*diag) (\"function name is '%s'.\\n\", *bifname);\n+  diag (0, \"function name is '%s'.\\n\", *bifname);\n #endif\n \n   /* Process arguments.  */\n@@ -1702,14 +1753,14 @@ parse_prototype (prototype *protoptr)\n   consume_whitespace ();\n   if (linebuf[pos] != ';')\n     {\n-      (*diag) (\"missing semicolon at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing semicolon.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n   consume_whitespace ();\n   if (linebuf[pos] != '\\n')\n     {\n-      (*diag) (\"garbage at end of line at column %d.\\n\", pos + 1);\n+      diag (pos, \"garbage at end of line.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1729,7 +1780,7 @@ parse_bif_entry (void)\n   /* Allocate an entry in the bif table.  */\n   if (num_bifs >= MAXBIFS - 1)\n     {\n-      (*diag) (\"too many built-in functions.\\n\");\n+      diag (pos, \"too many built-in functions.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1742,7 +1793,7 @@ parse_bif_entry (void)\n   char *token = match_identifier ();\n   if (!token)\n     {\n-      (*diag) (\"malformed entry at column %d\\n\", oldpos + 1);\n+      diag (oldpos, \"malformed entry.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1769,7 +1820,7 @@ parse_bif_entry (void)\n   /* Now process line 2.  First up is the builtin id.  */\n   if (!advance_line (bif_file))\n     {\n-      (*diag) (\"unexpected EOF.\\n\");\n+      diag (pos, \"unexpected EOF.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1779,19 +1830,18 @@ parse_bif_entry (void)\n   bifs[curr_bif].idname = match_identifier ();\n   if (!bifs[curr_bif].idname)\n     {\n-      (*diag) (\"missing builtin id at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing builtin id.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n #ifdef DEBUG\n-  (*diag) (\"ID name is '%s'.\\n\", bifs[curr_bif].idname);\n+  diag (0, \"ID name is '%s'.\\n\", bifs[curr_bif].idname);\n #endif\n \n   /* Save the ID in a lookup structure.  */\n   if (!rbt_insert (&bif_rbt, bifs[curr_bif].idname))\n     {\n-      (*diag) (\"duplicate function ID '%s' at column %d.\\n\",\n-\t       bifs[curr_bif].idname, oldpos + 1);\n+      diag (oldpos, \"duplicate function ID '%s'.\\n\", bifs[curr_bif].idname);\n       return PC_PARSEFAIL;\n     }\n \n@@ -1804,7 +1854,7 @@ parse_bif_entry (void)\n \n   if (!rbt_insert (&bifo_rbt, buf))\n     {\n-      (*diag) (\"internal error inserting '%s' in bifo_rbt\\n\", buf);\n+      diag (pos, \"internal error inserting '%s' in bifo_rbt\\n\", buf);\n       return PC_PARSEFAIL;\n     }\n \n@@ -1813,12 +1863,12 @@ parse_bif_entry (void)\n   bifs[curr_bif].patname = match_identifier ();\n   if (!bifs[curr_bif].patname)\n     {\n-      (*diag) (\"missing pattern name at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing pattern name.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n #ifdef DEBUG\n-  (*diag) (\"pattern name is '%s'.\\n\", bifs[curr_bif].patname);\n+  diag (0, \"pattern name is '%s'.\\n\", bifs[curr_bif].patname);\n #endif\n \n   /* Process attributes.  */\n@@ -1836,31 +1886,31 @@ parse_bif_stanza (void)\n \n   if (linebuf[pos] != '[')\n     {\n-      (*diag) (\"ill-formed stanza header at column %d.\\n\", pos + 1);\n+      diag (pos, \"ill-formed stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n \n   const char *stanza_name = match_to_right_bracket ();\n   if (!stanza_name)\n     {\n-      (*diag) (\"no expression found in stanza header.\\n\");\n+      diag (pos, \"no expression found in stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n   curr_bif_stanza = stanza_name_to_stanza (stanza_name);\n \n   if (linebuf[pos] != ']')\n     {\n-      (*diag) (\"ill-formed stanza header at column %d.\\n\", pos + 1);\n+      diag (pos, \"ill-formed stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n \n   consume_whitespace ();\n   if (linebuf[pos] != '\\n' && pos != LINELEN - 1)\n     {\n-      (*diag) (\"garbage after stanza header.\\n\");\n+      diag (pos, \"garbage after stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1927,7 +1977,7 @@ parse_ovld_entry (void)\n   /* Allocate an entry in the overload table.  */\n   if (num_ovlds >= MAXOVLDS - 1)\n     {\n-      (*diag) (\"too many overloads.\\n\");\n+      diag (pos, \"too many overloads.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -1948,7 +1998,7 @@ parse_ovld_entry (void)\n      optional overload id.  */\n   if (!advance_line (ovld_file))\n     {\n-      (*diag) (\"unexpected EOF.\\n\");\n+      diag (0, \"unexpected EOF.\\n\");\n       return PC_EOFILE;\n     }\n \n@@ -1960,18 +2010,18 @@ parse_ovld_entry (void)\n   ovlds[curr_ovld].ovld_id_name = id;\n   if (!id)\n     {\n-      (*diag) (\"missing overload id at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing overload id.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n #ifdef DEBUG\n-  (*diag) (\"ID name is '%s'.\\n\", id);\n+  diag (pos, \"ID name is '%s'.\\n\", id);\n #endif\n \n   /* The builtin id has to match one from the bif file.  */\n   if (!rbt_find (&bif_rbt, id))\n     {\n-      (*diag) (\"builtin ID '%s' not found in bif file.\\n\", id);\n+      diag (pos, \"builtin ID '%s' not found in bif file.\\n\", id);\n       return PC_PARSEFAIL;\n     }\n \n@@ -1989,13 +2039,13 @@ parse_ovld_entry (void)\n  /* Save the overload ID in a lookup structure.  */\n   if (!rbt_insert (&ovld_rbt, id))\n     {\n-      (*diag) (\"duplicate overload ID '%s' at column %d.\\n\", id, oldpos + 1);\n+      diag (oldpos, \"duplicate overload ID '%s'.\\n\", id);\n       return PC_PARSEFAIL;\n     }\n \n   if (linebuf[pos] != '\\n')\n     {\n-      (*diag) (\"garbage at end of line at column %d.\\n\", pos + 1);\n+      diag (pos, \"garbage at end of line.\\n\");\n       return PC_PARSEFAIL;\n     }\n   return PC_OK;\n@@ -2012,23 +2062,23 @@ parse_ovld_stanza (void)\n \n   if (linebuf[pos] != '[')\n     {\n-      (*diag) (\"ill-formed stanza header at column %d.\\n\", pos + 1);\n+      diag (pos, \"ill-formed stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n \n   char *stanza_name = match_identifier ();\n   if (!stanza_name)\n     {\n-      (*diag) (\"no identifier found in stanza header.\\n\");\n+      diag (pos, \"no identifier found in stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n   /* Add the identifier to a table and set the number to be recorded\n      with subsequent overload entries.  */\n   if (num_ovld_stanzas >= MAXOVLDSTANZAS)\n     {\n-      (*diag) (\"too many stanza headers.\\n\");\n+      diag (pos, \"too many stanza headers.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -2039,7 +2089,7 @@ parse_ovld_stanza (void)\n   consume_whitespace ();\n   if (linebuf[pos] != ',')\n     {\n-      (*diag) (\"missing comma at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing comma.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n@@ -2048,14 +2098,14 @@ parse_ovld_stanza (void)\n   stanza->extern_name = match_identifier ();\n   if (!stanza->extern_name)\n     {\n-      (*diag) (\"missing external name at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing external name.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n   consume_whitespace ();\n   if (linebuf[pos] != ',')\n     {\n-      (*diag) (\"missing comma at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing comma.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n@@ -2064,7 +2114,7 @@ parse_ovld_stanza (void)\n   stanza->intern_name = match_identifier ();\n   if (!stanza->intern_name)\n     {\n-      (*diag) (\"missing internal name at column %d.\\n\", pos + 1);\n+      diag (pos, \"missing internal name.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -2076,7 +2126,7 @@ parse_ovld_stanza (void)\n       stanza->ifdef = match_identifier ();\n       if (!stanza->ifdef)\n \t{\n-\t  (*diag) (\"missing ifdef token at column %d.\\n\", pos + 1);\n+\t  diag (pos, \"missing ifdef token.\\n\");\n \t  return PC_PARSEFAIL;\n \t}\n       consume_whitespace ();\n@@ -2086,15 +2136,15 @@ parse_ovld_stanza (void)\n \n   if (linebuf[pos] != ']')\n     {\n-      (*diag) (\"ill-formed stanza header at column %d.\\n\", pos + 1);\n+      diag (pos, \"ill-formed stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n   safe_inc_pos ();\n \n   consume_whitespace ();\n   if (linebuf[pos] != '\\n' && pos != LINELEN - 1)\n     {\n-      (*diag) (\"garbage after stanza header.\\n\");\n+      diag (pos, \"garbage after stanza header.\\n\");\n       return PC_PARSEFAIL;\n     }\n \n@@ -2943,6 +2993,10 @@ main (int argc, const char **argv)\n       exit (1);\n     }\n \n+  /* Allocate some buffers.  */\n+  for (int i = 0; i < MAXLINES; i++)\n+    lines[i] = (char *) malloc (LINELEN);\n+\n   /* Initialize the balanced trees containing built-in function ids,\n      overload function ids, and function type declaration ids.  */\n   rbt_new (&bif_rbt);"}]}