{"sha": "efb7b456501344ef0670c15f35e8945906ef63bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiN2I0NTY1MDEzNDRlZjA2NzBjMTVmMzVlODk0NTkwNmVmNjNiYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-17T17:34:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-17T17:34:38Z"}, "message": "forward_list.h (forward_list<>::erase_after): Return an iterator.\n\n2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (forward_list<>::erase_after): Return\n\tan iterator.\n\t(_M_erase_after): Return _Fwd_list_node_base*.\n\t* include/bits/forward_list.tcc: Likewise.\n\t* include/debug/forward_list: Likewise.\n\t* testsuite/23_containers/forward_list/modifiers/3.cc: Update\n\tand extend.\n\t* testsuite/util/exception/safety.h (erase_base<forward_list<>>):\n\tAdjust.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r165590", "tree": {"sha": "bc3c243d574749be76c0cb946fdb9bb38aae145f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc3c243d574749be76c0cb946fdb9bb38aae145f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb7b456501344ef0670c15f35e8945906ef63bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7b456501344ef0670c15f35e8945906ef63bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb7b456501344ef0670c15f35e8945906ef63bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7b456501344ef0670c15f35e8945906ef63bb/comments", "author": null, "committer": null, "parents": [{"sha": "abd26bfbf3434e296f7dd412557f925e7ac512c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd26bfbf3434e296f7dd412557f925e7ac512c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd26bfbf3434e296f7dd412557f925e7ac512c5"}], "stats": {"total": 124, "additions": 81, "deletions": 43}, "files": [{"sha": "66bb84b17d6d424169aecffeb2b0269df416a593", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,3 +1,23 @@\n+2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (forward_list<>::erase_after): Return\n+\tan iterator.\n+\t(_M_erase_after): Return _Fwd_list_node_base*.\n+\t* include/bits/forward_list.tcc: Likewise.\n+\t* include/debug/forward_list: Likewise.\n+\t* testsuite/23_containers/forward_list/modifiers/3.cc: Update\n+\tand extend.\n+\t* testsuite/util/exception/safety.h (erase_base<forward_list<>>):\n+\tAdjust.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/43554"}, {"sha": "2b7ec70091fde593ec2f40c9d06af63da1f22975", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -364,10 +364,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_put_node(_Node* __p)\n       { _M_get_Node_allocator().deallocate(__p, 1); }\n \n-      void\n+      _Fwd_list_node_base*\n       _M_erase_after(_Fwd_list_node_base* __pos);\n \n-      void\n+      _Fwd_list_node_base*\n       _M_erase_after(_Fwd_list_node_base* __pos, \n                      _Fwd_list_node_base* __last);\n     };\n@@ -924,6 +924,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  @brief  Removes the element pointed to by the iterator following\n        *          @c pos.\n        *  @param  pos  Iterator pointing before element to be erased.\n+       *  @return  An iterator pointing to the element following the one\n+       *           that was erased, or end() if no such element exists.\n        *\n        *  This function will erase the element at the given position and\n        *  thus shorten the %forward_list by one.\n@@ -935,16 +937,18 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  is itself a pointer, the pointed-to memory is not touched in\n        *  any way.  Managing the pointer is the user's responsibility.\n        */\n-      void\n+      iterator\n       erase_after(const_iterator __pos)\n-      { this->_M_erase_after(const_cast<_Node_base*>(__pos._M_node)); }\n+      { return iterator(this->_M_erase_after(const_cast<_Node_base*>\n+\t\t\t\t\t     (__pos._M_node))); }\n \n       /**\n        *  @brief  Remove a range of elements.\n        *  @param  pos  Iterator pointing before the first element to be\n        *               erased.\n        *  @param  last  Iterator pointing to one past the last element to be\n        *                erased.\n+       *  @return  @last.\n        *\n        *  This function will erase the elements in the range @a\n        *  (pos,last) and shorten the %forward_list accordingly.\n@@ -956,10 +960,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  pointed-to memory is not touched in any way.  Managing the pointer\n        *  is the user's responsibility.\n        */\n-      void\n+      iterator\n       erase_after(const_iterator __pos, const_iterator __last)\n-      { this->_M_erase_after(const_cast<_Node_base*>(__pos._M_node),\n-\t\t\t     const_cast<_Node_base*>(__last._M_node)); }\n+      { return iterator(this->_M_erase_after(const_cast<_Node_base*>\n+\t\t\t\t\t     (__pos._M_node),\n+\t\t\t\t\t     const_cast<_Node_base*>\n+\t\t\t\t\t     (__last._M_node))); }\n \n       /**\n        *  @brief  Swaps data with another %forward_list."}, {"sha": "264bf67dd64b6bde14f1bb833bc7a0691ff8e4df", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -63,18 +63,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       }\n \n   template<typename _Tp, typename _Alloc>\n-    void\n+    _Fwd_list_node_base*\n     _Fwd_list_base<_Tp, _Alloc>::\n     _M_erase_after(_Fwd_list_node_base* __pos)\n     {\n       _Node* __curr = static_cast<_Node*>(__pos->_M_next);\n       __pos->_M_next = __curr->_M_next;\n       _M_get_Node_allocator().destroy(__curr);\n       _M_put_node(__curr);\n+      return __pos->_M_next;\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    void\n+    _Fwd_list_node_base*\n     _Fwd_list_base<_Tp, _Alloc>::\n     _M_erase_after(_Fwd_list_node_base* __pos, \n                    _Fwd_list_node_base* __last)\n@@ -88,8 +89,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n           _M_put_node(__temp);\n         }\n       __pos->_M_next = __last;\n+      return __last;\n     }\n-  \n+\n   // Called by the range constructor to implement [23.1.1]/9\n   template<typename _Tp, typename _Alloc>\n     template<typename _InputIterator>"}, {"sha": "6869269eacb1fc3989347a2fd33279bfc02264c3", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -288,26 +288,27 @@ namespace __debug\n \treturn iterator(_Base::insert_after(__pos.base(), __il), this);\n       }\n \n-      void\n+      iterator\n       erase_after(const_iterator __pos)\n       {\n \t__glibcxx_check_erase_after(__pos);\n \tconst_iterator __victim = __pos;\n \t++__victim;\n \t__victim._M_invalidate();\n-\t_Base::erase_after(__pos.base());\n+\treturn iterator(_Base::erase_after(__pos.base()), this);\n       }\n \n-      void\n+      iterator\n       erase_after(const_iterator __pos, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range_after(__pos, __last);\n \tfor (const_iterator __victim = std::next(__pos); __victim != __last; )\n \t  {\n-\t    const_iterator __old = __victim++;\n+\t    const_iterator __old = __victim;\n+\t    ++__victim;\n \t    __old._M_invalidate();\n \t  }\n-\t_Base::erase_after(__pos.base(), __last.base());\n+\treturn iterator(_Base::erase_after(__pos.base(), __last.base()), this);\n       }\n \n       void"}, {"sha": "cade58f7dac43a921a41f39085a41d28bc22bb5f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/3.cc", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,26 +22,27 @@\n #include <forward_list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // This test verifies the following:\n //   cbegin\n //   erase_after one iterator\n //   pos is useable and points to current element\n void\n test01()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   std::forward_list<int> fl({0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n   std::forward_list<int>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n \n-  fl.erase_after(pos);\n+  std::forward_list<int>::iterator pos2 = fl.erase_after(pos);\n \n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n   ++pos;\n-  VERIFY(*pos == 3);\n+  VERIFY( *pos == 3 );\n+  VERIFY( pos == pos2 );\n }\n \n // This test verifies the following:\n@@ -51,33 +52,40 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   std::forward_list<int> fl({0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n   std::forward_list<int>::const_iterator pos = fl.cbegin();\n   ++pos;\n-  VERIFY(*pos == 1);\n+  VERIFY( *pos == 1 );\n \n   std::forward_list<int>::iterator stop = fl.begin();\n   ++stop;\n   ++stop;\n   ++stop;\n   ++stop;\n-  VERIFY(*stop == 4);\n+  VERIFY( *stop == 4 );\n \n-  fl.erase_after(pos, stop);\n+  std::forward_list<int>::iterator pos2 = fl.erase_after(pos, stop);\n \n-  VERIFY(*pos == 1);\n+  VERIFY( pos2 == stop );\n+  VERIFY( *pos == 1 );\n   ++pos;\n-  VERIFY(*pos == 4);\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 8);\n-\n-  fl.erase_after(pos, fl.end());\n-  VERIFY(++pos == fl.end());\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 3);\n-\n-  fl.erase_after(fl.before_begin(), pos);\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 0);\n-  VERIFY(fl.empty());\n+  VERIFY( *pos == 4 );\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 8 );\n+\n+  std::forward_list<int>::iterator pos3\n+    = fl.erase_after(pos, fl.end());\n+  VERIFY( pos3 == fl.end() );\n+  VERIFY( ++pos == fl.end() );\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 3 );\n+\n+  std::forward_list<int>::iterator pos4\n+    = fl.erase_after(fl.before_begin(), pos);\n+  VERIFY( pos4 == pos );\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 0 );\n+  VERIFY( fl.empty() );\n }\n \n int"}, {"sha": "fe426e0a8031e3971f20e98d935b4e7e53df318d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "d4cd3d71f3cc552145e760993201f1543e9f8a17", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "ac07af20d6c60e17072f2ea408cd9f20b339d04a", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "06016c792cecb908eb1035dcc8d4016f440b165b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "cab31e2285412140ad3a92a009e25a7419fd2f58", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7b456501344ef0670c15f35e8945906ef63bb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=efb7b456501344ef0670c15f35e8945906ef63bb", "patch": "@@ -265,10 +265,11 @@ namespace __gnu_test\n       {\n \ttypedef std::forward_list<_Tp1, _Tp2> \t\tcontainer_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator \tconst_iterator;\n+\ttypedef typename container_type::const_iterator const_iterator;\n \n-\tvoid (container_type::* _F_erase_point)(const_iterator);\n-\tvoid (container_type::* _F_erase_range)(const_iterator, const_iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase_after),"}]}