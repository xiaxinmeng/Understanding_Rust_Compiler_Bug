{"sha": "83a5c149a6a19a98d0e5e46d43927549f210a14e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNWMxNDlhNmExOWE5OGQwZTVlNDZkNDM5Mjc1NDlmMjEwYTE0ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-11T07:08:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-11T07:08:13Z"}, "message": "runtime: Handle FFI promoting result types.\n\nFrom-SVN: r184123", "tree": {"sha": "31c8010941b678ef4c108a0a4499982d3d32d72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31c8010941b678ef4c108a0a4499982d3d32d72e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a5c149a6a19a98d0e5e46d43927549f210a14e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a5c149a6a19a98d0e5e46d43927549f210a14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a5c149a6a19a98d0e5e46d43927549f210a14e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a5c149a6a19a98d0e5e46d43927549f210a14e/comments", "author": null, "committer": null, "parents": [{"sha": "edb7412e0ec4bfbc8e054d50b52f047ba70fd66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb7412e0ec4bfbc8e054d50b52f047ba70fd66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb7412e0ec4bfbc8e054d50b52f047ba70fd66d"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "a818dba438ee693f35b4a0a15b58d81a057a66d9", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a5c149a6a19a98d0e5e46d43927549f210a14e/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a5c149a6a19a98d0e5e46d43927549f210a14e/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=83a5c149a6a19a98d0e5e46d43927549f210a14e", "patch": "@@ -5,6 +5,7 @@\n    license that can be found in the LICENSE file.  */\n \n #include <stdio.h>\n+#include <stdint.h>\n #include <stdlib.h>\n \n #include \"ffi.h\"\n@@ -326,6 +327,28 @@ go_results_size (const struct __go_func_type *func)\n \n   types = (const struct __go_type_descriptor **) func->__out.__values;\n \n+  /* A single integer return value is always promoted to a full\n+     word.  */\n+  if (count == 1)\n+    {\n+      switch (types[0]->__code & GO_CODE_MASK)\n+\t{\n+\tcase GO_BOOL:\n+\tcase GO_INT8:\n+\tcase GO_INT16:\n+\tcase GO_INT32:\n+\tcase GO_UINT8:\n+\tcase GO_UINT16:\n+\tcase GO_UINT32:\n+\tcase GO_INT:\n+\tcase GO_UINT:\n+\t  return sizeof (ffi_arg);\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n   off = 0;\n   maxalign = 0;\n   for (i = 0; i < count; ++i)\n@@ -362,6 +385,81 @@ go_set_results (const struct __go_func_type *func, unsigned char *call_result,\n \n   types = (const struct __go_type_descriptor **) func->__out.__values;\n \n+  /* A single integer return value is always promoted to a full\n+     word.  */\n+  if (count == 1)\n+    {\n+      switch (types[0]->__code & GO_CODE_MASK)\n+\t{\n+\tcase GO_BOOL:\n+\tcase GO_INT8:\n+\tcase GO_INT16:\n+\tcase GO_INT32:\n+\tcase GO_UINT8:\n+\tcase GO_UINT16:\n+\tcase GO_UINT32:\n+\tcase GO_INT:\n+\tcase GO_UINT:\n+\t  {\n+\t    union\n+\t    {\n+\t      unsigned char buf[sizeof (ffi_arg)];\n+\t      ffi_arg v;\n+\t    } u;\n+\t    ffi_arg v;\n+\n+\t    __builtin_memcpy (&u.buf, call_result, sizeof (ffi_arg));\n+\t    v = u.v;\n+\n+\t    switch (types[0]->__size)\n+\t      {\n+\t      case 1:\n+\t\t{\n+\t\t  uint8_t b;\n+\n+\t\t  b = (uint8_t) v;\n+\t\t  __builtin_memcpy (results[0], &b, 1);\n+\t\t}\n+\t\tbreak;\n+\n+\t      case 2:\n+\t\t{\n+\t\t  uint16_t s;\n+\n+\t\t  s = (uint16_t) v;\n+\t\t  __builtin_memcpy (results[0], &s, 2);\n+\t\t}\n+\t\tbreak;\n+\n+\t      case 4:\n+\t\t{\n+\t\t  uint32_t w;\n+\n+\t\t  w = (uint32_t) v;\n+\t\t  __builtin_memcpy (results[0], &w, 4);\n+\t\t}\n+\t\tbreak;\n+\n+\t      case 8:\n+\t\t{\n+\t\t  uint64_t d;\n+\n+\t\t  d = (uint64_t) v;\n+\t\t  __builtin_memcpy (results[0], &d, 8);\n+\t\t}\n+\t\tbreak;\n+\n+\t      default:\n+\t\tabort ();\n+\t      }\n+\t  }\n+\t  return;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n   off = 0;\n   for (i = 0; i < count; ++i)\n     {\n@@ -388,7 +486,7 @@ reflect_call (const struct __go_func_type *func_type, const void *func_addr,\n   ffi_cif cif;\n   unsigned char *call_result;\n \n-  __go_assert (func_type->__common.__code == GO_FUNC);\n+  __go_assert ((func_type->__common.__code & GO_CODE_MASK) == GO_FUNC);\n   go_func_to_cif (func_type, is_interface, is_method, &cif);\n \n   call_result = (unsigned char *) malloc (go_results_size (func_type));"}]}