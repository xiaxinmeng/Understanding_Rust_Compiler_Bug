{"sha": "696a2ca15ffb199bf85594121380dc0d7399e0c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2YTJjYTE1ZmZiMTk5YmY4NTU5NDEyMTM4MGRjMGQ3Mzk5ZTBjOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-01-18T03:51:05Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-01-18T03:51:05Z"}, "message": "Fix ICE with long double after float HFA.\n\nPR target/19357\n* config/ia64/ia64.md (movxf): Handle general register source.  Adjust\ncomment to document why.\n* gcc.c-torture/compile/pr19357.c: New test.\n\nFrom-SVN: r93809", "tree": {"sha": "e5493efa4813b7695d995d6f889ede488ee49aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5493efa4813b7695d995d6f889ede488ee49aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696a2ca15ffb199bf85594121380dc0d7399e0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696a2ca15ffb199bf85594121380dc0d7399e0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696a2ca15ffb199bf85594121380dc0d7399e0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696a2ca15ffb199bf85594121380dc0d7399e0c9/comments", "author": null, "committer": null, "parents": [{"sha": "115a33c2196266e0462e516fac5bc7ff21276d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/115a33c2196266e0462e516fac5bc7ff21276d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/115a33c2196266e0462e516fac5bc7ff21276d13"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "ec637b52c0de3b2967a665bffd1ad4dc0562af7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=696a2ca15ffb199bf85594121380dc0d7399e0c9", "patch": "@@ -1,3 +1,9 @@\n+2005-01-17  James E Wilson  <wilson@specifixinc.com>\n+\n+\tPR target/19357\n+\t* config/ia64/ia64.md (movxf): Handle general register source.  Adjust\n+\tcomment to document why.\n+\n 2005-01-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sse.md (smaxv4sf3_finite, sse_vmsmaxv4sf3_finite,"}, {"sha": "b22f49e255b01a4e60aab527cd4e2be161f6ad24", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=696a2ca15ffb199bf85594121380dc0d7399e0c9", "patch": "@@ -685,10 +685,12 @@\n   if (GET_CODE (op0) == SUBREG)\n     op0 = SUBREG_REG (op0);\n \n-  /* We must support XFmode loads into general registers for stdarg/vararg\n-     and unprototyped calls.  We split them into DImode loads for convenience.\n-     We don't need XFmode stores from general regs, because a stdarg/vararg\n-     routine does a block store to memory of unnamed arguments.  */\n+  /* We must support XFmode loads into general registers for stdarg/vararg,\n+     unprototyped calls, and a rare case where a long double is passed as\n+     an argument after a float HFA fills the FP registers.  We split them into\n+     DImode loads for convenience.  We also need to support XFmode stores\n+     for the last case.  This case does not happen for stdarg/vararg routines,\n+     because we do a block store to memory of unnamed arguments.  */\n \n   if (GET_CODE (op0) == REG && GR_REGNO_P (REGNO (op0)))\n     {\n@@ -708,7 +710,6 @@\n \t  if (GET_CODE (op1) == SUBREG)\n \t    op1 = SUBREG_REG (op1);\n \t  else\n-\t    /* ??? Maybe we should make a SUBREG here?  */\n \t    op1 = gen_rtx_REG (TImode, REGNO (op1));\n \n \t  emit_move_insn (gen_rtx_REG (TImode, REGNO (op0)), op1);\n@@ -743,6 +744,40 @@\n       abort ();\n     }\n \n+  if (GET_CODE (operands[1]) == REG && GR_REGNO_P (REGNO (operands[1])))\n+    {\n+      /* We're hoping to transform everything that deals with XFmode\n+\t quantities and GR registers early in the compiler.  */\n+      if (no_new_pseudos)\n+\tabort ();\n+\n+      /* Op0 can't be a GR_REG here, as that case is handled above.\n+\t If op0 is a register, then we spill op1, so that we now have a\n+\t MEM operand.  This requires creating an XFmode subreg of a TImode reg\n+\t to force the spill.  */\n+      if (register_operand (operands[0], XFmode))\n+\t{\n+\t  rtx op1 = gen_rtx_REG (TImode, REGNO (operands[1]));\n+\t  op1 = gen_rtx_SUBREG (XFmode, op1, 0);\n+\t  operands[1] = spill_xfmode_operand (op1, 0);\n+\t}\n+\n+      else if (GET_CODE (operands[0]) == MEM)\n+\t{\n+\t  rtx in[2];\n+\n+\t  in[WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (operands[1]));\n+\t  in[!WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (operands[1]) + 1);\n+\n+\t  emit_move_insn (adjust_address (operands[0], DImode, 0), in[0]);\n+\t  emit_move_insn (adjust_address (operands[0], DImode, 8), in[1]);\n+\t  DONE;\n+\t}\n+\n+      else\n+\tabort ();\n+    }\n+\n   if (! reload_in_progress && ! reload_completed)\n     {\n       operands[1] = spill_xfmode_operand (operands[1], 0);"}, {"sha": "5a5a3b83f91dbbea9d124a56b3575bf896a1808b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=696a2ca15ffb199bf85594121380dc0d7399e0c9", "patch": "@@ -1,3 +1,8 @@\n+2005-01-17  James E. Wilson  <wilson@specifixinc.com>\n+\n+\tPR target/19357\n+\t* gcc.c-torture/compile/pr19357.c: New test.\n+\n 2005-01-17  Ian Lance Taylor  <ian@airs.com>\n \n \tPR c/5675"}, {"sha": "2dc26d786280edeff6b11784138273351c8f36cb", "filename": "gcc/testsuite/gcc.c-torture/compile/pr19357.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19357.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696a2ca15ffb199bf85594121380dc0d7399e0c9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19357.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19357.c?ref=696a2ca15ffb199bf85594121380dc0d7399e0c9", "patch": "@@ -0,0 +1,8 @@\n+/* This generated an ICE for an ia64-linux target.  */\n+struct f {\n+  float f[8];\n+};\n+\n+long double ftest(struct f arg1, long double arg2) {\n+  return arg2;\n+}"}]}