{"sha": "1c31f6c896e9ff74e14a491775f154aa3a825ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzMWY2Yzg5NmU5ZmY3NGUxNGE0OTE3NzVmMTU0YWEzYTgyNWVlNg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2018-11-29T23:11:59Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2018-11-29T23:11:59Z"}, "message": "Allow changing the fentry section per file and per function\n\nWhen dynamically patching in/out instrumentation it can be useful\nto handle different classes of functions differently. Add support\nfor changing the fentry section name on the command line\nor as a function attributes. This allows to mark functions differently,\nand handle them differently in dynamic patching.\n\ngcc/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* config/i386/i386.c (current_fentry_section): Add.\n\t(x86_function_profiler): Handle fentry section.\n\t(ix86_attribute_table): Add fentry section.\n\t* config/i386/i386.opt: Add -mfentry-section.\n\t* doc/extend.texi: Document fentry_section attribute.\n\t* doc/invoke.texi: Document -mfentry-section.\n\ngcc/testsuite/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* gcc.target/i386/fentryname2.c: New test.\n\t* gcc.target/i386/fentryname3.c: New test.\n\nFrom-SVN: r266654", "tree": {"sha": "63a5b6409a3193e6e16f6854a1a4f91d929f5cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a5b6409a3193e6e16f6854a1a4f91d929f5cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c31f6c896e9ff74e14a491775f154aa3a825ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31f6c896e9ff74e14a491775f154aa3a825ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c31f6c896e9ff74e14a491775f154aa3a825ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31f6c896e9ff74e14a491775f154aa3a825ee6/comments", "author": null, "committer": null, "parents": [{"sha": "d7bf0bd696eaa7611ca97285347f8e3e604feefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bf0bd696eaa7611ca97285347f8e3e604feefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7bf0bd696eaa7611ca97285347f8e3e604feefd"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "76db5d562192d18b8b67378bc3d252b00a81fd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -1,3 +1,12 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* config/i386/i386.c (current_fentry_section): Add.\n+\t(x86_function_profiler): Handle fentry section.\n+\t(ix86_attribute_table): Add fentry section.\n+\t* config/i386/i386.opt: Add -mfentry-section.\n+\t* doc/extend.texi: Document fentry_section attribute.\n+\t* doc/invoke.texi: Document -mfentry-section.\n+\n 2018-11-29  Andi Kleen  <ak@linux.intel.com>\n \n \t* config/i386/i386.c (x86_print_call_or_nop): Handle nop name."}, {"sha": "653d7204d5a6b8c6e0dd0e9333c71eef3888dbd6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -41291,6 +41291,17 @@ current_fentry_name (const char **name)\n   return true;\n }\n \n+static bool\n+current_fentry_section (const char **name)\n+{\n+  tree attr = lookup_attribute (\"fentry_section\",\n+\t\t\t\tDECL_ATTRIBUTES (current_function_decl));\n+  if (!attr)\n+    return false;\n+  *name = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n+  return true;\n+}\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n void\n@@ -41336,9 +41347,18 @@ x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n       x86_print_call_or_nop (file, mcount_name);\n     }\n \n-  if (flag_record_mcount)\n+  if (flag_record_mcount\n+\t|| lookup_attribute (\"fentry_section\",\n+                                DECL_ATTRIBUTES (current_function_decl)))\n     {\n-      fprintf (file, \"\\t.section __mcount_loc, \\\"a\\\",@progbits\\n\");\n+      const char *sname = \"__mcount_loc\";\n+\n+      if (current_fentry_section (&sname))\n+\t;\n+      else if (fentry_section)\n+\tsname = fentry_section;\n+\n+      fprintf (file, \"\\t.section %s, \\\"a\\\",@progbits\\n\", sname);\n       fprintf (file, \"\\t.%s 1b\\n\", TARGET_64BIT ? \"quad\" : \"long\");\n       fprintf (file, \"\\t.previous\\n\");\n     }\n@@ -45129,7 +45149,7 @@ ix86_expand_round_sse4 (rtx op0, rtx op1)\n   emit_move_insn (op0, res);\n }\n \n-/* Handle fentry_name attribute.  */\n+/* Handle fentry_name / fentry_section attribute.  */\n \n static tree\n ix86_handle_fentry_name (tree *node, tree name, tree args,\n@@ -45226,6 +45246,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     NULL, NULL },\n   { \"fentry_name\", 1, 1, true, false, false, false,\n     ix86_handle_fentry_name, NULL },\n+  { \"fentry_section\", 1, 1, true, false, false, false,\n+    ix86_handle_fentry_name, NULL },\n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };"}, {"sha": "b30b55b782630115d678930fa8347b9a3f17cc88", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -938,6 +938,10 @@ mfentry-name=\n Target RejectNegative Joined Var(fentry_name)\n Set name of __fentry__ symbol called at function entry.\n \n+mfentry-section=\n+Target RejectNegative Joined Var(fentry_section)\n+Set name of section to record mrecord-mcount calls.\n+\n mskip-rax-setup\n Target Report Var(flag_skip_rax_setup)\n Skip setting up RAX register when passing variable arguments."}, {"sha": "8c9e0fa544b2e6b10b6827ec2904559ff764cce6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -6033,6 +6033,12 @@ call on function entry when function instrumentation is enabled\n with @option{-pg -mfentry}. When @var{name} is nop then a 5 byte\n nop sequence is generated.\n \n+@item fentry_section(\"@var{name}\")\n+@cindex @code{fentry_section} function attribute, x86\n+On x86 targets, the @code{fentry_section} attribute sets the name\n+of the section to record function entry instrumentation calls in when\n+enabled with @option{-pg -mrecord-mcount}\n+\n @end table\n \n On the x86, the inliner does not inline a"}, {"sha": "3b6912ea1cca52a981376a5a256d02cb00aabef7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -1316,7 +1316,7 @@ See RS/6000 and PowerPC Options.\n -mcmodel=@var{code-model}  -mabi=@var{name}  -maddress-mode=@var{mode} @gol\n -m32  -m64  -mx32  -m16  -miamcu  -mlarge-data-threshold=@var{num} @gol\n -msse2avx  -mfentry  -mrecord-mcount  -mnop-mcount  -m8bit-idiv @gol\n--minstrument-return=@var{type} -mfentry-name=@var{name} @gol\n+-minstrument-return=@var{type} -mfentry-name=@var{name} -mfentry-section=@var{name} @gol\n -mavx256-split-unaligned-load  -mavx256-split-unaligned-store @gol\n -malign-data=@var{type}  -mstack-protector-guard=@var{guard} @gol\n -mstack-protector-guard-reg=@var{reg} @gol\n@@ -29095,6 +29095,10 @@ Generate a __return_loc section pointing to all return instrumentation code.\n @opindex mfentry-name\n Set name of __fentry__ symbol called at function entry for -pg -mfentry functions.\n \n+@item -mfentry-section=@var{name}\n+@opindex mfentry-section\n+Set name of section to record -mrecord-mcount calls (default __mcount_loc).\n+\n @item -mskip-rax-setup\n @itemx -mno-skip-rax-setup\n @opindex mskip-rax-setup"}, {"sha": "1855153f4ecc9525d72b3b768857a5f84d80668a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -1,3 +1,8 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gcc.target/i386/fentryname2.c: New test.\n+\t* gcc.target/i386/fentryname3.c: New test.\n+\n 2018-11-29  Andi Kleen  <ak@linux.intel.com>\n \n \t* gcc.target/i386/fentryname1.c: New test."}, {"sha": "7d102bfccbcd5183d8d982d8d77e1dc90fd7317a", "filename": "gcc/testsuite/gcc.target/i386/fentryname2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname2.c?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry -mrecord-mcount -mfentry-section=foo\" } */\n+/* { dg-final { scan-assembler \"section.*foo\" } } */\n+/* { dg-final { scan-assembler \"section.*bar\" } } */\n+\n+int func(int a)\n+{\n+  return a+1;\n+}\n+\n+__attribute__((fentry_section(\"bar\")))\n+int func2(int a)\n+{\n+  return a+1;\n+}"}, {"sha": "777f4e4b0ffbfd43736dacff38af079cfc308295", "filename": "gcc/testsuite/gcc.target/i386/fentryname3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31f6c896e9ff74e14a491775f154aa3a825ee6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffentryname3.c?ref=1c31f6c896e9ff74e14a491775f154aa3a825ee6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry\"  } */\n+/* { dg-final { scan-assembler \"section.*__entry_loc\" } } */\n+/* { dg-final { scan-assembler \"0x0f, 0x1f, 0x44, 0x00, 0x00\" } } */\n+/* { dg-final { scan-assembler-not \"__fentry__\" } } */\n+\n+__attribute__((fentry_name(\"nop\"), fentry_section(\"__entry_loc\")))\n+void foo(void)\n+{\n+}"}]}