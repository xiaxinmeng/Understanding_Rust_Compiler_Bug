{"sha": "7f8c1cd3675b0e30817d98e52740b918b4e970b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4YzFjZDM2NzViMGUzMDgxN2Q5OGU1Mjc0MGI5MThiNGU5NzBiMA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-10T09:01:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T09:01:33Z"}, "message": "[Ada] Minor reformatting\n\n2019-07-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* bindo-graphs.adb, bindo.adb, debug.adb, exp_ch6.adb,\n\tsem_ch10.adb, sem_ch13.adb, sem_ch3.adb, sem_ch4.adb,\n\tsem_ch6.adb, sem_ch7.adb, sem_res.adb, sem_spark.adb,\n\tsem_util.adb, warnsw.ads: Minor reformatting.\n\nFrom-SVN: r273335", "tree": {"sha": "c893e1819017c5d50981513e99833bb2cf9abc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c893e1819017c5d50981513e99833bb2cf9abc1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8c1cd3675b0e30817d98e52740b918b4e970b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8c1cd3675b0e30817d98e52740b918b4e970b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8c1cd3675b0e30817d98e52740b918b4e970b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8c1cd3675b0e30817d98e52740b918b4e970b0/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b6694b4e41d394df12d159c319be4b1326745ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6694b4e41d394df12d159c319be4b1326745ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6694b4e41d394df12d159c319be4b1326745ca"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "f3f7217f95bc82903d7f96b214a52cfa3006723b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -1,3 +1,10 @@\n+2019-07-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindo-graphs.adb, bindo.adb, debug.adb, exp_ch6.adb,\n+\tsem_ch10.adb, sem_ch13.adb, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch6.adb, sem_ch7.adb, sem_res.adb, sem_spark.adb,\n+\tsem_util.adb, warnsw.ads: Minor reformatting.\n+\n 2019-07-10  Joffrey Huguet  <huguet@adacore.com>\n \n \t* libgnat/a-strbou.ads, libgnat/a-strfix.ads,"}, {"sha": "d254b1c45f034193da14ae40b9eaab9e91601fb5", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -1180,11 +1180,11 @@ package body Bindo.Graphs is\n       --    * End vertices is the set of vertices that terminate a potential\n       --      cycle.\n       --\n-      --    * Deleted vertices is the set of vertices that have been expended\n+      --    * Deleted vertices is the set of vertices that have been expanded\n       --      during previous depth-first searches and should not be visited\n       --      for the rest of the algorithm.\n       --\n-      --    * Most_Significant_Edge is the current highest precedence edge on\n+      --    * Most_Significant_Edge is the current highest-precedence edge on\n       --      the path of the potential cycle.\n       --\n       --    * Invocation_Edge_Count is the number of invocation edges on the\n@@ -1233,11 +1233,11 @@ package body Bindo.Graphs is\n       --    * End_Vertices is the set of vertices that terminate a potential\n       --      cycle.\n       --\n-      --    * Deleted_Vertices is the set of vertices that have been expended\n+      --    * Deleted_Vertices is the set of vertices that have been expanded\n       --      during previous depth-first searches and should not be visited\n       --      for the rest of the algorithm.\n       --\n-      --    * Most_Significant_Edge is the current highest precedence edge on\n+      --    * Most_Significant_Edge is the current highest-precedence edge on\n       --      the path of the potential cycle.\n       --\n       --    * Invocation_Edge_Count is the number of invocation edges on the\n@@ -2341,7 +2341,7 @@ package body Bindo.Graphs is\n          elsif Cycle_Invs > Comp_Invs then\n             return Lower_Precedence;\n \n-         --  Prever a cycle with a higher path precedence\n+         --  Prefer a cycle with a higher path precedence\n \n          else\n             return\n@@ -2684,7 +2684,7 @@ package body Bindo.Graphs is\n          pragma Assert (Present (G));\n \n          --  The cycles of graph G are discovered using Tarjan's enumeration\n-         --  of the elementary circuits of a directed graph algorithm. Do not\n+         --  of the elementary circuits of a directed-graph algorithm. Do not\n          --  modify this code unless you intimately understand the algorithm.\n          --\n          --  The logic of the algorithm is split among the following routines:\n@@ -2698,7 +2698,7 @@ package body Bindo.Graphs is\n          --\n          --  The original algorithm has been significantly modified in order to\n          --\n-         --    * Accomodate the semantics of Elaborate_All and Elaborate_Body.\n+         --    * Accommodate the semantics of Elaborate_All and Elaborate_Body.\n          --\n          --    * Capture cycle paths as edges rather than vertices.\n          --\n@@ -2834,7 +2834,7 @@ package body Bindo.Graphs is\n          --  the \"complementary\" vertex resulted in a cycle.\n \n          Successor_Has_Cycle : Boolean;\n-         --  This flag is set when visiting at least once successor of the\n+         --  This flag is set when visiting at least one successor of the\n          --  current vertex resulted in a cycle.\n \n       begin\n@@ -2851,16 +2851,16 @@ package body Bindo.Graphs is\n          Has_Cycle := False;\n \n          --  Nothing to do when the limit on the number of saved cycles has\n-         --  been reached. This protects against a combinatorial explostion\n+         --  been reached. This protects against a combinatorial explosion\n          --  in components with Elaborate_All cycles.\n \n          if Cycle_Count >= Cycle_Limit then\n             return;\n \n          --  The vertex closes the circuit, thus resulting in a cycle. Save\n          --  the cycle for later diagnostics. The initial invocation of the\n-         --  routine always ignores the starting vertex to prevent a spurious\n-         --  self cycle.\n+         --  routine always ignores the starting vertex, to prevent a spurious\n+         --  self-cycle.\n \n          elsif not Is_Start_Vertex\n            and then LGV_Sets.Contains (End_Vertices, Vertex)\n@@ -3053,7 +3053,7 @@ package body Bindo.Graphs is\n          Visited_Set : LGV_Sets.Membership_Set := LGV_Sets.Nil;\n          --  The \"mark\" array of Tarjan's algorithm. Since the original visits\n          --  all vertices in increasing ordinal number 1 .. N, the array offers\n-         --  a one to one mapping between a vertex and its \"marked\" state. The\n+         --  a one-to-one mapping between a vertex and its \"marked\" state. The\n          --  modified version however visits vertices within components, where\n          --  their ordinals are not contiguous. Vertices are added to this set\n          --  and treated as \"marked\".\n@@ -3091,15 +3091,15 @@ package body Bindo.Graphs is\n                  Vertex               => Vertex,\n                  Elaborate_All_Active => Elaborate_All_Active);\n \n-            --  The modified version maintans two addition attributes while\n+            --  The modified version maintains two additional attributes while\n             --  performing the depth-first search:\n             --\n             --    * The most significant edge of the current potential cycle.\n             --\n             --    * The number of invocation edges encountered along the path\n             --      of the current potential cycle.\n             --\n-            --  Both attributes are used in the heuristic which determines the\n+            --  Both attributes are used in the heuristic that determines the\n             --  importance of cycles.\n \n             Find_Cycles_From_Vertex\n@@ -5243,7 +5243,7 @@ package body Bindo.Graphs is\n          pragma Assert (Present (G));\n          pragma Assert (Present (Comp));\n \n-         --  Nothing to do when switch -d_t (output cycle detection trace\n+         --  Nothing to do when switch -d_t (output cycle-detection trace\n          --  information) is not in effect.\n \n          if not Debug_Flag_Underscore_T then\n@@ -5279,7 +5279,7 @@ package body Bindo.Graphs is\n          pragma Assert (Present (G));\n          pragma Assert (Present (Cycle));\n \n-         --  Nothing to do when switch -d_t (output cycle detection trace\n+         --  Nothing to do when switch -d_t (output cycle-detection trace\n          --  information) is not in effect.\n \n          if not Debug_Flag_Underscore_T then\n@@ -5338,7 +5338,7 @@ package body Bindo.Graphs is\n          Succ : constant Library_Graph_Vertex_Id := Successor   (G, Edge);\n \n       begin\n-         --  Nothing to do when switch -d_t (output cycle detection trace\n+         --  Nothing to do when switch -d_t (output cycle-detection trace\n          --  information) is not in effect.\n \n          if not Debug_Flag_Underscore_T then\n@@ -5387,7 +5387,7 @@ package body Bindo.Graphs is\n          pragma Assert (Present (G));\n          pragma Assert (Present (Vertex));\n \n-         --  Nothing to do when switch -d_t (output cycle detection trace\n+         --  Nothing to do when switch -d_t (output cycle-detection trace\n          --  information) is not in effect.\n \n          if not Debug_Flag_Underscore_T then"}, {"sha": "678f0098b981186118137dfe8bb6c798d53b6485", "filename": "gcc/ada/bindo.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fbindo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fbindo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -322,9 +322,9 @@ package body Bindo is\n    --        In addition, GNATbind does not create an edge to the body of the\n    --        pragma argument.\n    --\n-   --  -d_t  Output cycle detection trace information\n+   --  -d_t  Output cycle-detection trace information\n    --\n-   --        GNATbind outputs trace information on cycle detection activities\n+   --        GNATbind outputs trace information on cycle-detection activities\n    --        to standard output.\n    --\n    --  -d_A  Output ALI invocation tables"}, {"sha": "a81de09b19cb7539b3bbe5b94a0fd0caf5568a00", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -368,7 +368,7 @@ package body Debug is\n    --  d_q\n    --  d_r\n    --  d_s\n-   --  d_t  Output cycle detection trace information\n+   --  d_t  Output cycle-detection trace information\n    --  d_u\n    --  d_v\n    --  d_w\n@@ -1150,7 +1150,7 @@ package body Debug is\n    --       elaboration order and no longer creates an implicit dependency on\n    --       the body of the argument.\n \n-   --  d_t  GNATBIND output trace information of cycle detection activities to\n+   --  d_t  GNATBIND output trace information of cycle-detection activities to\n    --       standard output.\n \n    --  d_A  GNATBIND output the contents of all ALI invocation-related tables"}, {"sha": "feeac7b02136df3014728c2f0a6453279f57ba7d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -2594,8 +2594,8 @@ package body Exp_Ch6 is\n       ----------------------------------\n \n       function Is_Class_Wide_Interface_Type (E : Entity_Id) return Boolean is\n-         Typ : Entity_Id := E;\n          DDT : Entity_Id;\n+         Typ : Entity_Id := E;\n \n       begin\n          if Has_Non_Limited_View (Typ) then"}, {"sha": "c5d10f761b1d77e84609967e80b0db37c6beb846", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -4355,7 +4355,7 @@ package body Sem_Ch10 is\n                   end;\n                end if;\n \n-            --  The With_Clause may be on a grand-child or one of its further\n+            --  The With_Clause may be on a grandchild or one of its further\n             --  descendants, which makes a child immediately visible. Examine\n             --  ancestry to determine whether such a child exists. For example,\n             --  if current unit is A.C, and with_clause is on A.X.Y.Z, then X\n@@ -4394,7 +4394,7 @@ package body Sem_Ch10 is\n                   --  Scan context of current unit, to check whether there is\n                   --  a with_clause on the same unit as a private with-clause\n                   --  on a parent, in which case child unit is visible. If the\n-                  --  unit is a grand-child, the same applies to its parent.\n+                  --  unit is a grandchild, the same applies to its parent.\n \n                   ----------------\n                   -- In_Context --"}, {"sha": "dc7f774499133dfbe438c97871515f79bc348884", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -12551,6 +12551,10 @@ package body Sem_Ch13 is\n       function Has_Generic_Parent (E : Entity_Id) return Boolean;\n       --  Return True if any ancestor is a generic type\n \n+      ------------------------\n+      -- Has_Generic_Parent --\n+      ------------------------\n+\n       function Has_Generic_Parent (E : Entity_Id) return Boolean is\n          Ancestor_Type : Entity_Id := Etype (E);\n \n@@ -12562,10 +12566,12 @@ package body Sem_Ch13 is\n             Ancestor_Type := Etype (Ancestor_Type);\n          end loop;\n \n-         return Present (Ancestor_Type)\n-                  and then Is_Generic_Type (Ancestor_Type);\n+         return\n+           Present (Ancestor_Type) and then Is_Generic_Type (Ancestor_Type);\n       end Has_Generic_Parent;\n \n+   --  Start of processing for Rep_Item_Too_Early\n+\n    begin\n       --  Cannot apply non-operational rep items to generic types\n "}, {"sha": "e936cbb0242a7289f3bc3cd8d170664a05560924", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -3651,7 +3651,7 @@ package body Sem_Ch3 is\n    procedure Analyze_Object_Declaration (N : Node_Id) is\n       Loc       : constant Source_Ptr := Sloc (N);\n       Id        : constant Entity_Id  := Defining_Identifier (N);\n-      Next_Decl : constant Node_Id := Next (N);\n+      Next_Decl : constant Node_Id    := Next (N);\n \n       Act_T : Entity_Id;\n       T     : Entity_Id;\n@@ -4507,12 +4507,11 @@ package body Sem_Ch3 is\n \n             declare\n                Check : constant Node_Id :=\n-                 Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc));\n+                         Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc));\n \n             begin\n                if No (Next_Decl) then\n                   Append_To (List_Containing (N), Check);\n-\n                else\n                   Insert_Before (Next_Decl, Check);\n                end if;"}, {"sha": "2b0a8edce99ebfe67def05d5d2ff7c4c68ee0f60", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -6178,20 +6178,17 @@ package body Sem_Ch4 is\n            and then Ekind (Entity (Name (N))) = E_Function\n            and then Present (Homonym (Entity (Name (N))))\n          then\n-\n-            --  A name may appear overloaded if it has a homonym, even if\n-            --  that homonym is non-overloadable, in which case the overload\n-            --  list is in fact empty. This specialized case deserves a\n-            --  special message if the homonym is a child package.\n+            --  A name may appear overloaded if it has a homonym, even if that\n+            --  homonym is non-overloadable, in which case the overload list is\n+            --  in fact empty. This specialized case deserves a special message\n+            --  if the homonym is a child package.\n \n             declare\n                Nam : constant Node_Id := Name (N);\n                H   : constant Entity_Id := Homonym (Entity (Nam));\n \n             begin\n-               if Ekind (H) = E_Package\n-                 and then Is_Child_Unit (H)\n-               then\n+               if Ekind (H) = E_Package and then Is_Child_Unit (H) then\n                   Error_Msg_Qual_Level := 2;\n                   Error_Msg_NE (\"if an entity in package& is meant, \", Nam, H);\n                   Error_Msg_NE (\"\\use a fully qualified name\", Nam, H);\n@@ -6208,9 +6205,9 @@ package body Sem_Ch4 is\n                end if;\n             end loop;\n \n-            --  If all interpretations are procedures, this deserves a\n-            --  more precise message. Ditto if this appears as the prefix\n-            --  of a selected component, which may be a lexical error.\n+            --  If all interpretations are procedures, this deserves a more\n+            --  precise message. Ditto if this appears as the prefix of a\n+            --  selected component, which may be a lexical error.\n \n             Error_Msg_N\n               (\"\\context requires function call, found procedure name\", Nam);\n@@ -6226,8 +6223,7 @@ package body Sem_Ch4 is\n       elsif Nkind (N) = N_Procedure_Call_Statement\n         and then not Void_Interp_Seen\n       then\n-         Error_Msg_N (\n-         \"\\function name found in procedure call\", Nam);\n+         Error_Msg_N (\"\\function name found in procedure call\", Nam);\n       end if;\n \n       All_Errors_Mode := Err_Mode;"}, {"sha": "e00cd57ea980770420761c337bf1e80de6e2e79a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -11342,7 +11342,7 @@ package body Sem_Ch6 is\n                goto Continue;\n             end if;\n \n-            --  Protect against malformed parameter types.\n+            --  Protect against malformed parameter types\n \n             if Nkind (Ptype) not in N_Has_Entity then\n                Formal_Type := Any_Type;"}, {"sha": "e0d20ef844b736940accf5d770e57128ac01410d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -790,7 +790,7 @@ package body Sem_Ch7 is\n       --  Deactivate expansion inside the body of ignored Ghost entities,\n       --  as this code will ultimately be ignored. This avoids requiring the\n       --  presence of run-time units which are not needed. Only do this for\n-      --  user entities, as internally generated entitities might still need\n+      --  user entities, as internally generated entities might still need\n       --  to be expanded (e.g. those generated for types).\n \n       if Present (Ignored_Ghost_Region)\n@@ -1063,7 +1063,7 @@ package body Sem_Ch7 is\n       --  to the linker as their Is_Public flag is set to True. This proactive\n       --  approach is necessary because an inlined or a generic body for which\n       --  code is generated in other units may need to see these entities. Cut\n-      --  down the number of global symbols that do not neet public visibility\n+      --  down the number of global symbols that do not need public visibility\n       --  as this has two beneficial effects:\n       --    (1) It makes the compilation process more efficient.\n       --    (2) It gives the code generator more leeway to optimize within each\n@@ -1883,7 +1883,7 @@ package body Sem_Ch7 is\n       end if;\n \n       --  Nested package specs that do not require bodies are not checked for\n-      --  ineffective use clauses due to the possbility of subunits. This is\n+      --  ineffective use clauses due to the possibility of subunits. This is\n       --  because at this stage it is impossible to tell whether there will be\n       --  a separate body.\n \n@@ -2261,7 +2261,7 @@ package body Sem_Ch7 is\n       procedure Swap_Private_Dependents (Priv_Deps : Elist_Id);\n       --  When the full view of a private type is made available, we do the\n       --  same for its private dependents under proper visibility conditions.\n-      --  When compiling a grand-chid unit this needs to be done recursively.\n+      --  When compiling a grandchild unit this needs to be done recursively.\n \n       -----------------------------\n       -- Swap_Private_Dependents --\n@@ -3196,7 +3196,7 @@ package body Sem_Ch7 is\n       E : Entity_Id;\n \n       Requires_Body : Boolean := False;\n-      --  Flag set when the unit has at least one construct that requries\n+      --  Flag set when the unit has at least one construct that requires\n       --  completion in a body.\n \n    begin"}, {"sha": "db642f09f88654f9dddd8d6830c9c865c393afe6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -8471,14 +8471,12 @@ package body Sem_Res is\n                   Get_Next_Interp (I, It);\n                end loop;\n \n-               --  If expansion is active and this is wn inherited operation,\n+               --  If expansion is active and this is an inherited operation,\n                --  replace it with its ancestor. This must not be done during\n-               --  preanalysis because the type nay not be frozen yet, as when\n-               --  the context is a pre/post condition.\n+               --  preanalysis because the type may not be frozen yet, as when\n+               --  the context is a precondition or postcondition.\n \n-               if Present (Alias (Entity (N)))\n-                 and then Expander_Active\n-               then\n+               if Present (Alias (Entity (N))) and then Expander_Active then\n                   Set_Entity (N, Alias (Entity (N)));\n                end if;\n             end;"}, {"sha": "a9384b84c0dec4c17bff5d68a96b5f1ec6c50792", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -1302,9 +1302,7 @@ package body Sem_SPARK is\n    begin\n       --  Only SPARK bodies are analyzed\n \n-      if No (Prag)\n-        or else Get_SPARK_Mode_From_Annotation (Prag) /= Opt.On\n-      then\n+      if No (Prag) or else Get_SPARK_Mode_From_Annotation (Prag) /= Opt.On then\n          return;\n       end if;\n \n@@ -1314,8 +1312,9 @@ package body Sem_SPARK is\n         and then Is_Anonymous_Access_Type (Etype (Spec_Id))\n         and then not Is_Traversal_Function (Spec_Id)\n       then\n-         Error_Msg_N (\"anonymous access type for result only allowed for \"\n-                      & \"traveral functions\", Spec_Id);\n+         Error_Msg_N\n+           (\"anonymous access type for result only allowed for traveral \"\n+            & \"functions\", Spec_Id);\n          return;\n       end if;\n "}, {"sha": "e011c099c19b18ce01009f4881c044b5bc369d5e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -8716,9 +8716,7 @@ package body Sem_Util is\n          if Is_Subprogram_Or_Generic_Subprogram (Subp) then\n             Body_Id := Subprogram_Body_Entity (Subp);\n \n-         elsif Is_Entry (Subp)\n-           or else Is_Task_Type (Subp)\n-         then\n+         elsif Is_Entry (Subp) or else Is_Task_Type (Subp) then\n             Body_Id := Corresponding_Body (Parent (Subp));\n \n          --  ??? It should be possible to retrieve the Refined_Global on the"}, {"sha": "422f8df66da89c316b719d33edc2657017cb933e", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8c1cd3675b0e30817d98e52740b918b4e970b0/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=7f8c1cd3675b0e30817d98e52740b918b4e970b0", "patch": "@@ -41,8 +41,8 @@ package Warnsw is\n    Warn_On_Anonymous_Allocators : Boolean := False;\n    --  Warn when allocators for anonymous access types are present, which,\n    --  although not illegal in Ada, may be confusing to users due to how\n-   --  accessibility checks get generated. Off by default, modified by use of\n-   --  -gnatw_a/_A and set as part of -gnatwa.\n+   --  accessibility checks get generated. Off by default, modified by use\n+   --  of -gnatw_a/_A and set as part of -gnatwa.\n \n    Warn_On_Late_Primitives : Boolean := False;\n    --  Warn when tagged type public primitives are defined after its private"}]}