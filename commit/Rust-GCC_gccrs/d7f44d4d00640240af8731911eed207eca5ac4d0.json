{"sha": "d7f44d4d00640240af8731911eed207eca5ac4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmNDRkNGQwMDY0MDI0MGFmODczMTkxMWVlZDIwN2VjYTVhYzRkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-06T19:22:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-06T19:22:06Z"}, "message": "re PR sanitizer/81281 (UBSAN: false positive, dropped promotion to long type.)\n\n\tPR sanitizer/81281\n\t* match.pd ((T)(P + A) - (T)P -> (T) A): Split into separate\n\tsimplify for plus with :c added, and pointer_plus without that.\n\t((T)P - (T)(P + A) -> -(T) A): Likewise.  If type is integral\n\twith undefined overflow and the conversion is not widening,\n\tperform negation in utype and only convert to type afterwards.\n\t((T)(P + A) - (T)(P + B) -> (T)A - (T)B): Split into separate\n\tsimplify for plus with :c added, and pointer_plus without that.\n\tIf type is integral with undefined overflow and the conversion is\n\tnot widening, perform minus in utype and only convert to type\n\tafterwards.  Move the last pointer_diff_expr simplify into the\n\ttwo outermost ifs.\n\n\t* gcc.c-torture/execute/pr81281.c: New test.\n\t* gcc.dg/pr81281-1.c: New test.\n\t* gcc.dg/pr81281-2.c: New test.\n\t* g++.dg/ubsan/pr81281.C: New test.\n\t* g++.dg/ubsan/pr81281-aux.cc: New test.\n\nFrom-SVN: r255449", "tree": {"sha": "b4e1816175ba649a8f594b1c017f750ae055d13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e1816175ba649a8f594b1c017f750ae055d13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f44d4d00640240af8731911eed207eca5ac4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f44d4d00640240af8731911eed207eca5ac4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f44d4d00640240af8731911eed207eca5ac4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f44d4d00640240af8731911eed207eca5ac4d0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c1caf50e16b50903364709d774244928c719b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1caf50e16b50903364709d774244928c719b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1caf50e16b50903364709d774244928c719b35"}], "stats": {"total": 416, "additions": 382, "deletions": 34}, "files": [{"sha": "9cfc382239bb1077c000e83cefe05caee1429f83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -1,3 +1,18 @@\n+2017-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81281\n+\t* match.pd ((T)(P + A) - (T)P -> (T) A): Split into separate\n+\tsimplify for plus with :c added, and pointer_plus without that.\n+\t((T)P - (T)(P + A) -> -(T) A): Likewise.  If type is integral\n+\twith undefined overflow and the conversion is not widening,\n+\tperform negation in utype and only convert to type afterwards.\n+\t((T)(P + A) - (T)(P + B) -> (T)A - (T)B): Split into separate\n+\tsimplify for plus with :c added, and pointer_plus without that.\n+\tIf type is integral with undefined overflow and the conversion is\n+\tnot widening, perform minus in utype and only convert to type\n+\tafterwards.  Move the last pointer_diff_expr simplify into the\n+\ttwo outermost ifs.\n+\n 2017-12-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/82646"}, {"sha": "0a4ff6bb8df1a5f477e8df2101fadec420792c7f", "filename": "gcc/match.pd", "status": "modified", "additions": 66, "deletions": 34, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -1783,28 +1783,32 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (bit_not @0))\n \n   /* (T)(P + A) - (T)P -> (T) A */\n-  (for add (plus pointer_plus)\n-   (simplify\n-    (minus (convert (add @@0 @1))\n-     (convert @0))\n-    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n-\t /* For integer types, if A has a smaller type\n-\t    than T the result depends on the possible\n-\t    overflow in P + A.\n-\t    E.g. T=size_t, A=(unsigned)429497295, P>0.\n-\t    However, if an overflow in P + A would cause\n-\t    undefined behavior, we can assume that there\n-\t    is no overflow.  */\n-\t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n-\t /* For pointer types, if the conversion of A to the\n-\t    final type requires a sign- or zero-extension,\n-\t    then we have to punt - it is not defined which\n-\t    one is correct.  */\n-\t || (POINTER_TYPE_P (TREE_TYPE (@0))\n-\t     && TREE_CODE (@1) == INTEGER_CST\n-\t     && tree_int_cst_sign_bit (@1) == 0))\n-     (convert @1))))\n+  (simplify\n+   (minus (convert (plus:c @0 @1))\n+    (convert @0))\n+   (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t/* For integer types, if A has a smaller type\n+\t   than T the result depends on the possible\n+\t   overflow in P + A.\n+\t   E.g. T=size_t, A=(unsigned)429497295, P>0.\n+\t   However, if an overflow in P + A would cause\n+\t   undefined behavior, we can assume that there\n+\t   is no overflow.  */\n+\t|| (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t    && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+    (convert @1)))\n+  (simplify\n+   (minus (convert (pointer_plus @@0 @1))\n+    (convert @0))\n+   (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t/* For pointer types, if the conversion of A to the\n+\t   final type requires a sign- or zero-extension,\n+\t   then we have to punt - it is not defined which\n+\t   one is correct.  */\n+\t|| (POINTER_TYPE_P (TREE_TYPE (@0))\n+\t    && TREE_CODE (@1) == INTEGER_CST\n+\t    && tree_int_cst_sign_bit (@1) == 0))\n+    (convert @1)))\n    (simplify\n     (pointer_diff (pointer_plus @@0 @1) @0)\n     /* The second argument of pointer_plus must be interpreted as signed, and\n@@ -1813,10 +1817,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (convert (convert:stype @1))))\n \n   /* (T)P - (T)(P + A) -> -(T) A */\n-  (for add (plus pointer_plus)\n-   (simplify\n-    (minus (convert @0)\n-     (convert (add @@0 @1)))\n+  (simplify\n+   (minus (convert @0)\n+    (convert (plus:c @0 @1)))\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+    (with { tree utype = unsigned_type_for (type); }\n+     (convert (negate (convert:utype @1))))\n     (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n \t /* For integer types, if A has a smaller type\n \t    than T the result depends on the possible\n@@ -1826,7 +1834,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t    undefined behavior, we can assume that there\n \t    is no overflow.  */\n \t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+     (negate (convert @1)))))\n+  (simplify\n+   (minus (convert @0)\n+    (convert (pointer_plus @@0 @1)))\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+    (with { tree utype = unsigned_type_for (type); }\n+     (convert (negate (convert:utype @1))))\n+    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n \t /* For pointer types, if the conversion of A to the\n \t    final type requires a sign- or zero-extension,\n \t    then we have to punt - it is not defined which\n@@ -1843,10 +1861,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (negate (convert (convert:stype @1)))))\n \n   /* (T)(P + A) - (T)(P + B) -> (T)A - (T)B */\n-  (for add (plus pointer_plus)\n-   (simplify\n-    (minus (convert (add @@0 @1))\n-     (convert (add @0 @2)))\n+  (simplify\n+   (minus (convert (plus:c @0 @1))\n+    (convert (plus:c @0 @2)))\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+    (with { tree utype = unsigned_type_for (type); }\n+     (convert (minus (convert:utype @1) (convert:utype @2))))\n     (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n \t /* For integer types, if A has a smaller type\n \t    than T the result depends on the possible\n@@ -1856,7 +1878,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t    undefined behavior, we can assume that there\n \t    is no overflow.  */\n \t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+     (minus (convert @1) (convert @2)))))\n+  (simplify\n+   (minus (convert (pointer_plus @@0 @1))\n+    (convert (pointer_plus @0 @2)))\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& element_precision (type) <= element_precision (TREE_TYPE (@1)))\n+    (with { tree utype = unsigned_type_for (type); }\n+     (convert (minus (convert:utype @1) (convert:utype @2))))\n+    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n \t /* For pointer types, if the conversion of A to the\n \t    final type requires a sign- or zero-extension,\n \t    then we have to punt - it is not defined which\n@@ -1866,13 +1898,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t     && tree_int_cst_sign_bit (@1) == 0\n \t     && TREE_CODE (@2) == INTEGER_CST\n \t     && tree_int_cst_sign_bit (@2) == 0))\n-     (minus (convert @1) (convert @2)))))))\n+     (minus (convert @1) (convert @2)))))\n    (simplify\n     (pointer_diff (pointer_plus @@0 @1) (pointer_plus @0 @2))\n     /* The second argument of pointer_plus must be interpreted as signed, and\n        thus sign-extended if necessary.  */\n     (with { tree stype = signed_type_for (TREE_TYPE (@1)); }\n-     (minus (convert (convert:stype @1)) (convert (convert:stype @2)))))\n+     (minus (convert (convert:stype @1)) (convert (convert:stype @2)))))))\n \n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */"}, {"sha": "782e04d3639771d2dc75f22cf90b47ab3bb425b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -1,3 +1,12 @@\n+2017-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81281\n+\t* gcc.c-torture/execute/pr81281.c: New test.\n+\t* gcc.dg/pr81281-1.c: New test.\n+\t* gcc.dg/pr81281-2.c: New test.\n+\t* g++.dg/ubsan/pr81281.C: New test.\n+\t* g++.dg/ubsan/pr81281-aux.cc: New test.\n+\n 2017-12-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/82646"}, {"sha": "4a34a61372f2afd040c89521029f50141ff1613b", "filename": "gcc/testsuite/g++.dg/ubsan/pr81281-aux.cc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281-aux.cc?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -0,0 +1,3 @@\n+extern const int ci = 1716607962;\n+int i = -943738830;\n+long long ll = -43165919987465092LL;"}, {"sha": "a812924fa18f2f6acf0827381b41fa87ba564f44", "filename": "gcc/testsuite/g++.dg/ubsan/pr81281.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81281.C?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -0,0 +1,26 @@\n+// PR sanitizer/81281\n+// { dg-do run }\n+// { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" }\n+// { dg-additional-sources \"pr81281-aux.cc\" }\n+\n+extern const int ci;\n+extern int i;\n+extern long long ll;\n+\n+int\n+foo ()\n+{\n+  int a = (int) (-2024172551 - i - (ci - ll))\n+\t  - ((int) (-2024172551 - i - (ci - ll))\n+\t     - (int) (-2024172551 - (long long)ci));\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  if (__SIZEOF_INT__ * __CHAR_BIT__ == 32\n+      && __SIZEOF_LONG_LONG__ * __CHAR_BIT__ == 64)\n+    foo ();\n+  return 0;\n+}"}, {"sha": "5d8908f0352133aff735618dea123b06504dd78f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81281.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81281.c?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -0,0 +1,33 @@\n+/* PR sanitizer/81281 */\n+\n+void\n+foo (unsigned p, unsigned a, unsigned b)\n+{\n+  unsigned q = p + 7;\n+  if (a - (1U + __INT_MAX__) >= 2)\n+    __builtin_unreachable ();\n+  int d = p + b;\n+  int c = p + a;\n+  if (c - d != __INT_MAX__)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (unsigned p, unsigned a)\n+{\n+  unsigned q = p + 7;\n+  if (a - (1U + __INT_MAX__) >= 2)\n+    __builtin_unreachable ();\n+  int c = p;\n+  int d = p + a;\n+  if (c - d != -__INT_MAX__ - 1)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (-1U, 1U + __INT_MAX__, 1U);\n+  bar (-1U, 1U + __INT_MAX__);\n+  return 0;\n+}"}, {"sha": "5fec25d4ccb649772f9d669da0212c28534a28ff", "filename": "gcc/testsuite/gcc.dg/pr81281-1.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-1.c?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -0,0 +1,150 @@\n+/* PR sanitizer/81281 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"p_\\[0-9]*\\\\(D\\\\)\" \"optimized\" } } */\n+\n+long long\n+f1 (int p, int a, int b)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  int e = b + 3;\n+  long long f = p + a;\n+  long long g = p + b;\n+  return f - g;\n+}\n+\n+long long\n+f2 (int p, int a, int b)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  int e = b + 3;\n+  long long f = p + a;\n+  long long g = p + b;\n+  return f - g;\n+}\n+\n+long long\n+f3 (int p, int a, int b)\n+{\n+  int c = b + 1;\n+  int d = p + 2;\n+  int e = a + 3;\n+  long long f = p + a;\n+  long long g = p + b;\n+  return f - g;\n+}\n+\n+signed char\n+f4 (int p, int a, int b)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  int e = b + 3;\n+  signed char f = p + a;\n+  signed char g = p + b;\n+  return f - g;\n+}\n+\n+signed char\n+f5 (int p, int a, int b)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  int e = b + 3;\n+  signed char f = p + a;\n+  signed char g = p + b;\n+  return f - g;\n+}\n+\n+signed char\n+f6 (int p, int a, int b)\n+{\n+  int c = b + 1;\n+  int d = p + 2;\n+  int e = a + 3;\n+  signed char f = p + a;\n+  signed char g = p + b;\n+  return f - g;\n+}\n+\n+long long\n+f7 (int p, int a)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  long long f = p + a;\n+  long long g = p;\n+  return f - g;\n+}\n+\n+long long\n+f8 (int p, int a)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  long long f = p + a;\n+  long long g = p;\n+  return f - g;\n+}\n+\n+signed char\n+f9 (int p, int a)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  signed char f = p + a;\n+  signed char g = p;\n+  return f - g;\n+}\n+\n+signed char\n+f10 (int p, int a)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  signed char f = p + a;\n+  signed char g = p;\n+  return f - g;\n+}\n+\n+long long\n+f11 (int p, int a)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  long long f = p;\n+  long long g = p + a;\n+  return f - g;\n+}\n+\n+long long\n+f12 (int p, int a)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  long long f = p;\n+  long long g = p + a;\n+  return f - g;\n+}\n+\n+signed char\n+f13 (int p, int a)\n+{\n+  int c = p + 1;\n+  int d = a + 2;\n+  signed char f = p;\n+  signed char g = p + a;\n+  return f - g;\n+}\n+\n+signed char\n+f14 (int p, int a)\n+{\n+  int c = a + 1;\n+  int d = p + 2;\n+  signed char f = p;\n+  signed char g = p + a;\n+  return f - g;\n+}"}, {"sha": "ba2c648167d7ad774d3ae8ba9427fb2a06699b0b", "filename": "gcc/testsuite/gcc.dg/pr81281-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f44d4d00640240af8731911eed207eca5ac4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81281-2.c?ref=d7f44d4d00640240af8731911eed207eca5ac4d0", "patch": "@@ -0,0 +1,80 @@\n+/* PR sanitizer/81281 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"p_\\[0-9]*\\\\(D\\\\)\" \"optimized\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef __INTPTR_TYPE__ T;\n+\n+T\n+f1 (char *p, size_t a, size_t b)\n+{\n+  char *c = p + 1;\n+  size_t d = a + 2;\n+  size_t e = b + 3;\n+  T f = (T) (p + a);\n+  T g = (T) (p + b);\n+  return f - g;\n+}\n+\n+T\n+f2 (char *p, size_t a, size_t b)\n+{\n+  size_t c = a + 1;\n+  char *d = p + 2;\n+  size_t e = b + 3;\n+  T f = (T) (p + a);\n+  T g = (T) (p + b);\n+  return f - g;\n+}\n+\n+T\n+f3 (char *p, size_t a, size_t b)\n+{\n+  size_t c = b + 1;\n+  char *d = p + 2;\n+  size_t e = a + 3;\n+  T f = (T) (p + a);\n+  T g = (T) (p + b);\n+  return f - g;\n+}\n+\n+T\n+f4 (char *p, size_t a)\n+{\n+  char *c = p + 1;\n+  size_t d = a + 2;\n+  T f = (T) (p + a);\n+  T g = (T) p;\n+  return f - g;\n+}\n+\n+T\n+f5 (char *p, size_t a)\n+{\n+  size_t c = a + 1;\n+  char *d = p + 2;\n+  T f = (T) (p + a);\n+  T g = (T) p;\n+  return f - g;\n+}\n+\n+T\n+f6 (char *p, size_t a)\n+{\n+  char *c = p + 1;\n+  size_t d = a + 2;\n+  T f = (T) p;\n+  T g = (T) (p + a);\n+  return f - g;\n+}\n+\n+T\n+f7 (char *p, size_t a)\n+{\n+  size_t c = a + 1;\n+  char *d = p + 2;\n+  T f = (T) p;\n+  T g = (T) (p + a);\n+  return f - g;\n+}"}]}