{"sha": "fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4N2QxNmRjZjc2NmQxNzU0ODM3ZTcxZDVhMWFiYzk3YTllMGM4Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-12-23T09:49:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-12-23T09:49:28Z"}, "message": "[PATCH] Allow indirect call via GOT for 64-bit Pmode x32\n\nFrom: H.J. Lu  <hongjiu.lu@intel.com>\n\nSince Pmode is 64-bit with -maddress-mode=long for x32, indirect call\nvia GOT slot doesn't need zero_extend.  This patch enables indirect call\nvia GOT for x32 with 64-bit Pmode.\n\ngcc/\n\n\tPR target/66232\n\t* config/i386/constraints.md (Bs): Allow GOT slot for x32 with\n\t64-bit Pmode.\n\t(Bw): Likewise.\n\t(Bz): Likewise.\n\t* config/i386/predicates.md (call_insn_operand): Likewise.\n\t(sibcall_insn_operand): Likewise.\n\ngcc/testsuite/\n\n\tPR target/66232\n\t* gcc.target/i386/pr66232-10.c: New test.\n\t* gcc.target/i386/pr66232-11.c: Likewise.\n\t* gcc.target/i386/pr66232-12.c: Likewise.\n\t* gcc.target/i386/pr66232-13.c: Likewise.\n\nFrom-SVN: r231923", "tree": {"sha": "fc9c5459806e88a34d0c675bdf00a8da5ccebb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc9c5459806e88a34d0c675bdf00a8da5ccebb46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc9ca1a0a1632f1cd0884bbc434b00e8be09a4b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9ca1a0a1632f1cd0884bbc434b00e8be09a4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9ca1a0a1632f1cd0884bbc434b00e8be09a4b5"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "05c6460466d55c27ed75619ec5ad3cbfedc0cb64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -1,3 +1,13 @@\n+2015-12-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\t* config/i386/constraints.md (Bs): Allow GOT slot for x32 with\n+\t64-bit Pmode.\n+\t(Bw): Likewise.\n+\t(Bz): Likewise.\n+\t* config/i386/predicates.md (call_insn_operand): Likewise.\n+\t(sibcall_insn_operand): Likewise.\n+\n 2015-12-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/68473"}, {"sha": "b46d32b57281f8519b9d794b41104d7f5e110af8", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -162,13 +162,17 @@\n \n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n-  (and (not (match_test \"TARGET_X32\"))\n-       (match_operand 0 \"sibcall_memory_operand\")))\n+  (ior (and (not (match_test \"TARGET_X32\"))\n+\t    (match_operand 0 \"sibcall_memory_operand\"))\n+       (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+\t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bw\"\n   \"@internal Call memory operand.\"\n-  (and (not (match_test \"TARGET_X32\"))\n-       (match_operand 0 \"memory_operand\")))\n+  (ior (and (not (match_test \"TARGET_X32\"))\n+\t    (match_operand 0 \"memory_operand\"))\n+       (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+\t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bz\"\n   \"@internal Constant call address operand.\""}, {"sha": "17249e766badff51e7bf1765ca67671e61bc8666", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -620,32 +620,36 @@\n   return false;\n })\n \n+;; Return true if OP is a GOT memory operand.\n+(define_predicate \"GOT_memory_operand\"\n+  (match_operand 0 \"memory_operand\")\n+{\n+  op = XEXP (op, 0);\n+  return (GET_CODE (op) == CONST\n+\t  && GET_CODE (XEXP (op, 0)) == UNSPEC\n+\t  && XINT (XEXP (op, 0), 1) == UNSPEC_GOTPCREL);\n+})\n+\n ;; Test for a valid operand for a call instruction.\n ;; Allow constant call address operands in Pmode only.\n (define_special_predicate \"call_insn_operand\"\n   (ior (match_test \"constant_call_address_operand\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n-       (and (not (match_test \"TARGET_X32\"))\n-\t    (match_operand 0 \"memory_operand\"))))\n+       (ior (and (not (match_test \"TARGET_X32\"))\n+\t\t (match_operand 0 \"sibcall_memory_operand\"))\n+\t    (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+\t\t (match_operand 0 \"GOT_memory_operand\")))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n (define_special_predicate \"sibcall_insn_operand\"\n   (ior (match_test \"constant_call_address_operand\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"register_no_elim_operand\")\n-       (and (not (match_test \"TARGET_X32\"))\n-\t    (match_operand 0 \"sibcall_memory_operand\"))))\n-\n-;; Return true if OP is a GOT memory operand.\n-(define_predicate \"GOT_memory_operand\"\n-  (match_operand 0 \"memory_operand\")\n-{\n-  op = XEXP (op, 0);\n-  return (GET_CODE (op) == CONST\n-\t  && GET_CODE (XEXP (op, 0)) == UNSPEC\n-\t  && XINT (XEXP (op, 0), 1) == UNSPEC_GOTPCREL);\n-})\n+       (ior (and (not (match_test \"TARGET_X32\"))\n+\t\t (match_operand 0 \"sibcall_memory_operand\"))\n+\t    (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+\t\t (match_operand 0 \"GOT_memory_operand\")))))\n \n ;; Return true if OP is a 32-bit GOT symbol operand.\n (define_predicate \"GOT32_symbol_operand\""}, {"sha": "524b9b02e14604520c092bd6769fe8110c3361aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -1,3 +1,11 @@\n+2015-12-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\t* gcc.target/i386/pr66232-10.c: New test.\n+\t* gcc.target/i386/pr66232-11.c: Likewise.\n+\t* gcc.target/i386/pr66232-12.c: Likewise.\n+\t* gcc.target/i386/pr66232-13.c: Likewise.\n+\n 2015-12-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/68473"}, {"sha": "c4e9157ac13c3b00019b07da06f7e1701fe4139b", "filename": "gcc/testsuite/gcc.target/i386/pr66232-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-10.c?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -mx32 -fpic -fno-plt -maddress-mode=long\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" } } */"}, {"sha": "05794af83ece407253fc762fadd8f98aea39258e", "filename": "gcc/testsuite/gcc.target/i386/pr66232-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-11.c?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -mx32 -fpic -fno-plt -maddress-mode=long\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" } } */"}, {"sha": "313b9e4d8946c6414dc9d6cb924c5150f54904d8", "filename": "gcc/testsuite/gcc.target/i386/pr66232-12.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-12.c?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -mx32 -fpic -fno-plt -maddress-mode=long\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" } } */"}, {"sha": "50a12cf91fdf50d58c74c7587d35aa9617be6ab5", "filename": "gcc/testsuite/gcc.target/i386/pr66232-13.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-13.c?ref=fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -mx32 -fpic -fno-plt -maddress-mode=long\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar () + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" } } */"}]}