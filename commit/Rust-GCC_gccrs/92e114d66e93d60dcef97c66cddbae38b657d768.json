{"sha": "92e114d66e93d60dcef97c66cddbae38b657d768", "node_id": "C_kwDOANBUbNoAKDkyZTExNGQ2NmU5M2Q2MGRjZWY5N2M2NmNkZGJhZTM4YjY1N2Q3Njg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-05T15:29:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-10T10:08:42Z"}, "message": "tree-optimization/100359 - restore unroll at -O3\n\nThis fixes a mistake done with r8-5008 when introducing\nallow_peel to the unroll code.  The intent was to allow\npeeling that doesn't grow code but the result was that\nwith -O3 and UL_ALL this wasn't done.  The following\ninstantiates the desired effect by adjusting ul to UL_NO_GROWTH\nif peeling is not allowed.\n\n2022-01-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100359\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely):\n\tAllow non-growing peeling with !allow_peel and UL_ALL.\n\n\t* gcc.dg/tree-ssa/pr100359.c: New testcase.", "tree": {"sha": "4f637ed6d4d46c427fe061536cc60080b0686b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f637ed6d4d46c427fe061536cc60080b0686b7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e114d66e93d60dcef97c66cddbae38b657d768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e114d66e93d60dcef97c66cddbae38b657d768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e114d66e93d60dcef97c66cddbae38b657d768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e114d66e93d60dcef97c66cddbae38b657d768/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42dd9febbbeb328af5b3b6adf4431dd7bcca113"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "29243522caaf00d98bc5036fa220c943aa28ce54", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr100359.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e114d66e93d60dcef97c66cddbae38b657d768/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e114d66e93d60dcef97c66cddbae38b657d768/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100359.c?ref=92e114d66e93d60dcef97c66cddbae38b657d768", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O3 -fdump-tree-cunrolli-optimized\" } */\n+\n+extern void foo(void);\n+static int b, f, *a = &b;\n+int **c = &a;\n+static void d() {\n+  int g, h;\n+  for (f = 0; f < 1; f++) {\n+    int *i = &b;\n+    {\n+      int *j[3], **k = &a;\n+      for (g = 0; g < 3; g++)\n+        for (h = 0; h < 1; h++)\n+          j[g] = &b;\n+      *k = j[0];\n+    }\n+    *c = i;\n+  }\n+}\n+int main() {\n+  d();\n+  *a = 0;\n+  if (**c)\n+    foo();\n+  return 0;\n+}\n+\n+/* Verify that we unroll the inner loop early even with -O3.  */\n+/* { dg-final { scan-tree-dump \"loop with 1 iterations completely unrolled\" \"cunrolli\" } }  */\n+/* { dg-final { scan-tree-dump \"loop with 3 iterations completely unrolled\" \"cunrolli\" } }  */"}, {"sha": "e2ac20447410d8e730fa38222964e729147cab32", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e114d66e93d60dcef97c66cddbae38b657d768/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e114d66e93d60dcef97c66cddbae38b657d768/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=92e114d66e93d60dcef97c66cddbae38b657d768", "patch": "@@ -720,7 +720,7 @@ try_unroll_loop_completely (class loop *loop,\n     exit = NULL;\n \n   /* See if we can improve our estimate by using recorded loop bounds.  */\n-  if ((allow_peel || maxiter == 0 || ul == UL_NO_GROWTH)\n+  if ((maxiter == 0 || ul != UL_SINGLE_ITER)\n       && maxiter >= 0\n       && (!n_unroll_found || (unsigned HOST_WIDE_INT)maxiter < n_unroll))\n     {\n@@ -729,6 +729,10 @@ try_unroll_loop_completely (class loop *loop,\n       /* Loop terminates before the IV variable test, so we cannot\n \t remove it in the last iteration.  */\n       edge_to_cancel = NULL;\n+      /* If we do not allow peeling and we iterate just allow cases\n+\t that do not grow code.  */\n+      if (!allow_peel && maxiter != 0)\n+\tul = UL_NO_GROWTH;\n     }\n \n   if (!n_unroll_found)"}]}