{"sha": "daa027cc473c361231dd4aa9f362674fe2c9a0fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhMDI3Y2M0NzNjMzYxMjMxZGQ0YWE5ZjM2MjY3NGZlMmM5YTBmYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-14T14:38:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-14T14:38:38Z"}, "message": "builtins.c (CASE_MATHFN): New helper macro.\n\n\t* builtins.c (CASE_MATHFN): New helper macro.\n\t(mathfn_built_in): Simplify and sort.\n\nFrom-SVN: r70436", "tree": {"sha": "023e2c3ab4439753e0c700eba2cc569c5f31246e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023e2c3ab4439753e0c700eba2cc569c5f31246e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa027cc473c361231dd4aa9f362674fe2c9a0fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa027cc473c361231dd4aa9f362674fe2c9a0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa027cc473c361231dd4aa9f362674fe2c9a0fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa027cc473c361231dd4aa9f362674fe2c9a0fb/comments", "author": null, "committer": null, "parents": [{"sha": "d256ac69eee99d5cc5c657bad82f9b1b00431c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d256ac69eee99d5cc5c657bad82f9b1b00431c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d256ac69eee99d5cc5c657bad82f9b1b00431c07"}], "stats": {"total": 242, "additions": 42, "deletions": 200}, "files": [{"sha": "cf86c0a92f654472937ea2311f5e9aa825c2448d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa027cc473c361231dd4aa9f362674fe2c9a0fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa027cc473c361231dd4aa9f362674fe2c9a0fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daa027cc473c361231dd4aa9f362674fe2c9a0fb", "patch": "@@ -1,5 +1,8 @@\n 2003-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (CASE_MATHFN): New helper macro.\n+\t(mathfn_built_in): Simplify and sort.\n+\n \t* protoize.c (substr): Delete, callers changed to `strstr'.\n \n 2003-08-13  Zack Weinberg  <zack@codesourcery.com>"}, {"sha": "5b975f0f2568bac12801b3d0f493344a5d284ef5", "filename": "gcc/builtins.c", "status": "modified", "additions": 39, "deletions": 200, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa027cc473c361231dd4aa9f362674fe2c9a0fb/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa027cc473c361231dd4aa9f362674fe2c9a0fb/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=daa027cc473c361231dd4aa9f362674fe2c9a0fb", "patch": "@@ -1470,211 +1470,50 @@ expand_builtin_constant_p (tree arglist, enum machine_mode target_mode)\n   return tmp;\n }\n \n-/* Return mathematic function equivalent to FN but operating directly on TYPE,\n-   if available.  */\n+/* This helper macro, meant to be used in mathfn_built_in below,\n+   determines which among a set of three builtin math functions is\n+   appropriate for a given type mode.  The `F' and `L' cases are\n+   automatically generated from the `double' case.  */\n+#define CASE_MATHFN(BUILT_IN_MATHFN) \\\n+  case BUILT_IN_MATHFN: case BUILT_IN_MATHFN##F: case BUILT_IN_MATHFN##L: \\\n+  fcode = BUILT_IN_MATHFN; fcodef = BUILT_IN_MATHFN##F ; \\\n+  fcodel = BUILT_IN_MATHFN##L ; break;\n+\n+/* Return mathematic function equivalent to FN but operating directly\n+   on TYPE, if available.  If we can't do the conversion, return zero.  */\n tree\n mathfn_built_in (tree type, enum built_in_function fn)\n {\n-  enum built_in_function fcode = NOT_BUILT_IN;\n-  if (TYPE_MODE (type) == TYPE_MODE (double_type_node))\n-    switch (fn)\n-      {\n-      case BUILT_IN_SQRT:\n-      case BUILT_IN_SQRTF:\n-      case BUILT_IN_SQRTL:\n-\tfcode = BUILT_IN_SQRT;\n-\tbreak;\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_SINF:\n-      case BUILT_IN_SINL:\n-\tfcode = BUILT_IN_SIN;\n-\tbreak;\n-      case BUILT_IN_COS:\n-      case BUILT_IN_COSF:\n-      case BUILT_IN_COSL:\n-\tfcode = BUILT_IN_COS;\n-\tbreak;\n-      case BUILT_IN_EXP:\n-      case BUILT_IN_EXPF:\n-      case BUILT_IN_EXPL:\n-\tfcode = BUILT_IN_EXP;\n-\tbreak;\n-      case BUILT_IN_LOG:\n-      case BUILT_IN_LOGF:\n-      case BUILT_IN_LOGL:\n-\tfcode = BUILT_IN_LOG;\n-\tbreak;\n-      case BUILT_IN_TAN:\n-      case BUILT_IN_TANF:\n-      case BUILT_IN_TANL:\n-\tfcode = BUILT_IN_TAN;\n-\tbreak;\n-      case BUILT_IN_ATAN:\n-      case BUILT_IN_ATANF:\n-      case BUILT_IN_ATANL:\n-\tfcode = BUILT_IN_ATAN;\n-\tbreak;\n-      case BUILT_IN_FLOOR:\n-      case BUILT_IN_FLOORF:\n-      case BUILT_IN_FLOORL:\n-\tfcode = BUILT_IN_FLOOR;\n-\tbreak;\n-      case BUILT_IN_CEIL:\n-      case BUILT_IN_CEILF:\n-      case BUILT_IN_CEILL:\n-\tfcode = BUILT_IN_CEIL;\n-\tbreak;\n-      case BUILT_IN_TRUNC:\n-      case BUILT_IN_TRUNCF:\n-      case BUILT_IN_TRUNCL:\n-\tfcode = BUILT_IN_TRUNC;\n-\tbreak;\n-      case BUILT_IN_ROUND:\n-      case BUILT_IN_ROUNDF:\n-      case BUILT_IN_ROUNDL:\n-\tfcode = BUILT_IN_ROUND;\n-\tbreak;\n-      case BUILT_IN_NEARBYINT:\n-      case BUILT_IN_NEARBYINTF:\n-      case BUILT_IN_NEARBYINTL:\n-\tfcode = BUILT_IN_NEARBYINT;\n-\tbreak;\n-      default:\n-\tabort ();\n-      }\n-  else if (TYPE_MODE (type) == TYPE_MODE (float_type_node))\n-    switch (fn)\n-      {\n-      case BUILT_IN_SQRT:\n-      case BUILT_IN_SQRTF:\n-      case BUILT_IN_SQRTL:\n-\tfcode = BUILT_IN_SQRTF;\n-\tbreak;\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_SINF:\n-      case BUILT_IN_SINL:\n-\tfcode = BUILT_IN_SINF;\n-\tbreak;\n-      case BUILT_IN_COS:\n-      case BUILT_IN_COSF:\n-      case BUILT_IN_COSL:\n-\tfcode = BUILT_IN_COSF;\n-\tbreak;\n-      case BUILT_IN_EXP:\n-      case BUILT_IN_EXPF:\n-      case BUILT_IN_EXPL:\n-\tfcode = BUILT_IN_EXPF;\n-\tbreak;\n-      case BUILT_IN_LOG:\n-      case BUILT_IN_LOGF:\n-      case BUILT_IN_LOGL:\n-\tfcode = BUILT_IN_LOGF;\n-\tbreak;\n-      case BUILT_IN_TAN:\n-      case BUILT_IN_TANF:\n-      case BUILT_IN_TANL:\n-\tfcode = BUILT_IN_TANF;\n-\tbreak;\n-      case BUILT_IN_ATAN:\n-      case BUILT_IN_ATANF:\n-      case BUILT_IN_ATANL:\n-\tfcode = BUILT_IN_ATANF;\n-\tbreak;\n-      case BUILT_IN_FLOOR:\n-      case BUILT_IN_FLOORF:\n-      case BUILT_IN_FLOORL:\n-\tfcode = BUILT_IN_FLOORF;\n-\tbreak;\n-      case BUILT_IN_CEIL:\n-      case BUILT_IN_CEILF:\n-      case BUILT_IN_CEILL:\n-\tfcode = BUILT_IN_CEILF;\n-\tbreak;\n-      case BUILT_IN_TRUNC:\n-      case BUILT_IN_TRUNCF:\n-      case BUILT_IN_TRUNCL:\n-\tfcode = BUILT_IN_TRUNCF;\n-\tbreak;\n-      case BUILT_IN_ROUND:\n-      case BUILT_IN_ROUNDF:\n-      case BUILT_IN_ROUNDL:\n-\tfcode = BUILT_IN_ROUNDF;\n-\tbreak;\n-      case BUILT_IN_NEARBYINT:\n-      case BUILT_IN_NEARBYINTF:\n-      case BUILT_IN_NEARBYINTL:\n-\tfcode = BUILT_IN_NEARBYINTF;\n-\tbreak;\n-      default:\n-\tabort ();\n-      }\n-  else if (TYPE_MODE (type) == TYPE_MODE (long_double_type_node))\n-    switch (fn)\n-      {\n-      case BUILT_IN_SQRT:\n-      case BUILT_IN_SQRTF:\n-      case BUILT_IN_SQRTL:\n-\tfcode = BUILT_IN_SQRTL;\n-\tbreak;\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_SINF:\n-      case BUILT_IN_SINL:\n-\tfcode = BUILT_IN_SINL;\n-\tbreak;\n-      case BUILT_IN_COS:\n-      case BUILT_IN_COSF:\n-      case BUILT_IN_COSL:\n-\tfcode = BUILT_IN_COSL;\n-\tbreak;\n-      case BUILT_IN_EXP:\n-      case BUILT_IN_EXPF:\n-      case BUILT_IN_EXPL:\n-\tfcode = BUILT_IN_EXPL;\n-\tbreak;\n-      case BUILT_IN_LOG:\n-      case BUILT_IN_LOGF:\n-      case BUILT_IN_LOGL:\n-\tfcode = BUILT_IN_LOGL;\n-\tbreak;\n-      case BUILT_IN_TAN:\n-      case BUILT_IN_TANF:\n-      case BUILT_IN_TANL:\n-\tfcode = BUILT_IN_TANL;\n-\tbreak;\n-      case BUILT_IN_ATAN:\n-      case BUILT_IN_ATANF:\n-      case BUILT_IN_ATANL:\n-\tfcode = BUILT_IN_ATANL;\n-\tbreak;\n-      case BUILT_IN_FLOOR:\n-      case BUILT_IN_FLOORF:\n-      case BUILT_IN_FLOORL:\n-\tfcode = BUILT_IN_FLOORL;\n-\tbreak;\n-      case BUILT_IN_CEIL:\n-      case BUILT_IN_CEILF:\n-      case BUILT_IN_CEILL:\n-\tfcode = BUILT_IN_CEILL;\n-\tbreak;\n-      case BUILT_IN_TRUNC:\n-      case BUILT_IN_TRUNCF:\n-      case BUILT_IN_TRUNCL:\n-\tfcode = BUILT_IN_TRUNCL;\n-\tbreak;\n-      case BUILT_IN_ROUND:\n-      case BUILT_IN_ROUNDF:\n-      case BUILT_IN_ROUNDL:\n-\tfcode = BUILT_IN_ROUNDL;\n-\tbreak;\n-      case BUILT_IN_NEARBYINT:\n-      case BUILT_IN_NEARBYINTF:\n-      case BUILT_IN_NEARBYINTL:\n-\tfcode = BUILT_IN_NEARBYINTL;\n-\tbreak;\n+  const enum machine_mode type_mode = TYPE_MODE (type);\n+  enum built_in_function fcode, fcodef, fcodel;\n+\n+  switch (fn)\n+    {\n+      CASE_MATHFN (BUILT_IN_ATAN)\n+      CASE_MATHFN (BUILT_IN_CEIL)\n+      CASE_MATHFN (BUILT_IN_COS)\n+      CASE_MATHFN (BUILT_IN_EXP)\n+      CASE_MATHFN (BUILT_IN_FLOOR)\n+      CASE_MATHFN (BUILT_IN_LOG)\n+      CASE_MATHFN (BUILT_IN_NEARBYINT)\n+      CASE_MATHFN (BUILT_IN_ROUND)\n+      CASE_MATHFN (BUILT_IN_SIN)\n+      CASE_MATHFN (BUILT_IN_SQRT)\n+      CASE_MATHFN (BUILT_IN_TAN)\n+      CASE_MATHFN (BUILT_IN_TRUNC)\n+\n       default:\n-\tabort ();\n+\treturn 0;\n       }\n-  return implicit_built_in_decls[fcode];\n+\n+  if (type_mode == TYPE_MODE (double_type_node))\n+    return implicit_built_in_decls[fcode];\n+  else if (type_mode == TYPE_MODE (float_type_node))\n+    return implicit_built_in_decls[fcodef];\n+  else if (type_mode == TYPE_MODE (long_double_type_node))\n+    return implicit_built_in_decls[fcodel];\n+  else\n+    return 0;\n }\n \n /* If errno must be maintained, expand the RTL to check if the result,"}]}