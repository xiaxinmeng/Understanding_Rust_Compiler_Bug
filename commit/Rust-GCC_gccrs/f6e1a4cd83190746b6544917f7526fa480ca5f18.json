{"sha": "f6e1a4cd83190746b6544917f7526fa480ca5f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlMWE0Y2Q4MzE5MDc0NmI2NTQ0OTE3Zjc1MjZmYTQ4MGNhNWYxOA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-05-13T03:37:47Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-05-13T03:37:47Z"}, "message": "Add missing unit dependence vector in data dependence analysis\n\nCurrent data dependence analysis misses unit distant vector if DRs in\nDDR have the same invariant access functions.  This adds the vector as\nthe constant access function case.\n\n2020-05-13  Bin Cheng  <bin.cheng@linux.alibaba.com>\nPR tree-optimization/94969\n\ngcc/\n    * tree-data-dependence.c (constant_access_functions): Rename to...\n    (invariant_access_functions): ...this.  Add parameter.  Check for\n    invariant access function, rather than constant.\n    (build_classic_dist_vector): Call above function.\n    * tree-loop-distribution.c (pg_add_dependence_edges): Add comment.\n\ngcc/testsuite/\n    * gcc.dg/tree-ssa/pr94969.c: New test.", "tree": {"sha": "f7cd60b573c8a867fbab2c5d81da5b095dce13fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7cd60b573c8a867fbab2c5d81da5b095dce13fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e1a4cd83190746b6544917f7526fa480ca5f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e1a4cd83190746b6544917f7526fa480ca5f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e1a4cd83190746b6544917f7526fa480ca5f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e1a4cd83190746b6544917f7526fa480ca5f18/comments", "author": null, "committer": null, "parents": [{"sha": "0fec3f62b9bfc03e5088a09036791c2ac84fe0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fec3f62b9bfc03e5088a09036791c2ac84fe0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fec3f62b9bfc03e5088a09036791c2ac84fe0c8"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "4234a72432c6f1c45a55b48e7b1104f7f878b798", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6e1a4cd83190746b6544917f7526fa480ca5f18", "patch": "@@ -1,3 +1,12 @@\n+2020-05-13  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/94969\n+\t* tree-data-dependence.c (constant_access_functions): Rename to...\n+\t(invariant_access_functions): ...this.  Add parameter.  Check for\n+\tinvariant access function, rather than constant.\n+\t(build_classic_dist_vector): Call above function.\n+\t* tree-loop-distribution.c (pg_add_dependence_edges): Add comment.\n+\n 2020-05-13  Hongtao Liu  <hongtao.liu@intel.com>\n \n \tPR target/94118"}, {"sha": "5a4215bbe46e2d84539fb3d5924978c5586b6304", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6e1a4cd83190746b6544917f7526fa480ca5f18", "patch": "@@ -1,3 +1,8 @@\n+2020-05-13  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/94969\n+\t* gcc.dg/tree-ssa/pr94969.c: New test.\n+\n 2020-05-12  Craig Blackmore  <craig.blackmore@embecosm.com>\n \n \t* gcc.target/riscv/shorten-memrefs-1.c: New test."}, {"sha": "056b015f97c554754010398044b8059f53eca34a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94969.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94969.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94969.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94969.c?ref=f6e1a4cd83190746b6544917f7526fa480ca5f18", "patch": "@@ -0,0 +1,28 @@\n+/* PR tree-optimization/52267 */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fdump-tree-ldist-details\" } */\n+\n+int a = 0, b = 0, c = 0;\n+struct S {\n+  signed m : 7;\n+  signed e : 2;\n+};\n+struct S f[2] = {{0, 0}, {0, 0}};\n+struct S g = {0, 0};\n+\n+void __attribute__((noinline))\n+k()\n+{\n+  for (; c <= 1; c++) {\n+    f[b] = g;\n+    f[b].e ^= 1;\n+  }\n+}\n+int main()\n+{\n+  k();\n+  if (f[b].e != 1)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"ldist\" \"Loop 1 distributed: split to 3 loops\"} } */"}, {"sha": "5505ba46778501b25862c064798e3cecc8212477", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=f6e1a4cd83190746b6544917f7526fa480ca5f18", "patch": "@@ -4821,17 +4821,19 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n   return true;\n }\n \n-/* Return true when the DDR contains only constant access functions.  */\n+/* Return true when the DDR contains only invariant access functions wrto. loop\n+   number LNUM.  */\n \n static bool\n-constant_access_functions (const struct data_dependence_relation *ddr)\n+invariant_access_functions (const struct data_dependence_relation *ddr,\n+\t\t\t    int lnum)\n {\n   unsigned i;\n   subscript *sub;\n \n   FOR_EACH_VEC_ELT (DDR_SUBSCRIPTS (ddr), i, sub)\n-    if (!evolution_function_is_constant_p (SUB_ACCESS_FN (sub, 0))\n-\t|| !evolution_function_is_constant_p (SUB_ACCESS_FN (sub, 1)))\n+    if (!evolution_function_is_invariant_p (SUB_ACCESS_FN (sub, 0), lnum)\n+\t|| !evolution_function_is_invariant_p (SUB_ACCESS_FN (sub, 1), lnum))\n       return false;\n \n   return true;\n@@ -5030,7 +5032,7 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n       dist_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n       save_dist_v (ddr, dist_v);\n \n-      if (constant_access_functions (ddr))\n+      if (invariant_access_functions (ddr, loop_nest->num))\n \tadd_distance_for_zero_overlaps (ddr);\n \n       if (DDR_NB_LOOPS (ddr) > 1)"}, {"sha": "b122c3964a093d33ce2657588186dfb79e04d7b2", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e1a4cd83190746b6544917f7526fa480ca5f18/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=f6e1a4cd83190746b6544917f7526fa480ca5f18", "patch": "@@ -2080,7 +2080,8 @@ loop_distribution::pg_add_dependence_edges (struct graph *rdg, int dir,\n \t\tthis_dir = -this_dir;\n \n \t      /* Known dependences can still be unordered througout the\n-\t\t iteration space, see gcc.dg/tree-ssa/ldist-16.c.  */\n+\t\t iteration space, see gcc.dg/tree-ssa/ldist-16.c and\n+\t\t gcc.dg/tree-ssa/pr94969.c.  */\n \t      if (DDR_NUM_DIST_VECTS (ddr) != 1)\n \t\tthis_dir = 2;\n \t      /* If the overlap is exact preserve stmt order.  */"}]}