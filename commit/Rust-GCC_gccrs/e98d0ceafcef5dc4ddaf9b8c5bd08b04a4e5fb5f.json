{"sha": "e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4ZDBjZWFmY2VmNWRjNGRkYWY5YjhjNWJkMDhiMDRhNGU1ZmI1Zg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-04-11T23:42:57Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-04-11T23:42:57Z"}, "message": "* testsuite/README: Add DejaGnu specific documentation.\n\nFrom-SVN: r41274", "tree": {"sha": "9cc9511aedad8b379a7522f03675f9889b1903c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cc9511aedad8b379a7522f03675f9889b1903c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f/comments", "author": null, "committer": null, "parents": [{"sha": "c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8abc684266b1a9b2059f9d3263c4bc5d60c10af"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "588e8d8d6b2f87478c7d6e64905aa9b3026da552", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "patch": "@@ -1,3 +1,7 @@\n+2001-04-12  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* testsuite/README: Add DejaGnu specific documentation.\n+\n 2001-04-11  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* acinclude.m4: AC_CHECK_TOOL for expect."}, {"sha": "c48f4db55b612ec9fa29df82fc518e387736d615", "filename": "libstdc++-v3/testsuite/README", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=e98d0ceafcef5dc4ddaf9b8c5bd08b04a4e5fb5f", "patch": "@@ -1,12 +1,94 @@\n-We're in the process of converting the existing testsuite machinery to\n+  We're in the process of converting the existing testsuite machinery to \n use the new style DejaGnu framework.  Eventually, we'll abandon\n-../mkcheck.in in favor of this new testsuite framework.  \n+../mkcheck.in in favor of this new testsuite framework. \n \n-  Basically, a testcase contains dg-keywords (see dg.exp) indicating\n+Basically, a testcase contains dg-keywords (see dg.exp) indicating\n what to do and what kinds of behaviour are to be expected.  New\n-testcases should be written with the new style DejaGnu framework in mind.\n+testcases should be written with the new style DejaGnu framework in\n+mind.\n \n-  The V3 testing framework supports additional keywords for the purpose\n+To ease transition, here is the list of dg-keyword documentation\n+lifted from dg.exp -- eventuaklly we should improve DejaGnu\n+documentation, but getting checkin account currently demands Pyrrhic\n+effort. \n+\n+# The currently supported options are:\n+#\n+# dg-prms-id N\n+#\tset prms_id to N\n+#\n+# dg-options \"options ...\" [{ target selector }]\n+#\tspecify special options to pass to the tool (eg: compiler)\n+#\n+# dg-do do-what-keyword [{ target/xfail selector }]\n+#\t`do-what-keyword' is tool specific and is passed unchanged to\n+#\t${tool}-dg-test.  An example is gcc where `keyword' can be any of:\n+#\tpreprocess|compile|assemble|link|run\n+#\tand will do one of: produce a .i, produce a .s, produce a .o,\n+#\tproduce an a.out, or produce an a.out and run it (the default is\n+#\tcompile).\n+#\n+# dg-error regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate an error message <regexp> is expected on this line\n+#\t(the test fails if it doesn't occur)\n+#\tLinenum=0 for general tool messages (eg: -V arg missing).\n+#\t\".\" means the current line.\n+#\n+# dg-warning regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate a warning message <regexp> is expected on this line\n+#\t(the test fails if it doesn't occur)\n+#\n+# dg-bogus regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n+#\tindicate a bogus error message <regexp> use to occur here\n+#\t(the test fails if it does occur)\n+#\n+# dg-build regexp comment [{ target/xfail selector }]\n+#\tindicate the build use to fail for some reason\n+#\t(errors covered here include bad assembler generated, tool crashes,\n+#\tand link failures)\n+#\t(the test fails if it does occur)\n+#\n+# dg-excess-errors comment [{ target/xfail selector }]\n+#\tindicate excess errors are expected (any line)\n+#\t(this should only be used sparingly and temporarily)\n+#\n+# dg-output regexp [{ target selector }]\n+#\tindicate the expected output of the program is <regexp>\n+#\t(there may be multiple occurrences of this, they are concatenated)\n+#\n+# dg-final { tcl code }\n+#\tadd some tcl code to be run at the end\n+#\t(there may be multiple occurrences of this, they are concatenated)\n+#\t(unbalanced braces must be \\-escaped)\n+#\n+# \"{ target selector }\" is a list of expressions that determine whether the\n+# test succeeds or fails for a particular target, or in some cases whether the\n+# option applies for a particular target.  If the case of `dg-do' it specifies\n+# whether the testcase is even attempted on the specified target.\n+#\n+# The target selector is always optional.  The format is one of:\n+#\n+# { xfail *-*-* ... } - the test is expected to fail for the given targets\n+# { target *-*-* ... } - the option only applies to the given targets\n+#\n+# At least one target must be specified, use *-*-* for \"all targets\".\n+# At present it is not possible to specify both `xfail' and `target'.\n+# \"native\" may be used in place of \"*-*-*\".\n+#\n+# Example:\n+#\n+#       [ ... some complicated code ... ]\n+#\treturn a; /* { dg-build \"fatal\" \"ran out of spill regs\" { xfail i386-*-* } } */\n+#\n+# In this example, the compiler use to crash on the \"return a;\" for some\n+# target and that it still does crash on i386-*-*.  Admittedly, this is a\n+# contrived example.\n+#\n+# ??? It might be possible to add additional optional arguments by having\n+# something like: { dg-error \".*syntax.*\" \"syntax error\" { { foo 1 } ... } }\n+\n+\n+The V3 testing framework supports additional keywords for the purpose\n of easing the job of writing testcases.  All V3-keywords are of the\n form @xxx@.  Currently supported keywords include:\n "}]}