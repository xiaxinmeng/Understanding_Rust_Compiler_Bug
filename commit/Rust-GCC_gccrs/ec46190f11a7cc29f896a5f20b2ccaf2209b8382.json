{"sha": "ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0NjE5MGYxMWE3Y2MyOWY4OTZhNWYyMGIyY2NhZjIyMDliODM4Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-05T14:22:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-05T14:22:48Z"}, "message": "alpha.c (alpha_fold_vector_minmax): Create VIEW_CONVERT_EXPR to convert output to long_integer_type_node.\n\n\t* config/alpha/alpha.c (alpha_fold_vector_minmax): Create\n\tVIEW_CONVERT_EXPR to convert output to long_integer_type_node.\n\n\t(alpha_emit_conditional_branch): Do not generate direct branch\n\tfor UNORDERED comparisons.\n\nFrom-SVN: r142474", "tree": {"sha": "ddab6f522bcc1ce2b865013bf2e87f2d515ff2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddab6f522bcc1ce2b865013bf2e87f2d515ff2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/comments", "author": null, "committer": null, "parents": [{"sha": "a4ab9629175ad725a9a091b194352d0c3e01ef09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ab9629175ad725a9a091b194352d0c3e01ef09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ab9629175ad725a9a091b194352d0c3e01ef09"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "22ffd3aab03c926d2d3f293dd3273a3ac38ad058", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -1,3 +1,11 @@\n+2008-12-05 Uros Bizjak <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_fold_vector_minmax): Create\n+\tVIEW_CONVERT_EXPR to convert output to long_integer_type_node.\n+\n+\t(alpha_emit_conditional_branch): Do not generate direct branch\n+\tfor UNORDERED comparisons.\n+\n 2008-12-05  Andreas Schwab  <schwab@suse.de>\n \n \t* config/rs6000/linux-unwind.h (frob_update_context): Check for\n@@ -50,8 +58,7 @@\n \n 2008-12-04  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/stormy16/stormy16.md: Remove extraneous spaces and\n-\tquotes.\n+\t* config/stormy16/stormy16.md: Remove extraneous spaces and quotes.\n \t* config/stormy16/stormy16.c: Remove extraneous spaces and fix up\n \tformatting of quotes.\n "}, {"sha": "26feea52ddad04cc96a099df19d086c0524c1d32", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -2453,7 +2453,7 @@ alpha_emit_conditional_branch (enum rtx_code code)\n   if (alpha_compare.fp_p)\n     {\n       cmp_mode = DFmode;\n-      if (flag_unsafe_math_optimizations)\n+      if (flag_unsafe_math_optimizations && cmp_code != UNORDERED)\n \t{\n \t  /* When we are not as concerned about non-finite values, and we\n \t     are comparing against zero, we can branch directly.  */\n@@ -6825,7 +6825,7 @@ alpha_fold_vector_minmax (enum tree_code code, tree op[], tree vtype)\n   tree op0 = fold_convert (vtype, op[0]);\n   tree op1 = fold_convert (vtype, op[1]);\n   tree val = fold_build2 (code, vtype, op0, op1);\n-  return fold_convert (long_integer_type_node, val);\n+  return fold_build1 (VIEW_CONVERT_EXPR, long_integer_type_node, val);\n }\n \n static tree"}, {"sha": "6d33308b730c9988f63744d5d54b6a4efbbb6f49", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -27,9 +27,18 @@\n /* Implemented from the specification included in the Intel C++ Compiler\n    User Guide and Reference, version 11.0.  */\n \n-#ifndef _IMMINTRIN_H_INCLUDED\n-# error \"Never use <avxintrin.h> directly; include <immintrin.h> instead.\"\n-#endif\n+#ifndef _AVXINTRIN_H_INCLUDED\n+#define _AVXINTRIN_H_INCLUDED\n+\n+#if !defined (__AVX__)\n+# error \"AVX instruction set not enabled\"\n+#else\n+\n+/* We need definitions from the SSE4.1, SSSE3, SSE3, SSE2 and SSE\n+   header files.  */\n+#include <smmintrin.h>\n+\n+/* AVX */\n \n /* Internal data types for implementing the intrinsics.  */\n typedef double __v4df __attribute__ ((__vector_size__ (32)));\n@@ -1469,3 +1478,7 @@ _mm256_castsi128_si256 (__m128i __A)\n {\n   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);\n }\n+\n+#endif /* __AVX__ */\n+\n+#endif /* _AVXINTRIN_H_INCLUDED */"}, {"sha": "f77aec77e7fb82b9b112caa4a749c6235a40574e", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -18,7 +18,7 @@\n #define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n #define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n \n-/* immintrin.h */\n+/* avxintrin.h */\n #define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n #define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n #define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n@@ -133,7 +133,7 @@\n #define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n+#include <avxintrin.h>\n #include <wmmintrin.h>\n #include <bmmintrin.h>\n-#include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "501e81e9f0fc714b81d502fc69d4b3cdddf7f9cb", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -12,9 +12,9 @@\n #define extern\n #define __inline\n \n+#include <avxintrin.h>\n #include <wmmintrin.h>\n #include <bmmintrin.h>\n-#include <immintrin.h>\n #include <mm3dnow.h>\n \n #define _CONCAT(x,y) x ## y\n@@ -53,7 +53,7 @@\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n \n-/* immintrin.h */\n+/* avxintrin.h */\n test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)"}, {"sha": "0701fa306891cd759a6e8547afb7b706e9741422", "filename": "gcc/testsuite/gcc.target/i386/intrinsics.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -0,0 +1,9 @@\n+/* Check that all x86 intrinsics can be included together.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+\n+#include <immintrin.h>\n+#include <bmmintrin.h>\n+#include <mm3dnow.h>\n+\n+int dummy;"}]}