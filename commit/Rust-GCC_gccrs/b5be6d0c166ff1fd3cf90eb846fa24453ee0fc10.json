{"sha": "b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViZTZkMGMxNjZmZjFmZDNjZjkwZWI4NDZmYTI0NDUzZWUwZmMxMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-08-26T16:45:51Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-08-26T16:45:51Z"}, "message": "PR c++/87029, Implement -Wredundant-move.\n\n\t* c.opt (Wredundant-move): New option.\n\n\t* typeck.c (treat_lvalue_as_rvalue_p): New function.\n\t(maybe_warn_pessimizing_move): Call convert_from_reference.\n\tWarn about redundant moves.\n\n\t* doc/invoke.texi: Document -Wredundant-move.\n\n\t* g++.dg/cpp0x/Wredundant-move1.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move2.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move3.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move4.C: New test.\n\nFrom-SVN: r263863", "tree": {"sha": "3eee6900b2acb67b5d22f1a855250865510a30f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eee6900b2acb67b5d22f1a855250865510a30f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0940fe595548ec397ffdb6c2f8fa4392c1c15ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0940fe595548ec397ffdb6c2f8fa4392c1c15ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0940fe595548ec397ffdb6c2f8fa4392c1c15ec5"}], "stats": {"total": 400, "additions": 391, "deletions": 9}, "files": [{"sha": "386dc8e886a5631027da776414d1ac9ac4044032", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -1,3 +1,8 @@\n+2018-08-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87029, Implement -Wredundant-move.\n+\t* doc/invoke.texi: Document -Wredundant-move.\n+\n 2018-08-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/87059"}, {"sha": "f833d0a17221d2b0c054c5653e65f5b7590b3502", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -1,3 +1,8 @@\n+2018-08-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87029, Implement -Wredundant-move.\n+\t* c.opt (Wredundant-move): New option.\n+\n 2018-08-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86981, Implement -Wpessimizing-move."}, {"sha": "31a2b972919eb7e96899fc88e695f59444968875", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -985,6 +985,10 @@ Wredundant-decls\n C ObjC C++ ObjC++ Var(warn_redundant_decls) Warning\n Warn about multiple declarations of the same object.\n \n+Wredundant-move\n+C++ ObjC++ Var(warn_redundant_move) Warning LangEnabledBy(C++ ObjC++,Wextra)\n+Warn about redundant calls to std::move.\n+\n Wregister\n C++ ObjC++ Var(warn_register) Warning\n Warn about uses of register storage specifier."}, {"sha": "f1ae08e6f7da12a9206da1170c5a3e6c2e41c5af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -3,6 +3,11 @@\n \tPR c++/87080\n \t* typeck.c (maybe_warn_pessimizing_move): Do nothing in a template.\n \n+\tPR c++/87029, Implement -Wredundant-move.\n+\t* typeck.c (treat_lvalue_as_rvalue_p): New function.\n+\t(maybe_warn_pessimizing_move): Call convert_from_reference.\n+\tWarn about redundant moves.\n+\n 2018-08-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/67012"}, {"sha": "fa3ba7156984bc333d315aa1d1925dc04db7bbaa", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -9178,16 +9178,31 @@ can_do_nrvo_p (tree retval, tree functype)\n \t  && !TYPE_VOLATILE (TREE_TYPE (retval)));\n }\n \n+/* Returns true if we should treat RETVAL, an expression being returned,\n+   as if it were designated by an rvalue.  See [class.copy.elision].  */\n+\n+static bool\n+treat_lvalue_as_rvalue_p (tree retval)\n+{\n+  return ((cxx_dialect != cxx98)\n+\t  && ((VAR_P (retval) && !DECL_HAS_VALUE_EXPR_P (retval))\n+\t      || TREE_CODE (retval) == PARM_DECL)\n+\t  && DECL_CONTEXT (retval) == current_function_decl\n+\t  && !TREE_STATIC (retval));\n+}\n+\n /* Warn about wrong usage of std::move in a return statement.  RETVAL\n    is the expression we are returning; FUNCTYPE is the type the function\n    is declared to return.  */\n \n static void\n maybe_warn_pessimizing_move (tree retval, tree functype)\n {\n-  if (!warn_pessimizing_move)\n+  if (!(warn_pessimizing_move || warn_redundant_move))\n     return;\n \n+  location_t loc = cp_expr_loc_or_loc (retval, input_location);\n+\n   /* C++98 doesn't know move.  */\n   if (cxx_dialect < cxx11)\n     return;\n@@ -9212,14 +9227,24 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n \t  STRIP_NOPS (arg);\n \t  if (TREE_CODE (arg) == ADDR_EXPR)\n \t    arg = TREE_OPERAND (arg, 0);\n+\t  arg = convert_from_reference (arg);\n \t  /* Warn if we could do copy elision were it not for the move.  */\n \t  if (can_do_nrvo_p (arg, functype))\n \t    {\n \t      auto_diagnostic_group d;\n-\t      if (warning_at (location_of (retval), OPT_Wpessimizing_move,\n+\t      if (warning_at (loc, OPT_Wpessimizing_move,\n \t\t\t      \"moving a local object in a return statement \"\n \t\t\t      \"prevents copy elision\"))\n-\t\tinform (location_of (retval), \"remove %<std::move%> call\");\n+\t\tinform (loc, \"remove %<std::move%> call\");\n+\t    }\n+\t  /* Warn if the move is redundant.  It is redundant when we would\n+\t     do maybe-rvalue overload resolution even without std::move.  */\n+\t  else if (treat_lvalue_as_rvalue_p (arg))\n+\t    {\n+\t      auto_diagnostic_group d;\n+\t      if (warning_at (loc, OPT_Wredundant_move,\n+\t\t\t      \"redundant move in return statement\"))\n+\t\tinform (loc, \"remove %<std::move%> call\");\n \t    }\n \t}\n     }\n@@ -9499,11 +9524,7 @@ check_return_expr (tree retval, bool *no_warning)\n          Note that these conditions are similar to, but not as strict as,\n \t the conditions for the named return value optimization.  */\n       bool converted = false;\n-      if ((cxx_dialect != cxx98)\n-          && ((VAR_P (retval) && !DECL_HAS_VALUE_EXPR_P (retval))\n-\t      || TREE_CODE (retval) == PARM_DECL)\n-\t  && DECL_CONTEXT (retval) == current_function_decl\n-\t  && !TREE_STATIC (retval)\n+      if (treat_lvalue_as_rvalue_p (retval)\n \t  /* This is only interesting for class type.  */\n \t  && CLASS_TYPE_P (functype))\n \t{"}, {"sha": "985ef9f3510fc61f8cfd63c1ec36d0eaa221daca", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -231,7 +231,7 @@ in the following sections.\n -Wdelete-non-virtual-dtor -Wdeprecated-copy  -Wliteral-suffix @gol\n -Wmultiple-inheritance @gol\n -Wnamespaces  -Wnarrowing @gol\n--Wpessimizing-move @gol\n+-Wpessimizing-move  -Wredundant-move @gol\n -Wnoexcept  -Wnoexcept-type  -Wclass-memaccess @gol\n -Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n -Weffc++  -Wstrict-null-sentinel  -Wtemplates @gol\n@@ -3158,6 +3158,49 @@ But in this example, the @code{std::move} call prevents copy elision.\n \n This warning is enabled by @option{-Wall}.\n \n+@item -Wno-redundant-move @r{(C++ and Objective-C++ only)}\n+@opindex Wredundant-move\n+@opindex Wno-redundant-move\n+This warning warns about redundant calls to @code{std::move}; that is, when\n+a move operation would have been performed even without the @code{std::move}\n+call.  This happens because the compiler is forced to treat the object as if\n+it were an rvalue in certain situations such as returning a local variable,\n+where copy elision isn't applicable.  Consider:\n+\n+@smallexample\n+struct T @{\n+@dots{}\n+@};\n+T fn(T t)\n+@{\n+  @dots{}\n+  return std::move (t);\n+@}\n+@end smallexample\n+\n+Here, the @code{std::move} call is redundant.  Because G++ implements Core\n+Issue 1579, another example is:\n+\n+@smallexample\n+struct T @{ // convertible to U\n+@dots{}\n+@};\n+struct U @{\n+@dots{}\n+@};\n+U fn()\n+@{\n+  T t;\n+  @dots{}\n+  return std::move (t);\n+@}\n+@end smallexample\n+In this example, copy elision isn't applicable because the type of the\n+expression being returned and the function return type differ, yet G++\n+treats the return value as if it were designated by an rvalue.\n+\n+This warning is enabled by @option{-Wextra}.\n+\n @item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n @opindex fext-numeric-literals\n @opindex fno-ext-numeric-literals\n@@ -4112,6 +4155,7 @@ name is still supported, but the newer name is more descriptive.)\n -Wold-style-declaration @r{(C only)}  @gol\n -Woverride-init  @gol\n -Wsign-compare @r{(C only)} @gol\n+-Wredundant-move @r{(only for C++)}  @gol\n -Wtype-limits  @gol\n -Wuninitialized  @gol\n -Wshift-negative-value @r{(in C++03 and in C99 and newer)}  @gol"}, {"sha": "69bc12da284354c04ef8e262ed8849d11c4161cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -3,6 +3,12 @@\n \tPR c++/87080\n \t* g++.dg/cpp0x/Wpessimizing-move5.C: New test.\n \n+\tPR c++/87029, Implement -Wredundant-move.\n+\t* g++.dg/cpp0x/Wredundant-move1.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move2.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move3.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move4.C: New test.\n+\n 2018-08-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/86704"}, {"sha": "5d4a25dbc3b55539ca8d6f7020f9929ef0336acd", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move1.C", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -0,0 +1,106 @@\n+// PR c++/87029\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T {\n+  T() { }\n+  T(const T&) { }\n+  T(T&&) { }\n+};\n+\n+struct U {\n+  U() { }\n+  U(const U&) { }\n+  U(U&&) { }\n+  U(T) { }\n+};\n+\n+T\n+fn1 (T t)\n+{\n+  return t;\n+}\n+\n+T\n+fn2 (T t)\n+{\n+  // Will use move even without std::move.\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+T\n+fn3 (const T t)\n+{\n+  // t is const: will decay into copy.\n+  return t;\n+}\n+\n+T\n+fn4 (const T t)\n+{\n+  // t is const: will decay into copy despite std::move, so it's redundant.\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+int\n+fn5 (int i)\n+{\n+  // Not a class type.\n+  return std::move (i);\n+}\n+\n+T\n+fn6 (T t, bool b)\n+{\n+  if (b)\n+    throw std::move (t);\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+U\n+fn7 (T t)\n+{\n+  // Core 1579 means we'll get a move here.\n+  return t;\n+}\n+\n+U\n+fn8 (T t)\n+{\n+  // Core 1579 means we'll get a move here.  Even without std::move.\n+  return std::move (t);  // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+T\n+fn9 (T& t)\n+{\n+  // T is a reference and the move isn't redundant.\n+  return std::move (t);\n+}\n+\n+T\n+fn10 (T&& t)\n+{\n+  // T is a reference and the move isn't redundant.\n+  return std::move (t);\n+}"}, {"sha": "f181afeeb84d66c981bf0878a2de52b54c397e94", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move2.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -0,0 +1,57 @@\n+// PR c++/87029\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T { };\n+struct U { U(T); };\n+\n+template<typename Tp>\n+T\n+fn1 (T t)\n+{\n+  // Non-dependent type.\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+template<typename Tp1, typename Tp2>\n+Tp1\n+fn2 (Tp2 t)\n+{\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+template<typename Tp1, typename Tp2>\n+Tp1\n+fn3 (Tp2 t)\n+{\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+int\n+main ()\n+{\n+  T t;\n+  fn1<T>(t);\n+  fn2<T, T>(t);\n+  fn3<U, T>(t);\n+}"}, {"sha": "7084134e370595ca837d59099fdfe1fdc42d1c6d", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move3.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move3.C?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/87029\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T { };\n+\n+T\n+fn1 (T t)\n+{\n+  return (1, std::move (t));\n+}\n+\n+T\n+fn2 (T t)\n+{\n+  return [&](){ return std::move (t); }();\n+}\n+\n+T\n+fn3 (T t)\n+{\n+  return [=](){ return std::move (t); }();\n+}"}, {"sha": "aa89e46de9942f63595ff1ceb8bcac605403c53d", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move4.C", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move4.C?ref=b5be6d0c166ff1fd3cf90eb846fa24453ee0fc10", "patch": "@@ -0,0 +1,86 @@\n+// PR c++/87029\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T {\n+  T() { }\n+  T(const T&) { }\n+  T(T&&) { }\n+};\n+\n+struct U {\n+  U() { }\n+  U(const U&) { }\n+  U(U&&) { }\n+  U(T) { }\n+};\n+\n+U\n+fn1 (T t, bool b)\n+{\n+  if (b)\n+    return t;\n+  else\n+    return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+U\n+fn2 (bool b)\n+{\n+  T t;\n+  if (b)\n+    return t;\n+  else\n+    return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+U\n+fn3 (bool b)\n+{\n+  static T t;\n+  if (b)\n+    return t;\n+  else\n+    return std::move (t);\n+}\n+\n+T g;\n+\n+U\n+fn4 (bool b)\n+{\n+  if (b)\n+    return g;\n+  else\n+    return std::move (g);\n+}\n+\n+long int\n+fn5 (bool b)\n+{\n+  int i = 42;\n+  if (b)\n+    return i;\n+  else\n+    return std::move (i);\n+}"}]}