{"sha": "6b8068d653b2fc19de7839d64fc6e19dc420dc30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4MDY4ZDY1M2IyZmMxOWRlNzgzOWQ2NGZjNmUxOWRjNDIwZGMzMA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-07-15T14:38:13Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-07-15T14:38:13Z"}, "message": "remove some usage of expr_list from read_rtx\n\ngcc/ChangeLog:\n\n2015-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* gensupport.c (rtx_handle_directive): Adjust.\n\t* read-rtl.c (apply_iterators): Take vector to add rtxs to\n\tinstead of expr list rtx.\n\t(add_define_attr_for_define_subst): Likewise.\n\t(add_define_subst_attr): Likewise.\n\t(read_subst_mapping): Likewise.\n\t(read_rtx): Likewise.\n\t* rtl.h (read_rtx): Adjust.\n\nFrom-SVN: r225833", "tree": {"sha": "17d6c9dac4cfb44b97a64bf9d87934b9eb70eb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d6c9dac4cfb44b97a64bf9d87934b9eb70eb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b8068d653b2fc19de7839d64fc6e19dc420dc30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8068d653b2fc19de7839d64fc6e19dc420dc30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8068d653b2fc19de7839d64fc6e19dc420dc30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8068d653b2fc19de7839d64fc6e19dc420dc30/comments", "author": null, "committer": null, "parents": [{"sha": "0467e3ebef7688c50fb0141b10c8b5e7e4dbbcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0467e3ebef7688c50fb0141b10c8b5e7e4dbbcdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0467e3ebef7688c50fb0141b10c8b5e7e4dbbcdf"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "b6ee390d3bb959c7a27c2d78be8e29a2cf773dc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b8068d653b2fc19de7839d64fc6e19dc420dc30", "patch": "@@ -1,3 +1,14 @@\n+2015-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* gensupport.c (rtx_handle_directive): Adjust.\n+\t* read-rtl.c (apply_iterators): Take vector to add rtxs to\n+\tinstead of expr list rtx.\n+\t(add_define_attr_for_define_subst): Likewise.\n+\t(add_define_subst_attr): Likewise.\n+\t(read_subst_mapping): Likewise.\n+\t(read_rtx): Likewise.\n+\t* rtl.h (read_rtx): Adjust.\n+\n 2015-07-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (*csinc2<mode>_insn): Use cinc mnemonic."}, {"sha": "67ff5ce1209375aa902c2e5becc32650ff60885f", "filename": "gcc/gensupport.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=6b8068d653b2fc19de7839d64fc6e19dc420dc30", "patch": "@@ -26,6 +26,7 @@\n #include \"errors.h\"\n #include \"read-md.h\"\n #include \"gensupport.h\"\n+#include \"vec.h\"\n \n #define MAX_OPERANDS 40\n \n@@ -2248,11 +2249,14 @@ process_define_subst (void)\n static void\n rtx_handle_directive (int lineno, const char *rtx_name)\n {\n-  rtx queue, x;\n+  auto_vec<rtx, 32> subrtxs;\n+  if (!read_rtx (rtx_name, &subrtxs))\n+    return;\n \n-  if (read_rtx (rtx_name, &queue))\n-    for (x = queue; x; x = XEXP (x, 1))\n-      process_rtx (XEXP (x, 0), lineno);\n+  rtx x;\n+  unsigned int i;\n+  FOR_EACH_VEC_ELT (subrtxs, i, x)\n+    process_rtx (x, lineno);\n }\n \n /* Comparison function for the mnemonic hash table.  */"}, {"sha": "0f9e618879ab2828e3b5bb524fced567975000bc", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=6b8068d653b2fc19de7839d64fc6e19dc420dc30", "patch": "@@ -506,7 +506,7 @@ add_current_iterators (void **slot, void *data ATTRIBUTE_UNUSED)\n    Build a list of expanded rtxes in the EXPR_LIST pointed to by QUEUE.  */\n \n static void\n-apply_iterators (rtx original, rtx *queue)\n+apply_iterators (rtx original, vec<rtx> *queue)\n {\n   unsigned int i;\n   const char *condition;\n@@ -519,8 +519,7 @@ apply_iterators (rtx original, rtx *queue)\n     {\n       /* Raise an error if any attributes were used.  */\n       apply_attribute_uses ();\n-      XEXP (*queue, 0) = original;\n-      XEXP (*queue, 1) = NULL_RTX;\n+      queue->safe_push (original);\n       return;\n     }\n \n@@ -572,8 +571,7 @@ apply_iterators (rtx original, rtx *queue)\n \t    }\n \t}\n       /* Add the new rtx to the end of the queue.  */\n-      XEXP (*queue, 0) = x;\n-      XEXP (*queue, 1) = NULL_RTX;\n+      queue->safe_push (x);\n \n       /* Lexicographically increment the iterator value sequence.\n \t That is, cycle through iterator values, starting from the right,\n@@ -590,10 +588,6 @@ apply_iterators (rtx original, rtx *queue)\n \t    break;\n \t  iterator->current_value = iterator->values;\n \t}\n-\n-      /* At least one more rtx to go.  Allocate room for it.  */\n-      XEXP (*queue, 1) = rtx_alloc (EXPR_LIST);\n-      queue = &XEXP (*queue, 1);\n     }\n }\n \n@@ -945,7 +939,7 @@ read_mapping (struct iterator_group *group, htab_t table)\n    define_subst ATTR_NAME should be applied.  This attribute is set and\n    defined implicitly and automatically.  */\n static void\n-add_define_attr_for_define_subst (const char *attr_name, rtx *queue)\n+add_define_attr_for_define_subst (const char *attr_name, vec<rtx> *queue)\n {\n   rtx const_str, return_rtx;\n \n@@ -960,14 +954,13 @@ add_define_attr_for_define_subst (const char *attr_name, rtx *queue)\n   XSTR (return_rtx, 1) = xstrdup (\"no,yes\");\n   XEXP (return_rtx, 2) = const_str;\n \n-  XEXP (*queue, 0) = return_rtx;\n-  XEXP (*queue, 1) = NULL_RTX;\n+  queue->safe_push (return_rtx);\n }\n \n /* This routine generates DEFINE_SUBST_ATTR expression with operands\n    ATTR_OPERANDS and places it to QUEUE.  */\n static void\n-add_define_subst_attr (const char **attr_operands, rtx *queue)\n+add_define_subst_attr (const char **attr_operands, vec<rtx> *queue)\n {\n   rtx return_rtx;\n   int i;\n@@ -978,8 +971,7 @@ add_define_subst_attr (const char **attr_operands, rtx *queue)\n   for (i = 0; i < 4; i++)\n     XSTR (return_rtx, i) = xstrdup (attr_operands[i]);\n \n-  XEXP (*queue, 0) = return_rtx;\n-  XEXP (*queue, 1) = NULL_RTX;\n+  queue->safe_push (return_rtx);\n }\n \n /* Read define_subst_attribute construction.  It has next form:\n@@ -992,18 +984,17 @@ add_define_subst_attr (const char **attr_operands, rtx *queue)\n \n static void\n read_subst_mapping (htab_t subst_iters_table, htab_t subst_attrs_table,\n-\t\t    rtx *queue)\n+\t\t    vec<rtx> *queue)\n {\n   struct mapping *m;\n   struct map_value **end_ptr;\n   const char *attr_operands[4];\n-  rtx * queue_elem = queue;\n   int i;\n \n   for (i = 0; i < 4; i++)\n     attr_operands[i] = read_string (false);\n \n-  add_define_subst_attr (attr_operands, queue_elem);\n+  add_define_subst_attr (attr_operands, queue);\n \n   bind_subst_iter_and_attr (attr_operands[1], attr_operands[0]);\n \n@@ -1015,11 +1006,7 @@ read_subst_mapping (htab_t subst_iters_table, htab_t subst_attrs_table,\n       end_ptr = add_map_value (end_ptr, 1, \"\");\n       end_ptr = add_map_value (end_ptr, 2, \"\");\n \n-      /* Add element to the queue.  */\n-      XEXP (*queue, 1) = rtx_alloc (EXPR_LIST);\n-      queue_elem = &XEXP (*queue, 1);\n-\n-      add_define_attr_for_define_subst (attr_operands[1], queue_elem);\n+      add_define_attr_for_define_subst (attr_operands[1], queue);\n     }\n \n   m = add_mapping (&substs, subst_attrs_table, attr_operands[0]);\n@@ -1050,15 +1037,15 @@ check_code_iterator (struct mapping *iterator)\n    store the list of rtxes as an EXPR_LIST in *X.  */\n \n bool\n-read_rtx (const char *rtx_name, rtx *x)\n+read_rtx (const char *rtx_name, vec<rtx> *rtxen)\n {\n-  static rtx queue_head;\n+  static bool initialized = false;\n \n   /* Do one-time initialization.  */\n-  if (queue_head == 0)\n+  if (!initialized)\n     {\n       initialize_iterators ();\n-      queue_head = rtx_alloc (EXPR_LIST);\n+      initialized = true;\n     }\n \n   /* Handle various rtx-related declarations that aren't themselves\n@@ -1100,19 +1087,17 @@ read_rtx (const char *rtx_name, rtx *x)\n     }\n   if (strcmp (rtx_name, \"define_subst_attr\") == 0)\n     {\n-      read_subst_mapping (substs.iterators, substs.attrs, &queue_head);\n-      *x = queue_head;\n+      read_subst_mapping (substs.iterators, substs.attrs, rtxen);\n \n       /* READ_SUBST_MAPPING could generate a new DEFINE_ATTR.  Return\n \t TRUE to process it.  */\n       return true;\n     }\n \n-  apply_iterators (read_rtx_code (rtx_name), &queue_head);\n+  apply_iterators (read_rtx_code (rtx_name), rtxen);\n   iterator_uses.truncate (0);\n   attribute_uses.truncate (0);\n \n-  *x = queue_head;\n   return true;\n }\n "}, {"sha": "f363ed42160d34e1295496235dfe49f63e332a1f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8068d653b2fc19de7839d64fc6e19dc420dc30/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6b8068d653b2fc19de7839d64fc6e19dc420dc30", "patch": "@@ -3613,7 +3613,7 @@ extern void init_varasm_once (void);\n extern rtx make_debug_expr_from_rtl (const_rtx);\n \n /* In read-rtl.c */\n-extern bool read_rtx (const char *, rtx *);\n+extern bool read_rtx (const char *, vec<rtx> *);\n \n /* In alias.c */\n extern rtx canon_rtx (rtx);"}]}