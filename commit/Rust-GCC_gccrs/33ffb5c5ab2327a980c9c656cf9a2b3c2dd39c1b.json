{"sha": "33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNmZmI1YzVhYjIzMjdhOTgwYzljNjU2Y2Y5YTJiM2MyZGQzOWMxYg==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2012-11-09T13:18:49Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2012-11-09T13:18:49Z"}, "message": "rtl.h (CONST_SCALAR_INT_P): New macro.\n\n2012-11-09  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* rtl.h (CONST_SCALAR_INT_P): New macro.\n   \t* cfgexpand.c (expand_debug_locations): Changed to use\n\tCONST_SCALAR_INT_P macro.\n\t* combine.c (try_combine, subst, make_extraction,\n\tgen_lowpart_for_combine): Ditto.\n\t* cselib.c (entry_and_rtx_equal_p, rtx_equal_for_cselib_1): Ditto.\n\t* dwarf2out.c (loc_descriptor): Ditto.\n\t* emit-rtl.c (gen_lowpart_common): Ditto.\n\t* ira-costs.c (record_reg_classes, record_address_regs): Ditto.\n\t* ira-lives.c (single_reg_class): Ditto.\n\t* recog.c (simplify_while_replacing, asm_operand_ok,\n\tconstrain_operands): Ditto.\n\t* reload.c (find_reloads): Ditto.\n\t* simplify-rtx.c (simplify_unary_operation_1,\n\tsimplify_const_unary_operation, simplify_binary_operation_1,\n\tsimplify_const_binary_operation, simplify_relational_operation_1,\n\tsimplify_subreg): Ditto.\n\nFrom-SVN: r193360", "tree": {"sha": "14eb70250d56758d9b1d2e729de8d07b9421d0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14eb70250d56758d9b1d2e729de8d07b9421d0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a15c2cf68b2e76a4c0d08361eaba35efa6b99f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a15c2cf68b2e76a4c0d08361eaba35efa6b99f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a15c2cf68b2e76a4c0d08361eaba35efa6b99f3"}], "stats": {"total": 147, "additions": 79, "deletions": 68}, "files": [{"sha": "c94d07bae07d6767dd23241df0fb8829d66c6954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -1,3 +1,23 @@\n+2012-11-09  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* rtl.h (CONST_SCALAR_INT_P): New macro.\n+   \t* cfgexpand.c (expand_debug_locations): Changed to use\n+\tCONST_SCALAR_INT_P macro.\n+\t* combine.c (try_combine, subst, make_extraction,\n+\tgen_lowpart_for_combine): Ditto.\n+\t* cselib.c (entry_and_rtx_equal_p, rtx_equal_for_cselib_1): Ditto.\n+\t* dwarf2out.c (loc_descriptor): Ditto.\n+\t* emit-rtl.c (gen_lowpart_common): Ditto.\n+\t* ira-costs.c (record_reg_classes, record_address_regs): Ditto.\n+\t* ira-lives.c (single_reg_class): Ditto.\n+\t* recog.c (simplify_while_replacing, asm_operand_ok,\n+\tconstrain_operands): Ditto.\n+\t* reload.c (find_reloads): Ditto.\n+\t* simplify-rtx.c (simplify_unary_operation_1,\n+\tsimplify_const_unary_operation, simplify_binary_operation_1,\n+\tsimplify_const_binary_operation, simplify_relational_operation_1,\n+\tsimplify_subreg): Ditto.\n+\n 2012-11-09  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/54385"}, {"sha": "0bd9d1dceb50a39475c957e13eed1a4864ae718c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -3647,9 +3647,8 @@ expand_debug_locations (void)\n \n \t    gcc_assert (mode == GET_MODE (val)\n \t\t\t|| (GET_MODE (val) == VOIDmode\n-\t\t\t    && (CONST_INT_P (val)\n+\t\t\t    && (CONST_SCALAR_INT_P (val)\n \t\t\t\t|| GET_CODE (val) == CONST_FIXED\n-\t\t\t\t|| CONST_DOUBLE_AS_INT_P (val) \n \t\t\t\t|| GET_CODE (val) == LABEL_REF)));\n \t  }\n "}, {"sha": "4875c967f4f78f558793007ae8852d033ae9d2d9", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -2619,16 +2619,19 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n      constant.  */\n   if (i1 == 0\n       && (temp = single_set (i2)) != 0\n-      && (CONST_INT_P (SET_SRC (temp))\n-\t  || CONST_DOUBLE_AS_INT_P (SET_SRC (temp)))\n+      && CONST_SCALAR_INT_P (SET_SRC (temp))\n       && GET_CODE (PATTERN (i3)) == SET\n-      && (CONST_INT_P (SET_SRC (PATTERN (i3)))\n-\t  || CONST_DOUBLE_AS_INT_P (SET_SRC (PATTERN (i3))))\n+      && CONST_SCALAR_INT_P (SET_SRC (PATTERN (i3)))\n       && reg_subword_p (SET_DEST (PATTERN (i3)), SET_DEST (temp)))\n     {\n       rtx dest = SET_DEST (PATTERN (i3));\n       int offset = -1;\n       int width = 0;\n+      \n+      /* There are not explicit tests to make sure that this is not a\n+\t float, but there is code here that would not be correct if it\n+\t was.  */\n+      gcc_assert (GET_MODE_CLASS (GET_MODE (SET_SRC (temp))) != MODE_FLOAT);\n \n       if (GET_CODE (dest) == ZERO_EXTRACT)\n \t{\n@@ -5104,8 +5107,7 @@ subst (rtx x, rtx from, rtx to, int in_dest, int in_cond, int unique_copy)\n \t      if (GET_CODE (new_rtx) == CLOBBER && XEXP (new_rtx, 0) == const0_rtx)\n \t\treturn new_rtx;\n \n-\t      if (GET_CODE (x) == SUBREG\n-\t\t  && (CONST_INT_P (new_rtx) || CONST_DOUBLE_AS_INT_P (new_rtx)))\n+\t      if (GET_CODE (x) == SUBREG && CONST_SCALAR_INT_P (new_rtx))\n \t\t{\n \t\t  enum machine_mode mode = GET_MODE (x);\n \n@@ -7134,7 +7136,7 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       if (mode == tmode)\n \treturn new_rtx;\n \n-      if (CONST_INT_P (new_rtx) || CONST_DOUBLE_AS_INT_P (new_rtx))\n+      if (CONST_SCALAR_INT_P (new_rtx))\n \treturn simplify_unary_operation (unsignedp ? ZERO_EXTEND : SIGN_EXTEND,\n \t\t\t\t\t mode, new_rtx, tmode);\n \n@@ -10658,8 +10660,7 @@ gen_lowpart_for_combine (enum machine_mode omode, rtx x)\n   /* We can only support MODE being wider than a word if X is a\n      constant integer or has a mode the same size.  */\n   if (GET_MODE_SIZE (omode) > UNITS_PER_WORD\n-      && ! ((CONST_INT_P (x) || CONST_DOUBLE_AS_INT_P (x))\n-\t    || isize == osize))\n+      && ! (CONST_SCALAR_INT_P (x) || isize == osize))\n     goto fail;\n \n   /* X might be a paradoxical (subreg (mem)).  In that case, gen_lowpart"}, {"sha": "92193ba9bcb82965d66d2fd197240a740e92a273", "filename": "gcc/cselib.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -537,17 +537,15 @@ entry_and_rtx_equal_p (const void *entry, const void *x_arg)\n   rtx x = CONST_CAST_RTX ((const_rtx)x_arg);\n   enum machine_mode mode = GET_MODE (x);\n \n-  gcc_assert (!CONST_INT_P (x) && GET_CODE (x) != CONST_FIXED\n-\t      && (mode != VOIDmode || GET_CODE (x) != CONST_DOUBLE));\n+  gcc_assert (!CONST_SCALAR_INT_P (x) && GET_CODE (x) != CONST_FIXED);\n \n   if (mode != GET_MODE (v->val_rtx))\n     return 0;\n \n   /* Unwrap X if necessary.  */\n   if (GET_CODE (x) == CONST\n-      && (CONST_INT_P (XEXP (x, 0))\n-\t  || GET_CODE (XEXP (x, 0)) == CONST_FIXED\n-\t  || GET_CODE (XEXP (x, 0)) == CONST_DOUBLE))\n+      && (CONST_SCALAR_INT_P (XEXP (x, 0))\n+\t  || GET_CODE (XEXP (x, 0)) == CONST_FIXED))\n     x = XEXP (x, 0);\n \n   /* We don't guarantee that distinct rtx's have different hash values,\n@@ -1030,9 +1028,7 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, enum machine_mode memmode)\n static rtx\n wrap_constant (enum machine_mode mode, rtx x)\n {\n-  if (!CONST_INT_P (x) \n-      && GET_CODE (x) != CONST_FIXED\n-      && !CONST_DOUBLE_AS_INT_P (x))\n+  if ((!CONST_SCALAR_INT_P (x)) && GET_CODE (x) != CONST_FIXED)\n     return x;\n   gcc_assert (mode != VOIDmode);\n   return gen_rtx_CONST (mode, x);"}, {"sha": "823b49732c43274a673b7d60b6c5184881e54c8c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -13023,8 +13023,8 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \n     case CONST:\n       if (mode == VOIDmode\n-\t  || GET_CODE (XEXP (rtl, 0)) == CONST_INT\n-\t  || GET_CODE (XEXP (rtl, 0)) == CONST_DOUBLE\n+\t  || CONST_SCALAR_INT_P (XEXP (rtl, 0))\n+\t  || CONST_DOUBLE_AS_FLOAT_P (XEXP (rtl, 0))\n \t  || GET_CODE (XEXP (rtl, 0)) == CONST_VECTOR)\n \t{\n \t  loc_result = loc_descriptor (XEXP (rtl, 0), mode, initialized);"}, {"sha": "95bbfa7c8b695e932237606fdf2652e52b00e9ad", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -1249,7 +1249,7 @@ gen_lowpart_common (enum machine_mode mode, rtx x)\n     }\n   else if (GET_CODE (x) == SUBREG || REG_P (x)\n \t   || GET_CODE (x) == CONCAT || GET_CODE (x) == CONST_VECTOR\n-\t   || CONST_DOUBLE_P (x) || CONST_INT_P (x))\n+\t   || CONST_DOUBLE_AS_FLOAT_P (x) || CONST_SCALAR_INT_P (x))\n     return simplify_gen_subreg (mode, x, innermode, offset);\n \n   /* Otherwise, we can't do this.  */"}, {"sha": "b2060ef3f32b74e591b2e931fee929bd63d25bfe", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -667,7 +667,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t  break;\n \n \t\tcase 's':\n-\t\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op)) \n+\t\t  if (CONST_SCALAR_INT_P (op)) \n \t\t    break;\n \n \t\tcase 'i':\n@@ -677,7 +677,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t  break;\n \n \t\tcase 'n':\n-\t\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op)) \n+\t\t  if (CONST_SCALAR_INT_P (op)) \n \t\t    win = 1;\n \t\t  break;\n \n@@ -1068,7 +1068,7 @@ record_address_regs (enum machine_mode mode, addr_space_t as, rtx x,\n \n \t/* If the second operand is a constant integer, it doesn't\n \t   change what class the first operand must be.  */\n-\telse if (code1 == CONST_INT || code1 == CONST_DOUBLE)\n+\telse if (CONST_SCALAR_INT_P (arg1))\n \t  record_address_regs (mode, as, arg0, context, PLUS, code1, scale);\n \t/* If the second operand is a symbolic constant, the first\n \t   operand must be an index register.  */"}, {"sha": "f8a0fa1ee1f7ea1486ed5424615bb4b710713477", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -779,22 +779,16 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \t  break;\n \n \tcase 'n':\n-\t  if (CONST_INT_P (op)\n-\t      || CONST_DOUBLE_AS_INT_P (op)\n-\t      || (equiv_const != NULL_RTX\n-\t\t  && (CONST_INT_P (equiv_const)\n-\t\t      || CONST_DOUBLE_AS_INT_P (equiv_const))))\n+\t  if (CONST_SCALAR_INT_P (op)\n+\t      || (equiv_const != NULL_RTX && CONST_SCALAR_INT_P (equiv_const)))\n \t    return NO_REGS;\n \t  break;\n \n \tcase 's':\n-\t  if ((CONSTANT_P (op) \n-\t       && !CONST_INT_P (op) \n-\t       && !CONST_DOUBLE_AS_INT_P (op))\n+\t  if ((CONSTANT_P (op) && !CONST_SCALAR_INT_P (op))\n \t      || (equiv_const != NULL_RTX\n \t\t  && CONSTANT_P (equiv_const)\n-\t\t  && !CONST_INT_P (equiv_const)\n-\t\t  && !CONST_DOUBLE_AS_INT_P (equiv_const)))\n+\t\t  && !CONST_SCALAR_INT_P (equiv_const)))\n \t    return NO_REGS;\n \t  break;\n "}, {"sha": "ee68e305256dc3a37158d201679457bd70b1cdba", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -578,8 +578,7 @@ simplify_while_replacing (rtx *loc, rtx to, rtx object,\n \t\t\t (PLUS, GET_MODE (x), XEXP (x, 0), XEXP (x, 1)), 1);\n       break;\n     case MINUS:\n-      if (CONST_INT_P (XEXP (x, 1))\n-\t  || CONST_DOUBLE_AS_INT_P (XEXP (x, 1)))\n+      if (CONST_SCALAR_INT_P (XEXP (x, 1)))\n \tvalidate_change (object, loc,\n \t\t\t simplify_gen_binary\n \t\t\t (PLUS, GET_MODE (x), XEXP (x, 0),\n@@ -1730,7 +1729,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t  break;\n \n \tcase 's':\n-\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n+\t  if (CONST_SCALAR_INT_P (op))\n \t    break;\n \t  /* Fall through.  */\n \n@@ -1740,7 +1739,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t  break;\n \n \tcase 'n':\n-\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n+\t  if (CONST_SCALAR_INT_P (op))\n \t    result = 1;\n \t  break;\n \n@@ -2596,15 +2595,15 @@ constrain_operands (int strict)\n \t\tbreak;\n \n \t      case 's':\n-\t\tif (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n+\t\tif (CONST_SCALAR_INT_P (op))\n \t\t  break;\n \t      case 'i':\n \t\tif (CONSTANT_P (op))\n \t\t  win = 1;\n \t\tbreak;\n \n \t      case 'n':\n-\t\tif (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n+\t\tif (CONST_SCALAR_INT_P (op))\n \t\t  win = 1;\n \t\tbreak;\n "}, {"sha": "aea20727068b4be602ab19a03ab5cea3b998cce2", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -3437,7 +3437,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t    break;\n \n \t\t  case 's':\n-\t\t    if (CONST_INT_P (operand) || CONST_DOUBLE_AS_INT_P (operand))\n+\t\t    if (CONST_SCALAR_INT_P (operand))\n \t\t      break;\n \t\t  case 'i':\n \t\t    if (CONSTANT_P (operand)\n@@ -3446,7 +3446,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t    break;\n \n \t\t  case 'n':\n-\t\t    if (CONST_INT_P (operand) || CONST_DOUBLE_AS_INT_P (operand))\n+\t\t    if (CONST_SCALAR_INT_P (operand))\n \t\t      win = 1;\n \t\t    break;\n "}, {"sha": "16004e2c1075c5172fd34448724066839464b6b9", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -432,6 +432,10 @@ struct GTY((variable_size)) rtvec_def {\n #define CONST_DOUBLE_AS_INT_P(X) \\\n   (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == VOIDmode)\n \n+/* Predicate yielding true iff X is an rtx for a integer const.  */\n+#define CONST_SCALAR_INT_P(X) \\\n+  (CONST_INT_P (X) || CONST_DOUBLE_AS_INT_P (X))\n+\n /* Predicate yielding true iff X is an rtx for a double-int.  */\n #define CONST_DOUBLE_AS_FLOAT_P(X) \\\n   (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode)"}, {"sha": "18223a89f4a14bb44544d2095c3bba4b7164357c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=33ffb5c5ab2327a980c9c656cf9a2b3c2dd39c1b", "patch": "@@ -934,8 +934,8 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  && !HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n \t{\n \t  /* (neg (plus A C)) is simplified to (minus -C A).  */\n-\t  if (CONST_INT_P (XEXP (op, 1))\n-\t      || CONST_DOUBLE_P (XEXP (op, 1)))\n+\t  if (CONST_SCALAR_INT_P (XEXP (op, 1))\n+\t      || CONST_DOUBLE_AS_FLOAT_P (XEXP (op, 1)))\n \t    {\n \t      temp = simplify_unary_operation (NEG, mode, XEXP (op, 1), mode);\n \t      if (temp)\n@@ -1473,7 +1473,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  gcc_assert (GET_MODE_INNER (mode) == GET_MODE_INNER\n \t\t\t\t\t\t(GET_MODE (op)));\n       }\n-      if (CONST_INT_P (op) || CONST_DOUBLE_P (op)\n+      if (CONST_SCALAR_INT_P (op) || CONST_DOUBLE_AS_FLOAT_P (op)\n \t  || GET_CODE (op) == CONST_VECTOR)\n \t{\n           int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n@@ -1526,7 +1526,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n      check the wrong mode (input vs. output) for a conversion operation,\n      such as FIX.  At some point, this should be simplified.  */\n \n-  if (code == FLOAT && (CONST_DOUBLE_AS_INT_P (op) || CONST_INT_P (op)))\n+  if (code == FLOAT && CONST_SCALAR_INT_P (op))\n     {\n       HOST_WIDE_INT hv, lv;\n       REAL_VALUE_TYPE d;\n@@ -1540,8 +1540,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n       d = real_value_truncate (mode, d);\n       return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n     }\n-  else if (code == UNSIGNED_FLOAT\n-\t   && (CONST_DOUBLE_AS_INT_P (op) || CONST_INT_P (op)))\n+  else if (code == UNSIGNED_FLOAT && CONST_SCALAR_INT_P (op))\n     {\n       HOST_WIDE_INT hv, lv;\n       REAL_VALUE_TYPE d;\n@@ -2232,10 +2231,9 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t}\n \n       /* (plus (xor X C1) C2) is (xor X (C1^C2)) if C2 is signbit.  */\n-      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n+      if (CONST_SCALAR_INT_P (op1)\n \t  && GET_CODE (op0) == XOR\n-\t  && (CONST_INT_P (XEXP (op0, 1))\n-\t      || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1)))\n+\t  && CONST_SCALAR_INT_P (XEXP (op0, 1))\n \t  && mode_signbit_p (mode, op1))\n \treturn simplify_gen_binary (XOR, mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, mode, op1,\n@@ -2415,7 +2413,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n       /* (-x - c) may be simplified as (-c - x).  */\n       if (GET_CODE (op0) == NEG\n-\t  && (CONST_INT_P (op1) || CONST_DOUBLE_P (op1)))\n+\t  && (CONST_SCALAR_INT_P (op1) || CONST_DOUBLE_AS_FLOAT_P (op1)))\n \t{\n \t  tem = simplify_unary_operation (NEG, mode, op1, mode);\n \t  if (tem)\n@@ -2773,14 +2771,13 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t return CONST0_RTX (mode);\n \n       /* Canonicalize XOR of the most significant bit to PLUS.  */\n-      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n+      if (CONST_SCALAR_INT_P (op1)\n \t  && mode_signbit_p (mode, op1))\n \treturn simplify_gen_binary (PLUS, mode, op0, op1);\n       /* (xor (plus X C1) C2) is (xor X (C1^C2)) if C1 is signbit.  */\n-      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n+      if (CONST_SCALAR_INT_P (op1)\n \t  && GET_CODE (op0) == PLUS\n-\t  && (CONST_INT_P (XEXP (op0, 1))\n-\t      || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1)))\n+\t  && CONST_SCALAR_INT_P (XEXP (op0, 1))\n \t  && mode_signbit_p (mode, XEXP (op0, 1)))\n \treturn simplify_gen_binary (XOR, mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, mode, op1,\n@@ -3545,9 +3542,11 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  gcc_assert (GET_MODE_INNER (mode) == op1_mode);\n \n \tif ((GET_CODE (trueop0) == CONST_VECTOR\n-\t     || CONST_INT_P (trueop0) || CONST_DOUBLE_P (trueop0))\n+\t     || CONST_SCALAR_INT_P (trueop0) \n+\t     || CONST_DOUBLE_AS_FLOAT_P (trueop0))\n \t    && (GET_CODE (trueop1) == CONST_VECTOR\n-\t\t|| CONST_INT_P (trueop1) || CONST_DOUBLE_P (trueop1)))\n+\t\t|| CONST_SCALAR_INT_P (trueop1) \n+\t\t|| CONST_DOUBLE_AS_FLOAT_P (trueop1)))\n \t  {\n \t    int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n \t    unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n@@ -3644,11 +3643,11 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n   if (VECTOR_MODE_P (mode)\n       && code == VEC_CONCAT\n-      && (CONST_INT_P (op0)\n+      && (CONST_SCALAR_INT_P (op0)\n \t  || GET_CODE (op0) == CONST_FIXED\n-\t  || CONST_DOUBLE_P (op0))\n-      && (CONST_INT_P (op1)\n-\t  || CONST_DOUBLE_P (op1)\n+\t  || CONST_DOUBLE_AS_FLOAT_P (op0))\n+      && (CONST_SCALAR_INT_P (op1)\n+\t  || CONST_DOUBLE_AS_FLOAT_P (op1)\n \t  || GET_CODE (op1) == CONST_FIXED))\n     {\n       unsigned n_elts = GET_MODE_NUNITS (mode);\n@@ -4674,9 +4673,8 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n   /* (eq/ne (xor x C1) C2) simplifies to (eq/ne x (C1^C2)).  */\n   if ((code == EQ || code == NE)\n       && op0code == XOR\n-      && (CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n-      && (CONST_INT_P (XEXP (op0, 1))\n-\t  || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1))))\n+      && CONST_SCALAR_INT_P (op1)\n+      && CONST_SCALAR_INT_P (XEXP (op0, 1)))\n     return simplify_gen_relational (code, mode, cmp_mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, cmp_mode,\n \t\t\t\t\t\t\t XEXP (op0, 1), op1));\n@@ -5693,8 +5691,8 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n   if (outermode == innermode && !byte)\n     return op;\n \n-  if (CONST_INT_P (op)\n-      || CONST_DOUBLE_P (op)\n+  if (CONST_SCALAR_INT_P (op)\n+      || CONST_DOUBLE_AS_FLOAT_P (op)\n       || GET_CODE (op) == CONST_FIXED\n       || GET_CODE (op) == CONST_VECTOR)\n     return simplify_immed_subreg (outermode, op, innermode, byte);"}]}