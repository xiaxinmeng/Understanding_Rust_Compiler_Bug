{"sha": "45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkMzQyNzZjMmYzYTJlZTdmOGJjY2ZkZWYxZGZmZTMxMDE4ZTZkOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-03-25T09:10:03Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-03-25T09:10:03Z"}, "message": "[RS6000] PR70052, ICE compiling _Decimal128 test case\n\ngcc/\n\tPR target/70052\n\t* config/rs6000/constraints.md (j): Simplify.\n\t* config/rs6000/predicates.md (easy_fp_constant): Exclude\n\tdecimal float 0.D.\n\t* config/rs6000/rs6000.md (zero_fp): New mode_attr.\n\t(mov<mode>_hardfloat, mov<mode>_hardfloat32, mov<mode>_hardfloat64,\n\t mov<mode>_64bit_dm, mov<mode>_32bit): Use zero_fp in place of j\n\tin all constraint alternatives.\n\t(movtd_64bit_nodm): Delete \"j\" constraint alternative.\ngcc/testsuite/\n\t* gcc.dg/dfp/pr70052.c: New test.\n\nFrom-SVN: r234479", "tree": {"sha": "13ecdbf6f2b7536b86b631772ffee3e0a4934f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ecdbf6f2b7536b86b631772ffee3e0a4934f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0144c7b6f38a87d8e44a14256059268ab26608b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0144c7b6f38a87d8e44a14256059268ab26608b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0144c7b6f38a87d8e44a14256059268ab26608b"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "6c9e945ebeedc1dc37a0fc2083846d14b0d61fa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -1,3 +1,15 @@\n+2016-03-25  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/70052\n+\t* config/rs6000/constraints.md (j): Simplify.\n+\t* config/rs6000/predicates.md (easy_fp_constant): Exclude\n+\tdecimal float 0.D.\n+\t* config/rs6000/rs6000.md (zero_fp): New mode_attr.\n+\t(mov<mode>_hardfloat, mov<mode>_hardfloat32, mov<mode>_hardfloat64,\n+\t mov<mode>_64bit_dm, mov<mode>_32bit): Use zero_fp in place of j\n+\tin all constraint alternatives.\n+\t(movtd_64bit_nodm): Delete \"j\" constraint alternative.\n+\n 2016-03-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-ssa-propagate.c: Enhance docs for"}, {"sha": "ea15764e513c929fa41c809864be70fbb406d18e", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -272,4 +272,4 @@ usually better to use @samp{m} or @samp{es} in @code{asm} statements)\"\n \n (define_constraint \"j\"\n   \"Zero vector constant\"\n-  (match_test \"op == const0_rtx || op == CONST0_RTX (GET_MODE (op))\"))\n+  (match_test \"op == const0_rtx || op == CONST0_RTX (mode)\"))"}, {"sha": "71fac765e24f4fdc9b03c7d1048e6c6096a9958e", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -527,13 +527,14 @@\n       && mode != DImode)\n     return 1;\n \n+  /* 0.0D is not all zero bits.  */\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    return 0;\n+\n   /* The constant 0.0 is easy under VSX.  */\n   if (TARGET_VSX && SCALAR_FLOAT_MODE_P (mode) && op == CONST0_RTX (mode))\n     return 1;\n \n-  if (DECIMAL_FLOAT_MODE_P (mode))\n-    return 0;\n-\n   /* If we are using V.4 style PIC, consider all constants to be hard.  */\n   if (flag_pic && DEFAULT_ABI == ABI_V4)\n     return 0;"}, {"sha": "ef1dea82c8484f1a42b05daa9b619765cafdb8ef", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -428,6 +428,16 @@\n \t\t\t\t\t(SD \"REAL_VALUE_TO_TARGET_DECIMAL32\")\n \t\t\t\t\t(DD \"REAL_VALUE_TO_TARGET_DECIMAL64\")])\n \n+; Whether 0.0 has an all-zero bit pattern\n+(define_mode_attr zero_fp [(SF \"j\")\n+\t\t\t   (DF \"j\")\n+\t\t\t   (TF \"j\")\n+\t\t\t   (IF \"j\")\n+\t\t\t   (KF \"j\")\n+\t\t\t   (SD \"wn\")\n+\t\t\t   (DD \"wn\")\n+\t\t\t   (TD \"wn\")])\n+\n ; Definitions for load to 32-bit fpr register\n (define_mode_attr f32_lr  [(SF \"f\")\t\t  (SD \"wz\")])\n (define_mode_attr f32_lr2 [(SF \"wb\")\t\t  (SD \"wn\")])\n@@ -6472,7 +6482,7 @@\n \n (define_insn \"mov<mode>_hardfloat\"\n   [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\" \"=!r,!r,m,f,<f32_vsx>,<f32_vsx>,!r,<f32_lr>,<f32_lr2>,<f32_sm>,<f32_sm2>,<f32_av>,Z,?<f32_dm>,?r,*c*l,!r,*h\")\n-\t(match_operand:FMOVE32 1 \"input_operand\" \"r,m,r,f,<f32_vsx>,j,j,<f32_lm>,<f32_lm2>,<f32_sr>,<f32_sr2>,Z,<f32_av>,r,<f32_dm>,r,h,0\"))]\n+\t(match_operand:FMOVE32 1 \"input_operand\" \"r,m,r,f,<f32_vsx>,<zero_fp>,<zero_fp>,<f32_lm>,<f32_lm2>,<f32_sr>,<f32_sr2>,Z,<f32_av>,r,<f32_dm>,r,h,0\"))]\n   \"(gpc_reg_operand (operands[0], <MODE>mode)\n    || gpc_reg_operand (operands[1], <MODE>mode))\n    && (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT)\"\n@@ -6612,7 +6622,7 @@\n \n (define_insn \"*mov<mode>_hardfloat32\"\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_av>,Z,<f64_p9>,o,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,Z,<f64_av>,o,<f64_p9>,<f64_vsx>,j,j,r,Y,r\"))]\n+\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,Z,<f64_av>,o,<f64_p9>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -6650,7 +6660,7 @@\n ; List Y->r and r->Y before r->r for reload.\n (define_insn \"*mov<mode>_hardfloat64\"\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,o,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r,*c*l,!r,*h,r,wg,r,<f64_dm>\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,o,<f64_p9>,Z,<f64_av>,<f64_vsx>,j,j,r,Y,r,r,h,0,wg,r,<f64_dm>,r\"))]\n+\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,o,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r,r,h,0,wg,r,<f64_dm>,r\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -6713,7 +6723,7 @@\n \n (define_insn_and_split \"*mov<mode>_64bit_dm\"\n   [(set (match_operand:FMOVE128_FPR 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r,r,wh\")\n-\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,j,r,jY,r,wh,r\"))]\n+\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,<zero_fp>,r,<zero_fp>Y,r,wh,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_POWERPC64\n    && FLOAT128_2REG_P (<MODE>mode)\n    && (<MODE>mode != TDmode || WORDS_BIG_ENDIAN)\n@@ -6726,20 +6736,20 @@\n   [(set_attr \"length\" \"8,8,8,8,12,12,8,8,8\")])\n \n (define_insn_and_split \"*movtd_64bit_nodm\"\n-  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r\")\n-\t(match_operand:TD 1 \"input_operand\" \"d,m,d,j,r,jY,r\"))]\n+  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n+\t(match_operand:TD 1 \"input_operand\" \"d,m,d,r,Y,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_POWERPC64 && !WORDS_BIG_ENDIAN\n    && (gpc_reg_operand (operands[0], TDmode)\n        || gpc_reg_operand (operands[1], TDmode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,8,12,12,8\")])\n+  [(set_attr \"length\" \"8,8,8,12,12,8\")])\n \n (define_insn_and_split \"*mov<mode>_32bit\"\n   [(set (match_operand:FMOVE128_FPR 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r\")\n-\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,j,r,jY,r\"))]\n+\t(match_operand:FMOVE128_FPR 1 \"input_operand\" \"d,m,d,<zero_fp>,r,<zero_fp>Y,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_POWERPC64\n    && (FLOAT128_2REG_P (<MODE>mode)\n        || int_reg_operand_not_pseudo (operands[0], <MODE>mode)"}, {"sha": "351bdcfb7f7361ecf80b21be2d7d0af7ce10d423", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -1,3 +1,7 @@\n+2016-03-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.dg/dfp/pr70052.c: New test.\n+\n 2016-03-24  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/69845"}, {"sha": "53eb0757a81324bd1d300d625c5af527a5a11247", "filename": "gcc/testsuite/gcc.dg/dfp/pr70052.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr70052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr70052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr70052.c?ref=45d34276c2f3a2ee7f8bccfdef1dffe31018e6d9", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+typedef struct\n+{\n+  _Decimal128 td0;\n+  _Decimal128 td1;\n+} TDx2_t;\n+\n+\n+TDx2_t\n+D256_add_finite (void)\n+{\n+  _Decimal128 z, zz;\n+  TDx2_t result = {0.DL, 0.DL};\n+\n+  if (zz == 0.DL)\n+  {\n+    result.td0 = z;\n+    return result;\n+  }\n+\n+  return result;\n+}"}]}