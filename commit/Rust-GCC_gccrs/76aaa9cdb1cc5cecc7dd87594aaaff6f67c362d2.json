{"sha": "76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhYWE5Y2RiMWNjNWNlY2M3ZGQ4NzU5NGFhYWZmNmY2N2MzNjJkMg==", "commit": {"author": {"name": "Yoshinori Sato", "email": "ysato@users.sourceforge.jp", "date": "2019-05-29T18:36:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-05-29T18:36:06Z"}, "message": "config.gcc (rx-*-linux*): New target.\n\n\t* config.gcc (rx-*-linux*): New target.\n\t* config/rx/elf.opt: New file.\n\t* config/rx/linux.h: Likewise.\n\t* config/rx/t-linux: Likewise.\n\t* config/rx/rx.c (TARGET_SAVE_ACC_REGISTER): If not defined,\n\tmake it zero.\n\t* config/rx/rx.h (ASM_APP_ON): Allow to be overridden.\n\t(ASM_APP_OFF): Likewise.\n\t* config/rx/rx.opt: Drop -msim and -mas100-syntax, they were\n\tmoved elsewhere.\n\n\t* config.host (rx-*-linux*): Add new case.\n\t* config/rx/t-rx (HOST_LIBGCC2_CFLAGS): Force DFmode to SFmode.\n\nFrom-SVN: r271748", "tree": {"sha": "ed4e9376e6c3970db45e69375c11da1e3ffe49e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4e9376e6c3970db45e69375c11da1e3ffe49e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/comments", "author": {"login": "ysat0", "id": 390647, "node_id": "MDQ6VXNlcjM5MDY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysat0", "html_url": "https://github.com/ysat0", "followers_url": "https://api.github.com/users/ysat0/followers", "following_url": "https://api.github.com/users/ysat0/following{/other_user}", "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions", "organizations_url": "https://api.github.com/users/ysat0/orgs", "repos_url": "https://api.github.com/users/ysat0/repos", "events_url": "https://api.github.com/users/ysat0/events{/privacy}", "received_events_url": "https://api.github.com/users/ysat0/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01a58e36980830b8a3dfa426f912fce51f7104c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a58e36980830b8a3dfa426f912fce51f7104c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a58e36980830b8a3dfa426f912fce51f7104c4"}], "stats": {"total": 354, "additions": 342, "deletions": 12}, "files": [{"sha": "334fe7fc3a27044fe5dca6101cc7714391ed0435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -1,3 +1,16 @@\n+2019-05-29  Yoshinori Sato  <ysato@users.sourceforge.jp>\n+\n+\t* config.gcc (rx-*-linux*): New target.\n+\t* config/rx/elf.opt: New file.\n+\t* config/rx/linux.h: Likewise.\n+\t* config/rx/t-linux: Likewise.\n+\t* config/rx/rx.c (TARGET_SAVE_ACC_REGISTER): If not defined,\n+\tmake it zero.\n+\t* config/rx/rx.h (ASM_APP_ON): Allow to be overridden.\n+\t(ASM_APP_OFF): Likewise.\n+\t* config/rx/rx.opt: Drop -msim and -mas100-syntax, they were\n+\tmoved elsewhere.\n+\n 2019-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-alias.c (same_type_for_tbaa): Return ture if main"}, {"sha": "67c3c2c7a42a33c1643bd3fa8fd620678c0a26ed", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -2801,6 +2801,11 @@ rl78-*-elf*)\n rx-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"${tmake_file} rx/t-rx\"\n+\textra_options=\"${extra_options} rx/elf.opt\"\n+\t;;\n+rx-*-linux*)\n+\ttm_file=\"elfos.h linux.h glibc-stdint.h rx/linux.h ../../libgcc/config/rx/rx-abi.h\"\n+\ttmake_file=\"${tmake_file} rx/t-linux\"\n \t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h s390/linux.h\""}, {"sha": "907e030df8ec027fe0a7ec2bfadf74af1fa22133", "filename": "gcc/config/rx/elf.opt", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Felf.opt?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -0,0 +1,44 @@\n+; Command line options for the Renesas RX port of GCC.\n+; Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+; Contributed by Red Hat.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+;---------------------------------------------------\n+\n+; elf target extra options\n+\n+msim\n+Target\n+Use the simulator runtime.\n+\n+;---------------------------------------------------\n+\n+mas100-syntax\n+Target Mask(AS100_SYNTAX) Report\n+Generate assembler output that is compatible with the Renesas AS100 assembler.  This may restrict some of the compiler's capabilities.  The default is to generate GAS compatable syntax.\n+\n+;---------------------------------------------------\n+\n+mint-register=\n+Target RejectNegative Joined UInteger Var(rx_interrupt_registers) Init(0)\n+Specifies the number of registers to reserve for interrupt handlers.\n+\n+;---------------------------------------------------\n+\n+msave-acc-in-interrupts\n+Target Mask(SAVE_ACC_REGISTER)\n+Specifies whether interrupt functions should save and restore the accumulator register."}, {"sha": "9ee484af8861af1d7b4dc73802c43369aefbc1c8", "filename": "gcc/config/rx/linux.h", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Flinux.h?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -0,0 +1,231 @@\n+/* GCC backend definitions for the rx-linux\n+   Copyright (C) 2019 Yoshinori Sato\n+   Based on rx.h\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+#include \"config/rx/rx.h\"\n+\n+#undef TARGET_CPU_CPP_BUILTINS\n+#define TARGET_CPU_CPP_BUILTINS()               \\\n+  do                                            \\\n+    {                                           \\\n+      builtin_define (\"__RX__\"); \t\t\\\n+      builtin_assert (\"cpu=RX\"); \t\t\\\n+      if (rx_cpu_type == RX610)\t\t\t\\\n+        builtin_assert (\"machine=RX610\");\t\\\n+     else\t\t\t\t\t\\\n+        builtin_assert (\"machine=RX600\");\t\\\n+      \t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN_DATA)\t\t\\\n+\tbuiltin_define (\"__RX_BIG_ENDIAN__\");\t\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"__RX_LITTLE_ENDIAN__\");\\\n+\t\t\t\t\t\t\\\n+      if (TARGET_64BIT_DOUBLES)\t\t\t\\\n+\tbuiltin_define (\"__RX_64BIT_DOUBLES__\");\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"__RX_32BIT_DOUBLES__\");\\\n+      \t\t\t\t\t\t\\\n+      if (ALLOW_RX_FPU_INSNS)\t\t\t\\\n+\tbuiltin_define (\"__RX_FPU_INSNS__\");\t\\\n+\t\t\t\t\t\t\\\n+    }                                           \\\n+  while (0)\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC \"\\\n+  %{mcpu=rx200:%{fpu:%erx200 cpu does not have FPU hardware}}\"\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{mbig-endian-data:-mbig-endian-data} \\\n+%{m64bit-doubles:-m64bit-doubles} \\\n+%{!m64bit-doubles:-m32bit-doubles} \\\n+%{msmall-data-limit*:-msmall-data-limit} \\\n+%{mrelax:-relax} \\\n+\"\n+\n+#undef DATA_SECTION_ASM_OP\n+#define DATA_SECTION_ASM_OP\t      \t\t\t\\\n+   \"\\t.section .data,\\\"aw\\\",@progbits\\n\\t.p2align 2\"\n+\n+#undef SDATA_SECTION_ASM_OP\n+#define SDATA_SECTION_ASM_OP\t      \t\t\t\\\n+   \"\\t.section .data2,\\\"aw\\\",@progbits\\n\\t.p2align 1\"\n+\n+#undef  READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP  \t\t\t\\\n+   \"\\t.section .rodata,\\\"a\\\",@progbits\\n\\t.p2align 2\"\n+\n+#undef BSS_SECTION_ASM_OP\n+#define BSS_SECTION_ASM_OP\t      \t\t\t\\\n+   \"\\t.section .bss\\n\\t.p2align 2\"\n+\n+#undef SBSS_SECTION_ASM_OP\n+#define SBSS_SECTION_ASM_OP\t      \t\t\t\\\n+   \"\\t.section .bss2\\n\\t.p2align 1\"\n+\n+/* The following definitions are conditional depending upon whether the\n+   compiler is being built or crtstuff.c is being compiled by the built\n+   compiler.  */\n+#undef TEXT_SECTION_ASM_OP\n+#define TEXT_SECTION_ASM_OP\t      \\\n+  \"\\t.section .text,\\\"ax\\\"\"\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t      \\\n+  \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t      \\\n+  \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\"\n+#undef INIT_ARRAY_SECTION_ASM_OP\n+#define INIT_ARRAY_SECTION_ASM_OP   \\\n+  \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\"\n+#undef FINI_ARRAY_SECTION_ASM_OP\n+#define FINI_ARRAY_SECTION_ASM_OP   \\\n+  \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\"\n+\n+#undef GLOBAL_ASM_OP\n+#define GLOBAL_ASM_OP\t\t\"\\t.global\\t\"\n+#undef  USER_LABEL_PREFIX\n+\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(STREAM, LOG)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if ((LOG) == 0)\t\t\t\t\\\n+        break;\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.balign %d\\n\", 1 << (LOG));\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef ASM_OUTPUT_ADDR_VEC_ELT\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  fprintf (FILE, \"\\t.long .L%d\\n\", VALUE)\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   Note: The local label referenced by the \"1b\" below is emitted by\n+   the tablejump insn.  */\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long .L%d - 1b\\n\", VALUE)\n+\n+#undef ASM_OUTPUT_SIZE_DIRECTIVE\n+#define ASM_OUTPUT_SIZE_DIRECTIVE(STREAM, NAME, SIZE)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size_ = (SIZE);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      fputs (SIZE_ASM_OP, STREAM);\t\t\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+      fprintf (STREAM, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", size_);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef ASM_OUTPUT_MEASURED_SIZE\n+#define ASM_OUTPUT_MEASURED_SIZE(STREAM, NAME)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (SIZE_ASM_OP, STREAM);\t\t\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+      fputs (\", .-\", STREAM);\t\t\t\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+      putc ('\\n', STREAM);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef ASM_OUTPUT_TYPE_DIRECTIVE\n+#define ASM_OUTPUT_TYPE_DIRECTIVE(STREAM, NAME, TYPE)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (TYPE_ASM_OP, STREAM);\t\t\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+      fputs (\", \", STREAM);\t\t\t\t\t\t\\\n+      fprintf (STREAM, TYPE_OPERAND_FMT, TYPE);\t\t\t\t\\\n+      putc ('\\n', STREAM);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      sprintf (LABEL, \"*.%s%u\", PREFIX, (unsigned) (NUM));\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_EXTERNAL\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      default_elf_asm_output_external (FILE, DECL, NAME);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\t\\\n+\t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  SKIP_ASM_OP\n+#define SKIP_ASM_OP   \"\\t.zero\\t\"\n+\n+#undef  ASM_OUTPUT_LIMITED_STRING\n+#define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      const unsigned char *_limited_str =\t\t\\\n+\t(const unsigned char *) (STR);\t\t\t\\\n+      unsigned ch;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\t.string\\t\\\"\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+      for (; (ch = *_limited_str); _limited_str++)\t\\\n+        {\t\t\t\t\t\t\\\n+\t  int escape;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t  switch (escape = ESCAPES[ch])\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t    case 0:\t\t\t\t\t\\\n+\t      putc (ch, (FILE));\t\t\t\\\n+\t      break;\t\t\t\t\t\\\n+\t    case 1:\t\t\t\t\t\\\n+\t      fprintf ((FILE), \"\\\\%03o\", ch);\t\t\\\n+\t      break;\t\t\t\t\t\\\n+\t    default:\t\t\t\t\t\\\n+\t      putc ('\\\\', (FILE));\t\t\t\\\n+\t      putc (escape, (FILE));\t\t\t\\\n+\t      break;\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  PREFERRED_DEBUGGING_TYPE\n+\n+#undef TARGET_AS100_SYNTAX\n+#define TARGET_AS100_SYNTAX 0"}, {"sha": "0695f3b653851a8b5139baf71002c09f7deae75c", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -1438,10 +1438,14 @@ bit_count (unsigned int x)\n   return (x + (x >> 16)) & 0x3f;\n }\n \n+#if defined(TARGET_SAVE_ACC_REGISTER)\n #define MUST_SAVE_ACC_REGISTER\t\t\t\\\n   (TARGET_SAVE_ACC_REGISTER\t\t\t\\\n    && (is_interrupt_func (NULL_TREE)\t\t\\\n        || is_fast_interrupt_func (NULL_TREE)))\n+#else\n+#define MUST_SAVE_ACC_REGISTER 0\n+#endif\n \n /* Returns either the lowest numbered and highest numbered registers that\n    occupy the call-saved area of the stack frame, if the registers are"}, {"sha": "672e087cd1313e7154523bb887816c3ad54f7d3a", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -408,7 +408,9 @@ typedef unsigned int CUMULATIVE_ARGS;\n #define GLOBAL_ASM_OP \t\t\\\n   (TARGET_AS100_SYNTAX ? \"\\t.GLB\\t\" : \"\\t.global\\t\")\n #define ASM_COMMENT_START\t\" ;\"\n+#undef ASM_APP_ON\n #define ASM_APP_ON\t\t\"\"\n+#undef ASM_APP_OFF\n #define ASM_APP_OFF \t\t\"\"\n #define LOCAL_LABEL_PREFIX\t\"L\"\n #undef  USER_LABEL_PREFIX"}, {"sha": "4e80c860e43c4fa4601f227d83fbf6c5a15886b8", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -82,18 +82,6 @@ Maximum size of global and static variables which can be placed into the small d\n \n ;---------------------------------------------------\n \n-msim\n-Target\n-Use the simulator runtime.\n-\n-;---------------------------------------------------\n-\n-mas100-syntax\n-Target Mask(AS100_SYNTAX) Report\n-Generate assembler output that is compatible with the Renesas AS100 assembler.  This may restrict some of the compiler's capabilities.  The default is to generate GAS compatible syntax.\n-\n-;---------------------------------------------------\n-\n mrelax\n Target\n Enable linker relaxation."}, {"sha": "0975b2690dc03d7ff5ba309386bea56aa737aebf", "filename": "gcc/config/rx/t-linux", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/gcc%2Fconfig%2Frx%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-linux?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -0,0 +1,34 @@\n+# Makefile fragment for building GCC for the rx-linux.\n+# Copyright (C) 2019 Yoshinori Sato\n+# Based on t-rx\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See\n+# the GNU General Public License for more details.\n+#\n+# You should have received a copy of the  GNU General Public\n+# License along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Enable multilibs:\n+\n+MULTILIB_OPTIONS    =\n+MULTILIB_DIRNAMES   =\n+\n+MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200  nofpu=mcpu?RX200\n+\n+MULTILIB_EXCEPTIONS =\n+MULTILIB_EXTRA_OPTS =\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o"}, {"sha": "082fabc244de37ecaaf67d1a27e25aa245f778d9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -1,3 +1,8 @@\n+2019-05-29  Yoshinori Sato  <ysato@users.sourceforge.jp>\n+\n+\t* config.host (rx-*-linux*): Add new case.\n+\t* config/rx/t-rx (HOST_LIBGCC2_CFLAGS): Force DFmode to SFmode.\n+\n 2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n \n \t* config/aarch64/aarch64-unwind.h (aarch64_cie_signed_with_b_key): New"}, {"sha": "ff2f0fa1e58014e711fbec0166fff175b7dfce79", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -1211,6 +1211,9 @@ rx-*-elf)\n \ttmake_file=\"rx/t-rx t-fdpbit\"\n \ttm_file=\"$tm_file rx/rx-abi.h rx/rx-lib.h\"\n \t;;\n+rx-*-linux*)\n+\ttmake_file=\"rx/t-rx\"\n+\t;;\n s390-*-linux*)\n \ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux s390/32/t-floattodi t-stack s390/t-stack-s390\"\n \tmd_unwind_header=s390/linux-unwind.h"}, {"sha": "34cdc97cc030a2e8f41d1d4a06b9f2cbf258257b", "filename": "libgcc/config/rx/t-rx", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2/libgcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frx%2Ft-rx?ref=76aaa9cdb1cc5cecc7dd87594aaaff6f67c362d2", "patch": "@@ -23,6 +23,7 @@\n # the normal libgcc sources:\n \n LIB2ADD = $(srcdir)/config/rx/rx-abi-functions.c\n+HOST_LIBGCC2_CFLAGS += -DDF=SF\n \n \n # We need special handling of the floating point conversion"}]}