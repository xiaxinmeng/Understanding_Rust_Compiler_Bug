{"sha": "f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjczMGU0MmYwNGQxN2UxODdmYTc3ZTFiMDdlYjVhYWVkNTU0YWQ1ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-15T10:53:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-15T10:53:49Z"}, "message": "trans.c (add_decl_expr): At toplevel, mark the TYPE_ADA_SIZE field of records and unions.\n\n\t* trans.c (add_decl_expr): At toplevel, mark the TYPE_ADA_SIZE field\n\tof records and unions.\n\t(gnat_to_gnu) <N_Validate_Unchecked_Conversion>: Fix formatting.\n\nFrom-SVN: r135333", "tree": {"sha": "ec3343a10a451945ecbd128e6e55048e5134e69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec3343a10a451945ecbd128e6e55048e5134e69a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/comments", "author": null, "committer": null, "parents": [{"sha": "9f59420d5c2a4c94a1d3c7c82988ffcd672cae9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f59420d5c2a4c94a1d3c7c82988ffcd672cae9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f59420d5c2a4c94a1d3c7c82988ffcd672cae9c"}], "stats": {"total": 157, "additions": 130, "deletions": 27}, "files": [{"sha": "83e9177af7159c1dd94765d1d486fc2eea53d768", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -1,3 +1,9 @@\n+2008-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans.c (add_decl_expr): At toplevel, mark the TYPE_ADA_SIZE field\n+\tof records and unions.\n+\t(gnat_to_gnu) <N_Validate_Unchecked_Conversion>: Fix formatting.\n+\n 2008-05-14  Samuel Tardieu  <sam@rfc1149.net>\n             Robert Dewar <dewar@adacore.com>\n "}, {"sha": "f7dd9b9aadfe866836a4ba32a384a886b6838627", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -4778,31 +4778,31 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Validate_Unchecked_Conversion:\n       /* If the result is a pointer type, see if we are either converting\n-         from a non-pointer or from a pointer to a type with a different\n- \t alias set and warn if so.  If the result defined in the same unit as\n- \t this unchecked conversion, we can allow this because we can know to\n- \t make that type have alias set 0.  */\n+\t from a non-pointer or from a pointer to a type with a different\n+\t alias set and warn if so.  If the result defined in the same unit as\n+\t this unchecked conversion, we can allow this because we can know to\n+\t make that type have alias set 0.  */\n       {\n- \ttree gnu_source_type = gnat_to_gnu_type (Source_Type (gnat_node));\n- \ttree gnu_target_type = gnat_to_gnu_type (Target_Type (gnat_node));\n-\n- \tif (POINTER_TYPE_P (gnu_target_type)\n- \t    && !In_Same_Source_Unit (Target_Type (gnat_node), gnat_node)\n-            && get_alias_set (TREE_TYPE (gnu_target_type)) != 0\n-            && !No_Strict_Aliasing (Underlying_Type (Target_Type (gnat_node)))\n- \t    && (!POINTER_TYPE_P (gnu_source_type)\n- \t\t|| (get_alias_set (TREE_TYPE (gnu_source_type))\n- \t\t    != get_alias_set (TREE_TYPE (gnu_target_type)))))\n- \t  {\n-            post_error_ne\n-              (\"?possible aliasing problem for type&\",\n-               gnat_node, Target_Type (gnat_node));\n+\ttree gnu_source_type = gnat_to_gnu_type (Source_Type (gnat_node));\n+\ttree gnu_target_type = gnat_to_gnu_type (Target_Type (gnat_node));\n+\n+\tif (POINTER_TYPE_P (gnu_target_type)\n+\t    && !In_Same_Source_Unit (Target_Type (gnat_node), gnat_node)\n+\t    && get_alias_set (TREE_TYPE (gnu_target_type)) != 0\n+\t    && !No_Strict_Aliasing (Underlying_Type (Target_Type (gnat_node)))\n+\t    && (!POINTER_TYPE_P (gnu_source_type)\n+\t\t|| (get_alias_set (TREE_TYPE (gnu_source_type))\n+\t\t    != get_alias_set (TREE_TYPE (gnu_target_type)))))\n+\t  {\n+\t    post_error_ne\n+\t      (\"?possible aliasing problem for type&\",\n+\t       gnat_node, Target_Type (gnat_node));\n \t    post_error\n-              (\"\\\\?use -fno-strict-aliasing switch for references\",\n-               gnat_node);\n+\t      (\"\\\\?use -fno-strict-aliasing switch for references\",\n+\t       gnat_node);\n \t    post_error_ne\n-              (\"\\\\?or use `pragma No_Strict_Aliasing (&);`\",\n-               gnat_node, Target_Type (gnat_node));\n+\t      (\"\\\\?or use `pragma No_Strict_Aliasing (&);`\",\n+\t       gnat_node, Target_Type (gnat_node));\n \t  }\n \n \t/* The No_Strict_Aliasing flag is not propagated to the back-end for\n@@ -5055,7 +5055,7 @@ void\n add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n {\n   tree type = TREE_TYPE (gnu_decl);\n-  tree gnu_stmt, gnu_init, gnu_lhs;\n+  tree gnu_stmt, gnu_init, t;\n \n   /* If this is a variable that Gigi is to ignore, we may have been given\n      an ERROR_MARK.  So test for it.  We also might have been given a\n@@ -5074,7 +5074,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n   if (global_bindings_p ())\n     {\n       /* Mark everything as used to prevent node sharing with subprograms.\n-\t Note that walk_tree knows how to handle TYPE_DECL, but neither\n+\t Note that walk_tree knows how to deal with TYPE_DECL, but neither\n \t VAR_DECL nor CONST_DECL.  This appears to be somewhat arbitrary.  */\n       walk_tree (&gnu_stmt, mark_visited, NULL, NULL);\n       if (TREE_CODE (gnu_decl) == VAR_DECL\n@@ -5084,6 +5084,13 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t  walk_tree (&DECL_SIZE_UNIT (gnu_decl), mark_visited, NULL, NULL);\n \t  walk_tree (&DECL_INITIAL (gnu_decl), mark_visited, NULL, NULL);\n \t}\n+      /* In any case, we have to deal with our own TYPE_ADA_SIZE field.  */\n+      if (TREE_CODE (gnu_decl) == TYPE_DECL\n+\t  && (TREE_CODE (type) == RECORD_TYPE\n+\t      || TREE_CODE (type) == UNION_TYPE\n+\t      || TREE_CODE (type) == QUAL_UNION_TYPE)\n+\t  && (t = TYPE_ADA_SIZE (type)))\n+\twalk_tree (&t, mark_visited, NULL, NULL);\n     }\n   else\n     add_stmt_with_node (gnu_stmt, gnat_entity);\n@@ -5100,11 +5107,11 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n       /* If GNU_DECL has a padded type, convert it to the unpadded\n \t type so the assignment is done properly.  */\n       if (TREE_CODE (type) == RECORD_TYPE && TYPE_IS_PADDING_P (type))\n-\tgnu_lhs = convert (TREE_TYPE (TYPE_FIELDS (type)), gnu_decl);\n+\tt = convert (TREE_TYPE (TYPE_FIELDS (type)), gnu_decl);\n       else\n-\tgnu_lhs = gnu_decl;\n+\tt = gnu_decl;\n \n-      gnu_stmt = build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_lhs, gnu_init);\n+      gnu_stmt = build_binary_op (MODIFY_EXPR, NULL_TREE, t, gnu_init);\n \n       DECL_INITIAL (gnu_decl) = NULL_TREE;\n       if (TREE_READONLY (gnu_decl))"}, {"sha": "10769c8b2c399755b0e0058b2fe8e55d30d0030f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -1,3 +1,8 @@\n+2008-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr8.ad[sb]: New test.\n+\t* gnat.dg/discr8_pkg[123].ads: New helpers.\n+\n 2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sse-set-ps-1.c: New."}, {"sha": "cfb3d48e9d050bacc58b027ccf83c114caacbe7d", "filename": "gcc/testsuite/gnat.dg/discr8.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.adb?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -0,0 +1,38 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+package body Discr8 is\n+\n+  procedure Make (C : out Local_T) is\n+    Tmp : Local_T (Tag_One);\n+  begin\n+    C := Tmp;\n+  end;\n+\n+  package Iteration is\n+\n+    type Message_T is\n+      record\n+        S : Local_T;\n+      end record;\n+\n+    type Iterator_T is\n+      record\n+        S : Local_T;\n+      end record;\n+\n+    type Access_Iterator_T is access Iterator_T;\n+\n+  end Iteration;\n+\n+  package body Iteration is\n+\n+    procedure Construct (Iterator : in out Access_Iterator_T;\n+                         Message  : Message_T) is\n+    begin\n+      Iterator.S := Message.S;\n+    end;\n+\n+  end Iteration;\n+\n+end Discr8;"}, {"sha": "80dd2f652ce34f57dc6d1119741aacbeb216b38c", "filename": "gcc/testsuite/gnat.dg/discr8.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8.ads?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -0,0 +1,20 @@\n+with Discr8_Pkg1; use Discr8_Pkg1;\n+\n+package Discr8 is\n+\n+  type Tag_T is (Tag_One, Tag_Two);\n+\n+  type Local_T (Tag : Tag_T := Tag_One) is\n+    record\n+      case Tag is\n+        when Tag_One =>\n+          A : T;\n+          B : Integer;\n+        when Tag_Two =>\n+          null;\n+      end case;\n+    end record;\n+\n+  procedure Make (C : out Local_T);\n+\n+end Discr8;"}, {"sha": "ae93dc4d402b0edecfa70a88afbf530169fd35f8", "filename": "gcc/testsuite/gnat.dg/discr8_pkg1.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg1.ads?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -0,0 +1,11 @@\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+with Discr8_Pkg2; use Discr8_Pkg2;\n+\n+package Discr8_Pkg1 is\n+\n+  type T is record\n+    A : Unbounded_String;\n+    B : L;\n+  end record;\n+\n+end Discr8_Pkg1;"}, {"sha": "f98318a5aca23a3f250bede9db12d6c91df3d6c3", "filename": "gcc/testsuite/gnat.dg/discr8_pkg2.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg2.ads?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -0,0 +1,13 @@\n+with Discr8_Pkg3; use Discr8_Pkg3;\n+\n+package Discr8_Pkg2 is\n+\n+  Max : constant Natural := Value;\n+\n+  type List_T is array (Natural range <>) of Integer;\n+  \n+  type L is record\n+    List : List_T (1 .. Max);\n+  end record;\n+  \n+end Discr8_Pkg2;"}, {"sha": "576b40fab9dd9b94d33f41cc4047129a583b2ae7", "filename": "gcc/testsuite/gnat.dg/discr8_pkg3.ads", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f730e42f04d17e187fa77e1b07eb5aaed554ad5e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr8_pkg3.ads?ref=f730e42f04d17e187fa77e1b07eb5aaed554ad5e", "patch": "@@ -0,0 +1,3 @@\n+package Discr8_Pkg3 is\n+  function Value return Natural;\n+end Discr8_Pkg3;"}]}