{"sha": "901a8cea7b6185e9fa595756c8cc8cff291ae2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxYThjZWE3YjYxODVlOWZhNTk1NzU2YzhjYzhjZmYyOTFhZTJiOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-01T11:15:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-01T11:15:31Z"}, "message": "pa.h (CONSTANT_ADDRESS_P): Do not accept symbolic addresses.\n\n\t* pa.h (CONSTANT_ADDRESS_P): Do not accept symbolic\n\taddresses.\n\t(LEGITIMIZE_ADDRESS): Just a stub now.  Call\n\thppa_legitimize_address to do the real work.\n\nFrom-SVN: r3570", "tree": {"sha": "526e43f1b82f7be5e9c50aa8cfa300bcddfec4c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/526e43f1b82f7be5e9c50aa8cfa300bcddfec4c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901a8cea7b6185e9fa595756c8cc8cff291ae2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901a8cea7b6185e9fa595756c8cc8cff291ae2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901a8cea7b6185e9fa595756c8cc8cff291ae2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901a8cea7b6185e9fa595756c8cc8cff291ae2b9/comments", "author": null, "committer": null, "parents": [{"sha": "e26d4611b584225b283830cabf86d7ce68925f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26d4611b584225b283830cabf86d7ce68925f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26d4611b584225b283830cabf86d7ce68925f1d"}], "stats": {"total": 83, "additions": 13, "deletions": 70}, "files": [{"sha": "6a9e504fbdaf9fd8256e4c6e677f7c888811cce1", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 13, "deletions": 70, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a8cea7b6185e9fa595756c8cc8cff291ae2b9/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a8cea7b6185e9fa595756c8cc8cff291ae2b9/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=901a8cea7b6185e9fa595756c8cc8cff291ae2b9", "patch": "@@ -1015,10 +1015,12 @@ extern union tree_node *current_function_decl;\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-/* Recognize any constant value that is a valid address.  */\n-\n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+/* Recognize any constant value that is a valid address except\n+   for symbolic addresses.  We get better CSE by rejecting them\n+   here and allowing hppa_legitimize_address to break them up.  */\n \n+#define CONSTANT_ADDRESS_P(X) \\\n+ (CONSTANT_P (X) && ! symbolic_expression_p (X))\n \n /* Include all constant integers and constant doubles, but not\n    floating-point, except for floating-point zero.  */\n@@ -1191,73 +1193,14 @@ extern union tree_node *current_function_decl;\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output. \n-\n-   For the PA, transform:\n-\n-\tmemory(X + <large int>)\n-\n-   into:\n-\n-\tY = <large int> & ~mask;\n-\tZ = X + Y\n-\tmemory (Z + (<large int> & mask));\n-\n-   This is for CSE to find several similar references, and only use one Z. \n-\n-   MODE_FLOAT references allow displacements which fit in 5 bits, so use\n-   0xf as the mask.  \n-\n-   MODE_INT references allow displacements which fit in 11 bits, so use\n-   0x1fff as the mask. \n-\n-   This relies on the fact that most mode MODE_FLOAT references will use FP\n-   registers and most mode MODE_INT references will use integer registers.\n-   (In the rare case of an FP register used in an integer MODE, we depend\n-   on secondary reloads and the final output pass to clean things up.)\n-\n-\n-   It is also beneficial to handle (plus (mult (X) (Y)) (Z)) in a special\n-   manner if Y is 2, 4, or 8.  (allows more shadd insns and shifted indexed\n-   adressing modes to be used).\n-\n-   Put X and Z into registers.  Then put the entire expression into\n-   a register.  */\n-\n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)\t\\\n-{ if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n-      && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      rtx int_reg, ptr_reg;\t\t\t\t\t\\\n-      int offset = INTVAL (XEXP (X, 1));\t\t\t\\\n-      int mask = GET_MODE_CLASS (mode) == MODE_FLOAT ? 0xf \t\\\n-\t\t\t\t\t\t     : 0x1fff;\t\\\n-      int_reg = force_reg (SImode, GEN_INT (offset & ~ mask));\t\\\n-      ptr_reg = force_reg (SImode,\t\t\t\t\\\n-\t\t\t    gen_rtx (PLUS, SImode,\t\t\\\n-\t\t\t\t     XEXP (X, 0), int_reg));\t\\\n-      X = plus_constant (ptr_reg, offset & mask);\t\t\\\n-      goto WIN;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == MULT\t\\\n-      && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\\\n-      && shadd_constant_p (INTVAL (XEXP (XEXP (X, 0), 1))))\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      int val = INTVAL (XEXP (XEXP (X, 0), 1));\t\t\t\\\n-      rtx reg1, reg2;\t\t\t\t\t\t\\\n-      reg1 = force_reg (SImode, force_operand (XEXP (X, 1), 0));\\\n-      reg2 = force_reg (SImode, \t\t\t\t\\\n-\t\t\tforce_operand (XEXP (XEXP (X, 0), 0), 0));\\\n-      (X) = force_reg (SImode,\t\t\t\t\t\\\n-\t\t       gen_rtx (PLUS, SImode,\t\t\t\\\n-\t\t\t\tgen_rtx (MULT, SImode, reg2, \t\\\n-\t\t\t\t\t GEN_INT (val)),\t\\\n-\t\t\t\treg1));\t\t\t\t\\\n-      goto WIN;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  if (flag_pic) (X) = legitimize_pic_address (X, MODE, gen_reg_rtx (Pmode));\\\n-  if (memory_address_p (MODE, X))\t\t\t\t\\\n-    goto WIN;}\n+   opportunities to optimize the output.  */\n+\n+extern struct rtx_def *hppa_legitimize_address ();\n+#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\\\n+{ rtx orig_x = (X);\t\t\t\t\\\n+  (X) = hppa_legitimize_address (X, OLDX, MODE);\t\\\n+  if ((X) != orig_x && memory_address_p (MODE, X)) \\\n+    goto WIN; }\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */"}]}