{"sha": "8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIxMzQ2YTgwYWI1MzlhNjgwZWI3ZDAxMGExZGU1ZjE4YzUzYTlkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-18T21:05:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-18T21:05:12Z"}, "message": "PR c++/68666 - member variable template-id\n\n\t* typeck.c (finish_class_member_access_expr): Handle variable\n\ttemplate-id.\n\t* pt.c (lookup_and_finish_template_variable): No longer static.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r244599", "tree": {"sha": "72684e3337feb472dad772d8b129d16f1e244246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72684e3337feb472dad772d8b129d16f1e244246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0edd264dfc29db3c30641771d46634b4ef3ffe10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edd264dfc29db3c30641771d46634b4ef3ffe10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edd264dfc29db3c30641771d46634b4ef3ffe10"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "f8377e25b4ce59b9d634d5c121b85ba42a937208", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -1,3 +1,11 @@\n+2017-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68666 - member variable template-id\n+\t* typeck.c (finish_class_member_access_expr): Handle variable\n+\ttemplate-id.\n+\t* pt.c (lookup_and_finish_template_variable): No longer static.\n+\t* cp-tree.h: Declare it.\n+\n 2017-01-18  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/78488"}, {"sha": "9c4436710dda8711bf075ed17eb456623fcfa347", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -6449,6 +6449,7 @@ extern cp_expr perform_koenig_lookup\t\t(cp_expr, vec<tree, va_gc> *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_call_expr\t\t\t(tree, vec<tree, va_gc> **, bool,\n \t\t\t\t\t\t bool, tsubst_flags_t);\n+extern tree lookup_and_finish_template_variable (tree, tree, tsubst_flags_t = tf_warning_or_error);\n extern tree finish_template_variable\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n extern cp_expr finish_increment_expr\t\t(cp_expr, enum tree_code);\n extern tree finish_this_expr\t\t\t(void);"}, {"sha": "c679133850e3b0fde4d931706a64555e322df890", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -9035,7 +9035,7 @@ finish_template_variable (tree var, tsubst_flags_t complain)\n /* Construct a TEMPLATE_ID_EXPR for the given variable template TEMPL having\n    TARGS template args, and instantiate it if it's not dependent.  */\n \n-static tree\n+tree\n lookup_and_finish_template_variable (tree templ, tree targs,\n \t\t\t\t     tsubst_flags_t complain)\n {"}, {"sha": "579c580adb2eed8e94158d338b9052fdfb1e82fe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -2875,7 +2875,10 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t  tree templ = member;\n \n \t  if (BASELINK_P (templ))\n-\t    templ = lookup_template_function (templ, template_args);\n+\t    member = lookup_template_function (templ, template_args);\n+\t  else if (variable_template_p (templ))\n+\t    member = (lookup_and_finish_template_variable\n+\t\t      (templ, template_args, complain));\n \t  else\n \t    {\n \t      if (complain & tf_error)"}, {"sha": "b882b08d181e12eebbabb16f19baae15fe8b4bd5", "filename": "gcc/testsuite/g++.dg/concepts/var-templ3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/68666\n+// { dg-options \"-std=c++1z -fconcepts\" }\n+\n+struct A {\n+  template <class>\n+  static constexpr bool val = true;\n+};\n+\n+template <class T>\n+concept bool C = A::val<T>;\n+\n+C{T} struct B {};"}, {"sha": "0840df3d4f0308e43c2ef783b3318924602b515e", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ55.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1346a80ab539a680eb7d010a1de5f18c53a9d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ55.C?ref=8b1346a80ab539a680eb7d010a1de5f18c53a9d5", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++14 } }\n+\n+template <class T> struct A {\n+  template <class U> static const U x = 1;\n+  static const int y = 2;\n+};\n+\n+int main() {\n+  A<int> a;\n+  int y = a.y;         // OK\n+  int x = a.x<int>;     // ???\n+}"}]}