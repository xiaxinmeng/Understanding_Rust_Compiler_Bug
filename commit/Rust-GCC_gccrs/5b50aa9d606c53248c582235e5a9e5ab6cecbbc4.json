{"sha": "5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1MGFhOWQ2MDZjNTMyNDhjNTgyMjM1ZTVhOWU1YWI2Y2VjYmJjNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-21T07:37:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-21T07:37:13Z"}, "message": "re PR rtl-optimization/7507 (ICE (segfault) with -O2)\n\n        PR opt/7507\n        * stmt.c (expand_asm_operands): Validize memory operands.\n\t* gcc.dg/20030120-1.c: New.\n\nFrom-SVN: r61535", "tree": {"sha": "845f9a24a9b8de4f1b5a2639c4606901e650190a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/845f9a24a9b8de4f1b5a2639c4606901e650190a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/comments", "author": null, "committer": null, "parents": [{"sha": "7a174a15342156271f6c01d9db6314f21b4f2935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a174a15342156271f6c01d9db6314f21b4f2935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a174a15342156271f6c01d9db6314f21b4f2935"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "78803b74e24e94cdb6d9dcfb210433d2ea8dc1ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "patch": "@@ -1,3 +1,8 @@\n+2003-01-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/7507\n+\t* stmt.c (expand_asm_operands): Validize memory operands.\n+\n 2003-01-20  Richard Henderson  <rth@redhat.com>\n \n \tPR opt/8848"}, {"sha": "b6503cfa9cabbefc67a439fba1a6308ea61dee79", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "patch": "@@ -1610,6 +1610,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       bool is_inout;\n       bool allows_reg;\n       bool allows_mem;\n+      rtx op;\n \n       if (!parse_output_constraint (&constraints[i], i, ninputs,\n \t\t\t\t    noutputs, &allows_mem, &allows_reg,\n@@ -1633,24 +1634,28 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  || ! allows_reg\n \t  || is_inout)\n \t{\n-\t  output_rtx[i] = expand_expr (val, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+\t  op = expand_expr (val, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+\t  if (GET_CODE (op) == MEM)\n+\t    op = validize_mem (op);\n \n-\t  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)\n+\t  if (! allows_reg && GET_CODE (op) != MEM)\n \t    error (\"output number %d not directly addressable\", i);\n-\t  if ((! allows_mem && GET_CODE (output_rtx[i]) == MEM)\n-\t      || GET_CODE (output_rtx[i]) == CONCAT)\n+\t  if ((! allows_mem && GET_CODE (op) == MEM)\n+\t      || GET_CODE (op) == CONCAT)\n \t    {\n-\t      real_output_rtx[i] = protect_from_queue (output_rtx[i], 1);\n-\t      output_rtx[i] = gen_reg_rtx (GET_MODE (output_rtx[i]));\n+\t      real_output_rtx[i] = protect_from_queue (op, 1);\n+\t      op = gen_reg_rtx (GET_MODE (op));\n \t      if (is_inout)\n-\t\temit_move_insn (output_rtx[i], real_output_rtx[i]);\n+\t\temit_move_insn (op, real_output_rtx[i]);\n \t    }\n \t}\n       else\n \t{\n-\t  output_rtx[i] = assign_temp (type, 0, 0, 1);\n-\t  TREE_VALUE (tail) = make_tree (type, output_rtx[i]);\n+\t  op = assign_temp (type, 0, 0, 1);\n+\t  op = validize_mem (op);\n+\t  TREE_VALUE (tail) = make_tree (type, op);\n \t}\n+      output_rtx[i] = op;\n \n       generating_concat_p = old_generating_concat_p;\n \n@@ -1702,6 +1707,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       /* Never pass a CONCAT to an ASM.  */\n       if (GET_CODE (op) == CONCAT)\n \top = force_reg (GET_MODE (op), op);\n+      else if (GET_CODE (op) == MEM)\n+\top = validize_mem (op);\n \n       if (asm_operand_ok (op, constraint) <= 0)\n \t{\n@@ -1711,7 +1718,10 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    warning (\"asm operand %d probably doesn't match constraints\",\n \t\t     i + noutputs);\n \t  else if (CONSTANT_P (op))\n-\t    op = force_const_mem (TYPE_MODE (type), op);\n+\t    {\n+\t      op = force_const_mem (TYPE_MODE (type), op);\n+\t      op = validize_mem (op);\n+\t    }\n \t  else if (GET_CODE (op) == REG\n \t\t   || GET_CODE (op) == SUBREG\n \t\t   || GET_CODE (op) == ADDRESSOF\n@@ -1721,7 +1731,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t\t\t\t\t\t     (TYPE_QUALS (type)\n \t\t\t\t\t\t      | TYPE_QUAL_CONST));\n \t      rtx memloc = assign_temp (qual_type, 1, 1, 1);\n-\n+\t      memloc = validize_mem (memloc);\n \t      emit_move_insn (memloc, op);\n \t      op = memloc;\n \t    }"}, {"sha": "05689ad0961a407fa121c04d1309fdf92fc5b84d", "filename": "gcc/testsuite/gcc.dg/20030120-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2Ftestsuite%2Fgcc.dg%2F20030120-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b50aa9d606c53248c582235e5a9e5ab6cecbbc4/gcc%2Ftestsuite%2Fgcc.dg%2F20030120-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030120-1.c?ref=5b50aa9d606c53248c582235e5a9e5ab6cecbbc4", "patch": "@@ -0,0 +1,10 @@\n+/* PR 7154 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fpic\" } */\n+/* { dg-warning \"not supported\" \"PIC unsupported\" { target cris-*-elf* mmix-*-* } 0 } */\n+\n+const int x[1]={ 1 };\n+void foo(int i, int *p)\n+{\n+  asm volatile(\"\" : \"+r\"(i) : \"m\" (x[0]), \"r\"(p));\n+}"}]}