{"sha": "e430824f28d68edd908a72677ba1b08a92e3e2ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzMDgyNGYyOGQ2OGVkZDkwOGE3MjY3N2JhMWIwOGE5MmUzZTJhZA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2013-12-31T07:05:35Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2013-12-31T07:05:35Z"}, "message": "Commit of nios2 port to trunk:\n\ncontrib/\n2013-12-31  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\t* config-list.mk: Add nios2-elf, nios2-linux-gnu. Corrected\n\tordering of some configs.\n\ngcc/\n2013-12-31  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\t    Based on patches from Altera Corporation\n\n\t* config.gcc (nios2-*-*): Add nios2 config targets.\n\t* configure.ac (TLS_SECTION_ASM_FLAG): Add nios2 case.\n\t(\"$cpu_type\"): Add nios2 as new cpu type.\n\t* configure: Regenerate.\n\t* config/nios2/nios2.c: New file.\n\t* config/nios2/nios2.h: New file.\n\t* config/nios2/nios2-opts.h: New file.\n\t* config/nios2/nios2-protos.h: New file.\n\t* config/nios2/elf.h: New file.\n\t* config/nios2/elf.opt: New file.\n\t* config/nios2/linux.h: New file.\n\t* config/nios2/nios2.opt: New file.\n\t* config/nios2/nios2.md: New file.\n\t* config/nios2/predicates.md: New file.\n\t* config/nios2/constraints.md: New file.\n\t* config/nios2/t-nios2: New file.\n\t* common/config/nios2/nios2-common.c: New file.\n\t* doc/invoke.texi (Nios II options): Document Nios II specific\n\toptions.\n\t* doc/md.texi (Nios II family): Document Nios II specific\n\tconstraints.\n\t* doc/extend.texi (Function Specific Option Pragmas): Document\n\tNios II supported target pragma functionality.\n\ngcc/testsuite/\n2013-12-31  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Based on patches from Altera Corporation\n\n\t* gcc.dg/stack-usage-1.c (SIZE): Define case for __nios2__.\n\t* gcc.dg/20040813-1.c: Skip for nios2-*-*.\n\t* gcc.dg/20020312-2.c: Add __nios2__ case.\n\t* g++.dg/other/PR23205.C: Skip for nios2-*-*.\n\t* g++.dg/other/pr23205-2.C: Skip for nios2-*-*.\n\t* g++.dg/cpp0x/constexpr-rom.C: Skip for nios2-*-*.\n\t* g++.dg/cpp0x/alias-decl-debug-0.C: Skip for nios2-*-*.\n\t* g++.old-deja/g++.jason/thunk3.C: Skip for nios2-*-*.\n\t* lib/target-supports.exp (check_profiling_available): Check for\n\tnios2-*-elf.\n\t* gcc.c-torture/execute/pr47237.x:: Skip for nios2-*-*.\n\t* gcc.c-torture/execute/20101011-1.c: Skip for nios2-*-*.\n\t* gcc.c-torture/execute/builtins/lib/chk.c (memset): Place\n\tchar-based memset loop before inline check, to prevent\n\tproblems when called to initialize .bss. Update comments.\n\t* gcc.target/nios2/nios2.exp: New DejaGNU file.\n\t* gcc.target/nios2/nios2-custom-1.c: New test.\n\t* gcc.target/nios2/nios2-trap-insn.c: New test.\n\t* gcc.target/nios2/nios2-builtin-custom.c: New test.\n\t* gcc.target/nios2/nios2-builtin-io.c: New test.\n\t* gcc.target/nios2/nios2-stack-check-1.c: New test.\n\t* gcc.target/nios2/nios2-stack-check-2.c: New test.\n\t* gcc.target/nios2/nios2-rdctl.c: New test.\n\t* gcc.target/nios2/nios2-wrctl.c: New test.\n\t* gcc.target/nios2/nios2-wrctl-zero.c: New test.\n\t* gcc.target/nios2/nios2-wrctl-not-zero.c: New test.\n\t* gcc.target/nios2/nios2-rdwrctl-1.c: New test.\n\t* gcc.target/nios2/nios2-reg-constraints.c: New test.\n\t* gcc.target/nios2/nios2-ashlsi3-one_shift.c: New test.\n\t* gcc.target/nios2/nios2-mul-options-1.c: New test.\n\t* gcc.target/nios2/nios2-mul-options-2.c: New test.\n\t* gcc.target/nios2/nios2-mul-options-3.c: New test.\n\t* gcc.target/nios2/nios2-mul-options-4.c: New test.\n\t* gcc.target/nios2/nios2-nor.c: New test.\n\t* gcc.target/nios2/nios2-stxio.c: New test.\n\t* gcc.target/nios2/custom-fp-1.c: New test.\n\t* gcc.target/nios2/custom-fp-2.c: New test.\n\t* gcc.target/nios2/custom-fp-3.c: New test.\n\t* gcc.target/nios2/custom-fp-4.c: New test.\n\t* gcc.target/nios2/custom-fp-5.c: New test.\n\t* gcc.target/nios2/custom-fp-6.c: New test.\n\t* gcc.target/nios2/custom-fp-7.c: New test.\n\t* gcc.target/nios2/custom-fp-8.c: New test.\n\t* gcc.target/nios2/custom-fp-cmp-1.c: New test.\n\t* gcc.target/nios2/custom-fp-conversion.c: New test.\n\t* gcc.target/nios2/custom-fp-double.c: New test.\n\t* gcc.target/nios2/custom-fp-float.c: New test.\n\t* gcc.target/nios2/nios2-int-types.c: New test.\n\t* gcc.target/nios2/nios2-cache-1.c: New test.\n\t* gcc.target/nios2/nios2-cache-2.c: New test.\n\nlibgcc/\n2013-12-31  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Based on patches from Altera Corporation\n\n\t* config.host (nios2-*-*,nios2-*-linux*): Add nios2 host cases.\n\t* config/nios2/lib2-nios2.h: New file.\n\t* config/nios2/lib2-divmod-hi.c: New file.\n\t* config/nios2/linux-unwind.h: New file.\n\t* config/nios2/lib2-divmod.c: New file.\n\t* config/nios2/linux-atomic.c: New file.\n\t* config/nios2/t-nios2: New file.\n\t* config/nios2/crti.asm: New file.\n\t* config/nios2/t-linux: New file.\n\t* config/nios2/lib2-divtable.c: New file.\n\t* config/nios2/lib2-mul.c: New file.\n\t* config/nios2/tramp.c: New file.\n\t* config/nios2/crtn.asm: New file.\n\nFrom-SVN: r206256", "tree": {"sha": "823787d209349f276f7125e117fa50abcb07c205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/823787d209349f276f7125e117fa50abcb07c205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e430824f28d68edd908a72677ba1b08a92e3e2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e430824f28d68edd908a72677ba1b08a92e3e2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e430824f28d68edd908a72677ba1b08a92e3e2ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e430824f28d68edd908a72677ba1b08a92e3e2ad/comments", "author": null, "committer": null, "parents": [{"sha": "fd5b8c6572058c3153a610923b01d1a3f37a1f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5b8c6572058c3153a610923b01d1a3f37a1f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5b8c6572058c3153a610923b01d1a3f37a1f64"}], "stats": {"total": 8422, "additions": 8397, "deletions": 25}, "files": [{"sha": "cdf6b0f7c294ad650a76120bb6c642571fd922ea", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,3 +1,8 @@\n+2013-12-31  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* config-list.mk: Add nios2-elf, nios2-linux-gnu. Corrected\n+\tordering of some configs.\n+\n 2013-12-23  Yury Gribov  <y.gribov@samsung.com>\n \n \t* mklog: Automatically insert comments in trivial cases."}, {"sha": "f2d441b5ad80b88a991b75748dc5fee358e014ac", "filename": "contrib/config-list.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -45,9 +45,11 @@ LIST = aarch64-elf aarch64-linux-gnu \\\n   mipsisa64-elfoabi mipsisa64r2el-elf mipsisa64sr71k-elf mipsisa64sb1-elf \\\n   mipsel-elf mips64-elf mips64vr-elf mips64orion-elf mips-rtems \\\n   mips-wrs-vxworks mipstx39-elf mmix-knuth-mmixware mn10300-elf moxie-elf \\\n-  moxie-uclinux moxie-rtems pdp11-aout picochip-elfOPT-enable-obsolete \\\n+  moxie-uclinux moxie-rtems \\\n   msp430-elf \\\n   nds32le-elf nds32be-elf \\\n+  nios2-elf nios2-linux-gnu \\\n+  pdp11-aout picochip-elfOPT-enable-obsolete \\\n   powerpc-darwin8 \\\n   powerpc-darwin7 powerpc64-darwin powerpc-freebsd6 powerpc-netbsd \\\n   powerpc-eabispe powerpc-eabisimaltivec powerpc-eabisim ppc-elf \\"}, {"sha": "cdd781dba91f16896073700f1623d56d49e7ed23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,3 +1,31 @@\n+2013-12-31  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Based on patches from Altera Corporation\n+\n+\t* config.gcc (nios2-*-*): Add nios2 config targets.\n+\t* configure.ac (TLS_SECTION_ASM_FLAG): Add nios2 case.\n+\t(\"$cpu_type\"): Add nios2 as new cpu type.\n+\t* configure: Regenerate.\n+\t* config/nios2/nios2.c: New file.\n+\t* config/nios2/nios2.h: New file.\n+\t* config/nios2/nios2-opts.h: New file.\n+\t* config/nios2/nios2-protos.h: New file.\n+\t* config/nios2/elf.h: New file.\n+\t* config/nios2/elf.opt: New file.\n+\t* config/nios2/linux.h: New file.\n+\t* config/nios2/nios2.opt: New file.\n+\t* config/nios2/nios2.md: New file.\n+\t* config/nios2/predicates.md: New file.\n+\t* config/nios2/constraints.md: New file.\n+\t* config/nios2/t-nios2: New file.\n+\t* common/config/nios2/nios2-common.c: New file.\n+\t* doc/invoke.texi (Nios II options): Document Nios II specific\n+\toptions.\n+\t* doc/md.texi (Nios II family): Document Nios II specific\n+\tconstraints.\n+\t* doc/extend.texi (Function Specific Option Pragmas): Document\n+\tNios II supported target pragma functionality.\n+\n 2013-12-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59591"}, {"sha": "a27f1b0802be82fa487eea4b7c3326c5e39b18af", "filename": "gcc/common/config/nios2/nios2-common.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,44 @@\n+/* Common hooks for Altera Nios II.\n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options nios2_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_mfast_sw_div, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE nios2_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "99f11e5561a3ec14b99a12e549706b87cd16db94", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -425,6 +425,10 @@ nds32*)\n \tcpu_type=nds32\n \textra_headers=\"nds32_intrinsic.h\"\n \t;;\n+nios2-*-*)\n+\tcpu_type=nios2\n+\textra_options=\"${extra_options} g.opt\"\n+\t;;\t\n picochip-*-*)\n         cpu_type=picochip\n         ;;\n@@ -2114,6 +2118,19 @@ nds32be-*-*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"nds32/t-mlibs\"\n \t;;\n+nios2-*-*)\n+\ttm_file=\"elfos.h ${tm_file}\"\n+        tmake_file=\"${tmake_file} nios2/t-nios2\"\n+        case ${target} in\n+        nios2-*-linux*)\n+                tm_file=\"${tm_file} gnu-user.h linux.h glibc-stdint.h nios2/linux.h \"\n+                ;;\n+\tnios2-*-elf*)\n+\t\ttm_file=\"${tm_file} newlib-stdint.h nios2/elf.h\"\n+\t\textra_options=\"${extra_options} nios2/elf.opt\"\n+\t\t;;\n+        esac\n+\t;;\n pdp11-*-*)\n \ttm_file=\"${tm_file} newlib-stdint.h\"\n \tuse_gcc_stdint=wrap"}, {"sha": "a1d55d30852a7050aaffe47c66fd96888514ad00", "filename": "gcc/config/nios2/constraints.md", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fconstraints.md?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,89 @@\n+;; Constraint definitions for Altera Nios II.\n+;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+;; Contributed by Chung-Lin Tang <cltang@codesourcery.com>\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; We use the following constraint letters for constants\n+;;\n+;;  I: -32768 to -32767\n+;;  J: 0 to 65535\n+;;  K: $nnnn0000 for some nnnn\n+;;  L: 0 to 31 (for shift counts)\n+;;  M: 0\n+;;  N: 0 to 255 (for custom instruction numbers)\n+;;  O: 0 to 31 (for control register numbers)\n+;;\n+;; We use the following built-in register classes:\n+;;\n+;;  r: general purpose register (r0..r31)\n+;;  m: memory operand\n+;;\n+;; Plus, we define the following constraint strings:\n+;;\n+;;  S: symbol that is in the \"small data\" area\n+\n+;; Register constraints\n+\n+(define_register_constraint \"j\" \"SIB_REGS\"\n+  \"A register suitable for an indirect sibcall.\")\n+\n+;; Integer constraints\n+\n+(define_constraint \"I\"\n+  \"A signed 16-bit constant (for arithmetic instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_INT (ival)\")))\n+\n+(define_constraint \"J\"\n+  \"An unsigned 16-bit constant (for logical instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_INT_UNSIGNED (ival)\")))\n+\n+(define_constraint \"K\"\n+  \"An unsigned 16-bit high constant (for logical instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UPPER16_INT (ival)\")))\n+\n+(define_constraint \"L\"\n+  \"An unsigned 5-bit constant (for shift counts).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 31\")))\n+\n+(define_constraint \"M\"\n+  \"Integer zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"N\"\n+  \"An unsigned 8-bit constant (for custom instruction codes).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 255\")))\n+\n+(define_constraint \"O\"\n+  \"An unsigned 5-bit constant (for control register numbers).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 31\")))\n+\n+(define_constraint \"S\"\n+  \"An immediate stored in small data, accessible by GP.\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"nios2_symbol_ref_in_small_data_p (op)\")))\n+\n+(define_constraint \"T\"\n+  \"A constant unspec offset representing a relocation.\"\n+  (match_test \"nios2_unspec_reloc_p (op)\"))"}, {"sha": "82b0aa1328fe293995bf3ced8eaecde13dc04dd5", "filename": "gcc/config/nios2/elf.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Felf.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,52 @@\n+/* Definitions of ELF target support for Altera Nios II.\n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Jonah Graham (jgraham@altera.com), \n+   Will Reece (wreece@altera.com), and Jeff DaSilva (jdasilva@altera.com).\n+   Contributed by Mentor Graphics, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Specs to support the additional command-line options for Nios II ELF\n+   toolchains.  */\n+\n+/* -msmallc chooses an alternate C library.\n+   -msys-lib= specifies an additional low-level system/hosting library and\n+   is typically used to suck in a library provided by a HAL BSP.  */\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+\"--start-group %{msmallc: -lsmallc} %{!msmallc: -lc} -lgcc \\\n+ %{msys-lib=*: -l%*} \\\n+ --end-group \\\n+\"\n+\n+/* Linking with -mhal suppresses inclusion of the GCC-provided crt* begin/end\n+   code.  Normally in this case you also link with -msys-crt0= to specify\n+   the startup code provided by the HAL BSP instead.  */\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\t\t\t\t\t\\\n+  \"%{mhal:\"\t\t\t\t\t\t\t\\\n+  \"%{msys-crt0=*:%*} %{!msys-crt0=*:crt0%O%s} \"\t\t\t\\\n+  \"%{msys-crt0=:%eYou need a C startup file for -msys-crt0=};\"\t\\\n+  \":crti%O%s crtbegin%O%s}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!mhal:crtend%O%s crtn%O%s}\"\n+\n+/* The ELF target doesn't support the Nios II Linux ABI.  */\n+#define TARGET_LINUX_ABI 0\n+"}, {"sha": "8d7bfb2a14fba7929d1848fd62b221f487eec644", "filename": "gcc/config/nios2/elf.opt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Felf.opt?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,38 @@\n+; Options for the Altera Nios II port of the compiler.\n+; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+; Contributed by Altera and Mentor Graphics, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as published by\n+; the Free Software Foundation; either version 3, or (at your option)\n+; any later version.\n+;\n+; GCC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+; These additional options are supported for ELF (bare-metal) Nios II\n+; toolchains.\n+\n+msmallc\n+Target Report RejectNegative\n+Link with a limited version of the C library\n+\n+msys-lib=\n+Target RejectNegative Joined Var(nios2_sys_lib_string)\n+Name of system library to link against\n+\n+msys-crt0=\n+Target RejectNegative Joined Var(nios2_sys_crt0_string)\n+Name of the startfile\n+\n+mhal\n+Target Report RejectNegative\n+Link with HAL BSP"}, {"sha": "0306335b40971cacccf1865df0617e1a863fe3ab", "filename": "gcc/config/nios2/linux.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Flinux.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,38 @@\n+/* Definitions of target support for Altera Nios II systems\n+   running GNU/Linux with ELF format.\n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Mentor Graphics, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define TARGET_OS_CPP_BUILTINS()                \\\n+  do                                            \\\n+    {                                           \\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS();           \\\n+    }                                           \\\n+  while (0)\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC LINK_SPEC_ENDIAN \\\n+  \" %{shared:-shared} \\\n+    %{static:-Bstatic} \\\n+    %{rdynamic:-export-dynamic}\"\n+\n+/* This toolchain implements the ABI for Linux Systems documented in the\n+   Nios II Processor Reference Handbook.  */\n+#define TARGET_LINUX_ABI 1\n+"}, {"sha": "be7bc6e3080e6c0aaf0d506e452bc9176b486445", "filename": "gcc/config/nios2/nios2-opts.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,69 @@\n+/* Definitions for option handling for Nios II.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef NIOS2_OPTS_H\n+#define NIOS2_OPTS_H\n+\n+/* Enumeration of all FPU insn codes.  */\n+#define N2FPU_ALL_CODES\t\t\t\t\t\t\t\\\n+  N2FPU_CODE(fadds) N2FPU_CODE(fsubs) N2FPU_CODE(fmuls) N2FPU_CODE(fdivs) \\\n+  N2FPU_CODE(fmins) N2FPU_CODE(fmaxs)\t\t\t\t\t\\\n+  N2FPU_CODE(fnegs) N2FPU_CODE(fabss) N2FPU_CODE(fsqrts)\t\t\\\n+  N2FPU_CODE(fsins) N2FPU_CODE(fcoss) N2FPU_CODE(ftans) N2FPU_CODE(fatans) \\\n+  N2FPU_CODE(fexps) N2FPU_CODE(flogs)\t\t\t\t\t\\\n+  N2FPU_CODE(fcmpeqs) N2FPU_CODE(fcmpnes)\t\t\t\t\\\n+  N2FPU_CODE(fcmplts) N2FPU_CODE(fcmples)\t\t\t\t\\\n+  N2FPU_CODE(fcmpgts) N2FPU_CODE(fcmpges)\t\t\t\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n+  N2FPU_CODE(faddd) N2FPU_CODE(fsubd) N2FPU_CODE(fmuld) N2FPU_CODE(fdivd) \\\n+  N2FPU_CODE(fmind) N2FPU_CODE(fmaxd)\t\t\t\t\t\\\n+  N2FPU_CODE(fnegd) N2FPU_CODE(fabsd) N2FPU_CODE(fsqrtd)\t\t\\\n+  N2FPU_CODE(fsind) N2FPU_CODE(fcosd) N2FPU_CODE(ftand) N2FPU_CODE(fatand) \\\n+  N2FPU_CODE(fexpd) N2FPU_CODE(flogd)\t\t\t\t\t\\\n+  N2FPU_CODE(fcmpeqd) N2FPU_CODE(fcmpned)\t\t\t\t\\\n+  N2FPU_CODE(fcmpltd) N2FPU_CODE(fcmpled)\t\t\t\t\\\n+  N2FPU_CODE(fcmpgtd) N2FPU_CODE(fcmpged)\t\t\t\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n+  N2FPU_CODE(floatis) N2FPU_CODE(floatus)\t\t\t\t\\\n+  N2FPU_CODE(floatid) N2FPU_CODE(floatud)\t\t\t\t\\\n+  N2FPU_CODE(fixsi) N2FPU_CODE(fixsu)\t\t\t\t\t\\\n+  N2FPU_CODE(fixdi) N2FPU_CODE(fixdu)\t\t\t\t\t\\\n+  N2FPU_CODE(fextsd) N2FPU_CODE(ftruncds)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  N2FPU_CODE(fwrx) N2FPU_CODE(fwry)\t\t\t\t\t\\\n+  N2FPU_CODE(frdxlo) N2FPU_CODE(frdxhi) N2FPU_CODE(frdy)\n+\n+enum n2fpu_code {\n+#define N2FPU_CODE(name) n2fpu_ ## name,\n+  N2FPU_ALL_CODES\n+#undef N2FPU_CODE\n+  n2fpu_code_num\n+};\n+\n+/* An enumeration to indicate the custom code status; if values within 0--255\n+   are registered to an FPU insn, or custom insn.  */\n+enum nios2_ccs_code\n+{\n+  CCS_UNUSED,\n+  CCS_FPU,\n+  CCS_BUILTIN_CALL\n+};\n+\n+#endif\n+"}, {"sha": "c256b023b51730848758a0a109109132025b8fbe", "filename": "gcc/config/nios2/nios2-protos.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,61 @@\n+/* Subroutine declarations for Altera Nios II target support.\n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Jonah Graham (jgraham@altera.com).\n+   Contributed by Mentor Graphics, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_NIOS2_PROTOS_H\n+#define GCC_NIOS2_PROTOS_H\n+\n+extern int nios2_initial_elimination_offset (int, int);\n+extern int nios2_can_use_return_insn (void);\n+extern void nios2_expand_prologue (void);\n+extern void nios2_expand_epilogue (bool);\n+extern void nios2_function_profiler (FILE *, int);\n+\n+#ifdef RTX_CODE\n+extern int nios2_emit_move_sequence (rtx *, enum machine_mode);\n+extern void nios2_emit_expensive_div (rtx *, enum machine_mode);\n+extern void nios2_adjust_call_address (rtx *);\n+\n+extern rtx nios2_get_return_address (int);\n+extern void nios2_set_return_address (rtx, rtx);\n+\n+extern bool nios2_validate_compare (enum machine_mode, rtx *, rtx *, rtx *);\n+extern bool nios2_validate_fpu_compare (enum machine_mode, rtx *, rtx *, rtx *,\n+\t\t\t\t\tbool);\n+\n+extern bool nios2_fpu_insn_enabled (enum n2fpu_code);\n+extern const char * nios2_fpu_insn_asm (enum n2fpu_code);\n+\n+extern bool nios2_legitimate_pic_operand_p (rtx);\n+extern bool nios2_symbol_ref_in_small_data_p (rtx);\n+extern bool nios2_regno_ok_for_base_p (int, bool);\n+extern bool nios2_unspec_reloc_p (rtx);\n+\n+#ifdef TREE_CODE\n+#ifdef ARGS_SIZE_RTX\n+/* expr.h defines both ARGS_SIZE_RTX and `enum direction' */\n+extern enum direction nios2_function_arg_padding (enum machine_mode, const_tree);\n+extern enum direction nios2_block_reg_padding (enum machine_mode, tree, int);\n+#endif /* ARGS_SIZE_RTX */\n+\n+#endif /* TREE_CODE */\n+#endif /* RTX_CODE */\n+\n+#endif /* GCC_NIOS2_PROTOS_H */"}, {"sha": "92ecfe568ae8ff61c8514d0a94c1790bb4b45fa5", "filename": "gcc/config/nios2/nios2.c", "status": "added", "additions": 3224, "deletions": 0, "changes": 3224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad"}, {"sha": "8e6941b40114e5d8350419f6d839f8024eb8a9ba", "filename": "gcc/config/nios2/nios2.h", "status": "added", "additions": 500, "deletions": 0, "changes": 500, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,500 @@\n+/* Definitions of target machine for Altera Nios II.\n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Jonah Graham (jgraham@altera.com), \n+   Will Reece (wreece@altera.com), and Jeff DaSilva (jdasilva@altera.com).\n+   Contributed by Mentor Graphics, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_NIOS2_H\n+#define GCC_NIOS2_H\n+\n+/* FPU insn codes declared here.  */\n+#include \"config/nios2/nios2-opts.h\"\n+\n+/* Define built-in preprocessor macros.  */\n+#define TARGET_CPU_CPP_BUILTINS()                   \\\n+  do                                                \\\n+    {                                               \\\n+      builtin_define_std (\"NIOS2\");                 \\\n+      builtin_define_std (\"nios2\");                 \\\n+      if (TARGET_BIG_ENDIAN)                        \\\n+        builtin_define_std (\"nios2_big_endian\");    \\\n+      else                                          \\\n+        builtin_define_std (\"nios2_little_endian\"); \\\n+    }                                               \\\n+  while (0)\n+\n+/* We're little endian, unless otherwise specified by defining\n+   BIG_ENDIAN_FLAG.  */\n+#ifndef TARGET_ENDIAN_DEFAULT\n+# define TARGET_ENDIAN_DEFAULT 0\n+#endif\n+\n+/* Default target_flags if no switches specified.  */\n+#ifndef TARGET_DEFAULT\n+# define TARGET_DEFAULT (MASK_HAS_MUL | TARGET_ENDIAN_DEFAULT)\n+#endif\n+\n+#define CC1_SPEC \"%{G*}\"\n+\n+#if TARGET_ENDIAN_DEFAULT == 0\n+# define ASM_SPEC \"%{!meb:-EL} %{meb:-EB}\"\n+# define LINK_SPEC_ENDIAN \"%{!meb:-EL} %{meb:-EB}\"\n+# define MULTILIB_DEFAULTS { \"EL\" }\n+#else\n+# define ASM_SPEC \"%{!mel:-EB} %{mel:-EL}\"\n+# define LINK_SPEC_ENDIAN \"%{!mel:-EB} %{mel:-EL}\"\n+# define MULTILIB_DEFAULTS { \"EB\" }\n+#endif\n+\n+#define LINK_SPEC LINK_SPEC_ENDIAN \\\n+  \" %{shared:-shared} \\\n+    %{static:-Bstatic}\"\n+\n+\n+/* Storage layout.  */\n+\n+#define DEFAULT_SIGNED_CHAR 1\n+#define BITS_BIG_ENDIAN 0\n+#define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n+#define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n+#define BITS_PER_UNIT 8\n+#define BITS_PER_WORD 32\n+#define UNITS_PER_WORD 4\n+#define POINTER_SIZE 32\n+#define BIGGEST_ALIGNMENT 32\n+#define STRICT_ALIGNMENT 1\n+#define FUNCTION_BOUNDARY 32\n+#define PARM_BOUNDARY 32\n+#define STACK_BOUNDARY 32\n+#define PREFERRED_STACK_BOUNDARY 32\n+#define MAX_FIXED_MODE_SIZE 64\n+\n+#define CONSTANT_ALIGNMENT(EXP, ALIGN)                          \\\n+  ((TREE_CODE (EXP) == STRING_CST)                              \\\n+   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n+\n+/* Layout of source language data types.  */\n+\n+#define INT_TYPE_SIZE 32\n+#define SHORT_TYPE_SIZE 16\n+#define LONG_TYPE_SIZE 32\n+#define LONG_LONG_TYPE_SIZE 64\n+#define FLOAT_TYPE_SIZE 32\n+#define DOUBLE_TYPE_SIZE 64\n+#define LONG_DOUBLE_TYPE_SIZE DOUBLE_TYPE_SIZE\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+\n+/* Basic characteristics of Nios II registers:\n+\n+   Regno  Name\n+   0      r0       zero    always zero\n+   1      r1       at      Assembler Temporary\n+   2-3    r2-r3            Return Location\n+   4-7    r4-r7            Register Arguments\n+   8-15   r8-r15           Caller Saved Registers\n+   16-22  r16-r22          Callee Saved Registers\n+   22     r22              Global Offset Table pointer (Linux ABI only)\n+   23     r23              Thread pointer (Linux ABI only)\n+   24     r24      et      Exception Temporary\n+   25     r25      bt      Breakpoint Temporary\n+   26     r26      gp      Global Pointer\n+   27     r27      sp      Stack Pointer\n+   28     r28      fp      Frame Pointer\n+   29     r29      ea      Exception Return Address\n+   30     r30      ba      Breakpoint Return Address\n+   31     r31      ra      Return Address\n+\t\t\t   \n+   32     ctl0     status\n+   33     ctl1     estatus STATUS saved by exception\n+   34     ctl2     bstatus STATUS saved by break\n+   35     ctl3     ipri    Interrupt Priority Mask\n+   36     ctl4     ecause  Exception Cause\n+\n+   37     pc               Not an actual register\n+\n+   38     fake_fp          Fake Frame Pointer (always eliminated)\n+   39     fake_ap          Fake Argument Pointer (always eliminated)\n+   40                      First Pseudo Register\n+\n+   In addition, r12 is used as the static chain register and r13, r14, and r15\n+   are clobbered by PLT code sequences.  \n+\n+   The definitions for all the hard register numbers are located in nios2.md.\n+*/\n+\n+#define FIXED_REGISTERS                      \\\n+  {\t\t\t\t\t     \\\n+/*        +0  1  2  3  4  5  6  7  8  9 */   \\\n+/*   0 */  1, 1, 0, 0, 0, 0, 0, 0, 0, 0,     \\\n+/*  10 */  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \\\n+/*  20 */  0, 0, TARGET_LINUX_ABI, TARGET_LINUX_ABI, 1, 1, 1, 1, 0, 1,     \\\n+/*  30 */  1, 0, 1, 1, 1, 1, 1, 1, 1, 1,     \\\n+  }\n+\n+/* Call used == caller saved + fixed regs + args + ret vals.  */\n+#define CALL_USED_REGISTERS                  \\\n+  {\t\t\t\t\t     \\\n+/*        +0  1  2  3  4  5  6  7  8  9 */   \\\n+/*   0 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,     \\\n+/*  10 */  1, 1, 1, 1, 1, 1, 0, 0, 0, 0,     \\\n+/*  20 */  0, 0, TARGET_LINUX_ABI, TARGET_LINUX_ABI, 1, 1, 1, 1, 0, 1,     \\\n+/*  30 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,     \\\n+  }\n+\n+#define MODES_TIEABLE_P(MODE1, MODE2) 1\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) 1\n+#define HARD_REGNO_NREGS(REGNO, MODE)            \\\n+  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+/* Register Classes.  */\n+\n+enum reg_class\n+{\n+  NO_REGS,\n+  SIB_REGS,\n+  GP_REGS,\n+  ALL_REGS,\n+  LIM_REG_CLASSES\n+};\n+\n+#define N_REG_CLASSES (int) LIM_REG_CLASSES\n+\n+#define REG_CLASS_NAMES   \\\n+  {  \"NO_REGS\",\t\t  \\\n+     \"SIB_REGS\",\t  \\\n+     \"GP_REGS\",           \\\n+     \"ALL_REGS\" }\n+\n+#define GENERAL_REGS ALL_REGS\n+\n+#define REG_CLASS_CONTENTS\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    /* NO_REGS  */ { 0, 0},\t\t\t\\\n+    /* SIB_REGS */ { 0xfe0c, 0},\t\t\\\n+    /* GP_REGS  */ {~0, 0},\t\t\t\\\n+    /* ALL_REGS */ {~0,~0}\t\t\t\\\n+  }\n+\n+\n+#define GP_REG_P(REGNO) ((unsigned)(REGNO) <= LAST_GP_REG)\n+#define REGNO_REG_CLASS(REGNO) (GP_REG_P (REGNO) ? GP_REGS : ALL_REGS)\n+#define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n+  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+/* Tests for various kinds of constants used in the Nios II port.  */\n+\n+#define SMALL_INT(X) ((unsigned HOST_WIDE_INT)(X) + 0x8000 < 0x10000)\n+#define SMALL_INT_UNSIGNED(X) ((X) >= 0 && (X) < 0x10000)\n+#define UPPER16_INT(X) (((X) & 0xffff) == 0)\n+#define SHIFT_INT(X) ((X) >= 0 && (X) <= 31)\n+#define RDWRCTL_INT(X) ((X) >= 0 && (X) <= 31)\n+#define CUSTOM_INSN_OPCODE(X) ((X) >= 0 && (X) <= 255)\n+\n+/* Say that the epilogue uses the return address register.  Note that\n+   in the case of sibcalls, the values \"used by the epilogue\" are\n+   considered live at the start of the called function.  */\n+#define EPILOGUE_USES(REGNO) (epilogue_completed && (REGNO) == RA_REGNO)\n+\n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.\n+   No definition is equivalent to always zero.  */\n+\n+#define EXIT_IGNORE_STACK 1\n+\n+/* Trampolines use a 5-instruction sequence.  */\n+#define TRAMPOLINE_SIZE 20\n+\n+/* Stack layout.  */\n+#define STACK_GROWS_DOWNWARD\n+#define STARTING_FRAME_OFFSET 0\n+#define FIRST_PARM_OFFSET(FUNDECL) 0\n+\n+/* Before the prologue, RA lives in r31.  */\n+#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, RA_REGNO)\n+#define RETURN_ADDR_RTX(C,F) nios2_get_return_address (C)\n+\n+#define DWARF_FRAME_RETURN_COLUMN RA_REGNO\n+\n+/* The CFA includes the pretend args.  */\n+#define ARG_POINTER_CFA_OFFSET(FNDECL) \\\n+  (gcc_assert ((FNDECL) == current_function_decl), \\\n+   FIRST_PARM_OFFSET (FNDECL) + crtl->args.pretend_args_size)\n+\n+/* Frame/arg pointer elimination settings.  */\n+#define ELIMINABLE_REGS                                                 \\\n+{{ ARG_POINTER_REGNUM,   STACK_POINTER_REGNUM},                         \\\n+ { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM},                    \\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},                         \\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n+\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  (OFFSET) = nios2_initial_elimination_offset ((FROM), (TO))\n+\n+/* Calling convention definitions.  */\n+typedef struct nios2_args\n+{\n+  int regs_used;\n+} CUMULATIVE_ARGS;\n+\n+#define NUM_ARG_REGS (LAST_ARG_REGNO - FIRST_ARG_REGNO + 1)\n+\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n+  do { (CUM).regs_used = 0; } while (0)\n+\n+#define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n+  (nios2_function_arg_padding ((MODE), (TYPE)))\n+\n+#define PAD_VARARGS_DOWN \\\n+  (FUNCTION_ARG_PADDING (TYPE_MODE (type), type) == downward)\n+\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (nios2_block_reg_padding ((MODE), (TYPE), (FIRST)))\n+\n+#define FUNCTION_ARG_REGNO_P(REGNO) \\\n+  ((REGNO) >= FIRST_ARG_REGNO && (REGNO) <= LAST_ARG_REGNO)\n+\n+/* Passing function arguments on stack.  */\n+#define PUSH_ARGS 0\n+#define ACCUMULATE_OUTGOING_ARGS 1\n+\n+/* We define TARGET_RETURN_IN_MEMORY, so set to zero.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Profiling.  */\n+#define PROFILE_BEFORE_PROLOGUE\n+#define NO_PROFILE_COUNTERS 1\n+#define FUNCTION_PROFILER(FILE, LABELNO) \\\n+  nios2_function_profiler ((FILE), (LABELNO))\n+\n+/* Addressing modes.  */\n+\n+#define CONSTANT_ADDRESS_P(X) \\\n+  (CONSTANT_P (X) && memory_address_p (SImode, X))\n+\n+#define MAX_REGS_PER_ADDRESS 1\n+#define BASE_REG_CLASS ALL_REGS\n+#define INDEX_REG_CLASS NO_REGS\n+\n+#define REGNO_OK_FOR_BASE_P(REGNO) nios2_regno_ok_for_base_p ((REGNO), true)\n+#define REGNO_OK_FOR_INDEX_P(REGNO) 0\n+\n+/* Describing Relative Costs of Operations.  */\n+#define MOVE_MAX 4\n+#define SLOW_BYTE_ACCESS 1\n+\n+/* It is as good to call a constant function address as to call an address\n+   kept in a register.  */\n+#define NO_FUNCTION_CSE\n+\n+/* Position independent code.  */\n+\n+#define PIC_OFFSET_TABLE_REGNUM 22\n+#define LEGITIMATE_PIC_OPERAND_P(X) nios2_legitimate_pic_operand_p (X)\n+\n+/* Define output assembler language.  */\n+\n+#define ASM_APP_ON \"#APP\\n\"\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#define ASM_COMMENT_START \"# \"\n+\n+#define GLOBAL_ASM_OP \"\\t.global\\t\"\n+\n+#define REGISTER_NAMES \\\n+  {\t\t       \\\n+    \"zero\", \\\n+    \"at\", \\\n+    \"r2\", \\\n+    \"r3\", \\\n+    \"r4\", \\\n+    \"r5\", \\\n+    \"r6\", \\\n+    \"r7\", \\\n+    \"r8\", \\\n+    \"r9\", \\\n+    \"r10\", \\\n+    \"r11\", \\\n+    \"r12\", \\\n+    \"r13\", \\\n+    \"r14\", \\\n+    \"r15\", \\\n+    \"r16\", \\\n+    \"r17\", \\\n+    \"r18\", \\\n+    \"r19\", \\\n+    \"r20\", \\\n+    \"r21\", \\\n+    \"r22\", \\\n+    \"r23\", \\\n+    \"et\", \\\n+    \"bt\", \\\n+    \"gp\", \\\n+    \"sp\", \\\n+    \"fp\", \\\n+    \"ta\", \\\n+    \"ba\", \\\n+    \"ra\", \\\n+    \"status\", \\\n+    \"estatus\", \\\n+    \"bstatus\", \\\n+    \"ipri\", \\\n+    \"ecause\", \\\n+    \"pc\", \\\n+    \"fake_fp\", \\\n+    \"fake_ap\", \\\n+}\n+\n+#define ADDITIONAL_REGISTER_NAMES       \\\n+{\t\t\t\t\t\\\n+  {\"r0\", 0},\t\t\t\t\\\n+  {\"r1\", 1},\t\t\t\t\\\n+  {\"r24\", 24},                          \\\n+  {\"r25\", 25},                          \\\n+  {\"r26\", 26},                          \\\n+  {\"r27\", 27},                          \\\n+  {\"r28\", 28},                          \\\n+  {\"r29\", 29},                          \\\n+  {\"r30\", 30},                          \\\n+  {\"r31\", 31}                           \\\n+}\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n+      fprintf (FILE, \".L%u\\n\", (unsigned) (VALUE));\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), STREAM); \\\n+      fprintf (STREAM, \".L%u-.L%u\\n\", (unsigned) (VALUE), (unsigned) (REL)); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Section directives.  */\n+\n+/* Output before read-only data.  */\n+#define TEXT_SECTION_ASM_OP \"\\t.section\\t.text\"\n+\n+/* Output before writable data.  */\n+#define DATA_SECTION_ASM_OP \"\\t.section\\t.data\"\n+\n+/* Output before uninitialized data.  */\n+#define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n+\n+/* Output before 'small' uninitialized data.  */\n+#define SBSS_SECTION_ASM_OP \"\\t.section\\t.sbss\"\n+\n+#ifndef IN_LIBGCC2\n+/* Default the definition of \"small data\" to 8 bytes.  */\n+extern unsigned HOST_WIDE_INT nios2_section_threshold;\n+#endif\n+\n+#define NIOS2_DEFAULT_GVALUE 8\n+\n+/* This says how to output assembler code to declare an\n+   uninitialized external linkage data object.  Under SVR4,\n+   the linker seems to want the alignment of data objects\n+   to depend on their types.  We do exactly that here.  */\n+#undef COMMON_ASM_OP\n+#define COMMON_ASM_OP   \"\\t.comm\\t\"\n+\n+#define ASM_OUTPUT_ALIGN(FILE, LOG)\t\t     \\\n+  do {\t\t\t\t\t\t     \\\n+    fprintf ((FILE), \"%s%d\\n\", ALIGN_ASM_OP, (LOG)); \\\n+  } while (0)\n+\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)              \\\n+do                                                                      \\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+    assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+    fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE),\t\\\n+\t     (ALIGN) / BITS_PER_UNIT);\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+\n+/* This says how to output assembler code to declare an\n+   uninitialized internal linkage data object.  Under SVR4,\n+   the linker seems to want the alignment of data objects\n+   to depend on their types.  We do exactly that here.  */\n+\n+#undef  ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)               \\\n+do {                                                                    \\\n+  if ((SIZE) <= nios2_section_threshold)                                \\\n+    switch_to_section (sbss_section);\t\t\t\t\t\\\n+  else                                                                  \\\n+    switch_to_section (bss_section);\t\t\t\t\t\\\n+  ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");                     \\\n+  if (!flag_inhibit_size_directive)                                     \\\n+    ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);                       \\\n+  ASM_OUTPUT_ALIGN ((FILE), exact_log2((ALIGN) / BITS_PER_UNIT));       \\\n+  ASM_OUTPUT_LABEL(FILE, NAME);                                         \\\n+  ASM_OUTPUT_SKIP((FILE), (SIZE) ? (SIZE) : 1);                         \\\n+} while (0)\n+\n+/* Put the jump tables in .text because when using position-independent code,\n+   Nios II elf has no relocation that can represent arbitrary differences\n+   between symbols in different sections.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n+\n+/* Exception handling.  */\n+\n+/* Describe __builtin_eh_return.  */\n+#define EH_RETURN_STACKADJ_RTX gen_rtx_REG (Pmode, LAST_RETVAL_REGNO)\n+#define EH_RETURN_DATA_REGNO(N) ((N) <= (LAST_ARG_REGNO - FIRST_ARG_REGNO) \\\n+\t\t\t\t ? (N) + FIRST_ARG_REGNO : INVALID_REGNUM)\n+\n+/* Nios II has no appropriate relocations for a 32-bit PC-relative or\n+   section-relative pointer encoding.  This therefore always chooses an\n+   absolute representation for pointers.  An unfortunate consequence of\n+   this is that ld complains about the absolute fde encoding when linking\n+   with -shared or -fpie, but the warning is harmless and there seems to\n+   be no good way to suppress it.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\\\n+  (flag_pic ? DW_EH_PE_aligned : DW_EH_PE_sdata4)\n+\n+/* Misc. parameters.  */\n+\n+#define STORE_FLAG_VALUE 1\n+#define Pmode SImode\n+#define FUNCTION_MODE QImode\n+\n+#define CASE_VECTOR_MODE Pmode\n+\n+#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n+\n+#define LOAD_EXTEND_OP(MODE) (ZERO_EXTEND)\n+\n+#define WORD_REGISTER_OPERATIONS\n+\n+#endif /* GCC_NIOS2_H */"}, {"sha": "cf1559934b3ef71a58ea62e311fdeb189bb4f799", "filename": "gcc/config/nios2/nios2.md", "status": "added", "additions": 1029, "deletions": 0, "changes": 1029, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,1029 @@\n+;; Machine Description for Altera Nios II.\n+;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+;; Contributed by Jonah Graham (jgraham@altera.com) and \n+;; Will Reece (wreece@altera.com).\n+;; Contributed by Mentor Graphics, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register numbers\n+(define_constants\n+  [\n+   (FIRST_RETVAL_REGNO     2)\t; Return value registers\n+   (LAST_RETVAL_REGNO      3)\t;\n+   (FIRST_ARG_REGNO        4)\t; Argument registers\n+   (LAST_ARG_REGNO         7)\t;\n+\n+   (TP_REGNO              23)\t; Thread pointer register\n+   (GP_REGNO\t          26)\t; Global pointer register\n+   (FP_REGNO\t          28)\t; Frame pointer register\n+   (EA_REGNO\t          29)\t; Exception return address register\n+   (RA_REGNO              31)\t; Return address register\n+   (LAST_GP_REG           31)\t; Last general purpose register\n+\n+   ;; Target register definitions\n+   (STATIC_CHAIN_REGNUM        12)\n+   (STACK_POINTER_REGNUM       27)\n+   (HARD_FRAME_POINTER_REGNUM  28)\n+   (PC_REGNUM                  37)\n+   (FRAME_POINTER_REGNUM       38)\n+   (ARG_POINTER_REGNUM         39)\n+   (FIRST_PSEUDO_REGISTER      40)\n+  ]\n+)\n+\n+;; Enumeration of UNSPECs\n+\n+(define_c_enum \"unspecv\" [\n+  UNSPECV_BLOCKAGE\n+  UNSPECV_WRCTL\n+  UNSPECV_RDCTL\n+  UNSPECV_FWRX\n+  UNSPECV_FWRY\n+  UNSPECV_FRDXLO\n+  UNSPECV_FRDXHI\n+  UNSPECV_FRDY\n+  UNSPECV_CUSTOM_NXX\n+  UNSPECV_CUSTOM_XNXX\n+  UNSPECV_LDXIO\n+  UNSPECV_STXIO\n+])\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_FCOS\n+  UNSPEC_FSIN\n+  UNSPEC_FTAN\n+  UNSPEC_FATAN\n+  UNSPEC_FEXP\n+  UNSPEC_FLOG\n+  UNSPEC_LOAD_GOT_REGISTER\n+  UNSPEC_PIC_SYM\n+  UNSPEC_PIC_CALL_SYM\n+  UNSPEC_TLS\n+  UNSPEC_TLS_LDM\n+  UNSPEC_LOAD_TLS_IE\n+  UNSPEC_ADD_TLS_LE\n+  UNSPEC_ADD_TLS_GD\n+  UNSPEC_ADD_TLS_LDM\n+  UNSPEC_ADD_TLS_LDO\n+  UNSPEC_EH_RETURN\n+  UNSPEC_SYNC\n+])\n+\n+\f\n+;;  Instruction scheduler\n+\n+; No schedule info is currently available, using an assumption that no\n+; instruction can use the results of the previous instruction without\n+; incuring a stall.\n+\n+; length of an instruction (in bytes)\n+(define_attr \"length\" \"\" (const_int 4))\n+(define_attr \"type\" \n+  \"unknown,complex,control,alu,cond_alu,st,ld,shift,mul,div,custom\" \n+  (const_string \"complex\"))\n+\n+(define_asm_attributes\n+ [(set_attr \"length\" \"4\")\n+  (set_attr \"type\" \"complex\")])\n+\n+(define_automaton \"nios2\")\n+(automata_option \"v\")\n+;(automata_option \"no-minimization\")\n+(automata_option \"ndfa\")\n+\n+; The nios2 pipeline is fairly straightforward for the fast model.\n+; Every alu operation is pipelined so that an instruction can\n+; be issued every cycle.  However, there are still potential\n+; stalls which this description tries to deal with.\n+\n+(define_cpu_unit \"cpu\" \"nios2\")\n+\n+(define_insn_reservation \"complex\" 1\n+  (eq_attr \"type\" \"complex\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"control\" 1\n+  (eq_attr \"type\" \"control\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"alu\" 1\n+  (eq_attr \"type\" \"alu\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"cond_alu\" 1\n+  (eq_attr \"type\" \"cond_alu\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"st\" 1\n+  (eq_attr \"type\" \"st\")\n+  \"cpu\")\n+  \n+(define_insn_reservation \"custom\" 1\n+  (eq_attr \"type\" \"custom\")\n+  \"cpu\")\n+\n+; shifts, muls and lds have three cycle latency\n+(define_insn_reservation \"ld\" 3\n+  (eq_attr \"type\" \"ld\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"shift\" 3\n+  (eq_attr \"type\" \"shift\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"mul\" 3\n+  (eq_attr \"type\" \"mul\")\n+  \"cpu\")\n+\n+(define_insn_reservation \"div\" 1\n+  (eq_attr \"type\" \"div\")\n+  \"cpu\")\n+\n+(include \"predicates.md\")\n+(include \"constraints.md\")\n+\n+\f\n+;; Move instructions\n+\n+(define_mode_iterator M [QI HI SI])\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:M 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:M 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  if (nios2_emit_move_sequence (operands, <MODE>mode))\n+    DONE;\n+})\n+\n+(define_insn \"movqi_internal\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=m, r,r, r\")\n+        (match_operand:QI 1 \"general_operand\"       \"rM,m,rM,I\"))]\n+  \"(register_operand (operands[0], QImode)\n+    || reg_or_0_operand (operands[1], QImode))\"\n+  \"@\n+    stb%o0\\\\t%z1, %0\n+    ldbu%o1\\\\t%0, %1\n+    mov\\\\t%0, %z1\n+    movi\\\\t%0, %1\"\n+  [(set_attr \"type\" \"st,ld,alu,alu\")])\n+\n+(define_insn \"movhi_internal\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m, r,r, r\")\n+        (match_operand:HI 1 \"general_operand\"       \"rM,m,rM,I\"))]\n+  \"(register_operand (operands[0], HImode)\n+    || reg_or_0_operand (operands[1], HImode))\"\n+  \"@\n+    sth%o0\\\\t%z1, %0\n+    ldhu%o1\\\\t%0, %1\n+    mov\\\\t%0, %z1\n+    movi\\\\t%0, %1\"\n+  [(set_attr \"type\" \"st,ld,alu,alu\")])\n+\n+(define_insn \"movsi_internal\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m, r,r, r,r,r,r,r\")\n+        (match_operand:SI 1 \"general_operand\"       \"rM,m,rM,I,J,K,S,i\"))]\n+  \"(register_operand (operands[0], SImode)\n+    || reg_or_0_operand (operands[1], SImode))\"\n+  \"@\n+    stw%o0\\\\t%z1, %0\n+    ldw%o1\\\\t%0, %1\n+    mov\\\\t%0, %z1\n+    movi\\\\t%0, %1\n+    movui\\\\t%0, %1\n+    movhi\\\\t%0, %H1\n+    addi\\\\t%0, gp, %%gprel(%1)\n+    movhi\\\\t%0, %H1\\;addi\\\\t%0, %0, %L1\"\n+  [(set_attr \"type\" \"st,ld,alu,alu,alu,alu,alu,alu\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,8\")])\n+\n+(define_mode_iterator BH [QI HI])\n+(define_mode_iterator BHW [QI HI SI])\n+(define_mode_attr bh [(QI \"b\") (HI \"h\")])\n+(define_mode_attr bhw [(QI \"b\") (HI \"h\") (SI \"w\")])\n+(define_mode_attr bhw_uns [(QI \"bu\") (HI \"hu\") (SI \"w\")])\n+\n+(define_insn \"ld<bhw_uns>io\"\n+  [(set (match_operand:BHW 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:BHW\n+          [(match_operand:BHW 1 \"memory_operand\" \"m\")] UNSPECV_LDXIO))]\n+  \"\"\n+  \"ld<bhw_uns>io\\\\t%0, %1\"\n+  [(set_attr \"type\" \"ld\")])\n+\n+(define_expand \"ld<bh>io\"\n+  [(set (match_operand:BH 0 \"register_operand\" \"=r\")\n+        (match_operand:BH 1 \"memory_operand\"    \"m\"))]\n+  \"\"\n+{\n+  rtx tmp = gen_reg_rtx (SImode);\n+  emit_insn (gen_ld<bh>io_signed (tmp, operands[1]));\n+  emit_insn (gen_mov<mode> (operands[0], gen_lowpart (<MODE>mode, tmp)));\n+  DONE;\n+})\n+\n+(define_insn \"ld<bh>io_signed\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (sign_extend:SI\n+          (unspec_volatile:BH\n+            [(match_operand:BH 1 \"memory_operand\" \"m\")] UNSPECV_LDXIO)))]\n+  \"\"\n+  \"ld<bh>io\\\\t%0, %1\"\n+  [(set_attr \"type\" \"ld\")])\n+\n+(define_insn \"st<bhw>io\"\n+  [(set (match_operand:BHW 0 \"memory_operand\" \"=m\")\n+        (unspec_volatile:BHW\n+          [(match_operand:BHW 1 \"reg_or_0_operand\" \"rM\")] UNSPECV_STXIO))]\n+  \"\"\n+  \"st<bhw>io\\\\t%z1, %0\"\n+  [(set_attr \"type\" \"st\")])\n+\n+\f\n+;; QI to [HI, SI] extension patterns are collected together\n+(define_mode_iterator QX [HI SI])\n+\n+;; Zero extension patterns\n+(define_insn \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+        (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+    andi\\\\t%0, %1, 0xffff\n+    ldhu%o1\\\\t%0, %1\"\n+  [(set_attr \"type\"     \"alu,ld\")])\n+\n+(define_insn \"zero_extendqi<mode>2\"\n+  [(set (match_operand:QX 0 \"register_operand\" \"=r,r\")\n+        (zero_extend:QX (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+    andi\\\\t%0, %1, 0xff\n+    ldbu%o1\\\\t%0, %1\"\n+  [(set_attr \"type\"     \"alu,ld\")])\n+\n+;; Sign extension patterns\n+\n+(define_insn \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\"                     \"=r,r\")\n+        (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\"  \"r,m\")))]\n+  \"\"\n+  \"@\n+   #\n+   ldh%o1\\\\t%0, %1\"\n+  [(set_attr \"type\" \"alu,ld\")])\n+\n+(define_insn \"extendqi<mode>2\"\n+  [(set (match_operand:QX 0 \"register_operand\"                     \"=r,r\")\n+        (sign_extend:QX (match_operand:QI 1 \"nonimmediate_operand\"  \"r,m\")))]\n+  \"\"\n+  \"@\n+   #\n+   ldb%o1\\\\t%0, %1\"\n+  [(set_attr \"type\" \"alu,ld\")])\n+\n+;; Split patterns for register alternative cases.\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+        (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (and:SI (match_dup 1) (const_int 65535)))\n+   (set (match_dup 0)\n+        (xor:SI (match_dup 0) (const_int 32768)))\n+   (set (match_dup 0)\n+        (plus:SI (match_dup 0) (const_int -32768)))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n+(define_split\n+  [(set (match_operand:QX 0 \"register_operand\" \"\")\n+        (sign_extend:QX (match_operand:QI 1 \"register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+        (and:SI (match_dup 1) (const_int 255)))\n+   (set (match_dup 0)\n+        (xor:SI (match_dup 0) (const_int 128)))\n+   (set (match_dup 0)\n+        (plus:SI (match_dup 0) (const_int -128)))]\n+  \"operands[0] = gen_lowpart (SImode, operands[0]);\n+   operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n+\f\n+;; Arithmetic Operations\n+\n+(define_insn \"addsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\"   \"%r\")\n+                 (match_operand:SI 2 \"add_regimm_operand\" \"rIT\")))]\n+  \"\"\n+  \"add%i2\\\\t%0, %1, %z2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_insn \"subsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r\")\n+        (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rM\")\n+                  (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"sub\\\\t%0, %z1, %2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_insn \"mulsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n+        (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+                 (match_operand:SI 2 \"arith_operand\"    \"rI\")))]\n+  \"TARGET_HAS_MUL\"\n+  \"mul%i2\\\\t%0, %1, %z2\"\n+  [(set_attr \"type\" \"mul\")])\n+\n+(define_expand \"divsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n+        (div:SI (match_operand:SI 1 \"register_operand\"   \"r\")\n+                (match_operand:SI 2 \"register_operand\"   \"r\")))]\n+  \"\"\n+{\n+  if (!TARGET_HAS_DIV)\n+    {\n+      if (TARGET_FAST_SW_DIV)\n+        {\n+          nios2_emit_expensive_div (operands, SImode);\n+          DONE;\n+        }\n+      else\n+        FAIL;\n+    }\n+})\n+\n+(define_insn \"divsi3_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r\")\n+        (div:SI (match_operand:SI 1 \"register_operand\"     \"r\")\n+                (match_operand:SI 2 \"register_operand\"     \"r\")))]\n+  \"TARGET_HAS_DIV\"\n+  \"div\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"div\")])\n+\n+(define_insn \"udivsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r\")\n+        (udiv:SI (match_operand:SI 1 \"register_operand\"    \"r\")\n+                 (match_operand:SI 2 \"register_operand\"    \"r\")))]\n+  \"TARGET_HAS_DIV\"\n+  \"divu\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"div\")])\n+\n+(define_code_iterator EXTEND [sign_extend zero_extend])\n+(define_code_attr us [(sign_extend \"s\") (zero_extend \"u\")])\n+(define_code_attr mul [(sign_extend \"mul\") (zero_extend \"umul\")])\n+\n+(define_insn \"<us>mulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\"                       \"=r\")\n+        (truncate:SI\n+         (lshiftrt:DI\n+          (mult:DI (EXTEND:DI (match_operand:SI 1 \"register_operand\"  \"r\"))\n+                   (EXTEND:DI (match_operand:SI 2 \"register_operand\"  \"r\")))\n+          (const_int 32))))]\n+  \"TARGET_HAS_MULX\"\n+  \"mulx<us><us>\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"mul\")])\n+\n+(define_expand \"<mul>sidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(mult:DI (EXTEND:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t (EXTEND:DI (match_operand:SI 2 \"register_operand\" \"\"))))]\n+  \"TARGET_HAS_MULX\"\n+{\n+  rtx hi = gen_reg_rtx (SImode);\n+  rtx lo = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_<us>mulsi3_highpart (hi, operands[1], operands[2]));\n+  emit_insn (gen_mulsi3 (lo, operands[1], operands[2]));\n+  emit_move_insn (gen_lowpart (SImode, operands[0]), lo);\n+  emit_move_insn (gen_highpart (SImode, operands[0]), hi);\n+  DONE;\n+})\n+\n+\f\n+;;  Negate and ones complement\n+\n+(define_insn \"negsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\"        \"=r\")\n+        (neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"sub\\\\t%0, zero, %1\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_insn \"one_cmplsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\"        \"=r\")\n+        (not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"nor\\\\t%0, zero, %1\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+\f\n+;;  Integer logical Operations\n+\n+(define_code_iterator LOGICAL [and ior xor])\n+(define_code_attr logical_asm [(and \"and\") (ior \"or\") (xor \"xor\")])\n+\n+(define_insn \"<code>si3\"\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r\")\n+        (LOGICAL:SI (match_operand:SI 1 \"register_operand\" \"%r,r,r\")\n+                    (match_operand:SI 2 \"logical_operand\"  \"rM,J,K\")))]\n+  \"\"\n+  \"@\n+    <logical_asm>\\\\t%0, %1, %z2\n+    <logical_asm>%i2\\\\t%0, %1, %2\n+    <logical_asm>h%i2\\\\t%0, %1, %U2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_insn \"*norsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"                 \"=r\")\n+        (and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"%r\"))\n+                (not:SI (match_operand:SI 2 \"register_operand\"  \"r\"))))]\n+  \"\"\n+  \"nor\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+\f\n+;;  Shift instructions\n+\n+(define_code_iterator SHIFT  [ashift ashiftrt lshiftrt rotate])\n+(define_code_attr shift_op   [(ashift \"ashl\") (ashiftrt \"ashr\")\n+                              (lshiftrt \"lshr\") (rotate \"rotl\")])\n+(define_code_attr shift_asm  [(ashift \"sll\") (ashiftrt \"sra\")\n+                              (lshiftrt \"srl\") (rotate \"rol\")])\n+\n+(define_insn \"<shift_op>si3\"\n+  [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n+        (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+                  (match_operand:SI 2 \"shift_operand\"    \"rL\")))]\n+  \"\"\n+  \"<shift_asm>%i2\\\\t%0, %1, %z2\"\n+  [(set_attr \"type\" \"shift\")])\n+\n+(define_insn \"rotrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r\")\n+        (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+                     (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"ror\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"shift\")])\n+\n+\f\n+;; Floating point instructions\n+\n+;; Mode iterator for single/double float\n+(define_mode_iterator F [SF DF])\n+(define_mode_attr f [(SF \"s\") (DF \"d\")])\n+\n+;; Basic arithmetic instructions\n+(define_code_iterator FOP3 [plus minus mult div])\n+(define_code_attr fop3 [(plus \"add\") (minus \"sub\") (mult \"mul\") (div \"div\")])\n+\n+(define_insn \"<fop3><mode>3\"\n+  [(set (match_operand:F 0 \"register_operand\"        \"=r\")\n+        (FOP3:F (match_operand:F 1 \"register_operand\" \"r\")\n+                (match_operand:F 2 \"register_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_f<fop3><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_f<fop3><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; Floating point min/max operations\n+(define_code_iterator SMINMAX [smin smax])\n+(define_code_attr minmax [(smin \"min\") (smax \"max\")])\n+(define_insn \"<code><mode>3\"\n+  [(set (match_operand:F 0 \"register_operand\" \"=r\")\n+        (SMINMAX:F (match_operand:F 1 \"register_operand\" \"r\")\n+                   (match_operand:F 2 \"register_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_f<minmax><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_f<minmax><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; These 2-operand FP operations can be collected together\n+(define_code_iterator FOP2 [abs neg sqrt])\n+(define_insn \"<code><mode>2\"\n+  [(set (match_operand:F 0 \"register_operand\" \"=r\")\n+        (FOP2:F (match_operand:F 1 \"register_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_f<code><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_f<code><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; X, Y register access instructions\n+(define_insn \"nios2_fwrx\"\n+  [(unspec_volatile [(match_operand:DF 0 \"register_operand\" \"r\")] UNSPECV_FWRX)]\n+  \"nios2_fpu_insn_enabled (n2fpu_fwrx)\"\n+  { return nios2_fpu_insn_asm (n2fpu_fwrx); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+(define_insn \"nios2_fwry\"\n+  [(unspec_volatile [(match_operand:SF 0 \"register_operand\" \"r\")] UNSPECV_FWRY)]\n+  \"nios2_fpu_insn_enabled (n2fpu_fwry)\"\n+  { return nios2_fpu_insn_asm (n2fpu_fwry); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; The X, Y read insns uses an int iterator\n+(define_int_iterator UNSPEC_READ_XY [UNSPECV_FRDXLO UNSPECV_FRDXHI\n+                                     UNSPECV_FRDY])\n+(define_int_attr read_xy [(UNSPECV_FRDXLO \"frdxlo\") (UNSPECV_FRDXHI \"frdxhi\")\n+                          (UNSPECV_FRDY \"frdy\")])\n+(define_insn \"nios2_<read_xy>\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SF [(const_int 0)] UNSPEC_READ_XY))]\n+  \"nios2_fpu_insn_enabled (n2fpu_<read_xy>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_<read_xy>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; Various math functions\n+(define_int_iterator MATHFUNC\n+  [UNSPEC_FCOS UNSPEC_FSIN UNSPEC_FTAN UNSPEC_FATAN UNSPEC_FEXP UNSPEC_FLOG])\n+(define_int_attr mathfunc [(UNSPEC_FCOS \"cos\") (UNSPEC_FSIN \"sin\")\n+                           (UNSPEC_FTAN \"tan\") (UNSPEC_FATAN \"atan\")\n+                           (UNSPEC_FEXP \"exp\") (UNSPEC_FLOG \"log\")])\n+\n+(define_insn \"<mathfunc><mode>2\"\n+  [(set (match_operand:F 0 \"register_operand\" \"=r\")\n+        (unspec:F [(match_operand:F 1 \"register_operand\" \"r\")] MATHFUNC))]\n+  \"nios2_fpu_insn_enabled (n2fpu_f<mathfunc><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_f<mathfunc><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; Converting between floating point and fixed point\n+\n+(define_code_iterator FLOAT [float unsigned_float])\n+(define_code_iterator FIX [fix unsigned_fix])\n+\n+(define_code_attr conv_op [(float \"float\") (unsigned_float \"floatuns\")\n+                           (fix \"fix\") (unsigned_fix \"fixuns\")])\n+(define_code_attr i [(float \"i\") (unsigned_float \"u\")\n+                     (fix \"i\") (unsigned_fix \"u\")])\n+\n+;; Integer to float conversions\n+(define_insn \"<conv_op>si<mode>2\"\n+  [(set (match_operand:F 0 \"register_operand\" \"=r\")\n+        (FLOAT:F (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_float<i><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_float<i><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; Float to integer conversions\n+(define_insn \"<conv_op>_trunc<mode>si2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (FIX:SI (match_operand:F 1 \"general_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_fix<f><i>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_fix<f><i>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+(define_insn \"extendsfdf2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=r\")\n+        (float_extend:DF (match_operand:SF 1 \"general_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_fextsd)\"\n+  { return nios2_fpu_insn_asm (n2fpu_fextsd); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+(define_insn \"truncdfsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (float_truncate:SF (match_operand:DF 1 \"general_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_ftruncds)\"\n+  { return nios2_fpu_insn_asm (n2fpu_ftruncds); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+\n+\f\n+;; Prologue, Epilogue and Return\n+\n+(define_expand \"prologue\"\n+  [(const_int 1)]\n+  \"\"\n+{\n+  nios2_expand_prologue ();\n+  DONE;\n+})\n+\n+(define_expand \"epilogue\"\n+  [(return)]\n+  \"\"\n+{\n+  nios2_expand_epilogue (false);\n+  DONE;\n+})\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(return)]\n+  \"\"\n+{\n+  nios2_expand_epilogue (true);\n+  DONE;\n+})\n+\n+(define_insn \"return\"\n+  [(simple_return)]\n+  \"nios2_can_use_return_insn ()\"\n+  \"ret\")\n+\n+(define_insn \"simple_return\"\n+  [(simple_return)]\n+  \"\"\n+  \"ret\")\n+\n+;; Block any insns from being moved before this point, since the\n+;; profiling call to mcount can use various registers that aren't\n+;; saved or used to pass arguments.\n+\n+(define_insn \"blockage\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]\n+  \"\"\n+  \"\"\n+  [(set_attr \"type\" \"unknown\")\n+   (set_attr \"length\" \"0\")])\n+\n+;; This is used in compiling the unwind routines.\n+(define_expand \"eh_return\"\n+  [(use (match_operand 0 \"general_operand\"))]\n+  \"\"\n+{\n+  if (GET_MODE (operands[0]) != Pmode)\n+    operands[0] = convert_to_mode (Pmode, operands[0], 0);\n+  emit_insn (gen_eh_set_ra (operands[0]));\n+  DONE;\n+})\n+\n+;; Modify the return address for EH return.  We can't expand this\n+;; until we know where it will be put in the stack frame.\n+\n+(define_insn_and_split \"eh_set_ra\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_EH_RETURN)\n+   (clobber (match_scratch:SI 1 \"=&r\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  nios2_set_return_address (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+\f\n+;;  Jumps and calls\n+\n+; Note that the assembler fixes up any out-of-range branch instructions not\n+; caught by the compiler branch shortening code.  The sequence emitted by\n+; the assembler can be very inefficient, but it is correct for PIC code.\n+; For non-PIC we are better off converting to an absolute JMPI.\n+;\n+; Direct calls and sibcalls use the CALL and JMPI instructions, respectively.\n+; These instructions have an immediate operand that specifies the low 28 bits\n+; of the PC, effectively allowing direct calls within a 256MB memory segment.\n+; Per the Nios II Processor Reference Handbook, the linker is not required to\n+; check or adjust for overflow.\n+\n+(define_insn \"indirect_jump\"\n+  [(set (pc) (match_operand:SI 0 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"jmp\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"jump\"\n+  [(set (pc)\n+        (label_ref (match_operand 0 \"\" \"\")))]\n+  \"\"\n+  {\n+    if (flag_pic || get_attr_length (insn) == 4)\n+      return \"br\\\\t%0\";\n+    else\n+      return \"jmpi\\\\t%0\";\n+  }\n+  [(set_attr \"type\" \"control\")\n+   (set (attr \"length\") \n+        (if_then_else\n+\t    (and (ge (minus (match_dup 0) (pc)) (const_int -32768))\n+\t         (le (minus (match_dup 0) (pc)) (const_int 32764)))\n+\t    (const_int 4)\n+\t    (const_int 8)))])\n+\n+\n+(define_expand \"call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+                    (match_operand 1 \"\" \"\"))\n+              (clobber (reg:SI RA_REGNO))])]\n+  \"\"\n+  \"nios2_adjust_call_address (&operands[0]);\")\n+\n+(define_expand \"call_value\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+                   (call (match_operand 1 \"\" \"\")\n+                         (match_operand 2 \"\" \"\")))\n+              (clobber (reg:SI RA_REGNO))])]\n+  \"\"\n+  \"nios2_adjust_call_address (&operands[1]);\")\n+\n+(define_insn \"*call\"\n+  [(call (mem:QI (match_operand:SI 0 \"call_operand\" \"i,r\"))\n+         (match_operand 1 \"\" \"\"))\n+   (clobber (reg:SI RA_REGNO))]\n+  \"\"\n+  \"@\n+   call\\\\t%0\n+   callr\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"*call_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+        (call (mem:QI (match_operand:SI 1 \"call_operand\" \"i,r\"))\n+              (match_operand 2 \"\" \"\")))\n+   (clobber (reg:SI RA_REGNO))]\n+  \"\"\n+  \"@\n+   call\\\\t%1\n+   callr\\\\t%1\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_expand \"sibcall\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+                    (match_operand 1 \"\" \"\"))\n+              (return)])]\n+  \"\"\n+  \"nios2_adjust_call_address (&operands[0]);\")\n+\n+(define_expand \"sibcall_value\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+                   (call (match_operand 1 \"\" \"\")\n+                         (match_operand 2 \"\" \"\")))\n+              (return)])]\n+  \"\"\n+  \"nios2_adjust_call_address (&operands[1]);\")\n+\n+(define_insn \"*sibcall\"\n+ [(call (mem:QI (match_operand:SI 0 \"call_operand\" \"i,j\"))\n+        (match_operand 1 \"\" \"\"))\n+  (return)]\n+  \"\"\n+  \"@\n+   jmpi\\\\t%0\n+   jmp\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"*sibcall_value\"\n+ [(set (match_operand 0 \"register_operand\" \"\")\n+       (call (mem:QI (match_operand:SI 1 \"call_operand\" \"i,j\"))\n+             (match_operand 2 \"\" \"\")))\n+  (return)]\n+  \"\"\n+  \"@\n+   jmpi\\\\t%1\n+   jmp\\\\t%1\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_expand \"tablejump\"\n+  [(parallel [(set (pc) (match_operand 0 \"register_operand\" \"r\"))\n+              (use (label_ref (match_operand 1 \"\" \"\")))])]\n+  \"\"\n+{\n+  if (flag_pic)\n+    {\n+      /* Hopefully, CSE will eliminate this copy.  */\n+      rtx reg1 = copy_addr_to_reg (gen_rtx_LABEL_REF (Pmode, operands[1]));\n+      rtx reg2 = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_addsi3 (reg2, operands[0], reg1));\n+      operands[0] = reg2;\n+    }\n+})\n+\n+(define_insn \"*tablejump\"\n+  [(set (pc)\n+        (match_operand:SI 0 \"register_operand\" \"r\"))\n+   (use (label_ref (match_operand 1 \"\" \"\")))]\n+  \"\"\n+  \"jmp\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+\f\n+;; cstore, cbranch patterns\n+\n+(define_mode_iterator CM [SI SF DF])\n+\n+(define_expand \"cstore<mode>4\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (match_operator:SI 1 \"expandable_comparison_operator\"\n+\t  [(match_operand:CM 2 \"register_operand\")\n+\t   (match_operand:CM 3 \"nonmemory_operand\")]))]\n+  \"\"\n+{\n+  if (!nios2_validate_compare (<MODE>mode, &operands[1], &operands[2],\n+                               &operands[3]))\n+    FAIL;\n+})\n+\n+(define_expand \"cbranch<mode>4\"\n+  [(set (pc)\n+     (if_then_else\n+       (match_operator 0 \"expandable_comparison_operator\"\n+         [(match_operand:CM 1 \"register_operand\")\n+          (match_operand:CM 2 \"nonmemory_operand\")])\n+       (label_ref (match_operand 3 \"\"))\n+       (pc)))]\n+  \"\"\n+{\n+  if (!nios2_validate_compare (<MODE>mode, &operands[0], &operands[1],\n+                               &operands[2]))\n+    FAIL;\n+  if (GET_MODE_CLASS (<MODE>mode) == MODE_FLOAT\n+      || !reg_or_0_operand (operands[2], <MODE>mode))\n+    {\n+      rtx condreg = gen_reg_rtx (SImode);\n+      emit_insn (gen_cstore<mode>4\n+                  (condreg, operands[0], operands[1], operands[2]));\n+      operands[1] = condreg;\n+      operands[2] = const0_rtx;\n+      operands[0] = gen_rtx_fmt_ee (NE, VOIDmode, condreg, const0_rtx);\n+    }\n+})\n+\n+(define_insn \"nios2_cbranch\"\n+  [(set (pc)\n+     (if_then_else\n+       (match_operator 0 \"ordered_comparison_operator\"\n+         [(match_operand:SI 1 \"reg_or_0_operand\" \"rM\")\n+          (match_operand:SI 2 \"reg_or_0_operand\" \"rM\")])\n+       (label_ref (match_operand 3 \"\" \"\"))\n+       (pc)))]\n+  \"\"\n+  {\n+    if (flag_pic || get_attr_length (insn) == 4)\n+      return \"b%0\\t%z1, %z2, %l3\";\n+    else\n+      return \"b%R0\\t%z1, %z2, .+8;jmpi\\t%l3\";\n+  }\n+  [(set_attr \"type\" \"control\")\n+   (set (attr \"length\") \n+        (if_then_else\n+\t    (and (ge (minus (match_dup 1) (pc)) (const_int -32768))\n+\t         (le (minus (match_dup 1) (pc)) (const_int 32764)))\n+\t    (const_int 4) (const_int 8)))])\n+\n+;; Floating point comparisons\n+(define_code_iterator FCMP [eq ne gt ge le lt])\n+(define_insn \"nios2_s<code><mode>\"\n+  [(set (match_operand:SI 0 \"register_operand\"        \"=r\")\n+        (FCMP:SI (match_operand:F 1 \"register_operand\" \"r\")\n+                 (match_operand:F 2 \"register_operand\" \"r\")))]\n+  \"nios2_fpu_insn_enabled (n2fpu_fcmp<code><f>)\"\n+  { return nios2_fpu_insn_asm (n2fpu_fcmp<code><f>); }\n+  [(set_attr \"type\" \"custom\")])\n+\n+;; Integer comparisons\n+\n+(define_code_iterator EQNE [eq ne])\n+(define_insn \"nios2_cmp<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r\")\n+        (EQNE:SI (match_operand:SI 1 \"register_operand\"  \"%r\")\n+                 (match_operand:SI 2 \"arith_operand\"     \"rI\")))]\n+  \"\"\n+  \"cmp<code>%i2\\\\t%0, %1, %z2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_code_iterator SCMP [ge lt])\n+(define_insn \"nios2_cmp<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r\")\n+        (SCMP:SI (match_operand:SI 1 \"reg_or_0_operand\"  \"rM\")\n+                 (match_operand:SI 2 \"arith_operand\"     \"rI\")))]\n+  \"\"\n+  \"cmp<code>%i2\\\\t%0, %z1, %z2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+(define_code_iterator UCMP [geu ltu])\n+(define_insn \"nios2_cmp<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r\")\n+        (UCMP:SI (match_operand:SI 1 \"reg_or_0_operand\"  \"rM\")\n+                 (match_operand:SI 2 \"uns_arith_operand\" \"rJ\")))]\n+  \"\"\n+  \"cmp<code>%i2\\\\t%0, %z1, %z2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+\n+\f\n+;; Custom instruction patterns.  The operands are intentionally\n+;; mode-less, to serve as generic carriers of all Altera defined\n+;; built-in instruction/function types.\n+\n+(define_insn \"custom_nxx\"\n+  [(unspec_volatile [(match_operand 0 \"custom_insn_opcode\" \"N\")\n+                     (match_operand 1 \"reg_or_0_operand\"  \"rM\")\n+                     (match_operand 2 \"reg_or_0_operand\"  \"rM\")]\n+    UNSPECV_CUSTOM_NXX)]\n+  \"\"\n+  \"custom\\\\t%0, zero, %z1, %z2\"\n+  [(set_attr \"type\" \"custom\")])\n+\n+(define_insn \"custom_xnxx\"\n+  [(set (match_operand 0 \"register_operand\"   \"=r\")\n+        (unspec_volatile [(match_operand 1 \"custom_insn_opcode\" \"N\")\n+                          (match_operand 2 \"reg_or_0_operand\"  \"rM\")\n+                          (match_operand 3 \"reg_or_0_operand\"  \"rM\")] \n+\t UNSPECV_CUSTOM_XNXX))]\n+  \"\"\n+  \"custom\\\\t%1, %0, %z2, %z3\"\n+  [(set_attr \"type\" \"custom\")])\n+\n+\f\n+;;  Misc. patterns\n+\n+(define_insn \"nop\"\n+  [(const_int 0)]\n+  \"\"\n+  \"nop\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+;; Connect 'sync' to 'memory_barrier' standard expand name\n+(define_expand \"memory_barrier\"\n+  [(const_int 0)]\n+  \"\"\n+{\n+  emit_insn (gen_sync ());\n+  DONE;\n+})\n+\n+;; For the nios2 __builtin_sync built-in function\n+(define_expand \"sync\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SYNC))]\n+  \"\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*sync_insn\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SYNC))]\n+  \"\"\n+  \"sync\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"rdctl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(match_operand:SI 1 \"rdwrctl_operand\" \"O\")] \n+\t UNSPECV_RDCTL))]\n+  \"\"\n+  \"rdctl\\\\t%0, ctl%1\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"wrctl\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"rdwrctl_operand\"  \"O\")\n+                        (match_operand:SI 1 \"reg_or_0_operand\" \"rM\")] \n+    UNSPECV_WRCTL)]\n+  \"\"\n+  \"wrctl\\\\tctl%0, %z1\"\n+  [(set_attr \"type\" \"control\")])\n+\n+;; Trap patterns\n+(define_insn \"trap\"\n+  [(trap_if (const_int 1) (const_int 3))]\n+  \"\"\n+  \"break\\\\t3\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"ctrapsi4\"\n+  [(trap_if (match_operator 0 \"ordered_comparison_operator\"\n+              [(match_operand:SI 1 \"reg_or_0_operand\" \"rM\")\n+               (match_operand:SI 2 \"reg_or_0_operand\" \"rM\")])\n+            (match_operand 3 \"const_int_operand\" \"i\"))]\n+  \"\"\n+  \"b%R0\\\\t%z1, %z2, 1f\\;break\\\\t%3\\;1:\"\n+  [(set_attr \"type\" \"control\")\n+   (set_attr \"length\" \"8\")])\n+  \n+;; Load the GOT register.\n+(define_insn \"load_got_register\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+\t (unspec:SI [(const_int 0)] UNSPEC_LOAD_GOT_REGISTER))\n+   (set (match_operand:SI 1 \"register_operand\" \"=r\")\n+\t (unspec:SI [(const_int 0)] UNSPEC_LOAD_GOT_REGISTER))]\n+  \"\"\n+  \"nextpc\\\\t%0\n+\\\\t1:\n+\\\\tmovhi\\\\t%1, %%hiadj(_GLOBAL_OFFSET_TABLE_ - 1b)\n+\\\\taddi\\\\t%1, %1, %%lo(_GLOBAL_OFFSET_TABLE_ - 1b)\"\n+  [(set_attr \"length\" \"12\")])\n+\n+;; Read thread pointer register\n+(define_expand \"get_thread_pointersi\"\n+  [(match_operand:SI 0 \"register_operand\" \"=r\")]\n+  \"TARGET_LINUX_ABI\"\n+{\n+  emit_move_insn (operands[0], gen_rtx_REG (Pmode, TP_REGNO));\n+  DONE;\n+})"}, {"sha": "13aef254610dde018323201788e5cc38441e5a4f", "filename": "gcc/config/nios2/nios2.opt", "status": "added", "additions": 531, "deletions": 0, "changes": 531, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.opt?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,531 @@\n+; Options for the Altera Nios II port of the compiler.\n+; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+; Contributed by Altera and Mentor Graphics, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as published by\n+; the Free Software Foundation; either version 3, or (at your option)\n+; any later version.\n+;\n+; GCC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+HeaderInclude\n+config/nios2/nios2-opts.h\n+\n+TargetSave\n+int saved_fpu_custom_code[n2fpu_code_num]\n+\n+TargetSave\n+enum nios2_ccs_code saved_custom_code_status[256]\n+\n+TargetSave\n+int saved_custom_code_index[256]\n+\n+mhw-div\n+Target Report Mask(HAS_DIV)\n+Enable DIV, DIVU\n+\n+mhw-mul\n+Target Report Mask(HAS_MUL)\n+Enable MUL instructions\n+\n+mhw-mulx\n+Target Report Mask(HAS_MULX)\n+Enable MULX instructions, assume fast shifter\n+\n+mfast-sw-div\n+Target Report Mask(FAST_SW_DIV)\n+Use table based fast divide (default at -O3)\n+\n+mbypass-cache\n+Target Report Mask(BYPASS_CACHE)\n+All memory accesses use I/O load/store instructions\n+\n+mno-cache-volatile\n+Target Report RejectNegative Mask(BYPASS_CACHE_VOLATILE)\n+Volatile memory accesses use I/O load/store instructions\n+\n+mcache-volatile\n+Target Report RejectNegative Undocumented InverseMask(BYPASS_CACHE_VOLATILE)\n+Volatile memory accesses do not use I/O load/store instructions\n+\n+mgpopt\n+Target Report Var(TARGET_GPOPT) Init(-1)\n+Use GP-relative addressing to access small data\n+\n+meb\n+Target Report RejectNegative Mask(BIG_ENDIAN)\n+Use big-endian byte order\n+\n+mel\n+Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Use little-endian byte order\n+\n+mcustom-fpu-cfg=\n+Target RejectNegative Joined Var(nios2_custom_fpu_cfg_string)\n+Floating point custom instruction configuration name\n+\n+mno-custom-ftruncds\n+Target Report RejectNegative Var(nios2_custom_ftruncds, -1)\n+Do not use the ftruncds custom instruction\n+\n+mcustom-ftruncds=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_ftruncds) Init(-1)\n+Integer id (N) of ftruncds custom instruction\n+\n+mno-custom-fextsd\n+Target Report RejectNegative Var(nios2_custom_fextsd, -1)\n+Do not use the fextsd custom instruction\n+\n+mcustom-fextsd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fextsd) Init(-1)\n+Integer id (N) of fextsd custom instruction\n+\n+mno-custom-fixdu\n+Target Report RejectNegative Var(nios2_custom_fixdu, -1)\n+Do not use the fixdu custom instruction\n+\n+mcustom-fixdu=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fixdu) Init(-1)\n+Integer id (N) of fixdu custom instruction\n+\n+mno-custom-fixdi\n+Target Report RejectNegative Var(nios2_custom_fixdi, -1)\n+Do not use the fixdi custom instruction\n+\n+mcustom-fixdi=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fixdi) Init(-1)\n+Integer id (N) of fixdi custom instruction\n+\n+mno-custom-fixsu\n+Target Report RejectNegative Var(nios2_custom_fixsu, -1)\n+Do not use the fixsu custom instruction\n+\n+mcustom-fixsu=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fixsu) Init(-1)\n+Integer id (N) of fixsu custom instruction\n+\n+mno-custom-fixsi\n+Target Report RejectNegative Var(nios2_custom_fixsi, -1)\n+Do not use the fixsi custom instruction\n+\n+mcustom-fixsi=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fixsi) Init(-1)\n+Integer id (N) of fixsi custom instruction\n+\n+mno-custom-floatud\n+Target Report RejectNegative Var(nios2_custom_floatud, -1)\n+Do not use the floatud custom instruction\n+\n+mcustom-floatud=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_floatud) Init(-1)\n+Integer id (N) of floatud custom instruction\n+\n+mno-custom-floatid\n+Target Report RejectNegative Var(nios2_custom_floatid, -1)\n+Do not use the floatid custom instruction\n+\n+mcustom-floatid=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_floatid) Init(-1)\n+Integer id (N) of floatid custom instruction\n+\n+mno-custom-floatus\n+Target Report RejectNegative Var(nios2_custom_floatus, -1)\n+Do not use the floatus custom instruction\n+\n+mcustom-floatus=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_floatus) Init(-1)\n+Integer id (N) of floatus custom instruction\n+\n+mno-custom-floatis\n+Target Report RejectNegative Var(nios2_custom_floatis, -1)\n+Do not use the floatis custom instruction\n+\n+mcustom-floatis=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_floatis) Init(-1)\n+Integer id (N) of floatis custom instruction\n+\n+mno-custom-fcmpned\n+Target Report RejectNegative Var(nios2_custom_fcmpned, -1)\n+Do not use the fcmpned custom instruction\n+\n+mcustom-fcmpned=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpned) Init(-1)\n+Integer id (N) of fcmpned custom instruction\n+\n+mno-custom-fcmpeqd\n+Target Report RejectNegative Var(nios2_custom_fcmpeqd, -1)\n+Do not use the fcmpeqd custom instruction\n+\n+mcustom-fcmpeqd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpeqd) Init(-1)\n+Integer id (N) of fcmpeqd custom instruction\n+\n+mno-custom-fcmpged\n+Target Report RejectNegative Var(nios2_custom_fcmpged, -1)\n+Do not use the fcmpged custom instruction\n+\n+mcustom-fcmpged=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpged) Init(-1)\n+Integer id (N) of fcmpged custom instruction\n+\n+mno-custom-fcmpgtd\n+Target Report RejectNegative Var(nios2_custom_fcmpgtd, -1)\n+Do not use the fcmpgtd custom instruction\n+\n+mcustom-fcmpgtd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpgtd) Init(-1)\n+Integer id (N) of fcmpgtd custom instruction\n+\n+mno-custom-fcmpled\n+Target Report RejectNegative Var(nios2_custom_fcmpled, -1)\n+Do not use the fcmpled custom instruction\n+\n+mcustom-fcmpled=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpled) Init(-1)\n+Integer id (N) of fcmpled custom instruction\n+\n+mno-custom-fcmpltd\n+Target Report RejectNegative Var(nios2_custom_fcmpltd, -1)\n+Do not use the fcmpltd custom instruction\n+\n+mcustom-fcmpltd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpltd) Init(-1)\n+Integer id (N) of fcmpltd custom instruction\n+\n+mno-custom-flogd\n+Target Report RejectNegative Var(nios2_custom_flogd, -1)\n+Do not use the flogd custom instruction\n+\n+mcustom-flogd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_flogd) Init(-1)\n+Integer id (N) of flogd custom instruction\n+\n+mno-custom-fexpd\n+Target Report RejectNegative Var(nios2_custom_fexpd, -1)\n+Do not use the fexpd custom instruction\n+\n+mcustom-fexpd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fexpd) Init(-1)\n+Integer id (N) of fexpd custom instruction\n+\n+mno-custom-fatand\n+Target Report RejectNegative Var(nios2_custom_fatand, -1)\n+Do not use the fatand custom instruction\n+\n+mcustom-fatand=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fatand) Init(-1)\n+Integer id (N) of fatand custom instruction\n+\n+mno-custom-ftand\n+Target Report RejectNegative Var(nios2_custom_ftand, -1)\n+Do not use the ftand custom instruction\n+\n+mcustom-ftand=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_ftand) Init(-1)\n+Integer id (N) of ftand custom instruction\n+\n+mno-custom-fsind\n+Target Report RejectNegative Var(nios2_custom_fsind, -1)\n+Do not use the fsind custom instruction\n+\n+mcustom-fsind=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsind) Init(-1)\n+Integer id (N) of fsind custom instruction\n+\n+mno-custom-fcosd\n+Target Report RejectNegative Var(nios2_custom_fcosd, -1)\n+Do not use the fcosd custom instruction\n+\n+mcustom-fcosd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcosd) Init(-1)\n+Integer id (N) of fcosd custom instruction\n+\n+mno-custom-fsqrtd\n+Target Report RejectNegative Var(nios2_custom_fsqrtd, -1)\n+Do not use the fsqrtd custom instruction\n+\n+mcustom-fsqrtd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsqrtd) Init(-1)\n+Integer id (N) of fsqrtd custom instruction\n+\n+mno-custom-fabsd\n+Target Report RejectNegative Var(nios2_custom_fabsd, -1)\n+Do not use the fabsd custom instruction\n+\n+mcustom-fabsd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fabsd) Init(-1)\n+Integer id (N) of fabsd custom instruction\n+\n+mno-custom-fnegd\n+Target Report RejectNegative Var(nios2_custom_fnegd, -1)\n+Do not use the fnegd custom instruction\n+\n+mcustom-fnegd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fnegd) Init(-1)\n+Integer id (N) of fnegd custom instruction\n+\n+mno-custom-fmaxd\n+Target Report RejectNegative Var(nios2_custom_fmaxd, -1)\n+Do not use the fmaxd custom instruction\n+\n+mcustom-fmaxd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmaxd) Init(-1)\n+Integer id (N) of fmaxd custom instruction\n+\n+mno-custom-fmind\n+Target Report RejectNegative Var(nios2_custom_fmind, -1)\n+Do not use the fmind custom instruction\n+\n+mcustom-fmind=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmind) Init(-1)\n+Integer id (N) of fmind custom instruction\n+\n+mno-custom-fdivd\n+Target Report RejectNegative Var(nios2_custom_fdivd, -1)\n+Do not use the fdivd custom instruction\n+\n+mcustom-fdivd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fdivd) Init(-1)\n+Integer id (N) of fdivd custom instruction\n+\n+mno-custom-fmuld\n+Target Report RejectNegative Var(nios2_custom_fmuld, -1)\n+Do not use the fmuld custom instruction\n+\n+mcustom-fmuld=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmuld) Init(-1)\n+Integer id (N) of fmuld custom instruction\n+\n+mno-custom-fsubd\n+Target Report RejectNegative Var(nios2_custom_fsubd, -1)\n+Do not use the fsubd custom instruction\n+\n+mcustom-fsubd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsubd) Init(-1)\n+Integer id (N) of fsubd custom instruction\n+\n+mno-custom-faddd\n+Target Report RejectNegative Var(nios2_custom_faddd, -1)\n+Do not use the faddd custom instruction\n+\n+mcustom-faddd=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_faddd) Init(-1)\n+Integer id (N) of faddd custom instruction\n+\n+mno-custom-fcmpnes\n+Target Report RejectNegative Var(nios2_custom_fcmpnes, -1)\n+Do not use the fcmpnes custom instruction\n+\n+mcustom-fcmpnes=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpnes) Init(-1)\n+Integer id (N) of fcmpnes custom instruction\n+\n+mno-custom-fcmpeqs\n+Target Report RejectNegative Var(nios2_custom_fcmpeqs, -1)\n+Do not use the fcmpeqs custom instruction\n+\n+mcustom-fcmpeqs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpeqs) Init(-1)\n+Integer id (N) of fcmpeqs custom instruction\n+\n+mno-custom-fcmpges\n+Target Report RejectNegative Var(nios2_custom_fcmpges, -1)\n+Do not use the fcmpges custom instruction\n+\n+mcustom-fcmpges=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpges) Init(-1)\n+Integer id (N) of fcmpges custom instruction\n+\n+mno-custom-fcmpgts\n+Target Report RejectNegative Var(nios2_custom_fcmpgts, -1)\n+Do not use the fcmpgts custom instruction\n+\n+mcustom-fcmpgts=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpgts) Init(-1)\n+Integer id (N) of fcmpgts custom instruction\n+\n+mno-custom-fcmples\n+Target Report RejectNegative Var(nios2_custom_fcmples, -1)\n+Do not use the fcmples custom instruction\n+\n+mcustom-fcmples=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmples) Init(-1)\n+Integer id (N) of fcmples custom instruction\n+\n+mno-custom-fcmplts\n+Target Report RejectNegative Var(nios2_custom_fcmplts, -1)\n+Do not use the fcmplts custom instruction\n+\n+mcustom-fcmplts=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmplts) Init(-1)\n+Integer id (N) of fcmplts custom instruction\n+\n+mno-custom-flogs\n+Target Report RejectNegative Var(nios2_custom_flogs, -1)\n+Do not use the flogs custom instruction\n+\n+mcustom-flogs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_flogs) Init(-1)\n+Integer id (N) of flogs custom instruction\n+\n+mno-custom-fexps\n+Target Report RejectNegative Var(nios2_custom_fexps, -1)\n+Do not use the fexps custom instruction\n+\n+mcustom-fexps=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fexps) Init(-1)\n+Integer id (N) of fexps custom instruction\n+\n+mno-custom-fatans\n+Target Report RejectNegative Var(nios2_custom_fatans, -1)\n+Do not use the fatans custom instruction\n+\n+mcustom-fatans=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fatans) Init(-1)\n+Integer id (N) of fatans custom instruction\n+\n+mno-custom-ftans\n+Target Report RejectNegative Var(nios2_custom_ftans, -1)\n+Do not use the ftans custom instruction\n+\n+mcustom-ftans=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_ftans) Init(-1)\n+Integer id (N) of ftans custom instruction\n+\n+mno-custom-fsins\n+Target Report RejectNegative Var(nios2_custom_fsins, -1)\n+Do not use the fsins custom instruction\n+\n+mcustom-fsins=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsins) Init(-1)\n+Integer id (N) of fsins custom instruction\n+\n+mno-custom-fcoss\n+Target Report RejectNegative Var(nios2_custom_fcoss, -1)\n+Do not use the fcoss custom instruction\n+\n+mcustom-fcoss=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fcoss) Init(-1)\n+Integer id (N) of fcoss custom instruction\n+\n+mno-custom-fsqrts\n+Target Report RejectNegative Var(nios2_custom_fsqrts, -1)\n+Do not use the fsqrts custom instruction\n+\n+mcustom-fsqrts=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsqrts) Init(-1)\n+Integer id (N) of fsqrts custom instruction\n+\n+mno-custom-fabss\n+Target Report RejectNegative Var(nios2_custom_fabss, -1)\n+Do not use the fabss custom instr\n+\n+mcustom-fabss=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fabss) Init(-1)\n+Integer id (N) of fabss custom instruction\n+\n+mno-custom-fnegs\n+Target Report RejectNegative Var(nios2_custom_fnegs, -1)\n+Do not use the fnegs custom instruction\n+\n+mcustom-fnegs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fnegs) Init(-1)\n+Integer id (N) of fnegs custom instruction\n+\n+mno-custom-fmaxs\n+Target Report RejectNegative Var(nios2_custom_fmaxs, -1)\n+Do not use the fmaxs custom instruction\n+\n+mcustom-fmaxs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmaxs) Init(-1)\n+Integer id (N) of fmaxs custom instruction\n+\n+mno-custom-fmins\n+Target Report RejectNegative Var(nios2_custom_fmins, -1)\n+Do not use the fmins custom instruction\n+\n+mcustom-fmins=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmins) Init(-1)\n+Integer id (N) of fmins custom instruction\n+\n+mno-custom-fdivs\n+Target Report RejectNegative Var(nios2_custom_fdivs, -1)\n+Do not use the fdivs custom instruction\n+\n+mcustom-fdivs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fdivs) Init(-1)\n+Integer id (N) of fdivs custom instruction\n+\n+mno-custom-fmuls\n+Target Report RejectNegative Var(nios2_custom_fmuls, -1)\n+Do not use the fmuls custom instruction\n+\n+mcustom-fmuls=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fmuls) Init(-1)\n+Integer id (N) of fmuls custom instruction\n+\n+mno-custom-fsubs\n+Target Report RejectNegative Var(nios2_custom_fsubs, -1)\n+Do not use the fsubs custom instruction\n+\n+mcustom-fsubs=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fsubs) Init(-1)\n+Integer id (N) of fsubs custom instruction\n+\n+mno-custom-fadds\n+Target Report RejectNegative Var(nios2_custom_fadds, -1)\n+Do not use the fadds custom instruction\n+\n+mcustom-fadds=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fadds) Init(-1)\n+Integer id (N) of fadds custom instruction\n+\n+mno-custom-frdy\n+Target Report RejectNegative Var(nios2_custom_frdy, -1)\n+Do not use the frdy custom instruction\n+\n+mcustom-frdy=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_frdy) Init(-1)\n+Integer id (N) of frdy custom instruction\n+\n+mno-custom-frdxhi\n+Target Report RejectNegative Var(nios2_custom_frdxhi, -1)\n+Do not use the frdxhi custom instruction\n+\n+mcustom-frdxhi=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_frdxhi) Init(-1)\n+Integer id (N) of frdxhi custom instruction\n+\n+mno-custom-frdxlo\n+Target Report RejectNegative Var(nios2_custom_frdxlo, -1)\n+Do not use the frdxlo custom instruction\n+\n+mcustom-frdxlo=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_frdxlo) Init(-1)\n+Integer id (N) of frdxlo custom instruction\n+\n+mno-custom-fwry\n+Target Report RejectNegative Var(nios2_custom_fwry, -1)\n+Do not use the fwry custom instruction\n+\n+mcustom-fwry=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fwry) Init(-1)\n+Integer id (N) of fwry custom instruction\n+\n+mno-custom-fwrx\n+Target Report RejectNegative Var(nios2_custom_fwrx, -1)\n+Do not use the fwrx custom instruction\n+\n+mcustom-fwrx=\n+Target Report RejectNegative Joined UInteger Var(nios2_custom_fwrx) Init(-1)\n+Integer id (N) of fwrx custom instruction"}, {"sha": "8bc18fa4f5a84219e2cbbeb4675211bc48c9df09", "filename": "gcc/config/nios2/predicates.md", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fpredicates.md?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,85 @@\n+;; Predicate definitions for Altera Nios II.\n+;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+;; Contributed by Chung-Lin Tang <cltang@codesourcery.com>\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_predicate \"const_0_operand\"\n+  (and (match_code \"const_int,const_double,const_vector\")\n+       (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n+\n+(define_predicate \"reg_or_0_operand\"\n+  (ior (match_operand 0 \"const_0_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"const_uns_arith_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_INT_UNSIGNED (INTVAL (op))\")))\n+\n+(define_predicate \"uns_arith_operand\"\n+  (ior (match_operand 0 \"const_uns_arith_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"const_arith_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_INT (INTVAL (op))\")))\n+\n+(define_predicate \"arith_operand\"\n+  (ior (match_operand 0 \"const_arith_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"add_regimm_operand\"\n+  (ior (match_operand 0 \"arith_operand\")\n+       (match_test \"nios2_unspec_reloc_p (op)\")))\n+\n+(define_predicate \"const_logical_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(INTVAL (op) & 0xffff) == 0\n+                    || (INTVAL (op) & 0xffff0000) == 0\")))\n+\n+(define_predicate \"logical_operand\"\n+  (ior (match_operand 0 \"const_logical_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"const_shift_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SHIFT_INT (INTVAL (op))\")))\n+\n+(define_predicate \"shift_operand\"\n+  (ior (match_operand 0 \"const_shift_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"call_operand\"\n+  (ior (match_operand 0 \"immediate_operand\")\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"rdwrctl_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"RDWRCTL_INT (INTVAL (op))\")))\n+\n+(define_predicate \"custom_insn_opcode\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CUSTOM_INSN_OPCODE (INTVAL (op))\")))\n+\n+(define_special_predicate \"expandable_comparison_operator\"\n+  (match_operand 0 \"ordered_comparison_operator\")\n+{\n+  return (GET_MODE_CLASS (GET_MODE (XEXP (op, 0))) != MODE_FLOAT\n+          || nios2_validate_fpu_compare (GET_MODE (XEXP (op, 0)), &op,\n+                                         &XEXP (op, 0), &XEXP (op, 1),\n+                                         false));\n+})"}, {"sha": "09a407626aa3f985a7b560a1d3b7d1771b00c10a", "filename": "gcc/config/nios2/t-nios2", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Ft-nios2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfig%2Fnios2%2Ft-nios2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Ft-nios2?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,27 @@\n+# Target Makefile Fragment for Altera Nios II.\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+# Contributed by Altera and Mentor Graphics, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# MULTILIB_OPTIONS = mno-hw-mul/mhw-mulx mcustom-fpu-cfg=60-1/mcustom-fpu-cfg=60-2\n+# MULTILIB_DIRNAMES = nomul mulx fpu-60-1 fpu-60-2\n+# MULTILIB_EXCEPTIONS = \n+\n+# MULTILIB_OPTIONS += EL/EB\n+# MULTILIB_DIRNAMES += le be\n+# MULTILIB_MATCHES += EL=mel EB=meb"}, {"sha": "5a58b59699ed80b56d002a4ca2ba98398b4ccfd0", "filename": "gcc/configure", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -23396,6 +23396,13 @@ foo:\n \ttls_first_minor=19\n \ttls_as_opt='--fatal-warnings'\n \t;;\n+  nios2-*-*)\n+      conftest_s='\n+\t.section \".tdata\",\"awT\",@progbits'\n+\ttls_first_major=2\n+\ttls_first_minor=23\n+\ttls_as_opt=\"--fatal-warnings\"\n+\t;;\n   aarch64*-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",%progbits\n@@ -26251,8 +26258,8 @@ esac\n # version to the per-target configury.\n case \"$cpu_type\" in\n   aarch64 | alpha | arm | avr | bfin | cris | i386 | m32c | m68k | microblaze \\\n-  | mips | pa | rs6000 | score | sparc | spu | tilegx | tilepro | xstormy16 \\\n-  | xtensa)\n+  | mips | nios2 | pa | rs6000 | score | sparc | spu | tilegx | tilepro \\\n+  | xstormy16 | xtensa)\n     insn=\"nop\"\n     ;;\n   ia64 | s390)"}, {"sha": "f9976a209f9034c4088e2670bb722274697815d0", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -3068,6 +3068,13 @@ foo:\n \ttls_first_minor=19\n \ttls_as_opt='--fatal-warnings'\n \t;;\n+  nios2-*-*)\n+      conftest_s='\n+\t.section \".tdata\",\"awT\",@progbits'\n+\ttls_first_major=2\n+\ttls_first_minor=23\n+\ttls_as_opt=\"--fatal-warnings\"\n+\t;;\n   aarch64*-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",%progbits\n@@ -4303,8 +4310,8 @@ esac\n # version to the per-target configury.\n case \"$cpu_type\" in\n   aarch64 | alpha | arm | avr | bfin | cris | i386 | m32c | m68k | microblaze \\\n-  | mips | pa | rs6000 | score | sparc | spu | tilegx | tilepro | xstormy16 \\\n-  | xtensa)\n+  | mips | nios2 | pa | rs6000 | score | sparc | spu | tilegx | tilepro \\\n+  | xstormy16 | xtensa)\n     insn=\"nop\"\n     ;;\n   ia64 | s390)"}, {"sha": "713d4208195ac3cb63c3ece4af14865878960b4a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 138, "deletions": 10, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -3847,6 +3847,14 @@ int core2_func (void) __attribute__ ((__target__ (\"arch=core2\")));\n int sse3_func (void) __attribute__ ((__target__ (\"sse3\")));\n @end smallexample\n \n+You can either use multiple\n+strings to specify multiple options, or separate the options\n+with a comma (@samp{,}).\n+\n+The @code{target} attribute is presently implemented for\n+i386/x86_64, PowerPC, and Nios II targets only.\n+The options supported are specific to each target.\n+\n On the 386, the following options are allowed:\n \n @table @samp\n@@ -4168,20 +4176,36 @@ compilation tunes for the @var{CPU} architecture, and not the\n default tuning specified on the command line.\n @end table\n \n-On the 386/x86_64 and PowerPC back ends, you can use either multiple\n-strings to specify multiple options, or you can separate the option\n-with a comma (@code{,}).\n+When compiling for Nios II, the following options are allowed:\n+\n+@table @samp\n+@item custom-@var{insn}=@var{N}\n+@itemx no-custom-@var{insn}\n+@cindex @code{target(\"custom-@var{insn}=@var{N}\")} attribute\n+@cindex @code{target(\"no-custom-@var{insn}\")} attribute\n+Each @samp{custom-@var{insn}=@var{N}} attribute locally enables use of a\n+custom instruction with encoding @var{N} when generating code that uses \n+@var{insn}.  Similarly, @samp{no-custom-@var{insn}} locally inhibits use of\n+the custom instruction @var{insn}.\n+These target attributes correspond to the\n+@option{-mcustom-@var{insn}=@var{N}} and @option{-mno-custom-@var{insn}}\n+command-line options, and support the same set of @var{insn} keywords.\n+@xref{Nios II Options}, for more information.\n+\n+@item custom-fpu-cfg=@var{name}\n+@cindex @code{target(\"custom-fpu-cfg=@var{name}\")} attribute\n+This attribute corresponds to the @option{-mcustom-fpu-cfg=@var{name}}\n+command-line option, to select a predefined set of custom instructions\n+named @var{name}.\n+@xref{Nios II Options}, for more information.\n+@end table\n \n On the 386/x86_64 and PowerPC back ends, the inliner does not inline a\n function that has different target options than the caller, unless the\n callee has a subset of the target options of the caller.  For example\n a function declared with @code{target(\"sse3\")} can inline a function\n with @code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n \n-The @code{target} attribute is not implemented in GCC versions earlier\n-than 4.4 for the i386/x86_64 and 4.6 for the PowerPC back ends.  It is\n-not currently implemented for other back ends.\n-\n @item tiny_data\n @cindex tiny data section on the H8/300H and H8S\n Use this attribute on the H8/300H and H8S to indicate that the specified\n@@ -9012,6 +9036,7 @@ instructions, but allow the compiler to schedule those calls.\n \n @menu\n * Alpha Built-in Functions::\n+* Altera Nios II Built-in Functions::\n * ARC Built-in Functions::\n * ARC SIMD Built-in Functions::\n * ARM iWMMXt Built-in Functions::\n@@ -9124,6 +9149,110 @@ void *__builtin_thread_pointer (void)\n void __builtin_set_thread_pointer (void *)\n @end smallexample\n \n+@node Altera Nios II Built-in Functions\n+@subsection Altera Nios II Built-in Functions\n+\n+These built-in functions are available for the Altera Nios II\n+family of processors.\n+\n+The following built-in functions are always available.  They\n+all generate the machine instruction that is part of the name.\n+\n+@example\n+int __builtin_ldbio (volatile const void *)\n+int __builtin_ldbuio (volatile const void *)\n+int __builtin_ldhio (volatile const void *)\n+int __builtin_ldhuio (volatile const void *)\n+int __builtin_ldwio (volatile const void *)\n+void __builtin_stbio (volatile void *, int)\n+void __builtin_sthio (volatile void *, int)\n+void __builtin_stwio (volatile void *, int)\n+void __builtin_sync (void)\n+int __builtin_rdctl (int) \n+void __builtin_wrctl (int, int)\n+@end example\n+\n+The following built-in functions are always available.  They\n+all generate a Nios II Custom Instruction. The name of the\n+function represents the types that the function takes and\n+returns. The letter before the @code{n} is the return type\n+or void if absent. The @code{n} represents the first parameter\n+to all the custom instructions, the custom instruction number.\n+The two letters after the @code{n} represent the up to two\n+parameters to the function.\n+\n+The letters represent the following data types:\n+@table @code\n+@item <no letter>\n+@code{void} for return type and no parameter for parameter types.\n+\n+@item i\n+@code{int} for return type and parameter type\n+\n+@item f\n+@code{float} for return type and parameter type\n+\n+@item p\n+@code{void *} for return type and parameter type\n+\n+@end table\n+\n+And the function names are:\n+@example\n+void __builtin_custom_n (void)\n+void __builtin_custom_ni (int)\n+void __builtin_custom_nf (float)\n+void __builtin_custom_np (void *)\n+void __builtin_custom_nii (int, int)\n+void __builtin_custom_nif (int, float)\n+void __builtin_custom_nip (int, void *)\n+void __builtin_custom_nfi (float, int)\n+void __builtin_custom_nff (float, float)\n+void __builtin_custom_nfp (float, void *)\n+void __builtin_custom_npi (void *, int)\n+void __builtin_custom_npf (void *, float)\n+void __builtin_custom_npp (void *, void *)\n+int __builtin_custom_in (void)\n+int __builtin_custom_ini (int)\n+int __builtin_custom_inf (float)\n+int __builtin_custom_inp (void *)\n+int __builtin_custom_inii (int, int)\n+int __builtin_custom_inif (int, float)\n+int __builtin_custom_inip (int, void *)\n+int __builtin_custom_infi (float, int)\n+int __builtin_custom_inff (float, float)\n+int __builtin_custom_infp (float, void *)\n+int __builtin_custom_inpi (void *, int)\n+int __builtin_custom_inpf (void *, float)\n+int __builtin_custom_inpp (void *, void *)\n+float __builtin_custom_fn (void)\n+float __builtin_custom_fni (int)\n+float __builtin_custom_fnf (float)\n+float __builtin_custom_fnp (void *)\n+float __builtin_custom_fnii (int, int)\n+float __builtin_custom_fnif (int, float)\n+float __builtin_custom_fnip (int, void *)\n+float __builtin_custom_fnfi (float, int)\n+float __builtin_custom_fnff (float, float)\n+float __builtin_custom_fnfp (float, void *)\n+float __builtin_custom_fnpi (void *, int)\n+float __builtin_custom_fnpf (void *, float)\n+float __builtin_custom_fnpp (void *, void *)\n+void * __builtin_custom_pn (void)\n+void * __builtin_custom_pni (int)\n+void * __builtin_custom_pnf (float)\n+void * __builtin_custom_pnp (void *)\n+void * __builtin_custom_pnii (int, int)\n+void * __builtin_custom_pnif (int, float)\n+void * __builtin_custom_pnip (int, void *)\n+void * __builtin_custom_pnfi (float, int)\n+void * __builtin_custom_pnff (float, float)\n+void * __builtin_custom_pnfp (float, void *)\n+void * __builtin_custom_pnpi (void *, int)\n+void * __builtin_custom_pnpf (void *, float)\n+void * __builtin_custom_pnpp (void *, void *)\n+@end example\n+\n @node ARC Built-in Functions\n @subsection ARC Built-in Functions\n \n@@ -16290,9 +16419,8 @@ function.  The parenthesis around the options is optional.\n @xref{Function Attributes}, for more information about the\n @code{target} attribute and the attribute syntax.\n \n-The @code{#pragma GCC target} attribute is not implemented in GCC versions earlier\n-than 4.4 for the i386/x86_64 and 4.6 for the PowerPC back ends.  At\n-present, it is not implemented for other back ends.\n+The @code{#pragma GCC target} pragma is presently implemented for\n+i386/x86_64, PowerPC, and Nios II targets only.\n @end table\n \n @table @code"}, {"sha": "0fd18248197caa308555171936d1b1f1f484c4f7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -840,6 +840,16 @@ Objective-C and Objective-C++ Dialects}.\n -mforce-fp-as-gp -mforbid-fp-as-gp @gol\n -mex9 -mctor-dtor -mrelax}\n \n+@emph{Nios II Options}\n+@gccoptlist{-G @var{num} -mgpopt -mno-gpopt -mel -meb @gol\n+-mno-bypass-cache -mbypass-cache @gol\n+-mno-cache-volatile -mcache-volatile @gol\n+-mno-fast-sw-div -mfast-sw-div @gol\n+-mhw-mul -mno-hw-mul -mhw-mulx -mno-hw-mulx -mno-hw-div -mhw-div @gol\n+-mcustom-@var{insn}=@var{N} -mno-custom-@var{insn} @gol\n+-mcustom-fpu-cfg=@var{name} @gol\n+-mhal -msmallc -msys-crt0=@var{name} -msys-lib=@var{name}}\n+\n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n -mbcopy  -mbcopy-builtin  -mint32  -mno-int16 @gol\n@@ -11230,6 +11240,7 @@ platform.\n * Moxie Options::\n * MSP430 Options::\n * NDS32 Options::\n+* Nios II Options::\n * PDP-11 Options::\n * picoChip Options::\n * PowerPC Options::\n@@ -18214,6 +18225,285 @@ Guide linker to relax instructions.\n \n @end table\n \n+@node Nios II Options\n+@subsection Nios II Options\n+@cindex Nios II options\n+@cindex Altera Nios II options\n+\n+These are the options defined for the Altera Nios II processor.\n+\n+@table @gcctabopt\n+\n+@item -G @var{num}\n+@opindex G\n+@cindex smaller data references\n+Put global and static objects less than or equal to @var{num} bytes\n+into the small data or BSS sections instead of the normal data or BSS\n+sections.  The default value of @var{num} is 8.\n+\n+@item -mgpopt\n+@itemx -mno-gpopt\n+@opindex mgpopt\n+@opindex mno-gpopt\n+Generate (do not generate) GP-relative accesses for objects in the\n+small data or BSS sections.  The default is @option{-mgpopt} except\n+when @option{-fpic} or @option{-fPIC} is specified to generate\n+position-independent code.  Note that the Nios II ABI does not permit\n+GP-relative accesses from shared libraries.\n+\n+You may need to specify @option{-mno-gpopt} explicitly when building\n+programs that include large amounts of small data, including large\n+GOT data sections.  In this case, the 16-bit offset for GP-relative\n+addressing may not be large enough to allow access to the entire \n+small data section.\n+\n+@item -mel\n+@itemx -meb\n+@opindex mel\n+@opindex meb\n+Generate little-endian (default) or big-endian (experimental) code,\n+respectively.\n+\n+@item -mbypass-cache\n+@itemx -mno-bypass-cache\n+@opindex mno-bypass-cache\n+@opindex mbypass-cache\n+Force all load and store instructions to always bypass cache by \n+using I/O variants of the instructions. The default is not to\n+bypass the cache.\n+\n+@item -mno-cache-volatile \n+@itemx -mcache-volatile       \n+@opindex mcache-volatile \n+@opindex mno-cache-volatile\n+Volatile memory access bypass the cache using the I/O variants of \n+the load and store instructions. The default is not to bypass the cache.\n+\n+@item -mno-fast-sw-div\n+@itemx -mfast-sw-div\n+@opindex mno-fast-sw-div\n+@opindex mfast-sw-div\n+Do not use table-based fast divide for small numbers. The default \n+is to use the fast divide at @option{-O3} and above.\n+\n+@item -mno-hw-mul\n+@itemx -mhw-mul\n+@itemx -mno-hw-mulx\n+@itemx -mhw-mulx\n+@itemx -mno-hw-div\n+@itemx -mhw-div\n+@opindex mno-hw-mul\n+@opindex mhw-mul\n+@opindex mno-hw-mulx\n+@opindex mhw-mulx\n+@opindex mno-hw-div\n+@opindex mhw-div\n+Enable or disable emitting @code{mul}, @code{mulx} and @code{div} family of \n+instructions by the compiler. The default is to emit @code{mul}\n+and not emit @code{div} and @code{mulx}.\n+\n+@item -mcustom-@var{insn}=@var{N}\n+@itemx -mno-custom-@var{insn}\n+@opindex mcustom-@var{insn}\n+@opindex mno-custom-@var{insn}\n+Each @option{-mcustom-@var{insn}=@var{N}} option enables use of a\n+custom instruction with encoding @var{N} when generating code that uses \n+@var{insn}.  For example, @code{-mcustom-fadds=253} generates custom\n+instruction 253 for single-precision floating-point add operations instead\n+of the default behavior of using a library call.\n+\n+The following values of @var{insn} are supported.  Except as otherwise\n+noted, floating-point operations are expected to be implemented with\n+normal IEEE 754 semantics and correspond directly to the C operators or the\n+equivalent GCC built-in functions (@pxref{Other Builtins}).\n+\n+Single-precision floating point:\n+@table @asis\n+\n+@item @samp{fadds}, @samp{fsubs}, @samp{fdivs}, @samp{fmuls}\n+Binary arithmetic operations.\n+\n+@item @samp{fnegs}\n+Unary negation.\n+\n+@item @samp{fabss}\n+Unary absolute value.\n+\n+@item @samp{fcmpeqs}, @samp{fcmpges}, @samp{fcmpgts}, @samp{fcmples}, @samp{fcmplts}, @samp{fcmpnes}\n+Comparison operations.\n+\n+@item @samp{fmins}, @samp{fmaxs}\n+Floating-point minimum and maximum.  These instructions are only\n+generated if @option{-ffinite-math-only} is specified.\n+\n+@item @samp{fsqrts}\n+Unary square root operation.\n+\n+@item @samp{fcoss}, @samp{fsins}, @samp{ftans}, @samp{fatans}, @samp{fexps}, @samp{flogs}\n+Floating-point trigonometric and exponential functions.  These instructions\n+are only generated if @option{-funsafe-math-optimizations} is also specified.\n+\n+@end table\n+\n+Double-precision floating point:\n+@table @asis\n+\n+@item @samp{faddd}, @samp{fsubd}, @samp{fdivd}, @samp{fmuld}\n+Binary arithmetic operations.\n+\n+@item @samp{fnegd}\n+Unary negation.\n+\n+@item @samp{fabsd}\n+Unary absolute value.\n+\n+@item @samp{fcmpeqd}, @samp{fcmpged}, @samp{fcmpgtd}, @samp{fcmpled}, @samp{fcmpltd}, @samp{fcmpned}\n+Comparison operations.\n+\n+@item @samp{fmind}, @samp{fmaxd}\n+Double-precision minimum and maximum.  These instructions are only\n+generated if @option{-ffinite-math-only} is specified.\n+\n+@item @samp{fsqrtd}\n+Unary square root operation.\n+\n+@item @samp{fcosd}, @samp{fsind}, @samp{ftand}, @samp{fatand}, @samp{fexpd}, @samp{flogd}\n+Double-precision trigonometric and exponential functions.  These instructions\n+are only generated if @option{-funsafe-math-optimizations} is also specified.\n+\n+@end table\n+\n+Conversions:\n+@table @asis\n+@item @samp{fextsd}\n+Conversion from single precision to double precision.\n+\n+@item @samp{ftruncds}\n+Conversion from double precision to single precision.\n+\n+@item @samp{fixsi}, @samp{fixsu}, @samp{fixdi}, @samp{fixdu}\n+Conversion from floating point to signed or unsigned integer types, with\n+truncation towards zero.\n+\n+@item @samp{floatis}, @samp{floatus}, @samp{floatid}, @samp{floatud}\n+Conversion from signed or unsigned integer types to floating-point types.\n+\n+@end table\n+\n+In addition, all of the following transfer instructions for internal\n+registers X and Y must be provided to use any of the double-precision\n+floating-point instructions.  Custom instructions taking two\n+double-precision source operands expect the first operand in the\n+64-bit register X.  The other operand (or only operand of a unary\n+operation) is given to the custom arithmetic instruction with the\n+least significant half in source register @var{src1} and the most\n+significant half in @var{src2}.  A custom instruction that returns a\n+double-precision result returns the most significant 32 bits in the\n+destination register and the other half in 32-bit register Y.  \n+GCC automatically generates the necessary code sequences to write\n+register X and/or read register Y when double-precision floating-point\n+instructions are used.\n+\n+@table @asis\n+\n+@item @samp{fwrx}\n+Write @var{src1} into the least significant half of X and @var{src2} into\n+the most significant half of X.\n+\n+@item @samp{fwry}\n+Write @var{src1} into Y.\n+\n+@item @samp{frdxhi}, @samp{frdxlo}\n+Read the most or least (respectively) significant half of X and store it in\n+@var{dest}.\n+\n+@item @samp{frdy}\n+Read the value of Y and store it into @var{dest}.\n+@end table\n+\n+Note that you can gain more local control over generation of Nios II custom\n+instructions by using the @code{target(\"custom-@var{insn}=@var{N}\")}\n+and @code{target(\"no-custom-@var{insn}\")} function attributes\n+(@pxref{Function Attributes})\n+or pragmas (@pxref{Function Specific Option Pragmas}).\n+\n+@item -mcustom-fpu-cfg=@var{name}\n+@opindex mcustom-fpu-cfg\n+\n+This option enables a predefined, named set of custom instruction encodings\n+(see @option{-mcustom-@var{insn}} above).  \n+Currently, the following sets are defined:\n+\n+@option{-mcustom-fpu-cfg=60-1} is equivalent to:\n+@gccoptlist{-mcustom-fmuls=252 @gol\n+-mcustom-fadds=253 @gol\n+-mcustom-fsubs=254 @gol\n+-fsingle-precision-constant}\n+\n+@option{-mcustom-fpu-cfg=60-2} is equivalent to:\n+@gccoptlist{-mcustom-fmuls=252 @gol\n+-mcustom-fadds=253 @gol\n+-mcustom-fsubs=254 @gol\n+-mcustom-fdivs=255 @gol\n+-fsingle-precision-constant}\n+\n+@option{-mcustom-fpu-cfg=72-3} is equivalent to:\n+@gccoptlist{-mcustom-floatus=243 @gol\n+-mcustom-fixsi=244 @gol\n+-mcustom-floatis=245 @gol\n+-mcustom-fcmpgts=246 @gol\n+-mcustom-fcmples=249 @gol\n+-mcustom-fcmpeqs=250 @gol\n+-mcustom-fcmpnes=251 @gol\n+-mcustom-fmuls=252 @gol\n+-mcustom-fadds=253 @gol\n+-mcustom-fsubs=254 @gol\n+-mcustom-fdivs=255 @gol\n+-fsingle-precision-constant}\n+\n+Custom instruction assignments given by individual\n+@option{-mcustom-@var{insn}=} options override those given by\n+@option{-mcustom-fpu-cfg=}, regardless of the\n+order of the options on the command line.\n+\n+Note that you can gain more local control over selection of a FPU\n+configuration by using the @code{target(\"custom-fpu-cfg=@var{name}\")}\n+function attribute (@pxref{Function Attributes})\n+or pragma (@pxref{Function Specific Option Pragmas}).\n+\n+@end table\n+\n+These additional @samp{-m} options are available for the Altera Nios II\n+ELF (bare-metal) target:\n+\n+@table @gcctabopt\n+\n+@item -mhal\n+@opindex mhal\n+Link with HAL BSP.  This suppresses linking with the GCC-provided C runtime\n+startup and termination code, and is typically used in conjunction with\n+@option{-msys-crt0=} to specify the location of the alternate startup code\n+provided by the HAL BSP.\n+\n+@item -msmallc\n+@opindex msmallc\n+Link with a limited version of the C library, @option{-lsmallc}, rather than\n+Newlib.\n+\n+@item -msys-crt0=@var{startfile}\n+@opindex msys-crt0\n+@var{startfile} is the file name of the startfile (crt0) to use \n+when linking.  This option is only useful in conjunction with @option{-mhal}.\n+\n+@item -msys-lib=@var{systemlib}\n+@opindex msys-lib\n+@var{systemlib} is the library name of the library that provides\n+low-level system calls required by the C library,\n+e.g. @code{read} and @code{write}.\n+This option is typically used to link with a library provided by a HAL BSP.\n+\n+@end table\n+\n @node PDP-11 Options\n @subsection PDP-11 Options\n @cindex PDP-11 Options"}, {"sha": "74ba5a1d2fb79410b25e23923d876dbf9d8f2ce4", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -3233,6 +3233,52 @@ Memory constraint for 45 format.\n Memory constraint for 37 format.\n @end table\n \n+@item Nios II family---@file{config/nios2/constraints.md}\n+@table @code\n+\n+@item I\n+Integer that is valid as an immediate operand in an\n+instruction taking a signed 16-bit number. Range\n+@minus{}32768 to 32767.\n+\n+@item J\n+Integer that is valid as an immediate operand in an\n+instruction taking an unsigned 16-bit number. Range\n+0 to 65535.\n+\n+@item K\n+Integer that is valid as an immediate operand in an\n+instruction taking only the upper 16-bits of a\n+32-bit number. Range 32-bit numbers with the lower\n+16-bits being 0.\n+\n+@item L\n+Integer that is valid as an immediate operand for a \n+shift instruction. Range 0 to 31.\n+\n+@item M\n+Integer that is valid as an immediate operand for\n+only the value 0. Can be used in conjunction with\n+the format modifier @code{z} to use @code{r0}\n+instead of @code{0} in the assembly output.\n+\n+@item N\n+Integer that is valid as an immediate operand for\n+a custom instruction opcode. Range 0 to 255.\n+\n+@item S\n+Matches immediates which are addresses in the small\n+data section and therefore can be added to @code{gp}\n+as a 16-bit immediate to re-create their 32-bit value.\n+\n+@ifset INTERNALS\n+@item T\n+A @code{const} wrapped @code{UNSPEC} expression,\n+representing a supported PIC or TLS relocation.\n+@end ifset\n+\n+@end table\n+\n @item PDP-11---@file{config/pdp11/constraints.md}\n @table @code\n @item a"}, {"sha": "1060e569aaa04eb2f39b16bd3a82758a0cb82776", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,3 +1,58 @@\n+2013-12-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Based on patches from Altera Corporation\n+\n+\t* gcc.dg/stack-usage-1.c (SIZE): Define case for __nios2__.\n+\t* gcc.dg/20040813-1.c: Skip for nios2-*-*.\n+\t* gcc.dg/20020312-2.c: Add __nios2__ case.\n+\t* g++.dg/other/PR23205.C: Skip for nios2-*-*.\n+\t* g++.dg/other/pr23205-2.C: Skip for nios2-*-*.\n+\t* g++.dg/cpp0x/constexpr-rom.C: Skip for nios2-*-*.\n+\t* g++.dg/cpp0x/alias-decl-debug-0.C: Skip for nios2-*-*.\n+\t* g++.old-deja/g++.jason/thunk3.C: Skip for nios2-*-*.\n+\t* lib/target-supports.exp (check_profiling_available): Check for\n+\tnios2-*-elf.\n+\t* gcc.c-torture/execute/pr47237.x:: Skip for nios2-*-*.\n+\t* gcc.c-torture/execute/20101011-1.c: Skip for nios2-*-*.\n+\t* gcc.c-torture/execute/builtins/lib/chk.c (memset): Place\n+\tchar-based memset loop before inline check, to prevent\n+\tproblems when called to initialize .bss. Update comments.\n+\t* gcc.target/nios2/nios2.exp: New DejaGNU file.\n+\t* gcc.target/nios2/nios2-custom-1.c: New test.\n+\t* gcc.target/nios2/nios2-trap-insn.c: New test.\n+\t* gcc.target/nios2/nios2-builtin-custom.c: New test.\n+\t* gcc.target/nios2/nios2-builtin-io.c: New test.\n+\t* gcc.target/nios2/nios2-stack-check-1.c: New test.\n+\t* gcc.target/nios2/nios2-stack-check-2.c: New test.\n+\t* gcc.target/nios2/nios2-rdctl.c: New test.\n+\t* gcc.target/nios2/nios2-wrctl.c: New test.\n+\t* gcc.target/nios2/nios2-wrctl-zero.c: New test.\n+\t* gcc.target/nios2/nios2-wrctl-not-zero.c: New test.\n+\t* gcc.target/nios2/nios2-rdwrctl-1.c: New test.\n+\t* gcc.target/nios2/nios2-reg-constraints.c: New test.\n+\t* gcc.target/nios2/nios2-ashlsi3-one_shift.c: New test.\n+\t* gcc.target/nios2/nios2-mul-options-1.c: New test.\n+\t* gcc.target/nios2/nios2-mul-options-2.c: New test.\n+\t* gcc.target/nios2/nios2-mul-options-3.c: New test.\n+\t* gcc.target/nios2/nios2-mul-options-4.c: New test.\n+\t* gcc.target/nios2/nios2-nor.c: New test.\n+\t* gcc.target/nios2/nios2-stxio.c: New test.\n+\t* gcc.target/nios2/custom-fp-1.c: New test.\n+\t* gcc.target/nios2/custom-fp-2.c: New test.\n+\t* gcc.target/nios2/custom-fp-3.c: New test.\n+\t* gcc.target/nios2/custom-fp-4.c: New test.\n+\t* gcc.target/nios2/custom-fp-5.c: New test.\n+\t* gcc.target/nios2/custom-fp-6.c: New test.\n+\t* gcc.target/nios2/custom-fp-7.c: New test.\n+\t* gcc.target/nios2/custom-fp-8.c: New test.\n+\t* gcc.target/nios2/custom-fp-cmp-1.c: New test.\n+\t* gcc.target/nios2/custom-fp-conversion.c: New test.\n+\t* gcc.target/nios2/custom-fp-double.c: New test.\n+\t* gcc.target/nios2/custom-fp-float.c: New test.\n+\t* gcc.target/nios2/nios2-int-types.c: New test.\n+\t* gcc.target/nios2/nios2-cache-1.c: New test.\n+\t* gcc.target/nios2/nios2-cache-2.c: New test.\n+\n 2013-12-30  Mike Stump  <mikestump@comcast.net>\n \n \tPR c++/41090"}, {"sha": "5b5d15a62718e35c0573047045e67f638fa14f06", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-debug-0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,5 +1,5 @@\n // Origin: PR c++/51032\n-// { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } }\n+// { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* nios2-*-* } { \"*\" } { \"\" } }\n // { dg-options \"-std=c++11 -gstabs+\" }\n \n template <class C>"}, {"sha": "5f4a1d18fcf689a1e3aad0107644f1b1876a87f8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-rom.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,6 +1,6 @@\n // PR c++/49673: check that test_data goes into .rodata\n // { dg-options -std=c++11 }\n-// { dg-additional-options -G0 { target { { alpha*-*-* frv*-*-* ia64-*-* lm32*-*-* m32r*-*-* microblaze*-*-* mips*-*-* powerpc*-*-* rs6000*-*-* score*-*-* } && { ! { *-*-darwin* *-*-aix* alpha*-*-*vms* } } } } }\n+// { dg-additional-options -G0 { target { { alpha*-*-* frv*-*-* ia64-*-* lm32*-*-* m32r*-*-* microblaze*-*-* mips*-*-* nios2-*-* powerpc*-*-* rs6000*-*-* score*-*-* } && { ! { *-*-darwin* *-*-aix* alpha*-*-*vms* } } } } }\n // { dg-final { scan-assembler \"\\\\.rdata\" { target mips*-*-* } } }\n // { dg-final { scan-assembler \"rodata\" { target { { *-*-linux-gnu *-*-gnu* *-*-elf } && { ! mips*-*-* } } } } }\n "}, {"sha": "b05087b5420dbd87e1862866612e35944c68eba6", "filename": "gcc/testsuite/g++.dg/other/PR23205.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* nios2-*-* tile*-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types\" } */\n \n const int foobar = 4;"}, {"sha": "c7eefaa58c920e57dd10a2d800fc5ce830de30b8", "filename": "gcc/testsuite/g++.dg/other/pr23205-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* nios2-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types -ftoplevel-reorder\" } */\n \n const int foobar = 4;"}, {"sha": "7e0b93afe72df37906f0a5f8966b5ea541cbaf93", "filename": "gcc/testsuite/g++.old-deja/g++.jason/thunk3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-skip-if \"fails with generic thunk support\" { rs6000-*-* powerpc-*-eabi v850-*-* sh-*-* sh64-*-* h8*-*-* xtensa*-*-* m32r*-*-* lm32-*-* } { \"*\" } { \"\" } }\n+// { dg-skip-if \"fails with generic thunk support\" { rs6000-*-* powerpc-*-eabi v850-*-* sh-*-* sh64-*-* h8*-*-* xtensa*-*-* m32r*-*-* lm32-*-* nios2-*-* } { \"*\" } { \"\" } }\n // Test that variadic function calls using thunks work right.\n // Note that this will break on any target that uses the generic thunk\n //  support, because it doesn't support variadic functions."}, {"sha": "1952dbd70291172c19cf0d15e90b039e74688702", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -63,6 +63,10 @@ __aeabi_idiv0 (int return_value)\n }\n #  define DO_TEST 1\n # endif\n+#elif defined (__nios2__)\n+  /* Nios II requires both hardware support and user configuration to\n+     raise an exception on divide by zero.  */\n+# define DO_TEST 0\n #else\n # define DO_TEST 1\n #endif"}, {"sha": "b19d7bf813f682c34978b266ba1a148f4e7ce155", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/chk.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -124,16 +124,17 @@ __memmove_chk (void *dst, const void *src, __SIZE_TYPE__ n, __SIZE_TYPE__ size)\n void *\n memset (void *dst, int c, __SIZE_TYPE__ n)\n {\n+  while (n-- != 0)\n+    n[(char *) dst] = c;\n+\n   /* Single-byte memsets should be done inline when optimisation\n-     is enabled.  */\n+     is enabled.  Do this after the copy in case we're being called to\n+     initialize bss.  */\n #ifdef __OPTIMIZE__\n   if (memset_disallowed && inside_main && n < 2)\n     abort ();\n #endif\n \n-  while (n-- != 0)\n-    n[(char *) dst] = c;\n-\n   return dst;\n }\n "}, {"sha": "d5d6988f93f7bcc5465edba0365811724f21c93b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr47237.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47237.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47237.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47237.x?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,6 @@\n+if { [istarget \"nios2-*-*\"] } {\n+    # This test can cause the stack to underflow on Nios II.\n+    set torture_execute_xfail [istarget]\n+}\n+\n+return 0"}, {"sha": "63fbfcc5c4bfeadaa5618e205d49d41fe85e9d14", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -54,6 +54,8 @@ extern void abort (void);\n /* No pic register.  */\n #elif defined(__nds32__)\n /* No pic register.  */\n+#elif defined(__nios2__)\n+/* No pic register.  */\n #elif defined(__hppa__)\n /* PIC register is %r27 or %r19, but is used even without -fpic.  */\n #elif defined(__pdp11__)"}, {"sha": "8be831d96b6a8dcc78ca833e29e8c5c6ef1d208b", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* nios2-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "05e3df7bef0b857cb246e3a8b6d2f4c53ad23716", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -79,6 +79,8 @@\n #  define SIZE 248\n #elif defined (xstormy16)\n #  define SIZE 254\n+#elif defined (__nios2__)\n+#  define SIZE 252\n #else\n #  define SIZE 256\n #endif"}, {"sha": "c9afa682977d86717428cc78d9e970b6a3ccbd00", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,22 @@\n+/* Test specification of custom instructions via command-line options.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only -mcustom-fmaxs=246 -mcustom-fmins=247 -mcustom-fsqrts=251\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+  result[2] = sqrtf (operand_a);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t251, .* # fsqrts .*\" } } */"}, {"sha": "fc7c643705e94cfb34523dfaa95ad1919fd7a78f", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,26 @@\n+/* Test specification of custom instructions via pragmas.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+#pragma GCC target (\"custom-fmaxs=246\")\n+#pragma GCC target (\"custom-fmins=247\")\n+#pragma GCC target (\"custom-fsqrts=251\")\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+  result[2] = sqrtf (operand_a);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t251, .* # fsqrts .*\" } } */"}, {"sha": "703bc9fa5bddf7ef5ed9223c1529f1440ae00db1", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-3.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,26 @@\n+/* Test specification of custom instructions via function attributes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246,custom-fmins=247,custom-fsqrts=251\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+  result[2] = sqrtf (operand_a);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t251, .* # fsqrts .*\" } } */"}, {"sha": "6c5f2a24be43f50c8c100c89370cc0e553ecb7f2", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-4.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,29 @@\n+/* Test conflict between pragma and attribute specification of custom\n+   instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+/* This test case is expected to cause an error because GCC does not know\n+   how to merge different custom instruction attribute sets.  The extern\n+   declaration sees the options specified by both the pragma and the function\n+   attribute, but the function definition sees only the pragma options.  */\n+\n+#pragma GCC target (\"custom-fmaxs=246\")\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmins=247\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{   /* { dg-error \"conflicting\" } */\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}"}, {"sha": "1dba87a4e44adeb2f723c3dfd7c30f5334b0923d", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-5.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,26 @@\n+/* Test that forward declaration and definition don't conflict when used\n+   with pragma specification of custom instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+#pragma GCC target (\"custom-fmaxs=246,custom-fmins=247\")\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result);\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */"}, {"sha": "7540c57b282683f66391f4f085f23d4c072a7126", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-6.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,30 @@\n+/* Test conflict between pragma and attribute specification of custom\n+   instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+/* This test case is expected to cause an error because GCC does not know\n+   how to merge different custom instruction attribute sets, even if they\n+   do not overlap.  */\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246\")));\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmins=247\")));    /* { dg-error \"conflicting\" } */\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}"}, {"sha": "6f17336fbb97eddfc8a4f26b42c76a741a21e849", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-7.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,33 @@\n+/* Test that duplicate declarations with the same custom insn attributes\n+   don't cause an error.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+/* This test case is expected to cause an error because GCC does not know\n+   how to merge different custom instruction attribute sets, even if they\n+   do not overlap.  */\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246,custom-fmins=247\")));\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246,custom-fmins=247\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */"}, {"sha": "32f8a04147936a9bba929277781662e3cdf4acd2", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-8.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,24 @@\n+/* Test whitespace skipping in target attributes.  */\n+\n+/* { dg-do compile } */\n+\n+#pragma GCC target (\"custom-fdivs=246\")\n+#pragma GCC target (\" custom-fdivs=246\")\n+#pragma GCC target (\"custom-fdivs =246\")\n+#pragma GCC target (\"custom-fdivs= 246\")\n+#pragma GCC target (\"custom-fdivs=246 \")\n+\n+#pragma GCC target (\"custom-fdivs=246,custom-fabss=247\")\n+#pragma GCC target (\"custom-fdivs=246 ,custom-fabss=247\")\n+#pragma GCC target (\"custom-fdivs=246, custom-fabss=247\")\n+#pragma GCC target (\"custom-fdivs=246 , custom-fabss=247\")\n+\n+void foo (void) __attribute__ ((target (\"custom-fcmpnes=226,custom-fcmpeqs=227\")));\n+void foo (void) __attribute__ ((target (\"custom-fcmpnes =226 ,custom-fcmpeqs=227\")));\n+void foo (void) __attribute__ ((target (\"custom-fcmpnes= 226, custom-fcmpeqs=227\")));\n+void foo (void) __attribute__ ((target (\" custom-fcmpnes=226 , custom-fcmpeqs = 227\")));\n+void foo (void) __attribute__ ((target (\" custom-fcmpnes=226 ,custom-fcmpeqs =227 \")));\n+\n+#pragma GCC target (\"custom-fpu-cfg=60-1\")\n+#pragma GCC target (\"custom-fpu-cfg =60-1 \")\n+#pragma GCC target (\" custom-fpu-cfg= 60-1 \")"}, {"sha": "b290c41e4755cd031cb3fe1dd8b05c6c0a35287b", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-cmp-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-cmp-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,53 @@\n+/* Test generation of floating-point compare custom instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#pragma GCC target (\"custom-frdxhi=40\")\n+#pragma GCC target (\"custom-frdxlo=41\")\n+#pragma GCC target (\"custom-frdy=42\")\n+#pragma GCC target (\"custom-fwrx=43\")\n+#pragma GCC target (\"custom-fwry=44\")\n+\n+#pragma GCC target (\"custom-fcmpeqs=200\")\n+\n+int\n+test_fcmpeqs (float a, float b)\n+{\n+  return (a == b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t200, .* # fcmpeqs .*\" } } */\n+\n+#pragma GCC target (\"custom-fcmpgtd=201\")\n+\n+int\n+test_fcmpgtd (double a, double b)\n+{\n+  return (a > b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t201, .* # fcmpgtd .*\" } } */\n+\n+#pragma GCC target (\"custom-fcmples=202\")\n+\n+int\n+test_fcmples (float a, float b)\n+{\n+  return (a <= b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t202, .* # fcmples .*\" } } */\n+\n+#pragma GCC target (\"custom-fcmpned=203\")\n+\n+int\n+test_fcmpned (double a, double b)\n+{\n+  return (a != b);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t203, .* # fcmpned .*\" } } */"}, {"sha": "20b2159960e7d93f922c88b62c346acb3f02f88b", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-conversion.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-conversion.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,66 @@\n+/* Test generation of conversion custom instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only -funsafe-math-optimizations\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+#pragma GCC target (\"custom-frdxhi=40\")\n+#pragma GCC target (\"custom-frdxlo=41\")\n+#pragma GCC target (\"custom-frdy=42\")\n+#pragma GCC target (\"custom-fwrx=43\")\n+#pragma GCC target (\"custom-fwry=44\")\n+\n+#pragma GCC target (\"custom-fextsd=100\")\n+#pragma GCC target (\"custom-fixdi=101\")\n+#pragma GCC target (\"custom-fixdu=102\")\n+#pragma GCC target (\"custom-fixsi=103\")\n+#pragma GCC target (\"custom-fixsu=104\")\n+#pragma GCC target (\"custom-floatid=105\")\n+#pragma GCC target (\"custom-floatis=106\")\n+#pragma GCC target (\"custom-floatud=107\")\n+#pragma GCC target (\"custom-floatus=108\")\n+#pragma GCC target (\"custom-ftruncds=109\")\n+\n+typedef struct data {\n+  double fextsd;\n+  int fixdi;\n+  unsigned fixdu;\n+  int fixsi;\n+  unsigned fixsu;\n+  double floatid;\n+  float floatis;\n+  double floatud;\n+  float floatus;\n+  float ftruncds;\n+} data_t;\n+\n+void\n+custom_fp (int i, unsigned u, float f, double d, data_t *out)\n+{\n+  out->fextsd = (double) f;\n+  out->fixdi = (int) d;\n+  out->fixdu = (unsigned) d;\n+  out->fixsi = (int) f;\n+  out->fixsu = (unsigned) f;\n+  out->floatid = (double) i;\n+  out->floatis = (float) i;\n+  out->floatud = (double) u;\n+  out->floatus = (float) u;\n+  out->ftruncds = (float) d;\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t100, .* # fextsd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t101, .* # fixdi .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t102, .* # fixdu .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t103, .* # fixsi .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t104, .* # fixsu .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t105, .* # floatid .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t106, .* # floatis .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t107, .* # floatud .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t108, .* # floatus .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t109, .* # ftruncds .*\" } } */"}, {"sha": "d907c572af1362dcb65c8f2a2c53c3836ed1e80b", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-double.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-double.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,86 @@\n+/* Test generation of all double-float custom instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only -funsafe-math-optimizations\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+#pragma GCC target (\"custom-frdxhi=40\")\n+#pragma GCC target (\"custom-frdxlo=41\")\n+#pragma GCC target (\"custom-frdy=42\")\n+#pragma GCC target (\"custom-fwrx=43\")\n+#pragma GCC target (\"custom-fwry=44\")\n+\n+#pragma GCC target (\"custom-fabsd=100\")\n+#pragma GCC target (\"custom-faddd=101\")\n+#pragma GCC target (\"custom-fatand=102\")\n+#pragma GCC target (\"custom-fcosd=103\")\n+#pragma GCC target (\"custom-fdivd=104\")\n+#pragma GCC target (\"custom-fexpd=105\")\n+#pragma GCC target (\"custom-flogd=106\")\n+#pragma GCC target (\"custom-fmaxd=107\")\n+#pragma GCC target (\"custom-fmind=108\")\n+#pragma GCC target (\"custom-fmuld=109\")\n+#pragma GCC target (\"custom-fnegd=110\")\n+#pragma GCC target (\"custom-fsind=111\")\n+#pragma GCC target (\"custom-fsqrtd=112\")\n+#pragma GCC target (\"custom-fsubd=113\")\n+#pragma GCC target (\"custom-ftand=114\")\n+#pragma GCC target (\"custom-fcmpeqd=200\")\n+#pragma GCC target (\"custom-fcmpged=201\")\n+#pragma GCC target (\"custom-fcmpgtd=202\")\n+#pragma GCC target (\"custom-fcmpled=203\")\n+#pragma GCC target (\"custom-fcmpltd=204\")\n+#pragma GCC target (\"custom-fcmpned=205\")\n+\n+void\n+custom_fp (double a, double b, double *fp, int *ip)\n+{\n+  fp[0] = fabs (a);\n+  fp[1] = a + b;\n+  fp[2] = atan (a);\n+  fp[3] = cos (a);\n+  fp[4] = a / b;\n+  fp[5] = exp (a);\n+  fp[6] = log (a);\n+  fp[7] = fmax (a, b);\n+  fp[8] = fmin (a, b);\n+  fp[9] = a * b;\n+  fp[10] = -b;\n+  fp[11] = sin (b);\n+  fp[12] = sqrt (a);\n+  fp[13] = a - b;\n+  fp[14] = tan (a);\n+  ip[0] = (a == fp[0]);\n+  ip[1] = (a >= fp[1]);\n+  ip[2] = (a > fp[2]);\n+  ip[3] = (a <= fp[3]);\n+  ip[4] = (a < fp[4]);\n+  ip[5] = (a != fp[5]);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t100, .* # fabsd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t101, .* # faddd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t102, .* # fatand .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t103, .* # fcosd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t104, .* # fdivd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t105, .* # fexpd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t106, .* # flogd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t107, .* # fmaxd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t108, .* # fmind .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t109, .* # fmuld .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t110, .* # fnegd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t111, .* # fsind .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t112, .* # fsqrtd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t113, .* # fsubd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t114, .* # ftand .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t200, .* # fcmpeqd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t201, .* # fcmpged .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t202, .* # fcmpgtd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t203, .* # fcmpled .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t204, .* # fcmpltd .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t205, .* # fcmpned .*\" } } */"}, {"sha": "26919d2f20ecb441aef530cd18c82727a7b7d7dc", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-float.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-float.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,80 @@\n+/* Test generation of all single-float custom instructions.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only -funsafe-math-optimizations\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <stdio.h> \n+#include <math.h>\n+\n+#pragma GCC target (\"custom-fabss=100\")\n+#pragma GCC target (\"custom-fadds=101\")\n+#pragma GCC target (\"custom-fatans=102\")\n+#pragma GCC target (\"custom-fcoss=103\")\n+#pragma GCC target (\"custom-fdivs=104\")\n+#pragma GCC target (\"custom-fexps=105\")\n+#pragma GCC target (\"custom-flogs=106\")\n+#pragma GCC target (\"custom-fmaxs=107\")\n+#pragma GCC target (\"custom-fmins=108\")\n+#pragma GCC target (\"custom-fmuls=109\")\n+#pragma GCC target (\"custom-fnegs=110\")\n+#pragma GCC target (\"custom-fsins=111\")\n+#pragma GCC target (\"custom-fsqrts=112\")\n+#pragma GCC target (\"custom-fsubs=113\")\n+#pragma GCC target (\"custom-ftans=114\")\n+#pragma GCC target (\"custom-fcmpeqs=200\")\n+#pragma GCC target (\"custom-fcmpges=201\")\n+#pragma GCC target (\"custom-fcmpgts=202\")\n+#pragma GCC target (\"custom-fcmples=203\")\n+#pragma GCC target (\"custom-fcmplts=204\")\n+#pragma GCC target (\"custom-fcmpnes=205\")\n+\n+void\n+custom_fp (float a, float b, float *fp, int *ip)\n+{\n+  fp[0] = fabsf (a);\n+  fp[1] = a + b;\n+  fp[2] = atanf (a);\n+  fp[3] = cosf (a);\n+  fp[4] = a / b;\n+  fp[5] = expf (a);\n+  fp[6] = logf (a);\n+  fp[7] = fmaxf (a, b);\n+  fp[8] = fminf (a, b);\n+  fp[9] = a * b;\n+  fp[10] = -b;\n+  fp[11] = sinf (b);\n+  fp[12] = sqrtf (a);\n+  fp[13] = a - b;\n+  fp[14] = tanf (a);\n+  ip[0] = (a == fp[0]);\n+  ip[1] = (a >= fp[1]);\n+  ip[2] = (a > fp[2]);\n+  ip[3] = (a <= fp[3]);\n+  ip[4] = (a < fp[4]);\n+  ip[5] = (a != fp[5]);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t100, .* # fabss .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t101, .* # fadds .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t102, .* # fatans .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t103, .* # fcoss .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t104, .* # fdivs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t105, .* # fexps .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t106, .* # flogs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t107, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t108, .* # fmins .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t109, .* # fmuls .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t110, .* # fnegs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t111, .* # fsins .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t112, .* # fsqrts .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t113, .* # fsubs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t114, .* # ftans .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t200, .* # fcmpeqs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t201, .* # fcmpges .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t202, .* # fcmpgts .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t203, .* # fcmples .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t204, .* # fcmplts .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t205, .* # fcmpnes .*\" } } */"}, {"sha": "6af6d4f9cb08e6f417477f3e9e7a8189c28e3fdf", "filename": "gcc/testsuite/gcc.target/nios2/nios2-ashlsi3-one_shift.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-ashlsi3-one_shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-ashlsi3-one_shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-ashlsi3-one_shift.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \" \" } */\n+/* { dg-final { scan-assembler-not \"slli\" } } */\n+\n+int x;\n+\n+void foo(void)\n+{\n+  x <<= 1;\n+}"}, {"sha": "18399facc00a1dfd2686da371ae0eb439416f92c", "filename": "gcc/testsuite/gcc.target/nios2/nios2-builtin-custom.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-custom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-custom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-custom.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"custom\" } } */\n+\n+/* This test case used to cause an unrecognizable insn crash.  */\n+\n+void foo (void)\n+{\n+  int offset = __builtin_custom_in(0x1);\n+}"}, {"sha": "58bc83f8abc1a325cc114ab1aa712e615a412608", "filename": "gcc/testsuite/gcc.target/nios2/nios2-builtin-io.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-builtin-io.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"ldbio\" } } */\n+/* { dg-final { scan-assembler \"ldbuio\" } } */\n+/* { dg-final { scan-assembler \"ldhio\" } } */\n+/* { dg-final { scan-assembler \"ldhuio\" } } */\n+/* { dg-final { scan-assembler \"ldwio\" } } */\n+/* { dg-final { scan-assembler \"stbio\" } } */\n+/* { dg-final { scan-assembler \"sthio\" } } */\n+/* { dg-final { scan-assembler \"stwio\" } } */\n+\n+volatile char b;\n+volatile short h;\n+volatile int w;\n+\n+void x ()\n+{\n+  __builtin_ldbio (&b);\n+  __builtin_ldbuio (&b);\n+  __builtin_ldhio (&h);\n+  __builtin_ldhuio (&h);\n+  __builtin_ldwio (&w);\n+\n+  __builtin_stbio (&b, 42);\n+  __builtin_sthio (&h, 43);\n+  __builtin_stwio (&w, 44);\n+} "}, {"sha": "5516a1367cadb607affd1781afc6920181418c4d", "filename": "gcc/testsuite/gcc.target/nios2/nios2-cache-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"ldwio\" } } */\n+/* { dg-final { scan-assembler-not \"stwio\" } } */\n+\n+/* Make sure the default behavior is not to generate I/O variants of\n+   the load and stores to foo.  */\n+\n+extern volatile int foo;\n+\n+int\n+read_foo (void)\n+{\n+  return foo;\n+}\n+\n+void\n+write_foo (int x)\n+{\n+  foo = x;\n+}"}, {"sha": "239c600ac56c2e6e56d1a05ddfe20d2612b05d29", "filename": "gcc/testsuite/gcc.target/nios2/nios2-cache-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-cache-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-cache-volatile\" } */\n+/* { dg-final { scan-assembler \"ldwio\" } } */\n+/* { dg-final { scan-assembler \"stwio\" } } */\n+\n+/* Make sure -mno-cache-volatile generates I/O variants of the load and\n+   stores to foo.  */\n+\n+extern volatile int foo;\n+\n+int\n+read_foo (void)\n+{\n+  return foo;\n+}\n+\n+void\n+write_foo (int x)\n+{\n+  foo = x;\n+}"}, {"sha": "c6e4b517e7154dce7ce7ce499fabfa088a1eae13", "filename": "gcc/testsuite/gcc.target/nios2/nios2-custom-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+\n+float fres, f1, f2;\n+int ires, i1, i2;\n+void *pres, *p1, *p2;\n+\n+void x ()\n+{\n+  __builtin_custom_n (0);\n+  __builtin_custom_ni (1, i1);\n+  __builtin_custom_nf (2, f1);\n+  __builtin_custom_np (3, p1);\n+  __builtin_custom_nii (4, i1, i2);\n+  __builtin_custom_nif (5, i1, f2);\n+  __builtin_custom_nip (6, i1, p2);\n+  __builtin_custom_nfi (7, f1, i2);\n+  __builtin_custom_nff (8, f1, f2);\n+  __builtin_custom_nfp (9, f1, p2);\n+  __builtin_custom_npi (10, p1, i2);\n+  __builtin_custom_npf (11, p1, f2);\n+  __builtin_custom_npp (12, p1, p2);\n+\n+  ires = __builtin_custom_in (13+0);\n+  ires = __builtin_custom_ini (13+1, i1);\n+  ires = __builtin_custom_inf (13+2, f1);\n+  ires = __builtin_custom_inp (13+3, p1);\n+  ires = __builtin_custom_inii (13+4, i1, i2);\n+  ires = __builtin_custom_inif (13+5, i1, f2);\n+  ires = __builtin_custom_inip (13+6, i1, p2);\n+  ires = __builtin_custom_infi (13+7, f1, i2);\n+  ires = __builtin_custom_inff (13+8, f1, f2);\n+  ires = __builtin_custom_infp (13+9, f1, p2);\n+  ires = __builtin_custom_inpi (13+10, p1, i2);\n+  ires = __builtin_custom_inpf (13+11, p1, f2);\n+  ires = __builtin_custom_inpp (13+12, p1, p2);\n+\n+  fres = __builtin_custom_fn (26+0);\n+  fres = __builtin_custom_fni (26+1, i1);\n+  fres = __builtin_custom_fnf (26+2, f1);\n+  fres = __builtin_custom_fnp (26+3, p1);\n+  fres = __builtin_custom_fnii (26+4, i1, i2);\n+  fres = __builtin_custom_fnif (26+5, i1, f2);\n+  fres = __builtin_custom_fnip (26+6, i1, p2);\n+  fres = __builtin_custom_fnfi (26+7, f1, i2);\n+  fres = __builtin_custom_fnff (26+8, f1, f2);\n+  fres = __builtin_custom_fnfp (26+9, f1, p2);\n+  fres = __builtin_custom_fnpi (26+10, p1, i2);\n+  fres = __builtin_custom_fnpf (26+11, p1, f2);\n+  fres = __builtin_custom_fnpp (26+12, p1, p2);\n+\n+  pres = __builtin_custom_pn (39+0);\n+  pres = __builtin_custom_pni (39+1, i1);\n+  pres = __builtin_custom_pnf (39+2, f1);\n+  pres = __builtin_custom_pnp (39+3, p1);\n+  pres = __builtin_custom_pnii (39+4, i1, i2);\n+  pres = __builtin_custom_pnif (39+5, i1, f2);\n+  pres = __builtin_custom_pnip (39+6, i1, p2);\n+  pres = __builtin_custom_pnfi (39+7, f1, i2);\n+  pres = __builtin_custom_pnff (39+8, f1, f2);\n+  pres = __builtin_custom_pnfp (39+9, f1, p2);\n+  pres = __builtin_custom_pnpi (39+10, p1, i2);\n+  pres = __builtin_custom_pnpf (39+11, p1, f2);\n+  pres = __builtin_custom_pnpp (39+12, p1, p2);\n+} "}, {"sha": "7f5d21a5440dec2e180b3d1e34eb218b5fe26fd0", "filename": "gcc/testsuite/gcc.target/nios2/nios2-custom-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-custom-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+\n+float foo (float) __attribute__ ((target (\"custom-fsqrts=128\")));\n+float foo (float x)\n+{\n+  return __builtin_custom_fsqrts (x) + __builtin_custom_fnf (128, x);\n+}"}, {"sha": "21b4a02be9f6ee80cb2d9fc371dec8e957023d63", "filename": "gcc/testsuite/gcc.target/nios2/nios2-int-types.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-int-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-int-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-int-types.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,34 @@\n+/* Test that various types are all derived from int.  */\n+/* { dg-do compile } */\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <sys/types.h>\n+\n+extern size_t a;\n+unsigned int a;\n+extern unsigned int aa;\n+size_t aa;\n+\n+extern ssize_t b;\n+int b;\n+extern int bb;\n+ssize_t bb;\n+\n+extern ptrdiff_t c;\n+int c;\n+extern int cc;\n+ptrdiff_t cc;\n+\n+extern intptr_t d;\n+int d;\n+extern int dd;\n+intptr_t dd;\n+\n+extern uintptr_t e;\n+unsigned int e;\n+extern unsigned int ee;\n+uintptr_t ee;\n+\n+\n+"}, {"sha": "b639482bfa6d83e17cd4896e8aa0b29d56ddcdd1", "filename": "gcc/testsuite/gcc.target/nios2/nios2-mul-options-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-final { scan-assembler \"__muldi3\" } } */\n+\n+long long x, y, z;\n+\n+void test()\n+{\n+  x = y * z;\n+}\n+  "}, {"sha": "f93b4e7c585a1b9496d903843e283bf741ab37bd", "filename": "gcc/testsuite/gcc.target/nios2/nios2-mul-options-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mhw-mulx\" } */\n+/* { dg-final { scan-assembler-not \"__muldi3\" } } */\n+\n+long long x, y, z;\n+\n+void test()\n+{\n+  x = y * z;\n+}\n+  "}, {"sha": "2da74ba6b3b99fe65bba36c0eb22b14320f4a0bd", "filename": "gcc/testsuite/gcc.target/nios2/nios2-mul-options-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-3.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-final { scan-assembler-not \"__mulsi3\" } } */\n+\n+int x, y, z;\n+\n+void test()\n+{\n+  x = y * z;\n+}\n+  "}, {"sha": "7794f6d8756d696078d46ac7bb1683d8c41a15f0", "filename": "gcc/testsuite/gcc.target/nios2/nios2-mul-options-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-mul-options-4.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-hw-mul\" } */\n+/* { dg-final { scan-assembler \"__mulsi3\" } } */\n+\n+int x, y, z;\n+\n+void test()\n+{\n+  x = y * z;\n+}\n+  "}, {"sha": "3a1911e326d21a0ffa0c8525dfb7158ee88966eb", "filename": "gcc/testsuite/gcc.target/nios2/nios2-nor.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-nor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-nor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-nor.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler \"nor\" } } */\n+\n+int foo (int x, int y)\n+{\n+  return ~(x | y);\n+}"}, {"sha": "6b44d88e65a4a3dbb8256ac3902684be8f6022f4", "filename": "gcc/testsuite/gcc.target/nios2/nios2-rdctl.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdctl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdctl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdctl.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"rdctl\" } } */\n+\n+int x ()\n+{\n+  __builtin_rdctl (0);\n+  return 0;\n+} "}, {"sha": "922942ab980f9b3c2720aeae2eb80ad3d5a43415", "filename": "gcc/testsuite/gcc.target/nios2/nios2-rdwrctl-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdwrctl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdwrctl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdwrctl-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+volatile int res;\n+\n+void x ()\n+{\n+  __builtin_wrctl (0, res);\n+  __builtin_wrctl (15, res);\n+  __builtin_wrctl (31, res);\n+\n+  res = __builtin_rdctl (0);\n+  res = __builtin_rdctl (15);\n+  res = __builtin_rdctl (31);\n+} "}, {"sha": "415906fc5ee2936367d4631fb56555039cb14a85", "filename": "gcc/testsuite/gcc.target/nios2/nios2-stack-check-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-1.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstack-limit-register=et\" } */\n+/* { dg-final { scan-assembler \"bgeu\\\\tsp, et\" } } */\n+/* { dg-final { scan-assembler \"break\\\\t3\" } } */\n+/* check stack checking */\n+void test()\n+{\n+  int a, b, c;\n+}"}, {"sha": "b903db5cdc429a30757cdb2e358897e669e40fb7", "filename": "gcc/testsuite/gcc.target/nios2/nios2-stack-check-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stack-check-2.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \" \" } */\n+/* { dg-final { scan-assembler-not \"bgeu\\\\tsp, et\" } } */\n+/* { dg-final { scan-assembler-not \"break\\\\t3\" } } */\n+/* check stack checking */\n+void test()\n+{\n+  int a, b, c;\n+}"}, {"sha": "af079d641c74e65d01d7feefee329c11699ffb49", "filename": "gcc/testsuite/gcc.target/nios2/nios2-stxio.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stxio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stxio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-stxio.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+void test_stbio (unsigned char* p1, unsigned char* p2)\n+{\n+  __builtin_stbio (p1, *p2);\n+  __builtin_stbio (p2, 0);\n+  __builtin_stbio (p2 + 1, 0x80);\n+  __builtin_stbio (p2 + 2, 0x7f);\n+}\n+\n+void test_sthio (unsigned short* p1, unsigned short* p2)\n+{\n+  __builtin_sthio (p1, *p2);\n+  __builtin_sthio (p2, 0);\n+  __builtin_sthio (p2 + 1, 0x8000);\n+  __builtin_sthio (p2 + 2, 0x7fff);\n+}\n+\n+void test_stwio (unsigned int* p1, unsigned int* p2)\n+{\n+  __builtin_stwio (p1, *p2);\n+  __builtin_stwio (p2, 0);\n+  __builtin_stwio (p2 + 1, 0x80000000);\n+  __builtin_stwio (p2 + 2, 0x7fffffff);\n+}"}, {"sha": "dd881d166c8eca49a5b6ddd4032bf3d449e82255", "filename": "gcc/testsuite/gcc.target/nios2/nios2-trap-insn.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-trap-insn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-trap-insn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-trap-insn.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"break\\\\t3\" } } */\n+\n+/* Test the nios2 trap instruction */\n+void foo(void){\n+  __builtin_trap();\n+}"}, {"sha": "f32a9ca4e50001482c444c0b7ef94539d0ad4f94", "filename": "gcc/testsuite/gcc.target/nios2/nios2-wrctl-not-zero.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-not-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-not-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-not-zero.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \" \" } */\n+/* { dg-final { scan-assembler-not \"wrctl\\\\tctl6, zero\" } } */\n+\n+void foo(void){\n+  __builtin_wrctl(6,4);\n+}"}, {"sha": "93f01b07708a519494f13d3e1cf0a89813201c09", "filename": "gcc/testsuite/gcc.target/nios2/nios2-wrctl-zero.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl-zero.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { scan-assembler \"wrctl\\\\tctl6, zero\" } } */\n+\n+void foo(void){\n+  __builtin_wrctl(6,0);\n+}"}, {"sha": "5ebdc24b8be64a5e249cc817923e82d91793b219", "filename": "gcc/testsuite/gcc.target/nios2/nios2-wrctl.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-wrctl.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-final { scan-assembler \"wrctl\" } } */\n+\n+void foo(void){\n+  __builtin_wrctl(6,4);\n+}"}, {"sha": "558da111e28f606e32dce0bad6c31aceea421abb", "filename": "gcc/testsuite/gcc.target/nios2/nios2.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2.exp?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a Nios II target.\n+if ![istarget nios2*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "3fe71d741472a36a13bf684cc2b59aa5beb3de07", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -531,6 +531,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget moxie-*-elf*]\n \t     || [istarget msp430-*-*]\n \t     || [istarget nds32*-*-elf]\n+\t     || [istarget nios2-*-elf]\n \t     || [istarget picochip-*-*]\n \t     || [istarget powerpc-*-eabi*]\n \t     || [istarget powerpc-*-elf]"}, {"sha": "1b015f2bc78e4f02ee64a1b0355bf6df6374e7d5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -1,3 +1,21 @@\n+2013-12-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Based on patches from Altera Corporation\n+\n+\t* config.host (nios2-*-*,nios2-*-linux*): Add nios2 host cases.\n+\t* config/nios2/lib2-nios2.h: New file.\n+\t* config/nios2/lib2-divmod-hi.c: New file.\n+\t* config/nios2/linux-unwind.h: New file.\n+\t* config/nios2/lib2-divmod.c: New file.\n+\t* config/nios2/linux-atomic.c: New file.\n+\t* config/nios2/t-nios2: New file.\n+\t* config/nios2/crti.asm: New file.\n+\t* config/nios2/t-linux: New file.\n+\t* config/nios2/lib2-divtable.c: New file.\n+\t* config/nios2/lib2-mul.c: New file.\n+\t* config/nios2/tramp.c: New file.\n+\t* config/nios2/crtn.asm: New file.\n+\n 2013-12-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/cpuinfo.c (enum vendor_signatures): Remove."}, {"sha": "6aa986e4e465b92a5f8adc32336e4fc1f5d15ba4", "filename": "libgcc/config.host", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -146,6 +146,9 @@ mips*-*-*)\n nds32*-*)\n \tcpu_type=nds32\n \t;;\n+nios2*-*-*)\n+\tcpu_type=nios2\n+\t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n \t;;\n@@ -880,6 +883,15 @@ nds32*-elf*)\n \t\t;;\n \tesac\n \t;;\n+nios2-*-linux*)\n+\ttmake_file=\"$tmake_file nios2/t-nios2 nios2/t-linux t-libgcc-pic t-slibgcc-libgcc\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n+\tmd_unwind_header=nios2/linux-unwind.h\n+\t;;\n+nios2-*-*)\n+\ttmake_file=\"$tmake_file nios2/t-nios2 t-softfp-sfdf t-softfp-excl t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n+\t;;\n pdp11-*-*)\n \ttmake_file=\"pdp11/t-pdp11 t-fdpbit\"\n \t;;"}, {"sha": "23481b6883392d375b75d2129145fecf7ebdec56", "filename": "libgcc/config/nios2/crti.S", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Fcrti.S?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,87 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Jonah Graham (jgraham@altera.com).\n+   Contributed by Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* This file just make a stack frame for the contents of the .fini and\n+   .init sections.  Users may put any desired instructions in those\n+   sections.\n+\n+   While technically any code can be put in the init and fini sections\n+   most stuff will not work other than stuff which obeys the call frame\n+   and ABI.  All the call-preserved registers are saved, the call clobbered\n+   registers should have been saved by the code calling init and fini.\n+\n+   See crtstuff.c for an example of code that inserts itself in the init\n+   and fini sections. \n+\n+   See crt0.s for the code that calls init and fini.  */\n+\n+\t.file\t\"crti.asm\"\n+\n+\t.section\t\".init\"\n+\t.align 2\n+\t.global\t_init\n+_init:\n+\taddi\tsp, sp, -48\n+\tstw\tra, 44(sp)\n+\tstw\tr23, 40(sp)\n+\tstw\tr22, 36(sp)\n+\tstw\tr21, 32(sp)\n+\tstw\tr20, 28(sp)\n+\tstw\tr19, 24(sp)\n+\tstw\tr18, 20(sp)\n+\tstw\tr17, 16(sp)\n+\tstw\tr16, 12(sp)\n+\tstw\tfp, 8(sp)\n+\taddi\tfp, sp, 8\n+#ifdef linux\n+\tnextpc\tr22\n+1:\tmovhi\tr2, %hiadj(_GLOBAL_OFFSET_TABLE_ - 1b)\n+\taddi\tr2, r2, %lo(_GLOBAL_OFFSET_TABLE_ - 1b)\n+\tadd\tr22, r22, r2\n+#endif\n+\t\n+\t\n+\t.section\t\".fini\"\n+\t.align\t2\n+\t.global\t_fini\n+_fini:\n+\taddi\tsp, sp, -48\n+\tstw\tra, 44(sp)\n+\tstw\tr23, 40(sp)\n+\tstw\tr22, 36(sp)\n+\tstw\tr21, 32(sp)\n+\tstw\tr20, 28(sp)\n+\tstw\tr19, 24(sp)\n+\tstw\tr18, 20(sp)\n+\tstw\tr17, 16(sp)\n+\tstw\tr16, 12(sp)\n+\tstw\tfp, 8(sp)\n+\taddi\tfp, sp, 8\n+#ifdef linux\n+\tnextpc\tr22\n+1:\tmovhi\tr2, %hiadj(_GLOBAL_OFFSET_TABLE_ - 1b)\n+\taddi\tr2, r2, %lo(_GLOBAL_OFFSET_TABLE_ - 1b)\n+\tadd\tr22, r22, r2\n+#endif\n+"}, {"sha": "722c1c7108c5ed8d0e7832610c05e160b094295c", "filename": "libgcc/config/nios2/crtn.S", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Fcrtn.S?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Jonah Graham (jgraham@altera.com).\n+   Contributed by Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* This file just makes sure that the .fini and .init sections do in\n+fact return.  Users may put any desired instructions in those sections.\n+This file is the last thing linked into any executable.\n+*/\t\n+\t.file\t\"crtn.asm\"\n+\n+\n+\n+\t.section\t\".init\"\n+\tldw\tra, 44(sp)\n+\tldw\tr23, 40(sp)\n+\tldw\tr22, 36(sp)\n+\tldw\tr21, 32(sp)\n+\tldw\tr20, 28(sp)\n+\tldw\tr19, 24(sp)\n+\tldw\tr18, 20(sp)\n+\tldw\tr17, 16(sp)\n+\tldw\tr16, 12(sp)\n+\tldw\tfp, 8(sp)\n+\taddi\tsp, sp, 48\n+\tret\n+\t\n+\t.section\t\".fini\"\n+\tldw\tra, 44(sp)\n+\tldw\tr23, 40(sp)\n+\tldw\tr22, 36(sp)\n+\tldw\tr21, 32(sp)\n+\tldw\tr20, 28(sp)\n+\tldw\tr19, 24(sp)\n+\tldw\tr18, 20(sp)\n+\tldw\tr17, 16(sp)\n+\tldw\tr16, 12(sp)\n+\tldw\tfp, 8(sp)\n+\taddi\tsp, sp, 48\n+\tret\n+"}, {"sha": "27459915bf1660f680a0a80deb1955afc5c18216", "filename": "libgcc/config/nios2/lib2-divmod-hi.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divmod-hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divmod-hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flib2-divmod-hi.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,117 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-nios2.h\"\n+\n+/* 16-bit HI divide and modulo as used in Nios II.  */\n+\n+static UHItype\n+udivmodhi4 (UHItype num, UHItype den, word_type modwanted)\n+{\n+  UHItype bit = 1;\n+  UHItype res = 0;\n+\n+  while (den < num && bit && !(den & (1L<<15)))\n+    {\n+      den <<=1;\n+      bit <<=1;\n+    }\n+  while (bit)\n+    {\n+      if (num >= den)\n+\t{\n+\t  num -= den;\n+\t  res |= bit;\n+\t}\n+      bit >>=1;\n+      den >>=1;\n+    }\n+  if (modwanted)\n+    return num;\n+  return res;\n+}\n+\n+\n+HItype\n+__divhi3 (HItype a, HItype b)\n+{\n+  word_type neg = 0;\n+  HItype res;\n+\n+  if (a < 0)\n+    {\n+      a = -a;\n+      neg = !neg;\n+    }\n+\n+  if (b < 0)\n+    {\n+      b = -b;\n+      neg = !neg;\n+    }\n+\n+  res = udivmodhi4 (a, b, 0);\n+\n+  if (neg)\n+    res = -res;\n+\n+  return res;\n+}\n+\n+\n+HItype\n+__modhi3 (HItype a, HItype b)\n+{\n+  word_type neg = 0;\n+  HItype res;\n+\n+  if (a < 0)\n+    {\n+      a = -a;\n+      neg = 1;\n+    }\n+\n+  if (b < 0)\n+    b = -b;\n+\n+  res = udivmodhi4 (a, b, 1);\n+\n+  if (neg)\n+    res = -res;\n+\n+  return res;\n+}\n+\n+\n+UHItype\n+__udivhi3 (UHItype a, UHItype b)\n+{\n+  return udivmodhi4 (a, b, 0);\n+}\n+\n+\n+UHItype\n+__umodhi3 (UHItype a, UHItype b)\n+{\n+  return udivmodhi4 (a, b, 1);\n+}\n+"}, {"sha": "e5f9697808d052236425d71c62de8a4dece83f1e", "filename": "libgcc/config/nios2/lib2-divmod.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divmod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divmod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flib2-divmod.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,117 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-nios2.h\"\n+\n+/* 32-bit SI divide and modulo as used in Nios II.  */\n+\n+static USItype\n+udivmodsi4 (USItype num, USItype den, word_type modwanted)\n+{\n+  USItype bit = 1;\n+  USItype res = 0;\n+\n+  while (den < num && bit && !(den & (1L<<31)))\n+    {\n+      den <<=1;\n+      bit <<=1;\n+    }\n+  while (bit)\n+    {\n+      if (num >= den)\n+\t{\n+\t  num -= den;\n+\t  res |= bit;\n+\t}\n+      bit >>=1;\n+      den >>=1;\n+    }\n+  if (modwanted)\n+    return num;\n+  return res;\n+}\n+\n+\n+SItype\n+__divsi3 (SItype a, SItype b)\n+{\n+  word_type neg = 0;\n+  SItype res;\n+\n+  if (a < 0)\n+    {\n+      a = -a;\n+      neg = !neg;\n+    }\n+\n+  if (b < 0)\n+    {\n+      b = -b;\n+      neg = !neg;\n+    }\n+\n+  res = udivmodsi4 (a, b, 0);\n+\n+  if (neg)\n+    res = -res;\n+\n+  return res;\n+}\n+\n+\n+SItype\n+__modsi3 (SItype a, SItype b)\n+{\n+  word_type neg = 0;\n+  SItype res;\n+\n+  if (a < 0)\n+    {\n+      a = -a;\n+      neg = 1;\n+    }\n+\n+  if (b < 0)\n+    b = -b;\n+\n+  res = udivmodsi4 (a, b, 1);\n+\n+  if (neg)\n+    res = -res;\n+\n+  return res;\n+}\n+\n+\n+SItype\n+__udivsi3 (SItype a, SItype b)\n+{\n+  return udivmodsi4 (a, b, 0);\n+}\n+\n+\n+SItype\n+__umodsi3 (SItype a, SItype b)\n+{\n+  return udivmodsi4 (a, b, 1);\n+}\n+"}, {"sha": "4f6a230a92b31d4718aaae311aa940711f131ad3", "filename": "libgcc/config/nios2/lib2-divtable.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-divtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flib2-divtable.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-nios2.h\"\n+\n+UQItype __divsi3_table[] =\n+{\n+  0, 0/1, 0/2, 0/3, 0/4, 0/5, 0/6, 0/7,\n+    0/8, 0/9, 0/10, 0/11, 0/12, 0/13, 0/14, 0/15,\n+  0, 1/1, 1/2, 1/3, 1/4, 1/5, 1/6, 1/7,\n+    1/8, 1/9, 1/10, 1/11, 1/12, 1/13, 1/14, 1/15,\n+  0, 2/1, 2/2, 2/3, 2/4, 2/5, 2/6, 2/7,\n+    2/8, 2/9, 2/10, 2/11, 2/12, 2/13, 2/14, 2/15,\n+  0, 3/1, 3/2, 3/3, 3/4, 3/5, 3/6, 3/7,\n+    3/8, 3/9, 3/10, 3/11, 3/12, 3/13, 3/14, 3/15,\n+  0, 4/1, 4/2, 4/3, 4/4, 4/5, 4/6, 4/7,\n+    4/8, 4/9, 4/10, 4/11, 4/12, 4/13, 4/14, 4/15,\n+  0, 5/1, 5/2, 5/3, 5/4, 5/5, 5/6, 5/7,\n+    5/8, 5/9, 5/10, 5/11, 5/12, 5/13, 5/14, 5/15,\n+  0, 6/1, 6/2, 6/3, 6/4, 6/5, 6/6, 6/7,\n+    6/8, 6/9, 6/10, 6/11, 6/12, 6/13, 6/14, 6/15,\n+  0, 7/1, 7/2, 7/3, 7/4, 7/5, 7/6, 7/7,\n+    7/8, 7/9, 7/10, 7/11, 7/12, 7/13, 7/14, 7/15,\n+  0, 8/1, 8/2, 8/3, 8/4, 8/5, 8/6, 8/7,\n+    8/8, 8/9, 8/10, 8/11, 8/12, 8/13, 8/14, 8/15,\n+  0, 9/1, 9/2, 9/3, 9/4, 9/5, 9/6, 9/7,\n+    9/8, 9/9, 9/10, 9/11, 9/12, 9/13, 9/14, 9/15,\n+  0, 10/1, 10/2, 10/3, 10/4, 10/5, 10/6, 10/7,\n+    10/8, 10/9, 10/10, 10/11, 10/12, 10/13, 10/14, 10/15,\n+  0, 11/1, 11/2, 11/3, 11/4, 11/5, 11/6, 11/7,\n+    11/8, 11/9, 11/10, 11/11, 11/12, 11/13, 11/14, 11/15,\n+  0, 12/1, 12/2, 12/3, 12/4, 12/5, 12/6, 12/7,\n+    12/8, 12/9, 12/10, 12/11, 12/12, 12/13, 12/14, 12/15,\n+  0, 13/1, 13/2, 13/3, 13/4, 13/5, 13/6, 13/7,\n+    13/8, 13/9, 13/10, 13/11, 13/12, 13/13, 13/14, 13/15,\n+  0, 14/1, 14/2, 14/3, 14/4, 14/5, 14/6, 14/7,\n+    14/8, 14/9, 14/10, 14/11, 14/12, 14/13, 14/14, 14/15,\n+  0, 15/1, 15/2, 15/3, 15/4, 15/5, 15/6, 15/7,\n+    15/8, 15/9, 15/10, 15/11, 15/12, 15/13, 15/14, 15/15,\n+};\n+"}, {"sha": "4c247fe0d0d513400378b4d9284ca464a3ff9a67", "filename": "libgcc/config/nios2/lib2-mul.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flib2-mul.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-nios2.h\"\n+\n+/* 32-bit SI multiply for Nios II.  */\n+\n+SItype\n+__mulsi3 (SItype a, SItype b)\n+{\n+  SItype res = 0;\n+  USItype cnt = a;\n+  \n+  while (cnt)\n+    {\n+      if (cnt & 1)\n+\tres += b;\t  \n+      b <<= 1;\n+      cnt >>= 1;\n+    }\n+    \n+  return res;\n+}"}, {"sha": "a581aa5de674e9df3e77a5cd8cbc420b4fe2e1b2", "filename": "libgcc/config/nios2/lib2-nios2.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-nios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flib2-nios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flib2-nios2.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,49 @@\n+/* Integer arithmetic support for Altera Nios II.\n+   \n+   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+   \n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+   \n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+   \n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LIB2_NIOS2_H\n+#define LIB2_NIOS2_H\n+\n+/* Types.  */\n+\n+typedef char QItype __attribute__ ((mode (QI)));\n+typedef unsigned char UQItype __attribute__ ((mode (QI)));\n+typedef short HItype __attribute__ ((mode (HI)));\n+typedef unsigned short UHItype __attribute__ ((mode (HI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef int word_type __attribute__ ((mode (__word__)));\n+\n+/* Exported functions.  */\n+extern SItype __divsi3 (SItype, SItype);\n+extern SItype __modsi3 (SItype, SItype);\n+extern SItype __udivsi3 (SItype, SItype);\n+extern SItype __umodsi3 (SItype, SItype);\n+extern HItype __divhi3 (HItype, HItype);\n+extern HItype __modhi3 (HItype, HItype);\n+extern UHItype __udivhi3 (UHItype, UHItype);\n+extern UHItype __umodhi3 (UHItype, UHItype);\n+extern SItype __mulsi3 (SItype, SItype);\n+\n+#endif /* LIB2_NIOS2_H */"}, {"sha": "1fc91dd82b17f89427457ca364f671067dbb0369", "filename": "libgcc/config/nios2/linux-atomic.c", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flinux-atomic.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,286 @@\n+/* Linux-specific atomic operations for Nios II Linux.\n+   Copyright (C) 2008-2013 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <asm/unistd.h>\n+#define EFAULT  14\n+#define EBUSY   16\n+#define ENOSYS  38\n+\n+/* We implement byte, short and int versions of each atomic operation\n+   using the kernel helper defined below.  There is no support for\n+   64-bit operations yet.  */\n+\n+/* Crash a userspace program with SIGSEV.  */\n+#define ABORT_INSTRUCTION asm (\"stw zero, 0(zero)\")\n+\n+/* Kernel helper for compare-and-exchange a 32-bit value.  */\n+static inline long\n+__kernel_cmpxchg (int oldval, int newval, int *mem)\n+{\n+  register int r2 asm (\"r2\");\n+  register int *r4 asm (\"r4\") = mem;\n+  register int r5 asm (\"r5\") = oldval;\n+  register int r6 asm (\"r6\") = newval;\n+\n+  /* Call the kernel provided fixed address cmpxchg helper routine.  */\n+  asm volatile (\"movi %0, %4\\n\\t\"\n+\t\t\"callr %0\\n\"\n+\t\t: \"=r\" (r2)\n+\t\t: \"r\" (r4), \"r\" (r5), \"r\" (r6), \"I\" (0x00001004)\n+\t\t: \"ra\", \"memory\");\n+  return r2;\n+}\n+\n+#define HIDDEN __attribute__ ((visibility (\"hidden\")))\n+\n+#ifdef __nios2_little_endian__\n+#define INVERT_MASK_1 0\n+#define INVERT_MASK_2 0\n+#else\n+#define INVERT_MASK_1 24\n+#define INVERT_MASK_2 16\n+#endif\n+\n+#define MASK_1 0xffu\n+#define MASK_2 0xffffu\n+\n+#define FETCH_AND_OP_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n+  int HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_fetch_and_##OP##_4 (int *ptr, int val)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int failure, tmp;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return tmp;\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FETCH_AND_OP_WORD (add,   , +)\n+FETCH_AND_OP_WORD (sub,   , -)\n+FETCH_AND_OP_WORD (or,    , |)\n+FETCH_AND_OP_WORD (and,   , &)\n+FETCH_AND_OP_WORD (xor,   , ^)\n+FETCH_AND_OP_WORD (nand, ~, &)\n+\n+#define NAME_oldval(OP, WIDTH) __sync_fetch_and_##OP##_##WIDTH\n+#define NAME_newval(OP, WIDTH) __sync_##OP##_and_fetch_##WIDTH\n+\n+/* Implement both __sync_<op>_and_fetch and __sync_fetch_and_<op> for\n+   subword-sized quantities.  */\n+\n+#define SUBWORD_SYNC_OP(OP, PFX_OP, INF_OP, TYPE, WIDTH, RETURN)\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  NAME##_##RETURN (OP, WIDTH) (TYPE *ptr, TYPE val)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int *wordptr = (int *) ((unsigned long) ptr & ~3);\t\t\t\\\n+    unsigned int mask, shift, oldval, newval;\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = *wordptr;\t\t\t\t\t\t\\\n+      newval = ((PFX_OP (((oldval & mask) >> shift)\t\t\t\\\n+\t\t\t INF_OP (unsigned int) val)) << shift) & mask;\t\\\n+      newval |= oldval & ~mask;\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (RETURN & mask) >> shift;\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, oldval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, oldval)\n+\n+#define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n+  int HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_##OP##_and_fetch_4 (int *ptr, int val)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int tmp, failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n+  }\n+\n+OP_AND_FETCH_WORD (add,   , +)\n+OP_AND_FETCH_WORD (sub,   , -)\n+OP_AND_FETCH_WORD (or,    , |)\n+OP_AND_FETCH_WORD (and,   , &)\n+OP_AND_FETCH_WORD (xor,   , ^)\n+OP_AND_FETCH_WORD (nand, ~, &)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, newval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, newval)\n+\n+int HIDDEN\n+__sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+{\n+  int actual_oldval, fail;\n+    \n+  while (1)\n+    {\n+      actual_oldval = *ptr;\n+\n+      if (oldval != actual_oldval)\n+\treturn actual_oldval;\n+\n+      fail = __kernel_cmpxchg (actual_oldval, newval, ptr);\n+  \n+      if (!fail)\n+\treturn oldval;\n+    }\n+}\n+\n+#define SUBWORD_VAL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t       TYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int *wordptr = (int *)((unsigned long) ptr & ~3), fail;\t\t\\\n+    unsigned int mask, shift, actual_oldval, actual_newval;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    while (1)\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tactual_oldval = *wordptr;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (((actual_oldval & mask) >> shift) != (unsigned int) oldval)\t\\\n+          return (actual_oldval & mask) >> shift;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tactual_newval = (actual_oldval & ~mask)\t\t\t\t\\\n+\t\t\t| (((unsigned int) newval << shift) & mask);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tfail = __kernel_cmpxchg (actual_oldval, actual_newval,\t\t\\\n+\t\t\t\t wordptr);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (!fail)\t\t\t\t\t\t\t\\\n+\t  return oldval;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_VAL_CAS (unsigned short, 2)\n+SUBWORD_VAL_CAS (unsigned char,  1)\n+\n+typedef unsigned char bool;\n+\n+bool HIDDEN\n+__sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n+{\n+  int failure = __kernel_cmpxchg (oldval, newval, ptr);\n+  return (failure == 0);\n+}\n+\n+#define SUBWORD_BOOL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  bool HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t\tTYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE actual_oldval\t\t\t\t\t\t\t\\\n+      = __sync_val_compare_and_swap_##WIDTH (ptr, oldval, newval);\t\\\n+    return (oldval == actual_oldval);\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_BOOL_CAS (unsigned short, 2)\n+SUBWORD_BOOL_CAS (unsigned char,  1)\n+\n+int HIDDEN\n+__sync_lock_test_and_set_4 (int *ptr, int val)\n+{\n+  int failure, oldval;\n+\n+  do {\n+    oldval = *ptr;\n+    failure = __kernel_cmpxchg (oldval, val, ptr);\n+  } while (failure != 0);\n+\n+  return oldval;\n+}\n+\n+#define SUBWORD_TEST_AND_SET(TYPE, WIDTH)\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+    unsigned int oldval, newval, shift, mask;\t\t\t\t\\\n+    int *wordptr = (int *) ((unsigned long) ptr & ~3);\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = *wordptr;\t\t\t\t\t\t\\\n+      newval = (oldval & ~mask)\t\t\t\t\t\t\\\n+\t       | (((unsigned int) val << shift) & mask);\t\t\\\n+      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (oldval & mask) >> shift;\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_TEST_AND_SET (unsigned short, 2)\n+SUBWORD_TEST_AND_SET (unsigned char,  1)\n+\n+#define SYNC_LOCK_RELEASE(TYPE, WIDTH)\t\t\t\t\t\\\n+  void HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    /* All writes before this point must be seen before we release\t\\\n+       the lock itself.  */\t\t\t\t\t\t\\\n+    __builtin_sync ();\t\t\t\t\t\t\t\\\n+    *ptr = 0;\t\t\t\t\t\t\t\t\\\n+  }\n+\n+SYNC_LOCK_RELEASE (int,   4)\n+SYNC_LOCK_RELEASE (short, 2)\n+SYNC_LOCK_RELEASE (char,  1)"}, {"sha": "e71f52769fcebc277756afb1fbe54f7f7a00383f", "filename": "libgcc/config/nios2/linux-unwind.h", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,106 @@\n+/* DWARF2 EH unwinding support for Nios II Linux.\n+   Copyright (C) 2008-2013 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef inhibit_libc\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.\n+   The corresponding bits in the Linux kernel are in\n+   arch/nios2/kernel/signal.c.  */\n+\n+#include <signal.h>\n+#include <asm/unistd.h>\n+\n+/* Exactly the same layout as the kernel structures, unique names.  */\n+struct nios2_mcontext {\n+  int version;\n+  int gregs[32];\n+};\n+\n+struct nios2_ucontext {\n+  unsigned long uc_flags;\n+  struct ucontext *uc_link;\n+  stack_t uc_stack;\n+  struct nios2_mcontext uc_mcontext;\n+  sigset_t uc_sigmask;\t/* mask last for extensibility */\n+};\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR nios2_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+nios2_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t    _Unwind_FrameState *fs)\n+{\n+  u_int32_t *pc = (u_int32_t *) context->ra;\n+  _Unwind_Ptr new_cfa;\n+\n+  /* The expected sequence of instructions is:\n+       movi r2,(rt_sigreturn)\n+       trap\n+     Check for the trap first.  */\n+  if (pc[1] != 0x003b683a)\n+    return _URC_END_OF_STACK;\n+\n+#define NIOS2_REG(NUM,NAME)\t\t\t\t\t\t\\\n+  (fs->regs.reg[NUM].how = REG_SAVED_OFFSET,\t\t\t\t\\\n+   fs->regs.reg[NUM].loc.offset = (_Unwind_Ptr)&(regs->NAME) - new_cfa)\n+\n+  if (pc[0] == (0x00800004 | (__NR_rt_sigreturn << 6)))\n+    {\n+      struct rt_sigframe {\n+\tchar retcode[12];\n+\tsiginfo_t info;\n+\tstruct nios2_ucontext uc;\n+      } *rt_ = context->ra;\n+      struct nios2_mcontext *regs = &rt_->uc.uc_mcontext;\n+      int i;\n+\n+      /* MCONTEXT_VERSION is defined to 2 in the kernel.  */\n+      if (regs->version != 2)\n+\treturn _URC_END_OF_STACK;\n+\n+      /* The CFA is the user's incoming stack pointer value.  */\n+      new_cfa = (_Unwind_Ptr)regs->gregs[28];\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+      fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+\n+      /* The sequential registers.  */\n+      for (i = 1; i < 24; i++)\n+\tNIOS2_REG (i, gregs[i-1]);\n+      \n+      /* The random registers.  The kernel stores these in a funny order\n+\t in the gregs array.  */\n+      NIOS2_REG (RA_REGNO, gregs[23]);\n+      NIOS2_REG (FP_REGNO, gregs[24]);\n+      NIOS2_REG (GP_REGNO, gregs[25]);\n+      NIOS2_REG (EA_REGNO, gregs[27]);\n+      \n+      fs->retaddr_column = EA_REGNO;\n+      fs->signal_frame = 1;\n+      \n+      return _URC_NO_REASON;\n+    }\n+#undef NIOS2_REG\n+  return _URC_END_OF_STACK;\n+}\n+#endif"}, {"sha": "f3185678353dec5d99570fab8fe9279b8c1de622", "filename": "libgcc/config/nios2/sfp-machine.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Fsfp-machine.h?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,78 @@\n+/* Soft-FP definitions for Altera Nios II.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_loop(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n+#define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 1\n+#define _FP_QNANNEGATEDP 0\n+\n+/* Someone please check this.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)\t\t\\\n+\t&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#ifdef __nios2_little_endian__\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+#else\n+#define __BYTE_ORDER __BIG_ENDIAN\n+#endif\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "1fa581e28d8a1978c3067d66a97825bb8ff0ab35", "filename": "libgcc/config/nios2/t-linux", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Ft-linux?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,7 @@\n+# Soft-float functions go in glibc only, to facilitate the possible\n+# future addition of exception and rounding mode support integrated\n+# with <fenv.h>.\n+\n+LIB2FUNCS_EXCLUDE = _floatdidf _floatdisf _fixunsdfsi _fixunssfsi \\\n+  _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi _floatundidf _floatundisf\n+LIB2ADD += $(srcdir)/config/nios2/linux-atomic.c"}, {"sha": "320dedfe826ebe264ce582d23bc2c16b11537a5b", "filename": "libgcc/config/nios2/t-nios2", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ft-nios2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ft-nios2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Ft-nios2?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,5 @@\n+LIB2ADD += $(srcdir)/config/nios2/lib2-divmod.c \\\n+\t   $(srcdir)/config/nios2/lib2-divmod-hi.c \\\n+\t   $(srcdir)/config/nios2/lib2-divtable.c \\\n+\t   $(srcdir)/config/nios2/lib2-mul.c \\\n+\t   $(srcdir)/config/nios2/tramp.c"}, {"sha": "3d9d2496e79e697b0a220b566019d48698eefc44", "filename": "libgcc/config/nios2/tramp.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ftramp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e430824f28d68edd908a72677ba1b08a92e3e2ad/libgcc%2Fconfig%2Fnios2%2Ftramp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Ftramp.c?ref=e430824f28d68edd908a72677ba1b08a92e3e2ad", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2013 Free Software Foundation, Inc.\n+   Contributed by Altera and Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Set up trampolines.\n+   R12 is the static chain register.\n+   R2 is AT, the assembler temporary.\n+   The trampoline code looks like:\n+\tmovhi\tr12,%hi(chain)\n+\tori\tr12,%lo(chain)\n+\tmovhi\tr2,%hi(fn)\n+\tori\tr2,%lo(fn)\n+\tjmp\tr2\n+*/\n+\n+#define SC_REGNO 12\n+\n+#define MOVHI(reg,imm16) \\\n+  (((reg) << 22) | ((imm16) << 6) | 0x34)\n+#define ORI(reg,imm16) \\\n+  (((reg) << 27) | ((reg) << 22) | ((imm16) << 6) | 0x14)\n+#define JMP(reg) \\\n+  (((reg) << 27) | (0x0d << 11) | 0x3a)\n+\n+void\n+__trampoline_setup (unsigned int *addr, void *fnptr, void *chainptr)\n+{\n+  unsigned int fn = (unsigned int) fnptr;\n+  unsigned int chain = (unsigned int) chainptr;\n+  int i;\n+\n+  addr[0] = MOVHI (SC_REGNO, ((chain >> 16) & 0xffff));\n+  addr[1] = ORI (SC_REGNO, (chain & 0xffff));\n+  addr[2] = MOVHI (2, ((fn >> 16) & 0xffff));\n+  addr[3] = ORI (2, (fn & 0xffff));\n+  addr[4] = JMP (2);\n+\n+  /* Flush the caches.\n+     See Example 9-4 in the Nios II Software Developer's Handbook.  */\n+  for (i = 0; i < 5; i++)\n+    asm volatile (\"flushd 0(%0); flushi %0\" :: \"r\"(addr + i) : \"memory\");\n+  asm volatile (\"flushp\" ::: \"memory\");\n+}"}]}