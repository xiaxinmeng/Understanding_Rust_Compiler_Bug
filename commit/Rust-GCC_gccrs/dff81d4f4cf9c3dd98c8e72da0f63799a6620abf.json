{"sha": "dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmODFkNGY0Y2Y5YzNkZDk4YzhlNzJkYTBmNjM3OTlhNjYyMGFiZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-04-17T21:41:47Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-04-17T21:41:47Z"}, "message": "re PR libgcj/27171 (UTF8 PrintWriter goes haywire)\n\n\tPR libgcj/27171:\n\t* testsuite/libjava.lang/pr27171.java: New file.\n\t* testsuite/libjava.lang/pr27171.out: New file.\n\t* gnu/gcj/convert/Output_UTF8.java (havePendingBytes): Return\n\ttrue if we've seen a high surrogate.\n\t(write): Handle high surrogates at the end of the stream.\n\tProperly emit isolated low surrogates.\n\nFrom-SVN: r113013", "tree": {"sha": "5f0e83a1d9485d115be3948513876390201dac34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f0e83a1d9485d115be3948513876390201dac34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/comments", "author": null, "committer": null, "parents": [{"sha": "e26303c2f718f8b5dec468efdf49e0d50e31e813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26303c2f718f8b5dec468efdf49e0d50e31e813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26303c2f718f8b5dec468efdf49e0d50e31e813"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "8437c1a1697572cc40b4a4530f7baf3eb4af5a6e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "patch": "@@ -1,3 +1,13 @@\n+2006-04-17  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/27171:\n+\t* testsuite/libjava.lang/pr27171.java: New file.\n+\t* testsuite/libjava.lang/pr27171.out: New file.\n+\t* gnu/gcj/convert/Output_UTF8.java (havePendingBytes): Return\n+\ttrue if we've seen a high surrogate.\n+\t(write): Handle high surrogates at the end of the stream.\n+\tProperly emit isolated low surrogates.\n+\n 2006-04-17  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libjava.lang/stringconst2.java: Print a stack trace in case"}, {"sha": "e550a7f0ab6e3ae9597fc4df4fbe7f33d5fb0528", "filename": "libjava/gnu/gcj/convert/Output_UTF8.java", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java?ref=dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999, 2000, 2003  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2003, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -36,7 +36,7 @@ public int write (char[] inbuffer, int inpos, int inlength)\n     int avail = buf.length - count;\n     for (;;)\n       {\n-\tif (avail == 0 || (inlength == 0 && bytes_todo == 0))\n+\tif (avail == 0 || (inlength == 0 && bytes_todo == 0 && hi_part == 0))\n \t  break;\n \t// The algorithm is made more complicated because we want to write\n \t// at least one byte in the output buffer, if there is room for\n@@ -61,17 +61,25 @@ public int write (char[] inbuffer, int inpos, int inlength)\n \t    continue;\n \t  }\n \n+\t// Handle a high surrogate at the end of the input stream.\n+\tif (inlength == 0 && hi_part != 0)\n+\t  {\n+\t    buf[count++] = (byte) (0xE0 | (hi_part >> 12));\n+\t    value = hi_part;\n+\t    hi_part = 0;\n+\t    avail--;\n+\t    bytes_todo = 2;\n+\t    continue;\n+\t  }\n+\n \tchar ch = inbuffer[inpos++];\n \tinlength--;\n \n-\tif ((hi_part != 0 && (ch <= 0xDBFF || ch > 0xDFFF))\n-\t    || (hi_part == 0 && ch >= 0xDC00 && ch <= 0xDFFF))\n+\tif (hi_part != 0 && (ch <= 0xDBFF || ch > 0xDFFF))\n \t  {\n \t    // If the previous character was a high surrogate, and we\n \t    // don't now have a low surrogate, we print the high\n-\t    // surrogate as an isolated character.  If this character\n-\t    // is a low surrogate and we didn't previously see a high\n-\t    // surrogate, we do the same thing.\n+\t    // surrogate as an isolated character.\n \t    --inpos;\n \t    ++inlength;\n \t    buf[count++] = (byte) (0xE0 | (hi_part >> 12));\n@@ -80,6 +88,16 @@ public int write (char[] inbuffer, int inpos, int inlength)\n \t    avail--;\n \t    bytes_todo = 2;\n \t  }\n+\telse if (hi_part == 0 && ch >= 0xDC00 && ch <= 0xDFFF)\n+\t  {\n+\t    // If this character is a low surrogate and we didn't\n+\t    // previously see a high surrogate, we do the same thing\n+\t    // as above.\n+\t    buf[count++] = (byte) (0xE0 | (ch >> 12));\n+\t    value = ch;\n+\t    avail--;\n+\t    bytes_todo = 2;\n+\t  }\n \telse if (ch < 128 && (ch != 0 || standardUTF8))\n \t  {\n \t    avail--;\n@@ -122,7 +140,7 @@ else if (ch >= 0xD800 && ch <= 0xDFFF && standardUTF8)\n \n   public boolean havePendingBytes()\n   {\n-    return bytes_todo > 0;\n+    return bytes_todo > 0 || hi_part != 0;\n   }\n \n }"}, {"sha": "a07fea7364789336c8f26673f1d84a30db84c273", "filename": "libjava/testsuite/libjava.lang/pr27171.java", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.java?ref=dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "patch": "@@ -0,0 +1,19 @@\n+public class pr27171 {\n+\n+\tpublic static void main(String[] args) throws Throwable {\n+\t  // Isolated low surrogate.\n+\t  char x = 56478;  // 0xdc9e\n+\t  String xs = new String(new char[] { x });\n+\t  // Note that we fix a result for our implementation; but\n+\t  // the JDK does something else.\n+\t  System.out.println(xs.getBytes(\"UTF-8\").length);\n+\n+\t  // isolated high surrogate -- at end of input stream\n+\t  char y = 0xdaee;\n+\t  String ys = new String(new char[] { y });\n+\t  // Note that we fix a result for our implementation; but\n+\t  // the JDK does something else.\n+\t  System.out.println(ys.getBytes(\"UTF-8\").length);\n+\t}\n+}\n+"}, {"sha": "a5c8806279fa7d6b7d04418a47e21b7e89ab18f8", "filename": "libjava/testsuite/libjava.lang/pr27171.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dff81d4f4cf9c3dd98c8e72da0f63799a6620abf/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fpr27171.out?ref=dff81d4f4cf9c3dd98c8e72da0f63799a6620abf", "patch": "@@ -0,0 +1,2 @@\n+3\n+3"}]}