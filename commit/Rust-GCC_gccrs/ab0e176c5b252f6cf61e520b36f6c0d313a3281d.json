{"sha": "ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwZTE3NmM1YjI1MmY2Y2Y2MWU1MjBiMzZmNmMwZDMxM2EzMjgxZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-11T13:40:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-11T13:40:14Z"}, "message": "builtins.def (BUILT_IN_VA_ARG_PACK_LEN): New builtin.\n\n\t* builtins.def (BUILT_IN_VA_ARG_PACK_LEN): New builtin.\n\t* builtins.c (expand_builtin) <case BUILT_IN_VA_ARG_PACK_LEN>: Issue\n\terror if __builtin_va_arg_pack_len () wasn't optimized out during\n\tinlining.\n\t* tree-inline.c (copy_bb): Replace __builtin_va_arg_pack_len ()\n\twith the number of inline's anonymous arguments.\n\t* doc/extend.texi: Document __builtin_va_arg_pack_len ().\n\n\t* gcc.dg/va-arg-pack-len-1.c: New test.\n\t* g++.dg/va-arg-pack-len-1.C: New test.\n\nFrom-SVN: r128376", "tree": {"sha": "79484e03a465253f9b84c8b8966f361bbe454ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79484e03a465253f9b84c8b8966f361bbe454ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6ebd07f479b258643f61e4b49dc954b336142d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ebd07f479b258643f61e4b49dc954b336142d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ebd07f479b258643f61e4b49dc954b336142d5"}], "stats": {"total": 324, "additions": 324, "deletions": 0}, "files": [{"sha": "3e45698a6246247672f12a8a35cb03445e62ffb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -1,3 +1,13 @@\n+2007-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.def (BUILT_IN_VA_ARG_PACK_LEN): New builtin.\n+\t* builtins.c (expand_builtin) <case BUILT_IN_VA_ARG_PACK_LEN>: Issue\n+\terror if __builtin_va_arg_pack_len () wasn't optimized out during\n+\tinlining.\n+\t* tree-inline.c (copy_bb): Replace __builtin_va_arg_pack_len ()\n+\twith the number of inline's anonymous arguments.\n+\t* doc/extend.texi: Document __builtin_va_arg_pack_len ().\n+\n 2007-09-11  Zdenek Dvorak  <ook@ucw.cz>\n \n \t* fold-const.c (extract_muldiv_1): Do not simplify"}, {"sha": "50d4b6211e118910f3f522b9443257567cd187f0", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -6276,6 +6276,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       error (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n       return const0_rtx;\n \n+    case BUILT_IN_VA_ARG_PACK_LEN:\n+      /* All valid uses of __builtin_va_arg_pack_len () are removed during\n+\t inlining.  */\n+      error (\"invalid use of %<__builtin_va_arg_pack_len ()%>\");\n+      return const0_rtx;\n+\n       /* Return the address of the first anonymous stack arg.  */\n     case BUILT_IN_NEXT_ARG:\n       if (fold_builtin_next_arg (exp, false))"}, {"sha": "b8b739b6bc556d0448f44febcb7993569a134ee7", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -702,6 +702,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_VA_COPY, \"va_copy\", BT_FN_VOID_VALIST_REF_VALIS\n DEF_GCC_BUILTIN        (BUILT_IN_VA_END, \"va_end\", BT_FN_VOID_VALIST_REF, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_VA_START, \"va_start\", BT_FN_VOID_VALIST_REF_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_VA_ARG_PACK, \"va_arg_pack\", BT_FN_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_VA_ARG_PACK_LEN, \"va_arg_pack_len\", BT_FN_INT, ATTR_PURE_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN__EXIT, \"_exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN__EXIT2, \"_Exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n "}, {"sha": "633913bb88d00d741954ecfc806b67f32b01fab3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -583,6 +583,41 @@ myprintf (FILE *f, const char *format, ...)\n @end smallexample\n @end deftypefn\n \n+@deftypefn {Built-in Function} __builtin_va_arg_pack_len ()\n+This built-in function returns the number of anonymous arguments of\n+an inline function.  It can be used only in inline functions which\n+will be always inlined, never compiled as a separate function, such\n+as those using @code{__attribute__ ((__always_inline__))} or\n+@code{__attribute__ ((__gnu_inline__))} extern inline functions.\n+For example following will do link or runtime checking of open\n+arguments for optimized code:\n+@smallexample\n+#ifdef __OPTIMIZE__\n+extern inline __attribute__((__gnu_inline__)) int\n+myopen (const char *path, int oflag, ...)\n+@{\n+  if (__builtin_va_arg_pack_len () > 1)\n+    warn_open_too_many_arguments ();\n+\n+  if (__builtin_constant_p (oflag))\n+    @{\n+      if ((oflag & O_CREAT) != 0 && __builtin_va_arg_pack_len () < 1)\n+        @{\n+          warn_open_missing_mode ();\n+          return __open_2 (path, oflag);\n+        @}\n+      return open (path, oflag, __builtin_va_arg_pack ());\n+    @}\n+    \n+  if (__builtin_va_arg_pack_len () < 1)\n+    return __open_2 (path, oflag);\n+\n+  return open (path, oflag, __builtin_va_arg_pack ());\n+@}\n+#endif\n+@end smallexample\n+@end deftypefn\n+\n @node Typeof\n @section Referring to a Type with @code{typeof}\n @findex typeof"}, {"sha": "953e6aab619b059672ac4fe7f519dcba7b18b1f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -1,3 +1,8 @@\n+2007-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/va-arg-pack-len-1.c: New test.\n+\t* g++.dg/va-arg-pack-len-1.C: New test.\n+\n 2007-09-11  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/tree-ssa/loadpre11.c: Add -fno-tree-cselim to flags."}, {"sha": "36104cf840b36460cc48232ef88c40578afb8ad3", "filename": "gcc/testsuite/g++.dg/ext/va-arg-pack-len-1.C", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg-pack-len-1.C?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -0,0 +1,120 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+extern \"C\" int warn_open_missing_mode (void);\n+extern \"C\" int warn_open_too_many_arguments (void);\n+extern \"C\" void abort (void);\n+\n+char expected_char;\n+\n+__attribute__((noinline)) int\n+myopen2 (const char *path, int oflag)\n+{\n+  if (expected_char++ != path[0] || path[1] != '\\0')\n+    abort ();\n+  switch (path[0])\n+    {\n+    case 'f':\n+      if (oflag != 0x2)\n+\tabort ();\n+      break;\n+    case 'g':\n+      if (oflag != 0x43)\n+\tabort ();\n+      // In real __open_2 this would terminate the program:\n+      // open with O_CREAT without third argument.\n+      return -6;\n+    default:\n+      abort ();\n+    }\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+myopenva (const char *path, int oflag, ...)\n+{\n+  int mode = 0;\n+  va_list ap;\n+  if ((oflag & 0x40) != 0)\n+    {\n+      va_start (ap, oflag);\n+      mode = va_arg (ap, int);\n+      va_end (ap);\n+    }\n+  if (expected_char++ != path[0] || path[1] != '\\0')\n+    abort ();\n+  switch (path[0])\n+    {\n+    case 'a':\n+      if (oflag != 0x43 || mode != 0644)\n+\tabort ();\n+      break;\n+    case 'b':\n+      if (oflag != 0x3)\n+\tabort ();\n+      break;\n+    case 'c':\n+      if (oflag != 0x2)\n+\tabort ();\n+      break;\n+    case 'd':\n+      if (oflag != 0x43 || mode != 0600)\n+\tabort ();\n+      break;\n+    case 'e':\n+      if (oflag != 0x3)\n+\tabort ();\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return 0;\n+}\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+myopen (const char *path, int oflag, ...)\n+{\n+  if (__builtin_va_arg_pack_len () > 1)\n+    warn_open_too_many_arguments ();\n+\n+  if (__builtin_constant_p (oflag))\n+    {\n+      if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n+\t{\n+\t  warn_open_missing_mode ();\n+\t  return myopen2 (path, oflag);\n+\t}\n+      return myopenva (path, oflag, __builtin_va_arg_pack ());\n+    }\n+\n+  if (__builtin_va_arg_pack_len () < 1)\n+    return myopen2 (path, oflag);\n+\n+  return myopenva (path, oflag, __builtin_va_arg_pack ());\n+}\n+\n+volatile int l0;\n+\n+int\n+main (void)\n+{\n+  expected_char = 'a';\n+  if (myopen (\"a\", 0x43, 0644))\n+    abort ();\n+  if (myopen (\"b\", 0x3, 0755))\n+    abort ();\n+  if (myopen (\"c\", 0x2))\n+    abort ();\n+  if (myopen (\"d\", l0 + 0x43, 0600))\n+    abort ();\n+  if (myopen (\"e\", l0 + 0x3, 0700))\n+    abort ();\n+  if (myopen (\"f\", l0 + 0x2))\n+    abort ();\n+  // Invalid use of myopen, but only detectable at runtime.\n+  if (myopen (\"g\", l0 + 0x43) != -6)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7df638006882741fb04413b3fbe599a12e9a1e39", "filename": "gcc/testsuite/gcc.dg/va-arg-pack-len-1.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-len-1.c?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -0,0 +1,120 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+\n+extern int warn_open_missing_mode (void);\n+extern int warn_open_too_many_arguments (void);\n+extern void abort (void);\n+\n+char expected_char;\n+\n+__attribute__((noinline)) int\n+myopen2 (const char *path, int oflag)\n+{\n+  if (expected_char++ != path[0] || path[1] != '\\0')\n+    abort ();\n+  switch (path[0])\n+    {\n+    case 'f':\n+      if (oflag != 0x2)\n+\tabort ();\n+      break;\n+    case 'g':\n+      if (oflag != 0x43)\n+\tabort ();\n+      /* In real __open_2 this would terminate the program:\n+\t open with O_CREAT without third argument.  */\n+      return -6;\n+    default:\n+      abort ();\n+    }\n+  return 0;\n+}\n+\n+__attribute__((noinline)) int\n+myopenva (const char *path, int oflag, ...)\n+{\n+  int mode = 0;\n+  va_list ap;\n+  if ((oflag & 0x40) != 0)\n+    {\n+      va_start (ap, oflag);\n+      mode = va_arg (ap, int);\n+      va_end (ap);\n+    }\n+  if (expected_char++ != path[0] || path[1] != '\\0')\n+    abort ();\n+  switch (path[0])\n+    {\n+    case 'a':\n+      if (oflag != 0x43 || mode != 0644)\n+\tabort ();\n+      break;\n+    case 'b':\n+      if (oflag != 0x3)\n+\tabort ();\n+      break;\n+    case 'c':\n+      if (oflag != 0x2)\n+\tabort ();\n+      break;\n+    case 'd':\n+      if (oflag != 0x43 || mode != 0600)\n+\tabort ();\n+      break;\n+    case 'e':\n+      if (oflag != 0x3)\n+\tabort ();\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return 0;\n+}\n+\n+extern inline __attribute__((always_inline, gnu_inline)) int\n+myopen (const char *path, int oflag, ...)\n+{\n+  if (__builtin_va_arg_pack_len () > 1)\n+    warn_open_too_many_arguments ();\n+\n+  if (__builtin_constant_p (oflag))\n+    {\n+      if ((oflag & 0x40) != 0 && __builtin_va_arg_pack_len () < 1)\n+\t{\n+\t  warn_open_missing_mode ();\n+\t  return myopen2 (path, oflag);\n+\t}\n+      return myopenva (path, oflag, __builtin_va_arg_pack ());\n+    }\n+\n+  if (__builtin_va_arg_pack_len () < 1)\n+    return myopen2 (path, oflag);\n+\n+  return myopenva (path, oflag, __builtin_va_arg_pack ());\n+}\n+\n+volatile int l0;\n+\n+int\n+main (void)\n+{\n+  expected_char = 'a';\n+  if (myopen (\"a\", 0x43, 0644))\n+    abort ();\n+  if (myopen (\"b\", 0x3, 0755))\n+    abort ();\n+  if (myopen (\"c\", 0x2))\n+    abort ();\n+  if (myopen (\"d\", l0 + 0x43, 0600))\n+    abort ();\n+  if (myopen (\"e\", l0 + 0x3, 0700))\n+    abort ();\n+  if (myopen (\"f\", l0 + 0x2))\n+    abort ();\n+  /* Invalid use of myopen, but only detectable at runtime.  */\n+  if (myopen (\"g\", l0 + 0x43) != -6)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d50b2c754efd37b07facda7e0e1bf5d74a65b659", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0e176c5b252f6cf61e520b36f6c0d313a3281d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ab0e176c5b252f6cf61e520b36f6c0d313a3281d", "patch": "@@ -867,6 +867,33 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n \t\t  stmt = *stmtp;\n \t\t  update_stmt (stmt);\n \t\t}\n+\t      else if (call\n+\t\t       && id->call_expr\n+\t\t       && (decl = get_callee_fndecl (call))\n+\t\t       && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+\t\t       && DECL_FUNCTION_CODE (decl)\n+\t\t\t  == BUILT_IN_VA_ARG_PACK_LEN)\n+\t\t{\n+\t\t  /* __builtin_va_arg_pack_len () should be replaced by\n+\t\t     the number of anonymous arguments.  */\n+\t\t  int nargs = call_expr_nargs (id->call_expr);\n+\t\t  tree count, *call_ptr, p;\n+\n+\t\t  for (p = DECL_ARGUMENTS (id->src_fn); p; p = TREE_CHAIN (p))\n+\t\t    nargs--;\n+\n+\t\t  count = build_int_cst (integer_type_node, nargs);\n+\t\t  call_ptr = stmtp;\n+\t\t  if (TREE_CODE (*call_ptr) == GIMPLE_MODIFY_STMT)\n+\t\t    call_ptr = &GIMPLE_STMT_OPERAND (*call_ptr, 1);\n+\t\t  if (TREE_CODE (*call_ptr) == WITH_SIZE_EXPR)\n+\t\t    call_ptr = &TREE_OPERAND (*call_ptr, 0);\n+\t\t  gcc_assert (*call_ptr == call && call_ptr != stmtp);\n+\t\t  *call_ptr = count;\n+\t\t  stmt = *stmtp;\n+\t\t  update_stmt (stmt);\n+\t\t  call = NULL_TREE;\n+\t\t}\n \n \t      /* Statements produced by inlining can be unfolded, especially\n \t\t when we constant propagated some operands.  We can't fold"}]}