{"sha": "6318fe77395fc0dd59419bc4d69cd06ac0158e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxOGZlNzczOTVmYzBkZDU5NDE5YmM0ZDY5Y2QwNmFjMDE1OGU1NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-29T19:36:35Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-30T12:34:40Z"}, "message": "tree: Don't reuse types if TYPE_USER_ALIGN differ [PR94775]\n\nHere we trip on the TYPE_USER_ALIGN (t) assert in strip_typedefs: it\ngets \"const d[0]\" with TYPE_USER_ALIGN=0 but the result built by\nbuild_cplus_array_type is \"const char[0]\" with TYPE_USER_ALIGN=1.\n\nWhen we strip_typedefs the element of the array \"const d\", we see it's\na typedef_variant_p, so we look at its DECL_ORIGINAL_TYPE, which is\nchar, but we need to add the const qualifier, so we call\ncp_build_qualified_type -> build_qualified_type\nwhere get_qualified_type checks to see if we already have such a type\nby walking the variants list, which in this case is:\n\n  char -> c -> const char -> const char -> d -> const d\n\nBecause check_base_type only checks TYPE_ALIGN and not TYPE_USER_ALIGN,\nwe choose the first const char, which has TYPE_USER_ALIGN set.  If the\nelement type of an array has TYPE_USER_ALIGN, the array type gets it too.\n\nSo we can make check_base_type stricter.  I was afraid that it might make\nus reuse types less often, but measuring showed that we build the same\namount of types with and without the patch, while bootstrapping.\n\n\tPR c++/94775\n\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n\t(check_aligned_type): Check if TYPE_USER_ALIGN match.\n\n\t* g++.dg/warn/Warray-bounds-10.C: New test.", "tree": {"sha": "82957bc288e4f51774a1e62f8d862e33626d74ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82957bc288e4f51774a1e62f8d862e33626d74ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6318fe77395fc0dd59419bc4d69cd06ac0158e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6318fe77395fc0dd59419bc4d69cd06ac0158e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6318fe77395fc0dd59419bc4d69cd06ac0158e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6318fe77395fc0dd59419bc4d69cd06ac0158e54/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4b68527988f42c10c0d6c10e812d299887e0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4b68527988f42c10c0d6c10e812d299887e0c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4b68527988f42c10c0d6c10e812d299887e0c2"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "f83e7ac13defc856df58253c855a1aeae0ccc0e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6318fe77395fc0dd59419bc4d69cd06ac0158e54", "patch": "@@ -1,3 +1,9 @@\n+2020-04-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94775\n+\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n+\t(check_aligned_type): Check if TYPE_USER_ALIGN match.\n+\n 2020-04-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.h (TARGET_OUTLINE_ATOMICS): Define."}, {"sha": "49f00426e06b192c0c62d832d9261d7fd63b5f8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6318fe77395fc0dd59419bc4d69cd06ac0158e54", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94775\n+\t* g++.dg/warn/Warray-bounds-10.C: New test.\n+\n 2020-04-30  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94748"}, {"sha": "0a18f637e0e510e65916ede189cf426e452f0658", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-10.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C?ref=6318fe77395fc0dd59419bc4d69cd06ac0158e54", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/94775\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+template <typename> using a = int;\n+template <bool, typename, typename> using b = int;\n+typedef char d;\n+template <long> using e = int;\n+template <int f, int q> struct h { using i = b<q, a<e<f>>, e<f>>; };\n+template <long f, bool g> using j = typename h<f, g>::i;\n+long ab, k, aj;\n+const d l[]{};\n+class m {\n+public:\n+  m(int);\n+};\n+class n {\n+  void ad() const;\n+  template <class ae> void o(long) const {\n+    using c __attribute__((aligned(1))) = const ae;\n+  }\n+  long p;\n+  template <class, class>\n+  auto s(unsigned long, unsigned long, unsigned long, unsigned long) const;\n+  template <bool = false> auto q(unsigned long, unsigned long) const;\n+};\n+template <class, class>\n+auto n::s(unsigned long, unsigned long, unsigned long, unsigned long t) const {\n+  o<d>(p);\n+  return t;\n+}\n+template <bool g> auto n::q(unsigned long p1, unsigned long p2) const {\n+  using r = j<4, false>;\n+  using ai = j<4, g>;\n+  return s<ai, r>(ab, k, p1, p2);\n+}\n+void n::ad() const {\n+  long f(l[aj]); // { dg-warning \"outside array bounds\" }\n+  m(q(8, f));\n+}"}, {"sha": "341766c51e55b5c242879cd23af53850fddf5380", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6318fe77395fc0dd59419bc4d69cd06ac0158e54/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6318fe77395fc0dd59419bc4d69cd06ac0158e54", "patch": "@@ -6493,7 +6493,8 @@ check_base_type (const_tree cand, const_tree base)\n \t\t\t        TYPE_ATTRIBUTES (base)))\n     return false;\n   /* Check alignment.  */\n-  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base))\n+  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base)\n+      && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base))\n     return true;\n   /* Atomic types increase minimal alignment.  We must to do so as well\n      or we get duplicated canonical types. See PR88686.  */\n@@ -6528,6 +6529,7 @@ check_aligned_type (const_tree cand, const_tree base, unsigned int align)\n \t  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)\n \t  /* Check alignment.  */\n \t  && TYPE_ALIGN (cand) == align\n+\t  && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base)\n \t  && attribute_list_equal (TYPE_ATTRIBUTES (cand),\n \t\t\t\t   TYPE_ATTRIBUTES (base))\n \t  && check_lang_type (cand, base));"}]}