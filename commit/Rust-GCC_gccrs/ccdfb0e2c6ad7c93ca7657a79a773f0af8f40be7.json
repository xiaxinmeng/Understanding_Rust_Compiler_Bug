{"sha": "ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkZmIwZTJjNmFkN2M5M2NhNzY1N2E3OWE3NzNmMGFmOGY0MGJlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-12-10T20:43:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-10T20:43:03Z"}, "message": "Force the creation of a CONST_VECTOR for expand_vec_perm.\n\n        * expr.c (expand_expr_real_2) [VEC_PERM_EXPR]: Avoid passing a\n        CONST_INT to expand_vec_perm as the selector.\n        * optabs.c (expand_vec_perm): Assert the selector is of a proper mode.\n\nFrom-SVN: r182192", "tree": {"sha": "64952c5ea5b975ebfc52549bce82d112fa6ee2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64952c5ea5b975ebfc52549bce82d112fa6ee2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/comments", "author": null, "committer": null, "parents": [{"sha": "a7de2c2a71940a25408c1320498c1c1ca2472313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7de2c2a71940a25408c1320498c1c1ca2472313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7de2c2a71940a25408c1320498c1c1ca2472313"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "885f535b671d902e15128f0e6341f6f98d6f22ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "patch": "@@ -1,3 +1,9 @@\n+2011-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr_real_2) [VEC_PERM_EXPR]: Avoid passing a\n+\tCONST_INT to expand_vec_perm as the selector.\n+\t* optabs.c (expand_vec_perm): Assert the selector is of a proper mode.\n+\n 2011-12-10  Richard Henderson  <rth@redhat.com>\n \n \t* genmodes.c (struct mode_data): Remove wider_2x member."}, {"sha": "aa78468a96be92b854327e28bea6063600696a70", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "patch": "@@ -8716,6 +8716,23 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n     case VEC_PERM_EXPR:\n       expand_operands (treeop0, treeop1, target, &op0, &op1, EXPAND_NORMAL);\n       op2 = expand_normal (treeop2);\n+\n+      /* Careful here: if the target doesn't support integral vector modes,\n+\t a constant selection vector could wind up smooshed into a normal\n+\t integral constant.  */\n+      if (CONSTANT_P (op2) && GET_CODE (op2) != CONST_VECTOR)\n+\t{\n+\t  tree sel_type = TREE_TYPE (treeop2);\n+\t  enum machine_mode vmode\n+\t    = mode_for_vector (TYPE_MODE (TREE_TYPE (sel_type)),\n+\t\t\t       TYPE_VECTOR_SUBPARTS (sel_type));\n+\t  gcc_assert (GET_MODE_CLASS (vmode) == MODE_VECTOR_INT);\n+\t  op2 = simplify_subreg (vmode, op2, TYPE_MODE (sel_type), 0);\n+\t  gcc_assert (op2 && GET_CODE (op2) == CONST_VECTOR);\n+\t}\n+      else\n+        gcc_assert (GET_MODE_CLASS (GET_MODE (op2)) == MODE_VECTOR_INT);\n+\n       temp = expand_vec_perm (mode, op0, op1, op2, target);\n       gcc_assert (temp);\n       return temp;"}, {"sha": "2c3a6405ab9c36b2460559dec47a5e10aaf05772", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "patch": "@@ -7038,7 +7038,8 @@ expand_vec_perm (enum machine_mode mode, rtx v0, rtx v1, rtx sel, rtx target)\n     }\n \n   /* If the input is a constant, expand it specially.  */\n-  if (CONSTANT_P (sel))\n+  gcc_assert (GET_MODE_CLASS (GET_MODE (sel)) == MODE_VECTOR_INT);\n+  if (GET_CODE (sel) == CONST_VECTOR)\n     {\n       icode = direct_optab_handler (vec_perm_const_optab, mode);\n       if (icode != CODE_FOR_nothing)\n@@ -7056,7 +7057,7 @@ expand_vec_perm (enum machine_mode mode, rtx v0, rtx v1, rtx sel, rtx target)\n \t    {\n \t      unsigned int j, this_e;\n \n-\t      this_e = INTVAL (XVECEXP (sel, 0, i));\n+\t      this_e = INTVAL (CONST_VECTOR_ELT (sel, i));\n \t      this_e &= 2 * e - 1;\n \t      this_e *= u;\n "}]}