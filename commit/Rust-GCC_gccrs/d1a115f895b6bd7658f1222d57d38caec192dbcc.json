{"sha": "d1a115f895b6bd7658f1222d57d38caec192dbcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhMTE1Zjg5NWI2YmQ3NjU4ZjEyMjJkNTdkMzhjYWVjMTkyZGJjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-15T20:11:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-15T20:11:00Z"}, "message": "class.c (add_implicitly_declared_members): Implicit assignment operators can also be virtual overriders.\n\n\t* class.c (add_implicitly_declared_members): Implicit assignment\n\toperators can also be virtual overriders.\n\t* method.c (lazily_declare_fn): Likewise.\n\nFrom-SVN: r160810", "tree": {"sha": "784dfd74b5289fd564a132ffa75080dffd7552ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/784dfd74b5289fd564a132ffa75080dffd7552ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a115f895b6bd7658f1222d57d38caec192dbcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a115f895b6bd7658f1222d57d38caec192dbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a115f895b6bd7658f1222d57d38caec192dbcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a115f895b6bd7658f1222d57d38caec192dbcc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0842c29f7b4560244ff3038f90896c745a0bb77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0842c29f7b4560244ff3038f90896c745a0bb77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0842c29f7b4560244ff3038f90896c745a0bb77d"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "34593ad46f5e7275b95ec5c1c2424ec91befd4e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1a115f895b6bd7658f1222d57d38caec192dbcc", "patch": "@@ -1,5 +1,9 @@\n 2010-06-15  Jason Merrill  <jason@redhat.com>\n \n+\t* class.c (add_implicitly_declared_members): Implicit assignment\n+\toperators can also be virtual overriders.\n+\t* method.c (lazily_declare_fn): Likewise.\n+\n \t* call.c (convert_like_real): Give \"initializing argument of\"\n \tinformation for ambiguous conversion.  Give source position\n \tof function."}, {"sha": "60908ffb5d5522f349773ee4f169216dd3fd937c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d1a115f895b6bd7658f1222d57d38caec192dbcc", "patch": "@@ -2618,47 +2618,13 @@ add_implicitly_declared_members (tree t,\n     {\n       /* In general, we create destructors lazily.  */\n       CLASSTYPE_LAZY_DESTRUCTOR (t) = 1;\n-      /* However, if the implicit destructor is non-trivial\n-\t destructor, we sometimes have to create it at this point.  */\n-      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n-\t{\n-\t  bool lazy_p = true;\n-\n-\t  if (TYPE_FOR_JAVA (t))\n-\t    /* If this a Java class, any non-trivial destructor is\n-\t       invalid, even if compiler-generated.  Therefore, if the\n-\t       destructor is non-trivial we create it now.  */\n-\t    lazy_p = false;\n-\t  else\n-\t    {\n-\t      tree binfo;\n-\t      tree base_binfo;\n-\t      int ix;\n-\n-\t      /* If the implicit destructor will be virtual, then we must\n-\t\t generate it now because (unfortunately) we do not\n-\t\t generate virtual tables lazily.  */\n-\t      binfo = TYPE_BINFO (t);\n-\t      for (ix = 0; BINFO_BASE_ITERATE (binfo, ix, base_binfo); ix++)\n-\t\t{\n-\t\t  tree base_type;\n-\t\t  tree dtor;\n-\n-\t\t  base_type = BINFO_TYPE (base_binfo);\n-\t\t  dtor = CLASSTYPE_DESTRUCTORS (base_type);\n-\t\t  if (dtor && DECL_VIRTUAL_P (dtor))\n-\t\t    {\n-\t\t      lazy_p = false;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n \n-\t  /* If we can't get away with being lazy, generate the destructor\n-\t     now.  */\n-\t  if (!lazy_p)\n-\t    lazily_declare_fn (sfk_destructor, t);\n-\t}\n+      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n+\t  && TYPE_FOR_JAVA (t))\n+\t/* But if this is a Java class, any non-trivial destructor is\n+\t   invalid, even if compiler-generated.  Therefore, if the\n+\t   destructor is non-trivial we create it now.  */\n+\tlazily_declare_fn (sfk_destructor, t);\n     }\n \n   /* [class.ctor]\n@@ -2697,6 +2663,34 @@ add_implicitly_declared_members (tree t,\n       TYPE_HAS_CONST_ASSIGN_REF (t) = !cant_have_const_assignment;\n       CLASSTYPE_LAZY_ASSIGNMENT_OP (t) = 1;\n     }\n+\n+  /* We can't be lazy about declaring functions that might override\n+     a virtual function from a base class.  */\n+  if (TYPE_POLYMORPHIC_P (t)\n+      && (CLASSTYPE_LAZY_ASSIGNMENT_OP (t)\n+\t  || CLASSTYPE_LAZY_DESTRUCTOR (t)))\n+    {\n+      tree binfo = TYPE_BINFO (t);\n+      tree base_binfo;\n+      int ix;\n+      tree opname = ansi_assopname (NOP_EXPR);\n+      for (ix = 0; BINFO_BASE_ITERATE (binfo, ix, base_binfo); ++ix)\n+\t{\n+\t  tree bv;\n+\t  for (bv = BINFO_VIRTUALS (base_binfo); bv; bv = TREE_CHAIN (bv))\n+\t    {\n+\t      tree fn = BV_FN (bv);\n+\t      if (DECL_NAME (fn) == opname)\n+\t\t{\n+\t\t  if (CLASSTYPE_LAZY_ASSIGNMENT_OP (t))\n+\t\t    lazily_declare_fn (sfk_assignment_operator, t);\n+\t\t}\n+\t      else if (DECL_DESTRUCTOR_P (fn)\n+\t\t       && CLASSTYPE_LAZY_DESTRUCTOR (t))\n+\t\tlazily_declare_fn (sfk_destructor, t);\n+\t    }\n+\t}\n+    }\n }\n \n /* Subroutine of finish_struct_1.  Recursively count the number of fields"}, {"sha": "97f3566cd6b6d6893c0d61f69ef37a00efdeff43", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=d1a115f895b6bd7658f1222d57d38caec192dbcc", "patch": "@@ -1108,7 +1108,8 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n   /* Declare the function.  */\n   fn = implicitly_declare_fn (sfk, type, const_p);\n   /* A destructor may be virtual.  */\n-  if (sfk == sfk_destructor)\n+  if (sfk == sfk_destructor\n+      || sfk == sfk_assignment_operator)\n     check_for_override (fn, type);\n   /* Add it to CLASSTYPE_METHOD_VEC.  */\n   add_method (type, fn, NULL_TREE);"}, {"sha": "369f3b5a1df726bcfc7c3e37132128a83c7818b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1a115f895b6bd7658f1222d57d38caec192dbcc", "patch": "@@ -1,5 +1,7 @@\n 2010-06-15  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/inherit/virtual5.C: New.\n+\n \t* g++.dg/cpp0x/defaulted18.C: New.\n \n \t* g++.dg/cpp0x/initlist40.C: New."}, {"sha": "bed0ef3a07b67b0e4add41d7a6154cc90a379792", "filename": "gcc/testsuite/g++.dg/inherit/virtual5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a115f895b6bd7658f1222d57d38caec192dbcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual5.C?ref=d1a115f895b6bd7658f1222d57d38caec192dbcc", "patch": "@@ -0,0 +1,29 @@\n+// Test that a synthesized op= can override one from a base.\n+// { dg-do run }\n+\n+struct B;\n+\n+struct A\n+{\n+  virtual B& operator=(const B&);\n+};\n+\n+struct B: A\n+{\n+  B(int i): i(i) { }\n+  int i;\n+  // implicitly-declared op=\n+};\n+\n+B& A::operator=(const B& b) { return static_cast<B&>(*this); }\n+\n+int main()\n+{\n+  B b1 (123);\n+  B b2 (0);\n+\n+  A& ar = b1;\n+  ar = b2;\n+\n+  return b1.i;\n+}"}]}