{"sha": "3c1fd79ba934a549aa176c21322794975313fa88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxZmQ3OWJhOTM0YTU0OWFhMTc2YzIxMzIyNzk0OTc1MzEzZmE4OA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-09-19T21:44:30Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-09-19T21:44:30Z"}, "message": "thanks.html: More thanks.\n\n2000-09-19  Phil Edwards  <pme@sources.redhat.com>\n\n\t* docs/thanks.html:  More thanks.\n\t* docs/18_support/howto.html:  Fix thinko.\n\t* docs/21_strings/howto.html:  Minor tweaks and updates to URLs.\n\t  Redo the string transformation notes and link to...\n\t* docs/22_locale/howto.html:  ...here.\n\nFrom-SVN: r36546", "tree": {"sha": "cdf51e0ed813b71eda9ea7f814c5b9e3a13f7bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdf51e0ed813b71eda9ea7f814c5b9e3a13f7bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1fd79ba934a549aa176c21322794975313fa88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1fd79ba934a549aa176c21322794975313fa88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1fd79ba934a549aa176c21322794975313fa88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1fd79ba934a549aa176c21322794975313fa88/comments", "author": null, "committer": null, "parents": [{"sha": "7eea5554ce33c1031a635d538695de0de1e5d97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eea5554ce33c1031a635d538695de0de1e5d97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eea5554ce33c1031a635d538695de0de1e5d97b"}], "stats": {"total": 225, "additions": 187, "deletions": 38}, "files": [{"sha": "4ddca7d81dc03f07338a949411c66ba2aac5e820", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c1fd79ba934a549aa176c21322794975313fa88", "patch": "@@ -1,3 +1,11 @@\n+2000-09-19  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/thanks.html:  More thanks.\n+\t* docs/18_support/howto.html:  Fix thinko.\n+\t* docs/21_strings/howto.html:  Minor tweaks and updates to URLs.\n+\t  Redo the string transformation notes and link to...\n+\t* docs/22_locale/howto.html:  ...here.\n+\n 2000-09-18  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* src/locale-inst.cc: Add time_put_byname and"}, {"sha": "1b79cb734f85a19617d2d71c521aea2fde080ebe", "filename": "libstdc++-v3/docs/18_support/howto.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F18_support%2Fhowto.html?ref=3c1fd79ba934a549aa176c21322794975313fa88", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 18</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/docs/18_support/\">\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2000/07/11 21:45:07 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.4 2000/07/19 20:20:51 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -228,7 +228,7 @@ <H2><A NAME=\"4\">Dynamic memory management</A></H2>\n \n    void my_new_handler ()\n    {\n-       delete safety;\n+       delete[] safety;\n        popup_window (\"Dude, you are running low on heap memory.  You\n                       should, like, close some windows, or something.\n                       The next time you run out, we're gonna burn!\");\n@@ -262,7 +262,7 @@ <H2><A NAME=\"4\">Dynamic memory management</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.3 2000/07/11 21:45:07 pme Exp $\n+<BR> $Id: howto.html,v 1.4 2000/07/19 20:20:51 pme Exp $\n </EM></P>\n \n "}, {"sha": "1875447cc9c313ed700f8314e2e23a96dc1ca6ce", "filename": "libstdc++-v3/docs/21_strings/howto.html", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F21_strings%2Fhowto.html?ref=3c1fd79ba934a549aa176c21322794975313fa88", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 21</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/docs/21_strings/\">\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2000/07/07 21:13:28 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.3 2000/07/11 21:45:07 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -42,7 +42,7 @@ <H2><A NAME=\"1\">MFC's CString</A></H2>\n       are relying on special functons offered by the CString class.\n    </P>\n    <P>Things are not as bad as they seem.  In\n-      <A HREF=\"http://egcs.cygnus.com/ml/egcs/1999-04/msg00233.html\">this\n+      <A HREF=\"http://gcc.gnu.org/ml/egcs/1999-04/msg00233.html\">this\n       message</A>, Joe Buck points out a few very important things:\n       <UL>\n          <LI>The Standard <TT>string</TT> supports all the operations\n@@ -66,7 +66,7 @@ <H2><A NAME=\"1\">MFC's CString</A></H2>\n    #include &lt;string&gt;\n    #include &lt;sstream&gt;\n \n-   string f (string& incoming)     // incoming is something like \"foo  N\"\n+   string f (string&amp; incoming)     // incoming is \"foo  N\"\n    {\n        istringstream   incoming_stream(incoming);\n        string          the_word;\n@@ -88,7 +88,7 @@ <H2><A NAME=\"1\">MFC's CString</A></H2>\n    CString suffers from a common programming error that results in\n    poor performance.  Consider the following code:\n    \n-   CString n_copies_of (const CString& foo, unsigned n)\n+   CString n_copies_of (const CString&amp; foo, unsigned n)\n    {\n            CString tmp;\n            for (unsigned i = 0; i &lt; n; i++)\n@@ -158,8 +158,10 @@ <H2><A NAME=\"2\">A case-insensitive string class</A></H2>\n    </P>\n \n    <P>The solution is surprisingly easy.  The original answer pages\n-      on the GotW website have been removed into cold storage, in\n-      preparation for a published book of GotW notes.  Before being\n+      on the GotW website were removed into cold storage, in\n+      preparation for\n+      <A HREF=\"http://cseng.aw.com/bookpage.taf?ISBN=0-201-61562-2\">a\n+      published book of GotW notes</A>.  Before being\n       put on the web, of course, it was posted on Usenet, and that\n       posting containing the answer is <A HREF=\"gotw29a.txt\">available\n       here</A>.\n@@ -170,14 +172,19 @@ <H2><A NAME=\"2\">A case-insensitive string class</A></H2>\n       on why case-insensitive comparisons are not as easy as they seem,\n       and why creating a class is the <EM>wrong</EM> way to go about it in\n       production code.  (The GotW answer mentions one of the principle\n-      difficulties; this article mentions more.)\n+      difficulties; his article mentions more.)\n    </P>\n    <P>Basically, this is &quot;easy&quot; only if you ignore some things,\n       things which may be too important to your program to ignore.  (I chose\n       to ignore them when originally writing this entry, and am surprised\n       that nobody ever called me on it...)  The GotW question and answer\n       remain useful instructional tools, however.\n    </P>\n+   <P><B>Added September 2000:</B>  James Kanze provided a link to a\n+      <A HREF=\"http://www.unicode.org/unicode/reports/tr21/\">Unicode\n+      Technical Report discussing case handling</A>, which provides some\n+      very good information.\n+   </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n@@ -204,9 +211,9 @@ <H2><A NAME=\"3\">Breaking a C++ string into tokens</A></H2>\n       a more general (but less readable) form of it for parsing command\n       strings and the like.  If you compiled and ran this code using it:\n       <PRE>\n-   std::list&lt;string>  ls;\n+   std::list&lt;string&gt;  ls;\n    stringtok (ls, \" this  \\t is\\t\\n  a test  \");\n-   for (std::list&lt;string>::const_iterator i = ls.begin();\n+   for (std::list&lt;string&gt;const_iterator i = ls.begin();\n         i != ls.end(); ++i)\n    {\n        std::cerr &lt;&lt; ':' &lt;&lt; (*i) &lt;&lt; \":\\n\";\n@@ -226,8 +233,9 @@ <H2><A NAME=\"3\">Breaking a C++ string into tokens</A></H2>\n       <A HREF=\"stringtok_std_h.txt\">Another version of stringtok is given\n       here</A>, suggested by Chris King and tweaked by Petr Prikryl,\n       and this one uses the\n-      transformation functions given below.  If you are comfortable with\n-      reading the new function names, this version is recommended as an example.\n+      transformation functions mentioned below.  If you are comfortable\n+      with reading the new function names, this version is recommended\n+      as an example.\n    </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n@@ -240,30 +248,45 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n       to all upper case.&quot;  The word transformations is especially\n       apt, because the standard template function\n       <TT>transform&lt;&gt;</TT> is used.\n+   </P>\n+   <P>This code will go through some iterations (no pun).  Here's the\n+      simplistic version usually seen on Usenet:\n       <PRE>\n-      #include &lt;string&gt;\n-      #include &lt;algorithm&gt;\n-      #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n-      std::string  s (\"Some Kind Of Initial Input Goes Here\");\n-   \n-      // Change everything into upper case\n-      std::transform (s.begin(), s.end(), s.begin(), toupper);\n-   \n-      // Change everything into lower case\n-      std::transform (s.begin(), s.end(), s.begin(), tolower);\n-   \n-      // Change everything back into upper case, but store the\n-      // result in a different string\n-      std::string  capital_s;\n-      capital_s.reserve(s.size());\n-      std::transform (s.begin(), s.end(), capital_s.begin(), tolower); </PRE>\n+   #include &lt;string&gt;\n+   #include &lt;algorithm&gt;\n+   #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n+\n+   std::string  s (\"Some Kind Of Initial Input Goes Here\");\n+\n+   // Change everything into upper case\n+   std::transform (s.begin(), s.end(), s.begin(), toupper);\n+\n+   // Change everything into lower case\n+   std::transform (s.begin(), s.end(), s.begin(), tolower);\n+\n+   // Change everything back into upper case, but store the\n+   // result in a different string\n+   std::string  capital_s;\n+   capital_s.reserve(s.size());\n+   std::transform (s.begin(), s.end(), capital_s.begin(), tolower); </PRE>\n       <SPAN CLASS=\"larger\"><B>Note</B></SPAN> that these calls all involve\n       the global C locale through the use of the C functions\n       <TT>toupper/tolower</TT>.  This is absolutely guaranteed to work --\n-      but only if you're using English text (bummer).  A much better and\n-      more portable solution is to use a facet for a particular locale\n-      and call its conversion functions.  (These are discussed more in\n-      Chapter 22.)\n+      but <EM>only</EM> if the string contains <EM>only</EM> characters\n+      from the basic source character set, and there are <EM>only</EM>\n+      96 of those.  Which means that not even all English text can be\n+      represented (certain British spellings, proper names, and so forth).\n+      So, if all your input forevermore consists of only those 96\n+      characters (hahahahahaha), then you're done.\n+   </P>\n+   <P>At minimum, you can write \n+   </P>\n+   <P>The correct method is to use a facet for a particular locale\n+      and call its conversion functions.  These are discussed more in\n+      Chapter 22; the specific part is\n+      <A HREF=\"../22_locale/howto.html#5\">here</A>, which shows the\n+      final version of this code.  (Thanks to James Kanze for assistance\n+      and suggestions on all of this.)\n    </P>\n    <P>Another common operation is trimming off excess whitespace.  Much\n       like transformations, this task is trivial with the use of string's\n@@ -297,7 +320,7 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.2 2000/07/07 21:13:28 pme Exp $\n+<BR> $Id: howto.html,v 1.3 2000/07/11 21:45:07 pme Exp $\n </EM></P>\n \n "}, {"sha": "2a438ed6657464e4ae5f54adcb9786a314ce3646", "filename": "libstdc++-v3/docs/22_locale/howto.html", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2F22_locale%2Fhowto.html?ref=3c1fd79ba934a549aa176c21322794975313fa88", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/docs/22_locale/\">\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2000/08/25 08:52:56 bkoz Exp $ -->\n+<!-- $Id: howto.html,v 1.4 2000/08/31 01:17:53 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -27,6 +27,7 @@ <H1>Contents</H1>\n    <LI><A HREF=\"#2\">Nathan Myers on Locales</A>   \n    <LI><A HREF=\"#3\">codecvt</A>\n    <LI><A HREF=\"#4\">ctype</A>\n+   <LI><A HREF=\"#5\">Correct Transformations</A>\n </UL>\n \n <HR>\n@@ -41,6 +42,14 @@ <H2><A NAME=\"1\">Stroustrup on Locales</A></H2>\n       Programming Language (3rd Edition)</A>.  It is a detailed\n       description of locales and how to use them.\n    </P>\n+   <P>He also writes:\n+      <BLOCKQUOTE><EM>\n+      Please note that I still consider this detailed description of\n+      locales beyond the needs of most C++ programmers. It is written\n+      with experienced programmers in mind and novices will do best to\n+      avoid it.\n+      </EM></BLOCKQUOTE>\n+   </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n@@ -92,6 +101,114 @@ <H2><A NAME=\"4\">ctype</A></H2>\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n \n+<HR>\n+<H2><A NAME=\"5\">Correct Transformations</A></H2>\n+   <!-- Jumping directly here from chapter 21. -->\n+   <P>A very common question on newsgroups and mailing lists is, &quot;How\n+      do I do &lt;foo&gt; to a character string?\" where &lt;foo&gt; is\n+      a task such as changing all the letters to uppercase, to lowercase,\n+      testing for digits, etc.  A skilled and conscientious programmer\n+      will follow the question with another, &quot;And how do I make the\n+      code portable?&quot;\n+   </P>\n+   <P>(Poor innocent programmer, you have no idea the depths of trouble\n+      you are getting yourself into.  'Twould be best for your sanity if\n+      you dropped the whole idea and took up basket weaving instead.  No?\n+      Fine, you asked for it...)\n+   </P>\n+   <P>The task of changing the case of a letter or classifying a character\n+      as numeric, graphical, etc, all depends on the cultural context of the\n+      program at runtime.  So, first you must take the portability question\n+      into account.  Once you have localized the program to a particular\n+      natural language, only then can you perform the specific task.\n+      Unfortunately, specializing a function for a human language is not\n+      as simple as declaring\n+      <TT> extern &quot;Danish&quot; int tolower (int); </TT>.\n+   </P>\n+   <P>The C++ code to do all this proceeds in the same way.  First, a locale\n+      is created.  Then member functions of that locale are called to\n+      perform minor tasks.  Continuing the example from Chapter 21, we wish\n+      to use the following convenience functions:\n+   <PRE>\n+   namespace std {\n+     template &lt;class charT&gt;\n+       charT\n+       toupper (charT c, const locale&amp; loc) const;\n+     template &lt;class charT&gt;\n+       charT\n+       tolower (charT c, const locale&amp; loc) const;\n+   }</PRE>\n+      This function extracts the appropriate &quot;facet&quot; from the\n+      locale <EM>loc</EM> and calls the appropriate member function of that\n+      facet, passing <EM>c</EM> as its argument.  The resulting character\n+      is returned.\n+   </P>\n+   <P>For the C/POSIX locale, the results are the same as calling the\n+      classic C <TT>toupper/tolower</TT> function that was used in previous\n+      examples.  For other locales, the code should Do The Right Thing.\n+   </P>\n+   <P>Of course, these functions take a second argument, and the\n+      transformation algorithm's operator argument can only take a single\n+      parameter.  So we write simple wrapper structs to handle that.\n+   </P>\n+   <P>The next-to-final version of the code started in Chapter 21 looks like:\n+      <PRE>\n+   #include &lt;iterator&gt;    // for back_inserter\n+   #include &lt;locale&gt;\n+   #include &lt;string&gt;\n+   #include &lt;algorithm&gt;\n+   #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n+\n+   struct Toupper\n+   {\n+       Toupper (std::locale const&amp; l) : loc(l) {;}\n+       char operator() (char c)  { return std::toupper(c,loc); }\n+   private:\n+       std::locale const&amp; loc;\n+   };\n+   \n+   struct Tolower\n+   {\n+       Tolower (std::locale const&amp; l) : loc(l) {;}\n+       char operator() (char c)  { return std::tolower(c,loc); }\n+   private:\n+       std::locale const&amp; loc;\n+   };\n+   \n+   int main ()\n+   {\n+      std::string  s (\"Some Kind Of Initial Input Goes Here\");\n+      Toupper      up ( std::locale(\"C\") );\n+      Tolower      down ( std::locale(\"C\") );\n+   \n+      // Change everything into upper case\n+      std::transform (s.begin(), s.end(), s.begin(),\n+                      up\n+                     );\n+   \n+      // Change everything into lower case\n+      std::transform (s.begin(), s.end(), s.begin(),\n+                      down\n+                     );\n+   \n+      // Change everything back into upper case, but store the\n+      // result in a different string\n+      std::string  capital_s;\n+      std::transform (s.begin(), s.end(), std::back_inserter(capital_s),\n+                      up\n+                     );\n+   }</PRE>\n+   </P>\n+   <P>The final version of the code uses <TT>bind2nd</TT> to eliminate\n+      the wrapper structs, but the resulting code is tricky.  I have not\n+      shown it here because no compilers currently available to me will\n+      handle it.\n+   </P>\n+   <P>Return <A HREF=\"#top\">to top of page</A> or\n+      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n+   </P>\n+\n+\n \n \n <!-- ####################################################### -->\n@@ -101,7 +218,7 @@ <H2><A NAME=\"4\">ctype</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.3 2000/08/25 08:52:56 bkoz Exp $\n+<BR> $Id: howto.html,v 1.4 2000/08/31 01:17:53 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "54d4fcadb874fac789632ec48ade86300b4c0a1c", "filename": "libstdc++-v3/docs/thanks.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2Fthanks.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1fd79ba934a549aa176c21322794975313fa88/libstdc%2B%2B-v3%2Fdocs%2Fthanks.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fthanks.html?ref=3c1fd79ba934a549aa176c21322794975313fa88", "patch": "@@ -92,12 +92,13 @@ <H3 CLASS=\"centered\">Contributors</H3>\n \n <P>We'd also like to thank the folks who have contributed time and\n    energy in testing libstdc++-v3, especially those sending in testsuite\n-   evaluations:\n+   evaluations and documentation corrections:\n \n <UL>\n \n   <LI>Levente Farkas \n   <LI>J&uuml;rgen Freyh\n+  <LI>James Kanze\n   <LI>llewelly <!-- Honest, that's the only name in the messages. -->\n   <LI>Loren James Rittle\n   <LI>George Talbot"}]}