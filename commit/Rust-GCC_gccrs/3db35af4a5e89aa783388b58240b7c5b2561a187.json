{"sha": "3db35af4a5e89aa783388b58240b7c5b2561a187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiMzVhZjRhNWU4OWFhNzgzMzg4YjU4MjQwYjdjNWIyNTYxYTE4Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-08-03T00:17:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-08-03T00:17:11Z"}, "message": "dce.c: Remove all uses of assert.\n\n\t* dce.c: Remove all uses of assert.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* ssa.c: Likewise.\n\nFrom-SVN: r35438", "tree": {"sha": "736903c43f30ba905e45449a7537cee8badf4917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/736903c43f30ba905e45449a7537cee8badf4917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db35af4a5e89aa783388b58240b7c5b2561a187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db35af4a5e89aa783388b58240b7c5b2561a187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db35af4a5e89aa783388b58240b7c5b2561a187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db35af4a5e89aa783388b58240b7c5b2561a187/comments", "author": null, "committer": null, "parents": [{"sha": "e457ca6a318a8411b2634430cb8ecd209ecf883f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e457ca6a318a8411b2634430cb8ecd209ecf883f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e457ca6a318a8411b2634430cb8ecd209ecf883f"}], "stats": {"total": 71, "additions": 27, "deletions": 44}, "files": [{"sha": "9d27b95bf95a8327a276914fda831ae52a2a50e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3db35af4a5e89aa783388b58240b7c5b2561a187", "patch": "@@ -1,3 +1,10 @@\n+2000-08-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* dce.c: Remove all uses of assert.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* ssa.c: Likewise.\n+\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.h (lang_specific_driver): Constify second argument."}, {"sha": "ddd2cd0c145c05e4465625f696d9f6603e4ba6b4", "filename": "gcc/dce.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=3db35af4a5e89aa783388b58240b7c5b2561a187", "patch": "@@ -77,14 +77,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"recog.h\"\n #include \"output.h\"\n \n-/* We cannot use <assert.h> in GCC source, since that would include\n-   GCC's assert.h, which may not be compatible with the host compiler.  */\n-#undef assert\n-#ifdef NDEBUG\n-# define assert(e)\n-#else\n-# define assert(e) do { if (! (e)) abort (); } while (0)\n-#endif\n \f\n /* A map from blocks to the edges on which they are control dependent.  */\n typedef struct {\n@@ -186,7 +178,9 @@ set_control_dependent_block_to_edge_map_bit (c, bb, edge_index)\n      basic_block bb;\n      int edge_index;\n {\n-  assert(bb->index - (INVALID_BLOCK+1) < c->length);\n+  if (bb->index - (INVALID_BLOCK+1) >= c->length)\n+    abort ();\n+\n   bitmap_set_bit (c->data[bb->index - (INVALID_BLOCK+1)],\n \t\t  edge_index);\n }\n@@ -246,7 +240,8 @@ find_control_dependence (el, edge_index, pdom, cdbte)\n   basic_block current_block;\n   basic_block ending_block;\n \n-  assert (INDEX_EDGE_PRED_BB (el, edge_index) != EXIT_BLOCK_PTR);\n+  if (INDEX_EDGE_PRED_BB (el, edge_index) == EXIT_BLOCK_PTR)\n+    abort ();\n   ending_block = \n     (INDEX_EDGE_PRED_BB (el, edge_index) == ENTRY_BLOCK_PTR) \n     ? BASIC_BLOCK (0) \n@@ -271,8 +266,11 @@ find_pdom (pdom, block)\n      int *pdom;\n      basic_block block;\n {\n-  assert (block != NULL);\n-  assert (block->index != INVALID_BLOCK);\n+  if (!block)\n+    abort ();\n+  if (block->index == INVALID_BLOCK)\n+    abort ();\n+\n   if (block == ENTRY_BLOCK_PTR)\n     return BASIC_BLOCK (0);\n   else if (block == EXIT_BLOCK_PTR || pdom[block->index] == EXIT_BLOCK)\n@@ -456,9 +454,11 @@ delete_insn_bb (insn)\n      rtx insn;\n {\n   basic_block bb;\n-  assert (insn != NULL_RTX);\n+  if (!insn)\n+    abort ();\n   bb = BLOCK_FOR_INSN (insn);\n-  assert (bb != 0);\n+  if (!bb)\n+    abort ();\n   if (bb->head == bb->end)\n     {\n       /* Delete the insn by converting it to a note.  */\n@@ -612,7 +612,8 @@ eliminate_dead_code ()\n   /* Release allocated memory.  */\n   for (insn = get_insns (); insn != NULL_RTX; insn = NEXT_INSN (insn))\n     RESURRECT_INSN (insn);\n-  assert (VARRAY_ACTIVE_SIZE(unprocessed_instructions) == 0);\n+  if (VARRAY_ACTIVE_SIZE (unprocessed_instructions) != 0)\n+    abort ();\n   VARRAY_FREE (unprocessed_instructions);\n   control_dependent_block_to_edge_map_free (cdbte);\n   free ((PTR) pdom);"}, {"sha": "ed78012127aa505802f5d7144c714a0a2797bd0c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3db35af4a5e89aa783388b58240b7c5b2561a187", "patch": "@@ -58,15 +58,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n \n-/* We cannot use <assert.h> in GCC source, since that would include\n-   GCC's assert.h, which may not be compatible with the host compiler.  */\n-#undef assert\n-#ifdef NDEBUG\n-# define assert(e)\n-#else\n-# define assert(e) do { if (! (e)) abort (); } while (0)\n-#endif\n-\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n \n@@ -1123,7 +1114,8 @@ dwarf2out_stack_adjust (insn)\n \tinsn = XVECEXP (insn, 0, 0);\n       if (GET_CODE (insn) == SET)\n \tinsn = SET_SRC (insn);\n-      assert (GET_CODE (insn) == CALL);\n+      if (GET_CODE (insn) != CALL)\n+\tabort ();\n       dwarf2out_args_size (\"\", INTVAL (XEXP (insn, 1)));\n       return;\n     }"}, {"sha": "9e3d5c6639ccf61cebeebf19a989e3b3386082e0", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3db35af4a5e89aa783388b58240b7c5b2561a187", "patch": "@@ -37,15 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"tm_p.h\"\n \n-/* We cannot use <assert.h> in GCC source, since that would include\n-   GCC's assert.h, which may not be compatible with the host compiler.  */\n-#undef assert\n-#ifdef NDEBUG\n-# define assert(e)\n-#else\n-# define assert(e) do { if (! (e)) abort (); } while (0)\n-#endif\n-\n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n "}, {"sha": "ec9cc48f35332700b1598bd9b051f0765902614a", "filename": "gcc/ssa.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db35af4a5e89aa783388b58240b7c5b2561a187/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=3db35af4a5e89aa783388b58240b7c5b2561a187", "patch": "@@ -48,15 +48,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"ssa.h\"\n \n-/* We cannot use <assert.h> in GCC source, since that would include\n-   GCC's assert.h, which may not be compatible with the host compiler.  */\n-#undef assert\n-#ifdef NDEBUG\n-# define assert(e)\n-#else\n-# define assert(e) do { if (! (e)) abort (); } while (0)\n-#endif\n-\n /* TODO: \n \n    Handle subregs better, maybe.  For now, if a reg that's set in a\n@@ -1069,7 +1060,8 @@ rename_block (bb, idom)\n \t  reg = SET_DEST (phi);\n \t  if (REGNO (reg) >= ssa_max_reg_num)\n \t    reg = ssa_rename_from_lookup (REGNO (reg));\n-\t  assert (reg != NULL_RTX);\n+\t  if (reg == NULL_RTX)\n+\t    abort ();\n \t  reg = ssa_rename_to_lookup (reg);\n \n \t  /* It is possible for the variable to be uninitialized on"}]}