{"sha": "c456a94a49c9497da22209bb479c63487bb93c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1NmE5NGE0OWM5NDk3ZGEyMjIwOWJiNDc5YzYzNDg3YmI5M2M3Yw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-07-06T08:13:13Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-07-06T08:13:13Z"}, "message": "re PR tree-optimization/21963 (ICE (seg fault) with -m64 (in IV-OPTS))\n\n\tPR tree-optimization/21963\n\t* tree-ssa-loop-ivopts.c (get_computation_aff): Use\n\tconstant_multiple_of in the same way get_computation_cost_at does.\n\nFrom-SVN: r101654", "tree": {"sha": "04592b2f7cfbe276bd8ac4b72b20646f3a01753d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04592b2f7cfbe276bd8ac4b72b20646f3a01753d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c456a94a49c9497da22209bb479c63487bb93c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c456a94a49c9497da22209bb479c63487bb93c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c456a94a49c9497da22209bb479c63487bb93c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c456a94a49c9497da22209bb479c63487bb93c7c/comments", "author": null, "committer": null, "parents": [{"sha": "8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec11fe9b8b04468e81549ca68d5e70912b8f6dc"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "a85f3d1fc7e162bd364957d77c36c46c3a6d1bf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c456a94a49c9497da22209bb479c63487bb93c7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c456a94a49c9497da22209bb479c63487bb93c7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c456a94a49c9497da22209bb479c63487bb93c7c", "patch": "@@ -1,3 +1,9 @@\n+2005-07-06  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/21963\n+\t* tree-ssa-loop-ivopts.c (get_computation_aff): Use\n+\tconstant_multiple_of in the same way get_computation_cost_at does.\n+\n 2005-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.h (sparc_compare_emitted): New extern."}, {"sha": "8e6b8c168d41cf64bdb23ae75b928de32116e2fa", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c456a94a49c9497da22209bb479c63487bb93c7c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c456a94a49c9497da22209bb479c63487bb93c7c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=c456a94a49c9497da22209bb479c63487bb93c7c", "patch": "@@ -2983,6 +2983,7 @@ get_computation_aff (struct loop *loop,\n   unsigned HOST_WIDE_INT ustepi, cstepi;\n   HOST_WIDE_INT ratioi;\n   struct affine_tree_combination cbase_aff, expr_aff;\n+  tree cstep_orig = cstep, ustep_orig = ustep;\n \n   if (TYPE_PRECISION (utype) > TYPE_PRECISION (ctype))\n     {\n@@ -3012,13 +3013,18 @@ get_computation_aff (struct loop *loop,\n       expr = fold_convert (uutype, expr);\n       cbase = fold_convert (uutype, cbase);\n       cstep = fold_convert (uutype, cstep);\n+\n+      /* If the conversion is not noop, we must take it into account when\n+\t considering the value of the step.  */\n+      if (TYPE_PRECISION (utype) < TYPE_PRECISION (ctype))\n+\tcstep_orig = cstep;\n     }\n \n-  if (cst_and_fits_in_hwi (cstep)\n-      && cst_and_fits_in_hwi (ustep))\n+  if (cst_and_fits_in_hwi (cstep_orig)\n+      && cst_and_fits_in_hwi (ustep_orig))\n     {\n-      ustepi = int_cst_value (ustep);\n-      cstepi = int_cst_value (cstep);\n+      ustepi = int_cst_value (ustep_orig);\n+      cstepi = int_cst_value (cstep_orig);\n \n       if (!divide (TYPE_PRECISION (uutype), ustepi, cstepi, &ratioi))\n \t{\n@@ -3032,7 +3038,7 @@ get_computation_aff (struct loop *loop,\n     }\n   else\n     {\n-      ratio = constant_multiple_of (uutype, ustep, cstep);\n+      ratio = constant_multiple_of (uutype, ustep_orig, cstep_orig);\n       if (!ratio)\n \treturn false;\n "}]}