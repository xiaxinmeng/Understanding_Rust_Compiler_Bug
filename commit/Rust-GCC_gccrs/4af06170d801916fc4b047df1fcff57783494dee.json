{"sha": "4af06170d801916fc4b047df1fcff57783494dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmMDYxNzBkODAxOTE2ZmM0YjA0N2RmMWZjZmY1Nzc4MzQ5NGRlZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-12T10:16:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-12T10:16:47Z"}, "message": "config.gcc (m68k-*-linux*): Add m68k/ieee.opt to $extra_options.\n\n\t* config.gcc (m68k-*-linux*): Add m68k/ieee.opt to $extra_options.\n\t* config/m68k/m68k.h (target_flags, MASK_68020, TARGET_68020)\n\t(MASK_68030, TARGET_68030, MASK_68040, TARGET_68040, MASK_68040_ONLY)\n\t(TARGET_68040_ONLY, MASK_68060, TARGET_68060, MASK_5200, TARGET_5200)\n\t(MASK_CFV3, TARGET_CFV3, MASK_CFV4, TARGET_CFV4, MASK_528x)\n\t(TARGET_528x, MASK_CF_HWDIV, TARGET_CF_HWDIV, MASK_68881, TARGET_68881)\n\t(MASK_BITFIELD, TARGET_BITFIELD, MASK_SHORT, TARGET_SHORT)\n\t(MASK_ALIGN_INT, TARGET_ALIGN_INT, MASK_PCREL, TARGET_PCREL)\n\t(MASK_NO_STRICT_ALIGNMENT, TARGET_STRICT_ALIGNMENT, MASK_RTD)\n\t(TARGET_RTD, MASK_SEP_DATA, TARGET_SEP_DATA, MASK_ID_SHARED_LIBRARY)\n\t(TARGET_ID_SHARED_LIBRARY, MASK_ALL_CF_BITS, TARGET_SWITCHES)\n\t(TARGET_OPTIONS, SUBTARGET_SWITCHES, SUBTARGET_OPTIONS): Delete.\n\t(MASK_COLDFIRE): Formatting fixes.\n\t(TARGET_COLDFIRE): Turn into a boolean value for consistency.\n\t* config/m68k/linux.h (SUBTARGET_SWITCHES): Delete.\n\t* config/m68k/m68k.c (m68k_library_id_string): Initialize to\n\t\"_current_shared_library_a5_offset_\".\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(MASK_ALL_CPU_BITS): New macro.\n\t(m68k_handle_option): New function.\n\t(override_options): Remove handling of m68k_library_id_string.\n\t* config/m68k/m68k.opt: New file.\n\t* config/m68k/ieee.opt: New file.\n\nFrom-SVN: r98017", "tree": {"sha": "38befd127c08df1f94acd2925385c6c7801e1bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38befd127c08df1f94acd2925385c6c7801e1bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af06170d801916fc4b047df1fcff57783494dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af06170d801916fc4b047df1fcff57783494dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af06170d801916fc4b047df1fcff57783494dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af06170d801916fc4b047df1fcff57783494dee/comments", "author": null, "committer": null, "parents": [{"sha": "0b026622a596131ad87116a8f3bf720bd8cc8698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b026622a596131ad87116a8f3bf720bd8cc8698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b026622a596131ad87116a8f3bf720bd8cc8698"}], "stats": {"total": 563, "additions": 311, "deletions": 252}, "files": [{"sha": "b75e04a718d1048c04a7e6b6f58dca3df4132b6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -1,3 +1,29 @@\n+2005-04-12  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (m68k-*-linux*): Add m68k/ieee.opt to $extra_options.\n+\t* config/m68k/m68k.h (target_flags, MASK_68020, TARGET_68020)\n+\t(MASK_68030, TARGET_68030, MASK_68040, TARGET_68040, MASK_68040_ONLY)\n+\t(TARGET_68040_ONLY, MASK_68060, TARGET_68060, MASK_5200, TARGET_5200)\n+\t(MASK_CFV3, TARGET_CFV3, MASK_CFV4, TARGET_CFV4, MASK_528x)\n+\t(TARGET_528x, MASK_CF_HWDIV, TARGET_CF_HWDIV, MASK_68881, TARGET_68881)\n+\t(MASK_BITFIELD, TARGET_BITFIELD, MASK_SHORT, TARGET_SHORT)\n+\t(MASK_ALIGN_INT, TARGET_ALIGN_INT, MASK_PCREL, TARGET_PCREL)\n+\t(MASK_NO_STRICT_ALIGNMENT, TARGET_STRICT_ALIGNMENT, MASK_RTD)\n+\t(TARGET_RTD, MASK_SEP_DATA, TARGET_SEP_DATA, MASK_ID_SHARED_LIBRARY)\n+\t(TARGET_ID_SHARED_LIBRARY, MASK_ALL_CF_BITS, TARGET_SWITCHES)\n+\t(TARGET_OPTIONS, SUBTARGET_SWITCHES, SUBTARGET_OPTIONS): Delete.\n+\t(MASK_COLDFIRE): Formatting fixes.\n+\t(TARGET_COLDFIRE): Turn into a boolean value for consistency.\n+\t* config/m68k/linux.h (SUBTARGET_SWITCHES): Delete.\n+\t* config/m68k/m68k.c (m68k_library_id_string): Initialize to\n+\t\"_current_shared_library_a5_offset_\".\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(MASK_ALL_CPU_BITS): New macro.\n+\t(m68k_handle_option): New function.\n+\t(override_options): Remove handling of m68k_library_id_string.\n+\t* config/m68k/m68k.opt: New file.\n+\t* config/m68k/ieee.opt: New file.\n+\n 2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* target-def.h (TARGET_CXX_EXPORT_CLASS_DATA): Remove."}, {"sha": "a1eabc3ad99a5534760e39193107d3277f9524fd", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -1359,6 +1359,7 @@ m68k-*-linux*)\t\t# Motorola m68k's running GNU/Linux\n \t\t\t\t# with ELF format using glibc 2\n \t\t\t\t# aka the GNU/Linux C library 6.\n \ttm_file=\"m68k/m68k.h dbxelf.h elfos.h svr4.h linux.h m68k/linux.h\"\n+\textra_options=\"${extra_options} m68k/ieee.opt\"\n \ttm_defines=\"MOTOROLA USE_GAS\"\n \t# if not configured with --enable-sjlj-exceptions, bump the\n \t# libgcc version number"}, {"sha": "df774fae7a6d9a16e2978e277690830875e1010b", "filename": "gcc/config/m68k/ieee.opt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fieee.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fieee.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fieee.opt?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -0,0 +1,25 @@\n+; Extra IEEE options for the Motorola 68000 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+; This option is ignored by gcc\n+mieee-fp\n+Target RejectNegative\n+Use IEEE math for fp comparisons"}, {"sha": "5c5564cdf2b6eed7a5edf8626706250fa6a2c72c", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -37,10 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #undef STRICT_ALIGNMENT\n #define STRICT_ALIGNMENT 0\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0, \\\n-  N_(\"Use IEEE math for fp comparisons\")},\n-\n /* Here are four prefixes that are used by asm_fprintf to\n    facilitate customization for alternate assembler syntaxes.\n    Machines with no likelihood of an alternate syntax need not"}, {"sha": "c119642dca539f0258804f395e7cbd3662d7979e", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 108, "deletions": 20, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -103,6 +103,7 @@ struct m68k_frame\n /* Current frame information calculated by m68k_compute_frame_layout().  */\n static struct m68k_frame current_frame;\n \n+static bool m68k_handle_option (size_t, const char *, int);\n static rtx find_addr_reg (rtx);\n static const char *singlemove_string (rtx *);\n static void m68k_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -124,7 +125,7 @@ static bool m68k_rtx_costs (rtx, int, int, int *);\n \f\n \n /* Specify the identification number of the library being built */\n-const char *m68k_library_id_string;\n+const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n \n /* Nonzero if the last compare/test insn had FP operands.  The\n    sCC expanders peek at this to determine what to do for the\n@@ -174,6 +175,11 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_ASM_FILE_START_APP_OFF\n #define TARGET_ASM_FILE_START_APP_OFF true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_STRICT_ALIGNMENT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION m68k_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m68k_rtx_costs\n \n@@ -195,6 +201,107 @@ static const struct attribute_spec m68k_attribute_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* These bits are controlled by all CPU selection options.  Many options\n+   also control MASK_68881, but some (notably -m68020) leave it alone.  */\n+\n+#define MASK_ALL_CPU_BITS \\\n+  (MASK_COLDFIRE | MASK_CF_HWDIV | MASK_68060 | MASK_68040 \\\n+   | MASK_68040_ONLY | MASK_68030 | MASK_68020 | MASK_BITFIELD)\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+m68k_handle_option (size_t code, const char *arg, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_m5200:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_5200;\n+      return true;\n+\n+    case OPT_m5206e:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_5200 | MASK_CF_HWDIV;\n+      return true;\n+\n+    case OPT_m528x:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_528x | MASK_CF_HWDIV;\n+      return true;\n+\n+    case OPT_m5307:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_CFV3 | MASK_CF_HWDIV;\n+      return true;\n+\n+    case OPT_m5407:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_CFV4 | MASK_CF_HWDIV;\n+      return true;\n+\n+    case OPT_m68000:\n+    case OPT_mc68000:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      return true;\n+\n+    case OPT_m68020:\n+    case OPT_mc68020:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= MASK_68020 | MASK_BITFIELD;\n+      return true;\n+\n+    case OPT_m68020_40:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= MASK_BITFIELD | MASK_68881 | MASK_68020 | MASK_68040;\n+      return true;\n+\n+    case OPT_m68020_60:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68020\n+\t\t       | MASK_68040 | MASK_68060);\n+      return true;\n+\n+    case OPT_m68030:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= MASK_68020 | MASK_68030 | MASK_BITFIELD;\n+      return true;\n+\n+    case OPT_m68040:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= (MASK_68020 | MASK_68881 | MASK_BITFIELD\n+\t\t       | MASK_68040_ONLY | MASK_68040);\n+      return true;\n+\n+    case OPT_m68060:\n+      target_flags &= ~MASK_ALL_CPU_BITS;\n+      target_flags |= (MASK_68020 | MASK_68881 | MASK_BITFIELD\n+\t\t       | MASK_68040_ONLY | MASK_68060);\n+      return true;\n+\n+    case OPT_m68302:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      return true;\n+\n+    case OPT_m68332:\n+    case OPT_mcpu32:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_68020;\n+      return true;\n+\n+    case OPT_mshared_library_id_:\n+      if (value > MAX_LIBRARY_ID)\n+\terror (\"-mshared-library-id=%s is not between 0 and %d\",\n+\t       arg, MAX_LIBRARY_ID);\n+      else\n+\tasprintf ((char **) &m68k_library_id_string, \"%d\", (value * -4) - 4);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -207,25 +314,6 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n void\n override_options (void)\n {\n-  /* Library identification */\n-  if (m68k_library_id_string)\n-    {\n-      int id;\n-\n-      if (! TARGET_ID_SHARED_LIBRARY)\n-\terror (\"-mshared-library-id= specified without -mid-shared-library\");\n-      id = atoi (m68k_library_id_string);\n-      if (id < 0 || id > MAX_LIBRARY_ID)\n-\terror (\"-mshared-library-id=%d is not between 0 and %d\", id, MAX_LIBRARY_ID);\n-\n-      /* From now on, m68k_library_id_string will contain the library offset.  */\n-      asprintf ((char **)&m68k_library_id_string, \"%d\", (id * -4) - 4);\n-    }\n-  else\n-    /* If TARGET_ID_SHARED_LIBRARY is enabled, this will point to the\n-       current library.  */\n-    m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n-\n   /* Sanity check to ensure that msep-data and mid-sahred-library are not\n    * both specified together.  Doing so simply doesn't make sense.\n    */"}, {"sha": "81f6e6f6276a665811848ddb89d483751a3fc41b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 228, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -113,243 +113,17 @@ Boston, MA 02111-1307, USA.  */\n /* Set the default.  */\n #define INT_OP_GROUP INT_OP_DOT_WORD\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Macros used in the machine description to test the flags.  */\n-\n-/* Compile for a 68020 (not a 68000 or 68010).  */\n-#define MASK_68020\t(1<<0)\n-#define TARGET_68020 (target_flags & MASK_68020)\n-\n-/* Compile for a 68030.  This does not really make a difference in GCC,\n-   it just enables the __mc68030__ predefine.  */\n-#define MASK_68030\t(1<<1)\n-#define TARGET_68030 (target_flags & MASK_68030)\n-\n-/* Optimize for 68040, but still allow execution on 68020\n-   (-m68020-40 or -m68040).\n-   The 68040 will execute all 68030 and 68881/2 instructions, but some\n-   of them must be emulated in software by the OS.  When TARGET_68040 is\n-   turned on, these instructions won't be used.  This code will still\n-   run on a 68030 and 68881/2.  */\n-#define MASK_68040\t(1<<2)\n-#define TARGET_68040 (target_flags & MASK_68040)\n-\n-/* Use the 68040-only fp instructions (-m68040 or -m68060).  */\n-#define MASK_68040_ONLY\t(1<<3)\n-#define TARGET_68040_ONLY (target_flags & MASK_68040_ONLY)\n-\n-/* Optimize for 68060, but still allow execution on 68020\n-   (-m68020-60 or -m68060).\n-   The 68060 will execute all 68030 and 68881/2 instructions, but some\n-   of them must be emulated in software by the OS.  When TARGET_68060 is\n-   turned on, these instructions won't be used.  This code will still\n-   run on a 68030 and 68881/2.  */\n-#define MASK_68060\t(1<<4)\n-#define TARGET_68060 (target_flags & MASK_68060)\n-\n-/* Compile for mcf5200 */\n-#define MASK_5200\t(1<<5)\n-#define TARGET_5200 (target_flags & MASK_5200)\n-\n-/* Build for ColdFire v3 */\n-#define MASK_CFV3\t(1<<6)\n-#define TARGET_CFV3\t(target_flags & MASK_CFV3)\n-\n-/* Build for ColdFire v4 */\n-#define MASK_CFV4\t(1<<7)\n-#define TARGET_CFV4\t(target_flags & MASK_CFV4)\n-\n-/* Compile for ColdFire 528x */\n-#define MASK_528x\t(1<<8)\n-#define TARGET_528x\t(target_flags & MASK_528x)\n-\n-/* Divide support for ColdFire */\n-#define MASK_CF_HWDIV\t(1<<9)\n-#define TARGET_CF_HWDIV\t(target_flags & MASK_CF_HWDIV)\n-\n-/* Compile 68881 insns for floating point (not library calls).  */\n-#define MASK_68881\t(1<<10)\n-#define TARGET_68881\t(target_flags & MASK_68881)\n-\n-/* Compile using 68020 bit-field insns.  */\n-#define MASK_BITFIELD\t(1<<11)\n-#define TARGET_BITFIELD (target_flags & MASK_BITFIELD)\n-\n-/* Compile with 16-bit `int'.  */\n-#define MASK_SHORT\t(1<<12)\n-#define TARGET_SHORT\t(target_flags & MASK_SHORT)\n-\n-/* Align ints to a word boundary.  This breaks compatibility with the\n-   published ABI's for structures containing ints, but produces faster\n-   code on cpus with 32-bit busses (020, 030, 040, 060, CPU32+, ColdFire).\n-   It's required for ColdFire cpus without a misalignment module.  */\n-#define MASK_ALIGN_INT\t(1<<13)\n-#define TARGET_ALIGN_INT (target_flags & MASK_ALIGN_INT)\n-\n-/* Use PC-relative addressing modes (without using a global offset table).\n-   The m68000 supports 16-bit PC-relative addressing.\n-   The m68020 supports 32-bit PC-relative addressing\n-   (using outer displacements).\n-\n-   Under this model, all SYMBOL_REFs (and CONSTs) and LABEL_REFs are\n-   treated as all containing an implicit PC-relative component, and hence\n-   cannot be used directly as addresses for memory writes.  See the comments\n-   in m68k.c for more information.  */\n-#define MASK_PCREL\t(1<<14)\n-#define TARGET_PCREL\t(target_flags & MASK_PCREL)\n-\n-/* Relax strict alignment.  */\n-#define MASK_NO_STRICT_ALIGNMENT (1<<15)\n-#define TARGET_STRICT_ALIGNMENT  (~target_flags & MASK_NO_STRICT_ALIGNMENT)\n-\n-/* Compile using rtd insn calling sequence.\n-   This will not work unless you use prototypes at least\n-   for all functions that can take varying numbers of args.  */\n-#define MASK_RTD\t(1<<16)\n-#define TARGET_RTD\t(target_flags & MASK_RTD)\n-\n-/* Support A5 relative data separate from text.\n- * This option implies -fPIC, however it inhibits the generation of the\n- * A5 save/restore in functions and the loading of a5 with a got pointer.\n- */\n-#define MASK_SEP_DATA\t(1<<17)\n-#define TARGET_SEP_DATA (target_flags & MASK_SEP_DATA)\n-\n-/* Compile using library ID based shared libraries.\n- * Set a specific ID using the -mshared-library-id=xxx option.\n- */\n-#define MASK_ID_SHARED_LIBRARY\t(1<<18)\n-#define TARGET_ID_SHARED_LIBRARY\t(target_flags & MASK_ID_SHARED_LIBRARY)\n-\n /* Compile for a CPU32.  A 68020 without bitfields is a good\n    heuristic for a CPU32.  */\n #define TARGET_CPU32\t(TARGET_68020 && !TARGET_BITFIELD)\n \n /* Is the target a ColdFire?  */\n-#define MASK_COLDFIRE\t(MASK_5200|MASK_528x|MASK_CFV3|MASK_CFV4)\n-#define TARGET_COLDFIRE\t(target_flags & MASK_COLDFIRE)\n-\n-/* Which bits can be set by specifying a ColdFire */\n-#define MASK_ALL_CF_BITS\t(MASK_COLDFIRE|MASK_CF_HWDIV)\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { { \"68020\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n-      N_(\"Generate code for a 68020\") },\t\t\t\t\\\n-    { \"c68020\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n-      N_(\"Generate code for a 68020\") },\t\t\t\t\\\n-    { \"68020\", (MASK_68020|MASK_BITFIELD), \"\" },\t\t\t\\\n-    { \"c68020\", (MASK_68020|MASK_BITFIELD), \"\" },\t\t\t\\\n-    { \"68000\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t|MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\t\\\n-      N_(\"Generate code for a 68000\") },\t\t\t\t\\\n-    { \"c68000\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t|MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\t\\\n-      N_(\"Generate code for a 68000\") },\t\t\t\t\\\n-    { \"bitfield\", MASK_BITFIELD,\t\t\t\t\t\\\n-      N_(\"Use the bit-field instructions\") },\t\t\t\t\\\n-    { \"nobitfield\", - MASK_BITFIELD,\t\t\t\t\t\\\n-      N_(\"Do not use the bit-field instructions\") },\t\t\t\\\n-    { \"short\", MASK_SHORT,\t\t\t\t\t\t\\\n-      N_(\"Consider type 'int' to be 16 bits wide\") },\t\t\t\\\n-    { \"noshort\", - MASK_SHORT,\t\t\t\t\t\t\\\n-      N_(\"Consider type 'int' to be 32 bits wide\") },\t\t\t\\\n-    { \"68881\", MASK_68881, \"\" },\t\t\t\t\t\\\n-    { \"soft-float\", - MASK_68881,\t\t\t\t\t\\\n-      N_(\"Generate code with library calls for floating point\") },\t\\\n-    { \"68020-40\", -(MASK_ALL_CF_BITS|MASK_68060|MASK_68040_ONLY),\t\\\n-      N_(\"Generate code for a 68040, without any new instructions\") },\t\\\n-    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040), \"\"},\\\n-    { \"68020-60\", -(MASK_ALL_CF_BITS|MASK_68040_ONLY),\t\t\t\\\n-      N_(\"Generate code for a 68060, without any new instructions\") },\t\\\n-    { \"68020-60\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040\t\\\n-\t\t   |MASK_68060), \"\" },\t\t\t\t\t\\\n-    { \"68030\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n-      N_(\"Generate code for a 68030\") },\t\t\t\t\\\n-    { \"68030\", (MASK_68020|MASK_68030|MASK_BITFIELD), \"\" },\t\t\\\n-    { \"68040\", - (MASK_ALL_CF_BITS|MASK_68060),\t\t\t\t\\\n-      N_(\"Generate code for a 68040\") },\t\t\t\t\\\n-    { \"68040\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n-\t\t|MASK_68040_ONLY|MASK_68040), \"\" },\t\t\t\\\n-    { \"68060\", - (MASK_ALL_CF_BITS|MASK_68040),\t\t\t\t\\\n-      N_(\"Generate code for a 68060\") },\t\t\t\t\\\n-    { \"68060\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n-\t\t|MASK_68040_ONLY|MASK_68060), \"\" },\t\t\t\\\n-    { \"5200\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 520X\") },\t\t\t\t\t\\\n-    { \"5200\", (MASK_5200), \"\" },\t\t\t\t\t\\\n-    { \"5206e\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 5206e\") },\t\t\t\t\\\n-    { \"5206e\", (MASK_5200|MASK_CF_HWDIV), \"\" },\t\t\t\t\\\n-    { \"528x\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 528x\") },\t\t\t\t\t\\\n-    { \"528x\", (MASK_528x|MASK_CF_HWDIV), \"\" },\t\t\t\t\\\n-    { \"5307\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 5307\") },\t\t\t\t\t\\\n-    { \"5307\", (MASK_CFV3|MASK_CF_HWDIV), \"\" },\t\t\t\t\\\n-    { \"5407\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 5407\") },\t\t\t\t\t\\\n-    { \"5407\", (MASK_CFV4|MASK_CF_HWDIV), \"\" },\t\t\t\t\\\n-    { \"68851\", 0,\t\t\t\t\t\t\t\\\n-      N_(\"Generate code for a 68851\") },\t\t\t\t\\\n-    { \"no-68851\", 0,\t\t\t\t\t\t\t\\\n-      N_(\"Do no generate code for a 68851\") },\t\t\t\t\\\n-    { \"68302\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\\\n-      N_(\"Generate code for a 68302\") },\t\t\t\t\\\n-    { \"68332\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a 68332\") },\t\t\t\t\\\n-    { \"68332\", MASK_68020, \"\" },\t\t\t\t\t\\\n-    { \"cpu32\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n-      N_(\"Generate code for a cpu32\") },\t\t\t\t\\\n-    { \"cpu32\", MASK_68020, \"\" },\t\t\t\t\t\\\n-    { \"align-int\", MASK_ALIGN_INT,\t\t\t\t\t\\\n-      N_(\"Align variables on a 32-bit boundary\") },\t\t\t\\\n-    { \"no-align-int\", -MASK_ALIGN_INT,\t\t\t\t\t\\\n-      N_(\"Align variables on a 16-bit boundary\") },\t\t\t\\\n-    { \"sep-data\", MASK_SEP_DATA,\t\t\t\t\t\\\n-      N_(\"Enable separate data segment\") },\t\t\t\t\\\n-    { \"no-sep-data\", -MASK_SEP_DATA,\t\t\t\t\t\\\n-      N_(\"Disable separate data segment\") },\t\t\t\t\\\n-    { \"id-shared-library\", MASK_ID_SHARED_LIBRARY,\t\t\t\\\n-      N_(\"Enable ID based shared library\") },\t\t\t\t\\\n-    { \"no-id-shared-library\", -MASK_ID_SHARED_LIBRARY,\t\t\t\\\n-      N_(\"Disable ID based shared library\") },\t\t\t\t\\\n-    { \"pcrel\", MASK_PCREL,\t\t\t\t\t\t\\\n-      N_(\"Generate pc-relative code\") },\t\t\t\t\\\n-    { \"strict-align\", -MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n-      N_(\"Do not use unaligned memory references\") },\t\t\t\\\n-    { \"no-strict-align\", MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n-      N_(\"Use unaligned memory references\") },\t\t\t\t\\\n-    { \"rtd\", MASK_RTD,\t\t\t\t\t\t\t\\\n-      N_(\"Use different calling convention using 'rtd'\") },\t\t\\\n-    { \"nortd\", - MASK_RTD,\t\t\t\t\t\t\\\n-      N_(\"Use normal calling convention\") },\t\t\t\t\\\n-    SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-    { \"\", TARGET_DEFAULT, \"\" }}\n-/* TARGET_DEFAULT is defined in m68k-none.h, netbsd.h, etc.  */\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"shared-library-id=\",\t&m68k_library_id_string,\t\t\\\n-    N_(\"ID of shared library to build\"), 0},\t\t\t\t\\\n-  SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n-}\n+#define MASK_COLDFIRE\t(MASK_5200 | MASK_528x | MASK_CFV3 | MASK_CFV4)\n+#define TARGET_COLDFIRE\t((target_flags & MASK_COLDFIRE) != 0)\n \n #define OVERRIDE_OPTIONS   override_options()\n \n /* These are meant to be redefined in the host dependent files */\n-#define SUBTARGET_SWITCHES\n-#define SUBTARGET_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\n \f\n /* target machine storage layout */"}, {"sha": "fa8770e65fe96b77f536d17771fd04f5808e54b1", "filename": "gcc/config/m68k/m68k.opt", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af06170d801916fc4b047df1fcff57783494dee/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=4af06170d801916fc4b047df1fcff57783494dee", "patch": "@@ -0,0 +1,149 @@\n+; Options for the Motorola 68000 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m5200\n+Target RejectNegative Mask(5200)\n+Generate code for a 520X\n+\n+m5206e\n+Target RejectNegative Mask(CF_HWDIV)\n+Generate code for a 5206e\n+\n+m528x\n+Target RejectNegative Mask(528x)\n+Generate code for a 528x\n+\n+m5307\n+Target RejectNegative Mask(CFV3)\n+Generate code for a 5307\n+\n+m5407\n+Target RejectNegative Mask(CFV4)\n+Generate code for a 5407\n+\n+m68000\n+Target RejectNegative\n+Generate code for a 68000\n+\n+m68020\n+Target RejectNegative Mask(68020)\n+Generate code for a 68020\n+\n+m68020-40\n+Target RejectNegative Mask(68040)\n+Generate code for a 68040, without any new instructions\n+\n+m68020-60\n+Target RejectNegative Mask(68060)\n+Generate code for a 68060, without any new instructions\n+\n+m68030\n+Target RejectNegative Mask(68030)\n+Generate code for a 68030\n+\n+m68040\n+Target RejectNegative Mask(68040_ONLY)\n+Generate code for a 68040\n+\n+m68060\n+Target RejectNegative\n+Generate code for a 68060\n+\n+m68302\n+Target RejectNegative\n+Generate code for a 68302\n+\n+m68332\n+Target RejectNegative\n+Generate code for a 68332\n+\n+; Has no effect on gcc\n+m68851\n+Target\n+Generate code for a 68851\n+\n+m68881\n+Target RejectNegative Mask(68881)\n+Generate code that uses 68881 floating-point instructions\n+\n+malign-int\n+Target Report Mask(ALIGN_INT)\n+Align variables on a 32-bit boundary\n+\n+mbitfield\n+Target Report RejectNegative Mask(BITFIELD)\n+Use the bit-field instructions\n+\n+mc68000\n+Target RejectNegative\n+Generate code for a 68000\n+\n+mc68020\n+Target RejectNegative\n+Generate code for a 68020\n+\n+mcpu32\n+Target RejectNegative\n+Generate code for a cpu32\n+\n+mid-shared-library\n+Target Report Mask(ID_SHARED_LIBRARY)\n+Enable ID based shared library\n+\n+mnobitfield\n+Target RejectNegative InverseMask(BITFIELD)\n+Do not use the bit-field instructions\n+\n+mnortd\n+Target RejectNegative InverseMask(RTD)\n+Use normal calling convention\n+\n+mnoshort\n+Target RejectNegative InverseMask(SHORT)\n+Consider type 'int' to be 32 bits wide\n+\n+mpcrel\n+Target Report Mask(PCREL)\n+Generate pc-relative code\n+\n+mrtd\n+Target Report RejectNegative Mask(RTD)\n+Use different calling convention using 'rtd'\n+\n+msep-data\n+Target Report Mask(SEP_DATA)\n+Enable separate data segment\n+\n+mshared-library-id=\n+Target RejectNegative Joined UInteger\n+ID of shared library to build\n+\n+mshort\n+Target Report RejectNegative Mask(SHORT)\n+Consider type 'int' to be 16 bits wide\n+\n+msoft-float\n+Target RejectNegative InverseMask(68881)\n+Generate code with library calls for floating point\n+\n+mstrict-align\n+Target Report Mask(STRICT_ALIGNMENT)\n+Do not use unaligned memory references"}]}