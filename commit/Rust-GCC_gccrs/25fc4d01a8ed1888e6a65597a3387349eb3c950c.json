{"sha": "25fc4d01a8ed1888e6a65597a3387349eb3c950c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmYzRkMDFhOGVkMTg4OGU2YTY1NTk3YTMzODczNDllYjNjOTUwYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-13T21:33:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-22T18:02:23Z"}, "message": "c++: ICE when mangling operator name [PR98545]\n\nr11-6301 added some asserts in mangle.c, and now we trip over one of\nthem.  In particular, it's the one asserting that we didn't get\nIDENTIFIER_ANY_OP_P when mangling an expression with a dependent name.\n\nAs this testcase shows, it's possible to get that, so turn the assert\ninto an if and write \"on\".  That changes the mangling in the following\nway:\n\nWith this patch:\n\n$ c++filt _ZN1i1hIJ1adS1_EEEDTcldtdefpTonclspcvT__EEEDpS2_\ndecltype (((*this).(operator()))((a)(), (double)(), (a)())) i::h<a, double, a>(a, double, a)\n\nG++10:\n$ c++filt _ZN1i1hIJ1adS1_EEEDTcldtdefpTclspcvT__EEEDpS2_\ndecltype (((*this).(operator()))((a)(), (double)(), (a)())) i::h<a, double, a>(a, double, a)\n\nclang++/icc:\n$ c++filt _ZN1i1hIJ1adS1_EEEDTclonclspcvT__EEEDpS2_\ndecltype ((operator())((a)(), (double)(), (a)())) i::h<a, double, a>(a, double, a)\n\nThis is now tracked in PR98756.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98545\n\t* mangle.c (write_member_name): Emit abi_warn_or_compat_version_crosses\n\twarnings regardless of abi_version_at_least.\n\t(write_expression): When the expression is a dependent name\n\tand an operator name, write \"on\" before writing its name.\n\ngcc/ChangeLog:\n\n\tPR c++/98545\n\t* doc/invoke.texi: Update C++ ABI Version 15 description.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98545\n\t* g++.dg/abi/mangle76.C: New test.", "tree": {"sha": "99ba82b9c52ec22db47720056a90198e905c81b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ba82b9c52ec22db47720056a90198e905c81b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25fc4d01a8ed1888e6a65597a3387349eb3c950c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fc4d01a8ed1888e6a65597a3387349eb3c950c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25fc4d01a8ed1888e6a65597a3387349eb3c950c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fc4d01a8ed1888e6a65597a3387349eb3c950c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "0a9e5aa79a027b421a411ffa655a51d4390837cd", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=25fc4d01a8ed1888e6a65597a3387349eb3c950c", "patch": "@@ -2868,9 +2868,10 @@ write_member_name (tree member)\n {\n   if (identifier_p (member))\n     {\n-      if (abi_version_at_least (11) && IDENTIFIER_ANY_OP_P (member))\n+      if (IDENTIFIER_ANY_OP_P (member))\n \t{\n-\t  write_string (\"on\");\n+\t  if (abi_version_at_least (11))\n+\t    write_string (\"on\");\n \t  if (abi_warn_or_compat_version_crosses (11))\n \t    G.need_abi_warning = 1;\n \t}\n@@ -3349,7 +3350,13 @@ write_expression (tree expr)\n   else if (dependent_name (expr))\n     {\n       tree name = dependent_name (expr);\n-      gcc_assert (!IDENTIFIER_ANY_OP_P (name));\n+      if (IDENTIFIER_ANY_OP_P (name))\n+\t{\n+\t  if (abi_version_at_least (15))\n+\t    write_string (\"on\");\n+\t  if (abi_warn_or_compat_version_crosses (15))\n+\t    G.need_abi_warning = 1;\n+\t}\n       write_unqualified_id (name);\n     }\n   else"}, {"sha": "99d25462e488eecf1088e98fbe2eff0e03b1e8e0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=25fc4d01a8ed1888e6a65597a3387349eb3c950c", "patch": "@@ -2837,7 +2837,8 @@ Version 14, which first appeared in G++ 10, corrects the mangling of\n the nullptr expression.\n \n Version 15, which first appeared in G++ 11, changes the mangling of\n-@code{__alignof__} to be distinct from that of @code{alignof}.\n+@code{__alignof__} to be distinct from that of @code{alignof}, and\n+dependent operator names.\n \n See also @option{-Wabi}.\n "}, {"sha": "fe326e6c689657f3da247a4cf8ee47f857a29803", "filename": "gcc/testsuite/g++.dg/abi/mangle76.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fc4d01a8ed1888e6a65597a3387349eb3c950c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle76.C?ref=25fc4d01a8ed1888e6a65597a3387349eb3c950c", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/98545\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wabi=14\" }\n+\n+class a {\n+public:\n+  a();\n+  template <typename b> a(b);\n+};\n+template <class = double> using c = a;\n+class f {\n+protected:\n+  template <class d, class e> void operator()(d, double, e);\n+};\n+class i : f {\n+public:\n+  template <class... g>\n+  [[gnu::used]] auto h(g...) -> decltype(operator()(g()...)) {} // { dg-warning \"mangled name\" }\n+// { dg-final { scan-assembler \"_ZN1i1hIJ1adS1_EEEDTcldtdefpTonclspcvT__EEEDpS2_\" } }\n+};\n+template <class> class C {\n+public:\n+  template <class j> C(j);\n+  i k() const;\n+  int operator()() {\n+    int l = 10;\n+    c<> m, n;\n+    operator()(m, l, n);\n+    return 0;\n+  }\n+  int operator()(c<> &, c<> const &, c<> const &) const;\n+  template <class d, class e> void k(d m, double gamma, e o) const {\n+    k().h(m, gamma, o);\n+  }\n+};\n+template <class r> int C<r>::operator()(c<> &, c<> const &, c<> const &) const {\n+  [&](c<> m, double gamma, c<> o) { k(m, gamma, o); };\n+  return 0;\n+}\n+c<> p = C<double>(p)();"}]}