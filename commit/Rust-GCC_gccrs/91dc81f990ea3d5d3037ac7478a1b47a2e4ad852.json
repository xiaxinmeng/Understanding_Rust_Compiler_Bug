{"sha": "91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkYzgxZjk5MGVhM2Q1ZDMwMzdhYzc0NzhhMWI0N2EyZTRhZDg1Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-10-23T21:39:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-10-23T21:39:47Z"}, "message": "* lib/g77.exp: Rewrite based on lib/g++.exp.\n\nFrom-SVN: r46444", "tree": {"sha": "6d676ca5330aec6fb2a1a70c1dcb21d9139bdc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d676ca5330aec6fb2a1a70c1dcb21d9139bdc04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/comments", "author": null, "committer": null, "parents": [{"sha": "e686d142b3569189f94a7a1ea7ca55ae816c3569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e686d142b3569189f94a7a1ea7ca55ae816c3569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e686d142b3569189f94a7a1ea7ca55ae816c3569"}], "stats": {"total": 226, "additions": 137, "deletions": 89}, "files": [{"sha": "230b9dc107279bdf13f3ce04f27d4dcb7ff42848", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,3 +1,7 @@\n+2001-10-23  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* lib/g77.exp: Rewrite based on lib/g++.exp.\n+\n 2001-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20011019-1.c: New test."}, {"sha": "0dd403dd202910d30dc130a9bbd8ae7afd89aac9", "filename": "gcc/testsuite/lib/g77.exp", "status": "modified", "additions": 133, "deletions": 89, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/gcc%2Ftestsuite%2Flib%2Fg77.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/gcc%2Ftestsuite%2Flib%2Fg77.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg77.exp?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1996, 1997 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2001 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -15,50 +15,49 @@\n # Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n # This file was written by Rob Savoye (rob@cygnus.com)\n-# Currently maintained by Doug Evans (dje@cygnus.com)\n-\n-# This file is loaded by the tool init file (eg: unix.exp).  It provides\n-# default definitions for g77_start, etc. and other supporting cast members.\n-\n-# These globals are used by g77_start if no compiler arguments are provided.\n-# They are also used by the various testsuites to define the environment:\n-# where to find stdio.h, libc.a, etc.\n+# Many modifications by Jeffrey Wheat (cassidy@cygnus.com)\n+# With modifications by Mike Stump <mrs@cygnus.com>.\n \n+#\n+# g77 support library routines\n+#\n+load_lib prune.exp\n load_lib gcc-defs.exp\n \n #\n # G77_UNDER_TEST is the compiler under test.\n #\n \n+\n+set gpp_compile_options \"\"\n+\n+\n #\n-# default_g77_version -- extract and print the version number of the compiler\n+# g77_version -- extract and print the version number of the compiler\n #\n \n-proc default_g77_version { } {\n+proc g77_version { } {\n     global G77_UNDER_TEST\n-\n-    g77_init;\n+    \n+    g77_init\n \n     # ignore any arguments after the command\n     set compiler [lindex $G77_UNDER_TEST 0]\n-\n-    if ![is_remote host] {\n-\tset compiler_name [which $compiler];\n-    } else {\n-\tset compiler_name $compiler;\n-    }\n-\n+    \n     # verify that the compiler exists\n-    if { $compiler_name != 0 } then {\n-        set options \"\"\n-\n-        lappend options \"additional_flags=-v\"\n-        set tmp [g77_target_compile \"\" \"\" \"none\" $options]\n-\tregexp \"g77 version\\[^\\n\\]*\" $tmp version\n-\tif { [info exists version] } then {\n-\t    clone_output \"$compiler_name $version\\n\"\n+    if { [is_remote host] || [which $compiler] != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0];\n+\tset output [lindex $tmp 1];\n+\tregexp \"version.*$\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    if [is_remote host] {\n+\t\tclone_output \"$compiler $version\\n\"\n+\t    } else {\n+\t\tclone_output \"[which $compiler] $version\\n\"\n+\t    }\n \t} else {\n-\t    clone_output \"Couldn't determine version of $compiler_name: $tmp\\n\"\n+\t    clone_output \"Couldn't determine version of [which $compiler]\\n\"\n \t}\n     } else {\n \t# compiler does not exist (this should have already been detected)\n@@ -67,43 +66,83 @@ proc default_g77_version { } {\n }\n \n #\n-# Call g77_version. We do it this way so we can override it if needed.\n+# g77_link_flags -- provide new version of g77_link_flags\n+# (originally from libgloss.exp) which knows about the gcc tree structure\n #\n-proc g77_version { } {\n-    default_g77_version;\n+\n+proc g77_link_flags { paths } {\n+    global rootme\n+    global srcdir\n+    global ld_library_path\n+\n+    set gccpath ${paths}\n+    set libio_dir \"\"\n+    set flags \"\"\n+    set ld_library_path \".\"\n+\n+    if { $gccpath != \"\" } {\n+      if [file exists \"${gccpath}/libf2c/.libs/libg2c.a\"] {\n+          append flags \"-L${gccpath}/libf2c/.libs \"\n+\t  if [file exists \"${gccpath}/libf2c/.libs/libg2c.so\"] {\n+\t      append flags \"-Wl,--rpath-link,${rootme} \"\n+\t      append ld_library_path \":${gccpath}/libf2c/.libs\"\n+\t  }\n+      }\n+      if [file exists \"${gccpath}/libf2c/libfrtbegin.a\"] {\n+          append flags \"-L${gccpath}/libf2c \"\n+      }\n+      if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n+          append flags \"-L${gccpath}/libiberty \"\n+      }\n+      append ld_library_path \":${rootme}\"\n+    }\n+    return \"$flags\"\n }\n \n #\n-# g77_init -- called at the start of each .exp script.\n-#\n-# There currently isn't much to do, but always using it allows us to\n-# make some enhancements without having to go back and rewrite the scripts.\n+# g77_init -- called at the start of each subdir of tests\n #\n \n-set g77_initialized 0\n-\n proc g77_init { args } {\n+    global subdir\n+    global gpp_initialized\n+    global base_dir\n     global tmpdir\n     global libdir\n-    global gluefile wrap_flags\n-    global g77_initialized\n+    global gluefile wrap_flags;\n+    global objdir srcdir\n+    global ALWAYS_G77FLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n     global G77_UNDER_TEST\n-    global TOOL_EXECUTABLE\n-\n-    if { $g77_initialized == 1 } { return; }\n+    global TESTING_IN_BUILD_TREE\n \n     if ![info exists G77_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n \t    set G77_UNDER_TEST $TOOL_EXECUTABLE;\n \t} else {\n-\t    set G77_UNDER_TEST [find_g77]\n+\t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+\t\tset G77_UNDER_TEST [transform g77]\n+\t    } else {\n+\t\tset G77_UNDER_TEST [findfile $base_dir/../g77 \"$base_dir/../g77 -B$base_dir/../\" [findfile $base_dir/g77 \"$base_dir/g77 -B$base_dir/\" [transform g77]]]\n+\t    }\n \t}\n     }\n \n-    if ![info exists tmpdir] then {\n-\tset tmpdir /tmp\n+    if ![is_remote host] {\n+\tif { [which $G77_UNDER_TEST] == 0 } then {\n+\t    perror \"G77_UNDER_TEST ($G77_UNDER_TEST) does not exist\"\n+\t    exit 1\n+\t}\n+    }\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n     }\n-    if { [target_info needs_status_wrapper]!=\"\" && ![info exists gluefile] } {\n+\n+    if { [target_info needs_status_wrapper] != \"\" } {\n \tset gluefile ${tmpdir}/testglue.o;\n \tset result [build_wrapper $gluefile];\n \tif { $result != \"\" } {\n@@ -113,56 +152,61 @@ proc g77_init { args } {\n \t    unset gluefile\n \t}\n     }\n+\n+    set ALWAYS_G77FLAGS \"\"\n+\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend ALWAYS_G77FLAGS \"ldflags=[g77_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n+\t} else {\n+\t    lappend ALWAYS_G77FLAGS \"ldflags=[g77_link_flags [get_multilibs] ]\";\n+\t}\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_G77FLAGS \"additional_flags=$TOOL_OPTIONS\";\n+    }\n+\n+    verbose -log \"ALWAYS_G77FLAGS set to $ALWAYS_G77FLAGS\"\n+\n+    verbose \"g77 is initialized\" 3\n }\n \n+#\n+# g77_target_compile -- compile a source file\n+#\n+\n proc g77_target_compile { source dest type options } {\n-    global rootme;\n     global tmpdir;\n-    global gluefile wrap_flags;\n-    global G77_UNDER_TEST\n-    global TOOL_OPTIONS\n-    global ld_library_path;\n-\n-    set ld_library_path \".:${rootme}\"\n+    global gluefile wrap_flags\n+    global ALWAYS_G77FLAGS;\n+    global G77_UNDER_TEST;\n \n-    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n-\tlappend options \"ldflags=$wrap_flags\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n-    if [target_info exists g77,stack_size] {\n-\tlappend options \"additional_flags=-DSTACK_SIZE=[target_info g77,stack_size]\"\n-    }\n-    if [target_info exists g77,no_trampolines] {\n-\tlappend options \"additional_flags=-DNO_TRAMPOLINES\"\n-    }\n-    if [target_info exists g77,no_label_values] {\n-\tlappend options \"additional_flags=-DNO_LABEL_VALUES\"\n-    }\n-    if [info exists TOOL_OPTIONS] {\n-\tlappend options \"additional_flags=$TOOL_OPTIONS\"\n-    }\n-    if [target_info exists g77,no_varargs] {\n-\tlappend options \"additional_flags=-DNO_VARARGS\"\n-    }\n-    if ![is_remote host] {\n-      set gccpath \"[get_multilibs]\"\n-      set libg2c_dir [lookfor_file ${gccpath} libf2c/libg2c.la]\n-      if { $libg2c_dir != \"\" } {\n-\tset libg2c_link_flags \"-L[file dirname ${libg2c_dir}]\"\n-\tlappend options \"additional_flags=${libg2c_link_flags}\"\n-      }\n-    }\n-    set g2cpath \"[get_multilibs]\"\n-    set libg2c_dir [lookfor_file ${g2cpath} libf2c/.libs/libg2c.a]\n-    if { $libg2c_dir != \"\" } {\n-        set libg2c_dir [file dirname ${libg2c_dir}]\n-        set g2c_link_flags \"-L${libg2c_dir}\"\n-        lappend options \"additional_flags=${g2c_link_flags}\"\n-        append ld_library_path \":${libg2c_dir}\"\n-    }\n- \n-    lappend options \"compiler=$G77_UNDER_TEST\"\n+    lappend options \"compiler=$G77_UNDER_TEST\";\n+\n+    set options [concat \"$ALWAYS_G77FLAGS\" $options];\n+\n     return [target_compile $source $dest $type $options]\n }\n \n+#\n+# g77_set_ld_library_path --\n+# On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n+# called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n+# (for the 64-bit ABI).  The right way to do this would be to modify\n+# unix.exp -- but that's not an option since it's part of DejaGNU\n+# proper, so we do it here, by trickery.  We really only need to do \n+# this on IRIX, but it shouldn't hurt to do it anywhere else.\n+#\n+\n+proc ${tool}_set_ld_library_path { name element op } {\n+  setenv LD_LIBRARYN32_PATH [getenv LD_LIBRARY_PATH]\n+  setenv LD_LIBRARY64_PATH [getenv LD_LIBRARY_PATH]\n+}\n+\n+trace variable env(LD_LIBRARY_PATH) w ${tool}_set_ld_library_path"}]}