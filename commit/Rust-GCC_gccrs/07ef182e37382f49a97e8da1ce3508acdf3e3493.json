{"sha": "07ef182e37382f49a97e8da1ce3508acdf3e3493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlZjE4MmUzNzM4MmY0OWE5N2U4ZGExY2UzNTA4YWNkZjNlMzQ5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:19:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:19:14Z"}, "message": "[multiple changes]\n\n2012-10-02  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Check dimension for attribute\n\tOld before it gets expanded.\n\t* sem_dim.adb (Analyze_Dimension_Has_Etype): Correctly propagate\n\tdimensions for identifier.\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop): Handle properly the case\n\twhere the iterator type is derived locally from an instantiation\n\tof Ada.Iterators_Interface.\n\t* exp_ch7.adb (Establish_Transient_Scope): Do not create a\n\ttransient scope if within the expansion of an iterator loop,\n\tbecause a transient block already exists.\n\n2012-10-02  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb: Use absolute path for configuration pragmas files\n\t* make.adb (Configuration_Pragmas_Switch.Absolute_Path): Moved\n\tto Makeutl.\n\t* makeutl.ads, makeutl.adb (Absolute_Path): New function, moved from\n\tmake.adb.\n\n2012-10-02  Vincent Celier  <celier@adacore.com>\n\n\t* prj-part.adb (Post_Parse_Context_Clause): Resurrect Boolean\n\tparameter In_Limited.  Check for circularity also if In_Limited\n\tis True.\n\t(Parse_Single_Project): Call Post_Parse_Context_Clause with\n\tIn_Limited parameter.\n\nFrom-SVN: r191961", "tree": {"sha": "f5aad546b751a3741904e051f9156b42eb05c3c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5aad546b751a3741904e051f9156b42eb05c3c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ef182e37382f49a97e8da1ce3508acdf3e3493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ef182e37382f49a97e8da1ce3508acdf3e3493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ef182e37382f49a97e8da1ce3508acdf3e3493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ef182e37382f49a97e8da1ce3508acdf3e3493/comments", "author": null, "committer": null, "parents": [{"sha": "2a7b8e181bd51b6e96864840550c66619573e8d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7b8e181bd51b6e96864840550c66619573e8d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7b8e181bd51b6e96864840550c66619573e8d1"}], "stats": {"total": 176, "additions": 120, "deletions": 56}, "files": [{"sha": "bd069612248769b9e90a73c3d26bfafcae5e9ff2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -1,3 +1,35 @@\n+2012-10-02  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Check dimension for attribute\n+\tOld before it gets expanded.\n+\t* sem_dim.adb (Analyze_Dimension_Has_Etype): Correctly propagate\n+\tdimensions for identifier.\n+\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop): Handle properly the case\n+\twhere the iterator type is derived locally from an instantiation\n+\tof Ada.Iterators_Interface.\n+\t* exp_ch7.adb (Establish_Transient_Scope): Do not create a\n+\ttransient scope if within the expansion of an iterator loop,\n+\tbecause a transient block already exists.\n+\n+2012-10-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb: Use absolute path for configuration pragmas files\n+\t* make.adb (Configuration_Pragmas_Switch.Absolute_Path): Moved\n+\tto Makeutl.\n+\t* makeutl.ads, makeutl.adb (Absolute_Path): New function, moved from\n+\tmake.adb.\n+\n+2012-10-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-part.adb (Post_Parse_Context_Clause): Resurrect Boolean\n+\tparameter In_Limited.  Check for circularity also if In_Limited\n+\tis True.\n+\t(Parse_Single_Project): Call Post_Parse_Context_Clause with\n+\tIn_Limited parameter.\n+\n 2012-10-02  Bob Duff  <duff@adacore.com>\n \n \t* checks.adb (Apply_Predicate_Check): Disable check in -gnatc mode."}, {"sha": "e9ec75ed0030e6cf1e1acaa7cb4915173b37fe2a", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -3039,10 +3039,18 @@ package body Exp_Ch5 is\n                Cursor := Make_Temporary (Loc, 'I');\n \n                --  For an container element iterator, the iterator type\n-               --  is obtained from the corresponding aspect.\n+               --  is obtained from the corresponding aspect, whose return\n+               --  type is descended from the corresponding interface type\n+               --  in some instance of Ada.Iterator_Interfaces. The actuals\n+               --  of that instantiation are Cursor and Has_Element.\n \n                Iter_Type := Etype (Default_Iter);\n-               Pack := Scope (Iter_Type);\n+\n+               --  The iterator type, which is a class_wide type,  may itself\n+               --  be derived locally, so the desired instantiation is the\n+               --  scope of the root type of the iterator type.\n+\n+               Pack := Scope (Root_Type (Etype (Iter_Type)));\n \n                --  Rewrite domain of iteration as a call to the default\n                --  iterator for the container type. If the container is"}, {"sha": "2a2b7dde4bb874717b05a5c472bc486ab54af83d", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -3639,9 +3639,13 @@ package body Exp_Ch7 is\n       --  If the node to wrap is an iteration_scheme, the expression is\n       --  one of the bounds, and the expansion will make an explicit\n       --  declaration for it (see Analyze_Iteration_Scheme, sem_ch5.adb),\n-      --  so do not apply any transformations here.\n+      --  so do not apply any transformations here. Same for an Ada 2012\n+      --  iterator specification, where a block is created for the expression\n+      --  that build the container.\n \n-      elsif Nkind (Wrap_Node) = N_Iteration_Scheme then\n+      elsif Nkind (Wrap_Node) = N_Iteration_Scheme\n+        or else Nkind (Wrap_Node) = N_Iterator_Specification\n+      then\n          null;\n \n       --  In formal verification mode, if the node to wrap is a pragma check,"}, {"sha": "1919f9a00350e1f36a5f9da0b8fa4de71038bb8a", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -2352,9 +2352,14 @@ begin\n                      if Variable /= Nil_Variable_Value\n                        and then Length_Of_Name (Variable.Value) /= 0\n                      then\n-                        Add_To_Carg_Switches\n-                          (new String'\n-                             (\"-gnatec=\" & Get_Name_String (Variable.Value)));\n+                        declare\n+                           Path : constant String :=\n+                             Absolute_Path\n+                               (Path_Name_Type (Variable.Value), Project);\n+                        begin\n+                           Add_To_Carg_Switches\n+                             (new String'(\"-gnatec=\" & Path));\n+                        end;\n                      end if;\n                   end;\n \n@@ -2392,10 +2397,14 @@ begin\n                         if Variable /= Nil_Variable_Value\n                           and then Length_Of_Name (Variable.Value) /= 0\n                         then\n-                           Add_To_Carg_Switches\n-                             (new String'\n-                                (\"-gnatec=\" &\n-                                 Get_Name_String (Variable.Value)));\n+                           declare\n+                              Path : constant String :=\n+                                Absolute_Path\n+                                  (Path_Name_Type (Variable.Value), Project);\n+                           begin\n+                              Add_To_Carg_Switches\n+                                (new String'(\"-gnatec=\" & Path));\n+                           end;\n                         end if;\n                      end;\n                   end if;"}, {"sha": "28674251b1700d3e0d8e125c04972ebc4f41fa6b", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -3790,44 +3790,6 @@ package body Make is\n       Result : Argument_List (1 .. 3);\n       Last   : Natural := 0;\n \n-      function Absolute_Path\n-        (Path    : Path_Name_Type;\n-         Project : Project_Id) return String;\n-      --  Returns an absolute path for a configuration pragmas file\n-\n-      -------------------\n-      -- Absolute_Path --\n-      -------------------\n-\n-      function Absolute_Path\n-        (Path    : Path_Name_Type;\n-         Project : Project_Id) return String\n-      is\n-      begin\n-         Get_Name_String (Path);\n-\n-         declare\n-            Path_Name : constant String := Name_Buffer (1 .. Name_Len);\n-\n-         begin\n-            if Is_Absolute_Path (Path_Name) then\n-               return Path_Name;\n-\n-            else\n-               declare\n-                  Parent_Directory : constant String :=\n-                                       Get_Name_String\n-                                         (Project.Directory.Display_Name);\n-\n-               begin\n-                  return Parent_Directory & Path_Name;\n-               end;\n-            end if;\n-         end;\n-      end Absolute_Path;\n-\n-   --  Start of processing for Configuration_Pragmas_Switch\n-\n    begin\n       Prj.Env.Create_Config_Pragmas_File\n         (For_Project, Project_Tree);"}, {"sha": "a2ea435269dec8f3499e1424f41c9dc23db3948b", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -139,6 +139,37 @@ package body Makeutl is\n       end if;\n    end Add_Linker_Option;\n \n+   -------------------\n+   -- Absolute_Path --\n+   -------------------\n+\n+   function Absolute_Path\n+     (Path    : Path_Name_Type;\n+      Project : Project_Id) return String\n+   is\n+   begin\n+      Get_Name_String (Path);\n+\n+      declare\n+         Path_Name : constant String := Name_Buffer (1 .. Name_Len);\n+\n+      begin\n+         if Is_Absolute_Path (Path_Name) then\n+            return Path_Name;\n+\n+         else\n+            declare\n+               Parent_Directory : constant String :=\n+                 Get_Name_String\n+                   (Project.Directory.Display_Name);\n+\n+            begin\n+               return Parent_Directory & Path_Name;\n+            end;\n+         end if;\n+      end;\n+   end Absolute_Path;\n+\n    -------------------------\n    -- Base_Name_Index_For --\n    -------------------------"}, {"sha": "7848ed093cbc5733dba1689f7aaca3a8f3013ab3", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -87,6 +87,11 @@ package Makeutl is\n       Last   : in out Natural);\n    --  Add a string to a list of strings\n \n+   function Absolute_Path\n+     (Path    : Path_Name_Type;\n+      Project : Project_Id) return String;\n+   --  Returns an absolute path for a configuration pragmas file\n+\n    function Create_Binder_Mapping_File\n      (Project_Tree : Project_Tree_Ref) return Path_Name_Type;\n    --  Create a binder mapping file and returns its path name"}, {"sha": "7ea2dc930947e403ca5cb68c6791fe6c5167d4b1", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -216,6 +216,7 @@ package body Prj.Part is\n    procedure Post_Parse_Context_Clause\n      (Context_Clause    : With_Id;\n       In_Tree           : Project_Node_Tree_Ref;\n+      In_Limited        : Boolean;\n       Limited_Withs     : Boolean;\n       Imported_Projects : in out Project_Node_Id;\n       Project_Directory : Path_Name_Type;\n@@ -827,6 +828,7 @@ package body Prj.Part is\n    procedure Post_Parse_Context_Clause\n      (Context_Clause    : With_Id;\n       In_Tree           : Project_Node_Tree_Ref;\n+      In_Limited        : Boolean;\n       Limited_Withs     : Boolean;\n       Imported_Projects : in out Project_Node_Id;\n       Project_Directory : Path_Name_Type;\n@@ -941,7 +943,9 @@ package body Prj.Part is\n                   --  If we have one, get the project id of the limited\n                   --  imported project file, and do not parse it.\n \n-                  if Limited_Withs and then Project_Stack.Last > 1 then\n+                  if (In_Limited or else Limited_Withs) and then\n+                     Project_Stack.Last > 1\n+                  then\n                      declare\n                         Canonical_Path_Name : Path_Name_Type;\n \n@@ -975,7 +979,7 @@ package body Prj.Part is\n                         Path_Name_Id      => Imported_Path_Name_Id,\n                         Extended          => False,\n                         From_Extended     => From_Extended,\n-                        In_Limited        => Limited_Withs,\n+                        In_Limited        => In_Limited or else Limited_Withs,\n                         Packages_To_Check => Packages_To_Check,\n                         Depth             => Depth,\n                         Current_Dir       => Current_Dir,\n@@ -1577,6 +1581,7 @@ package body Prj.Part is\n             Post_Parse_Context_Clause\n               (In_Tree           => In_Tree,\n                Context_Clause    => First_With,\n+               In_Limited        => In_Limited,\n                Limited_Withs     => False,\n                Imported_Projects => Imported_Projects,\n                Project_Directory => Project_Directory,\n@@ -1936,6 +1941,7 @@ package body Prj.Part is\n          Post_Parse_Context_Clause\n            (In_Tree           => In_Tree,\n             Context_Clause    => First_With,\n+            In_Limited        => In_Limited,\n             Limited_Withs     => True,\n             Imported_Projects => Imported_Projects,\n             Project_Directory => Project_Directory,"}, {"sha": "5b1585a39824190d84a4c0b9e83bb5c9fb86153f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -4053,6 +4053,7 @@ package body Sem_Attr is\n             P_Type := Base_Type (P_Type);\n             Set_Etype (N, P_Type);\n             Set_Etype (P, P_Type);\n+            Analyze_Dimension (N);\n             Expand (N);\n          end if;\n       end Old;"}, {"sha": "163c93b789f2939629ae10c2b3aef57d32ea43df", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ef182e37382f49a97e8da1ce3508acdf3e3493/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=07ef182e37382f49a97e8da1ce3508acdf3e3493", "patch": "@@ -1925,12 +1925,18 @@ package body Sem_Dim is\n          Set_Dimensions (N, Dims_Of_Etyp);\n \n       --  Identifier case. Propagate the dimensions from the entity for\n-      --  identifier whose entity is a non-dimensionless consant.\n+      --  identifier whose entity is a non-dimensionless constant.\n \n-      elsif Nkind (N) = N_Identifier\n-        and then Exists (Dimensions_Of (Entity (N)))\n-      then\n-         Set_Dimensions (N, Dimensions_Of (Entity (N)));\n+      elsif Nkind (N) = N_Identifier then\n+         Analyze_Dimension_Identifier : declare\n+            Id : constant Entity_Id := Entity (N);\n+         begin\n+            if Ekind (Id) = E_Constant\n+              and then Exists (Dimensions_Of (Id))\n+            then\n+               Set_Dimensions (N, Dimensions_Of (Id));\n+            end if;\n+         end Analyze_Dimension_Identifier;\n \n       --  Attribute reference case. Propagate the dimensions from the prefix.\n "}]}