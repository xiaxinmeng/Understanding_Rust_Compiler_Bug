{"sha": "adee59ae5f69e596fa0d27149900555eeaeb6a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlZTU5YWU1ZjY5ZTU5NmZhMGQyNzE0OTkwMDU1NWVlYWViNmE3Zg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-09-02T22:20:52Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-09-02T22:20:52Z"}, "message": "hard-reg-set.h (call_fixed_regs): Remove.\n\n\t* hard-reg-set.h (call_fixed_regs): Remove.\n\t* reginfo.c (call_fixed_regs): Remove.\n\t(init_reg_sets_1): Remove initialization of call_fixed_regs.\n\t(globalize_reg): Don't use call_fixed_regs.\n\t* caller-save.c (init_caller_save): Use call_fixed_reg_set instead of\n\tcall_fixed_regs.\n\nFrom-SVN: r151353", "tree": {"sha": "ceef32f2c29300b16504d1aaad31b7dd7eb7c9d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceef32f2c29300b16504d1aaad31b7dd7eb7c9d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adee59ae5f69e596fa0d27149900555eeaeb6a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adee59ae5f69e596fa0d27149900555eeaeb6a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adee59ae5f69e596fa0d27149900555eeaeb6a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adee59ae5f69e596fa0d27149900555eeaeb6a7f/comments", "author": null, "committer": null, "parents": [{"sha": "6330e1d9fedc81a1d81546012005e15c840e678c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6330e1d9fedc81a1d81546012005e15c840e678c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6330e1d9fedc81a1d81546012005e15c840e678c"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "93c6092a2ef0af283290fbae2f7e14cd299a7261", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adee59ae5f69e596fa0d27149900555eeaeb6a7f", "patch": "@@ -1,3 +1,12 @@\n+2009-09-02  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* hard-reg-set.h (call_fixed_regs): Remove.\n+\t* reginfo.c (call_fixed_regs): Remove.\n+\t(init_reg_sets_1): Remove initialization of call_fixed_regs.\n+\t(globalize_reg): Don't use call_fixed_regs.\n+\t* caller-save.c (init_caller_save): Use call_fixed_reg_set instead of\n+\tcall_fixed_regs.\n+\n 2009-09-01  Michael Matz  <matz@suse.de>\n \n \t* expr.h (emit_storent_insn, expand_expr_real_1,"}, {"sha": "377ffad5e55d70e01b82dedcc71d5fb3cbaf1d3d", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=adee59ae5f69e596fa0d27149900555eeaeb6a7f", "patch": "@@ -215,15 +215,15 @@ init_caller_save (void)\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      if (call_used_regs[i] && ! call_fixed_regs[i])\n+      if (call_used_regs[i]\n+          && !TEST_HARD_REG_BIT (call_fixed_reg_set, i))\n \t{\n \t  for (j = 1; j <= MOVE_MAX_WORDS; j++)\n \t    {\n \t      regno_save_mode[i][j] = HARD_REGNO_CALLER_SAVE_MODE (i, j,\n \t\t\t\t\t\t\t\t   VOIDmode);\n \t      if (regno_save_mode[i][j] == VOIDmode && j == 1)\n \t\t{\n-\t\t  call_fixed_regs[i] = 1;\n \t\t  SET_HARD_REG_BIT (call_fixed_reg_set, i);\n \t\t}\n \t    }\n@@ -291,7 +291,6 @@ init_caller_save (void)\n \t  regno_save_mode[i][j] = VOIDmode;\n \t  if (j == 1)\n \t    {\n-\t      call_fixed_regs[i] = 1;\n \t      SET_HARD_REG_BIT (call_fixed_reg_set, i);\n \t      if (call_used_regs[i])\n \t\tSET_HARD_REG_BIT (no_caller_save_reg_set, i);"}, {"sha": "1f2c1aea9119b55e333407c3d370e5f58405d32b", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=adee59ae5f69e596fa0d27149900555eeaeb6a7f", "patch": "@@ -600,16 +600,11 @@ extern char call_really_used_regs[];\n /* The same info as a HARD_REG_SET.  */\n \n extern HARD_REG_SET call_used_reg_set;\n-  \n-/* Indexed by hard register number, contains 1 for registers that are\n-   fixed use -- i.e. in fixed_regs -- or a function value return register\n-   or TARGET_STRUCT_VALUE_RTX or STATIC_CHAIN_REGNUM.  These are the\n-   registers that cannot hold quantities across calls even if we are\n-   willing to save and restore them.  */\n-\n-extern char call_fixed_regs[FIRST_PSEUDO_REGISTER];\n \n-/* The same info as a HARD_REG_SET.  */\n+/* Contains registers that are fixed use -- i.e. in fixed_reg_set -- or\n+   a function value return register or TARGET_STRUCT_VALUE_RTX or\n+   STATIC_CHAIN_REGNUM.  These are the registers that cannot hold quantities\n+   across calls even if we are willing to save and restore them.  */\n \n extern HARD_REG_SET call_fixed_reg_set;\n "}, {"sha": "9b03d64f5904cc9b59d244e0544eae928033355b", "filename": "gcc/reginfo.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adee59ae5f69e596fa0d27149900555eeaeb6a7f/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=adee59ae5f69e596fa0d27149900555eeaeb6a7f", "patch": "@@ -101,13 +101,11 @@ char call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n #endif\n \n \n-/* Indexed by hard register number, contains 1 for registers that are\n-   fixed use or call used registers that cannot hold quantities across\n-   calls even if we are willing to save and restore them.  call fixed\n-   registers are a subset of call used registers.  */\n-char call_fixed_regs[FIRST_PSEUDO_REGISTER];\n+/* Contains registers that are fixed use -- i.e. in fixed_reg_set -- or\n+   a function value return register or TARGET_STRUCT_VALUE_RTX or\n+   STATIC_CHAIN_REGNUM.  These are the registers that cannot hold quantities\n+   across calls even if we are willing to save and restore them.  */\n \n-/* The same info as a HARD_REG_SET.  */\n HARD_REG_SET call_fixed_reg_set;\n \n /* Indexed by hard register number, contains 1 for registers\n@@ -515,8 +513,6 @@ init_reg_sets_1 (void)\n   else\n     CLEAR_REG_SET (regs_invalidated_by_call_regset);\n \n-  memcpy (call_fixed_regs, fixed_regs, sizeof call_fixed_regs);\n-\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       /* call_used_regs must include fixed_regs.  */\n@@ -531,8 +527,6 @@ init_reg_sets_1 (void)\n \n       if (call_used_regs[i])\n \tSET_HARD_REG_BIT (call_used_reg_set, i);\n-      if (call_fixed_regs[i])\n-\tSET_HARD_REG_BIT (call_fixed_reg_set, i);\n \n       /* There are a couple of fixed registers that we know are safe to\n \t exclude from being clobbered by calls:\n@@ -571,12 +565,14 @@ init_reg_sets_1 (void)\n         }\n     }\n \n+  COPY_HARD_REG_SET(call_fixed_reg_set, fixed_reg_set);\n+\n   /* Preserve global registers if called more than once.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       if (global_regs[i])\n \t{\n-\t  fixed_regs[i] = call_used_regs[i] = call_fixed_regs[i] = 1;\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\n \t  SET_HARD_REG_BIT (fixed_reg_set, i);\n \t  SET_HARD_REG_BIT (call_used_reg_set, i);\n \t  SET_HARD_REG_BIT (call_fixed_reg_set, i);\n@@ -870,7 +866,7 @@ globalize_reg (int i)\n   if (fixed_regs[i])\n     return;\n \n-  fixed_regs[i] = call_used_regs[i] = call_fixed_regs[i] = 1;\n+  fixed_regs[i] = call_used_regs[i] = 1;\n #ifdef CALL_REALLY_USED_REGISTERS\n   call_really_used_regs[i] = 1;\n #endif"}]}