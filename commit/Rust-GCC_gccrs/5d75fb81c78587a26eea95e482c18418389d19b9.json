{"sha": "5d75fb81c78587a26eea95e482c18418389d19b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3NWZiODFjNzg1ODdhMjZlZWE5NWU0ODJjMTg0MTgzODlkMTliOQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-08-29T02:26:01Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-08-29T02:26:01Z"}, "message": "re PR libfortran/33055 (Runtime error in INQUIRE unit existance with -fdefault-integer-8)\n\n2007-08-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/33055\n\tRevert previous patch.\n\nFrom-SVN: r127877", "tree": {"sha": "53e4dfc90beaa42d5a8e5de9662f46ff97e2ceaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e4dfc90beaa42d5a8e5de9662f46ff97e2ceaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d75fb81c78587a26eea95e482c18418389d19b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d75fb81c78587a26eea95e482c18418389d19b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d75fb81c78587a26eea95e482c18418389d19b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d75fb81c78587a26eea95e482c18418389d19b9/comments", "author": null, "committer": null, "parents": [{"sha": "d05fd136542ae8bd03f46f853f545ce34dd1dfda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05fd136542ae8bd03f46f853f545ce34dd1dfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05fd136542ae8bd03f46f853f545ce34dd1dfda"}], "stats": {"total": 91, "additions": 3, "deletions": 88}, "files": [{"sha": "80646cd081943a065018381b1db28e978db51da1", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d75fb81c78587a26eea95e482c18418389d19b9/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d75fb81c78587a26eea95e482c18418389d19b9/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=5d75fb81c78587a26eea95e482c18418389d19b9", "patch": "@@ -1094,30 +1094,6 @@ gfc_trans_flush (gfc_code * code)\n }\n \n \n-/* Create a dummy iostat variable to catch any error due to bad unit.  */\n-\n-static gfc_expr *\n-create_dummy_iostat (void)\n-{\n-  gfc_symtree *st;\n-  gfc_expr *e;\n-\n-  st = gfc_get_unique_symtree (gfc_current_ns);\n-  st->n.sym = gfc_new_symbol (st->name, gfc_current_ns);\n-  st->n.sym->ts.type = BT_INTEGER;\n-  st->n.sym->ts.kind = 4;\n-  st->n.sym->attr.referenced = 1;\n-  st->n.sym->refs = 1;\n-  e = gfc_get_expr ();\n-  e->expr_type = EXPR_VARIABLE;\n-  e->symtree = st;\n-  e->ts.type = BT_INTEGER;\n-  e->ts.kind = 4;\n-\n-  return e;\n-}\n-\n-\n /* Translate the non-IOLENGTH form of an INQUIRE statement.  */\n \n tree\n@@ -1157,17 +1133,8 @@ gfc_trans_inquire (gfc_code * code)\n \t\t\tp->file);\n \n   if (p->exist)\n-    {\n-      mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n-\t\t\t\t p->exist);\n-    \n-      if (p->unit && !p->iostat)\n-\t{\n-\t  p->iostat = create_dummy_iostat ();\n-\t  mask |= set_parameter_ref (&block, &post_block, var,\n-\t\t\t\t     IOPARM_common_iostat, p->iostat);\n-\t}\n-    }\n+    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n+\t\t\t       p->exist);\n \n   if (p->opened)\n     mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_opened,"}, {"sha": "4f942e27e988eebde377c5633f5ee8ac7646fc5e", "filename": "gcc/testsuite/gfortran.dg/negative_unit.f", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d75fb81c78587a26eea95e482c18418389d19b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d75fb81c78587a26eea95e482c18418389d19b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit.f?ref=5d75fb81c78587a26eea95e482c18418389d19b9", "patch": "@@ -7,7 +7,6 @@\n !\n ! Bugs submitted by Walt Brainerd\n       integer i\n-      integer, parameter ::ERROR_BAD_UNIT = 5005\n       logical l\n       \n       i = 0\n@@ -23,10 +22,4 @@\n       inquire (unit=-42, exist=l)\n       if (l) call abort\n \n-      i = 0 \n-! This one is nasty\n-      inquire (unit=2_8*huge(0_4)+20_8, exist=l, iostat=i)\n-      if (l) call abort\n-      if (i.ne.ERROR_BAD_UNIT) call abort\n-\n       end"}, {"sha": "53a7daa8c2587df211368bba2a556458cf3e550c", "filename": "gcc/testsuite/gfortran.dg/negative_unit_int8.f", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05fd136542ae8bd03f46f853f545ce34dd1dfda/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_int8.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05fd136542ae8bd03f46f853f545ce34dd1dfda/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_int8.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_int8.f?ref=d05fd136542ae8bd03f46f853f545ce34dd1dfda", "patch": "@@ -1,35 +0,0 @@\n-! { dg-do run }\n-! { dg-options \"-fdefault-integer-8\" }\n-! \n-! NOTE: This test is identical to negative_unit.f except -fdefault-integer-8\n-!\n-! PR libfortran/20660 and other bugs (not filed in bugzilla) relating\n-! to negative units\n-! PR 33055 Runtime error in INQUIRE unit existance with -fdefault-integer-8\n-! Test case update by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n-!\n-! Bugs submitted by Walt Brainerd\n-      integer i\n-      integer, parameter ::ERROR_BAD_UNIT = 5005\n-      logical l\n-      \n-      i = 0\n-! gfortran created a 'fort.-1' file and wrote \"Hello\" in it\n-      write (unit=-1, fmt=*, iostat=i) \"Hello\"\n-      if (i <= 0) call abort\n-      \n-      i = 0\n-      open (unit=-11, file=\"xxx\", iostat=i)\n-      if (i <= 0) call abort\n-\n-      i = 0\n-      inquire (unit=-42, exist=l)\n-      if (l) call abort\n-\n-      i = 0 \n-! This one is nasty\n-      inquire (unit=2_8*huge(0_4)+20_8, exist=l, iostat=i)\n-      if (l) call abort\n-      if (i.ne.ERROR_BAD_UNIT) call abort\n-\n-      end"}, {"sha": "b1f4a14f6c446820667c094d630d5aa2a0d478bb", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d75fb81c78587a26eea95e482c18418389d19b9/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d75fb81c78587a26eea95e482c18418389d19b9/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=5d75fb81c78587a26eea95e482c18418389d19b9", "patch": "@@ -47,17 +47,7 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n   GFC_INTEGER_4 cf = iqp->common.flags;\n \n   if ((cf & IOPARM_INQUIRE_HAS_EXIST) != 0)\n-    {\n-      *iqp->exist = (iqp->common.unit >= 0\n-\t\t     && iqp->common.unit <= GFC_INTEGER_4_HUGE);\n-\n-      if ((cf & IOPARM_INQUIRE_HAS_FILE) == 0)\n-\t{\n-\t  if (!(*iqp->exist))\n-\t    *iqp->common.iostat = ERROR_BAD_UNIT;\n-\t  *iqp->exist = *iqp->exist && (*iqp->common.iostat != ERROR_BAD_UNIT);\n-\t}\n-    }\n+    *iqp->exist = iqp->common.unit >= 0;\n \n   if ((cf & IOPARM_INQUIRE_HAS_OPENED) != 0)\n     *iqp->opened = (u != NULL);"}]}