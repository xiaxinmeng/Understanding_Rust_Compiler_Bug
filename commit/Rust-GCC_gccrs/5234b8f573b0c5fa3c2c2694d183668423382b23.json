{"sha": "5234b8f573b0c5fa3c2c2694d183668423382b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzNGI4ZjU3M2IwYzVmYTNjMmMyNjk0ZDE4MzY2ODQyMzM4MmIyMw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2007-05-24T10:11:49Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2007-05-24T10:11:49Z"}, "message": "re PR target/27067 (Compile errors with multiple inheritance where the stdcall attribute is applied to virtual functions.)\n\nChangeLog\n\t\n\tPR target/27067\n\t* doc/tm.texi (TARGET_MANGLE_DECL_ASSEMBLER_NAME): Document.\n\t* targhooks.h (default_mangle_decl_assembler_name): Declare\n\tdefault hook.\n\t* targhooks.c (default_mangle_decl_assembler_name): Define\n\tdefault hook.\n\t* target-def.h (TARGET_MANGLE_DECL_ASSEMBLER_NAME) New. Set to\n\tdefault hook.\n\t* target.h (struct gcc_target): Add mangle_decl_assembler_name field.\n\t* langhooks.c (lhd_set_decl_assembler_name): Call\n\ttargetm.mangle_decl_assembler_name for names with global scope.\n\n\t* config/i386/cygming.h (TARGET_MANGLE_DECL_ASSEMBLER_NAME) Override\n\tdefault.\n\t(ASM_OUTPUT_DEF_FROM_DECLS): Simplify to use DECL_ASSEMBLER_NAME.\n\t* config/i386/i386-protos.h (i386_pe_mangle_decl_assembler_name):\n\tDeclare.\n\t* config/i386/winnt.c (i386_pe_maybe_mangle_decl_assembler_name):\n\tNew. Factored out of i386_pe_encode_section_info.\n\t(gen_stdcall_or_fastcall_suffix): Get name identifier as argument.\n\tMove check for prior decoration of stdcall\n\tsymbols to i386_pe_encode_section_info.\n\t(i386_pe_encode_section_info): Adjust call to\n\tgen_stdcall_or_fastcall_suffix.  Use\n\ti386_pe_maybe_mangle_decl_assembler_name, if needed.\n\t(i386_pe_mangle_decl_assembler_name): New. Wrap\n\ti386_pe_maybe_mangle_decl_assembler_name.\n\n\ncp/ChangeLog\n\n        * mangle.c (mangle_decl): Call targetm.mangle_decl_assembler_name.\n\nFrom-SVN: r125020", "tree": {"sha": "f82b188a73ec315cce237f81bc0dfa75447a66db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f82b188a73ec315cce237f81bc0dfa75447a66db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5234b8f573b0c5fa3c2c2694d183668423382b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5234b8f573b0c5fa3c2c2694d183668423382b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5234b8f573b0c5fa3c2c2694d183668423382b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5234b8f573b0c5fa3c2c2694d183668423382b23/comments", "author": null, "committer": null, "parents": [{"sha": "4f5497a9245ac73f32f4d202e3b7497c61e79925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5497a9245ac73f32f4d202e3b7497c61e79925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5497a9245ac73f32f4d202e3b7497c61e79925"}], "stats": {"total": 188, "additions": 146, "deletions": 42}, "files": [{"sha": "3dbc238641d7ece25b410acb8cf209a8f04f6773", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,3 +1,33 @@\n+2007-05-24  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR target/27067\n+\t* doc/tm.texi (TARGET_MANGLE_DECL_ASSEMBLER_NAME): Document.\n+\t* targhooks.h (default_mangle_decl_assembler_name): Declare\n+\tdefault hook.\n+\t* targhooks.c (default_mangle_decl_assembler_name): Define\n+\tdefault hook.\n+\t* target-def.h (TARGET_MANGLE_DECL_ASSEMBLER_NAME) New. Set to\n+\tdefault hook.\n+\t* target.h (struct gcc_target): Add mangle_decl_assembler_name field.\n+\t* langhooks.c (lhd_set_decl_assembler_name): Call\n+\ttargetm.mangle_decl_assembler_name for names with global scope.\n+\n+\t* config/i386/cygming.h (TARGET_MANGLE_DECL_ASSEMBLER_NAME) Override\n+\tdefault.\n+\t(ASM_OUTPUT_DEF_FROM_DECLS): Simplify to use DECL_ASSEMBLER_NAME.\n+\t* config/i386/i386-protos.h (i386_pe_mangle_decl_assembler_name):\n+\tDeclare.\n+\t* config/i386/winnt.c (i386_pe_maybe_mangle_decl_assembler_name):\n+\tNew. Factored out of i386_pe_encode_section_info.\n+\t(gen_stdcall_or_fastcall_suffix): Get name identifier as argument.\n+\tMove check for prior decoration of stdcall\n+\tsymbols to i386_pe_encode_section_info.\n+\t(i386_pe_encode_section_info): Adjust call to\n+\tgen_stdcall_or_fastcall_suffix.  Use\n+\ti386_pe_maybe_mangle_decl_assembler_name, if needed.\n+\t(i386_pe_mangle_decl_assembler_name): New. Wrap\n+\ti386_pe_maybe_mangle_decl_assembler_name.\n+\n 2007-05-16  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* c-common.c (c_common_signed_or_unsigned_type): Delay the check for"}, {"sha": "9ce11b2dbe12430210e1076aa610819752407245", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,7 +1,7 @@\n /* Operating system specific defines to be used when targeting GCC for\n    hosting on Windows32, using a Unix style C library and tools.\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005\n+   2004, 2005, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -347,15 +347,11 @@ do {\t\t\t\t\t\t\t\\\n /* This implements the `alias' attribute, keeping any stdcall or\n    fastcall decoration.  */\n #undef\tASM_OUTPUT_DEF_FROM_DECLS\n-#define\tASM_OUTPUT_DEF_FROM_DECLS(STREAM, DECL, TARGET) \t\t\\\n+#define\tASM_OUTPUT_DEF_FROM_DECLS(STREAM, DECL, TARGET)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      const char *alias;\t\t\t\t\t\t\\\n-      rtx rtlname = XEXP (DECL_RTL (DECL), 0);\t\t\t\t\\\n-      if (GET_CODE (rtlname) == SYMBOL_REF)\t\t\t\t\\\n-\talias = XSTR (rtlname, 0);\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n+      const char *alias\t\t\t\t\t\t\t\\\n+\t= IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t\\\n       if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n \ti386_pe_declare_function_type (STREAM, alias,\t\t\t\\\n \t\t\t\t       TREE_PUBLIC (DECL));\t\t\\\n@@ -394,6 +390,7 @@ do {\t\t\t\t\t\t\t\\\n \n #define TARGET_VALID_DLLIMPORT_ATTRIBUTE_P i386_pe_valid_dllimport_attribute_p\n #define TARGET_CXX_ADJUST_CLASS_AT_DEFINITION i386_pe_adjust_class_at_definition\n+#define TARGET_MANGLE_DECL_ASSEMBLER_NAME i386_pe_mangle_decl_assembler_name\n \n #undef TREE\n "}, {"sha": "2f320391943feeebf79bb72c6e8ed5c5e5fd2c32", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for IA-32.\n    Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -220,6 +220,7 @@ extern void i386_pe_asm_output_aligned_decl_common (FILE *, tree,\n \t\t\t\t\t\t    HOST_WIDE_INT,\n \t\t\t\t\t\t    HOST_WIDE_INT);\n extern void i386_pe_file_end (void);\n+extern tree i386_pe_mangle_decl_assembler_name (tree, tree);\n \n /* In winnt-cxx.c and winnt-stubs.c  */\n extern void i386_pe_adjust_class_at_definition (tree);"}, {"sha": "6ef658671e695fbbf2ec04da5f8e792e9b2f6b8c", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 59, "deletions": 26, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines for insn-output.c for Windows NT.\n    Contributed by Douglas Rupp (drupp@cs.washington.edu)\n    Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006  Free Software Foundation, Inc.\n+   2005, 2006, 2007  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -75,7 +75,7 @@ ix86_handle_selectany_attribute (tree *node, tree name,\n   /* The attribute applies only to objects that are initialized and have\n      external linkage.  However, we may not know about initialization\n      until the language frontend has processed the decl. We'll check for\n-     initialization later in encode_section_info.  */\t\n+     initialization later in encode_section_info.  */\n   if (TREE_CODE (*node) != VAR_DECL || !TREE_PUBLIC (*node))\n     {\t\n       error (\"%qs attribute applies only to initialized variables\"\n@@ -154,22 +154,21 @@ i386_pe_valid_dllimport_attribute_p (tree decl)\n    return true;\n }\n \n-/* Return string which is the former assembler name modified with a\n-   suffix consisting of an atsign (@) followed by the number of bytes of\n-   arguments.  If FASTCALL is true, also add the FASTCALL_PREFIX.\n+/* Return string which is the function name, identified by ID, modified\n+   with a suffix consisting of an atsign (@) followed by the number of\n+   bytes of arguments.  If ID is NULL use the DECL_NAME as base. If\n+   FASTCALL is true, also add the FASTCALL_PREFIX.\n    Return NULL if no change required.  */\n \n static tree\n-gen_stdcall_or_fastcall_suffix (tree decl, bool fastcall)\n+gen_stdcall_or_fastcall_suffix (tree decl, tree id, bool fastcall)\n {\n   HOST_WIDE_INT total = 0;\n-  const char *asm_str = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n   char *new_str, *p;\n   tree formal_type;\n \n-  /* Do not change the identifier if a verbatim asmspec or already done. */\n-  if (*asm_str == '*' || strchr (asm_str, '@'))\n-    return NULL_TREE;\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);  \n \n   formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n   if (formal_type != NULL_TREE)\n@@ -202,16 +201,47 @@ gen_stdcall_or_fastcall_suffix (tree decl, bool fastcall)\n \n \tformal_type = TREE_CHAIN (formal_type);\n       }\n-\n   /* Assume max of 8 base 10 digits in the suffix.  */\n-  p = new_str = alloca (1 + strlen (asm_str) + 1 + 8 + 1);\n+  p = new_str = alloca (1 + strlen (old_str) + 1 + 8 + 1);\n   if (fastcall)\n     *p++ = FASTCALL_PREFIX;\n-  sprintf (p, \"%s@\" HOST_WIDE_INT_PRINT_DEC, asm_str, total);\n+  sprintf (p, \"%s@\" HOST_WIDE_INT_PRINT_DEC, old_str, total);\n \n   return get_identifier (new_str);\n }\n \n+/* Maybe decorate and get a new identifier for the DECL of a stdcall or\n+   fastcall function. The original identifier is supplied in ID. */\n+\n+static tree\n+i386_pe_maybe_mangle_decl_assembler_name (tree decl, tree id)\n+{\n+  tree new_id = NULL_TREE;\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    { \n+      tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+      if (lookup_attribute (\"stdcall\", type_attributes))\n+\tnew_id = gen_stdcall_or_fastcall_suffix (decl, id, false);\n+      else if (lookup_attribute (\"fastcall\", type_attributes))\n+\tnew_id = gen_stdcall_or_fastcall_suffix (decl, id, true);\n+    }\n+\n+  return new_id;\n+}\n+\n+/* This is used as a target hook to modify the DECL_ASSEMBLER_NAME\n+   in the language-independent default hook\n+   langhooks,c:lhd_set_decl_assembler_name ()\n+   and in cp/mangle,c:mangle_decl ().  */\n+tree\n+i386_pe_mangle_decl_assembler_name (tree decl, tree id)\n+{\n+  tree new_id = i386_pe_maybe_mangle_decl_assembler_name (decl, id);   \n+\n+  return (new_id ? new_id : id);\n+}\n+\n void\n i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n {\n@@ -233,21 +263,24 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n     case FUNCTION_DECL:\n       if (first)\n \t{\n-\t  tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-\t  tree newid = NULL_TREE;\n-\n-\t  if (lookup_attribute (\"stdcall\", type_attributes))\n-\t    newid = gen_stdcall_or_fastcall_suffix (decl, false);\n-\t  else if (lookup_attribute (\"fastcall\", type_attributes))\n-\t    newid = gen_stdcall_or_fastcall_suffix (decl, true);\n-\t  if (newid != NULL_TREE) \t\n+\t  /* FIXME: In Ada, and perhaps other language frontends,\n+\t     imported stdcall names may not yet have been modified.\n+\t     Check and do it know.  */\n+         tree new_id;\n+         tree old_id = DECL_ASSEMBLER_NAME (decl);\n+     \t  const char* asm_str = IDENTIFIER_POINTER (old_id);\n+          /* Do not change the identifier if a verbatim asmspec\n+\t     or if stdcall suffix already added. */\n+      \t  if (*asm_str == '*' || strchr (asm_str, '@'))\n+            break;\n+\t  if ((new_id = i386_pe_maybe_mangle_decl_assembler_name (decl, old_id)))\n \t    {\n-\t      XSTR (symbol, 0) = IDENTIFIER_POINTER (newid);\n \t      /* These attributes must be present on first declaration,\n-\t         change_decl_assembler_name will warn if they are added\n-\t         later and the decl has been referenced, but duplicate_decls\n-\t         should catch the mismatch before this is called.  */ \n-\t      change_decl_assembler_name (decl, newid);\n+\t\t change_decl_assembler_name will warn if they are added\n+\t\t later and the decl has been referenced, but duplicate_decls\n+\t\t should catch the mismatch first.  */\n+\t      change_decl_assembler_name (decl, new_id);\n+\t      XSTR (symbol, 0) = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \t    }\n \t}\n       break;"}, {"sha": "7738d1f09b5124208f259955b519934dc589f27c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,3 +1,8 @@\n+2007-05-24  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR target/27067\n+\t* mangle.c (mangle_decl): Call targetm.mangle_decl_assembler_name.\n+\n 2007-05-22  Ollie Wild  <aaw@google.com>\n \n \t* name-lookup.c (ambiguous_decl): Adds check for hidden types."}, {"sha": "3ec02ed73939cf999bcc201cf42ffc1d1fced61d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -2621,8 +2621,9 @@ get_identifier_nocopy (const char *name)\n void\n mangle_decl (const tree decl)\n {\n-  SET_DECL_ASSEMBLER_NAME (decl,\n-\t\t\t   get_identifier_nocopy (mangle_decl_string (decl)));\n+  tree id = get_identifier_nocopy (mangle_decl_string (decl));\n+  id = targetm.mangle_decl_assembler_name (decl, id);\n+  SET_DECL_ASSEMBLER_NAME (decl, id);\n }\n \n /* Generate the mangled representation of TYPE.  */"}, {"sha": "1dcf73c23d696371a39e27dd1047fc96895e6bfe", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -6462,6 +6462,16 @@ constants in @code{flag_pic} mode in @code{data_section} and everything\n else in @code{readonly_data_section}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_MANGLE_DECL_ASSEMBLER_NAME (tree @var{decl}, tree @var{id})\n+Define this hook if you need to postprocess the assembler name generated\n+by target-independent code.  The @var{id} provided to this hook will be\n+the computed name (e.g., the macro @code{DECL_NAME} of the @var{decl} in C,\n+or the mangled name of the @var{decl} in C++).  The return value of the\n+hook is an @code{IDENTIFIER_NODE} for the appropriate mangled name on\n+your target system.  The default implementation of this hook just\n+returns the @var{id} provided.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_ENCODE_SECTION_INFO (tree @var{decl}, rtx @var{rtl}, int @var{new_decl_p})\n Define this hook if references to a symbol or a constant must be\n treated differently depending on something about the variable or"}, {"sha": "96234f60e167e90142c0a627336536aff20605a4", "filename": "gcc/langhooks.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"integrate.h\"\n #include \"flags.h\"\n #include \"langhooks.h\"\n+#include \"target.h\"\n #include \"langhooks-def.h\"\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n@@ -147,6 +148,8 @@ lhd_warn_unused_global_decl (tree decl)\n void\n lhd_set_decl_assembler_name (tree decl)\n {\n+  tree id;\n+\n   /* The language-independent code should never use the\n      DECL_ASSEMBLER_NAME for lots of DECLs.  Only FUNCTION_DECLs and\n      VAR_DECLs for variables with static storage duration need a real\n@@ -161,21 +164,26 @@ lhd_set_decl_assembler_name (tree decl)\n      as that used in the source language.  (That's correct for C, and\n      GCC used to set DECL_ASSEMBLER_NAME to the same value as\n      DECL_NAME in build_decl, so this choice provides backwards\n-     compatibility with existing front-ends.\n-      \n+     compatibility with existing front-ends.  This assumption is wrapped\n+     in a target hook, to allow for target-specific modification of the\n+     identifier.\n+ \n      Can't use just the variable's own name for a variable whose scope\n      is less than the whole compilation.  Concatenate a distinguishing\n      number - we use the DECL_UID.  */\n+\n   if (TREE_PUBLIC (decl) || DECL_CONTEXT (decl) == NULL_TREE)\n-    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+    id = targetm.mangle_decl_assembler_name (decl, DECL_NAME (decl));\n   else\n     {\n       const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n       char *label;\n       \n       ASM_FORMAT_PRIVATE_NAME (label, name, DECL_UID (decl));\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n+      id = get_identifier (label);\n     }\n+  SET_DECL_ASSEMBLER_NAME (decl, id);\n+\n }\n \n /* Type promotion for variable arguments.  */"}, {"sha": "690a8fdc6d2129d0c4a4f3ac22cf46973446b3b9", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -464,6 +464,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_IN_SMALL_DATA_P hook_bool_tree_false\n #endif\n \n+#ifndef TARGET_MANGLE_DECL_ASSEMBLER_NAME\n+#define TARGET_MANGLE_DECL_ASSEMBLER_NAME mangle_decl_assembler_name\n+#endif\n+\n #ifndef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO default_encode_section_info\n #endif\n@@ -681,6 +685,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_FUNCTION_OK_FOR_SIBCALL,\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\\n   TARGET_BINDS_LOCAL_P,\t\t\t\t\\\n+  TARGET_MANGLE_DECL_ASSEMBLER_NAME,\t\t\\\n   TARGET_ENCODE_SECTION_INFO,\t\t\t\\\n   TARGET_STRIP_NAME_ENCODING,\t\t\t\\\n   TARGET_SHIFT_TRUNCATION_MASK,\t\t\t\\"}, {"sha": "f769ae0938a5328d28c7b12b137c97a070b9d3d7", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -544,6 +544,12 @@ struct gcc_target\n      to the current module.  */\n   bool (* binds_local_p) (tree);\n \n+  /* Modify and return the identifier of a DECL's external name,\n+     originally identified by ID, as required by the target,\n+    (eg, append @nn to windows32 stdcall function names).\n+     The default is to return ID without modification. */\n+   tree (* mangle_decl_assembler_name) (tree decl, tree  id);\n+\n   /* Do something target-specific to record properties of the DECL into\n      the associated SYMBOL_REF.  */\n   void (* encode_section_info) (tree, rtx, int);"}, {"sha": "77f624c29908f7da1a4d48368ea37649c472e34a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -631,4 +631,11 @@ default_reloc_rw_mask (void)\n   return flag_pic ? 3 : 0;\n }\n \n+/* By default, do no modification. */\n+tree default_mangle_decl_assembler_name (tree decl ATTRIBUTE_UNUSED,\n+\t\t\t\t\t tree id)\n+{\n+   return id;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "1b9bb10ed65e1396077ae98a5d9959c8bf18d761", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5234b8f573b0c5fa3c2c2694d183668423382b23/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=5234b8f573b0c5fa3c2c2694d183668423382b23", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -84,3 +84,4 @@ extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n extern void hook_void_bitmap (bitmap);\n extern bool default_handle_c_option (size_t, const char *, int);\n extern int default_reloc_rw_mask (void);\n+extern tree default_mangle_decl_assembler_name (tree, tree);"}]}