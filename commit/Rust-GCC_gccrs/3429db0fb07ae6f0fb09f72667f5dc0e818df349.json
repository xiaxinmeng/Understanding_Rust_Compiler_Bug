{"sha": "3429db0fb07ae6f0fb09f72667f5dc0e818df349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyOWRiMGZiMDdhZTZmMGZiMDlmNzI2NjdmNWRjMGU4MThkZjM0OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-07-21T19:21:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-07-21T19:21:03Z"}, "message": "re PR libstdc++/54352 (relaxed data race rules for ~condition_variable_any)\n\n\tPR libstdc++/54352\n\t* include/std/condition_variable (condition_variable_any): Move into\n\tinline namespace _V2 and replace mutex member with shared_ptr<mutex>.\n\t* src/c++11/condition_variable.cc (condition_variable_any): Move\n\tdefinitions to ...\n\t* src/c++11/compatibility-condvar.cc (condition_variable_any): Here.\n\t* src/Makefile.am: Add new source file.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r201112", "tree": {"sha": "faa1ebb885d503c2570ad7b5b434d21adfd16316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faa1ebb885d503c2570ad7b5b434d21adfd16316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3429db0fb07ae6f0fb09f72667f5dc0e818df349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3429db0fb07ae6f0fb09f72667f5dc0e818df349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3429db0fb07ae6f0fb09f72667f5dc0e818df349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3429db0fb07ae6f0fb09f72667f5dc0e818df349/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4aef883b7470379c369588dbea57315e1c67a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4aef883b7470379c369588dbea57315e1c67a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4aef883b7470379c369588dbea57315e1c67a4c"}], "stats": {"total": 127, "additions": 107, "deletions": 20}, "files": [{"sha": "f6d8a2483a7e6b99a36e3b6912549e4a5eb19e3d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -1,3 +1,14 @@\n+2013-07-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/54352\n+\t* include/std/condition_variable (condition_variable_any): Move into\n+\tinline namespace _V2 and replace mutex member with shared_ptr<mutex>.\n+\t* src/c++11/condition_variable.cc (condition_variable_any): Move\n+\tdefinitions to ...\n+\t* src/c++11/compatibility-condvar.cc (condition_variable_any): Here.\n+\t* src/Makefile.am: Add new source file.\n+\t* src/Makefile.in: Regenerate.\n+\n 2013-07-09  Tim Shen  <timshen91@gmail.com>\n \n \tImplement class regex_traits."}, {"sha": "76a6e94e9d713a11a6638312fb232e403f33d5c1", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -36,7 +36,12 @@\n #else\n \n #include <chrono>\n-#include <mutex> // unique_lock\n+#include <mutex>\n+#include <ext/concurrence.h>\n+#include <bits/alloc_traits.h>\n+#include <bits/allocator.h>\n+#include <bits/unique_ptr.h>\n+#include <bits/shared_ptr.h>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n@@ -165,13 +170,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   };\n \n+  inline namespace _V2 {\n+\n   /// condition_variable_any\n   // Like above, but mutex is not required to have try_lock.\n   class condition_variable_any\n   {\n     typedef chrono::system_clock\t__clock_t;\n     condition_variable\t\t\t_M_cond;\n-    mutex\t\t\t\t_M_mutex;\n+    shared_ptr<mutex>\t\t\t_M_mutex;\n \n     // scoped unlock - unlocks in ctor, re-locks in dtor\n     template<typename _Lock>\n@@ -194,35 +201,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n   public:\n-\n-    condition_variable_any() noexcept;\n-    ~condition_variable_any() noexcept;\n+    condition_variable_any() : _M_mutex(std::make_shared<mutex>()) { }\n+    ~condition_variable_any() = default;\n \n     condition_variable_any(const condition_variable_any&) = delete;\n     condition_variable_any& operator=(const condition_variable_any&) = delete;\n \n     void\n     notify_one() noexcept\n     {\n-      lock_guard<mutex> __lock(_M_mutex);\n+      lock_guard<mutex> __lock(*_M_mutex);\n       _M_cond.notify_one();\n     }\n \n     void\n     notify_all() noexcept\n     {\n-      lock_guard<mutex> __lock(_M_mutex);\n+      lock_guard<mutex> __lock(*_M_mutex);\n       _M_cond.notify_all();\n     }\n \n     template<typename _Lock>\n       void\n       wait(_Lock& __lock)\n       {\n-\tunique_lock<mutex> __my_lock(_M_mutex);\n+\tshared_ptr<mutex> __mutex = _M_mutex;\n+\tunique_lock<mutex> __my_lock(*__mutex);\n \t_Unlock<_Lock> __unlock(__lock);\n-\t// _M_mutex must be unlocked before re-locking __lock so move\n-\t// ownership of _M_mutex lock to an object with shorter lifetime.\n+\t// *__mutex must be unlocked before re-locking __lock so move\n+\t// ownership of *__mutex lock to an object with shorter lifetime.\n \tunique_lock<mutex> __my_lock2(std::move(__my_lock));\n \t_M_cond.wait(__my_lock2);\n       }\n@@ -241,10 +248,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\tunique_lock<mutex> __my_lock(_M_mutex);\n+\tshared_ptr<mutex> __mutex = _M_mutex;\n+\tunique_lock<mutex> __my_lock(*__mutex);\n \t_Unlock<_Lock> __unlock(__lock);\n-\t// _M_mutex must be unlocked before re-locking __lock so move\n-\t// ownership of _M_mutex lock to an object with shorter lifetime.\n+\t// *__mutex must be unlocked before re-locking __lock so move\n+\t// ownership of *__mutex lock to an object with shorter lifetime.\n \tunique_lock<mutex> __my_lock2(std::move(__my_lock));\n \treturn _M_cond.wait_until(__my_lock2, __atime);\n       }\n@@ -275,6 +283,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }\n   };\n \n+  } // end inline namespace\n+\n   // @} group condition_variables\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "3e11aa39ba45916fd4368ede3d842b74c7b4eedb", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -51,7 +51,8 @@ cxx11_sources = \\\n \tcompatibility-c++0x.cc \\\n \tcompatibility-atomic-c++0x.cc \\\n \tcompatibility-thread-c++0x.cc \\\n-\tcompatibility-chrono.cc\n+\tcompatibility-chrono.cc \\\n+\tcompatibility-condvar.cc\n \n libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n \n@@ -103,6 +104,11 @@ compatibility-chrono.lo: compatibility-chrono.cc\n compatibility-chrono.o: compatibility-chrono.cc\n \t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n+compatibility-condvar.lo: compatibility-condvar.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-condvar.o: compatibility-condvar.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n # A note on compatibility and static libraries.\n # \n # static lib == linked against only this version, should not need compat"}, {"sha": "93215e0fddd8af9809d6c67888201ab3431fca9a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -93,7 +93,8 @@ am__DEPENDENCIES_1 =\n am__objects_2 = compatibility.lo compatibility-debug_list.lo \\\n \tcompatibility-debug_list-2.lo $(am__objects_1)\n am__objects_3 = compatibility-c++0x.lo compatibility-atomic-c++0x.lo \\\n-\tcompatibility-thread-c++0x.lo compatibility-chrono.lo\n+\tcompatibility-thread-c++0x.lo compatibility-chrono.lo \\\n+\tcompatibility-condvar.lo\n am_libstdc___la_OBJECTS = $(am__objects_2) $(am__objects_3)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -352,7 +353,8 @@ cxx11_sources = \\\n \tcompatibility-c++0x.cc \\\n \tcompatibility-atomic-c++0x.cc \\\n \tcompatibility-thread-c++0x.cc \\\n-\tcompatibility-chrono.cc\n+\tcompatibility-chrono.cc \\\n+\tcompatibility-condvar.cc\n \n libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n libstdc___la_LIBADD = \\\n@@ -854,6 +856,11 @@ compatibility-chrono.lo: compatibility-chrono.cc\n compatibility-chrono.o: compatibility-chrono.cc\n \t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n+compatibility-condvar.lo: compatibility-condvar.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-condvar.o: compatibility-condvar.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n # Symbol versioning for shared libraries.\n @ENABLE_SYMVERS_TRUE@libstdc++-symbols.ver:  ${glibcxx_srcdir}/$(SYMVER_FILE) \\\n @ENABLE_SYMVERS_TRUE@\t\t$(port_specific_symbol_files)"}, {"sha": "006ffe47465861d3794a6c620f098a2b2dcdf7a8", "filename": "libstdc++-v3/src/c++11/compatibility-condvar.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -0,0 +1,57 @@\n+// Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/c++config.h>\n+\n+#if __cplusplus < 201103L\n+# error \"compatibility-condvar-c++0x.cc must be compiled with -std=gnu++11\"\n+#endif\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n+#define condition_variable_any condition_variable_anyXX\n+#include <condition_variable>\n+#undef condition_variable_any\n+\n+// XXX GLIBCXX_ABI Deprecated\n+// gcc-4.9.0\n+// std::condition_variable_any replaced with std::_V2::condition_variable_any\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  class condition_variable_any\n+  {\n+    condition_variable\t\t\t_M_cond;\n+    mutex\t\t\t\t_M_mutex;\n+\n+  public:\n+    condition_variable_any() noexcept;\n+    ~condition_variable_any() noexcept;\n+  };\n+  condition_variable_any::condition_variable_any() noexcept = default;\n+  condition_variable_any::~condition_variable_any() noexcept = default;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "ce2bbf6181c5180335221c5c867e78850fcfdb7b", "filename": "libstdc++-v3/src/c++11/condition_variable.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3429db0fb07ae6f0fb09f72667f5dc0e818df349/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc?ref=3429db0fb07ae6f0fb09f72667f5dc0e818df349", "patch": "@@ -77,10 +77,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __throw_system_error(__e);\n   }\n \n-  condition_variable_any::condition_variable_any() noexcept = default;\n-\n-  condition_variable_any::~condition_variable_any() noexcept = default;\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}]}