{"sha": "e97c94888969b416c239fcaa027770d9b0157323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3Yzk0ODg4OTY5YjQxNmMyMzlmY2FhMDI3NzcwZDliMDE1NzMyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-05-30T08:44:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-05-30T08:44:56Z"}, "message": "re PR c++/2936 (gcc gives me an internal error when compiling mozilla with --enable-optimization=\"-O3\")\n\ncp:\n\tPR g++/2936\n\t* decl.c (finish_anon_union): Copy context.\n\t* optimize.c (remap_decl): Remap anonymous aggregate members too.\ntestsuite:\n\t* g++.old-deja/g++.other/optimize3.C: New file.\n\nFrom-SVN: r42705", "tree": {"sha": "8ba2f374e395671acbd26e6ad707d17c8c1f9df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba2f374e395671acbd26e6ad707d17c8c1f9df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97c94888969b416c239fcaa027770d9b0157323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c94888969b416c239fcaa027770d9b0157323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97c94888969b416c239fcaa027770d9b0157323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c94888969b416c239fcaa027770d9b0157323/comments", "author": null, "committer": null, "parents": [{"sha": "b86ee4a56ded8c3a4090f7eff5b3efd0f95e4bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86ee4a56ded8c3a4090f7eff5b3efd0f95e4bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86ee4a56ded8c3a4090f7eff5b3efd0f95e4bde"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "e78635c8e8bff98a8f0ec740a6c2832091c864f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e97c94888969b416c239fcaa027770d9b0157323", "patch": "@@ -1,3 +1,9 @@\n+2001-05-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR g++/2936\n+\t* decl.c (finish_anon_union): Copy context.\n+\t* optimize.c (remap_decl): Remap anonymous aggregate members too.\n+\n 2001-05-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR g++/2823"}, {"sha": "8676dd80bccc357e1064b0e80b42186257df6b90", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=e97c94888969b416c239fcaa027770d9b0157323", "patch": "@@ -106,8 +106,7 @@ static void update_cloned_parm PARAMS ((tree, tree));\n    decisions about when a function is too big to inline.  */\n #define INSNS_PER_STMT (10)\n \n-/* Remap DECL during the copying of the BLOCK tree for the function.\n-   DATA is really an `inline_data *'.  */\n+/* Remap DECL during the copying of the BLOCK tree for the function.  */\n \n static tree\n remap_decl (decl, id)\n@@ -149,6 +148,26 @@ remap_decl (decl, id)\n \t\t     copy_body_r, id, NULL);\n \t}\n \n+      if (!DECL_NAME (t) && TREE_TYPE (t)\n+\t  && ANON_AGGR_TYPE_P (TREE_TYPE ((t))))\n+\t{\n+\t  /* For a VAR_DECL of anonymous type, we must also copy the\n+\t     member VAR_DECLS here and rechain the\n+\t     DECL_ANON_UNION_ELEMS. */\n+\t  tree members = NULL;\n+\t  tree src;\n+\t  \n+\t  for (src = DECL_ANON_UNION_ELEMS (t); src;\n+\t       src = TREE_CHAIN (src))\n+\t    {\n+\t      tree member = remap_decl (TREE_VALUE (src), id);\n+\n+\t      my_friendly_assert (!TREE_PURPOSE (src), 20010529);\n+\t      members = tree_cons (NULL, member, members);\n+\t    }\n+\t  DECL_ANON_UNION_ELEMS (t) = nreverse (members);\n+\t}\n+      \n       /* Remember it, so that if we encounter this local entity\n \t again we can reuse this copy.  */\n       n = splay_tree_insert (id->decl_map,"}, {"sha": "c5126b7020cf75873b57b8fd179feeba17323fa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e97c94888969b416c239fcaa027770d9b0157323", "patch": "@@ -1,3 +1,7 @@\n+2001-05-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/optimize3.C: New file.\n+\n 2001-05-29  Jeffrey Oldham  <oldham@codesourcery.com>\n \n         * gcc.c-torture/compile/20010518-2.x: New file to compile, not"}, {"sha": "737aabb3a7a359006b92f0033dadd030b87ef3ef", "filename": "gcc/testsuite/g++.old-deja/g++.other/optimize3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c94888969b416c239fcaa027770d9b0157323/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize3.C?ref=e97c94888969b416c239fcaa027770d9b0157323", "patch": "@@ -0,0 +1,38 @@\n+// Special g++ Options: -O2\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 29 May 2001 <nathan@codesourcery.com>\n+\n+// Bug 2936. We ICE'd on tree inlining a function with an anonymous\n+// union decl.\n+\n+inline const unsigned char *Foo (const char *string)\n+{\n+  union\n+  {\n+    const char *p1;\n+    const unsigned char *p2;\n+  };\n+  p1 = 0;\n+  p2 = 0;\n+\n+\n+  p1 = string;\n+  return p2;\n+  \n+}\n+\n+const unsigned char *Baz (const char *string)\n+{\n+  return Foo (string);\n+}\n+\n+int main ()\n+{\n+  const char *string = \"s\";\n+  const unsigned char *result;\n+\n+  result = Baz (string);\n+  return (static_cast <const void *> (result)\n+\t  != static_cast <const void *> (string));\n+}"}]}