{"sha": "dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhZjVhYmYwZjgzMWQyZWQ5NGVlZGYxM2JhMmRkN2Q2NDdiMGFkNw==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-12-20T18:49:22Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-12-20T18:49:22Z"}, "message": "avr.c (out_movsi_r_mr, [...]): Do not output undefined opcodes where source or destination register overlaps...\n\n\t* config/avr/avr.c (out_movsi_r_mr, out_movsi_mr_r, out_movhi_mr_r):\n\tDo not output undefined opcodes where source or destination register\n\toverlaps with modified pointer register.  Handle (X + d) addresses.\n\t* config/avr/avr.md (*movhi, *movsi, *movsf): Correct insn length\n\tin alternatives with memory operand.\n\nFrom-SVN: r38405", "tree": {"sha": "c2ad61ef0ffd7d5c7ea3e7d51f64340708ff3314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2ad61ef0ffd7d5c7ea3e7d51f64340708ff3314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/comments", "author": null, "committer": null, "parents": [{"sha": "64094f6a65becc338e39fe3bc72d83d812c50d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64094f6a65becc338e39fe3bc72d83d812c50d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64094f6a65becc338e39fe3bc72d83d812c50d4d"}], "stats": {"total": 164, "additions": 135, "deletions": 29}, "files": [{"sha": "72dd495a9a1b58ea39fca37fa5e7f13643d8f855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "patch": "@@ -1,3 +1,11 @@\n+2000-12-20  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (out_movsi_r_mr, out_movsi_mr_r, out_movhi_mr_r):\n+\tDo not output undefined opcodes where source or destination register\n+\toverlaps with modified pointer register.  Handle (X + d) addresses.\n+\t* config/avr/avr.md (*movhi, *movsi, *movsf): Correct insn length\n+\tin alternatives with memory operand.\n+\n 2000-12-20  Richard Henderson  <rth@redhat.com>\n \n         * c-typeck.c (build_asm_stmt): New, broken out from ..."}, {"sha": "72c3523ab0e3152486749d863862cbc72313ad64", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 124, "deletions": 26, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "patch": "@@ -1995,12 +1995,14 @@ out_movsi_r_mr (insn, op, l)\n       if (reg_base == REG_X)        /* (R26) */\n         {\n           if (reg_dest == REG_X)\n-            return *l=6, (AS2 (adiw,r26,3) CR_TAB\n-                          AS2 (ld,%D0,X)  CR_TAB\n-                          AS2 (ld,%C0,-X) CR_TAB\n-                          AS2 (ld,__tmp_reg__,-X)  CR_TAB\n-                          AS2 (ld,%A0,-X)  CR_TAB\n-                          AS2 (mov,%B0,__tmp_reg__));\n+\t    /* \"ld r26,-X\" is undefined */\n+\t    return *l=7, (AS2 (adiw,r26,3)        CR_TAB\n+\t\t\t  AS2 (ld,r29,X)          CR_TAB\n+\t\t\t  AS2 (ld,r28,-X)         CR_TAB\n+\t\t\t  AS2 (ld,__tmp_reg__,-X) CR_TAB\n+\t\t\t  AS2 (sbiw,r26,1)        CR_TAB\n+\t\t\t  AS2 (ld,r26,X)          CR_TAB\n+\t\t\t  AS2 (mov,r27,__tmp_reg__));\n           else if (reg_dest == REG_X - 2)\n             return *l=5, (AS2 (ld,%A0,X+)  CR_TAB\n                           AS2 (ld,%B0,X+) CR_TAB\n@@ -2073,6 +2075,37 @@ out_movsi_r_mr (insn, op, l)\n \t}\n \n       reg_base = true_regnum (XEXP (base, 0));\n+      if (reg_base == REG_X)\n+\t{\n+\t  /* R = (X + d) */\n+\t  if (reg_dest == REG_X)\n+\t    {\n+\t      *l = 7;\n+\t      /* \"ld r26,-X\" is undefined */\n+\t      return (AS2 (adiw,r26,%o1+3)    CR_TAB\n+\t\t      AS2 (ld,r29,X)          CR_TAB\n+\t\t      AS2 (ld,r28,-X)         CR_TAB\n+\t\t      AS2 (ld,__tmp_reg__,-X) CR_TAB\n+\t\t      AS2 (sbiw,r26,1)        CR_TAB\n+\t\t      AS2 (ld,r26,X)          CR_TAB\n+\t\t      AS2 (mov,r27,__tmp_reg__));\n+\t    }\n+\t  *l = 6;\n+\t  if (reg_dest == REG_X - 2)\n+\t    return (AS2 (adiw,r26,%o1)      CR_TAB\n+\t\t    AS2 (ld,r24,X+)         CR_TAB\n+\t\t    AS2 (ld,r25,X+)         CR_TAB\n+\t\t    AS2 (ld,__tmp_reg__,X+) CR_TAB\n+\t\t    AS2 (ld,r27,X)          CR_TAB\n+\t\t    AS2 (mov,r26,__tmp_reg__));\n+\n+\t  return (AS2 (adiw,r26,%o1) CR_TAB\n+\t\t  AS2 (ld,%A0,X+)    CR_TAB\n+\t\t  AS2 (ld,%B0,X+)    CR_TAB\n+\t\t  AS2 (ld,%C0,X+)    CR_TAB\n+\t\t  AS2 (ld,%D0,X)     CR_TAB\n+\t\t  AS2 (sbiw,r26,%o1+3));\n+\t}\n       if (reg_dest == reg_base)\n         return *l=5, (AS2 (ldd,%D0,%D1) CR_TAB\n                       AS2 (ldd,%C0,%C1) CR_TAB\n@@ -2137,19 +2170,22 @@ out_movsi_mr_r (insn, op, l)\n         {\n           if (reg_src == REG_X)\n             {\n+\t      /* \"st X+,r26\" is undefined */\n               if (reg_unused_after (insn, base))\n-                return *l=5, (AS2 (mov,__tmp_reg__,%B1) CR_TAB\n-                              AS2 (st,%0+,%A1) CR_TAB\n-                              AS2 (st,%0+,__tmp_reg__)  CR_TAB\n-                              AS2 (st,%0+,%C1) CR_TAB\n-                              AS2 (st,%0,%D1));\n+\t\treturn *l=6, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n+\t\t\t      AS2 (st,X,r26)            CR_TAB\n+\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n+\t\t\t      AS2 (st,X+,__tmp_reg__)   CR_TAB\n+\t\t\t      AS2 (st,X+,r28)           CR_TAB\n+\t\t\t      AS2 (st,X,r29));\n               else\n-                return *l=6, (AS2 (mov,__tmp_reg__,%B1) CR_TAB\n-                              AS2 (st,%0+,%A1) CR_TAB\n-                              AS2 (st,%0+,__tmp_reg__)  CR_TAB\n-                              AS2 (st,%0+,%C1) CR_TAB\n-                              AS2 (st,%0,%D1)  CR_TAB\n-                              AS2 (sbiw,r26,3));\n+                return *l=7, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n+\t\t\t      AS2 (st,X,r26)            CR_TAB\n+\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n+\t\t\t      AS2 (st,X+,__tmp_reg__)   CR_TAB\n+\t\t\t      AS2 (st,X+,r28)           CR_TAB\n+\t\t\t      AS2 (st,X,r29)            CR_TAB\n+\t\t\t      AS2 (sbiw,r26,3));\n             }\n           else if (reg_base == reg_src + 2)\n             {\n@@ -2186,9 +2222,10 @@ out_movsi_mr_r (insn, op, l)\n   else if (GET_CODE (base) == PLUS) /* (R + i) */\n     {\n       int disp = INTVAL (XEXP (base, 1));\n+      reg_base = REGNO (XEXP (base, 0));\n       if (disp > MAX_LD_OFFSET (GET_MODE (dest)))\n \t{\n-\t  if (REGNO (XEXP (base, 0)) != REG_Y)\n+\t  if (reg_base != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n \t    {\n@@ -2213,6 +2250,43 @@ out_movsi_mr_r (insn, op, l)\n \t\t\t   AS2 (sbci, r29, hi8(%4)));\n \t    }\n \t}\n+      if (reg_base == REG_X)\n+\t{\n+\t  /* (X + d) = R */\n+\t  if (reg_src == REG_X)\n+\t    {\n+\t      *l = 9;\n+\t      return (AS2 (mov,__tmp_reg__,r26)  CR_TAB\n+\t\t      AS2 (mov,__zero_reg__,r27) CR_TAB\n+\t\t      AS2 (adiw,r26,%o0)         CR_TAB\n+\t\t      AS2 (st,X+,__tmp_reg__)    CR_TAB\n+\t\t      AS2 (st,X+,__zero_reg__)   CR_TAB\n+\t\t      AS2 (st,X+,r28)            CR_TAB\n+\t\t      AS2 (st,X,r29)             CR_TAB\n+\t\t      AS1 (clr,__zero_reg__)     CR_TAB\n+\t\t      AS2 (sbiw,r26,%o0+3));\n+\t    }\n+\t  else if (reg_src == REG_X - 2)\n+\t    {\n+\t      *l = 9;\n+\t      return (AS2 (mov,__tmp_reg__,r26)  CR_TAB\n+\t\t      AS2 (mov,__zero_reg__,r27) CR_TAB\n+\t\t      AS2 (adiw,r26,%o0)         CR_TAB\n+\t\t      AS2 (st,X+,r24)            CR_TAB\n+\t\t      AS2 (st,X+,r25)            CR_TAB\n+\t\t      AS2 (st,X+,__tmp_reg__)    CR_TAB\n+\t\t      AS2 (st,X,__zero_reg__)    CR_TAB\n+\t\t      AS1 (clr,__zero_reg__)     CR_TAB\n+\t\t      AS2 (sbiw,r26,%o0+3));\n+\t    }\n+\t  *l = 6;\n+\t  return (AS2 (adiw,r26,%o0) CR_TAB\n+\t\t  AS2 (st,X+,%A1)    CR_TAB\n+\t\t  AS2 (st,X+,%B1)    CR_TAB\n+\t\t  AS2 (st,X+,%C1)    CR_TAB\n+\t\t  AS2 (st,X,%D1)     CR_TAB\n+\t\t  AS2 (sbiw,r26,%o0+3));\n+\t}\n       return *l=4, (AS2 (std,%A0,%A1)    CR_TAB\n \t\t    AS2 (std,%B0,%B1) CR_TAB\n \t\t    AS2 (std,%C0,%C1) CR_TAB\n@@ -2545,15 +2619,18 @@ out_movhi_mr_r (insn, op, l)\n         {\n           if (reg_src == REG_X)\n             {\n+\t      /* \"st X+,r26\" is undefined */\n               if (reg_unused_after (insn, src))\n-                return *l=3, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n-                              AS2 (st ,X+,r26) CR_TAB\n-                              AS2 (st ,X,__tmp_reg__));\n+\t\treturn *l=4, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n+\t\t\t      AS2 (st,X,r26)            CR_TAB\n+\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n+\t\t\t      AS2 (st,X,__tmp_reg__));\n               else\n-                return *l=4, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n-                              AS2 (st ,X+,r26) CR_TAB\n-                              AS2 (st ,X,__tmp_reg__)   CR_TAB\n-                              AS2 (sbiw,r26,1));\n+\t\treturn *l=5, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n+\t\t\t      AS2 (st,X,r26)            CR_TAB\n+\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n+\t\t\t      AS2 (st,X,__tmp_reg__)    CR_TAB\n+\t\t\t      AS2 (sbiw,r26,1));\n             }\n           else\n             {\n@@ -2573,9 +2650,10 @@ out_movhi_mr_r (insn, op, l)\n   else if (GET_CODE (base) == PLUS)\n     {\n       int disp = INTVAL (XEXP (base, 1));\n+      reg_base = REGNO (XEXP (base, 0));\n       if (disp > MAX_LD_OFFSET (GET_MODE (dest)))\n \t{\n-\t  if (REGNO (XEXP (base, 0)) != REG_Y)\n+\t  if (reg_base != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n \t    {\n@@ -2596,6 +2674,26 @@ out_movhi_mr_r (insn, op, l)\n \t\t\t   AS2 (sbci, r29, hi8(%4)));\n \t    }\n \t}\n+      if (reg_base == REG_X)\n+\t{\n+\t  /* (X + d) = R */\n+\t  if (reg_src == REG_X)\n+\t    {\n+\t      *l = 7;\n+\t      return (AS2 (mov,__tmp_reg__,r26)  CR_TAB\n+\t\t      AS2 (mov,__zero_reg__,r27) CR_TAB\n+\t\t      AS2 (adiw,r26,%o0)         CR_TAB\n+\t\t      AS2 (st,X+,__tmp_reg__)    CR_TAB\n+\t\t      AS2 (st,X,__zero_reg__)    CR_TAB\n+\t\t      AS1 (clr,__zero_reg__)     CR_TAB\n+\t\t      AS2 (sbiw,r26,%o0+1));\n+\t    }\n+\t  *l = 4;\n+\t  return (AS2 (adiw,r26,%o0) CR_TAB\n+\t\t  AS2 (st,X+,%A1)    CR_TAB\n+\t\t  AS2 (st,X,%B1)     CR_TAB\n+\t\t  AS2 (sbiw,r26,%o0+1));\n+\t}\n       return *l=2, (AS2 (std,%A0,%A1)    CR_TAB\n \t\t    AS2 (std,%B0,%B1));\n     }"}, {"sha": "c3a5e3717f720ccc9d1a524e7f73dd5203782951", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=dfaf5abf0f831d2ed94eedf13ba2dd7d647b0ad7", "patch": "@@ -246,7 +246,7 @@\n   \"(register_operand (operands[0],HImode)\n     || register_operand (operands[1],HImode) || const0_rtx == operands[1])\"\n   \"* return output_movhi (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"2,4,4,2,6,5,2\")\n+  [(set_attr \"length\" \"2,6,7,2,6,5,2\")\n    (set_attr \"cc\" \"none,clobber,clobber,none,clobber,none,none\")])\n \n ;;==========================================================================\n@@ -295,7 +295,7 @@\n   \"(register_operand (operands[0],SImode)\n     || register_operand (operands[1],SImode) || const0_rtx == operands[1])\"\n   \"* return output_movsisf (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"4,4,8,8,4,10\")\n+  [(set_attr \"length\" \"4,4,8,9,4,10\")\n    (set_attr \"cc\" \"none,set_zn,clobber,clobber,none,clobber\")])\n \n ;; fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n@@ -321,7 +321,7 @@\n   \"register_operand (operands[0], SFmode)\n    || register_operand (operands[1], SFmode)\"\n   \"* return output_movsisf (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"4,4,8,8,4,10\")\n+  [(set_attr \"length\" \"4,4,8,9,4,10\")\n    (set_attr \"cc\" \"none,set_zn,clobber,clobber,none,clobber\")])\n \n ;;========================================================================="}]}