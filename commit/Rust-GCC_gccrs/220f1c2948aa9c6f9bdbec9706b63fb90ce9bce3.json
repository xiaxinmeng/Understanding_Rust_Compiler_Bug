{"sha": "220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwZjFjMjk0OGFhOWM2ZjliZGJlYzk3MDZiNjNmYjkwY2U5YmNlMw==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2008-04-01T18:40:16Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2008-04-01T18:40:16Z"}, "message": "tree-cfg.c (verify_expr): remove in_phi.\n\n2008-04-01  Rafael Espindola  <espindola@google.com>\n\n\t* tree-cfg.c (verify_expr): remove in_phi.\n        (verify_stmt): Don't call walk_tree with verify_expr. Use\n\tis_gimple_min_invariant instead of is_gimple_val.\n\nFrom-SVN: r133795", "tree": {"sha": "2160cdaf18effd71178affe768543335444813c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2160cdaf18effd71178affe768543335444813c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3/comments", "author": null, "committer": null, "parents": [{"sha": "7f9766e49a1f3c833b8bb9feca7f0a54483a7031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9766e49a1f3c833b8bb9feca7f0a54483a7031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9766e49a1f3c833b8bb9feca7f0a54483a7031"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "358a8eff6cc9f294c7253942080ad7c1fac18034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "patch": "@@ -1,3 +1,9 @@\n+2008-04-01  Rafael Espindola  <espindola@google.com>\n+\n+\t* tree-cfg.c (verify_expr): remove in_phi.\n+        (verify_stmt): Don't call walk_tree with verify_expr. Use\n+\tis_gimple_min_invariant instead of is_gimple_val.\n+\n 2008-04-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/include/gpl_v3.texi: Update for manpage generation."}, {"sha": "944b31f3725e3825efcd17b96c832c9301eba4bc", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=220f1c2948aa9c6f9bdbec9706b63fb90ce9bce3", "patch": "@@ -3113,7 +3113,6 @@ static tree\n verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n   tree t = *tp, x;\n-  bool in_phi = (data != NULL);\n \n   if (TYPE_P (t))\n     *walk_subtrees = 0;\n@@ -3164,23 +3163,6 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \tbool new_constant;\n \tbool new_side_effects;\n \n-        /* ??? tree-ssa-alias.c may have overlooked dead PHI nodes, missing\n-\t   dead PHIs that take the address of something.  But if the PHI\n-\t   result is dead, the fact that it takes the address of anything\n-\t   is irrelevant.  Because we can not tell from here if a PHI result\n-\t   is dead, we just skip this check for PHIs altogether.  This means\n-\t   we may be missing \"valid\" checks, but what can you do?\n-\t   This was PR19217.  */\n-        if (in_phi)\n-\t  {\n-\t    if (!is_gimple_min_invariant (t))\n-\t      {\n-\t\terror (\"non-invariant address expression in PHI argument\");\n-\t\treturn t;\n-\t      }\n-\t    break;\n-\t  }\n-\n \told_invariant = TREE_INVARIANT (t);\n \told_constant = TREE_CONSTANT (t);\n \told_side_effects = TREE_SIDE_EFFECTS (t);\n@@ -4338,21 +4320,14 @@ verify_stmts (void)\n \t\t are not considered gimple values.  */\n \t      else if (TREE_CODE (t) != SSA_NAME\n \t\t       && TREE_CODE (t) != FUNCTION_DECL\n-\t\t       && !is_gimple_val (t))\n+\t\t       && !is_gimple_min_invariant (t))\n \t\t{\n \t\t  error (\"PHI def is not a GIMPLE value\");\n \t\t  debug_generic_stmt (phi);\n \t\t  debug_generic_stmt (t);\n \t\t  err |= true;\n \t\t}\n \n-\t      addr = walk_tree (&t, verify_expr, (void *) 1, NULL);\n-\t      if (addr)\n-\t\t{\n-\t\t  debug_generic_stmt (addr);\n-\t\t  err |= true;\n-\t\t}\n-\n \t      addr = walk_tree (&t, verify_node_sharing, visited, NULL);\n \t      if (addr)\n \t\t{"}]}