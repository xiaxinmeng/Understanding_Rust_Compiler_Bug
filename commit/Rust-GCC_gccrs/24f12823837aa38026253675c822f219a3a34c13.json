{"sha": "24f12823837aa38026253675c822f219a3a34c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmMTI4MjM4MzdhYTM4MDI2MjUzNjc1YzgyMmYyMTlhM2EzNGMxMw==", "commit": {"author": {"name": "Volker Reichelt", "email": "v.reichelt@netcologne.de", "date": "2017-02-27T13:29:35Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2017-02-27T13:29:35Z"}, "message": "init.c: Include intl.h.\n\n2017-02-27  Volker Reichelt  <v.reichelt@netcologne.de>\n\n       * init.c: Include intl.h.\n       (build_new_1): Move message strings into pedwarn to make them\n       -Wformat-security friendly. Mark string for translation.\n       * pt.c (tsubst_copy_and_build): Mark string for translation.\n       Make the pointer const.\n       * semantics.c (finish_id_expression): Mark strings for\n       * translation.\n\nFrom-SVN: r245757", "tree": {"sha": "d07c2ed2cb36a889c6abbfe3a12bde7bea896e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07c2ed2cb36a889c6abbfe3a12bde7bea896e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f12823837aa38026253675c822f219a3a34c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f12823837aa38026253675c822f219a3a34c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f12823837aa38026253675c822f219a3a34c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f12823837aa38026253675c822f219a3a34c13/comments", "author": {"login": "VReichelt", "id": 85767072, "node_id": "MDQ6VXNlcjg1NzY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/85767072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VReichelt", "html_url": "https://github.com/VReichelt", "followers_url": "https://api.github.com/users/VReichelt/followers", "following_url": "https://api.github.com/users/VReichelt/following{/other_user}", "gists_url": "https://api.github.com/users/VReichelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/VReichelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VReichelt/subscriptions", "organizations_url": "https://api.github.com/users/VReichelt/orgs", "repos_url": "https://api.github.com/users/VReichelt/repos", "events_url": "https://api.github.com/users/VReichelt/events{/privacy}", "received_events_url": "https://api.github.com/users/VReichelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c91c3003b5c4170652925da487d22336461175eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91c3003b5c4170652925da487d22336461175eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91c3003b5c4170652925da487d22336461175eb"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "b2459ce2eb5cbcb2869d4b342a60aafefbff926e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24f12823837aa38026253675c822f219a3a34c13", "patch": "@@ -1,3 +1,12 @@\n+2017-02-27  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* init.c: Include intl.h.\n+\t(build_new_1): Move message strings into pedwarn to make them\n+\t-Wformat-security friendly. Mark string for translation.\n+\t* pt.c (tsubst_copy_and_build): Mark string for translation.\n+\tMake the pointer const.\n+\t* semantics.c (finish_id_expression): Mark strings for translation.\n+\n 2017-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* call.c (build_op_delete_call): Make msg1 and msg2 const."}, {"sha": "b8308227988aea10c738706cb24b8bc5cbaa30b5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=24f12823837aa38026253675c822f219a3a34c13", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"gimplify.h\"\n #include \"c-family/c-ubsan.h\"\n+#include \"intl.h\"\n \n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);\n@@ -2803,15 +2804,12 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n     {\n       if (complain & tf_warning_or_error)\n \t{\n-\t  const char *msg;\n-\t  if (typedef_variant_p (orig_type))\n-\t    msg = (\"non-constant array new length must be specified \"\n-\t\t   \"directly, not by typedef\");\n-\t  else\n-\t    msg = (\"non-constant array new length must be specified \"\n-\t\t   \"without parentheses around the type-id\");\n-\t  pedwarn (EXPR_LOC_OR_LOC (outer_nelts, input_location),\n-\t\t   OPT_Wvla, msg);\n+\t  pedwarn (EXPR_LOC_OR_LOC (outer_nelts, input_location), OPT_Wvla,\n+\t\t   typedef_variant_p (orig_type)\n+\t\t   ? \"non-constant array new length must be specified \"\n+\t\t     \"directly, not by typedef\"\n+\t\t   : G_(\"non-constant array new length must be specified \"\n+\t\t\t\"without parentheses around the type-id\"));\n \t}\n       else\n \treturn error_mark_node;"}, {"sha": "d5428ed9feb27a21e7f82912ac5dc40542cb158f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=24f12823837aa38026253675c822f219a3a34c13", "patch": "@@ -17190,10 +17190,11 @@ tsubst_copy_and_build (tree t,\n \t\t       stricter.  */\n \t\t    bool in_lambda = (current_class_type\n \t\t\t\t      && LAMBDA_TYPE_P (current_class_type));\n-\t\t    char const *msg = \"%qD was not declared in this scope, \"\n-\t\t      \"and no declarations were found by \"\n-\t\t      \"argument-dependent lookup at the point \"\n-\t\t      \"of instantiation\";\n+\t\t    char const *const msg\n+\t\t      = G_(\"%qD was not declared in this scope, \"\n+\t\t\t   \"and no declarations were found by \"\n+\t\t\t   \"argument-dependent lookup at the point \"\n+\t\t\t   \"of instantiation\");\n \n \t\t    bool diag = true;\n \t\t    if (in_lambda)"}, {"sha": "bcfdd668c3a36ffe943c5d0b8892f6c81c5bed32", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f12823837aa38026253675c822f219a3a34c13/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=24f12823837aa38026253675c822f219a3a34c13", "patch": "@@ -3510,7 +3510,7 @@ finish_id_expression (tree id_expression,\n \t  && DECL_CONTEXT (decl) == NULL_TREE\n \t  && !cp_unevaluated_operand)\n \t{\n-\t  *error_msg = \"use of parameter outside function body\";\n+\t  *error_msg = G_(\"use of parameter outside function body\");\n \t  return error_mark_node;\n \t}\n     }\n@@ -3520,13 +3520,13 @@ finish_id_expression (tree id_expression,\n   if (TREE_CODE (decl) == TEMPLATE_DECL\n       && !DECL_FUNCTION_TEMPLATE_P (decl))\n     {\n-      *error_msg = \"missing template arguments\";\n+      *error_msg = G_(\"missing template arguments\");\n       return error_mark_node;\n     }\n   else if (TREE_CODE (decl) == TYPE_DECL\n \t   || TREE_CODE (decl) == NAMESPACE_DECL)\n     {\n-      *error_msg = \"expected primary-expression\";\n+      *error_msg = G_(\"expected primary-expression\");\n       return error_mark_node;\n     }\n "}]}