{"sha": "eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NDVlNDBmZTYwNDkwY2U3ZjBjZjFjMWJmM2IwMDg0ZDM0MDkyMw==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2012-12-27T01:58:06Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2012-12-27T01:58:06Z"}, "message": "Before this patch...\n\nBefore this patch, function multiversioning determines that two functions\nare different by comparing the arch type and isa flags that are set\nafter the target string is processed. This leads to cases where  the\nversions become identical when the command-line target options are\naltered.\n\nThis patch modifies the function version determination to\njust compare the target string.\n\n\n2012-12-27  Sriraman Tallam  <tmsriram@google.com>\n\n\t* doc/tm.texi.in (TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS): Document\n\tnew target hook.\n\t* doc/tm.texi: Regenerate.\n\t* c-family/c-common.c (handle_target_attribute): Retain target attribute\n\tfor targets that support versioning.\n\t* target.def (supports_function_versions): New hook.\n\t* cp/class.c (add_method): Remove calls\n\tto DECL_FUNCTION_SPECIFIC_TARGET.\n\t* config/i386/i386.c (ix86_function_versions): Use target string\n\tto check for function versions instead of target flags.\n\t* (ix86_supports_function_versions): New function.\n\t* (is_function_default_version): Check target string.\n\t* TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS: New macro.\n\n2012-12-27  Sriraman Tallam  <tmsriram@google.com>\n\n\t* testsuite/g++.dg/mv1.C: Remove target options.\n\t* testsuite/g++.dg/mv2.C: Ditto.\n\t* testsuite/g++.dg/mv3.C: Ditto.\n\t* testsuite/g++.dg/mv4.C: Ditto.\n\t* testsuite/g++.dg/mv5.C: Ditto.\n\nFrom-SVN: r194730", "tree": {"sha": "6ecc2e00fdb5157210f90bdc5849eedd4a227257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecc2e00fdb5157210f90bdc5849eedd4a227257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/comments", "author": null, "committer": null, "parents": [{"sha": "1b9c5a882fd2ac3c7c9f9e176dc61a1e4b2303aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9c5a882fd2ac3c7c9f9e176dc61a1e4b2303aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9c5a882fd2ac3c7c9f9e176dc61a1e4b2303aa"}], "stats": {"total": 164, "additions": 114, "deletions": 50}, "files": [{"sha": "148388d4aa9142b4c4a9685c2e559087016cddcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -1,7 +1,26 @@\n+<<<<<<< .mine\n+2012-12-26  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* doc/tm.texi.in (TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS): Document\n+\tnew target hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* c-family/c-common.c (handle_target_attribute): Retain target attribute\n+\tfor targets that support versioning.\n+\t* target.def (supports_function_versions): New hook.\n+\t* cp/class.c (add_method): Remove calls\n+\tto DECL_FUNCTION_SPECIFIC_TARGET.\n+\t* config/i386/i386.c (ix86_function_versions): Use target string\n+\tto check for function versions instead of target flags.\n+\t* (ix86_supports_function_versions): New function.\n+\t* (is_function_default_version): Check target string.\n+\t* TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS: New macro.\n+\n+=======\n 2012-12-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cgraph.c (verify_cgraph_node): Don't allocate/free visited_nodes set.\n \n+>>>>>>> .r194729\n 2012-12-25  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/53789"}, {"sha": "012751330f3d2dd0a469129fffbbf2e749171e16", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -8742,8 +8742,12 @@ handle_target_attribute (tree *node, tree name, tree args, int flags,\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n+  /* Do not strip invalid target attributes for targets which support function\n+     multiversioning as the target string is used to determine versioned\n+     functions.  */\n   else if (! targetm.target_option.valid_attribute_p (*node, name, args,\n-\t\t\t\t\t\t      flags))\n+\t\t\t\t\t\t      flags)\n+\t   && ! targetm.target_option.supports_function_versions ())\n     *no_add_attrs = true;\n \n   return NULL_TREE;"}, {"sha": "08eb06cded851222e69f9fde1be5a1b686fee7b8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 59, "deletions": 42, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -28945,47 +28945,6 @@ dispatch_function_versions (tree dispatch_decl,\n   return 0;\n }\n \n-/* This function returns true if FN1 and FN2 are versions of the same function,\n-   that is, the targets of the function decls are different.  This assumes\n-   that FN1 and FN2 have the same signature.  */\n-\n-static bool\n-ix86_function_versions (tree fn1, tree fn2)\n-{\n-  tree attr1, attr2;\n-  struct cl_target_option *target1, *target2;\n-\n-  if (TREE_CODE (fn1) != FUNCTION_DECL\n-      || TREE_CODE (fn2) != FUNCTION_DECL)\n-    return false;\n-\n-  attr1 = DECL_FUNCTION_SPECIFIC_TARGET (fn1);\n-  attr2 = DECL_FUNCTION_SPECIFIC_TARGET (fn2);\n-\n-  /* Atleast one function decl should have target attribute specified.  */\n-  if (attr1 == NULL_TREE && attr2 == NULL_TREE)\n-    return false;\n-\n-  if (attr1 == NULL_TREE)\n-    attr1 = target_option_default_node;\n-  else if (attr2 == NULL_TREE)\n-    attr2 = target_option_default_node;\n-\n-  target1 = TREE_TARGET_OPTION (attr1);\n-  target2 = TREE_TARGET_OPTION (attr2);\n-\n-  /* target1 and target2 must be different in some way.  */\n-  if (target1->x_ix86_isa_flags == target2->x_ix86_isa_flags\n-      && target1->x_target_flags == target2->x_target_flags\n-      && target1->arch == target2->arch\n-      && target1->tune == target2->tune\n-      && target1->x_ix86_fpmath == target2->x_ix86_fpmath\n-      && target1->branch_cost == target2->branch_cost)\n-    return false;\n-\n-  return true;\n-}\n-\n /* Comparator function to be used in qsort routine to sort attribute\n    specification strings to \"target\".  */\n \n@@ -29098,6 +29057,60 @@ ix86_mangle_function_version_assembler_name (tree decl, tree id)\n   return get_identifier (assembler_name);\n }\n \n+/* This function returns true if FN1 and FN2 are versions of the same function,\n+   that is, the target strings of the function decls are different.  This assumes\n+   that FN1 and FN2 have the same signature.  */\n+\n+static bool\n+ix86_function_versions (tree fn1, tree fn2)\n+{\n+  tree attr1, attr2;\n+  const char *attr_str1, *attr_str2;\n+  char *target1, *target2;\n+  bool result;\n+  \n+  if (TREE_CODE (fn1) != FUNCTION_DECL\n+      || TREE_CODE (fn2) != FUNCTION_DECL)\n+    return false;\n+\n+  attr1 = lookup_attribute (\"target\", DECL_ATTRIBUTES (fn1));\n+  attr2 = lookup_attribute (\"target\", DECL_ATTRIBUTES (fn2));\n+\n+  /* At least one function decl should have the target attribute specified.  */\n+  if (attr1 == NULL_TREE && attr2 == NULL_TREE)\n+    return false;\n+\n+  /* If one function does not have a target attribute, these are versions.  */\n+  if (attr1 == NULL_TREE || attr2 == NULL_TREE)\n+    return true;\n+\n+  attr_str1 =  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr1)));\n+  attr_str2 =  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr2)));\n+\n+  target1 = sorted_attr_string (attr_str1);\n+  target2 = sorted_attr_string (attr_str2);\n+\n+  /* The sorted target strings must be different for fn1 and fn2\n+     to be versions.  */\n+  if (strcmp (target1, target2) == 0)\n+    result = false;\n+  else\n+    result = true;\n+\n+  free (target1);\n+  free (target2); \n+  \n+  return result;\n+}\n+\n+/* This target supports function multiversioning.  */\n+\n+static bool\n+ix86_supports_function_versions (void)\n+{\n+  return true;\n+}\n+\n static tree \n ix86_mangle_decl_assembler_name (tree decl, tree id)\n {\n@@ -29195,7 +29208,7 @@ is_function_default_version (const tree decl)\n {\n   return (TREE_CODE (decl) == FUNCTION_DECL\n \t  && DECL_FUNCTION_VERSIONED (decl)\n-\t  && DECL_FUNCTION_SPECIFIC_TARGET (decl) == NULL_TREE);\n+\t  && lookup_attribute (\"target\", DECL_ATTRIBUTES (decl)) == NULL_TREE);\n }\n \n /* Make a dispatcher declaration for the multi-versioned function DECL.\n@@ -42463,6 +42476,10 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_OPTION_FUNCTION_VERSIONS\n #define TARGET_OPTION_FUNCTION_VERSIONS ix86_function_versions\n \n+#undef TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS\n+#define TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS \\\n+  ix86_supports_function_versions\n+\n #undef TARGET_CAN_INLINE_P\n #define TARGET_CAN_INLINE_P ix86_can_inline_p\n "}, {"sha": "0aecabb380e6cda713abff0d226fb1bf308e73ee", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -1096,8 +1096,6 @@ add_method (tree type, tree method, tree using_decl)\n \t      && TREE_CODE (method) == FUNCTION_DECL\n \t      && !DECL_EXTERN_C_P (fn)\n \t      && !DECL_EXTERN_C_P (method)\n-\t      && (DECL_FUNCTION_SPECIFIC_TARGET (fn)\n-\t\t  || DECL_FUNCTION_SPECIFIC_TARGET (method))\n \t      && targetm.target_option.function_versions (fn, method))\n  \t    {\n \t      /* Mark functions as versions if necessary.  Modify the mangled"}, {"sha": "55a103700f69dbb25c8fdea827c61c2e71a8939c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -9909,6 +9909,11 @@ different target specific attributes, that is, they are compiled for\n different target machines.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS (void)\n+This target hook returns @code{true} if the target supports function\n+multiversioning.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_CAN_INLINE_P (tree @var{caller}, tree @var{callee})\n This target hook returns @code{false} if the @var{caller} function\n cannot inline @var{callee}, based on target specific information.  By"}, {"sha": "e820f77be458d7f690436fe38ae9cda297ed4beb", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -9770,6 +9770,11 @@ different target specific attributes, that is, they are compiled for\n different target machines.\n @end deftypefn\n \n+@hook TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS\n+This target hook returns @code{true} if the target supports function\n+multiversioning.\n+@end deftypefn\n+\n @hook TARGET_CAN_INLINE_P\n This target hook returns @code{false} if the @var{caller} function\n cannot inline @var{callee}, based on target specific information.  By"}, {"sha": "79bb955a05ea85df674c3a3933448f00193c3940", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -2833,6 +2833,14 @@ DEFHOOK\n  bool, (tree decl1, tree decl2),\n  hook_bool_tree_tree_false)\n \n+/* This function returns true if the target supports function\n+   multiversioning.  */\n+DEFHOOK\n+(supports_function_versions,\n+ \"\",\n+ bool, (void),\n+ hool_bool_void_false)\n+\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}, {"sha": "0d97252967a044aced2e626067990df6e8b78298", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -1,3 +1,11 @@\n+2012-12-27  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* testsuite/g++.dg/mv1.C: Remove target options.\n+\t* testsuite/g++.dg/mv2.C: Ditto.\n+\t* testsuite/g++.dg/mv3.C: Ditto.\n+\t* testsuite/g++.dg/mv4.C: Ditto.\n+\t* testsuite/g++.dg/mv5.C: Ditto.\n+\n 2012-12-26  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/55539"}, {"sha": "bad0c4496d34829cf46ea9868c9cc9067c800612", "filename": "gcc/testsuite/g++.dg/mv1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv1.C?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -1,7 +1,7 @@\n /* Test case to check if Multiversioning works.  */\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-ifunc \"\" }  */\n-/* { dg-options \"-O2 -fPIC -march=x86-64 -mno-avx -mno-popcnt\" } */\n+/* { dg-options \"-O2 -fPIC\" } */\n \n #include <assert.h>\n "}, {"sha": "baaa5da350aabdba58659ab5e5e4d485ae27d88d", "filename": "gcc/testsuite/g++.dg/mv2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv2.C?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -2,7 +2,7 @@\n    dispatching order when versions are for various ISAs.  */\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-ifunc \"\" }  */\n-/* { dg-options \"-O2 -mno-sse -mno-mmx -mno-popcnt -mno-avx\" } */\n+/* { dg-options \"-O2\" } */\n \n #include <assert.h>\n "}, {"sha": "ec2aa1ffec234646d927b4b4b4fe9eb4f5f9ef4e", "filename": "gcc/testsuite/g++.dg/mv3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv3.C?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -10,7 +10,7 @@\n    test should pass.  */\n \n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -mno-sse -mno-popcnt\" } */\n+/* { dg-options \"-O2\" } */\n \n \n int __attribute__ ((target (\"sse\")))"}, {"sha": "ff1cc2f63f43bfe03eb0975e9bac57ecb533f92e", "filename": "gcc/testsuite/g++.dg/mv4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv4.C?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-ifunc \"\" }  */\n-/* { dg-options \"-O2 -mno-sse -mno-popcnt\" } */\n+/* { dg-options \"-O2\" } */\n \n int __attribute__ ((target (\"sse\")))\n foo ()"}, {"sha": "93daab650e050108de77f0cd3063a56039d9a822", "filename": "gcc/testsuite/g++.dg/mv5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb745e40fe60490ce7f0cf1c1bf3b0084d340923/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmv5.C?ref=eb745e40fe60490ce7f0cf1c1bf3b0084d340923", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-ifunc \"\" }  */\n-/* { dg-options \"-O2  -mno-popcnt\" } */\n+/* { dg-options \"-O2\" } */\n \n \n /* Default version.  */"}]}