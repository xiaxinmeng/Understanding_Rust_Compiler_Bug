{"sha": "86f1f8581b02f7f0fc88efb3ea210c9aece12880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmMWY4NTgxYjAyZjdmMGZjODhlZmIzZWEyMTBjOWFlY2UxMjg4MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-25T19:24:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-25T19:24:12Z"}, "message": "tree.c (get_set_constructor_bits, [...]): Remove.\n\n\t* tree.c (get_set_constructor_bits,\n\tget_set_constructor_bytes): Remove.\n\t* tree.h: Remove the corresponding prototypes.\n\nFrom-SVN: r97057", "tree": {"sha": "0a97824aedf48f97f51f1e0d8d3fcd307af86e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a97824aedf48f97f51f1e0d8d3fcd307af86e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86f1f8581b02f7f0fc88efb3ea210c9aece12880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f1f8581b02f7f0fc88efb3ea210c9aece12880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f1f8581b02f7f0fc88efb3ea210c9aece12880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f1f8581b02f7f0fc88efb3ea210c9aece12880/comments", "author": null, "committer": null, "parents": [{"sha": "bef87a346c2ebf741fa60ca0c80f8f559551e6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef87a346c2ebf741fa60ca0c80f8f559551e6e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef87a346c2ebf741fa60ca0c80f8f559551e6e6"}], "stats": {"total": 99, "additions": 4, "deletions": 95}, "files": [{"sha": "5acc17367d6966c587b8f6689359575ed0aed18e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86f1f8581b02f7f0fc88efb3ea210c9aece12880", "patch": "@@ -5,6 +5,10 @@\n \t* et-forest.c (et_free_tree_force): New.\n \t* et-forest.h: Add a prototype for et_free_tree_force.\n \n+\t* tree.c (get_set_constructor_bits,\n+\tget_set_constructor_bytes): Remove.\n+\t* tree.h: Remove the corresponding prototypes.\n+\n 2005-03-25  John David Anglin  <dave.anglin@nrc-crnc.gc.ca>\n \n \tPR target/15491"}, {"sha": "de1ffb21d66ddcdcff90d221a6be1736cefdff7b", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=86f1f8581b02f7f0fc88efb3ea210c9aece12880", "patch": "@@ -5357,99 +5357,6 @@ get_file_function_name (int kind)\n   return get_file_function_name_long (p);\n }\n \f\n-/* Expand (the constant part of) a SET_TYPE CONSTRUCTOR node.\n-   The result is placed in BUFFER (which has length BIT_SIZE),\n-   with one bit in each char ('\\000' or '\\001').\n-\n-   If the constructor is constant, NULL_TREE is returned.\n-   Otherwise, a TREE_LIST of the non-constant elements is emitted.  */\n-\n-tree\n-get_set_constructor_bits (tree init, char *buffer, int bit_size)\n-{\n-  int i;\n-  tree vals;\n-  HOST_WIDE_INT domain_min\n-    = tree_low_cst (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (init))), 0);\n-  tree non_const_bits = NULL_TREE;\n-\n-  for (i = 0; i < bit_size; i++)\n-    buffer[i] = 0;\n-\n-  for (vals = TREE_OPERAND (init, 1);\n-       vals != NULL_TREE; vals = TREE_CHAIN (vals))\n-    {\n-      if (!host_integerp (TREE_VALUE (vals), 0)\n-\t  || (TREE_PURPOSE (vals) != NULL_TREE\n-\t      && !host_integerp (TREE_PURPOSE (vals), 0)))\n-\tnon_const_bits\n-\t  = tree_cons (TREE_PURPOSE (vals), TREE_VALUE (vals), non_const_bits);\n-      else if (TREE_PURPOSE (vals) != NULL_TREE)\n-\t{\n-\t  /* Set a range of bits to ones.  */\n-\t  HOST_WIDE_INT lo_index\n-\t    = tree_low_cst (TREE_PURPOSE (vals), 0) - domain_min;\n-\t  HOST_WIDE_INT hi_index\n-\t    = tree_low_cst (TREE_VALUE (vals), 0) - domain_min;\n-\n-\t  gcc_assert (lo_index >= 0);\n-\t  gcc_assert (lo_index < bit_size);\n-\t  gcc_assert (hi_index >= 0);\n-\t  gcc_assert (hi_index < bit_size);\n-\t  for (; lo_index <= hi_index; lo_index++)\n-\t    buffer[lo_index] = 1;\n-\t}\n-      else\n-\t{\n-\t  /* Set a single bit to one.  */\n-\t  HOST_WIDE_INT index\n-\t    = tree_low_cst (TREE_VALUE (vals), 0) - domain_min;\n-\t  if (index < 0 || index >= bit_size)\n-\t    {\n-\t      error (\"invalid initializer for bit string\");\n-\t      return NULL_TREE;\n-\t    }\n-\t  buffer[index] = 1;\n-\t}\n-    }\n-  return non_const_bits;\n-}\n-\n-/* Expand (the constant part of) a SET_TYPE CONSTRUCTOR node.\n-   The result is placed in BUFFER (which is an array of bytes).\n-   If the constructor is constant, NULL_TREE is returned.\n-   Otherwise, a TREE_LIST of the non-constant elements is emitted.  */\n-\n-tree\n-get_set_constructor_bytes (tree init, unsigned char *buffer, int wd_size)\n-{\n-  int i;\n-  int set_word_size = BITS_PER_UNIT;\n-  int bit_size = wd_size * set_word_size;\n-  int bit_pos = 0;\n-  unsigned char *bytep = buffer;\n-  char *bit_buffer = alloca (bit_size);\n-  tree non_const_bits = get_set_constructor_bits (init, bit_buffer, bit_size);\n-\n-  for (i = 0; i < wd_size; i++)\n-    buffer[i] = 0;\n-\n-  for (i = 0; i < bit_size; i++)\n-    {\n-      if (bit_buffer[i])\n-\t{\n-\t  if (BYTES_BIG_ENDIAN)\n-\t    *bytep |= (1 << (set_word_size - 1 - bit_pos));\n-\t  else\n-\t    *bytep |= 1 << bit_pos;\n-\t}\n-      bit_pos++;\n-      if (bit_pos >= set_word_size)\n-\tbit_pos = 0, bytep++;\n-    }\n-  return non_const_bits;\n-}\n-\f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n /* Complain that the tree code of NODE does not match the expected 0"}, {"sha": "bb4f4539b6a341bf2a7fab974bac82c5e32beddf", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f1f8581b02f7f0fc88efb3ea210c9aece12880/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=86f1f8581b02f7f0fc88efb3ea210c9aece12880", "patch": "@@ -3460,8 +3460,6 @@ extern GTY(()) const char * current_function_func_begin_label;\n extern unsigned crc32_string (unsigned, const char *);\n extern void clean_symbol_name (char *);\n extern tree get_file_function_name_long (const char *);\n-extern tree get_set_constructor_bits (tree, char *, int);\n-extern tree get_set_constructor_bytes (tree, unsigned char *, int);\n extern tree get_callee_fndecl (tree);\n extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (tree);"}]}