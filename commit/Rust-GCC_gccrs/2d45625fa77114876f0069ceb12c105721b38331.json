{"sha": "2d45625fa77114876f0069ceb12c105721b38331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0NTYyNWZhNzcxMTQ4NzZmMDA2OWNlYjEyYzEwNTcyMWIzODMzMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-07T19:51:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-07T19:51:28Z"}, "message": "re PR c++/51312 ([C++0x] Wrong interpretation of converted constant expressions (for enumerator initializers))\n\n/cp\n2014-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51312\n\t* decl.c (build_enumerator): Handle class types with conversion\n\toperators via perform_implicit_conversion_flags and\n\tbuild_expr_type_conversion.\n\n\t* cvt.c (build_expr_type_conversion): Replace pair of errors\n\twith error + inform.\n\n/testsuite\n2014-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51312\n\t* g++.dg/cpp0x/enum29.C: New.\n\nFrom-SVN: r213736", "tree": {"sha": "f8d388592ee3f6aa02f7d7dfeb975b4d0305f9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d388592ee3f6aa02f7d7dfeb975b4d0305f9a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d45625fa77114876f0069ceb12c105721b38331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d45625fa77114876f0069ceb12c105721b38331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d45625fa77114876f0069ceb12c105721b38331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d45625fa77114876f0069ceb12c105721b38331/comments", "author": null, "committer": null, "parents": [{"sha": "4a53d90b5fa1d6db71b2c9d384a74c88c3d2b58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a53d90b5fa1d6db71b2c9d384a74c88c3d2b58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a53d90b5fa1d6db71b2c9d384a74c88c3d2b58b"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "0e70c5f71290afa9f8b8b9d39223b01ec0da1fd9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d45625fa77114876f0069ceb12c105721b38331", "patch": "@@ -1,3 +1,13 @@\n+2014-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51312\n+\t* decl.c (build_enumerator): Handle class types with conversion\n+\toperators via perform_implicit_conversion_flags and\n+\tbuild_expr_type_conversion.\n+\n+\t* cvt.c (build_expr_type_conversion): Replace pair of errors\n+\twith error + inform.\n+\n 2014-08-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/62043"}, {"sha": "7be4f311a35a56dd3c6661a400dd772caaeaa0f1", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2d45625fa77114876f0069ceb12c105721b38331", "patch": "@@ -1658,8 +1658,9 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t\t    {\n \t\t      error (\"ambiguous default type conversion from %qT\",\n \t\t\t     basetype);\n-\t\t      error (\"  candidate conversions include %qD and %qD\",\n-\t\t\t     winner, cand);\n+\t\t      inform (input_location,\n+\t\t\t      \"  candidate conversions include %qD and %qD\",\n+\t\t\t      winner, cand);\n \t\t    }\n \t\t  return error_mark_node;\n \t\t}"}, {"sha": "bb6135b631f0b5e5c5b59c8a6c614edfc268d1db", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2d45625fa77114876f0069ceb12c105721b38331", "patch": "@@ -12966,14 +12966,32 @@ build_enumerator (tree name, tree value, tree enumtype, location_t loc)\n       /* Validate and default VALUE.  */\n       if (value != NULL_TREE)\n \t{\n-\t  value = cxx_constant_value (value);\n+\t  if (!ENUM_UNDERLYING_TYPE (enumtype))\n+\t    {\n+\t      tree tmp_value = build_expr_type_conversion (WANT_INT | WANT_ENUM,\n+\t\t\t\t\t\t\t   value, true);\n+\t      if (tmp_value)\n+\t\tvalue = tmp_value;\n+\t    }\n+\t  else if (! INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (value)))\n+\t    value = perform_implicit_conversion_flags\n+\t      (ENUM_UNDERLYING_TYPE (enumtype), value, tf_warning_or_error,\n+\t       LOOKUP_IMPLICIT | LOOKUP_NO_NARROWING);\n \n-\t  if (TREE_CODE (value) != INTEGER_CST\n-\t      || ! INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (value)))\n+\t  if (value == error_mark_node)\n+\t    value = NULL_TREE;\n+\n+\t  if (value != NULL_TREE)\n \t    {\n-\t      error (\"enumerator value for %qD is not an integer constant\",\n-\t\t     name);\n-\t      value = NULL_TREE;\n+\t      value = cxx_constant_value (value);\n+\n+\t      if (TREE_CODE (value) != INTEGER_CST\n+\t\t  || ! INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (value)))\n+\t\t{\n+\t\t  error (\"enumerator value for %qD is not an integer constant\",\n+\t\t\t name);\n+\t\t  value = NULL_TREE;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "16956b781abb4afe9055bc643ec24f87ab0f1ce4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d45625fa77114876f0069ceb12c105721b38331", "patch": "@@ -1,3 +1,8 @@\n+2014-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51312\n+\t* g++.dg/cpp0x/enum29.C: New.\n+\n 2014-08-07  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/atomic/c11-atomic-exec-4.c: Undefine _POSIX_C_SOURCE before"}, {"sha": "43a99aee67367a052287de28da6eae656d8a0aae", "filename": "gcc/testsuite/g++.dg/cpp0x/enum29.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d45625fa77114876f0069ceb12c105721b38331/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C?ref=2d45625fa77114876f0069ceb12c105721b38331", "patch": "@@ -0,0 +1,58 @@\n+// PR c++/51312\n+// { dg-do compile { target c++11 } }\n+\n+struct X0\n+{\n+  constexpr operator int() const { return 1; }\n+};\n+\n+struct X1\n+{\n+  enum RE1 { re1 = 1 };\n+  constexpr operator RE1() const { return re1; }\n+};\n+\n+struct X2\n+{\n+  constexpr operator int() const { return __INT_MAX__; }\n+};\n+\n+struct X3\n+{\n+  enum RE3 { re3 = __INT_MAX__ };\n+  constexpr operator RE3() const { return re3; }\n+};\n+\n+struct X4\n+{\n+  constexpr operator double() const { return 1.0; }\n+};\n+\n+struct X5\n+{\n+  constexpr operator int() const { return __INT_MAX__; }\n+  constexpr operator unsigned() const { return __INT_MAX__ * 2U + 1; }\n+};\n+\n+enum E0 { e0 = X0() };\n+enum E1 { e1 = X1() };\n+enum E2 { e2 = X2() };\n+enum E3 { e3 = X3() };\n+enum E4 { e4 = X4() };  // { dg-error \"integer constant\" }\n+enum E5 { e5 = X5() };  // { dg-error \"ambiguous\" }\n+\n+enum F0 : int { f0 = X0() };\n+enum F1 : int { f1 = X1() };\n+enum F2 : int { f2 = X2() };\n+enum F3 : int { f3 = X3() };\n+enum F4 : int { f4 = X4() };  // { dg-error \"narrowing\" }\n+enum F5 : int { f5 = X5() };\n+\n+enum G0 : signed char { g0 = X0() };\n+enum G1 : signed char { g1 = X1() };\n+enum G2 : signed char { g2 = X2() };  // { dg-error \"narrowing\" }\n+// { dg-warning \"overflow\" \"\" { target *-*-* } 53 }\n+enum G3 : signed char { g3 = X3() };  // { dg-error \"narrowing\" }\n+// { dg-warning \"overflow\" \"\" { target *-*-* } 55 }\n+enum G4 : signed char { g4 = X4() };  // { dg-error \"narrowing\" }\n+enum G5 : signed char { g5 = X5() };  // { dg-error \"ambiguous\" }"}]}