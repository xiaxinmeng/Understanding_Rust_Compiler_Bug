{"sha": "a8662e89f84e91466acc09e28b4a289d298498ee", "node_id": "C_kwDOANBUbNoAKGE4NjYyZTg5Zjg0ZTkxNDY2YWNjMDllMjhiNGEyODlkMjk4NDk4ZWU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-17T22:46:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-20T21:47:57Z"}, "message": "gccrs: support use declaration to write the type into the correct namespace\n\nThis builds upon the previous path resolution fixes so that it returns the\nresolved_node_id or UNKNOWN_NODEID on failure to resolve the use-path.\nIt then exports the name to the current module namespace so it can be used.\n\nFixes #850 #855\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: add const get_final_segment helper\n\t* hir/rust-ast-lower-enumitem.h: dont add an item mapping for enumitems\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): add enum to enum-items mappings\n\t* hir/rust-ast-lower-stmt.cc (ASTLoweringStmt::visit): likewise\n\t* hir/tree/rust-hir-item.h: add non const helper to get variants\n\t* resolve/rust-ast-resolve-item.cc (ResolveItem::visit): resolve the use declaration\n\t* resolve/rust-ast-resolve-path.cc (ResolvePath::resolve_path): handle self\n\t* resolve/rust-ast-resolve-toplevel.h: add enum item mappings to module mappings\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_root_path): ensure variant\n\t(TypeCheckExpr::resolve_segments): likewise\n\t* typecheck/rust-type-util.cc (query_type): lookup enum's\n\t* util/rust-hir-map.cc (Mappings::insert_hir_enumitem): enum item mappings\n\t(Mappings::lookup_hir_enumitem): likewise\n\t* util/rust-hir-map.h: likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-850.rs: New test.\n\t* rust/compile/issue-855.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "33cfd871de61c050019fdb3434a3bb6faed8ec36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33cfd871de61c050019fdb3434a3bb6faed8ec36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8662e89f84e91466acc09e28b4a289d298498ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8662e89f84e91466acc09e28b4a289d298498ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8662e89f84e91466acc09e28b4a289d298498ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8662e89f84e91466acc09e28b4a289d298498ee/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b83a23f508d3694aa08cda793bab118a9be768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b83a23f508d3694aa08cda793bab118a9be768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b83a23f508d3694aa08cda793bab118a9be768"}], "stats": {"total": 238, "additions": 220, "deletions": 18}, "files": [{"sha": "2c39cc7c8167c24348728043809497b857a5aac4", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -422,6 +422,11 @@ class SimplePath\n   }\n \n   std::vector<SimplePathSegment> &get_segments () { return segments; }\n+\n+  const SimplePathSegment &get_final_segment () const\n+  {\n+    return segments.back ();\n+  }\n };\n \n // path-to-string inverse comparison operator"}, {"sha": "a8aa45aa808cb066a65d1923f2441f94d4368774", "filename": "gcc/rust/hir/rust-ast-lower-enumitem.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -46,7 +46,6 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     auto defid = resolver.translated->get_mappings ().get_defid ();\n \n     resolver.mappings->insert_defid_mapping (defid, resolver.translated);\n-    resolver.mappings->insert_hir_item (resolver.translated);\n     resolver.mappings->insert_location (hirid,\n \t\t\t\t\tresolver.translated->get_locus ());\n "}, {"sha": "eade1bcf695f5ad35877e44d7eaf6c12b70f02b7", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -274,11 +274,16 @@ ASTLoweringItem::visit (AST::Enum &enum_decl)\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t mappings->get_next_localdef_id (crate_num));\n \n-  translated = new HIR::Enum (mapping, enum_decl.get_identifier (), vis,\n-\t\t\t      std::move (generic_params),\n-\t\t\t      std::move (where_clause), /* is_unit, */\n-\t\t\t      std::move (items), enum_decl.get_outer_attrs (),\n-\t\t\t      enum_decl.get_locus ());\n+  HIR::Enum *hir_enum\n+    = new HIR::Enum (mapping, enum_decl.get_identifier (), vis,\n+\t\t     std::move (generic_params), std::move (where_clause),\n+\t\t     std::move (items), enum_decl.get_outer_attrs (),\n+\t\t     enum_decl.get_locus ());\n+  translated = hir_enum;\n+  for (auto &variant : hir_enum->get_variants ())\n+    {\n+      mappings->insert_hir_enumitem (hir_enum, variant.get ());\n+    }\n }\n \n void"}, {"sha": "5ba8db002d02be23d0826b8a271c2d0717fd9657", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -301,11 +301,16 @@ ASTLoweringStmt::visit (AST::Enum &enum_decl)\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t mappings->get_next_localdef_id (crate_num));\n \n-  translated = new HIR::Enum (mapping, enum_decl.get_identifier (), vis,\n-\t\t\t      std::move (generic_params),\n-\t\t\t      std::move (where_clause), /* is_unit, */\n-\t\t\t      std::move (items), enum_decl.get_outer_attrs (),\n-\t\t\t      enum_decl.get_locus ());\n+  HIR::Enum *hir_enum\n+    = new HIR::Enum (mapping, enum_decl.get_identifier (), vis,\n+\t\t     std::move (generic_params), std::move (where_clause),\n+\t\t     std::move (items), enum_decl.get_outer_attrs (),\n+\t\t     enum_decl.get_locus ());\n+  translated = hir_enum;\n+  for (auto &variant : hir_enum->get_variants ())\n+    {\n+      mappings->insert_hir_enumitem (hir_enum, variant.get ());\n+    }\n }\n \n void"}, {"sha": "9ff9732cda8d7502e92fed32373326fa3cfc9607", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -1966,6 +1966,8 @@ class Enum : public VisItem\n     return items;\n   }\n \n+  std::vector<std::unique_ptr<EnumItem>> &get_variants () { return items; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "de863a036d571fa5fcdf1e2d6d1fcf6323d77559", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -983,7 +983,7 @@ flatten_use_dec_to_paths (const AST::UseDeclaration &use_item)\n void\n ResolveItem::visit (AST::UseDeclaration &use_item)\n {\n-  auto to_resolve = flatten_use_dec_to_paths (use_item);\n+  std::vector<AST::SimplePath> to_resolve = flatten_use_dec_to_paths (use_item);\n \n   // FIXME: I think this does not actually resolve glob use-decls and is going\n   // the wrong way about it. RFC #1560 specifies the following:\n@@ -993,8 +993,27 @@ ResolveItem::visit (AST::UseDeclaration &use_item)\n   // importing module.\n   //\n   // Which is the opposite of what we're doing if I understand correctly?\n+\n+  NodeId current_module = resolver->peek_current_module_scope ();\n   for (auto &path : to_resolve)\n-    ResolvePath::go (&path);\n+    {\n+      rust_debug (\"resolving use-decl path: [%s]\", path.as_string ().c_str ());\n+      NodeId resolved_node_id = ResolvePath::go (&path);\n+      bool ok = resolved_node_id != UNKNOWN_NODEID;\n+      if (!ok)\n+\tcontinue;\n+\n+      const AST::SimplePathSegment &final_seg = path.get_final_segment ();\n+\n+      auto decl\n+\t= CanonicalPath::new_seg (resolved_node_id, final_seg.as_string ());\n+      mappings->insert_module_child_item (current_module, decl);\n+\n+      resolver->get_type_scope ().insert (decl, resolved_node_id,\n+\t\t\t\t\t  path.get_locus (),\n+\t\t\t\t\t  Rib::ItemType::Type);\n+      rust_debug (\"use-decl rexporting: [%s]\", decl.get ().c_str ());\n+    }\n }\n \n ResolveImplItems::ResolveImplItems (const CanonicalPath &prefix,"}, {"sha": "d8e6f90a9a6fe56779484dd26f976003c7f98e95", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -267,17 +267,20 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n   NodeId crate_scope_id = resolver->peek_crate_module_scope ();\n   NodeId module_scope_id = resolver->peek_current_module_scope ();\n \n+  NodeId previous_resolved_node_id = UNKNOWN_NODEID;\n   NodeId resolved_node_id = UNKNOWN_NODEID;\n   for (size_t i = 0; i < expr->get_segments ().size (); i++)\n     {\n-      auto &segment = expr->get_segments ().at (i);\n+      AST::SimplePathSegment &segment = expr->get_segments ().at (i);\n       bool is_first_segment = i == 0;\n+      bool is_final_segment = i >= (expr->get_segments ().size () - 1);\n       resolved_node_id = UNKNOWN_NODEID;\n \n       if (segment.is_crate_path_seg ())\n \t{\n \t  // what is the current crate scope node id?\n \t  module_scope_id = crate_scope_id;\n+\t  previous_resolved_node_id = module_scope_id;\n \t  resolver->insert_resolved_name (segment.get_node_id (),\n \t\t\t\t\t  module_scope_id);\n \t  continue;\n@@ -292,6 +295,7 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t    }\n \n \t  module_scope_id = resolver->peek_parent_module_scope ();\n+\t  previous_resolved_node_id = module_scope_id;\n \t  resolver->insert_resolved_name (segment.get_node_id (),\n \t\t\t\t\t  module_scope_id);\n \t  continue;\n@@ -348,6 +352,25 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t    }\n \t}\n \n+      // if we still have not resolved and this is the final segment and the\n+      // final segment is self its likely the case: pub use\n+      //\n+      // result::Result::{self, Err, Ok};\n+      //\n+      // Then the resolved_node_id is just the previous one so long as it is a\n+      // resolved node id\n+      // rust_debug_loc (segment.get_locus (),\n+      //   \t      \"trying to resolve seg: [%s] first [%s] last [%s]\",\n+      //   \t      segment.get_segment_name ().c_str (),\n+      //   \t      is_first_segment ? \"true\" : \"false\",\n+      //   \t      is_final_segment ? \"true\" : \"false\");\n+      if (resolved_node_id == UNKNOWN_NODEID && !is_first_segment\n+\t  && is_final_segment && segment.is_lower_self ())\n+\t{\n+\t  resolved_node_id = previous_resolved_node_id;\n+\t}\n+\n+      // final check\n       if (resolved_node_id == UNKNOWN_NODEID)\n \t{\n \t  rust_error_at (segment.get_locus (),\n@@ -360,6 +383,8 @@ ResolvePath::resolve_path (AST::SimplePath *expr)\n \t{\n \t  module_scope_id = resolved_node_id;\n \t}\n+\n+      previous_resolved_node_id = resolved_node_id;\n     }\n \n   resolved_node = resolved_node_id;"}, {"sha": "d784317b896ea803a91770bb2d4a1025d349f292", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -132,9 +132,12 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    resolver->push_new_module_scope (enum_decl.get_node_id ());\n     for (auto &variant : enum_decl.get_variants ())\n       ResolveTopLevel::go (variant.get (), path, cpath);\n \n+    resolver->pop_module_scope ();\n+\n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (enum_decl.get_node_id (), cpath);\n@@ -156,6 +159,10 @@ class ResolveTopLevel : public ResolverBase\n       });\n \n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n+\n+    NodeId current_module = resolver->peek_current_module_scope ();\n+    mappings->insert_module_child_item (current_module, decl);\n+    mappings->insert_module_child (current_module, item.get_node_id ());\n   }\n \n   void visit (AST::EnumItemTuple &item) override\n@@ -174,6 +181,10 @@ class ResolveTopLevel : public ResolverBase\n       });\n \n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n+\n+    NodeId current_module = resolver->peek_current_module_scope ();\n+    mappings->insert_module_child_item (current_module, decl);\n+    mappings->insert_module_child (current_module, item.get_node_id ());\n   }\n \n   void visit (AST::EnumItemStruct &item) override\n@@ -192,6 +203,10 @@ class ResolveTopLevel : public ResolverBase\n       });\n \n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n+\n+    NodeId current_module = resolver->peek_current_module_scope ();\n+    mappings->insert_module_child_item (current_module, decl);\n+    mappings->insert_module_child (current_module, item.get_node_id ());\n   }\n \n   void visit (AST::EnumItemDiscriminant &item) override\n@@ -210,6 +225,10 @@ class ResolveTopLevel : public ResolverBase\n       });\n \n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n+\n+    NodeId current_module = resolver->peek_current_module_scope ();\n+    mappings->insert_module_child_item (current_module, decl);\n+    mappings->insert_module_child (current_module, item.get_node_id ());\n   }\n \n   void visit (AST::StructStruct &struct_decl) override"}, {"sha": "88c927d36ab64a196f72684f9262c9e4fe7b64c4", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -244,6 +244,19 @@ TypeCheckExpr::resolve_root_path (HIR::PathInExpression &expr, size_t *offset,\n \t  return root_tyty;\n \t}\n \n+      // is it an enum item?\n+      std::pair<HIR::Enum *, HIR::EnumItem *> enum_item_lookup\n+\t= mappings->lookup_hir_enumitem (ref);\n+      bool is_enum_item = enum_item_lookup.first != nullptr\n+\t\t\t  && enum_item_lookup.second != nullptr;\n+      if (is_enum_item)\n+\t{\n+\t  HirId expr_id = expr.get_mappings ().get_hirid ();\n+\t  HirId variant_id\n+\t    = enum_item_lookup.second->get_mappings ().get_hirid ();\n+\t  context->insert_variant_definition (expr_id, variant_id);\n+\t}\n+\n       // if we have a previous segment type\n       if (root_tyty != nullptr)\n \t{\n@@ -349,9 +362,13 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t  const TyTy::VariantDef *variant = candidate.item.enum_field.variant;\n \n \t  HirId variant_id = variant->get_id ();\n-\t  HIR::Item *enum_item = mappings->lookup_hir_item (variant_id);\n-\t  rust_assert (enum_item != nullptr);\n+\t  std::pair<HIR::Enum *, HIR::EnumItem *> enum_item_lookup\n+\t    = mappings->lookup_hir_enumitem (variant_id);\n+\t  bool enum_item_ok = enum_item_lookup.first != nullptr\n+\t\t\t      && enum_item_lookup.second != nullptr;\n+\t  rust_assert (enum_item_ok);\n \n+\t  HIR::EnumItem *enum_item = enum_item_lookup.second;\n \t  resolved_node_id = enum_item->get_mappings ().get_nodeid ();\n \n \t  // insert the id of the variant we are resolved to"}, {"sha": "578e0c4509ebc89850d59d0c6214468c72eb32ee", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -22,8 +22,6 @@\n #include \"rust-hir-type-check-implitem.h\"\n #include \"rust-hir-type-check-item.h\"\n #include \"rust-hir-type-check.h\"\n-#include \"rust-hir-visitor.h\"\n-#include \"rust-name-resolver.h\"\n #include \"rust-casts.h\"\n #include \"rust-unify.h\"\n #include \"rust-coercion.h\"\n@@ -45,6 +43,23 @@ query_type (HirId reference, TyTy::BaseType **result)\n \n   context->insert_query (reference);\n \n+  std::pair<HIR::Enum *, HIR::EnumItem *> enum_candidiate\n+    = mappings->lookup_hir_enumitem (reference);\n+  bool enum_candidiate_ok\n+    = enum_candidiate.first != nullptr && enum_candidiate.second != nullptr;\n+  if (enum_candidiate_ok)\n+    {\n+      HIR::Enum *parent = enum_candidiate.first;\n+      HIR::EnumItem *enum_item = enum_candidiate.second;\n+      rust_debug_loc (enum_item->get_locus (), \"resolved item {%u} to\",\n+\t\t      reference);\n+\n+      *result = TypeCheckItem::Resolve (*parent);\n+\n+      context->query_completed (reference);\n+      return true;\n+    }\n+\n   HIR::Item *item = mappings->lookup_hir_item (reference);\n   if (item != nullptr)\n     {"}, {"sha": "12f9be651f4a2aebdcfffc2ffc2f75cb4c8c388a", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -382,6 +382,27 @@ Mappings::lookup_hir_item (HirId id)\n   return it->second;\n }\n \n+void\n+Mappings::insert_hir_enumitem (HIR::Enum *parent, HIR::EnumItem *item)\n+{\n+  auto id = item->get_mappings ().get_hirid ();\n+  auto result = lookup_hir_enumitem (id);\n+  rust_assert (result.first == nullptr);\n+\n+  hirEnumItemMappings[id] = {parent, item};\n+  insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n+}\n+\n+std::pair<HIR::Enum *, HIR::EnumItem *>\n+Mappings::lookup_hir_enumitem (HirId id)\n+{\n+  auto it = hirEnumItemMappings.find (id);\n+  if (it == hirEnumItemMappings.end ())\n+    return {nullptr, nullptr};\n+\n+  return it->second;\n+}\n+\n void\n Mappings::insert_hir_trait_item (HIR::TraitItem *item)\n {"}, {"sha": "4fd35d8ae9be38960cbdbd97d62715bcfa419c58", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -114,6 +114,9 @@ class Mappings\n   void insert_hir_item (HIR::Item *item);\n   HIR::Item *lookup_hir_item (HirId id);\n \n+  void insert_hir_enumitem (HIR::Enum *parent, HIR::EnumItem *item);\n+  std::pair<HIR::Enum *, HIR::EnumItem *> lookup_hir_enumitem (HirId id);\n+\n   void insert_hir_trait_item (HIR::TraitItem *item);\n   HIR::TraitItem *lookup_hir_trait_item (HirId id);\n \n@@ -317,6 +320,7 @@ class Mappings\n \n   std::map<HirId, HIR::Module *> hirModuleMappings;\n   std::map<HirId, HIR::Item *> hirItemMappings;\n+  std::map<HirId, std::pair<HIR::Enum *, HIR::EnumItem *>> hirEnumItemMappings;\n   std::map<HirId, HIR::Type *> hirTypeMappings;\n   std::map<HirId, HIR::Expr *> hirExprMappings;\n   std::map<HirId, HIR::Stmt *> hirStmtMappings;"}, {"sha": "531cbf4f66330213ea307947eb66ff0b6c59f0de", "filename": "gcc/testsuite/rust/compile/issue-850.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-850.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-850.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-850.rs?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -0,0 +1,43 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+mod option {\n+    enum Option<T> {\n+        #[lang = \"None\"]\n+        None,\n+        #[lang = \"Some\"]\n+        Some(T),\n+    }\n+}\n+\n+pub use option::Option::{self, None, Some};\n+\n+fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n+    if denominator == 0.0 {\n+        None\n+    } else {\n+        Some(numerator / denominator)\n+    }\n+}\n+\n+fn main() {\n+    let result = divide(2.0, 3.0);\n+\n+    match result {\n+        Some(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+        None => unsafe {\n+            let a = \"Cannot divide by 0\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+    }\n+}"}, {"sha": "f48e3a1bfe0a193170b3eb0e73c2e2c0b2733d36", "filename": "gcc/testsuite/rust/compile/issue-855.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-855.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8662e89f84e91466acc09e28b4a289d298498ee/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-855.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-855.rs?ref=a8662e89f84e91466acc09e28b4a289d298498ee", "patch": "@@ -0,0 +1,23 @@\n+pub use result::Result::{self, Err, Ok};\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+mod result {\n+    pub enum Result<T, E> {\n+        #[lang = \"Ok\"]\n+        Ok(T),\n+\n+        #[lang = \"Err\"]\n+        Err(E),\n+    }\n+}\n+\n+pub fn test(a: i32) -> Result<i32, bool> {\n+    if a > 5 {\n+        Ok(123)\n+    } else {\n+        Err(false)\n+    }\n+}"}]}