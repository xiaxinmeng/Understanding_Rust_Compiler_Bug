{"sha": "371905d12259c180efb9b1f1b5716e969feb60f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxOTA1ZDEyMjU5YzE4MGVmYjliMWYxYjU3MTZlOTY5ZmViNjBmOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-06T07:39:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-06T10:39:24Z"}, "message": "tree-optimization/94963 - avoid bogus uninit warning with store-motion\n\nEliding the load for store-motion causes an uninitialized variable\nflowing into the loop, conditionally initialized and used.  The\nuninit warning cannot relate the flag used to guard the initialization\nand use with the actual initialization so the following robustifies\nthe previous approach of marking the conditional store as not to\nbe warned on by instead initializing the variable on loop entry\nfrom an uninitialized variable we mark as not to be warned for.\n\n2020-05-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/94963\n\t* tree-ssa-loop-im.c (execute_sm_if_changed): Remove\n\tno-warning marking of the conditional store.\n\t(execute_sm): Instead mark the uninitialized state\n\ton loop entry to be not warned about.\n\n\t* gcc.dg/pr94963.c: New testcase.", "tree": {"sha": "5cfdd80887d702d6de60cbeab7cf467c5a2eddf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cfdd80887d702d6de60cbeab7cf467c5a2eddf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/371905d12259c180efb9b1f1b5716e969feb60f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371905d12259c180efb9b1f1b5716e969feb60f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371905d12259c180efb9b1f1b5716e969feb60f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371905d12259c180efb9b1f1b5716e969feb60f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6208287fcaf01d3f300442c14a2c13815fbb3191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6208287fcaf01d3f300442c14a2c13815fbb3191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6208287fcaf01d3f300442c14a2c13815fbb3191"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "73a601528f0e76a6081362373ac5a05908dadeeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=371905d12259c180efb9b1f1b5716e969feb60f9", "patch": "@@ -1,3 +1,11 @@\n+2020-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94963\n+\t* tree-ssa-loop-im.c (execute_sm_if_changed): Remove\n+\tno-warning marking of the conditional store.\n+\t(execute_sm): Instead mark the uninitialized state\n+\ton loop entry to be not warned about.\n+\n 2020-05-06  Hongtao Liu  <hongtao.liu@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_TSXLDTRK_SET,"}, {"sha": "a3cf68d0a10a6a3d9e5af9a9cee8e75f5976aab9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=371905d12259c180efb9b1f1b5716e969feb60f9", "patch": "@@ -1,3 +1,8 @@\n+2020-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94963\n+\t* gcc.dg/pr94963.c: New testcase.\n+\n 2020-05-06  Hongtao Liu  <hongtao.liu@intel.com>\n \n \t* g++.dg/other/i386-2.c: Add -mtsxldtrk."}, {"sha": "aca9e16130182384997e1b984cffd003cfe38c41", "filename": "gcc/testsuite/gcc.dg/pr94963.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94963.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94963.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94963.c?ref=371905d12259c180efb9b1f1b5716e969feb60f9", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+typedef struct\n+{\n+  int p1;\n+  int p2;\n+  int p3;\n+} P;\n+struct S\n+{\n+  int field;\n+};\n+extern int v2;\n+extern void foo (struct S *map);\n+static struct S var;\n+const P *pv;\n+int ps;\n+void\n+f (void)\n+{\n+  if (pv != 0)\n+    for (const P *ph = pv; ph < &pv[ps]; ++ph)\n+      switch (ph->p1)\n+\t{\n+\tcase 1:\n+\tv2 = ph->p2;\n+\tbreak;\n+\tcase 2:\n+\tvar.field = ph->p3;\n+\tbreak;\n+\t}\n+  if (var.field != 0) /* { dg-bogus \"uninitialized\" } */\n+    foo (&var);\n+}"}, {"sha": "3056b4bfed2bc201339df87489fe6f8b248e000f", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371905d12259c180efb9b1f1b5716e969feb60f9/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=371905d12259c180efb9b1f1b5716e969feb60f9", "patch": "@@ -1994,8 +1994,6 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag,\n   gsi = gsi_start_bb (then_bb);\n   /* Insert actual store.  */\n   stmt = gimple_build_assign (unshare_expr (mem), tmp_var);\n-  /* Make sure to not warn about maybe-uninit uses of tmp_var here.  */\n-  gimple_set_no_warning (stmt, true);\n   gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \n   edge e1 = single_succ_edge (new_bb);\n@@ -2149,13 +2147,19 @@ execute_sm (class loop *loop, vec<edge> exits, im_mem_ref *ref)\n      store then.  */\n   if ((!always_stored && !multi_threaded_model_p)\n       || (ref->loaded && bitmap_bit_p (ref->loaded, loop->num)))\n+    load = gimple_build_assign (tmp_var, unshare_expr (ref->mem.ref));\n+  else\n     {\n-      load = gimple_build_assign (tmp_var, unshare_expr (ref->mem.ref));\n-      lim_data = init_lim_data (load);\n-      lim_data->max_loop = loop;\n-      lim_data->tgt_loop = loop;\n-      gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n+      /* If not emitting a load mark the uninitialized state on the\n+\t loop entry as not to be warned for.  */\n+      tree uninit = create_tmp_reg (TREE_TYPE (tmp_var));\n+      TREE_NO_WARNING (uninit) = 1;\n+      load = gimple_build_assign (tmp_var, uninit);\n     }\n+  lim_data = init_lim_data (load);\n+  lim_data->max_loop = loop;\n+  lim_data->tgt_loop = loop;\n+  gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n \n   if (multi_threaded_model_p)\n     {"}]}