{"sha": "3f1d352611a48f7104634a420106f8fc74fb3547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxZDM1MjYxMWE0OGY3MTA0NjM0YTQyMDEwNmY4ZmM3NGZiMzU0Nw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-04-12T20:09:41Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-04-12T20:09:41Z"}, "message": "re PR target/27060 (divide libcall size has increased)\n\n2006-04-12  J\"orn Rennecke <joern.rennecke@st.com>\n\n\tPR target/27060\n        * config/sh/lib1funcs.h: New file, broken out of:\n        * config/sh/lib1funcs.asm.\n        * config/sh/lib1funcs.h (DR00, DR01, DR20, DR21, DR40, DR41):\n\tNew macros.\n\t* config/sh/lib1funcs.asm (udivsi3_i4): Use them.\n        * config/sh/lib1funcs-Os-4-200.asm: New file.\n\t* config/sh/embed-elf.h (LIBGCC_SPEC): Use -lgcc-Os-4-200.\n\t* config/sh/t-sh (OPT_EXTRA_PARTS): New variable.\n\t(EXTRA_MULTILIB_PARTS): Include it.\n\t($(T)sdivsi3_i4i-Os-4-200.o): New rule.\n\t($(T)udivsi3_i4i-Os-4-200.o, $(T)libgcc-Os-4-200.a): Likewise.\n\t* config/sh/t-superh (EXTRA_MULTILIB_PARTS): Include OPT_EXTRA_PARTS.\n\t* config/sh/sh.h (OVERRIDE_OPTIONS): Recognize -mdiv=call-table for\n\tTARGET_SH2.\n\nFrom-SVN: r112898", "tree": {"sha": "d91f2c0d1cf4694a810bb027e1869f168efe88b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91f2c0d1cf4694a810bb027e1869f168efe88b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1d352611a48f7104634a420106f8fc74fb3547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1d352611a48f7104634a420106f8fc74fb3547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1d352611a48f7104634a420106f8fc74fb3547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1d352611a48f7104634a420106f8fc74fb3547/comments", "author": null, "committer": null, "parents": [{"sha": "04522557c712f5af655c19fe2812a4f969ccaea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04522557c712f5af655c19fe2812a4f969ccaea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04522557c712f5af655c19fe2812a4f969ccaea8"}], "stats": {"total": 481, "additions": 438, "deletions": 43}, "files": [{"sha": "da9ac04317009735cf218704ed3f74a903aa02bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -1,3 +1,21 @@\n+2006-04-12  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/27060\n+        * config/sh/lib1funcs.h: New file, broken out of:\n+        * config/sh/lib1funcs.asm.\n+        * config/sh/lib1funcs.h (DR00, DR01, DR20, DR21, DR40, DR41):\n+\tNew macros.\n+\t* config/sh/lib1funcs.asm (udivsi3_i4): Use them.\n+        * config/sh/lib1funcs-Os-4-200.asm: New file.\n+\t* config/sh/embed-elf.h (LIBGCC_SPEC): Use -lgcc-Os-4-200.\n+\t* config/sh/t-sh (OPT_EXTRA_PARTS): New variable.\n+\t(EXTRA_MULTILIB_PARTS): Include it.\n+\t($(T)sdivsi3_i4i-Os-4-200.o): New rule.\n+\t($(T)udivsi3_i4i-Os-4-200.o, $(T)libgcc-Os-4-200.a): Likewise.\n+\t* config/sh/t-superh (EXTRA_MULTILIB_PARTS): Include OPT_EXTRA_PARTS.\n+\t* config/sh/sh.h (OVERRIDE_OPTIONS): Recognize -mdiv=call-table for\n+\tTARGET_SH2.\n+\n 2006-04-12  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* Makefile.in (TREE_SSA_LIVE_H): Add vecprim.h."}, {"sha": "4497cf34636afe275f11e59151cb2b2f8844848c", "filename": "gcc/config/sh/embed-elf.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fembed-elf.h?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -25,7 +25,14 @@ Boston, MA 02110-1301, USA.  */\n \n #undef TARGET_POSIX_IO\n \n+/* While the speed-optimized implementations of udivsi3_i4i / sdivsi3_i4i\n+   in libgcc are not available for SH2, the space-optimized ones in\n+   libgcc-Os-4-200 are.  Thus, when not optimizing for space, link\n+   libgcc-Os-4-200 after libgcc, so that -mdiv=call-table works for -m2.  */\n #define LIBGCC_SPEC \"%{!shared: \\\n   %{m4-100*:-lic_invalidate_array_4-100} \\\n   %{m4-200*:-lic_invalidate_array_4-200} \\\n-  %{m4a*:-lic_invalidate_array_4a}} -lgcc\"\n+  %{m4a*:-lic_invalidate_array_4a}} \\\n+  %{Os: -lgcc-Os-4-200} \\\n+  -lgcc \\\n+  %{!Os: -lgcc-Os-4-200}\""}, {"sha": "e71ccd1de6e6ad1b4b8e5016f44be36fb077be88", "filename": "gcc/config/sh/lib1funcs-Os-4-200.asm", "status": "added", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.asm?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -0,0 +1,325 @@\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* Moderately Space-optimized libgcc routines for the Renesas SH /\n+   STMicroelectronics ST40 CPUs.\n+   Contributed by J\"orn Rennecke joern.rennecke@st.com.  */\n+\n+#include \"lib1funcs.h\"\n+\n+#ifdef L_udivsi3_i4i\n+\n+/* 88 bytes; sh4-200 cycle counts:\n+   divisor  >= 2G: 11 cycles\n+   dividend <  2G: 48 cycles\n+   dividend >= 2G: divisor != 1: 54 cycles\n+   dividend >= 2G, divisor == 1: 22 cycles */\n+#if defined (__SH_FPU_DOUBLE__) || defined (__SH4_SINGLE_ONLY__)\n+!! args in r4 and r5, result in r0, clobber r1\n+\n+\t.global GLOBAL(udivsi3_i4i)\n+\tFUNC(GLOBAL(udivsi3_i4i))\n+GLOBAL(udivsi3_i4i):\n+\tmova L1,r0\n+\tcmp/pz r5\n+\tsts fpscr,r1\n+\tlds.l @r0+,fpscr\n+\tsts.l fpul,@-r15\n+\tbf LOCAL(huge_divisor)\n+\tmov.l r1,@-r15\n+\tlds r4,fpul\n+\tcmp/pz r4\n+#ifdef FMOVD_WORKS\n+\tfmov.d dr0,@-r15\n+\tfloat fpul,dr0\n+\tfmov.d dr2,@-r15\n+\tbt LOCAL(dividend_adjusted)\n+\tmov #1,r1\n+\tfmov.d @r0,dr2\n+\tcmp/eq r1,r5\n+\tbt LOCAL(div_by_1)\n+\tfadd dr2,dr0\n+LOCAL(dividend_adjusted):\n+\tlds r5,fpul\n+\tfloat fpul,dr2\n+\tfdiv dr2,dr0\n+LOCAL(div_by_1):\n+\tfmov.d @r15+,dr2\n+\tftrc dr0,fpul\n+\tfmov.d @r15+,dr0\n+#else /* !FMOVD_WORKS */\n+\tfmov.s DR01,@-r15\n+\tmov #1,r1\n+\tfmov.s DR00,@-r15\n+\tfloat fpul,dr0\n+\tfmov.s DR21,@-r15\n+\tbt/s LOCAL(dividend_adjusted)\n+\tfmov.s DR20,@-r15\n+\tcmp/eq r1,r5\n+\tbt LOCAL(div_by_1)\n+\tfmov.s @r0+,DR20\n+\tfmov.s @r0,DR21\n+\tfadd dr2,dr0\n+LOCAL(dividend_adjusted):\n+\tlds r5,fpul\n+\tfloat fpul,dr2\n+\tfdiv dr2,dr0\n+LOCAL(div_by_1):\n+\tfmov.s @r15+,DR20\n+\tfmov.s @r15+,DR21\n+\tftrc dr0,fpul\n+\tfmov.s @r15+,DR00\n+\tfmov.s @r15+,DR01\n+#endif /* !FMOVD_WORKS */\n+\tlds.l @r15+,fpscr\n+\tsts fpul,r0\n+\trts\n+\tlds.l @r15+,fpul\n+\n+#ifdef FMOVD_WORKS\n+\t.p2align 3        ! make double below 8 byte aligned.\n+#endif\n+LOCAL(huge_divisor):\n+\tlds r1,fpscr\n+\tadd #4,r15\n+\tcmp/hs r5,r4\n+\trts\n+\tmovt r0\n+\n+\t.p2align 2\n+L1:\n+#ifndef FMOVD_WORKS\n+\t.long 0x80000\n+#else\n+\t.long 0x180000\n+#endif\n+\t.double 4294967296\n+\n+\tENDFUNC(GLOBAL(udivsi3_i4i))\n+#elif !defined (__sh1__)  /* !__SH_FPU_DOUBLE__ */\n+\n+#if 0\n+/* With 36 bytes, the following would probably be the most compact\n+   implementation, but with 139 cycles on an sh4-200, it is extremely slow.  */\n+GLOBAL(udivsi3_i4i):\n+\tmov.l r2,@-r15\n+\tmov #0,r1\n+\tdiv0u\n+\tmov r1,r2\n+\tmov.l r3,@-r15\n+\tmov r1,r3\n+\tsett\n+\tmov r4,r0\n+LOCAL(loop):\n+\trotcr r2\n+\t;\n+\tbt/s LOCAL(end)\n+\tcmp/gt r2,r3\n+\trotcl r0\n+\tbra LOCAL(loop)\n+\tdiv1 r5,r1\n+LOCAL(end):\n+\trotcl r0\n+\tmov.l @r15+,r3\n+\trts\n+\tmov.l @r15+,r2\n+#endif /* 0 */\n+\n+/* Size: 186 bytes jointly for udivsi3_i4i and sdivsi3_i4i\n+   sh4-200 run times:\n+   udiv small divisor: 55 cycles\n+   udiv large divisor: 52 cycles\n+   sdiv small divisor, positive result: 59 cycles\n+   sdiv large divisor, positive result: 56 cycles\n+   sdiv small divisor, negative result: 65 cycles (*)\n+   sdiv large divisor, negative result: 62 cycles (*)\n+   (*): r2 is restored in the rts delay slot and has a lingering latency\n+        of two more cycles.  */\n+\t.balign 4\n+\t.global\tGLOBAL(udivsi3_i4i)\n+\tFUNC(GLOBAL(udivsi3_i4i))\n+\tFUNC(GLOBAL(sdivsi3_i4i))\n+GLOBAL(udivsi3_i4i):\n+\tsts pr,r1\n+\tmov.l r4,@-r15\n+\textu.w r5,r0\n+\tcmp/eq r5,r0\n+\tswap.w r4,r0\n+\tshlr16 r4\n+\tbf/s LOCAL(large_divisor)\n+\tdiv0u\n+\tmov.l r5,@-r15\n+\tshll16 r5\n+LOCAL(sdiv_small_divisor):\n+\tdiv1 r5,r4\n+\tbsr LOCAL(div6)\n+\tdiv1 r5,r4\n+\tdiv1 r5,r4\n+\tbsr LOCAL(div6)\n+\tdiv1 r5,r4\n+\txtrct r4,r0\n+\txtrct r0,r4\n+\tbsr LOCAL(div7)\n+\tswap.w r4,r4\n+\tdiv1 r5,r4\n+\tbsr LOCAL(div7)\n+\tdiv1 r5,r4\n+\txtrct r4,r0\n+\tmov.l @r15+,r5\n+\tswap.w r0,r0\n+\tmov.l @r15+,r4\n+\tjmp @r1\n+\trotcl r0\n+LOCAL(div7):\n+\tdiv1 r5,r4\n+LOCAL(div6):\n+\t            div1 r5,r4; div1 r5,r4; div1 r5,r4\n+\tdiv1 r5,r4; div1 r5,r4; rts;        div1 r5,r4\n+\n+LOCAL(divx3):\n+\trotcl r0\n+\tdiv1 r5,r4\n+\trotcl r0\n+\tdiv1 r5,r4\n+\trotcl r0\n+\trts\n+\tdiv1 r5,r4\n+\n+LOCAL(large_divisor):\n+\tmov.l r5,@-r15\n+LOCAL(sdiv_large_divisor):\n+\txor r4,r0\n+\t.rept 4\n+\trotcl r0\n+\tbsr LOCAL(divx3)\n+\tdiv1 r5,r4\n+\t.endr\n+\tmov.l @r15+,r5\n+\tmov.l @r15+,r4\n+\tjmp @r1\n+\trotcl r0\n+\tENDFUNC(GLOBAL(udivsi3_i4i))\n+\n+\t.global\tGLOBAL(sdivsi3_i4i)\n+GLOBAL(sdivsi3_i4i):\n+\tmov.l r4,@-r15\n+\tcmp/pz r5\n+\tmov.l r5,@-r15\n+\tbt/s LOCAL(pos_divisor)\n+\tcmp/pz r4\n+\tneg r5,r5\n+\textu.w r5,r0\n+\tbt/s LOCAL(neg_result)\n+\tcmp/eq r5,r0\n+\tneg r4,r4\n+LOCAL(pos_result):\n+\tswap.w r4,r0\n+\tbra LOCAL(sdiv_check_divisor)\n+\tsts pr,r1\n+LOCAL(pos_divisor):\n+\textu.w r5,r0\n+\tbt/s LOCAL(pos_result)\n+\tcmp/eq r5,r0\n+\tneg r4,r4\n+LOCAL(neg_result):\n+\tmova LOCAL(negate_result),r0\n+\t;\n+\tmov r0,r1\n+\tswap.w r4,r0\n+\tlds r2,macl\n+\tsts pr,r2\n+LOCAL(sdiv_check_divisor):\n+\tshlr16 r4\n+\tbf/s LOCAL(sdiv_large_divisor)\n+\tdiv0u\n+\tbra LOCAL(sdiv_small_divisor)\n+\tshll16 r5\n+\t.balign 4\n+LOCAL(negate_result):\n+\tneg r0,r0\n+\tjmp @r2\n+\tsts macl,r2\n+\tENDFUNC(GLOBAL(sdivsi3_i4i))\n+#endif /* !__SH_FPU_DOUBLE__ */\n+#endif /* L_udivsi3_i4i */\n+\n+#ifdef L_sdivsi3_i4i\n+#if defined (__SH_FPU_DOUBLE__) || defined (__SH4_SINGLE_ONLY__)\n+/* 48 bytes, 45 cycles on sh4-200  */\n+!! args in r4 and r5, result in r0, clobber r1\n+\n+\t.global GLOBAL(sdivsi3_i4i)\n+\tFUNC(GLOBAL(sdivsi3_i4i))\n+GLOBAL(sdivsi3_i4i):\n+\tsts.l fpscr,@-r15\n+\tsts fpul,r1\n+\tmova L1,r0\n+\tlds.l @r0+,fpscr\n+\tlds r4,fpul\n+#ifdef FMOVD_WORKS\n+\tfmov.d dr0,@-r15\n+\tfloat fpul,dr0\n+\tlds r5,fpul\n+\tfmov.d dr2,@-r15\n+#else\n+\tfmov.s DR01,@-r15\n+\tfmov.s DR00,@-r15\n+\tfloat fpul,dr0\n+\tlds r5,fpul\n+\tfmov.s DR21,@-r15\n+\tfmov.s DR20,@-r15\n+#endif\n+\tfloat fpul,dr2\n+\tfdiv dr2,dr0\n+#ifdef FMOVD_WORKS\n+\tfmov.d @r15+,dr2\n+#else\n+\tfmov.s @r15+,DR20\n+\tfmov.s @r15+,DR21\n+#endif\n+\tftrc dr0,fpul\n+#ifdef FMOVD_WORKS\n+\tfmov.d @r15+,dr0\n+#else\n+\tfmov.s @r15+,DR00\n+\tfmov.s @r15+,DR01\n+#endif\n+\tlds.l @r15+,fpscr\n+\tsts fpul,r0\n+\trts\n+\tlds r1,fpul\n+\n+\t.p2align 2\n+L1:\n+#ifndef FMOVD_WORKS\n+\t.long 0x80000\n+#else\n+\t.long 0x180000\n+#endif\n+\n+\tENDFUNC(GLOBAL(sdivsi3_i4i))\n+#endif /* __SH_FPU_DOUBLE__ */\n+#endif /* L_sdivsi3_i4i */"}, {"sha": "a815c3619e967d5a1ac0bcde9c097f50151941f6", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -38,31 +38,7 @@ Boston, MA 02110-1301, USA.  */\n    ELF local label prefixes by J\"orn Rennecke\n    amylaar@cygnus.com  */\n \n-#ifdef __ELF__\n-#define LOCAL(X)\t.L_##X\n-#define FUNC(X)\t\t.type X,@function\n-#define HIDDEN_FUNC(X)\tFUNC(X); .hidden X\n-#define HIDDEN_ALIAS(X,Y) ALIAS (X,Y); .hidden GLOBAL(X)\n-#define ENDFUNC0(X)\t.Lfe_##X: .size X,.Lfe_##X-X\n-#define ENDFUNC(X)\tENDFUNC0(X)\n-#else\n-#define LOCAL(X)\tL_##X\n-#define FUNC(X)\n-#define HIDDEN_FUNC(X)\n-#define HIDDEN_ALIAS(X,Y) ALIAS (X,Y)\n-#define ENDFUNC(X)\n-#endif\n-\n-#define\tCONCAT(A,B)\tA##B\n-#define\tGLOBAL0(U,X)\tCONCAT(U,__##X)\n-#define\tGLOBAL(X)\tGLOBAL0(__USER_LABEL_PREFIX__,X)\n-\n-#define ALIAS(X,Y)\t.global GLOBAL(X); .set GLOBAL(X),GLOBAL(Y)\n-\n-#ifdef __SH2A__\n-#undef FMOVD_WORKS\n-#define FMOVD_WORKS\n-#endif\n+#include \"lib1funcs.h\"\n \n #if ! __SH5__\n #ifdef L_ashiftrt\n@@ -1375,13 +1351,8 @@ GLOBAL(udivsi3_i4):\n #ifdef FMOVD_WORKS\n \tfmov.d @r0+,dr4\n #else\n-#ifdef __LITTLE_ENDIAN__\n-\tfmov.s @r0+,fr5\n-\tfmov.s @r0,fr4\n-#else\n-\tfmov.s @r0+,fr4\n-\tfmov.s @r0,fr5\n-#endif\n+\tfmov.s @r0+,DR40\n+\tfmov.s @r0,DR41\n #endif\n \tfloat fpul,dr0\n \txor r1,r5\n@@ -1444,13 +1415,8 @@ GLOBAL(udivsi3_i4):\n #ifdef FMOVD_WORKS\n \tfmov.d @r0+,dr4\n #else\n-#ifdef __LITTLE_ENDIAN__\n-\tfmov.s @r0+,fr5\n-\tfmov.s @r0,fr4\n-#else\n-\tfmov.s @r0+,fr4\n-\tfmov.s @r0,fr5\n-#endif\n+\tfmov.s @r0+,DR40\n+\tfmov.s @r0,DR41\n #endif\n \tfloat fpul,dr0\n \txor r1,r5"}, {"sha": "566f3a5fc9673fadb9f56704cee623b64b7ce084", "filename": "gcc/config/sh/lib1funcs.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.h?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n+   2004, 2005, 2006\n+   Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#ifdef __ELF__\n+#define LOCAL(X)\t.L_##X\n+#define FUNC(X)\t\t.type X,@function\n+#define HIDDEN_FUNC(X)\tFUNC(X); .hidden X\n+#define HIDDEN_ALIAS(X,Y) ALIAS (X,Y); .hidden GLOBAL(X)\n+#define ENDFUNC0(X)\t.Lfe_##X: .size X,.Lfe_##X-X\n+#define ENDFUNC(X)\tENDFUNC0(X)\n+#else\n+#define LOCAL(X)\tL_##X\n+#define FUNC(X)\n+#define HIDDEN_FUNC(X)\n+#define HIDDEN_ALIAS(X,Y) ALIAS (X,Y)\n+#define ENDFUNC(X)\n+#endif\n+\n+#define\tCONCAT(A,B)\tA##B\n+#define\tGLOBAL0(U,X)\tCONCAT(U,__##X)\n+#define\tGLOBAL(X)\tGLOBAL0(__USER_LABEL_PREFIX__,X)\n+\n+#define ALIAS(X,Y)\t.global GLOBAL(X); .set GLOBAL(X),GLOBAL(Y)\n+\n+#ifdef __SH2A__\n+#undef FMOVD_WORKS\n+#define FMOVD_WORKS\n+#endif\n+\n+#ifdef __LITTLE_ENDIAN__\n+#define DR00 fr1\n+#define DR01 fr0\n+#define DR20 fr3\n+#define DR21 fr2\n+#define DR40 fr5\n+#define DR41 fr4\n+#else /* !__LITTLE_ENDIAN__ */\n+#define DR00 fr0\n+#define DR01 fr1\n+#define DR20 fr2\n+#define DR21 fr3\n+#define DR40 fr4\n+#define DR41 fr5\n+#endif /* !__LITTLE_ENDIAN__ */"}, {"sha": "272d9e57eb6be3f1dd8a9ba74d567e29b7317ff5", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -631,7 +631,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t   || (TARGET_HARD_SH4 && TARGET_SH2E)\t\t\t\\\n \t\t   || (TARGET_SHCOMPACT && TARGET_FPU_ANY)))\t\t\\\n \tsh_div_strategy = SH_DIV_CALL_FP;\t\t\t\t\\\n-      else if (! strcmp (sh_div_str, \"call-table\") && TARGET_SH3)\t\\\n+      else if (! strcmp (sh_div_str, \"call-table\") && TARGET_SH2)\t\\\n \tsh_div_strategy = SH_DIV_CALL_TABLE;\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t/* Pick one that makes most sense for the target in general.\t\\\n@@ -651,6 +651,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t  sh_div_strategy = SH_DIV_CALL_FP;\t\t\t\t\\\n         /* SH1 .. SH3 cores often go into small-footprint systems, so\t\\\n \t   default to the smallest implementation available.  */\t\\\n+\telse if (TARGET_SH2)\t/* ??? EXPERIMENTAL */\t\t\t\\\n+\t  sh_div_strategy = SH_DIV_CALL_TABLE;\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\t\\\n \t  sh_div_strategy = SH_DIV_CALL_DIV1;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "c81cc3fd02049776a376efb48045572e805f4b32", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -76,7 +76,8 @@ gt-sh.h : s-gtype ; @true\n \n IC_EXTRA_PARTS= libic_invalidate_array_4-100.a libic_invalidate_array_4-200.a \\\n libic_invalidate_array_4a.a\n-EXTRA_MULTILIB_PARTS= $(IC_EXTRA_PARTS)\n+OPT_EXTRA_PARTS= libgcc-Os-4-200.a\n+EXTRA_MULTILIB_PARTS= $(IC_EXTRA_PARTS) $(OPT_EXTRA_PARTS)\n \n $(T)ic_invalidate_array_4-100.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4-100.o -DL_ic_invalidate_array -DWAYS=1 -DWAY_SIZE=0x2000 -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n@@ -93,6 +94,13 @@ $(T)ic_invalidate_array_4a.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n $(T)libic_invalidate_array_4a.a: $(T)ic_invalidate_array_4a.o $(GCC_PASSES)\n \t$(AR_CREATE_FOR_TARGET) $(T)libic_invalidate_array_4a.a $(T)ic_invalidate_array_4a.o\n \n+$(T)sdivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_sdivsi3_i4i -x assembler-with-cpp $<\n+$(T)udivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_udivsi3_i4i -x assembler-with-cpp $<\n+$(T)libgcc-Os-4-200.a: $(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o $(GCC_PASSES)\n+\t$(AR_CREATE_FOR_TARGET) $@ $(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o\n+\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "429cec999e89d30b9ef04e081bc4f38063ddefab", "filename": "gcc/config/sh/t-superh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Ft-superh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1d352611a48f7104634a420106f8fc74fb3547/gcc%2Fconfig%2Fsh%2Ft-superh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-superh?ref=3f1d352611a48f7104634a420106f8fc74fb3547", "patch": "@@ -1,6 +1,6 @@\n EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o \\\n \tcrtbegin.o crtend.o crtbeginS.o crtendS.o \\\n-\tcrt1-mmu.o gcrt1-mmu.o gcrt1.o $(IC_EXTRA_PARTS)\n+\tcrt1-mmu.o gcrt1-mmu.o gcrt1.o $(IC_EXTRA_PARTS) $(OPT_EXTRA_PARTS)\n \n # Compile crt1-mmu.o as crt1.o with -DMMU_SUPPORT\n $(T)crt1-mmu.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)"}]}