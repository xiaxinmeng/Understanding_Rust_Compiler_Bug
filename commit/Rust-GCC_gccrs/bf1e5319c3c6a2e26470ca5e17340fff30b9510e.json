{"sha": "bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZTUzMTljM2M2YTJlMjY0NzBjYTVlMTczNDBmZmYzMGI5NTEwZQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1998-04-08T14:03:48Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-04-08T14:03:48Z"}, "message": "tree.def (EXPR_WITH_FILE_LOCATION): New tree node definition.\n\nd\nFri Apr  3 17:02:13 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* tree.def (EXPR_WITH_FILE_LOCATION): New tree node definition.\n \t* tree.h (EXPR_WFL_{NODE,FILENAME,FILENAME_NODE,LINENO,\n \tCOLNO,LINECOL,SET_LINECOL,EMIT_LINE_NOTE}): New macros.\n \t(build_expr_wfl): New prototype declaration.\n \t* tree.c (build_expr_wfl): New function, to build\n  \tEXPR_WITH_FILE_LOCATION nodes.\n \t(copy_node): Don't zero TREE_CHAIN if copying a\n  \tEXPR_WITH_FILE_LOCATION node.\n \t* print-tree.c (print_node): Handle EXPR_WITH_FILE_LOCATION.\n \t* expr.c (expand_expr): Handle EXPR_WITH_FILE_LOCATION.\n\nFrom-SVN: r19049", "tree": {"sha": "da1bfbbe113dd95c4e32fc4661d73298fc0876a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da1bfbbe113dd95c4e32fc4661d73298fc0876a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/comments", "author": null, "committer": null, "parents": [{"sha": "1382bac6e8cd0595741e2d69e38e585232b73eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1382bac6e8cd0595741e2d69e38e585232b73eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1382bac6e8cd0595741e2d69e38e585232b73eba"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "f37218ee967f2af20dfe21f4ed8d245f05e1e5b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -1,3 +1,16 @@\n+Fri Apr  3 17:02:13 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+ \n+ \t* tree.def (EXPR_WITH_FILE_LOCATION): New tree node definition.\n+ \t* tree.h (EXPR_WFL_{NODE,FILENAME,FILENAME_NODE,LINENO,\n+ \tCOLNO,LINECOL,SET_LINECOL,EMIT_LINE_NOTE}): New macros.\n+ \t(build_expr_wfl): New prototype declaration.\n+ \t* tree.c (build_expr_wfl): New function, to build\n+  \tEXPR_WITH_FILE_LOCATION nodes.\n+ \t(copy_node): Don't zero TREE_CHAIN if copying a\n+  \tEXPR_WITH_FILE_LOCATION node.\n+ \t* print-tree.c (print_node): Handle EXPR_WITH_FILE_LOCATION.\n+ \t* expr.c (expand_expr): Handle EXPR_WITH_FILE_LOCATION.\n+\n Wed Apr  8 12:51:19 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (x86-dg-dgux): Run fixinc.dgux."}, {"sha": "c126520a08747887d4146771ac1dfc251fd77825", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -5171,6 +5171,11 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t       copy_rtx (XEXP (TREE_CST_RTL (exp), 0)));\n       return TREE_CST_RTL (exp);\n \n+    case EXPR_WITH_FILE_LOCATION:\n+      if (EXPR_WFL_EMIT_LINE_NOTE (exp))\n+\temit_line_note (EXPR_WFL_FILENAME (exp), EXPR_WFL_LINENO (exp));\n+      return expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n+\n     case SAVE_EXPR:\n       context = decl_function_context (exp);\n "}, {"sha": "6674a18aa8d55427051964242e8a406a05597ed5", "filename": "gcc/print-tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -571,6 +571,15 @@ print_node (file, prefix, node, indent)\n \t      print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n \t    }\n \t}\n+\n+      if (TREE_CODE (node) == EXPR_WITH_FILE_LOCATION)\n+\t{\n+\t  indent_to (file, indent+4);\n+          fprintf (file, \"%s:%d:%d\", \n+\t\t   (EXPR_WFL_FILENAME_NODE (node ) ?\n+\t\t    EXPR_WFL_FILENAME (node) : \"(no file info)\"),\n+\t\t   EXPR_WFL_LINENO (node), EXPR_WFL_COLNO (node));\n+\t}\n       break;\n \n     case 'c':"}, {"sha": "c0b1e34c2c664c9ae4d13fb5470eecea54fa8080", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -1185,7 +1185,9 @@ copy_node (node)\n   for (i = length / sizeof (int) * sizeof (int); i < length; i++)\n     ((char *) t)[i] = ((char *) node)[i];\n \n-  TREE_CHAIN (t) = 0;\n+  /* EXPR_WITH_FILE_LOCATION must keep filename info stored in TREE_CHAIN */\n+  if (TREE_CODE (node) != EXPR_WITH_FILE_LOCATION)\n+    TREE_CHAIN (t) = 0;\n   TREE_ASM_WRITTEN (t) = 0;\n \n   if (TREE_CODE_CLASS (code) == 'd')\n@@ -3218,6 +3220,26 @@ build_block (vars, tags, subblocks, supercontext, chain)\n   BLOCK_CHAIN (block) = chain;\n   return block;\n }\n+\n+/* EXPR_WITH_FILE_LOCATION are used to keep track of the exact\n+   location where an expression or an identifier were encountered. It\n+   is necessary for languages where the frontend parser will handle\n+   recursively more than one file (Java is one of them).  */\n+\n+tree\n+build_expr_wfl (node, file, line, col)\n+     tree node;\n+     char *file;\n+     int line, col;\n+{\n+  register tree wfl = make_node (EXPR_WITH_FILE_LOCATION);\n+  EXPR_WFL_NODE (wfl) = node;\n+  EXPR_WFL_FILENAME_NODE (wfl) = get_identifier (file);\n+  EXPR_WFL_SET_LINECOL (wfl, line, col);\n+  TREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n+  TREE_TYPE (wfl) = TREE_TYPE (node);\n+  return wfl;\n+}\n \f\n /* Return a declaration like DDECL except that its DECL_MACHINE_ATTRIBUTE\n    is ATTRIBUTE.  */"}, {"sha": "292a7ea27f2e2047de1f137cf4e35e5c096851ef", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -739,6 +739,11 @@ DEFTREECODE (EXIT_EXPR, \"exit_expr\", 's', 1)\n    The type should be void and the value should be ignored.  */\n DEFTREECODE (LOOP_EXPR, \"loop_expr\", 's', 1)\n \n+/* Used to represent a tree node, such as IDENTIFIER_NODE or an EXPR\n+   node, adding several location information: a file name, a line\n+   number and column number. It is expanded as the node it refers to\n+   and can be considered a no-op \"conversion\" with an annotation.  */\n+DEFTREECODE (EXPR_WITH_FILE_LOCATION, \"expr_with_file_location\", '1', 2)\n /*\n Local variables:\n mode:c"}, {"sha": "03af577247c38e83fd3850b0d724d07a2accefc9", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e5319c3c6a2e26470ca5e17340fff30b9510e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bf1e5319c3c6a2e26470ca5e17340fff30b9510e", "patch": "@@ -643,6 +643,17 @@ struct tree_vec\n #define TREE_OPERAND(NODE, I) ((NODE)->exp.operands[I])\n #define TREE_COMPLEXITY(NODE) ((NODE)->exp.complexity)\n \n+/* In expression with file location information.  */\n+#define EXPR_WFL_NODE(NODE) TREE_OPERAND((NODE), 0)\n+#define EXPR_WFL_FILENAME(NODE) (IDENTIFIER_POINTER ((NODE)->common.chain))\n+#define EXPR_WFL_FILENAME_NODE(NODE) ((NODE)->common.chain)\n+#define EXPR_WFL_LINENO(NODE) ((NODE)->exp.complexity >> 12)\n+#define EXPR_WFL_COLNO(NODE) ((NODE)->exp.complexity & 0xfff)\n+#define EXPR_WFL_LINECOL(NODE) ((NODE)->exp.complexity)\n+#define EXPR_WFL_SET_LINECOL(NODE, LINE, COL) \\\n+  (EXPR_WFL_LINECOL(NODE) = ((LINE) << 12) | ((COL) & 0xfff))\n+#define EXPR_WFL_EMIT_LINE_NOTE(NODE) ((NODE)->common.lang_flag_0)\n+\n struct tree_exp\n {\n   char common[sizeof (struct tree_common)];\n@@ -1296,6 +1307,7 @@ extern tree build_decl_list\t\tPROTO((tree, tree));\n extern tree build_expr_list\t\tPROTO((tree, tree));\n extern tree build_decl\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_block\t\t\tPROTO((tree, tree, tree, tree, tree));\n+extern tree build_expr_wfl              PROTO((tree, char *, int, int));\n \n /* Construct various nodes representing data types.  */\n "}]}