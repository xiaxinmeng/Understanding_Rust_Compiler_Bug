{"sha": "f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2ZmJlZWEwZDAwMTczYmY2NGNkYTVlYjZiOTZmMWRmNTVkNWZkOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-18T16:36:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-18T16:36:33Z"}, "message": "cse.c (delete_trivially_dead_insns): Delete the libcall block when return value is unused.\n\n\n\t* cse.c (delete_trivially_dead_insns): Delete the libcall block\n\twhen return value is unused.\n\nFrom-SVN: r44112", "tree": {"sha": "af5b08ba96e4f3b1c859fcd07bd5e1691888f31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af5b08ba96e4f3b1c859fcd07bd5e1691888f31b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8/comments", "author": null, "committer": null, "parents": [{"sha": "222f7ba9a4fc02e6573a85c3dab19108a200aba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222f7ba9a4fc02e6573a85c3dab19108a200aba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222f7ba9a4fc02e6573a85c3dab19108a200aba0"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "066b41200d8bd1e4d4d1df4b156842374f5a40dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "patch": "@@ -1,3 +1,8 @@\n+Wed Jul 18 18:35:01 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cse.c (delete_trivially_dead_insns): Delete the libcall block\n+\twhen return value is unused.\n+\n Wed Jul 18 18:28:16 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (pre_insert_copy_insn): Call update_ld_motion_stores."}, {"sha": "73cbb880f2d9888ab03980840cd7afa4353b7877", "filename": "gcc/cse.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f06fbeea0d00173bf64cda5eb6b96f1df55d5fd8", "patch": "@@ -7488,7 +7488,7 @@ count_reg_usage (x, counts, dest, incr)\n static bool\n set_live_p (set, insn, counts)\n      rtx set;\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n      int *counts;\n {\n #ifdef HAVE_cc0\n@@ -7630,8 +7630,19 @@ delete_trivially_dead_insns (insns, nreg, preserve_basic_blocks)\n \tif (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n \t  {\n \t    in_libcall = 1;\n-\t    live_insn = 1;\n-\t    dead_libcall = dead_libcall_p (insn);\n+\t    /* If the insn storing return value is dead, whole libcall is dead.\n+\t       Otherwise attempt to eliminate libcall by doing an direct\n+\t       operation.  */\n+\t    if (!insn_live_p (insn, counts))\n+\t      {\n+\t\tlive_insn = 0;\n+\t\tdead_libcall = 1;\n+\t      }\n+\t    else\n+\t      {\n+\t\tlive_insn = 1;\n+\t\tdead_libcall = dead_libcall_p (insn);\n+\t      }\n \t  }\n \telse if (in_libcall)\n \t  live_insn = ! dead_libcall;\n@@ -7671,8 +7682,19 @@ delete_trivially_dead_insns (insns, nreg, preserve_basic_blocks)\n \t  if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n \t    {\n \t      in_libcall = 1;\n-\t      live_insn = 1;\n-\t      dead_libcall = dead_libcall_p (insn);\n+\t    /* If the insn storing return value is dead, whole libcall is dead.\n+\t       Otherwise attempt to eliminate libcall by doing an direct\n+\t       operation.  */\n+\t    if (!insn_live_p (insn, counts))\n+\t      {\n+\t\tlive_insn = 0;\n+\t\tdead_libcall = 1;\n+\t      }\n+\t    else\n+\t      {\n+\t\tlive_insn = 1;\n+\t\tdead_libcall = dead_libcall_p (insn);\n+\t      }\n \t    }\n \t  else if (in_libcall)\n \t    live_insn = ! dead_libcall;"}]}