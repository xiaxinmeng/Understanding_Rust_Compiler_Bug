{"sha": "37e93925366676201b526624e9f8dc32d82b4ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlOTM5MjUzNjY2NzYyMDFiNTI2NjI0ZTlmOGRjMzJkODJiNGZmMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-23T14:14:31Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-23T14:16:18Z"}, "message": "i386: Add PPERM two-operand 64bit vector permutation [PR89021]\n\nAdd emulation of V8QI PPERM permutations for TARGET_XOP target.  Similar\nto PSHUFB, the permutation is performed with V16QI PPERM instruction,\nwhere selector is defined in V16QI mode with inactive elements set to 0x80.\nSpecific to two operand permutations is the remapping of elements from\nthe second operand (e.g. e[8] -> e[16]), as we have to account for the\ninactive elements from the first operand.\n\n2021-06-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/89021\n\t* config/i386/i386-expand.c (expand_vec_perm_pshufb):\n\tHandle 64bit modes for TARGET_XOP.  Use indirect gen_* functions.\n\t* config/i386/mmx.md (mmx_ppermv64): New insn pattern.\n\t* config/i386/i386.md (unspec): Move UNSPEC_XOP_PERMUTE from ...\n\t* config/i386/sse.md (unspec): ... here.", "tree": {"sha": "ed32b90a49693afd597530f0cb5be3c673437b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed32b90a49693afd597530f0cb5be3c673437b5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37e93925366676201b526624e9f8dc32d82b4ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e93925366676201b526624e9f8dc32d82b4ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e93925366676201b526624e9f8dc32d82b4ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e93925366676201b526624e9f8dc32d82b4ff2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371c1992624c9269e2d5747561a8b27b30e485ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371c1992624c9269e2d5747561a8b27b30e485ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371c1992624c9269e2d5747561a8b27b30e485ee"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "9c922bf1bf172691f94a47cb3adbccc6305ad1de", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 61, "deletions": 14, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=37e93925366676201b526624e9f8dc32d82b4ff2", "patch": "@@ -17467,10 +17467,23 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \n   if (!d->one_operand_p)\n     {\n-      if (!TARGET_XOP || GET_MODE_SIZE (d->vmode) != 16)\n+      if (GET_MODE_SIZE (d->vmode) == 8)\n+\t{\n+\t  if (!TARGET_XOP)\n+\t    return false;\n+\t  vmode = V8QImode;\n+\t}\n+      else if (GET_MODE_SIZE (d->vmode) == 16)\n+\t{\n+\t  if (!TARGET_XOP)\n+\t    return false;\n+\t}\n+      else if (GET_MODE_SIZE (d->vmode) == 32)\n \t{\n-\t  if (TARGET_AVX2\n-\t      && valid_perm_using_mode_p (V2TImode, d))\n+\t  if (!TARGET_AVX2)\n+\t    return false;\n+\n+\t  if (valid_perm_using_mode_p (V2TImode, d))\n \t    {\n \t      if (d->testing_p)\n \t\treturn true;\n@@ -17492,6 +17505,8 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \t    }\n \t  return false;\n \t}\n+      else\n+\treturn false;\n     }\n   else\n     {\n@@ -17651,45 +17666,77 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n     {\n       rtx m128 = GEN_INT (-128);\n \n+      /* Remap elements from the second operand, as we have to\n+\t account for inactive top 8 elements from the first operand.  */\n+      if (!d->one_operand_p)\n+\tfor (i = 0; i < nelt; ++i)\n+\t  {\n+\t    int ival = INTVAL (rperm[i]);\n+\t    if (ival >= 8)\n+\t      ival += 8;\n+\t    rperm[i] = GEN_INT (ival);\n+\t  }\n+\n+      /* V8QI is emulated with V16QI instruction, fill inactive\n+\t elements in the top 8 positions with zeros.  */\n       for (i = nelt; i < 16; ++i)\n \trperm[i] = m128;\n+\n       vpmode = V16QImode;\n     }\n \n   vperm = gen_rtx_CONST_VECTOR (vpmode,\n \t\t\t\tgen_rtvec_v (GET_MODE_NUNITS (vpmode), rperm));\n   vperm = force_reg (vpmode, vperm);\n \n-  target = d->target;\n-  if (d->vmode != vmode)\n+  if (vmode == d->vmode)\n+    target = d->target;\n+  else\n     target = gen_reg_rtx (vmode);\n+\n   op0 = gen_lowpart (vmode, d->op0);\n+\n   if (d->one_operand_p)\n     {\n+      rtx (*gen) (rtx, rtx, rtx);\n+\n       if (vmode == V8QImode)\n-\temit_insn (gen_mmx_pshufbv8qi3 (target, op0, vperm));\n+\tgen = gen_mmx_pshufbv8qi3;\n       else if (vmode == V16QImode)\n-\temit_insn (gen_ssse3_pshufbv16qi3 (target, op0, vperm));\n+\tgen = gen_ssse3_pshufbv16qi3;\n       else if (vmode == V32QImode)\n-\temit_insn (gen_avx2_pshufbv32qi3 (target, op0, vperm));\n+\tgen = gen_avx2_pshufbv32qi3;\n       else if (vmode == V64QImode)\n-\temit_insn (gen_avx512bw_pshufbv64qi3 (target, op0, vperm));\n+\tgen = gen_avx512bw_pshufbv64qi3;\n       else if (vmode == V8SFmode)\n-\temit_insn (gen_avx2_permvarv8sf (target, op0, vperm));\n+\tgen = gen_avx2_permvarv8sf;\n       else if (vmode == V8SImode)\n-\temit_insn (gen_avx2_permvarv8si (target, op0, vperm));\n+\tgen = gen_avx2_permvarv8si;\n       else if (vmode == V16SFmode)\n-\temit_insn (gen_avx512f_permvarv16sf (target, op0, vperm));\n+\tgen = gen_avx512f_permvarv16sf;\n       else if (vmode == V16SImode)\n-\temit_insn (gen_avx512f_permvarv16si (target, op0, vperm));\n+\tgen = gen_avx512f_permvarv16si;\n       else\n \tgcc_unreachable ();\n+\n+      emit_insn (gen (target, op0, vperm));\n     }\n   else\n     {\n+      rtx (*gen) (rtx, rtx, rtx, rtx);\n+\n       op1 = gen_lowpart (vmode, d->op1);\n-      emit_insn (gen_xop_pperm (target, op0, op1, vperm));\n+\n+      if (vmode == V8QImode)\n+\tgen = gen_mmx_ppermv64;\n+      else if (vmode == V16QImode)\n+\tgen = gen_xop_pperm;\n+      else\n+\tgcc_unreachable ();\n+\n+      emit_insn (gen (target, op0, op1, vperm));\n     }\n+\n   if (target != d->target)\n     emit_move_insn (d->target, gen_lowpart (d->vmode, target));\n "}, {"sha": "9043be3105db05946349e82fb9c4464a5b52b649", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=37e93925366676201b526624e9f8dc32d82b4ff2", "patch": "@@ -120,6 +120,7 @@\n   UNSPEC_MOVMSK\n   UNSPEC_BLENDV\n   UNSPEC_PSHUFB\n+  UNSPEC_XOP_PERMUTE\n   UNSPEC_RCP\n   UNSPEC_RSQRT\n   UNSPEC_PSADBW"}, {"sha": "7a827dceb015aa27ece0e1488ec20855f8241c8f", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=37e93925366676201b526624e9f8dc32d82b4ff2", "patch": "@@ -2331,6 +2331,19 @@\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n \n+;; XOP permute instructions\n+(define_insn \"mmx_ppermv64\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=x\")\n+\t(unspec:V8QI\n+\t  [(match_operand:V8QI 1 \"register_operand\" \"x\")\n+\t   (match_operand:V8QI 2 \"register_operand\" \"x\")\n+\t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_XOP_PERMUTE))]\n+  \"TARGET_XOP && TARGET_MMX_WITH_SSE\"\n+  \"vpperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral logical operations"}, {"sha": "c5f739c73b52bea604e888f263175a97014f1ec6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e93925366676201b526624e9f8dc32d82b4ff2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=37e93925366676201b526624e9f8dc32d82b4ff2", "patch": "@@ -53,7 +53,6 @@\n   UNSPEC_FMADDSUB\n   UNSPEC_XOP_UNSIGNED_CMP\n   UNSPEC_XOP_TRUEFALSE\n-  UNSPEC_XOP_PERMUTE\n   UNSPEC_FRCZ\n \n   ;; For AES support"}]}