{"sha": "3b415018d356df95c607713ec876ade84884b311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0MTUwMThkMzU2ZGY5NWM2MDc3MTNlYzg3NmFkZTg0ODg0YjMxMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2004-10-18T15:52:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2004-10-18T15:52:51Z"}, "message": "re PR bootstrap/17684 (/usr/ccs/bin/ld: Can't create libgcc_s.sl)\n\n2004-11-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR bootstrap/17684\n\t* Makefile.in (clean): Remove libgcc_s$(SHLIB_EXT).1.stage?.\n\t(stage1-start): Remove and copy libunwind.a and\n\tlibunwind*$(SHLIB_EXT) instead of libunwind*.\n\t(stage2-start): Likewise.\n\t(stage3-start): Likewise.\n\t(stage4-start): Likewise.\n\t(stageprofile-start): Likewise.\n\t(stagefeedback-start): Likewise.\n\n\t* config/alpha/t-osf4 (SHLIB_LINK): Use a temporary file for\n\tthe shared library to be created and don't remove the existing\n\tshared library.\n\t* config/arm/t-netbsd (SHLIB_LINK): Likewise.\n\t* config/i386/t-nwld (SHLIB_LINK): Likewise.\n\t* config/mips/t-slibgcc-irix (SHLIB_LINK): Likewise.\n\t* config/pa/t-hpux-shlib (SHLIB_LINK): Likewise.\n\t* config/sh/t-linux (SHLIB_LINK): Likewise.\n\t* config/t-libunwind-elf (SHLIBUNWIND_LINK): Likewise.\n\t* config/t-slibgcc-darwin (SHLIB_LINK): Likewise.\n\t* config/t-slibgcc-elf-ver (SHLIB_LINK): Likewise.\n\t* config/t-slibgcc-sld (SHLIB_LINK): Likewise.\n\n\t* mklibgcc.in (libgcc-stage-start): Also move \"*${objext}s\"\n\tfiles.\n\nFrom-SVN: r89227", "tree": {"sha": "1fd7915d31e9eb0be41a80146cd85b0abc22da58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd7915d31e9eb0be41a80146cd85b0abc22da58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b415018d356df95c607713ec876ade84884b311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b415018d356df95c607713ec876ade84884b311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b415018d356df95c607713ec876ade84884b311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b415018d356df95c607713ec876ade84884b311/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2041967826c644f860ec12c6f32214b1e3d3899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2041967826c644f860ec12c6f32214b1e3d3899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2041967826c644f860ec12c6f32214b1e3d3899"}], "stats": {"total": 118, "additions": 94, "deletions": 24}, "files": [{"sha": "2c9b85e67e1329f3989485495ff1eeb71f9d17cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -1,3 +1,31 @@\n+2004-11-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/17684\n+\t* Makefile.in (clean): Remove libgcc_s$(SHLIB_EXT).1.stage?.\n+\t(stage1-start): Remove and copy libunwind.a and\n+\tlibunwind*$(SHLIB_EXT) instead of libunwind*.\n+\t(stage2-start): Likewise.\n+\t(stage3-start): Likewise.\n+\t(stage4-start): Likewise.\n+\t(stageprofile-start): Likewise.\n+\t(stagefeedback-start): Likewise.\n+\n+\t* config/alpha/t-osf4 (SHLIB_LINK): Use a temporary file for\n+\tthe shared library to be created and don't remove the existing\n+\tshared library.\n+\t* config/arm/t-netbsd (SHLIB_LINK): Likewise.\n+\t* config/i386/t-nwld (SHLIB_LINK): Likewise.\n+\t* config/mips/t-slibgcc-irix (SHLIB_LINK): Likewise.\n+\t* config/pa/t-hpux-shlib (SHLIB_LINK): Likewise.\n+\t* config/sh/t-linux (SHLIB_LINK): Likewise.\n+\t* config/t-libunwind-elf (SHLIBUNWIND_LINK): Likewise.\n+\t* config/t-slibgcc-darwin (SHLIB_LINK): Likewise.\n+\t* config/t-slibgcc-elf-ver (SHLIB_LINK): Likewise.\n+\t* config/t-slibgcc-sld (SHLIB_LINK): Likewise.\n+\n+\t* mklibgcc.in (libgcc-stage-start): Also move \"*${objext}s\"\n+\tfiles.\n+\n 2004-10-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h (reg_set_iterator): New."}, {"sha": "def0c867a5ba1d780c7ec1d57b31fb1b65e880e6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -3077,7 +3077,7 @@ mostlyclean: lang.mostlyclean\n # that don't exist in the distribution.\n clean: mostlyclean lang.clean\n \t-rm -f libgcc.a libgcc_eh.a libgcov.a\n-\t-rm -f libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).1\n+\t-rm -f libgcc_s*\n \t-rm -f libunwind*\n \t-rm -f config.h tconfig.h bconfig.h tm_p.h tm.h\n \t-rm -f options.c options.h optionlist\n@@ -3911,7 +3911,7 @@ stage1-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage1/libgcc.a stage1/libgcc_eh.a stage1/libgcov.a\n \t-rm -f stage1/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage1/libunwind*\n+\t-rm -f stage1/libunwind.a stage1/libunwind*$(SHLIB_EXT)\n \t-cp libgcc.a stage1\n \t-$(RANLIB_FOR_TARGET) stage1/libgcc.a\n \t-cp libgcov.a stage1\n@@ -3920,7 +3920,7 @@ stage1-start:\n \t   $(RANLIB_FOR_TARGET) stage1/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stage1\n-\t-cp libunwind* stage1\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage1\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage1/$${f} . ; \\\n \telse true; \\\n@@ -3950,7 +3950,7 @@ stage2-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage2/libgcc.a stage2/libgcov.a stage2/libgcc_eh.a\n \t-rm -f stage2/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage2/libunwind*\n+\t-rm -f stage2/libunwind.a stage2/libunwind*$(SHLIB_EXT)\n \t-cp libgcc.a stage2\n \t-$(RANLIB_FOR_TARGET) stage2/libgcc.a\n \t-cp libgcov.a stage2\n@@ -3959,7 +3959,7 @@ stage2-start:\n \t   $(RANLIB_FOR_TARGET) stage2/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stage2\n-\t-cp libunwind* stage2\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage2\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage2/$${f} . ; \\\n \telse true; \\\n@@ -3985,7 +3985,7 @@ stage3-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage3/libgcc.a stage3/libgcov.a stage3/libgcc_eh.a\n \t-rm -f stage3/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage3/libunwind*\n+\t-rm -f stage3/libunwind.a stage3/libunwind*$(SHLIB_EXT)\n \t-cp libgcc.a stage3\n \t-$(RANLIB_FOR_TARGET) stage3/libgcc.a\n \t-cp libgcov.a stage3\n@@ -3994,7 +3994,7 @@ stage3-start:\n \t   $(RANLIB_FOR_TARGET) stage3/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stage3\n-\t-cp libunwind* stage3\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage3\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage3/$${f} . ; \\\n \telse true; \\\n@@ -4020,7 +4020,7 @@ stage4-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage4/libgcc.a stage4/libgcov.a stage4/libgcc_eh.a\n \t-rm -f stage4/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage4/libunwind*\n+\t-rm -f stage4/libunwind.a stage4/libunwind*$(SHLIB_EXT)\n \t-cp libgcc.a stage4\n \t-$(RANLIB_FOR_TARGET) stage4/libgcc.a\n \t-cp libgcov.a stage4\n@@ -4029,7 +4029,7 @@ stage4-start:\n \t   $(RANLIB_FOR_TARGET) stage4/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stage4\n-\t-cp libunwind* stage4\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage4\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage4/$${f} . ; \\\n \telse true; \\\n@@ -4053,7 +4053,7 @@ stageprofile-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stageprofile && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stageprofile/libgcc.a stageprofile/libgcov.a stageprofile/libgcc_eh.a\n \t-rm -f stageprofile/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stageprofile/libunwind*\n+\t-rm -f stageprofile/libunwind.a stageprofile/libunwind*$(SHLIB_EXT)\n \t-cp libgcc.a stageprofile\n \t-$(RANLIB_FOR_TARGET) stageprofile/libgcc.a\n \t-cp libgcov.a stageprofile\n@@ -4062,7 +4062,7 @@ stageprofile-start:\n \t   $(RANLIB_FOR_TARGET) stageprofile/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stageprofile\n-\t-cp libunwind* stageprofile\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stageprofile\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stageprofile/$${f} . ; \\\n \telse true; \\\n@@ -4086,7 +4086,7 @@ stagefeedback-start:\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stagefeedback/libgcc.a stagefeedback/libgcov.a stagefeedback/libgcc_eh.a\n \t-rm -f stagefeedback/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stagefeedback/libunwind*\n+\t-rm -f stagefeedback/libunwind.a stagefeedback/libunwind*$(SHLIB_EXT)\n \t-rm -f *.da\n \t-for dir in fixinc po testsuite $(SUBDIRS); \\\n \t do \\\n@@ -4100,7 +4100,7 @@ stagefeedback-start:\n \t   $(RANLIB_FOR_TARGET) stagefeedback/libgcc_eh.a; \\\n \tfi\n \t-cp libgcc_s*$(SHLIB_EXT) stagefeedback\n-\t-cp libunwind* stagefeedback\n+\t-cp libunwind.a libunwind*$(SHLIB_EXT) stagefeedback\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stagefeedback/$${f} . ; \\\n \telse true; \\"}, {"sha": "97f2cdf41babaf14beb26407cd8d6613aaecac00", "filename": "gcc/config/alpha/t-osf4", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Falpha%2Ft-osf4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Falpha%2Ft-osf4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-osf4?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -16,8 +16,12 @@ SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,-hidden_symbol,pthread\\* -Wl,-hidden_symbol,__pthread\\* \\\n \t-Wl,-hidden_symbol,sched_get_\\* -Wl,-hidden_symbol,sched_yield \\\n \t-Wl,-msym -Wl,-set_version,gcc.1 -Wl,-soname,$(SHLIB_SONAME) \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SONAME) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SONAME)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "c5b4e68383b2f0f9b45fa7953172ef581f728f2a", "filename": "gcc/config/arm/t-netbsd", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Farm%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Farm%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-netbsd?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -11,8 +11,12 @@ SHLIB_OBJS = @shlib_objs@\n \n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,-soname,$(SHLIB_SONAME) \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SONAME) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SONAME)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "7983e79fc0080cfd49ffef1dfd9f8bedd711139a", "filename": "gcc/config/i386/t-nwld", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fi386%2Ft-nwld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fi386%2Ft-nwld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-nwld?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -46,9 +46,13 @@ SHLIB_LINK = set -e; \\\n \t\tthen echo \"xdcdata @shlib_so_name@.xdc\" >>@shlib_so_name@.def; \\\n \t\telse echo \"WARNING: $(SHLIB_NAME) built without XDC data will not work well.\" 1>&2; \\\n \tfi; \\\n-\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -o $(SHLIB_NAME) \\\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -o $(SHLIB_NAME).tmp \\\n \t\t$(SHLIB_SRC) -static-libgcc -lnetware \\\n \t\t-Wl,--Map,--map-info,full,--strip-all,--def-file,@shlib_so_name@.def; \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi; \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME); \\\n \trm -f @shlib_so_name@.imp; $(LN_S) $(SHLIB_MAP) @shlib_so_name@.imp; \\\n \techo $$$$(($$$$(<libgcc/build)+1)) >libgcc/build\n "}, {"sha": "843ecd79e2b3b9b184ba0b5e69722f27ba614370", "filename": "gcc/config/mips/t-slibgcc-irix", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -12,8 +12,12 @@ SHLIB_LC = -lc\n \n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,-soname,$(SHLIB_SONAME) \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SOLINK)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "1d63dcafb13baf737cc83369bd9cde6928da8a6d", "filename": "gcc/config/pa/t-hpux-shlib", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -5,8 +5,12 @@ SHLIB_SONAME = @shlib_base_name@.1\n SHLIB_OBJS = @shlib_objs@\n \n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared  -nodefaultlibs \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n         rm -f $(SHLIB_SONAME) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n         $(LN_S) $(SHLIB_NAME) $(SHLIB_SONAME)\n \n "}, {"sha": "3b917d19326aec9de8e998f117c9ce501d382360", "filename": "gcc/config/sh/t-linux", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -21,8 +21,12 @@ SHLIB_MAPFILES =  $(srcdir)/config/sh/libgcc-std.ver \\\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,--soname=$(SHLIB_SONAME) \\\n \t-Wl,--version-script=$(SHLIB_MAP) \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t(echo \"/* GNU ld script\"; \\\n \t echo \"   Use the shared library, but some functions are only in\"; \\\n \t echo \"   the static library.  */\"; \\"}, {"sha": "01550945bdbee856f98eac0fe628ffd918ae7dd9", "filename": "gcc/config/t-libunwind-elf", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-libunwind-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-libunwind-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-libunwind-elf?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -10,9 +10,14 @@ SHLIBUNWIND_NAME = @shlib_dir@@shlib_so_name@.so.$(SHLIBUNWIND_SOVERSION)\n \n SHLIBUNWIND_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared \\\n \t-nodefaultlibs -Wl,-h,$(SHLIBUNWIND_SONAME) \\\n-\t-Wl,-z,text -Wl,-z,defs \\\n-\t-o $(SHLIBUNWIND_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n+\t-Wl,-z,text -Wl,-z,defs -o $(SHLIBUNWIND_NAME).tmp \\\n+\t@multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIBUNWIND_NAME) ]; then \\\n+\t  mv -f $(SHLIBUNWIND_NAME) \\\n+\t     $(SHLIBUNWIND_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIBUNWIND_NAME).tmp $(SHLIBUNWIND_NAME) && \\\n \t$(LN_S) $(SHLIBUNWIND_NAME) $(SHLIB_SOLINK)\n \n # $(slibdir) double quoted to protect it from expansion while building"}, {"sha": "fbbf1c01afaba7d3410d6b9f09282091b2f3b78b", "filename": "gcc/config/t-slibgcc-darwin", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-darwin?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -12,10 +12,14 @@ SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n \n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -dynamiclib -nodefaultlibs \\\n \t-Wl,-install_name,$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SONAME) \\\n-\t-Wl,-flat_namespace -o $(SHLIB_NAME) \\\n+\t-Wl,-flat_namespace -o $(SHLIB_NAME).tmp \\\n \t$(SHLIB_VERSTRING) \\\n \t@multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SOLINK)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "be65b634dd3ae1cf9eb49c6168651140da6c02b8", "filename": "gcc/config/t-slibgcc-elf-ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-elf-ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-elf-ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-elf-ver?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -14,8 +14,12 @@ SHLIB_LC = -lc\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,--soname=$(SHLIB_SONAME) \\\n \t-Wl,--version-script=$(SHLIB_MAP) \\\n-\t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n+\t-o $(SHLIB_NAME).tmp @multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC) && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SOLINK)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "a4e5a07440b27609e9ecf97179f25b181feb8039", "filename": "gcc/config/t-slibgcc-sld", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-sld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fconfig%2Ft-slibgcc-sld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-sld?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -10,9 +10,13 @@ SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n \n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n \t-Wl,-h,$(SHLIB_SONAME) -Wl,-z,text -Wl,-z,defs \\\n-\t-Wl,-M,$(SHLIB_MAP) -o $(SHLIB_NAME) \\\n+\t-Wl,-M,$(SHLIB_MAP) -o $(SHLIB_NAME).tmp \\\n \t@multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SOLINK) && \\\n+\tif [ -f $(SHLIB_NAME) ]; then \\\n+\t  mv -f $(SHLIB_NAME) $(SHLIB_NAME).`basename $(STAGE_PREFIX)`; \\\n+\telse true; fi && \\\n+\tmv $(SHLIB_NAME).tmp $(SHLIB_NAME) && \\\n \t$(LN_S) $(SHLIB_NAME) $(SHLIB_SOLINK)\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time."}, {"sha": "9bdbd82b0f9d78c209b9c9e999c8f40e797dbf19", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b415018d356df95c607713ec876ade84884b311/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b415018d356df95c607713ec876ade84884b311/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=3b415018d356df95c607713ec876ade84884b311", "patch": "@@ -557,6 +557,7 @@ echo '\t  if [ -d $(stage)/$$dir ]; then true; else '$mkinstalldirs' $(stage)/$$d\n echo '\tdone'\n echo '\t-for dir in '\"${dirs}\"'; do \\'\n echo '\t  mv $$dir/*'\"${objext}\"' $(stage)/$$dir; \\'\n+echo '\t  mv $$dir/*'\"${objext}s\"' $(stage)/$$dir || true; \\'\n echo '\t  test ! -f $$dir/stacknote.s || mv $$dir/stacknote.s $(stage)/$$dir; \\'\n echo '\t  test ! -f $$dir/libgcc.a || mv $$dir/lib* $(stage)/$$dir; \\'\n echo '\tdone'"}]}