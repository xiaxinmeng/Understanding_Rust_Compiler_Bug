{"sha": "87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc5NjFkMWIyOWI1ZWNmZDhjYjMwMGE4NDcwMTQxYmNkMGE1MWYzMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-21T08:12:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-21T08:12:15Z"}, "message": "tree-ssa-sccvn.c (cond_stmts_equal_p): Compare two GIMPLE cond stmts, enhanced and split out from ...\n\n2015-10-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Compare two GIMPLE\n\tcond stmts, enhanced and split out from ...\n\t(vn_phi_eq): ... here.\n\nFrom-SVN: r229119", "tree": {"sha": "8d64780a987695070c20259e4d0eb9c6e1d57a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d64780a987695070c20259e4d0eb9c6e1d57a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87961d1b29b5ecfd8cb300a8470141bcd0a51f33/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39c97e4132a0e6b16ee4299d87f29c14d5db5313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c97e4132a0e6b16ee4299d87f29c14d5db5313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c97e4132a0e6b16ee4299d87f29c14d5db5313"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "6e30cdb3d933b6c10e3bbd266112ad82620ed785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87961d1b29b5ecfd8cb300a8470141bcd0a51f33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87961d1b29b5ecfd8cb300a8470141bcd0a51f33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "patch": "@@ -1,3 +1,9 @@\n+2015-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Compare two GIMPLE\n+\tcond stmts, enhanced and split out from ...\n+\t(vn_phi_eq): ... here.\n+\n 2015-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68031"}, {"sha": "ac21f75cea48838c77e69b57c7f35aed332697aa", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87961d1b29b5ecfd8cb300a8470141bcd0a51f33/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87961d1b29b5ecfd8cb300a8470141bcd0a51f33/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=87961d1b29b5ecfd8cb300a8470141bcd0a51f33", "patch": "@@ -2687,6 +2687,43 @@ vn_phi_compute_hash (vn_phi_t vp1)\n }\n \n \n+/* Return true if COND1 and COND2 represent the same condition, set\n+   *INVERTED_P if one needs to be inverted to make it the same as\n+   the other.  */\n+\n+static bool\n+cond_stmts_equal_p (gcond *cond1, gcond *cond2, bool *inverted_p)\n+{\n+  enum tree_code code1 = gimple_cond_code (cond1);\n+  enum tree_code code2 = gimple_cond_code (cond2);\n+  tree lhs1 = gimple_cond_lhs (cond1);\n+  tree lhs2 = gimple_cond_lhs (cond2);\n+  tree rhs1 = gimple_cond_rhs (cond1);\n+  tree rhs2 = gimple_cond_rhs (cond2);\n+\n+  *inverted_p = false;\n+  if (code1 == code2)\n+    ;\n+  else if (code1 == swap_tree_comparison (code2))\n+    std::swap (lhs2, rhs2);\n+  else if (code1 == invert_tree_comparison (code2, HONOR_NANS (lhs2)))\n+    *inverted_p = true;\n+  else if (code1 == invert_tree_comparison\n+\t   \t      (swap_tree_comparison (code2), HONOR_NANS (lhs2)))\n+    {\n+      std::swap (lhs2, rhs2);\n+      *inverted_p = true;\n+    }\n+  else\n+    return false;\n+\n+  if (! expressions_equal_p (vn_valueize (lhs1), vn_valueize (lhs2))\n+      || ! expressions_equal_p (vn_valueize (rhs1), vn_valueize (rhs2)))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Compare two phi entries for equality, ignoring VN_TOP arguments.  */\n \n static int\n@@ -2735,13 +2772,9 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n \t    if (gimple_code (last1) != GIMPLE_COND\n \t\t|| gimple_code (last2) != GIMPLE_COND)\n \t      return false;\n-\t    gcond *cond1 = as_a <gcond *> (last1);\n-\t    gcond *cond2 = as_a <gcond *> (last2);\n-\t    if (gimple_cond_code (cond1) != gimple_cond_code (cond2)\n-\t\t|| ! expressions_equal_p (gimple_cond_lhs (cond1),\n-\t\t\t\t       gimple_cond_lhs (cond2))\n-\t\t|| ! expressions_equal_p (gimple_cond_rhs (cond1),\n-\t\t\t\t\t  gimple_cond_rhs (cond2)))\n+\t    bool inverted_p;\n+\t    if (! cond_stmts_equal_p (as_a <gcond *> (last1),\n+\t\t\t\t      as_a <gcond *> (last2), &inverted_p))\n \t      return false;\n \n \t    /* Get at true/false controlled edges into the PHI.  */\n@@ -2752,6 +2785,11 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n \t\t\t\t\t\t\t  &te2, &fe2))\n \t      return false;\n \n+\t    /* Swap edges if the second condition is the inverted of the\n+\t       first.  */\n+\t    if (inverted_p)\n+\t      std::swap (te2, fe2);\n+\n \t    /* ???  Handle VN_TOP specially.  */\n \t    if (! expressions_equal_p (vp1->phiargs[te1->dest_idx],\n \t\t\t\t       vp2->phiargs[te2->dest_idx])"}]}