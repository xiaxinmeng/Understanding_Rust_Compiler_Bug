{"sha": "9898deac71b03c26a1080d077738a32e6107cf28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5OGRlYWM3MWIwM2MyNmExMDgwZDA3NzczOGEzMmU2MTA3Y2YyOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-07T12:40:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-07T12:40:26Z"}, "message": "(const_binop, case *_DIV_EXPR): Don't do special sizetype case if a\nconstant overflows.\n\nFrom-SVN: r13106", "tree": {"sha": "081f704500c2854b37367fa24d8384abce19ee4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081f704500c2854b37367fa24d8384abce19ee4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9898deac71b03c26a1080d077738a32e6107cf28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9898deac71b03c26a1080d077738a32e6107cf28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9898deac71b03c26a1080d077738a32e6107cf28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9898deac71b03c26a1080d077738a32e6107cf28/comments", "author": null, "committer": null, "parents": [{"sha": "1d58084ae01fd2f03fb2126ae5fcfaa3865fa701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d58084ae01fd2f03fb2126ae5fcfaa3865fa701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d58084ae01fd2f03fb2126ae5fcfaa3865fa701"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "b3f43657d2ceeb9e2621d4ff2384502fb95d5eba", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9898deac71b03c26a1080d077738a32e6107cf28/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9898deac71b03c26a1080d077738a32e6107cf28/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9898deac71b03c26a1080d077738a32e6107cf28", "patch": "@@ -1171,6 +1171,8 @@ const_binop (code, arg1, arg2, notrunc)\n \t     and saves time.  */\n \t  if (int2h == 0 && int2l > 0\n \t      && TREE_TYPE (arg1) == sizetype\n+\t      && ! TREE_CONSTANT_OVERFLOW (arg1)\n+\t      && ! TREE_CONSTANT_OVERFLOW (arg2)\n \t      && int1h == 0 && int1l >= 0)\n \t    {\n \t      if (code == CEIL_DIV_EXPR)\n@@ -1445,18 +1447,14 @@ size_binop (code, arg0, arg1)\n   if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n     {\n       /* And some specific cases even faster than that.  */\n-      if (code == PLUS_EXPR\n-\t  && TREE_INT_CST_LOW (arg0) == 0\n-\t  && TREE_INT_CST_HIGH (arg0) == 0)\n+      if (code == PLUS_EXPR && integer_zerop (arg0))\n \treturn arg1;\n-      if (code == MINUS_EXPR\n-\t  && TREE_INT_CST_LOW (arg1) == 0\n-\t  && TREE_INT_CST_HIGH (arg1) == 0)\n+      else if ((code == MINUS_EXPR || code == PLUS_EXPR)\n+\t       && integer_zerop (arg1))\n \treturn arg0;\n-      if (code == MULT_EXPR\n-\t  && TREE_INT_CST_LOW (arg0) == 1\n-\t  && TREE_INT_CST_HIGH (arg0) == 0)\n+      else if (code == MULT_EXPR && integer_onep (arg0))\n \treturn arg1;\n+\n       /* Handle general case of two integer constants.  */\n       return const_binop (code, arg0, arg1, 0);\n     }"}]}