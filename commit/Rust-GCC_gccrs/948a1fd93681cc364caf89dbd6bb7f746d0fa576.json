{"sha": "948a1fd93681cc364caf89dbd6bb7f746d0fa576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4YTFmZDkzNjgxY2MzNjRjYWY4OWRiZDZiYjdmNzQ2ZDBmYTU3Ng==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-06-13T19:39:19Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-06-13T19:39:19Z"}, "message": "fold-const.c (negate_expr_p): Handle VECTOR_CST.\n\n2013-06-13  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* fold-const.c (negate_expr_p): Handle VECTOR_CST.\n\t(fold_negate_expr): Likewise.\n\t(fold_real_zero_addition_p): Handle vectors.\n\t(fold_binary_loc) <PLUS_EXPR, MINUS_EXPR>: Likewise.\n\ngcc/testsuite/\n\t* gcc.dg/fold-minus-1.c: New testcase.\n\nFrom-SVN: r200073", "tree": {"sha": "2816dc4e656351349a314a7258c30b28db26aa18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2816dc4e656351349a314a7258c30b28db26aa18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948a1fd93681cc364caf89dbd6bb7f746d0fa576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948a1fd93681cc364caf89dbd6bb7f746d0fa576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948a1fd93681cc364caf89dbd6bb7f746d0fa576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948a1fd93681cc364caf89dbd6bb7f746d0fa576/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0597fb9cc60035f8edc15e5fccbde701cf277931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0597fb9cc60035f8edc15e5fccbde701cf277931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0597fb9cc60035f8edc15e5fccbde701cf277931"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "9241d1d7e33a1025007c29de6913fb880d2b1472", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=948a1fd93681cc364caf89dbd6bb7f746d0fa576", "patch": "@@ -1,3 +1,10 @@\n+2013-06-13  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (negate_expr_p): Handle VECTOR_CST.\n+\t(fold_negate_expr): Likewise.\n+\t(fold_real_zero_addition_p): Handle vectors.\n+\t(fold_binary_loc) <PLUS_EXPR, MINUS_EXPR>: Likewise.\n+\n 2013-06-14  Alan Modra  <amodra@gmail.com>\n \n \t* varasm.c (force_const_mem): Revert 2013-06-07 change."}, {"sha": "a8e5f43faf434c353484529d30812d0f048b0386", "filename": "gcc/fold-const.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=948a1fd93681cc364caf89dbd6bb7f746d0fa576", "patch": "@@ -421,6 +421,20 @@ negate_expr_p (tree t)\n       return negate_expr_p (TREE_REALPART (t))\n \t     && negate_expr_p (TREE_IMAGPART (t));\n \n+    case VECTOR_CST:\n+      {\n+\tif (FLOAT_TYPE_P (TREE_TYPE (type)) || TYPE_OVERFLOW_WRAPS (type))\n+\t  return true;\n+\n+\tint count = TYPE_VECTOR_SUBPARTS (type), i;\n+\n+\tfor (i = 0; i < count; i++)\n+\t  if (!negate_expr_p (VECTOR_CST_ELT (t, i)))\n+\t    return false;\n+\n+\treturn true;\n+      }\n+\n     case COMPLEX_EXPR:\n       return negate_expr_p (TREE_OPERAND (t, 0))\n \t     && negate_expr_p (TREE_OPERAND (t, 1));\n@@ -560,6 +574,21 @@ fold_negate_expr (location_t loc, tree t)\n       }\n       break;\n \n+    case VECTOR_CST:\n+      {\n+\tint count = TYPE_VECTOR_SUBPARTS (type), i;\n+\ttree *elts = XALLOCAVEC (tree, count);\n+\n+\tfor (i = 0; i < count; i++)\n+\t  {\n+\t    elts[i] = fold_negate_expr (loc, VECTOR_CST_ELT (t, i));\n+\t    if (elts[i] == NULL_TREE)\n+\t      return NULL_TREE;\n+\t  }\n+\n+\treturn build_vector (type, elts);\n+      }\n+\n     case COMPLEX_EXPR:\n       if (negate_expr_p (t))\n \treturn fold_build2_loc (loc, COMPLEX_EXPR, type,\n@@ -6168,9 +6197,12 @@ fold_real_zero_addition_p (const_tree type, const_tree addend, int negate)\n   if (!HONOR_SIGNED_ZEROS (TYPE_MODE (type)))\n     return true;\n \n+  /* In a vector or complex, we would need to check the sign of all zeros.  */\n+  if (TREE_CODE (addend) != REAL_CST)\n+    return false;\n+\n   /* Treat x + -0 as x - 0 and x - -0 as x + 0.  */\n-  if (TREE_CODE (addend) == REAL_CST\n-      && REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (addend)))\n+  if (REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (addend)))\n     negate = !negate;\n \n   /* The mode has signed zeros, and we have to honor their sign.\n@@ -10161,7 +10193,7 @@ fold_binary_loc (location_t loc,\n \t\t\t    fold_convert_loc (loc, type,\n \t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n \n-      if (INTEGRAL_TYPE_P (type))\n+      if (INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n \t{\n \t  /* Convert ~A + 1 to -A.  */\n \t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n@@ -10179,7 +10211,7 @@ fold_binary_loc (location_t loc,\n \t      STRIP_NOPS (tem);\n \t      if (operand_equal_p (tem, arg1, 0))\n \t\t{\n-\t\t  t1 = build_minus_one_cst (type);\n+\t\t  t1 = build_all_ones_cst (type);\n \t\t  return omit_one_operand_loc (loc, type, t1, arg1);\n \t\t}\n \t    }\n@@ -10193,7 +10225,7 @@ fold_binary_loc (location_t loc,\n \t      STRIP_NOPS (tem);\n \t      if (operand_equal_p (arg0, tem, 0))\n \t\t{\n-\t\t  t1 = build_minus_one_cst (type);\n+\t\t  t1 = build_all_ones_cst (type);\n \t\t  return omit_one_operand_loc (loc, type, t1, arg0);\n \t\t}\n \t    }\n@@ -10674,8 +10706,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t      TREE_OPERAND (arg1, 0)));\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && (FLOAT_TYPE_P (type)\n-\t      || INTEGRAL_TYPE_P (type))\n \t  && negate_expr_p (arg1)\n \t  && reorder_operands_p (arg0, arg1))\n \treturn fold_build2_loc (loc, MINUS_EXPR, type,\n@@ -10684,7 +10714,7 @@ fold_binary_loc (location_t loc,\n \t\t\t    fold_convert_loc (loc, type,\n \t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n       /* Convert -A - 1 to ~A.  */\n-      if (INTEGRAL_TYPE_P (type)\n+      if (TREE_CODE (type) != COMPLEX_TYPE\n \t  && TREE_CODE (arg0) == NEGATE_EXPR\n \t  && integer_onep (arg1)\n \t  && !TYPE_OVERFLOW_TRAPS (type))\n@@ -10693,13 +10723,13 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n \n       /* Convert -1 - A to ~A.  */\n-      if (INTEGRAL_TYPE_P (type)\n+      if (TREE_CODE (type) != COMPLEX_TYPE\n \t  && integer_all_onesp (arg0))\n \treturn fold_build1_loc (loc, BIT_NOT_EXPR, type, op1);\n \n \n-      /* X - (X / CST) * CST is X % CST.  */\n-      if (INTEGRAL_TYPE_P (type)\n+      /* X - (X / Y) * Y is X % Y.  */\n+      if ((INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n \t  && TREE_CODE (arg1) == MULT_EXPR\n \t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == TRUNC_DIV_EXPR\n \t  && operand_equal_p (arg0,"}, {"sha": "39580f763333630c19530a1b1d7307ef7f4a749b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=948a1fd93681cc364caf89dbd6bb7f746d0fa576", "patch": "@@ -1,3 +1,7 @@\n+2013-06-13  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/fold-minus-1.c: New testcase.\n+\n 2013-06-13  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/49074"}, {"sha": "c0fb89a01ae1dedc7192d26bb9ccf229f127b498", "filename": "gcc/testsuite/gcc.dg/fold-minus-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948a1fd93681cc364caf89dbd6bb7f746d0fa576/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-1.c?ref=948a1fd93681cc364caf89dbd6bb7f746d0fa576", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-gimple\" } */\n+\n+typedef int vec __attribute__((vector_size(2*sizeof(int))));\n+\n+void f(vec*x,vec*y){\n+  *x -= *x / *y * *y;\n+}\n+void g(vec*x,vec*y,vec*z){\n+  *x = -1 - *x;\n+  *y = -*y - 1;\n+  *z = -*z - 13;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"%\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"~\" 2 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"/\" \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\+\" \"gimple\"} } */\n+/* { dg-final { scan-tree-dump \"{ -13, -13 }\" \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}