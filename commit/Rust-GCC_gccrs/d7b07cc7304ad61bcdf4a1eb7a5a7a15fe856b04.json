{"sha": "d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiMDdjYzczMDRhZDYxYmNkZjRhMWViN2E1YTdhMTVmZTg1NmIwNA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.org", "date": "2008-01-05T20:49:41Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2008-01-05T20:49:41Z"}, "message": "re PR testsuite/32843 (libffi.call/return_sc.c)\n\n2008-01-05  Andreas Tobler  <a.tobler@schweiz.org>\n\n\tPR testsuite/32843\n\t* src/x86/ffi.c (ffi_prep_cif_machdep): Add code for\n\tsigned/unsigned int8/16 for X86_DARWIN.\n\tUpdated copyright info.\n\tHandle one and two byte structs with special cif->flags.\n\t* src/x86/ffitarget.h: Add special types for one and two byte structs.\n\tUpdated copyright info.\n\t* src/x86/darwin.S (ffi_call_SYSV): Rewrite to use a jump table like\n\tsysv.S\n\tRemove code to pop args from the stack after call.\n\tSpecial-case signed/unsigned for int8/16, one and two byte structs.\n\t(ffi_closure_raw_SYSV): Handle FFI_TYPE_UINT8,\n\tFFI_TYPE_SINT8, FFI_TYPE_UINT16, FFI_TYPE_SINT16, FFI_TYPE_UINT32,\n\tFFI_TYPE_SINT32.\n\tUpdated copyright info.\n\nFrom-SVN: r131343", "tree": {"sha": "1e5407100f6d327c2575e12a2213ac4154a55522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5407100f6d327c2575e12a2213ac4154a55522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/comments", "author": null, "committer": null, "parents": [{"sha": "5a37a60ccbdcbb5ae1c416d7292a0080f7aa0eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a37a60ccbdcbb5ae1c416d7292a0080f7aa0eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a37a60ccbdcbb5ae1c416d7292a0080f7aa0eb5"}], "stats": {"total": 183, "additions": 124, "deletions": 59}, "files": [{"sha": "0745382b57bf99e18732f68d474fd91487d758c5", "filename": "libffi/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "patch": "@@ -1,3 +1,21 @@\n+2008-01-05  Andreas Tobler  <a.tobler@schweiz.org>\n+\n+\tPR testsuite/32843\n+\t* src/x86/ffi.c (ffi_prep_cif_machdep): Add code for\n+\tsigned/unsigned int8/16 for X86_DARWIN.\n+\tUpdated copyright info.\n+\tHandle one and two byte structs with special cif->flags.\n+\t* src/x86/ffitarget.h: Add special types for one and two byte structs.\n+\tUpdated copyright info.\n+\t* src/x86/darwin.S (ffi_call_SYSV): Rewrite to use a jump table like\n+\tsysv.S\n+\tRemove code to pop args from the stack after call.\n+\tSpecial-case signed/unsigned for int8/16, one and two byte structs.\n+\t(ffi_closure_raw_SYSV): Handle FFI_TYPE_UINT8,\n+\tFFI_TYPE_SINT8, FFI_TYPE_UINT16, FFI_TYPE_SINT16, FFI_TYPE_UINT32,\n+\tFFI_TYPE_SINT32.\n+\tUpdated copyright info.\n+\n 2007-12-08  David Daney  <ddaney@avtrex.com>\n \n \t* src/mips/n32.S (ffi_call_N32):  Replace dadd with ADDU, dsub with "}, {"sha": "eeee8020383b1e7e0f1afae6143f0fd19f258dda", "filename": "libffi/src/x86/darwin.S", "status": "modified", "additions": 94, "deletions": 55, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fdarwin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fdarwin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fdarwin.S?ref=d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "patch": "@@ -1,7 +1,8 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 1996, 1998, 2001, 2002, 2003, 2005  Red Hat, Inc.\n-   \n-   X86 Foreign Function Interface \n+   darwin.S - Copyright (c) 1996, 1998, 2001, 2002, 2003, 2005  Red Hat, Inc.\n+\tCopyright (C) 2008  Free Software Foundation, Inc.\n+\n+   X86 Foreign Function Interface\n \n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n@@ -60,96 +61,118 @@ _ffi_call_SYSV:\n \n \tcall  *28(%ebp)\n \n-\t/* Remove the space we pushed for the args  */\n-\tmovl  16(%ebp),%ecx\n-\taddl  %ecx,%esp\n-\n \t/* Load %ecx with the return type code  */\n \tmovl  20(%ebp),%ecx\t\n \n+\t/* Protect %esi.  We're going to pop it in the epilogue.  */\n+\tpushl %esi\n+\n \t/* If the return value pointer is NULL, assume no return value.  */\n \tcmpl  $0,24(%ebp)\n-\tjne   retint\n+\tjne  0f\n \n \t/* Even if there is no space for the return value, we are \n \t   obliged to handle floating-point values.  */\n \tcmpl  $FFI_TYPE_FLOAT,%ecx\n \tjne   noretval\n \tfstp  %st(0)\n \n-        jmp   epilogue\n-\n-retint:\n-\tcmpl  $FFI_TYPE_INT,%ecx\n-\tjne   retfloat\n-\t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n-\tmovl  %eax,0(%ecx)\n \tjmp   epilogue\n+0:\n+\t.align 4\n+\tcall 1f\n+.Lstore_table:\n+\t.long   noretval-.Lstore_table\t\t/* FFI_TYPE_VOID */\n+\t.long   retint-.Lstore_table\t\t/* FFI_TYPE_INT */\n+\t.long   retfloat-.Lstore_table\t\t/* FFI_TYPE_FLOAT */\n+\t.long   retdouble-.Lstore_table\t\t/* FFI_TYPE_DOUBLE */\n+\t.long   retlongdouble-.Lstore_table     /* FFI_TYPE_LONGDOUBLE */\n+\t.long   retuint8-.Lstore_table\t\t/* FFI_TYPE_UINT8 */\n+\t.long   retsint8-.Lstore_table\t\t/* FFI_TYPE_SINT8 */\n+\t.long   retuint16-.Lstore_table\t\t/* FFI_TYPE_UINT16 */\n+\t.long   retsint16-.Lstore_table\t\t/* FFI_TYPE_SINT16 */\n+\t.long   retint-.Lstore_table\t\t/* FFI_TYPE_UINT32 */\n+\t.long   retint-.Lstore_table\t\t/* FFI_TYPE_SINT32 */\n+\t.long   retint64-.Lstore_table\t\t/* FFI_TYPE_UINT64 */\n+\t.long   retint64-.Lstore_table\t\t/* FFI_TYPE_SINT64 */\n+\t.long   retstruct-.Lstore_table\t\t/* FFI_TYPE_STRUCT */\n+\t.long   retint-.Lstore_table\t\t/* FFI_TYPE_POINTER */\n+\t.long   retstruct1b-.Lstore_table\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long   retstruct2b-.Lstore_table\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+1:\n+\tpop  %esi\n+\tadd  (%esi, %ecx, 4), %esi\n+\tjmp  *%esi\n+\n+\t/* Sign/zero extend as appropriate.  */\n+retsint8:\n+\tmovsbl  %al, %eax\n+\tjmp  retint\n+\n+retsint16:\n+\tmovswl  %ax, %eax\n+\tjmp  retint\n+\n+retuint8:\n+\tmovzbl  %al, %eax\n+\tjmp  retint\n+\n+retuint16:\n+\tmovzwl  %ax, %eax\n+\tjmp  retint\n \n retfloat:\n-\tcmpl  $FFI_TYPE_FLOAT,%ecx\n-\tjne   retdouble\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tfstps (%ecx)\n \tjmp   epilogue\n \n retdouble:\n-\tcmpl  $FFI_TYPE_DOUBLE,%ecx\n-\tjne   retlongdouble\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tfstpl (%ecx)\n \tjmp   epilogue\n \n retlongdouble:\n-\tcmpl  $FFI_TYPE_LONGDOUBLE,%ecx\n-\tjne   retint64\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tfstpt (%ecx)\n \tjmp   epilogue\n-\t\n-retint64:\t\n-\tcmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   retstruct1b\n+\n+retint64:\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tmovl  %eax,0(%ecx)\n \tmovl  %edx,4(%ecx)\n \tjmp   epilogue\n-\t\n-retstruct1b:\t\n-\tcmpl  $FFI_TYPE_SINT8,%ecx\n-        jne   retstruct2b\n+\n+retstruct1b:\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tmovb  %al,0(%ecx)\n \tjmp   epilogue\n \n-retstruct2b:\t\n-\tcmpl  $FFI_TYPE_SINT16,%ecx\n-        jne   retstruct\n+retstruct2b:\n \t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n+\tmovl  24(%ebp),%ecx\n \tmovw  %ax,0(%ecx)\n \tjmp   epilogue\n \n+retint:\n+\t/* Load %ecx with the pointer to storage for the return value  */\n+\tmovl  24(%ebp),%ecx\n+\tmovl  %eax,0(%ecx)\n+\n retstruct:\n-\tcmpl  $FFI_TYPE_STRUCT,%ecx\n-        jne   noretval\n \t/* Nothing to do!  */\n-        addl $4,%esp\n-        popl %ebp\n-        ret\n \n noretval:\n epilogue:\n-        addl $8,%esp\n-        movl %ebp,%esp\n-        popl %ebp\n-        ret\n+\tpopl %esi\n+\tmovl %ebp,%esp\n+\tpopl %ebp\n+\tret\n+\n .LFE1:\n .ffi_call_SYSV_end:\n \n@@ -177,18 +200,26 @@ _ffi_closure_SYSV:\n \tmovl\t-12(%ebp), %ecx\n \tcmpl\t$FFI_TYPE_INT, %eax\n \tje\t.Lcls_retint\n-\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\n+\t/* Handle FFI_TYPE_UINT8, FFI_TYPE_SINT8, FFI_TYPE_UINT16,\n+\t   FFI_TYPE_SINT16, FFI_TYPE_UINT32, FFI_TYPE_SINT32.  */\n+\tcmpl\t$FFI_TYPE_UINT64, %eax\n+\tjge\t0f\n+\tcmpl\t$FFI_TYPE_UINT8, %eax\n+\tjge\t.Lcls_retint\n+\n+0:\tcmpl\t$FFI_TYPE_FLOAT, %eax\n \tje\t.Lcls_retfloat\n \tcmpl\t$FFI_TYPE_DOUBLE, %eax\n \tje\t.Lcls_retdouble\n \tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n \tje\t.Lcls_retldouble\n \tcmpl\t$FFI_TYPE_SINT64, %eax\n \tje\t.Lcls_retllong\n-\tcmpl\t$FFI_TYPE_SINT8, %eax\n-\tje\t.Lcls_retstruct1\n-\tcmpl\t$FFI_TYPE_SINT16, %eax\n-\tje\t.Lcls_retstruct2\n+\tcmpl\t$FFI_TYPE_SMALL_STRUCT_1B, %eax\n+\tje\t.Lcls_retstruct1b\n+\tcmpl\t$FFI_TYPE_SMALL_STRUCT_2B, %eax\n+\tje\t.Lcls_retstruct2b\n \tcmpl\t$FFI_TYPE_STRUCT, %eax\n \tje\t.Lcls_retstruct\n .Lcls_epilogue:\n@@ -211,10 +242,10 @@ _ffi_closure_SYSV:\n \tmovl\t(%ecx), %eax\n \tmovl\t4(%ecx), %edx\n \tjmp\t.Lcls_epilogue\n-.Lcls_retstruct1:\n+.Lcls_retstruct1b:\n \tmovsbl\t(%ecx), %eax\n \tjmp\t.Lcls_epilogue\n-.Lcls_retstruct2:\n+.Lcls_retstruct2b:\n \tmovswl\t(%ecx), %eax\n \tjmp\t.Lcls_epilogue\n .Lcls_retstruct:\n@@ -256,6 +287,14 @@ _ffi_closure_raw_SYSV:\n \tmovl\tCIF_FLAGS_OFFSET(%esi), %eax\t\t /* rtype */\n \tcmpl\t$FFI_TYPE_INT, %eax\n \tje\t.Lrcls_retint\n+\n+\t/* Handle FFI_TYPE_UINT8, FFI_TYPE_SINT8, FFI_TYPE_UINT16,\n+\t   FFI_TYPE_SINT16, FFI_TYPE_UINT32, FFI_TYPE_SINT32.  */\n+\tcmpl\t$FFI_TYPE_UINT64, %eax\n+\tjge\t0f\n+\tcmpl\t$FFI_TYPE_UINT8, %eax\n+\tjge\t.Lrcls_retint\n+0:\n \tcmpl\t$FFI_TYPE_FLOAT, %eax\n \tje\t.Lrcls_retfloat\n \tcmpl\t$FFI_TYPE_DOUBLE, %eax"}, {"sha": "04fca5ef98affa37d60f6312077ee7d74313ee66", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "patch": "@@ -3,8 +3,9 @@\n            Copyright (c) 2002  Ranjit Mathew\n            Copyright (c) 2002  Bo Thorsen\n            Copyright (c) 2002  Roger Sayle\n-   \n-   x86 Foreign Function Interface \n+\t   Copyright (C) 2008  Free Software Foundation, Inc.\n+\n+   x86 Foreign Function Interface\n \n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n@@ -121,10 +122,13 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n     case FFI_TYPE_VOID:\n #ifdef X86\n     case FFI_TYPE_STRUCT:\n+#else\n+# if defined(X86) || defined(X86_DARWIN)\n     case FFI_TYPE_UINT8:\n     case FFI_TYPE_UINT16:\n     case FFI_TYPE_SINT8:\n     case FFI_TYPE_SINT16:\n+# endif\n #endif\n \n     case FFI_TYPE_SINT64:\n@@ -142,11 +146,11 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n     case FFI_TYPE_STRUCT:\n       if (cif->rtype->size == 1)\n         {\n-          cif->flags = FFI_TYPE_SINT8; /* same as char size */\n+          cif->flags = FFI_TYPE_SMALL_STRUCT_1B; /* same as char size */\n         }\n       else if (cif->rtype->size == 2)\n         {\n-          cif->flags = FFI_TYPE_SINT16; /* same as short size */\n+          cif->flags = FFI_TYPE_SMALL_STRUCT_2B; /* same as short size */\n         }\n       else if (cif->rtype->size == 4)\n         {"}, {"sha": "3a1427c3c9bc31fecd51f8266bd79c1ad197a8a2", "filename": "libffi/src/x86/ffitarget.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04/libffi%2Fsrc%2Fx86%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffitarget.h?ref=d7b07cc7304ad61bcdf4a1eb7a5a7a15fe856b04", "patch": "@@ -1,5 +1,7 @@\n /* -----------------------------------------------------------------*-C-*-\n    ffitarget.h - Copyright (c) 1996-2003  Red Hat, Inc.\n+   Copyright (C) 2008  Free Software Foundation, Inc.\n+\n    Target configuration macros for x86 and x86-64.\n \n    Permission is hereby granted, free of charge, to any person obtaining\n@@ -68,6 +70,8 @@ typedef enum ffi_abi {\n /* ---- Definitions for closures ----------------------------------------- */\n \n #define FFI_CLOSURES 1\n+#define FFI_TYPE_SMALL_STRUCT_1B (FFI_TYPE_LAST + 1)\n+#define FFI_TYPE_SMALL_STRUCT_2B (FFI_TYPE_LAST + 2)\n \n #if defined (X86_64) || (defined (__x86_64__) && defined (X86_DARWIN))\n #define FFI_TRAMPOLINE_SIZE 24"}]}