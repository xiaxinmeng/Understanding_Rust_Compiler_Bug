{"sha": "6a7253a4a9d6087827414eeee7036d9eb4b1e472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3MjUzYTRhOWQ2MDg3ODI3NDE0ZWVlZTcwMzZkOWViNGIxZTQ3Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-06-30T13:15:20Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-30T13:15:20Z"}, "message": "convert.c (convert_to_integer): Don't instrument conversions if the function has no_sanitize_undefined attribute.\n\n\t* convert.c (convert_to_integer): Don't instrument conversions if the\n\tfunction has no_sanitize_undefined attribute.\n\t* ubsan.c: Don't run the ubsan pass if the function has\n\tno_sanitize_undefined attribute.\nc/\n\t* c-decl.c (grokdeclarator): Don't instrument VLAs if the function\n\thas no_sanitize_undefined attribute.\ncp/\n\t* cp-gimplify.c (cp_genericize): Don't instrument returns if the\n\tfunction has no_sanitize_undefined attribute.\n\t* decl.c (compute_array_index_type): Don't instrument VLAs if the\n\tfunction has no_sanitize_undefined attribute.\ntestsuite/\n\t* c-c++-common/ubsan/attrib-2.c: New test.\n\t* g++.dg/ubsan/return-3.C: New test.\n\nFrom-SVN: r212148", "tree": {"sha": "d9fbba8c55ca2e01e66ea39234d507306dac9bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fbba8c55ca2e01e66ea39234d507306dac9bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a7253a4a9d6087827414eeee7036d9eb4b1e472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7253a4a9d6087827414eeee7036d9eb4b1e472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7253a4a9d6087827414eeee7036d9eb4b1e472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7253a4a9d6087827414eeee7036d9eb4b1e472/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "670d96d7307b8cfa23000c050fe35c1298301cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670d96d7307b8cfa23000c050fe35c1298301cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670d96d7307b8cfa23000c050fe35c1298301cb4"}], "stats": {"total": 151, "additions": 145, "deletions": 6}, "files": [{"sha": "70f80885dcdf67ce5e11b9589933d6a9e0bdcc0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1,3 +1,10 @@\n+2014-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* convert.c (convert_to_integer): Don't instrument conversions if the\n+\tfunction has no_sanitize_undefined attribute.\n+\t* ubsan.c: Don't run the ubsan pass if the function has\n+\tno_sanitize_undefined attribute.\n+\n 2014-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* doc/invoke.texi (-fsanitize=bounds): Move to the table with"}, {"sha": "6740d513d660e1492a9c571d4e67426339970067", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1,3 +1,8 @@\n+2014-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Don't instrument VLAs if the function\n+\thas no_sanitize_undefined attribute.\n+\n 2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR middle-end/57541"}, {"sha": "7c37edfd3728c95abd398bca0d7c8937ebffb930", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -5505,7 +5505,11 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    this_size_varies = size_varies = true;\n \t\t    warn_variable_length_array (name, size);\n \t\t    if (flag_sanitize & SANITIZE_VLA\n-\t\t        && decl_context == NORMAL)\n+\t\t        && decl_context == NORMAL\n+\t\t\t&& current_function_decl != NULL_TREE\n+\t\t\t&& !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\t\t      DECL_ATTRIBUTES\n+\t\t\t\t\t\t(current_function_decl)))\n \t\t      {\n \t\t\t/* Evaluate the array size only once.  */\n \t\t\tsize = c_save_expr (size);"}, {"sha": "09bc555ee0ee88ddb3a05f647e7ea13476889de7", "filename": "gcc/convert.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -847,7 +847,10 @@ convert_to_integer (tree type, tree expr)\n       return build1 (CONVERT_EXPR, type, expr);\n \n     case REAL_TYPE:\n-      if (flag_sanitize & SANITIZE_FLOAT_CAST)\n+      if (flag_sanitize & SANITIZE_FLOAT_CAST\n+\t  && current_function_decl != NULL_TREE\n+\t  && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\tDECL_ATTRIBUTES (current_function_decl)))\n \t{\n \t  expr = save_expr (expr);\n \t  tree check = ubsan_instrument_float_cast (loc, type, expr);"}, {"sha": "6d5b43f193d22c70f48c15d4d53fe542aeec8a5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1,3 +1,10 @@\n+2014-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-gimplify.c (cp_genericize): Don't instrument returns if the\n+\tfunction has no_sanitize_undefined attribute.\n+\t* decl.c (compute_array_index_type): Don't instrument VLAs if the\n+\tfunction has no_sanitize_undefined attribute.\n+\n 2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR middle-end/57541"}, {"sha": "a35177bdbda799ef4d3103282ea17a627f17c7e0", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1221,7 +1221,7 @@ cp_genericize_tree (tree* t_p)\n \n /* If a function that should end with a return in non-void\n    function doesn't obviously end with return, add ubsan\n-   instrmentation code to verify it at runtime.  */\n+   instrumentation code to verify it at runtime.  */\n \n static void\n cp_ubsan_maybe_instrument_return (tree fndecl)\n@@ -1334,7 +1334,10 @@ cp_genericize (tree fndecl)\n      walk_tree's hash functionality.  */\n   cp_genericize_tree (&DECL_SAVED_TREE (fndecl));\n \n-  if (flag_sanitize & SANITIZE_RETURN)\n+  if (flag_sanitize & SANITIZE_RETURN\n+      && current_function_decl != NULL_TREE\n+      && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n     cp_ubsan_maybe_instrument_return (fndecl);\n \n   /* Do everything else.  */"}, {"sha": "6902bb053e2f99bdb7e3a2742eb85ff266b82fe8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -8469,7 +8469,11 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t\t\t     throw_bad_array_length (), void_node);\n \t      finish_expr_stmt (comp);\n \t    }\n-\t  else if (flag_sanitize & SANITIZE_VLA)\n+\t  else if (flag_sanitize & SANITIZE_VLA\n+\t\t   && current_function_decl != NULL_TREE\n+\t\t   && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\t\t DECL_ATTRIBUTES\n+\t\t\t\t\t   (current_function_decl)))\n \t    {\n \t      /* From C++1y onwards, we throw an exception on a negative\n \t\t length size of an array; see above.  */"}, {"sha": "4191a9728cf6e4de10705d7ae73e808796ecb586", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1,3 +1,8 @@\n+2014-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/attrib-2.c: New test.\n+\t* g++.dg/ubsan/return-3.C: New test.\n+\n 2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR middle-end/57541"}, {"sha": "71f2e58ea670ac9b019d0c2813c28b89b8c64f6b", "filename": "gcc/testsuite/c-c++-common/ubsan/attrib-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-2.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow\" } */\n+\n+/* Test that we don't instrument functions marked with\n+   no_sanitize_undefined attribute.  */\n+\n+#ifndef __cplusplus\n+#define bool _Bool\n+#endif\n+enum A { B = -3, C = 2 } a;\n+bool b;\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+vla_bound (void)\n+{\n+  int i = -1;\n+  volatile int a[i];\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+si_overflow (void)\n+{\n+  int x = 123, y = 267;\n+  volatile int z1 = x + y;\n+  volatile int z2 = x - y;\n+  volatile int z3 = x * y;\n+  volatile int z4 = x / y;\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+null (int *p)\n+{\n+  *p = 42;\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+retrn (int *p)\n+{\n+  *p = 42;\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static enum A\n+bool_enum (bool *p)\n+{\n+  *p = b;\n+  return a;\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+float_zero (void)\n+{\n+  volatile float a = 4.2f, b = 0.0f, c;\n+  c = a / b;\n+}\n+\n+__attribute__((no_sanitize_undefined))\n+static void\n+float_cast (void)\n+{\n+  volatile double d = 300;\n+  volatile signed char c;\n+  c = d;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ubsan_handle\" } } */"}, {"sha": "95f345deb320cf61e0aaa1d9702ba6bf7a2f5dea", "filename": "gcc/testsuite/g++.dg/ubsan/return-3.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=return\" }\n+\n+struct S { S (); ~S (); };\n+\n+S::S () {}\n+S::~S () {}\n+\n+__attribute__((no_sanitize_undefined))\n+int\n+foo (int x)\n+{\n+  S a;\n+  {\n+    S b;\n+    if (x)\n+      return 1;\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+}\n+\n+// { dg-final { scan-assembler-not \"__ubsan_handle\" } }"}, {"sha": "11d2a889cc83f9a71ef6498c7e731d9a5745eaa1", "filename": "gcc/ubsan.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7253a4a9d6087827414eeee7036d9eb4b1e472/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=6a7253a4a9d6087827414eeee7036d9eb4b1e472", "patch": "@@ -1148,7 +1148,10 @@ class pass_ubsan : public gimple_opt_pass\n   virtual bool gate (function *)\n     {\n       return flag_sanitize & (SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n-\t\t\t      | SANITIZE_BOOL | SANITIZE_ENUM);\n+\t\t\t      | SANITIZE_BOOL | SANITIZE_ENUM)\n+\t     && current_function_decl != NULL_TREE\n+\t     && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\t   DECL_ATTRIBUTES (current_function_decl));\n     }\n \n   virtual unsigned int execute (function *);"}]}