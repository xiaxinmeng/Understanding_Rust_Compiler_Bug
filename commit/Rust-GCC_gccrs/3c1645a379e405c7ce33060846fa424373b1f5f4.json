{"sha": "3c1645a379e405c7ce33060846fa424373b1f5f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxNjQ1YTM3OWU0MDVjN2NlMzMwNjA4NDZmYTQyNDM3M2IxZjVmNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-20T13:44:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-04T21:58:34Z"}, "message": "analyzer: validate region subclasses\n\nThis patch converts region::validate to a vfunc, implementing\nadditional checking per subclass: verifying that various\nregion_id fields within map_region, array_region, stack_region and\nroot_region are valid, rather than just those within the base class.\n\nDoing so caught bugs earlier in follow-up work I have on\ncanonicalization and purging of region_model.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region::validate): Convert model param from ptr\n\tto reference.  Update comment to reflect that it's now a vfunc.\n\t(map_region::validate): New vfunc implementation.\n\t(array_region::validate): New vfunc implementation.\n\t(stack_region::validate): New vfunc implementation.\n\t(root_region::validate): New vfunc implementation.\n\t(region_model::validate): Pass a reference rather than a pointer\n\tto the region::validate vfunc.\n\t* region-model.h (region::validate): Make virtual.  Convert model\n\tparam from ptr to reference.\n\t(map_region::validate): New vfunc decl.\n\t(array_region::validate): New vfunc decl.\n\t(stack_region::validate): New vfunc decl.\n\t(root_region::validate): New vfunc decl.", "tree": {"sha": "d15cebb76591ee00442da33d42fd40dfe18d3712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d15cebb76591ee00442da33d42fd40dfe18d3712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1645a379e405c7ce33060846fa424373b1f5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1645a379e405c7ce33060846fa424373b1f5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1645a379e405c7ce33060846fa424373b1f5f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1645a379e405c7ce33060846fa424373b1f5f4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac3eb5c5f157bea22b5ae34b0df254d729dac25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac3eb5c5f157bea22b5ae34b0df254d729dac25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac3eb5c5f157bea22b5ae34b0df254d729dac25"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "4a95fa60f9a5d99a3ddb53a333cccd97569aaab7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=3c1645a379e405c7ce33060846fa424373b1f5f4", "patch": "@@ -1,3 +1,20 @@\n+2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region::validate): Convert model param from ptr\n+\tto reference.  Update comment to reflect that it's now a vfunc.\n+\t(map_region::validate): New vfunc implementation.\n+\t(array_region::validate): New vfunc implementation.\n+\t(stack_region::validate): New vfunc implementation.\n+\t(root_region::validate): New vfunc implementation.\n+\t(region_model::validate): Pass a reference rather than a pointer\n+\tto the region::validate vfunc.\n+\t* region-model.h (region::validate): Make virtual.  Convert model\n+\tparam from ptr to reference.\n+\t(map_region::validate): New vfunc decl.\n+\t(array_region::validate): New vfunc decl.\n+\t(stack_region::validate): New vfunc decl.\n+\t(root_region::validate): New vfunc decl.\n+\n 2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93993"}, {"sha": "0ceeab45a025ff67578fc47d1aa4d205100ad51d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3c1645a379e405c7ce33060846fa424373b1f5f4", "patch": "@@ -1360,21 +1360,23 @@ region::dump_child_label (const region_model &model,\n     }\n }\n \n-/* Assert that this object is valid.  */\n+/* Base implementation of region::validate vfunc.\n+   Assert that the fields of \"region\" are valid; subclasses should\n+   chain up their implementation to this one.  */\n \n void\n-region::validate (const region_model *model) const\n+region::validate (const region_model &model) const\n {\n-  m_parent_rid.validate (*model);\n-  m_sval_id.validate (*model);\n+  m_parent_rid.validate (model);\n+  m_sval_id.validate (model);\n   unsigned i;\n   region_id *view_rid;\n   FOR_EACH_VEC_ELT (m_view_rids, i, view_rid)\n     {\n       gcc_assert (!view_rid->null_p ());\n-      view_rid->validate (*model);\n+      view_rid->validate (model);\n     }\n-  m_active_view_rid.validate (*model);\n+  m_active_view_rid.validate (model);\n }\n \n /* Apply MAP to svalue_ids to this region.  This updates the value\n@@ -1599,6 +1601,21 @@ map_region::print_fields (const region_model &model,\n   pp_string (pp, \"}\");\n }\n \n+/* Implementation of region::validate vfunc for map_region.  */\n+\n+void\n+map_region::validate (const region_model &model) const\n+{\n+  region::validate (model);\n+  for (map_t::iterator iter = m_map.begin ();\n+       iter != m_map.end ();\n+       ++iter)\n+    {\n+      region_id child_rid = (*iter).second;\n+      child_rid.validate (model);\n+    }\n+}\n+\n /* Implementation of region::dump_dot_to_pp vfunc for map_region.  */\n \n void\n@@ -2268,6 +2285,21 @@ array_region::print_fields (const region_model &model,\n   pp_string (pp, \"}\");\n }\n \n+/* Implementation of region::validate vfunc for array_region.  */\n+\n+void\n+array_region::validate (const region_model &model) const\n+{\n+  region::validate (model);\n+  for (map_t::iterator iter = m_map.begin ();\n+       iter != m_map.end ();\n+       ++iter)\n+    {\n+      region_id child_rid = (*iter).second;\n+      child_rid.validate (model);\n+    }\n+}\n+\n /* Implementation of region::dump_dot_to_pp vfunc for array_region.  */\n \n void\n@@ -2544,6 +2576,18 @@ stack_region::dump_child_label (const region_model &model,\n   pp_printf (pp, \"frame for %qs: \", function_name (fun));\n }\n \n+/* Implementation of region::validate vfunc for stack_region.  */\n+\n+void\n+stack_region::validate (const region_model &model) const\n+{\n+  region::validate (model);\n+  int i;\n+  region_id *frame_rid;\n+  FOR_EACH_VEC_ELT (m_frame_rids, i, frame_rid)\n+    m_frame_rids[i].validate (model);\n+}\n+\n /* Push FRAME_RID (for a frame_region) onto this stack.  */\n \n void\n@@ -2834,6 +2878,18 @@ root_region::print_fields (const region_model &model,\n   // TODO\n }\n \n+/* Implementation of region::validate vfunc for root_region.  */\n+\n+void\n+root_region::validate (const region_model &model) const\n+{\n+  region::validate (model);\n+  m_stack_rid.validate (model);\n+  m_globals_rid.validate (model);\n+  m_code_rid.validate (model);\n+  m_heap_rid.validate (model);\n+}\n+\n /* Implementation of region::dump_child_label vfunc for root_region.  */\n \n void\n@@ -3714,7 +3770,7 @@ region_model::validate () const\n   unsigned i;\n   region *r;\n   FOR_EACH_VEC_ELT (m_regions, i, r)\n-    r->validate (this);\n+    r->validate (*this);\n \n   // TODO: anything else?\n "}, {"sha": "c782e93a83d0835541671b834469c92baf18275a", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1645a379e405c7ce33060846fa424373b1f5f4/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=3c1645a379e405c7ce33060846fa424373b1f5f4", "patch": "@@ -891,7 +891,7 @@ class region\n   region_id get_view (tree type, region_model *model) const;\n   bool is_view_p () const { return m_is_view; }\n \n-  void validate (const region_model *model) const;\n+  virtual void validate (const region_model &model) const;\n \n   bool non_null_p (const region_model &model) const;\n \n@@ -1014,6 +1014,7 @@ class map_region : public region\n \t\t     region_id this_rid,\n \t\t     pretty_printer *pp) const\n     OVERRIDE;\n+  void validate (const region_model &model) const FINAL OVERRIDE;\n \n  private:\n   /* Mapping from tree to child region.  */\n@@ -1396,6 +1397,7 @@ class array_region : public region\n \t\t     region_id this_rid,\n \t\t     pretty_printer *pp) const\n     OVERRIDE;\n+  void validate (const region_model &model) const FINAL OVERRIDE;\n \n   static key_t key_from_constant (tree cst);\n \n@@ -1462,6 +1464,8 @@ class stack_region : public region\n   svalue_id get_value_by_name (tree identifier,\n \t\t\t       const region_model &model) const;\n \n+  void validate (const region_model &model) const FINAL OVERRIDE;\n+\n  private:\n   void add_to_hash (inchash::hash &hstate) const FINAL OVERRIDE;\n   void print_fields (const region_model &model,\n@@ -1577,6 +1581,8 @@ class root_region : public region\n   svalue_id get_value_by_name (tree identifier,\n \t\t\t       const region_model &model) const;\n \n+  void validate (const region_model &model) const FINAL OVERRIDE;\n+\n private:\n   void add_to_hash (inchash::hash &hstate) const FINAL OVERRIDE;\n   void print_fields (const region_model &model,"}]}