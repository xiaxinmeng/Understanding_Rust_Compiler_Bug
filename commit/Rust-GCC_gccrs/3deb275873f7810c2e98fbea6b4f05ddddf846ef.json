{"sha": "3deb275873f7810c2e98fbea6b4f05ddddf846ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlYjI3NTg3M2Y3ODEwYzJlOThmYmVhNmI0ZjA1ZGRkZGY4NDZlZg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-02-05T02:18:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-05T02:18:55Z"}, "message": "rs6000.c (altivec_init_builtins): Fix typo building void typed builtins.\n\n2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (altivec_init_builtins): Fix typo\n        building void typed builtins.\n\n        * config/rs6000/altivec.h (vec_ld*): Fix typos.\n        (vec_step): Implement for C++.\n\nFrom-SVN: r49510", "tree": {"sha": "e2fb665c5c722319f0c00bb02bcfbb4e7e9c3eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fb665c5c722319f0c00bb02bcfbb4e7e9c3eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3deb275873f7810c2e98fbea6b4f05ddddf846ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3deb275873f7810c2e98fbea6b4f05ddddf846ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3deb275873f7810c2e98fbea6b4f05ddddf846ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3deb275873f7810c2e98fbea6b4f05ddddf846ef/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7799ba140b2f5e05d5b62855f73f99bb7d5911c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7799ba140b2f5e05d5b62855f73f99bb7d5911c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7799ba140b2f5e05d5b62855f73f99bb7d5911c"}], "stats": {"total": 168, "additions": 155, "deletions": 13}, "files": [{"sha": "509b220d22a401f0dd655fabac2a1463cb58ef85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3deb275873f7810c2e98fbea6b4f05ddddf846ef", "patch": "@@ -1,3 +1,11 @@\n+2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.c (altivec_init_builtins): Fix typo\n+        building void typed builtins.\n+\n+        * config/rs6000/altivec.h (vec_ld*): Fix typos.\n+        (vec_step): Implement for C++.\n+\n Mon Feb  4 19:23:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* final.c (final_scan_insn): Add case for NOTE_INSN_LOOP_END_TOP_COND."}, {"sha": "a1c4cb57e015af14cecfd306077eac8dc6f5edcd", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 144, "deletions": 7, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=3deb275873f7810c2e98fbea6b4f05ddddf846ef", "patch": "@@ -720,82 +720,124 @@ vec_ld (int a1, vector float *a2)\n   return (vector float) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector float\n+vec_ld (int a1, float *a2)\n+{\n+  return (vector float) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector signed int\n vec_ld (int a1, vector signed int *a2)\n {\n   return (vector signed int) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector signed int\n+vec_ld (int a1, signed int *a2)\n+{\n+  return (vector signed int) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector unsigned int\n vec_ld (int a1, vector unsigned int *a2)\n {\n   return (vector unsigned int) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector unsigned int\n+vec_ld (int a1, unsigned int *a2)\n+{\n+  return (vector unsigned int) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector signed short\n vec_ld (int a1, vector signed short *a2)\n {\n   return (vector signed short) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector signed short\n+vec_ld (int a1, signed short *a2)\n+{\n+  return (vector signed short) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector unsigned short\n vec_ld (int a1, vector unsigned short *a2)\n {\n   return (vector unsigned short) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector unsigned short\n+vec_ld (int a1, unsigned short *a2)\n+{\n+  return (vector unsigned short) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector signed char\n vec_ld (int a1, vector signed char *a2)\n {\n   return (vector signed char) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector signed char\n+vec_ld (int a1, signed char *a2)\n+{\n+  return (vector signed char) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n inline vector unsigned char\n vec_ld (int a1, vector unsigned char *a2)\n {\n   return (vector unsigned char) __builtin_altivec_lvx (a1, (void *) a2);\n }\n \n+inline vector unsigned char\n+vec_ld (int a1, unsigned char *a2)\n+{\n+  return (vector unsigned char) __builtin_altivec_lvx (a1, (void *) a2);\n+}\n+\n /* vec_lde */\n \n inline vector signed char\n-vec_lde (int a1, vector signed char *a2)\n+vec_lde (int a1, signed char *a2)\n {\n   return (vector signed char) __builtin_altivec_lvebx (a1, (void *) a2);\n }\n \n inline vector unsigned char\n-vec_lde (int a1, vector unsigned char *a2)\n+vec_lde (int a1, unsigned char *a2)\n {\n   return (vector unsigned char) __builtin_altivec_lvebx (a1, (void *) a2);\n }\n \n inline vector signed short\n-vec_lde (int a1, vector signed short *a2)\n+vec_lde (int a1, signed short *a2)\n {\n   return (vector signed short) __builtin_altivec_lvehx (a1, (void *) a2);\n }\n \n inline vector unsigned short\n-vec_lde (int a1, vector unsigned short *a2)\n+vec_lde (int a1, unsigned short *a2)\n {\n   return (vector unsigned short) __builtin_altivec_lvehx (a1, (void *) a2);\n }\n \n inline vector float\n-vec_lde (int a1, vector float *a2)\n+vec_lde (int a1, float *a2)\n {\n   return (vector float) __builtin_altivec_lvewx (a1, (void *) a2);\n }\n \n inline vector signed int\n-vec_lde (int a1, vector signed int *a2)\n+vec_lde (int a1, signed int *a2)\n {\n   return (vector signed int) __builtin_altivec_lvewx (a1, (void *) a2);\n }\n \n inline vector unsigned int\n-vec_lde (int a1, vector unsigned int *a2)\n+vec_lde (int a1, unsigned int *a2)\n {\n   return (vector unsigned int) __builtin_altivec_lvewx (a1, (void *) a2);\n }\n@@ -808,42 +850,84 @@ vec_ldl (int a1, vector float *a2)\n   return (vector float) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector float\n+vec_ldl (int a1, float *a2)\n+{\n+  return (vector float) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector signed int\n vec_ldl (int a1, vector signed int *a2)\n {\n   return (vector signed int) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector signed int\n+vec_ldl (int a1, signed int *a2)\n+{\n+  return (vector signed int) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector unsigned int\n vec_ldl (int a1, vector unsigned int *a2)\n {\n   return (vector unsigned int) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector unsigned int\n+vec_ldl (int a1, unsigned int *a2)\n+{\n+  return (vector unsigned int) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector signed short\n vec_ldl (int a1, vector signed short *a2)\n {\n   return (vector signed short) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector signed short\n+vec_ldl (int a1, signed short *a2)\n+{\n+  return (vector signed short) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector unsigned short\n vec_ldl (int a1, vector unsigned short *a2)\n {\n   return (vector unsigned short) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector unsigned short\n+vec_ldl (int a1, unsigned short *a2)\n+{\n+  return (vector unsigned short) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector signed char\n vec_ldl (int a1, vector signed char *a2)\n {\n   return (vector signed char) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector signed char\n+vec_ldl (int a1, signed char *a2)\n+{\n+  return (vector signed char) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n inline vector unsigned char\n vec_ldl (int a1, vector unsigned char *a2)\n {\n   return (vector unsigned char) __builtin_altivec_lvxl (a1, (void *) a2);\n }\n \n+inline vector unsigned char\n+vec_ldl (int a1, unsigned char *a2)\n+{\n+  return (vector unsigned char) __builtin_altivec_lvxl (a1, (void *) a2);\n+}\n+\n /* vec_loge */\n \n inline vector float\n@@ -3897,6 +3981,59 @@ vec_any_out (vector float a1, vector float a2)\n {\n   return __builtin_altivec_vcmpbfp_p (__CR6_EQ_REV, a1, a2);\n }\n+\n+/* vec_step */\n+\n+template<typename _Tp>\n+struct vec_step_help\n+{\n+  // All proper vector types will specialize elem.\n+};\n+\n+template<>\n+struct vec_step_help<vector signed short>\n+{\n+  static const int elem = 8;\n+};\n+\n+template<>\n+struct vec_step_help<vector unsigned short>\n+{\n+  static const int elem = 8;\n+};\n+\n+template<>\n+struct vec_step_help<vector signed int>\n+{\n+  static const int elem = 4;\n+};\n+\n+template<>\n+struct vec_step_help<vector unsigned int>\n+{\n+  static const int elem = 4;\n+};\n+\n+template<>\n+struct vec_step_help<vector unsigned char>\n+{\n+  static const int elem = 16;\n+};\n+\n+template<>\n+struct vec_step_help<vector signed char>\n+{\n+  static const int elem = 16;\n+};\n+\n+template<>\n+struct vec_step_help<vector float>\n+{\n+  static const int elem = 4;\n+};\n+\n+#define vec_step(t)  vec_step_help<t>::elem\n+\n #else /* not C++ */\n \n /* \"... and so I think no man in a century will suffer as greatly as"}, {"sha": "01439814e65c6b0dda89d8c1dc8262518de0155d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3deb275873f7810c2e98fbea6b4f05ddddf846ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3deb275873f7810c2e98fbea6b4f05ddddf846ef", "patch": "@@ -1802,6 +1802,7 @@ rs6000_legitimize_reload_address (x, mode, opnum, type, ind_levels, win)\n       *win = 1;\n       return x;\n     }\n+\n #if TARGET_MACHO\n   if (DEFAULT_ABI == ABI_DARWIN && flag_pic\n       && GET_CODE (x) == LO_SUM\n@@ -4161,15 +4162,11 @@ altivec_init_builtins (void)\n \n   /* void foo (void).  */\n   tree void_ftype_void\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, void_type_node,\n-\t\t\t\t      endlink));\n+    = build_function_type (void_type_node, void_list_node);\n \n   /* vshort foo (void).  */\n   tree v8hi_ftype_void\n-    = build_function_type (V8HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, void_type_node,\n-\t\t\t\t      endlink));\n+    = build_function_type (V8HI_type_node, void_list_node);\n \n   tree v4si_ftype_v4si_v4si\n     = build_function_type (V4SI_type_node,"}]}