{"sha": "ace857f95d819377507f81ff4fc88ebf8b913eef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlODU3Zjk1ZDgxOTM3NzUwN2Y4MWZmNGZjODhlYmY4YjkxM2VlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-23T03:01:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-23T03:01:59Z"}, "message": "PR libstdc++/89446 fix null pointer dereference in char_traits\n\n\tPR libstdc++/89446\n\t* include/bits/char_traits.h (__constant_char_array): Check index is\n\tin range before dereferencing.\n\t(char_traits<char>::compare, char_traits<char>::find)\n\t(char_traits<char8_t>::compare, char_traits<char8_t>::find): Return\n\timmediately if n is zero.\n\t(char_traits<wchar_t>::compare, char_traits<wchar_t>::find): Likewise.\n\tRemove workarounds for PR 67026.\n\t* testsuite/21_strings/basic_string_view/operators/char/89446.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/operators/wchar_t/89446.cc:\n\tNew test.\n\nFrom-SVN: r269148", "tree": {"sha": "9bda6298fff3246b502dd0c0e4c2db91fb0c6e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bda6298fff3246b502dd0c0e4c2db91fb0c6e96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace857f95d819377507f81ff4fc88ebf8b913eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace857f95d819377507f81ff4fc88ebf8b913eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace857f95d819377507f81ff4fc88ebf8b913eef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace857f95d819377507f81ff4fc88ebf8b913eef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1753302087205dd9d5e9013c859623b261df060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1753302087205dd9d5e9013c859623b261df060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1753302087205dd9d5e9013c859623b261df060"}], "stats": {"total": 106, "additions": 87, "deletions": 19}, "files": [{"sha": "4596af8260914132ea8c1f76115737d36e959e2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ace857f95d819377507f81ff4fc88ebf8b913eef", "patch": "@@ -1,3 +1,18 @@\n+2019-02-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89446\n+\t* include/bits/char_traits.h (__constant_char_array): Check index is\n+\tin range before dereferencing.\n+\t(char_traits<char>::compare, char_traits<char>::find)\n+\t(char_traits<char8_t>::compare, char_traits<char8_t>::find): Return\n+\timmediately if n is zero.\n+\t(char_traits<wchar_t>::compare, char_traits<wchar_t>::find): Likewise.\n+\tRemove workarounds for PR 67026.\n+\t* testsuite/21_strings/basic_string_view/operators/char/89446.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/operators/wchar_t/89446.cc:\n+\tNew test.\n+\n 2019-02-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/abi/post/sparc64-linux-gnu/baseline_symbols.txt: Adjust."}, {"sha": "fd9a3c73930e5b626cd68f4ee0e2f0fcb5e5350c", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=ace857f95d819377507f81ff4fc88ebf8b913eef", "patch": "@@ -260,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_is_constant_evaluated();\n #else\n       size_t __i = 0;\n-      while (__builtin_constant_p(__a[__i]) && __i < __n)\n+      while (__i < __n && __builtin_constant_p(__a[__i]))\n \t__i++;\n       return __i == __n;\n #endif\n@@ -314,14 +314,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus >= 201703L\n \tif (__builtin_constant_p(__n)\n \t    && __constant_char_array_p(__s1, __n)\n \t    && __constant_char_array_p(__s2, __n))\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n \treturn __builtin_memcmp(__s1, __s2, __n);\n       }\n \n@@ -338,14 +338,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus >= 201703L\n \tif (__builtin_constant_p(__n)\n \t    && __builtin_constant_p(__a)\n \t    && __constant_char_array_p(__s, __n))\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n       }\n \n@@ -423,16 +423,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus >= 201703L\n \tif (__builtin_constant_p(__n)\n \t    && __constant_char_array_p(__s1, __n)\n \t    && __constant_char_array_p(__s2, __n))\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n-\telse\n-\t  return wmemcmp(__s1, __s2, __n);\n+\treturn wmemcmp(__s1, __s2, __n);\n       }\n \n       static _GLIBCXX17_CONSTEXPR size_t\n@@ -441,24 +440,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201703L\n \tif (__constant_string_p(__s))\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n-\telse\n #endif\n-\t  return wcslen(__s);\n+\treturn wcslen(__s);\n       }\n \n       static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus >= 201703L\n \tif (__builtin_constant_p(__n)\n \t    && __builtin_constant_p(__a)\n \t    && __constant_char_array_p(__s, __n))\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n-\telse\n-\t  return wmemchr(__s, __a, __n);\n+\treturn wmemchr(__s, __a, __n);\n       }\n \n       static char_type*\n@@ -532,14 +529,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus > 201402\n \tif (__builtin_constant_p(__n)\n \t    && __constant_char_array_p(__s1, __n)\n \t    && __constant_char_array_p(__s2, __n))\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n \treturn __builtin_memcmp(__s1, __s2, __n);\n       }\n \n@@ -559,14 +556,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n+\tif (__n == 0)\n+\t  return 0;\n #if __cplusplus > 201402\n \tif (__builtin_constant_p(__n)\n \t    && __builtin_constant_p(__a)\n \t    && __constant_char_array_p(__s, __n))\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n-\tif (__n == 0)\n-\t  return 0;\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n       }\n "}, {"sha": "768ba63ddfe6ff11128c2a453debb59cdc9af2aa", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operators/char/89446.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F89446.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F89446.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F89446.cc?ref=ace857f95d819377507f81ff4fc88ebf8b913eef", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -fexceptions -fnon-call-exceptions -O1\" }\n+// { dg-do run { target { powerpc*-*-linux* i?86-*-linux* x86_64-*-linux* } } }\n+// { dg-require-effective-target c++17 }\n+\n+#include <string_view>\n+\n+int main()\n+{\n+  std::string_view s1, s2;\n+  return s1 != s2;\n+}"}, {"sha": "a0ecbebea9285deb7046fa1b04d2a162c4d0f24f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operators/wchar_t/89446.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F89446.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace857f95d819377507f81ff4fc88ebf8b913eef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F89446.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F89446.cc?ref=ace857f95d819377507f81ff4fc88ebf8b913eef", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -fexceptions -fnon-call-exceptions -O1\" }\n+// { dg-do run { target { powerpc*-*-linux* i?86-*-linux* x86_64-*-linux* } } }\n+// { dg-require-effective-target c++17 }\n+\n+#include <string_view>\n+\n+int main()\n+{\n+  std::wstring_view s1, s2;\n+  return s1 != s2;\n+}"}]}