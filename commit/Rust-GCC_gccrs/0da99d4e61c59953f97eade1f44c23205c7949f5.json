{"sha": "0da99d4e61c59953f97eade1f44c23205c7949f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhOTlkNGU2MWM1OTk1M2Y5N2VhZGUxZjQ0YzIzMjA1Yzc5NDlmNQ==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-03-09T15:35:03Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-03-09T15:35:03Z"}, "message": "re PR c++/14409 (Accepts invalid function signature for explicit instantiation)\n\n\tPR c++/14409\n\t* pt.c (determine_specialization): For member templates, match also\n\tconstness.\n\n\tPR c++/14448\n\t* parser.c (cp_parser_initializer_clause): Fold initializer if it is\n\tnon-dependent.\n\t* pt.c (tsubst_copy_and_build): Handle NOP_EXPRs.\n\n\tPR c++/14409\n\t* g++.dg/template/spec12.C: New test.\n\n\tPR c++/14448\n\t* g++.dg/parse/crash14.C: New test.\n\nFrom-SVN: r79172", "tree": {"sha": "44c983fcb452077bd96647141c4db6421d164077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44c983fcb452077bd96647141c4db6421d164077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da99d4e61c59953f97eade1f44c23205c7949f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da99d4e61c59953f97eade1f44c23205c7949f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da99d4e61c59953f97eade1f44c23205c7949f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da99d4e61c59953f97eade1f44c23205c7949f5/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e63064edf05949af01937c7982eabf98211c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e63064edf05949af01937c7982eabf98211c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e63064edf05949af01937c7982eabf98211c8d"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "5c40c570e8a3042c84a26f6173370c375036709e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -1,3 +1,14 @@\n+2004-03-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/14409\n+\t* pt.c (determine_specialization): For member templates, match also\n+\tconstness.\n+\n+\tPR c++/14448\n+\t* parser.c (cp_parser_initializer_clause): Fold initializer if it is\n+\tnon-dependent.\n+\t* pt.c (tsubst_copy_and_build): Handle NOP_EXPRs.\n+\n 2004-03-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14230"}, {"sha": "0691c96ebc0186853e5f1871ecdb69c2295e2b8e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -4537,9 +4537,9 @@ cp_parser_new_expression (cp_parser* parser)\n          but GCC used to allowed this, so we check and emit a sensible error\n \t message for this case.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))\n-\t{\r\n-\t  error (\"array bound forbidden after parenthesized type-id\");\r\n-\t  inform (\"try removing the parentheses around the type-id\");\r\n+\t{\n+\t  error (\"array bound forbidden after parenthesized type-id\");\n+\t  inform (\"try removing the parentheses around the type-id\");\n \t  cp_parser_direct_new_declarator (parser);\n \t}\n     }\n@@ -11528,10 +11528,14 @@ cp_parser_initializer_clause (cp_parser* parser, bool* non_constant_p)\n   /* If it is not a `{', then we are looking at an\n      assignment-expression.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n-    initializer\n-      = cp_parser_constant_expression (parser,\n-\t\t\t\t       /*allow_non_constant_p=*/true,\n-\t\t\t\t       non_constant_p);\n+    {\n+      initializer \n+\t= cp_parser_constant_expression (parser,\n+\t\t\t\t\t/*allow_non_constant_p=*/true,\n+\t\t\t\t\tnon_constant_p);\n+      if (!*non_constant_p)\n+\tinitializer = fold_non_dependent_expr (initializer);\n+    }\n   else\n     {\n       /* Consume the `{' token.  */"}, {"sha": "015f72a833f2034ae1443719a6f14177bdbef366", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -1249,6 +1249,7 @@ determine_specialization (tree template_id,\n       if (TREE_CODE (fn) == TEMPLATE_DECL)\n \t{\n \t  tree decl_arg_types;\n+\t  tree fn_arg_types;\n \n \t  /* DECL might be a specialization of FN.  */\n \n@@ -1265,8 +1266,16 @@ determine_specialization (tree template_id,\n \t     The specialization f<int> is invalid but is not caught\n \t     by get_bindings below.  */\n \n-\t  if (list_length (TYPE_ARG_TYPES (TREE_TYPE (fn)))\n-\t      != list_length (decl_arg_types))\n+\t  fn_arg_types = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+\t  if (list_length (fn_arg_types) != list_length (decl_arg_types))\n+\t    continue;\n+\n+\t  /* For a non-static member function, we need to make sure that\n+\t     the const qualification is the same. This can be done by\n+\t     checking the 'this' in the argument list.  */\n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t      && !same_type_p (TREE_VALUE (fn_arg_types), \n+\t\t\t       TREE_VALUE (decl_arg_types)))\n \t    continue;\n \n \t  /* See whether this function might be a specialization of this\n@@ -8169,6 +8178,11 @@ tsubst_copy_and_build (tree t,\n     case INDIRECT_REF:\n       return build_x_indirect_ref (RECUR (TREE_OPERAND (t, 0)), \"unary *\");\n \n+    case NOP_EXPR:\n+      return build_nop\n+\t(tsubst (TREE_TYPE (t), args, complain, in_decl),\n+\t RECUR (TREE_OPERAND (t, 0)));\n+\n     case CAST_EXPR:\n       return build_functional_cast\n \t(tsubst (TREE_TYPE (t), args, complain, in_decl),"}, {"sha": "bf41ef5900f1de8e369b407de169f7ac487c377c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -1,3 +1,11 @@\n+2004-03-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/14409\n+\t* g++.dg/template/spec12.C: New test.\n+\n+\tPR c++/14448\n+\t* g++.dg/parse/crash14.C: New test.\n+\n 2004-03-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14230"}, {"sha": "b4cf49a9921f343b51753281356cf3b845fe233a", "filename": "gcc/testsuite/g++.dg/parse/crash14.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash14.C?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// Contributed by: Giovanni Bajo <giovannibajo at libero dot it>\n+// PR c++/14448: Fold constant initializers in templates\n+\n+template <int> struct A\n+{\n+    A();\n+};\n+\n+\n+template<typename T> void foo(T)\n+{\n+  static const int n=1+1;\n+  A<n+1> a;\n+}\n+\n+void bar()\n+{\n+    foo(0);\n+}"}, {"sha": "7cf2e2f0aa23d49b02bac5bf792ed225b037aabd", "filename": "gcc/testsuite/g++.dg/template/spec12.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da99d4e61c59953f97eade1f44c23205c7949f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec12.C?ref=0da99d4e61c59953f97eade1f44c23205c7949f5", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// Contributed by: Wolfgang Bangerth <bangerth at dealii dot org>\n+// PR c++/14409: Accepts invalid function signature for explicit instantiation\n+\n+struct X \n+{ \n+    template <typename U> \n+    void foo (U) {}\n+\n+    template <typename U> \n+    void foo_const (U) const {}\n+};\n+\n+template void X::foo (int); \n+template void X::foo_const (int) const; \n+\n+template void X::foo (int) const;   // { dg-error \"\" }\n+template void X::foo_const (int);   // { dg-error \"\" }"}]}