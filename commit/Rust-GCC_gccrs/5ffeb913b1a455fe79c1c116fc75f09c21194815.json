{"sha": "5ffeb913b1a455fe79c1c116fc75f09c21194815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmZWI5MTNiMWE0NTVmZTc5YzFjMTE2ZmM3NWYwOWMyMTE5NDgxNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-09-06T16:24:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-09-06T16:24:05Z"}, "message": "tree-cfg.c (remove_bb): Only warn if line is non-zero.\n\ngcc:\n\t* tree-cfg.c (remove_bb): Only warn if line is non-zero.\n\t* c-pch.c (c_common_read_pch): Restore current location after\n\treading PCH file.\n\t* tree.c (expand_location): Update.\n\t(expr_filename): Changed return type.  Unified the two cases.\n\t(expr_lineno): Likewise.\n\t(annotate_with_file_line): Don't use EXPR_LINENO and EXPR_FILENAME\n\tas lvalues.\n\t* toplev.c (line_table): Changed type.\n\t(general_init): Update.\n\t(realloc_for_line_map): New function.\n\t(general_init): Allocate line_table using GC.\n\t* fix-header.c (line_table): Changed type.\n\t(read_scan_file): Update.\n\t(read_scan_file): Update.\n\t* c-ppoutput.c (maybe_print_line): Update.\n\t(print_line): Update.\n\t(cb_line_change): Update.\n\t(cb_define): Update.\n\t(pp_file_change): Update.\n\t* c-opts.c (c_common_init_options): Update.\n\t(finish_options): Update.\n\t(push_command_line_include): Update.\n\t* c-lex.c (cb_line_change): Update.\n\t(cb_def_pragma): Update.\n\t(cb_define): Update.\n\t(cb_undef): Update.\n\t(c_lex_with_flags): Use cpp_get_token_with_location.\n\t* input.h (line_table): Changed type.\n\t(location_from_locus): New macro.\n\t* tree.h (EXPR_FILENAME): No longer an lvalue.\n\t(EXPR_LINENO): Likewise.\n\t(expr_locus, set_expr_locus): Declare separately for\n\tUSE_MAPPED_LOCATION.\n\t(expr_filename, expr_lineno): Changed return type.\n\t* gimplify.c (tree_to_gimple_tuple): Use SET_EXPR_LOCUS.\n\t* cfgexpand.c (expand_gimple_cond_expr): Use location_from_locus.\n\t(expand_gimple_basic_block): Likewise.\n\t* final.c (final_scan_insn): Use expanded_location.\ngcc/cp:\n\t* decl.c (finish_function): Put return's location on line zero of\n\tfile.\ngcc/fortran:\n\t* scanner.c (get_file): Update.\n\t(load_file): Update.\n\t(gfc_next_char_literal): Use gfc_linebuf_linenum.\n\t* f95-lang.c (gfc_init): Update.\n\t* gfortran.h (gfc_linebuf_linenum): New macro.\ngcc/java:\n\t* lang.c (java_post_options): Update.\n\t* jcf-parse.c (set_source_filename): Update.\n\t(give_name_to_class): Update.\n\t(jcf_parse): Update.\n\t(duplicate_class_warning): Update.\n\t(parse_class_file): Update.\n\t(java_parse_file): Update.\n\t* expr.c (expand_byte_code): Update.\ngcc/testsuite:\n\t* lib/g++.exp (g++_target_compile): Use -fno-show-column.\ngcc/treelang:\n\t* tree1.c (treelang_init): Update.\n\t(treelang_parse_file): Update.\n\t(treelang_parse_file): Update.\n\t(treelang_parse_file): Update.\n\t* lex.l: Update.\n\t(update_lineno_charno): Likewise.\nlibcpp:\n\t* internal.h (struct cpp_reader) <invocation_location>: New\n\tfield.\n\t(struct cpp_reader) <set_invocation_location>: Likewise.\n\t* init.c (cpp_set_line_map): New function.\n\t* line-map.c (linemap_add): Use linemap's allocator.\n\t* include/line-map.h (GTY): Define.\n\t(line_map_realloc): New typedef.\n\t(struct line_map): Mark with GTY.\n\t(struct line_maps): Likewise.\n\t(struct line_maps) <maps>: Likewise.\n\t(struct line_maps) <reallocator>: New field.\n\t* include/symtab.h (GTY): Conditionally define.\n\t* include/cpplib.h (cpp_set_line_map): Declare.\n\t(cpp_get_token_with_location): Declare.\n\t* macro.c (cpp_get_token): Set invocation_location on the reader.\n\t(cpp_get_token_with_location): New function.\n\nFrom-SVN: r128190", "tree": {"sha": "ae71ddc2b3a15a8f7bcf6b36b1592c9fb9c5138e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae71ddc2b3a15a8f7bcf6b36b1592c9fb9c5138e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ffeb913b1a455fe79c1c116fc75f09c21194815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffeb913b1a455fe79c1c116fc75f09c21194815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffeb913b1a455fe79c1c116fc75f09c21194815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffeb913b1a455fe79c1c116fc75f09c21194815/comments", "author": null, "committer": null, "parents": [{"sha": "111f1fca4d2d4e4fabf92b39c4310a3add21f29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111f1fca4d2d4e4fabf92b39c4310a3add21f29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111f1fca4d2d4e4fabf92b39c4310a3add21f29a"}], "stats": {"total": 447, "additions": 329, "deletions": 118}, "files": [{"sha": "cc4b3194cc677b38c304e605c1a08088b2bf1ecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,45 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* tree-cfg.c (remove_bb): Only warn if line is non-zero.\n+\t* c-pch.c (c_common_read_pch): Restore current location after\n+\treading PCH file.\n+\t* tree.c (expand_location): Update.\n+\t(expr_filename): Changed return type.  Unified the two cases.\n+\t(expr_lineno): Likewise.\n+\t(annotate_with_file_line): Don't use EXPR_LINENO and EXPR_FILENAME\n+\tas lvalues.\n+\t* toplev.c (line_table): Changed type.\n+\t(general_init): Update.\n+\t(realloc_for_line_map): New function.\n+\t(general_init): Allocate line_table using GC.\n+\t* fix-header.c (line_table): Changed type.\n+\t(read_scan_file): Update.\n+\t(read_scan_file): Update.\n+\t* c-ppoutput.c (maybe_print_line): Update.\n+\t(print_line): Update.\n+\t(cb_line_change): Update.\n+\t(cb_define): Update.\n+\t(pp_file_change): Update.\n+\t* c-opts.c (c_common_init_options): Update.\n+\t(finish_options): Update.\n+\t(push_command_line_include): Update.\n+\t* c-lex.c (cb_line_change): Update.\n+\t(cb_def_pragma): Update.\n+\t(cb_define): Update.\n+\t(cb_undef): Update.\n+\t(c_lex_with_flags): Use cpp_get_token_with_location.\n+\t* input.h (line_table): Changed type.\n+\t(location_from_locus): New macro.\n+\t* tree.h (EXPR_FILENAME): No longer an lvalue.\n+\t(EXPR_LINENO): Likewise.\n+\t(expr_locus, set_expr_locus): Declare separately for\n+\tUSE_MAPPED_LOCATION.\n+\t(expr_filename, expr_lineno): Changed return type.\n+\t* gimplify.c (tree_to_gimple_tuple): Use SET_EXPR_LOCUS.\n+\t* cfgexpand.c (expand_gimple_cond_expr): Use location_from_locus.\n+\t(expand_gimple_basic_block): Likewise.\n+\t* final.c (final_scan_insn): Use expanded_location.\n+\n 2007-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/32586"}, {"sha": "23abaad6c10816d987be47e0bab114ebeb037936", "filename": "gcc/c-lex.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -205,7 +205,7 @@ cb_line_change (cpp_reader * ARG_UNUSED (pfile), const cpp_token *token,\n #else\n     {\n       source_location loc = token->src_loc;\n-      const struct line_map *map = linemap_lookup (&line_table, loc);\n+      const struct line_map *map = linemap_lookup (line_table, loc);\n       input_line = SOURCE_LINE (map, loc);\n     }\n #endif\n@@ -283,7 +283,7 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n       const cpp_token *s;\n #ifndef USE_MAPPED_LOCATION\n       location_t fe_loc;\n-      const struct line_map *map = linemap_lookup (&line_table, loc);\n+      const struct line_map *map = linemap_lookup (line_table, loc);\n       fe_loc.file = map->to_file;\n       fe_loc.line = SOURCE_LINE (map, loc);\n #else\n@@ -309,7 +309,7 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n static void\n cb_define (cpp_reader *pfile, source_location loc, cpp_hashnode *node)\n {\n-  const struct line_map *map = linemap_lookup (&line_table, loc);\n+  const struct line_map *map = linemap_lookup (line_table, loc);\n   (*debug_hooks->define) (SOURCE_LINE (map, loc),\n \t\t\t  (const char *) cpp_macro_definition (pfile, node));\n }\n@@ -319,7 +319,7 @@ static void\n cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n \t  cpp_hashnode *node)\n {\n-  const struct line_map *map = linemap_lookup (&line_table, loc);\n+  const struct line_map *map = linemap_lookup (line_table, loc);\n   (*debug_hooks->undef) (SOURCE_LINE (map, loc),\n \t\t\t (const char *) NODE_NAME (node));\n }\n@@ -338,15 +338,15 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n \n   timevar_push (TV_CPP);\n  retry:\n-  tok = cpp_get_token (parse_in);\n-  type = tok->type;\n-\n- retry_after_at:\n #ifdef USE_MAPPED_LOCATION\n-  *loc = tok->src_loc;\n+  tok = cpp_get_token_with_location (parse_in, loc);\n #else\n+  tok = cpp_get_token (parse_in);\n   *loc = input_location;\n #endif\n+  type = tok->type;\n+\n+ retry_after_at:\n   switch (type)\n     {\n     case CPP_PADDING:\n@@ -390,10 +390,19 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n       /* An @ may give the next token special significance in Objective-C.  */\n       if (c_dialect_objc ())\n \t{\n+#ifdef USE_MAPPED_LOCATION\n+\t  location_t atloc = *loc;\n+\t  location_t newloc;\n+#else\n \t  location_t atloc = input_location;\n+#endif\n \n \tretry_at:\n+#ifdef USE_MAPPED_LOCATION\n+\t  tok = cpp_get_token_with_location (parse_in, &newloc);\n+#else\n \t  tok = cpp_get_token (parse_in);\n+#endif\n \t  type = tok->type;\n \t  switch (type)\n \t    {\n@@ -417,6 +426,9 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n \t    default:\n \t      /* ... or not.  */\n \t      error (\"%Hstray %<@%> in program\", &atloc);\n+#ifdef USE_MAPPED_LOCATION\n+\t      *loc = newloc;\n+#endif\n \t      goto retry_after_at;\n \t    }\n \t  break;"}, {"sha": "80c01a01c1d86470ae5658a7c50eee88e7f2ff59", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -218,7 +218,7 @@ c_common_init_options (unsigned int argc, const char **argv)\n     }\n \n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n-\t\t\t\tident_hash, &line_table);\n+\t\t\t\tident_hash, line_table);\n \n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n@@ -1485,7 +1485,7 @@ finish_options (void)\n       size_t i;\n \n       cb_file_change (parse_in,\n-\t\t      linemap_add (&line_table, LC_RENAME, 0,\n+\t\t      linemap_add (line_table, LC_RENAME, 0,\n \t\t\t\t   _(\"<built-in>\"), 0));\n \n       cpp_init_builtins (parse_in, flag_hosted);\n@@ -1503,7 +1503,7 @@ finish_options (void)\n       cpp_opts->warn_dollars = (cpp_opts->pedantic && !cpp_opts->c99);\n \n       cb_file_change (parse_in,\n-\t\t      linemap_add (&line_table, LC_RENAME, 0,\n+\t\t      linemap_add (line_table, LC_RENAME, 0,\n \t\t\t\t   _(\"<command-line>\"), 0));\n \n       for (i = 0; i < deferred_count; i++)\n@@ -1568,7 +1568,7 @@ push_command_line_include (void)\n \n       /* Set this here so the client can change the option if it wishes,\n \t and after stacking the main file so we don't trace the main file.  */\n-      line_table.trace_includes = cpp_opts->print_include_names;\n+      line_table->trace_includes = cpp_opts->print_include_names;\n     }\n }\n "}, {"sha": "d8751e83070f43c73675a59c9051831c8a17b8b5", "filename": "gcc/c-pch.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"hosthooks.h\"\n #include \"target.h\"\n+#include \"opts.h\"\n \n /* This is a list of flag variables that must match exactly, and their\n    names for the error message.  The possible values for *flag_var must\n@@ -365,6 +366,7 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n   FILE *f;\n   struct c_pch_header h;\n   struct save_macro_data *smd;\n+  expanded_location saved_loc;\n \n   f = fdopen (fd, \"rb\");\n   if (f == NULL)\n@@ -406,6 +408,18 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n \tcpp_errno (pfile, CPP_DL_ERROR, \"seeking\");\n     }\n \n+  /* Save the location and then restore it after reading the PCH.  */\n+#ifdef USE_MAPPED_LOCATION\n+  saved_loc = expand_location (line_table->highest_line);\n+#else\n+  {\n+    const struct line_map *map = linemap_lookup (line_table,\n+\t\t\t\t\t\t line_table->highest_line);\n+    saved_loc.file = map->to_file;\n+    saved_loc.line = SOURCE_LINE (map, line_table->highest_line);\n+  }\n+#endif\n+\n   cpp_prepare_state (pfile, &smd);\n \n   gt_pch_restore (f);\n@@ -415,6 +429,9 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n \n   fclose (f);\n \n+  cpp_set_line_map (pfile, line_table);\n+  linemap_add (line_table, LC_RENAME, 0, saved_loc.file, saved_loc.line);\n+\n   /* Give the front end a chance to take action after a PCH file has\n      been loaded.  */\n   if (lang_post_pch_load)"}, {"sha": "f02d6cd2b7664ff59a00b34cf4de045ab5ff9867", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -234,7 +234,7 @@ scan_translation_unit_trad (cpp_reader *pfile)\n static void\n maybe_print_line (source_location src_loc)\n {\n-  const struct line_map *map = linemap_lookup (&line_table, src_loc);\n+  const struct line_map *map = linemap_lookup (line_table, src_loc);\n   int src_line = SOURCE_LINE (map, src_loc);\n   /* End the previous line of text.  */\n   if (print.printed)\n@@ -268,7 +268,7 @@ print_line (source_location src_loc, const char *special_flags)\n \n   if (!flag_no_line_commands)\n     {\n-      const struct line_map *map = linemap_lookup (&line_table, src_loc);\n+      const struct line_map *map = linemap_lookup (line_table, src_loc);\n \n       size_t to_file_len = strlen (map->to_file);\n       unsigned char *to_file_quoted =\n@@ -317,7 +317,7 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n      ought to care.  Some things do care; the fault lies with them.  */\n   if (!CPP_OPTION (pfile, traditional))\n     {\n-      const struct line_map *map = linemap_lookup (&line_table, src_loc);\n+      const struct line_map *map = linemap_lookup (line_table, src_loc);\n       int spaces = SOURCE_COLUMN (map, src_loc) - 2;\n       print.printed = 1;\n \n@@ -349,7 +349,7 @@ cb_define (cpp_reader *pfile, source_location line, cpp_hashnode *node)\n     fputs ((const char *) NODE_NAME (node), print.outf);\n \n   putc ('\\n', print.outf);\n-  if (linemap_lookup (&line_table, line)->to_line != 0)\n+  if (linemap_lookup (line_table, line)->to_line != 0)\n     print.src_line++;\n }\n \n@@ -430,7 +430,7 @@ pp_file_change (const struct line_map *map)\n \t  /* Bring current file to correct line when entering a new file.  */\n \t  if (map->reason == LC_ENTER)\n \t    {\n-\t      const struct line_map *from = INCLUDED_FROM (&line_table, map);\n+\t      const struct line_map *from = INCLUDED_FROM (line_table, map);\n \t      maybe_print_line (LAST_SOURCE_LINE_LOCATION (from));\n \t    }\n \t  if (map->reason == LC_ENTER)"}, {"sha": "69c65bd5e498c4a5eaf084ecf3b587868bd6f289", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1312,7 +1312,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n       add_reg_br_prob_note (last, true_edge->probability);\n       maybe_dump_rtl_for_tree_stmt (stmt, last);\n       if (true_edge->goto_locus)\n-  \tset_curr_insn_source_location (*true_edge->goto_locus);\n+  \tset_curr_insn_source_location (location_from_locus (true_edge->goto_locus));\n       false_edge->flags |= EDGE_FALLTHRU;\n       return NULL;\n     }\n@@ -1322,7 +1322,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n       add_reg_br_prob_note (last, false_edge->probability);\n       maybe_dump_rtl_for_tree_stmt (stmt, last);\n       if (false_edge->goto_locus)\n-  \tset_curr_insn_source_location (*false_edge->goto_locus);\n+  \tset_curr_insn_source_location (location_from_locus (false_edge->goto_locus));\n       true_edge->flags |= EDGE_FALLTHRU;\n       return NULL;\n     }\n@@ -1353,7 +1353,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n   maybe_dump_rtl_for_tree_stmt (stmt, last2);\n \n   if (false_edge->goto_locus)\n-    set_curr_insn_source_location (*false_edge->goto_locus);\n+    set_curr_insn_source_location (location_from_locus (false_edge->goto_locus));\n \n   return new_bb;\n }\n@@ -1620,7 +1620,7 @@ expand_gimple_basic_block (basic_block bb)\n     {\n       emit_jump (label_rtx_for_bb (e->dest));\n       if (e->goto_locus)\n-        set_curr_insn_source_location (*e->goto_locus);\n+        set_curr_insn_source_location (location_from_locus (e->goto_locus));\n       e->flags &= ~EDGE_FALLTHRU;\n     }\n "}, {"sha": "db8b3eba13a967453149b13272d455cf5bcb8b33", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,8 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* decl.c (finish_function): Put return's location on line zero of\n+\tfile.\n+\n 2007-09-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/15745"}, {"sha": "86f2a4a1c161e77c257851d04a002e38af6a9f49", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -11632,7 +11632,10 @@ finish_function (int flags)\n \t     return is unreachable, so put the statement on the\n \t     special line 0.  */\n #ifdef USE_MAPPED_LOCATION\n-\t  SET_EXPR_LOCATION (stmt, UNKNOWN_LOCATION);\n+\t  {\n+\t    location_t linezero = linemap_line_start (line_table, 0, 1);\n+\t    SET_EXPR_LOCATION (stmt, linezero);\n+\t  }\n #else\n \t  annotate_with_file_line (stmt, input_filename, 0);\n #endif"}, {"sha": "e5e9b8d0f8086e7b05c156844ec94d7baa0f4438", "filename": "gcc/final.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -2092,15 +2092,15 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t    if (string[0])\n \t      {\n-\t\tlocation_t loc;\n+\t\texpanded_location loc;\n \n \t\tif (! app_on)\n \t\t  {\n \t\t    fputs (ASM_APP_ON, file);\n \t\t    app_on = 1;\n \t\t  }\n #ifdef USE_MAPPED_LOCATION\n-\t\tloc = ASM_INPUT_SOURCE_LOCATION (body);\n+\t\tloc = expand_location (ASM_INPUT_SOURCE_LOCATION (body));\n #else\n \t\tloc.file = ASM_INPUT_SOURCE_FILE (body);\n \t\tloc.line = ASM_INPUT_SOURCE_LINE (body);\n@@ -2124,6 +2124,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    rtx *ops = alloca (noperands * sizeof (rtx));\n \t    const char *string;\n \t    location_t loc;\n+\t    expanded_location expanded;\n \n \t    /* There's no telling what that did to the condition codes.  */\n \t    CC_STATUS_INIT;\n@@ -2133,6 +2134,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    /* Inhibit dieing on what would otherwise be compiler bugs.  */\n \t    insn_noperands = noperands;\n \t    this_is_asm_operands = insn;\n+\t    expanded = expand_location (loc);\n \n #ifdef FINAL_PRESCAN_INSN\n \t    FINAL_PRESCAN_INSN (insn, ops, insn_noperands);\n@@ -2146,12 +2148,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t    fputs (ASM_APP_ON, file);\n \t\t    app_on = 1;\n \t\t  }\n-\t\tif (loc.file && loc.line)\n+\t\tif (expanded.file && expanded.line)\n \t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n-\t\t\t   ASM_COMMENT_START, loc.line, loc.file);\n+\t\t\t   ASM_COMMENT_START, expanded.line, expanded.file);\n \t        output_asm_insn (string, ops);\n #if HAVE_AS_LINE_ZERO\n-\t\tif (loc.file && loc.line)\n+\t\tif (expanded.file && expanded.line)\n \t\t  fprintf (asm_out_file, \"%s 0 \\\"\\\" 2\\n\", ASM_COMMENT_START);\n #endif\n \t      }"}, {"sha": "8c941246199191b58adaf1993ebb9fb89bbc173d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,11 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* scanner.c (get_file): Update.\n+\t(load_file): Update.\n+\t(gfc_next_char_literal): Use gfc_linebuf_linenum.\n+\t* f95-lang.c (gfc_init): Update.\n+\t* gfortran.h (gfc_linebuf_linenum): New macro.\n+\n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* trans-decl.c (build_entry_thunks): Use set_cfun."}, {"sha": "b9eb1f852f05acf008c088f06fc70adf4f039551", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -316,8 +316,8 @@ static bool\n gfc_init (void)\n {\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_ENTER, false, gfc_source_file, 1);\n-  linemap_add (&line_table, LC_RENAME, false, \"<built-in>\", 0);\n+  linemap_add (line_table, LC_ENTER, false, gfc_source_file, 1);\n+  linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 0);\n #endif\n \n   /* First initialize the backend.  */"}, {"sha": "b2da38f4ebfa76d62b9e417e8074da7a67a8d8ee", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -696,6 +696,12 @@ typedef struct gfc_linebuf\n \n #define gfc_linebuf_header_size (offsetof (gfc_linebuf, line))\n \n+#ifdef USE_MAPPED_LOCATION\n+#define gfc_linebuf_linenum(LBUF) (LOCATION_LINE ((LBUF)->location))\n+#else\n+#define gfc_linebuf_linenum(LBUF) ((LBUF)->linenum)\n+#endif\n+\n typedef struct\n {\n   char *nextc;"}, {"sha": "b0c7979554eab8f8c9fcd3deacbf2789d3d9e5b9", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -710,7 +710,7 @@ gfc_next_char_literal (int in_string)\n       /* We've got a continuation line.  If we are on the very next line after\n \t the last continuation, increment the continuation line count and\n \t check whether the limit has been exceeded.  */\n-      if (gfc_current_locus.lb->linenum == continue_line + 1)\n+      if (gfc_linebuf_linenum (gfc_current_locus.lb) == continue_line + 1)\n \t{\n \t  if (++continue_count == gfc_option.max_continue_free)\n \t    {\n@@ -719,7 +719,7 @@ gfc_next_char_literal (int in_string)\n \t\t\t     \"statement at %C\", gfc_option.max_continue_free);\n \t    }\n \t}\n-      continue_line = gfc_current_locus.lb->linenum;\n+      continue_line = gfc_linebuf_linenum (gfc_current_locus.lb);\n \n       /* Now find where it continues. First eat any comment lines.  */\n       openmp_cond_flag = skip_free_comments ();\n@@ -831,7 +831,7 @@ gfc_next_char_literal (int in_string)\n       /* We've got a continuation line.  If we are on the very next line after\n \t the last continuation, increment the continuation line count and\n \t check whether the limit has been exceeded.  */\n-      if (gfc_current_locus.lb->linenum == continue_line + 1)\n+      if (gfc_linebuf_linenum (gfc_current_locus.lb) == continue_line + 1)\n \t{\n \t  if (++continue_count == gfc_option.max_continue_fixed)\n \t    {\n@@ -842,8 +842,8 @@ gfc_next_char_literal (int in_string)\n \t    }\n \t}\n \n-      if (continue_line < gfc_current_locus.lb->linenum)\n-\tcontinue_line = gfc_current_locus.lb->linenum;\n+      if (continue_line < gfc_linebuf_linenum (gfc_current_locus.lb))\n+\tcontinue_line = gfc_linebuf_linenum (gfc_current_locus.lb);\n     }\n \n   /* Ready to read first character of continuation line, which might\n@@ -1170,7 +1170,7 @@ get_file (const char *name, enum lc_reason reason ATTRIBUTE_UNUSED)\n     f->inclusion_line = current_file->line;\n \n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, reason, false, f->filename, 1);\n+  linemap_add (line_table, reason, false, f->filename, 1);\n #endif\n \n   return f;\n@@ -1514,7 +1514,7 @@ load_file (const char *filename, bool initial)\n \n #ifdef USE_MAPPED_LOCATION\n       b->location\n-\t= linemap_line_start (&line_table, current_file->line++, 120);\n+\t= linemap_line_start (line_table, current_file->line++, 120);\n #else\n       b->linenum = current_file->line++;\n #endif\n@@ -1537,7 +1537,7 @@ load_file (const char *filename, bool initial)\n \n   current_file = current_file->up;\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_LEAVE, 0, NULL, 0);\n+  linemap_add (line_table, LC_LEAVE, 0, NULL, 0);\n #endif\n   return SUCCESS;\n }"}, {"sha": "c4d4f629255070158e44a555b22b34a986ee87f6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -3607,7 +3607,7 @@ tree_to_gimple_tuple (tree *tp)\n         /* The set to base above overwrites the CODE.  */\n         TREE_SET_CODE ((tree) gs, GIMPLE_MODIFY_STMT);\n \n-        gs->locus = EXPR_LOCUS (*tp);\n+\tSET_EXPR_LOCUS ((tree) gs, EXPR_LOCUS (*tp));\n         gs->operands[0] = TREE_OPERAND (*tp, 0);\n         gs->operands[1] = TREE_OPERAND (*tp, 1);\n         gs->block = TREE_BLOCK (*tp);"}, {"sha": "c360a1d5312c8c8294dd754064e0dcd6fba785ec", "filename": "gcc/input.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_INPUT_H\n \n #include \"line-map.h\"\n-extern struct line_maps line_table;\n+extern GTY(()) struct line_maps *line_table;\n \n /* The location for declarations in \"<built-in>\" */\n #define BUILTINS_LOCATION ((source_location) 2)\n@@ -50,6 +50,8 @@ extern expanded_location expand_location (source_location);\n typedef source_location location_t; /* deprecated typedef */\n typedef source_location source_locus; /* to be removed */\n \n+#define location_from_locus(LOCUS) (LOCUS)\n+\n #else /* ! USE_MAPPED_LOCATION */\n \n struct location_s GTY(())\n@@ -69,6 +71,8 @@ typedef location_t *source_locus;\n extern location_t unknown_location;\n #define UNKNOWN_LOCATION unknown_location\n \n+#define location_from_locus(LOCUS) (* (LOCUS))\n+\n #endif /* ! USE_MAPPED_LOCATION */\n \n struct file_stack"}, {"sha": "94a5fe3852b2c6900aea8242666cb7233787afcc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,14 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lang.c (java_post_options): Update.\n+\t* jcf-parse.c (set_source_filename): Update.\n+\t(give_name_to_class): Update.\n+\t(jcf_parse): Update.\n+\t(duplicate_class_warning): Update.\n+\t(parse_class_file): Update.\n+\t(java_parse_file): Update.\n+\t* expr.c (expand_byte_code): Update.\n+\n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* decl.c (finish_method): Use set_cfun."}, {"sha": "1eceaad8bc125f03786a910e4446100730d4969b", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -3194,7 +3194,7 @@ expand_byte_code (JCF *jcf, tree method)\n \t\t{\n \t\t  int line = GET_u2 (linenumber_pointer - 2);\n #ifdef USE_MAPPED_LOCATION\n-\t\t  input_location = linemap_line_start (&line_table, line, 1);\n+\t\t  input_location = linemap_line_start (line_table, line, 1);\n #else\n \t\t  input_location.line = line;\n #endif"}, {"sha": "ff2c9995e8c639cdc6eb995061677094da31ece0", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -365,7 +365,7 @@ set_source_filename (JCF *jcf, int index)\n       \n   sfname = find_sourcefile (sfname);\n #ifdef USE_MAPPED_LOCATION\n-  line_table.maps[line_table.used-1].to_file = sfname;\n+  line_table->maps[line_table->used-1].to_file = sfname;\n #else\n   input_filename = sfname;\n   DECL_SOURCE_LOCATION (TYPE_NAME (current_class)) = input_location;\n@@ -1209,8 +1209,8 @@ give_name_to_class (JCF *jcf, int i)\n       {\n       tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n       const char *sfname = IDENTIFIER_POINTER (source_name);\n-      linemap_add (&line_table, LC_ENTER, false, sfname, 0);\n-      input_location = linemap_line_start (&line_table, 0, 1);\n+      linemap_add (line_table, LC_ENTER, false, sfname, 0);\n+      input_location = linemap_line_start (line_table, 0, 1);\n       file_start_location = input_location;\n       DECL_SOURCE_LOCATION (TYPE_NAME (this_class)) = input_location;\n       if (main_input_filename == NULL && jcf == main_jcf)\n@@ -1497,7 +1497,7 @@ jcf_parse (JCF* jcf)\n     annotation_write_byte (JV_DONE_ATTR);\n \n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_LEAVE, false, NULL, 0);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n #endif\n \n   /* The fields of class_type_node are already in correct order. */\n@@ -1532,8 +1532,8 @@ duplicate_class_warning (const char *filename)\n {\n   location_t warn_loc;\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_RENAME, 0, filename, 0);\n-  warn_loc = linemap_line_start (&line_table, 0, 1);\n+  linemap_add (line_table, LC_RENAME, 0, filename, 0);\n+  warn_loc = linemap_line_start (line_table, 0, 1);\n #else\n   warn_loc.file = filename;\n   warn_loc.line = 0;\n@@ -1650,7 +1650,7 @@ parse_class_file (void)\n \t    }\n #ifdef USE_MAPPED_LOCATION\n \t  if (min_line != 0)\n-\t    input_location = linemap_line_start (&line_table, min_line, 1);\n+\t    input_location = linemap_line_start (line_table, min_line, 1);\n #else\n \t  if (min_line != 0)\n \t    input_line = min_line;\n@@ -1926,16 +1926,16 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  main_jcf->read_state = finput;\n \t  main_jcf->filbuf = jcf_filbuf_from_stdio;\n #ifdef USE_MAPPED_LOCATION\n-\t  linemap_add (&line_table, LC_ENTER, false, filename, 0);\n-\t  input_location = linemap_line_start (&line_table, 0, 1);\n+\t  linemap_add (line_table, LC_ENTER, false, filename, 0);\n+\t  input_location = linemap_line_start (line_table, 0, 1);\n #endif\n \t  if (open_in_zip (main_jcf, filename, NULL, 0) <  0)\n \t    fatal_error (\"bad zip/jar file %s\", filename);\n \t  localToFile = SeenZipFiles;\n \t  /* Register all the classes defined there.  */\n \t  process_zip_dir (main_jcf->read_state);\n #ifdef USE_MAPPED_LOCATION\n-\t  linemap_add (&line_table, LC_LEAVE, false, NULL, 0);\n+\t  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n #endif\n \t  parse_zip_file_entries ();\n \t}\n@@ -1950,7 +1950,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  java_parser_context_restore_global ();\n \t  java_pop_parser_context (1);\n #ifdef USE_MAPPED_LOCATION\n-\t  linemap_add (&line_table, LC_LEAVE, false, NULL, 0);\n+\t  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n #endif\n #endif\n \t}"}, {"sha": "6a453fc9d846960a7601dbe1b478adf3b62ba610", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -653,8 +653,8 @@ java_post_options (const char **pfilename)\n \t}\n     }\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_ENTER, false, filename, 0);\n-  linemap_add (&line_table, LC_RENAME, false, \"<built-in>\", 0);\n+  linemap_add (line_table, LC_ENTER, false, filename, 0);\n+  linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 0);\n #endif\n \n   /* Initialize the compiler back end.  */"}, {"sha": "64d00d36a81985cd1040a445f31fa83d824d1c40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,7 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lib/g++.exp (g++_target_compile): Use -fno-show-column.\n+\n 2007-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/32586"}, {"sha": "c188824b841512cd7936078519a3c14da84d03a3", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -273,6 +273,7 @@ proc g++_target_compile { source dest type options } {\n     }\n \n     lappend options \"additional_flags=[libio_include_flags]\"\n+    lappend options \"additional_flags=-fno-show-column\"\n     lappend options \"compiler=$GXX_UNDER_TEST\"\n \n     set options [concat $gpp_compile_options $options]"}, {"sha": "b8d1f9cbc5d2c0fb57605a6e9462add569994265", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -146,7 +146,7 @@ location_t unknown_location = { NULL, 0 };\n \n location_t input_location;\n \n-struct line_maps line_table;\n+struct line_maps *line_table;\n \n /* Stack of currently pending input files.  */\n \n@@ -1601,6 +1601,14 @@ default_tree_printer (pretty_printer * pp, text_info *text, const char *spec,\n   return true;\n }\n \n+/* A helper function; used as the reallocator function for cpp's line\n+   table.  */\n+static void *\n+realloc_for_line_map (void *ptr, size_t len)\n+{\n+  return ggc_realloc (ptr, len);\n+}\n+\n /* Initialization of the front end environment, before command line\n    options are parsed.  Signal handlers, internationalization etc.\n    ARGV0 is main's argv[0].  */\n@@ -1657,7 +1665,9 @@ general_init (const char *argv0)\n      table.  */\n   init_ggc ();\n   init_stringpool ();\n-  linemap_init (&line_table);\n+  line_table = GGC_NEW (struct line_maps);\n+  linemap_init (line_table);\n+  line_table->reallocator = realloc_for_line_map;\n   init_ttree ();\n \n   /* Initialize register usage now so switches may override.  */"}, {"sha": "461f3f2db25e30578bf8d73b8ec6b80ab7c21ce0", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -2057,7 +2057,7 @@ remove_bb (basic_block bb)\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n #ifdef USE_MAPPED_LOCATION\n-  if (loc > BUILTINS_LOCATION)\n+  if (loc > BUILTINS_LOCATION && LOCATION_LINE (loc) > 0)\n     warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n #else\n   if (loc)"}, {"sha": "9e5a7bd9068117bc776404b7ff5e6ae157df9f4c", "filename": "gcc/tree.c", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -3403,7 +3403,7 @@ expand_location (source_location loc)\n     }\n   else\n     {\n-      const struct line_map *map = linemap_lookup (&line_table, loc);\n+      const struct line_map *map = linemap_lookup (line_table, loc);\n       xloc.file = map->to_file;\n       xloc.line = SOURCE_LINE (map, loc);\n       xloc.column = SOURCE_COLUMN (map, loc);\n@@ -3419,6 +3419,8 @@ expand_location (source_location loc)\n void\n annotate_with_file_line (tree node, const char *file, int line)\n {\n+  location_t *new_loc;\n+\n   /* Roughly one percent of the calls to this function are to annotate\n      a node with the same information already attached to that node!\n      Just return instead of wasting memory.  */\n@@ -3443,10 +3445,11 @@ annotate_with_file_line (tree node, const char *file, int line)\n       return;\n     }\n \n-  SET_EXPR_LOCUS (node, ggc_alloc (sizeof (location_t)));\n-  EXPR_LINENO (node) = line;\n-  EXPR_FILENAME (node) = file;\n-  last_annotated_node = EXPR_LOCUS (node);\n+  new_loc = GGC_NEW (location_t);\n+  new_loc->file = file;\n+  new_loc->line = line;\n+  SET_EXPR_LOCUS (node, new_loc);\n+  last_annotated_node = new_loc;\n }\n \n void\n@@ -3509,13 +3512,13 @@ expr_locus (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n-    return &GIMPLE_STMT_LOCUS (node);\n-  return EXPR_P (node) ? &node->exp.locus : (location_t *) NULL;\n+    return CONST_CAST (source_location *, &GIMPLE_STMT_LOCUS (node));\n+  return (EXPR_P (node)\n+\t  ? CONST_CAST (source_location *, &node->exp.locus)\n+\t  : (source_location *) NULL);\n #else\n   if (GIMPLE_STMT_P (node))\n     return GIMPLE_STMT_LOCUS (node);\n-  /* ?? The cast below was originally \"(location_t *)\" in the macro,\n-     but that makes no sense.  ?? */\n   return EXPR_P (node) ? node->exp.locus : (source_locus) NULL;\n #endif\n }\n@@ -3552,33 +3555,24 @@ set_expr_locus (tree node,\n #endif\n }\n \n-const char **\n+/* Return the file name of the location of NODE.  */\n+const char *\n expr_filename (const_tree node)\n {\n-#ifdef USE_MAPPED_LOCATION\n-  if (GIMPLE_STMT_P (node))\n-    return &LOCATION_FILE (GIMPLE_STMT_LOCUS (node));\n-  return &LOCATION_FILE (EXPR_CHECK (node)->exp.locus);\n-#else\n   if (GIMPLE_STMT_P (node))\n-    return &GIMPLE_STMT_LOCUS (node)->file;\n-  return &(EXPR_CHECK (node)->exp.locus->file);\n-#endif\n+    return LOCATION_FILE (location_from_locus (GIMPLE_STMT_LOCUS (node)));\n+  return LOCATION_FILE (location_from_locus (EXPR_CHECK (node)->exp.locus));\n }\n \n-int *\n+/* Return the line number of the location of NODE.  */\n+int\n expr_lineno (const_tree node)\n {\n-#ifdef USE_MAPPED_LOCATION\n-  if (GIMPLE_STMT_P (node))\n-    return &LOCATION_LINE (GIMPLE_STMT_LOCUS (node));\n-  return &LOCATION_LINE (EXPR_CHECK (node)->exp.locus);\n-#else\n   if (GIMPLE_STMT_P (node))\n-    return &GIMPLE_STMT_LOCUS (node)->line;\n-  return &EXPR_CHECK (node)->exp.locus->line;\n-#endif\n+    return LOCATION_LINE (location_from_locus (GIMPLE_STMT_LOCUS (node)));\n+  return LOCATION_LINE (location_from_locus (EXPR_CHECK (node)->exp.locus));\n }\n+\n \f\n /* Return a declaration like DDECL except that its DECL_ATTRIBUTES\n    is ATTRIBUTE.  */"}, {"sha": "5a74cccebba4e910186ea8d4421ec05439ec9bf7", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1598,8 +1598,8 @@ struct tree_constructor GTY(())\n #define EXPR_HAS_LOCATION(NODE) expr_has_location ((NODE))\n #define EXPR_LOCUS(NODE) expr_locus ((NODE))\n #define SET_EXPR_LOCUS(NODE, FROM) set_expr_locus ((NODE), (FROM))\n-#define EXPR_FILENAME(NODE) *(expr_filename ((NODE)))\n-#define EXPR_LINENO(NODE) *(expr_lineno ((NODE)))\n+#define EXPR_FILENAME(NODE) (expr_filename ((NODE)))\n+#define EXPR_LINENO(NODE) (expr_lineno ((NODE)))\n \n /* True if a tree is an expression or statement that can have a\n    location.  */\n@@ -4840,22 +4840,17 @@ extern tree find_compatible_field (tree, tree);\n extern location_t expr_location (const_tree);\n extern void set_expr_location (tree, location_t);\n extern bool expr_has_location (const_tree);\n-extern\n-#ifdef USE_MAPPED_LOCATION\n-source_location *\n-#else\n-source_locus\n-#endif\n-expr_locus (const_tree);\n-extern void set_expr_locus (tree,\n+\n #ifdef USE_MAPPED_LOCATION\n-                            source_location *loc\n+extern source_locus *expr_locus (const_tree);\n+extern void set_expr_locus (tree, source_location *);\n #else\n-\t\t            source_locus loc\n+extern source_locus expr_locus (const_tree);\n+extern void set_expr_locus (tree, source_locus loc);\n #endif\n-\t\t\t   );\n-extern const char **expr_filename (const_tree);\n-extern int *expr_lineno (const_tree);\n+extern const char *expr_filename (const_tree);\n+extern int expr_lineno (const_tree);\n+\n extern tree *tree_block (tree);\n extern tree *generic_tree_operand (tree, int);\n extern tree *generic_tree_type (tree);"}, {"sha": "d98c1c4c85aa02402ff24bcdb405156ef8049281", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,12 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* tree1.c (treelang_init): Update.\n+\t(treelang_parse_file): Update.\n+\t(treelang_parse_file): Update.\n+\t(treelang_parse_file): Update.\n+\t* lex.l: Update.\n+\t(update_lineno_charno): Likewise.\n+\n 2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* treetree.c (tree_code_create_function_wrapup):  Use set_cfun."}, {"sha": "d0964c4af90e184ed241fd71c7f070a261dcd4ac", "filename": "gcc/treelang/lex.l", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2Flex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2Flex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flex.l?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -76,7 +76,7 @@ static void dump_lex_value (int lexret);\n  { \n    /* ??? Should really allocate only what we need.  */\n    yylval = my_malloc (sizeof (struct prod_token_parm_item));\n-   LINEMAP_POSITION_FOR_COLUMN (input_location, &line_table,\n+   LINEMAP_POSITION_FOR_COLUMN (input_location, line_table,\n \t\t\t\tnext_tree_charno);\n    ((struct prod_token_parm_item *)yylval)->tp.tok.location = input_location;\n    ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;\n@@ -233,7 +233,7 @@ update_lineno_charno (void)\n    /* Update the values we send to caller in case we sometimes don't\n       tell them about all the 'tokens' eg comments etc.  */\n    int yyl;\n-   LINEMAP_POSITION_FOR_COLUMN (input_location, &line_table,\n+   LINEMAP_POSITION_FOR_COLUMN (input_location, line_table,\n \t\t\t\tnext_tree_charno);\n    ((struct prod_token_parm_item *)yylval)->tp.tok.location = input_location;\n    ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;\n@@ -243,7 +243,7 @@ update_lineno_charno (void)\n          if ( yytext[yyl] == '\\n' ) \n             {\n #ifdef USE_MAPPED_LOCATION\n-\t      source_location s = linemap_line_start (&line_table, ++lineno,\n+\t      source_location s = linemap_line_start (line_table, ++lineno,\n \t\t\t\t\t\t      80);\n \t      input_location = s;\n #else"}, {"sha": "a2f990f862d12ca2935ed6fbec174baa29112c80", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -142,7 +142,7 @@ treelang_init (void)\n #ifndef USE_MAPPED_LOCATION\n   input_filename = main_input_filename;\n #else\n-  linemap_add (&line_table, LC_ENTER, false, main_input_filename, 1);\n+  linemap_add (line_table, LC_ENTER, false, main_input_filename, 1);\n #endif\n \n   /* This error will not happen from GCC as it will always create a\n@@ -166,8 +166,8 @@ treelang_init (void)\n     }\n \n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_RENAME, false, \"<built-in>\", 1);\n-  linemap_line_start (&line_table, 0, 1);\n+  linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 1);\n+  linemap_line_start (line_table, 0, 1);\n #endif\n \n   /* Init decls, etc.  */\n@@ -191,8 +191,8 @@ treelang_parse_file (int debug_flag ATTRIBUTE_UNUSED)\n {\n #ifdef USE_MAPPED_LOCATION\n   source_location s;\n-  linemap_add (&line_table, LC_RENAME, false, main_input_filename, 1);\n-  s = linemap_line_start (&line_table, 1, 80);\n+  linemap_add (line_table, LC_RENAME, false, main_input_filename, 1);\n+  s = linemap_line_start (line_table, 1, 80);\n   input_location = s;\n #else\n   input_line = 1;\n@@ -202,7 +202,7 @@ treelang_parse_file (int debug_flag ATTRIBUTE_UNUSED)\n   yyparse ();\n   cgraph_finalize_compilation_unit ();\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_LEAVE, false, NULL, 0);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n #endif\n   cgraph_optimize ();\n }"}, {"sha": "08e5f86af1ed8723b1ee6134975bd0e3fabaec0f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,3 +1,22 @@\n+2007-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* internal.h (struct cpp_reader) <invocation_location>: New\n+\tfield.\n+\t(struct cpp_reader) <set_invocation_location>: Likewise.\n+\t* init.c (cpp_set_line_map): New function.\n+\t* line-map.c (linemap_add): Use linemap's allocator.\n+\t* include/line-map.h (GTY): Define.\n+\t(line_map_realloc): New typedef.\n+\t(struct line_map): Mark with GTY.\n+\t(struct line_maps): Likewise.\n+\t(struct line_maps) <maps>: Likewise.\n+\t(struct line_maps) <reallocator>: New field.\n+\t* include/symtab.h (GTY): Conditionally define.\n+\t* include/cpplib.h (cpp_set_line_map): Declare.\n+\t(cpp_get_token_with_location): Declare.\n+\t* macro.c (cpp_get_token): Set invocation_location on the reader.\n+\t(cpp_get_token_with_location): New function.\n+\n 2007-08-30  Chao-ying Fu  <fu@mips.com>\n \n \t* expr.c (interpret_float_suffix): Support hr, r, lr, llr, uhr, ur,"}, {"sha": "ff13cd6b532e67ae7c700d869db60633ea5e7412", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for CPP library.\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005\n+   2004, 2005, 2007\n    Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n@@ -623,6 +623,10 @@ struct cpp_hashnode GTY(())\n extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,\n \t\t\t\t      struct line_maps *);\n \n+/* Reset the cpp_reader's line_map.  This is only used after reading a\n+   PCH file.  */\n+extern void cpp_set_line_map (cpp_reader *, struct line_maps *);\n+\n /* Call this to change the selected language standard (e.g. because of\n    command line options).  */\n extern void cpp_set_lang (cpp_reader *, enum c_lang);\n@@ -687,6 +691,8 @@ extern void cpp_register_deferred_pragma (cpp_reader *, const char *,\n extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,\n \t\t\t    const cpp_token *);\n extern const cpp_token *cpp_get_token (cpp_reader *);\n+extern const cpp_token *cpp_get_token_with_location (cpp_reader *,\n+\t\t\t\t\t\t     source_location *);\n extern const unsigned char *cpp_macro_definition (cpp_reader *,\n \t\t\t\t\t\t  const cpp_hashnode *);\n extern void _cpp_backup_tokens (cpp_reader *, unsigned int);"}, {"sha": "cddc74d432e6c9536e14d0b570a8c1e46095d609", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,5 +1,5 @@\n /* Map logical line numbers to (source file, line number) pairs.\n-   Copyright (C) 2001, 2003, 2004\n+   Copyright (C) 2001, 2003, 2004, 2007\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -23,6 +23,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #ifndef LIBCPP_LINE_MAP_H\n #define LIBCPP_LINE_MAP_H\n \n+#ifndef GTY\n+#define GTY(x) /* nothing */\n+#endif\n+\n /* Reason for adding a line change with add_line_map ().  LC_ENTER is\n    when including a new file, e.g. a #include directive in C.\n    LC_LEAVE is when reaching a file's end.  LC_RENAME is when a file\n@@ -35,6 +39,9 @@ enum lc_reason {LC_ENTER = 0, LC_LEAVE, LC_RENAME};\n    and effectively typedef source_location location_t.  */\n typedef unsigned int source_location;\n \n+/* Memory allocation function typedef.  Works like xrealloc.  */\n+typedef void *(*line_map_realloc) (void *, size_t);\n+\n /* Physical source file TO_FILE at line TO_LINE at column 0 is represented\n    by the logical START_LOCATION.  TO_LINE+L at column C is represented by\n    START_LOCATION+(L*(1<<column_bits))+C, as long as C<(1<<column_bits),\n@@ -47,7 +54,7 @@ typedef unsigned int source_location;\n    creation of this line map, SYSP is one for a system header, two for\n    a C system header file that therefore needs to be extern \"C\"\n    protected in C++, and zero otherwise.  */\n-struct line_map\n+struct line_map GTY(())\n {\n   const char *to_file;\n   unsigned int to_line;\n@@ -61,9 +68,9 @@ struct line_map\n };\n \n /* A set of chronological line_map structures.  */\n-struct line_maps\n+struct line_maps GTY(())\n {\n-  struct line_map *maps;\n+  struct line_map * GTY ((length (\"%h.used\"))) maps;\n   unsigned int allocated;\n   unsigned int used;\n \n@@ -89,6 +96,10 @@ struct line_maps\n   /* The maximum column number we can quickly allocate.  Higher numbers\n      may require allocating a new line_map.  */\n   unsigned int max_column_hint;\n+\n+  /* If non-null, the allocator to use when resizing 'maps'.  If null,\n+     xrealloc is used.  */\n+  line_map_realloc reallocator;\n };\n \n /* Initialize a line map set.  */"}, {"sha": "2bd45cf7f1997435f910658d367e70121bcfa0f0", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables.\n-   Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2003, 2004, 2007 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -19,7 +19,9 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n #define LIBCPP_SYMTAB_H\n \n #include \"obstack.h\"\n+#ifndef GTY\n #define GTY(x) /* nothing */\n+#endif\n \n /* This is what each hash table entry points to.  It may be embedded\n    deeply within another object.  */"}, {"sha": "aa0c0b10e3d871f612e9ad3e6a3ac4a48ab5cdb2", "filename": "libcpp/init.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -227,6 +227,14 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   return pfile;\n }\n \n+/* Set the line_table entry in PFILE.  This is called after reading a\n+   PCH file, as the old line_table will be incorrect.  */\n+void\n+cpp_set_line_map (cpp_reader *pfile, struct line_maps *line_table)\n+{\n+  pfile->line_table = line_table;\n+}\n+\n /* Free resources used by PFILE.  Accessing PFILE after this function\n    returns leads to undefined behavior.  Returns the error count.  */\n void"}, {"sha": "59332df4fe364d4999552596f30d5c5e53492b8b", "filename": "libcpp/internal.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -339,6 +339,14 @@ struct cpp_reader\n   /* Token generated while handling a directive, if any. */\n   cpp_token directive_result;\n \n+  /* When expanding a macro at top-level, this is the location of the\n+     macro invocation.  */\n+  source_location invocation_location;\n+\n+  /* True if this call to cpp_get_token should consider setting\n+     invocation_location.  */\n+  bool set_invocation_location;\n+\n   /* Search paths for include files.  */\n   struct cpp_dir *quote_include;\t/* \"\" */\n   struct cpp_dir *bracket_include;\t/* <> */"}, {"sha": "c13a82dcafc95a8ed038023bce2d035791834b77", "filename": "libcpp/line-map.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,5 +1,5 @@\n /* Map logical line numbers to (source file, line number) pairs.\n-   Copyright (C) 2001, 2003, 2004\n+   Copyright (C) 2001, 2003, 2004, 2007\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -96,8 +96,15 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \n   if (set->used == set->allocated)\n     {\n+      line_map_realloc reallocator\n+\t= set->reallocator ? set->reallocator : xrealloc;\n       set->allocated = 2 * set->allocated + 256;\n-      set->maps = XRESIZEVEC (struct line_map, set->maps, set->allocated);\n+      set->maps\n+\t= (struct line_map *) (*reallocator) (set->maps,\n+\t\t\t\t\t      set->allocated\n+\t\t\t\t\t      * sizeof (struct line_map));\n+      memset (&set->maps[set->used], 0, ((set->allocated - set->used)\n+\t\t\t\t\t * sizeof (struct line_map)));\n     }\n \n   map = &set->maps[set->used];"}, {"sha": "e80815b7bf2bad272532013119236d02d7418646", "filename": "libcpp/macro.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffeb913b1a455fe79c1c116fc75f09c21194815/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=5ffeb913b1a455fe79c1c116fc75f09c21194815", "patch": "@@ -1,7 +1,7 @@\n /* Part of CPP library.  (Macro and #define handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006 Free Software Foundation, Inc.\n+   2006, 2007 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1094,6 +1094,8 @@ const cpp_token *\n cpp_get_token (cpp_reader *pfile)\n {\n   const cpp_token *result;\n+  bool can_set = pfile->set_invocation_location;\n+  pfile->set_invocation_location = false;\n \n   for (;;)\n     {\n@@ -1139,6 +1141,10 @@ cpp_get_token (cpp_reader *pfile)\n \n       if (!(node->flags & NODE_DISABLED))\n \t{\n+\t  /* If not in a macro context, and we're going to start an\n+\t     expansion, record the location.  */\n+\t  if (can_set && !context->macro)\n+\t    pfile->invocation_location = result->src_loc;\n \t  if (!pfile->state.prevent_expansion\n \t      && enter_macro_context (pfile, node))\n \t    {\n@@ -1164,6 +1170,27 @@ cpp_get_token (cpp_reader *pfile)\n   return result;\n }\n \n+/* Like cpp_get_token, but also returns a location separate from the\n+   one provided by the returned token.  LOC is an out parameter; *LOC\n+   is set to the location \"as expected by the user\".  This matters\n+   when a token results from macro expansion -- the token's location\n+   will indicate where the macro is defined, but *LOC will be the\n+   location of the start of the expansion.  */\n+const cpp_token *\n+cpp_get_token_with_location (cpp_reader *pfile, source_location *loc)\n+{\n+  const cpp_token *result;\n+\n+  pfile->set_invocation_location = true;\n+  result = cpp_get_token (pfile);\n+  if (pfile->context->macro)\n+    *loc = pfile->invocation_location;\n+  else\n+    *loc = result->src_loc;\n+\n+  return result;\n+}\n+\n /* Returns true if we're expanding an object-like macro that was\n    defined in a system header.  Just checks the macro at the top of\n    the stack.  Used for diagnostic suppression.  */"}]}