{"sha": "3a598fbeb416142a7b9aa9a332eab71c1828d36b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1OThmYmViNDE2MTQyYTdiOWFhOWEzMzJlYWI3MWMxODI4ZDM2Yg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-01T05:20:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-01T05:20:26Z"}, "message": "1750a.md, [...]: Use GEN_INT consistently.\n\n        * 1750a.md, arm.c, clipper.c, clipper.md: Use GEN_INT consistently.\n        * convex.h, dsp16xx.c, fx80.md, gmicro.c, gmicro.md: Likewise.\n        * i370.h, i370.md, i860.c, i860.h, i860.md, i960.c: Likewise.\n        * i960.h, i960.md, m32r.md, m68k.md, m68kv4.h, m88k.c: Likewise.\n        * m88k.md, ns32k.c, ns32k.md, pdp11.c, pdp11.h, pdp11.md: Likewise.\n        * pyr.c, pyr.h, pyr.md, romp.c, romp.h, romp.md: Likewise.\n        * rs6000.md, sparc.c, sparc.h, sparc.md, spur.c, spur.md: Likewise.\n        * tahoe.md, vax.h, vax.md, we32k.c, we32k.h, we32k.md: Likewise.\n        * md.texi: Likewise.\n\nFrom-SVN: r18927", "tree": {"sha": "84f0e70b65ebdc968e5fa3ba0c8eac667a10255b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84f0e70b65ebdc968e5fa3ba0c8eac667a10255b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a598fbeb416142a7b9aa9a332eab71c1828d36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a598fbeb416142a7b9aa9a332eab71c1828d36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a598fbeb416142a7b9aa9a332eab71c1828d36b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a598fbeb416142a7b9aa9a332eab71c1828d36b/comments", "author": null, "committer": null, "parents": [{"sha": "a26fd1652b6b8280eee7746c25d7c083d72ba29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26fd1652b6b8280eee7746c25d7c083d72ba29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26fd1652b6b8280eee7746c25d7c083d72ba29b"}], "stats": {"total": 1051, "additions": 484, "deletions": 567}, "files": [{"sha": "4ed42ee4ba6654358b17e46503b47c86a6f3d634", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,3 +1,15 @@\n+Wed Apr  1 06:09:53 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* 1750a.md, arm.c, clipper.c, clipper.md: Use GEN_INT consistently.\n+\t* convex.h, dsp16xx.c, fx80.md, gmicro.c, gmicro.md: Likewise.\n+\t* i370.h, i370.md, i860.c, i860.h, i860.md, i960.c: Likewise.\n+\t* i960.h, i960.md, m32r.md, m68k.md, m68kv4.h, m88k.c: Likewise.\n+\t* m88k.md, ns32k.c, ns32k.md, pdp11.c, pdp11.h, pdp11.md: Likewise.\n+\t* pyr.c, pyr.h, pyr.md, romp.c, romp.h, romp.md: Likewise.\n+\t* rs6000.md, sparc.c, sparc.h, sparc.md, spur.c, spur.md: Likewise.\n+\t* tahoe.md, vax.h, vax.md, we32k.c, we32k.h, we32k.md: Likewise.\n+\t* md.texi: Likewise.\n+\n Wed Apr  1 08:33:44 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* fixincludes (limits.h): Fix nested comments in Motorola's"}, {"sha": "cff2d9291b85e48668971780d4b51d5bc64cf93b", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -669,7 +669,7 @@\n \t   rtx new_opnds[4];\n \t   new_opnds[0] = operands[0];\n \t   new_opnds[1] = operands[1];\n-\t   new_opnds[2] = gen_rtx (CONST_INT, VOIDmode, -INTVAL(operands[2]));\n+\t   new_opnds[2] = GEN_INT (-INTVAL(operands[2]));\n \t   new_opnds[3] = operands[3];\n            istr = \\\"disn\\\";\n \t   return mod_regno_adjust (istr, new_opnds);\n@@ -1105,7 +1105,7 @@\n ;********************\n \n ;; Bit field instructions, general cases.\n-;; \"o,d\" constraint causes a nonoffsetable memref to match the \"o\"\n+;; \"o,d\" constraint causes a nonoffsettable memref to match the \"o\"\n ;; so that its address is reloaded.\n \n ;; (define_insn \"extv\" ...\n@@ -1381,7 +1381,7 @@\n ;   \"\"\n ;   \"*\n ;    { \n-;         rtx oprnd = gen_rtx(CONST_INT,VOIDmode,get_frame_size());\n+;         rtx oprnd = GEN_INT (get_frame_size());\n ;         output_asm_insn(\\\"ret.m  %0\\\",&oprnd);\n ;         return \\\"\\;\\\";\n ;    } \")"}, {"sha": "6a0f593b9f38d34a75bee4a1d017f8f82220f5e3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -5020,8 +5020,7 @@ output_func_epilogue (f, frame_size)\n \t    {\n \t      /* Unwind the pre-pushed regs */\n \t      operands[0] = operands[1] = stack_pointer_rtx;\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     current_function_pretend_args_size);\n+\t      operands[2] = GEN_INT (current_function_pretend_args_size);\n \t      output_add_immediate (operands);\n \t    }\n \t  /* And finally, go home */"}, {"sha": "4bee0e6aaa726a5d8c1d8f9945f0d4cbf30be3d3", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -19,8 +19,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -387,10 +387,10 @@ clipper_builtin_saveregs (arglist)\n \n   addr = copy_to_reg (XEXP (block, 0));\n \n-  f0_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 24));\n-  f1_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 32));\n-  r0_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 40));\n-  r1_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 44));\n+  f0_addr =  gen_rtx (PLUS, Pmode, addr, GEN_INT (24));\n+  f1_addr =  gen_rtx (PLUS, Pmode, addr, GEN_INT (32));\n+  r0_addr =  gen_rtx (PLUS, Pmode, addr, GEN_INT (40));\n+  r1_addr =  gen_rtx (PLUS, Pmode, addr, GEN_INT (44));\n \n \n   /* Store float regs  */\n@@ -416,47 +416,61 @@ clipper_builtin_saveregs (arglist)\n   emit_move_insn (scratch, r0_addr);\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 4))),\n+\t\t\t\t    GEN_INT (4))),\n \t\t  scratch);\n \t\t  \n   emit_move_insn (scratch, f0_addr);\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 8))),\n+\t\t\t\t    GEN_INT (8))),\n \t\t  scratch);\n \t\t  \n   emit_move_insn (scratch, r1_addr);\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 12))),\n+\t\t\t\t    GEN_INT (12))),\n \t\t  scratch);\n \t\t  \n   emit_move_insn (scratch, f1_addr);\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 16))),\n+\t\t\t\t    GEN_INT (16))),\n \t\t  scratch);\n \n \n   if (flag_check_memory_usage)\n     {\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, addr,\n-\t\t\t ptr_mode, GEN_INT (5 * GET_MODE_SIZE (SImode)),\n+      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t addr, ptr_mode,\n+\t\t\t GEN_INT (5 * GET_MODE_SIZE (SImode)),\n+\t\t\t TYPE_MODE (sizetype),\n+\t\t\t GEN_INT (MEMORY_USE_RW),\n+\t\t\t TYPE_MODE (integer_type_node));\n+\n+      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t f0_addr, ptr_mode,\n+\t\t\t GEN_INT (GET_MODE_SIZE (DFmode)),\n+\t\t\t TYPE_MODE (sizetype),\n+\t\t\t GEN_INT (MEMORY_USE_RW), \n+\t\t\t TYPE_MODE (integer_type_node));\n+      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t f1_addr, ptr_mode,\n+\t\t\t GEN_INT (GET_MODE_SIZE (DFmode)),\n+\t\t\t TYPE_MODE (sizetype),\n+\t\t\t GEN_INT (MEMORY_USE_RW), \n+\t\t\t TYPE_MODE (integer_type_node));\n+      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t r0_addr, ptr_mode,\n+\t\t\t GEN_INT (GET_MODE_SIZE (SImode)),\n+\t\t\t TYPE_MODE (sizetype),\n+\t\t\t GEN_INT (MEMORY_USE_RW),\n+\t\t\t TYPE_MODE (integer_type_node));\n+      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t r1_addr, ptr_mode,\n+\t\t\t GEN_INT (GET_MODE_SIZE (SImode)),\n \t\t\t TYPE_MODE (sizetype),\n-\t\t\t GEN_INT (MEMORY_USE_RW), QImode);\n-\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, f0_addr,\n-\t\t\t ptr_mode, GEN_INT (GET_MODE_SIZE (DFmode)),\n-\t\t\t TYPE_MODE (sizetype), GEN_INT (MEMORY_USE_RW), QImode);\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, f1_addr,\n-\t\t\t ptr_mode, GEN_INT (GET_MODE_SIZE (DFmode)),\n-\t\t\t TYPE_MODE (sizetype), GEN_INT (MEMORY_USE_RW), QImode);\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, r0_addr,\n-\t\t\t ptr_mode, GEN_INT (GET_MODE_SIZE (SImode)),\n-\t\t\t TYPE_MODE (sizetype), GEN_INT (MEMORY_USE_RW), QImode);\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, r1_addr,\n-\t\t\t ptr_mode, GEN_INT (GET_MODE_SIZE (SImode)),\n-\t\t\t TYPE_MODE (sizetype), GEN_INT (MEMORY_USE_RW), QImode);\n+\t\t\t GEN_INT (MEMORY_USE_RW),\n+\t\t\t TYPE_MODE (integer_type_node));\n     }\n \n   /* Return the address of the va_list constructor, but don't put it in a"}, {"sha": "87f30fa5d0ade9b7c952c4cc906ed8fa754f8046", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Clipper Version\n-;;   Copyright (C) 1987, 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n+;;   Copyright (C) 1987, 88, 91, 93, 94, 1997 Free Software Foundation, Inc.\n ;; Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n ;; This file is part of GNU CC.\n@@ -340,12 +340,10 @@\n \tabort ();\n \n       yoperands[0] = operands[0];\n-      yoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[1]));\n+      yoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n       output_asm_insn (\\\"loadi  %1,%0\\\", yoperands);\n \n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_HIGH (operands[1]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n       output_asm_insn (\\\"loadi  %1,%0\\\", xoperands);\n       return \\\"\\\";\n     }\n@@ -532,8 +530,8 @@\n   operands[6] = addr0;\n   operands[7] = addr1;\n \n-  operands[0] = gen_rtx (MEM, BLKmode, addr0);\n-  operands[1] = gen_rtx (MEM, BLKmode, addr1);\n+  operands[0] = change_address (operands[0], VOIDmode, addr0);\n+  operands[1] = change_address (operands[1], VOIDmode, addr1);\n \n   if (GET_CODE (operands[2]) != CONST_INT)\n     operands[2] = force_reg (SImode, operands[2]);\n@@ -735,7 +733,7 @@\n \t  val = -val;\n \n \t  xops[0] = operands[0];\n-\t  xops[1] = gen_rtx (CONST_INT, VOIDmode, val);\n+\t  xops[1] = GEN_INT (val);\n \n \t  if (val >= 16)\n \t    output_asm_insn (\\\"subi   %1,%0\\\", xops);"}, {"sha": "893d83aee28bd47a1c14ecf7977ad2b7397c2531", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -811,7 +811,7 @@ enum reg_class {\n     as the \"next arg register\" to be passed to gen_call.  */\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  ((MODE) == VOIDmode ? gen_rtx (CONST_INT, VOIDmode, (CUM)) : 0)\n+  ((MODE) == VOIDmode ? GEN_INT ((CUM)) : 0)\n \n /* This macro generates the assembly code for function entry.\n    FILE is a stdio stream to output the code to."}, {"sha": "dc9763ee32d1c4ac97f99daade4e265a8ac995be", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the DSP1610.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@world.std.com).\n \n This file is part of GNU CC.\n@@ -20,8 +20,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Some output-actions in dsp1600.md need these.  */\n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -1705,7 +1705,7 @@ rtx *operands;\n   REAL_VALUE_FROM_CONST_DOUBLE (d, src);\n   REAL_VALUE_TO_TARGET_SINGLE (d, value);\n   \n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, value);\n+  operands[1] = GEN_INT (value);\n   output_asm_insn (\"%u0=%U1\\n\\t%w0=%H1\", operands);\n #else\n   fatal (\"inline float constants not supported on this host\");\n@@ -1783,7 +1783,7 @@ enum machine_mode mode;\n \t    emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t\tgen_rtx (shift_op, mode, \n \t\t\t\t\t first_shift_emitted ? operands[0] : operands[1],\n-\t\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 16))));\n+\t\t\t\t\t GEN_INT (16))));\n \t  first_shift_emitted = 1;\n \t}\n       else if (shift_amount/8)\n@@ -1794,7 +1794,7 @@ enum machine_mode mode;\n \t    emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t\tgen_rtx (shift_op, mode, \n \t\t\t\t\t first_shift_emitted ? operands[0] : operands[1],\n-\t\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 8))));\n+\t\t\t\t\t GEN_INT (8))));\n \t  first_shift_emitted = 1;\n \t}\n       else if (shift_amount/4)\n@@ -1805,7 +1805,7 @@ enum machine_mode mode;\n \t    emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t\tgen_rtx (shift_op, mode, \n \t\t\t\t\t first_shift_emitted ? operands[0] : operands[1],\n-\t\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 4))));\n+\t\t\t\t\t GEN_INT (4))));\n \t  first_shift_emitted = 1;\n \t}\n       else if (shift_amount/1)\n@@ -1816,7 +1816,7 @@ enum machine_mode mode;\n \t    emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t\tgen_rtx (shift_op, mode, \n \t\t\t\t\t first_shift_emitted ? operands[0] : operands[1],\n-\t\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 1))));\n+\t\t\t\t\t GEN_INT (1))));\n \t  first_shift_emitted = 1;\n \t}\n     }"}, {"sha": "cec863bfd6ffb3a3bbbe20d276d345b3b630e664", "filename": "gcc/config/fx80/fx80.md", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Ffx80%2Ffx80.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Ffx80%2Ffx80.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -244,7 +244,7 @@\n    && (unsigned) INTVAL (operands[1]) < 8\"\n   \"*\n {\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - INTVAL (operands[1]));\n+  operands[1] = GEN_INT (7 - INTVAL (operands[1]));\n   return output_btst (operands, operands[1], operands[0], insn, 7);\n }\")\n \n@@ -260,12 +260,10 @@\n     {\n       operands[0] = adj_offsettable_operand (operands[0],\n \t\t\t\t\t     INTVAL (operands[1]) / 8);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t     7 - INTVAL (operands[1]) % 8);\n+      operands[1] = GEN_INT (7 - INTVAL (operands[1]) % 8);\n       return output_btst (operands, operands[1], operands[0], insn, 7);\n     }\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t 31 - INTVAL (operands[1]));\n+  operands[1] = GEN_INT (31 - INTVAL (operands[1]));\n   return output_btst (operands, operands[1], operands[0], insn, 31);\n }\")\n \n@@ -951,8 +949,7 @@\n       if (INTVAL (operands[2]) < 0\n \t  && INTVAL (operands[2]) >= -8)\n         {\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t         - INTVAL (operands[2]));\n+\t  operands[2] = GEN_INT (- INTVAL (operands[2]));\n \t  return (ADDRESS_REG_P (operands[0])\n \t\t  ? \\\"subq%.w %2,%0\\\"\n \t\t  : \\\"subq%.l %2,%0\\\");\n@@ -1343,8 +1340,7 @@\n     { \n       if (GET_CODE (operands[0]) != REG)\n         operands[0] = adj_offsettable_operand (operands[0], 2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     INTVAL (operands[2]) & 0xffff);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n       if (operands[2] == const0_rtx)\n@@ -1396,11 +1392,11 @@\n \t  || offsettable_memref_p (operands[0])))\n     { \n       if (DATA_REG_P (operands[0]))\n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+\toperands[1] = GEN_INT (logval);\n       else\n         {\n \t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t  operands[1] = GEN_INT (logval % 8);\n \t}\n       return \\\"bset %1,%0\\\";\n     }\n@@ -1901,8 +1897,7 @@\n     {    \n       int width = GET_CODE (operands[0]) == REG ? 31 : 7;\n       return output_btst (operands,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   width - INTVAL (operands[2])),\n+\t\t\t  GEN_INT (width - INTVAL (operands[2])),\n \t\t\t  operands[0],\n \t\t\t  insn, 1000);\n       /* Pass 1000 as SIGNPOS argument so that btst will\n@@ -1928,8 +1923,7 @@\n     {    \n       int width = GET_CODE (operands[0]) == REG ? 31 : 7;\n       return output_btst (operands,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   width - INTVAL (operands[2])),\n+\t\t\t  GEN_INT (width - INTVAL (operands[2])),\n \t\t\t  operands[0],\n \t\t\t  insn, 1000);\n       /* Pass 1000 as SIGNPOS argument so that btst will\n@@ -2300,7 +2294,7 @@\n         (HImode,\n \t gen_rtx (PLUS, Pmode,\n \t\t  gen_rtx (MULT, Pmode, index_diff,\n-\t\t\t   gen_rtx (CONST_INT, VOIDmode, 2)),\n+\t\t\t   GEN_INT (2)),\n \t\t  gen_rtx (LABEL_REF, VOIDmode, operands[3])));\n   /* Emit the last few insns.  */\n   emit_insn (gen_casesi_2 (gen_reg_rtx (HImode), table_elt_addr, operands[3]));\n@@ -2404,11 +2398,11 @@\n     output_asm_insn (\\\"sub%.l a0,a0\\;jbsr %0\\\", operands);\n   else\n   {\n-    xoperands[1] = gen_rtx (CONST_INT, VOIDmode, size/4);\n+    xoperands[1] = GEN_INT (size/4);\n     output_asm_insn (\\\"mov%.l sp,a0\\;pea %a1\\\", xoperands);\n     output_asm_insn (\\\"jbsr %0\\\", operands);\n     size = size + 4;\n-    xoperands[1] = gen_rtx (CONST_INT, VOIDmode, size);\n+    xoperands[1] = GEN_INT (size);\n     if (size <= 8)\n       output_asm_insn (\\\"addq%.l %1,sp\\\", xoperands);\n     else if (size < 0x8000)\n@@ -2435,11 +2429,11 @@\n     output_asm_insn(\\\"sub%.l a0,a0\\;jbsr %1\\\", operands);\n   else\n   {\n-    xoperands[2] = gen_rtx (CONST_INT, VOIDmode, size/4);\n+    xoperands[2] = GEN_INT (size/4);\n     output_asm_insn (\\\"mov%.l sp,a0\\;pea %a2\\\", xoperands);\n     output_asm_insn (\\\"jbsr %1\\\", operands);\n     size = size + 4;\n-    xoperands[2] = gen_rtx (CONST_INT, VOIDmode, size);\n+    xoperands[2] = GEN_INT (size);\n     if (size <= 8)\n       output_asm_insn (\\\"addq%.l %2,sp\\\", xoperands);\n     else if (size < 0x8000)"}, {"sha": "0029ccc07bdb8eef2dda8c73967cc76bacc86c77", "filename": "gcc/config/gmicro/gmicro.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fgmicro%2Fgmicro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fgmicro%2Fgmicro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -2,7 +2,7 @@\n    Ported by Masanobu Yuhara, Fujitsu Laboratories LTD.\n    (yuhara@flab.fujitsu.co.jp)\n \n-   Copyright (C) 1990, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1991, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -25,8 +25,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -635,11 +635,9 @@ output_move_const_double (operands)\n     {\n       rtx xoperands[2];\n       xoperands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_HIGH (operands[1]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n       output_asm_insn (\"mov.w %1,%0\", xoperands);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n+      operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n       return \"mov.w %1,%0\";\n     }\n   else \n@@ -760,7 +758,7 @@ add_imm_word (imm, dest, immp)\n \n   if (imm < 0) \n     {\n-      *immp = gen_rtx (CONST_INT, VOIDmode, -imm);\n+      *immp = GEN_INT (-imm);\n       return sub_imm_word (-imm, dest);\n     }\n     \n@@ -795,7 +793,7 @@ sub_imm_word (imm, dest, immp)\n \n   if (imm < 0 &&  imm != 0x80000000) \n     {\n-      *immp = gen_rtx (CONST_INT, VOIDmode, -imm);\n+      *immp = GEN_INT (-imm);\n       return add_imm_word (-imm, dest);\n     }\n     "}, {"sha": "35384ce044df9df924ad02d2c6f6f8acdab03ca8", "filename": "gcc/config/gmicro/gmicro.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -271,7 +271,7 @@\n   \"*\n {\n   register int log = exact_log2 (INTVAL (operands[1]));\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, log);\n+  operands[1] = GEN_INT (log);\n   return \\\"btst %1,%0.b\\\";\n }\")\n \n@@ -746,8 +746,7 @@\n \t  return \\\"mov.w @(12,r0),@(12,r1)\\\";\n \t}\n \t    \n-      operands[2] =\n-\tgen_rtx (CONST_INT, VOIDmode, op2const);\n+      operands[2] = GEN_INT (op2const);\n       output_asm_insn (\\\"mov.w %2,r2\\\", operands);\n       return \\\"smov/n/f.w\\\";\n     }\n@@ -833,7 +832,7 @@\n \t}\n       else\n \t{\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, wlen);\n+\t  xoperands[0] = GEN_INT (wlen);\n \t  output_asm_insn (\\\"mov.w %0,r2\\\", xoperands);\n \t  output_asm_insn (\\\"smov/n/f.w\\\", operands);\n \t}\n@@ -1517,8 +1516,7 @@\n     { \n       if (GET_CODE (operands[0]) != REG)\n         operands[0] = adj_offsettable_operand (operands[0], 2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     INTVAL (operands[2]) & 0xffff);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n       return \\\"and.h %2,%0\\\";\n@@ -1595,16 +1593,16 @@\n \t{\n \t  if (logval < 7)\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - logval);\n+\t      operands[1] = GEN_INT (7 - logval);\n \t      return \\\"bset.b %1,%0\\\";\n \t    }\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, 31 - logval);\n+\t  operands[1] = GEN_INT (31 - logval);\n \t  return \\\"bset.w %1,%0\\\";\n \t}\n       else\n         {\n \t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - (logval % 8));\n+\t  operands[1] = GEN_INT (7 - (logval % 8));\n \t}\n       return \\\"bset.b %1,%0\\\";\n     }\n@@ -2255,7 +2253,7 @@\n     output_asm_insn (\\\"mov.w %1,%0\\\", operands);\n   if (INTVAL (operands[3]) != 0)\n     output_asm_insn (\\\"shl.w %3,%0\\\", operands);\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, -(32 - INTVAL (operands[2])));\n+  operands[2] = GEN_INT (-(32 - INTVAL (operands[2])));\n   return \\\"sha.w %3,%0\\\";\n }\")\n     \n@@ -2272,7 +2270,7 @@\n     output_asm_insn (\\\"mov.w %1,%0\\\", operands);\n   if (INTVAL (operands[3]) != 0)\n     output_asm_insn (\\\"shl.w %3,%0\\\", operands);\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, -(32 - INTVAL (operands[2])));\n+  operands[2] = GEN_INT (-(32 - INTVAL (operands[2])));\n   return \\\"shl.w %3,%0\\\";\n }\")\n "}, {"sha": "b0664d753044a4bd521f1f5e8178e48c2852ee57", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -575,13 +575,12 @@ enum reg_class\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x05E0));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x5800 | \t\\\n-\t\t\t   STATIC_CHAIN_REGNUM << 4));\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xE00A));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x58F0)); \t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xE00E));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x07FF));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x05E0));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x5800 STATIC_CHAIN_REGNUM << 4));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0xE00A));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x58F0)); \t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0xE00E));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x07FF));\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\"}, {"sha": "6d893d6438899176e183933a09eee22239719144", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler -- System/370 version.\n-;;  Copyright (C) 1989, 1993, 1994, 1995 Free Software Foundation, Inc.\n+;;  Copyright (C) 1989, 93, 94, 95, 1997 Free Software Foundation, Inc.\n ;;  Contributed by Jan Stein (jan@cd.chalmers.se).\n ;;  Modified for MVS C/370 by Dave Pitts (dpitts@nyx.cs.du.edu)\n \n@@ -1210,36 +1210,30 @@ check_label_emit ();\n \n   op0 = XEXP (operands[0], 0);\n   if (GET_CODE (op0) == REG\n-       || (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 0)) == REG\n-\t   && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t   && (unsigned) INTVAL (XEXP (op0, 1)) < 4096))\n-    {\n-      op0 = operands[0];\n-    }\n+      || (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 0)) == REG\n+\t  && GET_CODE (XEXP (op0, 1)) == CONST_INT\n+\t  && (unsigned) INTVAL (XEXP (op0, 1)) < 4096))\n+    op0 = operands[0];\n   else\n-    {\n-      op0 = gen_rtx (MEM, BLKmode, copy_to_mode_reg (SImode, op0));\n-    }\n+    op0 = change_address (operands[0], VOIDmode,\n+\t\t\t  copy_to_mode_reg (SImode, op0));\n \n   op1 = XEXP (operands[1], 0);\n   if (GET_CODE (op1) == REG\n       || (GET_CODE (op1) == PLUS && GET_CODE (XEXP (op1, 0)) == REG\n \t  && GET_CODE (XEXP (op1, 1)) == CONST_INT\n \t  && (unsigned) INTVAL (XEXP (op1, 1)) < 4096))\n-    {\n-      op1 = operands[1];\n-    }\n+    op1 = operands[1];\n   else\n-    {\n-      op1 = gen_rtx (MEM, BLKmode, copy_to_mode_reg (SImode, op1));\n-    }\n+    op1 = change_address (operands[1], VOIDmode,\n+\t\t\t  copy_to_mode_reg (SImode, op1));\n \n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 256)\n-    {\n-      emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\tgen_rtx (SET, VOIDmode, op0, op1),\n-\t\t\tgen_rtx (USE, VOIDmode, operands[2]))));\n-    }\n+    emit_insn (gen_rtx (PARALLEL, VOIDmode,\n+\t\t\tgen_rtvec (2,\n+\t\t\t\t   gen_rtx (SET, VOIDmode, op0, op1),\n+\t\t\t\t   gen_rtx (USE, VOIDmode, operands[2]))));\n+\n   else\n     {\n       rtx reg1 = gen_reg_rtx (DImode);\n@@ -1248,13 +1242,14 @@ check_label_emit ();\n \n       emit_insn (gen_rtx (SET, VOIDmode, subreg, operands[2]));\n       emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (SUBREG, SImode, reg2, 1),\n-\t\t\t\t\t\t subreg));\n-      emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (5,\n-\t\t\tgen_rtx (SET, VOIDmode, op0, op1),\n-\t\t\tgen_rtx (USE, VOIDmode, reg1),\n-\t\t\tgen_rtx (USE, VOIDmode, reg2),\n-\t\t\tgen_rtx (CLOBBER, VOIDmode, reg1),\n-\t\t\tgen_rtx (CLOBBER, VOIDmode, reg2))));\n+\t\t\t  subreg));\n+      emit_insn (gen_rtx (PARALLEL, VOIDmode,\n+\t\t\t  gen_rtvec (5,\n+\t\t\t\t     gen_rtx (SET, VOIDmode, op0, op1),\n+\t\t\t\t     gen_rtx (USE, VOIDmode, reg1),\n+\t\t\t\t     gen_rtx (USE, VOIDmode, reg2),\n+\t\t\t\t     gen_rtx (CLOBBER, VOIDmode, reg1),\n+\t\t\t\t     gen_rtx (CLOBBER, VOIDmode, reg2))));\n     }\n   DONE;\n }\")\n@@ -1310,21 +1305,21 @@ check_label_emit ();\n \t\t  operand_subword (operands[0], 0, 1, DImode), operands[1]));\n       emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\tgen_rtx (ASHIFTRT, DImode, operands[0],\n-\t\t\t\tgen_rtx (CONST_INT, SImode, 32))));\n+\t\t\t\tGEN_INT (32))));\n     }\n   else\n     {\n       if (INTVAL (operands[1]) < 0)\n \t{\n \t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\t  operand_subword (operands[0], 0, 1, DImode),\n-\t\t\t       gen_rtx (CONST_INT, SImode, -1)));\n+\t\t\t       GEN_INT (-1)));\n         }\n       else\n \t{\n \t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\toperand_subword (operands[0], 0, 1, DImode),\n-\t\t\t       gen_rtx (CONST_INT, SImode, 0)));\n+\t\t\t       GEN_INT (0)));\n         }\n       emit_insn (gen_rtx (SET, VOIDmode, gen_lowpart (SImode, operands[0]),\n \t\t\t   operands[1]));\n@@ -1443,7 +1438,7 @@ check_label_emit ();\n \t\t  operand_subword (operands[0], 0, 1, DImode), operands[1]));\n       emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\tgen_rtx (LSHIFTRT, DImode, operands[0],\n-\t\t\t\tgen_rtx (CONST_INT, SImode, 32))));\n+\t\t\t\tGEN_INT (32))));\n   DONE;\n }\")\n \n@@ -1649,7 +1644,7 @@ check_label_emit ();\n \t      gen_rtx (USE, VOIDmode, gen_rtx (LABEL_REF, VOIDmode, label)))));\n   emit_insn (gen_rtx (SET, VOIDmode, op0_high,\n \t\t    gen_rtx (PLUS, SImode, op0_high,\n-\t\t\t    gen_rtx (CONST_INT, SImode, 1))));\n+\t\t\t    GEN_INT (1))));\n   emit_label (label);\n   DONE;\n }\")\n@@ -1891,7 +1886,7 @@ check_label_emit ();\n \t\t\t      gen_rtx (LABEL_REF, VOIDmode, label)))));\n   emit_insn (gen_rtx (SET, VOIDmode, op0_high,\n \t\t      gen_rtx (MINUS, SImode, op0_high,\n-\t\t\t      gen_rtx (CONST_INT, SImode, 1))));\n+\t\t\t      GEN_INT (1))));\n   emit_label (label);\n   DONE;\n }\")\n@@ -2266,7 +2261,7 @@ check_label_emit ();\n       emit_jump_insn (gen_beq (label1));\n       emit_insn (gen_rtx (SET, VOIDmode, dr,\n \t\t\t  gen_rtx (LSHIFTRT, DImode, dr,\n-\t\t\t\t    gen_rtx (CONST_INT, SImode, 32))));\n+\t\t\t\t    GEN_INT (32))));\n       emit_insn (gen_rtx (SET, VOIDmode, dr,\n \t\t    gen_rtx (DIV, SImode, dr, sr)));\n       emit_jump_insn (gen_jump (label3));\n@@ -2391,7 +2386,7 @@ check_label_emit ();\n \t{\n \t  emit_insn (gen_rtx (SET, VOIDmode, dr,\n \t\t\t      gen_rtx (LSHIFTRT, DImode, dr,\n-\t\t\t\t\tgen_rtx (CONST_INT, SImode, 32))));\n+\t\t\t\t\tGEN_INT (32))));\n \t  emit_insn (gen_rtx (SET, VOIDmode, dr,\n \t\t\tgen_rtx (MOD, SImode, dr, operands[2])));\n \t}\n@@ -2425,7 +2420,7 @@ check_label_emit ();\n       emit_jump_insn (gen_beq (label1));\n       emit_insn (gen_rtx (SET, VOIDmode, dr,\n \t\t\t  gen_rtx (LSHIFTRT, DImode, dr,\n-\t\t\t\t    gen_rtx (CONST_INT, SImode, 32))));\n+\t\t\t\t    GEN_INT (32))));\n       emit_insn (gen_rtx (SET, VOIDmode, dr, gen_rtx (MOD, SImode, dr, sr)));\n       emit_jump_insn (gen_jump (label3));\n       emit_label (label1);"}, {"sha": "cedbeb1885a3363a68825af4effe5be86917df04", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 860\n-   Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1997 Free Software Foundation, Inc.\n    Derived from sparc.c.\n \n    Written by Richard Stallman (rms@ai.mit.edu).\n@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"flags.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -38,8 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"insn-attr.h\"\n \n-#include <stdio.h>\n-\n static rtx find_addr_reg ();\n \n #ifndef I860_REG_PREFIX\n@@ -1115,7 +1114,7 @@ output_size_for_block_move (size, reg, align)\n   else\n     {\n       xoperands[1]\n-\t= gen_rtx (CONST_INT, VOIDmode, INTVAL (size) - INTVAL (align));\n+\t= GEN_INT (INTVAL (size) - INTVAL (align));\n       cc_status.flags &= ~ CC_KNOW_HI_R31;\n       output_asm_insn (\"mov %1,%0\", xoperands);\n     }\n@@ -1154,7 +1153,7 @@ output_block_move (operands)\n   if (align > 4)\n     {\n       align = 4;\n-      alignrtx = gen_rtx (CONST_INT, VOIDmode, 4);\n+      alignrtx = GEN_INT (4);\n     }\n \n   /* Recognize special cases of block moves.  These occur\n@@ -1239,7 +1238,7 @@ output_block_move (operands)\n \n   /* Generate number for unique label.  */\n \n-  xoperands[3] = gen_rtx (CONST_INT, VOIDmode, movstrsi_label++);\n+  xoperands[3] = GEN_INT (movstrsi_label++);\n \n   /* Calculate the size of the chunks we will be trying to move first.  */\n \n@@ -1254,7 +1253,7 @@ output_block_move (operands)\n \n   /* Copy the increment (negative) to a register for bla insn.  */\n \n-  xoperands[4] = gen_rtx (CONST_INT, VOIDmode, - chunk_size);\n+  xoperands[4] = GEN_INT (- chunk_size);\n   xoperands[5] = operands[5];\n   output_asm_insn (\"adds %4,%?r0,%5\", xoperands);\n "}, {"sha": "41fde065f28995816d1776b672d975206630ae41", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -618,11 +618,11 @@ struct cumulative_args { int ints, floats; };\n      or #BOTTOM_OF_STATIC,r29,r29  */\n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xec1f0000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xe7ff0000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xec1d0000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4000f800));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0xe7bd0000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0xec1f0000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0xe7ff0000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0xec1d0000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x4000f800));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0xe7bd0000));\t\\\n }\n \n /* Length in units of the trampoline for entering a nested function.  */"}, {"sha": "48e0c35a39652b35b6893a430742cd3768fda574", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Intel 860 chip for GNU C compiler\n-;;   Copyright (C) 1989, 1990 Free Software Foundation, Inc.\n+;;   Copyright (C) 1989, 1990, 1997 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -88,8 +88,7 @@\n   int pos = 8 - width - INTVAL (operands[1]);\n \n   CC_STATUS_PARTIAL_INIT;\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t ~((-1) << width) << pos);\n+  operands[2] = GEN_INT (~((-1) << width) << pos);\n   return \\\"and %2,%0,%?r0\\\";\n }\")\n \f\n@@ -136,7 +135,7 @@\n   else\n     {\n       cc_status.flags |= CC_REVERSED;\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[1]));\n+      operands[1] = GEN_INT (- INTVAL (operands[1]));\n       return \\\"adds %1,%0,%?r0\\\";\n     }\n }\")\n@@ -153,7 +152,7 @@\n   else\n     {\n       cc_status.flags |= CC_REVERSED;\n-      operands[0] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[0]));\n+      operands[0] = GEN_INT (- INTVAL (operands[0]));\n       return \\\"adds %0,%1,%?r0\\\";\n     }\n }\")\n@@ -171,7 +170,7 @@\n   else\n     {\n       cc_status.flags |= CC_REVERSED;\n-      operands[0] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[0]));\n+      operands[0] = GEN_INT (- INTVAL (operands[0]));\n       return \\\"adds %0,%1,%?r0\\\";\n     }\n }\")\n@@ -189,7 +188,7 @@\n   else\n     {\n       cc_status.flags |= CC_REVERSED;\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[1]));\n+      operands[1] = GEN_INT (- INTVAL (operands[1]));\n       return \\\"adds %1,%0,%?r0\\\";\n     }\n }\")\n@@ -228,7 +227,7 @@\n       else\n \t{\n \t  cc_status.flags |= CC_REVERSED;\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[1]));\n+\t  operands[1] = GEN_INT (- INTVAL (operands[1]));\n \t  return \\\"addu %1,%0,%?r0\\\";\n \t}\n     }\n@@ -250,7 +249,7 @@\n       else\n \t{\n \t  cc_status.flags |= CC_REVERSED;\n-\t  operands[0] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[0]));\n+\t  operands[0] = GEN_INT (- INTVAL (operands[0]));\n \t  return \\\"addu %0,%1,%?r0\\\";\n \t}\n     }\n@@ -1004,23 +1003,26 @@\n ;; that anything generated as this insn will be recognized as one\n ;; and that it won't successfully combine with anything.\n (define_expand \"movstrsi\"\n-  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"general_operand\" \"\"))\n-\t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"\")))\n+  [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"\")\n+\t\t   (match_operand:BLK 1 \"general_operand\" \"\"))\n \t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (match_dup 6))\n-\t      (clobber (match_dup 0))\n-\t      (clobber (match_dup 1))])]\n+\t      (clobber (match_dup 7))\n+\t      (clobber (match_dup 8))])]\n   \"\"\n   \"\n {\n-  operands[0] = copy_to_mode_reg (SImode, XEXP (operands[0], 0));\n-  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n   operands[4] = gen_reg_rtx (SImode);\n   operands[5] = gen_reg_rtx (SImode);\n   operands[6] = gen_reg_rtx (SImode);\n+  operands[7] = copy_to_mode_reg (SImode, XEXP (operands[0], 0));\n+  operands[8] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+\n+  operands[0] = change_address (operands[0], VOIDmode, operands[7]);\n+  operands[1] = change_address (operands[1], VOIDmode, operands[8]);\n }\")\n \n (define_insn \"\"\n@@ -1525,8 +1527,7 @@\n   \"*\n {\n   CC_STATUS_PARTIAL_INIT;\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t (INTVAL (operands[2]) << INTVAL (operands[1])));\n+  operands[2] = GEN_INT ((INTVAL (operands[2]) << INTVAL (operands[1])));\n   return \\\"and %2,%0,%?r0\\\";\n }\")\n \n@@ -1541,8 +1542,7 @@\n   \"*\n {\n   CC_STATUS_PARTIAL_INIT;\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t (INTVAL (operands[2]) << INTVAL (operands[1])));\n+  operands[2] = GEN_INT ((INTVAL (operands[2]) << INTVAL (operands[1])));\n   return \\\"and %2,%0,%?r0\\\";\n }\")\n \f\n@@ -1679,7 +1679,7 @@\n   CC_STATUS_PARTIAL_INIT;\n   if (REG_P (operands[2]))\n     return \\\"subu %1,%2,%0\\\";\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[2]));\n+  operands[2] = GEN_INT (- INTVAL (operands[2]));\n   return \\\"addu %2,%1,%0\\\";\n }\")\n \n@@ -1766,16 +1766,14 @@\n     return \\\"and %2,%1,%0\\\";\n   if ((INTVAL (operands[2]) & 0xffff) == 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t     (unsigned) INTVAL (operands[2]) >> 16);\n+      operands[2] = GEN_INT ((unsigned) INTVAL (operands[2]) >> 16);\n       return \\\"andh %2,%1,%0\\\";\n     }\n   xop[0] = operands[0];\n   xop[1] = operands[1];\n-  xop[2] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]) & 0xffff);\n+  xop[2] = GEN_INT (~INTVAL (operands[2]) & 0xffff);\n   output_asm_insn (\\\"andnot %2,%1,%0\\\", xop);\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t ~(unsigned) INTVAL (operands[2]) >> 16);\n+  operands[2] = GEN_INT (~(unsigned) INTVAL (operands[2]) >> 16);\n   return \\\"andnoth %2,%0,%0\\\";\n }\")\n \n@@ -1793,16 +1791,14 @@\n     return \\\"andnot %1,%2,%0\\\";\n   if ((INTVAL (operands[1]) & 0xffff) == 0)\n     {\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t     (unsigned) INTVAL (operands[1]) >> 16);\n+      operands[1] = GEN_INT ((unsigned) INTVAL (operands[1]) >> 16);\n       return \\\"andnoth %1,%2,%0\\\";\n     }\n   xop[0] = operands[0];\n-  xop[1] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[1]) & 0xffff));\n+  xop[1] = GEN_INT ((INTVAL (operands[1]) & 0xffff));\n   xop[2] = operands[2];\n   output_asm_insn (\\\"andnot %1,%2,%0\\\", xop);\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t (unsigned) INTVAL (operands[1]) >> 16);\n+  operands[1] = GEN_INT ((unsigned) INTVAL (operands[1]) >> 16);\n   return \\\"andnoth %1,%0,%0\\\";\n }\")\n \n@@ -1820,16 +1816,14 @@\n     return \\\"or %2,%1,%0\\\";\n   if ((INTVAL (operands[2]) & 0xffff) == 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t     (unsigned) INTVAL (operands[2]) >> 16);\n+      operands[2] = GEN_INT ((unsigned) INTVAL (operands[2]) >> 16);\n       return \\\"orh %2,%1,%0\\\";\n     }\n   xop[0] = operands[0];\n   xop[1] = operands[1];\n-  xop[2] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[2]) & 0xffff));\n+  xop[2] = GEN_INT ((INTVAL (operands[2]) & 0xffff));\n   output_asm_insn (\\\"or %2,%1,%0\\\", xop);\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t (unsigned) INTVAL (operands[2]) >> 16);\n+  operands[2] = GEN_INT ((unsigned) INTVAL (operands[2]) >> 16);\n   return \\\"orh %2,%0,%0\\\";\n }\")\n \n@@ -1847,16 +1841,14 @@\n     return \\\"xor %2,%1,%0\\\";\n   if ((INTVAL (operands[2]) & 0xffff) == 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t     (unsigned) INTVAL (operands[2]) >> 16);\n+      operands[2] = GEN_INT ((unsigned) INTVAL (operands[2]) >> 16);\n       return \\\"xorh %2,%1,%0\\\";\n     }\n   xop[0] = operands[0];\n   xop[1] = operands[1];\n-  xop[2] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[2]) & 0xffff));\n+  xop[2] = GEN_INT ((INTVAL (operands[2]) & 0xffff));\n   output_asm_insn (\\\"xor %2,%1,%0\\\", xop);\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t (unsigned) INTVAL (operands[2]) >> 16);\n+  operands[2] = GEN_INT ((unsigned) INTVAL (operands[2]) >> 16);\n   return \\\"xorh %2,%0,%0\\\";\n }\")\n "}, {"sha": "32903afbaf0e26253315e60e3c114c1411d0fd33", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on intel 80960.\n-   Copyright (C) 1992, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Steven McGeady, Intel Corp.\n    Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n    Converted to GCC 2.0 by Jim Wilson and Michael Tiemann, Cygnus Support.\n@@ -21,9 +21,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <stdio.h>\n-\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -36,7 +35,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"insn-codes.h\"\n-#include \"assert.h\"\n #include \"expr.h\"\n #include \"except.h\"\n #include \"function.h\"\n@@ -825,7 +823,7 @@ i960_output_ldconst (dst, src)\n \n       output_asm_insn (\"# ldconst\t%1,%0\",operands);\n       operands[0] = gen_rtx (REG, SImode, REGNO (dst));\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, value);\n+      operands[1] = GEN_INT (value);\n       output_asm_insn (i960_output_ldconst (operands[0], operands[1]),\n \t\t      operands);\n       return \"\";\n@@ -896,7 +894,7 @@ i960_output_ldconst (dst, src)\n \t{\n \t  if (i960_last_insn_type == I_TYPE_REG && TARGET_C_SERIES)\n \t    return \"lda\t%1,%0\";\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, rsrc1 - 31);\n+\t  operands[1] = GEN_INT (rsrc1 - 31);\n \t  output_asm_insn (\"addo\\t31,%1,%0\\t# ldconst %3,%0\", operands);\n \t  return \"\";\n \t}\n@@ -907,15 +905,15 @@ i960_output_ldconst (dst, src)\n       if (rsrc1 >= -31)\n \t{\n \t  /* return 'sub -(%1),0,%0' */\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, - rsrc1);\n+\t  operands[1] = GEN_INT (- rsrc1);\n \t  output_asm_insn (\"subo\\t%1,0,%0\\t# ldconst %3,%0\", operands);\n \t  return \"\";\n \t}\n       \n       /* ldconst\t-32\t\t->\tnot\t31,X  */\n       if (rsrc1 == -32)\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, ~rsrc1);\n+\t  operands[1] = GEN_INT (~rsrc1);\n \t  output_asm_insn (\"not\\t%1,%0\t# ldconst %3,%0\", operands);\n \t  return \"\";\n \t}\n@@ -924,7 +922,7 @@ i960_output_ldconst (dst, src)\n   /* If const is a single bit.  */\n   if (bitpos (rsrc1) >= 0)\n     {\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, bitpos (rsrc1));\n+      operands[1] = GEN_INT (bitpos (rsrc1));\n       output_asm_insn (\"setbit\\t%1,0,%0\\t# ldconst %3,%0\", operands);\n       return \"\";\n     }\n@@ -937,8 +935,8 @@ i960_output_ldconst (dst, src)\n       if (bitstr (rsrc1, &s, &e) < 6)\n \t{\n \t  rsrc2 = ((unsigned int) rsrc1) >> s;\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, rsrc2);\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, s);\n+\t  operands[1] = GEN_INT (rsrc2);\n+\t  operands[2] = GEN_INT (s);\n \t  output_asm_insn (\"shlo\\t%2,%1,%0\\t# ldconst %3,%0\", operands);\n \t  return \"\";\n \t}\n@@ -2242,7 +2240,8 @@ i960_arg_size_and_align (mode, type, size_out, align_out)\n   else if (mode == VOIDmode)\n     {\n       /* End of parm list.  */\n-      assert (type != 0 && TYPE_MODE (type) == VOIDmode);\n+      if (type == 0 || TYPE_MODE (type) != VOIDmode)\n+\tabort ();\n       size = 1;\n     }\n   else"}, {"sha": "ed07e9a485fc4a3f7fbda58551436f5f7484a07f", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1473,11 +1473,11 @@ extern struct rtx_def *gen_compare_reg ();\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x8C203000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x8C183000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x84212000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x8C203000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x8C183000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x84212000));\t\\\n }\n \n /* Length in units of the trampoline for entering a nested function.  */"}, {"sha": "55b6ebf511a8f6b8db40d30dcc4aca74eb59faa1", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1179,7 +1179,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+      rtx shift_16 = GEN_INT (16);\n       int op1_subreg_word = 0;\n \n       if (GET_CODE (operand1) == SUBREG)\n@@ -1213,7 +1213,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+      rtx shift_24 = GEN_INT (24);\n       int op1_subreg_word = 0;\n \n       if (GET_CODE (operand1) == SUBREG)\n@@ -1248,7 +1248,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+      rtx shift_24 = GEN_INT (24);\n       int op0_subreg_word = 0;\n       int op1_subreg_word = 0;\n \n@@ -1292,7 +1292,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+      rtx shift_16 = GEN_INT (16);\n       int op1_subreg_word = 0;\n \n       if (GET_CODE (operand1) == SUBREG)\n@@ -1331,7 +1331,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+      rtx shift_24 = GEN_INT (24);\n       int op1_subreg_word = 0;\n \n       if (GET_CODE (operand1) == SUBREG)\n@@ -1366,7 +1366,7 @@\n \t  && GET_CODE (XEXP (operand1, 0)) == REG))\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+      rtx shift_24 = GEN_INT (24);\n       int op0_subreg_word = 0;\n       int op1_subreg_word = 0;\n \n@@ -1620,7 +1620,7 @@\n ;;                 (match_operand:SI 2 \"power2_operand\" \"nI\")))]\n ;;   \"\"\n ;;   \"*{\n-;; \toperands[2] = gen_rtx(CONST_INT, VOIDmode,bitpos (INTVAL (operands[2])));\n+;; \toperands[2] = GEN_INT (bitpos (INTVAL (operands[2])));\n ;; \treturn \\\"shrdi\t%2,%1,%0\\\";\n ;;   }\"\n \n@@ -1682,8 +1682,7 @@\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (~INTVAL (operands[2])));\n+  operands[2] = GEN_INT (bitpos (~INTVAL (operands[2])));\n   return \\\"clrbit\t%2,%1,%0\\\";\n }\")\n \n@@ -1734,8 +1733,7 @@\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (INTVAL (operands[2])));\n+  operands[2] = GEN_INT (bitpos (INTVAL (operands[2])));\n   return \\\"setbit\t%2,%1,%0\\\";\n }\")\n \n@@ -1786,8 +1784,7 @@\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (INTVAL (operands[2])));\n+  operands[2] = GEN_INT (bitpos (INTVAL (operands[2])));\n   return \\\"notbit\t%2,%1,%0\\\";\n }\")\n "}, {"sha": "314f3ae4981c592616dd0226ef057c4f7624c2ea", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -598,7 +598,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  rtx shift_24 = GEN_INT (24);\n   int op1_subword = 0;\n   int op0_subword = 0;\n \n@@ -635,7 +635,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  rtx shift_24 = GEN_INT (24);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -665,7 +665,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+  rtx shift_16 = GEN_INT (16);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)"}, {"sha": "3a9f3310eecbfa9fb8e164a1f9025c5362197b69", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -4519,7 +4519,7 @@\n     return \\\"add%.l %1,%1\\;addx%.l %0,%0\\;add%.l %1,%1\\;addx%.l %0,%0\\;add%.l %1,%1\\;addx%.l %0,%0\\\";\n   else /* 32 < INTVAL (operands[2]) <= 63 */\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) - 32);\n       output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"asl%.l %2,%1\\\" :\n \t\t\t\\\"moveq %2,%0\\;asl%.l %0,%1\\\", operands);\n       return \\\"mov%.l %1,%0\\;moveq %#0,%1\\\";\n@@ -4726,7 +4726,7 @@\n     return \\\"asr%.l %#1,%0\\;roxr%.l %#1,%1\\;asr%.l %#1,%0\\;roxr%.l %#1,%1\\;asr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n   else /* 32 < INTVAL (operands[2]) <= 63 */\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) - 32);\n       output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"asr%.l %2,%0\\\" :\n \t\t\t\\\"moveq %2,%1\\;asr%.l %1,%0\\\", operands);\n       output_asm_insn (\\\"mov%.l %0,%1\\;smi %0\\\", operands);\n@@ -4894,7 +4894,7 @@\n     return \\\"lsr%.l %#1,%0\\;roxr%.l %#1,%1\\;lsr%.l %#1,%0\\;roxr%.l %#1,%1\\;lsr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n   else /* 32 < INTVAL (operands[2]) <= 63 */\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) - 32);\n       output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"lsr%.l %2,%0\\\" :\n \t\t\t\\\"moveq %2,%1\\;lsr%.l %1,%0\\\", operands);\n       return \\\"mov%.l %0,%1\\;moveq %#0,%0\\\";"}, {"sha": "16cc1c904dec4f10b0d42629383c3e9327e4d779", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -321,11 +321,11 @@ int switch_table_difference_label_flag;\n #undef TRAMPOLINE_TEMPLATE\n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x227a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2f3a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4e75));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x227a));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (8));\t\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x2f3a));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (8));\t\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x4e75));\t\t\t\t\\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n }"}, {"sha": "b1250e5e61b74a4cfce44385c62662055af41c3a", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -596,8 +596,7 @@ block_move_loop (dest, dest_mem, src, src_mem, size, align)\n \t   GET_MODE_NAME (mode), MOVSTR_LOOP, units * align);\n   entry_name = get_identifier (entry);\n \n-  offset_rtx = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\tMOVSTR_LOOP + (1 - units) * align);\n+  offset_rtx = GEN_INT (MOVSTR_LOOP + (1 - units) * align);\n \n   value_rtx = gen_rtx (MEM, MEM_IN_STRUCT_P (src_mem) ? mode : BLKmode,\n \t\t       gen_rtx (PLUS, Pmode,\n@@ -611,7 +610,7 @@ block_move_loop (dest, dest_mem, src, src_mem, size, align)\n \t     (gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (entry_name)),\n \t      dest, src, offset_rtx, value_rtx,\n \t      gen_rtx (REG, mode, ((units & 1) ? 4 : 5)),\n-\t      gen_rtx (CONST_INT, VOIDmode, count)));\n+\t      GEN_INT (count)));\n \n   if (remainder)\n     block_move_sequence (gen_rtx (REG, Pmode, 2), dest_mem,\n@@ -654,7 +653,7 @@ block_move_no_loop (dest, dest_mem, src, src_mem, size, align)\n \t   GET_MODE_NAME (mode), most, size - remainder);\n   entry_name = get_identifier (entry);\n \n-  offset_rtx = gen_rtx (CONST_INT, VOIDmode, most - (size - remainder));\n+  offset_rtx = GEN_INT (most - (size - remainder));\n \n   value_rtx = gen_rtx (MEM, MEM_IN_STRUCT_P (src_mem) ? mode : BLKmode,\n \t\t       gen_rtx (PLUS, Pmode,\n@@ -732,7 +731,7 @@ block_move_sequence (dest, dest_mem, src, src_mem, size, align, offset)\n \t  srcp = gen_rtx (MEM,\n \t\t\t  MEM_IN_STRUCT_P (src_mem) ? mode[next] : BLKmode,\n \t\t\t  gen_rtx (PLUS, Pmode, src,\n-\t\t\t\t   gen_rtx (CONST_INT, SImode, offset_ld)));\n+\t\t\t\t   GEN_INT (offset_ld)));\n \t  RTX_UNCHANGING_P (srcp) = RTX_UNCHANGING_P (src_mem);\n \t  MEM_VOLATILE_P (srcp) = MEM_VOLATILE_P (src_mem);\n \t  MEM_IN_STRUCT_P (srcp) = MEM_IN_STRUCT_P (src_mem);\n@@ -747,7 +746,7 @@ block_move_sequence (dest, dest_mem, src, src_mem, size, align, offset)\n \t  dstp = gen_rtx (MEM,\n \t\t\t  MEM_IN_STRUCT_P (dest_mem) ? mode[phase] : BLKmode,\n \t\t\t  gen_rtx (PLUS, Pmode, dest,\n-\t\t\t\t   gen_rtx (CONST_INT, SImode, offset_st)));\n+\t\t\t\t   GEN_INT (offset_st)));\n \t  RTX_UNCHANGING_P (dstp) = RTX_UNCHANGING_P (dest_mem);\n \t  MEM_VOLATILE_P (dstp) = MEM_VOLATILE_P (dest_mem);\n \t  MEM_IN_STRUCT_P (dstp) = MEM_IN_STRUCT_P (dest_mem);\n@@ -2102,7 +2101,7 @@ emit_add (dstreg, srcreg, amount)\n      rtx srcreg;\n      int amount;\n {\n-  rtx incr = gen_rtx (CONST_INT, VOIDmode, abs (amount));\n+  rtx incr = GEN_INT (abs (amount));\n   if (! ADD_INTVAL (amount))\n     {\n       rtx temp = gen_rtx (REG, SImode, TEMP_REGNUM);\n@@ -2229,7 +2228,7 @@ emit_ldst (store_p, regno, mode, offset)\n     {\n       /* offset is too large for immediate index must use register */\n \n-      rtx disp = gen_rtx (CONST_INT, VOIDmode, offset);\n+      rtx disp = GEN_INT (offset);\n       rtx temp = gen_rtx (REG, SImode, TEMP_REGNUM);\n       rtx regi = gen_rtx (PLUS, SImode, stack_pointer_rtx, temp);\n       emit_move_insn (temp, disp);\n@@ -2599,7 +2598,7 @@ m88k_builtin_saveregs (arglist)\n     {\n       fixed = (XINT (current_function_arg_offset_rtx, 0)\n \t       + argadj) / UNITS_PER_WORD;\n-      argsize = gen_rtx (CONST_INT, VOIDmode, fixed);\n+      argsize = GEN_INT (fixed);\n     }\n   else\n     {\n@@ -2728,7 +2727,7 @@ emit_bcnd (op, label)\n \t{\n \t  if (SMALL_INTVAL (-value))\n \t    emit_insn (gen_addsi3 (zero, reg,\n-\t\t\t\t   gen_rtx (CONST_INT, VOIDmode, -value)));\n+\t\t\t\t   GEN_INT (-value)));\n \t  else\n \t    emit_insn (gen_xorsi3 (zero, reg, constant));\n "}, {"sha": "54ec648677344325e47aa7e2d97107d8f64f1398", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 34, "deletions": 51, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -367,8 +367,7 @@\n   \"mak_mask_p (INTVAL (operands[3]) >> INTVAL (operands[2]))\"\n   \"*\n {\n-  operands[4] = gen_rtx (CONST_INT, SImode,\n-\t\t\t exact_log2 (1 + (INTVAL (operands[3])\n+  operands[4] = GEN_INT (exact_log2 (1 + (INTVAL (operands[3])\n \t\t\t\t\t  >> INTVAL(operands[2]))));\n   return \\\"mak %0,%1,%4<%2>\\\";\n }\"\n@@ -386,8 +385,7 @@\n   \"*\n {\n   operands[2]\n-    = gen_rtx (CONST_INT, SImode,\n-\t       ((1 << INTVAL (operands[2])) - 1) << INTVAL (operands[4]));\n+    = GEN_INT (((1 << INTVAL (operands[2])) - 1) << INTVAL (operands[4]));\n   return output_and (operands);\n }\"\n   [(set_attr \"type\" \"marith\")]) ; arith,bit,marith.  length is 1 or 2.\n@@ -448,8 +446,7 @@\n        int cv2 = condition_value (operands[3]);\n \n        operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       ((cv2 & ~1) - (cv1 & ~1)) & 0x1f));\n+\t\t\t      GEN_INT (((cv2 & ~1) - (cv1 & ~1)) & 0x1f));\n        /* Reverse the condition if needed.  */\n        if ((cv1 & 1) != (cv2 & 1))\n \t operands[4] = gen_rtx (NOT, CCmode, operands[4]);\n@@ -482,8 +479,7 @@\n        int cv2 = condition_value (operands[3]);\n \n        operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       (cv2 - cv1) & 0x1f));\n+\t\t\t      GEN_INT ((cv2 - cv1) & 0x1f));\n      }\")\n \n (define_split\n@@ -514,8 +510,7 @@\n        int cv2 = condition_value (operands[3]);\n \n        operands[2] = gen_rtx (ROTATE, CCmode, operands[2],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       ((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n+\t\t\t      GEN_INT (((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n      }\")\n \n (define_split\n@@ -603,8 +598,7 @@\n        int cv1 = condition_value (operands[1]);\n        int cv2 = condition_value (operands[3]);\n        operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       ((cv2 & ~1) - (cv1 & ~1)) & 0x1f));\n+\t\t\t      GEN_INT (((cv2 & ~1) - (cv1 & ~1)) & 0x1f));\n        /* Reverse the condition if needed.  */\n        if ((cv1 & 1) != (cv2 & 1))\n \t operands[4] = gen_rtx (NOT, CCmode, operands[4]);\n@@ -636,8 +630,7 @@\n        int cv1 = condition_value (operands[1]);\n        int cv2 = condition_value (operands[3]);\n        operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       (cv2 - cv1) & 0x1f));\n+\t\t\t      GEN_INT ((cv2 - cv1) & 0x1f));\n      }\")\n \n (define_split\n@@ -667,8 +660,7 @@\n        int cv1 = condition_value (operands[1]);\n        int cv2 = condition_value (operands[3]);\n        operands[2] = gen_rtx (ROTATE, CCmode, operands[2],\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t       ((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n+\t\t\t      GEN_INT (((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n      }\")\n \n (define_split\n@@ -2892,7 +2884,7 @@\n       if (INTVAL (op1) < 0)\n \t{\n \t  neg = TRUE;\n-\t  op1 = gen_rtx (CONST_INT, VOIDmode, -INTVAL (op1));\n+\t  op1 = GEN_INT (-INTVAL (op1));\n \t}\n       op1 = force_reg (SImode, op1);\n \n@@ -2924,7 +2916,7 @@\n       if (INTVAL (op2) < 0)\n \t{\n \t  neg = TRUE;\n-\t  op2 = gen_rtx (CONST_INT, VOIDmode, -INTVAL (op2));\n+\t  op2 = GEN_INT (-INTVAL (op2));\n \t}\n       else if (! SMALL_INT (operands[2]))\n \top2 = force_reg (SImode, op2);\n@@ -3204,10 +3196,9 @@\n \t     || integer_ok_for_set (~value)))\n \t{\n \t  emit_insn (gen_andsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t\t  value | 0xffff)));\n+\t\t\t\t GEN_INT (value | 0xffff)));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, value | 0xffff0000);\n+\t  operands[2] = GEN_INT (value | 0xffff0000);\n \t}\n     }\n }\")\n@@ -3276,10 +3267,9 @@\n \t     || integer_ok_for_set (value)))\n \t{\n \t  emit_insn (gen_iorsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t\t  value & 0xffff0000)));\n+\t\t\t\t GEN_INT (value & 0xffff0000)));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, value & 0xffff);\n+\t  operands[2] = GEN_INT (value & 0xffff);\n \t}\n     }\n }\")\n@@ -3351,10 +3341,9 @@\n \t     || (value & 0xffff) == 0))\n \t{\n \t  emit_insn (gen_xorsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t\t  value & 0xffff0000)));\n+\t\t\t\t GEN_INT (value & 0xffff0000)));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, value & 0xffff);\n+\t  operands[2] = GEN_INT (value & 0xffff);\n \t}\n     }\n }\")\n@@ -3487,20 +3476,20 @@\n \t{\n \t  if (TARGET_TRAP_LARGE_SHIFT)\n \t    emit_insn (gen_tbnd (force_reg (SImode, operands[2]),\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 31)));\n+\t\t\t\t GEN_INT (31)));\n \t  else\n \t    emit_move_insn (operands[0], const0_rtx);\n \t  DONE;\n \t}\n     }\n \n   else if (TARGET_TRAP_LARGE_SHIFT)\n-    emit_insn (gen_tbnd (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+    emit_insn (gen_tbnd (operands[2], GEN_INT (31)));\n \n   else if (TARGET_HANDLE_LARGE_SHIFT)\n     {\n       rtx reg = gen_reg_rtx (SImode);\n-      emit_insn (gen_cmpsi (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+      emit_insn (gen_cmpsi (operands[2], GEN_INT (31)));\n       emit_insn (gen_sleu (reg));\n       emit_insn (gen_andsi3 (reg, operands[1], reg));\n       operands[1] = reg;\n@@ -3531,21 +3520,21 @@\n \t  if (TARGET_TRAP_LARGE_SHIFT)\n \t    {\n \t      emit_insn (gen_tbnd (force_reg (SImode, operands[2]),\n-\t\t\t\t   gen_rtx (CONST_INT, VOIDmode, 31)));\n+\t\t\t\t   GEN_INT (31)));\n \t      DONE;\n \t    }\n \t  else\n-\t    operands[2] = gen_rtx (CONST_INT, VOIDmode, 31);\n+\t    operands[2] = GEN_INT (31);\n \t}\n     }\n \n   else if (TARGET_TRAP_LARGE_SHIFT)\n-    emit_insn (gen_tbnd (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+    emit_insn (gen_tbnd (operands[2], GEN_INT (31)));\n \n   else if (TARGET_HANDLE_LARGE_SHIFT)\n     {\n       rtx reg = gen_reg_rtx (SImode);\n-      emit_insn (gen_cmpsi (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+      emit_insn (gen_cmpsi (operands[2], GEN_INT (31)));\n       emit_insn (gen_sgtu (reg));\n       emit_insn (gen_iorsi3 (reg, operands[2], reg));\n       operands[2] = reg;\n@@ -3578,20 +3567,20 @@\n \t{\n \t  if (TARGET_TRAP_LARGE_SHIFT)\n \t    emit_insn (gen_tbnd (force_reg (SImode, operands[2]),\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode, 31)));\n+\t\t\t\t GEN_INT (31)));\n \t  else\n \t    emit_move_insn (operands[0], const0_rtx);\n \t  DONE;\n \t}\n     }\n \n   else if (TARGET_TRAP_LARGE_SHIFT)\n-    emit_insn (gen_tbnd (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+    emit_insn (gen_tbnd (operands[2], GEN_INT (31)));\n \n   else if (TARGET_HANDLE_LARGE_SHIFT)\n     {\n       rtx reg = gen_reg_rtx (SImode);\n-      emit_insn (gen_cmpsi (operands[2], gen_rtx (CONST_INT, VOIDmode, 31)));\n+      emit_insn (gen_cmpsi (operands[2], GEN_INT (31)));\n       emit_insn (gen_sleu (reg));\n       emit_insn (gen_andsi3 (reg, operands[1], reg));\n       operands[1] = reg;\n@@ -3619,8 +3608,7 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n       && (unsigned) INTVAL (operands[2]) >= 32)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t   (32 - INTVAL (operands[2])) % 32);\n+    operands[2] = GEN_INT ((32 - INTVAL (operands[2])) % 32);\n   else\n     {\n       rtx op = gen_reg_rtx (SImode);\n@@ -3674,8 +3662,7 @@\n   \"\"\n   \"*\n {\n-  operands[4] = gen_rtx (CONST_INT, SImode,\n-\t\t\t (32 - INTVAL (operands[2])) - INTVAL (operands[3]));\n+  operands[4] = GEN_INT ((32 - INTVAL (operands[2])) - INTVAL (operands[3]));\n   return \\\"ext %0,%1,%2<%4>\\\";  /* <(32-%2-%3)> */\n }\"\n   [(set_attr \"type\" \"bit\")])\n@@ -3696,8 +3683,7 @@\n   \"\"\n   \"*\n {\n-  operands[4] = gen_rtx (CONST_INT, SImode,\n-\t\t\t (32 - INTVAL (operands[2])) - INTVAL (operands[3]));\n+  operands[4] = GEN_INT ((32 - INTVAL (operands[2])) - INTVAL (operands[3]));\n   return \\\"extu %0,%1,%2<%4>\\\";  /* <(32-%2-%3)> */\n }\"\n   [(set_attr \"type\" \"bit\")])\n@@ -3710,8 +3696,7 @@\n   \"\"\n   \"*\n {\n-  operands[3] = gen_rtx (CONST_INT, SImode,\n-\t\t\t (32 - INTVAL (operands[1])) - INTVAL (operands[2]));\n+  operands[3] = GEN_INT ((32 - INTVAL (operands[1])) - INTVAL (operands[2]));\n   return \\\"clr %0,%0,%1<%3>\\\";  /* <(32-%1-%2)> */\n }\"\n   [(set_attr \"type\" \"bit\")])\n@@ -3724,8 +3709,7 @@\n   \"\"\n   \"*\n {\n-  operands[3] = gen_rtx (CONST_INT, SImode,\n-\t\t\t (32 - INTVAL (operands[1])) - INTVAL (operands[2]));\n+  operands[3] = GEN_INT ((32 - INTVAL (operands[1])) - INTVAL (operands[2]));\n   return \\\"set %0,%0,%1<%3>\\\";  /* <(32-%1-%2)> */\n }\"\n   [(set_attr \"type\" \"bit\")])\n@@ -3743,11 +3727,10 @@\n   if (INTVAL (operands[1]) < 32)\n     value &= (1 << INTVAL (operands[1])) - 1;\n \n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t 32 - (INTVAL(operands[1]) + INTVAL(operands[2])));\n+  operands[2] = GEN_INT (32 - (INTVAL(operands[1]) + INTVAL(operands[2])));\n \n   value <<= INTVAL (operands[2]);\n-  operands[3] = gen_rtx (CONST_INT, VOIDmode, value);\n+  operands[3] = GEN_INT (value);\n \n   if (SMALL_INTVAL (value))\n     return \\\"clr %0,%0,%1<%2>\\;or %0,%0,%3\\\";\n@@ -3828,7 +3811,7 @@\n   \"\n {\n   register rtx index_diff = gen_reg_rtx (SImode);\n-  register rtx low = gen_rtx (CONST_INT, VOIDmode, -INTVAL (operands[1]));\n+  register rtx low = GEN_INT (-INTVAL (operands[1]));\n   register rtx label = gen_rtx (LABEL_REF, VOIDmode, operands[3]);\n   register rtx base;\n "}, {"sha": "1c759aed0600013ebca359e64fe68e9874c0fd40", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the NS32000.\n-   Copyright (C) 1988, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -19,8 +19,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Some output-actions in ns32k.md need these.  */\n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -208,7 +208,7 @@ gen_indexed_expr (base, index, scale)\n   if (GET_CODE (base) != REG && GET_CODE (base) != CONST_INT)\n     base = gen_rtx (MEM, SImode, base);\n   addr = gen_rtx (MULT, SImode, index,\n-\t\t  gen_rtx (CONST_INT, VOIDmode, 1 << INTVAL (scale)));\n+\t\t  GEN_INT (1 << INTVAL (scale)));\n   addr = gen_rtx (PLUS, SImode, base, addr);\n   return addr;\n }"}, {"sha": "5fec86dcd434ea08db1f3b93a187bb48faba95a3", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -125,7 +125,7 @@\n       {\n \tcc_status.flags |= CC_REVERSED;\n \tif (INTVAL (operands[1]) > 7)\n-\t  operands[1] = gen_rtx(CONST_INT, VOIDmode, i);\n+\t  operands[1] = GEN_INT (i);\n \treturn \\\"cmpqw %1,%0\\\";\n       }\n     }\n@@ -136,7 +136,7 @@\n       if (i <= 7 && i >= -8)\n \t{\n \t  if (INTVAL (operands[0]) > 7)\n-\t    operands[0] = gen_rtx(CONST_INT, VOIDmode, i);\n+\t    operands[0] = GEN_INT (i);\n \t  return \\\"cmpqw %0,%1\\\";\n \t}\n     }\n@@ -157,7 +157,7 @@\n \t{\n \t  cc_status.flags |= CC_REVERSED;\n \t  if (INTVAL (operands[1]) > 7)\n-\t    operands[1] = gen_rtx(CONST_INT, VOIDmode, i);\n+\t    operands[1] = GEN_INT (i);\n \t  return \\\"cmpqb %1,%0\\\";\n \t}\n     }\n@@ -168,7 +168,7 @@\n       if (i <= 7 && i >= -8)\n \t{\n \t  if (INTVAL (operands[0]) > 7)\n-\t    operands[0] = gen_rtx(CONST_INT, VOIDmode, i);\n+\t    operands[0] = GEN_INT (i);\n \t  return \\\"cmpqb %0,%1\\\";\n \t}\n     }\n@@ -259,7 +259,7 @@\n       convrt.f = convrt.d;\n \n       /* Is there a better machine-independent way to to this?  */\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, convrt.i[0]);\n+      operands[1] = GEN_INT (convrt.i[0]);\n       return \\\"movd %1,%0\\\";\n     }\n #endif\n@@ -339,7 +339,7 @@\n     return \\\"lprd fp,%1\\\";\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     operands[1]\n-      = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[1]));\n+      = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       int i = INTVAL (operands[1]);\n@@ -400,7 +400,7 @@\n       rtx xoperands[3];\n       xoperands[0] = operands[0];\n       xoperands[1] = XEXP (operands[1], 0);\n-      xoperands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (XEXP (operands[1], 1)) >> 1);\n+      xoperands[2] = GEN_INT (INTVAL (XEXP (operands[1], 1)) >> 1);\n       return output_shift_insn (xoperands);\n     }\n   return \\\"addr %a1,%0\\\";\n@@ -419,7 +419,7 @@\n \t{\n \t  if (INTVAL (operands[1]) > 7)\n \t    operands[1] =\n-\t      gen_rtx (CONST_INT, VOIDmode, i);\n+\t      GEN_INT (i);\n \t  return \\\"movqw %1,%0\\\";\n \t}\n \treturn \\\"movw %1,%0\\\";\n@@ -465,7 +465,7 @@\n \t{\n \t  if (INTVAL (operands[1]) > 7)\n \t    operands[1] =\n-\t      gen_rtx (CONST_INT, VOIDmode, char_val);\n+\t      GEN_INT (char_val);\n \t  return \\\"movqb %1,%0\\\";\n \t}\n \treturn \\\"movb %1,%0\\\";\n@@ -543,7 +543,7 @@\n #ifdef UTEK_ASM\n   if (GET_CODE (operands[2]) == CONST_INT && (INTVAL (operands[2]) & 0x3) == 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) >> 2);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) >> 2);\n       if ((unsigned) INTVAL (operands[2]) <= 7)\n \treturn \\\"movqd %2,r0\\;movsd $0\\\";\n       else \n@@ -556,7 +556,7 @@\n #else\n   if (GET_CODE (operands[2]) == CONST_INT && (INTVAL (operands[2]) & 0x3) == 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) >> 2);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) >> 2);\n       if ((unsigned) INTVAL (operands[2]) <= 7)\n \treturn \\\"movqd %2,r0\\;movsd\\\";\n       else \n@@ -1314,8 +1314,7 @@\n \t    return \\\"movqb %$0,%0\\\";\n \t  else\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     INTVAL (operands[2]) & 0xff);\n+\t      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n \t      return \\\"andb %2,%0\\\";\n \t    }\n \t}\n@@ -1325,8 +1324,7 @@\n \t    return \\\"movqw %$0,%0\\\";\n \t  else\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     INTVAL (operands[2]) & 0xffff);\n+\t      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n \t      return \\\"andw %2,%0\\\";\n \t    }\n \t}\n@@ -1348,8 +1346,7 @@\n \treturn \\\"movqb %$0,%0\\\";\n       else\n \t{\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t INTVAL (operands[2]) & 0xff);\n+\t  operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n \t  return \\\"andb %2,%0\\\";\n \t}\n     }\n@@ -1865,7 +1862,7 @@\n       rtx xoperands[3];\n       xoperands[0] = operands[0];\n       xoperands[1] = XEXP (operands[1], 0);\n-      xoperands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (XEXP (operands[1], 1)) >> 1);\n+      xoperands[2] = GEN_INT (INTVAL (XEXP (operands[1], 1)) >> 1);\n       return output_shift_insn (xoperands);\n     }\n   return \\\"addr %a1,%0\\\";\n@@ -2040,7 +2037,7 @@\n \t{\n \t  operands[0] = adj_offsettable_operand (operands[0],\n \t\t\t\t\t        INTVAL (operands[2]) / 8);\n-          operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) % 8);\n+          operands[2] = GEN_INT (INTVAL (operands[2]) % 8);\n \t}\n       if (INTVAL (operands[1]) <= 8)\n         return \\\"inssb %3,%0,%2,%1\\\";"}, {"sha": "c040c457222aa043120d8a1cb2a05a101570b55e", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for gcc2 for pdp11.\n-   Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GNU CC.\n@@ -19,10 +19,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#ifndef FILE\n-#include <stdio.h>\n-#endif\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -414,10 +412,8 @@ output_move_double (operands)\n \t    /* now the mess begins, high word is in lower word??? \n \n \t       that's what ashc makes me think, but I don't remember :-( */\n-\t    latehalf[1] = gen_rtx(CONST_INT, VOIDmode, \n-\t\t\t\t  INTVAL(operands[1])>>16);\n-\t    operands[1] = gen_rtx(CONST_INT, VOIDmode,\n-\t\t\t\t  INTVAL(operands[1])&0xff);\n+\t    latehalf[1] = GEN_INT (INTVAL(operands[1])>>16);\n+\t    operands[1] = GEN_INT (INTVAL(operands[1])&0xff);\n \t}\n       else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t{\n@@ -635,20 +631,16 @@ output_move_quad (operands)\n \t    abort();\n \t    \n #ifndef HOST_WORDS_BIG_ENDIAN\n-\t  latehalf[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_LOW (operands[1]));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_HIGH (operands[1]));\n+\t  latehalf[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n #else /* HOST_WORDS_BIG_ENDIAN */\n-\t  latehalf[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_HIGH (operands[1]));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_LOW (operands[1]));\n+\t  latehalf[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n #endif /* HOST_WORDS_BIG_ENDIAN */\n \t}\n       else if (GET_CODE(operands[1]) == CONST_INT)\n       {\n-\t  latehalf[1] = gen_rtx (CONST_INT, VOIDmode, 0);\n+\t  latehalf[1] = GEN_INT (0);\n       }\n       else\n \t  abort();"}, {"sha": "e52f77c58b5774e694afb10a2e37796a48d4484b", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1262,9 +1262,9 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n   if (TARGET_SPLIT)\t\t\t\\\n     abort();\t\t\t\t\\\n \t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx(CONST_INT, VOIDmode, 0x9400+STATIC_CHAIN_REGNUM)); \\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x9400+STATIC_CHAIN_REGNUM)); \\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx(CONST_INT, VOIDmode, 0x0058));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT(0x0058));\t\t\t\\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n }\n "}, {"sha": "f93d1ce0aed395dbca2f7f9159b7ef0332f4cac1", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the pdp11 for GNU C compiler\n-;; Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.\n ;; Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n ;; This file is part of GNU CC.\n@@ -48,7 +48,7 @@\n ;; The only thing that remains to be done then is output \n ;; the floats in a way the assembler can handle it (and \n ;; if you're really into it, use a PDP11 float emulation\n-;; libary to do floating point constant folding - but \n+;; library to do floating point constant folding - but \n ;; I guess you'll get reasonable results even when not\n ;; doing this)\n ;; the last thing to do is fix the UPDATE_CC macro to check\n@@ -682,20 +682,26 @@\n ;; let constraints only accept a register ...\n \n (define_expand \"movstrhi\"\n-  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"general_operand\" \"=g,g\"))\n-\t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"g,g\")))\n+  [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"=g,g\")\n+\t\t   (match_operand:BLK 1 \"general_operand\" \"g,g\"))\n \t      (use (match_operand:HI 2 \"arith_operand\" \"n,&mr\"))\n \t      (use (match_operand:HI 3 \"immediate_operand\" \"i,i\"))\n \t      (clobber (match_scratch:HI 4 \"=&r,X\"))\n-\t      (clobber (match_dup 0))\n-\t      (clobber (match_dup 1))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))\n \t      (clobber (match_dup 2))])]\n   \"(TARGET_BCOPY_BUILTIN)\"\n   \"\n {\n-  operands[0] = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n-  operands[1] = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n-  operands[2] = force_not_mem (operands[2]);\n+  operands[0]\n+    = change_address (operands[0], VOIDmode,\n+\t\t      copy_to_mode_reg (Pmode, XEXP (operands[0], 0)));\n+  operands[1]\n+    = change_address (operands[1], VOIDmode,\n+\t\t      copy_to_mode_reg (Pmode, XEXP (operands[1], 0)));\n+\n+  operands[5] = XEXP (operands[0], 0);\n+  operands[6] = XEXP (operands[1], 0);\n }\")\n \n \n@@ -1010,8 +1016,8 @@\n     return \\\"\\\";\n   }\n \n-  lateoperands[2] = gen_rtx(CONST_INT, VOIDmode, (INTVAL(operands[2]) >> 16) & 0xffff);\n-  operands[2] = gen_rtx(CONST_INT, VOIDmode, INTVAL(operands[2]) & 0xffff);\n+  lateoperands[2] = GEN_INT ((INTVAL(operands[2]) >> 16) & 0xffff);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) & 0xffff);\n   \n   if (INTVAL(operands[2]))\n   { \n@@ -1148,7 +1154,7 @@\n {\n   extern rtx expand_unop ();\n   if (GET_CODE (operands[2]) == CONST_INT)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+    operands[2] = GEN_INT (~INTVAL (operands[2]));\n   else\n     operands[2] = expand_unop (SImode, one_cmpl_optab, operands[2], 0, 1);\n }\")\n@@ -1162,7 +1168,7 @@\n {\n   extern rtx expand_unop ();\n   if (GET_CODE (operands[2]) == CONST_INT)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+    operands[2] = GEN_INT (~INTVAL (operands[2]));\n   else\n     operands[2] = expand_unop (HImode, one_cmpl_optab, operands[2], 0, 1);\n }\")\n@@ -1177,8 +1183,7 @@\n   extern rtx expand_unop ();\n   rtx op = operands[2];\n   if (GET_CODE (op) == CONST_INT)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t   ((1 << 8) - 1) & ~INTVAL (op));\n+    operands[2] = GEN_INT (((1 << 8) - 1) & ~INTVAL (op));\n   else\n     operands[2] = expand_unop (QImode, one_cmpl_optab, op, 0, 1);\n }\")\n@@ -1217,8 +1222,8 @@\n     return \\\"\\\";\n   }\n \n-  lateoperands[2] = gen_rtx(CONST_INT, VOIDmode, (INTVAL(operands[2]) >> 16) & 0xffff);\n-  operands[2] = gen_rtx(CONST_INT, VOIDmode, INTVAL(operands[2]) & 0xffff);\n+  lateoperands[2] = GEN_INT ((INTVAL(operands[2]) >> 16) & 0xffff);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) & 0xffff);\n   \n   /* these have different lengths, so we should have \n      different constraints! */\n@@ -1283,8 +1288,8 @@\n     return \\\"\\\";\n   }\n \n-  lateoperands[2] = gen_rtx(CONST_INT, VOIDmode, (INTVAL(operands[2]) >> 16) & 0xffff);\n-  operands[2] = gen_rtx(CONST_INT, VOIDmode, INTVAL(operands[2]) & 0xffff);\n+  lateoperands[2] = GEN_INT ((INTVAL(operands[2]) >> 16) & 0xffff);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) & 0xffff);\n   \n   /* these have different lengths, so we should have \n      different constraints! */\n@@ -1339,8 +1344,8 @@\n     return \\\"\\\";\n   }\n \n-  lateoperands[2] = gen_rtx(CONST_INT, VOIDmode, (INTVAL(operands[2]) >> 16) & 0xffff);\n-  operands[2] = gen_rtx(CONST_INT, VOIDmode, INTVAL(operands[2]) & 0xffff);\n+  lateoperands[2] = GEN_INT ((INTVAL(operands[2]) >> 16) & 0xffff);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) & 0xffff);\n   \n   if (INTVAL(operands[2]))\n     output_asm_insn (\\\"xor %2, %0\\\", operands);"}, {"sha": "9a2e3bc91e8da76062466aadc00755d93bad2207", "filename": "gcc/config/pyr/pyr.c", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Pyramid 90x, 9000, and MIServer Series.\n-   Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -19,8 +19,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Some output-actions in pyr.md need these.  */\n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -256,9 +256,8 @@ extend_const (x, extop, from_mode, to_mode)\n   else\n     val = val & ~((-1) << (GET_MODE_BITSIZE (from_mode)));\n   if (GET_MODE_BITSIZE (to_mode) == HOST_BITS_PER_INT)\n-    return gen_rtx (CONST_INT, VOIDmode, val);\n-  return gen_rtx (CONST_INT, VOIDmode,\n-\t\t  val & ~((-1) << (GET_MODE_BITSIZE (to_mode))));\n+    return GEN_INT (val);\n+  return GEN_INT (val & ~((-1) << (GET_MODE_BITSIZE (to_mode))));\n }\n \n rtx\n@@ -625,16 +624,13 @@ output_move_double (operands)\n \t      || (CONST_DOUBLE_HIGH (const_op) == -1\n \t\t  && CONST_DOUBLE_LOW (const_op) < 0))\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     CONST_DOUBLE_LOW (const_op));\n+\t      operands[1] = GEN_INT (CONST_DOUBLE_LOW (const_op));\n \t      return \"movl %1,%0\";\n \t    }\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_HIGH (const_op));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_HIGH (const_op));\n \t  output_asm_insn (\"movw %1,%0\", operands);\n \t  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_LOW (const_op));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_LOW (const_op));\n \t  return \"movw %1,%0\";\n \t}\n       else\n@@ -646,16 +642,13 @@ output_move_double (operands)\n \t      || (CONST_DOUBLE_LOW (const_op) == -1\n \t\t  && CONST_DOUBLE_HIGH (const_op) < 0))\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     CONST_DOUBLE_HIGH (const_op));\n+\t      operands[1] = GEN_INT (CONST_DOUBLE_HIGH (const_op));\n \t      return \"movl %1,%0\";\n \t    }\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_LOW (const_op));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_LOW (const_op));\n \t  output_asm_insn (\"movw %1,%0\", operands);\n \t  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_HIGH (const_op));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_HIGH (const_op));\n \t  return \"movw %1,%0\";\n \t}\n     }\n@@ -680,7 +673,7 @@ output_shift (pattern, op2, mod)\n \t  cc_status = cc_prev_status;\n \t  return \"\";\n \t}\n-      op2 = gen_rtx (CONST_INT, VOIDmode, cnt);\n+      op2 = GEN_INT (cnt);\n     }\n   return pattern;\n }"}, {"sha": "42d55c0b84be872ead5b926fd684a750985125bb", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -736,10 +736,10 @@ extern void* pyr_function_arg ();\n \tjump $<func>\t\t# S2R\n  */\n #define TRAMPOLINE_TEMPLATE(FILE) \\\n-{ ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2100001C));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x40000000));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000)); }\n+{ ASM_OUTPUT_INT (FILE, GEN_INT (0x2100001C));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x40000000));\t\\\n+  ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000)); }\n \n #define TRAMPOLINE_SIZE\t\t16\n #define TRAMPOLINE_ALIGNMENT\t32"}, {"sha": "c1d440a5ed4a1b690338fa2f5cce8fa8f9cfd979", "filename": "gcc/config/pyr/pyr.md", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fpyr%2Fpyr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -720,8 +720,7 @@\n   \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t      CONST_DOUBLE_LOW (operands[1]));\n+    operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n   return \\\"movl %1,%0\\\";\n }\")\n \n@@ -1097,7 +1096,7 @@\n       int dealloc_size = current_function_pretend_args_size;\n       if (current_function_pops_args)\n         dealloc_size += current_function_args_size;\n-      operands[0] = gen_rtx (CONST_INT, VOIDmode, dealloc_size);\n+      operands[0] = GEN_INT (dealloc_size);\n       return \\\"retd %0\\\";\n     }\n   else\n@@ -1263,10 +1262,8 @@\n     xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n   else\n     {\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[2]));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_HIGH (operands[2]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[2]));\n     }\n   output_asm_insn (\\\"addw %1,%0\\\", xoperands);\n   return \\\"addwc %2,%0\\\";\n@@ -1286,10 +1283,8 @@\n     xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n   else\n     {\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[2]));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_HIGH (operands[2]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[2]));\n     }\n   output_asm_insn (\\\"subw %1,%0\\\", xoperands);\n   return \\\"subwb %2,%0\\\";\n@@ -1309,10 +1304,8 @@\n     xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n   else\n     {\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[2]));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_HIGH (operands[2]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[2]));\n     }\n   output_asm_insn (\\\"orw %1,%0\\\", xoperands);\n   return \\\"orw %2,%0\\\";\n@@ -1332,10 +1325,8 @@\n     xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n   else\n     {\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[2]));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_HIGH (operands[2]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[2]));\n     }\n   output_asm_insn (\\\"andw %1,%0\\\", xoperands);\n   return \\\"andw %2,%0\\\";\n@@ -1355,10 +1346,8 @@\n     xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n   else\n     {\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t      CONST_DOUBLE_LOW (operands[2]));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_HIGH (operands[2]));\n+      xoperands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[2]));\n     }\n   output_asm_insn (\\\"xorw %1,%0\\\", xoperands);\n   return \\\"xorw %2,%0\\\";"}, {"sha": "0f64a9e7c183b95ff619c761f135bb256d5e8ea4", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on ROMP.\n-   Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1991, 1992, 1993, 1997 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -20,8 +20,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -1222,7 +1222,7 @@ output_epilog (file, size)\n   if (write_code)\n     output_loadsave_fpregs (file, CLOBBER,\n \t\t\t    gen_rtx (PLUS, Pmode, gen_rtx (REG, Pmode, 1),\n-\t\t\t\t     gen_rtx (CONST_INT, VOIDmode, fp_save)));\n+\t\t\t\t     GEN_INT (fp_save)));\n \n   /* If we push the stack and do not have size > 32K, adjust the register\n      save location to the current position of sp.  Otherwise, if long frame,\n@@ -1317,7 +1317,7 @@ struct symref_hashent {\n \n static struct symref_hashent *symref_hash_table[SYMHASHSIZE];\n \n-/* Given a name (allocatable in temporary storage), return a SYMBOL_REF\n+/* Given a name (allocable in temporary storage), return a SYMBOL_REF\n    for the name.  The rtx is allocated from the current rtl_obstack, while\n    the name string is allocated from the permanent obstack.  */\n rtx\n@@ -1739,7 +1739,7 @@ output_loadsave_fpregs (file, code, addr)\n \n   if (mask)\n     fprintf (file, \"\\t%s\\n\",\n-\t     output_fpop (code, gen_rtx (CONST_INT, VOIDmode, mask),\n+\t     output_fpop (code, GEN_INT (mask),\n \t\t\t\tgen_rtx (MEM, Pmode, addr),\n \t\t\t\t0, const0_rtx));\n "}, {"sha": "0add9ee2467b356104ed0d540d7a13322503bea9", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -272,12 +272,12 @@ extern int target_flags;\n /* Place to put static chain when calling a function that requires it.  */\n #define STATIC_CHAIN\t\t\t\t\t\t\t\\\n   gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, stack_pointer_rtx,\t\t\\\n-\t\t\t\tgen_rtx (CONST_INT, VOIDmode, -36)))\n+\t\t\t\tGEN_INT (-36)))\n \n /* Place where static chain is found upon entry to routine.  */\n #define STATIC_CHAIN_INCOMING\t\t\t\t\t\t\\\n   gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, arg_pointer_rtx,\t\t\\\n-\t\t\t\tgen_rtx (CONST_INT, VOIDmode, -20)))\n+\t\t\t\tGEN_INT (-20)))\n \n /* Place that structure value return address is placed.\n \n@@ -812,7 +812,7 @@ struct rt_cargs {int gregs, fregs; };\n   rtx _val;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n   _temp = expand_binop (SImode, add_optab, ADDR,\t\t\\\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 4),\t\\\n+\t\t\tGEN_INT (4),\t\t\t\t\\\n \t\t\t0, 1, OPTAB_LIB_WIDEN);\t\t\t\\\n   emit_move_insn (gen_rtx (MEM, SImode,\t\t\t\t\\\n \t\t\t   memory_address (SImode, ADDR)), _temp); \\\n@@ -1077,9 +1077,8 @@ struct rt_cargs {int gregs, fregs; };\n       (X) = gen_rtx (PLUS, SImode,\t\t\t\t\\\n \t\t     force_operand\t\t\t\t\\\n \t\t     \t(gen_rtx (PLUS, SImode, XEXP (X, 0), \\\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode, \\\n-\t\t\t\t\t\t      high_int << 16)), 0),\\\n-\t\t     gen_rtx (CONST_INT, VOIDmode, low_int));\t\\\n+\t\t\t\t  GEN_INT (high_int << 16)), 0),\\\n+\t\t     GEN_INT (, low_int));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n@@ -1585,7 +1584,7 @@ extern int romp_debugger_arg_correction();\n   else if (GET_CODE (addr) == SYMBOL_REF\t\t\t\\\n \t   && CONSTANT_POOL_ADDRESS_P (addr))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      offset = gen_rtx (CONST_INT, VOIDmode, get_pool_offset (addr) + 12);  \\\n+      offset = GEN_INT (get_pool_offset (addr) + 12);  \\\n       base = gen_rtx (REG, SImode, 14);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE (addr) == CONST\t\t\t\t\\"}, {"sha": "3abd56b7dab7b40e0cb7addd6f7bdbc99fbac98d", "filename": "gcc/config/romp/romp.md", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fromp%2Fromp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -181,7 +181,7 @@\n \t{\n \t  /* Can do this by loading the negative constant and then negating. */\n \t  emit_move_insn (operands[0],\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, - const_val));\n+\t\t\t  GEN_INT (- const_val));\n \t  emit_insn (gen_negsi2 (operands[0], operands[0]));\n \t  DONE;\n \t}\n@@ -196,9 +196,9 @@\n \t    i = high_part, high_part = low_part, low_part = i;\n \n \t  emit_move_insn (operands[0],\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, low_part));\n+\t\t\t  GEN_INT (low_part));\n \t  emit_insn (gen_iorsi3 (operands[0], operands[0],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode, high_part)));\n+\t\t\t\t GEN_INT (high_part)));\n \t  DONE;\n \t}\n     }\n@@ -486,7 +486,7 @@\n   operands[6] = operands[2];\n   operands[7] = gen_rtx (MEM, SImode,\n \t\t\t gen_rtx (PLUS, SImode, operands[2],\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode, 4)));\n+\t\t\t\t  GEN_INT (4)));\n \n   if (operands[2] == 0 || operands[4] == 0)\n     FAIL;\n@@ -507,7 +507,7 @@\n   operands[5] = operand_subword (operands[1], 0, 0, DImode);\n   operands[6] = gen_rtx (MEM, SImode,\n \t\t\t gen_rtx (PLUS, SImode, operands[2],\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode, 4)));\n+\t\t\t\t  GEN_INT (4)));\n   operands[7] = operand_subword (operands[1], 1, 0, DImode);\n \n   if (operands[5] == 0 || operands[7] == 0)\n@@ -816,7 +816,7 @@\n   operands[5] = operand_subword (operands[0], 1, 0, DFmode);\n   operands[6] = gen_rtx (MEM, SImode,\n \t\t\t gen_rtx (PLUS, SImode, gen_rtx (REG, SImode, 15),\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode, 4)));\n+\t\t\t\t  GEN_INT (4)));\n \n   if (operands[3] == 0 || operands[5] == 0)\n     FAIL;\n@@ -837,7 +837,7 @@\n   operands[4] = operand_subword (operands[1], 0, 0, DFmode);\n   operands[5] = gen_rtx (MEM, SImode,\n \t\t\t gen_rtx (PLUS, SImode, gen_rtx (REG, SImode, 15),\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode, 4)));\n+\t\t\t\t  GEN_INT (4)));\n   operands[6] = operand_subword (operands[1], 1, 0, DFmode);\n \n   if (operands[4] == 0 || operands[6] == 0)\n@@ -1209,9 +1209,9 @@\n \thigh++, low |= 0xffff0000;\n \n       emit_insn (gen_addsi3 (operands[0], operands[1],\n-\t\t\t     gen_rtx (CONST_INT, VOIDmode, high << 16)));\n+\t\t\t     GEN_INT (high << 16)));\n       operands[1] = operands[0];\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, low);\n+      operands[2] = GEN_INT (low);\n     }\n }\")\n \n@@ -1259,8 +1259,7 @@\n   if (GET_CODE (operands [2]) == CONST_INT)\n     {\n       emit_insn (gen_addsi3 (operands[0], operands[1], \n-\t\t\t     gen_rtx (CONST_INT,\n-\t\t\t\t      VOIDmode, - INTVAL (operands[2]))));\n+\t\t\t     GEN_INT (- INTVAL (operands[2]))));\n       DONE;\n     }\n   else\n@@ -1516,10 +1515,9 @@\n       if (top != 0 && top != 0xffff && bottom != 0 && bottom != 0xffff)\n \t{\n \t  emit_insn (gen_andsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t\t  (top << 16) | 0xffff)));\n+\t\t\t\t GEN_INT ((top << 16) | 0xffff)));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, 0xffff0000 | bottom);\n+\t  operands[2] = GEN_INT (0xffff0000 | bottom);\n \t}\n     }\n }\");\n@@ -1552,9 +1550,9 @@\n       if (top != 0 && bottom != 0)\n \t{\n \t  emit_insn (gen_iorsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode, (top << 16))));\n+\t\t\t\t GEN_INT ((top << 16))));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, bottom);\n+\t  operands[2] = GEN_INT (bottom);\n \t}\n     }\n }\");\n@@ -1592,9 +1590,9 @@\n       else if (top != 0 && bottom != 0)\n \t{\n \t  emit_insn (gen_xorsi3 (operands[0], operands[1],\n-\t\t\t\t gen_rtx (CONST_INT, VOIDmode, (top << 16))));\n+\t\t\t\t GEN_INT ((top << 16))));\n \t  operands[1] = operands[0];\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, bottom);\n+\t  operands[2] = GEN_INT (bottom);\n \t}\n     }\n }\");\n@@ -1979,7 +1977,7 @@\n \n       result = expand_binop (SImode, xor_optab,\n \t\t\t     operand_subword_force (operands[1], 0, SFmode),\n-\t\t\t     gen_rtx (CONST_INT, VOIDmode, 0x80000000),\n+\t\t\t     GEN_INT (0x80000000),\n \t\t\t     target, 0, OPTAB_WIDEN);\n       if (result == 0)\n \tabort ();\n@@ -2013,7 +2011,7 @@\n       start_sequence ();\n       result = expand_binop (SImode, xor_optab,\n \t\t\t     operand_subword_force (operands[1], 0, DFmode),\n-\t\t\t     gen_rtx (CONST_INT, VOIDmode, 0x80000000),\n+\t\t\t     GEN_INT (0x80000000),\n \t\t\t     target, 0, OPTAB_WIDEN);\n       if (result == 0)\n \tabort ();"}, {"sha": "da07fbf97c650c899b710baab29339eb76af0904", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -2196,8 +2196,7 @@\n   int insert_size = INTVAL (operands[1]) & 31;\n \n /* Align extract field with insert field */\n-  operands[5] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t extract_start + extract_size - insert_start - insert_size);\n+  operands[5] = GEN_INT (extract_start + extract_size - insert_start - insert_size);\n   operands[1] = GEN_INT (insert_start + insert_size - 1);\n   return \\\"{rlimi|rlwimi} %0,%3,%h5,%h2,%h1\\\";\n }\")\n@@ -2272,8 +2271,7 @@\n \n   if ((start > 0 && start + size <= 16) || start >= 16)\n     {\n-      operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     ((1 << (16 - (start & 15)))\n+      operands[3] = GEN_INT (((1 << (16 - (start & 15)))\n \t\t\t      - (1 << (16 - (start & 15) - size))));\n       if (start < 16)\n \treturn \\\"{andiu.|andis.} %4,%1,%3\\\";\n@@ -4908,8 +4906,7 @@\n    (set (match_dup 0) (ior:DI (match_dup 0) (match_dup 4)))]\n \"\n {\n-  operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n+  operands[3] = GEN_INT (INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[4] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n }\")\n \n@@ -4956,8 +4953,7 @@\n    (set (match_dup 0) (xor:DI (match_dup 0) (match_dup 4)))]\n \"\n {\n-  operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t INTVAL (operands[2]) & 0xffff0000);\n+  operands[3] = GEN_INT (INTVAL (operands[2]) & 0xffff0000);\n   operands[4] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n }\")\n \n@@ -5355,8 +5351,7 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t INTVAL (operands[1]) & 0xffff0000);\n+  operands[2] = GEN_INT (INTVAL (operands[1]) & 0xffff0000);\n   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n "}, {"sha": "327ee2730b55ced41fb68d151b7a99acb0cfbb44", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1973,8 +1973,7 @@ output_move_double (operands)\n \t{\n \t  if (arith_double_operand (op1, DImode))\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     CONST_DOUBLE_LOW (op1));\n+\t      operands[1] = GEN_INT (CONST_DOUBLE_LOW (op1));\n \t      return \"mov %1,%0\";\n \t    }\n \t  else\n@@ -2647,7 +2646,7 @@ output_size_for_block_move (size, reg, align)\n   else\n     {\n       xoperands[1]\n-\t= gen_rtx (CONST_INT, VOIDmode, INTVAL (size) - INTVAL (align));\n+\t= GEN_INT (INTVAL (size) - INTVAL (align));\n       output_asm_insn (\"set %1,%0\", xoperands);\n     }\n }\n@@ -2685,7 +2684,7 @@ output_block_move (operands)\n   if (align > UNITS_PER_WORD)\n     {\n       align = UNITS_PER_WORD;\n-      alignrtx = gen_rtx (CONST_INT, VOIDmode, UNITS_PER_WORD);\n+      alignrtx = GEN_INT (UNITS_PER_WORD);\n     }\n \n   /* We consider 8 ld/st pairs, for a total of 16 inline insns to be\n@@ -2781,11 +2780,11 @@ output_block_move (operands)\n     }\n \n   if (align != INTVAL (alignrtx))\n-    alignrtx = gen_rtx (CONST_INT, VOIDmode, align);\n+    alignrtx = GEN_INT (align);\n \n-  xoperands[3] = gen_rtx (CONST_INT, VOIDmode, movstrsi_label++);\n-  xoperands[4] = gen_rtx (CONST_INT, VOIDmode, align);\n-  xoperands[5] = gen_rtx (CONST_INT, VOIDmode, movstrsi_label++);\n+  xoperands[3] = GEN_INT (movstrsi_label++);\n+  xoperands[4] = GEN_INT (align);\n+  xoperands[5] = GEN_INT (movstrsi_label++);\n \n   ASM_GENERATE_INTERNAL_LABEL (label3, \"Lm\", INTVAL (xoperands[3]));\n   ASM_GENERATE_INTERNAL_LABEL (label5, \"Lm\", INTVAL (xoperands[5]));\n@@ -4583,7 +4582,7 @@ output_return (operands)\n \t the stack pointer might have been adjusted.  Output code to\n \t restore it now.  */\n \n-      operands[0] = gen_rtx (CONST_INT, VOIDmode, actual_fsize);\n+      operands[0] = GEN_INT (actual_fsize);\n \n       /* Use sub of negated value in first two cases instead of add to\n \t allow actual_fsize == 4096.  */\n@@ -4597,7 +4596,7 @@ output_return (operands)\n \t}\n       else if (actual_fsize <= 8192)\n \t{\n-\t  operands[0] = gen_rtx (CONST_INT, VOIDmode, actual_fsize - 4096);\n+\t  operands[0] = GEN_INT (actual_fsize - 4096);\n \t  if (SKIP_CALLERS_UNIMP_P)\n \t    return \"sub %%sp,-4096,%%sp\\n\\tjmp %%o7+12\\n\\tsub %%sp,-%0,%%sp\";\n \t  else\n@@ -5045,8 +5044,8 @@ output_double_int (file, value)\n \n       high = (xword >> 32) & 0xffffffff;\n       low  = xword & 0xffffffff;\n-      ASM_OUTPUT_INT (file, gen_rtx (CONST_INT, VOIDmode, high));\n-      ASM_OUTPUT_INT (file, gen_rtx (CONST_INT, VOIDmode, low));\n+      ASM_OUTPUT_INT (file, GEN_INT (high));\n+      ASM_OUTPUT_INT (file, GEN_INT (low));\n #else\n       if (INTVAL (value) < 0)\n \tASM_OUTPUT_INT (file, constm1_rtx);\n@@ -5057,10 +5056,8 @@ output_double_int (file, value)\n     }\n   else if (GET_CODE (value) == CONST_DOUBLE)\n     {\n-      ASM_OUTPUT_INT (file, gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     CONST_DOUBLE_HIGH (value)));\n-      ASM_OUTPUT_INT (file, gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     CONST_DOUBLE_LOW (value)));\n+      ASM_OUTPUT_INT (file, GEN_INT (CONST_DOUBLE_HIGH (value)));\n+      ASM_OUTPUT_INT (file, GEN_INT (CONST_DOUBLE_LOW (value)));\n     }\n   else if (GET_CODE (value) == SYMBOL_REF\n \t   || GET_CODE (value) == CONST\n@@ -5260,16 +5257,12 @@ sparc_initialize_trampoline (tramp, fnaddr, cxt)\n \t\t\t      size_int (10), 0, 1);\n   rtx high_fn = expand_shift (RSHIFT_EXPR, SImode, fnaddr,\n \t\t\t     size_int (10), 0, 1);\n-  rtx low_cxt = expand_and (cxt, gen_rtx (CONST_INT, VOIDmode, 0x3ff), 0);\n-  rtx low_fn = expand_and (fnaddr, gen_rtx (CONST_INT, VOIDmode, 0x3ff), 0);\n-  rtx g1_sethi = gen_rtx (HIGH, SImode,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, 0x03000000));\n-  rtx g2_sethi = gen_rtx (HIGH, SImode,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, 0x05000000));\n-  rtx g1_ori = gen_rtx (HIGH, SImode,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 0x82106000));\n-  rtx g2_ori = gen_rtx (HIGH, SImode,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 0x8410A000));\n+  rtx low_cxt = expand_and (cxt, GEN_INT (0x3ff), 0);\n+  rtx low_fn = expand_and (fnaddr, GEN_INT (0x3ff), 0);\n+  rtx g1_sethi = gen_rtx (HIGH, SImode, GEN_INT (0x03000000));\n+  rtx g2_sethi = gen_rtx (HIGH, SImode, GEN_INT (0x05000000));\n+  rtx g1_ori = gen_rtx (HIGH, SImode, GEN_INT (0x82106000));\n+  rtx g2_ori = gen_rtx (HIGH, SImode, GEN_INT (0x8410A000));\n   rtx tem = gen_reg_rtx (SImode);\n   emit_move_insn (tem, g1_sethi);\n   emit_insn (gen_iorsi3 (high_fn, high_fn, tem));"}, {"sha": "ce57192135bc96c9cf75170ba694f85aa6b64198", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1095,13 +1095,13 @@ extern int sparc_mode_class[];\n    ? 0\t\t\t\t\t\t\t\\\n    : gen_rtx (MEM, Pmode,\t\t\t\t\\\n \t      gen_rtx (PLUS, Pmode, stack_pointer_rtx,\t\\\n-\t\t       gen_rtx (CONST_INT, VOIDmode, STRUCT_VALUE_OFFSET))))\n+\t\t       GEN_INT (STRUCT_VALUE_OFFSET))))\n #define STRUCT_VALUE_INCOMING \\\n   (TARGET_ARCH64\t\t\t\t\t\\\n    ? 0\t\t\t\t\t\t\t\\\n    : gen_rtx (MEM, Pmode,\t\t\t\t\\\n \t      gen_rtx (PLUS, Pmode, frame_pointer_rtx,\t\\\n-\t\t       gen_rtx (CONST_INT, VOIDmode, STRUCT_VALUE_OFFSET))))\n+\t\t       GEN_INT (STRUCT_VALUE_OFFSET))))\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -2120,11 +2120,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-      ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-      ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n-      ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x81C04000));\t\\\n-      ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n+      ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+      ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+      ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n+      ASM_OUTPUT_INT (FILE, GEN_INT (0x81C04000));\t\\\n+      ASM_OUTPUT_INT (FILE, GEN_INT (0x00000000));\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n@@ -2176,7 +2176,7 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n    that holds the dynamic chain--the previous frame's address.\n    ??? -mflat support? */\n #define DYNAMIC_CHAIN_ADDRESS(frame) \\\n-  gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 14 * UNITS_PER_WORD))\n+  gen_rtx (PLUS, Pmode, frame, GEN_INT (14 * UNITS_PER_WORD))\n \n /* The return address isn't on the stack, it is in a register, so we can't\n    access it from the current frame pointer.  We can access it from the"}, {"sha": "ac79f682757ff9f2e9dcd7c7d364d6c618e098d5", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -5507,9 +5507,9 @@\n \n #if 0\n   if (operands[3])\n-    nregs_rtx = gen_rtx (CONST_INT, VOIDmode, REGNO (operands[3]) - 8);\n+    nregs_rtx = GEN_INT (REGNO (operands[3]) - 8);\n   else\n-    nregs_rtx = gen_rtx (CONST_INT, VOIDmode, 6);\n+    nregs_rtx = GEN_INT (6);\n #else\n   nregs_rtx = const0_rtx;\n #endif"}, {"sha": "83e37b8aeef53c932613114063db37a9a3022728", "filename": "gcc/config/spur/spur.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fspur%2Fspur.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fspur%2Fspur.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for SPUR.  Adapted from routines for\n    the Motorola 68000 family.\n-   Copyright (C) 1988, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1991, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,6 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -152,10 +153,8 @@ output_move_double (operands)\n     {\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t{\n-\t  latehalf[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_HIGH (operands[1]));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t CONST_DOUBLE_LOW (operands[1]));\n+\t  latehalf[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+\t  operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \t}\n       else if (CONSTANT_P (operands[1]))\n \tlatehalf[1] = const0_rtx;\n@@ -225,10 +224,10 @@ output_fp_move_double (operands)\n \t  rtx xoperands[2];\n \t  int offset = - get_frame_size () - 8;\n \t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset + 4);\n+\t  xoperands[0] = GEN_INT (offset + 4);\n \t  output_asm_insn (\"st_32 %1,r25,%0\", xoperands);\n \t  xoperands[1] = operands[1];\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset);\n+\t  xoperands[0] = GEN_INT (offset);\n \t  output_asm_insn (\"st_32 %1,r25,%0\", xoperands);\n \t  xoperands[1] = operands[0];\n \t  output_asm_insn (\"ld_dbl %1,r25,%0\\n\\tnop\", xoperands);\n@@ -242,13 +241,13 @@ output_fp_move_double (operands)\n \t{\n \t  rtx xoperands[2];\n \t  int offset = - get_frame_size () - 8;\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset);\n+\t  xoperands[0] = GEN_INT (offset);\n \t  xoperands[1] = operands[1];\n \t  output_asm_insn (\"st_dbl %1,r25,%0\", xoperands);\n \t  xoperands[1] = operands[0];\n \t  output_asm_insn (\"ld_32 %1,r25,%0\\n\\tnop\", xoperands);\n \t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset + 4);\n+\t  xoperands[0] = GEN_INT (offset + 4);\n \t  output_asm_insn (\"ld_32 %1,r25,%0\\n\\tnop\", xoperands);\n \t  return \"\";\n \t}\n@@ -297,7 +296,7 @@ output_add_large_offset (target, reg, offset)\n        (unsigned) (high + 0x2000) >= 0x4000; \n        high >>= 1, n += 1)\n     ;\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, high);\n+  operands[2] = GEN_INT (high);\n   output_asm_insn (\"add_nt r2,r0,%2\", operands);\n   i = n;\n   while (i >= 3)\n@@ -309,7 +308,7 @@ output_add_large_offset (target, reg, offset)\n   output_asm_insn (\"add_nt %0,r2,%1\", operands);\n   if (offset - (high << n) != 0)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, offset - (high << n));\n+      operands[2] = GEN_INT (offset - (high << n));\n       output_asm_insn (\"add_nt %0,%0,%2\", operands);\n     }\n   return \"\";"}, {"sha": "7ad4af5b3421813c1d5a6e5fa3f5b0af2841b79f", "filename": "gcc/config/spur/spur.md", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fspur%2Fspur.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fspur%2Fspur.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -297,7 +297,7 @@\n \n       emit_insn (gen_rtx (SET, VOIDmode, subreg,\n \t\t\t  gen_rtx (ZERO_EXTRACT, SImode, tem,\n-\t\t\t\t   gen_rtx (CONST_INT, VOIDmode, 8),\n+\t\t\t\t   GEN_INT (8),\n \t\t\t\t   addr)));\n     }\n   else if (GET_CODE (operands[0]) == MEM)\n@@ -318,7 +318,7 @@\n \n       emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t  gen_rtx (ZERO_EXTRACT, SImode, tem,\n-\t\t\t\t   gen_rtx (CONST_INT, VOIDmode, 8),\n+\t\t\t\t   GEN_INT (8),\n \t\t\t\t   addr),\n \t\t\t  subreg));\n       emit_move_insn (gen_rtx (MEM, SImode, addr), tem);\n@@ -376,7 +376,7 @@\n ;   && (unsigned) INTVAL (operands[1]) < 32\"\n ;  \"*\n ;{\n-;  operands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) / 8);\n+;  operands[1] = GEN_INT (INTVAL (operands[1]) / 8);\n ;  return \\\"wr_insert 0,0,%1\\;insert %0,%0,%2\\\";\n ;}\")\n \f\n@@ -467,9 +467,8 @@\n    (set (mem:SI (match_dup 0))\n \t(match_dup 2))]\n   \"\"\n-  \" operands[5] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & 255);\n-    operands[6] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t   (INTVAL (operands[1]) >> 8) & 255);\n+  \" operands[5] = GEN_INT (INTVAL (operands[1]) & 255);\n+    operands[6] = GEN_INT ((INTVAL (operands[1]) >> 8) & 255);\n \")\n \f\n ;; Main entry for generating insns to move halfwords.\n@@ -563,7 +562,7 @@\n ;   && (unsigned) INTVAL (operands[1]) < 32\"\n ;  \"*\n ;{\n-;  operands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) / 8);\n+;  operands[1] = GEN_INT (INTVAL (operands[1]) / 8);\n ;  return \\\"wr_insert 0,0,%1\\;insert %0,%0,%2\\\";\n ;}\")\n \f\n@@ -631,7 +630,7 @@\n \t  rtx xoperands[2];\n \t  int offset = - get_frame_size () - 8;\n \t  xoperands[1] = operands[1];\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset);\n+\t  xoperands[0] = GEN_INT (offset);\n \t  output_asm_insn (\\\"st_32 %1,r25,%0\\\", xoperands);\n \t  xoperands[1] = operands[0];\n \t  output_asm_insn (\\\"ld_sgl %1,r25,%0\\;nop\\\", xoperands);\n@@ -645,7 +644,7 @@\n \t{\n \t  rtx xoperands[2];\n \t  int offset = - get_frame_size () - 8;\n-\t  xoperands[0] = gen_rtx (CONST_INT, VOIDmode, offset);\n+\t  xoperands[0] = GEN_INT (offset);\n \t  xoperands[1] = operands[1];\n \t  output_asm_insn (\\\"st_sgl %1,r25,%0\\\", xoperands);\n \t  xoperands[1] = operands[0];\n@@ -705,7 +704,7 @@\n   else\n     operands[1] = gen_rtx (SUBREG, SImode, operands[1], 0);\n \n-  operands[2] = force_reg (SImode, gen_rtx (CONST_INT, VOIDmode, 65535));\n+  operands[2] = force_reg (SImode, GEN_INT (65535));\n }\")\n \n (define_insn \"zero_extendqihi2\"\n@@ -744,8 +743,8 @@\n \n   operands[2] = gen_reg_rtx (SImode);\n   operands[3] = gen_reg_rtx (SImode);\n-  operands[4] = force_reg (SImode, gen_rtx (CONST_INT, VOIDmode, 65535));\n-  operands[5] = force_reg (SImode, gen_rtx (CONST_INT, VOIDmode, -32768));\n+  operands[4] = force_reg (SImode, GEN_INT (65535));\n+  operands[5] = force_reg (SImode, GEN_INT (-32768));\n }\")\n \n (define_expand \"extendqihi2\""}, {"sha": "021c1b010326772f3156f4e355aaf898192a4bca", "filename": "gcc/config/tahoe/tahoe.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description for GNU compiler, Tahoe version\n-;; Copyright (C) 1989, 1994, 1996 Free Software Foundation, Inc.\n+;; Copyright (C) 1989, 1994, 1996, 1997 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1015,7 +1015,7 @@\n   \"*\n {\n   if (INTVAL (operands[1]) > 32767)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) + 0xffff0000);\n+    operands[1] = GEN_INT (INTVAL (operands[1]) + 0xffff0000);\n   return \\\"cmpw %0,%1\\\";\n }\")\n \n@@ -1062,7 +1062,7 @@\n   \"*\n {\n   if (INTVAL (operands[1]) > 127)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) + 0xffffff00);\n+    operands[1] = GEN_INT (INTVAL (operands[1]) + 0xffffff00);\n   return \\\"cmpb %0,%1\\\";\n }\")\n \n@@ -1143,7 +1143,7 @@\n \n (define_insn \"tsthi\"\n   [(set (cc0)\n-\t(match_operand:HI 0 \"extendable_operand\" \"m,!r\"))]\n+\t(match_operand:HI 0 \"extensible_operand\" \"m,!r\"))]\n   \"GET_MODE (operands[0]) != VOIDmode\"\n   \"*\n {\n@@ -1179,7 +1179,7 @@\n \n (define_insn \"tstqi\"\n   [(set (cc0)\n-\t(match_operand:QI 0 \"extendable_operand\" \"m,!r\"))]\n+\t(match_operand:QI 0 \"extensible_operand\" \"m,!r\"))]\n   \"GET_MODE (operands[0]) != VOIDmode\"\n   \"*\n {\n@@ -1591,7 +1591,7 @@\n   \"\"\n   \"*\n {\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[1]) + 4));\n+  operands[1] = GEN_INT ((INTVAL (operands[1]) + 4));\n   if (GET_CODE(operands[0]) == MEM\n       && CONSTANT_ADDRESS_P (XEXP(operands[0], 0))\n       && INTVAL (operands[1]) < 64)\n@@ -1609,7 +1609,7 @@\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[2]) + 4));\n+  operands[2] = GEN_INT ((INTVAL (operands[2]) + 4));\n   if (GET_CODE(operands[1]) == MEM\n       && CONSTANT_ADDRESS_P (XEXP(operands[1], 0))\n       && INTVAL (operands[2]) < 64)\n@@ -2057,7 +2057,7 @@\n ;  \"*\n ;{\n ;  operands[1]\n-;    = gen_rtx (CONST_INT, VOIDmode, exact_log2 (INTVAL (operands[1])));\n+;    = GEN_INT (exact_log2 (INTVAL (operands[1])));\n ;  return \\\"bbs %1,%0,%l2\\\";\n ;}\")\n ;\n@@ -2074,7 +2074,7 @@\n ;  \"*\n ;{\n ;  operands[1]\n-;    = gen_rtx (CONST_INT, VOIDmode, exact_log2 (INTVAL (operands[1])));\n+;    = GEN_INT (exact_log2 (INTVAL (operands[1])));\n ;  return \\\"bbc %1,%0,%l2\\\";\n ;}\")\n ;\n@@ -2091,7 +2091,7 @@\n ;  \"*\n ;{\n ;  operands[1]\n-;    = gen_rtx (CONST_INT, VOIDmode, exact_log2 (INTVAL (operands[1])));\n+;    = GEN_INT (exact_log2 (INTVAL (operands[1])));\n ;  return \\\"bbc %1,%0,%l2\\\";\n ;}\")\n ;\n@@ -2108,6 +2108,6 @@\n ;  \"*\n ;{\n ;  operands[1]\n-;    = gen_rtx (CONST_INT, VOIDmode, exact_log2 (INTVAL (operands[1])));\n+;    = GEN_INT (exact_log2 (INTVAL (operands[1])));\n ;  return \\\"bbs %1,%0,%l2\\\";\n ;}\")"}, {"sha": "1c96e1e7397a01399245ab03710c93077258d7b0", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -348,7 +348,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    return an rtx for the address of the word in the frame\n    that holds the dynamic chain--the previous frame's address.  */\n #define DYNAMIC_CHAIN_ADDRESS(frame) \\\n-gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n+gen_rtx (PLUS, Pmode, frame, GEN_INT (12))\n \n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n@@ -533,10 +533,10 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x8fd0));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x8fd0));\t\\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_BYTE  (FILE, 0x50+STATIC_CHAIN_REGNUM);\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x9f17));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x9f17));\t\\\n   ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n }\n "}, {"sha": "fce9a8e0bff9b7d745d1862051f7e25b6c18c776", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -874,7 +874,7 @@\n   \"*\n {\n   if (CONST_DOUBLE_HIGH (operands[3]))\n-    operands[3] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[3]));\n+    operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[3]));\n   return \\\"emul %1,%2,%3,%0\\\";\n }\")\n \f\n@@ -956,7 +956,7 @@\n     }\n \n   if (GET_CODE (op1) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (op1));\n+    operands[1] = GEN_INT (~INTVAL (op1));\n   else\n     operands[1] = expand_unop (SImode, one_cmpl_optab, op1, 0, 1);\n }\")\n@@ -978,7 +978,7 @@\n     }\n \n   if (GET_CODE (op1) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, 65535 & ~INTVAL (op1));\n+    operands[1] = GEN_INT (65535 & ~INTVAL (op1));\n   else\n     operands[1] = expand_unop (HImode, one_cmpl_optab, op1, 0, 1);\n }\")\n@@ -1000,7 +1000,7 @@\n    }\n \n   if (GET_CODE (op1) == CONST_INT)\n-    operands[1] = gen_rtx (CONST_INT, VOIDmode, 255 & ~INTVAL (op1));\n+    operands[1] = GEN_INT (255 & ~INTVAL (op1));\n   else\n     operands[1] = expand_unop (QImode, one_cmpl_optab, op1, 0, 1);\n }\")\n@@ -1847,7 +1847,7 @@\n   if (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) > 255 * 4)\n     /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n     return \\\"calls $0,%0\\;addl2 %1,sp\\\";\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[1]) + 3)/ 4);\n+  operands[1] = GEN_INT ((INTVAL (operands[1]) + 3)/ 4);\n   return \\\"calls %1,%0\\\";\n \")\n \n@@ -1862,7 +1862,7 @@\n   if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) > 255 * 4)\n     /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n     return \\\"calls $0,%1\\;addl2 %2,sp\\\";\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[2]) + 3)/ 4);\n+  operands[2] = GEN_INT ((INTVAL (operands[2]) + 3)/ 4);\n   return \\\"calls %2,%1\\\";\n \")\n \n@@ -1877,7 +1877,7 @@\n   if (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) > 255 * 4)\n     /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n     return \\\"calls $0,%0\\;addl2 %1,sp\\\";\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[1]) + 3)/ 4);\n+  operands[1] = GEN_INT ((INTVAL (operands[1]) + 3)/ 4);\n   return \\\"calls %1,%0\\\";\n \")\n \n@@ -1891,7 +1891,7 @@\n   if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) > 255 * 4)\n     /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n     return \\\"calls $0,%1\\;addl2 %2,sp\\\";\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[2]) + 3)/ 4);\n+  operands[2] = GEN_INT ((INTVAL (operands[2]) + 3)/ 4);\n   return \\\"calls %2,%1\\\";\n \")\n \n@@ -2110,7 +2110,7 @@\n   unsigned long mask2 = (1 << (32 - INTVAL (operands[2]))) - 1;\n \n   if ((mask1 & mask2) != mask1)\n-    operands[3] = gen_rtx (CONST_INT, VOIDmode, mask1 & mask2);\n+    operands[3] = GEN_INT (mask1 & mask2);\n \n   return \\\"rotl %R2,%1,%0\\;bicl2 %N3,%0\\\";\n }\")\n@@ -2128,7 +2128,6 @@\n   \"\"\n   \"*\n {\n-  operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t INTVAL (operands[3]) & ~((1 << INTVAL (operands[2])) - 1));\n+  operands[3] = GEN_INT (INTVAL (operands[3]) & ~((1 << INTVAL (operands[2])) - 1));\n   return \\\"rotl %2,%1,%0\\;bicl2 %N3,%0\\\";\n }\")"}, {"sha": "0c02686d703a98553d279861b2a53a62196c4027", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for AT&T we32000 Family.\n    Contributed by John Wehle (john@feith1.uucp)\n-   Copyright (C) 1991-1992 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,8 +20,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"real.h\"\n \n@@ -85,10 +85,8 @@ output_move_double (operands)\n     }\n   else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n-      lsw_operands[1] = gen_rtx (CONST_INT, SImode,\n-\t\t\t\t CONST_DOUBLE_HIGH (operands[1]));\n-      operands[1] = gen_rtx (CONST_INT, SImode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n+      lsw_operands[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+      operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n     }\n   else if (GET_CODE (operands[1]) == CONST_INT)\n     {\n@@ -122,10 +120,8 @@ output_push_double (operands)\n     lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n   else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n     {\n-      lsw_operands[0] = gen_rtx (CONST_INT, SImode,\n-\t\t\t\t CONST_DOUBLE_HIGH (operands[0]));\n-      operands[0] = gen_rtx (CONST_INT, SImode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[0]));\n+      lsw_operands[0] = GEN_INT (CONST_DOUBLE_HIGH (operands[0]));\n+      operands[0] = GEN_INT (CONST_DOUBLE_LOW (operands[0]));\n     }\n   else if (GET_CODE (operands[0]) == CONST_INT)\n     { "}, {"sha": "07f00107d59f2862c32456f6bb838dbf5b593926", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -480,11 +480,11 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x844f));\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x844f));\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_CHAR (FILE, gen_rtx (CONST_INT, VOIDmode, 0x48));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x247f));\t\\\n+  ASM_OUTPUT_CHAR (FILE, GEN_INT (0x48));\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, GEN_INT (0x247f));\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n }"}, {"sha": "9d85a1026db995b0cb33060334bb9e848cbbf621", "filename": "gcc/config/we32k/we32k.md", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.md?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -140,10 +140,8 @@\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n-        lsw_operands[2] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[2]));\n-        operands[2] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[2]));\n+        lsw_operands[2] = GEN_INT (CONST_DOUBLE_HIGH(operands[2]));\n+        operands[2] = GEN_INT (CONST_DOUBLE_LOW(operands[2]));\n         }\n       else\n         if (GET_CODE (operands[2]) == CONST_INT)\n@@ -192,10 +190,8 @@\n     else\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n         {\n-        lsw_operands[1] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[1]));\n-        operands[1] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[1]));\n+        lsw_operands[1] = GEN_INT (CONST_DOUBLE_HIGH(operands[1]));\n+        operands[1] = GEN_INT (CONST_DOUBLE_LOW(operands[1]));\n         }\n       else\n         if (GET_CODE (operands[1]) == CONST_INT)\n@@ -214,10 +210,8 @@\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n-        lsw_operands[2] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[2]));\n-        operands[2] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[2]));\n+        lsw_operands[2] = GEN_INT (CONST_DOUBLE_HIGH(operands[2]));\n+        operands[2] = GEN_INT (CONST_DOUBLE_LOW(operands[2]));\n         }\n       else\n         if (GET_CODE (operands[2]) == CONST_INT)\n@@ -310,10 +304,8 @@\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n-        lsw_operands[2] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[2]));\n-        operands[2] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[2]));\n+        lsw_operands[2] = GEN_INT (CONST_DOUBLE_HIGH(operands[2]));\n+        operands[2] = GEN_INT (CONST_DOUBLE_LOW(operands[2]));\n         }\n       else\n         if (GET_CODE (operands[2]) == CONST_INT)\n@@ -362,10 +354,8 @@\n     else\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n         {\n-        lsw_operands[1] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[1]));\n-        operands[1] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[1]));\n+        lsw_operands[1] = GEN_INT (CONST_DOUBLE_HIGH(operands[1]));\n+        operands[1] = GEN_INT (CONST_DOUBLE_LOW(operands[1]));\n         }\n       else\n         if (GET_CODE (operands[1]) == CONST_INT)\n@@ -384,10 +374,8 @@\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n-        lsw_operands[2] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[2]));\n-        operands[2] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[2]));\n+        lsw_operands[2] = GEN_INT (CONST_DOUBLE_HIGH(operands[2]));\n+        operands[2] = GEN_INT (CONST_DOUBLE_LOW(operands[2]));\n         }\n       else\n         if (GET_CODE (operands[2]) == CONST_INT)\n@@ -770,7 +758,7 @@\n \n   if (GET_CODE (operands[1]) == CONST_INT &&\n     ((unsigned long)INTVAL (operands[1]) & 0x8000L))\n-    operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) | 0xffff0000L);\n+    operands[1] = GEN_INT (INTVAL(operands[1]) | 0xffff0000L);\n \n   output_asm_insn(\\\"CMPH %1, %0\\\",operands);\n \n@@ -786,7 +774,7 @@\n \n   if (GET_CODE (operands[1]) == CONST_INT &&\n     ((unsigned long)INTVAL (operands[1]) & 0x80L))\n-    operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) | 0xffffff00L);\n+    operands[1] = GEN_INT (INTVAL(operands[1]) | 0xffffff00L);\n \n   output_asm_insn(\\\"CMPB {sbyte}%1, {sbyte}%0\\\",operands);\n \n@@ -910,7 +898,7 @@\n   \"*\n   {\n \n-  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) - 1);\n   output_asm_insn(\\\"EXTFW %2, %3, %1, %0\\\",operands);\n \n   return \\\"\\\";\n@@ -925,7 +913,7 @@\n   \"*\n   {\n \n-  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) - 1);\n   output_asm_insn(\\\"EXTFH %2, %3, {uhalf}%1, {uword}%0\\\",operands);\n \n   return \\\"\\\";\n@@ -940,7 +928,7 @@\n   \"*\n   {\n \n-  operands[2] = gen_rtx(CONST_INT, SImode, INTVAL(operands[2]) - 1);\n+  operands[2] = GEN_INT (INTVAL(operands[2]) - 1);\n   output_asm_insn(\\\"EXTFB %2, %3, {ubyte}%1, {uword}%0\\\",operands);\n \n   return \\\"\\\";\n@@ -955,7 +943,7 @@\n   \"*\n   {\n \n-  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  operands[1] = GEN_INT (INTVAL(operands[1]) - 1);\n   output_asm_insn(\\\"INSFW %1, %2, %3, %0\\\",operands);\n \n   return \\\"\\\";\n@@ -970,7 +958,7 @@\n   \"*\n   {\n \n-  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  operands[1] = GEN_INT (INTVAL(operands[1]) - 1);\n   output_asm_insn(\\\"INSFH %1, %2, {uword}%3, {uhalf}%0\\\",operands);\n \n   return \\\"\\\";\n@@ -985,7 +973,7 @@\n   \"*\n   {\n \n-  operands[1] = gen_rtx(CONST_INT, SImode, INTVAL(operands[1]) - 1);\n+  operands[1] = GEN_INT (INTVAL(operands[1]) - 1);\n   output_asm_insn(\\\"INSFB %1, %2, {uword}%3, {ubyte}%0\\\",operands);\n \n   return \\\"\\\";"}, {"sha": "8ac4d102f302f83816530bcc0156c33df2ab078f", "filename": "gcc/md.texi", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a598fbeb416142a7b9aa9a332eab71c1828d36b/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=3a598fbeb416142a7b9aa9a332eab71c1828d36b", "patch": "@@ -3222,8 +3222,7 @@ on this machine.  So it must be copied into a register with\n                 (match_dup 2)))]\n   \"\"\n   \"operands[2]\n-     = force_reg (SImode, gen_rtx (CONST_INT,\n-                                   VOIDmode, 65535)); \")\n+     = force_reg (SImode, GEN_INT (65535)); \")\n @end smallexample\n \n @strong{Note:} If the @code{define_expand} is used to serve a\n@@ -3354,8 +3353,8 @@ Here is an example of this use of @code{define_split}, taken from\n   if (low & 0x8000)\n     high++, low |= 0xffff0000;\n \n-  operands[3] = gen_rtx (CONST_INT, VOIDmode, high << 16);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, low);\n+  operands[3] = GEN_INT (high << 16);\n+  operands[4] = GEN_INT (low);\n @}\")\n @end smallexample\n \n@@ -3388,8 +3387,8 @@ an equality comparison of a register and a large constant:\n   int sextc = (c << 16) >> 16;\n   int xorv = c ^ sextc;\n \n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, xorv);\n-  operands[5] = gen_rtx (CONST_INT, VOIDmode, sextc);\n+  operands[4] = GEN_INT (xorv);\n+  operands[5] = GEN_INT (sextc);\n @}\")\n @end smallexample\n "}]}