{"sha": "9402f6fb7450c77691ef079abae90b2130a65117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwMmY2ZmI3NDUwYzc3NjkxZWYwNzlhYmFlOTBiMjEzMGE2NTExNw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-10-30T23:07:48Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-10-30T23:07:48Z"}, "message": "fold-const.c (fold_binary_op_with_conditional_arg): Improve handling of cases where one or both branches of the conditional have...\n\n\n\t* fold-const.c (fold_binary_op_with_conditional_arg):  Improve\n\thandling of cases where one or both branches of the conditional\n\thave void type, i.e. throw an exception or don't return.\n\t(fold): Only apply (and undo) type conversion to the non-void\n\tbranches of a COND_EXPR.\n\n\t* f/com.c (ffecom_subscript_check_): Cast the failure branch\n\tof the bounds check COND_EXPR to void, to indicate noreturn.\n\t(ffe_truthvalue_conversion): Only apply truth value conversion\n\tto the non-void branches of a COND_EXPR.\n\nFrom-SVN: r58661", "tree": {"sha": "d3d4b7bca2e8518146b0b70b1283cd27604f517d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d4b7bca2e8518146b0b70b1283cd27604f517d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9402f6fb7450c77691ef079abae90b2130a65117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9402f6fb7450c77691ef079abae90b2130a65117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9402f6fb7450c77691ef079abae90b2130a65117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9402f6fb7450c77691ef079abae90b2130a65117/comments", "author": null, "committer": null, "parents": [{"sha": "9b5b7e3a8fe143a9b1be4cfdb17fccc1e5ae58ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b5b7e3a8fe143a9b1be4cfdb17fccc1e5ae58ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b5b7e3a8fe143a9b1be4cfdb17fccc1e5ae58ff"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "c0798dfbff2f90c53d911ea553d1cccbd6b78f28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9402f6fb7450c77691ef079abae90b2130a65117", "patch": "@@ -1,3 +1,11 @@\n+2002-10-30  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_binary_op_with_conditional_arg):  Improve\n+\thandling of cases where one or both branches of the conditional\n+\thave void type, i.e. throw an exception or don't return.\n+\t(fold): Only apply (and undo) type conversion to the non-void\n+\tbranches of a COND_EXPR.\n+\n 2002-10-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8333"}, {"sha": "58ef01222e5d701b1e277cb59d5ac669cc02cd4d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=9402f6fb7450c77691ef079abae90b2130a65117", "patch": "@@ -1,3 +1,10 @@\n+2002-10-30  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* com.c (ffecom_subscript_check_): Cast the failure branch\n+\tof the bounds check COND_EXPR to void, to indicate noreturn.\n+\t(ffe_truthvalue_conversion): Only apply truth value conversion\n+\tto the non-void branches of a COND_EXPR.\n+\n 2002-10-26  Andris Pavenis  <pavenis@latnet.lv>\n \n \t* lang-specs.h: Fix ratfor specs."}, {"sha": "1e066f5431d9fa634b64206963435fdba99bb31f", "filename": "gcc/f/com.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=9402f6fb7450c77691ef079abae90b2130a65117", "patch": "@@ -806,6 +806,7 @@ ffecom_subscript_check_ (tree array, tree element, int dim, int total_dims,\n   die = ffecom_call_gfrt (FFECOM_gfrtRANGE,\n \t\t\t  args, NULL_TREE);\n   TREE_SIDE_EFFECTS (die) = 1;\n+  die = convert (void_type_node, die);\n \n   element = ffecom_3 (COND_EXPR,\n \t\t      TREE_TYPE (element),\n@@ -14772,10 +14773,17 @@ ffe_truthvalue_conversion (expr)\n \treturn ffe_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n-      /* Distribute the conversion into the arms of a COND_EXPR.  */\n-      return fold (build (COND_EXPR, integer_type_node, TREE_OPERAND (expr, 0),\n-\t\t\t  ffe_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\t\t  ffe_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+      {\n+\t/* Distribute the conversion into the arms of a COND_EXPR.  */\n+\ttree arg1 = TREE_OPERAND (expr, 1);\n+\ttree arg2 = TREE_OPERAND (expr, 2);\n+\tif (! VOID_TYPE_P (TREE_TYPE (arg1)))\n+\t  arg1 = ffe_truthvalue_conversion (arg1);\n+\tif (! VOID_TYPE_P (TREE_TYPE (arg2)))\n+\t  arg2 = ffe_truthvalue_conversion (arg2);\n+\treturn fold (build (COND_EXPR, integer_type_node,\n+\t\t\t    TREE_OPERAND (expr, 0), arg1, arg2));\n+      }\n \n     case CONVERT_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,"}, {"sha": "c08d44e1e3ec7cc14e6e7c8df74d06f44e420a76", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9402f6fb7450c77691ef079abae90b2130a65117/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9402f6fb7450c77691ef079abae90b2130a65117", "patch": "@@ -4456,15 +4456,23 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n \t we simply build `a, throw 3'.  */\n       if (VOID_TYPE_P (TREE_TYPE (true_value)))\n \t{\n-\t  lhs_code = COMPOUND_EXPR;\n-\t  if (!cond_first_p)\n-\t    lhs_type = void_type_node;\n+\t  if (! cond_first_p)\n+\t    {\n+\t      lhs_code = COMPOUND_EXPR;\n+\t      lhs_type = void_type_node;\n+\t    }\n+\t  else\n+\t    lhs = true_value;\n \t}\n       if (VOID_TYPE_P (TREE_TYPE (false_value)))\n \t{\n-\t  rhs_code = COMPOUND_EXPR;\n-\t  if (!cond_first_p)\n-\t    rhs_type = void_type_node;\n+\t  if (! cond_first_p)\n+\t    {\n+\t      rhs_code = COMPOUND_EXPR;\n+\t      rhs_type = void_type_node;\n+\t    }\n+\t  else\n+\t    rhs = false_value;\n \t}\n     }\n   else\n@@ -4491,7 +4499,8 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n \n   if (TREE_CODE (arg) == SAVE_EXPR)\n     save = 1;\n-  else if (!TREE_CONSTANT (arg)\n+  else if (lhs == 0 && rhs == 0\n+\t   && !TREE_CONSTANT (arg)\n \t   && (*lang_hooks.decls.global_bindings_p) () == 0\n \t   && ((TREE_CODE (arg) != VAR_DECL && TREE_CODE (arg) != PARM_DECL)\n \t       || TREE_SIDE_EFFECTS (arg)))\n@@ -4726,9 +4735,14 @@ fold (expr)\n \t\t      fold (build1 (code, type, TREE_OPERAND (arg0, 1))));\n       else if (TREE_CODE (arg0) == COND_EXPR)\n \t{\n+\t  tree arg01 = TREE_OPERAND (arg0, 1);\n+\t  tree arg02 = TREE_OPERAND (arg0, 2);\n+\t  if (! VOID_TYPE_P (TREE_TYPE (arg01)))\n+\t    arg01 = fold (build1 (code, type, arg01));\n+\t  if (! VOID_TYPE_P (TREE_TYPE (arg02)))\n+\t    arg02 = fold (build1 (code, type, arg02));\n \t  t = fold (build (COND_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t\t   fold (build1 (code, type, TREE_OPERAND (arg0, 1))),\n-\t\t\t   fold (build1 (code, type, TREE_OPERAND (arg0, 2)))));\n+\t\t\t   arg01, arg02));\n \n \t  /* If this was a conversion, and all we did was to move into\n \t     inside the COND_EXPR, bring it back out.  But leave it if\n@@ -4744,6 +4758,8 @@ fold (expr)\n \t      && TREE_CODE (t) == COND_EXPR\n \t      && TREE_CODE (TREE_OPERAND (t, 1)) == code\n \t      && TREE_CODE (TREE_OPERAND (t, 2)) == code\n+\t      && ! VOID_TYPE_P (TREE_OPERAND (t, 1))\n+\t      && ! VOID_TYPE_P (TREE_OPERAND (t, 2))\n \t      && (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 1), 0))\n \t\t  == TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 2), 0)))\n \t      && ! (INTEGRAL_TYPE_P (TREE_TYPE (t))"}]}