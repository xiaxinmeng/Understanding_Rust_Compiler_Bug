{"sha": "4469188ce7f228902629595941e1c2ff24b9c4d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2OTE4OGNlN2YyMjg5MDI2Mjk1OTU5NDFlMWMyZmYyNGI5YzRkNg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2018-12-19T02:25:48Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2018-12-19T02:25:48Z"}, "message": "auto-profile.c (afdo_indirect_call): Skip generating histogram value if we can't find cgraph_node for then...\n\n\t* auto-profile.c (afdo_indirect_call): Skip generating histogram\n\tvalue if we can't find cgraph_node for then indirected callee.  Save\n\tprofile_id of the cgraph_node in histogram value's first counter.\n\t* value-prof.c (gimple_value_profile_transformations): Don't skip\n\tfor flag_auto_profile.\n\nFrom-SVN: r267249", "tree": {"sha": "aa059a871483743547d34a928ed13ef753272f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa059a871483743547d34a928ed13ef753272f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4469188ce7f228902629595941e1c2ff24b9c4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4469188ce7f228902629595941e1c2ff24b9c4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4469188ce7f228902629595941e1c2ff24b9c4d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4469188ce7f228902629595941e1c2ff24b9c4d6/comments", "author": null, "committer": null, "parents": [{"sha": "0fb778bcdac1f7c012215971d65edd91d02f606e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb778bcdac1f7c012215971d65edd91d02f606e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb778bcdac1f7c012215971d65edd91d02f606e"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "12e8f0540bc8cf9fa66fd1ac5c539abc289da883", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4469188ce7f228902629595941e1c2ff24b9c4d6", "patch": "@@ -1,3 +1,11 @@\n+2018-12-19  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* auto-profile.c (afdo_indirect_call): Skip generating histogram\n+\tvalue if we can't find cgraph_node for then indirected callee.  Save\n+\tprofile_id of the cgraph_node in histogram value's first counter.\n+\t* value-prof.c (gimple_value_profile_transformations): Don't skip\n+\tfor flag_auto_profile.\n+\n 2018-12-18  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/87759"}, {"sha": "f22395ec8f552dd38dae700f846c6ba3ca56d006", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=4469188ce7f228902629595941e1c2ff24b9c4d6", "patch": "@@ -992,14 +992,6 @@ afdo_indirect_call (gimple_stmt_iterator *gsi, const icall_target_map &map,\n       || gimple_call_fndecl (stmt) != NULL_TREE)\n     return;\n \n-  callee = gimple_call_fn (stmt);\n-\n-  histogram_value hist = gimple_alloc_histogram_value (\n-      cfun, HIST_TYPE_INDIR_CALL, stmt, callee);\n-  hist->n_counters = 3;\n-  hist->hvalue.counters = XNEWVEC (gcov_type, hist->n_counters);\n-  gimple_add_histogram_value (cfun, stmt, hist);\n-\n   gcov_type total = 0;\n   icall_target_map::const_iterator max_iter = map.end ();\n \n@@ -1010,9 +1002,20 @@ afdo_indirect_call (gimple_stmt_iterator *gsi, const icall_target_map &map,\n       if (max_iter == map.end () || max_iter->second < iter->second)\n         max_iter = iter;\n     }\n+  struct cgraph_node *direct_call = cgraph_node::get_for_asmname (\n+      get_identifier (afdo_string_table->get_name (max_iter->first)));\n+  if (direct_call == NULL || !direct_call->profile_id)\n+    return;\n \n-  hist->hvalue.counters[0]\n-      = (unsigned long long)afdo_string_table->get_name (max_iter->first);\n+  callee = gimple_call_fn (stmt);\n+\n+  histogram_value hist = gimple_alloc_histogram_value (\n+      cfun, HIST_TYPE_INDIR_CALL, stmt, callee);\n+  hist->n_counters = 3;\n+  hist->hvalue.counters = XNEWVEC (gcov_type, hist->n_counters);\n+  gimple_add_histogram_value (cfun, stmt, hist);\n+\n+  hist->hvalue.counters[0] = direct_call->profile_id;\n   hist->hvalue.counters[1] = max_iter->second;\n   hist->hvalue.counters[2] = total;\n \n@@ -1021,8 +1024,6 @@ afdo_indirect_call (gimple_stmt_iterator *gsi, const icall_target_map &map,\n \n   struct cgraph_edge *indirect_edge\n       = cgraph_node::get (current_function_decl)->get_edge (stmt);\n-  struct cgraph_node *direct_call = cgraph_node::get_for_asmname (\n-      get_identifier ((const char *) hist->hvalue.counters[0]));\n \n   if (dump_file)\n     {"}, {"sha": "2f39ede806a64547f010c6101a4d372b8539f413", "filename": "gcc/value-prof.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4469188ce7f228902629595941e1c2ff24b9c4d6/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=4469188ce7f228902629595941e1c2ff24b9c4d6", "patch": "@@ -627,11 +627,6 @@ gimple_value_profile_transformations (void)\n   gimple_stmt_iterator gsi;\n   bool changed = false;\n \n-  /* Autofdo does its own transformations for indirect calls,\n-     and otherwise does not support value profiling.  */\n-  if (flag_auto_profile)\n-    return false;\n-\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}]}