{"sha": "208486094c513ef53ad5d4679286cea9aafe6dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA4NDg2MDk0YzUxM2VmNTNhZDVkNDY3OTI4NmNlYTlhYWZlNmRkNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-29T12:09:30Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-29T12:09:30Z"}, "message": "avr-protos.h (avr_output_bld): Remove unused prototype.\n\n\t* config/avr/avr-protos.h (avr_output_bld): Remove unused prototype.\n\t* config/avr/avr.c (avr_output_bld): Remove unused function.\n\t(avr_out_sbxx_branch): Use \"%T\" to print bit position.\n\nFrom-SVN: r184660", "tree": {"sha": "d3ebb9f572a568d288b0a6c0395895b7f3d072b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ebb9f572a568d288b0a6c0395895b7f3d072b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/208486094c513ef53ad5d4679286cea9aafe6dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208486094c513ef53ad5d4679286cea9aafe6dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208486094c513ef53ad5d4679286cea9aafe6dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208486094c513ef53ad5d4679286cea9aafe6dd5/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e8bcf454d87488314530a6b8b3ab515c587de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e8bcf454d87488314530a6b8b3ab515c587de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e8bcf454d87488314530a6b8b3ab515c587de3"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "8b5ec1db1a913f1cda63bd46687f22ed766df985", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=208486094c513ef53ad5d4679286cea9aafe6dd5", "patch": "@@ -1,3 +1,9 @@\n+2012-02-29  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (avr_output_bld): Remove unused prototype.\n+\t* config/avr/avr.c (avr_output_bld): Remove unused function.\n+\t(avr_out_sbxx_branch): Use \"%T\" to print bit position.\n+\n 2012-02-29  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md: Untabify."}, {"sha": "f9e893d14f9c6ceaacb84db6f2600c4dd30c4688", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=208486094c513ef53ad5d4679286cea9aafe6dd5", "patch": "@@ -83,7 +83,6 @@ extern bool avr_emit_movmemhi (rtx*);\n extern int avr_epilogue_uses (int regno);\n extern int avr_starting_frame_offset (void);\n \n-extern void avr_output_bld (rtx operands[], int bit_nr);\n extern void avr_output_addr_vec_elt (FILE *stream, int value);\n extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n extern const char* avr_out_bitop (rtx, rtx*, int*);"}, {"sha": "b287d7c7e7a92f1a7bfbcf5b8fa65dbde49df65a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208486094c513ef53ad5d4679286cea9aafe6dd5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=208486094c513ef53ad5d4679286cea9aafe6dd5", "patch": "@@ -9503,15 +9503,6 @@ avr_out_reload_inpsi (rtx *op, rtx clobber_reg, int *len)\n   return \"\";\n }\n \n-void\n-avr_output_bld (rtx operands[], int bit_nr)\n-{\n-  static char s[] = \"bld %A0,0\";\n-\n-  s[5] = 'A' + (bit_nr >> 3);\n-  s[8] = '0' + (bit_nr & 7);\n-  output_asm_insn (s, operands);\n-}\n \n void\n avr_output_addr_vec_elt (FILE *stream, int value)\n@@ -9626,23 +9617,10 @@ avr_out_sbxx_branch (rtx insn, rtx operands[])\n \n     case REG:\n \n-      if (GET_MODE (operands[1]) == QImode)\n-        {\n-          if (comp == EQ)\n-            output_asm_insn (\"sbrs %1,%2\", operands);\n-          else\n-            output_asm_insn (\"sbrc %1,%2\", operands);\n-        }\n-      else  /* HImode, PSImode or SImode */\n-        {\n-          static char buf[] = \"sbrc %A1,0\";\n-          unsigned int bit_nr = UINTVAL (operands[2]);\n-\n-          buf[3] = (comp == EQ) ? 's' : 'c';\n-          buf[6] = 'A' + (bit_nr / 8);\n-          buf[9] = '0' + (bit_nr % 8);\n-          output_asm_insn (buf, operands);\n-        }\n+      if (comp == EQ)\n+        output_asm_insn (\"sbrs %T1%T2\", operands);\n+      else\n+        output_asm_insn (\"sbrc %T1%T2\", operands);\n \n       break; /* REG */\n     }        /* switch */"}]}