{"sha": "44cfd5120cc2a22315cef9458572ccfb3b7c560a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjZmQ1MTIwY2MyYTIyMzE1Y2VmOTQ1ODU3MmNjZmIzYjdjNTYwYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-02-20T18:44:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-02-20T18:44:54Z"}, "message": "pa.md (zero extension patterns): Turn into a define_expand and define_insn pair.\n\n        * pa/pa.md (zero extension patterns): Turn into a define_expand and\n        define_insn pair.\n\nFrom-SVN: r13670", "tree": {"sha": "e412c449561d40cfed7cf301fa773dd392d58af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e412c449561d40cfed7cf301fa773dd392d58af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44cfd5120cc2a22315cef9458572ccfb3b7c560a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cfd5120cc2a22315cef9458572ccfb3b7c560a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cfd5120cc2a22315cef9458572ccfb3b7c560a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cfd5120cc2a22315cef9458572ccfb3b7c560a/comments", "author": null, "committer": null, "parents": [{"sha": "d66dec28ec8f045774cc765f1c3bcf8a469db1b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66dec28ec8f045774cc765f1c3bcf8a469db1b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66dec28ec8f045774cc765f1c3bcf8a469db1b2"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "cab1f8a6b7dded1bf7177e2e6b252f3800657edf", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cfd5120cc2a22315cef9458572ccfb3b7c560a/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cfd5120cc2a22315cef9458572ccfb3b7c560a/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=44cfd5120cc2a22315cef9458572ccfb3b7c560a", "patch": "@@ -2648,34 +2648,59 @@\n \f\n \n ;;- zero extension instructions\n+;; We have define_expand for zero extension patterns to make sure the\n+;; operands get loaded into registers.  The define_insns accept\n+;; memory operands.  This gives us better overall code than just\n+;; having a pattern that does or does not accept memory operands.\n \n-(define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI\n-\t (match_operand:HI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n+\t (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI\n+\t (match_operand:HI 1 \"move_operand\" \"r,RQ\")))]\n+  \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    extru %1,31,16,%0\n    ldh%M1 %1,%0\"\n   [(set_attr \"type\" \"shift,load\")\n    (set_attr \"length\" \"4,4\")])\n \n-(define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+(define_expand \"zero_extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(zero_extend:HI\n-\t (match_operand:QI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n+\t (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:HI\n+\t (match_operand:QI 1 \"move_operand\" \"r,RQ\")))]\n+  \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    extru %1,31,8,%0\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"shift,load\")\n    (set_attr \"length\" \"4,4\")])\n \n-(define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+(define_expand \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI\n-\t (match_operand:QI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n+\t (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI\n+\t (match_operand:QI 1 \"move_operand\" \"r,RQ\")))]\n+  \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    extru %1,31,8,%0\n    ldb%M1 %1,%0\""}]}