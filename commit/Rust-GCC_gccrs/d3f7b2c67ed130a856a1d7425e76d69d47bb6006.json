{"sha": "d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNmN2IyYzY3ZWQxMzBhODU2YTFkNzQyNWU3NmQ2OWQ0N2JiNjAwNg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-29T16:05:27Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-29T16:05:27Z"}, "message": "re PR c++/26997 (g++ reports misleading  error message when the identifier with error occurs earlier on the same line)\n\n2008-10-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/26997\ncp/\n\t* parser.c (cp_parser_token_starts_cast_expression): New.\n\t(cp_parser_cast_expression): Peek the next token to decide whether\n\tthis could be a parenthesized constructor or is definitely an\n\tactual cast.\ntestsuite/\n\t* g++.dg/parse/pr26997.C: New.\n\nFrom-SVN: r141429", "tree": {"sha": "9c49a5c382331cf9f1fdb138bf377d7c9a3eb901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c49a5c382331cf9f1fdb138bf377d7c9a3eb901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/comments", "author": null, "committer": null, "parents": [{"sha": "e49cf927540b9eda4c905538d401fa0c27cd174a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49cf927540b9eda4c905538d401fa0c27cd174a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49cf927540b9eda4c905538d401fa0c27cd174a"}], "stats": {"total": 140, "additions": 130, "deletions": 10}, "files": [{"sha": "5115c1b6237fd2d27ef5255700ee4be749e67dbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "patch": "@@ -1,3 +1,11 @@\n+2008-10-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/26997\n+\t* parser.c (cp_parser_token_starts_cast_expression): New.\n+\t(cp_parser_cast_expression): Peek the next token to decide whether\n+\tthis could be a parenthesized constructor or is definitely an\n+\tactual cast.\n+\n 2008-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/7543"}, {"sha": "40f2a3a11ecd36bdda2235dbb595a6b43a9eb734", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "patch": "@@ -5910,6 +5910,60 @@ cp_parser_delete_expression (cp_parser* parser)\n   return delete_sanity (expression, NULL_TREE, array_p, global_scope_p);\n }\n \n+/* Returns true if TOKEN may start a cast-expression and false\n+   otherwise.  */\n+\n+static bool\n+cp_parser_token_starts_cast_expression (cp_token *token)\n+{\n+  switch (token->type)\n+    {\n+    case CPP_COMMA:\n+    case CPP_SEMICOLON:\n+    case CPP_QUERY:\n+    case CPP_COLON:\n+    case CPP_CLOSE_SQUARE:\n+    case CPP_CLOSE_PAREN:\n+    case CPP_CLOSE_BRACE:\n+    case CPP_DOT:\n+    case CPP_DOT_STAR:\n+    case CPP_DEREF:\n+    case CPP_DEREF_STAR:\n+    case CPP_DIV:\n+    case CPP_MOD:\n+    case CPP_LSHIFT:\n+    case CPP_RSHIFT:\n+    case CPP_LESS:\n+    case CPP_GREATER:\n+    case CPP_LESS_EQ:\n+    case CPP_GREATER_EQ:\n+    case CPP_EQ_EQ:\n+    case CPP_NOT_EQ:\n+    case CPP_EQ:\n+    case CPP_MULT_EQ:\n+    case CPP_DIV_EQ:\n+    case CPP_MOD_EQ:\n+    case CPP_PLUS_EQ:\n+    case CPP_MINUS_EQ:\n+    case CPP_RSHIFT_EQ:\n+    case CPP_LSHIFT_EQ:\n+    case CPP_AND_EQ:\n+    case CPP_XOR_EQ:\n+    case CPP_OR_EQ:\n+    case CPP_XOR:\n+    case CPP_OR:\n+    case CPP_OR_OR:\n+      return false;\n+\n+      /* '[' may start a primary-expression in obj-c++.  */\n+    case CPP_OPEN_SQUARE:\n+      return c_dialect_objc ();\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Parse a cast-expression.\n \n    cast-expression:\n@@ -5988,17 +6042,18 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n       /* Restore the saved message.  */\n       parser->type_definition_forbidden_message = saved_message;\n \n-      /* If ok so far, parse the dependent expression. We cannot be\n-\t sure it is a cast. Consider `(T ())'.  It is a parenthesized\n-\t ctor of T, but looks like a cast to function returning T\n-\t without a dependent expression.  */\n-      if (!cp_parser_error_occurred (parser))\n-\texpr = cp_parser_cast_expression (parser,\n-\t\t\t\t\t  /*address_p=*/false,\n-\t\t\t\t\t  /*cast_p=*/true);\n-\n-      if (cp_parser_parse_definitely (parser))\n+      /* At this point this can only be either a cast or a\n+\t parenthesized ctor such as `(T ())' that looks like a cast to\n+\t function returning T.  */\n+      if (!cp_parser_error_occurred (parser)\n+\t  && cp_parser_token_starts_cast_expression (cp_lexer_peek_token\n+\t\t\t\t\t\t     (parser->lexer)))\n \t{\n+\t  cp_parser_parse_definitely (parser);\n+\t  expr = cp_parser_cast_expression (parser,\n+\t\t\t\t\t    /*address_p=*/false,\n+\t\t\t\t\t    /*cast_p=*/true);\n+\n \t  /* Warn about old-style casts, if so requested.  */\n \t  if (warn_old_style_cast\n \t      && !in_system_header\n@@ -6019,6 +6074,8 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t  expr = build_c_cast (type, expr);\n \t  return expr;\n \t}\n+      else \n+        cp_parser_abort_tentative_parse (parser);\n     }\n \n   /* If we get here, then it's not a cast, so it must be a"}, {"sha": "2a863f3cb47b12d88793e0d638be6dfa7ce9efdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "patch": "@@ -1,3 +1,8 @@\n+2008-10-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/26997\n+\t* g++.dg/parse/pr26997.C: New.\n+\n 2008-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37913"}, {"sha": "acd1e07be34626fdbe89db103c0c909557200649", "filename": "gcc/testsuite/g++.dg/parse/pr26997.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f7b2c67ed130a856a1d7425e76d69d47bb6006/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C?ref=d3f7b2c67ed130a856a1d7425e76d69d47bb6006", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/26997\n+// { dg-do compile }\n+void * malloc (unsigned long size);\n+typedef struct { int a; } t;\n+\n+void foo()\n+{\n+  t *v3;\n+  v3 = (t *)\n+    malloc(\n+\t   sizeof(t) \n+\t   * \n+           t->a // { dg-error \"before '->' token\" }\n+\t   );\n+}\n+\n+class C {\n+public:\n+  void operator[](int);\n+};\n+\n+C bar (void)\n+{\n+  (C ())(3); // { dg-error \"invalid cast\" } \n+  return (C ());\n+}\n+\n+extern void baz (C,C);\n+\n+void foo1 (void)\n+{\n+  baz ((C()), (C()));\n+}\n+\n+struct S {\n+  void operator()(int);\n+};\n+\n+int *var;\n+void foo2 (void)\n+{\n+  C ()[2];\n+  (C ())[2];\n+  (S ())(3); // { dg-error \"invalid cast\" } \n+  (C())*var; // { dg-error \"invalid cast\" } \n+  (C())+var;  // { dg-error \"invalid cast\" } \n+  S()(3);\n+  (S()(3));\n+}\n+"}]}