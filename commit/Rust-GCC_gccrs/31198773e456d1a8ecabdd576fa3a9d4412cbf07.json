{"sha": "31198773e456d1a8ecabdd576fa3a9d4412cbf07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExOTg3NzNlNDU2ZDFhOGVjYWJkZDU3NmZhM2E5ZDQ0MTJjYmYwNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-11-17T11:11:25Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-11-17T11:11:25Z"}, "message": "gfortran.h (gfc_add_intrinsic_modules_path, [...]): New prototypes.\n\n\t* gfortran.h (gfc_add_intrinsic_modules_path,\n\tgfc_open_intrinsic_module): New prototypes.\n\t(gfc_add_include_path, gfc_open_included_file): Update prototypes.\n\t* lang.opt: Add -fintrinsic-modules-path option.\n\t* module.c (gfc_match_use): Match the Fortran 2003 form of\n\tUSE statement.\n\t(gfc_use_module): Also handle intrinsic modules. \n\t* scanner.c (gfc_directorylist): Add use_for_modules for field.\n\t(intrinsic_modules_dirs): New static variable.\n\t(add_path_to_list, gfc_add_intrinsic_modules_path): New functions.\n\t(gfc_add_include_path): Use the new add_path_to_list helper\n\tfunction.\n\t(gfc_release_include_path): Free memory for intrinsic_modules_dirs.\n\t(open_included_file, gfc_open_intrinsic_module): New functions.\n\t(gfc_open_included_file): Use the new open_included_file\n\thelper function.\n\t* lang-specs.h: Use the new -fintrinsic-modules-path option.\n\t* parse.c (decode_statement): Do not match the required space\n\tafter USE here.\n\t* options.c (gfc_handle_option): Handle the new option. Use new\n\tprototype for gfc_add_include_path.\n\t(gfc_post_options): Use new prototype for gfc_add_include_path.\n\n\t* gfortran.dg/use_1.f90: New test.\n\t* gfortran.dg/use_1.f90: New test.\n\t* gfortran.dg/use_1.f90: New test.\n\nFrom-SVN: r118930", "tree": {"sha": "2eedcb4f55a3cf78d29fa8c589d673751e940362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eedcb4f55a3cf78d29fa8c589d673751e940362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31198773e456d1a8ecabdd576fa3a9d4412cbf07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31198773e456d1a8ecabdd576fa3a9d4412cbf07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31198773e456d1a8ecabdd576fa3a9d4412cbf07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31198773e456d1a8ecabdd576fa3a9d4412cbf07/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd6112c5a2585eb58564f583ad84da87fe27d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd6112c5a2585eb58564f583ad84da87fe27d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd6112c5a2585eb58564f583ad84da87fe27d3a"}], "stats": {"total": 258, "additions": 225, "deletions": 33}, "files": [{"sha": "281539573bb07338e7950bed737c45119a1c4852", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -1,3 +1,28 @@\n+2006-11-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.h (gfc_add_intrinsic_modules_path,\n+\tgfc_open_intrinsic_module): New prototypes.\n+\t(gfc_add_include_path, gfc_open_included_file): Update prototypes.\n+\t* lang.opt: Add -fintrinsic-modules-path option.\n+\t* module.c (gfc_match_use): Match the Fortran 2003 form of\n+\tUSE statement.\n+\t(gfc_use_module): Also handle intrinsic modules. \n+\t* scanner.c (gfc_directorylist): Add use_for_modules for field.\n+\t(intrinsic_modules_dirs): New static variable.\n+\t(add_path_to_list, gfc_add_intrinsic_modules_path): New functions.\n+\t(gfc_add_include_path): Use the new add_path_to_list helper\n+\tfunction.\n+\t(gfc_release_include_path): Free memory for intrinsic_modules_dirs.\n+\t(open_included_file, gfc_open_intrinsic_module): New functions.\n+\t(gfc_open_included_file): Use the new open_included_file\n+\thelper function.\n+\t* lang-specs.h: Use the new -fintrinsic-modules-path option.\n+\t* parse.c (decode_statement): Do not match the required space\n+\tafter USE here.\n+\t* options.c (gfc_handle_option): Handle the new option. Use new\n+\tprototype for gfc_add_include_path.\n+\t(gfc_post_options): Use new prototype for gfc_add_include_path.\n+\n 2006-11-16  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/29391"}, {"sha": "f33d2ee50b5ac09a8a78cf0e845c90fc6d3285fb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -1709,9 +1709,11 @@ void gfc_advance_section (mpz_t *, gfc_array_ref *, mpz_t *);\n void gfc_scanner_done_1 (void);\n void gfc_scanner_init_1 (void);\n \n-void gfc_add_include_path (const char *);\n+void gfc_add_include_path (const char *, bool);\n+void gfc_add_intrinsic_modules_path (const char *);\n void gfc_release_include_path (void);\n-FILE *gfc_open_included_file (const char *, bool);\n+FILE *gfc_open_included_file (const char *, bool, bool);\n+FILE *gfc_open_intrinsic_module (const char *);\n \n int gfc_at_end (void);\n int gfc_at_eof (void);"}, {"sha": "56e55a1517f36e80dad7f2fcae3df76ae6fe1347", "filename": "gcc/fortran/lang-specs.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang-specs.h?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -15,21 +15,21 @@ This file is licensed under the GPL.  */\n       %{E|M|MM:%(cpp_debug_options)}\\\n       %{!M:%{!MM:%{!E: -o %|.f |\\n\\\n     f951 %|.f %{!ffree-form:-ffixed-form} %(cc1_options) %{J*} %{I*}\\\n-      -fpreprocessed %{!nostdinc:-I finclude%s} %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+      -fpreprocessed %{!nostdinc:-fintrinsic-modules-path finclude%s} %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n {\".F90\", \"@f95-cpp-input\", 0, 0, 0},\n {\".F95\", \"@f95-cpp-input\", 0, 0, 0},\n {\"@f95-cpp-input\",\n   \"cc1 -E -lang-fortran -traditional-cpp -D_LANGUAGE_FORTRAN %(cpp_options) \\\n       %{E|M|MM:%(cpp_debug_options)}\\\n       %{!M:%{!MM:%{!E: -o %|.f95 |\\n\\\n     f951 %|.f95 %{!ffixed-form:-ffree-form} %(cc1_options) %{J*} %{I*}\\\n-      -fpreprocessed %{!nostdinc:-I finclude%s} %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+      -fpreprocessed %{!nostdinc:-fintrinsic-modules-path finclude%s} %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n {\".f90\", \"@f95\", 0, 0, 0},\n {\".f95\", \"@f95\", 0, 0, 0},\n {\"@f95\", \"%{!E:f951 %i %(cc1_options) %{J*} %{I*}\\\n-         %{!nostdinc:-I finclude%s} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n+         %{!nostdinc:-fintrinsic-modules-path finclude%s} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n {\".f\",   \"@f77\", 0, 0, 0},\n {\".for\", \"@f77\", 0, 0, 0},\n {\".FOR\", \"@f77\", 0, 0, 0},\n {\"@f77\", \"%{!E:f951 %i %{!ffree-form:-ffixed-form} %(cc1_options) %{J*} %{I*}\\\n-         %{!nostdinc:-I finclude%s} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n+         %{!nostdinc:-fintrinsic-modules-path finclude%s} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},"}, {"sha": "053f63b00191aca47a3b5b7976bf7c914162a0a1", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -149,6 +149,10 @@ ffixed-form\n Fortran RejectNegative\n Assume that the source file is fixed form\n \n+fintrinsic-modules-path\n+Fortran RejectNegative Joined Separate\n+Specify where to find the compiled intrinsic modules\n+\n ffixed-line-length-none\n Fortran RejectNegative\n Allow arbitrary character line width in fixed mode"}, {"sha": "dd103b896f419d0c0240650f00166f3f33daa77f", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -173,6 +173,9 @@ static FILE *module_fp;\n /* The name of the module we're reading (USE'ing) or writing.  */\n static char module_name[GFC_MAX_SYMBOL_LEN + 1];\n \n+/* The way the module we're reading was specified.  */\n+static bool specified_nonint, specified_int;\n+\n static int module_line, module_column, only_flag;\n static enum\n { IO_INPUT, IO_OUTPUT }\n@@ -483,12 +486,65 @@ free_rename (void)\n match\n gfc_match_use (void)\n {\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  char name[GFC_MAX_SYMBOL_LEN + 1], module_nature[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_use_rename *tail = NULL, *new;\n   interface_type type;\n   gfc_intrinsic_op operator;\n   match m;\n \n+  specified_int = false;\n+  specified_nonint = false;\n+\n+  if (gfc_match (\" , \") == MATCH_YES)\n+    {\n+      if ((m = gfc_match (\" %n ::\", module_nature)) == MATCH_YES)\n+       {\n+         if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: module \"\n+                             \"nature in USE statement at %C\") == FAILURE)\n+           return MATCH_ERROR;\n+\n+         if (strcmp (module_nature, \"intrinsic\") == 0)\n+           specified_int = true;\n+         else\n+           {\n+             if (strcmp (module_nature, \"non_intrinsic\") == 0)\n+               specified_nonint = true;\n+             else\n+               {\n+                 gfc_error (\"Module nature in USE statement at %C shall \"\n+                            \"be either INTRINSIC or NON_INTRINSIC\");\n+                 return MATCH_ERROR;\n+               }\n+           }\n+\t}\n+      else\n+\t{\n+\t  /* Help output a better error message than \"Unclassifiable\n+\t     statement\".  */\n+\t  gfc_match (\" %n\", module_nature);\n+\t  if (strcmp (module_nature, \"intrinsic\") == 0\n+\t      || strcmp (module_nature, \"non_intrinsic\") == 0)\n+\t    gfc_error (\"\\\"::\\\" was expected after module nature at %C \"\n+\t\t       \"but was not found\");\n+\t  return m;\n+\t}\n+    }\n+  else\n+    {\n+      m = gfc_match (\" ::\");\n+      if (m == MATCH_YES &&\n+\t  gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: \"\n+\t\t\t  \"\\\"USE :: module\\\" at %C\") == FAILURE)\n+\treturn MATCH_ERROR;\n+\n+      if (m != MATCH_YES)\n+       {\n+         m = gfc_match (\"% \");\n+         if (m != MATCH_YES)\n+           return m;\n+       }\n+    }\n+\n   m = gfc_match_name (module_name);\n   if (m != MATCH_YES)\n     return m;\n@@ -3801,7 +3857,33 @@ gfc_use_module (void)\n   strcpy (filename, module_name);\n   strcat (filename, MODULE_EXTENSION);\n \n-  module_fp = gfc_open_included_file (filename, true);\n+  /* First, try to find an non-intrinsic module, unless the USE statement\n+     specified that the module is intrinsic.  */\n+  module_fp = NULL;\n+  if (!specified_int)\n+    module_fp = gfc_open_included_file (filename, true, true);\n+\n+  /* Then, see if it's an intrinsic one, unless the USE statement\n+     specified that the module is non-intrinsic.  */\n+  if (module_fp == NULL && !specified_nonint)\n+    {\n+#if 0\n+      if (strcmp (module_name, \"iso_fortran_env\") == 0\n+         && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: \"\n+                            \"ISO_FORTRAN_ENV intrinsic module at %C\") != FAILURE)\n+       {\n+         use_iso_fortran_env_module ();\n+         return;\n+       }\n+#endif\n+\n+      module_fp = gfc_open_intrinsic_module (filename);\n+\n+      if (module_fp == NULL && specified_int)\n+       gfc_fatal_error (\"Can't find an intrinsic module named '%s' at %C\",\n+                        module_name);\n+    }\n+\n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for reading at %C: %s\",\n \t\t     filename, strerror (errno));"}, {"sha": "f03319bbcea66e1985aafc4f6b8c86eb81d8bc2e", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -217,10 +217,10 @@ gfc_post_options (const char **pfilename)\n       source_path = alloca (i + 1);\n       memcpy (source_path, canon_source_file, i);\n       source_path[i] = 0;\n-      gfc_add_include_path (source_path);\n+      gfc_add_include_path (source_path, true);\n     }\n   else\n-    gfc_add_include_path (\".\");\n+    gfc_add_include_path (\".\", true);\n \n   if (canon_source_file != gfc_source_file)\n     gfc_free ((void *) canon_source_file);\n@@ -511,6 +511,11 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_implicit_none = value;\n       break;\n \n+    case OPT_fintrinsic_modules_path:\n+      gfc_add_include_path (arg, false);\n+      gfc_add_intrinsic_modules_path (arg);\n+      break;\n+\n     case OPT_fmax_errors_:\n       gfc_option.max_errors = value;\n       break;\n@@ -555,7 +560,7 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_I:\n-      gfc_add_include_path (arg);\n+      gfc_add_include_path (arg, true);\n       break;\n \n     case OPT_J:"}, {"sha": "1d02c2083e0d87edd6f6d35aecc1812288743c40", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -280,7 +280,7 @@ decode_statement (void)\n       break;\n \n     case 'u':\n-      match (\"use% \", gfc_match_use, ST_USE);\n+      match (\"use\", gfc_match_use, ST_USE);\n       break;\n \n     case 'v':"}, {"sha": "30d9b6f3b2c83babcfb9b2f3c4a4b1667ac50df2", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 64, "deletions": 21, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -51,12 +51,13 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n typedef struct gfc_directorylist\n {\n   char *path;\n+  bool use_for_modules;\n   struct gfc_directorylist *next;\n }\n gfc_directorylist;\n \n /* List of include file search directories.  */\n-static gfc_directorylist *include_dirs;\n+static gfc_directorylist *include_dirs, *intrinsic_modules_dirs;\n \n static gfc_file *file_head, *current_file;\n \n@@ -118,22 +119,21 @@ gfc_scanner_done_1 (void)\n \n /* Adds path to the list pointed to by list.  */\n \n-void\n-gfc_add_include_path (const char *path)\n+static void\n+add_path_to_list (gfc_directorylist **list, const char *path,\n+\t\t  bool use_for_modules)\n {\n   gfc_directorylist *dir;\n   const char *p;\n \n   p = path;\n-  while (*p == ' ' || *p == '\\t')  /* someone might do 'gfortran \"-I include\"' */\n+  while (*p == ' ' || *p == '\\t')  /* someone might do \"-I include\" */\n     if (*p++ == '\\0')\n       return;\n \n-  dir = include_dirs;\n+  dir = *list;\n   if (!dir)\n-    {\n-      dir = include_dirs = gfc_getmem (sizeof (gfc_directorylist));\n-    }\n+    dir = *list = gfc_getmem (sizeof (gfc_directorylist));\n   else\n     {\n       while (dir->next)\n@@ -144,12 +144,27 @@ gfc_add_include_path (const char *path)\n     }\n \n   dir->next = NULL;\n+  dir->use_for_modules = use_for_modules;\n   dir->path = gfc_getmem (strlen (p) + 2);\n   strcpy (dir->path, p);\n   strcat (dir->path, \"/\");\t/* make '/' last character */\n }\n \n \n+void\n+gfc_add_include_path (const char *path, bool use_for_modules)\n+{\n+  add_path_to_list (&include_dirs, path, use_for_modules);\n+}\n+\n+\n+void\n+gfc_add_intrinsic_modules_path (const char *path)\n+{\n+  add_path_to_list (&intrinsic_modules_dirs, path, true);\n+}\n+\n+\n /* Release resources allocated for options.  */\n \n void\n@@ -165,28 +180,30 @@ gfc_release_include_path (void)\n       gfc_free (p->path);\n       gfc_free (p);\n     }\n+\n+  gfc_free (gfc_option.module_dir);\n+  while (intrinsic_modules_dirs != NULL)\n+    {\n+      p = intrinsic_modules_dirs;\n+      intrinsic_modules_dirs = intrinsic_modules_dirs->next;\n+      gfc_free (p->path);\n+      gfc_free (p);\n+    }\n }\n \n-/* Opens file for reading, searching through the include directories\n-   given if necessary.  If the include_cwd argument is true, we try\n-   to open the file in the current directory first.  */\n \n-FILE *\n-gfc_open_included_file (const char *name, const bool include_cwd)\n+static FILE *\n+open_included_file (const char *name, gfc_directorylist *list, bool module)\n {\n   char *fullname;\n   gfc_directorylist *p;\n   FILE *f;\n \n-  if (include_cwd)\n+  for (p = list; p; p = p->next)\n     {\n-      f = gfc_open_file (name);\n-      if (f != NULL)\n-\treturn f;\n-    }\n+      if (module && !p->use_for_modules)\n+\tcontinue;\n \n-  for (p = include_dirs; p; p = p->next)\n-    {\n       fullname = (char *) alloca(strlen (p->path) + strlen (name) + 1);\n       strcpy (fullname, p->path);\n       strcat (fullname, name);\n@@ -199,6 +216,32 @@ gfc_open_included_file (const char *name, const bool include_cwd)\n   return NULL;\n }\n \n+\n+/* Opens file for reading, searching through the include directories\n+   given if necessary.  If the include_cwd argument is true, we try\n+   to open the file in the current directory first.  */\n+\n+FILE *\n+gfc_open_included_file (const char *name, bool include_cwd, bool module)\n+{\n+  FILE *f;\n+\n+  if (include_cwd)\n+    {\n+      f = gfc_open_file (name);\n+      if (f != NULL)\n+\treturn f;\n+    }\n+\n+  return open_included_file (name, include_dirs, module);\n+}\n+\n+FILE *\n+gfc_open_intrinsic_module (const char *name)\n+{\n+  return open_included_file (name, intrinsic_modules_dirs, true);\n+}\n+\n /* Test to see if we're at the end of the main source file.  */\n \n int\n@@ -1393,7 +1436,7 @@ load_file (const char *filename, bool initial)\n     }\n   else\n     {\n-      input = gfc_open_included_file (filename, false);\n+      input = gfc_open_included_file (filename, false, false);\n       if (input == NULL)\n \t{\n \t  gfc_error_now (\"Can't open included file '%s'\", filename);"}, {"sha": "02089e5e012bc5225b3b1e8e756ba286a64c8b42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -1,3 +1,9 @@\n+2006-11-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.dg/use_1.f90: New test.\n+\t* gfortran.dg/use_1.f90: New test.\n+\t* gfortran.dg/use_1.f90: New test.\n+\n 2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR tree-optimization/29801"}, {"sha": "94d5db283c318974752e420fe194c0dddf9b45a9", "filename": "gcc/testsuite/gfortran.dg/use_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_1.f90?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -0,0 +1,9 @@\n+      ! { dg-do compile }\n+      ! { dg-options \"-ffixed-form\" }\n+      module foo\n+      end module foo\n+\n+      subroutine bar1\n+      usefoo\n+      end\n+      ! { dg-final { cleanup-modules \"iso_fortran_env\" } }"}, {"sha": "48dcb8d7caa9497ca152805ac83a9ac20ddab917", "filename": "gcc/testsuite/gfortran.dg/use_2.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_2.f90?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+subroutine bar1\n+  usefoo ! { dg-error \"Unclassifiable statement\" }\n+end"}, {"sha": "504277f608490a19b9935fc9502f13539ba87c18", "filename": "gcc/testsuite/gfortran.dg/use_3.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31198773e456d1a8ecabdd576fa3a9d4412cbf07/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90?ref=31198773e456d1a8ecabdd576fa3a9d4412cbf07", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+module foo\n+end module foo\n+\n+  use foo\n+  use :: foo\n+  use, intrinsic iso_fortran_env ! { dg-error \"\\\"::\\\" was expected after module nature\" }\n+  use, non_intrinsic iso_fortran_env ! { dg-error \"\\\"::\\\" was expected after module nature\" }\n+  use, nonintrinsic :: iso_fortran_env ! { dg-error \"shall be either INTRINSIC or NON_INTRINSIC\" }\n+  use, intrinsic :: iso_fortran_env ! { dg-error \"Can't find an intrinsic module named\" }\n+end\n+! { dg-final { cleanup-modules \"foo\" } }"}]}