{"sha": "de0b553f86bcb8075ed37ba0529c153a4ade45e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwYjU1M2Y4NmJjYjgwNzVlZDM3YmEwNTI5YzE1M2E0YWRlNDVlNQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-03-23T11:20:03Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-03-23T11:20:03Z"}, "message": "parse.y (find_applicable_accessible_methods_list): When dealing with interface...\n\nTue Mar 23 10:48:24 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* parse.y (find_applicable_accessible_methods_list): When dealing\n \twith interface: ensure that a given interface or java.lang.Object\n \tare searched only once.\n\nFrom-SVN: r25925", "tree": {"sha": "6b7b5a8551a6f4c0b7c2122d941ba491f83fd1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7b5a8551a6f4c0b7c2122d941ba491f83fd1ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de0b553f86bcb8075ed37ba0529c153a4ade45e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0b553f86bcb8075ed37ba0529c153a4ade45e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0b553f86bcb8075ed37ba0529c153a4ade45e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0b553f86bcb8075ed37ba0529c153a4ade45e5/comments", "author": null, "committer": null, "parents": [{"sha": "bdeb987972a871db073eec013477400e188ead31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdeb987972a871db073eec013477400e188ead31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdeb987972a871db073eec013477400e188ead31"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "917b40313eb7896a08db291700bc4a79e5c05527", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=de0b553f86bcb8075ed37ba0529c153a4ade45e5", "patch": "@@ -1,3 +1,9 @@\n+Tue Mar 23 10:48:24 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (find_applicable_accessible_methods_list): When dealing\n+ \twith interface: ensure that a given interface or java.lang.Object\n+ \tare searched only once.\n+\n Tue Mar 23 10:05:27 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gjavah.c (print_c_decl): Remove unused argument `flags'."}, {"sha": "d8e35839fd2485ec7e7dbb8ade39f0e8f0e9f1ba", "filename": "gcc/java/parse.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=de0b553f86bcb8075ed37ba0529c153a4ade45e5", "patch": "@@ -2222,7 +2222,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/local/gnu/share/bison.simple\"\n+#line 3 \"/usr/lib/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2415,7 +2415,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/local/gnu/share/bison.simple\"\n+#line 196 \"/usr/lib/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -4680,7 +4680,7 @@ case 493:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/local/gnu/share/bison.simple\"\n+#line 498 \"/usr/lib/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -9771,20 +9771,49 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n   /* Search interfaces */\n   if (CLASS_INTERFACE (TYPE_NAME (class)))\n     {\n+      static tree searched_interfaces = NULL_TREE;\n+      static int search_not_done = 0;\n       int i, n;\n       tree basetype_vec = TYPE_BINFO_BASETYPES (class);\n \n+      /* Have we searched this interface already? */\n+      if (searched_interfaces)\n+\t{  \n+\t  tree current;  \n+\t  for (current = searched_interfaces; \n+\t       current; current = TREE_CHAIN (current))\n+\t    if (TREE_VALUE (current) == class)\n+\t      return NULL;\n+\t}\n+      searched_interfaces = tree_cons (NULL_TREE, class, searched_interfaces);\n+\n       search_applicable_methods_list \n \t(lc, TYPE_METHODS (class), name, arglist, &list, &all_list);\n \n       n = TREE_VEC_LENGTH (basetype_vec);\n       for (i = 0; i < n; i++)\n \t{\n-\t  tree rlist = \n-\t    find_applicable_accessible_methods_list \n-\t      (lc,  BINFO_TYPE (TREE_VEC_ELT (basetype_vec, i)), \n-\t       name, arglist);\n+\t  tree t = BINFO_TYPE (TREE_VEC_ELT (basetype_vec, i));\n+\t  tree rlist;\n+\n+\t  /* Skip java.lang.Object (we'll search it once later.) */\n+\t  if (t == object_type_node)\n+\t    continue;\n+\n+\t  search_not_done++;\n+\t  rlist = find_applicable_accessible_methods_list (lc,  t, name, \n+\t\t\t\t\t\t\t   arglist);\n \t  all_list = chainon (rlist, (list ? list : all_list)); \n+\t  search_not_done--;\n+\t}\n+\n+      /* We're done. Reset the searched interfaces list and finally search\n+         java.lang.Object */\n+      if (!search_not_done)\n+\t{  \n+\t  searched_interfaces = NULL_TREE;  \n+\t  search_applicable_methods_list (lc, TYPE_METHODS (object_type_node),\n+\t\t\t\t\t  name, arglist, &list, &all_list);\n \t}\n     }\n   /* Search classes */"}, {"sha": "1665f5697b85b86f8d08fef0477c28ae5781306a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0b553f86bcb8075ed37ba0529c153a4ade45e5/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=de0b553f86bcb8075ed37ba0529c153a4ade45e5", "patch": "@@ -7170,20 +7170,49 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n   /* Search interfaces */\n   if (CLASS_INTERFACE (TYPE_NAME (class)))\n     {\n+      static tree searched_interfaces = NULL_TREE;\n+      static int search_not_done = 0;\n       int i, n;\n       tree basetype_vec = TYPE_BINFO_BASETYPES (class);\n \n+      /* Have we searched this interface already? */\n+      if (searched_interfaces)\n+\t{  \n+\t  tree current;  \n+\t  for (current = searched_interfaces; \n+\t       current; current = TREE_CHAIN (current))\n+\t    if (TREE_VALUE (current) == class)\n+\t      return NULL;\n+\t}\n+      searched_interfaces = tree_cons (NULL_TREE, class, searched_interfaces);\n+\n       search_applicable_methods_list \n \t(lc, TYPE_METHODS (class), name, arglist, &list, &all_list);\n \n       n = TREE_VEC_LENGTH (basetype_vec);\n       for (i = 0; i < n; i++)\n \t{\n-\t  tree rlist = \n-\t    find_applicable_accessible_methods_list \n-\t      (lc,  BINFO_TYPE (TREE_VEC_ELT (basetype_vec, i)), \n-\t       name, arglist);\n+\t  tree t = BINFO_TYPE (TREE_VEC_ELT (basetype_vec, i));\n+\t  tree rlist;\n+\n+\t  /* Skip java.lang.Object (we'll search it once later.) */\n+\t  if (t == object_type_node)\n+\t    continue;\n+\n+\t  search_not_done++;\n+\t  rlist = find_applicable_accessible_methods_list (lc,  t, name, \n+\t\t\t\t\t\t\t   arglist);\n \t  all_list = chainon (rlist, (list ? list : all_list)); \n+\t  search_not_done--;\n+\t}\n+\n+      /* We're done. Reset the searched interfaces list and finally search\n+         java.lang.Object */\n+      if (!search_not_done)\n+\t{  \n+\t  searched_interfaces = NULL_TREE;  \n+\t  search_applicable_methods_list (lc, TYPE_METHODS (object_type_node),\n+\t\t\t\t\t  name, arglist, &list, &all_list);\n \t}\n     }\n   /* Search classes */"}]}