{"sha": "4892e31daceb8ab230768a15eb0a01b814e8bbfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5MmUzMWRhY2ViOGFiMjMwNzY4YTE1ZWIwYTAxYjgxNGU4YmJmZA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-03-11T22:20:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:16Z"}, "message": "[Ada] Warn on 'in out' param containing access in predefined private type\n\ngcc/ada/\n\n\t* sem_util.adb, sem_util.ads (Has_Access_Values): New formal\n\tInclude_Internal to indicate whether internal types should be\n\tincluded.\n\t* sem_warn.adb (Check_References): Change E_Out_Parameter to\n\tFormal_Kind, to match the comment about Spec_Entity.  Pass\n\tInclude_Internal => False to Has_Access_Values, so that we warn\n\ton types with access values that happen to be in internal types,\n\tsuch as Unbounded_String.\n\t* sem_attr.adb (Attribute_Has_Access_Values): Pass\n\tInclude_Internal => True to Has_Access_Values, to preserve\n\texisting behavior.\n\t* libgnat/g-rewdat.adb (Do_Output): Change B from 'in out' to\n\t'in', to avoid warning enabled by the change to sem_warn.adb.\n\t* libgnat/s-objrea.adb (Check_Read_Offset): Change S from 'in\n\tout' to 'in', to avoid warning enabled by the change to\n\tsem_warn.adb.", "tree": {"sha": "7e62b0dc7b8c8573f11816736330ce562553c3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e62b0dc7b8c8573f11816736330ce562553c3bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4892e31daceb8ab230768a15eb0a01b814e8bbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4892e31daceb8ab230768a15eb0a01b814e8bbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4892e31daceb8ab230768a15eb0a01b814e8bbfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4892e31daceb8ab230768a15eb0a01b814e8bbfd/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1dfbb03f98d5a039c996adaf60c076979d61d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dfbb03f98d5a039c996adaf60c076979d61d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1dfbb03f98d5a039c996adaf60c076979d61d18"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "3b4a0d02b4139845592a0d6efb6dd9b408076576", "filename": "gcc/ada/libgnat/g-rewdat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Flibgnat%2Fg-rewdat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Flibgnat%2Fg-rewdat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-rewdat.adb?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -37,7 +37,7 @@ package body GNAT.Rewrite_Data is\n    subtype SEO is Stream_Element_Offset;\n \n    procedure Do_Output\n-     (B      : in out Buffer;\n+     (B      : Buffer;\n       Data   : Stream_Element_Array;\n       Output : not null access procedure (Data : Stream_Element_Array));\n    --  Do the actual output. This ensures that we properly send the data\n@@ -81,7 +81,7 @@ package body GNAT.Rewrite_Data is\n    ---------------\n \n    procedure Do_Output\n-     (B      : in out Buffer;\n+     (B      : Buffer;\n       Data   : Stream_Element_Array;\n       Output : not null access procedure (Data : Stream_Element_Array))\n    is"}, {"sha": "b5ca32fdbc9b5b696afe944525d1be6a4977b921", "filename": "gcc/ada/libgnat/s-objrea.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Flibgnat%2Fs-objrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Flibgnat%2Fs-objrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-objrea.adb?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -47,7 +47,7 @@ package body System.Object_Reader is\n    function Trim_Trailing_Nuls (Str : String) return String;\n    --  Return a copy of a string with any trailing NUL characters truncated\n \n-   procedure Check_Read_Offset (S : in out Mapped_Stream; Size : uint32);\n+   procedure Check_Read_Offset (S : Mapped_Stream; Size : uint32);\n    --  Check that the SIZE bytes at the current offset are still in the stream\n \n    -------------------------------------\n@@ -1931,7 +1931,7 @@ package body System.Object_Reader is\n       return To_String_Ptr_Len (Read (S));\n    end Read;\n \n-   procedure Check_Read_Offset (S : in out Mapped_Stream; Size : uint32) is\n+   procedure Check_Read_Offset (S : Mapped_Stream; Size : uint32) is\n    begin\n       if S.Off + Offset (Size) > Offset (Last (S.Region)) then\n          raise IO_Error with \"could not read from object file\";"}, {"sha": "07ce4883fd4ef580c34ff26750a781a0915b033f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -8830,7 +8830,9 @@ package body Sem_Attr is\n \n       when Attribute_Has_Access_Values =>\n          Rewrite (N, New_Occurrence_Of\n-           (Boolean_Literals (Has_Access_Values (P_Root_Type)), Loc));\n+           (Boolean_Literals\n+             (Has_Access_Values (P_Root_Type, Include_Internal => True)),\n+              Loc));\n          Analyze_And_Resolve (N, Standard_Boolean);\n \n       -----------------------"}, {"sha": "47b6a93e1503ec5f91d729405744da4d003777e9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -11539,7 +11539,9 @@ package body Sem_Util is\n    -- Has_Access_Values --\n    -----------------------\n \n-   function Has_Access_Values (T : Entity_Id) return Boolean is\n+   function Has_Access_Values\n+     (T : Entity_Id; Include_Internal : Boolean) return Boolean\n+   is\n       Typ : constant Entity_Id := Underlying_Type (T);\n \n    begin\n@@ -11552,11 +11554,17 @@ package body Sem_Util is\n       if No (Typ) then\n          return False;\n \n+      elsif not Include_Internal\n+        and then T /= Typ\n+        and then In_Internal_Unit (Typ)\n+      then\n+         return False;\n+\n       elsif Is_Access_Type (Typ) then\n          return True;\n \n       elsif Is_Array_Type (Typ) then\n-         return Has_Access_Values (Component_Type (Typ));\n+         return Has_Access_Values (Component_Type (Typ), Include_Internal);\n \n       elsif Is_Record_Type (Typ) then\n          declare\n@@ -11571,7 +11579,7 @@ package body Sem_Util is\n                --  Check for access component, tag field does not count, even\n                --  though it is implemented internally using an access type.\n \n-               if Has_Access_Values (Etype (Comp))\n+               if Has_Access_Values (Etype (Comp), Include_Internal)\n                  and then Chars (Comp) /= Name_uTag\n                then\n                   return True;"}, {"sha": "1d4bd16896818caa948f6439c9879c9e907459d2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -1312,14 +1312,18 @@ package Sem_Util is\n    --  limited, packed array and other implementation types.  If Include_PAT\n    --  is False, don't look inside packed array types.\n \n-   function Has_Access_Values (T : Entity_Id) return Boolean;\n+   function Has_Access_Values\n+     (T : Entity_Id; Include_Internal : Boolean) return Boolean;\n    --  Returns true if type or subtype T is an access type, or has a component\n    --  (at any recursive level) that is an access type. This is a conservative\n    --  predicate, if it is not known whether or not T contains access values\n    --  (happens for generic formals in some cases), then False is returned.\n    --  Note that tagged types return False. Even though the tag is implemented\n    --  as an access type internally, this function tests only for access types\n    --  known to the programmer. See also Has_Tagged_Component.\n+   --\n+   --  If Include_Internal is False, we return False for internal private types\n+   --  whose full type contains access types.\n \n    function Has_Anonymous_Access_Discriminant (Typ : Entity_Id) return Boolean;\n    --  Returns True if Typ has one or more anonymous access discriminants"}, {"sha": "e85f49301756fb640f6ff8188b9a3674482abdd0", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4892e31daceb8ab230768a15eb0a01b814e8bbfd/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4892e31daceb8ab230768a15eb0a01b814e8bbfd", "patch": "@@ -1182,7 +1182,7 @@ package body Sem_Warn is\n                --  First gather any Unset_Reference indication for E1. In the\n                --  case of a parameter, it is the Spec_Entity that is relevant.\n \n-               if Ekind (E1) = E_Out_Parameter\n+               if Ekind (E1) in Formal_Kind\n                  and then Present (Spec_Entity (E1))\n                then\n                   UR := Unset_Reference (Spec_Entity (E1));\n@@ -1354,10 +1354,13 @@ package body Sem_Warn is\n                      --  Suppress warning if composite type contains any access\n                      --  component, since the logical effect of modifying a\n                      --  parameter may be achieved by modifying a referenced\n-                     --  object.\n+                     --  object. This rationale does not apply to internal\n+                     --  private types, so we warn even if a component is of\n+                     --  something like Unbounded_String.\n \n                      elsif Is_Composite_Type (E1T)\n-                       and then Has_Access_Values (E1T)\n+                       and then Has_Access_Values\n+                         (E1T, Include_Internal => False)\n                      then\n                         null;\n \n@@ -3090,7 +3093,7 @@ package body Sem_Warn is\n             --  Here we generate the warning\n \n             else\n-               --  If -gnatwk is set then output message that we could be IN\n+               --  If -gnatwk is set then output message that it could be IN\n \n                if not Is_Trivial_Subprogram (Scope (E1)) then\n                   if Warn_On_Constant then"}]}