{"sha": "4e42ad664745af6d0119d1f09b581223b379f507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0MmFkNjY0NzQ1YWY2ZDAxMTlkMWYwOWI1ODEyMjNiMzc5ZjUwNw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-10T17:10:53Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-10T17:10:53Z"}, "message": "re PR fortran/27866 (Warn when casting, e.g. assigning a double precision to a real)\n\ngcc/fortran/:\n2010-05-10  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/27866\n\tPR fortran/35003\n\tPR fortran/42809\n\t* intrinsic.c (gfc_convert_type_warn): Be more discriminative\n\tabout conversion warnings.\n\ngcc/testsuite/:\n2010-05-08  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/27866\n\tPR fortran/35003\n\tPR fortran/42809\n\t* gfortran.dg/array_constructor_type_17.f03: Updated match string.\n\t* gfortran.dg/warn_conversion.f90: New.\n\nFrom-SVN: r159238", "tree": {"sha": "2241c99c74552e029f3b44cbfe1915704c74deba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2241c99c74552e029f3b44cbfe1915704c74deba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e42ad664745af6d0119d1f09b581223b379f507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e42ad664745af6d0119d1f09b581223b379f507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e42ad664745af6d0119d1f09b581223b379f507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e42ad664745af6d0119d1f09b581223b379f507/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cd174f64a209fd026eccf1f598f7609b2884d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd174f64a209fd026eccf1f598f7609b2884d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd174f64a209fd026eccf1f598f7609b2884d99"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "af70b8c67a63536d6a4fb725f8908f924b644c00", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4e42ad664745af6d0119d1f09b581223b379f507", "patch": "@@ -1,3 +1,11 @@\n+2010-05-10  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/27866\n+\tPR fortran/35003\n+\tPR fortran/42809\n+\t* intrinsic.c (gfc_convert_type_warn): Be more dicsriminative\n+\tabout conversion warnings.\n+\n 2010-05-10  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44044"}, {"sha": "07867541be0c3c89212d9a4ea4183575ed8e8efd", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=4e42ad664745af6d0119d1f09b581223b379f507", "patch": "@@ -4016,8 +4016,40 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n     gfc_warning_now (\"Extension: Conversion from %s to %s at %L\",\n \t\t     gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n   else if (wflag && gfc_option.warn_conversion)\n-    gfc_warning_now (\"Conversion from %s to %s at %L\",\n-\t\t     gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n+    {\n+      /* If the types are the same (but not LOGICAL), and if from-kind\n+\t is larger than to-kind, this may indicate a loss of precision.\n+\t The same holds for conversions from REAL to COMPLEX.  */\n+      if (((from_ts.type == ts->type && from_ts.type != BT_LOGICAL)\n+\t     && from_ts.kind > ts->kind)\n+\t  || ((from_ts.type == BT_REAL && ts->type == BT_COMPLEX)\n+\t      && from_ts.kind > ts->kind))\n+\tgfc_warning_now (\"Possible loss of precision in conversion \"\n+\t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n+\t\t\t gfc_typename (ts), &expr->where);\n+\n+      /* If INTEGER is converted to REAL/COMPLEX, this is generally ok if\n+\t the kind of the INTEGER value is less or equal to the kind of the\n+\t REAL/COMPLEX one. Otherwise the value may not fit.\n+\t Assignment of an overly large integer constant also generates\n+\t an overflow error with range checking. */\n+      else if (from_ts.type == BT_INTEGER\n+\t       && (ts->type == BT_REAL || ts->type == BT_COMPLEX)\n+\t       && from_ts.kind > ts->kind)\n+\tgfc_warning_now (\"Possible loss of digits in conversion \"\n+\t\t\t \"from %s to %s at %L\", gfc_typename (&from_ts),\n+\t\t\t gfc_typename (ts), &expr->where);\n+\n+      /* If REAL/COMPLEX is converted to INTEGER, or COMPLEX is converted\n+        to REAL we almost certainly have a loss of digits, regardless of\n+        the respective kinds.  */\n+      else if (((from_ts.type == BT_REAL || from_ts.type == BT_COMPLEX)\n+\t\t && ts->type == BT_INTEGER)\n+\t       || (from_ts.type == BT_COMPLEX && ts->type == BT_REAL))\n+\tgfc_warning_now (\"Likely loss of digits in conversion from\"\n+\t\t\t\"%s to %s at %L\", gfc_typename (&from_ts),\n+\t\t\tgfc_typename (ts), &expr->where);\n+    }\n \n   /* Insert a pre-resolved function call to the right function.  */\n   old_where = expr->where;"}, {"sha": "f54d9c4a8980d082e2a763495be94c9762d70f24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e42ad664745af6d0119d1f09b581223b379f507", "patch": "@@ -1,3 +1,11 @@\n+2010-05-08  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/27866\n+\tPR fortran/35003\n+\tPR fortran/42809\n+\t* gfortran.dg/array_constructor_type_17.f03: Updated match string.\n+\t* gfortran.dg/warn_conversion.f90: New.\n+\n 2010-05-10  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/vect/fast-math-vect-reduc-8.c: New test."}, {"sha": "f8f15f9eba133e9d8482a9cefdcd4001fa50e15d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_17.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03?ref=4e42ad664745af6d0119d1f09b581223b379f507", "patch": "@@ -8,5 +8,5 @@ PROGRAM test\n   IMPLICIT NONE\n \n   INTEGER(KIND=4) :: arr(1)\n-  arr = (/ INTEGER(KIND=4) :: HUGE(0_8) /) ! { dg-warning \"Conversion from\" }\n+  arr = (/ INTEGER(KIND=4) :: HUGE(0_8) /) ! { dg-warning \"conversion from\" }\n END PROGRAM test"}, {"sha": "f658b655caecd767a3ce664f2c1c2bedfd4e3b65", "filename": "gcc/testsuite/gfortran.dg/warn_conversion.f90", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e42ad664745af6d0119d1f09b581223b379f507/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion.f90?ref=4e42ad664745af6d0119d1f09b581223b379f507", "patch": "@@ -0,0 +1,62 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-Wconversion\" }\n+\n+!\n+! PR fortran/27866 -improve -Wconversion\n+!\n+SUBROUTINE pr27866\n+  double precision :: d\n+  real   :: r\n+  d = 4d99\n+  r = d                 ! { dg-warning \"conversion\" }\n+END SUBROUTINE\n+\n+SUBROUTINE pr27866c4\n+  real(kind=4)    :: a\n+  real(kind=8)    :: b\n+  integer(kind=1) :: i1\n+  integer(kind=4) :: i4\n+  i4 = 2.3              ! { dg-warning \"conversion\" }\n+  i1 = 500              ! { dg-error \"overflow\" }\n+                        ! { dg-warning \"conversion\" \"\" { target *-*-* } 20 }\n+  a = 2**26-1           ! assignment INTEGER(4) to REAL(4) - no warning\n+  b = 1d999             ! { dg-error \"overflow\" }\n+\n+  a = i4                ! assignment INTEGER(4) to REAL(4) - no warning\n+  b = i4                ! assignment INTEGER(4) to REAL(8) - no warning\n+  i1 = i4               ! { dg-warning \"conversion\" }\n+  a = b                 ! { dg-warning \"conversion\" }\n+END SUBROUTINE\n+\n+\n+!\n+! PR fortran/35003 - spurious warning with -Wconversion\n+! Contributed by Brian Barnes <bcbarnes AT gmail DOT com>\n+!\n+SUBROUTINE pr35003\n+  IMPLICIT NONE\n+  integer(8) :: i, n\n+  n = 1_8\n+\n+  do i = 1_8,n\n+  enddo\n+END SUBROUTINE\n+\n+\n+!\n+! PR fortran/42809 - Too much noise with -Wconversion\n+! Contributed by Harald Anlauf <anlauf AT gmx DOT de>\n+!\n+SUBROUTINE pr42809\n+  implicit none\n+  integer, parameter :: sp = kind (1.0)\n+  integer, parameter :: dp = kind (1.d0)\n+  real(sp)     :: s\n+  real(dp)     :: d\n+  complex(dp)  :: z\n+\n+  s = 0                 ! assignment INTEGER(4) to REAL(4) - no warning\n+  d = s                 ! assignment REAL((8)) to REAL(4) - no warning\n+  z = (0, 1)            ! conversion INTEGER(4) to REAL(4),\n+                        ! assignment COMPLEX(4) to COMPLEX(8) - no warning\n+END SUBROUTINE"}]}