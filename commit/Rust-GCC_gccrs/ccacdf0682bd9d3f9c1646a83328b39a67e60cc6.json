{"sha": "ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhY2RmMDY4MmJkOWQzZjljMTY0NmE4MzMyOGIzOWE2N2U2MGNjNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-16T13:23:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-16T13:23:13Z"}, "message": "gimple.c (gimple_copy): Do not clear addresses_taken bitmap.\n\n2009-04-16  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_copy): Do not clear addresses_taken bitmap.\n\t(gimple_ior_addresses_taken_1): New function.\n\t(gimple_ior_addresses_taken): Likewise.\n\t* gimple.h (struct gimple_statement_with_ops_base): Remove\n\taddresses_taken member.\n\t(gimple_ior_addresses_taken): Declare.\n\t(gimple_addresses_taken, gimple_addresses_taken_ptr,\n\tgimple_set_addresses_taken): Remove.\n\t* ipa-reference.c (mark_address): New function.\n\t(scan_stmt_for_static_refs): Use it for marking addresses taken.\n\t* tree-ssa-operands.c (add_to_addressable_set): Rename to ...\n\t(mark_address_taken): ... this.  Just set TREE_ADDRESSABLE.\n\t(gimple_add_to_addresses_taken): Remove.\n\t(get_tmr_operands): Call mark_address_taken.\n\t(get_asm_expr_operands): Likewise.\n\t(get_expr_operands): Likewise.\n\t(build_ssa_operands): Do not clear the addresses_taken bitmap.\n\t(free_stmt_operands): Do not free it.\n\t* tree-ssa.c (delete_tree_ssa): Likewise.\n\t(execute_update_addresses_taken): Use gimple_ior_addresses_taken.\n\nFrom-SVN: r146191", "tree": {"sha": "b4ca92d1770ab1befed804ce5ea55e6305e8bc39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4ca92d1770ab1befed804ce5ea55e6305e8bc39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "346ef3faa0225ae51f85931a0a259b144347b5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346ef3faa0225ae51f85931a0a259b144347b5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346ef3faa0225ae51f85931a0a259b144347b5e3"}], "stats": {"total": 204, "additions": 96, "deletions": 108}, "files": [{"sha": "b442ef00f416f9ea39bacb141f242b4fbbaa65f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -1,3 +1,26 @@\n+2009-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_copy): Do not clear addresses_taken bitmap.\n+\t(gimple_ior_addresses_taken_1): New function.\n+\t(gimple_ior_addresses_taken): Likewise.\n+\t* gimple.h (struct gimple_statement_with_ops_base): Remove\n+\taddresses_taken member.\n+\t(gimple_ior_addresses_taken): Declare.\n+\t(gimple_addresses_taken, gimple_addresses_taken_ptr,\n+\tgimple_set_addresses_taken): Remove.\n+\t* ipa-reference.c (mark_address): New function.\n+\t(scan_stmt_for_static_refs): Use it for marking addresses taken.\n+\t* tree-ssa-operands.c (add_to_addressable_set): Rename to ...\n+\t(mark_address_taken): ... this.  Just set TREE_ADDRESSABLE.\n+\t(gimple_add_to_addresses_taken): Remove.\n+\t(get_tmr_operands): Call mark_address_taken.\n+\t(get_asm_expr_operands): Likewise.\n+\t(get_expr_operands): Likewise.\n+\t(build_ssa_operands): Do not clear the addresses_taken bitmap.\n+\t(free_stmt_operands): Do not free it.\n+\t* tree-ssa.c (delete_tree_ssa): Likewise.\n+\t(execute_update_addresses_taken): Use gimple_ior_addresses_taken.\n+\n 2009-04-16  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.h (walk_stmt_load_store_addr_ops): Declare."}, {"sha": "a91e83a99d46c7c0cf0488db7e35c32a2f59e821", "filename": "gcc/gimple.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -2195,16 +2195,11 @@ gimple_copy (gimple stmt)\n       for (i = 0; i < num_ops; i++)\n \tgimple_set_op (copy, i, unshare_expr (gimple_op (stmt, i)));\n \n-      /* Clear out SSA operand vectors on COPY.  Note that we cannot\n-\t call the API functions for setting addresses_taken, stores\n-\t and loads.  These functions free the previous values, and we\n-\t cannot do that on COPY as it will affect the original\n-\t statement.  */\n+      /* Clear out SSA operand vectors on COPY.  */\n       if (gimple_has_ops (stmt))\n \t{\n \t  gimple_set_def_ops (copy, NULL);\n \t  gimple_set_use_ops (copy, NULL);\n-\t  copy->gsops.opbase.addresses_taken = NULL;\n \t}\n \n       if (gimple_has_mem_ops (stmt))\n@@ -3392,4 +3387,32 @@ walk_stmt_load_store_ops (gimple stmt, void *data,\n \t\t\t\t\tvisit_load, visit_store, NULL);\n }\n \n+/* Helper for gimple_ior_addresses_taken_1.  */\n+\n+static bool\n+gimple_ior_addresses_taken_1 (gimple stmt ATTRIBUTE_UNUSED,\n+\t\t\t      tree addr, void *data)\n+{\n+  bitmap addresses_taken = (bitmap)data;\n+  while (handled_component_p (addr))\n+    addr = TREE_OPERAND (addr, 0);\n+  if (DECL_P (addr))\n+    {\n+      bitmap_set_bit (addresses_taken, DECL_UID (addr));\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* Set the bit for the uid of all decls that have their address taken\n+   in STMT in the ADDRESSES_TAKEN bitmap.  Returns true if there\n+   were any in this stmt.  */\n+\n+bool\n+gimple_ior_addresses_taken (bitmap addresses_taken, gimple stmt)\n+{\n+  return walk_stmt_load_store_addr_ops (stmt, addresses_taken, NULL, NULL,\n+\t\t\t\t\tgimple_ior_addresses_taken_1);\n+}\n+\n #include \"gt-gimple.h\""}, {"sha": "2d5ee0fd9b4c104b44dce68c9971895b1fd29403", "filename": "gcc/gimple.h", "status": "modified", "additions": 13, "deletions": 52, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -327,15 +327,10 @@ struct gimple_statement_base GTY(())\n \n struct gimple_statement_with_ops_base GTY(())\n {\n-  /* [ WORD  1-4 ]  */\n+  /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n-  /* [ WORD 5 ]\n-     Symbols whose addresses are taken by this statement (i.e., they\n-     appear inside ADDR_EXPR nodes).  */\n-  bitmap GTY((skip (\"\"))) addresses_taken;\n-\n-  /* [ WORD 6-7 ]\n+  /* [ WORD 5-6 ]\n      SSA operand vectors.  NOTE: It should be possible to\n      amalgamate these vectors with the operand vector OP.  However,\n      the SSA operand vectors are organized differently and contain\n@@ -349,10 +344,10 @@ struct gimple_statement_with_ops_base GTY(())\n \n struct gimple_statement_with_ops GTY(())\n {\n-  /* [ WORD 1-7 ]  */\n+  /* [ WORD 1-6 ]  */\n   struct gimple_statement_with_ops_base opbase;\n \n-  /* [ WORD 8 ]\n+  /* [ WORD 7 ]\n      Operand vector.  NOTE!  This must always be the last field\n      of this structure.  In particular, this means that this\n      structure cannot be embedded inside another one.  */\n@@ -364,10 +359,10 @@ struct gimple_statement_with_ops GTY(())\n \n struct gimple_statement_with_memory_ops_base GTY(())\n {\n-  /* [ WORD 1-7 ]  */\n+  /* [ WORD 1-6 ]  */\n   struct gimple_statement_with_ops_base opbase;\n \n-  /* [ WORD 8-9 ]\n+  /* [ WORD 7-8 ]\n      Virtual operands for this statement.  The GC will pick them\n      up via the ssa_names array.  */\n   tree GTY((skip (\"\"))) vdef;\n@@ -379,10 +374,10 @@ struct gimple_statement_with_memory_ops_base GTY(())\n \n struct gimple_statement_with_memory_ops GTY(())\n {\n-  /* [ WORD 1-9 ]  */\n+  /* [ WORD 1-8 ]  */\n   struct gimple_statement_with_memory_ops_base membase;\n \n-  /* [ WORD 10 ]\n+  /* [ WORD 9 ]\n      Operand vector.  NOTE!  This must always be the last field\n      of this structure.  In particular, this means that this\n      structure cannot be embedded inside another one.  */\n@@ -545,20 +540,20 @@ struct gimple_statement_wce GTY(())\n \n struct gimple_statement_asm GTY(())\n {\n-  /* [ WORD 1-9 ]  */\n+  /* [ WORD 1-8 ]  */\n   struct gimple_statement_with_memory_ops_base membase;\n \n-  /* [ WORD 10 ]\n+  /* [ WORD 9 ]\n      __asm__ statement.  */\n   const char *string;\n \n-  /* [ WORD 11 ]\n+  /* [ WORD 10 ]\n        Number of inputs, outputs and clobbers.  */\n   unsigned char ni;\n   unsigned char no;\n   unsigned short nc;\n \n-  /* [ WORD 12 ]\n+  /* [ WORD 11 ]\n      Operand vector.  NOTE!  This must always be the last field\n      of this structure.  In particular, this means that this\n      structure cannot be embedded inside another one.  */\n@@ -916,6 +911,7 @@ extern bool walk_stmt_load_store_addr_ops (gimple, void *,\n extern bool walk_stmt_load_store_ops (gimple, void *,\n \t\t\t\t      bool (*)(gimple, tree, void *),\n \t\t\t\t      bool (*)(gimple, tree, void *));\n+extern bool gimple_ior_addresses_taken (bitmap, gimple);\n \n /* In gimplify.c  */\n extern tree create_tmp_var_raw (tree, const char *);\n@@ -1242,41 +1238,6 @@ gimple_has_mem_ops (const_gimple g)\n   return gimple_code (g) >= GIMPLE_ASSIGN && gimple_code (g) <= GIMPLE_RETURN;\n }\n \n-/* Return the set of addresses taken by statement G.  */\n-\n-static inline bitmap\n-gimple_addresses_taken (const_gimple g)\n-{\n-  if (gimple_has_ops (g))\n-    return g->gsops.opbase.addresses_taken;\n-  else\n-    return NULL;\n-}\n-\n-\n-/* Return a pointer to the set of addresses taken by statement G.  */\n-\n-static inline bitmap *\n-gimple_addresses_taken_ptr (gimple g)\n-{\n-  if (gimple_has_ops (g))\n-    return &g->gsops.opbase.addresses_taken;\n-  else\n-    return NULL;\n-}\n-\n-\n-/* Set B to be the set of addresses taken by statement G.  The\n-   previous set is freed.  */\n-\n-static inline void\n-gimple_set_addresses_taken (gimple g, bitmap b)\n-{\n-  gcc_assert (gimple_has_ops (g));\n-  BITMAP_FREE (g->gsops.opbase.addresses_taken);\n-  g->gsops.opbase.addresses_taken = b;\n-}\n-\n \n /* Return the set of DEF operands for statement G.  */\n "}, {"sha": "6f5c751e05b5e32ba77e44549d9ef67688a52058", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -334,6 +334,18 @@ mark_address_taken (tree x)\n     bitmap_set_bit (module_statics_escape, DECL_UID (x));\n }\n \n+/* Wrapper around mark_address_taken for the stmt walker.  */\n+\n+static bool\n+mark_address (gimple stmt ATTRIBUTE_UNUSED, tree addr,\n+\t      void *data ATTRIBUTE_UNUSED)\n+{\n+  while (handled_component_p (addr))\n+    addr = TREE_OPERAND (addr, 0);\n+  mark_address_taken (addr);\n+  return false;\n+}\n+\n /* Mark load of T.  */\n \n static bool\n@@ -429,23 +441,18 @@ scan_stmt_for_static_refs (gimple_stmt_iterator *gsip,\n {\n   gimple stmt = gsi_stmt (*gsip);\n   ipa_reference_local_vars_info_t local = NULL;\n-  unsigned int i;\n-  bitmap_iterator bi;\n \n   if (fn)\n     local = get_reference_vars_info (fn)->local;\n \n   /* Look for direct loads and stores.  */\n-  walk_stmt_load_store_addr_ops (stmt, local, mark_load, mark_store, NULL);\n+  walk_stmt_load_store_addr_ops (stmt, local, mark_load, mark_store,\n+\t\t\t\t mark_address);\n \n   if (is_gimple_call (stmt))\n     check_call (local, stmt);\n   else if (gimple_code (stmt) == GIMPLE_ASM)\n     check_asm_memory_clobber (local, stmt);\n-\n-  if (gimple_addresses_taken (stmt))\n-    EXECUTE_IF_SET_IN_BITMAP (gimple_addresses_taken (stmt), 0, i, bi)\n-      mark_address_taken (referenced_var_lookup (i));\n   \n   return NULL;\n }"}, {"sha": "7d588f8eb9642b24af7a2ae367e6aed8b8bd2787", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -686,10 +686,13 @@ add_stmt_operand (tree *var_p, gimple stmt, int flags)\n     add_virtual_operand (stmt, flags);\n }\n \n-/* Add the base address of REF to SET.  */\n+/* Mark the base address of REF as having its address taken.\n+   REF may be a single variable whose address has been taken or any\n+   other valid GIMPLE memory reference (structure reference, array,\n+   etc).  */\n \n static void\n-add_to_addressable_set (tree ref, bitmap *set)\n+mark_address_taken (tree ref)\n {\n   tree var;\n \n@@ -699,27 +702,8 @@ add_to_addressable_set (tree ref, bitmap *set)\n      be referenced using pointer arithmetic.  See PR 21407 and the\n      ensuing mailing list discussion.  */\n   var = get_base_address (ref);\n-  if (var && SSA_VAR_P (var))\n-    {\n-      if (*set == NULL)\n-\t*set = BITMAP_ALLOC (&operands_bitmap_obstack);\n-\n-      bitmap_set_bit (*set, DECL_UID (var));\n-      TREE_ADDRESSABLE (var) = 1;\n-    }\n-}\n-\n-/* Add the base address of REF to the set of addresses taken by STMT.\n-   REF may be a single variable whose address has been taken or any\n-   other valid GIMPLE memory reference (structure reference, array,\n-   etc).  If the base address of REF is a decl that has sub-variables,\n-   also add all of its sub-variables.  */\n-\n-static void\n-gimple_add_to_addresses_taken (gimple stmt, tree ref)\n-{\n-  gcc_assert (gimple_has_ops (stmt));\n-  add_to_addressable_set (ref, gimple_addresses_taken_ptr (stmt));\n+  if (var && DECL_P (var))\n+    TREE_ADDRESSABLE (var) = 1;\n }\n \n \n@@ -763,7 +747,7 @@ get_tmr_operands (gimple stmt, tree expr, int flags)\n   get_expr_operands (stmt, &TMR_INDEX (expr), opf_use);\n \n   if (TMR_SYMBOL (expr))\n-    gimple_add_to_addresses_taken (stmt, TMR_SYMBOL (expr));\n+    mark_address_taken (TMR_SYMBOL (expr));\n \n   add_virtual_operand (stmt, flags);\n }\n@@ -824,7 +808,7 @@ get_asm_expr_operands (gimple stmt)\n \t{\n \t  tree t = get_base_address (TREE_VALUE (link));\n \t  if (t && DECL_P (t))\n-\t    gimple_add_to_addresses_taken (stmt, t);\n+\t    mark_address_taken (t);\n \t}\n \n       get_expr_operands (stmt, &TREE_VALUE (link), opf_def);\n@@ -844,7 +828,7 @@ get_asm_expr_operands (gimple stmt)\n \t{\n \t  tree t = get_base_address (TREE_VALUE (link));\n \t  if (t && DECL_P (t))\n-\t    gimple_add_to_addresses_taken (stmt, t);\n+\t    mark_address_taken (t);\n \t}\n \n       get_expr_operands (stmt, &TREE_VALUE (link), 0);\n@@ -887,7 +871,7 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n \t reference to it, but the fact that the statement takes its\n \t address will be of interest to some passes (e.g. alias\n \t resolution).  */\n-      gimple_add_to_addresses_taken (stmt, TREE_OPERAND (expr, 0));\n+      mark_address_taken (TREE_OPERAND (expr, 0));\n \n       /* If the address is invariant, there may be no interesting\n \t variable references inside.  */\n@@ -1091,14 +1075,9 @@ parse_ssa_operands (gimple stmt)\n static void\n build_ssa_operands (gimple stmt)\n {\n-  /* Initially assume that the statement has no volatile operands and\n-     makes no memory references.  */\n+  /* Initially assume that the statement has no volatile operands.  */\n   gimple_set_has_volatile_ops (stmt, false);\n \n-  /* Just clear the bitmap so we don't end up reallocating it over and over.  */\n-  if (gimple_addresses_taken (stmt))\n-    bitmap_clear (gimple_addresses_taken (stmt));\n-\n   start_ssa_stmt_operands ();\n   parse_ssa_operands (stmt);\n   finalize_ssa_stmt_operands (stmt);\n@@ -1133,9 +1112,6 @@ free_stmt_operands (gimple stmt)\n       gimple_set_use_ops (stmt, NULL);\n     }\n \n-  if (gimple_has_ops (stmt))\n-    gimple_set_addresses_taken (stmt, NULL);\n-\n   if (gimple_has_mem_ops (stmt))\n     {\n       gimple_set_vuse (stmt, NULL_TREE);"}, {"sha": "a36794166f5a5171f0ab1dcac1ed85d03d7ec83b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacdf0682bd9d3f9c1646a83328b39a67e60cc6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ccacdf0682bd9d3f9c1646a83328b39a67e60cc6", "patch": "@@ -834,7 +834,6 @@ delete_tree_ssa (void)\n \t    {\n \t      gimple_set_def_ops (stmt, NULL);\n \t      gimple_set_use_ops (stmt, NULL);\n-\t      gimple_set_addresses_taken (stmt, NULL);\n \t    }\n \n \t  if (gimple_has_mem_ops (stmt))\n@@ -1504,13 +1503,12 @@ execute_update_addresses_taken (bool do_optimize)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n-\t  const_gimple stmt = gsi_stmt (gsi);\n+\t  gimple stmt = gsi_stmt (gsi);\n \t  enum gimple_code code = gimple_code (stmt);\n-\t  bitmap taken = gimple_addresses_taken (stmt);\n-\t  \n-\t  if (taken)\n-\t    bitmap_ior_into (addresses_taken, taken);\n-\t  \n+\n+\t  /* Note all addresses taken by the stmt.  */\n+\t  gimple_ior_addresses_taken (addresses_taken, stmt);\n+\n \t  /* If we have a call or an assignment, see if the lhs contains\n \t     a local decl that requires not to be a gimple register.  */\n \t  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)"}]}