{"sha": "806ac507476f414a3accae49e8ced8789a2190a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2YWM1MDc0NzZmNDE0YTNhY2NhZTQ5ZThjZWQ4Nzg5YTIxOTBhMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-12-26T14:47:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-12-26T14:47:15Z"}, "message": "Map \"arch=corei7\"/\"arch=nehalem\" to M_INTEL_COREI7\n\nAfter Intel processor name cleanup,\n\n__attribute__ ((target(\"arch=corei7\"))) is translated to PROCESSOR_NEHALEM\nand mapped to M_INTEL_COREI7_NEHALEM.\n\n__attribute__ ((target(\"arch=corei7\")))\n\nused to cover M_INTEL_COREI7_XXXX. Now it only covers M_INTEL_COREI7_NEHALEM.\nWe have PROCESSOR_SANDYBRIDGE and PROCESSOR_HASWELL.  But there is nothing\nto mark Westmere and Ivy Bridge.  Since function versioning doesn't support\nextra ISAs in Westmere and Ivy Bridge, we don't lose anything. The solution\nis to map\n\n__attribute__ ((target(\"arch=corei7\")))\n\nand\n\n__attribute__ ((target(\"arch=nehalem\")))\n\nto M_INTEL_COREI7.\n\ngcc/\n\n\tPR target/59601\n\t* config/i386/i386.c (get_builtin_code_for_version): Map\n\tPROCESSOR_NEHALEM to \"corei7\".\n\ngcc/testsuite/\n\n\tPR target/59601\n\t* g++.dg/ext/mv14.C: New tests.\n\t* g++.dg/ext/mv15.C: Likewise.\n\nFrom-SVN: r206212", "tree": {"sha": "dab18eee2c107ed78adf00ed489bb834f55a355f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dab18eee2c107ed78adf00ed489bb834f55a355f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806ac507476f414a3accae49e8ced8789a2190a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806ac507476f414a3accae49e8ced8789a2190a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806ac507476f414a3accae49e8ced8789a2190a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806ac507476f414a3accae49e8ced8789a2190a3/comments", "author": null, "committer": null, "parents": [{"sha": "1879e97f6cf296fb0a30e85350b79f73fc58aad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1879e97f6cf296fb0a30e85350b79f73fc58aad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1879e97f6cf296fb0a30e85350b79f73fc58aad5"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "186fa1c0311f2469e89ba0a1902d5202082b5b12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806ac507476f414a3accae49e8ced8789a2190a3", "patch": "@@ -1,10 +1,16 @@\n+2013-12-26   H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59601\n+\t* config/i386/i386.c (get_builtin_code_for_version): Map\n+\tPROCESSOR_NEHALEM to \"corei7\".\n+\n 2013-12-26  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n-        * config/i386/i386.c (get_builtin_code_for_version): Rename AMD \n-        CPU names M_AMD_BOBCAT to M_AMD_BTVER1 and M_AMD_JAGUAR \n-        to M_AMD_BTVER2.\n-        (processor_model): Likewise.\n-        (arch_names_table): Likewise.\n+\t* config/i386/i386.c (get_builtin_code_for_version): Rename AMD \n+\tCPU names M_AMD_BOBCAT to M_AMD_BTVER1 and M_AMD_JAGUAR \n+\tto M_AMD_BTVER2.\n+\t(processor_model): Likewise.\n+\t(arch_names_table): Likewise.\n \n 2013-12-26  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "71063bbbada30583548454ce40fa2320ea70e319", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=806ac507476f414a3accae49e8ced8789a2190a3", "patch": "@@ -30010,7 +30010,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      priority = P_PROC_SSSE3;\n \t      break;\n \t    case PROCESSOR_NEHALEM:\n-\t      arg_str = \"nehalem\";\n+\t      /* We translate \"arch=corei7\" and \"arch=nehelam\" to\n+\t\t \"corei7\" so that it will be mapped to M_INTEL_COREI7\n+\t\t as cpu type to cover all M_INTEL_COREI7_XXXs.  */\n+\t      arg_str = \"corei7\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n \t    case PROCESSOR_SANDYBRIDGE:"}, {"sha": "51be98c7121c1aab84eee56c6c29bff7df94fcd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=806ac507476f414a3accae49e8ced8789a2190a3", "patch": "@@ -1,3 +1,10 @@\n+2013-12-26   Uros Bizjak  <ubizjak@gmail.com>\n+\t     H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59601\n+\t* g++.dg/ext/mv14.C: New tests.\n+\t* g++.dg/ext/mv15.C: Likewise.\n+\n 2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n \n \tPR target/59422"}, {"sha": "e36e08d50cae24f99c073835e6396bbc916f073f", "filename": "gcc/testsuite/g++.dg/ext/mv14.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv14.C?ref=806ac507476f414a3accae49e8ced8789a2190a3", "patch": "@@ -0,0 +1,40 @@\n+/* Test case to check if Multiversioning works.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" }  */\n+/* { dg-options \"-O2 -fPIC\" } */\n+\n+#include <assert.h>\n+\n+/* Default version.  */\n+int foo (); // Extra declaration that is merged with the second one.\n+int foo () __attribute__ ((target(\"default\")));\n+\n+int foo () __attribute__ ((target(\"arch=corei7\")));\n+\n+int (*p)() = &foo;\n+int main ()\n+{\n+  int val = foo ();\n+  assert (val ==  (*p)());\n+\n+  /* Check in the exact same order in which the dispatching\n+     is expected to happen.  */\n+  if (__builtin_cpu_is (\"corei7\"))\n+    assert (val == 5);\n+  else\n+    assert (val == 0);\n+  \n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"arch=corei7\")))\n+foo ()\n+{\n+  return 5;\n+}"}, {"sha": "42e39d24c6a86ab401975d1824f807c0516fceb2", "filename": "gcc/testsuite/g++.dg/ext/mv15.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806ac507476f414a3accae49e8ced8789a2190a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv15.C?ref=806ac507476f414a3accae49e8ced8789a2190a3", "patch": "@@ -0,0 +1,40 @@\n+/* Test case to check if Multiversioning works.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" }  */\n+/* { dg-options \"-O2 -fPIC\" } */\n+\n+#include <assert.h>\n+\n+/* Default version.  */\n+int foo (); // Extra declaration that is merged with the second one.\n+int foo () __attribute__ ((target(\"default\")));\n+\n+int foo () __attribute__ ((target(\"arch=nehalem\")));\n+\n+int (*p)() = &foo;\n+int main ()\n+{\n+  int val = foo ();\n+  assert (val ==  (*p)());\n+\n+  /* Check in the exact same order in which the dispatching\n+     is expected to happen.  */\n+  if (__builtin_cpu_is (\"corei7\"))\n+    assert (val == 5);\n+  else\n+    assert (val == 0);\n+  \n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"arch=nehalem\")))\n+foo ()\n+{\n+  return 5;\n+}"}]}