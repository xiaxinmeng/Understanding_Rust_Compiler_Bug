{"sha": "a86451b9b20415805e6316638c349cce86252893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2NDUxYjliMjA0MTU4MDVlNjMxNjYzOGMzNDljY2U4NjI1Mjg5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-24T11:03:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-24T11:03:27Z"}, "message": "internal-fn.c (expand_arith_set_overflow): New function.\n\n\t* internal-fn.c (expand_arith_set_overflow): New function.\n\t(expand_addsub_overflow, expand_neg_overflow, expand_mul_overflow):\n\tUse it.\n\t(expand_arith_overflow_result_store): Likewise.  Handle precision\n\tsmaller than mode precision.\n\t* tree-vrp.c (extract_range_basic): For imag part, handle\n\tproperly signed 1-bit precision result.\n\t* doc/extend.texi (__builtin_add_overflow): Document that last\n\targument can't be pointer to enumerated or boolean type.\n\t(__builtin_add_overflow_p): Document that last argument can't\n\thave enumerated or boolean type.\n\n\t* c-common.c (check_builtin_function_arguments): Require last\n\targument of BUILT_IN_*_OVERFLOW_P to have INTEGER_TYPE type.\n\tAdjust wording of diagnostics for BUILT_IN_*_OVERLFLOW\n\tif the last argument is pointer to enumerated or boolean type.\n\n\t* c-c++-common/builtin-arith-overflow-1.c (generic_wrong_type, f3,\n\tf4): Adjust expected diagnostics.\n\t* c-c++-common/torture/builtin-arith-overflow.h (TP): New macro.\n\t(T): If OVFP is defined, redefine to TP.\n\t* c-c++-common/torture/builtin-arith-overflow-12.c: Adjust comment.\n\t* c-c++-common/torture/builtin-arith-overflow-p-1.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-2.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-3.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-4.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-5.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-6.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-7.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-8.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-9.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-10.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-11.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-12.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-13.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-14.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-15.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-16.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-17.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-18.c: New test.\n\t* c-c++-common/torture/builtin-arith-overflow-p-19.c: New test.\n\t* g++.dg/ext/builtin-arith-overflow-1.C: Pass 0 instead of C\n\tas last argument to __builtin_add_overflow_p.\n\nFrom-SVN: r237754", "tree": {"sha": "5dbe637ae3f46f81d9ccbd90d3728bb4271209fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbe637ae3f46f81d9ccbd90d3728bb4271209fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a86451b9b20415805e6316638c349cce86252893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86451b9b20415805e6316638c349cce86252893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86451b9b20415805e6316638c349cce86252893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86451b9b20415805e6316638c349cce86252893/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43535362e718a0ecb559eb6b1b90cf7892324f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43535362e718a0ecb559eb6b1b90cf7892324f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43535362e718a0ecb559eb6b1b90cf7892324f08"}], "stats": {"total": 744, "additions": 713, "deletions": 31}, "files": [{"sha": "fdc489833f71287c562c7da12df0224bf7476191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -1,3 +1,17 @@\n+2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* internal-fn.c (expand_arith_set_overflow): New function.\n+\t(expand_addsub_overflow, expand_neg_overflow, expand_mul_overflow):\n+\tUse it.\n+\t(expand_arith_overflow_result_store): Likewise.  Handle precision\n+\tsmaller than mode precision.\n+\t* tree-vrp.c (extract_range_basic): For imag part, handle\n+\tproperly signed 1-bit precision result.\n+\t* doc/extend.texi (__builtin_add_overflow): Document that last\n+\targument can't be pointer to enumerated or boolean type.\n+\t(__builtin_add_overflow_p): Document that last argument can't\n+\thave enumerated or boolean type.\n+\n 2016-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "16e557269768c6233f18221817650179c32215f5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -1,3 +1,10 @@\n+2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (check_builtin_function_arguments): Require last\n+\targument of BUILT_IN_*_OVERFLOW_P to have INTEGER_TYPE type.\n+\tAdjust wording of diagnostics for BUILT_IN_*_OVERLFLOW\n+\tif the last argument is pointer to enumerated or boolean type.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/70339"}, {"sha": "4988f066eb2489ee2bee6142a7b48a28a96fbf97", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -9983,10 +9983,22 @@ check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n \t\treturn false;\n \t      }\n \t  if (TREE_CODE (TREE_TYPE (args[2])) != POINTER_TYPE\n-\t      || TREE_CODE (TREE_TYPE (TREE_TYPE (args[2]))) != INTEGER_TYPE)\n+\t      || !INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (args[2]))))\n \t    {\n \t      error_at (ARG_LOCATION (2), \"argument 3 in call to function %qE \"\n-\t\t\t\"does not have pointer to integer type\", fndecl);\n+\t\t\t\"does not have pointer to integral type\", fndecl);\n+\t      return false;\n+\t    }\n+\t  else if (TREE_CODE (TREE_TYPE (TREE_TYPE (args[2]))) == ENUMERAL_TYPE)\n+\t    {\n+\t      error_at (ARG_LOCATION (2), \"argument 3 in call to function %qE \"\n+\t\t\t\"has pointer to enumerated type\", fndecl);\n+\t      return false;\n+\t    }\n+\t  else if (TREE_CODE (TREE_TYPE (TREE_TYPE (args[2]))) == BOOLEAN_TYPE)\n+\t    {\n+\t      error_at (ARG_LOCATION (2), \"argument 3 in call to function %qE \"\n+\t\t\t\"has pointer to boolean type\", fndecl);\n \t      return false;\n \t    }\n \t  return true;\n@@ -10006,6 +10018,18 @@ check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n \t\t\t  \"%qE does not have integral type\", i + 1, fndecl);\n \t\treturn false;\n \t      }\n+\t  if (TREE_CODE (TREE_TYPE (args[2])) == ENUMERAL_TYPE)\n+\t    {\n+\t      error_at (ARG_LOCATION (2), \"argument 3 in call to function \"\n+\t\t\t\"%qE has enumerated type\", fndecl);\n+\t      return false;\n+\t    }\n+\t  else if (TREE_CODE (TREE_TYPE (args[2])) == BOOLEAN_TYPE)\n+\t    {\n+\t      error_at (ARG_LOCATION (2), \"argument 3 in call to function \"\n+\t\t\t\"%qE has boolean type\", fndecl);\n+\t      return false;\n+\t    }\n \t  return true;\n \t}\n       return false;"}, {"sha": "604b441d1845aeb2cd05cb73777ed9e040b22f43", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -9833,8 +9833,8 @@ performed in infinite signed precision, these built-in functions have fully defi\n behavior for all argument values.\n \n The first built-in function allows arbitrary integral types for operands and\n-the result type must be pointer to some integer type, the rest of the built-in\n-functions have explicit integer types.\n+the result type must be pointer to some integral type other than enumerated or\n+Boolean type, the rest of the built-in functions have explicit integer types.\n \n The compiler will attempt to use hardware instructions to implement\n these built-in functions where possible, like conditional jump on overflow\n@@ -9879,7 +9879,8 @@ would overflow.\n These built-in functions are similar to @code{__builtin_add_overflow},\n @code{__builtin_sub_overflow}, or @code{__builtin_mul_overflow}, except that\n they don't store the result of the arithmetic operation anywhere and the\n-last argument is not a pointer, but some integral expression.\n+last argument is not a pointer, but some expression with integral type other\n+than enumerated or Boolean type.\n \n The built-in functions promote the first two operands into infinite precision signed type\n and perform addition on those promoted operands. The result is then"}, {"sha": "de850fdb493f1bb05b24c991854b086e2bc59a2f", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -405,9 +405,23 @@ get_min_precision (tree arg, signop sign)\n   return prec + (orig_sign != sign);\n }\n \n+/* Helper for expand_*_overflow.  Set the __imag__ part to true\n+   (1 except for signed:1 type, in which case store -1).  */\n+\n+static void\n+expand_arith_set_overflow (tree lhs, rtx target)\n+{\n+  if (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (lhs))) == 1\n+      && !TYPE_UNSIGNED (TREE_TYPE (TREE_TYPE (lhs))))\n+    write_complex_part (target, constm1_rtx, true);\n+  else\n+    write_complex_part (target, const1_rtx, true);\n+}\n+\n /* Helper for expand_*_overflow.  Store RES into the __real__ part\n    of TARGET.  If RES has larger MODE than __real__ part of TARGET,\n-   set the __imag__ part to 1 if RES doesn't fit into it.  */\n+   set the __imag__ part to 1 if RES doesn't fit into it.  Similarly\n+   if LHS has smaller precision than its mode.  */\n \n static void\n expand_arith_overflow_result_store (tree lhs, rtx target,\n@@ -424,7 +438,35 @@ expand_arith_overflow_result_store (tree lhs, rtx target,\n       do_compare_rtx_and_jump (res, convert_modes (mode, tgtmode, lres, uns),\n \t\t\t       EQ, true, mode, NULL_RTX, NULL, done_label,\n \t\t\t       PROB_VERY_LIKELY);\n-      write_complex_part (target, const1_rtx, true);\n+      expand_arith_set_overflow (lhs, target);\n+      emit_label (done_label);\n+    }\n+  int prec = TYPE_PRECISION (TREE_TYPE (TREE_TYPE (lhs)));\n+  int tgtprec = GET_MODE_PRECISION (tgtmode);\n+  if (prec < tgtprec)\n+    {\n+      rtx_code_label *done_label = gen_label_rtx ();\n+      int uns = TYPE_UNSIGNED (TREE_TYPE (TREE_TYPE (lhs)));\n+      res = lres;\n+      if (uns)\n+\t{\n+\t  rtx mask\n+\t    = immed_wide_int_const (wi::shifted_mask (0, prec, false, tgtprec),\n+\t\t\t\t    tgtmode);\n+\t  lres = expand_simple_binop (tgtmode, AND, res, mask, NULL_RTX,\n+\t\t\t\t      true, OPTAB_DIRECT);\n+\t}\n+      else\n+\t{\n+\t  lres = expand_shift (LSHIFT_EXPR, tgtmode, res, tgtprec - prec,\n+\t\t\t       NULL_RTX, 1);\n+\t  lres = expand_shift (RSHIFT_EXPR, tgtmode, lres, tgtprec - prec,\n+\t\t\t       NULL_RTX, 0);\n+\t}\n+      do_compare_rtx_and_jump (res, lres,\n+\t\t\t       EQ, true, tgtmode, NULL_RTX, NULL, done_label,\n+\t\t\t       PROB_VERY_LIKELY);\n+      expand_arith_set_overflow (lhs, target);\n       emit_label (done_label);\n     }\n   write_complex_part (target, lres, false);\n@@ -861,7 +903,7 @@ expand_addsub_overflow (location_t loc, tree_code code, tree lhs,\n       do_pending_stack_adjust ();\n     }\n   else if (lhs)\n-    write_complex_part (target, const1_rtx, true);\n+    expand_arith_set_overflow (lhs, target);\n \n   /* We're done.  */\n   emit_label (done_label);\n@@ -956,7 +998,7 @@ expand_neg_overflow (location_t loc, tree lhs, tree arg1, bool is_ubsan)\n       do_pending_stack_adjust ();\n     }\n   else if (lhs)\n-    write_complex_part (target, const1_rtx, true);\n+    expand_arith_set_overflow (lhs, target);\n \n   /* We're done.  */\n   emit_label (done_label);\n@@ -1082,7 +1124,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t\t\t\t   NULL, do_main_label, PROB_VERY_LIKELY);\n \t  do_compare_rtx_and_jump (op1, const0_rtx, EQ, true, mode, NULL_RTX,\n \t\t\t\t   NULL, do_main_label, PROB_VERY_LIKELY);\n-\t  write_complex_part (target, const1_rtx, true);\n+\t  expand_arith_set_overflow (lhs, target);\n \t  emit_label (do_main_label);\n \t  goto do_main;\n \tdefault:\n@@ -1213,7 +1255,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t     is, thus we can keep do_main code oring in overflow as is.  */\n \t  do_compare_rtx_and_jump (tem, const0_rtx, EQ, true, mode, NULL_RTX,\n \t\t\t\t   NULL, do_main_label, PROB_VERY_LIKELY);\n-\t  write_complex_part (target, const1_rtx, true);\n+\t  expand_arith_set_overflow (lhs, target);\n \t  emit_label (do_main_label);\n \t  goto do_main;\n \tdefault:\n@@ -1617,7 +1659,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n       do_pending_stack_adjust ();\n     }\n   else if (lhs)\n-    write_complex_part (target, const1_rtx, true);\n+    expand_arith_set_overflow (lhs, target);\n \n   /* We're done.  */\n   emit_label (done_label);\n@@ -1628,7 +1670,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n       rtx_code_label *all_done_label = gen_label_rtx ();\n       do_compare_rtx_and_jump (res, const0_rtx, GE, false, mode, NULL_RTX,\n \t\t\t       NULL, all_done_label, PROB_VERY_LIKELY);\n-      write_complex_part (target, const1_rtx, true);\n+      expand_arith_set_overflow (lhs, target);\n       emit_label (all_done_label);\n     }\n \n@@ -1639,7 +1681,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n       rtx_code_label *set_noovf = gen_label_rtx ();\n       do_compare_rtx_and_jump (op1, const0_rtx, GE, false, mode, NULL_RTX,\n \t\t\t       NULL, all_done_label, PROB_VERY_LIKELY);\n-      write_complex_part (target, const1_rtx, true);\n+      expand_arith_set_overflow (lhs, target);\n       do_compare_rtx_and_jump (op0, const0_rtx, EQ, true, mode, NULL_RTX,\n \t\t\t       NULL, set_noovf, PROB_VERY_LIKELY);\n       do_compare_rtx_and_jump (op0, constm1_rtx, NE, true, mode, NULL_RTX,"}, {"sha": "0276069ce1fbaf82d0203aa463ebdb6a18736772", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -1,3 +1,32 @@\n+2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/builtin-arith-overflow-1.c (generic_wrong_type, f3,\n+\tf4): Adjust expected diagnostics.\n+\t* c-c++-common/torture/builtin-arith-overflow.h (TP): New macro.\n+\t(T): If OVFP is defined, redefine to TP.\n+\t* c-c++-common/torture/builtin-arith-overflow-12.c: Adjust comment.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-1.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-2.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-3.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-4.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-5.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-6.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-7.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-8.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-9.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-10.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-11.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-12.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-13.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-14.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-15.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-16.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-17.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-18.c: New test.\n+\t* c-c++-common/torture/builtin-arith-overflow-p-19.c: New test.\n+\t* g++.dg/ext/builtin-arith-overflow-1.C: Pass 0 instead of C\n+\tas last argument to __builtin_add_overflow_p.\n+\n 2016-06-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/vect/pr33834_2.cc: Use dg-additional-options instead of"}, {"sha": "e119d2491d3feb98da1658c49f7e8a0ed1bc8319", "filename": "gcc/testsuite/c-c++-common/builtin-arith-overflow-1.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -118,14 +118,14 @@ generic_wrong_type (int a, int b)\n {\n   void *p = 0;\n   double d = 0;\n-  int x = __builtin_add_overflow (a, b, p);   /* { dg-error \"does not have pointer to integer type\" } */\n-  x += __builtin_sub_overflow (a, b, &p);     /* { dg-error \"does not have pointer to integer type\" } */\n-  x += __builtin_mul_overflow (a, b, &d);     /* { dg-error \"does not have pointer to integer type\" } */\n+  int x = __builtin_add_overflow (a, b, p);   /* { dg-error \"does not have pointer to integral type\" } */\n+  x += __builtin_sub_overflow (a, b, &p);     /* { dg-error \"does not have pointer to integral type\" } */\n+  x += __builtin_mul_overflow (a, b, &d);     /* { dg-error \"does not have pointer to integral type\" } */\n \n   /* Also verify literal arguments.  */\n-  x += __builtin_add_overflow (1, 1, p);   /* { dg-error \"does not have pointer to integer type\" } */\n-  x += __builtin_sub_overflow (1, 1, &p);     /* { dg-error \"does not have pointer to integer type\" } */\n-  x += __builtin_mul_overflow (1, 1, &d);     /* { dg-error \"does not have pointer to integer type\" } */\n+  x += __builtin_add_overflow (1, 1, p);   /* { dg-error \"does not have pointer to integral type\" } */\n+  x += __builtin_sub_overflow (1, 1, &p);     /* { dg-error \"does not have pointer to integral type\" } */\n+  x += __builtin_mul_overflow (1, 1, &d);     /* { dg-error \"does not have pointer to integral type\" } */\n   return x;\n }\n \n@@ -236,8 +236,8 @@ f3 (float fa, int a, _Complex long int ca, double fb, void *pb, int b, enum E eb\n   x += __builtin_sub_overflow_p (ca, b, eb);\t/* { dg-error \"argument 1 in call to function\\[^\\n\\r]*does not have integral type\" } */\n   x += __builtin_mul_overflow_p (a, fb, bb);\t/* { dg-error \"argument 2 in call to function\\[^\\n\\r]*does not have integral type\" } */\n   x += __builtin_add_overflow_p (a, pb, a);\t/* { dg-error \"argument 2 in call to function\\[^\\n\\r]*does not have integral type\" } */\n-  x += __builtin_sub_overflow_p (a, eb, eb);\n-  x += __builtin_mul_overflow_p (a, bb, bb);\n+  x += __builtin_sub_overflow_p (a, eb, eb);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*has enumerated type\" } */\n+  x += __builtin_mul_overflow_p (a, bb, bb);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*has boolean type\" } */\n   x += __builtin_add_overflow_p (a, b, fa);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have integral type\" } */\n   x += __builtin_sub_overflow_p (a, b, ca);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have integral type\" } */\n   x += __builtin_mul_overflow_p (a, b, c);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have integral type\" } */\n@@ -247,11 +247,11 @@ f3 (float fa, int a, _Complex long int ca, double fb, void *pb, int b, enum E eb\n int\n f4 (float *fp, double *dp, _Complex int *cp, enum E *ep, bool *bp, long long int *llp)\n {\n-  int x = __builtin_add_overflow (1, 2, fp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integer type\" } */\n-  x += __builtin_sub_overflow (1, 2, dp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integer type\" } */\n-  x += __builtin_mul_overflow (1, 2, cp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integer type\" } */\n-  x += __builtin_add_overflow (1, 2, ep);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integer type\" } */\n-  x += __builtin_sub_overflow (1, 2, bp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integer type\" } */\n+  int x = __builtin_add_overflow (1, 2, fp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integral type\" } */\n+  x += __builtin_sub_overflow (1, 2, dp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integral type\" } */\n+  x += __builtin_mul_overflow (1, 2, cp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*does not have pointer to integral type\" } */\n+  x += __builtin_add_overflow (1, 2, ep);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*has pointer to enumerated type\" } */\n+  x += __builtin_sub_overflow (1, 2, bp);\t/* { dg-error \"argument 3 in call to function\\[^\\n\\r]*has pointer to boolean type\" } */\n   x += __builtin_mul_overflow (1, 2, llp);\n   return x;\n }"}, {"sha": "0fe0498635d3eb0fdd1e726fc911674ae54fd0ed", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-12.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -1,4 +1,4 @@\n-/* Test __builtin_{add,sub,mul_overflow.  */\n+/* Test __builtin_{add,sub,mul}_overflow.  */\n /* { dg-do run } */\n /* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n "}, {"sha": "b90a649448bbaabc95b39f298b89e87ffb0693cb", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-1.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define U(s, op) op\n+TESTS (int, INT_MIN, INT_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (int, INT_MIN, INT_MAX)\n+  return 0;\n+}"}, {"sha": "bf514dd3042ea8f069c124b33f5d0134b04239b2", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-10.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub}_overflow_p on {,un}signed long int.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+typedef signed long int S;\n+typedef unsigned long int U;\n+#define COND 1\n+#define SHIFT ((__SIZEOF_LONG__ - 1) * __CHAR_BIT__)\n+#define S_MAX __LONG_MAX__\n+#define S_MIN (-__LONG_MAX__ - 1)\n+#if __SIZEOF_LONG_LONG__ > __SIZEOF_LONG__\n+typedef long long int W;\n+#elif __SIZEOF_INT128__ > __SIZEOF_LONG__\n+typedef __int128 W;\n+#else\n+#undef COND\n+#define COND 0\n+#endif\n+#include \"builtin-arith-overflow-p-7.c\""}, {"sha": "7be9c0fc4b00279cf29329d7c2c16f14422f607e", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-11.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,17 @@\n+/* Test __builtin_{add,sub}_overflow_p on {,un}signed long long int.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+typedef signed long long int S;\n+typedef unsigned long long int U;\n+#define COND 1\n+#define SHIFT ((__SIZEOF_LONG_LONG__ - 1) * __CHAR_BIT__)\n+#define S_MAX __LONG_LONG_MAX__\n+#define S_MIN (-__LONG_LONG_MAX__ - 1)\n+#if __SIZEOF_INT128__ > __SIZEOF_LONG_LONG__\n+typedef __int128 W;\n+#else\n+#undef COND\n+#define COND 0\n+#endif\n+#include \"builtin-arith-overflow-p-7.c\""}, {"sha": "2f38c1852117b49df18cd1c743dcb036f0a7cce4", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-12.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-12.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,18 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+TESTS (int, INT_MIN, INT_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (int, INT_MIN, INT_MAX)\n+  return 0;\n+}"}, {"sha": "0859ef204e5065032583b19b8d9913766b023580", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-13.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,18 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+TESTS (long, LONG_MIN, LONG_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (long, LONG_MIN, LONG_MAX)\n+  return 0;\n+}"}, {"sha": "57b1e5a923d63f8337f67f9023b095af7463e751", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-14.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-14.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,18 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+TESTS (long long, LLONG_MIN, LLONG_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (long long, LLONG_MIN, LLONG_MAX)\n+  return 0;\n+}"}, {"sha": "434ea35dde6abe1cadbfff0b55b4d9ab1a7d3c12", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-15.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-15.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,18 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+TESTS (char, SCHAR_MIN, SCHAR_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (char, SCHAR_MIN, SCHAR_MAX)\n+  return 0;\n+}"}, {"sha": "0d6dd956194dbe79d7db97115799e31c81d52d89", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-16.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-16.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,18 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+TESTS (short, SHRT_MIN, SHRT_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (short, SHRT_MIN, SHRT_MAX)\n+  return 0;\n+}"}, {"sha": "18721d3fbfcc96fe919eac2fe7c979aa16114a19", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-17.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-17.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,21 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run { target int128 } } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-12.h\"\n+\n+#define INT128_MAX ((signed __int128) (((unsigned __int128) 1 << (__SIZEOF_INT128__ * __CHAR_BIT__ - 1)) - 1))\n+#define INT128_MIN (-INT128_MAX - 1)\n+\n+TESTS (__int128, INT128_MIN, INT128_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (__int128, INT128_MIN, INT128_MAX)\n+  return 0;\n+}"}, {"sha": "6f10073cf42742ad19ee168656cb8242988f7a18", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-18.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-18.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,37 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow.h\"\n+\n+#ifdef __SIZEOF_INT128__\n+#define WTYPE __int128\n+#else\n+#define WTYPE long long int\n+#endif\n+\n+#define TESTS \\\n+T (100, signed char, signed char, unsigned WTYPE, -1, 0, -1, add, 1) \\\n+T (101, unsigned char, unsigned char, unsigned WTYPE, 5, 5, 10, add, 0) \\\n+T (102, signed char, unsigned short, unsigned WTYPE, 5, 5, 0, sub, 0) \\\n+T (103, signed char, unsigned short, unsigned WTYPE, 5, 6, -1, sub, 1) \\\n+T (104, signed char, signed char, unsigned WTYPE, -1, -1, 1, mul, 0) \\\n+T (105, unsigned char, signed char, unsigned WTYPE, 17, -2, -34, mul, 1) \\\n+T (106, unsigned WTYPE, signed WTYPE, signed char, 5, -2, -10, mul, 0) \\\n+T (107, long long int, long long int, unsigned char, -3, 5, 2, add, 0) \\\n+T (108, long long int, int, unsigned char, -5, 3, -2, add, 1) \\\n+T (109, int, WTYPE, unsigned char, -3, 5, 2, add, 0) \\\n+T (110, unsigned char, unsigned char, unsigned WTYPE, SCHAR_MAX - 1, (unsigned char) SCHAR_MAX + 4, -5, sub, 1)\n+\n+TESTS\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS\n+  return 0;\n+}"}, {"sha": "38f6d07536e6d24645ac7189799668c38b70659c", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-19.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,73 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run { target c } } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#include \"builtin-arith-overflow.h\"\n+\n+#ifdef __SIZEOF_INT128__\n+#define WTYPE __int128\n+#else\n+#define WTYPE long long int\n+#endif\n+\n+struct S\n+{\n+  signed int s1 : 1;\n+  unsigned int u1 : 1;\n+  signed int s2 : 2;\n+  unsigned int u2 : 2;\n+  signed int s3 : 3;\n+  unsigned int u3 : 3;\n+  signed int s4 : 4;\n+  unsigned int u4 : 4;\n+  signed int s5 : 5;\n+  unsigned int u5 : 5;\n+  signed int s6 : 6;\n+  unsigned int u6 : 6;\n+  signed int s7 : 7;\n+  unsigned int u7 : 7;\n+} vs;\n+\n+#define TESTS \\\n+TP (100, signed char, signed char, vs.u2, -1, 0, add, 1) \\\n+TP (101, unsigned char, unsigned char, vs.u4, 5, 5, add, 0) \\\n+TP (102, unsigned char, unsigned char, vs.u3, 5, 3, add, 1) \\\n+TP (103, signed char, unsigned short, vs.u1, 5, 5, sub, 0) \\\n+TP (104, signed char, unsigned short, vs.u1, 6, 5, sub, 0) \\\n+TP (105, signed char, unsigned short, vs.u1, 7, 5, sub, 1) \\\n+TP (106, signed char, unsigned short, vs.u4, 5, 6, sub, 1) \\\n+TP (107, signed char, signed char, vs.u1, -1, -1, mul, 0) \\\n+TP (108, signed char, signed char, vs.s1, -1, -1, mul, 1) \\\n+TP (109, unsigned char, signed char, vs.u6, 17, -2, mul, 1) \\\n+TP (110, unsigned char, signed char, vs.s6, 17, -2, mul, 1) \\\n+TP (111, unsigned char, signed char, vs.s7, 17, -2, mul, 0) \\\n+TP (112, unsigned WTYPE, signed WTYPE, vs.s5, 5, -2, mul, 0) \\\n+TP (113, unsigned WTYPE, signed WTYPE, vs.s4, 5, -2, mul, 1) \\\n+TP (114, long long int, long long int, vs.u2, -3, 5, add, 0) \\\n+TP (115, long long int, long long int, vs.u1, -3, 5, add, 1) \\\n+TP (116, long long int, int, vs.u3, -5, 3, add, 1) \\\n+TP (117, long long int, int, vs.s1, -5, 3, add, 1) \\\n+TP (118, long long int, int, vs.s2, -5, 3, add, 0) \\\n+TP (119, int, WTYPE, vs.u2, -3, 5, add, 0) \\\n+TP (120, int, WTYPE, vs.u1, -3, 5, add, 1) \\\n+TP (121, unsigned char, unsigned char, vs.u6, SCHAR_MAX - 1, (unsigned char) SCHAR_MAX + 4, sub, 1) \\\n+TP (122, unsigned char, unsigned char, vs.s3, SCHAR_MAX - 1, (unsigned char) SCHAR_MAX + 4, sub, 1) \\\n+TP (123, unsigned char, unsigned char, vs.s4, SCHAR_MAX - 1, (unsigned char) SCHAR_MAX + 4, sub, 0) \\\n+TP (124, unsigned int, unsigned int, vs.u7, INT_MAX, 1, add, 1) \\\n+TP (125, unsigned int, unsigned int, vs.u7, 127, 1, add, 1) \\\n+TP (126, unsigned int, unsigned int, vs.u7, 1, 63, add, 0) \\\n+TP (127, int, int, vs.s7, INT_MIN, 1, sub, 1) \\\n+TP (128, int, int, vs.s7, -64, 1, sub, 1) \\\n+TP (129, int, int, vs.s7, -63, 1, sub, 0)\n+\n+TESTS\n+\n+#undef TP\n+#define TP(n, t1, t2, er, v1, v2, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS\n+  return 0;\n+}"}, {"sha": "868bbbd2f5ae1d5843eef37d49118efab3185277", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-2.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define U(s, op) op\n+TESTS (long, LONG_MIN, LONG_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (long, LONG_MIN, LONG_MAX)\n+  return 0;\n+}"}, {"sha": "90fa93080798d01abfe4658c9294a4ab07481ef5", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-3.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define U(s, op) op\n+TESTS (long long, LLONG_MIN, LLONG_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (long long, LLONG_MIN, LLONG_MAX)\n+  return 0;\n+}"}, {"sha": "e63a0591b19aae46289bec46683e64077290902a", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-4.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define U(s, op) op\n+TESTS (char, SCHAR_MIN, SCHAR_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (char, SCHAR_MIN, SCHAR_MAX)\n+  return 0;\n+}"}, {"sha": "14a7b61761df1bcf479ba4dc5dc05c055c6da4c7", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-5.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,19 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define U(s, op) op\n+TESTS (short, SHRT_MIN, SHRT_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (short, SHRT_MIN, SHRT_MAX)\n+  return 0;\n+}"}, {"sha": "ba05aba47ab44b8044c35a08f0494cf35fd6742f", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-6.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,22 @@\n+/* Test __builtin_{add,sub,mul}_overflow_p.  */\n+/* { dg-do run { target int128 } } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define OVFP\n+#include \"builtin-arith-overflow-1.h\"\n+\n+#define INT128_MAX ((signed __int128) (((unsigned __int128) 1 << (__SIZEOF_INT128__ * __CHAR_BIT__ - 1)) - 1))\n+#define INT128_MIN (-INT128_MAX - 1)\n+\n+#define U(s, op) op\n+TESTS (__int128, INT128_MIN, INT128_MAX)\n+\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) t##n##b ();\n+\n+int\n+main ()\n+{\n+  TESTS (__int128, INT128_MIN, INT128_MAX)\n+  return 0;\n+}"}, {"sha": "cb594a284c1132fe473690e43b45f471a60bedd6", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-7.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-7.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,79 @@\n+/* Test __builtin_{add,sub}_overflow_p on {,un}signed char.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+#define UCHAR_MAX ((unsigned char) ~0)\n+#ifndef SHIFT\n+typedef signed char S;\n+typedef unsigned char U;\n+typedef int W;\n+#define SHIFT 0\n+#define S_MAX __SCHAR_MAX__\n+#define S_MIN (-__SCHAR_MAX__ - 1)\n+#define COND (__SIZEOF_INT__ > 1)\n+#endif\n+\n+#define F(n, t1, t2, tr, b) \\\n+__attribute__((noinline, noclone)) void\t\t\\\n+n (t1 x, t2 y, int *ovf)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  *ovf = __builtin_##b##_overflow_p (x, y,\t\\\n+\t\t\t\t     (tr) 0);\t\\\n+}\n+\n+F (spses, S, S, S, add)\n+F (upueu, U, U, U, add)\n+F (spseu, S, S, U, add)\n+F (upues, U, U, S, add)\n+F (spues, S, U, S, add)\n+F (upses, U, S, S, add)\n+F (spueu, S, U, U, add)\n+F (upseu, U, S, U, add)\n+F (ssses, S, S, S, sub)\n+F (usueu, U, U, U, sub)\n+F (ssseu, S, S, U, sub)\n+F (usues, U, U, S, sub)\n+F (ssues, S, U, S, sub)\n+F (usses, U, S, S, sub)\n+F (ssueu, S, U, U, sub)\n+F (usseu, U, S, U, sub)\n+\n+int\n+main ()\n+{\n+#if COND\n+  int i, j;\n+  for (i = 0; i < UCHAR_MAX; i++)\n+    for (j = 0; j < UCHAR_MAX; j++)\n+      {\n+\tS s1 = ((W) i << SHIFT) + S_MIN;\n+\tU u1 = ((W) i << SHIFT);\n+\tS s2 = ((W) j << SHIFT) + S_MIN;\n+\tU u2 = ((W) j << SHIFT);\n+\tW w;\n+\tint ovf;\n+#define T(n, t1, t2, tr, op) \\\n+\tw = ((W) t1##1) op ((W) t2##2);\t\t\\\n+\tn (t1##1, t2##2, &ovf);\t\t\t\\\n+\tif (ovf != (w != (tr) w))\t\t\\\n+\t  __builtin_abort ();\n+\tT (spses, s, s, S, +)\n+\tT (upueu, u, u, U, +)\n+\tT (spseu, s, s, U, +)\n+\tT (upues, u, u, S, +)\n+\tT (spues, s, u, S, +)\n+\tT (upses, u, s, S, +)\n+\tT (spueu, s, u, U, +)\n+\tT (upseu, u, s, U, +)\n+\tT (ssses, s, s, S, -)\n+\tT (usueu, u, u, U, -)\n+\tT (ssseu, s, s, U, -)\n+\tT (usues, u, u, S, -)\n+\tT (ssues, s, u, S, -)\n+\tT (usses, u, s, S, -)\n+\tT (ssueu, s, u, U, -)\n+\tT (usseu, u, s, U, -)\n+      }\n+#endif\n+  return 0;\n+}"}, {"sha": "5200be99d46f2d57bccf67d5ad5ee31554af2900", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-8.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,23 @@\n+/* Test __builtin_{add,sub}_overflow_p on {,un}signed short.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+typedef signed short int S;\n+typedef unsigned short int U;\n+#define COND 1\n+#define SHIFT ((__SIZEOF_SHORT__ - 1) * __CHAR_BIT__)\n+#define S_MAX __SHRT_MAX__\n+#define S_MIN (-__SHRT_MAX__ - 1)\n+#if __SIZEOF_INT__ > __SIZEOF_SHORT__\n+typedef int W;\n+#elif __SIZEOF_LONG__ > __SIZEOF_SHORT__\n+typedef long int W;\n+#elif __SIZEOF_LONG_LONG__ > __SIZEOF_SHORT__\n+typedef long long int W;\n+#elif __SIZEOF_INT128__ > __SIZEOF_SHORT__\n+typedef __int128 W;\n+#else\n+#undef COND\n+#define COND 0\n+#endif\n+#include \"builtin-arith-overflow-p-7.c\""}, {"sha": "a26cc0674d6600ed9140e7ea3196cdeff4683885", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-9.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-9.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -0,0 +1,21 @@\n+/* Test __builtin_{add,sub}_overflow_p on {,un}signed int.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n+\n+typedef signed int S;\n+typedef unsigned int U;\n+#define COND 1\n+#define SHIFT ((__SIZEOF_INT__ - 1) * __CHAR_BIT__)\n+#define S_MAX __INT_MAX__\n+#define S_MIN (-__INT_MAX__ - 1)\n+#if __SIZEOF_LONG__ > __SIZEOF_INT__\n+typedef long int W;\n+#elif __SIZEOF_LONG_LONG__ > __SIZEOF_INT__\n+typedef long long int W;\n+#elif __SIZEOF_INT128__ > __SIZEOF_INT__\n+typedef __int128 W;\n+#else\n+#undef COND\n+#define COND 0\n+#endif\n+#include \"builtin-arith-overflow-p-7.c\""}, {"sha": "c79999ebf6ed9294f1392d79df86f9872832f697", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow.h?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -90,5 +90,70 @@ t##n##b (void)\t\t\t\t\t\\\n   if (r2 != (tr) (vr) || v != 7 * o)\t\t\\\n     __builtin_abort ();\t\t\t\t\\\n }\n+#define TP(n, t1, t2, er, v1, v2, b, o) \\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##_1##b (t1 x, t2 y)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p (x, y, er))\t\\\n+    bar ();\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##_2##b (t2 y)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  t1 x = (v1);\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p (x, y, er))\t\\\n+    bar ();\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##_3##b (t2 y)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p ((t1) (v1), y,\t\\\n+\t\t\t\t  er))\t\t\\\n+    bar ();\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##_4##b (t1 x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  t2 y = (v2);\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p (x, y, er))\t\\\n+    bar ();\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##_5##b (t1 x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p (x, (t2) (v2),\t\\\n+\t\t\t\t  er))\t\t\\\n+    bar ();\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) void\t\t\\\n+t##n##b (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  t1 x = (v1);\t\t\t\t\t\\\n+  t2 y = (v2);\t\t\t\t\t\\\n+  v = 0;\t\t\t\t\t\\\n+  t##n##_1##b (x, y);\t\t\t\t\\\n+  t##n##_2##b (y);\t\t\t\t\\\n+  t##n##_3##b (y);\t\t\t\t\\\n+  t##n##_4##b (x);\t\t\t\t\\\n+  t##n##_5##b (x);\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p (x, y, er))\t\\\n+    bar ();\t\t\t\t\t\\\n+  if (__builtin_##b##_overflow_p ((t1) (v1),\t\\\n+\t\t\t\t  (t2) (v2),\t\\\n+\t\t\t\t  er))\t\t\\\n+    bar ();\t\t\t\t\t\\\n+  if (v != 7 * o)\t\t\t\t\\\n+    __builtin_abort ();\t\t\t\t\\\n+}\n+#ifdef OVFP\n+#undef T\n+#define T(n, t1, t2, tr, v1, v2, vr, b, o) \\\n+TP(n, t1, t2, (tr) 0, v1, v2, b, o)\n+#endif\n #define ST(n, t, v1, v2, vr, b, o) \\\n T (n, t, t, t, v1, v2, vr, b, o)"}, {"sha": "e0c93e54f55b91c35e5bf0c3aa4fd15228ef0a3e", "filename": "gcc/testsuite/g++.dg/ext/builtin-arith-overflow-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-1.C?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -1,11 +1,11 @@\n // { dg-do compile }\n \n-enum A { B = 1, C = 2, D = __builtin_add_overflow_p (B, C, C) };\n-int e[__builtin_add_overflow_p (B, C, C) + 1];\n+enum A { B = 1, C = 2, D = __builtin_add_overflow_p (B, C, 0) };\n+int e[__builtin_add_overflow_p (B, C, 0) + 1];\n template <int N> int foo (int);\n \n void\n bar ()\n {\n-  foo <__builtin_add_overflow_p (B, C, C) + 1> (0);\n+  foo <__builtin_add_overflow_p (B, C, 0) + 1> (0);\n }"}, {"sha": "4333d60672fe7bedd8fdbfcabb3d60ee0511b258", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86451b9b20415805e6316638c349cce86252893/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a86451b9b20415805e6316638c349cce86252893", "patch": "@@ -4016,6 +4016,9 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t\t\tset_value_range_to_value (vr,\n \t\t\t\t\t\t  build_int_cst (type, ovf),\n \t\t\t\t\t\t  NULL);\n+\t\t      else if (TYPE_PRECISION (type) == 1\n+\t\t\t       && !TYPE_UNSIGNED (type))\n+\t\t\tset_value_range_to_varying (vr);\n \t\t      else\n \t\t\tset_value_range (vr, VR_RANGE, build_int_cst (type, 0),\n \t\t\t\t\t build_int_cst (type, 1), NULL);"}]}