{"sha": "64630e61332a2a9e9638668c41b79fba87c9f016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MzBlNjEzMzJhMmE5ZTk2Mzg2NjhjNDFiNzlmYmE4N2M5ZjAxNg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-02-06T17:41:28Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-02-06T17:41:28Z"}, "message": "Add runtime tests for interchange and blocking.\n\n2010-02-03  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* testsuite/g++.dg/graphite/graphite.exp: Rewritten.\n\t* testsuite/gcc.dg/graphite/graphite.exp: Rewritten.\n\t* testsuite/gfortran.dg/graphite/graphite.exp: Rewritten.\n\t* gcc/testsuite/gcc.dg/graphite/block-0.c: Added runtime test.\n\t* testsuite/gcc.dg/graphite/block-1.c: Same.\n\t* testsuite/gcc.dg/graphite/block-3.c: Same.\n\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n\t* testsuite/gcc.dg/graphite/block-5.c: Same.\n\t* testsuite/gcc.dg/graphite/block-6.c: Same.\n\t* testsuite/gcc.dg/graphite/block-7.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-0.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-1.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-10.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-11.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-12.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-2.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-3.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-4.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-5.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-6.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-7.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-8.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-9.c: Same.\n\t* testsuite/gcc.dg/graphite/interchange-mvt.c: Same.\n\t* testsuite/gcc.dg/graphite/run-id-2.c: Remove useless dg-do run.\n\nFrom-SVN: r156548", "tree": {"sha": "291acc86ca0050b691c5085cb15d1e248fcb3397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/291acc86ca0050b691c5085cb15d1e248fcb3397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64630e61332a2a9e9638668c41b79fba87c9f016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64630e61332a2a9e9638668c41b79fba87c9f016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64630e61332a2a9e9638668c41b79fba87c9f016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64630e61332a2a9e9638668c41b79fba87c9f016/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8f3c48bf99344bcca34b86396492b823147a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8f3c48bf99344bcca34b86396492b823147a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8f3c48bf99344bcca34b86396492b823147a84"}], "stats": {"total": 968, "additions": 739, "deletions": 229}, "files": [{"sha": "fe9962c13f415ab6a7bf64a2eb51a9faf1377404", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,3 +1,31 @@\n+2010-02-03  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* testsuite/g++.dg/graphite/graphite.exp: Rewritten.\n+\t* testsuite/gcc.dg/graphite/graphite.exp: Rewritten.\n+\t* testsuite/gfortran.dg/graphite/graphite.exp: Rewritten.\n+\t* gcc/testsuite/gcc.dg/graphite/block-0.c: Added runtime test.\n+\t* testsuite/gcc.dg/graphite/block-1.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-3.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-5.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-6.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-7.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-0.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-1.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-10.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-11.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-12.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-2.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-3.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-4.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-5.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-6.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-7.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-8.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-9.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-mvt.c: Same.\n+\t* testsuite/gcc.dg/graphite/run-id-2.c: Remove useless dg-do run.\n+\n 2010-01-22  Ramakrishna Upadrasta <Ramakrishna.Upadrasta@inria.fr>\n \n \t* graphite-scop-detection.c (dot_all_scops): Make calls to dot run in"}, {"sha": "f46dcc706d3e9ecd5ce51219670a560a6a770519", "filename": "gcc/testsuite/g++.dg/graphite/graphite.exp", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -33,58 +33,36 @@ proc lremove {list_variable value} {\n # The default action for a test is 'compile'.  Save current default.\n global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n-set dg-do-what-default compile\n \n # Initialize `dg'.\n dg-init\n \n-# Main loop.\n-\n set wait_to_run_files [lsort [glob -nocomplain $srcdir/$subdir/*.C ] ]\n-\n-# Flags using for block-* files.\n-set DEFAULT_FLAGS_GRAPHITE_BLOCK \"-O2 -floop-block -fno-loop-strip-mine \\\n- -fno-loop-interchange -fdump-tree-graphite-all\"\n-set block_files [lsort [glob -nocomplain $srcdir/$subdir/block-*.C ] ]\n-dg-runtest $block_files \"\" $DEFAULT_FLAGS_GRAPHITE_BLOCK\n-foreach block_file $block_files {lremove wait_to_run_files $block_file}\n-\n-# Flags using for id-* files.\n-set DEFAULT_FLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity\"\n-set id_files [lsort [glob -nocomplain $srcdir/$subdir/id-*.C ] ]\n-dg-runtest $id_files \"\" $DEFAULT_FLAGS_GRAPHITE_IDENTITY\n-foreach id_file $id_files {lremove wait_to_run_files $id_file}\n-\n-# Flags using for interchange-* files.\n-set DEFAULT_FLAGS_GRAPHITE_INTERCHANGE \"-O2 -fdump-tree-graphite-all \\\n- -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math\"\n+set scop_files        [lsort [glob -nocomplain $srcdir/$subdir/scop-*.C ] ]\n+set id_files          [lsort [glob -nocomplain $srcdir/$subdir/id-*.C ] ]\n+set run_id_files      [lsort [glob -nocomplain $srcdir/$subdir/run-id-*.C ] ]\n set interchange_files [lsort [glob -nocomplain $srcdir/$subdir/interchange-*.C ] ]\n-dg-runtest $interchange_files \"\" $DEFAULT_FLAGS_GRAPHITE_INTERCHANGE\n-foreach interchange_file $interchange_files {lremove wait_to_run_files $interchange_file}\n-\n-# Flags using for scop-* files.\n-set DEFAULT_FLAGS_GRAPHITE_SCOP \"-O2 -fgraphite -fdump-tree-graphite-all\"\n-set scop_files [lsort [glob -nocomplain $srcdir/$subdir/scop-*.C ] ]\n-dg-runtest $scop_files \"\" $DEFAULT_FLAGS_GRAPHITE_SCOP\n-foreach scop_file $scop_files {lremove wait_to_run_files $scop_file}\n+set block_files       [lsort [glob -nocomplain $srcdir/$subdir/block-*.C ] ]\n \n+# Tests to be compiled.\n+set dg-do-what-default compile\n+dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all\"\n+dg-runtest $id_files          \"\" \"-O2 -fgraphite-identity -ffast-math\"\n \n-# Schedule now the tests to be run.\n+# Tests to be run.\n set dg-do-what-default run\n-\n-# Flags using for run-id-* files.\n-set DEFAULT_FLAGS_RUN_ID \"-O2 -fgraphite-identity\"\n-set run_id_files [lsort [glob -nocomplain $srcdir/$subdir/run-id-*.C ] ]\n-dg-runtest $run_id_files \"\" $DEFAULT_FLAGS_RUN_ID\n-foreach run_id_file $run_id_files {lremove wait_to_run_files $run_id_file}\n-\n+dg-runtest $run_id_files      \"\" \"-O2 -fgraphite-identity\"\n+dg-runtest $interchange_files \"\" \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n+dg-runtest $block_files       \"\" \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n \n # The default action for the rest of the files is 'compile'.\n set dg-do-what-default compile\n-\n-# Flags using for other files.\n-set DEFAULT_FLAGS_GRAPHITE \"-ansi -pedantic-errors\"\n-dg-runtest $wait_to_run_files \"\" $DEFAULT_FLAGS_GRAPHITE\n+foreach f $scop_files        {lremove wait_to_run_files $f}\n+foreach f $id_files          {lremove wait_to_run_files $f}\n+foreach f $run_id_files      {lremove wait_to_run_files $f}\n+foreach f $interchange_files {lremove wait_to_run_files $f}\n+foreach f $block_files       {lremove wait_to_run_files $f}\n+dg-runtest $wait_to_run_files \"\" \"-ansi -pedantic-errors\"\n \n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default}"}, {"sha": "112b889302ad0829a78f2636bbc1366f6ee2900a", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,11 +1,16 @@\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n #define N 1000\n+int a[N];\n \n-int toto()\n+static int __attribute__((noinline))\n+foo (void)\n {\n   int j;\n   int i;\n-  int a[N];\n-  int b[N];\n \n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n@@ -16,7 +21,18 @@ int toto()\n \n main()\n {\n-  return toto();\n+  int i, res;\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = i;\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 1999;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */"}, {"sha": "64ff67b222666a2fa981e8d794bff38aba38c3f2", "filename": "gcc/testsuite/gcc.dg/graphite/block-1.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,8 +1,11 @@\n /* { dg-require-effective-target size32plus } */\n \n-#define MAX 8192\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n \n-void bar (void);\n+#define MAX 100\n \n int main()\n {\n@@ -11,8 +14,6 @@ int main()\n   int A[MAX * MAX];\n   int B[MAX * MAX];\n \n-  bar ();\n-\n   for (i = 0; i < MAX; i++)\n     for (j = 0; j < MAX; j++)\n       {\n@@ -24,13 +25,15 @@ int main()\n     for (j = 0; j < MAX; j++)\n       A[i*MAX + j] += B[j*MAX + i];\n \n-  bar ();\n-\n   for(i = 0; i < MAX; i++)\n     for(j = 0; j < MAX; j++)\n       sum += A[i*MAX + j];\n \n-  return sum;\n+#if DEBUG\n+  fprintf (stderr, \"sum = %d \\n\", sum);\n+#endif\n+\n+  return sum != 990000;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 2 \"graphite\" { xfail *-*-* } } } */ "}, {"sha": "01e186352f83580121cd0dd19288f4c211f39a2c", "filename": "gcc/testsuite/gcc.dg/graphite/block-3.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,11 +1,17 @@\n /* { dg-require-effective-target size32plus } */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n #define N 24\n #define M 100\n \n-float A[M][M][M], B[M][M], C[M][M];\n+int A[M][M][M], B[M][M], C[M][M];\n \n-void test (void)\n+static int __attribute__((noinline))\n+foo (void)\n {\n   int i, j, k;\n \n@@ -20,6 +26,29 @@ void test (void)\n     for (j = 0; j < M; j++)\n       for (k = 0; k < M; k++)\n         A[i][j][k] = B[i][k] * C[k][j];\n+\n+  return A[0][0][0] + A[M-1][M-1][M-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < M; j++)\n+      {\n+\tB[i][j] = i;\n+\tC[i][j] = j;\n+      }\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 9801;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */"}, {"sha": "3019f796f0b850646ede0f11c59ea3fdbfbc06bd", "filename": "gcc/testsuite/gcc.dg/graphite/block-4.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,11 +1,17 @@\n /* { dg-require-effective-target size32plus } */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n #define N 24\n #define M 1000\n \n-float A[1000][1000], B[1000][1000], C[1000][1000];\n+int A[M][M], B[M][M], C[M][M];\n \n-void test (void)\n+static int __attribute__((noinline))\n+foo (void)\n {\n   int i, j, k;\n \n@@ -14,10 +20,33 @@ void test (void)\n       for (k = 0; k < 24; k++)\n         A[i][j] = B[i][k] * C[k][j];\n \n-  for (i = 0; i < 1000; i++)\n-    for (j = 0; j < 1000; j++)\n-      for (k = 0; k < 1000; k++)\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < M; j++)\n+      for (k = 0; k < M; k++)\n         A[i][j] = B[i][k] * C[k][j];\n+\n+  return A[0][0] + A[M-1][M-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < M; j++)\n+      {\n+\tB[i][j] = i;\n+\tC[i][j] = j;\n+      }\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 998001;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */"}, {"sha": "4b99900c9d4144d37c6eb32f297186574110e554", "filename": "gcc/testsuite/gcc.dg/graphite/block-5.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,25 +1,51 @@\n /* { dg-require-effective-target size32plus } */\n \n-#define N 10000\n-void foo (int);\n-int test ()\n-{\n-  int a[N][N];\n-  int b[N][N];\n-  unsigned i, j;\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n \n-  for (i = 0; i < N; i++)\n-    for (j = 0; j < N; j++)\n-      a[i][j] = i*j;\n+#define N 200\n+\n+int a[N][N];\n+int b[N][N];\n+\n+static int __attribute__((noinline))\n+foo (void)\n+{\n+  int i, j;\n+  int res = 0;\n \n   /* This loop nest should be blocked.  */\n   for (j = 1; j < N; j++)\n     for (i = 0; i < N; i++)\n       a[i][j] = a[i][j-1] + b[i][j];\n \n+  for (i = 0; i < N; i++)\n+    res += a[i][i];\n+\n+  return res;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n-      foo (a[i][j]);\n+      {\n+\ta[i][j] = i + j;\n+\tb[i][j] = i - j;\n+      }\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 1333300;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */"}, {"sha": "171b1df978c162efc10f6a9d5bf65463e87ede28", "filename": "gcc/testsuite/gcc.dg/graphite/block-6.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,25 +1,48 @@\n /* { dg-require-effective-target size32plus } */\n \n-#define N 10000\n-void foo (int);\n-int test ()\n-{\n-  int a[N][N];\n-  unsigned i, j;\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n \n-  for (i = 0; i < N; i++)\n-    for (j = 0; j < N; j++)\n-      a[i][j] = i*j;\n+#define N 200\n+int a[N][N];\n+\n+static int __attribute__((noinline))\n+foo (void)\n+{\n+  int i, j;\n+  int res = 0;\n \n   /* Interchange is not legal for loops 0 and 1.  */\n   for (i = 1; i < N; i++)\n-    for (j = 1; j < (N-1) ; j++)\n-      a[i][j] = a[i-1][j+1] * a[i-1][j+1]/2;\n+    for (j = 1; j < N - 1; j++)\n+      a[i][j] = a[i-1][j+1] * a[i-1][j+1] / 2;\n+\n+  for (i = 0; i < N; i++)\n+    res += a[i][i];\n+\n+  return res;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n \n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n-      foo (a[i][j]);\n+      a[i][j] = i + j;\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 204007516;\n }\n \n+\n /* { dg-final { scan-tree-dump-times \"will be loop blocked\" 0 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "3e8ff92a19489c5d787bed3df2a2b7b234e6d4a6", "filename": "gcc/testsuite/gcc.dg/graphite/block-7.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,8 +1,16 @@\n-#define N 1000\n+/* { dg-require-effective-target size32plus } */\n \n-float A[N][N], B[N][N], C[N][N];\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n \n-void matmult ()\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static void __attribute__((noinline))\n+matmult (void)\n {\n   int i, j, k;\n \n@@ -15,5 +23,29 @@ void matmult ()\n       }\n }\n \n+int\n+main (void)\n+{\n+  int i, j, res = 0;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tB[i][j] = j;\n+\tC[i][j] = i;\n+      }\n+\n+  matmult ();\n+\n+  for (i = 0; i < N; i++)\n+    res += A[i][i];\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 529340000;\n+}\n+\n /* { dg-final { scan-tree-dump-times \"SCoP will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "411e0417afd7f99ee4e9f5fc7d3bde96d9badff1", "filename": "gcc/testsuite/gcc.dg/graphite/graphite.exp", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -33,58 +33,36 @@ proc lremove {list_variable value} {\n # The default action for a test is 'compile'.  Save current default.\n global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n-set dg-do-what-default compile\n \n # Initialize `dg'.\n dg-init\n \n-# Main loop.\n-\n set wait_to_run_files [lsort [glob -nocomplain $srcdir/$subdir/*.c ] ]\n-\n-# Flags using for block-* files.\n-set DEFAULT_FLAGS_GRAPHITE_BLOCK \"-O2 -floop-block -fno-loop-strip-mine \\\n- -fno-loop-interchange -fdump-tree-graphite-all\"\n-set block_files [lsort [glob -nocomplain $srcdir/$subdir/block-*.c ] ]\n-dg-runtest $block_files \"\" $DEFAULT_FLAGS_GRAPHITE_BLOCK\n-foreach block_file $block_files {lremove wait_to_run_files $block_file}\n-\n-# Flags using for id-* files.\n-set DEFAULT_FLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity\"\n-set id_files [lsort [glob -nocomplain $srcdir/$subdir/id-*.c ] ]\n-dg-runtest $id_files \"\" $DEFAULT_FLAGS_GRAPHITE_IDENTITY\n-foreach id_file $id_files {lremove wait_to_run_files $id_file}\n-\n-# Flags using for interchange-* files.\n-set DEFAULT_FLAGS_GRAPHITE_INTERCHANGE \"-O2 -fdump-tree-graphite-all \\\n- -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math\"\n+set scop_files        [lsort [glob -nocomplain $srcdir/$subdir/scop-*.c ] ]\n+set id_files          [lsort [glob -nocomplain $srcdir/$subdir/id-*.c ] ]\n+set run_id_files      [lsort [glob -nocomplain $srcdir/$subdir/run-id-*.c ] ]\n set interchange_files [lsort [glob -nocomplain $srcdir/$subdir/interchange-*.c ] ]\n-dg-runtest $interchange_files \"\" $DEFAULT_FLAGS_GRAPHITE_INTERCHANGE\n-foreach interchange_file $interchange_files {lremove wait_to_run_files $interchange_file}\n-\n-# Flags using for scop-* files.\n-set DEFAULT_FLAGS_GRAPHITE_SCOP \"-O2 -fgraphite -fdump-tree-graphite-all\"\n-set scop_files [lsort [glob -nocomplain $srcdir/$subdir/scop-*.c ] ]\n-dg-runtest $scop_files \"\" $DEFAULT_FLAGS_GRAPHITE_SCOP\n-foreach scop_file $scop_files {lremove wait_to_run_files $scop_file}\n+set block_files       [lsort [glob -nocomplain $srcdir/$subdir/block-*.c ] ]\n \n+# Tests to be compiled.\n+set dg-do-what-default compile\n+dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all\"\n+dg-runtest $id_files          \"\" \"-O2 -fgraphite-identity -ffast-math\"\n \n-# Schedule now the tests to be run.\n+# Tests to be run.\n set dg-do-what-default run\n-\n-# Flags using for run-id-* files.\n-set DEFAULT_FLAGS_RUN_ID \"-O2 -fgraphite-identity\"\n-set run_id_files [lsort [glob -nocomplain $srcdir/$subdir/run-id-*.c ] ]\n-dg-runtest $run_id_files \"\" $DEFAULT_FLAGS_RUN_ID\n-foreach run_id_file $run_id_files {lremove wait_to_run_files $run_id_file}\n-\n+dg-runtest $run_id_files      \"\" \"-O2 -fgraphite-identity\"\n+dg-runtest $interchange_files \"\" \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n+dg-runtest $block_files       \"\" \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n \n # The default action for the rest of the files is 'compile'.\n set dg-do-what-default compile\n-\n-# Flags using for other files.\n-set DEFAULT_FLAGS_GRAPHITE \"-ansi -pedantic-errors\"\n-dg-runtest $wait_to_run_files \"\" $DEFAULT_FLAGS_GRAPHITE\n+foreach f $scop_files        {lremove wait_to_run_files $f}\n+foreach f $id_files          {lremove wait_to_run_files $f}\n+foreach f $run_id_files      {lremove wait_to_run_files $f}\n+foreach f $interchange_files {lremove wait_to_run_files $f}\n+foreach f $block_files       {lremove wait_to_run_files $f}\n+dg-runtest $wait_to_run_files \"\" \"-ansi -pedantic-errors\"\n \n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default}"}, {"sha": "e6e6dfc479598602a0caea968d4de61dd20e553c", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-0.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,9 +1,16 @@\n /* { dg-require-effective-target size32plus } */\n \n-int a[1000][1000];\n+#define DEBUG 0\n \n-int\n-foo (int N)\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 1000\n+int a[N][N];\n+\n+static int __attribute__((noinline))\n+foo (void)\n {\n   int j;\n   int i;\n@@ -12,8 +19,27 @@ foo (int N)\n     for (j = 0; j < N; j++)\n       a[j][i] = a[j][i] + 1;\n \n-  return a[N][123];\n+  return a[N-1][N-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      a[i][j] = 1;\n+\n+  a[N-1][N-1] = 12;\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 13;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n-/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg -final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "80a2e346234d31dcd9094f242fbed81578b5ba2d", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-1.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,8 +2,15 @@\n \n /* Formerly known as ltrans-1.c */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static int __attribute__((noinline))\n+foo (int N)\n {\n   int i, j;\n   double sum = 0.0;\n@@ -15,8 +22,27 @@ int foo(int N, int *res)\n \n       u[1336 * i] *= 2;\n     }\n-  *res = sum + N;\n+\n+  return sum + N + u[1336 * 2] + u[1336];\n }\n \n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  res = foo (1335);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 3565793;\n+}\n+\n+\n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "17f807b0c07ce3cbd46d7d134611c362fab159e9", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-10.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-10.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,5 +1,14 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static void __attribute__((noinline))\n+foo (int N, int *res)\n {\n   int i, j;\n   double sum = 0.0;\n@@ -12,7 +21,24 @@ int foo(int N, int *res)\n     for (j = 0; j < N; j++)\n       sum = sum + u[i + 1335 * j];\n \n-  *res = sum + N;\n+  *res = sum + N + u[1336 * 2] + u[1336];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  foo (1335, &res);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 7130239;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" } } */"}, {"sha": "eecc979a1f362f51a693c583be16bc4c89404b66", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-11.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,5 +1,14 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static void __attribute__((noinline))\n+foo (int N, int *res)\n {\n   int i, j;\n   double sum = 0.0;\n@@ -14,5 +23,22 @@ int foo(int N, int *res)\n   *res = sum;\n }\n \n+int\n+main (void)\n+{\n+  int i, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  foo (1335, &res);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 3564450;\n+}\n+\n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "dc5b138aba16397ccb37cbae2486fedc3066952d", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-12.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,8 +1,16 @@\n-#define N 1000\n+/* { dg-require-effective-target size32plus } */\n \n-float A[N][N], B[N][N], C[N][N];\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n \n-void matmult ()\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static int __attribute__((noinline))\n+matmult (void)\n {\n   int i, j, k;\n \n@@ -13,6 +21,30 @@ void matmult ()\n         for (k = 0; k < N; k++)\n           A[i][j] += B[i][k] * C[k][j];\n       }\n+\n+  return A[0][0] + A[N-1][N-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tA[i][j] = 0;\n+\tB[i][j] = i - j;\n+\tC[i][j] = i + j;\n+      }\n+\n+  res = matmult ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 2626800;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "62692defae4f52b106beb90d53973104f151aa7e", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-2.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,12 +2,19 @@\n \n /* Formerly known as ltrans-2.c */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static void __attribute__((noinline))\n+foo (int N, int *res)\n {\n   unsigned int i, j;\n   double sum = 0;\n-  \n+\n   /* This loop should be converted to a perfect nest and\n      interchanged.  */\n   for (i = 0; i < N; i++)\n@@ -19,7 +26,25 @@ int foo(int N, int *res)\n \t    u[1336 * i] *= 2;\n \t}\n     }\n-  *res = sum + N;\n+\n+  *res = sum + N + u[1336 * 2] + u[1336];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  foo (1335, &res);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 3565793;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */ "}, {"sha": "95c228d07e866b3a2f0d7b419de67ace684ba684", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-3.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,19 +2,44 @@\n \n /* Formerly known as ltrans-3.c */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static void __attribute__((noinline))\n+foo (int N, int *res)\n {\n   unsigned int i, j;\n   double sum = 0;\n-      for (i = 0; i < N; i++)\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n \t{\n-\t  for (j = 0; j < N; j++)\n-\t    {\n-\t      sum = sum + u[i + 1335 * j];\n-\t    }\n+\t  sum = sum + u[i + 1335 * j];\n \t}\n-      *res = sum + N;\n+    }\n+\n+  *res = sum + N + u[1336 * 2] + u[1336];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  foo (1335, &res);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 3565789;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "5d3c7b186f6baa61608d1b32bb4d1189a77d169d", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-4.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,8 +2,15 @@\n \n /* Formerly known as ltrans-4.c */\n \n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n double u[1782225];\n-int foo(int N, int *res)\n+\n+static int __attribute__((noinline))\n+foo (int N, int *res)\n {\n   int i, j;\n   double sum = 0;\n@@ -13,7 +20,25 @@ int foo(int N, int *res)\n \n   for (i = 0; i < N; i++)\n     u[1336 * i] *= 2;\n-  *res = sum + N;\n+\n+  *res = sum + N + u[1336 * 2] + u[1336];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < 1782225; i++)\n+    u[i] = 2;\n+\n+  foo (1335, &res);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 3565793;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "a912fe249842609f40bc710541a4e24563b55edd", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-5.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,17 +2,44 @@\n \n /* Formerly known as ltrans-5.c */\n \n-int foo ()\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 100\n+#define M 1111\n+int A[N][M];\n+\n+static int __attribute__((noinline))\n+foo (void)\n {\n-  int A[100][1111];\n   int i, j;\n \n-  for( i = 0; i < 1111; i++)\n-    for( j = 0; j < 100; j++)\n+  for( i = 0; i < M; i++)\n+    for( j = 0; j < N; j++)\n       A[j][i] = 5 * A[j][i];\n \n-  return A[10][10];\n+  return A[0][0] + A[N-1][M-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < M; j++)\n+      A[i][j] = 2;\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 20;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "2ff886cf7ee470d23d9843126fe3c92f720b13df", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-6.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -2,17 +2,44 @@\n \n /* Formerly known as ltrans-6.c */\n \n-int medium_loop_interchange(int A[100][200])\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 100\n+#define M 200\n+\n+static int __attribute__((noinline))\n+foo (int A[N][M])\n {\n-  int i,j;\n+  int i, j;\n \n   /* This loop should be interchanged. */\n-\n-  for(j = 0; j < 200; j++)\n-    for(i = 0; i < 100; i++)\n+  for(j = 0; j < M; j++)\n+    for(i = 0; i < N; i++)\n       A[i][j] = A[i][j] + A[i][j];\n \n-  return A[1][1];\n+  return A[0][0] + A[N-1][M-1];\n+}\n+\n+int\n+main (void)\n+{\n+  int A[N][M];\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < M; j++)\n+      A[i][j] = 2;\n+\n+  res = foo (A);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 8;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "a030943c01aad258ccf901f6ee5ee4d325661f52", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-7.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,17 +1,45 @@\n+/* { dg-require-effective-target size32plus } */\n+\n /* Formerly known as ltrans-8.c */\n \n-double\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 111\n+#define M 1111\n+\n+static int __attribute__((noinline))\n foo (double *a)\n {\n   int i,j;\n-  double r = 0.0;\n+  int r = 0;\n \n-  for (i = 0; i < 100; ++i)\n-    for (j = 0; j < 1000; ++j)\n-      r += a[j * 100 + i];\n+  for (i = 0; i < N; ++i)\n+    for (j = 0; j < M; ++j)\n+      r += a[j * N + i];\n \n   return r;\n }\n \n+int\n+main (void)\n+{\n+  double A[N*M];\n+  int i, res;\n+\n+  for (i = 0; i < N*M; i++)\n+    A[i] = 2;\n+\n+  res = foo (A);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 246642;\n+}\n+\n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "94bd66b644dad3e8ff1a0a0a40c7b598da34a4be", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-8.c", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,9 +1,15 @@\n-int\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+int B[4];\n+int A[4][4][4][4];\n+\n+static int __attribute__((noinline))\n foo (void)\n {\n   int i, j, k, l;\n-  int B[4];\n-  int A[4][4][4][4];\n \n   for (l = 0; l < 4; l++)\n     {\n@@ -37,7 +43,36 @@ foo (void)\n \t}\n     }\n \n-  return A[0][1][0][2];\n+  return A[0][1][0][2] + A[0][3][0][3] + A[0][2][0][2] + A[0][1][0][1] + A[3][3][0][2];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, k, l, res;\n+\n+  for (i = 0; i < 4; i++)\n+    B[i] = 2;\n+\n+  for (i = 0; i < 4; i++)\n+    for (j = 0; j < 4; j++)\n+      for (k = 0; k < 4; k++)\n+\tfor (l = 0; l < 4; l++)\n+\t  A[i][j][k][l] = i + j + k + l;\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  for (i = 0; i < 4; i++)\n+    for (j = 0; j < 4; j++)\n+      for (k = 0; k < 4; k++)\n+\tfor (l = 0; l < 4; l++)\n+\t  fprintf (stderr, \"A[%d][%d][%d][%d] = %d \\n\", i, j, k, l, A[i][j][k][l]);\n+\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 424;\n }\n \n /* Loops K and L should be interchanged.  */"}, {"sha": "d4e05c369af00c61b7830267e4f1d03b0ee7608e", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-9.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,15 +1,43 @@\n-int\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 1111\n+#define M 1111\n+\n+static int __attribute__((noinline))\n foo (int *x)\n {\n   int i, j;\n   int sum = 0;\n \n-  for (j = 0;  j < 10000; ++j)\n-    for (i = 0;  i < 10000; ++i)\n-      sum += x[10000 * i + j];\n+  for (j = 0; j < M; ++j)\n+    for (i = 0;  i < N; ++i)\n+      sum += x[M * i + j];\n \n   return sum;\n }\n \n+int\n+main (void)\n+{\n+  int A[N*M];\n+  int i, res;\n+\n+  for (i = 0; i < N*M; i++)\n+    A[i] = 2;\n+\n+  res = foo (A);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 2468642;\n+}\n+\n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "1e44f0a0dbd24af8e87e756e987844fb7a3f10c8", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,22 +1,55 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n #define NMAX 2000\n \n-static double x1[NMAX], x2[NMAX], a[NMAX][NMAX], y_1[NMAX], y_2[NMAX];\n+static int x1[NMAX], x2[NMAX], a[NMAX][NMAX], y1[NMAX], y2[NMAX];\n \n-void mvt(long N) {\n+static int __attribute__((noinline))\n+mvt (long N)\n+{\n \n-    int i,j;\n+  int i,j;\n \n-    for (i=0; i<N; i++) {\n-        for (j=0; j<N; j++) {\n-            x1[i] = x1[i] + a[i][j] * y_1[j];\n-        }\n-    }\n-    \n-    for (i=0; i<N; i++) {\n-        for (j=0; j<N; j++) {\n-            x2[i] = x2[i] + a[j][i] * y_2[j];\n-        }\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x1[i] = x1[i] + a[i][j] * y1[j];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x2[i] = x2[i] + a[j][i] * y2[j];\n+\n+  return x1[0] + x2[0];\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < NMAX; i++)\n+    for (j = 0; j < NMAX; j++)\n+      a[i][j] = i + j;\n+\n+  for (i = 0; i < NMAX; i++)\n+    {\n+      x1[i] = 0;\n+      x2[i] = 2*i;\n+      y1[i] = 100 - i;\n+      y2[i] = i;\n     }\n+\n+  res = mvt (NMAX);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  return res != 199900000;\n }\n \n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */ "}, {"sha": "0fd5efd8dc2e12989c3567f7456e7246f5788f79", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-2.c?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -1,6 +1,7 @@\n int a[1] = {1};\n \n-static int __attribute__((noinline)) foo(int n)\n+static int __attribute__((noinline))\n+foo(int n)\n {\n   int i, c = 0;\n   for (i = 0; i < n; i++)\n@@ -24,5 +25,3 @@ int main()\n    foo(0) != 0 || foo(1) != 1 || bar(0) != 0 || bar(1) != 2 || bar(2) != 5;\n }\n \n-/* { dg-do run  } */\n-/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "11dd42dc57eb38e5cc0c7ac8f6a6cfa3ff97fa46", "filename": "gcc/testsuite/gfortran.dg/graphite/graphite.exp", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64630e61332a2a9e9638668c41b79fba87c9f016/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp?ref=64630e61332a2a9e9638668c41b79fba87c9f016", "patch": "@@ -33,56 +33,36 @@ proc lremove {list_variable value} {\n # The default action for a test is 'compile'.  Save current default.\n global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n-set dg-do-what-default compile\n \n # Initialize `dg'.\n dg-init\n \n-# Main loop.\n set wait_to_run_files [lsort [glob -nocomplain $srcdir/$subdir/*.\\[fF\\]{,90,95,03,08} ] ]\n-\n-# Flags using for block-* files.\n-set DEFAULT_FLAGS_GRAPHITE_BLOCK \"-O2 -floop-block -fno-loop-strip-mine \\\n- -fno-loop-interchange -fdump-tree-graphite-all\"\n-set block_files [lsort [glob -nocomplain $srcdir/$subdir/block-*.\\[fF\\]{,90,95,03,08} ] ]\n-gfortran-dg-runtest $block_files $DEFAULT_FLAGS_GRAPHITE_BLOCK\n-foreach block_file $block_files {lremove wait_to_run_files $block_file}\n-\n-# Flags using for id-* files.\n-set DEFAULT_FLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity\"\n-set id_files [lsort [glob -nocomplain $srcdir/$subdir/id-*.\\[fF\\]{,90,95,03,08} ] ]\n-gfortran-dg-runtest $id_files $DEFAULT_FLAGS_GRAPHITE_IDENTITY\n-foreach id_file $id_files {lremove wait_to_run_files $id_file}\n-\n-# Flags using for interchange-* files.\n-set DEFAULT_FLAGS_GRAPHITE_INTERCHANGE \"-O2 -fdump-tree-graphite-all \\\n- -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math\"\n+set block_files       [lsort [glob -nocomplain $srcdir/$subdir/block-*.\\[fF\\]{,90,95,03,08} ] ]\n+set id_files          [lsort [glob -nocomplain $srcdir/$subdir/id-*.\\[fF\\]{,90,95,03,08} ] ]\n set interchange_files [lsort [glob -nocomplain $srcdir/$subdir/interchange-*.\\[fF\\]{,90,95,03,08} ] ]\n-gfortran-dg-runtest $interchange_files $DEFAULT_FLAGS_GRAPHITE_INTERCHANGE\n-foreach interchange_file $interchange_files {lremove wait_to_run_files $interchange_file}\n-\n-# Flags using for scop-* files.\n-set DEFAULT_FLAGS_GRAPHITE_SCOP \"-O2 -fgraphite -fdump-tree-graphite-all\"\n set scop_files [lsort [glob -nocomplain $srcdir/$subdir/scop-*.\\[fF\\]{,90,95,03,08} ] ]\n-gfortran-dg-runtest $scop_files $DEFAULT_FLAGS_GRAPHITE_SCOP\n-foreach scop_file $scop_files {lremove wait_to_run_files $scop_file}\n-\n-# Schedule now the tests to be run.\n-set dg-do-what-default run\n-\n-# Flags using for run-id-* files.\n-set DEFAULT_FLAGS_RUN_ID \"-O2 -fgraphite-identity\"\n set run_id_files [lsort [glob -nocomplain $srcdir/$subdir/run-id-*.\\[fF\\]{,90,95,03,08} ] ]\n-gfortran-dg-runtest $run_id_files $DEFAULT_FLAGS_RUN_ID\n-foreach run_id_file $run_id_files {lremove wait_to_run_files $run_id_file}\n \n+# Tests to be compiled.\n+set dg-do-what-default compile\n+gfortran-dg-runtest $scop_files        \"-O2 -fgraphite -fdump-tree-graphite-all\"\n+gfortran-dg-runtest $id_files          \"-O2 -fgraphite-identity -ffast-math\"\n+gfortran-dg-runtest $interchange_files \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n+gfortran-dg-runtest $block_files       \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n+\n+# Tests to be run.\n+set dg-do-what-default run\n+gfortran-dg-runtest $run_id_files      \"-O2 -fgraphite-identity\"\n \n # The default action for the rest of the files is 'compile'.\n set dg-do-what-default compile\n-\n-# Flags using for other files.\n-set DEFAULT_GRAPHITE_FLAGS \"\"\n-gfortran-dg-runtest $wait_to_run_files $DEFAULT_GRAPHITE_FLAGS\n+foreach f $block_files       {lremove wait_to_run_files $f}\n+foreach f $id_files          {lremove wait_to_run_files $f}\n+foreach f $interchange_files {lremove wait_to_run_files $f}\n+foreach f $scop_files        {lremove wait_to_run_files $f}\n+foreach f $run_id_files      {lremove wait_to_run_files $f}\n+gfortran-dg-runtest $wait_to_run_files \"\"\n \n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default}"}]}