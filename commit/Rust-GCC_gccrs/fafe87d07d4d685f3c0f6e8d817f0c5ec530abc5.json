{"sha": "fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmZTg3ZDA3ZDRkNjg1ZjNjMGY2ZThkODE3ZjBjNWVjNTMwYWJjNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-02T21:29:36Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-02T21:29:36Z"}, "message": "Reverted erroneous checkin\n\nFrom-SVN: r58756", "tree": {"sha": "9eab0f2c90e0eafd8c918a932688d892ebc2f013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eab0f2c90e0eafd8c918a932688d892ebc2f013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/comments", "author": null, "committer": null, "parents": [{"sha": "77a106a531a92278c5a28b8ec8c373621d302185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a106a531a92278c5a28b8ec8c373621d302185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a106a531a92278c5a28b8ec8c373621d302185"}], "stats": {"total": 103, "additions": 42, "deletions": 61}, "files": [{"sha": "678c93287ae0e79b12b8446527954eca4ea4e276", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "patch": "@@ -1,15 +1,3 @@\n-2002-11-02  Tom Tromey  <tromey@redhat.com>\n-\n-\tFix for PR java/6388.\n-\t* lex.h (JAVA_INTEGRAL_RANGE_ERROR): Wrap in do...while.\n-\t* java-tree.h (enum java_tree_index): New values\n-\tJTI_DECIMAL_INT_MAX_NODE, JTI_DECIMAL_LONG_MAX_NODE.\n-\t(decimal_int_max, decimal_long_max): New defines.\n-\t* lex.c (yylex): Rewrote range checking.  Sign extend literals.\n-\t(error_if_numeric_overflow): Rewrote range checking.\n-\t* decl.c (java_init_decl_processing): Initialize decimal_int_max,\n-\tdecimal_long_max.\n-\n 2002-10-24  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj.texi (Invoking gij): Document --showversion."}, {"sha": "4b06aaf7d65fb183802e5745a95c3bc1e7c249a2", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for the GNU compiler for the\n    Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -454,14 +454,6 @@ java_init_decl_processing ()\n   integer_four_node = build_int_2 (4, 0);\n   integer_minus_one_node = build_int_2 (-1, -1);\n \n-  /* A few values used for range checking in the lexer.  */\n-  decimal_int_max = build_int_2 (0x80000000, 0);\n-  TREE_TYPE (decimal_int_max) = unsigned_int_type_node;\n-  decimal_long_max = (HOST_BITS_PER_WIDE_INT == 32\n-\t\t      ? build_int_2 (0, 0x80000000)\n-\t\t      : build_int_2 (0x8000000000000000, 0));\n-  TREE_TYPE (decimal_long_max) = unsigned_long_type_node;\n-\n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);\n   bitsize_zero_node = bitsize_int (0);"}, {"sha": "4001bdf3b6860074bdc7c8f8ee6ed1d23d2dc234", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "patch": "@@ -275,9 +275,6 @@ enum java_tree_index\n   JTI_UNSIGNED_INT_TYPE_NODE,\n   JTI_UNSIGNED_LONG_TYPE_NODE,\n   \n-  JTI_DECIMAL_INT_MAX_NODE,\n-  JTI_DECIMAL_LONG_MAX_NODE,\n-\n   JTI_BOOLEAN_TYPE_NODE,\n \n   JTI_OBJECT_TYPE_NODE,\n@@ -444,11 +441,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n #define unsigned_long_type_node \\\n   java_global_trees[JTI_UNSIGNED_LONG_TYPE_NODE]\n \n-#define decimal_int_max \\\n-  java_global_trees[JTI_DECIMAL_INT_MAX_NODE]\n-#define decimal_long_max \\\n-  java_global_trees[JTI_DECIMAL_LONG_MAX_NODE]\n-\n #define boolean_type_node \\\n   java_global_trees[JTI_BOOLEAN_TYPE_NODE]\n "}, {"sha": "d6901760d33d6e0999f38a7805268df0d5cc4402", "filename": "gcc/java/lex.c", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "patch": "@@ -1218,35 +1218,34 @@ java_lex (java_lval)\n \t}\n       /* End borrowed section.  */\n \n-#ifndef JC1_LITE\n       /* Range checking.  */\n-      value = build_int_2 (low, high);\n-      /* Temporarily set type to unsigned.  */\n-      SET_LVAL_NODE_TYPE (value, (long_suffix\n-\t\t\t\t  ? unsigned_long_type_node\n-\t\t\t\t  : unsigned_int_type_node));\n-\n-      /* For base 10 numbers, only values up to the highest value\n-\t (plus one) can be written.  For instance, only ints up to\n-\t 2147483648 can be written.  The special case of the largest\n-\t negative value is handled elsewhere.  For other bases, any\n-\t number can be represented.  */\n-      if (overflow || (radix == 10\n-\t\t       && tree_int_cst_lt (long_suffix\n-\t\t\t\t\t   ? decimal_long_max\n-\t\t\t\t\t   : decimal_int_max,\n-\t\t\t\t\t   value)))\n+      if (long_suffix)\n \t{\n-\t  if (long_suffix)\n+\t  /* 9223372036854775808L is valid if operand of a '-'. Otherwise\n+\t     9223372036854775807L is the biggest `long' literal that can be\n+\t     expressed using a 10 radix. For other radices, everything that\n+\t     fits withing 64 bits is OK.  */\n+\t  int hb = (high >> 31);\n+\t  if (overflow || (hb && low && radix == 10)\n+\t      || (hb && high & 0x7fffffff && radix == 10))\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `long' literal\");\n-\t  else\n+\t}\n+      else\n+\t{\n+\t  /* 2147483648 is valid if operand of a '-'. Otherwise,\n+\t     2147483647 is the biggest `int' literal that can be\n+\t     expressed using a 10 radix. For other radices, everything\n+\t     that fits within 32 bits is OK.  As all literals are\n+\t     signed, we sign extend here.  */\n+\t  int hb = (low >> 31) & 0x1;\n+\t  if (overflow || high || (hb && low & 0x7fffffff && radix == 10))\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `int' literal\");\n+\t  high = -hb;\n \t}\n-\n-      /* Sign extend the value.  */\n-      SET_LVAL_NODE_TYPE (value, (long_suffix ? long_type_node : int_type_node));\n-      force_fit_type (value, 0);\n+#ifndef JC1_LITE\n+      value = build_int_2 (low, high);\n       JAVA_RADIX10_FLAG (value) = radix == 10;\n+      SET_LVAL_NODE_TYPE (value, long_suffix ? long_type_node : int_type_node);\n #else\n       SET_LVAL_NODE_TYPE (build_int_2 (low, high),\n \t\t\t  long_suffix ? long_type_node : int_type_node);\n@@ -1662,14 +1661,24 @@ static void\n error_if_numeric_overflow (value)\n      tree value;\n {\n-  if (TREE_CODE (value) == INTEGER_CST\n-      && JAVA_RADIX10_FLAG (value)\n-      && tree_int_cst_sgn (value) < 0)\n+  if (TREE_CODE (value) == INTEGER_CST && JAVA_RADIX10_FLAG (value))\n     {\n+      unsigned HOST_WIDE_INT lo, hi;\n+\n+      lo = TREE_INT_CST_LOW (value);\n+      hi = TREE_INT_CST_HIGH (value);\n       if (TREE_TYPE (value) == long_type_node)\n-\tjava_lex_error (\"Numeric overflow for `long' literal\", 0);\n+\t{\n+\t  int hb = (hi >> 31);\n+\t  if (hb && !(hi & 0x7fffffff))\n+\t    java_lex_error (\"Numeric overflow for `long' literal\", 0);\n+\t}\n       else\n-\tjava_lex_error (\"Numeric overflow for `int' literal\", 0);\n+\t{\n+\t  int hb = (lo >> 31) & 0x1;\n+\t  if (hb && !(lo & 0x7fffffff))\n+\t    java_lex_error (\"Numeric overflow for `int' literal\", 0);\n+\t}\n     }\n }\n #endif /* JC1_LITE */"}, {"sha": "a4589260cb3ebb0a4f98a18224579e80182d9e7e", "filename": "gcc/java/lex.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=fafe87d07d4d685f3c0f6e8d817f0c5ec530abc5", "patch": "@@ -1,5 +1,5 @@\n /* Language lexer definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -185,7 +185,7 @@ extern void java_destroy_lexer PARAMS ((java_lexer *));\n #define SET_LVAL_NODE_TYPE(NODE, TYPE)\n #define BUILD_ID_WFL(EXP) (EXP)\n #define JAVA_FLOAT_RANGE_ERROR(S) {}\n-#define JAVA_INTEGRAL_RANGE_ERROR(S) do { } while (0)\n+#define JAVA_INTEGRAL_RANGE_ERROR(S) {}\n \n #else\n \n@@ -237,12 +237,12 @@ extern void java_destroy_lexer PARAMS ((java_lexer *));\n     ctxp->c_line->current = i;\t\t\t\t\t\t  \\\n   }\n #define JAVA_INTEGRAL_RANGE_ERROR(m)\t\t\\\n-  do {\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n     int i = ctxp->c_line->current;\t\t\\\n     ctxp->c_line->current = number_beginning;\t\\\n     java_lex_error (m, 0);\t\t\t\\\n     ctxp->c_line->current = i;\t\t\t\\\n-  } while (0)\n+  }\n \n #endif /* Definitions for jc1 compilation only */\n "}]}