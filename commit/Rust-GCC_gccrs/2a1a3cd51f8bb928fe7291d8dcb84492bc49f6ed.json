{"sha": "2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExYTNjZDUxZjhiYjkyOGZlNzI5MWQ4ZGNiODQ0OTJiYzQ5ZjZlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-12-14T17:59:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-12-14T17:59:36Z"}, "message": "fold-const.c (fold_single_bit_test): If flag_syntax_only, pretend LOAD_EXTEND_OP is not defined.\n\n\t* fold-const.c (fold_single_bit_test): If flag_syntax_only, pretend\n\tLOAD_EXTEND_OP is not defined.\n\t(fold): Likewise.  If flag_syntax_only, don't depend on BITS_PER_WORD.\n\nFrom-SVN: r92150", "tree": {"sha": "2ceb8f670d9c363199f950dbe87fb725e1b5083c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ceb8f670d9c363199f950dbe87fb725e1b5083c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a96f3c694d88ed9f0c97135ca67151540f9d66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a96f3c694d88ed9f0c97135ca67151540f9d66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a96f3c694d88ed9f0c97135ca67151540f9d66f"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "fc0e9b6c851a4e5618e70c45e24b47e120cc3eb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "patch": "@@ -1,3 +1,9 @@\n+2004-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* fold-const.c (fold_single_bit_test): If flag_syntax_only, pretend\n+\tLOAD_EXTEND_OP is not defined.\n+\t(fold): Likewise.  If flag_syntax_only, don't depend on BITS_PER_WORD.\n+\n 2004-12-14  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* tree.def, doc/c-tree.texi: Correctly document restrictions on the"}, {"sha": "2fe0b7e7d2b56174c703171a40055a878b808293", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2a1a3cd51f8bb928fe7291d8dcb84492bc49f6ed", "patch": "@@ -5876,7 +5876,8 @@ fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n \t operations as unsigned.  If we must use the AND, we have a choice.\n \t Normally unsigned is faster, but for some machines signed is.  */\n #ifdef LOAD_EXTEND_OP\n-      ops_unsigned = (LOAD_EXTEND_OP (operand_mode) == SIGN_EXTEND ? 0 : 1);\n+      ops_unsigned = (LOAD_EXTEND_OP (operand_mode) == SIGN_EXTEND \n+\t\t      && !flag_syntax_only) ? 0 : 1;\n #else\n       ops_unsigned = 1;\n #endif\n@@ -6404,10 +6405,11 @@ fold (tree expr)\n \t      && ! VOID_TYPE_P (TREE_OPERAND (tem, 2))\n \t      && (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (tem, 1), 0))\n \t\t  == TREE_TYPE (TREE_OPERAND (TREE_OPERAND (tem, 2), 0)))\n-\t      && ! (INTEGRAL_TYPE_P (TREE_TYPE (tem))\n-\t\t    && (INTEGRAL_TYPE_P\n-\t\t\t(TREE_TYPE (TREE_OPERAND (TREE_OPERAND (tem, 1), 0))))\n-\t\t    && TYPE_PRECISION (TREE_TYPE (tem)) <= BITS_PER_WORD))\n+\t      && (! (INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t\t     && (INTEGRAL_TYPE_P\n+\t\t\t (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (tem, 1), 0))))\n+\t\t     && TYPE_PRECISION (TREE_TYPE (tem)) <= BITS_PER_WORD)\n+\t\t  || flag_syntax_only))\n \t    tem = build1 (code, type,\n \t\t\t  build3 (COND_EXPR,\n \t\t\t\t  TREE_TYPE (TREE_OPERAND\n@@ -6614,6 +6616,7 @@ fold (tree expr)\n \t      change = (cst == 0);\n #ifdef LOAD_EXTEND_OP\n \t      if (change\n+\t\t  && !flag_syntax_only\n \t\t  && (LOAD_EXTEND_OP (TYPE_MODE (TREE_TYPE (and0)))\n \t\t      == ZERO_EXTEND))\n \t\t{"}]}