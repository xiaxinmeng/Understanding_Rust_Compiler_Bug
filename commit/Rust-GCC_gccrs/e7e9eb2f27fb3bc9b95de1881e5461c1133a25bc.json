{"sha": "e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlOWViMmYyN2ZiM2JjOWI5NWRlMTg4MWU1NDYxYzExMzNhMjViYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-01T18:58:30Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-01T18:58:30Z"}, "message": "re PR tree-optimization/46259 (Revision 166102 failed 416.gamess in SPEC CPU 2006)\n\ngcc/\n2010-11-01  Nathan Froyd  <froydnj@codesourcery.com>\n\n\tPR tree-optimization/46259\n\n\tRevert:\n\n\t2010-10-30  Nathan Froyd  <froydnj@codesourcery.com>\n\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Use\n\tbuild_vector_from_val.\n\ngcc/testsuite/\n2010-11-01  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Nathan Froyd  <froydnj@codesourcery.com>\n\n\tPR tree-optimization/46259\n\t* gfortran.dg/pr46259.f: New testcase.\n\nFrom-SVN: r166139", "tree": {"sha": "9735446d963776d1da355444a3a00df028cd2e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9735446d963776d1da355444a3a00df028cd2e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/comments", "author": null, "committer": null, "parents": [{"sha": "d0d7f522e8ae999d4d31b9906626f87209785811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d7f522e8ae999d4d31b9906626f87209785811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d7f522e8ae999d4d31b9906626f87209785811"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "fad03f6996dc2ba7cfd0bed7ce5dcd2068d41277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "patch": "@@ -1,3 +1,14 @@\n+2010-11-01  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR tree-optimization/46259\n+\n+\tRevert:\n+\n+\t2010-10-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Use\n+\tbuild_vector_from_val.\n+\n 2010-11-01  DJ Delorie  <dj@redhat.com>\n \n \t* config/rx/rx.h (TARGET_CPU_CPP_BUILTINS): Add define for RX610"}, {"sha": "fcfe11a9f3ab292bc6de97a5ae6c962222a8a65d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "patch": "@@ -1,3 +1,9 @@\n+2010-11-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR tree-optimization/46259\n+\t* gfortran.dg/pr46259.f: New testcase.\n+\n 2010-11-01  Paul Koning  <ni1d@arrl.net>\n \n \t* gcc.c-torture/compile/20080625-1.c: Skip if pdp11."}, {"sha": "d74e549a248c60ec4777e3511424fd0e50917324", "filename": "gcc/testsuite/gfortran.dg/pr46259.f", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46259.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46259.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46259.f?ref=e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "patch": "@@ -0,0 +1,19 @@\n+! PR tree-optimization/46259\n+! { dg-do compile }\n+! { dg-options \"-O3\" }\n+      SUBROUTINE RDSTFR(FRGMNT,IFRAG,PROVEC,FOCKMA,\n+     *                  MXBF,MXMO,MXMO2,NTMOF)\n+      PARAMETER (MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)\n+      CHARACTER*8 WORD,MNAME,PNAME,RNAME\n+      COMMON /FRGSTD/ CORD(3,MXPT),PCORD(3,MXPT),POLT(9,MXPT),\n+     *                INLPR(4*MXPT),IKFR(MXPT),IKLR(MXPT),\n+     *                MNAME(MXPT),PNAME(MXPT),RNAME(MXPT)\n+      DO 10 I=1,MXPT\n+         INLPR(4*(I-1)+1)=0\n+         INLPR(4*(I-1)+2)=0\n+         INLPR(4*(I-1)+3)=0\n+         INLPR(4*(I-1)+4)=0\n+         IKLR(I)=0\n+         RNAME(I)='        '\n+   10 CONTINUE\n+      END"}, {"sha": "183bb111a304912cfcb17e7cc7c5128b315f924f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "patch": "@@ -987,7 +987,9 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   tree vec_inv;\n   tree vec_cst;\n+  tree t = NULL_TREE;\n   tree def;\n+  int i;\n   enum vect_def_type dt;\n   bool is_simple_use;\n   tree vector_type;\n@@ -1049,7 +1051,13 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n         if (vect_print_dump_info (REPORT_DETAILS))\n           fprintf (vect_dump, \"Create vector_inv.\");\n \n-        vec_inv = build_vector_from_val (vector_type, def);\n+        for (i = nunits - 1; i >= 0; --i)\n+          {\n+            t = tree_cons (NULL_TREE, def, t);\n+          }\n+\n+\t/* FIXME: use build_constructor directly.  */\n+        vec_inv = build_constructor_from_list (vector_type, t);\n         return vect_init_vector (stmt, vec_inv, vector_type, NULL);\n       }\n "}]}