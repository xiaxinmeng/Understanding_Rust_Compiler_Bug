{"sha": "8c30df3ed1eea0610badb56f64f04f174580d899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzMGRmM2VkMWVlYTA2MTBiYWRiNTZmNjRmMDRmMTc0NTgwZDg5OQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-09-30T16:42:22Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-09-30T16:42:22Z"}, "message": "Refactor intelmic-mkoffload.c argv building to use obstacks\n\nThat is, restore and adapt the code as originally proposed.\n\n\tgcc/\n\t* config/i386/intelmic-mkoffload.c (generate_host_descr_file)\n\t(prepare_target_image, main): Refactor argv building to use\n\tobstacks.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\n\nFrom-SVN: r228300", "tree": {"sha": "15f7254fc1e550166a3b0dc982056185e5ccaaac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f7254fc1e550166a3b0dc982056185e5ccaaac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c30df3ed1eea0610badb56f64f04f174580d899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c30df3ed1eea0610badb56f64f04f174580d899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c30df3ed1eea0610badb56f64f04f174580d899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c30df3ed1eea0610badb56f64f04f174580d899/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa83660d5698416ab6c66d31d6e23ed614b9895d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa83660d5698416ab6c66d31d6e23ed614b9895d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa83660d5698416ab6c66d31d6e23ed614b9895d"}], "stats": {"total": 140, "additions": 80, "deletions": 60}, "files": [{"sha": "15f84aba529803ffceff8df710e5df4125f0f05f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c30df3ed1eea0610badb56f64f04f174580d899/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c30df3ed1eea0610badb56f64f04f174580d899/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c30df3ed1eea0610badb56f64f04f174580d899", "patch": "@@ -1,3 +1,11 @@\n+2015-09-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* config/i386/intelmic-mkoffload.c (generate_host_descr_file)\n+\t(prepare_target_image, main): Refactor argv building to use\n+\tobstacks.\n+\n 2015-09-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu-protos.h (spu_expand_atomic_op): Add prototype."}, {"sha": "ae88ecdf54974879caf2ae036d54c81cbefc2e0c", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 72, "deletions": 60, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c30df3ed1eea0610badb56f64f04f174580d899/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c30df3ed1eea0610badb56f64f04f174580d899/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=8c30df3ed1eea0610badb56f64f04f174580d899", "patch": "@@ -379,29 +379,31 @@ generate_host_descr_file (const char *host_compiler)\n \n   fclose (src_file);\n \n-  unsigned new_argc = 0;\n-  const char *new_argv[9];\n-  new_argv[new_argc++] = host_compiler;\n-  new_argv[new_argc++] = \"-c\";\n-  new_argv[new_argc++] = \"-fPIC\";\n-  new_argv[new_argc++] = \"-shared\";\n+  struct obstack argv_obstack;\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, host_compiler);\n+  obstack_ptr_grow (&argv_obstack, \"-c\");\n+  obstack_ptr_grow (&argv_obstack, \"-fPIC\");\n+  obstack_ptr_grow (&argv_obstack, \"-shared\");\n   switch (offload_abi)\n     {\n     case OFFLOAD_ABI_LP64:\n-      new_argv[new_argc++] = \"-m64\";\n+      obstack_ptr_grow (&argv_obstack, \"-m64\");\n       break;\n     case OFFLOAD_ABI_ILP32:\n-      new_argv[new_argc++] = \"-m32\";\n+      obstack_ptr_grow (&argv_obstack, \"-m32\");\n       break;\n     default:\n       gcc_unreachable ();\n     }\n-  new_argv[new_argc++] = src_filename;\n-  new_argv[new_argc++] = \"-o\";\n-  new_argv[new_argc++] = obj_filename;\n-  new_argv[new_argc++] = NULL;\n+  obstack_ptr_grow (&argv_obstack, src_filename);\n+  obstack_ptr_grow (&argv_obstack, \"-o\");\n+  obstack_ptr_grow (&argv_obstack, obj_filename);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n \n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), false);\n+  char **argv = XOBFINISH (&argv_obstack, char **);\n+  fork_execute (argv[0], argv, false);\n+  obstack_free (&argv_obstack, NULL);\n \n   return obj_filename;\n }\n@@ -448,29 +450,31 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   char *rename_section_opt\n     = XALLOCAVEC (char, sizeof (\".data=\") + strlen (image_section_name));\n   sprintf (rename_section_opt, \".data=%s\", image_section_name);\n-  const char *objcopy_argv[11];\n-  objcopy_argv[0] = \"objcopy\";\n-  objcopy_argv[1] = \"-B\";\n-  objcopy_argv[2] = \"i386\";\n-  objcopy_argv[3] = \"-I\";\n-  objcopy_argv[4] = \"binary\";\n-  objcopy_argv[5] = \"-O\";\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, \"objcopy\");\n+  obstack_ptr_grow (&argv_obstack, \"-B\");\n+  obstack_ptr_grow (&argv_obstack, \"i386\");\n+  obstack_ptr_grow (&argv_obstack, \"-I\");\n+  obstack_ptr_grow (&argv_obstack, \"binary\");\n+  obstack_ptr_grow (&argv_obstack, \"-O\");\n   switch (offload_abi)\n     {\n     case OFFLOAD_ABI_LP64:\n-      objcopy_argv[6] = \"elf64-x86-64\";\n+      obstack_ptr_grow (&argv_obstack, \"elf64-x86-64\");\n       break;\n     case OFFLOAD_ABI_ILP32:\n-      objcopy_argv[6] = \"elf32-i386\";\n+      obstack_ptr_grow (&argv_obstack, \"elf32-i386\");\n       break;\n     default:\n       gcc_unreachable ();\n     }\n-  objcopy_argv[7] = target_so_filename;\n-  objcopy_argv[8] = \"--rename-section\";\n-  objcopy_argv[9] = rename_section_opt;\n-  objcopy_argv[10] = NULL;\n-  fork_execute (objcopy_argv[0], CONST_CAST (char **, objcopy_argv), false);\n+  obstack_ptr_grow (&argv_obstack, target_so_filename);\n+  obstack_ptr_grow (&argv_obstack, \"--rename-section\");\n+  obstack_ptr_grow (&argv_obstack, rename_section_opt);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n+  char **new_argv = XOBFINISH (&argv_obstack, char **);\n+  fork_execute (new_argv[0], new_argv, false);\n+  obstack_free (&argv_obstack, NULL);\n \n   /* Objcopy has created symbols, containing the input file name with\n      non-alphanumeric characters replaced by underscores.\n@@ -500,16 +504,19 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   sprintf (opt_for_objcopy[1], \"_binary_%s_end=%s\", symbol_name, symbols[1]);\n   sprintf (opt_for_objcopy[2], \"_binary_%s_size=%s\", symbol_name, symbols[2]);\n \n-  objcopy_argv[0] = \"objcopy\";\n-  objcopy_argv[1] = target_so_filename;\n-  objcopy_argv[2] = \"--redefine-sym\";\n-  objcopy_argv[3] = opt_for_objcopy[0];\n-  objcopy_argv[4] = \"--redefine-sym\";\n-  objcopy_argv[5] = opt_for_objcopy[1];\n-  objcopy_argv[6] = \"--redefine-sym\";\n-  objcopy_argv[7] = opt_for_objcopy[2];\n-  objcopy_argv[8] = NULL;\n-  fork_execute (objcopy_argv[0], CONST_CAST (char **, objcopy_argv), false);\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, \"objcopy\");\n+  obstack_ptr_grow (&argv_obstack, target_so_filename);\n+  obstack_ptr_grow (&argv_obstack, \"--redefine-sym\");\n+  obstack_ptr_grow (&argv_obstack, opt_for_objcopy[0]);\n+  obstack_ptr_grow (&argv_obstack, \"--redefine-sym\");\n+  obstack_ptr_grow (&argv_obstack, opt_for_objcopy[1]);\n+  obstack_ptr_grow (&argv_obstack, \"--redefine-sym\");\n+  obstack_ptr_grow (&argv_obstack, opt_for_objcopy[2]);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n+  new_argv = XOBFINISH (&argv_obstack, char **);\n+  fork_execute (new_argv[0], new_argv, false);\n+  obstack_free (&argv_obstack, NULL);\n \n   return target_so_filename;\n }\n@@ -562,41 +569,46 @@ main (int argc, char **argv)\n \n   /* Perform partial linking for the target image and host side descriptor.\n      As a result we'll get a finalized object file with all offload data.  */\n-  unsigned new_argc = 0;\n-  const char *new_argv[9];\n-  new_argv[new_argc++] = \"ld\";\n-  new_argv[new_argc++] = \"-m\";\n+  struct obstack argv_obstack;\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, \"ld\");\n+  obstack_ptr_grow (&argv_obstack, \"-m\");\n   switch (offload_abi)\n     {\n     case OFFLOAD_ABI_LP64:\n-      new_argv[new_argc++] = \"elf_x86_64\";\n+      obstack_ptr_grow (&argv_obstack, \"elf_x86_64\");\n       break;\n     case OFFLOAD_ABI_ILP32:\n-      new_argv[new_argc++] = \"elf_i386\";\n+      obstack_ptr_grow (&argv_obstack, \"elf_i386\");\n       break;\n     default:\n       gcc_unreachable ();\n     }\n-  new_argv[new_argc++] = \"--relocatable\";\n-  new_argv[new_argc++] = host_descr_filename;\n-  new_argv[new_argc++] = target_so_filename;\n-  new_argv[new_argc++] = \"-o\";\n-  new_argv[new_argc++] = out_obj_filename;\n-  new_argv[new_argc++] = NULL;\n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), false);\n+  obstack_ptr_grow (&argv_obstack, \"--relocatable\");\n+  obstack_ptr_grow (&argv_obstack, host_descr_filename);\n+  obstack_ptr_grow (&argv_obstack, target_so_filename);\n+  obstack_ptr_grow (&argv_obstack, \"-o\");\n+  obstack_ptr_grow (&argv_obstack, out_obj_filename);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n+  char **new_argv = XOBFINISH (&argv_obstack, char **);\n+  fork_execute (new_argv[0], new_argv, false);\n+  obstack_free (&argv_obstack, NULL);\n \n   /* Run objcopy on the resultant object file to localize generated symbols\n      to avoid conflicting between different DSO and an executable.  */\n-  new_argv[0] = \"objcopy\";\n-  new_argv[1] = \"-L\";\n-  new_argv[2] = symbols[0];\n-  new_argv[3] = \"-L\";\n-  new_argv[4] = symbols[1];\n-  new_argv[5] = \"-L\";\n-  new_argv[6] = symbols[2];\n-  new_argv[7] = out_obj_filename;\n-  new_argv[8] = NULL;\n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), false);\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, \"objcopy\");\n+  obstack_ptr_grow (&argv_obstack, \"-L\");\n+  obstack_ptr_grow (&argv_obstack, symbols[0]);\n+  obstack_ptr_grow (&argv_obstack, \"-L\");\n+  obstack_ptr_grow (&argv_obstack, symbols[1]);\n+  obstack_ptr_grow (&argv_obstack, \"-L\");\n+  obstack_ptr_grow (&argv_obstack, symbols[2]);\n+  obstack_ptr_grow (&argv_obstack, out_obj_filename);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n+  new_argv = XOBFINISH (&argv_obstack, char **);\n+  fork_execute (new_argv[0], new_argv, false);\n+  obstack_free (&argv_obstack, NULL);\n \n   return 0;\n }"}]}