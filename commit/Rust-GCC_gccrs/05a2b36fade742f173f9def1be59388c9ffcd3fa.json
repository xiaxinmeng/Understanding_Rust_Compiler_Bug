{"sha": "05a2b36fade742f173f9def1be59388c9ffcd3fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhMmIzNmZhZGU3NDJmMTczZjlkZWYxYmU1OTM4OGM5ZmZjZDNmYQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-07T03:04:54Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-07T03:04:54Z"}, "message": "cpperror.c (cpp_message): Generalize for \"fatal\" errors.\n\n* cpperror.c (cpp_message):  Generalize for \"fatal\" errors.\n(cpp_fatal):  New function (just calls cpp_message).\n\nFrom-SVN: r12201", "tree": {"sha": "56c4ee50836b10971688c89220b2991fb083e29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c4ee50836b10971688c89220b2991fb083e29e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a2b36fade742f173f9def1be59388c9ffcd3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a2b36fade742f173f9def1be59388c9ffcd3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a2b36fade742f173f9def1be59388c9ffcd3fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a2b36fade742f173f9def1be59388c9ffcd3fa/comments", "author": null, "committer": null, "parents": [{"sha": "b23378c8ab20fe8f78c7753c9c69f75910d0aaa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23378c8ab20fe8f78c7753c9c69f75910d0aaa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23378c8ab20fe8f78c7753c9c69f75910d0aaa2"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "29bd9c8b85a21d297e355936f9acebe3642e5c47", "filename": "gcc/cpperror.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a2b36fade742f173f9def1be59388c9ffcd3fa/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a2b36fade742f173f9def1be59388c9ffcd3fa/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=05a2b36fade742f173f9def1be59388c9ffcd3fa", "patch": "@@ -88,21 +88,38 @@ cpp_file_line_for_message (pfile, filename, line, column)\n     fprintf (stderr, \"%s:%d: \", filename, line);\n }\n \n-/* IS_ERROR is 1 for error, 0 for warning */\n+/* IS_ERROR is 2 for \"fatal\" error, 1 for error, 0 for warning */\n void cpp_message (pfile, is_error, msg, arg1, arg2, arg3)\n      int is_error;\n      cpp_reader *pfile;\n      char *msg;\n      char *arg1, *arg2, *arg3;\n {\n-  if (is_error)\n-    pfile->errors++;\n-  else\n+  if (!is_error)\n     fprintf (stderr, \"warning: \");\n+  else if (is_error == 2)\n+    pfile->errors = CPP_FATAL_LIMIT;\n+  else if (pfile->errors < CPP_FATAL_LIMIT)\n+    pfile->errors++;\n   fprintf (stderr, msg, arg1, arg2, arg3);\n   fprintf (stderr, \"\\n\");\n }\n \n+/* Same as cpp_error, except we consider the error to be \"fatal\",\n+   such as inconsistent options.  I.e. there is little point in continuing.\n+   (We do not exit, to support use of cpplib as a library.\n+   Instead, it is the caller's responsibility to check\n+   CPP_FATAL_ERRORS.  */\n+\n+void\n+cpp_fatal (pfile, str, arg)\n+     cpp_reader *pfile;\n+     char *str, *arg;\n+{\n+  fprintf (stderr, \"%s: \", progname);\n+  cpp_message (pfile, 2, str, arg);\n+}\n+\n void\n fatal (str, arg)\n      char *str, *arg;"}]}