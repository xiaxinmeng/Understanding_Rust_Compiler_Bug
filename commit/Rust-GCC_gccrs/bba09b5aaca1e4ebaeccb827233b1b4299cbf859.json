{"sha": "bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhMDliNWFhY2ExZTRlYmFlY2NiODI3MjMzYjFiNDI5OWNiZjg1OQ==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.org", "date": "2008-07-06T20:28:30Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2008-07-06T20:28:30Z"}, "message": "configure.ac: Check for caddr_t, define to char * if not defined.\n\n2008-07-06  Andreas Tobler  <a.tobler@schweiz.org>\n\n\t* configure.ac: Check for caddr_t, define to char * if not defined.\n\t* configure: Regenerate.\n\t* ggc-common.c (mmap_gt_pch_get_address): Fix -Wc++-compat warnings.\n\t(mmap_gt_pch_use_address): Likewise.\n\t* config/host-solaris.c (sol_gt_pch_use_address): Likewise.\n\nFrom-SVN: r137538", "tree": {"sha": "04171d340f03dde77ce3b253c2a3774775e78b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04171d340f03dde77ce3b253c2a3774775e78b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/comments", "author": null, "committer": null, "parents": [{"sha": "ee7d4b57a56be0420460691d7cfc92f5028a6aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7d4b57a56be0420460691d7cfc92f5028a6aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7d4b57a56be0420460691d7cfc92f5028a6aca"}], "stats": {"total": 115, "additions": 95, "deletions": 20}, "files": [{"sha": "a3f6462f029053035f7dbe32a1ada8167a41ef86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "patch": "@@ -1,3 +1,11 @@\n+2008-07-06  Andreas Tobler  <a.tobler@schweiz.org>\n+\n+\t* configure.ac: Check for caddr_t, define to char * if not defined.\n+\t* configure: Regenerate.\n+\t* ggc-common.c (mmap_gt_pch_get_address): Fix -Wc++-compat warnings.\n+\t(mmap_gt_pch_use_address): Likewise.\n+\t* config/host-solaris.c (sol_gt_pch_use_address): Likewise.\n+\n 2008-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (struct variable_info): Remove has_union."}, {"sha": "bde01db9813f0dc249c5d83d11f581bd518d4be8", "filename": "gcc/config/host-solaris.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfig%2Fhost-solaris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfig%2Fhost-solaris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-solaris.c?ref=bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "patch": "@@ -42,7 +42,7 @@ sol_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n   if (size == 0)\n     return -1;\n \n-  addr = mmap (base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,\n+  addr = mmap ((caddr_t) base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,\n \t       fd, offset);\n \n   /* Solaris isn't good about honoring the mmap START parameter\n@@ -55,18 +55,18 @@ sol_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n       size_t i;\n \n       if (addr != (void *) MAP_FAILED)\n-\tmunmap (addr, size);\n+\tmunmap ((caddr_t) addr, size);\n \n       errno = 0;\n       for (i = 0; i < size; i += page_size)\n-\tif (mincore ((char *)base + i, page_size, (void *)&one_byte) == -1\n+\tif (mincore ((char *)base + i, page_size, (char *) &one_byte) == -1\n \t    && errno == ENOMEM)\n \t  continue; /* The page is not mapped.  */\n \telse\n \t  break;\n \n       if (i >= size)\n-\taddr = mmap (base, size, \n+\taddr = mmap ((caddr_t) base, size, \n \t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED,\n \t\t     fd, offset);\n     }"}, {"sha": "5d2ceb5308a8cb3193bff2ea40aec36ad3c85a71", "filename": "gcc/configure", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "patch": "@@ -10326,6 +10326,72 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for caddr_t\" >&5\n+echo $ECHO_N \"checking for caddr_t... $ECHO_C\" >&6\n+if test \"${ac_cv_type_caddr_t+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+if ((caddr_t *) 0)\n+  return 0;\n+if (sizeof (caddr_t))\n+  return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_type_caddr_t=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_type_caddr_t=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_type_caddr_t\" >&5\n+echo \"${ECHO_T}$ac_cv_type_caddr_t\" >&6\n+if test $ac_cv_type_caddr_t = yes; then\n+  :\n+else\n+\n+cat >>confdefs.h <<_ACEOF\n+#define caddr_t char *\n+_ACEOF\n+\n+fi\n+\n \n # Try to determine the array type of the second argument of getgroups\n # for the target system (int or gid_t).\n@@ -14659,13 +14725,13 @@ if test \"${lt_cv_nm_interface+set}\" = set; then\n else\n   lt_cv_nm_interface=\"BSD nm\"\n   echo \"int some_variable = 0;\" > conftest.$ac_ext\n-  (eval echo \"\\\"\\$as_me:14662: $ac_compile\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14728: $ac_compile\\\"\" >&5)\n   (eval \"$ac_compile\" 2>conftest.err)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:14665: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14731: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n   (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:14668: output\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14734: output\\\"\" >&5)\n   cat conftest.out >&5\n   if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n     lt_cv_nm_interface=\"MS dumpbin\"\n@@ -15720,7 +15786,7 @@ ia64-*-hpux*)\n   ;;\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 15723 \"configure\"' > conftest.$ac_ext\n+  echo '#line 15789 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -16340,11 +16406,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16343: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16409: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16347: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16413: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -16662,11 +16728,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16665: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16731: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16669: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16735: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -16767,11 +16833,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16770: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16836: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:16774: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16840: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -16822,11 +16888,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16825: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16891: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:16829: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16895: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -19619,7 +19685,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19622 \"configure\"\n+#line 19688 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19719,7 +19785,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19722 \"configure\"\n+#line 19788 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "1e9e8d87b782701432e82ebac979a31206100b8a", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "patch": "@@ -1010,6 +1010,7 @@ int main()\n fi\n \n AC_CHECK_TYPE(ssize_t, int)\n+AC_CHECK_TYPE(caddr_t, char *)\n \n # Try to determine the array type of the second argument of getgroups\n # for the target system (int or gid_t)."}, {"sha": "8c0e459fe38f133e343aa7d4c558b52f481b5d59", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba09b5aaca1e4ebaeccb827233b1b4299cbf859/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=bba09b5aaca1e4ebaeccb827233b1b4299cbf859", "patch": "@@ -638,7 +638,7 @@ mmap_gt_pch_get_address (size_t size, int fd)\n   if (ret == (void *) MAP_FAILED)\n     ret = NULL;\n   else\n-    munmap (ret, size);\n+    munmap ((caddr_t) ret, size);\n \n   return ret;\n }\n@@ -662,7 +662,7 @@ mmap_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n   if (size == 0)\n     return -1;\n \n-  addr = mmap (base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,\n+  addr = mmap ((caddr_t) base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,\n \t       fd, offset);\n \n   return addr == base ? 1 : -1;"}]}