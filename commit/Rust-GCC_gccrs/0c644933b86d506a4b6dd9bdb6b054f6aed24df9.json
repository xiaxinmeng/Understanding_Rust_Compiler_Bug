{"sha": "0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2NDQ5MzNiODZkNTA2YTRiNmRkOWJkYjZiMDU0ZjZhZWQyNGRmOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2003-10-22T09:28:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-10-22T09:28:08Z"}, "message": "re PR ada/5677 (Assert failure in nlists.adb:933)\n\n2003-10-22  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* gnat_wrapper.adb: New file.\n\n2003/10/22  Jerome Roussel  <roussel@act-europe.fr>\n\n\t* g-regpat.ads, g-regpat.adb (Match): new function, to know if a\n\tstring match a pre compiled regular expression (the corresponding\n\tversion of the function working on a raw regular expression)\n\tFix typos in various comments\n\tUpdate copyright notice in spec\n\n2003/10/21  Gary Dismukes  <dismukes@gnat.com>\n\n\t* exp_ch3.adb:\n\t(Component_Needs_Simple_Initialization): Return False when the type is a\n\tpacked bit array. Revise spec comments to document this case.\n\n\t* exp_prag.adb:\n\t(Expand_Pragma_Import): Set any expression on the imported object to\n\tempty to avoid initializing imported objects (in particular this\n\tcovers the case of zero-initialization of bit arrays).\n\tUpdate copyright notice.\n\n2003/10/21  Ed Schonberg  <schonberg@gnat.com>\n\n\t* sem_ch12.adb:\n\t(Load_Parent_Of_Generic): If parent is compilation unit, stop search,\n\ta subunit is missing.\n\t(Instantiate_Subprogram_Body): If body of function is missing, set type\n\tof return expression explicitly in dummy body, to prevent cascaded\n\terrors when a subunit is missing.\n\tFixes PR 5677.\n\n\t* sem_ch3.adb:\n\t(Access_Subprogram_Declaration): Verify that return type is valid.\n\tFixes PR 8693.\n\n\t* sem_elab.adb:\n\t(Check_Elab_Calls): Do not apply elaboration checks if the main unit is\n\tgeneric.\n\tFixes PR 12318.\n\n\t* sem_util.adb:\n\t(Corresponding_Discriminant): If the scope of the discriminant is a\n\tprivate type without discriminant, use its full view.\n\tFixes PR 8247.\n\nFrom-SVN: r72792", "tree": {"sha": "3382b1929ce73dcbba9d81c17a6d7dac301b444b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3382b1929ce73dcbba9d81c17a6d7dac301b444b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/comments", "author": null, "committer": null, "parents": [{"sha": "12be91a78c9f6caadd4024d3af5bc468f9a32130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12be91a78c9f6caadd4024d3af5bc468f9a32130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12be91a78c9f6caadd4024d3af5bc468f9a32130"}], "stats": {"total": 273, "additions": 250, "deletions": 23}, "files": [{"sha": "fe7650b0f7f07dbc6d305fbd9ab2f77a48385d7d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -1,6 +1,51 @@\n 2003-10-22  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* mingw32.h: New file.\n+\t* gnat_wrapper.adb: New file.\n+\n+2003/10/22  Jerome Roussel  <roussel@act-europe.fr>\n+\n+\t* g-regpat.ads, g-regpat.adb (Match): new function, to know if a\n+\tstring match a pre compiled regular expression (the corresponding\n+\tversion of the function working on a raw regular expression)\n+\tFix typos in various comments\n+\tUpdate copyright notice in spec\n+\n+2003/10/21  Gary Dismukes  <dismukes@gnat.com>\n+\n+\t* exp_ch3.adb: \n+\t(Component_Needs_Simple_Initialization): Return False when the type is a\n+\tpacked bit array. Revise spec comments to document this case.\n+\n+\t* exp_prag.adb: \n+\t(Expand_Pragma_Import): Set any expression on the imported object to\n+\tempty to avoid initializing imported objects (in particular this\n+\tcovers the case of zero-initialization of bit arrays).\n+\tUpdate copyright notice.\n+\n+2003/10/21  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* sem_ch12.adb: \n+\t(Load_Parent_Of_Generic): If parent is compilation unit, stop search,\n+\ta subunit is missing.\n+\t(Instantiate_Subprogram_Body): If body of function is missing, set type\n+\tof return expression explicitly in dummy body, to prevent cascaded\n+\terrors when a subunit is missing.\n+\tFixes PR 5677.\n+\n+\t* sem_ch3.adb: \n+\t(Access_Subprogram_Declaration): Verify that return type is valid.\n+\tFixes PR 8693.\n+\n+\t* sem_elab.adb: \n+\t(Check_Elab_Calls): Do not apply elaboration checks if the main unit is\n+\tgeneric.\n+\tFixes PR 12318.\n+\n+\t* sem_util.adb: \n+\t(Corresponding_Discriminant): If the scope of the discriminant is a\n+\tprivate type without discriminant, use its full view.\n+\tFixes PR 8247.\n \n 2003-10-21  Arnaud Charlet  <charlet@act-europe.fr>\n "}, {"sha": "a6d058d11a4ae896d9dd81d7637135f26b01466c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -1368,11 +1368,18 @@ package body Exp_Ch3 is\n         (T    : Entity_Id)\n          return Boolean;\n       --  Determines if a component needs simple initialization, given its\n-      --  type T. This is identical to Needs_Simple_Initialization, except\n-      --  that the types Tag and Vtable_Ptr, which are access types which\n-      --  would normally require simple initialization to null, do not\n-      --  require initialization as components, since they are explicitly\n-      --  initialized by other means.\n+      --  type T. This is the same as Needs_Simple_Initialization except\n+      --  for the following differences. The types Tag and Vtable_Ptr,\n+      --  which are access types which would normally require simple\n+      --  initialization to null, do not require initialization as\n+      --  components, since they are explicitly initialized by other\n+      --  means. The other relaxation is for packed bit arrays that are\n+      --  associated with a modular type, which in some cases require\n+      --  zero initialization to properly support comparisons, except\n+      --  that comparison of such components always involves an explicit\n+      --  selection of only the component's specific bits (whether or not\n+      --  there are adjacent components or gaps), so zero initialization\n+      --  is never needed for components.\n \n       procedure Constrain_Array\n         (SI         : Node_Id;\n@@ -2144,7 +2151,8 @@ package body Exp_Ch3 is\n          return\n            Needs_Simple_Initialization (T)\n              and then not Is_RTE (T, RE_Tag)\n-             and then not Is_RTE (T, RE_Vtable_Ptr);\n+             and then not Is_RTE (T, RE_Vtable_Ptr)\n+             and then not Is_Bit_Packed_Array (T);\n       end Component_Needs_Simple_Initialization;\n \n       ---------------------"}, {"sha": "f58ce1b5703ae06799abd0284b215e9a27cb0012", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -295,7 +295,13 @@ package body Exp_Prag is\n          then\n             Remove (After_Def);\n \n-         elsif Is_Access_Type (Typ) then\n+         --  Any default initialization expression should be removed\n+         --  (e.g., null defaults for access objects, zero initialization\n+         --  of packed bit arrays). Imported objects aren't allowed to\n+         --  have explicit initialization, so the expression must have\n+         --  been generated by the compiler.\n+\n+         elsif Present (Expression (Parent (Def_Id))) then\n             Set_Expression (Parent (Def_Id), Empty);\n          end if;\n       end if;"}, {"sha": "20001bc4fc89aea7132c276150fe30ef8bb45f08", "filename": "gcc/ada/g-regpat.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fg-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fg-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regpat.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -3402,6 +3402,20 @@ package body GNAT.Regpat is\n       end if;\n    end Match;\n \n+   function  Match\n+     (Self       : Pattern_Matcher;\n+      Data       : String;\n+      Data_First : Integer  := -1;\n+      Data_Last  : Positive := Positive'Last)\n+     return Boolean\n+   is\n+      Matches : Match_Array (0 .. 0);\n+\n+   begin\n+      Match (Self, Data, Matches, Data_First, Data_Last);\n+      return Matches (0).First >= Data'First;\n+   end Match;\n+\n    procedure Match\n      (Expression : String;\n       Data       : String;"}, {"sha": "52ab3c19e29703d32c46e171fe821eafd036056a", "filename": "gcc/ada/g-regpat.ads", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fg-regpat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fg-regpat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regpat.ads?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---           Copyright (C) 1996-2002 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 1996-2003 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -475,7 +475,7 @@ pragma Preelaborate (Regpat);\n      (Expression : String;\n       Data       : String;\n       Size       : Program_Size := 0;\n-      Data_First : Integer := -1;\n+      Data_First : Integer  := -1;\n       Data_Last  : Positive := Positive'Last)\n       return       Natural;\n    --  Return the position where Data matches, or (Data'First - 1) if\n@@ -492,7 +492,7 @@ pragma Preelaborate (Regpat);\n      (Expression : String;\n       Data       : String;\n       Size       : Program_Size := 0;\n-      Data_First : Integer := -1;\n+      Data_First : Integer  := -1;\n       Data_Last  : Positive := Positive'Last)\n       return       Boolean;\n    --  Return True if Data matches Expression. Match raises Storage_Error\n@@ -517,10 +517,20 @@ pragma Preelaborate (Regpat);\n       Data       : String;\n       Data_First : Integer  := -1;\n       Data_Last  : Positive := Positive'Last)\n-      return Natural;\n+     return Natural;\n+   --  Match Data using the given pattern matcher.\n    --  Return the position where Data matches, or (Data'First - 1) if there is\n-   --  no match. Raises Expression_Error if Expression is not a legal regular\n-   --  expression.\n+   --  no match.\n+   --\n+   --  See description of Data_First and Data_Last above.\n+\n+   function  Match\n+     (Self       : Pattern_Matcher;\n+      Data       : String;\n+      Data_First : Integer  := -1;\n+      Data_Last  : Positive := Positive'Last)\n+     return Boolean;\n+   --  Return True if Data matches using the given pattern matcher.\n    --\n    --  See description of Data_First and Data_Last above.\n \n@@ -534,7 +544,6 @@ pragma Preelaborate (Regpat);\n       Data_First : Integer  := -1;\n       Data_Last  : Positive := Positive'Last);\n    --  Match Data using the given pattern matcher and store result in Matches.\n-   --  Raises Expression_Error if Expression is not a legal regular expression.\n    --  The expression matches if Matches (0) /= No_Match.\n    --\n    --  At most Matches'Length parenthesis are returned."}, {"sha": "189cdc46ea10679856427e55b202e0326e0ac657", "filename": "gcc/ada/gnat_wrapper.adb", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fgnat_wrapper.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fgnat_wrapper.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_wrapper.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -0,0 +1,121 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                         G N A T _ W R A P P E R                          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 2002-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  GNAT_Wrapper is to be used as the starter program for most of the GNAT\n+--  executables. It sets up the working environment variables and calls the\n+--  real executable which is to be found under the 'real' sub-directory.\n+--\n+--  This avoids using the registry on Windows which is tricky to setup to run\n+--  multiple compilers (GNAT Pro release and wavefronts for example) at the\n+--  same time.\n+\n+with Ada.Command_Line;          use Ada.Command_Line;\n+with GNAT.OS_Lib;               use GNAT.OS_Lib;\n+\n+procedure GNAT_Wrapper is\n+   DS : Character renames Directory_Separator;\n+   PS : Character renames Path_Separator;\n+\n+   procedure Split_Command;\n+   --  Parse Actual_Name and set K and L variables (see below).\n+\n+   Actual_Name : String_Access := new String'(Command_Name);\n+\n+   K : Natural;\n+   --  Index of the directory separator just before program name's first\n+   --  character.\n+\n+   L : Natural;\n+   --  Index of the last character of the GNATPRO install directory.\n+\n+   LD_LIBRARY_PATH : String_Access := Getenv (\"LD_LIBRARY_PATH\");\n+   PATH            : String_Access := Getenv (\"PATH\");\n+\n+   -------------------\n+   -- Split_Command --\n+   -------------------\n+\n+   procedure Split_Command is\n+   begin\n+      K := Actual_Name'Last;\n+      loop\n+         exit when K = 0\n+           or else Actual_Name (K) = '\\' or else Actual_Name (K) = '/';\n+         K := K - 1;\n+      end loop;\n+   end Split_Command;\n+\n+begin\n+   Split_Command;\n+\n+   if K = 0 then\n+      --  No path information found, locate the program on the path.\n+      declare\n+         Old : String_Access := Actual_Name;\n+      begin\n+         Actual_Name := Locate_Exec_On_Path (Actual_Name.all);\n+         Free (Old);\n+\n+         Split_Command;\n+      end;\n+   end if;\n+\n+   --  Skip 'bin' from directory above. GNAT binaries are always under\n+   --  <gnatpro>/bin directory.\n+\n+   L := K - 4;\n+\n+   declare\n+      Prog   : constant String := Actual_Name (K + 1 .. Actual_Name'Last);\n+      Dir    : constant String := Actual_Name (Actual_Name'First .. L - 1);\n+      Real   : constant String := Dir & DS & \".bin\";\n+      Bin    : constant String := Dir & DS & \"bin\";\n+      Args   : Argument_List (1 .. Argument_Count);\n+      Result : Integer;\n+\n+   begin\n+      Setenv (\"GCC_ROOT\", Dir);\n+      Setenv (\"GNAT_ROOT\", Dir);\n+      Setenv (\"BINUTILS_ROOT\", Dir);\n+      Setenv (\"LD_LIBRARY_PATH\", Dir & DS & \"lib\" & PS & LD_LIBRARY_PATH.all);\n+      Setenv (\"PATH\", Real & PS & Bin & PS & PATH.all);\n+\n+      --  Call the right executable under \"<dir>/.bin\"\n+\n+      for K in 1 .. Argument_Count loop\n+         Args (K) := new String'(Argument (K));\n+      end loop;\n+\n+      Normalize_Arguments (Args);\n+      Result := Spawn (Real & DS & Prog, Args);\n+\n+      for K in 1 .. Argument_Count loop\n+         Free (Args (K));\n+      end loop;\n+\n+      OS_Exit (Result);\n+   end;\n+end GNAT_Wrapper;"}, {"sha": "e25284185c0d9893e64cb068999a6cfd7849e301", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -7175,6 +7175,7 @@ package body Sem_Ch12 is\n       Act_Body_Id   : Entity_Id;\n       Pack_Body     : Node_Id;\n       Prev_Formal   : Entity_Id;\n+      Ret_Expr      : Node_Id;\n       Unit_Renaming : Node_Id;\n \n       Parent_Installed : Boolean := False;\n@@ -7351,6 +7352,13 @@ package body Sem_Ch12 is\n                              PE_Access_Before_Elaboration))));\n \n          else\n+            Ret_Expr :=\n+              Make_Raise_Program_Error (Loc,\n+                Reason => PE_Access_Before_Elaboration);\n+\n+            Set_Etype (Ret_Expr, (Etype (Anon_Id)));\n+            Set_Analyzed (Ret_Expr);\n+\n             Act_Body :=\n               Make_Subprogram_Body (Loc,\n                 Specification =>\n@@ -7365,12 +7373,8 @@ package body Sem_Ch12 is\n                   Declarations               => Empty_List,\n                   Handled_Statement_Sequence =>\n                     Make_Handled_Sequence_Of_Statements (Loc,\n-                      Statements => New_List (\n-                        Make_Return_Statement (Loc,\n-                          Expression =>\n-                            Make_Raise_Program_Error (Loc,\n-                              Reason =>\n-                                PE_Access_Before_Elaboration)))));\n+                      Statements =>\n+                        New_List (Make_Return_Statement (Loc, Ret_Expr))));\n          end if;\n \n          Pack_Body := Make_Package_Body (Loc,\n@@ -8209,6 +8213,7 @@ package body Sem_Ch12 is\n \n             elsif Nkind (True_Parent) = N_Package_Declaration\n               and then Present (Generic_Parent (Specification (True_Parent)))\n+              and then Nkind (Parent (True_Parent)) /= N_Compilation_Unit\n             then\n                --  Parent is an instantiation within another specification.\n                --  Declaration for instance has been inserted before original"}, {"sha": "11ed2eee91ef04e23e80b1e0a61c051038d7a7d8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -734,6 +734,11 @@ package body Sem_Ch3 is\n       if Nkind (T_Def) = N_Access_Function_Definition then\n          Analyze (Subtype_Mark (T_Def));\n          Set_Etype (Desig_Type, Entity (Subtype_Mark (T_Def)));\n+\n+         if not (Is_Type (Etype (Desig_Type))) then\n+            Error_Msg_N\n+             (\"expect type in function specification\", Subtype_Mark (T_Def));\n+         end if;\n       else\n          Set_Etype (Desig_Type, Standard_Void_Type);\n       end if;"}, {"sha": "8e6e2e1d83a962d088ea895fec4e8ea32dd2e315", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -1177,7 +1177,10 @@ package body Sem_Elab is\n       --  case we lack the full information that we need, and no object\n       --  file will be created in any case.\n \n-      if not Expander_Active or else Subunits_Missing then\n+      if not Expander_Active\n+        or else Is_Generic_Unit (Cunit_Entity (Main_Unit))\n+        or else Subunits_Missing\n+      then\n          return;\n       end if;\n "}, {"sha": "dc67b50db5152cb5e991617c670d8434b70f0c84", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c644933b86d506a4b6dd9bdb6b054f6aed24df9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0c644933b86d506a4b6dd9bdb6b054f6aed24df9", "patch": "@@ -1967,7 +1967,18 @@ package body Sem_Util is\n \n    begin\n       Par_Disc := Original_Record_Component (Original_Discriminant (Id));\n-      Old_Disc := First_Discriminant (Scope (Par_Disc));\n+\n+      --  The original type may currently be private, and the discriminant\n+      --  only appear on its full view.\n+\n+      if Is_Private_Type (Scope (Par_Disc))\n+        and then not Has_Discriminants (Scope (Par_Disc))\n+        and then Present (Full_View (Scope (Par_Disc)))\n+      then\n+         Old_Disc := First_Discriminant (Full_View (Scope (Par_Disc)));\n+      else\n+         Old_Disc := First_Discriminant (Scope (Par_Disc));\n+      end if;\n \n       if Is_Class_Wide_Type (Typ) then\n          New_Disc := First_Discriminant (Root_Type (Typ));"}]}