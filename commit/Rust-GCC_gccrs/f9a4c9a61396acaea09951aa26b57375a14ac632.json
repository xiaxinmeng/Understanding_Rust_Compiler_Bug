{"sha": "f9a4c9a61396acaea09951aa26b57375a14ac632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhNGM5YTYxMzk2YWNhZWEwOTk1MWFhMjZiNTczNzVhMTRhYzYzMg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-01-23T16:24:13Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-01-23T16:24:13Z"}, "message": "[PATCH][AArch64] Vector shift by 64 fix\n\ngcc/\n\n\t* config/aarch64/aarch64-simd-builtins.def (ashr): DI mode removed.\n\t(ashr_simd): New builtin handling DI mode.\n\t* config/aarch64/aarch64-simd.md (aarch64_ashr_simddi): New pattern.\n\t(aarch64_sshr_simddi): New match pattern.\n\t* config/aarch64/arm_neon.h (vshr_n_s32): Builtin call modified.\n\t(vshrd_n_s64): Likewise.\n\t* config/aarch64/predicates.md (aarch64_shift_imm64_di): New predicate.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/sshr64_1.c: New testcase.\n\nFrom-SVN: r206978", "tree": {"sha": "5f4d182dd6b600e9ccbf121141493e44d1ac6be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f4d182dd6b600e9ccbf121141493e44d1ac6be7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a4c9a61396acaea09951aa26b57375a14ac632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a4c9a61396acaea09951aa26b57375a14ac632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a4c9a61396acaea09951aa26b57375a14ac632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a4c9a61396acaea09951aa26b57375a14ac632/comments", "author": null, "committer": null, "parents": [{"sha": "949ad9715a88d9010f3e6470a97b02080d500396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949ad9715a88d9010f3e6470a97b02080d500396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949ad9715a88d9010f3e6470a97b02080d500396"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "dde3673b830c54b1f516473dc8de4dfc18d10dd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -1,3 +1,13 @@\n+2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (ashr): DI mode removed.\n+\t(ashr_simd): New builtin handling DI mode.\n+\t* config/aarch64/aarch64-simd.md (aarch64_ashr_simddi): New pattern.\n+\t(aarch64_sshr_simddi): New match pattern.\n+\t* config/aarch64/arm_neon.h (vshr_n_s32): Builtin call modified.\n+\t(vshrd_n_s64): Likewise.\n+\t* config/aarch64/predicates.md (aarch64_shift_imm64_di): New predicate.\n+\n 2014-01-23  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.h (ASM_SPEC): Pass the -mcpu as -mcpu."}, {"sha": "e5f71b479ccfd1a9cbf84aed0f96b49762053f59", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -190,7 +190,8 @@\n   BUILTIN_VSDQ_I_DI (BINOP, srshl, 0)\n   BUILTIN_VSDQ_I_DI (BINOP, urshl, 0)\n \n-  BUILTIN_VSDQ_I_DI (SHIFTIMM, ashr, 3)\n+  BUILTIN_VDQ_I (SHIFTIMM, ashr, 3)\n+  VAR1 (SHIFTIMM, ashr_simd, 0, di)\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, lshr, 3)\n   /* Implemented by aarch64_<sur>shr_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0)"}, {"sha": "7378da9122d550f869c3e830e3e5a7681e7581f6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -685,6 +685,32 @@\n   DONE;\n })\n \n+;; DI vector shift\n+(define_expand \"aarch64_ashr_simddi\"\n+  [(match_operand:DI 0 \"register_operand\" \"=w\")\n+   (match_operand:DI 1 \"register_operand\" \"w\")\n+   (match_operand:QI 2 \"aarch64_shift_imm64_di\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+    if (INTVAL (operands[2]) == 64)\n+      emit_insn (gen_aarch64_sshr_simddi (operands[0], operands[1]));\n+    else\n+      emit_insn (gen_ashrdi3 (operands[0], operands[1], operands[2]));\n+    DONE;\n+  }\n+)\n+\n+;; SIMD shift by 64.  This pattern is a special case as standard pattern does\n+;; not handle NEON shifts by 64.\n+(define_insn \"aarch64_sshr_simddi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=w\")\n+        (unspec:DI\n+          [(match_operand:DI 1 \"register_operand\" \"w\")] UNSPEC_SSHR64))]\n+  \"TARGET_SIMD\"\n+  \"sshr\\t%d0, %d1, 64\"\n+  [(set_attr \"type\" \"neon_shift_imm\")]\n+)\n+\n (define_expand \"vlshr<mode>3\"\n  [(match_operand:VQ_S 0 \"register_operand\" \"\")\n   (match_operand:VQ_S 1 \"register_operand\" \"\")"}, {"sha": "99a6ac8fcbdcd24a0ea18cc037bef9cf72070281", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -93,6 +93,7 @@\n     UNSPEC_SISD_SSHL\n     UNSPEC_SISD_USHL\n     UNSPEC_SSHL_2S\n+    UNSPEC_SSHR64\n     UNSPEC_ST1\n     UNSPEC_ST2\n     UNSPEC_ST3"}, {"sha": "6af99361b8e265f66026dc506cfc23f044d153b4", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -23340,7 +23340,7 @@ vshr_n_s32 (int32x2_t __a, const int __b)\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vshr_n_s64 (int64x1_t __a, const int __b)\n {\n-  return (int64x1_t) __builtin_aarch64_ashrdi (__a, __b);\n+  return (int64x1_t) __builtin_aarch64_ashr_simddi (__a, __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -23418,7 +23418,7 @@ vshrq_n_u64 (uint64x2_t __a, const int __b)\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vshrd_n_s64 (int64x1_t __a, const int __b)\n {\n-  return (int64x1_t) __builtin_aarch64_ashrdi (__a, __b);\n+  return (int64x1_t) __builtin_aarch64_ashr_simddi (__a, __b);\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))"}, {"sha": "c8e27d8715df96819fc98efb970cd403f6adefd5", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -86,6 +86,10 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) < 64\")))\n \n+(define_predicate \"aarch64_shift_imm64_di\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) <= 64\")))\n+\n (define_predicate \"aarch64_reg_or_shift_imm_si\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_shift_imm_si\")))"}, {"sha": "43979c3603bebc0e76168c95294ce64765165328", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -1,3 +1,7 @@\n+2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/sshr64_1.c: New testcase.\n+\n 2014-01-23  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* g++.dg/cilk-plus/cilk-plus.exp: Called the C/C++ common tests for"}, {"sha": "89c6096ad3934d1c42fac2c8fba6eba6170762da", "filename": "gcc/testsuite/gcc.target/aarch64/sshr64_1.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsshr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a4c9a61396acaea09951aa26b57375a14ac632/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsshr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsshr64_1.c?ref=f9a4c9a61396acaea09951aa26b57375a14ac632", "patch": "@@ -0,0 +1,115 @@\n+/* Test SIMD shift works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test_sshr64 ()\n+{\n+  int64x1_t arg;\n+  int64x1_t result;\n+  int64_t got;\n+  int64_t exp;\n+  arg = vcreate_s64 (0x0000000080000000);\n+  result = vshr_n_s64 (arg, 64);\n+  got = vget_lane_s64 (result, 0);\n+  exp = 0;\n+  /* Expect: \"result\" = 0000000000000000.  */\n+  if (exp != got)\n+    return 1;\n+  return 0;\n+}\n+\n+int __attribute__ ((noinline))\n+test_sshr64_neg ()\n+{\n+  int64x1_t arg;\n+  int64x1_t result;\n+  int64_t got;\n+  int64_t exp;\n+  arg = vcreate_s64 (0xffffffff80000000);\n+  result = vshr_n_s64 (arg, 64);\n+  got = vget_lane_s64 (result, 0);\n+  exp = 0xffffffffffffffff;\n+  /* Expect: \"result\" = -1.  */\n+  if (exp != got)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+__attribute__ ((noinline))\n+test_other ()\n+{\n+  int64x1_t arg;\n+  int64x1_t result;\n+  int64_t got;\n+  int64_t exp;\n+  arg = vcreate_s64 (0x0000000080000000);\n+  result = vshr_n_s64 (arg, 4);\n+  got = vget_lane_s64 (result, 0);\n+  exp = 0x0000000008000000;\n+  /* Expect: \"result\" = 0x0000000008000000.  */\n+  if (exp != got)\n+    return 1;\n+  return 0;\n+}\n+\n+int __attribute__ ((noinline))\n+test_other_neg ()\n+{\n+  int64x1_t arg;\n+  int64x1_t result;\n+  int64_t got;\n+  int64_t exp;\n+  arg = vcreate_s64 (0xffffffff80000000);\n+  result = vshr_n_s64 (arg, 4);\n+  got = vget_lane_s64 (result, 0);\n+  exp = 0xfffffffff8000000;\n+  /* Expect: \"result\" = 0xfffffffff8000000.  */\n+  if (exp != got)\n+    return 1;\n+  return 0;\n+}\n+\n+int __attribute__ ((noinline))\n+test_no_sshr0 ()\n+{\n+  int64x1_t arg;\n+  int64x1_t result;\n+  int64_t got;\n+  int64_t exp;\n+  arg = vcreate_s64 (0x0000000080000000);\n+  result = vshr_n_s64 (arg, 0);\n+  got = vget_lane_s64 (result, 0);\n+  exp = 0x0000000080000000;\n+  /* Expect: \"result\" = 0x0000000080000000.  */\n+  if (exp != got)\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"sshr\\\\td\\[0-9\\]+, d\\[0-9\\]+, 0\" } } */\n+int\n+main ()\n+{\n+  if (test_sshr64 ())\n+    abort ();\n+  if (test_other ())\n+    abort ();\n+\n+  if (test_sshr64_neg ())\n+    abort ();\n+  if (test_other_neg ())\n+    abort ();\n+\n+  if (test_no_sshr0 ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}