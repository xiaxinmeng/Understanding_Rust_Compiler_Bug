{"sha": "9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjZjc2NmZlMWI5ZmJkZGEzZTc5OTdmNDA4OTEyYmZjY2ZhZjVmZA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-01-06T14:49:34Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-01-06T14:49:34Z"}, "message": "Fix PR middle-end/19286 Fix PR debug/19267\n\n2005-01-05  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR middle-end/19286\n\tFix PR debug/19267\n\t* dwarf2out.c (gen_subprogram_die): If we've already tried to\n\toutput this subprogram, simply ignore this attempt to do it again.\n\t(add_abstract_origin_attribute): Don't abort trying to add the abstract\n\torigin attribute if it's not possible.\n\t(gen_block_die): Don't ignore subblocks of \"unused\" blocks.\n\t(decls_for_scope): Ditto.\n\t* gimple-low.c (mark_blocks_with_used_subblocks): Remove.\n\t(mark_used_blocks): Don't call mark_blocks_with_used_subblocks.\n\nFrom-SVN: r92991", "tree": {"sha": "1ddf91f92e5dc4124c2a4d437f06fbfc711097b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ddf91f92e5dc4124c2a4d437f06fbfc711097b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba"}], "stats": {"total": 123, "additions": 58, "deletions": 65}, "files": [{"sha": "2cca2aeaf35b72d4ea19e78837671e215fb6d976", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "patch": "@@ -1,3 +1,16 @@\n+2005-01-05  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR middle-end/19286\n+\tFix PR debug/19267\n+\t* dwarf2out.c (gen_subprogram_die): If we've already tried to\n+\toutput this subprogram, simply ignore this attempt to do it again.\n+\t(add_abstract_origin_attribute): Don't abort trying to add the abstract\n+\torigin attribute if it's not possible.\n+\t(gen_block_die): Don't ignore subblocks of \"unused\" blocks.\n+\t(decls_for_scope): Ditto.\n+\t* gimple-low.c (mark_blocks_with_used_subblocks): Remove.\n+\t(mark_used_blocks): Don't call mark_blocks_with_used_subblocks.\n+\t\n 2005-01-05  Richard Henderson  <rth@redhat.com>\n \n \tPR target/11327"}, {"sha": "7b8141153e588ddbd33f9d4af382c3c9b09fd33a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "patch": "@@ -10462,9 +10462,17 @@ add_abstract_origin_attribute (dw_die_ref die, tree origin)\n   else if (TYPE_P (origin))\n     origin_die = lookup_type_die (origin);\n \n-  gcc_assert (origin_die);\n+  /* XXX: Functions that are never lowered don't always have correct block\n+     trees (in the case of java, they simply have no block tree, in some other\n+     languages).  For these functions, there is nothing we can really do to\n+     output correct debug info for inlined functions in all cases.  Rather\n+     than abort, we'll just produce deficient debug info now, in that we will\n+     have variables without a proper abstract origin.  In the future, when all\n+     functions are lowered, we should re-add a gcc_assert (origin_die)\n+     here.  */\n \n-  add_AT_die_ref (die, DW_AT_abstract_origin, origin_die);\n+  if (origin_die)\n+      add_AT_die_ref (die, DW_AT_abstract_origin, origin_die);\n }\n \n /* We do not currently support the pure_virtual attribute.  */\n@@ -11199,12 +11207,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t     It seems reasonable to use AT_specification in this case.  */\n \t  && !get_AT (old_die, DW_AT_inline))\n \t{\n-\t  /* ??? This can happen if there is a bug in the program, for\n-\t     instance, if it has duplicate function definitions.  Ideally,\n-\t     we should detect this case and ignore it.  For now, if we have\n-\t     already reported an error, any error at all, then assume that\n-\t     we got here because of an input error, not a dwarf2 bug.  */\n-\t  gcc_assert (errorcount);\n+\t  /* Detect and ignore this case, where we are trying to output\n+\t     something we have already output.  */\n \t  return;\n \t}\n \n@@ -12234,9 +12238,8 @@ gen_block_die (tree stmt, dw_die_ref context_die, int depth)\n   tree decl;\n   enum tree_code origin_code;\n \n-  /* Ignore blocks never really used to make RTL.  */\n-  if (stmt == NULL_TREE || !TREE_USED (stmt)\n-      || (!TREE_ASM_WRITTEN (stmt) && !BLOCK_ABSTRACT (stmt)))\n+  /* Ignore blocks that are NULL.  */\n+  if (stmt == NULL_TREE)\n     return;\n \n   /* If the block is one fragment of a non-contiguous block, do not\n@@ -12282,7 +12285,10 @@ gen_block_die (tree stmt, dw_die_ref context_die, int depth)\n \t  if (debug_info_level > DINFO_LEVEL_TERSE)\n \t    /* We are not in terse mode so *any* local declaration counts\n \t       as being a \"significant\" one.  */\n-\t    must_output_die = (BLOCK_VARS (stmt) != NULL);\n+\t    must_output_die = (BLOCK_VARS (stmt) != NULL \n+\t\t\t       && (TREE_USED (stmt) \n+\t\t\t\t   || TREE_ASM_WRITTEN (stmt)\n+\t\t\t\t   || BLOCK_ABSTRACT (stmt)));\n \t  else\n \t    /* We are in terse mode, so only local (nested) function\n \t       definitions count as \"significant\" local declarations.  */\n@@ -12324,29 +12330,32 @@ decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n   tree decl;\n   tree subblocks;\n \n-  /* Ignore blocks never really used to make RTL.  */\n-  if (stmt == NULL_TREE || ! TREE_USED (stmt))\n+  /* Ignore NULL blocks.  */\n+  if (stmt == NULL_TREE)\n     return;\n \n-  /* Output the DIEs to represent all of the data objects and typedefs\n-     declared directly within this block but not within any nested\n-     sub-blocks.  Also, nested function and tag DIEs have been\n-     generated with a parent of NULL; fix that up now.  */\n-  for (decl = BLOCK_VARS (stmt); decl != NULL; decl = TREE_CHAIN (decl))\n+  if (TREE_USED (stmt))\n     {\n-      dw_die_ref die;\n-\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tdie = lookup_decl_die (decl);\n-      else if (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl))\n-\tdie = lookup_type_die (TREE_TYPE (decl));\n-      else\n-\tdie = NULL;\n-\n-      if (die != NULL && die->die_parent == NULL)\n-\tadd_child_die (context_die, die);\n-      else\n-\tgen_decl_die (decl, context_die);\n+      /* Output the DIEs to represent all of the data objects and typedefs\n+\t declared directly within this block but not within any nested\n+\t sub-blocks.  Also, nested function and tag DIEs have been\n+\t generated with a parent of NULL; fix that up now.  */\n+      for (decl = BLOCK_VARS (stmt); decl != NULL; decl = TREE_CHAIN (decl))\n+\t{\n+\t  dw_die_ref die;\n+\t  \n+\t  if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t    die = lookup_decl_die (decl);\n+\t  else if (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl))\n+\t    die = lookup_type_die (TREE_TYPE (decl));\n+\t  else\n+\t    die = NULL;\n+\t  \n+\t  if (die != NULL && die->die_parent == NULL)\n+\t    add_child_die (context_die, die);\n+\t  else\n+\t    gen_decl_die (decl, context_die);\n+\t}\n     }\n \n   /* If we're at -g1, we're not interested in subblocks.  */"}, {"sha": "d86cc00307ec09586f4304e2c3e246919ba9c97d", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "patch": "@@ -541,7 +541,7 @@ struct tree_opt_pass pass_remove_useless_vars =\n   0\t\t\t\t\t/* letter */\n };\n \n-/* Mark BLOCK used if it has a used variable in it, then recurse over it's\n+/* Mark BLOCK used if it has a used variable in it, then recurse over its\n    subblocks.  */\n \n static void\n@@ -569,42 +569,12 @@ mark_blocks_with_used_vars (tree block)\n     mark_blocks_with_used_vars (subblock);\n }\n \n-/* Mark BLOCK used if any of it's subblocks have the USED bit set, or it's\n-   abstract origin is used.  */\n-\n-static bool\n-mark_blocks_with_used_subblocks (tree block)\n-{\n-  tree subblock;\n- \n-  /* The block may have no variables, but still be used, if it's abstract\n-     origin is used.  This occurs when we inline functions with no parameters\n-     that call functions with no parameters or local vars (such as\n-     dwarf2/dwarf-die7.c).  You end up with a block that has an abstract\n-     origin, no variables, and nothing in the subblocks is used.  However, the\n-     block is really used, because it's abstract origin was used.  */\n-\n-  if (BLOCK_ABSTRACT_ORIGIN (block))\n-    {\n-      if (TREE_USED (BLOCK_ABSTRACT_ORIGIN (block)))\n-\tTREE_USED (block) = true;\n-    }\n-\n-  for (subblock = BLOCK_SUBBLOCKS (block);\n-       subblock;\n-       subblock = BLOCK_CHAIN (subblock))\n-    TREE_USED (block) |= mark_blocks_with_used_subblocks (subblock);\n-  return TREE_USED (block);\n-}\n-\n /* Mark the used attribute on blocks correctly.  */\n   \n static void\n mark_used_blocks (void)\n-{\n-  \n+{  \n   mark_blocks_with_used_vars (DECL_INITIAL (current_function_decl));\n-  mark_blocks_with_used_subblocks (DECL_INITIAL (current_function_decl));\n }\n \n "}, {"sha": "4bdf2b32895c02cd2870d1ebfe8684b1c7bfee8c", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf766fe1b9fbdda3e7997f408912bfccfaf5fd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9acf766fe1b9fbdda3e7997f408912bfccfaf5fd", "patch": "@@ -966,7 +966,8 @@ extern void tree_operand_check_failed (int, enum tree_code,\n /* Nonzero in a _DECL if the name is used in its scope.\n    Nonzero in an expr node means inhibit warning if value is unused.\n    In IDENTIFIER_NODEs, this means that some extern decl for this name\n-   was used.  */\n+   was used.  \n+   In a BLOCK, this means that the block contains variables that are used.  */\n #define TREE_USED(NODE) ((NODE)->common.used_flag)\n \n /* In a FUNCTION_DECL, nonzero means a call to the function cannot throw"}]}