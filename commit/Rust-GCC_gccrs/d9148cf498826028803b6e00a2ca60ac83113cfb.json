{"sha": "d9148cf498826028803b6e00a2ca60ac83113cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxNDhjZjQ5ODgyNjAyODgwM2I2ZTAwYTJjYTYwYWM4MzExM2NmYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-08-11T02:49:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-11T02:49:44Z"}, "message": "re PR c++/11789 (rejects legal, multiple inheritance (inheriting from same class twice))\n\n\tPR c++/11789\n\t* cp-tree.h (get_vbase): Remove.\n\t(get_vbase_types): Remove.\n\t* init.c (expand_member_init): Correct logic for looking up base\n\tclasses.\n\n\tPR c++/11789.C\n\t* g++.dg/inherit/multiple1.C: New test.\n\nFrom-SVN: r70316", "tree": {"sha": "435bbfbc71784aee4588349e3b26519977005e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435bbfbc71784aee4588349e3b26519977005e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9148cf498826028803b6e00a2ca60ac83113cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9148cf498826028803b6e00a2ca60ac83113cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9148cf498826028803b6e00a2ca60ac83113cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9148cf498826028803b6e00a2ca60ac83113cfb/comments", "author": null, "committer": null, "parents": [{"sha": "5a05675643f4695565a48f52a298a670974dc354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a05675643f4695565a48f52a298a670974dc354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a05675643f4695565a48f52a298a670974dc354"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "191879fe25f660458a5576bd27a2795ea16bbbb7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9148cf498826028803b6e00a2ca60ac83113cfb", "patch": "@@ -1,3 +1,11 @@\n+2003-08-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11789\n+\t* cp-tree.h (get_vbase): Remove.\n+\t(get_vbase_types): Remove.\n+\t* init.c (expand_member_init): Correct logic for looking up base\n+\tclasses.\n+\n 2003-08-10  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* error.c (dump_expr): Tidy."}, {"sha": "a740142c1efc2fc00a8e90b5f81e4445e40f1fc8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d9148cf498826028803b6e00a2ca60ac83113cfb", "patch": "@@ -4018,7 +4018,6 @@ extern bool emit_tinfo_decl (tree);\n extern bool accessible_base_p (tree, tree);\n extern tree lookup_base (tree, tree, base_access, base_kind *);\n extern int types_overlap_p\t\t\t(tree, tree);\n-extern tree get_vbase\t\t\t\t(tree, tree);\n extern tree get_dynamic_cast_base_type          (tree, tree);\n extern int accessible_p                         (tree, tree);\n extern tree lookup_field_1                      (tree, tree, bool);\n@@ -4028,7 +4027,6 @@ extern tree lookup_fnfields\t\t\t(tree, tree, int);\n extern tree lookup_member\t\t\t(tree, tree, int, bool);\n extern int look_for_overrides\t\t\t(tree, tree);\n extern void get_pure_virtuals\t\t        (tree);\n-extern void get_vbase_types\t\t\t(tree);\n extern void maybe_suppress_debug_info\t\t(tree);\n extern void note_debug_info_needed\t\t(tree);\n extern void push_class_decls\t\t\t(tree);"}, {"sha": "95824516c8a6bd9c51d0a0b177f3b8bf8010cd90", "filename": "gcc/cp/init.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d9148cf498826028803b6e00a2ca60ac83113cfb", "patch": "@@ -963,16 +963,50 @@ expand_member_init (tree name)\n \n   if (basetype)\n     {\n-      tree binfo;\n+      tree class_binfo;\n+      tree direct_binfo;\n+      tree virtual_binfo;\n+      int i;\n \n       if (current_template_parms)\n \treturn basetype;\n \n-      binfo = lookup_base (current_class_type, basetype, \n-\t\t\t   ba_ignore, NULL);\n-      if (!binfo || (!TREE_VIA_VIRTUAL (binfo)\n-\t\t     && (BINFO_INHERITANCE_CHAIN (binfo)\n-\t\t\t != TYPE_BINFO (current_class_type))))\n+      class_binfo = TYPE_BINFO (current_class_type);\n+      direct_binfo = NULL_TREE;\n+      virtual_binfo = NULL_TREE;\n+\n+      /* Look for a direct base.  */\n+      for (i = 0; i < BINFO_N_BASETYPES (class_binfo); ++i)\n+\tif (same_type_p (basetype, \n+\t\t\t TYPE_BINFO_BASETYPE (current_class_type, i)))\n+\t  {\n+\t    direct_binfo = BINFO_BASETYPE (class_binfo, i);\n+\t    break;\n+\t  }\n+      /* Look for a virtual base -- unless the direct base is itself\n+\t virtual.  */\n+      if (!direct_binfo || !TREE_VIA_VIRTUAL (direct_binfo))\n+\t{\n+\t  virtual_binfo \n+\t    = purpose_member (basetype,\n+\t\t\t      CLASSTYPE_VBASECLASSES (current_class_type));\n+\t  if (virtual_binfo)\n+\t    virtual_binfo = TREE_VALUE (virtual_binfo);\n+\t}\n+\n+      /* [class.base.init]\n+\t \n+         If a mem-initializer-id is ambiguous because it designates\n+\t both a direct non-virtual base class and an inherited virtual\n+\t base class, the mem-initializer is ill-formed.  */\n+      if (direct_binfo && virtual_binfo)\n+\t{\n+\t  error (\"'%D' is both a direct base and an indirect virtual base\",\n+\t\t basetype);\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (!direct_binfo && !virtual_binfo)\n \t{\n \t  if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))\n \t    error (\"type `%D' is not a direct or virtual base of `%T'\",\n@@ -982,7 +1016,8 @@ expand_member_init (tree name)\n \t\t   name, current_class_type);\n \t  return NULL_TREE;\n \t}\n-      return binfo;\n+\n+      return direct_binfo ? direct_binfo : virtual_binfo;\n     }\n   else\n     {"}, {"sha": "9580129a8b58c850d2f7f71c007c0f3cf6a5c8af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9148cf498826028803b6e00a2ca60ac83113cfb", "patch": "@@ -1,3 +1,8 @@\n+2003-08-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11789.C\n+\t* g++.dg/inherit/multiple1.C: New test.\n+\n 2003-08-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcc.dg/spe1.c: New test."}, {"sha": "3eb9fe763a7ce8c957c2ca06dc3f005d60d40f3a", "filename": "gcc/testsuite/g++.dg/inherit/multiple1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fmultiple1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9148cf498826028803b6e00a2ca60ac83113cfb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fmultiple1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fmultiple1.C?ref=d9148cf498826028803b6e00a2ca60ac83113cfb", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options \"-w\" }\n+\n+struct Base {\n+  int b;\n+  \n+  Base(int b) : b(b) { }\n+};\n+\n+struct Derived : public Base {\n+  Derived(int d) : Base(d) { }\n+};\n+\n+struct Final : public Derived, public Base {\n+  Final(int f) : Derived(f), Base(f-1) { }\n+};\n+\n+int main()\n+{\n+  Final f(5);\n+}"}]}