{"sha": "529dec15d809c6bff8031344f2075de98872395d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5ZGVjMTVkODA5YzZiZmY4MDMxMzQ0ZjIwNzVkZTk4ODcyMzk1ZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-12-05T10:36:33Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-12-05T10:36:33Z"}, "message": "atomicity.h: Add support for compiling Thumb code.\n\n* config/cpu/arm/bits/atomicity.h: Add support for compiling Thumb\ncode.\n\nFrom-SVN: r38033", "tree": {"sha": "f59f4b3198a5c6c03557c5f02f37bdc0b0ee4041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f59f4b3198a5c6c03557c5f02f37bdc0b0ee4041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/529dec15d809c6bff8031344f2075de98872395d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529dec15d809c6bff8031344f2075de98872395d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529dec15d809c6bff8031344f2075de98872395d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529dec15d809c6bff8031344f2075de98872395d/comments", "author": null, "committer": null, "parents": [{"sha": "11b176c156aecf09298da2f3be09507806fdad2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b176c156aecf09298da2f3be09507806fdad2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b176c156aecf09298da2f3be09507806fdad2b"}], "stats": {"total": 188, "additions": 165, "deletions": 23}, "files": [{"sha": "927ae79307e66f56c0efcf5bdeb9e6e4d3119fb6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529dec15d809c6bff8031344f2075de98872395d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529dec15d809c6bff8031344f2075de98872395d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=529dec15d809c6bff8031344f2075de98872395d", "patch": "@@ -1,3 +1,8 @@\n+2000-12-05  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/cpu/arm/bits/atomicity.h: Add support for compiling Thumb\n+\tcode.\n+\n 2000-12-05  Richard Earnshaw  <rearnsha@arm.com>\n \n \tSupport for NetBSD."}, {"sha": "e933ca4688ce523866e815fc170850ebd47166b3", "filename": "libstdc++-v3/config/cpu/arm/bits/atomicity.h", "status": "modified", "additions": 160, "deletions": 23, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529dec15d809c6bff8031344f2075de98872395d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529dec15d809c6bff8031344f2075de98872395d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h?ref=529dec15d809c6bff8031344f2075de98872395d", "patch": "@@ -27,19 +27,46 @@ __attribute__ ((__unused__))\n __exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n   _Atomic_word __tmp, __tmp2, __result;\n+#ifdef __thumb__\n+  /* Since this function is inlined, we can't be sure of the alignment.  */\n+  __asm__ __volatile__ (\n+\t\"ldr     %0, 4f \\n\\t\"\n+\t\"bx      %0 \\n\\t\"\n+\t\".align 0 \\n\"\n+\t\"4:\\t\"\n+\t\".word   0f \\n\\t\"\n+\t\".code 32 \\n\"\n+\t\"0:\\t\"\n+\t\"ldr     %0, [%3] \\n\\t\"\n+\t\"add     %1, %0, %4 \\n\\t\"\n+\t\"swp     %2, %1, [%3] \\n\\t\"\n+        \"cmp     %0, %2 \\n\\t\"\n+        \"swpne   %1, %2, [%3] \\n\\t\"\n+        \"bne     0b \\n\\t\"\n+\t\"ldr     %1, 1f \\n\\t\"\n+\t\"bx      %1 \\n\"\n+\t\"1:\\t\"\n+\t\".word   2f \\n\\t\"\n+\t\".code 16 \\n\"\n+\t\"2:\\n\"\n+\t: \"=&l\"(__result), \"=&r\"(__tmp), \"=&r\"(__tmp2) \n+\t: \"r\" (__mem), \"r\"(__val) \n+\t: \"cc\", \"memory\");\n+#else\n   __asm__ __volatile__ (\n \t\"\\n\"\n \t\"0:\\t\"\n-\t\"ldr     %0,[%3] \\n\\t\"\n-\t\"add     %1,%0,%4 \\n\\t\"\n-\t\"swp     %2,%1,[%3] \\n\\t\"\n-\t\"cmp     %0,%2 \\n\\t\"\n-\t\"swpne   %1,%2,[%3] \\n\\t\"\n+\t\"ldr     %0, [%3] \\n\\t\"\n+\t\"add     %1, %0, %4 \\n\\t\"\n+\t\"swp     %2, %1, [%3] \\n\\t\"\n+\t\"cmp     %0, %2 \\n\\t\"\n+\t\"swpne   %1, %2, [%3] \\n\\t\"\n \t\"bne     0b \\n\\t\"\n \t\"\"\n \t: \"=&r\"(__result), \"=&r\"(__tmp), \"=&r\"(__tmp2) \n \t: \"r\" (__mem), \"r\"(__val) \n \t: \"cc\", \"memory\");\n+#endif\n   return __result;\n }\n \n@@ -48,19 +75,46 @@ __attribute__ ((__unused__))\n __atomic_add (volatile _Atomic_word *__mem, int __val)\n {\n   _Atomic_word __tmp, __tmp2, __tmp3;\n+#ifdef __thumb__\n+  /* Since this function is inlined, we can't be sure of the alignment.  */\n+  __asm__ __volatile__ (\n+\t\"ldr     %0, 4f \\n\\t\"\n+\t\"bx      %0 \\n\\t\"\n+\t\".align 0\\n\"\n+\t\"4:\\t\"\n+\t\".word   0f \\n\\t\"\n+\t\".code 32 \\n\"\n+\t\"0:\\t\"\n+\t\"ldr     %0, [%3] \\n\\t\"\n+\t\"add     %1, %0, %4 \\n\\t\"\n+        \"swp     %2, %1, [%3] \\n\\t\"\n+        \"cmp     %0, %2 \\n\\t\"\n+        \"swpne   %1, %2,[%3] \\n\\t\"\n+        \"bne     0b \\n\\t\"\n+\t\"ldr     %1, 1f \\n\\t\"\n+\t\"bx      %1 \\n\"\n+\t\"1:\\t\"\n+\t\".word   2f \\n\\t\"\n+\t\".code 16 \\n\"\n+\t\"2:\\n\"\n+\t: \"=&l\"(__tmp), \"=&r\"(__tmp2), \"=&r\"(__tmp3) \n+\t: \"r\" (__mem), \"r\"(__val) \n+\t: \"cc\", \"memory\");\n+#else\n   __asm__ __volatile__ (\n \t\"\\n\"\n \t\"0:\\t\"\n-\t\"ldr     %0,[%3] \\n\\t\"\n-\t\"add     %1,%0,%4 \\n\\t\"\n-\t\"swp     %2,%1,[%3] \\n\\t\"\n-\t\"cmp     %0,%2 \\n\\t\"\n-\t\"swpne   %1,%2,[%3] \\n\\t\"\n+\t\"ldr     %0, [%3] \\n\\t\"\n+\t\"add     %1, %0, %4 \\n\\t\"\n+\t\"swp     %2, %1, [%3] \\n\\t\"\n+\t\"cmp     %0, %2 \\n\\t\"\n+\t\"swpne   %1, %2, [%3] \\n\\t\"\n \t\"bne     0b \\n\\t\"\n \t\"\"\n \t: \"=&r\"(__tmp), \"=&r\"(__tmp2), \"=&r\"(__tmp3) \n \t: \"r\" (__mem), \"r\"(__val) \n \t: \"cc\", \"memory\");\n+#endif\n }\n \n static inline int\n@@ -69,23 +123,54 @@ __compare_and_swap (volatile long *__p, long __oldval, long __newval)\n {\n   int __result;\n   long __tmp;\n+#ifdef __thumb__\n+  /* Since this function is inlined, we can't be sure of the alignment.  */\n+  __asm__ __volatile__ (\n+\t\"ldr     %0, 4f \\n\\t\"\n+\t\"bx      %0 \\n\\t\"\n+\t\".align 0 \\n\"\n+\t\"4:\\t\"\n+\t\".word   0f \\n\\t\"\n+\t\".code 32 \\n\"\n+\t\"0:\\t\"\n+\t\"ldr     %1, [%2] \\n\\t\"\n+        \"mov     %0, #0 \\n\\t\"\n+        \"cmp     %1, %4 \\n\\t\"\n+        \"bne     1f \\n\\t\"\n+        \"swp     %0, %3, [%2] \\n\\t\"\n+        \"cmp     %1, %0 \\n\\t\"\n+        \"swpne   %1, %0, [%2] \\n\\t\"\n+        \"bne     0b \\n\\t\"\n+        \"mov     %0, #1 \\n\"\n+\t\"1:\\t\"\n+\t\"ldr     %1, 2f \\n\\t\"\n+\t\"bx      %1 \\n\"\n+\t\"2:\\t\"\n+\t\".word   3f \\n\\t\"\n+\t\".code 16\\n\"\n+\t\"3:\\n\"\n+\t: \"=&l\"(__result), \"=&r\"(__tmp) \n+\t: \"r\" (__p), \"r\" (__newval), \"r\" (__oldval) \n+\t: \"cc\", \"memory\");\n+#else\n   __asm__ __volatile__ (\n \t\"\\n\"\n \t\"0:\\t\"\n-\t\"ldr     %1,[%2] \\n\\t\"\n-\t\"mov     %0,#0 \\n\\t\"\n-\t\"cmp     %1,%4 \\n\\t\"\n+\t\"ldr     %1, [%2] \\n\\t\"\n+\t\"mov     %0, #0 \\n\\t\"\n+\t\"cmp     %1, %4 \\n\\t\"\n \t\"bne     1f \\n\\t\"\n-\t\"swp     %0,%3,[%2] \\n\\t\"\n-\t\"cmp     %1,%0 \\n\\t\"\n-\t\"swpne   %1,%0,[%2] \\n\\t\"\n+\t\"swp     %0, %3, [%2] \\n\\t\"\n+\t\"cmp     %1, %0 \\n\\t\"\n+\t\"swpne   %1, %0, [%2] \\n\\t\"\n \t\"bne     0b \\n\\t\"\n-\t\"mov     %0,#1 \\n\"\n+\t\"mov     %0, #1 \\n\"\n \t\"1:\\n\\t\"\n \t\"\"\n \t: \"=&r\"(__result), \"=&r\"(__tmp) \n \t: \"r\" (__p), \"r\" (__newval), \"r\" (__oldval) \n \t: \"cc\", \"memory\");\n+#endif\n   return __result;\n }\n \n@@ -94,13 +179,36 @@ __attribute__ ((__unused__))\n __always_swap (volatile long *__p, long __newval)\n {\n   long __result;\n+#ifdef __thumb__\n+  long __tmp;\n+  /* Since this function is inlined, we can't be sure of the alignment.  */\n+  __asm__ __volatile__ (\n+\t\"ldr     %0, 4f \\n\\t\"\n+\t\"bx      %0 \\n\\t\"\n+\t\".align 0 \\n\"\n+\t\"4:\\t\"\n+\t\".word   0f \\n\\t\"\n+\t\".code 32\\n\"\n+\t\"0:\\t\"\n+\t\"swp     %0, %3, [%2] \\n\\t\"\n+\t\"ldr     %1, 1f \\n\\t\"\n+\t\"bx      %1 \\n\"\n+\t\"1:\\t\"\n+\t\".word   2f \\n\\t\"\n+\t\".code 16 \\n\"\n+\t\"2:\\n\"\n+\t: \"=&l\"(__result), \"=&r\"(__tmp)\n+\t: \"r\"(__p), \"r\"(__newval)\n+\t: \"memory\");\n+#else\n   __asm__ __volatile__ (\n \t\"\\n\\t\"\n-\t\"swp     %0,%2,[%1] \\n\\t\"\n+\t\"swp     %0, %2, [%1] \\n\\t\"\n \t\"\"\n \t: \"=&r\"(__result)\n \t: \"r\"(__p), \"r\"(__newval)\n \t: \"memory\");\n+#endif\n   return __result;\n }\n \n@@ -110,21 +218,50 @@ __test_and_set (volatile long *__p, long __newval)\n {\n   int __result;\n   long __tmp;\n+#ifdef __thumb__\n+  /* Since this function is inlined, we can't be sure of the alignment.  */\n+  __asm__ __volatile__ (\n+\t\"ldr     %0, 4f \\n\\t\"\n+\t\"bx      %0 \\n\\t\"\n+\t\".align 0 \\n\"\n+\t\"4:\\t\"\n+\t\".word   0f \\n\\t\"\n+\t\".code 32 \\n\"\n+\t\"0:\\t\"\n+\t\"ldr     %0, [%2] \\n\\t\"\n+        \"cmp     %0, #0 \\n\\t\"\n+        \"bne     1f \\n\\t\"\n+        \"swp     %1, %3, [%2] \\n\\t\"\n+        \"cmp     %0, %1 \\n\\t\"\n+        \"swpne   %0, %1, [%2]\\n\\t\"\n+        \"bne     0b \\n\"\n+\t\"1:\\t\"\n+\t\"ldr     %1, 2f \\n\\t\"\n+\t\"bx      %1 \\n\"\n+\t\"2:\\t\"\n+\t\".word   3f \\n\\t\"\n+\t\".code 16 \\n\"\n+\t\"3:\"\n+\t: \"=&l\"(__result), \"=r\" (__tmp) \n+\t: \"r\"(__p), \"r\"(__newval) \n+\t: \"cc\", \"memory\");\n+#else\n   __asm__ __volatile__ (\n \t\"\\n\"\n \t\"0:\\t\"\n-\t\"ldr     %0,[%2] \\n\\t\"\n-\t\"cmp     %0,#0 \\n\\t\"\n+\t\"ldr     %0, [%2] \\n\\t\"\n+\t\"cmp     %0, #0 \\n\\t\"\n \t\"bne     1f \\n\\t\"\n-\t\"swp     %1,%3,[%2] \\n\\t\"\n-\t\"cmp     %0,%1 \\n\\t\"\n-\t\"swpne   %0,%1,[%2] \\n\\t\"\n+\t\"swp     %1, %3, [%2] \\n\\t\"\n+\t\"cmp     %0, %1 \\n\\t\"\n+\t\"swpne   %0, %1, [%2] \\n\\t\"\n \t\"bne     0b \\n\"\n \t\"1:\\n\\t\"\n \t\"\"\n \t: \"=&r\"(__result), \"=r\" (__tmp) \n \t: \"r\"(__p), \"r\"(__newval) \n \t: \"cc\", \"memory\");\n+#endif\n   return __result;\n }\n "}]}