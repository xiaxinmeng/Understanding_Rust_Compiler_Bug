{"sha": "be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "node_id": "C_kwDOANBUbNoAKGJlNGFiMmFlMDE1ZTFlMThhNGU1YjU3YWI1ZDg3ZTZmMzBlNjc0OWU", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2022-06-07T20:22:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:12Z"}, "message": "[Ada] Proper freezing for dispatching expression functions.\n\nIn the case of an expression function that is a primitive function of a\ntagged type, freezing the tagged type needs to freeze the function (and\nits return expression). A bug in this area could result in incorrect\nbehavior both at compile time and at run time. At compile time, freezing\nrule violations could go undetected so that an illegal program could be\nincorrectly accepted. At run time, a dispatching call to the primitive\nfunction could end up dispatching through a not-yet-initialized slot in\nthe dispatch table, typically (although not always) resulting in a\nsegmentation fault.\n\ngcc/ada/\n\n\t* freeze.adb (Check_Expression_Function.Find_Constant): Add a\n\tcheck that a type that is referenced as the prefix of an\n\tattribute is fully declared.\n\t(Freeze_And_Append): Do not freeze the profile when freezing an\n\texpression function.\n\t(Freeze_Entity): When a tagged type is frozen, also freeze any\n\tprimitive operations of the type that are expression functions.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not prevent\n\tfreezing associated with an expression function body if the\n\tfunction is a dispatching op.", "tree": {"sha": "fe03293b2872fc585388b403d3cc33fd9edef1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe03293b2872fc585388b403d3cc33fd9edef1ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d17a88a52d2f773423adb55399d23ed5ea03c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d17a88a52d2f773423adb55399d23ed5ea03c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d17a88a52d2f773423adb55399d23ed5ea03c8"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "382e5b4b06be02cff8aec1270e1b170e6b897299", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "patch": "@@ -1470,6 +1470,10 @@ package body Freeze is\n             if Is_Entity_Name (Prefix (Nod))\n               and then Is_Type (Entity (Prefix (Nod)))\n             then\n+               if Expander_Active then\n+                  Check_Fully_Declared (Entity (Prefix (Nod)), N);\n+               end if;\n+\n                Freeze_Before (N, Entity (Prefix (Nod)));\n             end if;\n          end if;\n@@ -2632,7 +2636,13 @@ package body Freeze is\n       N      : Node_Id;\n       Result : in out List_Id)\n    is\n-      L : constant List_Id := Freeze_Entity (Ent, N);\n+      --  Freezing an Expression_Function does not freeze its profile:\n+      --  the formals will have been frozen otherwise before the E_F\n+      --  can be called.\n+\n+      L : constant List_Id :=\n+        Freeze_Entity\n+          (Ent, N, Do_Freeze_Profile => not Is_Expression_Function (Ent));\n    begin\n       if Is_Non_Empty_List (L) then\n          if Result = No_List then\n@@ -7807,11 +7817,37 @@ package body Freeze is\n          --  type itself is frozen, because the class-wide type refers to the\n          --  tagged type which generates the class.\n \n+         --  For a tagged type, freeze explicitly those primitive operations\n+         --  that are expression functions, which otherwise have no clear\n+         --  freeze point: these have to be frozen before the dispatch table\n+         --  for the type is built, and before any explicit call to the\n+         --  primitive, which would otherwise be the freeze point for it.\n+\n          if Is_Tagged_Type (E)\n            and then not Is_Class_Wide_Type (E)\n            and then Present (Class_Wide_Type (E))\n          then\n             Freeze_And_Append (Class_Wide_Type (E), N, Result);\n+\n+            declare\n+               Ops  : constant Elist_Id := Primitive_Operations (E);\n+\n+               Elmt : Elmt_Id;\n+               Subp : Entity_Id;\n+\n+            begin\n+               if Ops /= No_Elist  then\n+                  Elmt := First_Elmt (Ops);\n+                  while Present (Elmt) loop\n+                     Subp := Node (Elmt);\n+                     if Is_Expression_Function (Subp) then\n+                        Freeze_And_Append (Subp, N, Result);\n+                     end if;\n+\n+                     Next_Elmt (Elmt);\n+                  end loop;\n+               end if;\n+            end;\n          end if;\n       end if;\n "}, {"sha": "85edfab6b3de4c443f68bd390ad3bef3247afafc", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=be4ab2ae015e1e18a4e5b57ab5d87e6f30e6749e", "patch": "@@ -4508,7 +4508,16 @@ package body Sem_Ch6 is\n             --  This also needs to be done in the case of an ignored Ghost\n             --  expression function, where the expander isn't active.\n \n-            Set_Is_Frozen (Spec_Id);\n+            --  A further complication arises if the expression function is\n+            --  a primitive operation of a tagged type: in that case the\n+            --  function entity must be frozen before the dispatch table for\n+            --  the type is constructed, so it will be frozen like other local\n+            --  entities, at the end of the current scope.\n+\n+            if not Is_Dispatching_Operation (Spec_Id) then\n+               Set_Is_Frozen (Spec_Id);\n+            end if;\n+\n             Mask_Types := Mask_Unfrozen_Types (Spec_Id);\n \n          elsif not Is_Frozen (Spec_Id)"}]}