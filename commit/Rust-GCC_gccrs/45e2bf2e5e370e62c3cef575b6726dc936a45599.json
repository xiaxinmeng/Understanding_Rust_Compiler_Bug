{"sha": "45e2bf2e5e370e62c3cef575b6726dc936a45599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlMmJmMmU1ZTM3MGU2MmMzY2VmNTc1YjY3MjZkYzkzNmE0NTU5OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-10-07T20:01:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-10-07T20:01:17Z"}, "message": "re PR c++/64433 (Segmentation fault while compiling)\n\n\tcp/\n\tPR c++/64433\n\tDR1658, DR1611\n\t* init.c (emit_mem_initializers): Don't construct vbases of\n\tabstract classes.\n\t(push_base_cleanups): Don't push vbase cleanups for abstract class\n\twhen in C++14 mode.\n\t* method.c (synthethesized_method_walk): Don't walk vbases of\n\tabstract classes when in C++14 mode.\n\n\ttestsuite/\n\tPR c++/66443\n\t* g++.dg/cpp0x/pr66443-cxx11.C: New.\n\t* g++.dg/cpp0x/pr66443-cxx11-2.C: New.\n\t* g++.dg/cpp1y/pr66443-cxx14.C: New\n\t* g++.dg/cpp1y/pr66443-cxx14-2.C: New.\n\t* g++.dg/cpp1y/pr66443-cxx14-3.C: New.\n\nFrom-SVN: r240874", "tree": {"sha": "78bc0aa76089b14017a65f3d962a9887be116e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78bc0aa76089b14017a65f3d962a9887be116e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e2bf2e5e370e62c3cef575b6726dc936a45599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e2bf2e5e370e62c3cef575b6726dc936a45599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e2bf2e5e370e62c3cef575b6726dc936a45599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e2bf2e5e370e62c3cef575b6726dc936a45599/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be845b04a8e13e91e7ecd76b60254c7d0acfda2e"}], "stats": {"total": 205, "additions": 193, "deletions": 12}, "files": [{"sha": "da2ca0750cfd9c14aa2da4d0ec730908dd3e2546", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -1,3 +1,14 @@\n+2016-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/64433\n+\tDR1658, DR1611\n+\t* init.c (emit_mem_initializers): Don't construct vbases of\n+\tabstract classes.\n+\t(push_base_cleanups): Don't push vbase cleanups for abstract class\n+\twhen in C++14 mode.\n+\t* method.c (synthethesized_method_walk): Don't walk vbases of\n+\tabstract classes when in C++14 mode.\n+\n 2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tImplement LWG2296 helper intrinsic"}, {"sha": "a873bb165c16fbc1e0b2d9bc8ef0a8c106e21b3b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -1154,9 +1154,7 @@ emit_mem_initializers (tree mem_inits)\n \t}\n \n       /* Initialize the base.  */\n-      if (BINFO_VIRTUAL_P (subobject))\n-\tconstruct_virtual_base (subobject, arguments);\n-      else\n+      if (!BINFO_VIRTUAL_P (subobject))\n \t{\n \t  tree base_addr;\n \n@@ -1170,6 +1168,10 @@ emit_mem_initializers (tree mem_inits)\n                               tf_warning_or_error);\n \t  expand_cleanup_for_base (subobject, NULL_TREE);\n \t}\n+      else if (!ABSTRACT_CLASS_TYPE_P (current_class_type))\n+\t/* C++14 DR1658 Means we do not have to construct vbases of\n+\t   abstract classes.  */\n+\tconstruct_virtual_base (subobject, arguments);\n     }\n   in_base_initializer = 0;\n \n@@ -4536,7 +4538,8 @@ push_base_cleanups (void)\n   vec<tree, va_gc> *vbases;\n \n   /* Run destructors for all virtual baseclasses.  */\n-  if (CLASSTYPE_VBASECLASSES (current_class_type))\n+  if (!ABSTRACT_CLASS_TYPE_P (current_class_type)\n+      && CLASSTYPE_VBASECLASSES (current_class_type))\n     {\n       tree cond = (condition_conversion\n \t\t   (build2 (BIT_AND_EXPR, integer_type_node,"}, {"sha": "73a670b59c86e107643d1bb947e6c7605f7a8882", "filename": "gcc/cp/method.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -1319,12 +1319,12 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n     }\n }\n \n-/* The caller wants to generate an implicit declaration of SFK for CTYPE\n-   which is const if relevant and CONST_P is set.  If spec_p, trivial_p and\n-   deleted_p are non-null, set their referent appropriately.  If diag is\n-   true, we're either being called from maybe_explain_implicit_delete to\n-   give errors, or if constexpr_p is non-null, from\n-   explain_invalid_constexpr_fn.  */\n+/* The caller wants to generate an implicit declaration of SFK for\n+   CTYPE which is const if relevant and CONST_P is set.  If SPEC_P,\n+   TRIVIAL_P, DELETED_P or CONSTEXPR_P are non-null, set their\n+   referent appropriately.  If DIAG is true, we're either being called\n+   from maybe_explain_implicit_delete to give errors, or if\n+   CONSTEXPR_P is non-null, from explain_invalid_constexpr_fn.  */\n \n static void\n synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n@@ -1534,9 +1534,13 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     }\n \n   vbases = CLASSTYPE_VBASECLASSES (ctype);\n-  if (vec_safe_is_empty (vbases))\n+  if (assign_p)\n+    /* No need to examine vbases here.  */;\n+  else if (vec_safe_is_empty (vbases))\n     /* No virtual bases to worry about.  */;\n-  else if (!assign_p)\n+  else if (ABSTRACT_CLASS_TYPE_P (ctype) && cxx_dialect >= cxx14)\n+    /* Vbase cdtors are not relevant.  */;\n+  else\n     {\n       if (constexpr_p)\n \t*constexpr_p = false;"}, {"sha": "4d79c787c79fb40e86362a6f8d34764b12fc7e6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -1,3 +1,12 @@\n+2016-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/66443\n+\t* g++.dg/cpp0x/pr66443-cxx11.C: New.\n+\t* g++.dg/cpp0x/pr66443-cxx11-2.C: New.\n+\t* g++.dg/cpp1y/pr66443-cxx14.C: New\n+\t* g++.dg/cpp1y/pr66443-cxx14-2.C: New.\n+\t* g++.dg/cpp1y/pr66443-cxx14-3.C: New.\n+\n 2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp0x/addressof1.C: New test."}, {"sha": "4bd641d202851cb104955a750359b948023638bd", "filename": "gcc/testsuite/g++.dg/cpp0x/pr66443-cxx11-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11-2.C?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11_only } }\n+\n+class C;\n+\n+  \n+struct A {\n+  A ();\n+private:\n+  ~A (){ }\n+  friend class C;\n+};\n+\n+struct B : virtual A {  // { dg-error \"is private\" }\n+  B ();\n+  virtual bool Ok () = 0; // abstract\n+};\n+\n+struct C : B {  // { dg-error \"use of deleted\" }\n+  C ();\n+  virtual bool Ok ();\n+};\n+\n+C c; // { dg-error \"use of deleted\" }"}, {"sha": "7ba00745e10aff4e5f843a3ab2b8bf5bed050943", "filename": "gcc/testsuite/g++.dg/cpp0x/pr66443-cxx11.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66443-cxx11.C?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++11_only } }\n+\n+// pr c++/66443 it is still ill-formed in C++ 11 for a synthesized\n+// ctor that's deleted only because of virtual base construction\n+\n+static bool a_made;\n+\n+struct A { // { dg-message \"candidate\" }\n+  A( int ) { a_made = true; } // { dg-message \"candidate\" }\n+};\n+\n+struct B: virtual A { // { dg-message \"no matching function\" }\n+  int m;\n+  virtual void Frob () = 0;\n+};\n+\n+class C: public B {\n+public:\n+  C();\n+  virtual void Frob ();\n+};\n+\n+void C::Frob ()\n+{\n+}\n+\n+C::C ()\n+  : A( 1 ) // { dg-error \"deleted function\" }\n+{ }\n+"}, {"sha": "e033f1f0b2dc74e11dbe6e5d1e9a47ef254513bd", "filename": "gcc/testsuite/g++.dg/cpp1y/pr66443-cxx14-2.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-2.C?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++14 } }\n+\n+// pr c++/66443 a synthesized ctor of an abstract class that's deleted\n+// only because of virtual base construction doesn't stop a derived\n+// class using it as a base object constructor (provided it has a\n+// suitable ctor invocation of the virtual base).\n+\n+// However we should still complain if the intermediate base is a\n+// non-abstract type.\n+\n+static int a_made;\n+\n+struct A {\n+  A *m_a = this;\n+  A (int) { a_made++; }\n+};\n+\n+struct B : virtual A { // { dg-error \"no matching function\" }\n+  A *m_b = this;\n+  virtual bool Ok (); // not abstract\n+};\n+\n+bool B::Ok ()\n+{\n+  return false;\n+}\n+\n+\n+B b; // { dg-error \"deleted\" }"}, {"sha": "b335c4b7af665020ca82e72c8e13771ca057ea21", "filename": "gcc/testsuite/g++.dg/cpp1y/pr66443-cxx14-3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14-3.C?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++14 } }\n+\n+// DR 1658, inaccessible dtor of virtual base doesn't affect an\n+// abstract class\n+\n+int a_unmade;\n+\n+class C;\n+\n+  \n+struct A {\n+private:\n+  ~A (){ a_unmade++; }\n+  friend class C;\n+};\n+\n+struct B : virtual A {\n+  virtual bool Ok () = 0; // abstract\n+};\n+\n+struct C : B {\n+  virtual bool Ok ();\n+};\n+\n+C c;"}, {"sha": "58348082952dccd57fa9f338f429a03167137921", "filename": "gcc/testsuite/g++.dg/cpp1y/pr66443-cxx14.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e2bf2e5e370e62c3cef575b6726dc936a45599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C?ref=45e2bf2e5e370e62c3cef575b6726dc936a45599", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run { target c++14 } }\n+\n+// pr c++/66443 a synthesized ctor of an abstract class that's deleted\n+// only because of virtual base construction doesn't stop a derived\n+// class using it as a base object constructor (provided it has a\n+// suitable ctor invocation of the virtual base).\n+\n+static int a_made;\n+\n+struct A {\n+  A *m_a = this;\n+  A (int) { a_made++; }\n+};\n+\n+struct B : virtual A {\n+  A *m_b = this;\n+  virtual bool Ok () = 0; // abstract\n+};\n+\n+struct C : B {\n+  // C::m_c is placed where a complete B object would put A\n+  int m_c = 1729;\n+public:\n+  C();\n+  virtual bool Ok ();\n+};\n+\n+bool C::Ok ()\n+{\n+  // check everyone agreed on where A is\n+  return a_made == 1 && m_a == this && m_b == this && m_c == 1729;\n+}\n+\n+C::C ()\n+  : A (1) // Explicit call of A's ctor\n+{  }\n+\n+bool Ok (C &c)\n+{\n+}\n+\n+int main ()\n+{\n+  C c;\n+\n+  return !c.Ok ();\n+}"}]}