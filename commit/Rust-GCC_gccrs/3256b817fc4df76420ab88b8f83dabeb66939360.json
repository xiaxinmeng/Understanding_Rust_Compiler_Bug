{"sha": "3256b817fc4df76420ab88b8f83dabeb66939360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NmI4MTdmYzRkZjc2NDIwYWI4OGI4ZjgzZGFiZWI2NjkzOTM2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-22T21:09:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-22T21:09:09Z"}, "message": "re PR c++/5748 (g++ dies with optimization)\n\n\tPR c++/5748\n\t* stmt.c (expand_anon_union_decl): Set TREE_USED on the anon union\n\tdecl if any of elements was TREE_USED.\n\n\t* g++.dg/opt/anonunion1.C: New test.\n\nFrom-SVN: r49971", "tree": {"sha": "a72c0063813e38c6c4dd851832a48761e804370e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72c0063813e38c6c4dd851832a48761e804370e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3256b817fc4df76420ab88b8f83dabeb66939360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256b817fc4df76420ab88b8f83dabeb66939360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3256b817fc4df76420ab88b8f83dabeb66939360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256b817fc4df76420ab88b8f83dabeb66939360/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e0625a316b67773587f024b1d8d7814d9246876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0625a316b67773587f024b1d8d7814d9246876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0625a316b67773587f024b1d8d7814d9246876"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "252af066e80362d9295f587e738b71faf3e00d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3256b817fc4df76420ab88b8f83dabeb66939360", "patch": "@@ -1,3 +1,9 @@\n+2002-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/5748\n+\t* stmt.c (expand_anon_union_decl): Set TREE_USED on the anon union\n+\tdecl if any of elements was TREE_USED.\n+\n 2002-02-22  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sparc/sol2.h: Don't include sys/mman.h."}, {"sha": "b41b62bb8d04900b9a1de19db4008c9b3acfa3b4", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3256b817fc4df76420ab88b8f83dabeb66939360", "patch": "@@ -4201,6 +4201,11 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n       tree cleanup_elt = TREE_PURPOSE (t);\n       enum machine_mode mode = TYPE_MODE (TREE_TYPE (decl_elt));\n \n+      /* If any of the elements are addressable, so is the entire\n+\t union.  */\n+      if (TREE_USED (decl_elt))\n+\tTREE_USED (decl) = 1;\n+\n       /* Propagate the union's alignment to the elements.  */\n       DECL_ALIGN (decl_elt) = DECL_ALIGN (decl);\n       DECL_USER_ALIGN (decl_elt) = DECL_USER_ALIGN (decl);"}, {"sha": "e7149dd6a2c61e49d6c1d60e23e79b6715414334", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3256b817fc4df76420ab88b8f83dabeb66939360", "patch": "@@ -1,3 +1,7 @@\n+2002-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/opt/anonunion1.C: New test.\n+\n 2002-02-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/template/qualttp19.C: New test."}, {"sha": "445ebaa7cb12d53d7e1f6bc14009c210bf52b7f5", "filename": "gcc/testsuite/g++.dg/opt/anonunion1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fanonunion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256b817fc4df76420ab88b8f83dabeb66939360/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fanonunion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fanonunion1.C?ref=3256b817fc4df76420ab88b8f83dabeb66939360", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/5748\n+// This testcase ICEd because used flag from the anon union variables\n+// was not propagated back to the anon union itself, causing addressof\n+// not to be replaced with stack slot.\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct A {\n+  A ();\n+  ~A ();\n+  int foo ();\n+  int bar (void *x, int y);\n+};\n+\n+int A::foo()\n+{\n+  union {\n+    int a;\n+    int b;\n+  };\n+\n+  if (bar (&a, sizeof (int)) != 32)\n+    return 16;\n+  return 0;\n+}"}]}