{"sha": "1b4454bfd519663b0da5d965217b6e7a430af99b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0NDU0YmZkNTE5NjYzYjBkYTVkOTY1MjE3YjZlN2E0MzBhZjk5Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-20T00:29:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-20T00:29:18Z"}, "message": "stl_deque.h (deque<>::resize, [...]): Avoid troubles with ADL, user defined operators and _Deque_iterator.\n\n2005-12-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_deque.h (deque<>::resize, _M_fill_assign):\n\tAvoid troubles with ADL, user defined operators and _Deque_iterator.\n\t(operator-(const _Deque_iterator<>&, const _Deque_iterator<>&):\n\tAdd overload for left and right iterators of the same type.\n\t* include/bits/deque.tcc (erase(iterator)): Avoid troubles with ADL,\n\tuser defined operators and _Deque_iterator.\n\t* testsuite/23_containers/deque/types/1.cc: Add.\n\t\n\t* include/bits/deque.tcc (_M_insert_aux(iterator, size_type,\n\tconst value_type&)): Qualify with std:: fill call.\n\nFrom-SVN: r108827", "tree": {"sha": "ba18fd7a352480ae6cdaf0eca423273979f48fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba18fd7a352480ae6cdaf0eca423273979f48fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4454bfd519663b0da5d965217b6e7a430af99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4454bfd519663b0da5d965217b6e7a430af99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4454bfd519663b0da5d965217b6e7a430af99b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4454bfd519663b0da5d965217b6e7a430af99b/comments", "author": null, "committer": null, "parents": [{"sha": "31ec030f39d59408a1dec1eb6ccb8c50f66fad8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ec030f39d59408a1dec1eb6ccb8c50f66fad8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ec030f39d59408a1dec1eb6ccb8c50f66fad8b"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "fcc77fca12fa47cf2ef51053cefb66da4825336b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b4454bfd519663b0da5d965217b6e7a430af99b", "patch": "@@ -1,3 +1,16 @@\n+2005-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_deque.h (deque<>::resize, _M_fill_assign):\n+\tAvoid troubles with ADL, user defined operators and _Deque_iterator.\n+\t(operator-(const _Deque_iterator<>&, const _Deque_iterator<>&):\n+\tAdd overload for left and right iterators of the same type.\n+\t* include/bits/deque.tcc (erase(iterator)): Avoid troubles with ADL,\n+\tuser defined operators and _Deque_iterator.\n+\t* testsuite/23_containers/deque/types/1.cc: Add.\n+\t\n+\t* include/bits/deque.tcc (_M_insert_aux(iterator, size_type,\n+\tconst value_type&)): Qualify with std:: fill call.\n+\n 2005-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* include/bits/c++config: Add in revised namespace associations."}, {"sha": "294a0dd6a6c666d50c2f7db46a419d1a86cc5e55", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=1b4454bfd519663b0da5d965217b6e7a430af99b", "patch": "@@ -87,22 +87,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::\n-    insert(iterator position, const value_type& __x)\n+    insert(iterator __position, const value_type& __x)\n     {\n-      if (position._M_cur == this->_M_impl._M_start._M_cur)\n+      if (__position._M_cur == this->_M_impl._M_start._M_cur)\n \t{\n \t  push_front(__x);\n \t  return this->_M_impl._M_start;\n \t}\n-      else if (position._M_cur == this->_M_impl._M_finish._M_cur)\n+      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)\n \t{\n \t  push_back(__x);\n \t  iterator __tmp = this->_M_impl._M_finish;\n \t  --__tmp;\n \t  return __tmp;\n \t}\n       else\n-        return _M_insert_aux(position, __x);\n+        return _M_insert_aux(__position, __x);\n     }\n \n   template <typename _Tp, typename _Alloc>\n@@ -112,8 +112,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n     {\n       iterator __next = __position;\n       ++__next;\n-      const size_type __index = __position - begin();\n-      if (__index < (size() >> 1))\n+      const difference_type __index = __position - begin();\n+      if (static_cast<size_type>(__index) < (size() >> 1))\n \t{\n \t  if (__position != begin())\n \t    std::copy_backward(begin(), __position, __next);\n@@ -185,8 +185,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t  try\n \t    {\n \t      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,\n-\t\t\t\t\t  __x,\n-\t\t\t\t\t  _M_get_Tp_allocator());\n+\t\t\t\t\t  __x, _M_get_Tp_allocator());\n \t      this->_M_impl._M_start = __new_start;\n \t    }\n \t  catch(...)\n@@ -483,7 +482,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_start = __new_start;\n \t\t  std::copy(__start_n, __pos, __old_start);\n-\t\t  fill(__pos - difference_type(__n), __pos, __x_copy);\n+\t\t  std::fill(__pos - difference_type(__n), __pos, __x_copy);\n \t\t}\n \t      else\n \t\t{"}, {"sha": "2eb77673e28a53d604487c4c95980ea81dcb26af", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=1b4454bfd519663b0da5d965217b6e7a430af99b", "patch": "@@ -321,6 +321,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   // According to the resolution of DR179 not only the various comparison\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters.\n+  template<typename _Tp, typename _Ref, typename _Ptr>\n+    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n+    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+    {\n+      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n+\t(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())\n+\t* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)\n+\t+ (__y._M_last - __y._M_cur);\n+    }\n+\n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type\n@@ -871,7 +882,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       {\n \tconst size_type __len = size();\n \tif (__new_size < __len)\n-\t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n+\t  _M_erase_at_end(this->_M_impl._M_start + difference_type(__new_size));\n \telse\n \t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n       }\n@@ -1097,7 +1108,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  specified location.\n        */\n       iterator\n-      insert(iterator position, const value_type& __x);\n+      insert(iterator __position, const value_type& __x);\n \n       /**\n        *  @brief  Inserts a number of copies of given data into the %deque.\n@@ -1318,7 +1329,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t  }\n \telse\n \t  {\n-\t    _M_erase_at_end(begin() + __n);\n+\t    _M_erase_at_end(begin() + difference_type(__n));\n \t    std::fill(begin(), end(), __val);\n \t  }\n       }\n@@ -1491,7 +1502,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  @endif\n        */\n       void\n-      _M_reserve_map_at_back (size_type __nodes_to_add = 1)\n+      _M_reserve_map_at_back(size_type __nodes_to_add = 1)\n       {\n \tif (__nodes_to_add + 1 > this->_M_impl._M_map_size\n \t    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))"}, {"sha": "567a1fbbea4503082febc210ecd8e5587a1c1bee", "filename": "libstdc++-v3/testsuite/23_containers/deque/types/1.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4454bfd519663b0da5d965217b6e7a430af99b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc?ref=1b4454bfd519663b0da5d965217b6e7a430af99b", "patch": "@@ -0,0 +1,55 @@\n+// 2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <deque>\n+\n+namespace N\n+{\n+  struct X { };\n+\n+  template<typename T>\n+    X operator+(T, std::size_t)\n+    { return X(); }\n+\n+  template<typename T>\n+    X operator-(T, T)\n+    { return X(); }\n+}\n+\n+int main()\n+{\n+  std::deque<N::X> d(5);\n+  const std::deque<N::X> e(1);\n+\n+  d[0];\n+  e[0];\n+  d.size();\n+  d.erase(d.begin());\n+  d.resize(1);\n+  d.assign(1, N::X());\n+  d.insert(d.begin(), N::X());\n+  d.insert(d.begin(), 1, N::X());\n+  d.insert(d.begin(), e.begin(), e.end());\n+  d = e;\n+\n+  return 0;\n+}"}]}