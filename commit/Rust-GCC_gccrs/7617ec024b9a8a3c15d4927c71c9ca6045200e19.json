{"sha": "7617ec024b9a8a3c15d4927c71c9ca6045200e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxN2VjMDI0YjlhOGEzYzE1ZDQ5MjdjNzFjOWNhNjA0NTIwMGUxOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-10-17T23:26:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-10-17T23:26:29Z"}, "message": "sparc.c (function_arg_slotno): In 64-bit mode...\n\n\t* config/sparc/sparc.c (function_arg_slotno): In 64-bit mode, align\n\tthe slot on an even boundary for any type with 16-byte alignment.\n\nFrom-SVN: r105524", "tree": {"sha": "b5c11ff40ac03c1001fce5e8eb37feacb5474196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c11ff40ac03c1001fce5e8eb37feacb5474196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7617ec024b9a8a3c15d4927c71c9ca6045200e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7617ec024b9a8a3c15d4927c71c9ca6045200e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7617ec024b9a8a3c15d4927c71c9ca6045200e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7617ec024b9a8a3c15d4927c71c9ca6045200e19/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ef8776d01a50a33031e4bbc3ee03349bf7de862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef8776d01a50a33031e4bbc3ee03349bf7de862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef8776d01a50a33031e4bbc3ee03349bf7de862"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "c606f83e38356cc712165783326a8598e02f7d67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7617ec024b9a8a3c15d4927c71c9ca6045200e19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7617ec024b9a8a3c15d4927c71c9ca6045200e19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7617ec024b9a8a3c15d4927c71c9ca6045200e19", "patch": "@@ -1,3 +1,8 @@\n+2005-10-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (function_arg_slotno): In 64-bit mode, align\n+\tthe slot on an even boundary for any type with 16-byte alignment.\n+\n 2005-10-17  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/23424"}, {"sha": "0b18efd6f280f97fd63ec30f1b64621bba241463", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7617ec024b9a8a3c15d4927c71c9ca6045200e19/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7617ec024b9a8a3c15d4927c71c9ca6045200e19/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7617ec024b9a8a3c15d4927c71c9ca6045200e19", "patch": "@@ -4443,7 +4443,7 @@ function_arg_slotno (const struct sparc_args *cum, enum machine_mode mode,\n \n   /* For SPARC64, objects requiring 16-byte alignment get it.  */\n   if (TARGET_ARCH64\n-      && GET_MODE_ALIGNMENT (mode) >= 2 * BITS_PER_WORD\n+      && (type ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode)) >= 128\n       && (slotno & 1) != 0)\n     slotno++, *ppadding = 1;\n \n@@ -4503,13 +4503,6 @@ function_arg_slotno (const struct sparc_args *cum, enum machine_mode mode,\n \n       gcc_assert (mode == BLKmode);\n \n-      /* For SPARC64, objects requiring 16-byte alignment get it.  */\n-      if (TARGET_ARCH64\n-\t  && type\n-\t  && TYPE_ALIGN (type) >= 2 * BITS_PER_WORD\n-\t  && (slotno & 1) != 0)\n-\tslotno++, *ppadding = 1;\n-\n       if (TARGET_ARCH32 || !type || (TREE_CODE (type) == UNION_TYPE))\n \t{\n \t  if (slotno >= SPARC_INT_ARG_MAX)"}]}