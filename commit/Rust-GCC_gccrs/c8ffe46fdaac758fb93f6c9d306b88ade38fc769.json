{"sha": "c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhmZmU0NmZkYWFjNzU4ZmI5M2Y2YzlkMzA2Yjg4YWRlMzhmYzc2OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-08-31T17:49:00Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-08-31T17:49:00Z"}, "message": "20020720-1.x: Skip test on mmix-knuth-mmixware.\n\n\t* gcc.c-torture/execute/20020720-1.x: Skip test on\n\tmmix-knuth-mmixware.  Correct comment.\n\nCo-Authored-By: Hans-Peter Nilsson <hp@bitrange.com>\n\nFrom-SVN: r56708", "tree": {"sha": "bc7a229594d9934daa8b3425ab32be407ae6dc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc7a229594d9934daa8b3425ab32be407ae6dc51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ffe46fdaac758fb93f6c9d306b88ade38fc769/comments", "author": null, "committer": null, "parents": [{"sha": "39abf68d8c37930a4b563f1a48b6b0123d40f472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39abf68d8c37930a4b563f1a48b6b0123d40f472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39abf68d8c37930a4b563f1a48b6b0123d40f472"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "8369762497c9d5b323eb986c81887df2aa08eb06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ffe46fdaac758fb93f6c9d306b88ade38fc769/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ffe46fdaac758fb93f6c9d306b88ade38fc769/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "patch": "@@ -1,3 +1,9 @@\n+2002-08-31  Roger Sayle  <roger@eyesopen.com>\n+\t    Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.c-torture/execute/20020720-1.x: Skip test on\n+\tmmix-knuth-mmixware.  Correct comment.\n+\n 2002-08-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/g++.dg/abi/bitfield5.C: New test."}, {"sha": "4cf53d0d5957059a61c9f70d97c05c6cb441247b", "filename": "gcc/testsuite/gcc.c-torture/execute/20020720-1.x", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ffe46fdaac758fb93f6c9d306b88ade38fc769/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020720-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ffe46fdaac758fb93f6c9d306b88ade38fc769/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020720-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020720-1.x?ref=c8ffe46fdaac758fb93f6c9d306b88ade38fc769", "patch": "@@ -1,15 +1,17 @@\n # The following targets fail 20020720-1.c for several reasons:\n # (1) They implement floating point instructions via software, or\n-# (2) Their machine descriptions obfuscate the \"abs(x) < 0.0\" comparison.\n-#     For example, 1 insn performs abs, 1 insn loads 0.0, 1 insn sets\n-#     CCmode flags based upon the FP comparison, and a 4th insn makes\n-#     a conditional branch based upon the appropriate bits in the flags.\n-#     If the intermediate comparison can't be recognized, the combiner\n-#     is unable to optimize all four RTL instructions simultaneously.\n-\n+# (2) The \"abs(x) < 0.0\" comparison is split up in too many intermediate\n+#     insns for combine to handle -- it can handle max three insns\n+#     simultaneously.  For example, for RISCy machines it is common that 1\n+#     insn performs abs, 1 insn loads 0.0, 1 insn sets CCmode flags based\n+#     upon the FP comparison, and a 4th insn makes a conditional branch\n+#     based upon the appropriate bits in the flags.  On the other hand, if\n+#     for example the comparison insn takes 0.0 as an operand, the\n+#     combiner is able to see all intermediate instructions simultaneously\n+#     and can make the optimization.\n if { [istarget \"powerpc-*-*\"] || [istarget \"rs6000-*-*\"] \\\n      || [istarget \"mips*-*-*\"] || [istarget \"xtensa-*-*\"] \\\n-     || [istarget \"sh-*-*\"] } {\n+     || [istarget \"sh-*-*\"] || [istarget \"mmix-*-*\"] } {\n     return 1\n }\n "}]}