{"sha": "4a085d2edd429d20f04d5dffa7ec89acf2005a82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwODVkMmVkZDQyOWQyMGYwNGQ1ZGZmYTdlYzg5YWNmMjAwNWE4Mg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2002-03-12T02:17:30Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-03-12T02:17:30Z"}, "message": "cris.c (cris_target_asm_function_prologue): Do not emit pic register load if \"internal\" visibility.\n\n\t* config/cris/cris.c (cris_target_asm_function_prologue):  Do not\n\temit pic register load if \"internal\" visibility.\n\t(cris_print_operand): Avoid traditional-warning for 0xffffffff.\n\t(cris_expand_builtin_va_arg): Do all computations on trees.\n\nFrom-SVN: r50627", "tree": {"sha": "ae605508a2b00a812f7c4027726136f686dbdf98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae605508a2b00a812f7c4027726136f686dbdf98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a085d2edd429d20f04d5dffa7ec89acf2005a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a085d2edd429d20f04d5dffa7ec89acf2005a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a085d2edd429d20f04d5dffa7ec89acf2005a82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a085d2edd429d20f04d5dffa7ec89acf2005a82/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdfda6686eb25d9c523c4ab1611282ec5f159462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfda6686eb25d9c523c4ab1611282ec5f159462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfda6686eb25d9c523c4ab1611282ec5f159462"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "4502a2a7217715a2140650618372c0dd05dd433d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a085d2edd429d20f04d5dffa7ec89acf2005a82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a085d2edd429d20f04d5dffa7ec89acf2005a82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a085d2edd429d20f04d5dffa7ec89acf2005a82", "patch": "@@ -1,3 +1,10 @@\n+2002-03-12  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c (cris_target_asm_function_prologue):  Do not\n+\temit pic register load if \"internal\" visibility.\n+\t(cris_print_operand): Avoid traditional-warning for 0xffffffff.\n+\t(cris_expand_builtin_va_arg): Do all computations on trees.\n+\n 2002-03-11  Richard Henderson  <rth@redhat.com>\n \n \t* rtlanal.c: Include recog.h."}, {"sha": "d1c6f5b4b114bdb7e033aa90bb9ef0d6f1cd6eda", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 67, "deletions": 21, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a085d2edd429d20f04d5dffa7ec89acf2005a82/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a085d2edd429d20f04d5dffa7ec89acf2005a82/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=4a085d2edd429d20f04d5dffa7ec89acf2005a82", "patch": "@@ -857,11 +857,19 @@ cris_target_asm_function_prologue (file, size)\n       framesize += size + cfoa_size;\n     }\n \n-  /* Set up the PIC register.  */\n+  /* Set up the PIC register.  Not needed for a function marked with\n+     visibility \"internal\".  */\n   if (current_function_uses_pic_offset_table)\n-    asm_fprintf (file, \"\\tmove.d $pc,$%s\\n\\tsub.d .:GOTOFF,$%s\\n\",\n-\t\t reg_names[PIC_OFFSET_TABLE_REGNUM],\n-\t\t reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+    {\n+      tree vis = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (cfun->decl));\n+\n+      if (!vis\n+\t  || strcmp (\"internal\",\n+\t\t     TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (vis)))))\n+\tasm_fprintf (file, \"\\tmove.d $pc,$%s\\n\\tsub.d .:GOTOFF,$%s\\n\",\n+\t\t     reg_names[PIC_OFFSET_TABLE_REGNUM],\n+\t\t     reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+    }\n \n   if (TARGET_PDEBUG)\n     fprintf (file,\n@@ -1452,7 +1460,8 @@ cris_print_operand (file, x, code)\n \t}\n       else if (HOST_BITS_PER_WIDE_INT > 32 && GET_CODE (operand) == CONST_INT)\n \t{\n-\t  fprintf (file, \"0x%x\", (unsigned int)(INTVAL (x) & 0xffffffff));\n+\t  fprintf (file, \"0x%x\",\n+\t\t   INTVAL (x) & ((unsigned int) 0x7fffffff * 2 + 1));\n \t  return;\n \t}\n       /* Otherwise the least significant part equals the normal part,\n@@ -2612,32 +2621,69 @@ cris_expand_builtin_va_arg (valist, type)\n {\n   tree addr_tree, t;\n   rtx addr;\n-  enum machine_mode mode = TYPE_MODE (type);\n-  int passed_size;\n+  tree passed_size = size_zero_node;\n+  tree type_size = NULL;\n+  tree size3 = size_int (3);\n+  tree size4 = size_int (4);\n+  tree size8 = size_int (8);\n+  tree rounded_size;\n \n   /* Get AP.  */\n   addr_tree = valist;\n \n-  /* Check if the type is passed by value or by reference.  */\n-  if (MUST_PASS_IN_STACK (mode, type)\n-      || CRIS_FUNCTION_ARG_SIZE (mode, type) > 8)\n+  if (type == error_mark_node\n+      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n+      || TREE_OVERFLOW (type_size))\n+    /* Presumable an error; the size isn't computable.  A message has\n+       supposedly been emitted elsewhere.  */\n+    rounded_size = size_zero_node;\n+  else\n+    rounded_size\n+      = fold (build (MULT_EXPR, sizetype,\n+\t\t     fold (build (TRUNC_DIV_EXPR, sizetype,\n+\t\t\t\t  fold (build (PLUS_EXPR, sizetype,\n+\t\t\t\t\t       type_size, size3)),\n+\t\t\t\t  size4)),\n+\t\t     size4));\n+\n+  if (!integer_zerop (rounded_size))\n     {\n-      tree type_ptr = build_pointer_type (type);\n-      addr_tree = build1 (INDIRECT_REF, type_ptr, addr_tree);\n-      passed_size = 4;\n+      /* Check if the type is passed by value or by reference.  This test must\n+\t be different than the call-site test and be done at run-time:\n+\t gcc.c-torture/execute/20020307-2.c.  Hence the tree stuff.\n+\n+\t Values up to 8 bytes are passed by-value, padded to register-size\n+\t (4 bytes).  Larger values are passed by-reference.  */\n+      passed_size\n+\t= fold (build (COND_EXPR, sizetype,\n+\t\t       fold (build (GT_EXPR, sizetype,\n+\t\t\t\t    rounded_size,\n+\t\t\t\t    size8)),\n+\t\t       size4,\n+\t\t       rounded_size));\n+\n+      addr_tree\n+       = fold (build (COND_EXPR, TREE_TYPE (addr_tree),\n+\t\t      fold (build (GT_EXPR, sizetype,\n+\t\t\t\t   rounded_size,\n+\t\t\t\t   size8)),\n+\t\t      build1 (INDIRECT_REF, build_pointer_type (type),\n+\t\t\t      addr_tree),\n+\t\t      addr_tree));\n     }\n-  else\n-    passed_size = (CRIS_FUNCTION_ARG_SIZE (mode, type) > 4) ? 8 : 4;\n \n   addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n   addr = copy_to_reg (addr);\n \n-  /* Compute new value for AP.  */\n-  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t     build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t    build_int_2 (passed_size, 0)));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  if (!integer_zerop (rounded_size))\n+    {\n+      /* Compute new value for AP.  */\n+      t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t\t build (PLUS_EXPR, TREE_TYPE (valist), valist,\n+\t\t\tpassed_size));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n \n   return addr;\n }"}]}