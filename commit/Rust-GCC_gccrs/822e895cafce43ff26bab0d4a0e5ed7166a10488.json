{"sha": "822e895cafce43ff26bab0d4a0e5ed7166a10488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyZTg5NWNhZmNlNDNmZjI2YmFiMGQ0YTBlNWVkNzE2NmExMDQ4OA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2004-03-05T21:41:19Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2004-03-05T21:41:19Z"}, "message": "xtensa.c (function_arg): Handle 16-byte aligned args.\n\n\t* config/xtensa/xtensa.c (function_arg): Handle 16-byte aligned args.\n\t(xtensa_va_start): Initialize __va_stk to ($arg_ptr - 32).  Adjust\n\t__va_ndx by 2 words when referencing an argument on the stack.\n\t(xtensa_va_arg): Handle 16-byte aligned args.  Adjust __va_ndx by 2\n\twords when an arg on the stack is first seen.\n\nFrom-SVN: r78990", "tree": {"sha": "236edc810fe74c2ec21dd47f6a43ea12141d3163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236edc810fe74c2ec21dd47f6a43ea12141d3163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/822e895cafce43ff26bab0d4a0e5ed7166a10488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822e895cafce43ff26bab0d4a0e5ed7166a10488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822e895cafce43ff26bab0d4a0e5ed7166a10488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822e895cafce43ff26bab0d4a0e5ed7166a10488/comments", "author": null, "committer": null, "parents": [{"sha": "d5e63fce337455aab205430400bc8794560198e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e63fce337455aab205430400bc8794560198e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e63fce337455aab205430400bc8794560198e8"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "da090ca1a284e3c11830bf51c10c79f1b6dfadb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822e895cafce43ff26bab0d4a0e5ed7166a10488/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822e895cafce43ff26bab0d4a0e5ed7166a10488/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=822e895cafce43ff26bab0d4a0e5ed7166a10488", "patch": "@@ -1,3 +1,11 @@\n+2004-03-05  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa.c (function_arg): Handle 16-byte aligned args.\n+\t(xtensa_va_start): Initialize __va_stk to ($arg_ptr - 32).  Adjust\n+\t__va_ndx by 2 words when referencing an argument on the stack.\n+\t(xtensa_va_arg): Handle 16-byte aligned args.  Adjust __va_ndx by 2\n+\twords when an arg on the stack is first seen.\n+\n 2004-03-05  Paul Brook  <paul@codesourcery.com>\n \n \t* arm.h (ARM_FLAG_VFP): Remove."}, {"sha": "14db30f4a99b70195ef3c41d008672e60d1756b4", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822e895cafce43ff26bab0d4a0e5ed7166a10488/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822e895cafce43ff26bab0d4a0e5ed7166a10488/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=822e895cafce43ff26bab0d4a0e5ed7166a10488", "patch": "@@ -1805,7 +1805,10 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t    : int_size_in_bytes (type)) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   if (type && (TYPE_ALIGN (type) > BITS_PER_WORD))\n-    *arg_words += (*arg_words & 1);\n+    {\n+      int align = TYPE_ALIGN (type) / BITS_PER_WORD;\n+      *arg_words = (*arg_words + align - 1) & -align;\n+    }\n \n   if (*arg_words + words > max)\n     return (rtx)0;\n@@ -2335,17 +2338,20 @@ xtensa_return_addr (int count, rtx frame)\n \n \n /* Create the va_list data type.\n-   This structure is set up by __builtin_saveregs.  The __va_reg\n-   field points to a stack-allocated region holding the contents of the\n-   incoming argument registers.  The __va_ndx field is an index initialized\n-   to the position of the first unnamed (variable) argument.  This same index\n-   is also used to address the arguments passed in memory.  Thus, the\n-   __va_stk field is initialized to point to the position of the first\n-   argument in memory offset to account for the arguments passed in\n-   registers.  E.G., if there are 6 argument registers, and each register is\n-   4 bytes, then __va_stk is set to $sp - (6 * 4); then __va_reg[N*4]\n-   references argument word N for 0 <= N < 6, and __va_stk[N*4] references\n-   argument word N for N >= 6.  */\n+\n+   This structure is set up by __builtin_saveregs.  The __va_reg field\n+   points to a stack-allocated region holding the contents of the\n+   incoming argument registers.  The __va_ndx field is an index\n+   initialized to the position of the first unnamed (variable)\n+   argument.  This same index is also used to address the arguments\n+   passed in memory.  Thus, the __va_stk field is initialized to point\n+   to the position of the first argument in memory offset to account\n+   for the arguments passed in registers and to account for the size\n+   of the argument registers not being 16-byte aligned.  E.G., there\n+   are 6 argument registers of 4 bytes each, but we want the __va_ndx\n+   for the first stack argument to have the maximal alignment of 16\n+   bytes, so we offset the __va_stk address by 32 bytes so that\n+   __va_stk[32] references the first argument on the stack.  */\n \n static tree\n xtensa_build_builtin_va_list (void)\n@@ -2436,15 +2442,18 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-  /* Set the __va_stk member to $arg_ptr - (size of __va_reg area) */\n+  /* Set the __va_stk member to ($arg_ptr - 32).  */\n   u = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-  u = fold (build (PLUS_EXPR, ptr_type_node, u,\n-\t\t   build_int_2 (-MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD, -1)));\n+  u = fold (build (PLUS_EXPR, ptr_type_node, u, build_int_2 (-32, -1)));\n   t = build (MODIFY_EXPR, ptr_type_node, stk, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-  /* Set the __va_ndx member.  */\n+  /* Set the __va_ndx member.  If the first variable argument is on\n+     the stack, adjust __va_ndx by 2 words to account for the extra\n+     alignment offset for __va_stk.  */\n+  if (arg_words >= MAX_ARGS_IN_REGISTERS)\n+    arg_words += 2;\n   u = build_int_2 (arg_words * UNITS_PER_WORD, 0);\n   t = build (MODIFY_EXPR, integer_type_node, ndx, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n@@ -2506,17 +2515,19 @@ xtensa_va_arg (tree valist, tree type)\n     emit_move_insn (va_size, r);\n \n \n-  /* First align __va_ndx to a double word boundary if necessary for this arg:\n+  /* First align __va_ndx if necessary for this arg:\n \n-     if (__alignof__ (TYPE) > 4)\n-       (AP).__va_ndx = (((AP).__va_ndx + 7) & -8); */\n+     if (__alignof__ (TYPE) > 4 )\n+       (AP).__va_ndx = (((AP).__va_ndx + __alignof__ (TYPE) - 1)\n+\t\t\t& -__alignof__ (TYPE)); */\n \n   if (TYPE_ALIGN (type) > BITS_PER_WORD)\n     {\n+      int align = TYPE_ALIGN (type) / BITS_PER_UNIT;\n       tmp = build (PLUS_EXPR, integer_type_node, ndx,\n-\t\t   build_int_2 ((2 * UNITS_PER_WORD) - 1, 0));\n+\t\t   build_int_2 (align - 1, 0));\n       tmp = build (BIT_AND_EXPR, integer_type_node, tmp,\n-\t\t   build_int_2 (-2 * UNITS_PER_WORD, -1));\n+\t\t   build_int_2 (-align, -1));\n       tmp = build (MODIFY_EXPR, integer_type_node, ndx, tmp);\n       TREE_SIDE_EFFECTS (tmp) = 1;\n       expand_expr (tmp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2574,18 +2585,18 @@ xtensa_va_arg (tree valist, tree type)\n \n      else\n        {\n-\t if (orig_ndx < __MAX_ARGS_IN_REGISTERS * 4)\n-\t     (AP).__va_ndx = __MAX_ARGS_IN_REGISTERS * 4 + __va_size (TYPE);\n+\t if (orig_ndx <= __MAX_ARGS_IN_REGISTERS * 4)\n+\t     (AP).__va_ndx = 32 + __va_size (TYPE);\n \t __array = (AP).__va_stk;\n        } */\n \n   lab_false2 = gen_label_rtx ();\n   emit_cmp_and_jump_insns (orig_ndx,\n \t\t\t   GEN_INT (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD),\n-\t\t\t   GE, const1_rtx, SImode, 0, lab_false2);\n+\t\t\t   GT, const1_rtx, SImode, 0, lab_false2);\n \n   tmp = build (PLUS_EXPR, sizetype, make_tree (intSI_type_node, va_size),\n-\t       build_int_2 (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD, 0));\n+\t       build_int_2 (32, 0));\n   tmp = build (MODIFY_EXPR, integer_type_node, ndx, tmp);\n   TREE_SIDE_EFFECTS (tmp) = 1;\n   expand_expr (tmp, const0_rtx, VOIDmode, EXPAND_NORMAL);"}]}