{"sha": "e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3ZjE2NWZiNzVjOGVlZDFkZmVkOTViZjI1ZGE2MmRhNWU3YmE3ZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-28T20:27:56Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-28T20:27:56Z"}, "message": "graphite-dependences.c (new_poly_dr_pair): Renamed new_poly_ddr.\n\n2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-dependences.c (new_poly_dr_pair): Renamed new_poly_ddr.\n\t(eq_poly_dr_pair_p): Renamed eq_poly_ddr_p.\n\t(hash_poly_dr_pair_p): Renamed hash_poly_ddr_p.\n\t(free_poly_ddr): New.\n\t(pddr_is_empty): New.\n\t(dependence_polyhedron_1): Now returns a poly_ddr_p.\n\t(dependence_polyhedron): Same.  Remove useless gcc_assert.\n\tRemove fprintfs.\n\t(graphite_legal_transform_dr): Call pddr_is_empty and free_poly_ddr.\n\t(graphite_carried_dependence_level_k): Call pddr_is_empty.\n\t* graphite-dependences.h (enum poly_dependence_kind): New.\n\t(poly_dr_pair): Renamed poly_ddr.  Added a field kind.\n\t(PDRP_SOURCE): Renamed PDDR_SOURCE.\n\t(PDRP_SINK): Renamed PDDR_SINK.\n\t(PDRP_DDP): Renamed PDDR_DDP.\n\t(PDDR_KIND): New.\n\t(free_poly_ddr): Declared.\n\t* graphite-poly.c (new_scop): Use the new hash function names.\n\t* graphite-poly.h (struct scop): Renamed field original_pdr_pairs\n\tinto original_pddrs.\n\t(SCOP_ORIGINAL_PDR_PAIRS): Renamed SCOP_ORIGINAL_PDDRS.\n\nFrom-SVN: r151181", "tree": {"sha": "df2d090c75d20d70405ace514e4c3a6184439f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2d090c75d20d70405ace514e4c3a6184439f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e76e9f397c72fb18ea89fedad822a2c553f34b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e76e9f397c72fb18ea89fedad822a2c553f34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e76e9f397c72fb18ea89fedad822a2c553f34b"}], "stats": {"total": 243, "additions": 160, "deletions": 83}, "files": [{"sha": "09a8259678cf192625fe14d8eb8a061e6f20a90b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -1,3 +1,27 @@\n+2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (new_poly_dr_pair): Renamed new_poly_ddr.\n+\t(eq_poly_dr_pair_p): Renamed eq_poly_ddr_p.\n+\t(hash_poly_dr_pair_p): Renamed hash_poly_ddr_p.\n+\t(free_poly_ddr): New.\n+\t(pddr_is_empty): New.\n+\t(dependence_polyhedron_1): Now returns a poly_ddr_p.\n+\t(dependence_polyhedron): Same.  Remove useless gcc_assert.\n+\tRemove fprintfs.\n+\t(graphite_legal_transform_dr): Call pddr_is_empty and free_poly_ddr.\n+\t(graphite_carried_dependence_level_k): Call pddr_is_empty.\n+\t* graphite-dependences.h (enum poly_dependence_kind): New.\n+\t(poly_dr_pair): Renamed poly_ddr.  Added a field kind.\n+\t(PDRP_SOURCE): Renamed PDDR_SOURCE.\n+\t(PDRP_SINK): Renamed PDDR_SINK.\n+\t(PDRP_DDP): Renamed PDDR_DDP.\n+\t(PDDR_KIND): New.\n+\t(free_poly_ddr): Declared.\n+\t* graphite-poly.c (new_scop): Use the new hash function names.\n+\t* graphite-poly.h (struct scop): Renamed field original_pdr_pairs\n+\tinto original_pddrs.\n+\t(SCOP_ORIGINAL_PDR_PAIRS): Renamed SCOP_ORIGINAL_PDDRS.\n+\n 2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* cfgloopmanip.c (create_empty_loop_on_edge): Generate upper"}, {"sha": "f67bb3507ba9450309a4dfe65c4cc995569a8fe1", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -1,3 +1,31 @@\n+2009-08-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (new_poly_dr_pair): Renamed new_poly_ddr.\n+\t(eq_poly_dr_pair_p): Renamed eq_poly_ddr_p.\n+\t(hash_poly_dr_pair_p): Renamed hash_poly_ddr_p.\n+\t(free_poly_ddr): New.\n+\t(pddr_is_empty): New.\n+\t(dependence_polyhedron_1): Now returns a poly_ddr_p.\n+\t(dependence_polyhedron): Same.  Remove useless gcc_assert.\n+\tRemove fprintfs.\n+\t(graphite_legal_transform_dr): Call pddr_is_empty and free_poly_ddr.\n+\t(graphite_carried_dependence_level_k): Call pddr_is_empty.\n+\t* graphite-dependences.h (enum poly_dependence_kind): New.\n+\t(poly_dr_pair): Renamed poly_ddr.  Added a field kind.\n+\t(PDRP_SOURCE): Renamed PDDR_SOURCE.\n+\t(PDRP_SINK): Renamed PDDR_SINK.\n+\t(PDRP_DDP): Renamed PDDR_DDP.\n+\t(PDDR_KIND): New.\n+\t(free_poly_ddr): Declared.\n+\t* graphite-poly.c (new_scop): Use the new hash function names.\n+\t* graphite-poly.h (struct scop): Renamed field original_pdr_pairs\n+\tinto original_pddrs.\n+\t(SCOP_ORIGINAL_PDR_PAIRS): Renamed SCOP_ORIGINAL_PDDRS.\n+\n+2009-08-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* Merge from mainline (150764:150992).\n+\n 2009-08-18  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* cfgloopmanip.c (create_empty_loop_on_edge): Generate upper"}, {"sha": "5d7b50b7c510c8ef242b1917f8e829247a831681", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 82, "deletions": 60, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -50,47 +50,73 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-poly.h\"\n #include \"graphite-dependences.h\"\n \n-/* Creates a new polyhedral data reference pair and\n-   returns it.  Parameter SOURCE denotes a source data reference\n-   while parameter SINK denotes a sink data reference.  Both\n-   SOURCE and SINK define a pair of references, thus they\n-   define an edge in DDG (Data Dependence Graph).  */\n-\n-static poly_dr_pair_p\n-new_poly_dr_pair (poly_dr_p source,\n-                  poly_dr_p sink,\n-                  ppl_Pointset_Powerset_C_Polyhedron_t ddp)\n+/* Returns a new polyhedral Data Dependence Relation (DDR).  SOURCE is\n+   the source data reference, SINK is the sink data reference.  SOURCE\n+   and SINK define an edge in the Data Dependence Graph (DDG).  */\n+\n+static poly_ddr_p\n+new_poly_ddr (poly_dr_p source, poly_dr_p sink,\n+\t      ppl_Pointset_Powerset_C_Polyhedron_t ddp)\n {\n-  poly_dr_pair_p pdrpp;\n+  poly_ddr_p pddr;\n+\n+  pddr = XNEW (struct poly_ddr);\n+  PDDR_SOURCE (pddr) = source;\n+  PDDR_SINK (pddr) = sink;\n+  PDDR_DDP (pddr) = ddp;\n+  PDDR_KIND (pddr) = unknown_dependence;\n+\n+  return pddr;\n+}\n \n-  pdrpp = XNEW (struct poly_dr_pair);\n-  pdrpp->source = source;\n-  pdrpp->sink = sink;\n-  pdrpp->ddp = ddp;\n+/* Free the poly_ddr_p P.  */\n \n-  return pdrpp;\n+void\n+free_poly_ddr (void *p)\n+{\n+  poly_ddr_p pddr = (poly_ddr_p) p;\n+  ppl_delete_Pointset_Powerset_C_Polyhedron (PDDR_DDP (pddr));\n+  free (pddr);\n }\n \n-/* Comparison function for poly_dr_pair hash table.  */\n+/* Comparison function for poly_ddr hash table.  */\n \n int\n-eq_poly_dr_pair_p (const void *pdrpp1, const void *pdrpp2)\n+eq_poly_ddr_p (const void *pddr1, const void *pddr2)\n {\n-  const struct poly_dr_pair *p1 = (const struct poly_dr_pair *) pdrpp1;\n-  const struct poly_dr_pair *p2 = (const struct poly_dr_pair *) pdrpp2;\n+  const struct poly_ddr *p1 = (const struct poly_ddr *) pddr1;\n+  const struct poly_ddr *p2 = (const struct poly_ddr *) pddr2;\n \n-  return (p1->source == p2->source\n-          && p1->sink == p2->sink);\n+  return (PDDR_SOURCE (p1) == PDDR_SOURCE (p2)\n+          && PDDR_SINK (p1) == PDDR_SINK (p2));\n }\n \n-/* Hash function for poly_dr_pair hashtable.  */\n+/* Hash function for poly_ddr hashtable.  */\n \n hashval_t\n-hash_poly_dr_pair_p (const void *pdrpp)\n+hash_poly_ddr_p (const void *pddr)\n {\n-  const struct poly_dr_pair *p = (const struct poly_dr_pair *) pdrpp;\n+  const struct poly_ddr *p = (const struct poly_ddr *) pddr;\n+\n+  return (hashval_t) ((long) PDDR_SOURCE (p) + (long) PDDR_SINK (p));\n+}\n+\n+/* Returns true when PDDR has no dependence.  */\n \n-  return (hashval_t) ((long) p->source + (long) p->sink);\n+static bool\n+pddr_is_empty (poly_ddr_p pddr)\n+{\n+  if (PDDR_KIND (pddr) != unknown_dependence)\n+    return PDDR_KIND (pddr) == no_dependence ? true : false;\n+\n+  if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (PDDR_DDP (pddr)))\n+    {\n+      PDDR_KIND (pddr) = no_dependence;\n+      return true;\n+    }\n+\n+  PDDR_KIND (pddr) = has_dependence;\n+  return false;\n }\n \n /* Returns a polyhedron of dimension DIM.\n@@ -364,7 +390,7 @@ build_lexicographically_gt_constraint (ppl_Pointset_Powerset_C_Polyhedron_t *res\n \n /* Build the dependence polyhedron for data references PDR1 and PDR2.  */\n \n-static ppl_Pointset_Powerset_C_Polyhedron_t\n+static poly_ddr_p\n dependence_polyhedron_1 (poly_bb_p pbb1, poly_bb_p pbb2,\n \t\t         ppl_Pointset_Powerset_C_Polyhedron_t d1,\n \t\t         ppl_Pointset_Powerset_C_Polyhedron_t d2,\n@@ -427,13 +453,14 @@ dependence_polyhedron_1 (poly_bb_p pbb1, poly_bb_p pbb2,\n   if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (res))\n     build_lexicographically_gt_constraint (&res, dim, MIN (tdim1, tdim2),\n \t\t\t\t\t   tdim1 + ddim1, direction);\n-  return res;\n+\n+  return new_poly_ddr (pdr1, pdr2, res);\n }\n \n /* Build the dependence polyhedron for data references PDR1 and PDR2.\n    If possible use already cached information.  */\n \n-static ppl_Pointset_Powerset_C_Polyhedron_t\n+static poly_ddr_p\n dependence_polyhedron (poly_bb_p pbb1, poly_bb_p pbb2,\n \t\t       ppl_Pointset_Powerset_C_Polyhedron_t d1,\n \t\t       ppl_Pointset_Powerset_C_Polyhedron_t d2,\n@@ -442,38 +469,27 @@ dependence_polyhedron (poly_bb_p pbb1, poly_bb_p pbb2,\n \t\t       bool direction,\n \t\t       bool original_scattering_p)\n {\n-  poly_dr_pair tmp;\n   PTR *x = NULL;\n-  ppl_Pointset_Powerset_C_Polyhedron_t res;\n+  poly_ddr_p res;\n \n   if (original_scattering_p)\n     {\n+      struct poly_ddr tmp;\n+\n       tmp.source = pdr1;\n       tmp.sink = pdr2;\n-      x = htab_find_slot (SCOP_ORIGINAL_PDR_PAIRS (PBB_SCOP (pbb1)),\n+      x = htab_find_slot (SCOP_ORIGINAL_PDDRS (PBB_SCOP (pbb1)),\n                           &tmp, INSERT);\n \n       if (x && *x)\n-        {\n-          if (dump_file && (dump_flags & TDF_DETAILS))\n-            fprintf (dump_file, \"\\nddp cache: hit.\\n\");\n-          return ((poly_dr_pair *)*x)->ddp;\n-        }\n-      else if (dump_file && (dump_flags & TDF_DETAILS))\n-        fprintf (dump_file, \"\\nddp cache: miss.\\n\");\n+\treturn (poly_ddr_p) *x;\n     }\n \n   res = dependence_polyhedron_1 (pbb1, pbb2, d1, d2, pdr1, pdr2,\n                                  s1, s2, direction, original_scattering_p);\n \n   if (original_scattering_p)\n-    {\n-      gcc_assert (x && *x == NULL);\n-      *x = new_poly_dr_pair (pdr1, pdr2, res);\n-\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-        fprintf (dump_file, \"\\nddp cache: add element.\\n\");\n-    }\n+    *x = res;\n \n   return res;\n }\n@@ -487,12 +503,12 @@ graphite_legal_transform_dr (poly_bb_p pbb1, poly_bb_p pbb2,\n \t\t\t     poly_dr_p pdr1, poly_dr_p pdr2)\n {\n   ppl_Polyhedron_t st1, st2;\n-  ppl_Pointset_Powerset_C_Polyhedron_t pt;\n+  ppl_Pointset_Powerset_C_Polyhedron_t po, pt;\n   graphite_dim_t ddim1, otdim1, otdim2, ttdim1, ttdim2;\n   ppl_Pointset_Powerset_C_Polyhedron_t temp;\n   ppl_dimension_type pdim;\n   bool is_empty_p;\n-  ppl_Pointset_Powerset_C_Polyhedron_t po;\n+  poly_ddr_p pddr;\n \n   ppl_Pointset_Powerset_C_Polyhedron_t d1 = PBB_DOMAIN (pbb1);\n   ppl_Pointset_Powerset_C_Polyhedron_t d2 = PBB_DOMAIN (pbb2);\n@@ -504,12 +520,13 @@ graphite_legal_transform_dr (poly_bb_p pbb1, poly_bb_p pbb2,\n   if (sdim1 != sdim2)\n     return true;\n \n-  po = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n-\t\t\t      true, true);\n-\n-  if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (po))\n+  pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n+\t\t\t\ttrue, true);\n+  if (pddr_is_empty (pddr))\n     return true;\n \n+  po = PDDR_DDP (pddr);\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nloop carries dependency.\\n\");\n \n@@ -528,8 +545,9 @@ graphite_legal_transform_dr (poly_bb_p pbb1, poly_bb_p pbb2,\n   ppl_new_Pointset_Powerset_C_Polyhedron_from_space_dimension (&temp, pdim, 0);\n   ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (temp, po);\n \n-  pt = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, st1, st2,\n-\t\t\t      false, false);\n+  pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, st1, st2,\n+\t\t\t\tfalse, false);\n+  pt = PDDR_DDP (pddr);\n \n   /* Extend PO and PT to have the same dimensions.  */\n   ppl_insert_dimensions_pointset (temp, otdim1, ttdim1);\n@@ -541,7 +559,8 @@ graphite_legal_transform_dr (poly_bb_p pbb1, poly_bb_p pbb2,\n   is_empty_p = ppl_Pointset_Powerset_C_Polyhedron_is_empty (temp);\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (temp);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron (pt);\n+  free_poly_ddr (pddr);\n+\n   return is_empty_p;\n }\n \n@@ -646,8 +665,7 @@ poly_drs_may_alias_p (poly_dr_p pdr1, poly_dr_p pdr2)\n }\n \n /* Returns TRUE when the dependence polyhedron between PDR1 and\n-   PDR2 represents a loop carried dependence at level LEVEL. Otherwise\n-   return FALSE.  */\n+   PDR2 represents a loop carried dependence at level LEVEL.  */\n \n static bool\n graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n@@ -667,6 +685,7 @@ graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n   graphite_dim_t ddim1 = pbb_dim_iter_domain (pbb1);\n   ppl_dimension_type dim;\n   bool empty_p;\n+  poly_ddr_p pddr;\n \n   if ((PDR_TYPE (pdr1) == PDR_READ && PDR_TYPE (pdr2) == PDR_READ)\n       || !poly_drs_may_alias_p (pdr1, pdr2))\n@@ -675,14 +694,17 @@ graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n   if (sdim1 != sdim2)\n     return true;\n \n-  po = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n-\t\t\t      true, false);\n-  if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (po))\n+  pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n+\t\t\t\ttrue, false);\n+\n+  if (pddr_is_empty (pddr))\n     {\n       ppl_delete_Pointset_Powerset_C_Polyhedron (po);\n       return false;\n     }\n \n+  po = PDDR_DDP (pddr);\n+\n   ppl_Pointset_Powerset_C_Polyhedron_space_dimension (po, &dim);\n   eqpp = build_pairwise_scheduling_inequality (dim, level, tdim1 + ddim1, 1);\n "}, {"sha": "267d80ba9dd554aecdde5b8eaac16801e6986885", "filename": "gcc/graphite-dependences.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-dependences.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-dependences.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.h?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -24,27 +24,31 @@ along with GCC; see the file COPYING3.  If not see\n extern bool graphite_legal_transform (scop_p);\n extern bool dependency_between_pbbs_p (poly_bb_p, poly_bb_p, int);\n \n-typedef struct poly_dr_pair *poly_dr_pair_p;\n+enum poly_dependence_kind {\n+  unknown_dependence,\n+  no_dependence,\n+  has_dependence\n+};\n \n-typedef struct poly_dr_pair\n+typedef struct poly_ddr\n {\n-  /* Source polyhedral data reference of the dependence.  */\n-  poly_dr_p source;\n+  /* Source and sink data references of the dependence.  */\n+  poly_dr_p source, sink;\n \n-  /* Sink data reference of the dependence.  */\n-  poly_dr_p sink;\n-\n-  /* Data dependence polyhedron descibing dependence\n-     between SOURCE and SINK data references.  */\n+  /* Data dependence polyhedron.  */\n   ppl_Pointset_Powerset_C_Polyhedron_t ddp;\n-}poly_dr_pair;\n \n+  enum poly_dependence_kind kind;\n+\n+} *poly_ddr_p;\n \n-#define PDRP_SOURCE(PDRP) (PDR->source)\n-#define PDRP_SINK(PDRP) (PDR->sink)\n-#define PDRP_DDP(PDRP) (PDR->ddp)\n+#define PDDR_SOURCE(PDDR) (PDDR->source)\n+#define PDDR_SINK(PDDR) (PDDR->sink)\n+#define PDDR_DDP(PDDR) (PDDR->ddp)\n+#define PDDR_KIND(PDDR) (PDDR->kind)\n \n-extern int eq_poly_dr_pair_p (const void *, const void *);\n-extern hashval_t hash_poly_dr_pair_p (const void *);\n+extern int eq_poly_ddr_p (const void *, const void *);\n+extern hashval_t hash_poly_ddr_p (const void *);\n+extern void free_poly_ddr (void *);\n \n #endif"}, {"sha": "3bc50d48e7b6891e2f5d014e1d4ecaea3fe2b912", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -410,8 +410,8 @@ new_scop (void *region)\n   SCOP_CONTEXT (scop) = NULL;\n   scop_set_region (scop, region);\n   SCOP_BBS (scop) = VEC_alloc (poly_bb_p, heap, 3);\n-  SCOP_ORIGINAL_PDR_PAIRS (scop) = htab_create (10, hash_poly_dr_pair_p,\n-                                                eq_poly_dr_pair_p, free);\n+  SCOP_ORIGINAL_PDDRS (scop) = htab_create (10, hash_poly_ddr_p,\n+\t\t\t\t\t    eq_poly_ddr_p, free_poly_ddr);\n   return scop;\n }\n \n@@ -431,7 +431,7 @@ free_scop (scop_p scop)\n   if (SCOP_CONTEXT (scop))\n     ppl_delete_Pointset_Powerset_C_Polyhedron (SCOP_CONTEXT (scop));\n \n-  htab_delete (SCOP_ORIGINAL_PDR_PAIRS (scop));\n+  htab_delete (SCOP_ORIGINAL_PDDRS (scop));\n   XDELETE (scop);\n }\n "}, {"sha": "793c36225ed7ec2c900692c99276fe0fbebec8c2", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37f165fb75c8eed1dfed95bf25da62da5e7ba7e/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=e37f165fb75c8eed1dfed95bf25da62da5e7ba7e", "patch": "@@ -525,17 +525,16 @@ struct scop\n      c = 2a + b  */\n   ppl_Pointset_Powerset_C_Polyhedron_t context;\n \n-  /* A hashtable of the original pairs of dependent data references.\n-     For each pair of dependent data references, the dependence\n-     polyhedron is stored also.  */\n-  htab_t original_pdr_pairs;\n+  /* A hashtable of the data dependence relations for the original\n+     scattering.  */\n+  htab_t original_pddrs;\n };\n \n #define SCOP_BBS(S) (S->bbs)\n #define SCOP_REGION(S) ((sese) S->region)\n #define SCOP_DEP_GRAPH(S) (S->dep_graph)\n #define SCOP_CONTEXT(S) (S->context)\n-#define SCOP_ORIGINAL_PDR_PAIRS(S) (S->original_pdr_pairs)\n+#define SCOP_ORIGINAL_PDDRS(S) (S->original_pddrs)\n \n extern scop_p new_scop (void *);\n extern void free_scop (scop_p);"}]}