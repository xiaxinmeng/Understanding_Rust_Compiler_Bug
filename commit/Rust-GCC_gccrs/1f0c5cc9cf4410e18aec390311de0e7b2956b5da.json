{"sha": "1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwYzVjYzljZjQ0MTBlMThhZWMzOTAzMTFkZTBlN2IyOTU2YjVkYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-11T07:35:32Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-11T07:35:32Z"}, "message": "(convert_to_integer): Don't pass truncation thru lshift if shift count >= width of narrower type.\n\n(convert_to_integer): Don't pass truncation thru lshift\nif shift count >= width of narrower type.  Instead, just use 0.\n\nFrom-SVN: r2104", "tree": {"sha": "d4861f32a0e2f4c55407e310723743b5366a2e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4861f32a0e2f4c55407e310723743b5366a2e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0c5cc9cf4410e18aec390311de0e7b2956b5da/comments", "author": null, "committer": null, "parents": [{"sha": "4f61da45f3adde8926a3f4894fdee2b4c0a13887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f61da45f3adde8926a3f4894fdee2b4c0a13887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f61da45f3adde8926a3f4894fdee2b4c0a13887"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "89637cb7364c763f60023169fc2cd46a8b6dd0bb", "filename": "gcc/c-convert.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0c5cc9cf4410e18aec390311de0e7b2956b5da/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0c5cc9cf4410e18aec390311de0e7b2956b5da/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "patch": "@@ -187,9 +187,21 @@ convert_to_integer (type, expr)\n \t  /* We can pass truncation down through left shifting\n \t     when the shift count is a nonnegative constant.  */\n \t  if (TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST\n-\t      && ! tree_int_cst_lt (TREE_OPERAND (expr, 1), integer_zero_node))\n-\t    /* In this case, shifting is like multiplication.  */\n-\t    goto trunc1;\n+\t      && ! tree_int_cst_lt (TREE_OPERAND (expr, 1), integer_zero_node)\n+\t      && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST)\n+\t    {\n+\t      /* If shift count is less than the width of the truncated type,\n+\t\t really shift.  */\n+\t      if (tree_int_cst_lt (TREE_OPERAND (expr, 1), TYPE_SIZE (type)))\n+\t\t/* In this case, shifting is like multiplication.  */\n+\t\tgoto trunc1;\n+\t      else\n+\t\t/* If it is >= that width, result is zero.\n+\t\t   Handling this with trunc1 would give the wrong result:\n+\t\t   (int) ((long long) a << 32) is well defined (as 0)\n+\t\t   but (int) a << 32 is undefined and would get a warning.  */\n+\t\treturn convert_to_integer (type, integer_zero_node);\n+\t    }\n \t  break;\n \n \tcase MAX_EXPR:"}]}