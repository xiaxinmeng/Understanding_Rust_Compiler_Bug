{"sha": "ba78d4526f495d25a2d23025a4d782bfe73b591b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3OGQ0NTI2ZjQ5NWQyNWEyZDIzMDI1YTRkNzgyYmZlNzNiNTkxYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-02-10T15:16:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-02-10T15:16:51Z"}, "message": "builtins.c (fold_builtin_powi): New function.\n\n2005-02-10  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\t* builtins.c (fold_builtin_powi): New function.\n\t(fold_builtin_1): Call it.\n\n\t* gcc.dg/builtins-52.c: New testcase.\n\nFrom-SVN: r94831", "tree": {"sha": "5744c490757838cc1805f58f3651b6c7d2e97ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5744c490757838cc1805f58f3651b6c7d2e97ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba78d4526f495d25a2d23025a4d782bfe73b591b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba78d4526f495d25a2d23025a4d782bfe73b591b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba78d4526f495d25a2d23025a4d782bfe73b591b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba78d4526f495d25a2d23025a4d782bfe73b591b/comments", "author": null, "committer": null, "parents": [{"sha": "537f4eb35d1fa192c85ea5dc8335ecabc0024bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537f4eb35d1fa192c85ea5dc8335ecabc0024bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537f4eb35d1fa192c85ea5dc8335ecabc0024bae"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "199bd29edf042f9740a7712cb7178b0cb7f5b89c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba78d4526f495d25a2d23025a4d782bfe73b591b", "patch": "@@ -1,3 +1,8 @@\n+2005-02-10  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* builtins.c (fold_builtin_powi): New function.\n+\t(fold_builtin_1): Call it.\n+\n 2005-02-10  Steven Bosscher  <stevenb@suse.de>\n \n \tPR documentation/19309"}, {"sha": "a20624015368e5ba88404c7a394871c0de983c31", "filename": "gcc/builtins.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ba78d4526f495d25a2d23025a4d782bfe73b591b", "patch": "@@ -152,6 +152,7 @@ static tree fold_builtin_cabs (tree, tree);\n static tree fold_builtin_sqrt (tree, tree);\n static tree fold_builtin_cbrt (tree, tree);\n static tree fold_builtin_pow (tree, tree, tree);\n+static tree fold_builtin_powi (tree, tree, tree);\n static tree fold_builtin_sin (tree);\n static tree fold_builtin_cos (tree, tree, tree);\n static tree fold_builtin_tan (tree);\n@@ -6948,6 +6949,53 @@ fold_builtin_pow (tree fndecl, tree arglist, tree type)\n   return NULL_TREE;\n }\n \n+/* Fold a builtin function call to powi, powif, or powil.  Return\n+   NULL_TREE if no simplification can be made.  */\n+static tree\n+fold_builtin_powi (tree fndecl ATTRIBUTE_UNUSED, tree arglist, tree type)\n+{\n+  tree arg0 = TREE_VALUE (arglist);\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  /* Optimize pow(1.0,y) = 1.0.  */\n+  if (real_onep (arg0))\n+    return omit_one_operand (type, build_real (type, dconst1), arg1);\n+\n+  if (host_integerp (arg1, 0))\n+    {\n+      HOST_WIDE_INT c = TREE_INT_CST_LOW (arg1);\n+\n+      /* Evaluate powi at compile-time.  */\n+      if (TREE_CODE (arg0) == REAL_CST\n+\t  && ! TREE_CONSTANT_OVERFLOW (arg0))\n+\t{\n+\t  REAL_VALUE_TYPE x;\n+\t  x = TREE_REAL_CST (arg0);\n+\t  real_powi (&x, TYPE_MODE (type), &x, c);\n+\t  return build_real (type, x);\n+\t}\n+\n+      /* Optimize pow(x,0) = 1.0.  */\n+      if (c == 0)\n+\treturn omit_one_operand (type, build_real (type, dconst1),\n+\t\t\t\t arg0);\n+\n+      /* Optimize pow(x,1) = x.  */\n+      if (c == 1)\n+\treturn arg0;\n+\n+      /* Optimize pow(x,-1) = 1.0/x.  */\n+      if (c == -1)\n+\treturn fold (build2 (RDIV_EXPR, type,\n+\t\t\t     build_real (type, dconst1), arg0));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* A subroutine of fold_builtin to fold the various exponent\n    functions.  EXP is the CALL_EXPR of a call to a builtin function.\n    VALUE is the value which will be raised to a power.  */\n@@ -7969,6 +8017,11 @@ fold_builtin_1 (tree exp, bool ignore)\n     case BUILT_IN_POWL:\n       return fold_builtin_pow (fndecl, arglist, type);\n \n+    case BUILT_IN_POWI:\n+    case BUILT_IN_POWIF:\n+    case BUILT_IN_POWIL:\n+      return fold_builtin_powi (fndecl, arglist, type);\n+\n     case BUILT_IN_INF:\n     case BUILT_IN_INFF:\n     case BUILT_IN_INFL:"}, {"sha": "6e7dc97e434194bead0651281642d4dce51aa61e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba78d4526f495d25a2d23025a4d782bfe73b591b", "patch": "@@ -1,3 +1,7 @@\n+2005-02-10  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* gcc.dg/builtins-52.c: New testcase.\n+\n 2005-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/19342"}, {"sha": "684fd661de8c5782c5f30ec6d21cc3e1e545b5d6", "filename": "gcc/testsuite/gcc.dg/builtins-52.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78d4526f495d25a2d23025a4d782bfe73b591b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-52.c?ref=ba78d4526f495d25a2d23025a4d782bfe73b591b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+extern void link_error(void);\n+\n+void test(double x, int n)\n+{\n+  if (__builtin_powi(x,-1.0) != 1.0/x)\n+    link_error ();\n+  if (__builtin_powi(x,0.0) != 1.0)\n+    link_error ();\n+  if (__builtin_powi(x,1.0) != x)\n+    link_error ();\n+  if (__builtin_powi(1.0,n) != 1.0)\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test(7.3, 2);\n+  return 0;\n+}\n+"}]}