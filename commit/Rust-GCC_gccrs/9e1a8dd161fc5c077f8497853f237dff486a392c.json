{"sha": "9e1a8dd161fc5c077f8497853f237dff486a392c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxYThkZDE2MWZjNWMwNzdmODQ5Nzg1M2YyMzdkZmY0ODZhMzkyYw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-06-15T16:43:36Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-06-15T16:43:36Z"}, "message": "[multiple changes]\n\n\n2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/51033\n\t* c-typeck.c (c_build_vec_perm_expr): Move to c-family/c-common.c.\n        * c-tree.h (c_build_vec_perm_expr): Move to c-family/c-common.h.\n\ncp/\n\n2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/51033\n\t* semantics.c (literal_type_p): Handle VECTOR_TYPE.\n        (potential_constant_expression_1): Handle VEC_PERM_EXPR.\n        * parser.c (cp_parser_postfix_expression): Handle RID_BUILTIN_SHUFFLE.\n\nc-family\n2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/51033\n\t* c-common.h (c_build_vec_perm_expr): Move decl here.\n\t* c-common.c (c_build_vec_perm_expr): Move definition\n\there.\n\n2012-06-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR c++/51033\n\t* c-c++-common/torture/vshuf-16.inc: Move from gcc.c-torture/execute/.\n\t* c-c++-common/torture/vshuf-2.inc: Likewise.\n\t* c-c++-common/torture/vshuf-4.inc: Likewise.\n\t* c-c++-common/torture/vshuf-8.inc: Likewise.\n\t* c-c++-common/torture/vshuf-main.inc: Likewise.\n\t* c-c++-common/torture/vshuf-v16hi.c: Likewise.\n\t* c-c++-common/torture/vshuf-v16qi.c: Likewise.\n\t* c-c++-common/torture/vshuf-v2df.c: Likewise.\n\t* c-c++-common/torture/vshuf-v2di.c: Likewise.\n\t* c-c++-common/torture/vshuf-v2sf.c: Likewise.\n\t* c-c++-common/torture/vshuf-v2si.c: Likewise.\n\t* c-c++-common/torture/vshuf-v4df.c: Likewise.\n\t* c-c++-common/torture/vshuf-v4di.c: Likewise.\n\t* c-c++-common/torture/vshuf-v4hi.c: Likewise.\n\t* c-c++-common/torture/vshuf-v4sf.c: Likewise.\n\t* c-c++-common/torture/vshuf-v4si.c: Likewise.\n\t* c-c++-common/torture/vshuf-v8hi.c: Likewise.\n\t* c-c++-common/torture/vshuf-v8qi.c: Likewise.\n\t* c-c++-common/torture/vshuf-v8si.c: Likewise.\n\nFrom-SVN: r188671", "tree": {"sha": "34f7a064595da572aed1a04a8148dbb4e3dc6805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f7a064595da572aed1a04a8148dbb4e3dc6805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1a8dd161fc5c077f8497853f237dff486a392c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1a8dd161fc5c077f8497853f237dff486a392c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1a8dd161fc5c077f8497853f237dff486a392c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1a8dd161fc5c077f8497853f237dff486a392c/comments", "author": null, "committer": null, "parents": [{"sha": "eb6bb559981118ed95c4340fa32baf346a89b53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6bb559981118ed95c4340fa32baf346a89b53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6bb559981118ed95c4340fa32baf346a89b53e"}], "stats": {"total": 274, "additions": 180, "deletions": 94}, "files": [{"sha": "9c473e4ed588fc70e21fca3fb7ef37120255ec27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -1,3 +1,9 @@\n+2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/51033\n+\t* c-typeck.c (c_build_vec_perm_expr): Move to c-family/c-common.c.\n+        * c-tree.h (c_build_vec_perm_expr): Move to c-family/c-common.h.\n+\n 2012-06-15  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_default_expand_builtin): New function."}, {"sha": "529cc06f84bf0bfe67c080612fd427904b6365ae", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -1,3 +1,10 @@\n+2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/51033\n+\t* c-common.h (c_build_vec_perm_expr): Move decl here.\n+\t* c-common.c (c_build_vec_perm_expr): Move definition\n+\there.\n+\n 2012-06-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c.opt (fconserve-space): Turn into a no-op."}, {"sha": "61d756760e3c808a3c4e8df1ccadeb9310489b54", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -430,7 +430,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__bases\",          RID_BASES, D_CXXONLY },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n   { \"__builtin_complex\", RID_BUILTIN_COMPLEX, D_CONLY },\n-  { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, D_CONLY },\n+  { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, 0 },\n   { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, D_CONLY },\n   { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n@@ -1950,6 +1950,101 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n   return false;\n }\n \n+/* Build a VEC_PERM_EXPR if V0, V1 and MASK are not error_mark_nodes\n+   and have vector types, V0 has the same type as V1, and the number of\n+   elements of V0, V1, MASK is the same.\n+\n+   In case V1 is a NULL_TREE it is assumed that __builtin_shuffle was\n+   called with two arguments.  In this case implementation passes the\n+   first argument twice in order to share the same tree code.  This fact\n+   could enable the mask-values being twice the vector length.  This is\n+   an implementation accident and this semantics is not guaranteed to\n+   the user.  */\n+tree\n+c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n+{\n+  tree ret;\n+  bool wrap = true;\n+  bool maybe_const = false;\n+  bool two_arguments = false;\n+\n+  if (v1 == NULL_TREE)\n+    {\n+      two_arguments = true;\n+      v1 = v0;\n+    }\n+\n+  if (v0 == error_mark_node || v1 == error_mark_node\n+      || mask == error_mark_node)\n+    return error_mark_node;\n+\n+  if (TREE_CODE (TREE_TYPE (mask)) != VECTOR_TYPE\n+      || TREE_CODE (TREE_TYPE (TREE_TYPE (mask))) != INTEGER_TYPE)\n+    {\n+      error_at (loc, \"__builtin_shuffle last argument must \"\n+\t\t     \"be an integer vector\");\n+      return error_mark_node;\n+    }\n+\n+  if (TREE_CODE (TREE_TYPE (v0)) != VECTOR_TYPE\n+      || TREE_CODE (TREE_TYPE (v1)) != VECTOR_TYPE)\n+    {\n+      error_at (loc, \"__builtin_shuffle arguments must be vectors\");\n+      return error_mark_node;\n+    }\n+\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (v0)) != TYPE_MAIN_VARIANT (TREE_TYPE (v1)))\n+    {\n+      error_at (loc, \"__builtin_shuffle argument vectors must be of \"\n+\t\t     \"the same type\");\n+      return error_mark_node;\n+    }\n+\n+  if (TYPE_VECTOR_SUBPARTS (TREE_TYPE (v0))\n+      != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask))\n+      && TYPE_VECTOR_SUBPARTS (TREE_TYPE (v1))\n+\t != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask)))\n+    {\n+      error_at (loc, \"__builtin_shuffle number of elements of the \"\n+\t\t     \"argument vector(s) and the mask vector should \"\n+\t\t     \"be the same\");\n+      return error_mark_node;\n+    }\n+\n+  if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))))\n+      != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n+    {\n+      error_at (loc, \"__builtin_shuffle argument vector(s) inner type \"\n+\t\t     \"must have the same size as inner type of the mask\");\n+      return error_mark_node;\n+    }\n+\n+  if (!c_dialect_cxx ())\n+    {\n+      /* Avoid C_MAYBE_CONST_EXPRs inside VEC_PERM_EXPR.  */\n+      v0 = c_fully_fold (v0, false, &maybe_const);\n+      wrap &= maybe_const;\n+\n+      if (two_arguments)\n+        v1 = v0 = save_expr (v0);\n+      else\n+        {\n+          v1 = c_fully_fold (v1, false, &maybe_const);\n+          wrap &= maybe_const;\n+        }\n+\n+      mask = c_fully_fold (mask, false, &maybe_const);\n+      wrap &= maybe_const;\n+    }\n+\n+  ret = build3_loc (loc, VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n+\n+  if (!c_dialect_cxx () && !wrap)\n+    ret = c_wrap_maybe_const (ret, true);\n+\n+  return ret;\n+}\n+\n /* Like tree.c:get_narrower, but retain conversion from C++0x scoped enum\n    to integral type.  */\n "}, {"sha": "fea41dd1ed93c48b73bc4855ab4a6bd53cec1221", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -919,6 +919,7 @@ extern bool lvalue_p (const_tree);\n \n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n+extern tree c_build_vec_perm_expr (location_t, tree, tree, tree);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n "}, {"sha": "145df357af938fae81456276d1863d40b545a420", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -645,7 +645,6 @@ extern tree c_finish_omp_task (location_t, tree, tree);\n extern tree c_finish_omp_clauses (tree);\n extern tree c_build_va_arg (location_t, tree, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n-extern tree c_build_vec_perm_expr (location_t, tree, tree, tree);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "c2f713eb02d8b5f78c64929e3043f2afb1595e92", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -2866,98 +2866,6 @@ build_function_call_vec (location_t loc, tree function, VEC(tree,gc) *params,\n     }\n   return require_complete_type (result);\n }\n-\n-/* Build a VEC_PERM_EXPR if V0, V1 and MASK are not error_mark_nodes\n-   and have vector types, V0 has the same type as V1, and the number of\n-   elements of V0, V1, MASK is the same.\n-\n-   In case V1 is a NULL_TREE it is assumed that __builtin_shuffle was\n-   called with two arguments.  In this case implementation passes the\n-   first argument twice in order to share the same tree code.  This fact\n-   could enable the mask-values being twice the vector length.  This is\n-   an implementation accident and this semantics is not guaranteed to\n-   the user.  */\n-tree\n-c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n-{\n-  tree ret;\n-  bool wrap = true;\n-  bool maybe_const = false;\n-  bool two_arguments = false;\n-\n-  if (v1 == NULL_TREE)\n-    {\n-      two_arguments = true;\n-      v1 = v0;\n-    }\n-\n-  if (v0 == error_mark_node || v1 == error_mark_node\n-      || mask == error_mark_node)\n-    return error_mark_node;\n-\n-  if (TREE_CODE (TREE_TYPE (mask)) != VECTOR_TYPE\n-      || TREE_CODE (TREE_TYPE (TREE_TYPE (mask))) != INTEGER_TYPE)\n-    {\n-      error_at (loc, \"__builtin_shuffle last argument must \"\n-\t\t     \"be an integer vector\");\n-      return error_mark_node;\n-    }\n-\n-  if (TREE_CODE (TREE_TYPE (v0)) != VECTOR_TYPE\n-      || TREE_CODE (TREE_TYPE (v1)) != VECTOR_TYPE)\n-    {\n-      error_at (loc, \"__builtin_shuffle arguments must be vectors\");\n-      return error_mark_node;\n-    }\n-\n-  if (TYPE_MAIN_VARIANT (TREE_TYPE (v0)) != TYPE_MAIN_VARIANT (TREE_TYPE (v1)))\n-    {\n-      error_at (loc, \"__builtin_shuffle argument vectors must be of \"\n-\t\t     \"the same type\");\n-      return error_mark_node;\n-    }\n-\n-  if (TYPE_VECTOR_SUBPARTS (TREE_TYPE (v0))\n-      != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask))\n-      && TYPE_VECTOR_SUBPARTS (TREE_TYPE (v1))\n-\t != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask)))\n-    {\n-      error_at (loc, \"__builtin_shuffle number of elements of the \"\n-\t\t     \"argument vector(s) and the mask vector should \"\n-\t\t     \"be the same\");\n-      return error_mark_node;\n-    }\n-\n-  if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))))\n-      != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n-    {\n-      error_at (loc, \"__builtin_shuffle argument vector(s) inner type \"\n-\t\t     \"must have the same size as inner type of the mask\");\n-      return error_mark_node;\n-    }\n-\n-  /* Avoid C_MAYBE_CONST_EXPRs inside VEC_PERM_EXPR.  */\n-  v0 = c_fully_fold (v0, false, &maybe_const);\n-  wrap &= maybe_const;\n-\n-  if (two_arguments)\n-    v1 = v0 = save_expr (v0);\n-  else\n-    {\n-      v1 = c_fully_fold (v1, false, &maybe_const);\n-      wrap &= maybe_const;\n-    }\n-\n-  mask = c_fully_fold (mask, false, &maybe_const);\n-  wrap &= maybe_const;\n-\n-  ret = build3_loc (loc, VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n-\n-  if (!wrap)\n-    ret = c_wrap_maybe_const (ret, true);\n-\n-  return ret;\n-}\n \f\n /* Convert the argument expressions in the vector VALUES\n    to the types in the list TYPELIST."}, {"sha": "d033bcfbf24fc1da22d5520968072e8025f82fe1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -1,3 +1,10 @@\n+2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/51033\n+\t* semantics.c (literal_type_p): Handle VECTOR_TYPE.\n+        (potential_constant_expression_1): Handle VEC_PERM_EXPR.\n+        * parser.c (cp_parser_postfix_expression): Handle RID_BUILTIN_SHUFFLE.\n+\n 2012-06-09  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (tsubst_expr) [TAG_DEFN]: Instantiate local class."}, {"sha": "1691f81e4298caea5ee9c092a1accabe3c382c0b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -5448,6 +5448,44 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n       }\n       break;\n \n+    case RID_BUILTIN_SHUFFLE:\n+      {\n+\tVEC(tree,gc)* vec;\n+\tunsigned int i;\n+\ttree p;\n+\tlocation_t loc = token->location;\n+\n+\tcp_lexer_consume_token (parser->lexer);\n+\tvec = cp_parser_parenthesized_expression_list (parser, non_attr,\n+\t\t    /*cast_p=*/false, /*allow_expansion_p=*/true,\n+\t\t    /*non_constant_p=*/NULL);\n+\tif (vec == NULL)\n+\t  return error_mark_node;\n+\n+\tFOR_EACH_VEC_ELT (tree, vec, i, p)\n+\t  mark_exp_read (p);\n+\n+\tif (VEC_length (tree, vec) == 2)\n+\t  return\n+\t    c_build_vec_perm_expr\n+\t    (loc, VEC_index (tree, vec, 0),\n+\t     NULL_TREE, VEC_index (tree, vec, 1));\n+\n+\telse if (VEC_length (tree, vec) == 3)\n+\t  return\n+\t    c_build_vec_perm_expr\n+\t    (loc, VEC_index (tree, vec, 0),\n+\t     VEC_index (tree, vec, 1),\n+\t     VEC_index (tree, vec, 2));\n+\telse\n+\t{\n+\t  error_at (loc, \"wrong number of arguments to \"\n+\t      \"%<__builtin_shuffle%>\");\n+\t  return error_mark_node;\n+\t}\n+\tbreak;\n+      }\n+\n     default:\n       {\n \ttree type;"}, {"sha": "ee418616992f7d8ee616c031919585db02a93e34", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -5622,6 +5622,7 @@ bool\n literal_type_p (tree t)\n {\n   if (SCALAR_TYPE_P (t)\n+      || TREE_CODE (t) == VECTOR_TYPE\n       || TREE_CODE (t) == REFERENCE_TYPE)\n     return true;\n   if (CLASS_TYPE_P (t))\n@@ -8505,6 +8506,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       return true;\n \n     case FMA_EXPR:\n+    case VEC_PERM_EXPR:\n      for (i = 0; i < 3; ++i)\n       if (!potential_constant_expression_1 (TREE_OPERAND (t, i),\n \t\t\t\t\t    true, flags))"}, {"sha": "a81b00121cee87eb36a1dd4dfe2d9538f25fe005", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "patch": "@@ -1,3 +1,26 @@\n+2012-06-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR c++/51033\n+\t* c-c++-common/torture/vshuf-16.inc: Move from gcc.c-torture/execute/.\n+\t* c-c++-common/torture/vshuf-2.inc: Likewise.\n+\t* c-c++-common/torture/vshuf-4.inc: Likewise.\n+\t* c-c++-common/torture/vshuf-8.inc: Likewise.\n+\t* c-c++-common/torture/vshuf-main.inc: Likewise.\n+\t* c-c++-common/torture/vshuf-v16hi.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v16qi.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v2df.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v2di.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v2sf.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v2si.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v4df.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v4di.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v4hi.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v4sf.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v4si.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v8hi.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v8qi.c: Likewise.\n+\t* c-c++-common/torture/vshuf-v8si.c: Likewise.\n+\n 2012-06-15  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/tree-ssa/vector-4.c: New test."}, {"sha": "68f2646d8605139d315107dfc7b2a6389e5af6ef", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-16.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-16.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-16.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-16.inc?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-16.inc"}, {"sha": "ef778e59418c82765878fcabeeb18c2da1a61c1f", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-2.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-2.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-2.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-2.inc?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-2.inc"}, {"sha": "d6e6e1022959781000ff642a7a802db8fd13952c", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-4.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-4.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-4.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-4.inc?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-4.inc"}, {"sha": "e6475226a1132ad7a8b175c053c58a91609b41f4", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-8.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-8.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-8.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-8.inc?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-8.inc"}, {"sha": "8487131b12d416ece5e6d7d2668e868b0f97526a", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-main.inc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-main.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-main.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-main.inc?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-main.inc"}, {"sha": "98b329dbf919f0c58dcd46429b758e3f510cf9d0", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v16hi.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16hi.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v16hi.c"}, {"sha": "dcd1de1e646e1da1813839046aa76baec90e52a4", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v16qi.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v16qi.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v16qi.c"}, {"sha": "e88ec08ddf65003e5a41764c10ef891461775166", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v2df.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2df.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v2df.c"}, {"sha": "0985a0de02a2bffb11991a55b597af2bc496f95b", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v2di.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2di.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v2di.c"}, {"sha": "f9c40b2239135a95181675e6d92bf3cb7188c091", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v2sf.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2sf.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v2sf.c"}, {"sha": "414743c892f806ec67576fb6fb54093c73c8729e", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v2si.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v2si.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v2si.c"}, {"sha": "c4030a7dbabc08386c7f9c21c6d8d3b58c99c245", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v4df.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4df.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v4df.c"}, {"sha": "a84aebefb6d7d0ce08f02534541d64ee93491f1b", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v4di.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4di.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v4di.c"}, {"sha": "64a2bb4ac8275e935e80dba43f69cc6b08bab1ea", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v4hi.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4hi.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v4hi.c"}, {"sha": "283672560a3c12474f65eee2b6942baaf74eb405", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v4sf.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4sf.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v4sf.c"}, {"sha": "289ec1b5016eebbe02320777b6b4272180a4430c", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v4si.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v4si.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v4si.c"}, {"sha": "ce442c5d995179785d96168779cc27238193dd85", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v8hi.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8hi.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v8hi.c"}, {"sha": "349ec6db6998dafb8c48e9c5373d37a973333dd3", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v8qi.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8qi.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v8qi.c"}, {"sha": "5b0a2c33e2ca33ec0bc557b668f0fd443f61876d", "filename": "gcc/testsuite/c-c++-common/torture/vshuf-v8si.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1a8dd161fc5c077f8497853f237dff486a392c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvshuf-v8si.c?ref=9e1a8dd161fc5c077f8497853f237dff486a392c", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vshuf-v8si.c"}]}