{"sha": "299316ed37671290b5be88a5e69b6e02b5baf864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5MzE2ZWQzNzY3MTI5MGI1YmU4OGE1ZTY5YjZlMDJiNWJhZjg2NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-06-08T15:24:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-06-08T15:24:15Z"}, "message": "varasm.c (struct oc_local_state): Reorder fields.\n\n\t* varasm.c (struct oc_local_state): Reorder fields.\n\t(output_constructor_bitfield): Replace OUTER parameter with BIT_OFFSET\n\tand adjust accordingly.\n\t(output_constructor): Reorder initialization code and adjust call to\n\toutput_constructor_bitfield.\n\nFrom-SVN: r199852", "tree": {"sha": "07328e64ff1e2c09a4437d83e819da2ec7385b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07328e64ff1e2c09a4437d83e819da2ec7385b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299316ed37671290b5be88a5e69b6e02b5baf864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299316ed37671290b5be88a5e69b6e02b5baf864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299316ed37671290b5be88a5e69b6e02b5baf864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299316ed37671290b5be88a5e69b6e02b5baf864/comments", "author": null, "committer": null, "parents": [{"sha": "ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3f1ef2bafb6af4a4caeac0b20c54d40a14abd6"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "86795e723926fe0d139b67295a92c35905ca3074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299316ed37671290b5be88a5e69b6e02b5baf864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299316ed37671290b5be88a5e69b6e02b5baf864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=299316ed37671290b5be88a5e69b6e02b5baf864", "patch": "@@ -1,3 +1,11 @@\n+2013-06-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* varasm.c (struct oc_local_state): Reorder fields.\n+\t(output_constructor_bitfield): Replace OUTER parameter with BIT_OFFSET\n+\tand adjust accordingly.\n+\t(output_constructor): Reorder initialization code and adjust call to\n+\toutput_constructor_bitfield.\n+\n 2013-06-07  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR c++/57548"}, {"sha": "b43adae5d0c7fb86c6a9a3d5a2a02abc481c5491", "filename": "gcc/varasm.c", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299316ed37671290b5be88a5e69b6e02b5baf864/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299316ed37671290b5be88a5e69b6e02b5baf864/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=299316ed37671290b5be88a5e69b6e02b5baf864", "patch": "@@ -4471,7 +4471,7 @@ static unsigned HOST_WIDE_INT\n   output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int,\n \t\t      oc_outer_state *);\n \n-/* Output assembler code for constant EXP to FILE, with no label.\n+/* Output assembler code for constant EXP, with no label.\n    This includes the pseudo-op such as \".int\" or \".byte\", and a newline.\n    Assumes output_addressed_constants has been done on EXP already.\n \n@@ -4707,25 +4707,22 @@ typedef struct {\n \n   /* Received arguments.  */\n   tree exp;                     /* Constructor expression.  */\n+  tree type;                    /* Type of constructor expression.  */\n   unsigned HOST_WIDE_INT size;  /* # bytes to output - pad if necessary.  */\n   unsigned int align;           /* Known initial alignment.  */\n-\n-  /* Constructor expression data.  */\n-  tree type;       /* Expression type.  */\n-  tree field;      /* Current field decl in a record.  */\n-  tree min_index;  /* Lower bound if specified for an array.  */\n+  tree min_index;               /* Lower bound if specified for an array.  */\n \n   /* Output processing state.  */\n   HOST_WIDE_INT total_bytes;  /* # bytes output so far / current position.  */\n-  bool byte_buffer_in_use;    /* Whether byte ...  */\n-  int byte;                   /* ... contains part of a bitfield byte yet to\n-\t\t\t         be output.  */\n-\n+  int byte;                   /* Part of a bitfield byte yet to be output.  */\n   int last_relative_index;    /* Implicit or explicit index of the last\n \t\t\t\t array element output within a bitfield.  */\n+  bool byte_buffer_in_use;    /* Whether BYTE is in use.  */\n+\n   /* Current element.  */\n-  tree val;    /* Current element value.  */\n-  tree index;  /* Current element index.  */\n+  tree field;      /* Current field decl in a record.  */\n+  tree val;        /* Current element value.  */\n+  tree index;      /* Current element index.  */\n \n } oc_local_state;\n \n@@ -4847,11 +4844,12 @@ output_constructor_regular_field (oc_local_state *local)\n   local->total_bytes += fieldsize;\n }\n \n-/* Helper for output_constructor.  From the current LOCAL and OUTER states,\n-   output an element that is a true bitfield or part of an outer one.  */\n+/* Helper for output_constructor.  From the LOCAL state, output an element\n+   that is a true bitfield or part of an outer one.  BIT_OFFSET is the offset\n+   from the start of a possibly ongoing outer byte buffer.  */\n \n static void\n-output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n+output_constructor_bitfield (oc_local_state *local, unsigned int bit_offset)\n {\n   /* Bit size of this element.  */\n   HOST_WIDE_INT ebitsize\n@@ -4878,7 +4876,7 @@ output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n   /* Bit position of this element from the start of a possibly ongoing\n      outer byte buffer.  */\n   HOST_WIDE_INT byte_relative_ebitpos\n-      = ((outer ? outer->bit_offset : 0) + constructor_relative_ebitpos);\n+      = bit_offset + constructor_relative_ebitpos;\n \n   /* From the start of a possibly ongoing outer byte buffer, offsets to\n      the first bit of this element and to the first bit past the end of\n@@ -4902,8 +4900,7 @@ output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n       return;\n     }\n \n-  /* If this field does not start in this (or, next) byte,\n-     skip some bytes.  */\n+  /* If this field does not start in this (or next) byte, skip some bytes.  */\n   if (next_offset / BITS_PER_UNIT != local->total_bytes)\n     {\n       /* Output remnant of any bit field in previous bytes.  */\n@@ -4935,13 +4932,12 @@ output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n      pending data, then retrieve the new pending data afterwards.  */\n   if (TREE_CODE (local->val) == CONSTRUCTOR)\n     {\n-      oc_outer_state output_state;\n-\n-      output_state.bit_offset = next_offset % BITS_PER_UNIT;\n-      output_state.byte = local->byte;\n+      oc_outer_state temp_state;\n+      temp_state.bit_offset = next_offset % BITS_PER_UNIT;\n+      temp_state.byte = local->byte;\n       local->total_bytes\n-\t  += output_constructor (local->val, 0, 0, &output_state);\n-      local->byte = output_state.byte;\n+\t  += output_constructor (local->val, 0, 0, &temp_state);\n+      local->byte = temp_state.byte;\n       return;\n     }\n \n@@ -4956,19 +4952,16 @@ output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n       HOST_WIDE_INT next_byte = next_offset / BITS_PER_UNIT;\n       HOST_WIDE_INT next_bit = next_offset % BITS_PER_UNIT;\n \n-      /* Advance from byte to byte\n-\t within this element when necessary.  */\n+      /* Advance from byte to byte within this element when necessary.  */\n       while (next_byte != local->total_bytes)\n \t{\n \t  assemble_integer (GEN_INT (local->byte), 1, BITS_PER_UNIT, 1);\n \t  local->total_bytes++;\n \t  local->byte = 0;\n \t}\n \n-      /* Number of bits we can process at once\n-\t (all part of the same byte).  */\n-      this_time = MIN (end_offset - next_offset,\n-\t\t       BITS_PER_UNIT - next_bit);\n+      /* Number of bits we can process at once (all part of the same byte).  */\n+      this_time = MIN (end_offset - next_offset, BITS_PER_UNIT - next_bit);\n       if (BYTES_BIG_ENDIAN)\n \t{\n \t  /* On big-endian machine, take the most significant bits\n@@ -5047,7 +5040,7 @@ output_constructor_bitfield (oc_local_state *local, oc_outer_state *outer)\n \n static unsigned HOST_WIDE_INT\n output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n-\t\t    unsigned int align, oc_outer_state * outer)\n+\t\t    unsigned int align, oc_outer_state *outer)\n {\n   unsigned HOST_WIDE_INT cnt;\n   constructor_elt *ce;\n@@ -5056,22 +5049,20 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n \n   /* Setup our local state to communicate with helpers.  */\n   local.exp = exp;\n+  local.type = TREE_TYPE (exp);\n   local.size = size;\n   local.align = align;\n+  if (TREE_CODE (local.type) == ARRAY_TYPE && TYPE_DOMAIN (local.type))\n+    local.min_index = TYPE_MIN_VALUE (TYPE_DOMAIN (local.type));\n+  else\n+    local.min_index = NULL_TREE;\n \n   local.total_bytes = 0;\n   local.byte_buffer_in_use = outer != NULL;\n   local.byte = outer ? outer->byte : 0;\n \n-  local.type = TREE_TYPE (exp);\n-\n   local.last_relative_index = -1;\n \n-  local.min_index = NULL_TREE;\n-  if (TREE_CODE (local.type) == ARRAY_TYPE\n-      && TYPE_DOMAIN (local.type) != NULL_TREE)\n-    local.min_index = TYPE_MIN_VALUE (TYPE_DOMAIN (local.type));\n-\n   gcc_assert (HOST_BITS_PER_WIDE_INT >= BITS_PER_UNIT);\n \n   /* As CE goes through the elements of the constant, FIELD goes through the\n@@ -5083,9 +5074,10 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n      (even if the initializer in a source program incorrectly contains\n      more one).  */\n \n-  local.field = NULL_TREE;\n   if (TREE_CODE (local.type) == RECORD_TYPE)\n     local.field = TYPE_FIELDS (local.type);\n+  else\n+    local.field = NULL_TREE;\n \n   for (cnt = 0;\n        vec_safe_iterate (CONSTRUCTOR_ELTS (exp), cnt, &ce);\n@@ -5138,7 +5130,7 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n \t\t\t    build_nonstandard_integer_type\n \t\t\t    (TYPE_PRECISION (TREE_TYPE (local.val)), 0),\n \t\t\t    local.val);\n-\t  output_constructor_bitfield (&local, outer);\n+\t  output_constructor_bitfield (&local, outer ? outer->bit_offset : 0);\n \t}\n     }\n "}]}