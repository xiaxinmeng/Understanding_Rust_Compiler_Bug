{"sha": "4a81b412140496842501099dd5e7a00a95474a04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4MWI0MTIxNDA0OTY4NDI1MDEwOTlkZDVlN2EwMGE5NTQ3NGEwNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-04-16T17:58:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-16T17:58:12Z"}, "message": "i386.md (*bt<mode>): Macroize insn from *btsi and *btdi_rex64 using SWI48 mode iterator.\n\n\t* config/i386/i386.md (*bt<mode>): Macroize insn from *btsi and\n\t*btdi_rex64 using SWI48 mode iterator.\n\t(*jcc_bt<mode>): Ditto from *jcc_btsi and *jcc_btdi_rex64.\n\t(*jcc_bt<mode>_mask): Ditto from *jcc_btsi_mask and\n\t*jcc_btdi_mask_rex64.\n\nFrom-SVN: r158438", "tree": {"sha": "0bd8fab8d0aab46b4722d59f74ca76943e90fffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd8fab8d0aab46b4722d59f74ca76943e90fffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a81b412140496842501099dd5e7a00a95474a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a81b412140496842501099dd5e7a00a95474a04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a81b412140496842501099dd5e7a00a95474a04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a81b412140496842501099dd5e7a00a95474a04/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6"}], "stats": {"total": 134, "additions": 34, "deletions": 100}, "files": [{"sha": "cbf13401feaf889a893bb04b010809fc21b9637d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a81b412140496842501099dd5e7a00a95474a04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a81b412140496842501099dd5e7a00a95474a04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a81b412140496842501099dd5e7a00a95474a04", "patch": "@@ -1,3 +1,11 @@\n+2010-04-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*bt<mode>): Macroize insn from *btsi and\n+\t*btdi_rex64 using SWI48 mode iterator.\n+\t(*jcc_bt<mode>): Ditto from *jcc_btsi and *jcc_btdi_rex64.\n+\t(*jcc_bt<mode>_mask): Ditto from *jcc_btsi_mask and\n+\t*jcc_btdi_mask_rex64.\n+\n 2010-04-16  Anatoly Sokolov  <aesok@post.ru>\n \n \t* double-int.h (tree_to_double_int): Convert to macro.\n@@ -303,7 +311,7 @@\n \t(logic): Ditto from logicprefix.\n \t(absneg_mnemonic): Ditto from absnegprefix.\n \t* config/i386/mmx.md: Update all users of maxminiprefix,\n-\tmaxminfprefix and loficprefix for rename.\n+\tmaxminfprefix and logicprefix for rename.\n \t* config/i386/sse.md: Ditto.\n \t* config/i386/sync.md (sync_<code><mode>): Update for\n \tlogicprefix rename."}, {"sha": "d142c7fbc39f2a1c5180f97aeccee702ccdce95e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 99, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a81b412140496842501099dd5e7a00a95474a04/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a81b412140496842501099dd5e7a00a95474a04/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4a81b412140496842501099dd5e7a00a95474a04", "patch": "@@ -10965,33 +10965,19 @@\n   DONE;\n })\n \n-(define_insn \"*btdi_rex64\"\n+(define_insn \"*bt<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (zero_extract:DI\n-\t    (match_operand:DI 0 \"register_operand\" \"r\")\n+\t  (zero_extract:SWI48\n+\t    (match_operand:SWI48 0 \"register_operand\" \"r\")\n \t    (const_int 1)\n-\t    (match_operand:DI 1 \"nonmemory_operand\" \"rN\"))\n-\t  (const_int 0)))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n-  \"bt{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*btsi\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SI\n-\t    (match_operand:SI 0 \"register_operand\" \"r\")\n-\t    (const_int 1)\n-\t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n+\t    (match_operand:SWI48 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n   \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"bt{l}\\t{%1, %0|%0, %1}\"\n+  \"bt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;; Store-flag instructions.\n \n@@ -11248,29 +11234,29 @@\n     FAIL;\n })\n \n-;; zero_extend in SImode is correct, since this is what combine pass\n-;; generates from shift insn with QImode operand.  Actually, the mode of\n-;; operand 2 (bit offset operand) doesn't matter since bt insn takes\n+;; zero_extend in SImode is correct also for DImode, since this is what combine\n+;; pass generates from shift insn with QImode operand.  Actually, the mode\n+;; of operand 2 (bit offset operand) doesn't matter since bt insn takes\n ;; appropriate modulo of the bit offset value.\n \n-(define_insn_and_split \"*jcc_btdi_rex64\"\n+(define_insn_and_split \"*jcc_bt<mode>\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:DI\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 1)\n \t\t\t   (zero_extend:SI\n \t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n+  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (zero_extract:DI\n+\t  (zero_extract:SWI48\n \t    (match_dup 1)\n \t    (const_int 1)\n \t    (match_dup 2))\n@@ -11280,31 +11266,33 @@\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n {\n-  operands[2] = simplify_gen_subreg (DImode, operands[2], QImode, 0);\n+  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], QImode, 0);\n \n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n-;; avoid useless masking of bit offset operand\n-(define_insn_and_split \"*jcc_btdi_mask_rex64\"\n+;; Avoid useless masking of bit offset operand.  \"and\" in SImode is correct\n+;; also for DImode, this is what combine produces.\n+define_insn_and_split \"*jcc_bt<mode>_mask\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:DI\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 1)\n \t\t\t   (and:SI\n \t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (INTVAL (operands[3]) & 0x3f) == 0x3f\"\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (zero_extract:DI\n+\t  (zero_extract:SWI48\n \t    (match_dup 1)\n \t    (const_int 1)\n \t    (match_dup 2))\n@@ -11314,73 +11302,11 @@\n \t\t      (label_ref (match_dup 4))\n \t\t      (pc)))]\n {\n-  operands[2] = simplify_gen_subreg (DImode, operands[2], SImode, 0);\n-\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n-(define_insn_and_split \"*jcc_btsi\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:SI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (zero_extend:SI\n-\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n-\t\t\t (const_int 0)])\n-\t\t      (label_ref (match_operand 3 \"\" \"\"))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SI\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-{\n-  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n+  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n \n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n-;; avoid useless masking of bit offset operand\n-(define_insn_and_split \"*jcc_btsi_mask\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:SI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (and:SI\n-\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n-\t\t      (label_ref (match_operand 4 \"\" \"\"))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SI\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 4))\n-\t\t      (pc)))]\n-  \"PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\")\n-\n (define_insn_and_split \"*jcc_btsi_1\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\""}]}