{"sha": "accece8c9543e4f3f7bbf24989755dd0453658b7", "node_id": "C_kwDOANBUbNoAKGFjY2VjZThjOTU0M2U0ZjNmN2JiZjI0OTg5NzU1ZGQwNDUzNjU4Yjc", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:02Z"}, "message": "analyzer: use std::unique_ptr during bifurcation\n\ngcc/analyzer/ChangeLog:\n\t* analysis-plan.cc: Define INCLUDE_MEMORY before including\n\tsystem.h.\n\t* analyzer-pass.cc: Likewise.\n\t* analyzer-selftests.cc: Likewise.\n\t* analyzer.cc: Likewise.\n\t* analyzer.h: Use std::unique_ptr in bifurcation code.\n\t* call-string.cc: Define INCLUDE_MEMORY before including system.h.\n\t* complexity.cc: Likewise.\n\t* engine.cc: Use std::unique_ptr in bifurcation code.\n\t* exploded-graph.h: Likewise.\n\t* known-function-manager.cc: Define INCLUDE_MEMORY before\n\tincluding system.h.\n\t* region-model-impl-calls.cc: Use std::unique_ptr in bifurcation\n\tcode.\n\t* region-model.cc: Likewise.\n\t* region-model.h: Likewise.\n\t* supergraph.cc: Define INCLUDE_MEMORY before including system.h.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/analyzer_kernel_plugin.c: Include \"make-unique.h\".\n\tUse std::unique_ptr in bifurcation code.\n\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2d610a47ba0ddd6dabda643a910fad70e3e72e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d610a47ba0ddd6dabda643a910fad70e3e72e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/accece8c9543e4f3f7bbf24989755dd0453658b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accece8c9543e4f3f7bbf24989755dd0453658b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accece8c9543e4f3f7bbf24989755dd0453658b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accece8c9543e4f3f7bbf24989755dd0453658b7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60b40b86b166fbdb68523c4164c0003c8244192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60b40b86b166fbdb68523c4164c0003c8244192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60b40b86b166fbdb68523c4164c0003c8244192"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "aa75bd6b67eece327b1fa4d85eb77a5de7bf0e4b", "filename": "gcc/analyzer/analysis-plan.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalysis-plan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalysis-plan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalysis-plan.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "423595f45f05feeb9a6952cc79cf347e41058175", "filename": "gcc/analyzer/analyzer-pass.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-pass.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"context.h\""}, {"sha": "028cc5ed009a2415a7b16c45e5c8638542288496", "filename": "gcc/analyzer/analyzer-selftests.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "899202bb44c72d99682649210b79ac93bba4eebf", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "d8d3e78b20a3f908e2cc7f3aebede94822014646", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -300,9 +300,8 @@ class path_context\n public:\n   virtual ~path_context () {}\n \n-  /* Hook for clients to split state with a non-standard path.\n-     Take ownership of INFO.  */\n-  virtual void bifurcate (custom_edge_info *info) = 0;\n+  /* Hook for clients to split state with a non-standard path.  */\n+  virtual void bifurcate (std::unique_ptr<custom_edge_info> info) = 0;\n \n   /* Hook for clients to terminate the standard path.  */\n   virtual void terminate_path () = 0;"}, {"sha": "5caf92155b9cd6d8953d78bfed524405238e55e9", "filename": "gcc/analyzer/call-string.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fcall-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fcall-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-string.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"pretty-print.h\""}, {"sha": "2756f961d80bdc7acf987a1bcc2a9f544b0ff3a1", "filename": "gcc/analyzer/complexity.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcomplexity.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "d770c6fc29cedceccbd7a47307cf9c4753bc7d71", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -193,12 +193,10 @@ impl_region_model_context::purge_state_involving (const svalue *sval)\n }\n \n void\n-impl_region_model_context::bifurcate (custom_edge_info *info)\n+impl_region_model_context::bifurcate (std::unique_ptr<custom_edge_info> info)\n {\n   if (m_path_ctxt)\n-    m_path_ctxt->bifurcate (info);\n-  else\n-    delete info;\n+    m_path_ctxt->bifurcate (std::move (info));\n }\n \n void\n@@ -1646,10 +1644,10 @@ exploded_node::replay_call_summary (exploded_graph &eg,\n   call_summary_replay r (cd, called_fn, summary, ext_state);\n \n   if (path_ctxt)\n-    path_ctxt->bifurcate (new call_summary_edge_info (cd,\n-\t\t\t\t\t\t      called_fn,\n-\t\t\t\t\t\t      summary,\n-\t\t\t\t\t\t      ext_state));\n+    path_ctxt->bifurcate (make_unique<call_summary_edge_info> (cd,\n+\t\t\t\t\t\t\t       called_fn,\n+\t\t\t\t\t\t\t       summary,\n+\t\t\t\t\t\t\t       ext_state));\n }\n \n \n@@ -3807,7 +3805,7 @@ class impl_path_context : public path_context\n   }\n \n   void\n-  bifurcate (custom_edge_info *info) final override\n+  bifurcate (std::unique_ptr<custom_edge_info> info) final override\n   {\n     if (m_state_at_bifurcation)\n       /* Verify that the state at bifurcation is consistent when we\n@@ -3820,7 +3818,7 @@ class impl_path_context : public path_context\n \t= std::unique_ptr<program_state> (new program_state (*m_cur_state));\n \n     /* Take ownership of INFO.  */\n-    m_custom_eedge_infos.safe_push (info);\n+    m_custom_eedge_infos.safe_push (info.release ());\n   }\n \n   void terminate_path () final override"}, {"sha": "8e3c160189c4842f5f9feb5cc2cdcefbe1b25d7b", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -90,7 +90,7 @@ class impl_region_model_context : public region_model_context\n \n   void purge_state_involving (const svalue *sval) final override;\n \n-  void bifurcate (custom_edge_info *info) final override;\n+  void bifurcate (std::unique_ptr<custom_edge_info> info) final override;\n   void terminate_path () final override;\n   const extrinsic_state *get_ext_state () const final override\n   {"}, {"sha": "42dfe3af583deda5296e22d9b3976104d660dfcf", "filename": "gcc/analyzer/known-function-manager.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fknown-function-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fknown-function-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fknown-function-manager.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "30fa765c4b404d07d5857eea500038e02c31fba8", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -629,8 +629,8 @@ region_model::impl_call_pipe (const call_details &cd)\n   /* Body of region_model::impl_call_pipe.  */\n   if (cd.get_ctxt ())\n     {\n-      cd.get_ctxt ()->bifurcate (new failure (cd));\n-      cd.get_ctxt ()->bifurcate (new success (cd));\n+      cd.get_ctxt ()->bifurcate (make_unique<failure> (cd));\n+      cd.get_ctxt ()->bifurcate (make_unique<success> (cd));\n       cd.get_ctxt ()->terminate_path ();\n     }\n }\n@@ -1006,9 +1006,9 @@ region_model::impl_call_realloc (const call_details &cd)\n \n   if (cd.get_ctxt ())\n     {\n-      cd.get_ctxt ()->bifurcate (new failure (cd));\n-      cd.get_ctxt ()->bifurcate (new success_no_move (cd));\n-      cd.get_ctxt ()->bifurcate (new success_with_move (cd));\n+      cd.get_ctxt ()->bifurcate (make_unique<failure> (cd));\n+      cd.get_ctxt ()->bifurcate (make_unique<success_no_move> (cd));\n+      cd.get_ctxt ()->bifurcate (make_unique<success_with_move> (cd));\n       cd.get_ctxt ()->terminate_path ();\n     }\n }\n@@ -1077,7 +1077,7 @@ region_model::impl_call_strchr (const call_details &cd)\n \n   /* Bifurcate state, creating a \"not found\" out-edge.  */\n   if (cd.get_ctxt ())\n-    cd.get_ctxt ()->bifurcate (new strchr_call_info (cd, false));\n+    cd.get_ctxt ()->bifurcate (make_unique<strchr_call_info> (cd, false));\n \n   /* The \"unbifurcated\" state is the \"found\" case.  */\n   strchr_call_info found (cd, true);"}, {"sha": "edf3412a81780bde2ae384ea6ae66f2215bb51ef", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -6416,9 +6416,8 @@ noop_region_model_context::add_note (std::unique_ptr<pending_note>)\n }\n \n void\n-noop_region_model_context::bifurcate (custom_edge_info *info)\n+noop_region_model_context::bifurcate (std::unique_ptr<custom_edge_info>)\n {\n-  delete info;\n }\n \n void"}, {"sha": "5c0bc44a57ac175599b64cf3f92b4402954810bc", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -729,9 +729,8 @@ class region_model_context\n   /* Hook for clients to purge state involving SVAL.  */\n   virtual void purge_state_involving (const svalue *sval) = 0;\n \n-  /* Hook for clients to split state with a non-standard path.\n-     Take ownership of INFO.  */\n-  virtual void bifurcate (custom_edge_info *info) = 0;\n+  /* Hook for clients to split state with a non-standard path.  */\n+  virtual void bifurcate (std::unique_ptr<custom_edge_info> info) = 0;\n \n   /* Hook for clients to terminate the standard path.  */\n   virtual void terminate_path () = 0;\n@@ -806,7 +805,7 @@ class noop_region_model_context : public region_model_context\n \n   void purge_state_involving (const svalue *sval ATTRIBUTE_UNUSED) override {}\n \n-  void bifurcate (custom_edge_info *info) override;\n+  void bifurcate (std::unique_ptr<custom_edge_info> info) override;\n   void terminate_path () override;\n \n   const extrinsic_state *get_ext_state () const override { return NULL; }\n@@ -918,9 +917,9 @@ class region_model_context_decorator : public region_model_context\n     m_inner->purge_state_involving (sval);\n   }\n \n-  void bifurcate (custom_edge_info *info) override\n+  void bifurcate (std::unique_ptr<custom_edge_info> info) override\n   {\n-    m_inner->bifurcate (info);\n+    m_inner->bifurcate (std::move (info));\n   }\n \n   void terminate_path () override"}, {"sha": "8195fe8e7f898f684f87c2c52af45e87ee2e301c", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_MEMORY\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\""}, {"sha": "dfa30c8d61b40ffbffe75173dd36f7aa2dace747", "filename": "gcc/testsuite/gcc.dg/plugin/analyzer_kernel_plugin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_kernel_plugin.c?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -42,6 +42,7 @@\n #include \"analyzer/store.h\"\n #include \"analyzer/region-model.h\"\n #include \"analyzer/call-info.h\"\n+#include \"make-unique.h\"\n \n int plugin_is_GPL_compatible;\n \n@@ -95,7 +96,7 @@ class copy_across_boundary_fn : public known_function\n     if (ctxt)\n       {\n \t/* Bifurcate state, creating a \"failure\" out-edge.  */\n-\tctxt->bifurcate (new copy_failure (cd));\n+\tctxt->bifurcate (make_unique<copy_failure> (cd));\n \n \t/* The \"unbifurcated\" state is the \"success\" case.  */\n \tcopy_success success (cd,"}, {"sha": "5c1f3986aa77b09fd0ede29300ccd61f6d990f04", "filename": "gcc/testsuite/gcc.dg/plugin/analyzer_known_fns_plugin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accece8c9543e4f3f7bbf24989755dd0453658b7/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_known_fns_plugin.c?ref=accece8c9543e4f3f7bbf24989755dd0453658b7", "patch": "@@ -42,6 +42,7 @@\n #include \"analyzer/store.h\"\n #include \"analyzer/region-model.h\"\n #include \"analyzer/call-info.h\"\n+#include \"make-unique.h\"\n \n int plugin_is_GPL_compatible;\n \n@@ -152,7 +153,7 @@ class known_function_attempt_to_copy : public known_function\n     if (cd.get_ctxt ())\n       {\n \t/* Bifurcate state, creating a \"failure\" out-edge.  */\n-\tcd.get_ctxt ()->bifurcate (new copy_failure (cd));\n+\tcd.get_ctxt ()->bifurcate (make_unique<copy_failure> (cd));\n \n \t/* The \"unbifurcated\" state is the \"success\" case.  */\n \tcopy_success success (cd,"}]}