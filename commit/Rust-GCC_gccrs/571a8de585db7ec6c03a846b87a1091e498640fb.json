{"sha": "571a8de585db7ec6c03a846b87a1091e498640fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxYThkZTU4NWRiN2VjNmMwM2E4NDZiODdhMTA5MWU0OTg2NDBmYg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-07-19T02:27:38Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-07-19T02:27:38Z"}, "message": "configure.in (host_overrides): Set to host_xmake_file, don't create Make-host.\n\n\t* configure.in (host_overrides): Set to host_xmake_file, don't create\n\tMake-host.\n\t(target_overrides): Set to tmake_file, don't create Make-target.\n\t(language subdir support): Keep together.\n\nFrom-SVN: r14485", "tree": {"sha": "39c522ffec10bb27a2216805e1d3d9efb83e0241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c522ffec10bb27a2216805e1d3d9efb83e0241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/571a8de585db7ec6c03a846b87a1091e498640fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571a8de585db7ec6c03a846b87a1091e498640fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571a8de585db7ec6c03a846b87a1091e498640fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571a8de585db7ec6c03a846b87a1091e498640fb/comments", "author": null, "committer": null, "parents": [{"sha": "06f70c2a4290c6b53741773370b57a402c716d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f70c2a4290c6b53741773370b57a402c716d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f70c2a4290c6b53741773370b57a402c716d91"}], "stats": {"total": 255, "additions": 122, "deletions": 133}, "files": [{"sha": "21c5b4c9342da31cf149ef40a0e3f082ec2939e6", "filename": "gcc/configure.in", "status": "modified", "additions": 122, "deletions": 133, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571a8de585db7ec6c03a846b87a1091e498640fb/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571a8de585db7ec6c03a846b87a1091e498640fb/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=571a8de585db7ec6c03a846b87a1091e498640fb", "patch": "@@ -2710,21 +2710,6 @@ fi\n # Get the version number from the toplevel\n version=`sed -e 's/.*\\\"\\([[^ \\\"]]*\\)[[ \\\"]].*/\\1/' < ${srcdir}/version.c`\n \n-# For the current directory and all of the language subdirectories,\n-# do the rest of the script ...\n-\n-subdirs=\n-for lang in ${srcdir}/*/config-lang.in ..\n-do\n-\tcase $lang in\n-\t..) ;;\n-\t# The odd quoting in the next line works around\n-\t# an apparent bug in bash 1.12 on linux.\n-\t${srcdir}/[[*]]/config-lang.in) ;;\n-\t*) subdirs=\"$subdirs `echo $lang | sed -e 's,^.*/\\([[^/]]*\\)/config-lang.in$,\\1,'`\" ;;\n-\tesac\n-done\n-\n # Are we using gcc as the native compiler?\n case $host in\n *linux*)\t# All Linux's use gcc as the native compiler.\n@@ -2734,135 +2719,29 @@ case $host in\n \t;;\n esac\n \n-# Make empty files to contain the specs and options for each language.\n-# Then add #include lines to for a compiler that has specs and/or options.\n-\n-lang_specs_files=\n-lang_options_files=\n-rm -f specs.h options.h\n-touch specs.h options.h\n-for subdir in . $subdirs\n-do\n-\tif [[ -f $srcdir/$subdir/lang-specs.h ]]; then\n-\t\techo \"#include \\\"$subdir/lang-specs.h\\\"\" >>specs.h\n-\t\tlang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n-\tfi\n-\tif [[ -f $srcdir/$subdir/lang-options.h ]]; then\n-\t\techo \"#include \\\"$subdir/lang-options.h\\\"\" >>options.h\n-\t\tlang_options_files=\"$lang_options_files $srcdir/$subdir/lang-options.h\"\n-\tfi\n-done\n-\n # Get an absolute path to the GCC top-level source directory\n holddir=`pwd`\n cd $srcdir\n topdir=`pwd`\n cd $holddir\n \n-# These (without \"all_\") are set in each config-lang.in.\n-# `language' must be a single word so is spelled singularly.\n-all_languages=\n-all_boot_languages=\n-all_compilers=\n-all_stagestuff=\n-all_diff_excludes=\n-# List of language makefile fragments.\n-all_lang_makefiles=\n-all_headers=\n-all_lib2funcs=\n-\n-host_overrides=\"Make-host\"\n-target_overrides=\"Make-target\"\n-cross_overrides=\"/dev/null\"\n-build_overrides=\"/dev/null\"\n-language_fragments=\"Make-lang\"\n-language_hooks=\"Make-hooks\"\n-\n-rm -f Make-host Make-target Make-hooks\n-touch Make-host\n-touch Make-target\n-touch Make-hooks\n-\n # Conditionalize the makefile for this host machine.\n+host_overrides=/dev/null\n dep_host_xmake_file=\n-for f in .. ${host_xmake_file}\n-do\n-\tif [[ -f ${srcdir}/config/$f ]]\n-\tthen\n-\t\tcat ${srcdir}/config/$f >> Make-host\n-\t\tdep_host_xmake_file=\"${dep_host_xmake_file} \\$(srcdir)/config/$f\"\n-\tfi\n-done\n+if [[ x\"$host_xmake_file\" != x -a -f ${srcdir}/config/$host_xmake_file ]]\n+then\n+\thost_overrides=$srcdir/config/$host_xmake_file\n+\tdep_host_xmake_file=\"\\$(srcdir)/config/$host_xmake_file\"\n+fi\n \n # Conditionalize the makefile for this target machine.\n+target_overrides=/dev/null\n dep_tmake_file=\n-for f in .. ${tmake_file}\n-do\n-\tif [[ -f ${srcdir}/config/$f ]]\n-\tthen\n-\t\tcat ${srcdir}/config/$f >> Make-target\n-\t\tdep_tmake_file=\"${dep_tmake_file} \\$(srcdir)/config/$f\"\n-\tfi\n-done\n-\n-# Add the language fragments.\n-# Languages are added via two mechanisms.  Some information must be\n-# recorded in makefile variables, these are defined in config-lang.in.\n-# We accumulate them and plug them into the main Makefile.\n-# The other mechanism is a set of hooks for each of the main targets\n-# like `clean', `install', etc.\n-\n-for s in .. $subdirs\n-do\n-\tif [[ $s != \"..\" ]]\n-\tthen\n-\t\tlanguage=\n-\t\tboot_language=\n-\t\tcompilers=\n-\t\tstagestuff=\n-\t\tdiff_excludes=\n-\t\theaders=\n-\t\tlib2funcs=\n-\t\t. ${srcdir}/$s/config-lang.in\n-\t\tif [[ \"x$language\" = x ]]\n-\t\tthen\n-\t\t\techo \"${srcdir}/$s/config-lang.in doesn't set \\$language.\" 1>&2\n-\t\t\texit 1\n-\t\tfi\n-\t\tall_lang_makefiles=\"$all_lang_makefiles ${srcdir}/$s/Make-lang.in ${srcdir}/$s/Makefile.in\"\n-\t\tall_languages=\"$all_languages $language\"\n-\t\tif [[ \"x$boot_language\" = xyes ]]\n-\t\tthen\n-\t\t\tall_boot_languages=\"$all_boot_languages $language\"\n-\t\tfi\n-\t\tall_compilers=\"$all_compilers $compilers\"\n-\t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n-\t\tall_diff_excludes=\"$all_diff_excludes $diff_excludes\"\n-\t\tall_headers=\"$all_headers $headers\"\n-\t\tall_lib2funcs=\"$all_lib2funcs $lib2funcs\"\n-\tfi\n-done\n-\n-# Since we can't use `::' targets, we link each language in\n-# with a set of hooks, reached indirectly via lang.${target}.\n-\n-target_list=\"all.build all.cross start.encap rest.encap \\\n-\tinfo dvi \\\n-\tinstall-normal install-common install-info install-man \\\n-\tuninstall distdir \\\n-\tmostlyclean clean distclean extraclean maintainer-clean \\\n-\tstage1 stage2 stage3 stage4\"\n-for t in $target_list\n-do\n-\tx=\n-\tfor l in .. $all_languages\n-\tdo\n-\t\tif [[ $l != \"..\" ]]; then\n-\t\t\tx=\"$x $l.$t\"\n-\t\tfi\n-\tdone\n-\techo \"lang.$t: $x\" >> Make-hooks\n-done\n+if [[ x\"$tmake_file\" != x -a -f ${srcdir}/config/$tmake_file ]]\n+then\n+\ttarget_overrides=$srcdir/config/$tmake_file\n+\tdep_tmake_file=\"\\$(srcdir)/config/$tmake_file\"\n+fi\n \n # If the host doesn't support symlinks, modify CC in\n # FLAGS_TO_PASS so CC=\"stage1/xgcc -Bstage1/\" works.\n@@ -2899,6 +2778,7 @@ done\n # if this is a cross-compiler.\n # Also use all.cross instead of all.internal\n # and add cross-make to Makefile.\n+cross_overrides=\"/dev/null\"\n if [[ x$host != x$target ]]\n then\n \tcross_defines=\"CROSS=-DCROSS_COMPILE\"\n@@ -2908,6 +2788,7 @@ fi\n # When building gcc with a cross-compiler, we need to fix a few things.\n # This must come after cross-make as we want all.build to override\n # all.cross.\n+build_overrides=\"/dev/null\"\n if [[ x$build != x$host ]]\n then\n \tbuild_overrides=\"${topdir}/build-make\"\n@@ -2966,6 +2847,114 @@ if [[ -f ../ld/Makefile ]]; then\n \tfi\n fi\n \n+# Figure out what language subdirectories are present.\n+subdirs=\n+for lang in ${srcdir}/*/config-lang.in ..\n+do\n+\tcase $lang in\n+\t..) ;;\n+\t# The odd quoting in the next line works around\n+\t# an apparent bug in bash 1.12 on linux.\n+\t${srcdir}/[[*]]/config-lang.in) ;;\n+\t*) subdirs=\"$subdirs `echo $lang | sed -e 's,^.*/\\([[^/]]*\\)/config-lang.in$,\\1,'`\" ;;\n+\tesac\n+done\n+\n+# Make empty files to contain the specs and options for each language.\n+# Then add #include lines to for a compiler that has specs and/or options.\n+\n+lang_specs_files=\n+lang_options_files=\n+rm -f specs.h options.h\n+touch specs.h options.h\n+for subdir in . $subdirs\n+do\n+\tif [[ -f $srcdir/$subdir/lang-specs.h ]]; then\n+\t\techo \"#include \\\"$subdir/lang-specs.h\\\"\" >>specs.h\n+\t\tlang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n+\tfi\n+\tif [[ -f $srcdir/$subdir/lang-options.h ]]; then\n+\t\techo \"#include \\\"$subdir/lang-options.h\\\"\" >>options.h\n+\t\tlang_options_files=\"$lang_options_files $srcdir/$subdir/lang-options.h\"\n+\tfi\n+done\n+\n+# These (without \"all_\") are set in each config-lang.in.\n+# `language' must be a single word so is spelled singularly.\n+all_languages=\n+all_boot_languages=\n+all_compilers=\n+all_stagestuff=\n+all_diff_excludes=\n+# List of language makefile fragments.\n+all_lang_makefiles=\n+all_headers=\n+all_lib2funcs=\n+\n+# Add the language fragments.\n+# Languages are added via two mechanisms.  Some information must be\n+# recorded in makefile variables, these are defined in config-lang.in.\n+# We accumulate them and plug them into the main Makefile.\n+# The other mechanism is a set of hooks for each of the main targets\n+# like `clean', `install', etc.\n+\n+language_fragments=\"Make-lang\"\n+language_hooks=\"Make-hooks\"\n+\n+for s in .. $subdirs\n+do\n+\tif [[ $s != \"..\" ]]\n+\tthen\n+\t\tlanguage=\n+\t\tboot_language=\n+\t\tcompilers=\n+\t\tstagestuff=\n+\t\tdiff_excludes=\n+\t\theaders=\n+\t\tlib2funcs=\n+\t\t. ${srcdir}/$s/config-lang.in\n+\t\tif [[ \"x$language\" = x ]]\n+\t\tthen\n+\t\t\techo \"${srcdir}/$s/config-lang.in doesn't set \\$language.\" 1>&2\n+\t\t\texit 1\n+\t\tfi\n+\t\tall_lang_makefiles=\"$all_lang_makefiles ${srcdir}/$s/Make-lang.in ${srcdir}/$s/Makefile.in\"\n+\t\tall_languages=\"$all_languages $language\"\n+\t\tif [[ \"x$boot_language\" = xyes ]]\n+\t\tthen\n+\t\t\tall_boot_languages=\"$all_boot_languages $language\"\n+\t\tfi\n+\t\tall_compilers=\"$all_compilers $compilers\"\n+\t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n+\t\tall_diff_excludes=\"$all_diff_excludes $diff_excludes\"\n+\t\tall_headers=\"$all_headers $headers\"\n+\t\tall_lib2funcs=\"$all_lib2funcs $lib2funcs\"\n+\tfi\n+done\n+\n+# Since we can't use `::' targets, we link each language in\n+# with a set of hooks, reached indirectly via lang.${target}.\n+\n+rm -f Make-hooks\n+touch Make-hooks\n+target_list=\"all.build all.cross start.encap rest.encap \\\n+\tinfo dvi \\\n+\tinstall-normal install-common install-info install-man \\\n+\tuninstall distdir \\\n+\tmostlyclean clean distclean extraclean maintainer-clean \\\n+\tstage1 stage2 stage3 stage4\"\n+for t in $target_list\n+do\n+\tx=\n+\tfor l in .. $all_languages\n+\tdo\n+\t\tif [[ $l != \"..\" ]]; then\n+\t\t\tx=\"$x $l.$t\"\n+\t\tfi\n+\tdone\n+\techo \"lang.$t: $x\" >> Make-hooks\n+done\n+\n # Process the language fragments\n ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\"\n "}]}