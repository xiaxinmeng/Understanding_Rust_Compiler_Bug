{"sha": "1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "node_id": "C_kwDOANBUbNoAKDFlMjBiYjY3MzdlMTE3M2EwYzNlZjNlOWU0OGMwZWRhNDA5ODVkZWQ", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-03-27T02:43:39Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-03-27T02:43:39Z"}, "message": "rs6000: Make _mm_slli_si128 and _mm_bslli_si128 consistent [PR109167]\n\nAs PR109167 shows, it's unexpected to have two different\nimplementation ways for _mm_slli_si128 and _mm_bslli_si128,\nas gcc/config/i386/emmintrin.h they should be the same.  So\nthis patch is to fix it accordingly.\n\n\tPR target/109167\n\ngcc/ChangeLog:\n\n\t* config/rs6000/emmintrin.h (_mm_bslli_si128): Move the implementation\n\tfrom ...\n\t(_mm_slli_si128): ... here.  Change to call _mm_bslli_si128 directly.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr109167.c: New test.", "tree": {"sha": "d5e278338ac766302faf84f23922e599a2120b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5e278338ac766302faf84f23922e599a2120b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33fc0775706e4db80d584c477608e28f4da0a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33fc0775706e4db80d584c477608e28f4da0a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33fc0775706e4db80d584c477608e28f4da0a6f"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "44d01a83d8d04c7e9fa2b21b3cc76fe25eefe740", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "patch": "@@ -1601,8 +1601,14 @@ _mm_bslli_si128 (__m128i __A, const int __N)\n   __v16qu __result;\n   const __v16qu __zeros = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n \n-  if (__N >= 0 && __N < 16)\n+  if (__N == 0)\n+    return __A;\n+  else if (__N > 0 && __N < 16)\n+#ifdef __LITTLE_ENDIAN__\n     __result = vec_sld ((__v16qu) __A, __zeros, __N);\n+#else\n+    __result = vec_sld (__zeros, (__v16qu) __A, (16 - __N));\n+#endif\n   else\n     __result = __zeros;\n \n@@ -1647,23 +1653,9 @@ _mm_srli_si128 (__m128i __A, const int __N)\n }\n \n extern __inline  __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_slli_si128 (__m128i __A, const int _imm5)\n+_mm_slli_si128 (__m128i __A, const int __N)\n {\n-  __v16qu __result;\n-  const __v16qu __zeros = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n-\n-  if (_imm5 == 0)\n-    return __A;\n-  else if (_imm5 > 0 && _imm5 < 16)\n-#ifdef __LITTLE_ENDIAN__\n-    __result = vec_sld ((__v16qu) __A, __zeros, _imm5);\n-#else\n-    __result = vec_sld (__zeros, (__v16qu) __A, (16 - _imm5));\n-#endif\n-  else\n-    __result = __zeros;\n-\n-  return (__m128i) __result;\n+  return _mm_bslli_si128 (__A, __N);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "d490c995b141e96be09847abe25e01aef4b2c15a", "filename": "gcc/testsuite/gcc.target/powerpc/pr109167.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr109167.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e20bb6737e1173a0c3ef3e9e48c0eda40985ded/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr109167.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr109167.c?ref=1e20bb6737e1173a0c3ef3e9e48c0eda40985ded", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* Verify there is no warning message.  */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#include <emmintrin.h>\n+\n+#define N 5\n+\n+__attribute__ ((noipa)) __m128i\n+test1 (__m128i v)\n+{\n+  return _mm_bslli_si128 (v, N);\n+}\n+\n+__attribute__ ((noipa)) __m128i\n+test2 (__m128i v)\n+{\n+  return _mm_slli_si128 (v, N);\n+}\n+\n+typedef union\n+{\n+  __m128i x;\n+  unsigned char a[16];\n+} union128i_ub;\n+\n+int main()\n+{\n+  union128i_ub v;\n+  v.x\n+    = _mm_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, 80, 40, 100, 15, 98, 25, 98, 7);\n+\n+  union128i_ub r1, r2;\n+  r1.x = test1 (v.x);\n+  r2.x = test2 (v.x);\n+\n+  for (int i = 0; i < 16; i++)\n+    if (r1.a[i] != r2.a[i])\n+      __builtin_abort();\n+\n+  return 0;\n+}\n+"}]}