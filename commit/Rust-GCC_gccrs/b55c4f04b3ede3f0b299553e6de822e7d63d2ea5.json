{"sha": "b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1YzRmMDRiM2VkZTNmMGIyOTk1NTNlNmRlODIyZTdkNjNkMmVhNQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2009-01-05T19:34:02Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2009-01-05T19:34:02Z"}, "message": "re PR fortran/37159 (RANDOM_SEED:  GET=  check array size at compile time and respect -fdefault-integer-*)\n\ngcc/fortran:\n2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/37159\n        * check.c (gfc_check_random_seed): Added size check for GET\n        dummy argument, reworded error messages to follow common pattern.\n\n\ngcc/testsuite:\n2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/37159\n        * gfortran.dg/random_seed_1.f90: Updated.\n\nFrom-SVN: r143089", "tree": {"sha": "1d1722549d8cbb51b27aa4567e09ce0373c1253a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d1722549d8cbb51b27aa4567e09ce0373c1253a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2042cb0422f269f12bbffcbad6a5d63a27d19fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2042cb0422f269f12bbffcbad6a5d63a27d19fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2042cb0422f269f12bbffcbad6a5d63a27d19fd8"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "8252bd4b18f87f00cd0c858847588c8b41a9de0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "patch": "@@ -1,3 +1,9 @@\n+2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/37159\n+\t* check.c (gfc_check_random_seed): Added size check for GET\n+\tdummy argument, reworded error messages to follow common pattern.\n+\n 2009-01-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/38672"}, {"sha": "5b6a2ebc3025de1cded43595fc53936faebc0937", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "patch": "@@ -3136,14 +3136,15 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n {\n   unsigned int nargs = 0, kiss_size;\n   locus *where = NULL;\n-  mpz_t put_size;\n+  mpz_t put_size, get_size;\n   bool have_gfc_real_16; /* Try and mimic HAVE_GFC_REAL_16 in libgfortran.  */\n \n   have_gfc_real_16 = gfc_validate_kind (BT_REAL, 16, true) != -1;\n \n-  /* Keep these values in sync with kiss_size in libgfortran/random.c.  */\n-  kiss_size = have_gfc_real_16 ? 12 : 8;\n-  \n+  /* Keep the number of bytes in sync with kiss_size in\n+     libgfortran/intrinsics/random.c.  */\n+  kiss_size = (have_gfc_real_16 ? 48 : 32) / gfc_default_integer_kind;\n+\n   if (size != NULL)\n     {\n       if (size->expr_type != EXPR_VARIABLE\n@@ -3186,9 +3187,10 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \n       if (gfc_array_size (put, &put_size) == SUCCESS\n \t  && mpz_get_ui (put_size) < kiss_size)\n-\tgfc_error (\"Array PUT of intrinsic %s is too small (%i/%i) at %L\", \n-\t\t   gfc_current_intrinsic, (int) mpz_get_ui (put_size),\n-\t\t   kiss_size, where);\n+\tgfc_error (\"Size of '%s' argument of '%s' intrinsic at %L \"\n+\t\t   \"too small (%i/%i)\",\n+\t\t   gfc_current_intrinsic_arg[1], gfc_current_intrinsic, where, \n+\t\t   (int) mpz_get_ui (put_size), kiss_size);\n     }\n \n   if (get != NULL)\n@@ -3214,6 +3216,13 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \n       if (kind_value_check (get, 2, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n+\n+       if (gfc_array_size (get, &get_size) == SUCCESS\n+ \t  && mpz_get_ui (get_size) < kiss_size)\n+\tgfc_error (\"Size of '%s' argument of '%s' intrinsic at %L \"\n+\t\t   \"too small (%i/%i)\",\n+\t\t   gfc_current_intrinsic_arg[2], gfc_current_intrinsic, where, \n+\t\t   (int) mpz_get_ui (get_size), kiss_size);\n     }\n \n   /* RANDOM_SEED may not have more than one non-optional argument.  */"}, {"sha": "fbb35296bda11ad8d3a43afddba326f6acd21f5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "patch": "@@ -1,3 +1,8 @@\n+2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/37159\n+\t* gfortran.dg/random_seed_1.f90: Updated.\n+\n 2009-01-05  Mikael Morin  <mikael.morin@tele2.fr>\n \n \tPR fortran/38669"}, {"sha": "45627ff52873db7dc675d7f8b3d672b03249c5a9", "filename": "gcc/testsuite/gfortran.dg/random_seed_1.f90", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90?ref=b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "patch": "@@ -6,9 +6,35 @@\n ! Possible improvement:\n ! Provide a separate testcase for systems that support REAL(16),\n ! to test the minimum size of 12 (instead of 8).\n+!\n+! Updated to check for arrays of unexpected size,\n+! this also works for -fdefault-integer-8.\n+!\n \n PROGRAM random_seed_1\n   IMPLICIT NONE\n-  INTEGER :: small(7)\n-  CALL RANDOM_SEED(PUT=small)   ! { dg-error \"is too small\" }\n+  INTEGER, PARAMETER :: k = selected_real_kind (precision (0.0_8) + 1)\n+  INTEGER, PARAMETER :: nbytes = MERGE(48, 32, k == 16)\n+\n+  ! '+1' to avoid out-of-bounds warnings\n+  INTEGER, PARAMETER    :: n = nbytes / KIND(n) + 1\n+  INTEGER, DIMENSION(n) :: seed\n+\n+  ! Get seed, array too small\n+  CALL RANDOM_SEED(GET=seed(1:(n-2)))  ! { dg-error \"too small\" }\n+\n+  ! Get seed, array bigger than necessary\n+  CALL RANDOM_SEED(GET=seed(1:n))\n+\n+  ! Get seed, proper size\n+  CALL RANDOM_SEED(GET=seed(1:(n-1)))\n+\n+  ! Put too few bytes\n+  CALL RANDOM_SEED(PUT=seed(1:(n-2)))  ! { dg-error \"too small\" }\n+\n+  ! Put too many bytes\n+  CALL RANDOM_SEED(PUT=seed(1:n))\n+\n+  ! Put the right amount of bytes\n+  CALL RANDOM_SEED(PUT=seed(1:(n-1)))\n END PROGRAM random_seed_1"}]}