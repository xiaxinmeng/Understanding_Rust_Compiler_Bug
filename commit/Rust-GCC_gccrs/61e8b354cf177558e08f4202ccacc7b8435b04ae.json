{"sha": "61e8b354cf177558e08f4202ccacc7b8435b04ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlOGIzNTRjZjE3NzU1OGUwOGY0MjAyY2NhY2M3Yjg0MzViMDRhZQ==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1999-10-19T10:44:30Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-10-19T10:44:30Z"}, "message": "Applied Mumit Khan's patch to fix #pragma push/pop handling.\n\nFrom-SVN: r30084", "tree": {"sha": "925ef3f3d7ebb9e6c59b3670bbcacbd797cf2da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/925ef3f3d7ebb9e6c59b3670bbcacbd797cf2da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e8b354cf177558e08f4202ccacc7b8435b04ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e8b354cf177558e08f4202ccacc7b8435b04ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e8b354cf177558e08f4202ccacc7b8435b04ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e8b354cf177558e08f4202ccacc7b8435b04ae/comments", "author": null, "committer": null, "parents": [{"sha": "f099b1c909de8afb50264af41960c7b18b7320f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f099b1c909de8afb50264af41960c7b18b7320f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f099b1c909de8afb50264af41960c7b18b7320f1"}], "stats": {"total": 94, "additions": 29, "deletions": 65}, "files": [{"sha": "7be360ddcb3f9162850488e7ce025a694e5c96a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61e8b354cf177558e08f4202ccacc7b8435b04ae", "patch": "@@ -1,3 +1,15 @@\n+Tue Oct 19 11:41:12 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n+\n+\t* c-pragma.h (PRAGMA_INSERT_ATTRIBUTES): Delete macro.\n+\t(insert_pack_attributes): Delete prototype.\n+\n+\t* c-pragma.c (default_alignment): New static variable.\n+\t(push_alignment): Initialize to current effective alignment.\n+\t(pop_alignment): Use to set new alignment.\n+\t(insert_pack_attributes): Delete function.\n+\t(handle_pragma_token): Set default_alignment as well each time \n+\ta #pragma pack(<n>) is encountered.\n+\n Tue Oct 19 02:03:00 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* reg-stack.c (stack_result): Aggregates are not returned in"}, {"sha": "36aa2c4dbaf07dfe9227c82ef23ce86d78f9e4c7", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 17, "deletions": 62, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=61e8b354cf177558e08f4202ccacc7b8435b04ae", "patch": "@@ -51,6 +51,13 @@ typedef struct align_stack\n \n static struct align_stack * alignment_stack = NULL;\n \n+/* If we have a \"global\" #pragma pack(<n>) if effect when the first\n+   #pragma push(pack,<n>) is encountered, this stores the the value of \n+   maximum_field_alignment in effect.  When the final pop_alignment() \n+   happens, we restore the value to this, not to a value of 0 for\n+   maximum_field_alignment.  Value is in bits. */\n+static int  default_alignment;\n+\n static int  push_alignment PROTO((int, tree));\n static int  pop_alignment  PROTO((tree));\n \n@@ -95,6 +102,12 @@ Alignment must be a small power of two, not %d, in #pragma pack\",\n       entry->id         = id;\n       entry->prev       = alignment_stack;\n       \n+      /* The current value of maximum_field_alignment is not necessarily \n+\t 0 since there may be a #pragma pack(<n>) in effect; remember it \n+\t so that we can restore it after the final #pragma pop(). */\n+      if (alignment_stack == NULL)\n+\tdefault_alignment = maximum_field_alignment;\n+      \n       alignment_stack = entry;\n \n       maximum_field_alignment = alignment * 8;\n@@ -142,7 +155,7 @@ pop_alignment (id)\n       entry = alignment_stack->prev;\n \n       if (entry == NULL)\n-\tmaximum_field_alignment = 0;\n+\tmaximum_field_alignment = default_alignment;\n       else\n \tmaximum_field_alignment = entry->alignment * 8;\n \n@@ -153,67 +166,6 @@ pop_alignment (id)\n \n   return 1;\n }\n-\n-/* Generate 'packed' and 'aligned' attributes for decls whilst a\n-   #pragma pack(push... is in effect.  */\n-void\n-insert_pack_attributes (node, attributes, prefix)\n-     tree node;\n-     tree * attributes;\n-     tree * prefix;\n-{\n-  tree a;\n-  int field_alignment;\n-\n-  /* If we are not packing, then there is nothing to do.  */\n-  if (maximum_field_alignment == 0\n-      || alignment_stack == NULL)\n-    return;\n-\n-  /* We are only interested in fields.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (node)) != 'd'\n-      || TREE_CODE (node) != FIELD_DECL)\n-    return;\n-  \n-  field_alignment = TYPE_ALIGN (TREE_TYPE (node));\n-  if (field_alignment <= 0 || field_alignment > maximum_field_alignment)\n-    field_alignment = maximum_field_alignment;\n-\n-  /* Add a 'packed' attribute.  */\n-  * attributes = tree_cons (get_identifier (\"packed\"), NULL, * attributes);\n-  \n-  /* If the alignment is > 8 then add an alignment attribute as well.  */\n-  if (field_alignment > 8)\n-    {\n-      /* If the aligned attribute is already present then do not override it.  */\n-      for (a = * attributes; a; a = TREE_CHAIN (a))\n-\t{\n-\t  tree name = TREE_PURPOSE (a);\n-\t  if (strcmp (IDENTIFIER_POINTER (name), \"aligned\") == 0)\n-\t    break;\n-\t}\n-      \n-      if (a == NULL)\n-\tfor (a = * prefix; a; a = TREE_CHAIN (a))\n-\t  {\n-\t    tree name = TREE_PURPOSE (a);\n-\t    if (strcmp (IDENTIFIER_POINTER (name), \"aligned\") == 0)\n-\t      break;\n-\t  }\n-  \n-      if (a == NULL)\n-\t{\n-\t  * attributes = tree_cons\n-\t      (get_identifier (\"aligned\"),\n-\t       tree_cons (NULL,\n-\t\t\t  build_int_2 (field_alignment / 8, 0),\n-\t\t\t  NULL),\n-\t       * attributes);\n-\t}\n-    }\n-\n-  return;\n-}\n #endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \f\n /* Handle one token of a pragma directive.  TOKEN is the current token, and\n@@ -267,6 +219,9 @@ handle_pragma_token (string, token)\n \t  if (state == ps_right)\n \t    {\n \t      maximum_field_alignment = align * 8;\n+#ifdef HANDLE_PRAGMA_PACK_PUSH_POP\n+\t      default_alignment = maximum_field_alignment;\n+#endif\n \t      ret_val = 1;\n \t    }\n \t  else"}, {"sha": "7a0848c18198daaaa7212565957b395d2e135aa0", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e8b354cf177558e08f4202ccacc7b8435b04ae/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=61e8b354cf177558e08f4202ccacc7b8435b04ae", "patch": "@@ -39,9 +39,6 @@ Boston, MA 02111-1307, USA.  */\n /* If we are supporting #pragma pack(push... then we automatically\n    support #pragma pack(<n>)  */\n #define HANDLE_PRAGMA_PACK 1\n-#define PRAGMA_INSERT_ATTRIBUTES(node, pattr, prefix_attr) \\\n-  insert_pack_attributes (node, pattr, prefix_attr)\n-extern void insert_pack_attributes PROTO((tree, tree *, tree *));\n #endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \n "}]}