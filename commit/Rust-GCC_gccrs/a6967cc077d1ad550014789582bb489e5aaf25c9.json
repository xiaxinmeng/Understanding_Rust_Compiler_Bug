{"sha": "a6967cc077d1ad550014789582bb489e5aaf25c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5NjdjYzA3N2QxYWQ1NTAwMTQ3ODk1ODJiYjQ4OWU1YWFmMjVjOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-10-20T18:09:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-20T18:09:06Z"}, "message": "decl.c (init_decl_processing): Give null_node unknown* type.\n\n\t* decl.c (init_decl_processing): Give null_node unknown* type.\n\t* typeck.c (comp_target_types): Handle UNKNOWN_TYPE.\n\t(common_type): Likewise.\n\t* error.c (args_as_string): Recognize null_node.\n\nFrom-SVN: r16100", "tree": {"sha": "be3f9e12837e22ede1e765b7ffaacc328c4d7341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be3f9e12837e22ede1e765b7ffaacc328c4d7341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6967cc077d1ad550014789582bb489e5aaf25c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6967cc077d1ad550014789582bb489e5aaf25c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6967cc077d1ad550014789582bb489e5aaf25c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6967cc077d1ad550014789582bb489e5aaf25c9/comments", "author": null, "committer": null, "parents": [{"sha": "3a133c72de0a92a71f2527a372d153c31922483c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a133c72de0a92a71f2527a372d153c31922483c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a133c72de0a92a71f2527a372d153c31922483c"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "c30348906ef10004a9da7a6f66cf653ab646c3cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6967cc077d1ad550014789582bb489e5aaf25c9", "patch": "@@ -1,3 +1,10 @@\n+Mon Oct 20 10:52:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Give null_node unknown* type.\n+\t* typeck.c (comp_target_types): Handle UNKNOWN_TYPE.\n+\t(common_type): Likewise.\n+\t* error.c (args_as_string): Recognize null_node.\n+\n Thu Oct 16 15:31:09 1997  Judy Goldberg <judygold@sanwafp.com>\n \n \t* pt.c (determine_explicit_specialization): Initialize \"dummy\""}, {"sha": "59fdbb32757d66dc09da3bb2c20ab6a50b954c60", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a6967cc077d1ad550014789582bb489e5aaf25c9", "patch": "@@ -4998,11 +4998,6 @@ init_decl_processing ()\n   TREE_TYPE (null_pointer_node) = build_pointer_type (void_type_node);\n   layout_type (TREE_TYPE (null_pointer_node));\n      \n-  if (flag_ansi)\n-    TREE_TYPE (null_node) = type_for_size (POINTER_SIZE, 0);\n-  else\n-    TREE_TYPE (null_node) = build_pointer_type (void_type_node);\n-\n   /* Used for expressions that do nothing, but are not errors.  */\n   void_zero_node = build_int_2 (0, 0);\n   TREE_TYPE (void_zero_node) = void_type_node;\n@@ -5315,7 +5310,14 @@ init_decl_processing ()\n   TYPE_MODE (unknown_type_node) = TYPE_MODE (void_type_node);\n   /* Indirecting an UNKNOWN_TYPE node yields an UNKNOWN_TYPE node.  */\n   TREE_TYPE (unknown_type_node) = unknown_type_node;\n-  /* Looking up TYPE_POINTER_TO and TYPE_REFERENCE_TO yield the same result.  */\n+\n+  if (flag_ansi)\n+    TREE_TYPE (null_node) = type_for_size (POINTER_SIZE, 0);\n+  else\n+    TREE_TYPE (null_node) = build_pointer_type (unknown_type_node);\n+\n+  /* Looking up TYPE_POINTER_TO and TYPE_REFERENCE_TO yield the same\n+     result.  */\n   TYPE_POINTER_TO (unknown_type_node) = unknown_type_node;\n   TYPE_REFERENCE_TO (unknown_type_node) = unknown_type_node;\n "}, {"sha": "5128175233f495b1abb90ea91e56ecbd72a9204f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a6967cc077d1ad550014789582bb489e5aaf25c9", "patch": "@@ -1763,7 +1763,10 @@ args_as_string (p, v)\n   OB_INIT ();\n   for (; p; p = TREE_CHAIN (p))\n     {\n-      dump_type (error_type (TREE_VALUE (p)), v);\n+      if (TREE_VALUE (p) == null_node)\n+\tOB_PUTS (\"NULL\");\n+      else\n+\tdump_type (error_type (TREE_VALUE (p)), v);\n       if (TREE_CHAIN (p))\n \tOB_PUTS (\", \");\n     }"}, {"sha": "aafea54b1e4195f616f6ec964ef8017701ea5d2d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6967cc077d1ad550014789582bb489e5aaf25c9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a6967cc077d1ad550014789582bb489e5aaf25c9", "patch": "@@ -451,6 +451,10 @@ common_type (t1, t2)\n \t  target = tt1;\n \telse if (tt1 == void_type_node || tt2 == void_type_node)\n \t  target = void_type_node;\n+\telse if (tt1 == unknown_type_node)\n+\t  target = tt2;\n+\telse if (tt2 == unknown_type_node)\n+\t  target = tt1;\n \telse\n \t  target = common_type (tt1, tt2);\n \n@@ -871,7 +875,10 @@ comp_target_types (ttl, ttr, nptrs)\n \n       if (nptrs > 0)\n \t{\n-\t  if (TREE_CODE (ttl) == VOID_TYPE\n+\t  if (TREE_CODE (ttl) == UNKNOWN_TYPE\n+\t      || TREE_CODE (ttr) == UNKNOWN_TYPE)\n+\t    return 1;\n+\t  else if (TREE_CODE (ttl) == VOID_TYPE\n \t\t   && TREE_CODE (ttr) != FUNCTION_TYPE\n \t\t   && TREE_CODE (ttr) != METHOD_TYPE\n \t\t   && TREE_CODE (ttr) != OFFSET_TYPE)"}]}