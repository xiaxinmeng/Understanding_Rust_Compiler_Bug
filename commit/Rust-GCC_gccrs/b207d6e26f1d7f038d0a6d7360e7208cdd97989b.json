{"sha": "b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwN2Q2ZTI2ZjFkN2YwMzhkMGE2ZDczNjBlNzIwOGNkZDk3OTg5Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-08-26T19:35:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-08-26T19:35:13Z"}, "message": "re PR c++/19004 (ICE in uses_template_parms at cp/pt.c:4860)\n\n\tPR c++/19004\n\t* pt.c (uses_template_parms): Handle IDENTIFIER_NODE.\n\t(type_dependent_expression_p): Allow BASELINKs whose associated\n\tfunctions are simply a FUNCTION_DECL.\n\n\tPR c++/19004\n\t* g++.dg/template/nontype13.C: New test.\n\nFrom-SVN: r103531", "tree": {"sha": "42404833ca3e44c8e6e3cbdf5ee9323a72f203e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42404833ca3e44c8e6e3cbdf5ee9323a72f203e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/comments", "author": null, "committer": null, "parents": [{"sha": "b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84f46516bc9e5293d8bc9333b5e8f494e223ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84f46516bc9e5293d8bc9333b5e8f494e223ff2"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "4c2c72ed066bece036ce938a514084d03c6607d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "patch": "@@ -1,5 +1,10 @@\n 2005-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19004\n+\t* pt.c (uses_template_parms): Handle IDENTIFIER_NODE.\n+\t(type_dependent_expression_p): Allow BASELINKs whose associated\n+\tfunctions are simply a FUNCTION_DECL.\n+\n \tPR c++/23491\n \t* cp-tree.h (build_vec_init): Adjust prototype.\n \t* init.c (perform_member_init): Adjust call to build_vec_init.\n@@ -9,11 +14,6 @@\n \tdefault initialization of vector elements when set.\n \t* typeck.c (build_modify_expr): Adjust call to build_vec_init.\n \n-\tPR c++/19004\n-\t* pt.c (uses_template_parms): Handle IDENTIFIER_NODE.\n-\t(type_dependent_expression_p): Allow BASELINKs whose associated\n-\tfunctions are simply a FUNCTION_DECL.\n-\n 2005-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20817"}, {"sha": "386dc2ff0d71b5f03630b1450eb70a9633e06e57", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "patch": "@@ -4956,6 +4956,7 @@ uses_template_parms (tree t)\n \t   || TREE_CODE (t) == TEMPLATE_PARM_INDEX\n \t   || TREE_CODE (t) == OVERLOAD\n \t   || TREE_CODE (t) == BASELINK\n+\t   || TREE_CODE (t) == IDENTIFIER_NODE\n \t   || CONSTANT_CLASS_P (t))\n     dependent_p = (type_dependent_expression_p (t)\n \t\t   || value_dependent_expression_p (t));\n@@ -12356,7 +12357,8 @@ type_dependent_expression_p (tree expression)\n \t    return true;\n \t  expression = TREE_OPERAND (expression, 0);\n \t}\n-      gcc_assert (TREE_CODE (expression) == OVERLOAD);\n+      gcc_assert (TREE_CODE (expression) == OVERLOAD\n+\t\t  || TREE_CODE (expression) == FUNCTION_DECL);\n \n       while (expression)\n \t{"}, {"sha": "24179e1c3aaf0f54b6a038e41d92d6fe3fe8cb46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "patch": "@@ -1,5 +1,8 @@\n 2005-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19004\n+\t* g++.dg/template/nontype13.C: New test.\n+\t\n \tPR c++/23491\n \t* g++.dg/init/new14.C: New test.\n \t* g++.dg/expr/anew1.C: Do not XFAIL."}, {"sha": "5ff697a933a23218bf2085ccf98b7b8ed1ab0d4c", "filename": "gcc/testsuite/g++.dg/template/nontype13.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b207d6e26f1d7f038d0a6d7360e7208cdd97989b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C?ref=b207d6e26f1d7f038d0a6d7360e7208cdd97989b", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/19004\n+\n+template<typename T>\n+struct Dummy\n+{\n+  void evil()\n+  {\n+    this->template tester<true>();\n+  }\n+      \n+  template<bool B>\n+  void tester()\n+  {\n+    bar<evil>()(); // { dg-error \"argument\" }\n+  }\n+  template<bool B>\n+  struct bar\n+  {\n+    void operator()()\n+    { }\n+  };\n+};\n+\n+int main()\n+{\n+  Dummy<int> d;\n+  d.tester<true> (); // { dg-error \"instantiated\" }\n+}\n+"}]}