{"sha": "d60d63a00bb50ba6896939705c589578177b404d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwZDYzYTAwYmI1MGJhNjg5NjkzOTcwNWM1ODk1NzgxNzdiNDA0ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-29T19:55:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-29T22:31:48Z"}, "message": "analyzer: fix signal-handler registration location [PR95188]\n\nPR analyzer/95188 reports that diagnostics from\n-Wanalyzer-unsafe-call-within-signal-handler use the wrong\nsource location when reporting the signal-handler registration\nevent in the diagnostic_path.  The diagnostics erroneously use the\nlocation of the first stmt in the basic block containing the call\nto \"signal\", rather than that of the call itself.\n\nFixed thusly.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/95188\n\t* engine.cc (stmt_requires_new_enode_p): Split enodes before\n\t\"signal\" calls.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/95188\n\t* gcc.dg/analyzer/signal-registration-loc.c: New test.", "tree": {"sha": "2390b33d72cd9991a58cf27f41884a809a2a3141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2390b33d72cd9991a58cf27f41884a809a2a3141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d60d63a00bb50ba6896939705c589578177b404d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60d63a00bb50ba6896939705c589578177b404d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60d63a00bb50ba6896939705c589578177b404d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60d63a00bb50ba6896939705c589578177b404d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6649df18f98d5baf89b56a09b816b5eeb5f67bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6649df18f98d5baf89b56a09b816b5eeb5f67bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6649df18f98d5baf89b56a09b816b5eeb5f67bcb"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "0e79254ad606ee94166769bfe46e8b88336531cc", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60d63a00bb50ba6896939705c589578177b404d/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60d63a00bb50ba6896939705c589578177b404d/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=d60d63a00bb50ba6896939705c589578177b404d", "patch": "@@ -2677,13 +2677,23 @@ static bool\n stmt_requires_new_enode_p (const gimple *stmt,\n \t\t\t   const gimple *prev_stmt)\n {\n-  /* Stop consolidating at calls to\n-     \"__analyzer_dump_exploded_nodes\", so they always appear at the\n-     start of an exploded_node.  */\n   if (const gcall *call = dyn_cast <const gcall *> (stmt))\n-    if (is_special_named_call_p (call, \"__analyzer_dump_exploded_nodes\",\n-\t\t\t 1))\n-      return true;\n+    {\n+      /* Stop consolidating at calls to\n+\t \"__analyzer_dump_exploded_nodes\", so they always appear at the\n+\t start of an exploded_node.  */\n+      if (is_special_named_call_p (call, \"__analyzer_dump_exploded_nodes\",\n+\t\t\t\t   1))\n+\treturn true;\n+\n+      /* sm-signal.cc injects an additional custom eedge at \"signal\" calls\n+\t from the registration enode to the handler enode, separate from the\n+\t regular next state, which defeats the \"detect state change\" logic\n+\t in process_node.  Work around this via special-casing, to ensure\n+\t we split the enode immediately before any \"signal\" call.  */\n+      if (is_special_named_call_p (call, \"signal\", 2))\n+\treturn true;\n+    }\n \n   /* If we had a PREV_STMT with an unknown location, and this stmt\n      has a known location, then if a state change happens here, it"}, {"sha": "4bac1269b1e1b053798c5960bb31a6952170aee2", "filename": "gcc/testsuite/gcc.dg/analyzer/signal-registration-loc.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60d63a00bb50ba6896939705c589578177b404d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-registration-loc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60d63a00bb50ba6896939705c589578177b404d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-registration-loc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-registration-loc.c?ref=d60d63a00bb50ba6896939705c589578177b404d", "patch": "@@ -0,0 +1,23 @@\n+/* Ensure we use the correct location when reporting where the\n+   signal handler was registered (PR analyzer/95188).  */\n+\n+/* { dg-require-effective-target signal } */\n+\n+#include <stdio.h>\n+#include <signal.h>\n+\n+int g;\n+extern int foo (void);\n+\n+static void\n+handler (int n)\n+{\n+  fprintf (stderr, \"got here: %i\\n\", g); /* { dg-warning \"call to 'fprintf' from within signal handler\" } */\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  g = foo (); /* { dg-bogus \"registering\" } */\n+  signal (SIGSEGV, handler); /* { dg-message \"registering 'handler' as signal handler\" } */\n+  return 0;\n+}"}]}