{"sha": "c530479e15d804667c83dfb738ce9cae035de9f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzMDQ3OWUxNWQ4MDQ2NjdjODNkZmI3MzhjZTljYWUwMzVkZTlmMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-08T04:51:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-08T04:51:16Z"}, "message": "c-typeck.c (type_lists_compatible_p): Use simple_type_promotes_to.\n\n        * c-typeck.c (type_lists_compatible_p): Use simple_type_promotes_to.\n        (self_promoting_type_p): Delete.\n        (self_promoting_args_p): Move ...\n        * c-common.c: ... here.\n        (c_common_nodes_and_builtins): Initialize lang_type_promotes_to.\n        (simple_type_promotes_to): New.\n        * builtins.c (lang_type_promotes_to): New.\n        (expand_builtin_va_arg): Use it to give diagnostic for illegal types.\n        * c-tree.h (C_PROMOTING_INTEGER_TYPE_P): Move ...\n        * c-common.h: ... here.\n        (self_promoting_args_p, simple_type_promotes_to): Declare.\n        * c-decl.c (duplicate_decls): Use simple_type_promotes_to.\n        (grokdeclarator): Likewise.\n        * tree.h (lang_type_promotes_to): Declare.\n\n        * cp-tree.h (C_PROMOTING_INTEGER_TYPE_P): Delete.\n        * typeck.c (self_promoting_args_p): Delete.\n\n        * gcc.dg/va-arg-1.c: New.\n\nFrom-SVN: r29180", "tree": {"sha": "cc01394964ac75996779fc8fc5ebdb1781aeb69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc01394964ac75996779fc8fc5ebdb1781aeb69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c530479e15d804667c83dfb738ce9cae035de9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c530479e15d804667c83dfb738ce9cae035de9f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c530479e15d804667c83dfb738ce9cae035de9f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c530479e15d804667c83dfb738ce9cae035de9f2/comments", "author": null, "committer": null, "parents": [{"sha": "472236af04ca7daa01b6b5b1a00dafaf91d31f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472236af04ca7daa01b6b5b1a00dafaf91d31f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472236af04ca7daa01b6b5b1a00dafaf91d31f1f"}], "stats": {"total": 279, "additions": 163, "deletions": 116}, "files": [{"sha": "5770cfdb5ed1bac191d7c22288ee236aeb20beb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1,3 +1,20 @@\n+Tue Sep  7 21:41:38 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* c-typeck.c (type_lists_compatible_p): Use simple_type_promotes_to.\n+\t(self_promoting_type_p): Delete.\n+\t(self_promoting_args_p): Move ...\n+\t* c-common.c: ... here.\n+\t(c_common_nodes_and_builtins): Initialize lang_type_promotes_to.\n+\t(simple_type_promotes_to): New.\n+\t* builtins.c (lang_type_promotes_to): New.\n+\t(expand_builtin_va_arg): Use it to give diagnostic for illegal types.\n+\t* c-tree.h (C_PROMOTING_INTEGER_TYPE_P): Move ...\n+\t* c-common.h: ... here.\n+\t(self_promoting_args_p, simple_type_promotes_to): Declare.\n+\t* c-decl.c (duplicate_decls): Use simple_type_promotes_to.\n+\t(grokdeclarator): Likewise.\n+\t* tree.h (lang_type_promotes_to): Declare.\n+\n Tue Sep  7 17:15:21 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \tAdd some machine-dependent GC roots."}, {"sha": "ebd7b12abd80bf0c176ba989f8570d162821d36f", "filename": "gcc/builtins.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -52,6 +52,8 @@ Boston, MA 02111-1307, USA.  */\n #define OUTGOING_REGNO(IN) (IN)\n #endif\n \n+tree (*lang_type_promotes_to) PROTO((tree));\n+\n static int get_pointer_alignment\tPROTO((tree, unsigned));\n static tree c_strlen\t\t\tPROTO((tree));\n static rtx get_memory_rtx\t\tPROTO((tree));\n@@ -1972,11 +1974,43 @@ expand_builtin_va_arg (valist, type)\n      tree valist, type;\n {\n   rtx addr, result;\n+  tree promoted_type;\n \n   if (TYPE_MAIN_VARIANT (TREE_TYPE (valist))\n       != TYPE_MAIN_VARIANT (va_list_type_node))\n     {\n-      error (\"first argument to `__builtin_va_arg' not of type `va_list'\");\n+      error (\"first argument to `va_arg' not of type `va_list'\");\n+      addr = const0_rtx;\n+    }\n+  else if ((promoted_type = (*lang_type_promotes_to) (type)) != NULL_TREE)\n+    {\n+      const char *name = \"<anonymous type>\", *pname;\n+      static int gave_help;\n+\n+      if (TYPE_NAME (type))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n+\t    name = IDENTIFIER_POINTER (TYPE_NAME (type));\n+\t  else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (type)))\n+\t    name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t}\n+      if (TYPE_NAME (promoted_type))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (promoted_type)) == IDENTIFIER_NODE)\n+\t    pname = IDENTIFIER_POINTER (TYPE_NAME (promoted_type));\n+\t  else if (TREE_CODE (TYPE_NAME (promoted_type)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (promoted_type)))\n+\t    pname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (promoted_type)));\n+\t}\n+\n+      error (\"`%s' is promoted to `%s' when passed through `...'\", name, pname);\n+      if (! gave_help)\n+\t{\n+\t  gave_help = 1;\n+\t  error (\"(so you should pass `%s' not `%s' to `va_arg')\", pname, name);\n+\t}\n+\n       addr = const0_rtx;\n     }\n   else"}, {"sha": "3de1e9265a1df09d680d67c9653fb8c853f5e3da", "filename": "gcc/c-common.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -3804,6 +3804,10 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN,\n \t\t    NULL_PTR);\n #endif\n+\n+  /* ??? Perhaps there's a better place to do this.  But it is related\n+     to __builtin_va_arg, so it isn't that off-the-wall.  */\n+  lang_type_promotes_to = simple_type_promotes_to;\n }\n \n tree\n@@ -3967,4 +3971,58 @@ initializer_constant_valid_p (value, endtype)\n \n   return 0;\n }\n+\f\n+/* Given a type, apply default promotions wrt unnamed function arguments\n+   and return the new type.  Return NULL_TREE if no change.  */\n+/* ??? There is a function of the same name in the C++ front end that \n+   does something similar, but is more thorough and does not return NULL\n+   if no change.  We could perhaps share code, but it would make the \n+   self_promoting_type property harder to identify.  */\n+\n+tree\n+simple_type_promotes_to (type)\n+     tree type;\n+{\n+  if (TYPE_MAIN_VARIANT (type) == float_type_node)\n+    return double_type_node;\n+\n+  if (C_PROMOTING_INTEGER_TYPE_P (type))\n+    {\n+      /* Traditionally, unsignedness is preserved in default promotions.\n+         Also preserve unsignedness if not really getting any wider.  */\n+      if (TREE_UNSIGNED (type)\n+          && (flag_traditional\n+              || TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n+        return unsigned_type_node;\n+      return integer_type_node;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return 1 if PARMS specifies a fixed number of parameters\n+   and none of their types is affected by default promotions.  */\n+\n+int\n+self_promoting_args_p (parms)\n+     tree parms;\n+{\n+  register tree t;\n+  for (t = parms; t; t = TREE_CHAIN (t))\n+    {\n+      register tree type = TREE_VALUE (t);\n \n+      if (TREE_CHAIN (t) == 0 && type != void_type_node)\n+\treturn 0;\n+\n+      if (type == 0)\n+\treturn 0;\n+\n+      if (TYPE_MAIN_VARIANT (type) == float_type_node)\n+\treturn 0;\n+\n+      if (C_PROMOTING_INTEGER_TYPE_P (type))\n+\treturn 0;\n+    }\n+  return 1;\n+}"}, {"sha": "7514092b5ebe6eae5c227e005a64f92c5fc06927", "filename": "gcc/c-common.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -192,3 +192,17 @@ extern void c_common_nodes_and_builtins\t\tPROTO((int, int, int));\n extern tree build_va_arg\t\t\tPROTO((tree, tree));\n \n extern tree initializer_constant_valid_p\tPROTO((tree, tree));\n+\n+/* Nonzero if the type T promotes to itself.\n+   ANSI C states explicitly the list of types that promote;\n+   in particular, short promotes to int even if they have the same width.  */\n+#define C_PROMOTING_INTEGER_TYPE_P(t)\t\t\t\t\\\n+  (TREE_CODE ((t)) == INTEGER_TYPE\t\t\t\t\\\n+   && (TYPE_MAIN_VARIANT (t) == char_type_node\t\t\t\\\n+       || TYPE_MAIN_VARIANT (t) == signed_char_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n+       || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n+\n+extern int self_promoting_args_p\t\tPROTO((tree));\n+extern tree simple_type_promotes_to\t\tPROTO((tree));"}, {"sha": "eecc4f6e7419aa04eaa91a22b1bd073b5d8a4448", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1664,8 +1664,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t\t  break;\n \t\t}\n \n-\t      if (TYPE_MAIN_VARIANT (type) == float_type_node\n-\t\t  || C_PROMOTING_INTEGER_TYPE_P (type))\n+\t      if (simple_type_promotes_to (type) != NULL_TREE)\n \t\t{\n \t\t  error (\"An argument type that has a default promotion can't match an empty parameter name list declaration.\");\n \t\t  break;\n@@ -4858,7 +4857,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     if (decl_context == PARM)\n       {\n \ttree type_as_written = type;\n-\ttree main_type;\n+\ttree promoted_type;\n \n \t/* A parameter declared as an array of T is really a pointer to T.\n \t   One declared as a function is really a pointer to a function.  */\n@@ -4892,25 +4891,16 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t   (For example, shorts and chars are passed as ints.)\n \t   When there is a prototype, this is overridden later.  */\n \n-\tDECL_ARG_TYPE (decl) = type;\n-\tmain_type = (type == error_mark_node\n-\t\t     ? error_mark_node\n-\t\t     : TYPE_MAIN_VARIANT (type));\n-\tif (main_type == float_type_node)\n-\t  DECL_ARG_TYPE (decl) = double_type_node;\n-\t/* Don't use TYPE_PRECISION to decide whether to promote,\n-\t   because we should convert short if it's the same size as int,\n-\t   but we should not convert long if it's the same size as int.  */\n-\telse if (TREE_CODE (main_type) != ERROR_MARK\n-\t\t && C_PROMOTING_INTEGER_TYPE_P (main_type))\n+\tif (type == error_mark_node)\n+\t  promoted_type = type;\n+\telse\n \t  {\n-\t    if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)\n-\t\t&& TREE_UNSIGNED (type))\n-\t      DECL_ARG_TYPE (decl) = unsigned_type_node;\n-\t    else\n-\t      DECL_ARG_TYPE (decl) = integer_type_node;\n+\t    promoted_type = simple_type_promotes_to (type);\n+\t    if (! promoted_type)\n+\t      promoted_type = type;\n \t  }\n \n+\tDECL_ARG_TYPE (decl) = promoted_type;\n \tDECL_ARG_TYPE_AS_WRITTEN (decl) = type_as_written;\n       }\n     else if (decl_context == FIELD)"}, {"sha": "44ec800cc00848709880f27b1ce1a0808ad24ef5", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -145,17 +145,6 @@ struct lang_type\n /* In a FIELD_DECL, nonzero if the decl was originally a bitfield.  */\n #define DECL_C_BIT_FIELD(NODE) DECL_LANG_FLAG_4 (NODE)\n \n-/* Nonzero if the type T promotes to itself.\n-   ANSI C states explicitly the list of types that promote;\n-   in particular, short promotes to int even if they have the same width.  */\n-#define C_PROMOTING_INTEGER_TYPE_P(t)\t\t\t\t\\\n-  (TREE_CODE ((t)) == INTEGER_TYPE\t\t\t\t\\\n-   && (TYPE_MAIN_VARIANT (t) == char_type_node\t\t\t\\\n-       || TYPE_MAIN_VARIANT (t) == signed_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n-\n /* In a VAR_DECL, means the variable is really an iterator.  */\n #define ITERATOR_P(D) (DECL_LANG_FLAG_4(D))\n \n@@ -260,7 +249,6 @@ extern void incomplete_type_error\t\tPROTO((tree, tree));\n    Given two compatible ANSI C types, returns the merged type.  */\n extern tree common_type                         PROTO((tree, tree));\n extern int comptypes\t\t\t\tPROTO((tree, tree));\n-extern int self_promoting_args_p\t\tPROTO((tree));\n extern tree c_sizeof                            PROTO((tree));\n extern tree c_sizeof_nowarn                     PROTO((tree));\n extern tree c_size_in_bytes                     PROTO((tree));"}, {"sha": "7d9352a27d9d25dadf6a106554697027c765a117", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -48,7 +48,6 @@ static tree qualify_type\t\tPROTO((tree, tree));\n static int comp_target_types\t\tPROTO((tree, tree));\n static int function_types_compatible_p\tPROTO((tree, tree));\n static int type_lists_compatible_p\tPROTO((tree, tree));\n-static int self_promoting_type_p\tPROTO((tree));\n static tree decl_constant_value\t\tPROTO((tree));\n static tree lookup_field\t\tPROTO((tree, tree, tree *));\n static tree convert_arguments\t\tPROTO((tree, tree, tree, tree));\n@@ -626,12 +625,12 @@ type_lists_compatible_p (args1, args2)\n \t So match anything that self-promotes.  */\n       if (TREE_VALUE (args1) == 0)\n \t{\n-\t  if (! self_promoting_type_p (TREE_VALUE (args2)))\n+\t  if (simple_type_promotes_to (TREE_VALUE (args2)) != NULL_TREE)\n \t    return 0;\n \t}\n       else if (TREE_VALUE (args2) == 0)\n \t{\n-\t  if (! self_promoting_type_p (TREE_VALUE (args1)))\n+\t  if (simple_type_promotes_to (TREE_VALUE (args1)) != NULL_TREE)\n \t    return 0;\n \t}\n       else if (! (newval = comptypes (TREE_VALUE (args1), TREE_VALUE (args2))))\n@@ -680,48 +679,6 @@ type_lists_compatible_p (args1, args2)\n       args2 = TREE_CHAIN (args2);\n     }\n }\n-\n-/* Return 1 if PARMS specifies a fixed number of parameters\n-   and none of their types is affected by default promotions.  */\n-\n-int\n-self_promoting_args_p (parms)\n-     tree parms;\n-{\n-  register tree t;\n-  for (t = parms; t; t = TREE_CHAIN (t))\n-    {\n-      register tree type = TREE_VALUE (t);\n-\n-      if (TREE_CHAIN (t) == 0 && type != void_type_node)\n-\treturn 0;\n-\n-      if (type == 0)\n-\treturn 0;\n-\n-      if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-\treturn 0;\n-\n-      if (C_PROMOTING_INTEGER_TYPE_P (type))\n-\treturn 0;\n-    }\n-  return 1;\n-}\n-\n-/* Return 1 if TYPE is not affected by default promotions.  */\n-\n-static int\n-self_promoting_type_p (type)\n-     tree type;\n-{\n-  if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-    return 0;\n-\n-  if (C_PROMOTING_INTEGER_TYPE_P (type))\n-    return 0;\n-\n-  return 1;\n-}\n \f\n /* Compute the value of the `sizeof' operator.  */\n "}, {"sha": "55c4045c66494501c8096ce6ad62015312bdfd77", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1,3 +1,8 @@\n+1999-09-07  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cp-tree.h (C_PROMOTING_INTEGER_TYPE_P): Delete.\n+\t* typeck.c (self_promoting_args_p): Delete.\n+\n 1999-09-07  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* search.c (binfo_for_vtable): Use CLASSTYPE_VFIELD_PARENT."}, {"sha": "5b6e8f5754c829c995c2b64688d0c9ddd909212f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1902,17 +1902,6 @@ extern int flag_new_for_scope;\n #define SET_DECL_C_BIT_FIELD(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->decl_flags.bitfield = 1)\n \n-/* Nonzero if the type T promotes to itself.\n-   ANSI C states explicitly the list of types that promote;\n-   in particular, short promotes to int even if they have the same width.  */\n-#define C_PROMOTING_INTEGER_TYPE_P(t)\t\t\t\t\\\n-  (TREE_CODE ((t)) == INTEGER_TYPE\t\t\t\t\\\n-   && (TYPE_MAIN_VARIANT (t) == char_type_node\t\t\t\\\n-       || TYPE_MAIN_VARIANT (t) == signed_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n-\n #define INTEGRAL_CODE_P(CODE) \\\n   (CODE == INTEGER_TYPE || CODE == ENUMERAL_TYPE || CODE == BOOLEAN_TYPE)\n \n@@ -3751,7 +3740,6 @@ extern int compparms\t\t\t\tPROTO((tree, tree));\n extern int comp_target_types\t\t\tPROTO((tree, tree, int));\n extern int comp_cv_qualification                PROTO((tree, tree));\n extern int comp_cv_qual_signature               PROTO((tree, tree));\n-extern int self_promoting_args_p\t\tPROTO((tree));\n extern tree unsigned_type\t\t\tPROTO((tree));\n extern tree signed_type\t\t\t\tPROTO((tree));\n extern tree signed_or_unsigned_type\t\tPROTO((int, tree));"}, {"sha": "6b0bc3b065784fbfb883e9c0f6fe3f924e017c92", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1623,33 +1623,6 @@ comp_target_parms (parms1, parms2, strict)\n     }\n   return warn_contravariance ? -1 : 1;\n }\n-\n-/* Return 1 if PARMS specifies a fixed number of parameters\n-   and none of their types is affected by default promotions.  */\n-\n-int\n-self_promoting_args_p (parms)\n-     tree parms;\n-{\n-  register tree t;\n-  for (t = parms; t; t = TREE_CHAIN (t))\n-    {\n-      register tree type = TREE_VALUE (t);\n-\n-      if (TREE_CHAIN (t) == 0 && type != void_type_node)\n-\treturn 0;\n-\n-      if (type == 0)\n-\treturn 0;\n-\n-      if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-\treturn 0;\n-\n-      if (C_PROMOTING_INTEGER_TYPE_P (type))\n-\treturn 0;\n-    }\n-  return 1;\n-}\n \f\n /* Compute the value of the `sizeof' operator.  */\n "}, {"sha": "f05eb74ba0d90e8dde03a6e8ea264786ca58dff9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -1,3 +1,7 @@\n+1999-09-07  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcc.dg/va-arg-1.c: New.\n+\n 1999-09-05  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.f-torture/compile/980519-2.f: New test."}, {"sha": "b29d7eb7f2976a8740503859e95a0cc90de68399", "filename": "gcc/testsuite/gcc.dg/va-arg-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-1.c?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdarg.h>\n+\n+va_list v;\n+volatile int i;\n+\n+void foo()\n+{\n+  i = va_arg(v, char); /* { dg-error \"is promoted to|so you should\" \"char\" } */\n+  i = va_arg(v, short); /* { dg-error \"is promoted to\" \"short\" } */\n+  i = va_arg(v, float); /* { dg-error \"is promoted to\" \"float\" } */\n+}"}, {"sha": "e1e04792dac6693157c6b5b9ee06de4fc702827a", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c530479e15d804667c83dfb738ce9cae035de9f2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c530479e15d804667c83dfb738ce9cae035de9f2", "patch": "@@ -2040,6 +2040,12 @@ extern void rrotate_double\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       HOST_WIDE_INT *));\n extern int operand_equal_p\tPROTO((tree, tree, int));\n extern tree invert_truthvalue\tPROTO((tree));\n+\n+/* In builtins.c.  Given a type, apply default promotions wrt unnamed\n+   function arguments and return the new type.  Return NULL_TREE if no\n+   change.  Required by any language that supports variadic arguments.  */\n+\n+extern tree (*lang_type_promotes_to)\tPROTO((tree));\n \f\n /* Interface of the DWARF2 unwind info support.  */\n "}]}