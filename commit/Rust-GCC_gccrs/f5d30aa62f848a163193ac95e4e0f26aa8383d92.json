{"sha": "f5d30aa62f848a163193ac95e4e0f26aa8383d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkMzBhYTYyZjg0OGExNjMxOTNhYzk1ZTRlMGYyNmFhODM4M2Q5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-28T23:01:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-28T23:01:03Z"}, "message": "re PR debug/36728 ([stack]: gdb doesn't work with stack alignment)\n\n\tPR debug/36728\n\tPR debug/55467\n\tPR middle-end/55507\n\tPR bootstrap/55511\n\t* cselib.c (cselib_process_insn): If cselib_preserve_constants,\n\tdon't reset table and exit early on volatile insns and setjmp.\n\tReset table afterwards on setjmp.\n\n\t* gcc.dg/guality/pr36728-1.c: Include \"../nop.h\", make sure the asm\n\tare non-empty and add dependency between the first and second asm.\n\t* gcc.dg/guality/pr36728-2.c: Likewise.\n\t* gcc.dg/guality/pr36728-3.c: New test.\n\t* gcc.dg/guality/pr36728-4.c: New test.\n\nFrom-SVN: r193911", "tree": {"sha": "7b496948f97b7aefb30aa0a4e58d895e46a65c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b496948f97b7aefb30aa0a4e58d895e46a65c3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d30aa62f848a163193ac95e4e0f26aa8383d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d30aa62f848a163193ac95e4e0f26aa8383d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d30aa62f848a163193ac95e4e0f26aa8383d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d30aa62f848a163193ac95e4e0f26aa8383d92/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d99894e654b30324d5ab24069159ff9bc853c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d99894e654b30324d5ab24069159ff9bc853c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d99894e654b30324d5ab24069159ff9bc853c6a"}], "stats": {"total": 238, "additions": 190, "deletions": 48}, "files": [{"sha": "c5eb335aa5eee27b5a3053822a67786daa238491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -1,3 +1,13 @@\n+2012-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/36728\n+\tPR debug/55467\n+\tPR middle-end/55507\n+\tPR bootstrap/55511\n+\t* cselib.c (cselib_process_insn): If cselib_preserve_constants,\n+\tdon't reset table and exit early on volatile insns and setjmp.\n+\tReset table afterwards on setjmp.\n+\n 2012-11-28  Andrew Pinski  <apinski@cavium.com>\n \n \tPR bootstrap/54279"}, {"sha": "a2f60ec42d8c970e343ce19f2bd9e23be7967e52", "filename": "gcc/cselib.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -2626,11 +2626,12 @@ cselib_process_insn (rtx insn)\n   cselib_current_insn = insn;\n \n   /* Forget everything at a CODE_LABEL, a volatile insn, or a setjmp.  */\n-  if (LABEL_P (insn)\n-      || (CALL_P (insn)\n-\t  && find_reg_note (insn, REG_SETJMP, NULL))\n-      || (NONJUMP_INSN_P (insn)\n-\t  && volatile_insn_p (PATTERN (insn))))\n+  if ((LABEL_P (insn)\n+       || (CALL_P (insn)\n+\t   && find_reg_note (insn, REG_SETJMP, NULL))\n+       || (NONJUMP_INSN_P (insn)\n+\t   && volatile_insn_p (PATTERN (insn))))\n+      && !cselib_preserve_constants)\n     {\n       cselib_reset_table (next_uid);\n       cselib_current_insn = NULL_RTX;\n@@ -2668,9 +2669,18 @@ cselib_process_insn (rtx insn)\n   /* Look for any CLOBBERs in CALL_INSN_FUNCTION_USAGE, but only\n      after we have processed the insn.  */\n   if (CALL_P (insn))\n-    for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))\n-      if (GET_CODE (XEXP (x, 0)) == CLOBBER)\n-\tcselib_invalidate_rtx (XEXP (XEXP (x, 0), 0));\n+    {\n+      for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))\n+\tif (GET_CODE (XEXP (x, 0)) == CLOBBER)\n+\t  cselib_invalidate_rtx (XEXP (XEXP (x, 0), 0));\n+      /* Flush evertything on setjmp.  */\n+      if (cselib_preserve_constants\n+\t  && find_reg_note (insn, REG_SETJMP, NULL))\n+\t{\n+\t  cselib_preserve_only_values ();\n+\t  cselib_reset_table (next_uid);\n+\t}\n+    }\n \n   /* On setter of the hard frame pointer if frame_pointer_needed,\n      invalidate stack_pointer_rtx, so that sp and {,h}fp based"}, {"sha": "79faf383f1b6c12f90055d07ddc19f71479069a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -1,3 +1,15 @@\n+2012-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/36728\n+\tPR debug/55467\n+\tPR middle-end/55507\n+\tPR bootstrap/55511\n+\t* gcc.dg/guality/pr36728-1.c: Include \"../nop.h\", make sure the asm\n+\tare non-empty and add dependency between the first and second asm.\n+\t* gcc.dg/guality/pr36728-2.c: Likewise.\n+\t* gcc.dg/guality/pr36728-3.c: New test.\n+\t* gcc.dg/guality/pr36728-4.c: New test.\n+\n 2012-11-28  Andrew Pinski  <apinski@cavium.com>\n \n \tPR bootstrap/54279"}, {"sha": "ba7a6c279295129e5e37e6a865e62ce05e784ed6", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-1.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -1,17 +1,21 @@\n /* PR debug/36728 */\n /* { dg-do run } */\n /* { dg-options \"-g\" } */\n-int a;\n+\n+#include \"../nop.h\"\n+\n+int a, b;\n+\n int __attribute__((noinline))\n foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n {\n   char *x = __builtin_alloca (arg7);\n   int __attribute__ ((aligned(32))) y;\n \n   y = 2;\n-  asm (\"\" : \"=m\" (y) : \"m\" (y));\n+  asm (NOP : \"=m\" (y), \"=m\" (b) : \"m\" (y));\n   x[0] = 25;\n-  asm (\"\" : \"=m\" (x[0]), \"=m\" (a) : \"m\" (x[0]));\n+  asm (NOP : \"=m\" (x[0]), \"=m\" (a) : \"m\" (x[0]), \"m\" (b));\n   return y;\n }\n \n@@ -21,23 +25,23 @@ foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n    and arg2.  So it is expected that these values are unavailable in\n    some of these tests.  */\n \n-/* { dg-final { gdb-test 12 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } }*/\n-/* { dg-final { gdb-test 12 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } }*/\n-/* { dg-final { gdb-test 12 \"arg3\" \"3\" } } */\n-/* { dg-final { gdb-test 12 \"arg4\" \"4\" } } */\n-/* { dg-final { gdb-test 12 \"arg5\" \"5\" } } */\n-/* { dg-final { gdb-test 12 \"arg6\" \"6\" } } */\n-/* { dg-final { gdb-test 12 \"arg7\" \"30\" } } */\n-/* { dg-final { gdb-test 12 \"y\" \"2\" } } */\n-/* { dg-final { gdb-test 14 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } }*/\n-/* { dg-final { gdb-test 14 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } }*/\n-/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n-/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n-/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n-/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n-/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n-/* { dg-final { gdb-test 14 \"*x\" \"(char) 25\" } } */\n-/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 16 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 16 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 16 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 16 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 16 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 16 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 18 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 18 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 18 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 18 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 18 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 18 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 18 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 18 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 18 \"y\" \"2\" } } */\n \n int\n main ()"}, {"sha": "6daa021c01dc33427c0a44349d937fe7d748e03f", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-2.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -1,17 +1,21 @@\n /* PR debug/36728 */\n /* { dg-do run } */\n /* { dg-options \"-g\" } */\n-int a;\n+\n+#include \"../nop.h\"\n+\n+int a, b;\n+\n int __attribute__((noinline))\n foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n {\n   char x[30];\n   int __attribute__ ((aligned(32))) y;\n \n   y = 2;\n-  asm (\"\" : \"=m\" (y) : \"m\" (y));\n+  asm (NOP : \"=m\" (y), \"=m\" (b) : \"m\" (y));\n   x[0] = 25;\n-  asm (\"\" : \"=m\" (x[0]), \"=m\" (a) : \"m\" (x[0]));\n+  asm (NOP : \"=m\" (x[0]), \"=m\" (a) : \"m\" (x[0]), \"m\" (b));\n   return y;\n }\n \n@@ -21,23 +25,23 @@ foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n    and arg2.  So it is expected that these values are unavailable in\n    some of these tests.  */\n \n-/* { dg-final { gdb-test 12 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n-/* { dg-final { gdb-test 12 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n-/* { dg-final { gdb-test 12 \"arg3\" \"3\" } } */\n-/* { dg-final { gdb-test 12 \"arg4\" \"4\" } } */\n-/* { dg-final { gdb-test 12 \"arg5\" \"5\" } } */\n-/* { dg-final { gdb-test 12 \"arg6\" \"6\" } } */\n-/* { dg-final { gdb-test 12 \"arg7\" \"30\" } } */\n-/* { dg-final { gdb-test 12 \"y\" \"2\" } } */\n-/* { dg-final { gdb-test 14 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n-/* { dg-final { gdb-test 14 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n-/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n-/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n-/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n-/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n-/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n-/* { dg-final { gdb-test 14 \"*x\" \"(char) 25\" } } */\n-/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 16 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 16 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 16 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 16 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 16 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 16 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 18 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 18 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 18 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 18 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 18 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 18 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 18 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 18 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 18 \"y\" \"2\" } } */\n \n int\n main ()"}, {"sha": "bb2c0675d1f7f020615922c6a4d644856056834e", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-3.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-3.c?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -0,0 +1,51 @@\n+/* PR debug/36728 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include \"../nop.h\"\n+\n+int __attribute__((noinline))\n+foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n+{\n+  char *x = __builtin_alloca (arg7);\n+  int __attribute__ ((aligned(32))) y;\n+\n+  y = 2;\n+  asm (NOP : \"=m\" (y) : \"m\" (y));\n+  x[0] = 25;\n+  asm volatile (NOP : \"=m\" (x[0]) : \"m\" (x[0]));\n+  return y;\n+}\n+\n+/* On s390(x) r2 and r3 are (depending on the optimization level) used\n+   when adjusting the addresses in order to meet the alignment\n+   requirements above.  They usually hold the function arguments arg1\n+   and arg2.  So it is expected that these values are unavailable in\n+   some of these tests.  */\n+\n+/* { dg-final { gdb-test 14 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 14 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 16 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 16 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 16 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 16 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 16 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 16 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 16 \"y\" \"2\" } } */\n+\n+int\n+main ()\n+{\n+  int l = 0;\n+  asm volatile (\"\" : \"=r\" (l) : \"0\" (l));\n+  foo (l + 1, l + 2, l + 3, l + 4, l + 5, l + 6, l + 30);\n+  return 0;\n+}"}, {"sha": "fee79c49c163cc68ed6f015cc88bf5151dc59156", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d30aa62f848a163193ac95e4e0f26aa8383d92/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-4.c?ref=f5d30aa62f848a163193ac95e4e0f26aa8383d92", "patch": "@@ -0,0 +1,51 @@\n+/* PR debug/36728 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include \"../nop.h\"\n+\n+int __attribute__((noinline))\n+foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n+{\n+  char x[30];\n+  int __attribute__ ((aligned(32))) y;\n+\n+  y = 2;\n+  asm (NOP : \"=m\" (y) : \"m\" (y));\n+  x[0] = 25;\n+  asm volatile (NOP : \"=m\" (x[0]) : \"m\" (x[0]));\n+  return y;\n+}\n+\n+/* On s390(x) r2 and r3 are (depending on the optimization level) used\n+   when adjusting the addresses in order to meet the alignment\n+   requirements above.  They usually hold the function arguments arg1\n+   and arg2.  So it is expected that these values are unavailable in\n+   some of these tests.  */\n+\n+/* { dg-final { gdb-test 14 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 14 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 16 \"arg1\" \"1\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg2\" \"2\" { target { ! \"s390*-*-*\" } } } } */\n+/* { dg-final { gdb-test 16 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 16 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 16 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 16 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 16 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 16 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 16 \"y\" \"2\" } } */\n+\n+int\n+main ()\n+{\n+  int l = 0;\n+  asm volatile (\"\" : \"=r\" (l) : \"0\" (l));\n+  foo (l + 1, l + 2, l + 3, l + 4, l + 5, l + 6, l + 30);\n+  return 0;\n+}"}]}