{"sha": "b838641bb0d4de5b25128b54012155ab46f452d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzODY0MWJiMGQ0ZGU1YjI1MTI4YjU0MDEyMTU1YWI0NmY0NTJkMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-28T11:08:10Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-28T11:43:41Z"}, "message": "mklog: Handle correctly long lines.\n\ncontrib/ChangeLog:\n\n\t* mklog.py: Handle correctly long lines.\n\t* test_mklog.py: Test it.", "tree": {"sha": "c73b2144139c1f89eedec57bd6ae50dd0d7a06f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73b2144139c1f89eedec57bd6ae50dd0d7a06f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b838641bb0d4de5b25128b54012155ab46f452d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838641bb0d4de5b25128b54012155ab46f452d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b838641bb0d4de5b25128b54012155ab46f452d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838641bb0d4de5b25128b54012155ab46f452d0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "ba70af0eef28d1c978027faaf480c65f3577d7f3", "filename": "contrib/mklog.py", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b838641bb0d4de5b25128b54012155ab46f452d0/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b838641bb0d4de5b25128b54012155ab46f452d0/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=b838641bb0d4de5b25128b54012155ab46f452d0", "patch": "@@ -38,6 +38,9 @@\n \n from unidiff import PatchSet\n \n+LINE_LIMIT = 100\n+TAB_WIDTH = 8\n+\n pr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<pr>PR [a-z+-]+\\/[0-9]+)')\n prnum_regex = re.compile(r'PR (?P<comp>[a-z+-]+)/(?P<num>[0-9]+)')\n dr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<dr>DR [0-9]+)')\n@@ -134,6 +137,16 @@ def get_pr_titles(prs):\n     return '\\n'.join(output)\n \n \n+def append_changelog_line(out, relative_path, text):\n+    line = f'\\t* {relative_path}:'\n+    if len(line.replace('\\t', ' ' * TAB_WIDTH) + ' ' + text) <= LINE_LIMIT:\n+        out += f'{line} {text}\\n'\n+    else:\n+        out += f'{line}\\n'\n+        out += f'\\t{text}\\n'\n+    return out\n+\n+\n def generate_changelog(data, no_functions=False, fill_pr_titles=False,\n                        additional_prs=None):\n     changelogs = {}\n@@ -213,12 +226,12 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False,\n             relative_path = file.path[len(changelog):].lstrip('/')\n             functions = []\n             if file.is_added_file:\n-                msg = 'New test' if in_tests else 'New file'\n-                out += '\\t* %s: %s.\\n' % (relative_path, msg)\n+                msg = 'New test.' if in_tests else 'New file.'\n+                out = append_changelog_line(out, relative_path, msg)\n             elif file.is_removed_file:\n-                out += '\\t* %s: Removed.\\n' % (relative_path)\n+                out = append_changelog_line(out, relative_path, 'Removed.')\n             elif hasattr(file, 'is_rename') and file.is_rename:\n-                out += '\\t* %s: Moved to...\\n' % (relative_path)\n+                out = append_changelog_line(out, relative_path, 'Moved to...')\n                 new_path = file.target_file[2:]\n                 # A file can be theoretically moved to a location that\n                 # belongs to a different ChangeLog.  Let user fix it.\n@@ -227,6 +240,7 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False,\n                 out += '\\t* %s: ...here.\\n' % (new_path)\n             elif os.path.basename(file.path) in generated_files:\n                 out += '\\t* %s: Regenerate.\\n' % (relative_path)\n+                append_changelog_line(out, relative_path, 'Regenerate.')\n             else:\n                 if not no_functions:\n                     for hunk in file:"}, {"sha": "bf2f280b46e625c3f962483c5517712eca179791", "filename": "contrib/test_mklog.py", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b838641bb0d4de5b25128b54012155ab46f452d0/contrib%2Ftest_mklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b838641bb0d4de5b25128b54012155ab46f452d0/contrib%2Ftest_mklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftest_mklog.py?ref=b838641bb0d4de5b25128b54012155ab46f452d0", "patch": "@@ -443,6 +443,27 @@\n \n '''\n \n+PATCH10 = '''\\\n+diff --git a/libgomp/doc/the-libgomp-abi/implementing-firstprivate-lastprivate-copyin-and-copyprivate-clauses.rst b/libgomp/doc/the-libgomp-abi/implementing-firstprivate-lastprivate-copyin-and-copyprivate-clauses.rst\n+new file mode 100644\n+index 00000000000..ad3c6d856fc\n+--- /dev/null\n++++ b/libgomp/doc/the-libgomp-abi/implementing-firstprivate-lastprivate-copyin-and-copyprivate-clauses.rst\n+@@ -0,0 +1,3 @@\n++\n++\n++\n+\n+'''\n+\n+EXPECTED10 = '''\\\n+libgomp/ChangeLog:\n+\n+\t* doc/the-libgomp-abi/implementing-firstprivate-lastprivate-copyin-and-copyprivate-clauses.rst:\n+\tNew file.\n+\n+'''\n+\n class TestMklog(unittest.TestCase):\n     def test_macro_definition(self):\n         changelog = generate_changelog(PATCH1)\n@@ -485,3 +506,7 @@ def test_renaming(self):\n     def test_define_macro_parsing(self):\n         changelog = generate_changelog(PATCH9)\n         assert changelog == EXPECTED9\n+\n+    def test_long_filenames(self):\n+        changelog = generate_changelog(PATCH10)\n+        assert changelog == EXPECTED10"}]}