{"sha": "841e721579bec2dbab9cfc2b34929dcde56816a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxZTcyMTU3OWJlYzJkYmFiOWNmYzJiMzQ5MjlkY2RlNTY4MTZhMg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-03-30T17:13:57Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-03-30T17:13:57Z"}, "message": "RS6000 Allow builtin initialization regardless of mask\n\n  Disable the code that limits initialization of builtins based\non the rs6000_builtin_mask.  This allows all built-ins to be\nproperly referenced when building code using #pragma for cpu\ntargets newer than what was specified by the -mcpu default.\nThe use of built-ins is still properly limited by logic within\naltivec_resolve_overloaded_builtin().\n\n2020-03-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngcc/\n    * config/rs6000/rs6000-call.c altivec_init_builtins(): Remove code\n    to skip defining builtins based on builtin_mask.\n\ngcc/testsuite/\n    * gcc.target/powerpc/pragma_power6.c: New.\n    * gcc.target/powerpc/pragma_power7.c: New.\n    * gcc.target/powerpc/pragma_power8.c: New.\n    * gcc.target/powerpc/pragma_power9.c: New.\n    * gcc.target/powerpc/pragma_misc9.c: New.\n    * gcc.target/powerpc/vsu/vec-all-nez-7.c: Update error message.\n    * gcc.target/powerpc/vsu/vec-any-eqz-7.c: Update error message.", "tree": {"sha": "74fae2187ffa3530911ad2f95fa79e2e0b866e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74fae2187ffa3530911ad2f95fa79e2e0b866e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841e721579bec2dbab9cfc2b34929dcde56816a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841e721579bec2dbab9cfc2b34929dcde56816a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841e721579bec2dbab9cfc2b34929dcde56816a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841e721579bec2dbab9cfc2b34929dcde56816a2/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c18af43faa50c768a440904d67cdf1fc40a703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c18af43faa50c768a440904d67cdf1fc40a703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c18af43faa50c768a440904d67cdf1fc40a703"}], "stats": {"total": 260, "additions": 230, "deletions": 30}, "files": [{"sha": "43015c6541d24858ace948e4a6f712c7d5f5cb9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -1,3 +1,8 @@\n+2020-03-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c altivec_init_builtins(): Remove code\n+\tto skip defining builtins based on builtin_mask.\n+\n 2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94343"}, {"sha": "e08621ace27eb22958481516786778328d404d5d", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -12069,7 +12069,6 @@ altivec_init_builtins (void)\n   size_t i;\n   tree ftype;\n   tree decl;\n-  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n   tree pvoid_type_node = build_pointer_type (void_type_node);\n \n@@ -12431,17 +12430,8 @@ altivec_init_builtins (void)\n   d = bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n     {\n-      HOST_WIDE_INT mask = d->mask;\n-\n       /* It is expected that these dst built-in functions may have\n \t d->icode equal to CODE_FOR_nothing.  */\n-      if ((mask & builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"altivec_init_builtins, skip dst %s\\n\",\n-\t\t     d->name);\n-\t  continue;\n-\t}\n       def_builtin (d->name, void_ftype_pcvoid_int_int, d->code);\n     }\n \n@@ -12451,15 +12441,6 @@ altivec_init_builtins (void)\n     {\n       machine_mode mode1;\n       tree type;\n-      HOST_WIDE_INT mask = d->mask;\n-\n-      if ((mask & builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"altivec_init_builtins, skip predicate %s\\n\",\n-\t\t     d->name);\n-\t  continue;\n-\t}\n \n       if (rs6000_overloaded_builtin_p (d->code))\n \tmode1 = VOIDmode;\n@@ -12506,15 +12487,6 @@ altivec_init_builtins (void)\n     {\n       machine_mode mode0;\n       tree type;\n-      HOST_WIDE_INT mask = d->mask;\n-\n-      if ((mask & builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"altivec_init_builtins, skip abs %s\\n\",\n-\t\t     d->name);\n-\t  continue;\n-\t}\n \n       /* Cannot define builtin if the instruction is disabled.  */\n       gcc_assert (d->icode != CODE_FOR_nothing);"}, {"sha": "90c9db8fbf57208e0a9ec5509e2bdf6a41dd6bb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -1,3 +1,13 @@\n+2020-03-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pragma_power6.c: New.\n+\t* gcc.target/powerpc/pragma_power7.c: New.\n+\t* gcc.target/powerpc/pragma_power8.c: New.\n+\t* gcc.target/powerpc/pragma_power9.c: New.\n+\t* gcc.target/powerpc/pragma_misc9.c: New.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-7.c: Update error message.\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c: Update error message.\n+\n 2020-03-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/bswap64-4.c: Update scan-assembler"}, {"sha": "e03099bd0848ac4c8ff24bf372853c226d0b7c24", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_misc9.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -maltivec -O2\" } */\n+\n+/* Ensure that if we set a pragma gcc target for an\n+   older processor, we do not compile builtins that\n+   the older target does not support.  */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+test1 (vector signed int a, vector signed int b)\n+{\n+  return vec_cmpnez (a, b);\n+}\n+\n+#pragma GCC target (\"cpu=power8\")\n+vector bool int\n+test2 (vector signed int a, vector signed int b)\n+{\n+  return vec_cmpnez (a, b);\n+  /* { dg-error \"'__builtin_altivec_vcmpnezw' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+#pragma GCC target (\"cpu=power7\")\n+vector signed int\n+test3 (vector signed int a, vector signed int b)\n+{\n+  return vec_mergee (a, b);\n+  /* { dg-error \"'__builtin_altivec_vmrgew_v4si' requires the '-mpower8-vector' option\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+#pragma GCC target (\"cpu=power6\")\n+vector signed int\n+test4 (vector int a, vector int b)\n+{\n+  return vec_sldw (a, b, 2);\n+  /* { dg-error \"'__builtin_vsx_xxsldwi_4si' requires the '-mvsx' option\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+vector int\n+test5 (vector int a, vector int b)\n+{\n+  return vec_add (a, b);\n+}\n+"}, {"sha": "a9120b774151bbde5a36b7a7fc2402ad8ec4d0b4", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power6.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power6 -maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+#pragma GCC target (\"cpu=power6,altivec\")\n+#ifdef _ARCH_PWR6\n+vector int\n+isa_2_05 (vector int a, vector int b)\n+{\n+  return vec_add (a, b);\n+}\n+#else\n+#error failed power6 pragma target\n+#endif\n+"}, {"sha": "2e5b7c2b369452c751eefcba0fecd72eed92cd2d", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power7.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=power6 -maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+#pragma GCC target (\"cpu=power6,altivec\")\n+#ifdef _ARCH_PWR6\n+vector int\n+test1 (vector int a, vector int b)\n+{\n+  return vec_add (a, b);\n+}\n+#else\n+#error failed power6 pragma target\n+#endif\n+\n+#pragma GCC target (\"cpu=power7\")\n+/* Force a re-read of altivec.h with new cpu target. */\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR7\n+vector signed int\n+test2 (vector signed int a, vector signed int b)\n+{\n+  return vec_sldw (a, b, 3);\n+}\n+#else\n+#error failed to set power7 pragma target\n+#endif\n+"}, {"sha": "c8d2cdd6c1a7bae642c826c5fb5c6ad74f393226", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power6 -maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+#pragma GCC target (\"cpu=power6,altivec\")\n+#ifdef _ARCH_PWR6\n+vector int\n+test1 (vector int a, vector int b)\n+{\n+  return vec_add (a, b);\n+}\n+#else\n+#error failed power6 pragma target\n+#endif\n+\n+#pragma GCC target (\"cpu=power7\")\n+/* Force a re-read of altivec.h with new cpu target. */\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR7\n+vector signed int\n+test2 (vector signed int a, vector signed int b)\n+{\n+  return vec_sldw (a, b, 3);\n+}\n+#else\n+#error failed to set power7 pragma target\n+#endif\n+\n+#pragma GCC target (\"cpu=power8\")\n+/* Force a re-read of altivec.h with new cpu target. */\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR8\n+vector int\n+test3 (vector int a, vector int b)\n+{\n+  return vec_mergee (a, b);\n+}\n+typedef __attribute__((altivec(vector__))) long vec_t;\n+int\n+test3b (vec_t a, vec_t b)\n+{\n+  return __builtin_vec_vcmpeq_p (2, a, b);\n+}\n+#else\n+#error failed to set power8 pragma target.\n+#endif\n+"}, {"sha": "e33aad1aaf7ddd044b0769557c82933034d97e3e", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power9.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=power6 -maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+#ifdef _ARCH_PWR6\n+vector int\n+test1 (vector int a, vector int b)\n+{\n+  return vec_add (a, b);\n+}\n+#else\n+#error failed on default power6 pragma target\n+#endif\n+\n+#pragma GCC target (\"cpu=power7\")\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR7\n+vector signed int\n+test2 (vector signed int a, vector signed int b)\n+{\n+  return vec_sldw (a, b, 3);\n+}\n+#else\n+#error failed to set power7 pragma target\n+#endif\n+\n+#pragma GCC target (\"cpu=power8\")\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR8\n+vector int\n+test3 (vector int a, vector int b)\n+{\n+  return vec_mergee (a, b);\n+}\n+\n+typedef __attribute__((altivec(vector__))) long vec_t;\n+int\n+test3b (vec_t a, vec_t b)\n+{\n+  return __builtin_vec_vcmpeq_p (2, a, b);\n+}\n+#else\n+#error failed to set power8 pragma target.\n+#endif\n+\n+#pragma GCC target (\"cpu=power9,power9-vector\")\n+#undef _ALTIVEC_H\n+#include <altivec.h>\n+#ifdef _ARCH_PWR9\n+vector bool int\n+test4 (vector signed int a, vector signed int b)\n+{\n+  return vec_cmpnez (a, b);\n+}\n+#else\n+#error Failed to set cpu=power9 pragma target.\n+#endif\n+"}, {"sha": "f53c6dca0a9bbba0f544f8ae08746ec9aedf136a", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -11,5 +11,6 @@ test_all_not_equal_and_not_zero (vector unsigned short *arg1_p,\n   vector unsigned short arg_1 = *arg1_p;\n   vector unsigned short arg_2 = *arg2_p;\n \n-  return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\t/* { dg-error \"'__builtin_vec_vcmpnez_p' is not supported in this compiler configuration\" } */\n+  return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\n+  /* { dg-error \"'__builtin_altivec_vcmpnezh_p' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "757acd931100c1d1247374ffea41aca8202f61d6", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841e721579bec2dbab9cfc2b34929dcde56816a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c?ref=841e721579bec2dbab9cfc2b34929dcde56816a2", "patch": "@@ -10,5 +10,6 @@ test_any_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n   vector unsigned int arg_1 = *arg1_p;\n   vector unsigned int arg_2 = *arg2_p;\n \n-  return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\t/* { dg-error \"'__builtin_vec_vcmpnez_p' is not supported in this compiler configuration\" } */\n+  return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\n+  /* { dg-error \"'__builtin_altivec_vcmpnezw_p' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n }"}]}