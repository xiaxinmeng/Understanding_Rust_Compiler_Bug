{"sha": "89253742854332d995391dad662f884c375a29d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyNTM3NDI4NTQzMzJkOTk1MzkxZGFkNjYyZjg4NGMzNzVhMjlkMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-01-23T16:37:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:37:31Z"}, "message": "lib-xref.adb (Output_References): Output progenitors of synchronized tagged types, for source navigation.\n\n2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Output_References): Output progenitors of\n\tsynchronized tagged types, for source navigation.\n\nFrom-SVN: r206981", "tree": {"sha": "acc8129c7629baa29ad3356058ad104862195f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acc8129c7629baa29ad3356058ad104862195f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89253742854332d995391dad662f884c375a29d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89253742854332d995391dad662f884c375a29d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89253742854332d995391dad662f884c375a29d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89253742854332d995391dad662f884c375a29d1/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53c53f6dc8715875e50215077ff53612d08b3de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c53f6dc8715875e50215077ff53612d08b3de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c53f6dc8715875e50215077ff53612d08b3de2"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "a6d83c8054b99e3d503f22c62c278e44d94db0d5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89253742854332d995391dad662f884c375a29d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89253742854332d995391dad662f884c375a29d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=89253742854332d995391dad662f884c375a29d1", "patch": "@@ -1,3 +1,8 @@\n+2014-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Output_References): Output progenitors of\n+\tsynchronized tagged types, for source navigation.\n+\n 2014-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb, sinfo.adb, sinfo.ads, sem.adb, sem_res.adb,"}, {"sha": "dc93ec978add1d924d74c341e18f2e31295e960c", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89253742854332d995391dad662f884c375a29d1/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89253742854332d995391dad662f884c375a29d1/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=89253742854332d995391dad662f884c375a29d1", "patch": "@@ -1309,22 +1309,6 @@ package body Lib.Xref is\n                         Right := '>';\n                      end if;\n \n-                  --  For a synchronized type that implements an interface, we\n-                  --  treat the first progenitor as the parent. This is only\n-                  --  needed when compiling a package declaration on its own,\n-                  --  if the body is present interfaces are handled properly.\n-\n-                  elsif Is_Concurrent_Type (Tref)\n-                    and then Is_Tagged_Type (Tref)\n-                    and then not Expander_Active\n-                  then\n-                     if Left /= '(' then\n-                        Left := '<';\n-                        Right := '>';\n-                     end if;\n-\n-                     Tref := Entity (First (Interface_List (Parent (Tref))));\n-\n                   --  If the completion of a private type is itself a derived\n                   --  type, we need the parent of the full view.\n \n@@ -2430,25 +2414,42 @@ package body Lib.Xref is\n \n                      Check_Type_Reference (XE.Key.Ent, False);\n \n-                     --  Additional information for types with progenitors\n+                     --  Additional information for types with progenitors,\n+                     --  including synchronized tagged types.\n \n-                     if Is_Record_Type (XE.Key.Ent)\n-                       and then Present (Interfaces (XE.Key.Ent))\n-                     then\n-                        declare\n-                           Elmt : Elmt_Id :=\n-                                    First_Elmt (Interfaces (XE.Key.Ent));\n-                        begin\n-                           while Present (Elmt) loop\n-                              Check_Type_Reference (Node (Elmt), True);\n-                              Next_Elmt (Elmt);\n-                           end loop;\n-                        end;\n+                     declare\n+                        Typ      : constant Entity_Id := XE.Key.Ent;\n+                        Elmt     : Elmt_Id;\n+\n+                     begin\n+                        if Is_Record_Type (Typ)\n+                          and then Present (Interfaces (Typ))\n+                        then\n+                           Elmt := First_Elmt (Interfaces (Typ));\n+\n+                        elsif Is_Concurrent_Type (Typ)\n+                          and then Present (Corresponding_Record_Type (Typ))\n+                          and then Present (\n+                            Interfaces (Corresponding_Record_Type (Typ)))\n+                        then\n+                           Elmt :=\n+                             First_Elmt (\n+                              Interfaces (Corresponding_Record_Type (Typ)));\n+\n+                        else\n+                           Elmt := No_Elmt;\n+                        end if;\n+\n+                        while Present (Elmt) loop\n+                           Check_Type_Reference (Node (Elmt), True);\n+                           Next_Elmt (Elmt);\n+                        end loop;\n+                     end;\n \n                      --  For array types, list index types as well. (This is\n                      --  not C, indexes have distinct types).\n \n-                     elsif Is_Array_Type (XE.Key.Ent) then\n+                     if Is_Array_Type (XE.Key.Ent) then\n                         declare\n                            Indx : Node_Id;\n                         begin"}]}