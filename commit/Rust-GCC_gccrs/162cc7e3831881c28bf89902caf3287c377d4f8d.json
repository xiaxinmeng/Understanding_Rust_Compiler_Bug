{"sha": "162cc7e3831881c28bf89902caf3287c377d4f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyY2M3ZTM4MzE4ODFjMjhiZjg5OTAyY2FmMzI4N2MzNzdkNGY4ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-02-23T18:05:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-02-23T18:05:14Z"}, "message": "Remove __seg_tls before first release.\n\n  * config/i386/i386-c.c (ix86_target_macros): Remove __SEG_TLS.\n  (ix86_register_pragmas): Remove __seg_tls.\n  * config/i386/i386-protos.h (ADDR_SPACE_SEG_TLS): Remove.\n  * config/i386/i386.c (ix86_print_operand_address_as): Don't handle it.\n  (ix86_addr_space_subset_p, TARGET_ADDR_SPACE_SUBSET_P): Remove.\n  (ix86_addr_space_convert, TARGET_ADDR_SPACE_CONVERT): Remove.\n  (ix86_addr_space_debug, TARGET_ADDR_SPACE_DEBUG): Remove.\n  * doc/extend.texi (__seg_tls): Remove item.\ntestsuite/\n  * gcc.target/i386/addr-space-3.c: Remove test.\n\nFrom-SVN: r233639", "tree": {"sha": "bf5fa82d45d2dbad267ee29e69969b20779539c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5fa82d45d2dbad267ee29e69969b20779539c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162cc7e3831881c28bf89902caf3287c377d4f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162cc7e3831881c28bf89902caf3287c377d4f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162cc7e3831881c28bf89902caf3287c377d4f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162cc7e3831881c28bf89902caf3287c377d4f8d/comments", "author": null, "committer": null, "parents": [{"sha": "196440f844be32600507b6a026bca318675d5cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196440f844be32600507b6a026bca318675d5cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196440f844be32600507b6a026bca318675d5cd0"}], "stats": {"total": 95, "additions": 16, "deletions": 79}, "files": [{"sha": "8db1f39c367e712006e8d82eaa57ce8c6c415fbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -1,3 +1,14 @@\n+2016-02-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386-c.c (ix86_target_macros): Remove __SEG_TLS.\n+\t(ix86_register_pragmas): Remove __seg_tls.\n+\t* config/i386/i386-protos.h (ADDR_SPACE_SEG_TLS): Remove.\n+\t* config/i386/i386.c (ix86_print_operand_address_as): Don't handle it.\n+\t(ix86_addr_space_subset_p, TARGET_ADDR_SPACE_SUBSET_P): Remove.\n+\t(ix86_addr_space_convert, TARGET_ADDR_SPACE_CONVERT): Remove.\n+\t(ix86_addr_space_debug, TARGET_ADDR_SPACE_DEBUG): Remove.\n+\t* doc/extend.texi (__seg_tls): Remove item.\n+\n 2016-02-23  Richard Biener  <rguenther@suse.de>\n \n \t* alloc-pool.h (struct allocation_object): Make id member"}, {"sha": "f93a09d9a277ccc97b3215bd511c24202e83f953", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -591,7 +591,6 @@ ix86_target_macros (void)\n \n   cpp_define (parse_in, \"__SEG_FS\");\n   cpp_define (parse_in, \"__SEG_GS\");\n-  cpp_define (parse_in, \"__SEG_TLS\");\n }\n \n \f\n@@ -608,7 +607,6 @@ ix86_register_pragmas (void)\n \n   c_register_addr_space (\"__seg_fs\", ADDR_SPACE_SEG_FS);\n   c_register_addr_space (\"__seg_gs\", ADDR_SPACE_SEG_GS);\n-  c_register_addr_space (\"__seg_tls\", ADDR_SPACE_SEG_TLS);\n \n #ifdef REGISTER_SUBTARGET_PRAGMAS\n   REGISTER_SUBTARGET_PRAGMAS ();"}, {"sha": "e4652f37ea618855e851e44afe8035b94d7b7f6f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -332,4 +332,3 @@ struct ix86_first_cycle_multipass_data_\n \n const addr_space_t ADDR_SPACE_SEG_FS = 1;\n const addr_space_t ADDR_SPACE_SEG_GS = 2;\n-const addr_space_t ADDR_SPACE_SEG_TLS = 3;"}, {"sha": "d8a2909b75f1c7ee27f333fca1bdcf40ce62d907", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -17395,8 +17395,6 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n     {\n       const char *string;\n \n-      if (as == ADDR_SPACE_SEG_TLS)\n-\tas = DEFAULT_TLS_SEG_REG;\n       if (as == ADDR_SPACE_SEG_FS)\n \tstring = (ASSEMBLER_DIALECT == ASM_ATT ? \"%fs:\" : \"fs:\");\n       else if (as == ADDR_SPACE_SEG_GS)\n@@ -54256,54 +54254,8 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n         without resorting to a system call, we cannot convert a\n         non-default address space to a default address space.\n         Therefore we do not claim %fs or %gs are subsets of generic.\n-    (e) However, __seg_tls uses UNSPEC_TP as the base (which itself is\n-\tstored at __seg_tls:0) so we can map between tls and generic.  */\n \n-static bool\n-ix86_addr_space_subset_p (addr_space_t subset, addr_space_t superset)\n-{\n-    return (subset == superset\n-\t    || (superset == ADDR_SPACE_GENERIC\n-\t\t&& subset == ADDR_SPACE_SEG_TLS));\n-}\n-#undef TARGET_ADDR_SPACE_SUBSET_P\n-#define TARGET_ADDR_SPACE_SUBSET_P ix86_addr_space_subset_p\n-\n-static rtx\n-ix86_addr_space_convert (rtx op, tree from_type, tree to_type)\n-{\n-  addr_space_t from_as = TYPE_ADDR_SPACE (TREE_TYPE (from_type));\n-  addr_space_t to_as = TYPE_ADDR_SPACE (TREE_TYPE (to_type));\n-\n-  /* Conversion between SEG_TLS and GENERIC is handled by adding or\n-     subtracting the thread pointer.  */\n-  if ((from_as == ADDR_SPACE_GENERIC && to_as == ADDR_SPACE_SEG_TLS)\n-      || (from_as == ADDR_SPACE_SEG_TLS && to_as == ADDR_SPACE_GENERIC))\n-    {\n-      machine_mode mode = GET_MODE (op);\n-      if (mode == VOIDmode)\n-\tmode = ptr_mode;\n-      rtx tp = get_thread_pointer (mode, optimize || mode != ptr_mode);\n-      return expand_binop (mode, (to_as == ADDR_SPACE_GENERIC\n-\t\t\t\t  ? add_optab : sub_optab),\n-\t\t\t   op, tp, NULL, 1, OPTAB_WIDEN);\n-    }\n-\n-  return op;\n-}\n-#undef TARGET_ADDR_SPACE_CONVERT\n-#define TARGET_ADDR_SPACE_CONVERT ix86_addr_space_convert\n-\n-static int\n-ix86_addr_space_debug (addr_space_t as)\n-{\n-  /* Fold __seg_tls to __seg_fs or __seg_gs for debugging.  */\n-  if (as == ADDR_SPACE_SEG_TLS)\n-    as = DEFAULT_TLS_SEG_REG;\n-  return as;\n-}\n-#undef TARGET_ADDR_SPACE_DEBUG\n-#define TARGET_ADDR_SPACE_DEBUG ix86_addr_space_debug\n+   Therefore we can (mostly) use the default hooks.  */\n \n /* All use of segmentation is assumed to make address 0 valid.  */\n "}, {"sha": "4abb0dff7bce536347198c95d5e7f963e7618a5d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -1473,23 +1473,6 @@ that it installed previously.\n \n The preprocessor symbols @code{__SEG_FS} and @code{__SEG_GS} are\n defined when these address spaces are supported.\n-\n-@item __seg_tls\n-@cindex @code{__seg_tls} x86 named address space\n-Some operating systems define either the @code{%fs} or @code{%gs}\n-segment as the thread-local storage base for each thread.  Objects\n-within this address space are accessed with the appropriate\n-segment override prefix.\n-\n-The pointer located at address 0 within the segment contains the\n-offset of the segment within the generic address space.  Thus this\n-address space is considered a subspace of the generic address space,\n-and the known segment offset is applied when converting addresses\n-to and from the generic address space.\n-\n-The preprocessor symbol @code{__SEG_TLS} is defined when this\n-address space is supported.\n-\n @end table\n \n @node Zero Length"}, {"sha": "b824dfb8abe04fe7bba60abe71efb07859411894", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162cc7e3831881c28bf89902caf3287c377d4f8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=162cc7e3831881c28bf89902caf3287c377d4f8d", "patch": "@@ -1,3 +1,7 @@\n+2016-02-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/i386/addr-space-3.c: Remove test.\n+\n 2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69126"}, {"sha": "2b6f47eee6a126abdb843f0ce439e5cb4c803388", "filename": "gcc/testsuite/gcc.target/i386/addr-space-3.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-3.c?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O\" } */\n-/* { dg-final { scan-assembler \"\\[fg]s:0\" } } */\n-\n-void test(int *y)\n-{\n-  int *x = (int __seg_tls *)0;\n-  if (x == y)\n-    asm(\"\");\n-}"}]}