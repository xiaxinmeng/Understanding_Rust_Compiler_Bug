{"sha": "84b31797f3e369cf595a66be35669e3a1216fe72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiMzE3OTdmM2UzNjljZjU5NWE2NmJlMzU2NjllM2ExMjE2ZmU3Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-24T18:57:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-24T18:57:12Z"}, "message": "locale_facets.h (class collate, [...]): Move...\n\n2007-04-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (class collate, class collate_byname):\n\tMove...\n\t* include/bits/locale_classes.h: ... here.\n\t* include/bits/locale_facets.tcc (locale::combine, locale::operator(),\n\thas_facet, use_facet, collate::_M_compare, collate::_M_transform,\n\tcollate::do_compare, collate::do_transform, collate::do_hash): Move...\n\t* include/bits/locale_classes.tcc: ... here, new.\n\t* include/Makefile.am: Add.\n\t* testsuite/util/testsuite_abi.h: Include <locale>.\n\t* include/std/locale: Tweak.\n\t* include/std/istream: Likewise.\n\t* include/std/ostream: Likewise.\n\t* include/bits/codecvt.h: Likewise.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/bits/codecvt.h: Adjust extern template declarations.\n\t* include/bits/ostream_insert.h: Likewise.\n\t* include/bits/ostream.tcc: Likewise.\n\n\t* include/bits/locale_facets.h: Do not include <bits/codecvt.h>.\n\t* include/std/fstream: Do it here.\n\t* include/bits/locale_facets_nonio.h: Likewise.\n\nFrom-SVN: r124114", "tree": {"sha": "7d63aefb98703679f9dc75de4ad90f754e8b9d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d63aefb98703679f9dc75de4ad90f754e8b9d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b31797f3e369cf595a66be35669e3a1216fe72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b31797f3e369cf595a66be35669e3a1216fe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b31797f3e369cf595a66be35669e3a1216fe72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b31797f3e369cf595a66be35669e3a1216fe72/comments", "author": null, "committer": null, "parents": [{"sha": "9872ecadbd94fa67562ed7ff6825250b122aae62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872ecadbd94fa67562ed7ff6825250b122aae62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9872ecadbd94fa67562ed7ff6825250b122aae62"}], "stats": {"total": 1071, "additions": 595, "deletions": 476}, "files": [{"sha": "fb67e0c3b0c1f052f2d9b7021e7b5cb6481c10c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1,3 +1,28 @@\n+2007-04-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (class collate, class collate_byname):\n+\tMove...\n+\t* include/bits/locale_classes.h: ... here.\n+\t* include/bits/locale_facets.tcc (locale::combine, locale::operator(),\n+\thas_facet, use_facet, collate::_M_compare, collate::_M_transform,\n+\tcollate::do_compare, collate::do_transform, collate::do_hash): Move...\n+\t* include/bits/locale_classes.tcc: ... here, new.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/util/testsuite_abi.h: Include <locale>.\n+\t* include/std/locale: Tweak.\n+\t* include/std/istream: Likewise.\n+\t* include/std/ostream: Likewise.\n+\t* include/bits/codecvt.h: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* include/bits/codecvt.h: Adjust extern template declarations.\n+\t* include/bits/ostream_insert.h: Likewise.\n+\t* include/bits/ostream.tcc: Likewise.\n+\n+\t* include/bits/locale_facets.h: Do not include <bits/codecvt.h>.\n+\t* include/std/fstream: Do it here.\n+\t* include/bits/locale_facets_nonio.h: Likewise.\n+\n 2007-04-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.h (class time_base,"}, {"sha": "75be19a5f7865d77f20bfa9ae6fb313ecf008cdc", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -89,6 +89,7 @@ bits_headers = \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\\n \t${bits_srcdir}/locale_classes.h \\\n+\t${bits_srcdir}/locale_classes.tcc \\\n \t${bits_srcdir}/locale_facets.h \\\n \t${bits_srcdir}/locale_facets.tcc \\\n \t${bits_srcdir}/locale_facets_nonio.h \\"}, {"sha": "5b4ad599218c734d186df280b8f695884cfe0481", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -323,6 +323,7 @@ bits_headers = \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\\n \t${bits_srcdir}/locale_classes.h \\\n+\t${bits_srcdir}/locale_classes.tcc \\\n \t${bits_srcdir}/locale_facets.h \\\n \t${bits_srcdir}/locale_facets.tcc \\\n \t${bits_srcdir}/locale_facets_nonio.h \\"}, {"sha": "930c798331a7f3cbc0733f82777c9967a42c0ebf", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1,6 +1,6 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -469,6 +469,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ~codecvt_byname() { }\n     };\n \n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.\n+  // NB: This syntax is a GNU extension.\n+#if _GLIBCXX_EXTERN_TEMPLATE\n+  extern template class codecvt_byname<char, char, mbstate_t>;\n+\n+  extern template\n+    const codecvt<char, char, mbstate_t>&\n+    use_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+\n+  extern template\n+    bool\n+    has_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  extern template class codecvt_byname<wchar_t, char, mbstate_t>;\n+\n+  extern template\n+    const codecvt<wchar_t, char, mbstate_t>&\n+    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n+\n+  extern template\n+    bool\n+    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n+#endif\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif // _CODECVT_H"}, {"sha": "8dc7d82219b25ab3da76f0fb85859754c7d2ff63", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 261, "deletions": 12, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -561,22 +562,270 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_install_cache(const facet*, size_t);\n   };\n \n+\n+  /**\n+   *  @brief  Test for the presence of a facet.\n+   *\n+   *  has_facet tests the locale argument for the presence of the facet type\n+   *  provided as the template parameter.  Facets derived from the facet\n+   *  parameter will also return true.\n+   *\n+   *  @param  Facet  The facet type to test the presence of.\n+   *  @param  locale  The locale to test.\n+   *  @return  true if locale contains a facet of type Facet, else false.\n+  */\n   template<typename _Facet>\n-    locale::locale(const locale& __other, _Facet* __f)\n+    inline bool\n+    has_facet(const locale& __loc) throw()\n     {\n-      _M_impl = new _Impl(*__other._M_impl, 1);\n+      const size_t __i = _Facet::id._M_id();\n+      const locale::facet** __facets = __loc._M_impl->_M_facets;\n+      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n+    }\n \n-      try\n-\t{ _M_impl->_M_install_facet(&_Facet::id, __f); }\n-      catch(...)\n-\t{\n-\t  _M_impl->_M_remove_reference();\n-\t  __throw_exception_again;\n-\t}\n-      delete [] _M_impl->_M_names[0];\n-      _M_impl->_M_names[0] = 0;   // Unnamed.\n+  /**\n+   *  @brief  Return a facet.\n+   *\n+   *  use_facet looks for and returns a reference to a facet of type Facet\n+   *  where Facet is the template parameter.  If has_facet(locale) is true,\n+   *  there is a suitable facet to return.  It throws std::bad_cast if the\n+   *  locale doesn't contain a facet of type Facet.\n+   *\n+   *  @param  Facet  The facet type to access.\n+   *  @param  locale  The locale to use.\n+   *  @return  Reference to facet of type Facet.\n+   *  @throw  std::bad_cast if locale doesn't contain a facet of type Facet.\n+  */\n+  template<typename _Facet>\n+    inline const _Facet&\n+    use_facet(const locale& __loc)\n+    {\n+      const size_t __i = _Facet::id._M_id();\n+      const locale::facet** __facets = __loc._M_impl->_M_facets;\n+      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n+        __throw_bad_cast();\n+      return static_cast<const _Facet&>(*__facets[__i]);\n     }\n \n+\n+  /**\n+   *  @brief  Facet for localized string comparison.\n+   *\n+   *  This facet encapsulates the code to compare strings in a localized\n+   *  manner.\n+   *\n+   *  The collate template uses protected virtual functions to provide\n+   *  the actual results.  The public accessors forward the call to\n+   *  the virtual functions.  These virtual functions are hooks for\n+   *  developers to implement the behavior they require from the\n+   *  collate facet.\n+  */\n+  template<typename _CharT>\n+    class collate : public locale::facet\n+    {\n+    public:\n+      // Types:\n+      //@{\n+      /// Public typedefs\n+      typedef _CharT\t\t\tchar_type;\n+      typedef basic_string<_CharT>\tstring_type;\n+      //@}\n+\n+    protected:\n+      // Underlying \"C\" library locale information saved from\n+      // initialization, needed by collate_byname as well.\n+      __c_locale\t\t\t_M_c_locale_collate;\n+\n+    public:\n+      /// Numpunct facet id.\n+      static locale::id\t\t\tid;\n+\n+      /**\n+       *  @brief  Constructor performs initialization.\n+       *\n+       *  This is the constructor provided by the standard.\n+       *\n+       *  @param refs  Passed to the base facet class.\n+      */\n+      explicit\n+      collate(size_t __refs = 0)\n+      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())\n+      { }\n+\n+      /**\n+       *  @brief  Internal constructor. Not for general use.\n+       *\n+       *  This is a constructor for use by the library itself to set up new\n+       *  locales.\n+       *\n+       *  @param cloc  The \"C\" locale.\n+       *  @param refs  Passed to the base facet class.\n+      */\n+      explicit\n+      collate(__c_locale __cloc, size_t __refs = 0)\n+      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))\n+      { }\n+\n+      /**\n+       *  @brief  Compare two strings.\n+       *\n+       *  This function compares two strings and returns the result by calling\n+       *  collate::do_compare().\n+       *\n+       *  @param lo1  Start of string 1.\n+       *  @param hi1  End of string 1.\n+       *  @param lo2  Start of string 2.\n+       *  @param hi2  End of string 2.\n+       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n+      */\n+      int\n+      compare(const _CharT* __lo1, const _CharT* __hi1,\n+\t      const _CharT* __lo2, const _CharT* __hi2) const\n+      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }\n+\n+      /**\n+       *  @brief  Transform string to comparable form.\n+       *\n+       *  This function is a wrapper for strxfrm functionality.  It takes the\n+       *  input string and returns a modified string that can be directly\n+       *  compared to other transformed strings.  In the \"C\" locale, this\n+       *  function just returns a copy of the input string.  In some other\n+       *  locales, it may replace two chars with one, change a char for\n+       *  another, etc.  It does so by returning collate::do_transform().\n+       *\n+       *  @param lo  Start of string.\n+       *  @param hi  End of string.\n+       *  @return  Transformed string_type.\n+      */\n+      string_type\n+      transform(const _CharT* __lo, const _CharT* __hi) const\n+      { return this->do_transform(__lo, __hi); }\n+\n+      /**\n+       *  @brief  Return hash of a string.\n+       *\n+       *  This function computes and returns a hash on the input string.  It\n+       *  does so by returning collate::do_hash().\n+       *\n+       *  @param lo  Start of string.\n+       *  @param hi  End of string.\n+       *  @return  Hash value.\n+      */\n+      long\n+      hash(const _CharT* __lo, const _CharT* __hi) const\n+      { return this->do_hash(__lo, __hi); }\n+\n+      // Used to abstract out _CharT bits in virtual member functions, below.\n+      int\n+      _M_compare(const _CharT*, const _CharT*) const;\n+\n+      size_t\n+      _M_transform(_CharT*, const _CharT*, size_t) const;\n+\n+  protected:\n+      /// Destructor.\n+      virtual\n+      ~collate()\n+      { _S_destroy_c_locale(_M_c_locale_collate); }\n+\n+      /**\n+       *  @brief  Compare two strings.\n+       *\n+       *  This function is a hook for derived classes to change the value\n+       *  returned.  @see compare().\n+       *\n+       *  @param lo1  Start of string 1.\n+       *  @param hi1  End of string 1.\n+       *  @param lo2  Start of string 2.\n+       *  @param hi2  End of string 2.\n+       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n+      */\n+      virtual int\n+      do_compare(const _CharT* __lo1, const _CharT* __hi1,\n+\t\t const _CharT* __lo2, const _CharT* __hi2) const;\n+\n+      /**\n+       *  @brief  Transform string to comparable form.\n+       *\n+       *  This function is a hook for derived classes to change the value\n+       *  returned.\n+       *\n+       *  @param lo1  Start of string 1.\n+       *  @param hi1  End of string 1.\n+       *  @param lo2  Start of string 2.\n+       *  @param hi2  End of string 2.\n+       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n+      */\n+      virtual string_type\n+      do_transform(const _CharT* __lo, const _CharT* __hi) const;\n+\n+      /**\n+       *  @brief  Return hash of a string.\n+       *\n+       *  This function computes and returns a hash on the input string.  This\n+       *  function is a hook for derived classes to change the value returned.\n+       *\n+       *  @param lo  Start of string.\n+       *  @param hi  End of string.\n+       *  @return  Hash value.\n+      */\n+      virtual long\n+      do_hash(const _CharT* __lo, const _CharT* __hi) const;\n+    };\n+\n+  template<typename _CharT>\n+    locale::id collate<_CharT>::id;\n+\n+  // Specializations.\n+  template<>\n+    int\n+    collate<char>::_M_compare(const char*, const char*) const;\n+\n+  template<>\n+    size_t\n+    collate<char>::_M_transform(char*, const char*, size_t) const;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    int\n+    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;\n+\n+  template<>\n+    size_t\n+    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;\n+#endif\n+\n+  /// @brief  class collate_byname [22.2.4.2].\n+  template<typename _CharT>\n+    class collate_byname : public collate<_CharT>\n+    {\n+    public:\n+      //@{\n+      /// Public typedefs\n+      typedef _CharT               char_type;\n+      typedef basic_string<_CharT> string_type;\n+      //@}\n+\n+      explicit\n+      collate_byname(const char* __s, size_t __refs = 0)\n+      : collate<_CharT>(__refs)\n+      {\n+\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\t  {\n+\t    this->_S_destroy_c_locale(this->_M_c_locale_collate);\n+\t    this->_S_create_c_locale(this->_M_c_locale_collate, __s);\n+\t  }\n+      }\n+\n+    protected:\n+      virtual\n+      ~collate_byname() { }\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n \n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <bits/locale_classes.tcc>\n+#endif\n+\n #endif"}, {"sha": "c1e698983cdc26d0bc4f21b1f1258a3c2fd0e96d", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -0,0 +1,243 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file locale_classes.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#ifndef _LOCALE_CLASSES_TCC\n+#define _LOCALE_CLASSES_TCC 1\n+\n+#pragma GCC system_header\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _Facet>\n+    locale::locale(const locale& __other, _Facet* __f)\n+    {\n+      _M_impl = new _Impl(*__other._M_impl, 1);\n+\n+      try\n+\t{ _M_impl->_M_install_facet(&_Facet::id, __f); }\n+      catch(...)\n+\t{\n+\t  _M_impl->_M_remove_reference();\n+\t  __throw_exception_again;\n+\t}\n+      delete [] _M_impl->_M_names[0];\n+      _M_impl->_M_names[0] = 0;   // Unnamed.\n+    }\n+\n+  template<typename _Facet>\n+    locale\n+    locale::combine(const locale& __other) const\n+    {\n+      _Impl* __tmp = new _Impl(*_M_impl, 1);\n+      try\n+\t{\n+\t  __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n+\t}\n+      catch(...)\n+\t{\n+\t  __tmp->_M_remove_reference();\n+\t  __throw_exception_again;\n+\t}\n+      return locale(__tmp);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    bool\n+    locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\n+                       const basic_string<_CharT, _Traits, _Alloc>& __s2) const\n+    {\n+      typedef std::collate<_CharT> __collate_type;\n+      const __collate_type& __collate = use_facet<__collate_type>(*this);\n+      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),\n+\t\t\t\t__s2.data(), __s2.data() + __s2.length()) < 0);\n+    }\n+\n+\n+  // Generic version does nothing.\n+  template<typename _CharT>\n+    int\n+    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const\n+    { return 0; }\n+\n+  // Generic version does nothing.\n+  template<typename _CharT>\n+    size_t\n+    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const\n+    { return 0; }\n+\n+  template<typename _CharT>\n+    int\n+    collate<_CharT>::\n+    do_compare(const _CharT* __lo1, const _CharT* __hi1,\n+\t       const _CharT* __lo2, const _CharT* __hi2) const\n+    {\n+      // strcoll assumes zero-terminated strings so we make a copy\n+      // and then put a zero at the end.\n+      const string_type __one(__lo1, __hi1);\n+      const string_type __two(__lo2, __hi2);\n+\n+      const _CharT* __p = __one.c_str();\n+      const _CharT* __pend = __one.data() + __one.length();\n+      const _CharT* __q = __two.c_str();\n+      const _CharT* __qend = __two.data() + __two.length();\n+\n+      // strcoll stops when it sees a nul character so we break\n+      // the strings into zero-terminated substrings and pass those\n+      // to strcoll.\n+      for (;;)\n+\t{\n+\t  const int __res = _M_compare(__p, __q);\n+\t  if (__res)\n+\t    return __res;\n+\n+\t  __p += char_traits<_CharT>::length(__p);\n+\t  __q += char_traits<_CharT>::length(__q);\n+\t  if (__p == __pend && __q == __qend)\n+\t    return 0;\n+\t  else if (__p == __pend)\n+\t    return -1;\n+\t  else if (__q == __qend)\n+\t    return 1;\n+\n+\t  __p++;\n+\t  __q++;\n+\t}\n+    }\n+\n+  template<typename _CharT>\n+    typename collate<_CharT>::string_type\n+    collate<_CharT>::\n+    do_transform(const _CharT* __lo, const _CharT* __hi) const\n+    {\n+      string_type __ret;\n+\n+      // strxfrm assumes zero-terminated strings so we make a copy\n+      const string_type __str(__lo, __hi);\n+\n+      const _CharT* __p = __str.c_str();\n+      const _CharT* __pend = __str.data() + __str.length();\n+\n+      size_t __len = (__hi - __lo) * 2;\n+\n+      _CharT* __c = new _CharT[__len];\n+\n+      try\n+\t{\n+\t  // strxfrm stops when it sees a nul character so we break\n+\t  // the string into zero-terminated substrings and pass those\n+\t  // to strxfrm.\n+\t  for (;;)\n+\t    {\n+\t      // First try a buffer perhaps big enough.\n+\t      size_t __res = _M_transform(__c, __p, __len);\n+\t      // If the buffer was not large enough, try again with the\n+\t      // correct size.\n+\t      if (__res >= __len)\n+\t\t{\n+\t\t  __len = __res + 1;\n+\t\t  delete [] __c, __c = 0;\n+\t\t  __c = new _CharT[__len];\n+\t\t  __res = _M_transform(__c, __p, __len);\n+\t\t}\n+\n+\t      __ret.append(__c, __res);\n+\t      __p += char_traits<_CharT>::length(__p);\n+\t      if (__p == __pend)\n+\t\tbreak;\n+\n+\t      __p++;\n+\t      __ret.push_back(_CharT());\n+\t    }\n+\t}\n+      catch(...)\n+\t{\n+\t  delete [] __c;\n+\t  __throw_exception_again;\n+\t}\n+\n+      delete [] __c;\n+\n+      return __ret;\n+    }\n+\n+  template<typename _CharT>\n+    long\n+    collate<_CharT>::\n+    do_hash(const _CharT* __lo, const _CharT* __hi) const\n+    {\n+      unsigned long __val = 0;\n+      for (; __lo < __hi; ++__lo)\n+\t__val =\n+\t  *__lo + ((__val << 7)\n+\t\t   | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::\n+\t\t\t\t__digits - 7)));\n+      return static_cast<long>(__val);\n+    }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.\n+  // NB: This syntax is a GNU extension.\n+#if _GLIBCXX_EXTERN_TEMPLATE\n+  extern template class collate<char>;\n+  extern template class collate_byname<char>;\n+\n+  extern template\n+    const collate<char>&\n+    use_facet<collate<char> >(const locale&);\n+\n+  extern template\n+    bool\n+    has_facet<collate<char> >(const locale&);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  extern template class collate<wchar_t>;\n+  extern template class collate_byname<wchar_t>;\n+\n+  extern template\n+    const collate<wchar_t>&\n+    use_facet<collate<wchar_t> >(const locale&);\n+\n+  extern template\n+    bool\n+    has_facet<collate<wchar_t> >(const locale&);\n+#endif\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "42865a69c3773616c7fcefadb4a759db969e4039", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 4, "deletions": 217, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1556,9 +1556,6 @@ _GLIBCXX_END_NAMESPACE\n // Include host and configuration specific ctype inlines.\n #include <bits/ctype_inline.h>\n \n-// 22.2.1.5  Template class codecvt\n-#include <bits/codecvt.h>\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 22.2.2  The numeric category.\n@@ -2546,220 +2543,6 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n _GLIBCXX_END_LDBL_NAMESPACE\n \n-  /**\n-   *  @brief  Facet for localized string comparison.\n-   *\n-   *  This facet encapsulates the code to compare strings in a localized\n-   *  manner.\n-   *\n-   *  The collate template uses protected virtual functions to provide\n-   *  the actual results.  The public accessors forward the call to\n-   *  the virtual functions.  These virtual functions are hooks for\n-   *  developers to implement the behavior they require from the\n-   *  collate facet.\n-  */\n-  template<typename _CharT>\n-    class collate : public locale::facet\n-    {\n-    public:\n-      // Types:\n-      //@{\n-      /// Public typedefs\n-      typedef _CharT\t\t\tchar_type;\n-      typedef basic_string<_CharT>\tstring_type;\n-      //@}\n-\n-    protected:\n-      // Underlying \"C\" library locale information saved from\n-      // initialization, needed by collate_byname as well.\n-      __c_locale\t\t\t_M_c_locale_collate;\n-\n-    public:\n-      /// Numpunct facet id.\n-      static locale::id\t\t\tid;\n-\n-      /**\n-       *  @brief  Constructor performs initialization.\n-       *\n-       *  This is the constructor provided by the standard.\n-       *\n-       *  @param refs  Passed to the base facet class.\n-      */\n-      explicit\n-      collate(size_t __refs = 0)\n-      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())\n-      { }\n-\n-      /**\n-       *  @brief  Internal constructor. Not for general use.\n-       *\n-       *  This is a constructor for use by the library itself to set up new\n-       *  locales.\n-       *\n-       *  @param cloc  The \"C\" locale.\n-       *  @param refs  Passed to the base facet class.\n-      */\n-      explicit\n-      collate(__c_locale __cloc, size_t __refs = 0)\n-      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))\n-      { }\n-\n-      /**\n-       *  @brief  Compare two strings.\n-       *\n-       *  This function compares two strings and returns the result by calling\n-       *  collate::do_compare().\n-       *\n-       *  @param lo1  Start of string 1.\n-       *  @param hi1  End of string 1.\n-       *  @param lo2  Start of string 2.\n-       *  @param hi2  End of string 2.\n-       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n-      */\n-      int\n-      compare(const _CharT* __lo1, const _CharT* __hi1,\n-\t      const _CharT* __lo2, const _CharT* __hi2) const\n-      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }\n-\n-      /**\n-       *  @brief  Transform string to comparable form.\n-       *\n-       *  This function is a wrapper for strxfrm functionality.  It takes the\n-       *  input string and returns a modified string that can be directly\n-       *  compared to other transformed strings.  In the \"C\" locale, this\n-       *  function just returns a copy of the input string.  In some other\n-       *  locales, it may replace two chars with one, change a char for\n-       *  another, etc.  It does so by returning collate::do_transform().\n-       *\n-       *  @param lo  Start of string.\n-       *  @param hi  End of string.\n-       *  @return  Transformed string_type.\n-      */\n-      string_type\n-      transform(const _CharT* __lo, const _CharT* __hi) const\n-      { return this->do_transform(__lo, __hi); }\n-\n-      /**\n-       *  @brief  Return hash of a string.\n-       *\n-       *  This function computes and returns a hash on the input string.  It\n-       *  does so by returning collate::do_hash().\n-       *\n-       *  @param lo  Start of string.\n-       *  @param hi  End of string.\n-       *  @return  Hash value.\n-      */\n-      long\n-      hash(const _CharT* __lo, const _CharT* __hi) const\n-      { return this->do_hash(__lo, __hi); }\n-\n-      // Used to abstract out _CharT bits in virtual member functions, below.\n-      int\n-      _M_compare(const _CharT*, const _CharT*) const;\n-\n-      size_t\n-      _M_transform(_CharT*, const _CharT*, size_t) const;\n-\n-  protected:\n-      /// Destructor.\n-      virtual\n-      ~collate()\n-      { _S_destroy_c_locale(_M_c_locale_collate); }\n-\n-      /**\n-       *  @brief  Compare two strings.\n-       *\n-       *  This function is a hook for derived classes to change the value\n-       *  returned.  @see compare().\n-       *\n-       *  @param lo1  Start of string 1.\n-       *  @param hi1  End of string 1.\n-       *  @param lo2  Start of string 2.\n-       *  @param hi2  End of string 2.\n-       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n-      */\n-      virtual int\n-      do_compare(const _CharT* __lo1, const _CharT* __hi1,\n-\t\t const _CharT* __lo2, const _CharT* __hi2) const;\n-\n-      /**\n-       *  @brief  Transform string to comparable form.\n-       *\n-       *  This function is a hook for derived classes to change the value\n-       *  returned.\n-       *\n-       *  @param lo1  Start of string 1.\n-       *  @param hi1  End of string 1.\n-       *  @param lo2  Start of string 2.\n-       *  @param hi2  End of string 2.\n-       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.\n-      */\n-      virtual string_type\n-      do_transform(const _CharT* __lo, const _CharT* __hi) const;\n-\n-      /**\n-       *  @brief  Return hash of a string.\n-       *\n-       *  This function computes and returns a hash on the input string.  This\n-       *  function is a hook for derived classes to change the value returned.\n-       *\n-       *  @param lo  Start of string.\n-       *  @param hi  End of string.\n-       *  @return  Hash value.\n-      */\n-      virtual long\n-      do_hash(const _CharT* __lo, const _CharT* __hi) const;\n-    };\n-\n-  template<typename _CharT>\n-    locale::id collate<_CharT>::id;\n-\n-  // Specializations.\n-  template<>\n-    int\n-    collate<char>::_M_compare(const char*, const char*) const;\n-\n-  template<>\n-    size_t\n-    collate<char>::_M_transform(char*, const char*, size_t) const;\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    int\n-    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;\n-\n-  template<>\n-    size_t\n-    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;\n-#endif\n-\n-  /// @brief  class collate_byname [22.2.4.2].\n-  template<typename _CharT>\n-    class collate_byname : public collate<_CharT>\n-    {\n-    public:\n-      //@{\n-      /// Public typedefs\n-      typedef _CharT               char_type;\n-      typedef basic_string<_CharT> string_type;\n-      //@}\n-\n-      explicit\n-      collate_byname(const char* __s, size_t __refs = 0)\n-      : collate<_CharT>(__refs)\n-      {\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t  {\n-\t    this->_S_destroy_c_locale(this->_M_c_locale_collate);\n-\t    this->_S_create_c_locale(this->_M_c_locale_collate, __s);\n-\t  }\n-      }\n-\n-    protected:\n-      virtual\n-      ~collate_byname() { }\n-    };\n-\n   // Subclause convenience interfaces, inlines.\n   // NB: These are inline because, when used in a loop, some compilers\n   // can hoist the body out of the loop; then it's just as fast as the\n@@ -2845,4 +2628,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \n _GLIBCXX_END_NAMESPACE\n \n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <bits/locale_facets.tcc>\n+#endif\n+\n #endif"}, {"sha": "481362af15f70828ba263f7291fbf85c02df625c", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 0, "deletions": 231, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -41,78 +41,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  template<typename _Facet>\n-    locale\n-    locale::combine(const locale& __other) const\n-    {\n-      _Impl* __tmp = new _Impl(*_M_impl, 1);\n-      try\n-\t{\n-\t  __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n-\t}\n-      catch(...)\n-\t{\n-\t  __tmp->_M_remove_reference();\n-\t  __throw_exception_again;\n-\t}\n-      return locale(__tmp);\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    bool\n-    locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\n-                       const basic_string<_CharT, _Traits, _Alloc>& __s2) const\n-    {\n-      typedef std::collate<_CharT> __collate_type;\n-      const __collate_type& __collate = use_facet<__collate_type>(*this);\n-      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),\n-\t\t\t\t__s2.data(), __s2.data() + __s2.length()) < 0);\n-    }\n-\n-  /**\n-   *  @brief  Test for the presence of a facet.\n-   *\n-   *  has_facet tests the locale argument for the presence of the facet type\n-   *  provided as the template parameter.  Facets derived from the facet\n-   *  parameter will also return true.\n-   *\n-   *  @param  Facet  The facet type to test the presence of.\n-   *  @param  locale  The locale to test.\n-   *  @return  true if locale contains a facet of type Facet, else false.\n-  */\n-  template<typename _Facet>\n-    inline bool\n-    has_facet(const locale& __loc) throw()\n-    {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n-    }\n-\n-  /**\n-   *  @brief  Return a facet.\n-   *\n-   *  use_facet looks for and returns a reference to a facet of type Facet\n-   *  where Facet is the template parameter.  If has_facet(locale) is true,\n-   *  there is a suitable facet to return.  It throws std::bad_cast if the\n-   *  locale doesn't contain a facet of type Facet.\n-   *\n-   *  @param  Facet  The facet type to access.\n-   *  @param  locale  The locale to use.\n-   *  @return  Reference to facet of type Facet.\n-   *  @throw  std::bad_cast if locale doesn't contain a facet of type Facet.\n-  */\n-  template<typename _Facet>\n-    inline const _Facet&\n-    use_facet(const locale& __loc)\n-    {\n-      const size_t __i = _Facet::id._M_id();\n-      const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n-        __throw_bad_cast();\n-      return static_cast<const _Facet&>(*__facets[__i]);\n-    }\n-\n   // Routine to access a cache for the facet.  If the cache didn't\n   // exist before, it gets constructed on the fly.\n   template<typename _Facet>\n@@ -1252,127 +1180,6 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n _GLIBCXX_END_LDBL_NAMESPACE\n \n-  // Generic version does nothing.\n-  template<typename _CharT>\n-    int\n-    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const\n-    { return 0; }\n-\n-  // Generic version does nothing.\n-  template<typename _CharT>\n-    size_t\n-    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const\n-    { return 0; }\n-\n-  template<typename _CharT>\n-    int\n-    collate<_CharT>::\n-    do_compare(const _CharT* __lo1, const _CharT* __hi1,\n-\t       const _CharT* __lo2, const _CharT* __hi2) const\n-    {\n-      // strcoll assumes zero-terminated strings so we make a copy\n-      // and then put a zero at the end.\n-      const string_type __one(__lo1, __hi1);\n-      const string_type __two(__lo2, __hi2);\n-\n-      const _CharT* __p = __one.c_str();\n-      const _CharT* __pend = __one.data() + __one.length();\n-      const _CharT* __q = __two.c_str();\n-      const _CharT* __qend = __two.data() + __two.length();\n-\n-      // strcoll stops when it sees a nul character so we break\n-      // the strings into zero-terminated substrings and pass those\n-      // to strcoll.\n-      for (;;)\n-\t{\n-\t  const int __res = _M_compare(__p, __q);\n-\t  if (__res)\n-\t    return __res;\n-\n-\t  __p += char_traits<_CharT>::length(__p);\n-\t  __q += char_traits<_CharT>::length(__q);\n-\t  if (__p == __pend && __q == __qend)\n-\t    return 0;\n-\t  else if (__p == __pend)\n-\t    return -1;\n-\t  else if (__q == __qend)\n-\t    return 1;\n-\n-\t  __p++;\n-\t  __q++;\n-\t}\n-    }\n-\n-  template<typename _CharT>\n-    typename collate<_CharT>::string_type\n-    collate<_CharT>::\n-    do_transform(const _CharT* __lo, const _CharT* __hi) const\n-    {\n-      string_type __ret;\n-\n-      // strxfrm assumes zero-terminated strings so we make a copy\n-      const string_type __str(__lo, __hi);\n-\n-      const _CharT* __p = __str.c_str();\n-      const _CharT* __pend = __str.data() + __str.length();\n-\n-      size_t __len = (__hi - __lo) * 2;\n-\n-      _CharT* __c = new _CharT[__len];\n-\n-      try\n-\t{\n-\t  // strxfrm stops when it sees a nul character so we break\n-\t  // the string into zero-terminated substrings and pass those\n-\t  // to strxfrm.\n-\t  for (;;)\n-\t    {\n-\t      // First try a buffer perhaps big enough.\n-\t      size_t __res = _M_transform(__c, __p, __len);\n-\t      // If the buffer was not large enough, try again with the\n-\t      // correct size.\n-\t      if (__res >= __len)\n-\t\t{\n-\t\t  __len = __res + 1;\n-\t\t  delete [] __c, __c = 0;\n-\t\t  __c = new _CharT[__len];\n-\t\t  __res = _M_transform(__c, __p, __len);\n-\t\t}\n-\n-\t      __ret.append(__c, __res);\n-\t      __p += char_traits<_CharT>::length(__p);\n-\t      if (__p == __pend)\n-\t\tbreak;\n-\n-\t      __p++;\n-\t      __ret.push_back(_CharT());\n-\t    }\n-\t}\n-      catch(...)\n-\t{\n-\t  delete [] __c;\n-\t  __throw_exception_again;\n-\t}\n-\n-      delete [] __c;\n-\n-      return __ret;\n-    }\n-\n-  template<typename _CharT>\n-    long\n-    collate<_CharT>::\n-    do_hash(const _CharT* __lo, const _CharT* __hi) const\n-    {\n-      unsigned long __val = 0;\n-      for (; __lo < __hi; ++__lo)\n-\t__val =\n-\t  *__lo + ((__val << 7)\n-\t\t   | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::\n-\t\t\t\t__digits - 7)));\n-      return static_cast<long>(__val);\n-    }\n-\n   // Construct correctly padded string, as per 22.2.2.2.2\n   // Assumes\n   // __newlen > __oldlen\n@@ -1502,17 +1309,6 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   extern template class _GLIBCXX_LDBL_NAMESPACE num_get<char>;\n   extern template class _GLIBCXX_LDBL_NAMESPACE num_put<char>;\n   extern template class ctype_byname<char>;\n-  extern template class codecvt_byname<char, char, mbstate_t>;\n-  extern template class collate<char>;\n-  extern template class collate_byname<char>;\n-\n-  extern template\n-    const codecvt<char, char, mbstate_t>&\n-    use_facet<codecvt<char, char, mbstate_t> >(const locale&);\n-\n-  extern template\n-    const collate<char>&\n-    use_facet<collate<char> >(const locale&);\n \n   extern template\n     const numpunct<char>&\n@@ -1530,14 +1326,6 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     bool\n     has_facet<ctype<char> >(const locale&);\n \n-  extern template\n-    bool\n-    has_facet<codecvt<char, char, mbstate_t> >(const locale&);\n-\n-  extern template\n-    bool\n-    has_facet<collate<char> >(const locale&);\n-\n   extern template\n     bool\n     has_facet<numpunct<char> >(const locale&);\n@@ -1556,17 +1344,6 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   extern template class _GLIBCXX_LDBL_NAMESPACE num_get<wchar_t>;\n   extern template class _GLIBCXX_LDBL_NAMESPACE num_put<wchar_t>;\n   extern template class ctype_byname<wchar_t>;\n-  extern template class codecvt_byname<wchar_t, char, mbstate_t>;\n-  extern template class collate<wchar_t>;\n-  extern template class collate_byname<wchar_t>;\n-\n-  extern template\n-    const codecvt<wchar_t, char, mbstate_t>&\n-    use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);\n-\n-  extern template\n-    const collate<wchar_t>&\n-    use_facet<collate<wchar_t> >(const locale&);\n \n   extern template\n     const numpunct<wchar_t>&\n@@ -1584,14 +1361,6 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     bool\n     has_facet<ctype<wchar_t> >(const locale&);\n \n-  extern template\n-    bool\n-    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n-\n-  extern template\n-    bool\n-    has_facet<collate<wchar_t> >(const locale&);\n-\n   extern template\n     bool\n     has_facet<numpunct<wchar_t> >(const locale&);"}, {"sha": "15de0834fbee12471d637342324ccdc921f104b5", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -39,6 +39,8 @@\n #ifndef _LOCALE_FACETS_NONIO_H\n #define _LOCALE_FACETS_NONIO_H 1\n \n+#pragma GCC system_header\n+\n #include <ctime>\t// For struct tm\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -1903,7 +1905,14 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \n _GLIBCXX_END_NAMESPACE\n \n-  // Include host and configuration specific messages functions.\n+// Include host and configuration specific messages functions.\n #include <bits/messages_members.h>\n \n+// 22.2.1.5  Template class codecvt\n+#include <bits/codecvt.h>\n+\n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <bits/locale_facets_nonio.tcc>\n+#endif\n+\n #endif"}, {"sha": "2db9e07242349a2e703ff32eb0dfb721476f2a86", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -35,6 +35,8 @@\n #ifndef _LOCALE_FACETS_NONIO_TCC\n #define _LOCALE_FACETS_NONIO_TCC 1\n \n+#pragma GCC system_header\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _CharT, bool _Intl>\n@@ -1168,6 +1170,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       return std::__write(__s, __res, char_traits<char_type>::length(__res));\n     }\n \n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB: This syntax is a GNU extension."}, {"sha": "8ef9d89025bcab69592dcce6ec7e098a9f188ab9", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -332,7 +332,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template ostream& operator<<(ostream&, const char*);\n   extern template ostream& operator<<(ostream&, const unsigned char*);\n   extern template ostream& operator<<(ostream&, const signed char*);\n-  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\n \n   extern template ostream& ostream::_M_insert(long);\n   extern template ostream& ostream::_M_insert(unsigned long);\n@@ -354,8 +353,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template wostream& operator<<(wostream&, char);\n   extern template wostream& operator<<(wostream&, const wchar_t*);\n   extern template wostream& operator<<(wostream&, const char*);\n-  extern template wostream& __ostream_insert(wostream&, const wchar_t*,\n-\t\t\t\t\t     streamsize);\n \n   extern template wostream& wostream::_M_insert(long);\n   extern template wostream& wostream::_M_insert(unsigned long);"}, {"sha": "e9e83fbc51f0f2d354d3291ac44858b6372187a8", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -109,6 +109,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __out;\n     }\n \n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.\n+  // NB:  This syntax is a GNU extension.\n+#if _GLIBCXX_EXTERN_TEMPLATE\n+  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  extern template wostream& __ostream_insert(wostream&, const wchar_t*,\n+\t\t\t\t\t     streamsize);\n+#endif\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _OSTREAM_INSERT_H */"}, {"sha": "cab18c1fcb191af20e5e3cd9296c2d24b680d821", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -44,7 +44,8 @@\n \n #include <istream>\n #include <ostream>\n-#include <cstdio>       // For BUFSIZ     \n+#include <bits/codecvt.h>\n+#include <cstdio>             // For BUFSIZ     \n #include <bits/basic_file.h>  // For __basic_file, __c_lock\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -61,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Requirements on traits_type, specific to this class:\n   // traits_type::pos_type must be fpos<traits_type::state_type>\n   // traits_type::off_type must be streamoff\n-  // traits_type::state_type must be Assignable and DefaultConstructable,\n+  // traits_type::state_type must be Assignable and DefaultConstructible,\n   // and traits_type::state_type() must be the initial state for codecvt.\n   template<typename _CharT, typename _Traits>\n     class basic_filebuf : public basic_streambuf<_CharT, _Traits>"}, {"sha": "8b1666c10e312485154c50afc1753f92e30e69a3", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -836,7 +836,6 @@ _GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/istream.tcc>\n-# include <bits/locale_facets.tcc>\n #endif\n \n #endif\t/* _GLIBCXX_ISTREAM */"}, {"sha": "40a996d84380b6566f734ff4e3805c6f6d24a134", "filename": "libstdc++-v3/include/std/locale", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1,7 +1,8 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-// 2006, 2007 Free Software Foundation, Inc.\n+// 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,9 +47,4 @@\n #include <bits/locale_facets.h>\n #include <bits/locale_facets_nonio.h>\n \n-#ifndef _GLIBCXX_EXPORT_TEMPLATE\n-# include <bits/locale_facets.tcc>\n-# include <bits/locale_facets_nonio.tcc>\n-#endif\n-\n #endif /* _GLIBCXX_LOCALE */"}, {"sha": "2287756513cbdd7e9cb01b01adb1d557ba2c57b6", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -570,7 +570,6 @@ _GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/ostream.tcc>\n-# include <bits/locale_facets.tcc>\n #endif\n \n #endif\t/* _GLIBCXX_OSTREAM */"}, {"sha": "89825a875ab1a62392a4ddb714fdba21a4c21c70", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b31797f3e369cf595a66be35669e3a1216fe72/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h?ref=84b31797f3e369cf595a66be35669e3a1216fe72", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -32,6 +32,7 @@\n #include <string>\n #include <stdexcept>\n #include <deque>\n+#include <locale>\n #include <ext/hash_map>\n #include <cxxabi.h>\n "}]}