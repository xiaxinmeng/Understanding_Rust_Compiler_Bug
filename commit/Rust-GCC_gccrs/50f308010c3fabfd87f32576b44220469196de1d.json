{"sha": "50f308010c3fabfd87f32576b44220469196de1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmMzA4MDEwYzNmYWJmZDg3ZjMyNTc2YjQ0MjIwNDY5MTk2ZGUxZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-01T20:50:46Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-01T20:50:46Z"}, "message": "re PR fortran/44541 ([OOP] wrong code for polymorphic variable with INTENT(OUT)/Alloc w/ MOLD)\n\n2010-09-01  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44541\n\t* class.c (gfc_find_derived_vtab): Add component '$def_init'.\n\t* resolve.c (resolve_allocate_expr): Defer handling of default\n\tinitialization to 'gfc_trans_allocate'.\n\t(apply_default_init,resolve_symbol): Handle polymorphic dummies.\n\t(resolve_fl_derived): Suppress error messages for vtypes.\n\t* trans-stmt.c (gfc_trans_allocate): Handle initialization via\n\tpolymorphic MOLD expression.\n\t* trans-expr.c (gfc_trans_class_init_assign): Now only used for\n\tdummy initialization.\n\n\n2010-09-01  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44541\n\t* gfortran.dg/allocate_alloc_opt_10.f90: Extended.\n\t* gfortran.dg/class_dummy_1.f03: New.\n\nFrom-SVN: r163744", "tree": {"sha": "76df2300c94ed6e0551613c3ace7b3f60f88da56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76df2300c94ed6e0551613c3ace7b3f60f88da56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f308010c3fabfd87f32576b44220469196de1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f308010c3fabfd87f32576b44220469196de1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f308010c3fabfd87f32576b44220469196de1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f308010c3fabfd87f32576b44220469196de1d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596aa3f09d3cb553112fe78da3074075da57d1b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596aa3f09d3cb553112fe78da3074075da57d1b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596aa3f09d3cb553112fe78da3074075da57d1b9"}], "stats": {"total": 248, "additions": 188, "deletions": 60}, "files": [{"sha": "7169de88001eac3131f93cdc5ca08075f3f73c40", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -1,3 +1,16 @@\n+2010-09-01  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44541\n+\t* class.c (gfc_find_derived_vtab): Add component '$def_init'.\n+\t* resolve.c (resolve_allocate_expr): Defer handling of default\n+\tinitialization to 'gfc_trans_allocate'.\n+\t(apply_default_init,resolve_symbol): Handle polymorphic dummies.\n+\t(resolve_fl_derived): Suppress error messages for vtypes.\n+\t* trans-stmt.c (gfc_trans_allocate): Handle initialization via\n+\tpolymorphic MOLD expression.\n+\t* trans-expr.c (gfc_trans_class_init_assign): Now only used for\n+\tdummy initialization.\n+\n 2010-09-01  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.texi (preprocessing): Update URL to COCO."}, {"sha": "218247dbfaa7a4ebeaea9b37af53ffb165b05867", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -319,7 +319,7 @@ gfc_symbol *\n gfc_find_derived_vtab (gfc_symbol *derived)\n {\n   gfc_namespace *ns;\n-  gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL;\n+  gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL, *def_init = NULL;\n   char name[2 * GFC_MAX_SYMBOL_LEN + 8];\n   \n   /* Find the top-level namespace (MODULE or PROGRAM).  */\n@@ -408,6 +408,33 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  c->initializer = gfc_get_null_expr (NULL);\n \t\t}\n \n+\t      /* Add component $def_init.  */\n+\t      if (gfc_add_component (vtype, \"$def_init\", &c) == FAILURE)\n+\t\tgoto cleanup;\n+\t      c->attr.pointer = 1;\n+\t      c->attr.access = ACCESS_PRIVATE;\n+\t      c->ts.type = BT_DERIVED;\n+\t      c->ts.u.derived = derived;\n+\t      if (derived->attr.abstract)\n+\t\tc->initializer = NULL;\n+\t      else\n+\t\t{\n+\t\t  /* Construct default initialization variable.  */\n+\t\t  sprintf (name, \"def_init$%s\", derived->name);\n+\t\t  gfc_get_symbol (name, ns, &def_init);\n+\t\t  def_init->attr.target = 1;\n+\t\t  def_init->attr.save = SAVE_EXPLICIT;\n+\t\t  def_init->attr.access = ACCESS_PUBLIC;\n+\t\t  def_init->attr.flavor = FL_VARIABLE;\n+\t\t  gfc_set_sym_referenced (def_init);\n+\t\t  def_init->ts.type = BT_DERIVED;\n+\t\t  def_init->ts.u.derived = derived;\n+\t\t  def_init->value = gfc_default_initializer (&def_init->ts);\n+\n+\t\t  c->initializer = gfc_lval_expr_from_sym (def_init);\n+\t\t}\n+\n+\t      /* Add procedure pointers for type-bound procedures.  */\n \t      add_procs_to_declared_vtab (derived, vtype);\n \t      vtype->attr.vtype = 1;\n \t    }\n@@ -427,6 +454,8 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n       gfc_commit_symbol (vtab);\n       if (vtype)\n \tgfc_commit_symbol (vtype);\n+      if (def_init)\n+\tgfc_commit_symbol (def_init);\n     }\n   else\n     gfc_undo_symbols ();"}, {"sha": "b6980a69eaa72d51be8b3bfb433a5ecbf79d17e0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -6710,37 +6710,6 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\t sym->name, &e->where);\n       goto failure;\n     }\n-    \n-  if (!code->expr3 || code->expr3->mold)\n-    {\n-      /* Add default initializer for those derived types that need them.  */\n-      gfc_expr *init_e = NULL;\n-      gfc_typespec ts;\n-\n-      if (code->ext.alloc.ts.type == BT_DERIVED)\n-\tts = code->ext.alloc.ts;\n-      else if (code->expr3)\n-\tts = code->expr3->ts;\n-      else\n-\tts = e->ts;\n-\n-      if (ts.type == BT_DERIVED)\n-\tinit_e = gfc_default_initializer (&ts);\n-      /* FIXME: Use default init of dynamic type (cf. PR 44541).  */\n-      else if (e->ts.type == BT_CLASS)\n-\tinit_e = gfc_default_initializer (&ts.u.derived->components->ts);\n-\n-      if (init_e)\n-\t{\n-\t  gfc_code *init_st = gfc_get_code ();\n-\t  init_st->loc = code->loc;\n-\t  init_st->op = EXEC_INIT_ASSIGN;\n-\t  init_st->expr1 = gfc_expr_to_initialize (e);\n-\t  init_st->expr2 = init_e;\n-\t  init_st->next = code->next;\n-\t  code->next = init_st;\n-\t}\n-    }\n \n   if (e->ts.type == BT_CLASS)\n     {\n@@ -9503,7 +9472,7 @@ apply_default_init (gfc_symbol *sym)\n   if (sym->ts.type == BT_DERIVED && sym->ts.u.derived)\n     init = gfc_default_initializer (&sym->ts);\n \n-  if (init == NULL)\n+  if (init == NULL && sym->ts.type != BT_CLASS)\n     return;\n \n   build_init_assign (sym, init);\n@@ -11429,7 +11398,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t}\n \n       /* Check type-spec if this is not the parent-type component.  */\n-      if ((!sym->attr.extension || c != sym->components)\n+      if ((!sym->attr.extension || c != sym->components) && !sym->attr.vtype\n \t  && resolve_typespec_used (&c->ts, &c->loc, c->name) == FAILURE)\n \treturn FAILURE;\n \n@@ -11488,8 +11457,8 @@ resolve_fl_derived (gfc_symbol *sym)\n \t    }\n \t}\n \n-      if (!sym->attr.is_class && c->ts.type == BT_DERIVED && c->attr.pointer\n-\t  && c->ts.u.derived->components == NULL\n+      if (!sym->attr.is_class && c->ts.type == BT_DERIVED && !sym->attr.vtype\n+\t  && c->attr.pointer && c->ts.u.derived->components == NULL\n \t  && !c->ts.u.derived->attr.zero_comp)\n \t{\n \t  gfc_error (\"The pointer component '%s' of '%s' at %L is a type \"\n@@ -12194,6 +12163,14 @@ resolve_symbol (gfc_symbol *sym)\n \tapply_default_init (sym);\n     }\n \n+  if (sym->ts.type == BT_CLASS && sym->ns == gfc_current_ns\n+      && sym->attr.dummy && sym->attr.intent == INTENT_OUT\n+      && !sym->attr.pointer && !sym->attr.allocatable)\n+    {\n+      apply_default_init (sym);\n+      gfc_set_sym_referenced (sym);\n+    }\n+\n   /* If this symbol has a type-spec, check it.  */\n   if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER\n       || (sym->attr.flavor == FL_PROCEDURE && sym->attr.function))"}, {"sha": "937a8324df8b8c04dfe516778fb7caee833793c3", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -5760,27 +5760,39 @@ gfc_trans_assign (gfc_code * code)\n }\n \n \n-/* Special case for initializing a CLASS variable on allocation.\n-   A MEMCPY is needed to copy the full data of the dynamic type,\n-   which may be different from the declared type.  */\n+/* Special case for initializing a polymorphic dummy with INTENT(OUT).\n+   A MEMCPY is needed to copy the full data from the default initializer\n+   of the dynamic type.  */\n \n tree\n gfc_trans_class_init_assign (gfc_code *code)\n {\n   stmtblock_t block;\n-  tree tmp, memsz;\n-  gfc_se dst,src;\n-  \n+  tree tmp;\n+  gfc_se dst,src,memsz;\n+  gfc_expr *lhs,*rhs,*sz;\n+\n   gfc_start_block (&block);\n-  \n+\n+  lhs = gfc_copy_expr (code->expr1);\n+  gfc_add_component_ref (lhs, \"$data\");\n+\n+  rhs = gfc_copy_expr (code->expr1);\n+  gfc_add_component_ref (rhs, \"$vptr\");\n+  gfc_add_component_ref (rhs, \"$def_init\");\n+\n+  sz = gfc_copy_expr (code->expr1);\n+  gfc_add_component_ref (sz, \"$vptr\");\n+  gfc_add_component_ref (sz, \"$size\");\n+\n   gfc_init_se (&dst, NULL);\n   gfc_init_se (&src, NULL);\n-  gfc_add_component_ref (code->expr1, \"$data\");\n-  gfc_conv_expr (&dst, code->expr1);\n-  gfc_conv_expr (&src, code->expr2);\n+  gfc_init_se (&memsz, NULL);\n+  gfc_conv_expr (&dst, lhs);\n+  gfc_conv_expr (&src, rhs);\n+  gfc_conv_expr (&memsz, sz);\n   gfc_add_block_to_block (&block, &src.pre);\n-  memsz = TYPE_SIZE_UNIT (gfc_typenode_for_spec (&code->expr2->ts));\n-  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n+  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz.expr);\n   gfc_add_expr_to_block (&block, tmp);\n   \n   return gfc_finish_block (&block);"}, {"sha": "d9b60a60b492579b7e8ded8e94eeccb6085f5e20", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -4399,6 +4399,54 @@ gfc_trans_allocate (gfc_code * code)\n \t  gfc_free_expr (rhs);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n+      else\n+\t{\n+\t  /* Add default initializer for those derived types that need them.  */\n+\t  gfc_expr *rhs = NULL;\n+\t  gfc_typespec ts;\n+\n+\t  if (code->ext.alloc.ts.type == BT_DERIVED)\n+\t    ts = code->ext.alloc.ts;\n+\t  else if (code->expr3)\n+\t    ts = code->expr3->ts;\n+\t  else\n+\t    ts = expr->ts;\n+\n+\t  if (ts.type == BT_DERIVED)\n+\t    {\n+\t      rhs = gfc_default_initializer (&ts);\n+\t      gfc_resolve_expr (rhs);\n+\t    }\n+\t  else if (ts.type == BT_CLASS)\n+\t    {\n+\t      rhs = gfc_copy_expr (code->expr3);\n+\t      gfc_add_component_ref (rhs, \"$vptr\");\n+\t      gfc_add_component_ref (rhs, \"$def_init\");\n+\t    }\n+\n+\t  if (rhs)\n+\t    {\n+\t      gfc_expr *lhs = gfc_expr_to_initialize (expr);\n+\t      if (al->expr->ts.type == BT_DERIVED)\n+\t\t{\n+\t\t  tmp = gfc_trans_assignment (lhs, rhs, true, false);\n+\t\t  gfc_add_expr_to_block (&block, tmp);\n+\t\t}\n+\t      else if (al->expr->ts.type == BT_CLASS)\n+\t\t{\n+\t\t  gfc_se dst,src;\n+\t\t  gfc_init_se (&dst, NULL);\n+\t\t  gfc_init_se (&src, NULL);\n+\t\t  gfc_conv_expr (&dst, lhs);\n+\t\t  gfc_conv_expr (&src, rhs);\n+\t\t  gfc_add_block_to_block (&block, &src.pre);\n+\t\t  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n+\t\t  gfc_add_expr_to_block (&block, tmp);\n+\t\t}\n+\t      gfc_free_expr (lhs);\n+\t      gfc_free_expr (rhs);\n+\t    }\n+\t}\n \n       /* Allocation of CLASS entities.  */\n       gfc_free_expr (expr);"}, {"sha": "1fd07c787356a04e032ac35110ff351c36f1faae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -1,3 +1,9 @@\n+2010-09-01  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44541\n+\t* gfortran.dg/allocate_alloc_opt_10.f90: Extended.\n+\t* gfortran.dg/class_dummy_1.f03: New.\n+\n 2010-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/45458"}, {"sha": "f5dae1ac6e81017fd9bfbd6c71c918e79aa0a6c5", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_10.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -16,7 +16,7 @@\n type(t2) :: z\n \n \n-!!! first example (works)\n+!!! first example (static)\n \n z%j = 5\n allocate(x,MOLD=z)\n@@ -25,22 +25,22 @@\n type is (t2)\n   print *,x%j\n   if (x%j/=4) call abort\n+  x%j = 5\n class default\n   call abort()\n end select\n \n \n-!!! second example (fails)\n-!!! FIXME: uncomment once implemented (cf. PR 44541)\n+!!! second example (dynamic, PR 44541)\n \n-! allocate(y,MOLD=x)\n-! \n-! select type (y)\n-! type is (t2)\n-!   print *,y%j\n-!   if (y%j/=4) call abort\n-! class default\n-!   call abort()\n-! end select\n+allocate(y,MOLD=x)\n+\n+select type (y)\n+type is (t2)\n+  print *,y%j\n+  if (y%j/=4) call abort\n+class default\n+  call abort()\n+end select\n \n end"}, {"sha": "950379027fd67bdc0aaa60410f8f1e3a4610a5ce", "filename": "gcc/testsuite/gfortran.dg/class_dummy_1.f03", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f308010c3fabfd87f32576b44220469196de1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_1.f03?ref=50f308010c3fabfd87f32576b44220469196de1d", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+!\n+! PR 44541: [OOP] wrong code for polymorphic variable with INTENT(OUT)/Alloc w/ MOLD\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+  implicit none\n+\n+  type t\n+    integer :: a = 1\n+  end type t\n+\n+  type, extends(t) :: t2\n+    integer :: b = 3\n+  end type t2\n+\n+  type(t2) :: y\n+\n+  y%a = 44\n+  y%b = 55\n+  call intent_out (y)\n+  if (y%a/=1 .or. y%b/=3) call abort()\n+\n+  y%a = 66\n+  y%b = 77\n+  call intent_out_unused (y)\n+  if (y%a/=1 .or. y%b/=3) call abort()\n+\n+contains\n+\n+  subroutine intent_out(x)\n+    class(t), intent(out) :: x\n+    select type (x)\n+      type is (t2)\n+      if (x%a/=1 .or. x%b/=3) call abort()\n+    end select\n+  end subroutine\n+\n+   subroutine intent_out_unused(x)\n+     class(t), intent(out) :: x\n+   end subroutine\n+\n+end"}]}