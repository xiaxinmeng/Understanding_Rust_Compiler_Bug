{"sha": "f329b264b3d8f91909caca1df4f9ee043d3ca14a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyOWIyNjRiM2Q4ZjkxOTA5Y2FjYTFkZjRmOWVlMDQzZDNjYTE0YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-08-28T05:05:15Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-08-28T05:05:15Z"}, "message": "Tag {ms,sysv}_va_list_type_node with '{ms,sysv}_abi va_list' attribute\n\n2016-08-28  Tom de Vries  <tom@codesourcery.com>\n\n\tPR lto/70955\n\t* config/i386/i386.c (ix86_build_builtin_va_list_64): Tag type with\n\t'sysv_abi va_list' attribute.\n\t(ix86_build_builtin_va_list): Tag type with 'ms_abi va_list' attribute.\n\t(ix86_canonical_va_list_type): Handle 'sysv_abi/ms_abi va_list'\n\tattributes.\n\n\t* gcc.dg/pr70955.c: New test.\n\t* gcc.dg/lto/pr70955_0.c: Same.\n\t* gcc.dg/lto/pr70955_1.c: Same.\n\nFrom-SVN: r239805", "tree": {"sha": "1f2a5572524b8c735ecfec90f721a14a45326b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f2a5572524b8c735ecfec90f721a14a45326b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f329b264b3d8f91909caca1df4f9ee043d3ca14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f329b264b3d8f91909caca1df4f9ee043d3ca14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f329b264b3d8f91909caca1df4f9ee043d3ca14a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f329b264b3d8f91909caca1df4f9ee043d3ca14a/comments", "author": null, "committer": null, "parents": [{"sha": "5730f967faa04564f28d22943f7f71062ff2c2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5730f967faa04564f28d22943f7f71062ff2c2cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5730f967faa04564f28d22943f7f71062ff2c2cc"}], "stats": {"total": 190, "additions": 127, "deletions": 63}, "files": [{"sha": "9ddb5bd188bb3819157a49dd18626714f17c5564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -1,3 +1,12 @@\n+2016-08-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR lto/70955\n+\t* config/i386/i386.c (ix86_build_builtin_va_list_64): Tag type with\n+\t'sysv_abi va_list' attribute.\n+\t(ix86_build_builtin_va_list): Tag type with 'ms_abi va_list' attribute.\n+\t(ix86_canonical_va_list_type): Handle 'sysv_abi/ms_abi va_list'\n+\tattributes.\n+\n 2016-08-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* emit-rtl.h (struct rtl_data): Make stack_slot_list a vector."}, {"sha": "4531647e7a6d67ad3b6b920a883cc1e2a4871742", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 63, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -10548,6 +10548,9 @@ ix86_build_builtin_va_list_64 (void)\n \n   layout_type (record);\n \n+  TYPE_ATTRIBUTES (record) = tree_cons (get_identifier (\"sysv_abi va_list\"),\n+\t\t\t\t\tNULL_TREE, TYPE_ATTRIBUTES (record));\n+\n   /* The correct type is an array type of one element.  */\n   return build_array_type (record, build_index_type (size_zero_node));\n }\n@@ -10560,17 +10563,36 @@ ix86_build_builtin_va_list (void)\n {\n   if (TARGET_64BIT)\n     {\n-      /* Initialize ABI specific va_list builtin types.  */\n-      tree sysv_va_list, ms_va_list;\n-\n-      sysv_va_list = ix86_build_builtin_va_list_64 ();\n-      sysv_va_list_type_node = build_variant_type_copy (sysv_va_list);\n+      /* Initialize ABI specific va_list builtin types.\n+\n+\t In lto1, we can encounter two va_list types:\n+\t - one as a result of the type-merge across TUs, and\n+\t - the one constructed here.\n+\t These two types will not have the same TYPE_MAIN_VARIANT, and therefore\n+\t a type identity check in canonical_va_list_type based on\n+\t TYPE_MAIN_VARIANT (which we used to have) will not work.\n+\t Instead, we tag each va_list_type_node with its unique attribute, and\n+\t look for the attribute in the type identity check in\n+\t canonical_va_list_type.\n+\n+\t Tagging sysv_va_list_type_node directly with the attribute is\n+\t problematic since it's a array of one record, which will degrade into a\n+\t pointer to record when used as parameter (see build_va_arg comments for\n+\t an example), dropping the attribute in the process.  So we tag the\n+\t record instead.  */\n+\n+      /* For SYSV_ABI we use an array of one record.  */\n+      sysv_va_list_type_node = ix86_build_builtin_va_list_64 ();\n \t\n       /* For MS_ABI we use plain pointer to argument area.  */\n-      ms_va_list = build_pointer_type (char_type_node);\n-      ms_va_list_type_node = build_variant_type_copy (ms_va_list);\n+      tree char_ptr_type = build_pointer_type (char_type_node);\n+      tree attr = tree_cons (get_identifier (\"ms_abi va_list\"), NULL_TREE,\n+\t\t\t     TYPE_ATTRIBUTES (char_ptr_type));\n+      ms_va_list_type_node = build_type_attribute_variant (char_ptr_type, attr);\n \n-      return (ix86_abi == MS_ABI) ? ms_va_list : sysv_va_list;\n+      return ((ix86_abi == MS_ABI)\n+\t      ? ms_va_list_type_node\n+\t      : sysv_va_list_type_node);\n     }\n   else\n     {\n@@ -44644,6 +44666,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n   /* ms_abi and sysv_abi calling convention function attributes.  */\n   { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true },\n   { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true },\n+  { \"ms_abi va_list\", 0, 0, false, false, false, NULL, false },\n+  { \"sysv_abi va_list\", 0, 0, false, false, false, NULL, false },\n   { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute,\n     false },\n   { \"callee_pop_aggregate_return\", 1, 1, false, true, true,\n@@ -48538,8 +48562,6 @@ ix86_fn_abi_va_list (tree fndecl)\n static tree\n ix86_canonical_va_list_type (tree type)\n {\n-  tree wtype, htype;\n-\n   /* Resolve references and pointers to va_list type.  */\n   if (TREE_CODE (type) == MEM_REF)\n     type = TREE_TYPE (type);\n@@ -48548,64 +48570,25 @@ ix86_canonical_va_list_type (tree type)\n   else if (POINTER_TYPE_P (type) && TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n \n-  if (TARGET_64BIT && va_list_type_node != NULL_TREE)\n+  if (TARGET_64BIT)\n     {\n-      wtype = va_list_type_node;\n-\t  gcc_assert (wtype != NULL_TREE);\n-      htype = type;\n-      if (TREE_CODE (wtype) == ARRAY_TYPE)\n-\t{\n-\t  /* If va_list is an array type, the argument may have decayed\n-\t     to a pointer type, e.g. by being passed to another function.\n-\t     In that case, unwrap both types so that we can compare the\n-\t     underlying records.  */\n-\t  if (TREE_CODE (htype) == ARRAY_TYPE\n-\t      || POINTER_TYPE_P (htype))\n-\t    {\n-\t      wtype = TREE_TYPE (wtype);\n-\t      htype = TREE_TYPE (htype);\n-\t    }\n-\t}\n-      if (TYPE_MAIN_VARIANT (wtype) == TYPE_MAIN_VARIANT (htype))\n-\treturn va_list_type_node;\n-      wtype = sysv_va_list_type_node;\n-\t  gcc_assert (wtype != NULL_TREE);\n-      htype = type;\n-      if (TREE_CODE (wtype) == ARRAY_TYPE)\n-\t{\n-\t  /* If va_list is an array type, the argument may have decayed\n-\t     to a pointer type, e.g. by being passed to another function.\n-\t     In that case, unwrap both types so that we can compare the\n-\t     underlying records.  */\n-\t  if (TREE_CODE (htype) == ARRAY_TYPE\n-\t      || POINTER_TYPE_P (htype))\n-\t    {\n-\t      wtype = TREE_TYPE (wtype);\n-\t      htype = TREE_TYPE (htype);\n-\t    }\n-\t}\n-      if (TYPE_MAIN_VARIANT (wtype) == TYPE_MAIN_VARIANT (htype))\n-\treturn sysv_va_list_type_node;\n-      wtype = ms_va_list_type_node;\n-\t  gcc_assert (wtype != NULL_TREE);\n-      htype = type;\n-      if (TREE_CODE (wtype) == ARRAY_TYPE)\n+      if (lookup_attribute (\"ms_abi va_list\", TYPE_ATTRIBUTES (type)))\n+\treturn ms_va_list_type_node;\n+\n+      if ((TREE_CODE (type) == ARRAY_TYPE\n+\t   && integer_zerop (array_type_nelts (type)))\n+\t  || POINTER_TYPE_P (type))\n \t{\n-\t  /* If va_list is an array type, the argument may have decayed\n-\t     to a pointer type, e.g. by being passed to another function.\n-\t     In that case, unwrap both types so that we can compare the\n-\t     underlying records.  */\n-\t  if (TREE_CODE (htype) == ARRAY_TYPE\n-\t      || POINTER_TYPE_P (htype))\n-\t    {\n-\t      wtype = TREE_TYPE (wtype);\n-\t      htype = TREE_TYPE (htype);\n-\t    }\n+\t  tree elem_type = TREE_TYPE (type);\n+\t  if (TREE_CODE (elem_type) == RECORD_TYPE\n+\t      && lookup_attribute (\"sysv_abi va_list\",\n+\t\t\t\t   TYPE_ATTRIBUTES (elem_type)))\n+\t    return sysv_va_list_type_node;\n \t}\n-      if (TYPE_MAIN_VARIANT (wtype) == TYPE_MAIN_VARIANT (htype))\n-\treturn ms_va_list_type_node;\n+\n       return NULL_TREE;\n     }\n+\n   return std_canonical_va_list_type (type);\n }\n "}, {"sha": "ae34d88645980a07cf89d5909e67488a55ef8f7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -1,3 +1,10 @@\n+2016-08-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR lto/70955\n+\t* gcc.dg/pr70955.c: New test.\n+\t* gcc.dg/lto/pr70955_0.c: Same.\n+\t* gcc.dg/lto/pr70955_1.c: Same.\n+\n 2016-08-27  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR tree-optimization/71077"}, {"sha": "c3b75fc56b38a55b319f31908d6d110bf80bf5e3", "filename": "gcc/testsuite/gcc.dg/lto/pr70955_0.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_0.c?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -0,0 +1,13 @@\n+/* __builtin_ms_va_list is only supported for x86_64 -m64.  */\n+/* { dg-skip-if \"\" { ! {x86_64-*-* && { ! ilp32 } } } } */\n+\n+#include <stdio.h>\n+\n+int __attribute__((ms_abi)) va_demo (int count, ...);\n+\n+int\n+main (void)\n+{\n+  printf (\"sum == %d\\n\", va_demo (5, 1, 2, 3, 4, 5));\n+  return 0;\n+}"}, {"sha": "204c28bfe73be45c725a62cbf568e7c5c0c11f6c", "filename": "gcc/testsuite/gcc.dg/lto/pr70955_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr70955_1.c?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -0,0 +1,16 @@\n+int __attribute__((ms_abi))\n+va_demo (int count, ...)\n+{\n+  int sum = 0;\n+  __builtin_ms_va_list ap;\n+\n+  __builtin_ms_va_start (ap, count);\n+  while (count)\n+    {\n+      sum += __builtin_va_arg (ap, int);\n+      --count;\n+    }\n+\n+  __builtin_ms_va_end (ap);\n+  return sum;\n+}"}, {"sha": "1275a5f11568ae7e30cb6437a09ab75d1f73bbd8", "filename": "gcc/testsuite/gcc.dg/pr70955.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70955.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f329b264b3d8f91909caca1df4f9ee043d3ca14a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70955.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70955.c?ref=f329b264b3d8f91909caca1df4f9ee043d3ca14a", "patch": "@@ -0,0 +1,36 @@\n+/* __builtin_ms_va_list is only supported for x86_64 -m64.  */\n+/* { dg-do run { target { x86_64-*-* && { ! ilp32 } } } } */\n+/* { dg-require-effective-target lto } */\n+/* { dg-options \"-flto\" } */\n+\n+#include <stdio.h>\n+\n+int __attribute__((ms_abi))\n+foo (int n, ...)\n+{\n+  __builtin_ms_va_list ap;\n+  int sum = 0;\n+\n+  __builtin_ms_va_start (ap, n);\n+\n+  while (n--)\n+    {\n+      sum += __builtin_va_arg (ap, int);\n+      printf (\"sum = %d\\n\", sum);\n+    }\n+\n+  __builtin_ms_va_end (ap);\n+\n+  return sum;\n+}\n+\n+int\n+main (void)\n+{\n+  int res = foo (10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+\n+  if (res != 55)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}