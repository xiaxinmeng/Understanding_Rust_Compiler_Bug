{"sha": "c14c652997970714f0b92df466ccebdf1e5cddfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0YzY1Mjk5Nzk3MDcxNGYwYjkyZGY0NjZjY2ViZGYxZTVjZGRmYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-19T21:11:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-19T21:11:00Z"}, "message": "expr.c (emit_move_insn_1): Revert 17 Dec change.\n\n        * expr.c (emit_move_insn_1): Revert 17 Dec change.  Don't emit\n        clobber during or after reload.\n\nFrom-SVN: r24772", "tree": {"sha": "6cbc95c507e6dcf525866303f9711448fb153af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cbc95c507e6dcf525866303f9711448fb153af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14c652997970714f0b92df466ccebdf1e5cddfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14c652997970714f0b92df466ccebdf1e5cddfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14c652997970714f0b92df466ccebdf1e5cddfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14c652997970714f0b92df466ccebdf1e5cddfa/comments", "author": null, "committer": null, "parents": [{"sha": "959f341d33f89a6551aed23d619bdea881262731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959f341d33f89a6551aed23d619bdea881262731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959f341d33f89a6551aed23d619bdea881262731"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "bfd8a0b0151fcbfd4b77efb941c9876c155e84c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c652997970714f0b92df466ccebdf1e5cddfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c652997970714f0b92df466ccebdf1e5cddfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c14c652997970714f0b92df466ccebdf1e5cddfa", "patch": "@@ -1,3 +1,8 @@\n+Tue Jan 19 21:08:20 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* expr.c (emit_move_insn_1): Revert 17 Dec change.  Don't emit\n+\tclobber during or after reload.\n+\n Tue Jan 19 16:56:03 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* genoutput.c (name_for_index): New function."}, {"sha": "88ce1560c5cadd2d7e3b5b0bc4852b88ceea3f1b", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c652997970714f0b92df466ccebdf1e5cddfa/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c652997970714f0b92df466ccebdf1e5cddfa/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c14c652997970714f0b92df466ccebdf1e5cddfa", "patch": "@@ -2578,17 +2578,13 @@ emit_move_insn_1 (x, y)\n \t}\n       else\n \t{\n-\t  /* Show the output dies here.  This is only necessary for pseudos.  */\n-\t  if (x != y)\n+\t  /* Show the output dies here.  This is necessary for pseudos;\n+\t     hard regs shouldn't appear here except as return values.\n+\t     We never want to emit such a clobber after reload.  */\n+\t  if (x != y\n+\t      && ! (reload_in_progress || reload_completed))\n \t    {\n-\t      rtx reg = x;\n-\t      \n-\t      while (GET_CODE (reg) == SUBREG)\n-\t\treg = SUBREG_REG (reg);\n-\t      \n-\t      if (GET_CODE (reg) == REG\n-\t\t  && REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n-\t\temit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+\t      emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \t    }\n \n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n@@ -2618,17 +2614,13 @@ emit_move_insn_1 (x, y)\n \t}\n #endif\n \t\t\t     \n-      /* Show the output dies here.  This is only necessary for pseudos.  */\n-      if (x != y)\n+      /* Show the output dies here.  This is necessary for pseudos;\n+\t hard regs shouldn't appear here except as return values.\n+\t We never want to emit such a clobber after reload.  */\n+      if (x != y\n+\t  && ! (reload_in_progress || reload_completed))\n \t{\n-\t  rtx reg = x;\n-\t  \n-\t  while (GET_CODE (reg) == SUBREG)\n-\t    reg = SUBREG_REG (reg);\n-\t  \n-\t  if (GET_CODE (reg) == REG\n-\t      && REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n-\t    emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \t}\n \n       for (i = 0;"}]}