{"sha": "814665556a51ceb1d0eeda8890526b37756c9d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0NjY1NTU2YTUxY2ViMWQwZWVkYTg4OTA1MjZiMzc3NTZjOWQ5OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-18T15:52:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-18T15:52:22Z"}, "message": "altivec.md (VI, VF, V): New mode macros.\n\n\t* config/rs6000/altivec.md (VI, VF, V): New mode macros.\n\t(altivec_lvx_4si, altivec_lvx_8hi, altivec_lvx_16qi,\n\taltivec_lvx_4sf): Rename and replace with ...\n\t(altivec_lvx_<mode>): ... mode macro version.\n\t(altivec_stvx_4si, altivec_stvx_8hi, altivec_stvx_16qi,\n\taltivec_stvx_4sf): Rename and replace with ...\n\t(altivec_stvx_<mode>): ... mode macro version.\n\t(movv4si, movv8hi, movv16qi, movv4sf}): Replace with ...\n\t(mov<mode>): ... mode macro version.\n\t(*movv4si_internal, *movv8hi_internal1, *movv16qi_internal1,\n\t*movv4sf_internal1): Replace with ...\n\t(*mov<mode>_internal): ... mode macro version.\n\t(get_vrsave_internal, *set_vrsave_internal, *save_world,\n\t*restore_world): Unquote output statements.\n\t* config/rs6000/rs6000.c (altivec_expand_ld_builtin,\n\taltivec_expand_st_builtin): Adjust insn names.\n\nFrom-SVN: r90870", "tree": {"sha": "6deb31ffcecd95a36f7b0aa53a6c61c0b1cf2dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6deb31ffcecd95a36f7b0aa53a6c61c0b1cf2dff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/814665556a51ceb1d0eeda8890526b37756c9d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814665556a51ceb1d0eeda8890526b37756c9d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814665556a51ceb1d0eeda8890526b37756c9d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814665556a51ceb1d0eeda8890526b37756c9d99/comments", "author": null, "committer": null, "parents": [{"sha": "18f63bfae3cd06c0e376872cbd862c78dc3a389b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f63bfae3cd06c0e376872cbd862c78dc3a389b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f63bfae3cd06c0e376872cbd862c78dc3a389b"}], "stats": {"total": 255, "additions": 76, "deletions": 179}, "files": [{"sha": "80e8f8cb8a438eab52e7ee6860665adf86ae90e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=814665556a51ceb1d0eeda8890526b37756c9d99", "patch": "@@ -1,3 +1,22 @@\n+2004-11-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/rs6000/altivec.md (VI, VF, V): New mode macros.\n+\t(altivec_lvx_4si, altivec_lvx_8hi, altivec_lvx_16qi,\n+\taltivec_lvx_4sf): Rename and replace with ...\n+\t(altivec_lvx_<mode>): ... mode macro version.\n+\t(altivec_stvx_4si, altivec_stvx_8hi, altivec_stvx_16qi,\n+\taltivec_stvx_4sf): Rename and replace with ... \n+\t(altivec_stvx_<mode>): ... mode macro version.\n+\t(movv4si, movv8hi, movv16qi, movv4sf}): Replace with ...\n+\t(mov<mode>): ... mode macro version.\n+\t(*movv4si_internal, *movv8hi_internal1, *movv16qi_internal1,\n+\t*movv4sf_internal1): Replace with ...\n+\t(*mov<mode>_internal): ... mode macro version.\n+\t(get_vrsave_internal, *set_vrsave_internal, *save_world,\n+\t*restore_world): Unquote output statements.\n+\t* config/rs6000/rs6000.c (altivec_expand_ld_builtin,\n+\taltivec_expand_st_builtin): Adjust insn names.\n+\n 2004-11-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_complex_function_value): Revert"}, {"sha": "2b5df5f030d96e944880640055f5b762676fca45", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 49, "deletions": 171, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=814665556a51ceb1d0eeda8890526b37756c9d99", "patch": "@@ -46,91 +46,58 @@\n    (UNSPEC_VCONDU_V16QI 307)\n    ])\n \n-;; Generic LVX load instruction.\n-(define_insn \"altivec_lvx_4si\"\n-  [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"=v\")\n-\t(match_operand:V4SI 1 \"memory_operand\" \"m\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"lvx %0,%y1\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n-(define_insn \"altivec_lvx_8hi\"\n-  [(set (match_operand:V8HI 0 \"altivec_register_operand\" \"=v\")\n-\t(match_operand:V8HI 1 \"memory_operand\" \"m\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"lvx %0,%y1\"\n-  [(set_attr \"type\" \"vecload\")])\n+;; Vec int modes\n+(define_mode_macro VI [V4SI V8HI V16QI])\n+;; Vec float modes\n+(define_mode_macro VF [V4SF])\n+;; Vec modes, pity mode macros are not composable\n+(define_mode_macro V [V4SI V8HI V16QI V4SF])\n \n-(define_insn \"altivec_lvx_16qi\"\n-  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n-\t(match_operand:V16QI 1 \"memory_operand\" \"m\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"lvx %0,%y1\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n-(define_insn \"altivec_lvx_4sf\"\n-  [(set (match_operand:V4SF 0 \"altivec_register_operand\" \"=v\")\n-\t(match_operand:V4SF 1 \"memory_operand\" \"m\"))]\n+;; Generic LVX load instruction.\n+(define_insn \"altivec_lvx_<mode>\"\n+  [(set (match_operand:V 0 \"altivec_register_operand\" \"=v\")\n+\t(match_operand:V 1 \"memory_operand\" \"m\"))]\n   \"TARGET_ALTIVEC\"\n   \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n ;; Generic STVX store instruction.\n-(define_insn \"altivec_stvx_4si\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n-\t(match_operand:V4SI 1 \"altivec_register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"stvx %1,%y0\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_insn \"altivec_stvx_8hi\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n-\t(match_operand:V8HI 1 \"altivec_register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"stvx %1,%y0\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_insn \"altivec_stvx_16qi\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n-\t(match_operand:V16QI 1 \"altivec_register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"stvx %1,%y0\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_insn \"altivec_stvx_4sf\"\n-  [(set (match_operand:V4SF 0 \"memory_operand\" \"=m\")\n-\t(match_operand:V4SF 1 \"altivec_register_operand\" \"v\"))]\n+(define_insn \"altivec_stvx_<mode>\"\n+  [(set (match_operand:V 0 \"memory_operand\" \"=m\")\n+\t(match_operand:V 1 \"altivec_register_operand\" \"v\"))]\n   \"TARGET_ALTIVEC\"\n   \"stvx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n ;; Vector move instructions.\n-(define_expand \"movv4si\"\n-  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4SI 1 \"any_operand\" \"\"))]\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:V 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V 1 \"any_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V4SImode); DONE; }\")\n+{\n+  rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n+  DONE;\n+})\n \n-(define_insn \"*movv4si_internal\"\n-  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n-\t(match_operand:V4SI 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:V 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n+\t(match_operand:V 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n   \"TARGET_ALTIVEC \n-   && (register_operand (operands[0], V4SImode) \n-       || register_operand (operands[1], V4SImode))\"\n-  \"*\n+   && (register_operand (operands[0], <MODE>mode) \n+       || register_operand (operands[1], <MODE>mode))\"\n {\n   switch (which_alternative)\n     {\n-    case 0: return \\\"stvx %1,%y0\\\";\n-    case 1: return \\\"lvx %0,%y1\\\";\n-    case 2: return \\\"vor %0,%1,%1\\\";\n-    case 3: return \\\"#\\\";\n-    case 4: return \\\"#\\\";\n-    case 5: return \\\"#\\\";\n+    case 0: return \"stvx %1,%y0\";\n+    case 1: return \"lvx %0,%y1\";\n+    case 2: return \"vor %0,%1,%1\";\n+    case 3: return \"#\";\n+    case 4: return \"#\";\n+    case 5: return \"#\";\n     case 6: return output_vec_const_move (operands);\n     default: abort();\n     }\n-}\"\n+}\n   [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,*\")])\n \n (define_split\n@@ -139,7 +106,9 @@\n   \"TARGET_ALTIVEC && reload_completed\n    && gpr_or_gpr_p (operands[0], operands[1])\"\n   [(pc)]\n-{ rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n+{\n+  rs6000_split_multireg_move (operands[0], operands[1]); DONE;\n+})\n \n (define_split\n   [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"\")\n@@ -149,38 +118,9 @@\n    (set (match_dup 0)\n \t(plus:V4SI (match_dup 0)\n \t\t   (match_dup 0)))]\n-  \"\n { \n   operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n-}\")    \n-\n-(define_expand \"movv8hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V8HI 1 \"any_operand\" \"\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V8HImode); DONE; }\")\n-\n-(define_insn \"*movv8hi_internal1\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n-\t(match_operand:V8HI 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n-  \"TARGET_ALTIVEC \n-   && (register_operand (operands[0], V8HImode) \n-       || register_operand (operands[1], V8HImode))\"\n-  \"*\n-{\n-   switch (which_alternative)\n-     {\n-     case 0: return \\\"stvx %1,%y0\\\";\n-     case 1: return \\\"lvx %0,%y1\\\";\n-     case 2: return \\\"vor %0,%1,%1\\\";\n-     case 3: return \\\"#\\\";\n-     case 4: return \\\"#\\\";\n-     case 5: return \\\"#\\\";\n-     case 6: return output_vec_const_move (operands);\n-     default: abort ();\n-     }\n-}\"\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,*\")])\n+})    \n \n (define_split\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n@@ -198,38 +138,9 @@\n    (set (match_dup 0)\n \t(plus:V8HI (match_dup 0)\n \t\t   (match_dup 0)))]\n-  \"\n {\n   operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n-}\")\n-\n-(define_expand \"movv16qi\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V16QI 1 \"any_operand\" \"\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V16QImode); DONE; }\")\n-\n-(define_insn \"*movv16qi_internal1\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n-\t(match_operand:V16QI 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n-  \"TARGET_ALTIVEC\n-   && (register_operand (operands[0], V16QImode)\n-       || register_operand (operands[1], V16QImode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0: return \\\"stvx %1,%y0\\\";\n-    case 1: return \\\"lvx %0,%y1\\\";\n-    case 2: return \\\"vor %0,%1,%1\\\";\n-    case 3: return \\\"#\\\";\n-    case 4: return \\\"#\\\";\n-    case 5: return \\\"#\\\";\n-    case 6: return output_vec_const_move (operands);\n-    default: abort ();\n-    }\n-}\"\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,*\")])\n+})\n \n (define_split\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n@@ -247,58 +158,30 @@\n    (set (match_dup 0)\n \t(plus:V16QI (match_dup 0)\n \t\t   (match_dup 0)))]\n-  \"\n {\n   operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n-}\")\n-\n-(define_expand \"movv4sf\"\n-  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4SF 1 \"any_operand\" \"\"))]\n-  \"TARGET_ALTIVEC\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V4SFmode); DONE; }\")\n-\n-(define_insn \"*movv4sf_internal1\"\n-  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n-\t(match_operand:V4SF 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n-  \"TARGET_ALTIVEC\n-   && (register_operand (operands[0], V4SFmode)\n-       || register_operand (operands[1], V4SFmode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0: return \\\"stvx %1,%y0\\\";\n-    case 1: return \\\"lvx %0,%y1\\\";\n-    case 2: return \\\"vor %0,%1,%1\\\";\n-    case 3: return \\\"#\\\";\n-    case 4: return \\\"#\\\";\n-    case 5: return \\\"#\\\";\n-    case 6: return output_vec_const_move (operands);\n-    default: abort ();\n-    }\n-}\"\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,*\")])\n+})\n \n (define_split\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:V4SF 1 \"input_operand\" \"\"))]\n   \"TARGET_ALTIVEC && reload_completed\n    && gpr_or_gpr_p (operands[0], operands[1])\"\n   [(pc)]\n-{ rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n+{\n+  rs6000_split_multireg_move (operands[0], operands[1]); DONE;\n+})\n \n (define_insn \"get_vrsave_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(reg:SI 109)] 214))]\n   \"TARGET_ALTIVEC\"\n-  \"*\n {\n   if (TARGET_MACHO)\n-     return \\\"mfspr %0,256\\\";\n+     return \"mfspr %0,256\";\n   else\n-     return \\\"mfvrsave %0\\\";\n-}\"\n+     return \"mfvrsave %0\";\n+}\n   [(set_attr \"type\" \"*\")])\n \n (define_insn \"*set_vrsave_internal\"\n@@ -307,23 +190,20 @@\n \t   (unspec_volatile:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t(reg:SI 109)] 30))])]\n   \"TARGET_ALTIVEC\"\n-  \"*\n {\n   if (TARGET_MACHO)\n-    return \\\"mtspr 256,%1\\\";\n+    return \"mtspr 256,%1\";\n   else\n-    return \\\"mtvrsave %1\\\";\n-}\"\n+    return \"mtvrsave %1\";\n+}\n   [(set_attr \"type\" \"*\")])\n \n (define_insn \"*save_world\"\n  [(match_parallel 0 \"save_world_operation\"\n                   [(clobber (match_operand:SI 1 \"register_operand\" \"=l\"))\n                    (use (match_operand:SI 2 \"call_operand\" \"s\"))])]\n  \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN) && TARGET_32BIT\"         \n- {\n-    return \"bl %z2\";\n- }\n+ \"bl %z2\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n@@ -334,9 +214,7 @@\n                    (use (match_operand:SI 2 \"call_operand\" \"s\"))\n                    (clobber (match_operand:SI 3 \"gpc_reg_operand\" \"=r\"))])]\n  \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN) && TARGET_32BIT\"\n- {\n-    return \"b %z2\";\n- })\n+ \"b %z2\")\n \n ;; Simple binary operations.\n "}, {"sha": "2e404efa8c7b9a264d1da2f3f23144f545857897", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814665556a51ceb1d0eeda8890526b37756c9d99/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=814665556a51ceb1d0eeda8890526b37756c9d99", "patch": "@@ -6899,16 +6899,16 @@ altivec_expand_ld_builtin (tree exp, rtx target, bool *expandedp)\n   switch (fcode)\n     {\n     case ALTIVEC_BUILTIN_LD_INTERNAL_16qi:\n-      icode = CODE_FOR_altivec_lvx_16qi;\n+      icode = CODE_FOR_altivec_lvx_v16qi;\n       break;\n     case ALTIVEC_BUILTIN_LD_INTERNAL_8hi:\n-      icode = CODE_FOR_altivec_lvx_8hi;\n+      icode = CODE_FOR_altivec_lvx_v8hi;\n       break;\n     case ALTIVEC_BUILTIN_LD_INTERNAL_4si:\n-      icode = CODE_FOR_altivec_lvx_4si;\n+      icode = CODE_FOR_altivec_lvx_v4si;\n       break;\n     case ALTIVEC_BUILTIN_LD_INTERNAL_4sf:\n-      icode = CODE_FOR_altivec_lvx_4sf;\n+      icode = CODE_FOR_altivec_lvx_v4sf;\n       break;\n     default:\n       *expandedp = false;\n@@ -6953,16 +6953,16 @@ altivec_expand_st_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   switch (fcode)\n     {\n     case ALTIVEC_BUILTIN_ST_INTERNAL_16qi:\n-      icode = CODE_FOR_altivec_stvx_16qi;\n+      icode = CODE_FOR_altivec_stvx_v16qi;\n       break;\n     case ALTIVEC_BUILTIN_ST_INTERNAL_8hi:\n-      icode = CODE_FOR_altivec_stvx_8hi;\n+      icode = CODE_FOR_altivec_stvx_v8hi;\n       break;\n     case ALTIVEC_BUILTIN_ST_INTERNAL_4si:\n-      icode = CODE_FOR_altivec_stvx_4si;\n+      icode = CODE_FOR_altivec_stvx_v4si;\n       break;\n     case ALTIVEC_BUILTIN_ST_INTERNAL_4sf:\n-      icode = CODE_FOR_altivec_stvx_4sf;\n+      icode = CODE_FOR_altivec_stvx_v4sf;\n       break;\n     default:\n       *expandedp = false;"}]}