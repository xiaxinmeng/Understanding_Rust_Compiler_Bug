{"sha": "774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0ZTZiMzdiYjJmMGNkN2ZkYzNhNmRmOTUxYjgxN2Y2ZDBmOTZkZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-16T15:02:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-03-16T15:02:42Z"}, "message": "calls.c (expand_call): Do sanity checking on arg_space_so_far.\n\n\t* calls.c (expand_call): Do sanity checking on arg_space_so_far.\n\tUpdate arg_space_so_far on stack adjustments.\n\t(emit_library_call, emit_library_call_value): Likewise; take into\n\taccount arg_space_so_far and pending_stack_adjust when calculcating\n\tthe boundary.\n\nFrom-SVN: r32586", "tree": {"sha": "8381e38cafff3eedb53b8484ee9e28dbc5e19cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8381e38cafff3eedb53b8484ee9e28dbc5e19cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd/comments", "author": null, "committer": null, "parents": [{"sha": "295ae8170c37fec29e0c385b1ab0f2e8dab4dc17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295ae8170c37fec29e0c385b1ab0f2e8dab4dc17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295ae8170c37fec29e0c385b1ab0f2e8dab4dc17"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "d75fa2d6ce6987d5eb78873f569f2cbf3b4e243e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "patch": "@@ -1,3 +1,11 @@\n+Thu Mar 16 16:01:30 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* calls.c (expand_call): Do sanity checking on arg_space_so_far.\n+\tUpdate arg_space_so_far on stack adjustments.\n+\t(emit_library_call, emit_library_call_value): Likewise; take into\n+\taccount arg_space_so_far and pending_stack_adjust when calculcating\n+\tthe boundary.\n+\n Thu Mar 16 09:02:19 2000  Jason Eckhardt  <jle@cygnus.com>\n \n \t* flow.c: Move all basic block reordering code into its own file."}, {"sha": "453544a808afc50d3335518d62ab4a977dc2ee24", "filename": "gcc/calls.c", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=774e6b37bb2f0cd7fdc3a6df951b817f6d0f96dd", "patch": "@@ -1707,6 +1707,7 @@ expand_call (exp, target, ignore)\n   rtx old_stack_level = 0;\n   int old_pending_adj = 0;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n+  int old_arg_space_so_far = arg_space_so_far;\n   rtx call_fusage = 0;\n   register tree p;\n   register int i;\n@@ -2380,7 +2381,10 @@ expand_call (exp, target, ignore)\n   /* If we pushed args in forward order, perform stack alignment\n      after pushing the last arg.  */\n   if (argblock == 0)\n-    anti_adjust_stack (GEN_INT (args_size.constant - unadjusted_args_size));\n+    {\n+      anti_adjust_stack (GEN_INT (args_size.constant - unadjusted_args_size));\n+      arg_space_so_far += args_size.constant - unadjusted_args_size;\n+    }\n #endif\n #endif\n \n@@ -2432,6 +2436,10 @@ expand_call (exp, target, ignore)\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       valreg, old_inhibit_defer_pop, call_fusage, is_const, nothrow);\n \n+  /* Stack pointer ought to be restored to the value before call.  */\n+  if (old_arg_space_so_far != arg_space_so_far)\n+    abort();\n+\n   /* If call is cse'able, make appropriate pair of reg-notes around it.\n      Test valreg so we don't crash; may safely ignore `const'\n      if return type is void.  Disable for PARALLEL return values, because\n@@ -2740,6 +2748,7 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \t       struct args_size offset; struct args_size size; rtx save_area; };\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n+  int old_arg_space_so_far = arg_space_so_far;\n   rtx call_fusage = 0;\n   int reg_parm_stack_space = 0;\n   int nothrow;\n@@ -2883,8 +2892,14 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \n   original_args_size = args_size;\n #ifdef PREFERRED_STACK_BOUNDARY\n-  args_size.constant = (((args_size.constant + (STACK_BYTES - 1))\n-\t\t\t / STACK_BYTES) * STACK_BYTES);\n+  args_size.constant = (((args_size.constant\n+\t\t\t  + arg_space_so_far\n+\t\t\t  + pending_stack_adjust\n+\t\t\t  + STACK_BYTES - 1)\n+\t\t\t / STACK_BYTES\n+\t\t\t * STACK_BYTES)\n+\t\t\t- arg_space_so_far\n+\t\t\t- pending_stack_adjust);\n #endif\n \n   args_size.constant = MAX (args_size.constant,\n@@ -2954,8 +2969,11 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n   /* If we push args individually in reverse order, perform stack alignment\n      before the first push (the last arg).  */\n   if (argblock == 0)\n-    anti_adjust_stack (GEN_INT (args_size.constant\n-\t\t\t\t- original_args_size.constant));\n+    {\n+      anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t  - original_args_size.constant));\n+      arg_space_so_far += args_size.constant - original_args_size.constant;\n+    }\n #endif\n #endif\n \n@@ -3086,6 +3104,7 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \t  emit_push_insn (val, mode, NULL_TREE, NULL_RTX, 0, partial, reg, 0,\n \t\t\t  argblock, GEN_INT (argvec[argnum].offset.constant),\n \t\t\t  reg_parm_stack_space, ARGS_SIZE_RTX (alignment_pad));\n+\t  arg_space_so_far += argvec[argnum].size.constant;\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n \t  /* Now mark the segment we just used.  */\n@@ -3102,8 +3121,11 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n   /* If we pushed args in forward order, perform stack alignment\n      after pushing the last arg.  */\n   if (argblock == 0)\n-    anti_adjust_stack (GEN_INT (args_size.constant\n-\t\t\t\t- original_args_size.constant));\n+    {\n+      anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t  - original_args_size.constant));\n+      arg_space_so_far += args_size.constant - original_args_size.constant;\n+    }\n #endif\n #endif\n \n@@ -3174,6 +3196,10 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \n   pop_temp_slots ();\n \n+  /* Stack pointer ought to be restored to the value before call.  */\n+  if (old_arg_space_so_far != arg_space_so_far)\n+    abort();\n+\n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;\n \n@@ -3259,6 +3285,7 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n \t       struct args_size offset; struct args_size size; rtx save_area; };\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n+  int old_arg_space_so_far = arg_space_so_far;\n   rtx call_fusage = 0;\n   rtx mem_value = 0;\n   int pcc_struct_value = 0;\n@@ -3474,8 +3501,14 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n \n   original_args_size = args_size;\n #ifdef PREFERRED_STACK_BOUNDARY\n-  args_size.constant = (((args_size.constant + (STACK_BYTES - 1))\n-\t\t\t / STACK_BYTES) * STACK_BYTES);\n+  args_size.constant = (((args_size.constant\n+\t\t\t  + arg_space_so_far\n+\t\t\t  + pending_stack_adjust\n+\t\t\t  + STACK_BYTES - 1)\n+\t\t\t / STACK_BYTES\n+\t\t\t * STACK_BYTES)\n+\t\t\t- arg_space_so_far\n+\t\t\t- pending_stack_adjust);\n #endif\n \n   args_size.constant = MAX (args_size.constant,\n@@ -3545,8 +3578,11 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n   /* If we push args individually in reverse order, perform stack alignment\n      before the first push (the last arg).  */\n   if (argblock == 0)\n-    anti_adjust_stack (GEN_INT (args_size.constant\n-\t\t\t\t- original_args_size.constant));\n+    {\n+      anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t  - original_args_size.constant));\n+      arg_space_so_far += args_size.constant - original_args_size.constant;\n+    }\n #endif\n #endif\n \n@@ -3677,6 +3713,7 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n \t  emit_push_insn (val, mode, NULL_TREE, NULL_RTX, 0, partial, reg, 0,\n \t\t\t  argblock, GEN_INT (argvec[argnum].offset.constant),\n \t\t\t  reg_parm_stack_space, ARGS_SIZE_RTX (alignment_pad));\n+\t  arg_space_so_far += argvec[argnum].size.constant;\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n \t  /* Now mark the segment we just used.  */\n@@ -3693,8 +3730,11 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n   /* If we pushed args in forward order, perform stack alignment\n      after pushing the last arg.  */\n   if (argblock == 0)\n-    anti_adjust_stack (GEN_INT (args_size.constant\n-\t\t\t\t- original_args_size.constant));\n+    {\n+      anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t  - original_args_size.constant));\n+      arg_space_so_far += args_size.constant - unadjusted_args_size;\n+    }\n #endif\n #endif\n \n@@ -3778,6 +3818,10 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n \n   pop_temp_slots ();\n \n+  /* Stack pointer ought to be restored to the value before call.  */\n+  if (old_arg_space_so_far != arg_space_so_far)\n+    abort();\n+\n   /* Copy the value to the right place.  */\n   if (outmode != VOIDmode)\n     {"}]}