{"sha": "53d6697702ced911f598a2d3d19b9a1bde9cec69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkNjY5NzcwMmNlZDkxMWY1OThhMmQzZDE5YjlhMWJkZTljZWM2OQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-10-20T22:12:56Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-10-20T22:12:56Z"}, "message": "mips.c (mips_binary_cost): Add new argument speed.\n\n\t* config/mips/mips.c (mips_binary_cost): Add new argument speed.\n\tUse when calling rtx_costs.\n\t(mips_rtx_costs): Fix formatting.  Use argument speed rather than the\n\tglobal optimize_size.  Pass speed to mips_binary_cost.\n\nFrom-SVN: r153041", "tree": {"sha": "1cb9c8cb0fdce354a90420ca98e36317e24414cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cb9c8cb0fdce354a90420ca98e36317e24414cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d6697702ced911f598a2d3d19b9a1bde9cec69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d6697702ced911f598a2d3d19b9a1bde9cec69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d6697702ced911f598a2d3d19b9a1bde9cec69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d6697702ced911f598a2d3d19b9a1bde9cec69/comments", "author": null, "committer": null, "parents": [{"sha": "927dc7c69ee324fea177872aa2d2d487c1803c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927dc7c69ee324fea177872aa2d2d487c1803c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927dc7c69ee324fea177872aa2d2d487c1803c8b"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "84e81e7d29f653b68a1386ca932474f1912be6f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d6697702ced911f598a2d3d19b9a1bde9cec69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d6697702ced911f598a2d3d19b9a1bde9cec69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53d6697702ced911f598a2d3d19b9a1bde9cec69", "patch": "@@ -1,3 +1,10 @@\n+2009-10-20  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.c (mips_binary_cost): Add new argument speed.\n+\tUse when calling rtx_costs.\n+\t(mips_rtx_costs): Fix formatting.  Use argument speed rather than the\n+\tglobal optimize_size.  Pass speed to mips_binary_cost.\n+\n 2009-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (def_builtin): Set TREE_READONLY instead"}, {"sha": "4b4353c95ac0a57db794ebed421976644fffbc5a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d6697702ced911f598a2d3d19b9a1bde9cec69/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d6697702ced911f598a2d3d19b9a1bde9cec69/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=53d6697702ced911f598a2d3d19b9a1bde9cec69", "patch": "@@ -3387,10 +3387,11 @@ mips_immediate_operand_p (int code, HOST_WIDE_INT x)\n \n /* Return the cost of binary operation X, given that the instruction\n    sequence for a word-sized or smaller operation has cost SINGLE_COST\n-   and that the sequence of a double-word operation has cost DOUBLE_COST.  */\n+   and that the sequence of a double-word operation has cost DOUBLE_COST.\n+   If SPEED is true, optimize for speed otherwise optimize for size.  */\n \n static int\n-mips_binary_cost (rtx x, int single_cost, int double_cost)\n+mips_binary_cost (rtx x, int single_cost, int double_cost, bool speed)\n {\n   int cost;\n \n@@ -3399,8 +3400,8 @@ mips_binary_cost (rtx x, int single_cost, int double_cost)\n   else\n     cost = single_cost;\n   return (cost\n-\t  + rtx_cost (XEXP (x, 0), SET, !optimize_size)\n-\t  + rtx_cost (XEXP (x, 1), GET_CODE (x), !optimize_size));\n+\t  + rtx_cost (XEXP (x, 0), SET, speed)\n+\t  + rtx_cost (XEXP (x, 1), GET_CODE (x), speed));\n }\n \n /* Return the cost of floating-point multiplications of mode MODE.  */\n@@ -3470,8 +3471,7 @@ mips_zero_extend_cost (enum machine_mode mode, rtx op)\n /* Implement TARGET_RTX_COSTS.  */\n \n static bool\n-mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n-\t\tbool speed)\n+mips_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n {\n   enum machine_mode mode = GET_MODE (x);\n   bool float_mode_p = FLOAT_MODE_P (mode);\n@@ -3527,8 +3527,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t     operand needs to be forced into a register, we will often be\n \t     able to hoist the constant load out of the loop, so the load\n \t     should not contribute to the cost.  */\n-\t  if (!optimize_size\n-\t      || mips_immediate_operand_p (outer_code, INTVAL (x)))\n+\t  if (speed || mips_immediate_operand_p (outer_code, INTVAL (x)))\n \t    {\n \t      *total = 0;\n \t      return true;\n@@ -3626,7 +3625,8 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n     case IOR:\n     case XOR:\n       /* Double-word operations use two single-word operations.  */\n-      *total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (2));\n+      *total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (2),\n+\t\t\t\t speed);\n       return true;\n \n     case ASHIFT:\n@@ -3635,9 +3635,11 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n     case ROTATE:\n     case ROTATERT:\n       if (CONSTANT_P (XEXP (x, 1)))\n-\t*total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (4));\n+\t*total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (4),\n+\t\t\t\t   speed);\n       else\n-\t*total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (12));\n+\t*total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (12),\n+\t\t\t\t   speed);\n       return true;\n \n     case ABS:\n@@ -3673,7 +3675,8 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t  *total = mips_cost->fp_add;\n \t  return false;\n \t}\n-      *total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (4));\n+      *total = mips_binary_cost (x, COSTS_N_INSNS (1), COSTS_N_INSNS (4),\n+\t\t\t\t speed);\n       return true;\n \n     case MINUS:\n@@ -3724,7 +3727,8 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t an SLTU.  The MIPS16 version then needs to move the result of\n \t the SLTU from $24 to a MIPS16 register.  */\n       *total = mips_binary_cost (x, COSTS_N_INSNS (1),\n-\t\t\t\t COSTS_N_INSNS (TARGET_MIPS16 ? 5 : 4));\n+\t\t\t\t COSTS_N_INSNS (TARGET_MIPS16 ? 5 : 4),\n+\t\t\t\t speed);\n       return true;\n \n     case NEG:\n@@ -3760,10 +3764,10 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n       else if (mode == DImode && !TARGET_64BIT)\n \t/* Synthesized from 2 mulsi3s, 1 mulsidi3 and two additions,\n \t   where the mulsidi3 always includes an MFHI and an MFLO.  */\n-\t*total = (optimize_size\n-\t\t  ? COSTS_N_INSNS (ISA_HAS_MUL3 ? 7 : 9)\n-\t\t  : mips_cost->int_mult_si * 3 + 6);\n-      else if (optimize_size)\n+\t*total = (speed\n+\t\t  ? mips_cost->int_mult_si * 3 + 6\n+\t\t  : COSTS_N_INSNS (ISA_HAS_MUL3 ? 7 : 9));\n+      else if (!speed)\n \t*total = (ISA_HAS_MUL3 ? 1 : 2);\n       else if (mode == DImode)\n \t*total = mips_cost->int_mult_di;\n@@ -3800,7 +3804,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total,\n \n     case UDIV:\n     case UMOD:\n-      if (optimize_size)\n+      if (!speed)\n \t{\n \t  /* It is our responsibility to make division by a power of 2\n \t     as cheap as 2 register additions if we want the division"}]}