{"sha": "5b1d588509551291f4028497858ee9e04ce0bdee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxZDU4ODUwOTU1MTI5MWY0MDI4NDk3ODU4ZWU5ZTA0Y2UwYmRlZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-15T08:58:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-15T10:24:57Z"}, "message": "libstdc++: Implement LWG 3150 for std::uniform_random_bit_generator\n\n\t* include/bits/random.h (uniform_random_bit_generator): Require min()\n\tand max() to be constant expressions and min() to be less than max().\n\t* testsuite/26_numerics/random/concept.cc: Check additional cases.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lineno.", "tree": {"sha": "0119e5b09bc7c9e771229f38864096a213831305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0119e5b09bc7c9e771229f38864096a213831305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b1d588509551291f4028497858ee9e04ce0bdee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1d588509551291f4028497858ee9e04ce0bdee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1d588509551291f4028497858ee9e04ce0bdee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1d588509551291f4028497858ee9e04ce0bdee/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458c8d6459c4005fc9886b6e25d168a6535ac415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458c8d6459c4005fc9886b6e25d168a6535ac415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458c8d6459c4005fc9886b6e25d168a6535ac415"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "8e248703430a02d04aec8408ab453e76e62a66d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b1d588509551291f4028497858ee9e04ce0bdee", "patch": "@@ -1,3 +1,10 @@\n+2020-02-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (uniform_random_bit_generator): Require min()\n+\tand max() to be constant expressions and min() to be less than max().\n+\t* testsuite/26_numerics/random/concept.cc: Check additional cases.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lineno.\n+\n 2020-02-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/Makefile.am: Add <bits/ranges_uninitialized.h>."}, {"sha": "d4aebf45af00ed6b624ff367a94945f7a52f5fcc", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=5b1d588509551291f4028497858ee9e04ce0bdee", "patch": "@@ -60,6 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t{ _Gen::min() } -> same_as<invoke_result_t<_Gen&>>;\n \t{ _Gen::max() } -> same_as<invoke_result_t<_Gen&>>;\n+\trequires bool_constant<(_Gen::min() < _Gen::max())>::value;\n       };\n #endif\n "}, {"sha": "cb1ea882e166abf33a2ce4cfbcf37e71a70b2f8d", "filename": "libstdc++-v3/testsuite/26_numerics/random/concept.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc?ref=5b1d588509551291f4028497858ee9e04ce0bdee", "patch": "@@ -219,3 +219,30 @@ struct N11\n };\n \n static_assert( ! std::uniform_random_bit_generator<N11> );\n+\n+struct N12\n+{\n+  unsigned operator()();\n+  static unsigned min() { return 0; } // not constexpr\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N12> ); // LWG 3150\n+\n+struct N13\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 0; }\n+  static unsigned max() { return 1; } // not constexpr\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N13> ); // LWG 3150\n+\n+struct N14\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 1; }\n+  static constexpr unsigned max() { return 0; } // max not greater than min\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N14> ); // LWG 3150"}, {"sha": "91e5566c54ae3176d8d17ce11b409c0246a4dc18", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1d588509551291f4028497858ee9e04ce0bdee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=5b1d588509551291f4028497858ee9e04ce0bdee", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 171 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 172 }\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3281 }"}]}