{"sha": "db290a9e3745e79710d836c955588845baa2bb6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyOTBhOWUzNzQ1ZTc5NzEwZDgzNmM5NTU1ODg4NDViYWEyYmI2Yg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-05-09T20:30:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-07T09:26:53Z"}, "message": "[Ada] Set range checks for for 'Update on arrays in GNATprove expansion\n\ngcc/ada/\n\n\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Add scalar\n\trange checks for 'Update on arrays just like for 'Update on\n\trecords.\n\t* sem_attr.adb (Analyze_Array_Component_Update): Do not set\n\trange checks for single-dimensional arrays.\n\t(Resolve_Attribute): Do not set range checks for both single-\n\tand multi- dimensional arrays.", "tree": {"sha": "2ff0720f9776c6d0b4a5179add9b387fc9f82cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff0720f9776c6d0b4a5179add9b387fc9f82cc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db290a9e3745e79710d836c955588845baa2bb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db290a9e3745e79710d836c955588845baa2bb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db290a9e3745e79710d836c955588845baa2bb6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db290a9e3745e79710d836c955588845baa2bb6b/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ceffbebdd2946068c1b10c898e6da689ac6507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ceffbebdd2946068c1b10c898e6da689ac6507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ceffbebdd2946068c1b10c898e6da689ac6507"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "6ef03c3180e59fcc511cdac8ae6f2d422051cf95", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 76, "deletions": 10, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db290a9e3745e79710d836c955588845baa2bb6b/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db290a9e3745e79710d836c955588845baa2bb6b/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=db290a9e3745e79710d836c955588845baa2bb6b", "patch": "@@ -258,25 +258,91 @@ package body Exp_SPARK is\n \n             Assoc     : Node_Id;\n             Comp      : Node_Id;\n-            Comp_Type : Node_Id;\n+            Comp_Type : Entity_Id;\n             Expr      : Node_Id;\n+            Index     : Node_Id;\n+            Index_Typ : Entity_Id;\n \n          begin\n             --  Apply scalar range checks on the updated components, if needed\n \n             if Is_Array_Type (Typ) then\n-               Assoc := First (Component_Associations (Aggr));\n \n-               while Present (Assoc) loop\n-                  Expr      := Expression (Assoc);\n-                  Comp_Type := Component_Type (Typ);\n+               --  Multi-dimensional array\n \n-                  if Is_Scalar_Type (Comp_Type) then\n-                     Apply_Scalar_Range_Check (Expr, Comp_Type);\n-                  end if;\n+               if Present (Next_Index (First_Index (Typ))) then\n+                  Assoc := First (Component_Associations (Aggr));\n \n-                  Next (Assoc);\n-               end loop;\n+                  while Present (Assoc) loop\n+                     Expr      := Expression (Assoc);\n+                     Comp_Type := Component_Type (Typ);\n+\n+                     if Is_Scalar_Type (Comp_Type) then\n+                        Apply_Scalar_Range_Check (Expr, Comp_Type);\n+                     end if;\n+\n+                     --  The current association contains a sequence of indexes\n+                     --  denoting an element of a multidimensional array:\n+                     --\n+                     --    (Index_1, ..., Index_N)\n+\n+                     Expr := First (Choices (Assoc));\n+\n+                     pragma Assert (Nkind (Aggr) = N_Aggregate);\n+\n+                     while Present (Expr) loop\n+                        Index     := First (Expressions (Expr));\n+                        Index_Typ := First_Index (Typ);\n+\n+                        while Present (Index_Typ) loop\n+                           Apply_Scalar_Range_Check (Index, Etype (Index_Typ));\n+                           Next (Index);\n+                           Next_Index (Index_Typ);\n+                        end loop;\n+\n+                        Next (Expr);\n+                     end loop;\n+\n+                     Next (Assoc);\n+                  end loop;\n+\n+               --  One-dimensional array\n+\n+               else\n+                  Assoc := First (Component_Associations (Aggr));\n+\n+                  while Present (Assoc) loop\n+                     Expr      := Expression (Assoc);\n+                     Comp_Type := Component_Type (Typ);\n+\n+                     if Is_Scalar_Type (Comp_Type) then\n+                        Apply_Scalar_Range_Check (Expr, Comp_Type);\n+                     end if;\n+\n+                     Index     := First (Choices (Assoc));\n+                     Index_Typ := First_Index (Typ);\n+\n+                     while Present (Index) loop\n+                        --  The index denotes a range of elements\n+\n+                        if Nkind (Index) = N_Range then\n+                           Apply_Scalar_Range_Check\n+                             (Low_Bound  (Index), Etype (Index_Typ));\n+                           Apply_Scalar_Range_Check\n+                             (High_Bound (Index), Etype (Index_Typ));\n+\n+                        --  Otherwise the index denotes a single element\n+\n+                        else\n+                           Apply_Scalar_Range_Check (Index, Etype (Index_Typ));\n+                        end if;\n+\n+                        Next (Index);\n+                     end loop;\n+\n+                     Next (Assoc);\n+                  end loop;\n+               end if;\n \n             else pragma Assert (Is_Record_Type (Typ));\n "}, {"sha": "d2678110f650dcafb04406887c544fde44466cd1", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db290a9e3745e79710d836c955588845baa2bb6b/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db290a9e3745e79710d836c955588845baa2bb6b/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=db290a9e3745e79710d836c955588845baa2bb6b", "patch": "@@ -6764,30 +6764,10 @@ package body Sem_Attr is\n                      Analyze_And_Resolve (Low,  Etype (Index_Typ));\n                      Analyze_And_Resolve (High, Etype (Index_Typ));\n \n-                     --  Add a range check to ensure that the bounds of the\n-                     --  range are within the index type when this cannot be\n-                     --  determined statically.\n-\n-                     if not Is_OK_Static_Expression (Low) then\n-                        Set_Do_Range_Check (Low);\n-                     end if;\n-\n-                     if not Is_OK_Static_Expression (High) then\n-                        Set_Do_Range_Check (High);\n-                     end if;\n-\n                   --  Otherwise the index denotes a single element\n \n                   else\n                      Analyze_And_Resolve (Index, Etype (Index_Typ));\n-\n-                     --  Add a range check to ensure that the index is within\n-                     --  the index type when it is not possible to determine\n-                     --  this statically.\n-\n-                     if not Is_OK_Static_Expression (Index) then\n-                        Set_Do_Range_Check (Index);\n-                     end if;\n                   end if;\n \n                   Next (Index);\n@@ -12019,14 +11999,12 @@ package body Sem_Attr is\n \n                         if Nkind (C) /= N_Aggregate then\n                            Analyze_And_Resolve (C, Etype (Indx));\n-                           Apply_Constraint_Check (C, Etype (Indx));\n                            Check_Non_Static_Context (C);\n \n                         else\n                            C_E := First (Expressions (C));\n                            while Present (C_E) loop\n                               Analyze_And_Resolve (C_E, Etype (Indx));\n-                              Apply_Constraint_Check (C_E, Etype (Indx));\n                               Check_Non_Static_Context (C_E);\n \n                               Next (C_E);"}]}