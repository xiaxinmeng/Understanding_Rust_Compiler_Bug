{"sha": "c049f638da4f7b32b11e4d895184e0960bae5291", "node_id": "C_kwDOANBUbNoAKGMwNDlmNjM4ZGE0ZjdiMzJiMTFlNGQ4OTUxODRlMDk2MGJhZTUyOTE", "commit": {"author": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2022-04-19T20:45:46Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2022-04-21T14:13:59Z"}, "message": "fortran: Fix conv of UNION constructors [PR105310]\n\nThis fixes an ICE when a UNION is the (1+8*2^n)-th field in a DEC\nSTRUCTURE when compiled with -finit-derived -finit-local-zero.\nThe problem was CONSTRUCTOR_APPEND_ELT from within gfc_conv_union_initializer\nmodified the vector pointer, but the pointer was passed by-value,\nso the old pointer from the caller (gfc_conv_structure) pointed to freed\nmemory.\n\n\tPR fortran/105310\n\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.cc (gfc_conv_union_initializer): Pass vec* by reference.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/dec_union_12.f90: New test.", "tree": {"sha": "0378cadec8364709478b2a23de14677615c96b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0378cadec8364709478b2a23de14677615c96b5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c049f638da4f7b32b11e4d895184e0960bae5291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049f638da4f7b32b11e4d895184e0960bae5291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c049f638da4f7b32b11e4d895184e0960bae5291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049f638da4f7b32b11e4d895184e0960bae5291/comments", "author": null, "committer": null, "parents": [{"sha": "1e6c0e69af8da436e1d1d2d23d8c38410d78ecf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6c0e69af8da436e1d1d2d23d8c38410d78ecf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6c0e69af8da436e1d1d2d23d8c38410d78ecf2"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "ab710efc451e4b05f1a5ccaa94502c3de9718251", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049f638da4f7b32b11e4d895184e0960bae5291/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049f638da4f7b32b11e4d895184e0960bae5291/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=c049f638da4f7b32b11e4d895184e0960bae5291", "patch": "@@ -9194,8 +9194,8 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr, bool init, bool coarray)\n   return gfc_finish_block (&block);\n }\n \n-void\n-gfc_conv_union_initializer (vec<constructor_elt, va_gc> *v,\n+static void\n+gfc_conv_union_initializer (vec<constructor_elt, va_gc> *&v,\n                             gfc_component *un, gfc_expr *init)\n {\n   gfc_constructor *ctor;"}, {"sha": "26671230b05f58c8c39373620c7d5ec360b38304", "filename": "gcc/testsuite/gfortran.dg/dec_union_12.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049f638da4f7b32b11e4d895184e0960bae5291/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049f638da4f7b32b11e4d895184e0960bae5291/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_union_12.f90?ref=c049f638da4f7b32b11e4d895184e0960bae5291", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy -ffree-form -finit-local-zero -finit-derived -fdec-structure\" }\n+!\n+! PR fortran/105310\n+!\n+! Test that gfc_conv_union_initializer does not cause an ICE when called\n+! to build the constructor for a field which triggers a vector resize.\n+!\n+\n+program dec_union_12\n+  implicit none\n+STRUCTURE /foo8u/\n+  ! 8 fields\n+  INTEGER(4) :: a,b,c,d,e,f,g,h\n+  UNION\n+  MAP\n+  ENDMAP\n+  ENDUNION\n+ENDSTRUCTURE\n+STRUCTURE /foo16u/\n+  ! 16 fields\n+  INTEGER(4) :: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p\n+  UNION\n+  MAP\n+  ENDMAP\n+  ENDUNION\n+ENDSTRUCTURE\n+STRUCTURE /foo32u/\n+  ! 32 fields\n+  INTEGER(4) :: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p\n+  INTEGER(4) :: aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap\n+  UNION\n+  MAP\n+  ENDMAP\n+  ENDUNION\n+ENDSTRUCTURE\n+  record /foo8u/ bar8u\n+  record /foo16u/ bar16u\n+  record /foo32u/ bar32u\n+  bar8u.a = 1\n+  bar16u.a = 1\n+  bar32u.a = 1\n+end"}]}