{"sha": "95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkNDdiMTBiZWRkNmNiZGQ3ZDE4ZjhkNTllYTViY2VlMTRkMDRhNg==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@linaro.org", "date": "2014-11-04T11:23:10Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-11-04T11:23:10Z"}, "message": "[AArch64] Fix predicate and constraint mismatch in logical atomic operations\n\n2014-11-04  Michael Collison <michael.collison@linaro.org>\n\n\t* config/aarch64/iterators.md (lconst_atomic): New mode attribute\n\tto support constraints for CONST_INT in atomic operations.\n\t* config/aarch64/atomics.md\n\t(atomic_<atomic_optab><mode>): Use lconst_atomic constraint.\n\t(atomic_nand<mode>): Likewise.\n\t(atomic_fetch_<atomic_optab><mode>): Likewise.\n\t(atomic_fetch_nand<mode>): Likewise.\n\t(atomic_<atomic_optab>_fetch<mode>): Likewise.\n\t(atomic_nand_fetch<mode>): Likewise.\n\nFrom-SVN: r217076", "tree": {"sha": "7bf01091548154e086498775d73686ed10b24b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf01091548154e086498775d73686ed10b24b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/comments", "author": null, "committer": null, "parents": [{"sha": "5d1f63255b8f92d07c36a2098f93f0b7531c2ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1f63255b8f92d07c36a2098f93f0b7531c2ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1f63255b8f92d07c36a2098f93f0b7531c2ef9"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "5eb313d252c9af38e3f9c59bd9aa15774ab2a31a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "patch": "@@ -1,3 +1,15 @@\n+2014-11-04  Michael Collison <michael.collison@linaro.org>\n+\n+\t* config/aarch64/iterators.md (lconst_atomic): New mode attribute\n+\tto support constraints for CONST_INT in atomic operations.\n+\t* config/aarch64/atomics.md\n+\t(atomic_<atomic_optab><mode>): Use lconst_atomic constraint.\n+\t(atomic_nand<mode>): Likewise.\n+\t(atomic_fetch_<atomic_optab><mode>): Likewise.\n+\t(atomic_fetch_nand<mode>): Likewise.\n+\t(atomic_<atomic_optab>_fetch<mode>): Likewise.\n+\t(atomic_nand_fetch<mode>): Likewise.\n+\n 2014-11-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Fix typo in definition"}, {"sha": "eb7daa1aec9ab420060abfbeb8db93eed5c45528", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "patch": "@@ -119,7 +119,7 @@\n   [(set (match_operand:ALLI 0 \"aarch64_sync_memory_operand\" \"+Q\")\n     (unspec_volatile:ALLI\n       [(atomic_op:ALLI (match_dup 0)\n-\t(match_operand:ALLI 1 \"<atomic_op_operand>\" \"rn\"))\n+\t(match_operand:ALLI 1 \"<atomic_op_operand>\" \"r<lconst_atomic>\"))\n        (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n        (clobber (reg:CC CC_REGNUM))\n@@ -141,7 +141,7 @@\n     (unspec_volatile:ALLI\n       [(not:ALLI\n \t(and:ALLI (match_dup 0)\n-\t  (match_operand:ALLI 1 \"aarch64_logical_operand\" \"rn\")))\n+\t  (match_operand:ALLI 1 \"aarch64_logical_operand\" \"r<lconst_atomic>\")))\n        (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n    (clobber (reg:CC CC_REGNUM))\n@@ -164,7 +164,7 @@\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n       [(atomic_op:ALLI (match_dup 1)\n-\t(match_operand:ALLI 2 \"<atomic_op_operand>\" \"rn\"))\n+\t(match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<lconst_atomic>\"))\n        (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n    (clobber (reg:CC CC_REGNUM))\n@@ -188,7 +188,7 @@\n     (unspec_volatile:ALLI\n       [(not:ALLI\n \t (and:ALLI (match_dup 1)\n-\t   (match_operand:ALLI 2 \"aarch64_logical_operand\" \"rn\")))\n+\t   (match_operand:ALLI 2 \"aarch64_logical_operand\" \"r<lconst_atomic>\")))\n        (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n    (clobber (reg:CC CC_REGNUM))\n@@ -209,7 +209,7 @@\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n     (atomic_op:ALLI\n       (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")\n-      (match_operand:ALLI 2 \"<atomic_op_operand>\" \"rn\")))\n+      (match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<lconst_atomic>\")))\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n       [(match_dup 1) (match_dup 2)\n@@ -233,7 +233,7 @@\n     (not:ALLI\n       (and:ALLI\n \t(match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")\n-\t(match_operand:ALLI 2 \"aarch64_logical_operand\" \"rn\"))))\n+\t(match_operand:ALLI 2 \"aarch64_logical_operand\" \"r<lconst_atomic>\"))))\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n       [(match_dup 1) (match_dup 2)"}, {"sha": "99351679794b3840203d805a28691ca6aa9465b4", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "patch": "@@ -361,6 +361,9 @@\n ;; Attribute to describe constants acceptable in logical operations\n (define_mode_attr lconst [(SI \"K\") (DI \"L\")])\n \n+;; Attribute to describe constants acceptable in atomic logical operations\n+(define_mode_attr lconst_atomic [(QI \"K\") (HI \"K\") (SI \"K\") (DI \"L\")])\n+\n ;; Map a mode to a specific constraint character.\n (define_mode_attr cmode [(QI \"q\") (HI \"h\") (SI \"s\") (DI \"d\")])\n "}]}