{"sha": "aabd7048259b5e8cb8980cca95fb2d14096c2621", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiZDcwNDgyNTliNWU4Y2I4OTgwY2NhOTVmYjJkMTQwOTZjMjYyMQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-01-16T10:00:29Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-01-16T10:00:29Z"}, "message": "expr.c (process_jvm_instruction): Coerce to correct Throwable sub-type the result of the call that gets the...\n\nd\n\t* expr.c (process_jvm_instruction):  Coerce to correct Throwable\n\tsub-type the result of the call that gets the exception value.\n\t* parse.y (java_complete_expand_methods):  If flags_syntax_only,\n\tdon't call finish_class.\n\t* parse.y (java_check_regular_methods):  If METHOD_PRIVATE,\n\tclear found before continuing.\n\t* verify.c (verify_jvm_instructions):  On an array load, allow\n\tand handle top of stack to be TYPE_NULL.\n\nFrom-SVN: r24697", "tree": {"sha": "d5099cf85a030d4f4dc3b6272d86ab60fa028821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5099cf85a030d4f4dc3b6272d86ab60fa028821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aabd7048259b5e8cb8980cca95fb2d14096c2621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabd7048259b5e8cb8980cca95fb2d14096c2621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabd7048259b5e8cb8980cca95fb2d14096c2621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabd7048259b5e8cb8980cca95fb2d14096c2621/comments", "author": null, "committer": null, "parents": [{"sha": "2dc219a11db3efc10d1564bf31db97aa7918e61b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc219a11db3efc10d1564bf31db97aa7918e61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc219a11db3efc10d1564bf31db97aa7918e61b"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "ab3d2f3eac6eb4ee1319d767e414e4cecfa4b921", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=aabd7048259b5e8cb8980cca95fb2d14096c2621", "patch": "@@ -2197,8 +2197,8 @@ process_jvm_instruction (PC, byte_ops, length)\n      replace the top of the stack with the thrown object reference */\n   if (instruction_bits [PC] & BCODE_EXCEPTION_TARGET)\n     {\n-      pop_value (ptr_type_node);\n-      push_value (soft_exceptioninfo_call_node);\n+      tree type = pop_type (ptr_type_node);\n+      push_value (build1 (NOP_EXPR, type, soft_exceptioninfo_call_node));\n     }\n \n   switch (byte_ops[PC++])"}, {"sha": "8d7da905bef9ba87c64b04f6ba3975214d35cf9c", "filename": "gcc/java/parse.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=aabd7048259b5e8cb8980cca95fb2d14096c2621", "patch": "@@ -7161,8 +7161,13 @@ java_check_regular_methods (class_decl)\n       found = lookup_argument_method (super_class, DECL_NAME (method), sig);\n \n       /* Nothing overrides or it's a private method. */\n-      if (!found || (found && METHOD_PRIVATE (found)))\n+      if (!found)\n \tcontinue;\n+      if (METHOD_PRIVATE (found))\n+\t{\n+\t  found = NULL_TREE;\n+\t  continue;\n+\t}\n \n       /* If found wasn't verified, it's DECL_NAME won't be set properly. \n \t We set it temporarily for the sake of the error report. */\n@@ -8310,7 +8315,7 @@ java_complete_expand_methods ()\n \t{\n \t  if (flag_emit_class_files)\n \t    write_classfile (current_class);\n-\t  else\n+\t  else if (! flag_syntax_only)\n \t    finish_class (current_class);\n \t}\n     }"}, {"sha": "c6805c296285258ba0c1834b001f65547fdb89df", "filename": "gcc/java/parse.y", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabd7048259b5e8cb8980cca95fb2d14096c2621/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=aabd7048259b5e8cb8980cca95fb2d14096c2621", "patch": "@@ -4523,8 +4523,13 @@ java_check_regular_methods (class_decl)\n       found = lookup_argument_method (super_class, DECL_NAME (method), sig);\n \n       /* Nothing overrides or it's a private method. */\n-      if (!found || (found && METHOD_PRIVATE (found)))\n+      if (!found)\n \tcontinue;\n+      if (METHOD_PRIVATE (found))\n+\t{\n+\t  found = NULL_TREE;\n+\t  continue;\n+\t}\n \n       /* If found wasn't verified, it's DECL_NAME won't be set properly. \n \t We set it temporarily for the sake of the error report. */\n@@ -5672,7 +5677,7 @@ java_complete_expand_methods ()\n \t{\n \t  if (flag_emit_class_files)\n \t    write_classfile (current_class);\n-\t  else\n+\t  else if (! flag_syntax_only)\n \t    finish_class (current_class);\n \t}\n     }"}]}