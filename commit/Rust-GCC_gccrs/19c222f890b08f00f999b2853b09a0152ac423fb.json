{"sha": "19c222f890b08f00f999b2853b09a0152ac423fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljMjIyZjg5MGIwOGYwMGY5OTliMjg1M2IwOWEwMTUyYWM0MjNmYg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-06T23:02:38Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-06T23:02:38Z"}, "message": "re PR fortran/30947 (intrinsic: ALARM)\n\n\tPR fortran/30947\n\n\t* iresolve.c (gfc_resolve_alarm_sub): Suffix the subroutine name\n\twith the kind of the STATUS argument.\n\n\t* intrinsics/signal.c: Create specific versions of alarm_sub and\n\talarm_sub_int according to the integer kind of the last argument.\n\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_alarm_sub and\n\t_gfortran_alarm_sub_int, add _gfortran_alarm_sub_i4,\n\t_gfortran_alarm_sub_i8, _gfortran_alarm_sub_int_i4 and\n\t_gfortran_alarm_sub_int_i8.\n\nFrom-SVN: r127259", "tree": {"sha": "22a8fdfdc53e25a6f6189de25babaa2d78f182d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a8fdfdc53e25a6f6189de25babaa2d78f182d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c222f890b08f00f999b2853b09a0152ac423fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c222f890b08f00f999b2853b09a0152ac423fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c222f890b08f00f999b2853b09a0152ac423fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c222f890b08f00f999b2853b09a0152ac423fb/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f6c31a521d7304f8573ac78bf60e4bd521c4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f6c31a521d7304f8573ac78bf60e4bd521c4ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f6c31a521d7304f8573ac78bf60e4bd521c4ce"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "dc5a09e2dc0cf06bb6a4f4248d6bfe498ba97ceb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c222f890b08f00f999b2853b09a0152ac423fb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c222f890b08f00f999b2853b09a0152ac423fb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=19c222f890b08f00f999b2853b09a0152ac423fb", "patch": "@@ -1,3 +1,9 @@\n+2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30947\n+\t* iresolve.c (gfc_resolve_alarm_sub): Suffix the subroutine name\n+\twith the kind of the STATUS argument.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/30948"}, {"sha": "d0a73bfc8f2951222c4d6d20451824e64d7a9097", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c222f890b08f00f999b2853b09a0152ac423fb/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c222f890b08f00f999b2853b09a0152ac423fb/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=19c222f890b08f00f999b2853b09a0152ac423fb", "patch": "@@ -2385,15 +2385,19 @@ gfc_resolve_alarm_sub (gfc_code *c)\n   ts.type = BT_INTEGER;\n   ts.kind = gfc_c_int_kind;\n \n-  /* handler can be either BT_INTEGER or BT_PROCEDURE  */\n+  /* handler can be either BT_INTEGER or BT_PROCEDURE.\n+     In all cases, the status argument is of default integer kind\n+     (enforced in check.c) so that the function suffix is fixed.  */\n   if (handler->ts.type == BT_INTEGER)\n     {\n       if (handler->ts.kind != gfc_c_int_kind)\n \tgfc_convert_type (handler, &ts, 2);\n-      name = gfc_get_string (PREFIX (\"alarm_sub_int\"));\n+      name = gfc_get_string (PREFIX (\"alarm_sub_int_i%d\"),\n+\t\t\t     gfc_default_integer_kind);\n     }\n   else\n-    name = gfc_get_string (PREFIX (\"alarm_sub\"));\n+    name = gfc_get_string (PREFIX (\"alarm_sub_i%d\"),\n+\t\t\t   gfc_default_integer_kind);\n \n   if (seconds->ts.kind != gfc_c_int_kind)\n     gfc_convert_type (seconds, &ts, 2);"}, {"sha": "c7e57db9a915706e1652f9a7a87ffb97556596f4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=19c222f890b08f00f999b2853b09a0152ac423fb", "patch": "@@ -1,3 +1,13 @@\n+2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30947\n+\t* intrinsics/signal.c: Create specific versions of alarm_sub and\n+\talarm_sub_int according to the integer kind of the last argument.\n+\t* gfortran.map (GFORTRAN_1.0): Remove _gfortran_alarm_sub and\n+\t_gfortran_alarm_sub_int, add _gfortran_alarm_sub_i4,\n+\t_gfortran_alarm_sub_i8, _gfortran_alarm_sub_int_i4 and\n+\t_gfortran_alarm_sub_int_i8.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/29828"}, {"sha": "8cfc23670b7dafd655a0278c31cc9e02744f2ead", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=19c222f890b08f00f999b2853b09a0152ac423fb", "patch": "@@ -4,8 +4,10 @@ GFORTRAN_1.0 {\n     _gfortran_access_func;\n     _gfortran_adjustl;\n     _gfortran_adjustr;\n-    _gfortran_alarm_sub;\n-    _gfortran_alarm_sub_int;\n+    _gfortran_alarm_sub_i4;\n+    _gfortran_alarm_sub_i8;\n+    _gfortran_alarm_sub_int_i4;\n+    _gfortran_alarm_sub_int_i8;\n     _gfortran_all_l16;\n     _gfortran_all_l4;\n     _gfortran_all_l8;"}, {"sha": "c69efac1f185c60fe29f2574c350398ad3c5cc88", "filename": "libgfortran/intrinsics/signal.c", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2Fintrinsics%2Fsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c222f890b08f00f999b2853b09a0152ac423fb/libgfortran%2Fintrinsics%2Fsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsignal.c?ref=19c222f890b08f00f999b2853b09a0152ac423fb", "patch": "@@ -132,11 +132,11 @@ iexport(signal_func_int);\n \n \n /* ALARM intrinsic with PROCEDURE as handler  */\n-extern void alarm_sub (int *, void (*)(int), int *);\n-iexport_proto(alarm_sub);\n+extern void alarm_sub_i4 (int *, void (*)(int), GFC_INTEGER_4 *);\n+iexport_proto(alarm_sub_i4);\n \n void\n-alarm_sub (int *seconds, void (*handler)(int), int *status)\n+alarm_sub_i4 (int *seconds, void (*handler)(int), GFC_INTEGER_4 *status)\n {\n #if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n   if (status != NULL)\n@@ -157,15 +157,71 @@ alarm_sub (int *seconds, void (*handler)(int), int *status)\n     *status = -1;\n #endif\n }\n-iexport(alarm_sub);\n+iexport(alarm_sub_i4);\n+\n+\n+extern void alarm_sub_i8 (int *, void (*)(int), GFC_INTEGER_8 *);\n+iexport_proto(alarm_sub_i8);\n+\n+void\n+alarm_sub_i8 (int *seconds, void (*handler)(int), GFC_INTEGER_8 *status)\n+{\n+#if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n+  if (status != NULL)\n+    {\n+      if (signal (SIGALRM, handler) == SIG_ERR)\n+\t*status = -1;\n+      else\n+\t*status = alarm (*seconds);\n+    }\n+  else\n+    {\n+      signal (SIGALRM, handler);\n+      alarm (*seconds);\n+    }\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(alarm_sub_i8);\n \n \n /* ALARM intrinsic with INTEGER as handler  */\n-extern void alarm_sub_int (int *, int *, int *);\n-iexport_proto(alarm_sub_int);\n+extern void alarm_sub_int_i4 (int *, int *, GFC_INTEGER_4 *);\n+iexport_proto(alarm_sub_int_i4);\n+\n+void\n+alarm_sub_int_i4 (int *seconds, int *handler, GFC_INTEGER_4 *status)\n+{\n+#if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n+  if (status != NULL)\n+    {\n+      if (signal (SIGALRM, (void (*)(int)) *handler) == SIG_ERR)\n+\t*status = -1;\n+      else\n+\t*status = alarm (*seconds);\n+    }\n+  else\n+    {\n+      signal (SIGALRM, (void (*)(int)) *handler);\n+      alarm (*seconds);\n+    }\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(alarm_sub_int_i4);\n+\n+\n+extern void alarm_sub_int_i8 (int *, int *, GFC_INTEGER_8 *);\n+iexport_proto(alarm_sub_int_i8);\n \n void\n-alarm_sub_int (int *seconds, int *handler, int *status)\n+alarm_sub_int_i8 (int *seconds, int *handler, GFC_INTEGER_8 *status)\n {\n #if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n   if (status != NULL)\n@@ -186,5 +242,5 @@ alarm_sub_int (int *seconds, int *handler, int *status)\n     *status = -1;\n #endif\n }\n-iexport(alarm_sub_int);\n+iexport(alarm_sub_int_i8);\n "}]}