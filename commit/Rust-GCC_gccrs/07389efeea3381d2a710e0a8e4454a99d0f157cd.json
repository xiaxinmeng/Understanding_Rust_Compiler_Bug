{"sha": "07389efeea3381d2a710e0a8e4454a99d0f157cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDczODllZmVlYTMzODFkMmE3MTBlMGE4ZTQ0NTRhOTlkMGYxNTdjZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-12T07:23:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-12T07:23:31Z"}, "message": "error.c (dump_simple_decl): New function, broken out from ...\n\n\t* error.c (dump_simple_decl): New function, broken out from ...\n\t(dump_decl): Use it.\n\nFrom-SVN: r19694", "tree": {"sha": "d68f317b62cd4dfbf30024530b604a2339ed7454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d68f317b62cd4dfbf30024530b604a2339ed7454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07389efeea3381d2a710e0a8e4454a99d0f157cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07389efeea3381d2a710e0a8e4454a99d0f157cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07389efeea3381d2a710e0a8e4454a99d0f157cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07389efeea3381d2a710e0a8e4454a99d0f157cd/comments", "author": null, "committer": null, "parents": [{"sha": "fa03cbe9501a99b8d348260a2e9dfdc5ec1f21c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa03cbe9501a99b8d348260a2e9dfdc5ec1f21c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa03cbe9501a99b8d348260a2e9dfdc5ec1f21c3"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "79a5c44ac84ec961787b66408025ddd86cfe19b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07389efeea3381d2a710e0a8e4454a99d0f157cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07389efeea3381d2a710e0a8e4454a99d0f157cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07389efeea3381d2a710e0a8e4454a99d0f157cd", "patch": "@@ -1,3 +1,8 @@\n+Tue May 12 07:24:18 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* error.c (dump_simple_decl): New function, broken out from ...\n+\t(dump_decl): Use it.\n+\n Mon May 11 11:38:07 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* ptree.c (lang_print_xnode): Add missing `break'."}, {"sha": "1f068da56cc763a28b079c95d58133d52a383af7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07389efeea3381d2a710e0a8e4454a99d0f157cd/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07389efeea3381d2a710e0a8e4454a99d0f157cd/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=07389efeea3381d2a710e0a8e4454a99d0f157cd", "patch": "@@ -90,6 +90,7 @@ enum pad { none, before, after };\n \n static void dump_type PROTO((tree, int));\n static void dump_type_real PROTO((tree, int, int));\n+static void dump_simple_decl PROTO((tree, tree, int));\n static void dump_decl PROTO((tree, int));\n static void dump_function_decl PROTO((tree, int));\n static void dump_expr PROTO((tree, int));\n@@ -645,6 +646,33 @@ dump_global_iord (t)\n   OB_PUTC (')');\n }\n \n+static void\n+dump_simple_decl (t, type, v)\n+     tree t;\n+     tree type;\n+     int v;\n+{\n+  if (v > 0)\n+    {\n+      dump_type_prefix (type, v, 0);\n+      OB_PUTC (' ');\n+      dump_readonly_or_volatile (t, after);\n+    }\n+  /* DECL_CLASS_CONTEXT isn't being set in some cases.  Hmm...  */\n+  if (DECL_CONTEXT (t)\n+      && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (t))) == 't')\n+    {\n+      dump_type (DECL_CONTEXT (t), 0);\n+      OB_PUTC2 (':', ':');\n+    }\n+  if (DECL_NAME (t))\n+    dump_decl (DECL_NAME (t), v);\n+  else\n+    OB_PUTS (\"{anon}\");\n+  if (v > 0)\n+    dump_type_suffix (type, v, 0);\n+}\n+\n static void\n dump_decl (t, v)\n      tree t;\n@@ -674,7 +702,8 @@ dump_decl (t, v)\n       }\n       if (v > 0)\n \tOB_PUTS (\"typedef \");\n-      goto general;\n+      dump_simple_decl (t, DECL_ORIGINAL_TYPE (t) \n+\t\t\t? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t), v);\n       break;\n       \n     case VAR_DECL:\n@@ -687,26 +716,7 @@ dump_decl (t, v)\n       /* else fall through */\n     case FIELD_DECL:\n     case PARM_DECL:\n-    general:\n-      if (v > 0)\n-\t{\n-\t  dump_type_prefix (TREE_TYPE (t), v, 0);\n-\t  OB_PUTC (' ');\n-\t  dump_readonly_or_volatile (t, after);\n-\t}\n-      /* DECL_CLASS_CONTEXT isn't being set in some cases.  Hmm...  */\n-      if (DECL_CONTEXT (t)\n-\t  && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (t))) == 't')\n-\t{\n-\t  dump_type (DECL_CONTEXT (t), 0);\n-\t  OB_PUTC2 (':', ':');\n-\t}\n-      if (DECL_NAME (t))\n-\tdump_decl (DECL_NAME (t), v);\n-      else\n-\tOB_PUTS (\"{anon}\");\n-      if (v > 0)\n-\tdump_type_suffix (TREE_TYPE (t), v, 0);\n+      dump_simple_decl (t, TREE_TYPE (t), v);\n       break;\n \n     case NAMESPACE_DECL:\n@@ -875,7 +885,7 @@ dump_decl (t, v)\n       if ((TREE_TYPE (t) != NULL_TREE && NEXT_CODE (t) == ENUMERAL_TYPE)\n \t  || (DECL_INITIAL (t) &&\n \t      TREE_CODE (DECL_INITIAL (t)) == TEMPLATE_PARM_INDEX))\n-\tgoto general;\n+\tdump_simple_decl (t, TREE_TYPE (t), v);\n       else if (DECL_NAME (t))\n \tdump_decl (DECL_NAME (t), v);\n       else if (DECL_INITIAL (t))"}]}