{"sha": "ef3b7b176100495d541b40439b1f3b9e672d071d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzYjdiMTc2MTAwNDk1ZDU0MWI0MDQzOWIxZjNiOWU2NzJkMDcxZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-11-02T05:50:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-11-02T05:50:06Z"}, "message": "re PR c++/30897 (ICE with default argument in template template parameter)\n\n        PR c++/30897\n        * pt.c (push_template_decl_real): Set DECL_CONTEXT on template\n        template parms.\n        (lookup_template_class): Use it to get the outer template args\n        for instantiating one.\n\n        PR c++/29236\n        * pt.c (reduce_template_parm_level): tsubst the parameters\n        of a template template parm.\n\nFrom-SVN: r129844", "tree": {"sha": "31e836c6fc221c8334adaa2c5aa5efc804599663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31e836c6fc221c8334adaa2c5aa5efc804599663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3b7b176100495d541b40439b1f3b9e672d071d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3b7b176100495d541b40439b1f3b9e672d071d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3b7b176100495d541b40439b1f3b9e672d071d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3b7b176100495d541b40439b1f3b9e672d071d/comments", "author": null, "committer": null, "parents": [{"sha": "e1a18c68eba04c396dd491a361aeef15f73e8b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a18c68eba04c396dd491a361aeef15f73e8b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a18c68eba04c396dd491a361aeef15f73e8b05"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "90bea18d704c6c825f9faae4e54786a1e81149b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef3b7b176100495d541b40439b1f3b9e672d071d", "patch": "@@ -1,3 +1,15 @@\n+2007-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/30897\n+\t* pt.c (push_template_decl_real): Set DECL_CONTEXT on template\n+\ttemplate parms.\n+\t(lookup_template_class): Use it to get the outer template args\n+\tfor instantiating one.\n+\n+\tPR c++/29236\n+\t* pt.c (reduce_template_parm_level): tsubst the parameters\n+\tof a template template parm.\n+\n 2007-11-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33955\n@@ -33,7 +45,7 @@\n            Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19531\n-\t* cp/typeck.c (check_return_expr): Don't set named_return_value_okay_p\n+\t* typeck.c (check_return_expr): Don't set named_return_value_okay_p\n \tif retval is volatile. \n \t\n 2007-10-30  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "e9e7789688111b1ed0a84fa0dfe53d79d147d344", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef3b7b176100495d541b40439b1f3b9e672d071d", "patch": "@@ -132,7 +132,7 @@ static bool inline_needs_template_parms (tree);\n static void push_inline_template_parms_recursive (tree, int);\n static tree retrieve_local_specialization (tree);\n static void register_local_specialization (tree, tree);\n-static tree reduce_template_parm_level (tree, tree, int);\n+static tree reduce_template_parm_level (tree, tree, int, tree, tsubst_flags_t);\n static int mark_template_parm (tree, void *);\n static int template_parm_this_level_p (tree, void *);\n static tree tsubst_friend_function (tree, tree);\n@@ -2878,7 +2878,8 @@ canonical_type_parameter (tree type)\n    new one is created.  */\n \n static tree\n-reduce_template_parm_level (tree index, tree type, int levels)\n+reduce_template_parm_level (tree index, tree type, int levels, tree args,\n+\t\t\t    tsubst_flags_t complain)\n {\n   if (TEMPLATE_PARM_DESCENDANTS (index) == NULL_TREE\n       || (TEMPLATE_PARM_LEVEL (TEMPLATE_PARM_DESCENDANTS (index))\n@@ -2903,9 +2904,10 @@ reduce_template_parm_level (tree index, tree type, int levels)\n \t= TEMPLATE_PARM_PARAMETER_PACK (index);\n \n \t/* Template template parameters need this.  */\n-      if (TREE_CODE (decl) != CONST_DECL)\n-\tDECL_TEMPLATE_PARMS (decl)\n-\t  = DECL_TEMPLATE_PARMS (TEMPLATE_PARM_DECL (index));\n+      if (TREE_CODE (decl) == TEMPLATE_DECL)\n+\tDECL_TEMPLATE_PARMS (decl) = tsubst_template_parms\n+\t  (DECL_TEMPLATE_PARMS (TEMPLATE_PARM_DECL (index)),\n+\t   args, complain);\n     }\n \n   return TEMPLATE_PARM_DESCENDANTS (index);\n@@ -4000,10 +4002,13 @@ template arguments to %qD do not match original template %qD\",\n \n   if (primary)\n     {\n+      tree parms = DECL_TEMPLATE_PARMS (tmpl);\n+      int i;\n+\n       DECL_PRIMARY_TEMPLATE (tmpl) = tmpl;\n       if (DECL_CONV_FN_P (tmpl))\n \t{\n-\t  int depth = TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (tmpl));\n+\t  int depth = TMPL_PARMS_DEPTH (parms);\n \n \t  /* It is a conversion operator. See if the type converted to\n \t     depends on innermost template operands.  */\n@@ -4012,6 +4017,16 @@ template arguments to %qD do not match original template %qD\",\n \t\t\t\t\t depth))\n \t    DECL_TEMPLATE_CONV_FN_P (tmpl) = 1;\n \t}\n+\n+      /* Give template template parms a DECL_CONTEXT of the template\n+\t for which they are a parameter.  */\n+      parms = INNERMOST_TEMPLATE_PARMS (parms);\n+      for (i = TREE_VEC_LENGTH (parms) - 1; i >= 0; --i)\n+\t{\n+\t  tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+\t  if (TREE_CODE (parm) == TEMPLATE_DECL)\n+\t    DECL_CONTEXT (parm) = tmpl;\n+\t}\n     }\n \n   /* The DECL_TI_ARGS of DECL contains full set of arguments referring\n@@ -5392,6 +5407,7 @@ lookup_template_class (tree d1,\n \n       tree parm;\n       tree arglist2;\n+      tree outer;\n \n       parmlist = DECL_INNERMOST_TEMPLATE_PARMS (template);\n \n@@ -5404,15 +5420,23 @@ lookup_template_class (tree d1,\n \t instantiation `TT<int>' is seen, we need to build the full\n \t arguments containing {int} as the innermost level.  Outer levels,\n \t available when not appearing as default template argument, can be\n-\t obtained from `current_template_args ()'.\n+\t obtained from the arguments of the enclosing template.\n \n \t Suppose that TT is later substituted with std::vector.  The above\n \t instantiation is `TT<int, std::allocator<T> >' with TT at\n \t level 1, and T at level 2, while the template arguments at level 1\n \t becomes {std::vector} and the inner level 2 is {int}.  */\n \n-      if (current_template_parms)\n-\targlist = add_to_template_args (current_template_args (), arglist);\n+      outer = DECL_CONTEXT (template);\n+      if (outer)\n+\touter = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (outer)));\n+      else if (current_template_parms)\n+\t/* This is an argument of the current template, so we haven't set\n+\t   DECL_CONTEXT yet.  */\n+\touter = current_template_args ();\n+\n+      if (outer)\n+\targlist = add_to_template_args (outer, arglist);\n \n       arglist2 = coerce_template_parms (parmlist, arglist, template,\n \t\t\t\t\tcomplain,\n@@ -8829,7 +8853,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\tr = copy_type (t);\n \t\tTEMPLATE_TYPE_PARM_INDEX (r)\n \t\t  = reduce_template_parm_level (TEMPLATE_TYPE_PARM_INDEX (t),\n-\t\t\t\t\t\tr, levels);\n+\t\t\t\t\t\tr, levels, args, complain);\n \t\tTYPE_STUB_DECL (r) = TYPE_NAME (r) = TEMPLATE_TYPE_DECL (r);\n \t\tTYPE_MAIN_VARIANT (r) = r;\n \t\tTYPE_POINTER_TO (r) = NULL_TREE;\n@@ -8863,7 +8887,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    break;\n \n \t  case TEMPLATE_PARM_INDEX:\n-\t    r = reduce_template_parm_level (t, type, levels);\n+\t    r = reduce_template_parm_level (t, type, levels, args, complain);\n \t    break;\n \n \t  default:"}, {"sha": "1210f042f9ba60b2f4bb930c1a4b685e83bd6962", "filename": "gcc/testsuite/g++.dg/template/ttp23.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp23.C?ref=ef3b7b176100495d541b40439b1f3b9e672d071d", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/29236\n+\n+template <typename T> struct A {};\n+\n+template <template <typename> class P>\n+struct B {\n+    template <template <typename> class Q>\n+    friend bool foo (const B<Q>& a);\n+};\n+\n+template <template <typename> class Q>\n+bool foo (const B<Q>& a);\n+\n+void bar () {\n+  B<A> a;\n+  foo (a);\n+}"}, {"sha": "2b8e28515ff1f9d8ec1a18ee4f0e102aa673a9af", "filename": "gcc/testsuite/g++.dg/template/ttp24.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3b7b176100495d541b40439b1f3b9e672d071d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp24.C?ref=ef3b7b176100495d541b40439b1f3b9e672d071d", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/30897\n+\n+template<template <typename T, typename = T > class U> struct A\n+{\n+  template<int> U<int> foo();\n+};"}]}