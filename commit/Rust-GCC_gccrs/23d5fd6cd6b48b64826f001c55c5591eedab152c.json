{"sha": "23d5fd6cd6b48b64826f001c55c5591eedab152c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkNWZkNmNkNmI0OGI2NDgyNmYwMDFjNTVjNTU5MWVlZGFiMTUyYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-12-23T18:05:23Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-12-23T18:05:23Z"}, "message": "Respect pointer_traits on node deallocation in _ReuseOrAllocNode parenthesis operator.\n\n2018-12-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tRespect pointer_traits on node deallocation in _ReuseOrAllocNode\n\tparenthesis operator.\n\n\t* include/bits/hashtable_policy.h\n\t(_Hashtable_alloc<>::_M_deallocate_node_ptr(__node_type*)): New.\n\t(_Hashtable_alloc<>::_M_deallocate_node(__node_type*)): Use latter.\n\t(_ReuseOrAllocNode<>::operator<_Arg>()(_Arg&&)): Likewise.\n\nFrom-SVN: r267380", "tree": {"sha": "cb3f5cc2f151a947c76cb0820e9556446f2cbee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb3f5cc2f151a947c76cb0820e9556446f2cbee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d5fd6cd6b48b64826f001c55c5591eedab152c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d5fd6cd6b48b64826f001c55c5591eedab152c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d5fd6cd6b48b64826f001c55c5591eedab152c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d5fd6cd6b48b64826f001c55c5591eedab152c/comments", "author": null, "committer": null, "parents": [{"sha": "18246c420fd53a12be68b4ddfcfebf1e80056435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18246c420fd53a12be68b4ddfcfebf1e80056435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18246c420fd53a12be68b4ddfcfebf1e80056435"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "dd67656b63e1f60501dba8a0a13a1abce059447a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d5fd6cd6b48b64826f001c55c5591eedab152c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d5fd6cd6b48b64826f001c55c5591eedab152c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23d5fd6cd6b48b64826f001c55c5591eedab152c", "patch": "@@ -1,3 +1,13 @@\n+2018-12-23  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tRespect pointer_traits on node deallocation in _ReuseOrAllocNode\n+\tparenthesis operator.\n+\n+\t* include/bits/hashtable_policy.h\n+\t(_Hashtable_alloc<>::_M_deallocate_node_ptr(__node_type*)): New.\n+\t(_Hashtable_alloc<>::_M_deallocate_node(__node_type*)): Use latter.\n+\t(_ReuseOrAllocNode<>::operator<_Arg>()(_Arg&&)): Likewise.\n+\n 2018-12-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* /config/os/bsd/darwin/ppc-extra.ver: Append long double symbols."}, {"sha": "a02396b0308ddf1a07ea16619f6f6b012b874e28", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d5fd6cd6b48b64826f001c55c5591eedab152c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d5fd6cd6b48b64826f001c55c5591eedab152c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=23d5fd6cd6b48b64826f001c55c5591eedab152c", "patch": "@@ -135,8 +135,7 @@ namespace __detail\n \t\t}\n \t      __catch(...)\n \t\t{\n-\t\t  __node->~__node_type();\n-\t\t  __node_alloc_traits::deallocate(__a, __node, 1);\n+\t\t  _M_h._M_deallocate_node_ptr(__node);\n \t\t  __throw_exception_again;\n \t\t}\n \t      return __node;\n@@ -2047,6 +2046,9 @@ namespace __detail\n       void\n       _M_deallocate_node(__node_type* __n);\n \n+      void\n+      _M_deallocate_node_ptr(__node_type* __n);\n+\n       // Deallocate the linked list of nodes pointed to by __n\n       void\n       _M_deallocate_nodes(__node_type* __n);\n@@ -2085,10 +2087,17 @@ namespace __detail\n   template<typename _NodeAlloc>\n     void\n     _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)\n+    {\n+      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());\n+      _M_deallocate_node_ptr(__n);\n+    }\n+\n+  template<typename _NodeAlloc>\n+    void\n+    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)\n     {\n       typedef typename __node_alloc_traits::pointer _Ptr;\n       auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);\n-      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());\n       __n->~__node_type();\n       __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);\n     }"}]}