{"sha": "e33a1eae25b8a8744db2fea72e739d64799ca61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzYTFlYWUyNWI4YTg3NDRkYjJmZWE3MmU3MzlkNjQ3OTljYTYxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-30T09:49:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-30T09:49:40Z"}, "message": "--with-{documentation,changes}-root-url tweaks\n\n>   , CHANGES_URL (\"gcc-10/changes.html#empty_base\");\n>\n> where the macro would just use preprocessor string concatenation?\n\nOk, the following patch implements it (doesn't introduce a separate\nmacro and just uses CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\"),\nin addition adds the documentation Joseph requested.\n\n2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac (--with-documentation-root-url,\n\t--with-changes-root-url): Diagnose URL not ending with /,\n\tuse AC_DEFINE_UNQUOTED instead of AC_SUBST.\n\t* opts.h (get_changes_url): Remove.\n\t* opts.c (get_changes_url): Remove.\n\t* Makefile.in (CFLAGS-opts.o): Don't add -DDOCUMENTATION_ROOT_URL\n\tor -DCHANGES_ROOT_URL.\n\t* doc/install.texi (--with-documentation-root-url,\n\t--with-changes-root-url): Document.\n\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Don't call\n\tget_changes_url and free, change url variable type to const char * and\n\tset it to CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\".\n\t* config/s390/s390.c (s390_function_arg_vector,\n\ts390_function_arg_float): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_vfp_is_call_or_return_candidate):\n\tLikewise.\n\t* config/rs6000/rs6000-call.c (rs6000_discover_homogeneous_aggregate):\n\tLikewise.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "4963a812c2302f6d2df67ef05b6a51958e9e3aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4963a812c2302f6d2df67ef05b6a51958e9e3aec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33a1eae25b8a8744db2fea72e739d64799ca61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33a1eae25b8a8744db2fea72e739d64799ca61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33a1eae25b8a8744db2fea72e739d64799ca61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33a1eae25b8a8744db2fea72e739d64799ca61f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e6f8293362979aea53b5cae3fa6ab0b6981694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e6f8293362979aea53b5cae3fa6ab0b6981694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e6f8293362979aea53b5cae3fa6ab0b6981694"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "5b69334a26b882c0b57cf3f5e777ece5fd11259a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -1,3 +1,26 @@\n+2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (--with-documentation-root-url,\n+\t--with-changes-root-url): Diagnose URL not ending with /,\n+\tuse AC_DEFINE_UNQUOTED instead of AC_SUBST.\n+\t* opts.h (get_changes_url): Remove.\n+\t* opts.c (get_changes_url): Remove.\n+\t* Makefile.in (CFLAGS-opts.o): Don't add -DDOCUMENTATION_ROOT_URL\n+\tor -DCHANGES_ROOT_URL.\n+\t* doc/install.texi (--with-documentation-root-url,\n+\t--with-changes-root-url): Document.\n+\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Don't call\n+\tget_changes_url and free, change url variable type to const char * and\n+\tset it to CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\".\n+\t* config/s390/s390.c (s390_function_arg_vector,\n+\ts390_function_arg_float): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_vfp_is_call_or_return_candidate):\n+\tLikewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_discover_homogeneous_aggregate):\n+\tLikewise.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2020-04-30  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR target/57002"}, {"sha": "543b477ff18ba3e34ac130114d8d60b75813ba58", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -2186,9 +2186,6 @@ lto-wrapper$(exeext): $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBDEPS)\n \t   $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBS)\n \tmv -f T$@ $@\n \n-CFLAGS-opts.o += -DDOCUMENTATION_ROOT_URL=\\\"@DOCUMENTATION_ROOT_URL@\\\"\n-CFLAGS-opts.o += -DCHANGES_ROOT_URL=\\\"@CHANGES_ROOT_URL@\\\"\n-\n # Files used by all variants of C or by the stand-alone pre-processor.\n \n CFLAGS-c-family/c-opts.o += @TARGET_SYSTEM_ROOT_DEFINE@"}, {"sha": "809e7b268237c448fd0e927bffad528c07cd593a", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -24,6 +24,12 @@\n #endif\n \n \n+/* Define to the root for URLs about GCC changes. */\n+#ifndef USED_FOR_TARGET\n+#undef CHANGES_ROOT_URL\n+#endif\n+\n+\n /* Define as the number of bits in a byte, if `limits.h' doesn't. */\n #ifndef USED_FOR_TARGET\n #undef CHAR_BIT\n@@ -82,6 +88,12 @@\n #endif\n \n \n+/* Define to the root for documentation URLs. */\n+#ifndef USED_FOR_TARGET\n+#undef DOCUMENTATION_ROOT_URL\n+#endif\n+\n+\n /* Define 0/1 if static analyzer feature is enabled. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_ANALYZER"}, {"sha": "409ca8d9519921dc4997ee01a4e1157a9d442e41", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -16883,7 +16883,8 @@ aarch64_vfp_is_call_or_return_candidate (machine_mode mode,\n \t      && ((alt = aapcs_vfp_sub_candidate (type, &new_mode, NULL))\n \t\t  != ag_count))\n \t    {\n-\t      char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n+\t      const char *url\n+\t\t= CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\";\n \t      gcc_assert (alt == -1);\n \t      last_reported_type_uid = uid;\n \t      /* Use TYPE_MAIN_VARIANT to strip any redundant const\n@@ -16898,7 +16899,6 @@ aarch64_vfp_is_call_or_return_candidate (machine_mode mode,\n \t\t\t\"type %qT when C++17 is enabled changed to match \"\n \t\t\t\"C++14 %{in GCC 10.1%}\",\n \t\t\tTYPE_MAIN_VARIANT (type), url);\n-\t      free (url);\n \t    }\n \n \t  if (is_ha != NULL) *is_ha = true;"}, {"sha": "b169250918c13c6eabf55146a79081514d171571", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -6414,7 +6414,8 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n \t      && ((alt = aapcs_vfp_sub_candidate (type, &new_mode, NULL))\n \t\t  != ag_count))\n \t    {\n-\t      char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n+\t      const char *url\n+\t\t= CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\";\n \t      gcc_assert (alt == -1);\n \t      last_reported_type_uid = uid;\n \t      /* Use TYPE_MAIN_VARIANT to strip any redundant const\n@@ -6429,7 +6430,6 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n \t\t\t\"type %qT when C++17 is enabled changed to match \"\n \t\t\t\"C++14 %{in GCC 10.1%}\",\n \t\t\tTYPE_MAIN_VARIANT (type), url);\n-\t      free (url);\n \t    }\n \t  *count = ag_count;\n \t}"}, {"sha": "7621d6f5278713b2e1eaf061bac90424021b5a8b", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -5748,8 +5748,8 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n \t\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n \t\t  if (uid != last_reported_type_uid)\n \t\t    {\n-\t\t      char *url\n-\t\t\t= get_changes_url (\"gcc-10/changes.html#empty_base\");\n+\t\t      const char *url\n+\t\t\t= CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\";\n \t\t      if (empty_base_seen & 1)\n \t\t\tinform (input_location,\n \t\t\t\t\"parameter passing for argument of type %qT \"\n@@ -5761,7 +5761,6 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n \t\t\t\t\"with %<[[no_unique_address]]%> members \"\n \t\t\t\t\"changed %{in GCC 10.1%}\", type, url);\n \t\t      last_reported_type_uid = uid;\n-\t\t      free (url);\n \t\t    }\n \t\t}\n \t      return true;"}, {"sha": "18332271ed7124d9145c967a09f8299ea95fc779", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -11960,7 +11960,7 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n       unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n-\t  char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n+\t  const char *url = CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\";\n \t  last_reported_type_uid = uid;\n \t  if (empty_base_seen & 1)\n \t    inform (input_location,\n@@ -11972,7 +11972,6 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n \t\t    \"parameter passing for argument of type %qT with \"\n \t\t    \"%<[[no_unique_address]]%> members changed \"\n \t\t    \"%{in GCC 10.1%}\", orig_type, url);\n-\t  free (url);\n \t}\n     }\n   return true;\n@@ -12038,7 +12037,7 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n       unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n-\t  char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n+\t  const char *url = CHANGES_ROOT_URL \"gcc-10/changes.html#empty_base\";\n \t  last_reported_type_uid = uid;\n \t  if (empty_base_seen & 1)\n \t    inform (input_location,\n@@ -12050,7 +12049,6 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n \t\t    \"parameter passing for argument of type %qT with \"\n \t\t    \"%<[[no_unique_address]]%> members changed \"\n \t\t    \"%{in GCC 10.1%}\", orig_type, url);\n-\t  free (url);\n \t}\n     }\n "}, {"sha": "f7030a2356fb93c0ff6d2858e5c6e747ef0a0269", "filename": "gcc/configure", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -819,8 +819,6 @@ accel_dir_suffix\n real_target_noncanonical\n enable_as_accelerator\n gnat_install_lib\n-CHANGES_ROOT_URL\n-DOCUMENTATION_ROOT_URL\n REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n PKGVERSION\n@@ -7851,15 +7849,19 @@ if test \"${with_documentation_root_url+set}\" = set; then :\n   withval=$with_documentation_root_url; case \"$withval\" in\n       yes) as_fn_error $? \"documentation root URL not specified\" \"$LINENO\" 5 ;;\n       no)  as_fn_error $? \"documentation root URL not specified\" \"$LINENO\" 5 ;;\n-      *)   DOCUMENTATION_ROOT_URL=\"$withval\"\n-\t   ;;\n+      */)  DOCUMENTATION_ROOT_URL=\"$withval\" ;;\n+      *)   as_fn_error $? \"documentation root URL does not end with /\" \"$LINENO\" 5 ;;\n      esac\n else\n   DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/\"\n \n fi\n \n \n+cat >>confdefs.h <<_ACEOF\n+#define DOCUMENTATION_ROOT_URL \"$DOCUMENTATION_ROOT_URL\"\n+_ACEOF\n+\n \n # Allow overriding the default URL for GCC changes\n \n@@ -7868,15 +7870,19 @@ if test \"${with_changes_root_url+set}\" = set; then :\n   withval=$with_changes_root_url; case \"$withval\" in\n       yes) as_fn_error $? \"changes root URL not specified\" \"$LINENO\" 5 ;;\n       no)  as_fn_error $? \"changes root URL not specified\" \"$LINENO\" 5 ;;\n-      *)   CHANGES_ROOT_URL=\"$withval\"\n-\t   ;;\n+      */)  CHANGES_ROOT_URL=\"$withval\" ;;\n+      *)   as_fn_error $? \"changes root URL does not end with /\" \"$LINENO\" 5 ;;\n      esac\n else\n   CHANGES_ROOT_URL=\"https://gcc.gnu.org/\"\n \n fi\n \n \n+cat >>confdefs.h <<_ACEOF\n+#define CHANGES_ROOT_URL \"$CHANGES_ROOT_URL\"\n+_ACEOF\n+\n \n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n@@ -19009,7 +19015,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19012 \"configure\"\n+#line 19018 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19115,7 +19121,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19118 \"configure\"\n+#line 19124 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "12297b7369ed93f1886f22af70efc26159c56d84", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -979,12 +979,13 @@ AC_ARG_WITH(documentation-root-url,\n     [case \"$withval\" in\n       yes) AC_MSG_ERROR([documentation root URL not specified]) ;;\n       no)  AC_MSG_ERROR([documentation root URL not specified]) ;;\n-      *)   DOCUMENTATION_ROOT_URL=\"$withval\"\n-\t   ;;\n+      */)  DOCUMENTATION_ROOT_URL=\"$withval\" ;;\n+      *)   AC_MSG_ERROR([documentation root URL does not end with /]) ;;\n      esac],\n      DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/\"\n )\n-AC_SUBST(DOCUMENTATION_ROOT_URL)\n+AC_DEFINE_UNQUOTED(DOCUMENTATION_ROOT_URL,\"$DOCUMENTATION_ROOT_URL\",\n+\t[Define to the root for documentation URLs.])\n \n # Allow overriding the default URL for GCC changes\n AC_ARG_WITH(changes-root-url,\n@@ -993,12 +994,13 @@ AC_ARG_WITH(changes-root-url,\n     [case \"$withval\" in\n       yes) AC_MSG_ERROR([changes root URL not specified]) ;;\n       no)  AC_MSG_ERROR([changes root URL not specified]) ;;\n-      *)   CHANGES_ROOT_URL=\"$withval\"\n-\t   ;;\n+      */)  CHANGES_ROOT_URL=\"$withval\" ;;\n+      *)   AC_MSG_ERROR([changes root URL does not end with /]) ;;\n      esac],\n      CHANGES_ROOT_URL=\"https://gcc.gnu.org/\"\n )\n-AC_SUBST(CHANGES_ROOT_URL)\n+AC_DEFINE_UNQUOTED(CHANGES_ROOT_URL,\"$CHANGES_ROOT_URL\",\n+\t[Define to the root for URLs about GCC changes.])\n \n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script."}, {"sha": "3c25a22cbb7b84649c44c9effaa0bf0a01d55eff", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -684,6 +684,19 @@ if you determine that they are not bugs in your modifications.\n \n The default value refers to the FSF's GCC bug tracker.\n \n+@item --with-documentation-root-url=@var{url}\n+Specify the URL root that contains GCC option documentation.  The @var{url}\n+should end with a @code{/} character.\n+\n+The default value is @uref{https://gcc.gnu.org/onlinedocs/,,https://gcc.gnu.org/onlinedocs/}.\n+\n+@item --with-changes-root-url=@var{url}\n+Specify the URL root that contains information about changes in GCC\n+releases like @code{gcc-@var{version}/changes.html}.\n+The @var{url} should end with a @code{/} character.\n+\n+The default value is @uref{https://gcc.gnu.org/,,https://gcc.gnu.org/}.\n+\n @end table\n \n @heading Target specification"}, {"sha": "c212a1a57dcfbdfb9cb419bfeaeb17aa9f23fdb0", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -3190,16 +3190,6 @@ get_option_url (diagnostic_context *, int option_index)\n     return NULL;\n }\n \n-/* Given \"gcc-10/changes.html#foobar\", return that URL under\n-   CHANGES_ROOT_URL (see --with-changes-root-url).\n-   The caller is responsible for freeing the returned string.  */\n-\n-char *\n-get_changes_url (const char *str)\n-{\n-  return concat (CHANGES_ROOT_URL, str, NULL);\n-}\n-\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "8f594b46e330b9ac5497035b93f19a39e2d4928c", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33a1eae25b8a8744db2fea72e739d64799ca61f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=e33a1eae25b8a8744db2fea72e739d64799ca61f", "patch": "@@ -464,7 +464,6 @@ extern void parse_options_from_collect_gcc_options (const char *, obstack *,\n \t\t\t\t\t\t    int *);\n \n extern void prepend_xassembler_to_collect_as_options (const char *, obstack *);\n-extern char *get_changes_url (const char *);\n \n /* Set OPTION in OPTS to VALUE if the option is not set in OPTS_SET.  */\n "}]}