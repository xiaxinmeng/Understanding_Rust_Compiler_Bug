{"sha": "cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MwN2RhMzNhZTljZjg2YzMwOGY2YTc4NThkN2Q4ZmFhNzNkNjNlMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-02-08T15:22:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-02-08T15:22:32Z"}, "message": "Enable isinf/isnan checks for all targets\n\n\tPR libstdc++/48891\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Enable isinf and isnan\n\tchecks for all targets except *-*-solaris2.* and ensure we find the\n\tlibc math.h header not our own.\n\t* configure: Regenerate.\n\nFrom-SVN: r233214", "tree": {"sha": "fdd4479f84dafab7923df3d8c5f4cdc7c72fbd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd4479f84dafab7923df3d8c5f4cdc7c72fbd36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5317b1be7eefe215ae67b8f65c8e7d8f54c6f2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5317b1be7eefe215ae67b8f65c8e7d8f54c6f2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5317b1be7eefe215ae67b8f65c8e7d8f54c6f2d2"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "1888702d19944c395d25186c7b332b878934b2cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "patch": "@@ -1,3 +1,11 @@\n+2016-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/48891\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Enable isinf and isnan\n+\tchecks for all targets except *-*-solaris2.* and ensure we find the\n+\tlibc math.h header not our own.\n+\t* configure: Regenerate.\n+\n 2016-02-05  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/abi/post/s390x-linux-gnu/32/baseline_symbols.txt (FUNC):"}, {"sha": "e667ccc741ba7257a3a4839eb5e9267a014b96ad", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "patch": "@@ -2215,20 +2215,21 @@ AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n       fi\n       AC_MSG_RESULT([$glibcxx_cv_math11_overload])\n       ;;\n-    *-*-*gnu* | *-*-aix* | *-*-hpux*)\n+    *)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)\n       # functions (instead of or as well as the C99 generic macros) then we\n       # can't define std::isinf(double) and std::isnan(double) in <cmath>\n       # and must use the ones from <math.h> instead.\n       AC_MSG_CHECKING([for obsolete isinf function in <math.h>])\n         AC_CACHE_VAL(glibcxx_cv_obsolete_isinf, [\n           AC_COMPILE_IFELSE([AC_LANG_SOURCE(\n-            [#include <math.h>\n+            [#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+             #include <math.h>\n              #undef isinf\n              namespace std {\n                using ::isinf;\n-               bool isinf(float);\n-               bool isinf(long double);\n+               constexpr bool isinf(float);\n+               constexpr bool isinf(long double);\n              }\n              using std::isinf;\n              bool b = isinf(0.0);"}, {"sha": "02bb312be0dc134e631a5f114ecc10002250c0b4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc07da33ae9cf86c308f6a7858d7d8faa73d63e1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cc07da33ae9cf86c308f6a7858d7d8faa73d63e1", "patch": "@@ -18266,7 +18266,7 @@ fi\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_overload\" >&5\n $as_echo \"$glibcxx_cv_math11_overload\" >&6; }\n       ;;\n-    *-*-*gnu* | *-*-aix* | *-*-hpux*)\n+    *)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)\n       # functions (instead of or as well as the C99 generic macros) then we\n       # can't define std::isinf(double) and std::isnan(double) in <cmath>\n@@ -18279,12 +18279,13 @@ else\n \n           cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#include <math.h>\n+#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+             #include <math.h>\n              #undef isinf\n              namespace std {\n                using ::isinf;\n-               bool isinf(float);\n-               bool isinf(long double);\n+               constexpr bool isinf(float);\n+               constexpr bool isinf(long double);\n              }\n              using std::isinf;\n              bool b = isinf(0.0);"}]}