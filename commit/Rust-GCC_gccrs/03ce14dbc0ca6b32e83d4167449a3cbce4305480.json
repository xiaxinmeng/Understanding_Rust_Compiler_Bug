{"sha": "03ce14dbc0ca6b32e83d4167449a3cbce4305480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjZTE0ZGJjMGNhNmIzMmU4M2Q0MTY3NDQ5YTNjYmNlNDMwNTQ4MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-24T01:55:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-24T01:55:11Z"}, "message": "cse.c (delete_trivially_dead_insns): Speed up by using NEXT_INSN and PREV_INSN directly instead of next_real_insn...\n\n\t* cse.c (delete_trivially_dead_insns): Speed up by using\n\tNEXT_INSN and PREV_INSN directly instead of next_real_insn and\n\tprev_real_insn.\n\nFrom-SVN: r95488", "tree": {"sha": "719c814a2550a91e693efdf9f7603e5d8e387c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/719c814a2550a91e693efdf9f7603e5d8e387c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ce14dbc0ca6b32e83d4167449a3cbce4305480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ce14dbc0ca6b32e83d4167449a3cbce4305480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ce14dbc0ca6b32e83d4167449a3cbce4305480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ce14dbc0ca6b32e83d4167449a3cbce4305480/comments", "author": null, "committer": null, "parents": [{"sha": "b86ba8a3efa78849fb43c627aa61764b642e14d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86ba8a3efa78849fb43c627aa61764b642e14d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86ba8a3efa78849fb43c627aa61764b642e14d1"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "99c91c271c73c4865d61bc7512e039f588a449f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ce14dbc0ca6b32e83d4167449a3cbce4305480/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ce14dbc0ca6b32e83d4167449a3cbce4305480/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03ce14dbc0ca6b32e83d4167449a3cbce4305480", "patch": "@@ -1,3 +1,9 @@\n+2005-02-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cse.c (delete_trivially_dead_insns): Speed up by using\n+\tNEXT_INSN and PREV_INSN directly instead of next_real_insn and\n+\tprev_real_insn.\n+\n 2005-02-24  Andrea Tarani  <andrea.tarani@gilbarco.com>\n \n \t* config/m68k/m68k.c (m68k_save_reg): Also save A5 for non-leaf"}, {"sha": "5bc6ce40c90825ffae736b69b77531773f9bea0a", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ce14dbc0ca6b32e83d4167449a3cbce4305480/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ce14dbc0ca6b32e83d4167449a3cbce4305480/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=03ce14dbc0ca6b32e83d4167449a3cbce4305480", "patch": "@@ -7284,8 +7284,9 @@ delete_trivially_dead_insns (rtx insns, int nreg)\n   timevar_push (TV_DELETE_TRIVIALLY_DEAD);\n   /* First count the number of times each register is used.  */\n   counts = xcalloc (nreg, sizeof (int));\n-  for (insn = next_real_insn (insns); insn; insn = next_real_insn (insn))\n-    count_reg_usage (insn, counts, 1);\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      count_reg_usage (insn, counts, 1);\n \n   /* Go from the last insn to the first and delete insns that only set unused\n      registers or copy a register to itself.  As we delete an insn, remove\n@@ -7294,15 +7295,13 @@ delete_trivially_dead_insns (rtx insns, int nreg)\n      The first jump optimization pass may leave a real insn as the last\n      insn in the function.   We must not skip that insn or we may end\n      up deleting code that is not really dead.  */\n-  insn = get_last_insn ();\n-  if (! INSN_P (insn))\n-    insn = prev_real_insn (insn);\n-\n-  for (; insn; insn = prev)\n+  for (insn = get_last_insn (); insn; insn = prev)\n     {\n       int live_insn = 0;\n \n-      prev = prev_real_insn (insn);\n+      prev = PREV_INSN (insn);\n+      if (!INSN_P (insn))\n+\tcontinue;\n \n       /* Don't delete any insns that are part of a libcall block unless\n \t we can delete the whole libcall block."}]}