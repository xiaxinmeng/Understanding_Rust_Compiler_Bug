{"sha": "e34ca162e700cb23aa7a247b394bfbf17135498b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0Y2ExNjJlNzAwY2IyM2FhN2EyNDdiMzk0YmZiZjE3MTM1NDk4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:05:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:05:53Z"}, "message": "[multiple changes]\n\n2009-04-20  Pascal Obry  <obry@adacore.com>\n\n\t* a-direct.adb (To_Lower_If_Case_Insensitive): Removed.\n\tRemove all calls to To_Lower_If_Case_Insensitive to preserve\n\tthe pathname original casing.\n\n2009-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* g-trasym.adb: Minor reformatting\n\n\t* s-os_lib.adb: Minor reformatting\n\n\t* sem.adb: Minor reformatting\n\tMinor code reorganization\n\n\t* sem_ch3.adb: Minor reformatting\n\n\t* sem_ch4.adb: Minor reformatting\n\n\t* sem_ch8.adb: Minor reformatting\n\n\t* sem_type.adb: Minor reformatting\n\nFrom-SVN: r146412", "tree": {"sha": "4c2aff5aa77d2398eadd8e5d221c3a6d9885b3a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2aff5aa77d2398eadd8e5d221c3a6d9885b3a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e34ca162e700cb23aa7a247b394bfbf17135498b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34ca162e700cb23aa7a247b394bfbf17135498b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34ca162e700cb23aa7a247b394bfbf17135498b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34ca162e700cb23aa7a247b394bfbf17135498b/comments", "author": null, "committer": null, "parents": [{"sha": "ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0"}], "stats": {"total": 238, "additions": 121, "deletions": 117}, "files": [{"sha": "28c42dad7c64db09c04bd658eda6932166da965c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -1,3 +1,26 @@\n+2009-04-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-direct.adb (To_Lower_If_Case_Insensitive): Removed.\n+\tRemove all calls to To_Lower_If_Case_Insensitive to preserve\n+\tthe pathname original casing.\n+\n+2009-04-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-trasym.adb: Minor reformatting\n+\n+\t* s-os_lib.adb: Minor reformatting\n+\n+\t* sem.adb: Minor reformatting\n+\tMinor code reorganization\n+\n+\t* sem_ch3.adb: Minor reformatting\n+\n+\t* sem_ch4.adb: Minor reformatting\n+\n+\t* sem_ch8.adb: Minor reformatting\n+\n+\t* sem_type.adb: Minor reformatting\n+\n 2009-04-20  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_disp.adb (Find_Dispatching_Type): For subprograms internally"}, {"sha": "723833cd1b2b66acb19ec5cee490a98e5f01c187", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 21, "deletions": 60, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -93,20 +93,15 @@ package body Ada.Directories is\n    --  Get the next entry in a directory, setting Entry_Fetched if successful\n    --  or resetting Is_Valid if not.\n \n-   procedure To_Lower_If_Case_Insensitive (S : in out String);\n-   --  Put S in lower case if file and path names are case-insensitive\n-\n    ---------------\n    -- Base_Name --\n    ---------------\n \n    function Base_Name (Name : String) return String is\n-      Simple : String := Simple_Name (Name);\n+      Simple : constant String := Simple_Name (Name);\n       --  Simple'First is guaranteed to be 1\n \n    begin\n-      To_Lower_If_Case_Insensitive (Simple);\n-\n       --  Look for the last dot in the file name and return the part of the\n       --  file name preceding this last dot. If the first dot is the first\n       --  character of the file name, the base name is the empty string.\n@@ -198,7 +193,6 @@ package body Ada.Directories is\n             Last := Last + Extension'Length;\n          end if;\n \n-         To_Lower_If_Case_Insensitive (Result (1 .. Last));\n          return Result (1 .. Last);\n       end if;\n    end Compose;\n@@ -287,7 +281,6 @@ package body Ada.Directories is\n                      return Containing_Directory (Current_Directory);\n \n                   else\n-                     To_Lower_If_Case_Insensitive (Result (1 .. Last));\n                      return Result (1 .. Last);\n                   end if;\n                end;\n@@ -448,11 +441,9 @@ package body Ada.Directories is\n       Local_Get_Current_Dir (Buffer'Address, Path_Len'Address);\n \n       declare\n-         Cur : String := Normalize_Pathname (Buffer (1 .. Path_Len));\n+         Cur : constant String := Normalize_Pathname (Buffer (1 .. Path_Len));\n \n       begin\n-         To_Lower_If_Case_Insensitive (Cur);\n-\n          if Cur'Length > 1 and then Cur (Cur'Last) = Dir_Separator then\n             return Cur (1 .. Cur'Last - 1);\n          else\n@@ -790,10 +781,9 @@ package body Ada.Directories is\n          --  Use System.OS_Lib.Normalize_Pathname\n \n          declare\n-            Value : String := Normalize_Pathname (Name);\n+            Value : constant String := Normalize_Pathname (Name);\n             subtype Result is String (1 .. Value'Length);\n          begin\n-            To_Lower_If_Case_Insensitive (Value);\n             return Result (Value);\n          end;\n       end if;\n@@ -1061,18 +1051,14 @@ package body Ada.Directories is\n \n    function Simple_Name (Name : String) return String is\n \n-      function Simple_Name_CI (Path : String) return String;\n-      --  This function does the job. The difference between Simple_Name_CI\n-      --  and Simple_Name (the parent function) is that the former is case\n-      --  sensitive, while the latter is not. Path and Suffix are adjusted\n-      --  appropriately before calling Simple_Name_CI under platforms where\n-      --  the file system is not case sensitive.\n+      function Simple_Name_Internal (Path : String) return String;\n+      --  This function does the job\n \n-      --------------------\n-      -- Simple_Name_CI --\n-      --------------------\n+      --------------------------\n+      -- Simple_Name_Internal --\n+      --------------------------\n \n-      function Simple_Name_CI (Path : String) return String is\n+      function Simple_Name_Internal (Path : String) return String is\n          Cut_Start : Natural :=\n                        Strings.Fixed.Index\n                          (Path, Dir_Seps, Going => Strings.Backward);\n@@ -1093,11 +1079,7 @@ package body Ada.Directories is\n          Cut_End := Path'Last;\n \n          Check_For_Standard_Dirs : declare\n-            Offset : constant Integer := Path'First - Name'First;\n-            BN     : constant String  :=\n-                       Name (Cut_Start - Offset .. Cut_End - Offset);\n-            --  Here we use Simple_Name.Name to keep the original casing\n-\n+            BN               : constant String := Path (Cut_Start .. Cut_End);\n             Has_Drive_Letter : constant Boolean :=\n                                  System.OS_Lib.Path_Separator /= ':';\n             --  If Path separator is not ':' then we are on a DOS based OS\n@@ -1120,7 +1102,7 @@ package body Ada.Directories is\n                return BN;\n             end if;\n          end Check_For_Standard_Dirs;\n-      end Simple_Name_CI;\n+      end Simple_Name_Internal;\n \n    --  Start of processing for Simple_Name\n \n@@ -1133,23 +1115,12 @@ package body Ada.Directories is\n       else\n          --  Build the value to return with lower bound 1\n \n-         if Is_Path_Name_Case_Sensitive then\n-            declare\n-               Value : constant String := Simple_Name_CI (Name);\n-               subtype Result is String (1 .. Value'Length);\n-            begin\n-               return Result (Value);\n-            end;\n-\n-         else\n-            declare\n-               Value : constant String :=\n-                         Simple_Name_CI (Characters.Handling.To_Lower (Name));\n-               subtype Result is String (1 .. Value'Length);\n-            begin\n-               return Result (Value);\n-            end;\n-         end if;\n+         declare\n+            Value : constant String := Simple_Name_Internal (Name);\n+            subtype Result is String (1 .. Value'Length);\n+         begin\n+            return Result (Value);\n+         end;\n       end if;\n    end Simple_Name;\n \n@@ -1233,7 +1204,10 @@ package body Ada.Directories is\n       --  Check the pattern\n \n       begin\n-         Pat := Compile (Pattern, Glob => True);\n+         Pat := Compile\n+           (Pattern,\n+            Glob           => True,\n+            Case_Sensitive => Is_Path_Name_Case_Sensitive);\n       exception\n          when Error_In_Regexp =>\n             Free (Search.Value);\n@@ -1264,17 +1238,4 @@ package body Ada.Directories is\n       Search.Value.Is_Valid := True;\n    end Start_Search;\n \n-   ----------------------------------\n-   -- To_Lower_If_Case_Insensitive --\n-   ----------------------------------\n-\n-   procedure To_Lower_If_Case_Insensitive (S : in out String) is\n-   begin\n-      if not Is_Path_Name_Case_Sensitive then\n-         for J in S'Range loop\n-            S (J) := To_Lower (S (J));\n-         end loop;\n-      end if;\n-   end To_Lower_If_Case_Insensitive;\n-\n end Ada.Directories;"}, {"sha": "a402d57be8b6f7cc20b32431884130bd10e667bf", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -77,7 +77,7 @@ package body GNAT.Traceback.Symbolic is\n       --  This is the procedure version of the Ada aware addr2line.  It places\n       --  in BUF a string representing the symbolic translation of the N_ADDRS\n       --  raw addresses provided in ADDRS, looked up in debug information from\n-      --  FILENAME.  LEN points to an integer which contains the size of the\n+      --  FILENAME. LEN points to an integer which contains the size of the\n       --  BUF buffer at input and the result length at output.\n       --\n       --  This procedure is provided by libaddr2line on targets that support"}, {"sha": "e24a02e8895216ed57a3a0fe6edb990f41cb760a", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -1833,7 +1833,8 @@ package body System.OS_Lib is\n \n                --  By default, the drive letter on Windows is in upper case\n \n-               if On_Windows and then Path_Len >= 2\n+               if On_Windows\n+                 and then Path_Len >= 2\n                  and then Buffer (2) = ':'\n                then\n                   System.Case_Util.To_Upper (Buffer (1 .. 1));"}, {"sha": "d1d3c91e9191b815a28fb8a4e0e231ad3d2005e8", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 58, "deletions": 41, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -83,8 +83,8 @@ package body Sem is\n \n    procedure Write_Unit_Info\n      (Unit_Num : Unit_Number_Type;\n-      Item : Node_Id;\n-      Prefix : String := \"\");\n+      Item     : Node_Id;\n+      Prefix   : String := \"\");\n    --  Print out debugging information about the unit\n \n    -------------\n@@ -1359,10 +1359,15 @@ package body Sem is\n    --  Start of processing for Semantics\n \n    begin\n-      if Debug_Unit_Walk and then Already_Analyzed then\n-         Write_Str (\"(done)\");\n-         Write_Unit_Info (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit),\n-                          Prefix => \"--> \");\n+      if Debug_Unit_Walk then\n+         if Already_Analyzed then\n+            Write_Str (\"(done)\");\n+         end if;\n+\n+         Write_Unit_Info\n+           (Get_Cunit_Unit_Number (Comp_Unit),\n+            Unit (Comp_Unit),\n+            Prefix => \"--> \");\n          Indent;\n       end if;\n \n@@ -1378,11 +1383,11 @@ package body Sem is\n       --  Cleaner might be to do the kludge at the point of excluding the\n       --  pragma (do not exclude for renamings ???)\n \n-      GNAT_Mode :=\n-        GNAT_Mode\n-          or else Is_Predefined_File_Name\n-                    (Unit_File_Name (Current_Sem_Unit),\n-                     Renamings_Included => False);\n+      if Is_Predefined_File_Name\n+           (Unit_File_Name (Current_Sem_Unit), Renamings_Included => False)\n+      then\n+         GNAT_Mode := True;\n+      end if;\n \n       if Generic_Main then\n          Expander_Mode_Save_And_Set (False);\n@@ -1416,8 +1421,8 @@ package body Sem is\n          end if;\n \n          --  Do analysis, and then append the compilation unit onto the\n-         --  Comp_Unit_List, if appropriate. This is done after analysis, so if\n-         --  this unit depends on some others, they have already been\n+         --  Comp_Unit_List, if appropriate. This is done after analysis, so\n+         --  if this unit depends on some others, they have already been\n          --  appended. We ignore bodies, except for the main unit itself. We\n          --  have also to guard against ill-formed subunits that have an\n          --  improper context.\n@@ -1428,15 +1433,17 @@ package body Sem is\n             null;\n \n          elsif Present (Comp_Unit)\n-           and then  Nkind (Unit (Comp_Unit)) in N_Proper_Body\n+           and then Nkind (Unit (Comp_Unit)) in N_Proper_Body\n            and then not In_Extended_Main_Source_Unit (Comp_Unit)\n          then\n             null;\n \n          else\n             pragma Assert (not Ignore_Comp_Units);\n \n-            if No (Comp_Unit_List) then  --  Initialize if first time\n+            --  Initialize if first time\n+\n+            if No (Comp_Unit_List) then\n                Comp_Unit_List := New_Elmt_List;\n             end if;\n \n@@ -1474,11 +1481,17 @@ package body Sem is\n       Restore_Opt_Config_Switches (Save_Config_Switches);\n       Expander_Mode_Restore;\n \n-      if Debug_Unit_Walk and then Already_Analyzed then\n+      if Debug_Unit_Walk then\n          Outdent;\n-         Write_Str (\"(done)\");\n-         Write_Unit_Info (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit),\n-                          Prefix => \"<-- \");\n+\n+         if Already_Analyzed then\n+            Write_Str (\"(done)\");\n+         end if;\n+\n+         Write_Unit_Info\n+           (Get_Cunit_Unit_Number (Comp_Unit),\n+            Unit (Comp_Unit),\n+            Prefix => \"<-- \");\n       end if;\n    end Semantics;\n \n@@ -1545,11 +1558,15 @@ package body Sem is\n \n             declare\n                Unit_Num : constant Unit_Number_Type :=\n-                 Get_Cunit_Unit_Number (CU);\n+                            Get_Cunit_Unit_Number (CU);\n             begin\n-               Write_Unit_Info (Unit_Num, Item);\n+               if Debug_Unit_Walk then\n+                  Write_Unit_Info (Unit_Num, Item);\n+               end if;\n+\n+               --  ??? why is this commented out\n+               --  ???pragma Assert (not Seen (Unit_Num));\n \n-               pragma Assert (not Seen (Unit_Num));\n                Seen (Unit_Num) := True;\n             end;\n \n@@ -1649,11 +1666,13 @@ package body Sem is\n             Write_Line (\"Ignored units:\");\n \n             Indent;\n+\n             for Unit_Num in Seen'Range loop\n                if not Seen (Unit_Num) then\n                   Write_Unit_Info (Unit_Num, Unit (Cunit (Unit_Num)));\n                end if;\n             end loop;\n+\n             Outdent;\n          end if;\n       end if;\n@@ -1670,29 +1689,27 @@ package body Sem is\n \n    procedure Write_Unit_Info\n      (Unit_Num : Unit_Number_Type;\n-      Item : Node_Id;\n-      Prefix : String := \"\")\n+      Item     : Node_Id;\n+      Prefix   : String := \"\")\n    is\n    begin\n-      if Debug_Unit_Walk then\n-         Write_Str (Prefix);\n-         Write_Unit_Name (Unit_Name (Unit_Num));\n-         Write_Str (\", unit \");\n-         Write_Int (Int (Unit_Num));\n-         Write_Str (\", \");\n-         Write_Int (Int (Item));\n+      Write_Str (Prefix);\n+      Write_Unit_Name (Unit_Name (Unit_Num));\n+      Write_Str (\", unit \");\n+      Write_Int (Int (Unit_Num));\n+      Write_Str (\", \");\n+      Write_Int (Int (Item));\n+      Write_Str (\"=\");\n+      Write_Str (Node_Kind'Image (Nkind (Item)));\n+\n+      if Item /= Original_Node (Item) then\n+         Write_Str (\", orig = \");\n+         Write_Int (Int (Original_Node (Item)));\n          Write_Str (\"=\");\n-         Write_Str (Node_Kind'Image (Nkind (Item)));\n-\n-         if Item /= Original_Node (Item) then\n-            Write_Str (\", orig = \");\n-            Write_Int (Int (Original_Node (Item)));\n-            Write_Str (\"=\");\n-            Write_Str (Node_Kind'Image (Nkind (Original_Node (Item))));\n-         end if;\n-\n-         Write_Eol;\n+         Write_Str (Node_Kind'Image (Nkind (Original_Node (Item))));\n       end if;\n+\n+      Write_Eol;\n    end Write_Unit_Info;\n \n end Sem;"}, {"sha": "a7ffd8926484d18205331c8b34cc7324bdcb95d5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -5922,9 +5922,9 @@ package body Sem_Ch3 is\n             --  This is the unusual case where a type completed by a private\n             --  derivation occurs within a package nested in a child unit, and\n             --  the parent is declared in an ancestor. In this case, the full\n-            --  view of the parent type will become visible in the body of the\n-            --  enclosing child, and only then will the current type be\n-            --   possibly non-private. We build a underlying full view that\n+            --  view of the parent type will become visible in the body of\n+            --  the enclosing child, and only then will the current type be\n+            --  possibly non-private. We build a underlying full view that\n             --  will be installed when the enclosing child body is compiled.\n \n             Full_Der :="}, {"sha": "43c86e57037fe45988031ac618a4aa2c874a8d2c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -5874,7 +5874,6 @@ package body Sem_Ch4 is\n             begin\n                Actual := Next (First_Actual (Call));\n                Index  := First_Index (Arr_Type);\n-\n                while Present (Actual) and then Present (Index) loop\n                   if not Has_Compatible_Type (Actual, Etype (Index)) then\n                      Arr_Type := Empty;"}, {"sha": "097da0c173f73206e502d2636bf2932593b3e89b", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -788,7 +788,7 @@ package body Sem_Ch8 is\n                I    : Interp_Index;\n                It   : Interp;\n                Typ  : Entity_Id := Empty;\n-               Seen : Boolean := False;\n+               Seen : Boolean   := False;\n \n             begin\n                Get_First_Interp (Nam, I, It);\n@@ -799,8 +799,9 @@ package body Sem_Ch8 is\n \n                   if Ekind (It.Typ) = Ekind (T) then\n                      if Ekind (T) = E_Anonymous_Access_Subprogram_Type\n-                       and then Type_Conformant\n-                         (Designated_Type (T), Designated_Type (It.Typ))\n+                       and then\n+                         Type_Conformant\n+                           (Designated_Type (T), Designated_Type (It.Typ))\n                      then\n                         if not Seen then\n                            Seen := True;\n@@ -810,8 +811,8 @@ package body Sem_Ch8 is\n                         end if;\n \n                      elsif Ekind (T) = E_Anonymous_Access_Type\n-                       and then Covers\n-                         (Designated_Type (T), Designated_Type (It.Typ))\n+                       and then\n+                         Covers (Designated_Type (T), Designated_Type (It.Typ))\n                      then\n                         if not Seen then\n                            Seen := True;"}, {"sha": "f9a4f1c4d1f146fc15218394db5f9a805f86e79d", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34ca162e700cb23aa7a247b394bfbf17135498b/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=e34ca162e700cb23aa7a247b394bfbf17135498b", "patch": "@@ -1688,26 +1688,28 @@ package body Sem_Type is\n         and then Present (Access_Definition (Parent (N)))\n       then\n          if Ekind (It1.Typ) = E_Anonymous_Access_Type\n-           or else Ekind (It1.Typ) = E_Anonymous_Access_Subprogram_Type\n+              or else\n+            Ekind (It1.Typ) = E_Anonymous_Access_Subprogram_Type\n          then\n             if Ekind (It2.Typ) = Ekind (It1.Typ) then\n \n                --  True ambiguity\n \n                return No_Interp;\n+\n             else\n                return It1;\n             end if;\n \n          elsif Ekind (It2.Typ) = E_Anonymous_Access_Type\n-           or else Ekind (It2.Typ) = E_Anonymous_Access_Subprogram_Type\n+                 or else\n+               Ekind (It2.Typ) = E_Anonymous_Access_Subprogram_Type\n          then\n             return It2;\n \n-         else\n-\n-            --  No legal interpretation.\n+         --  No legal interpretation\n \n+         else\n             return No_Interp;\n          end if;\n "}]}