{"sha": "23f95cb77ab469d83f9fcc35417a6c66f823cf92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmOTVjYjc3YWI0NjlkODNmOWZjYzM1NDE3YTZjNjZmODIzY2Y5Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-03-15T17:54:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-03-15T17:54:40Z"}, "message": "i386: Don't generate alias for function return thunk\n\nFunction return thunks shouldn't be aliased to indirect branch thunks\nsince indirect branch thunks are placed in COMDAT section and a COMDAT\nsection with indirect branch may not have function return thunk.  This\npatch generates function return thunks directly.\n\ngcc/\n\n\tPR target/84574\n\t* config/i386/i386.c (indirect_thunk_needed): Update comments.\n\t(indirect_thunk_bnd_needed): Likewise.\n\t(indirect_thunks_used): Likewise.\n\t(indirect_thunks_bnd_used): Likewise.\n\t(indirect_return_needed): New.\n\t(indirect_return_bnd_needed): Likewise.\n\t(output_indirect_thunk_function): Add a bool argument for\n\tfunction return.\n\t(output_indirect_thunk_function): Don't generate alias for\n\tfunction return thunk.\n\t(ix86_code_end): Call output_indirect_thunk_function to generate\n\tfunction return thunks.\n\t(ix86_output_function_return): Set indirect_return_bnd_needed\n\tand indirect_return_needed instead of indirect_thunk_bnd_needed\n\tand indirect_thunk_needed.\n\ngcc/testsuite/\n\n\tPR target/84574\n\t* gcc.target/i386/ret-thunk-9.c: Expect __x86_return_thunk\n\tlabel instead of __x86_indirect_thunk label.\n\nFrom-SVN: r258569", "tree": {"sha": "a8229da1eb51aaa17f500762fbad39c6fb9611ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8229da1eb51aaa17f500762fbad39c6fb9611ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f95cb77ab469d83f9fcc35417a6c66f823cf92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f95cb77ab469d83f9fcc35417a6c66f823cf92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f95cb77ab469d83f9fcc35417a6c66f823cf92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f95cb77ab469d83f9fcc35417a6c66f823cf92/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a5a49b034eed5373f6968c99bda1827f1479580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5a49b034eed5373f6968c99bda1827f1479580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5a49b034eed5373f6968c99bda1827f1479580"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "1d0ab4e765eccd754d32aec9532494d9b92e6158", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23f95cb77ab469d83f9fcc35417a6c66f823cf92", "patch": "@@ -1,3 +1,22 @@\n+2018-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84574\n+\t* config/i386/i386.c (indirect_thunk_needed): Update comments.\n+\t(indirect_thunk_bnd_needed): Likewise.\n+\t(indirect_thunks_used): Likewise.\n+\t(indirect_thunks_bnd_used): Likewise.\n+\t(indirect_return_needed): New.\n+\t(indirect_return_bnd_needed): Likewise.\n+\t(output_indirect_thunk_function): Add a bool argument for\n+\tfunction return.\n+\t(output_indirect_thunk_function): Don't generate alias for\n+\tfunction return thunk.\n+\t(ix86_code_end): Call output_indirect_thunk_function to generate\n+\tfunction return thunks.\n+\t(ix86_output_function_return): Set indirect_return_bnd_needed\n+\tand indirect_return_needed instead of indirect_thunk_bnd_needed\n+\tand indirect_thunk_needed.\n+\n 2018-03-15  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* config/i386/sgxintrin.h (_enclv_u32): New intrinsic."}, {"sha": "00668b4413931a791611eecee4a3da548420f6e4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 60, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=23f95cb77ab469d83f9fcc35417a6c66f823cf92", "patch": "@@ -10819,19 +10819,23 @@ ix86_setup_frame_addresses (void)\n    labels in call and return thunks.  */\n static int indirectlabelno;\n \n-/* True if call and return thunk functions are needed.  */\n+/* True if call thunk function is needed.  */\n static bool indirect_thunk_needed = false;\n-/* True if call and return thunk functions with the BND prefix are\n-   needed.  */\n+/* True if call thunk function with the BND prefix is needed.  */\n static bool indirect_thunk_bnd_needed = false;\n \n /* Bit masks of integer registers, which contain branch target, used\n-   by call and return thunks functions.  */\n+   by call thunk functions.  */\n static int indirect_thunks_used;\n /* Bit masks of integer registers, which contain branch target, used\n-   by call and return thunks functions with the BND prefix.  */\n+   by call thunk functions with the BND prefix.  */\n static int indirect_thunks_bnd_used;\n \n+/* True if return thunk function is needed.  */\n+static bool indirect_return_needed = false;\n+/* True if return thunk function with the BND prefix is needed.  */\n+static bool indirect_return_bnd_needed = false;\n+\n /* True if return thunk function via CX is needed.  */\n static bool indirect_return_via_cx;\n /* True if return thunk function via CX with the BND prefix is\n@@ -11027,17 +11031,18 @@ output_indirect_thunk (enum indirect_thunk_prefix need_prefix,\n /* Output a funtion with a call and return thunk for indirect branch.\n    If BND_P is true, the BND prefix is needed.  If REGNO != UNVALID_REGNUM,\n    the function address is in REGNO.  Otherwise, the function address is\n-   on the top of stack.  */\n+   on the top of stack.  Thunk is used for function return if RET_P is\n+   true.  */\n \n static void\n output_indirect_thunk_function (enum indirect_thunk_prefix need_prefix,\n-\t\t\t\tunsigned int regno)\n+\t\t\t\tunsigned int regno, bool ret_p)\n {\n   char name[32];\n   tree decl;\n \n   /* Create __x86_indirect_thunk/__x86_indirect_thunk_bnd.  */\n-  indirect_thunk_name (name, regno, need_prefix, false);\n+  indirect_thunk_name (name, regno, need_prefix, ret_p);\n   decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n \t\t     get_identifier (name),\n \t\t     build_function_type_list (void_type_node, NULL_TREE));\n@@ -11080,50 +11085,6 @@ output_indirect_thunk_function (enum indirect_thunk_prefix need_prefix,\n \tASM_OUTPUT_LABEL (asm_out_file, name);\n       }\n \n-  /* Create alias for __x86_return_thunk/__x86_return_thunk_bnd or\n-     __x86_return_thunk_ecx/__x86_return_thunk_ecx_bnd.  */\n-  bool need_alias;\n-  if (regno == INVALID_REGNUM)\n-    need_alias = true;\n-  else if (regno == CX_REG)\n-    {\n-      if (need_prefix == indirect_thunk_prefix_bnd)\n-\tneed_alias = indirect_return_via_cx_bnd;\n-      else\n-\tneed_alias = indirect_return_via_cx;\n-    }\n-  else\n-    need_alias = false;\n-\n-  if (need_alias)\n-    {\n-      char alias[32];\n-\n-      indirect_thunk_name (alias, regno, need_prefix, true);\n-#if TARGET_MACHO\n-      if (TARGET_MACHO)\n-\t{\n-\t  fputs (\"\\t.weak_definition\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, alias);\n-\t  fputs (\"\\n\\t.private_extern\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, alias);\n-\t  putc ('\\n', asm_out_file);\n-\t  ASM_OUTPUT_LABEL (asm_out_file, alias);\n-\t}\n-#else\n-      ASM_OUTPUT_DEF (asm_out_file, alias, name);\n-      if (USE_HIDDEN_LINKONCE)\n-\t{\n-\t  fputs (\"\\t.globl\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, alias);\n-\t  putc ('\\n', asm_out_file);\n-\t  fputs (\"\\t.hidden\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, alias);\n-\t  putc ('\\n', asm_out_file);\n-\t}\n-#endif\n-    }\n-\n   DECL_INITIAL (decl) = make_node (BLOCK);\n   current_function_decl = decl;\n   allocate_struct_function (decl, false);\n@@ -11170,23 +11131,37 @@ ix86_code_end (void)\n   rtx xops[2];\n   unsigned int regno;\n \n+  if (indirect_return_needed)\n+    output_indirect_thunk_function (indirect_thunk_prefix_none,\n+\t\t\t\t    INVALID_REGNUM, true);\n+  if (indirect_return_bnd_needed)\n+    output_indirect_thunk_function (indirect_thunk_prefix_bnd,\n+\t\t\t\t    INVALID_REGNUM, true);\n+\n+  if (indirect_return_via_cx)\n+    output_indirect_thunk_function (indirect_thunk_prefix_none,\n+\t\t\t\t    CX_REG, true);\n+  if (indirect_return_via_cx_bnd)\n+    output_indirect_thunk_function (indirect_thunk_prefix_bnd,\n+\t\t\t\t    CX_REG, true);\n+\n   if (indirect_thunk_needed)\n     output_indirect_thunk_function (indirect_thunk_prefix_none,\n-\t\t\t\t    INVALID_REGNUM);\n+\t\t\t\t    INVALID_REGNUM, false);\n   if (indirect_thunk_bnd_needed)\n     output_indirect_thunk_function (indirect_thunk_prefix_bnd,\n-\t\t\t\t    INVALID_REGNUM);\n+\t\t\t\t    INVALID_REGNUM, false);\n \n   for (regno = FIRST_REX_INT_REG; regno <= LAST_REX_INT_REG; regno++)\n     {\n       unsigned int i = regno - FIRST_REX_INT_REG + LAST_INT_REG + 1;\n       if ((indirect_thunks_used & (1 << i)))\n \toutput_indirect_thunk_function (indirect_thunk_prefix_none,\n-\t\t\t\t\tregno);\n+\t\t\t\t\tregno, false);\n \n       if ((indirect_thunks_bnd_used & (1 << i)))\n \toutput_indirect_thunk_function (indirect_thunk_prefix_bnd,\n-\t\t\t\t\tregno);\n+\t\t\t\t\tregno, false);\n     }\n \n   for (regno = FIRST_INT_REG; regno <= LAST_INT_REG; regno++)\n@@ -11196,11 +11171,11 @@ ix86_code_end (void)\n \n       if ((indirect_thunks_used & (1 << regno)))\n \toutput_indirect_thunk_function (indirect_thunk_prefix_none,\n-\t\t\t\t\tregno);\n+\t\t\t\t\tregno, false);\n \n       if ((indirect_thunks_bnd_used & (1 << regno)))\n \toutput_indirect_thunk_function (indirect_thunk_prefix_bnd,\n-\t\t\t\t\tregno);\n+\t\t\t\t\tregno, false);\n \n       if (!(pic_labels_used & (1 << regno)))\n \tcontinue;\n@@ -29060,12 +29035,12 @@ ix86_output_function_return (bool long_p)\n \t\t\t       true);\n \t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    {\n-\t      indirect_thunk_bnd_needed |= need_thunk;\n+\t      indirect_return_bnd_needed |= need_thunk;\n \t      fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n \t    }\n \t  else\n \t    {\n-\t      indirect_thunk_needed |= need_thunk;\n+\t      indirect_return_needed |= need_thunk;\n \t      fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n \t    }\n \t}"}, {"sha": "4b42ab735085311cb8cee13f4c3686ce7a4952c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23f95cb77ab469d83f9fcc35417a6c66f823cf92", "patch": "@@ -1,3 +1,9 @@\n+2018-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84574\n+\t* gcc.target/i386/ret-thunk-9.c: Expect __x86_return_thunk\n+\tlabel instead of __x86_indirect_thunk label.\n+\n 2018-03-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84222"}, {"sha": "819671af933cca66969bfd51bffec29d07263c16", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f95cb77ab469d83f9fcc35417a6c66f823cf92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c?ref=23f95cb77ab469d83f9fcc35417a6c66f823cf92", "patch": "@@ -13,7 +13,7 @@ foo (void)\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n /* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n /* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"__x86_indirect_thunk:\" } } */\n+/* { dg-final { scan-assembler \"__x86_return_thunk:\" } } */\n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*_?bar\" { target *-*-linux* } } } */\n /* { dg-final { scan-assembler-times {\\tpause} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlfence} 2 } } */"}]}