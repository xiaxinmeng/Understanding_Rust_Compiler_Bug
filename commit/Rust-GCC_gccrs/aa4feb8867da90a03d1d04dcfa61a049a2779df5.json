{"sha": "aa4feb8867da90a03d1d04dcfa61a049a2779df5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0ZmViODg2N2RhOTBhMDNkMWQwNGRjZmE2MWEwNDlhMjc3OWRmNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T12:47:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T17:46:04Z"}, "message": "Raw pointer support\n\nThis adds the initial support for raw pointers. Pointers rely on coercion\nrules to be able to coerce the raw fat pointers from a borrow expression\ninto a normal raw pointer.\n\nFixes #124", "tree": {"sha": "b108c383397dc0bf36153c6eabdebe62d42a20e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b108c383397dc0bf36153c6eabdebe62d42a20e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4feb8867da90a03d1d04dcfa61a049a2779df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4feb8867da90a03d1d04dcfa61a049a2779df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4feb8867da90a03d1d04dcfa61a049a2779df5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4feb8867da90a03d1d04dcfa61a049a2779df5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02713d245aaffd45d8daaf8c914b1dda5baa6eb4"}], "stats": {"total": 489, "additions": 448, "deletions": 41}, "files": [{"sha": "bb4f0abbbf9e234febf81868db659ab49f7b31dc", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -536,10 +536,29 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   {\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base ());\n-    translated = ctx->get_backend ()->reference_type (base_compiled_type);\n-    if (!type.is_mutable ())\n+    if (type.is_mutable ())\n       {\n-\ttranslated = ctx->get_backend ()->immutable_type (translated);\n+\ttranslated = ctx->get_backend ()->reference_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = ctx->get_backend ()->immutable_type (base_compiled_type);\n+\ttranslated = ctx->get_backend ()->reference_type (base);\n+      }\n+  }\n+\n+  void visit (TyTy::PointerType &type) override\n+  {\n+    Btype *base_compiled_type\n+      = TyTyResolveCompile::compile (ctx, type.get_base ());\n+    if (type.is_mutable ())\n+      {\n+\ttranslated = ctx->get_backend ()->pointer_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = ctx->get_backend ()->immutable_type (base_compiled_type);\n+\ttranslated = ctx->get_backend ()->pointer_type (base);\n       }\n   }\n "}, {"sha": "2d0856ddde44ad3a9fa536314459c40332e98216", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -62,6 +62,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }"}, {"sha": "efaf9db3a2048db30a405c6c40c17eddcd653a62", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -229,6 +229,27 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n+  void visit (AST::RawPointerType &type) override\n+  {\n+    HIR::Type *base_type\n+      = ASTLoweringType::translate (type.get_type_pointed_to ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated\n+      = new HIR::RawPointerType (mapping,\n+\t\t\t\t type.get_pointer_type ()\n+\t\t\t\t   == AST::RawPointerType::PointerType::MUT,\n+\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n+\t\t\t\t type.get_locus ());\n+\n+    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+  }\n+\n   void visit (AST::InferredType &type) override\n   {\n     auto crate_num = mappings->get_current_crate ();"}, {"sha": "86664d39175b7f7a79079319a2081cb10b02d2c2", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -2806,23 +2806,8 @@ ReferenceType::as_string () const\n std::string\n RawPointerType::as_string () const\n {\n-  std::string str (\"*\");\n-\n-  switch (pointer_type)\n-    {\n-    case MUT:\n-      str += \"mut \";\n-      break;\n-    case CONST:\n-      str += \"const \";\n-      break;\n-    default:\n-      return \"ERROR_MARK_STRING - unknown pointer type in raw pointer type\";\n-    }\n-\n-  str += type->as_string ();\n-\n-  return str;\n+  return std::string (\"*\") + (is_mut () ? \"mut \" : \"const \")\n+\t + type->as_string ();\n }\n \n std::string"}, {"sha": "3cb4be138dc3067c33b59e37f0a17365d5146d0d", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -446,41 +446,31 @@ class NeverType : public TypeNoBounds\n // A type consisting of a pointer without safety or liveness guarantees\n class RawPointerType : public TypeNoBounds\n {\n-public:\n-  enum PointerType\n-  {\n-    MUT,\n-    CONST\n-  };\n-\n private:\n-  PointerType pointer_type;\n-  std::unique_ptr<TypeNoBounds> type;\n+  bool is_mutable;\n+  std::unique_ptr<Type> type;\n   Location locus;\n \n public:\n-  // Returns whether the pointer is mutable or constant.\n-  PointerType get_pointer_type () const { return pointer_type; }\n-\n   // Constructor requires pointer for polymorphism reasons\n-  RawPointerType (Analysis::NodeMapping mappings, PointerType pointer_type,\n-\t\t  std::unique_ptr<TypeNoBounds> type_no_bounds, Location locus)\n-    : TypeNoBounds (mappings), pointer_type (pointer_type),\n-      type (std::move (type_no_bounds)), locus (locus)\n+  RawPointerType (Analysis::NodeMapping mappings, bool is_mutable,\n+\t\t  std::unique_ptr<Type> type, Location locus)\n+    : TypeNoBounds (mappings), is_mutable (is_mutable), type (std::move (type)),\n+      locus (locus)\n   {}\n \n   // Copy constructor calls custom polymorphic clone function\n   RawPointerType (RawPointerType const &other)\n-    : TypeNoBounds (other.mappings), pointer_type (other.pointer_type),\n-      type (other.type->clone_type_no_bounds ()), locus (other.locus)\n+    : TypeNoBounds (other.mappings), is_mutable (other.is_mutable),\n+      type (other.type->clone_type ()), locus (other.locus)\n   {}\n \n   // overload assignment operator to use custom clone method\n   RawPointerType &operator= (RawPointerType const &other)\n   {\n     mappings = other.mappings;\n-    pointer_type = other.pointer_type;\n-    type = other.type->clone_type_no_bounds ();\n+    is_mutable = other.is_mutable;\n+    type = other.type->clone_type ();\n     locus = other.locus;\n     return *this;\n   }\n@@ -495,6 +485,14 @@ class RawPointerType : public TypeNoBounds\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Type> &get_type () { return type; }\n+\n+  bool is_mut () const { return is_mutable; }\n+\n+  bool is_const () const { return !is_mutable; }\n+\n+  std::unique_ptr<Type> &get_base_type () { return type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "d826d683e93417af5d22829e419fa0baa8ae36db", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -281,6 +281,11 @@ class ResolveType : public ResolverBase\n \n   void visit (AST::InferredType &type) override { ok = true; }\n \n+  void visit (AST::RawPointerType &type) override\n+  {\n+    type.get_type_pointed_to ()->accept_vis (*this);\n+  }\n+\n private:\n   ResolveType (NodeId parent, bool canonicalize_type_with_generics)\n     : ResolverBase (parent),"}, {"sha": "f6c66163fc18a6030f6b4577ab1e641d3ab2f466", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -45,6 +45,8 @@ class ConstFoldType : public TyTy::TyVisitor\n \n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }"}, {"sha": "0f75c5405a11e9235df1da09184451bb4382ea77", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -194,6 +194,15 @@ class TypeCheckType : public TypeCheckBase\n \t\t\t\t\t  type.get_has_mut ());\n   }\n \n+  void visit (HIR::RawPointerType &type) override\n+  {\n+    TyTy::BaseType *base\n+      = TypeCheckType::Resolve (type.get_base_type ().get ());\n+    translated\n+      = new TyTy::PointerType (type.get_mappings ().get_hirid (),\n+\t\t\t       TyTy::TyVar (base->get_ref ()), type.is_mut ());\n+  }\n+\n   void visit (HIR::InferredType &type) override\n   {\n     translated = new TyTy::InferType (type.get_mappings ().get_hirid (),"}, {"sha": "3730faa61a09f3608f5bd411a139765624ef6321", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -103,6 +103,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n@@ -165,6 +166,11 @@ class SubstMapperInternal : public TyTy::TyVisitor\n     resolved = type.handle_substitions (mappings);\n   }\n \n+  void visit (TyTy::PointerType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n   void visit (TyTy::ParamType &type) override\n   {\n     resolved = type.handle_substitions (mappings);\n@@ -237,6 +243,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n@@ -286,6 +293,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }"}, {"sha": "636d40b28ed933f963cd35f6e1ea130276e652d2", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -51,6 +51,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n   void visit (CharType &type) override { gcc_unreachable (); }\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n+  void visit (PointerType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n@@ -100,6 +101,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ADTType &type) override { gcc_unreachable (); };\n   void visit (CharType &type) override { gcc_unreachable (); }\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n+  void visit (PointerType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }"}, {"sha": "049a4b76e1578dcb87e2704816b0908687ad2691", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -289,6 +289,22 @@ class BaseCmp : public TyConstVisitor\n       }\n   }\n \n+  virtual void visit (const PointerType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n   virtual void visit (const StrType &type) override\n   {\n     ok = false;\n@@ -542,7 +558,19 @@ class InferCmp : public BaseCmp\n   }\n \n   void visit (const ReferenceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tok = true;\n+\treturn;\n+      }\n+\n+    BaseCmp::visit (type);\n+  }\n \n+  void visit (const PointerType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -997,14 +1025,38 @@ class ReferenceCmp : public BaseCmp\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    ok = base_type->can_eq (other_base_type, emit_error_flag);\n+    ok = base_type->can_eq (other_base_type, emit_error_flag)\n+\t && (base->is_mutable () == type.is_mutable ());\n   }\n \n private:\n   const BaseType *get_base () const override { return base; }\n   const ReferenceType *base;\n };\n \n+class PointerCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  PointerCmp (const PointerType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n+\n+  void visit (const ReferenceType &type) override\n+  {\n+    auto base_type = base->get_base ();\n+    auto other_base_type = type.get_base ();\n+\n+    ok = base_type->can_eq (other_base_type, emit_error_flag)\n+\t && (base->is_mutable () == type.is_mutable ());\n+  }\n+\n+private:\n+  const BaseType *get_base () const override { return base; }\n+  const PointerType *base;\n+};\n+\n class ParamCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;"}, {"sha": "f19871e0cacfb8333c1fec16a07e72667bbc0d89", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -252,6 +252,17 @@ class BaseCoercionRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (PointerType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (ParamType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -507,7 +518,19 @@ class InferCoercionRules : public BaseCoercionRules\n   }\n \n   void visit (ReferenceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n \n+    BaseCoercionRules::visit (type);\n+  }\n+\n+  void visit (PointerType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -1087,6 +1110,75 @@ class ReferenceCoercionRules : public BaseCoercionRules\n   ReferenceType *base;\n };\n \n+class PointerCoercionRules : public BaseCoercionRules\n+{\n+  using Rust::TyTy::BaseCoercionRules::visit;\n+\n+public:\n+  PointerCoercionRules (PointerType *base)\n+    : BaseCoercionRules (base), base (base)\n+  {}\n+\n+  void visit (ReferenceType &type) override\n+  {\n+    auto base_type = base->get_base ();\n+    auto other_base_type = type.get_base ();\n+\n+    TyTy::BaseType *base_resolved = base_type->unify (other_base_type);\n+    if (base_resolved == nullptr\n+\t|| base_resolved->get_kind () == TypeKind::ERROR)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    // we can allow for mutability changes here by casting down from mutability\n+    // eg:  mut vs const, we cant take a mutable pointer from a const\n+    // eg:  const vs mut we can take a const reference from a mutable one\n+    if (!base->is_mutable () || (base->is_mutable () == type.is_mutable ()))\n+      {\n+\tresolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n+\t\t\t\t    TyVar (base_resolved->get_ref ()),\n+\t\t\t\t    base->is_mutable ());\n+\treturn;\n+      }\n+\n+    BaseCoercionRules::visit (type);\n+  }\n+\n+  void visit (PointerType &type) override\n+  {\n+    auto base_type = base->get_base ();\n+    auto other_base_type = type.get_base ();\n+\n+    TyTy::BaseType *base_resolved = base_type->unify (other_base_type);\n+    if (base_resolved == nullptr\n+\t|| base_resolved->get_kind () == TypeKind::ERROR)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    // we can allow for mutability changes here by casting down from mutability\n+    // eg:  mut vs const, we cant take a mutable pointer from a const one\n+    // eg:  const vs mut we can take a const reference from a mutable one\n+    if (!base->is_mutable () || (base->is_mutable () == type.is_mutable ()))\n+      {\n+\tresolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n+\t\t\t\t    TyVar (base_resolved->get_ref ()),\n+\t\t\t\t    base->is_mutable ());\n+\treturn;\n+      }\n+\n+    BaseCoercionRules::visit (type);\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  PointerType *base;\n+};\n+\n class ParamCoercionRules : public BaseCoercionRules\n {\n   using Rust::TyTy::BaseCoercionRules::visit;"}, {"sha": "de9a5d974f61d915f9cc4e8e08c82bd73dcc3292", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -274,6 +274,17 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (PointerType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (ParamType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -528,7 +539,19 @@ class InferRules : public BaseRules\n   }\n \n   void visit (ReferenceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n \n+    BaseRules::visit (type);\n+  }\n+\n+  void visit (PointerType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -1098,6 +1121,43 @@ class ReferenceRules : public BaseRules\n   ReferenceType *base;\n };\n \n+class PointerRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  PointerRules (PointerType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (PointerType &type) override\n+  {\n+    auto base_type = base->get_base ();\n+    auto other_base_type = type.get_base ();\n+\n+    TyTy::BaseType *base_resolved = base_type->unify (other_base_type);\n+    if (base_resolved == nullptr\n+\t|| base_resolved->get_kind () == TypeKind::ERROR)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    if (base->is_mutable () != type.is_mutable ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = new PointerType (base->get_ref (), base->get_ty_ref (),\n+\t\t\t\tTyVar (base_resolved->get_ref ()),\n+\t\t\t\tbase->is_mutable ());\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  PointerType *base;\n+};\n+\n class ParamRules : public BaseRules\n {\n   using Rust::TyTy::BaseRules::visit;"}, {"sha": "66b11b94a574ac97ed6f3b51dc815e281e3d8eab", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -42,6 +42,7 @@ class TyVisitor\n   virtual void visit (ErrorType &type) = 0;\n   virtual void visit (CharType &type) = 0;\n   virtual void visit (ReferenceType &type) = 0;\n+  virtual void visit (PointerType &type) = 0;\n   virtual void visit (ParamType &type) = 0;\n   virtual void visit (StrType &type) = 0;\n   virtual void visit (NeverType &type) = 0;\n@@ -66,6 +67,7 @@ class TyConstVisitor\n   virtual void visit (const ErrorType &type) = 0;\n   virtual void visit (const CharType &type) = 0;\n   virtual void visit (const ReferenceType &type) = 0;\n+  virtual void visit (const PointerType &type) = 0;\n   virtual void visit (const ParamType &type) = 0;\n   virtual void visit (const StrType &type) = 0;\n   virtual void visit (const NeverType &type) = 0;"}, {"sha": "f043c7eabda7f4e6d1ffaec655b58b67c424b676", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -1517,6 +1517,85 @@ ReferenceType::handle_substitions (SubstitutionArgumentMappings mappings)\n   return ref;\n }\n \n+void\n+PointerType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+PointerType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+PointerType::as_string () const\n+{\n+  return std::string (\"* \") + (is_mutable () ? \"mut\" : \"const\") + \" \"\n+\t + get_base ()->as_string ();\n+}\n+\n+BaseType *\n+PointerType::unify (BaseType *other)\n+{\n+  PointerRules r (this);\n+  return r.unify (other);\n+}\n+\n+BaseType *\n+PointerType::coerce (BaseType *other)\n+{\n+  PointerCoercionRules r (this);\n+  return r.coerce (other);\n+}\n+\n+bool\n+PointerType::can_eq (const BaseType *other, bool emit_errors) const\n+{\n+  PointerCmp r (this, emit_errors);\n+  return r.can_eq (other);\n+}\n+\n+bool\n+PointerType::is_equal (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    return false;\n+\n+  auto other2 = static_cast<const PointerType &> (other);\n+  return get_base ()->is_equal (*other2.get_base ());\n+}\n+\n+BaseType *\n+PointerType::get_base () const\n+{\n+  return base.get_tyty ();\n+}\n+\n+BaseType *\n+PointerType::clone ()\n+{\n+  return new PointerType (get_ref (), get_ty_ref (), base, is_mutable (),\n+\t\t\t  get_combined_refs ());\n+}\n+\n+PointerType *\n+PointerType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  PointerType *ref = static_cast<PointerType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_base ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->base = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n ParamType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "2152c1b6d76358535e8c7ec2d30bd9a307db19ae", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -35,6 +35,7 @@ enum TypeKind\n   ADT,\n   STR,\n   REF,\n+  POINTER,\n   PARAM,\n   ARRAY,\n   FNDEF,\n@@ -72,6 +73,9 @@ class TypeKindFormat\n       case TypeKind::REF:\n \treturn \"REF\";\n \n+      case TypeKind::POINTER:\n+\treturn \"POINTER\";\n+\n       case TypeKind::PARAM:\n \treturn \"PARAM\";\n \n@@ -1432,6 +1436,53 @@ class ReferenceType : public BaseType\n   bool is_mut;\n };\n \n+class PointerType : public BaseType\n+{\n+public:\n+  PointerType (HirId ref, TyVar base, bool is_mut,\n+\t       std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::POINTER, refs), base (base), is_mut (is_mut)\n+  {}\n+\n+  PointerType (HirId ref, HirId ty_ref, TyVar base, bool is_mut,\n+\t       std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::POINTER, refs), base (base),\n+      is_mut (is_mut)\n+  {}\n+\n+  BaseType *get_base () const;\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *clone () final override;\n+\n+  bool contains_type_parameters () const override final\n+  {\n+    return get_base ()->contains_type_parameters ();\n+  }\n+\n+  PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n+  bool is_mutable () const { return is_mut; }\n+\n+  bool is_const () const { return !is_mut; }\n+\n+private:\n+  TyVar base;\n+  bool is_mut;\n+};\n+\n class StrType : public BaseType\n {\n public:"}, {"sha": "127f257f8b6432459f51e644864f9b99a3cd096a", "filename": "gcc/testsuite/rust/compile/torture/coercion2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4feb8867da90a03d1d04dcfa61a049a2779df5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs?ref=aa4feb8867da90a03d1d04dcfa61a049a2779df5", "patch": "@@ -0,0 +1,20 @@\n+pub fn main() {\n+    let a: *const i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b: &i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c: &mut i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let d: *mut i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let e: &i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let f: *const i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let g = &123;\n+    let h: *const i32 = g;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}