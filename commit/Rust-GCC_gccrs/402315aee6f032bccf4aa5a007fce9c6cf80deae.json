{"sha": "402315aee6f032bccf4aa5a007fce9c6cf80deae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyMzE1YWVlNmYwMzJiY2NmNGFhNWEwMDdmY2U5YzZjZjgwZGVhZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2016-04-29T17:20:36Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2016-04-29T17:20:36Z"}, "message": "re PR target/69810 (PowerPC64: unrecognizable insn)\n\n        PR target/69810\n        * config/rs6000/rs6000.md (EXTQI): Don't allow extension to HImode.\n        (zero_extendqi<mode>2_dot): Revert earlier conversion from\n        define_insn_and_split to define_insn.\n        (zero_extendqi<mode>2_dot2): Same.\n        (extendqi<mode>2_dot): Same.\n        (extendqi<mode>2_dot2): Same.\n\nFrom-SVN: r235646", "tree": {"sha": "7ae26021b640ae730a9de187ef79cf214d95ec39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae26021b640ae730a9de187ef79cf214d95ec39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402315aee6f032bccf4aa5a007fce9c6cf80deae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402315aee6f032bccf4aa5a007fce9c6cf80deae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402315aee6f032bccf4aa5a007fce9c6cf80deae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402315aee6f032bccf4aa5a007fce9c6cf80deae/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f92ab29ffac7b8012c4787be66a43c08923c3663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92ab29ffac7b8012c4787be66a43c08923c3663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92ab29ffac7b8012c4787be66a43c08923c3663"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "1b06c04e430a72108760332ee5b8fa65effbd912", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402315aee6f032bccf4aa5a007fce9c6cf80deae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402315aee6f032bccf4aa5a007fce9c6cf80deae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=402315aee6f032bccf4aa5a007fce9c6cf80deae", "patch": "@@ -1,3 +1,13 @@\n+2016-04-29  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/69810\n+\t* config/rs6000/rs6000.md (EXTQI): Don't allow extension to HImode.\n+\t(zero_extendqi<mode>2_dot): Revert earlier conversion from\n+\tdefine_insn_and_split to define_insn.\n+\t(zero_extendqi<mode>2_dot2): Same.\n+\t(extendqi<mode>2_dot): Same.\n+\t(extendqi<mode>2_dot2): Same.\n+\n 2016-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (unspec): Add UNSPEC_PROBE_STACK."}, {"sha": "5566185076a16cdc748f4cbd798a6b5fda01b4a4", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402315aee6f032bccf4aa5a007fce9c6cf80deae/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402315aee6f032bccf4aa5a007fce9c6cf80deae/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=402315aee6f032bccf4aa5a007fce9c6cf80deae", "patch": "@@ -322,7 +322,7 @@\n (define_mode_iterator INT1 [QI HI SI (DI \"TARGET_POWERPC64\")])\n \n ; Everything we can extend QImode to.\n-(define_mode_iterator EXTQI [HI SI (DI \"TARGET_POWERPC64\")])\n+(define_mode_iterator EXTQI [SI (DI \"TARGET_POWERPC64\")])\n \n ; Everything we can extend HImode to.\n (define_mode_iterator EXTHI [SI (DI \"TARGET_POWERPC64\")])\n@@ -711,20 +711,27 @@\n    rlwinm %0,%1,0,0xff\"\n   [(set_attr \"type\" \"load,shift\")])\n \n-(define_insn \"*zero_extendqi<mode>2_dot\"\n+(define_insn_and_split \"*zero_extendqi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (zero_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTQI 0 \"=r,r\"))]\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    andi. %0,%1,0xff\n-   rlwinm %0,%1,0,0xff\\;cmpwi %2,%0,0\"\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(zero_extend:EXTQI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*zero_extendqi<mode>2_dot2\"\n+(define_insn_and_split \"*zero_extendqi<mode>2_dot2\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (zero_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n@@ -733,7 +740,14 @@\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    andi. %0,%1,0xff\n-   rlwinm %0,%1,0,0xff\\;cmpwi %2,%0,0\"\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(zero_extend:EXTQI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n@@ -851,20 +865,27 @@\n   \"extsb %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n-(define_insn \"*extendqi<mode>2_dot\"\n+(define_insn_and_split \"*extendqi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTQI 0 \"=r,r\"))]\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    extsb. %0,%1\n-   extsb %0,%1\\;cmpwi %2,%0,0\"\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(sign_extend:EXTQI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"exts\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*extendqi<mode>2_dot2\"\n+(define_insn_and_split \"*extendqi<mode>2_dot2\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n@@ -873,7 +894,14 @@\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    extsb. %0,%1\n-   extsb %0,%1\\;cmpwi %2,%0,0\"\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(sign_extend:EXTQI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n   [(set_attr \"type\" \"exts\")\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])"}]}