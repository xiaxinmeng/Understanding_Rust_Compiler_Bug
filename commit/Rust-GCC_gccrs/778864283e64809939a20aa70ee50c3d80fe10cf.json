{"sha": "778864283e64809939a20aa70ee50c3d80fe10cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4ODY0MjgzZTY0ODA5OTM5YTIwYWE3MGVlNTBjM2Q4MGZlMTBjZg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-05-02T18:49:15Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-05-02T18:49:15Z"}, "message": "c-common.h (enum c_omp_region_type): Define.\n\n\tgcc/c-family/\n\t* c-common.h (enum c_omp_region_type): Define.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_oacc_all_clauses): Update call to\n\tc_finish_omp_clauses.\n\t(c_parser_omp_all_clauses): Likewise.\n\t(c_parser_oacc_cache): Likewise.\n\t(c_parser_oacc_loop): Likewise.\n\t(omp_split_clauses): Likewise.\n\t(c_parser_omp_declare_target): Likewise.\n\t(c_parser_cilk_all_clauses): Likewise.\n\t(c_parser_cilk_for): Likewise.\n\t* c-typeck.c (c_finish_omp_clauses): Replace bool arguments\n\tis_omp, declare_simd, and is_cilk with enum c_omp_region_type ort.\n\n\tgcc/cp/\n\t* cp-tree.h (finish_omp_clauses): Update prototype.\n\t* parser.c (cp_parser_oacc_all_clauses): Update call to\n\tfinish_omp_clauses.\n\t(cp_parser_omp_all_clauses): Likewise.\n\t(cp_parser_omp_for_loop): Likewise.\n\t(cp_omp_split_clauses): Likewise.\n\t(cp_parser_oacc_cache): Likewise.\n\t(cp_parser_oacc_loop): Likewise.\n\t(cp_parser_omp_declare_target):\n\t(cp_parser_cilk_simd_all_clauses): Likewise.\n\t(cp_parser_cilk_for): Likewise.\n\t* pt.c (tsubst_omp_clauses): Replace allow_fields and declare_simd\n\targuments with enum c_omp_region_type ort.\n\t(tsubst_omp_clauses): Update calls to finish_omp_clauses.\n\t(tsubst_omp_attribute): Update calls to tsubst_omp_clauses.\n\t(tsubst_omp_for_iterator): Update calls to finish_omp_clauses.\n\t(tsubst_expr): Update calls to tsubst_omp_clauses.\n\t* semantics.c (finish_omp_clauses): Replace bool arguments\n\tallow_fields, declare_simd, and is_cilk with bitmask ort.\n\t(finish_omp_for): Update call to finish_omp_clauses.\n\nFrom-SVN: r235780", "tree": {"sha": "8fa1fd05fa3252d1c4fa5970e67bc5debade2f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fa1fd05fa3252d1c4fa5970e67bc5debade2f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/778864283e64809939a20aa70ee50c3d80fe10cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778864283e64809939a20aa70ee50c3d80fe10cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778864283e64809939a20aa70ee50c3d80fe10cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778864283e64809939a20aa70ee50c3d80fe10cf/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "474e0129ac2e906caa667eb7a9a7682afeec41aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474e0129ac2e906caa667eb7a9a7682afeec41aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474e0129ac2e906caa667eb7a9a7682afeec41aa"}], "stats": {"total": 236, "additions": 147, "deletions": 89}, "files": [{"sha": "0afedff4ec96a24062a4c3c54aa5ecf2f3b55d95", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -1,3 +1,7 @@\n+2016-05-02  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-common.h (enum c_omp_region_type): Define.\n+\n 2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-common.c (shorten_compare): Use wi::to_wide."}, {"sha": "1714284bc2e8352076c59ccc5c85aed92157a9e7", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -1261,6 +1261,15 @@ enum c_omp_clause_split\n   C_OMP_CLAUSE_SPLIT_TASKLOOP = C_OMP_CLAUSE_SPLIT_FOR\n };\n \n+enum c_omp_region_type\n+{\n+  C_ORT_OMP\t\t\t= 1 << 0,\n+  C_ORT_CILK\t\t\t= 1 << 1,\n+  C_ORT_ACC\t\t\t= 1 << 2,\n+  C_ORT_DECLARE_SIMD\t\t= 1 << 3,\n+  C_ORT_OMP_DECLARE_SIMD\t= C_ORT_OMP | C_ORT_DECLARE_SIMD,\n+};\n+\n extern tree c_finish_omp_master (location_t, tree);\n extern tree c_finish_omp_taskgroup (location_t, tree);\n extern tree c_finish_omp_critical (location_t, tree, tree, tree);"}, {"sha": "a90972e7e0996f1dc1b9476dfb6ddb10cd8a3bc8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -1,3 +1,17 @@\n+2016-05-02  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_oacc_all_clauses): Update call to\n+\tc_finish_omp_clauses.\n+\t(c_parser_omp_all_clauses): Likewise.\n+\t(c_parser_oacc_cache): Likewise.\n+\t(c_parser_oacc_loop): Likewise.\n+\t(omp_split_clauses): Likewise.\n+\t(c_parser_omp_declare_target): Likewise.\n+\t(c_parser_cilk_all_clauses): Likewise.\n+\t(c_parser_cilk_for): Likewise.\n+\t* c-typeck.c (c_finish_omp_clauses): Replace bool arguments\n+\tis_omp, declare_simd, and is_cilk with enum c_omp_region_type ort.\n+\n 2016-05-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70851"}, {"sha": "701ab45ff891b75c6005e255612fd319c9db8cec", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -13183,7 +13183,7 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n   c_parser_skip_to_pragma_eol (parser);\n \n   if (finish_p)\n-    return c_finish_omp_clauses (clauses, false);\n+    return c_finish_omp_clauses (clauses, C_ORT_ACC);\n \n   return clauses;\n }\n@@ -13468,8 +13468,8 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n   if (finish_p)\n     {\n       if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_UNIFORM)) != 0)\n-\treturn c_finish_omp_clauses (clauses, true, true);\n-      return c_finish_omp_clauses (clauses, true);\n+\treturn c_finish_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD);\n+      return c_finish_omp_clauses (clauses, C_ORT_OMP);\n     }\n \n   return clauses;\n@@ -13503,7 +13503,7 @@ c_parser_oacc_cache (location_t loc, c_parser *parser)\n   tree stmt, clauses;\n \n   clauses = c_parser_omp_var_list_parens (parser, OMP_CLAUSE__CACHE_, NULL);\n-  clauses = c_finish_omp_clauses (clauses, false);\n+  clauses = c_finish_omp_clauses (clauses, C_ORT_ACC);\n \n   c_parser_skip_to_pragma_eol (parser);\n \n@@ -13839,9 +13839,9 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n     {\n       clauses = c_oacc_split_loop_clauses (clauses, cclauses, is_parallel);\n       if (*cclauses)\n-\t*cclauses = c_finish_omp_clauses (*cclauses, false);\n+\t*cclauses = c_finish_omp_clauses (*cclauses, C_ORT_ACC);\n       if (clauses)\n-\tclauses = c_finish_omp_clauses (clauses, false);\n+\tclauses = c_finish_omp_clauses (clauses, C_ORT_ACC);\n     }\n \n   tree block = c_begin_compound_stmt (true);\n@@ -15015,7 +15015,7 @@ omp_split_clauses (location_t loc, enum tree_code code,\n   c_omp_split_clauses (loc, code, mask, clauses, cclauses);\n   for (i = 0; i < C_OMP_CLAUSE_SPLIT_COUNT; i++)\n     if (cclauses[i])\n-      cclauses[i] = c_finish_omp_clauses (cclauses[i], true);\n+      cclauses[i] = c_finish_omp_clauses (cclauses[i], C_ORT_OMP);\n }\n \n /* OpenMP 4.0:\n@@ -16546,7 +16546,7 @@ c_parser_omp_declare_target (c_parser *parser)\n     {\n       clauses = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_TO_DECLARE,\n \t\t\t\t\t      clauses);\n-      clauses = c_finish_omp_clauses (clauses, true);\n+      clauses = c_finish_omp_clauses (clauses, C_ORT_OMP);\n       c_parser_skip_to_pragma_eol (parser);\n     }\n   else\n@@ -17515,7 +17515,7 @@ c_parser_cilk_all_clauses (c_parser *parser)\n \n  saw_error:\n   c_parser_skip_to_pragma_eol (parser);\n-  return c_finish_omp_clauses (clauses, false, false, true);\n+  return c_finish_omp_clauses (clauses, C_ORT_CILK);\n }\n \n /* This function helps parse the grainsize pragma for a _Cilk_for statement.\n@@ -17597,7 +17597,7 @@ c_parser_cilk_for (c_parser *parser, tree grain, bool *if_p)\n   tree clauses = build_omp_clause (EXPR_LOCATION (grain), OMP_CLAUSE_SCHEDULE);\n   OMP_CLAUSE_SCHEDULE_KIND (clauses) = OMP_CLAUSE_SCHEDULE_CILKFOR;\n   OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clauses) = grain;\n-  clauses = c_finish_omp_clauses (clauses, false);\n+  clauses = c_finish_omp_clauses (clauses, C_ORT_CILK);\n \n   tree block = c_begin_compound_stmt (true);\n   tree sb = push_stmt_list ();\n@@ -17663,7 +17663,7 @@ c_parser_cilk_for (c_parser *parser, tree grain, bool *if_p)\n       OMP_CLAUSE_OPERAND (c, 0)\n \t= cilk_for_number_of_iterations (omp_for);\n       OMP_CLAUSE_CHAIN (c) = clauses;\n-      OMP_PARALLEL_CLAUSES (omp_par) = c_finish_omp_clauses (c, true);\n+      OMP_PARALLEL_CLAUSES (omp_par) = c_finish_omp_clauses (c, C_ORT_CILK);\n       add_stmt (omp_par);\n     }\n "}, {"sha": "07d0f65609459cf5e8a7a5d2765aee48981138bc", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -661,7 +661,7 @@ extern tree c_begin_omp_task (void);\n extern tree c_finish_omp_task (location_t, tree, tree);\n extern void c_finish_omp_cancel (location_t, tree);\n extern void c_finish_omp_cancellation_point (location_t, tree);\n-extern tree c_finish_omp_clauses (tree, bool, bool = false, bool = false);\n+extern tree c_finish_omp_clauses (tree, enum c_omp_region_type);\n extern tree c_build_va_arg (location_t, tree, location_t, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n extern bool c_tree_equal (tree, tree);"}, {"sha": "0fa96539b951f525da5ed4ec35abda41b6c5df22", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -12496,8 +12496,7 @@ c_find_omp_placeholder_r (tree *tp, int *, void *data)\n    Remove any elements from the list that are invalid.  */\n \n tree\n-c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n-\t\t      bool is_cilk)\n+c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n   bitmap_head aligned_head, map_head, map_field_head;\n@@ -12540,7 +12539,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, is_omp))\n+\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n \t\t{\n \t\t  remove = true;\n \t\t  break;\n@@ -12768,18 +12767,18 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t  goto check_dup_generic;\n \n \tcase OMP_CLAUSE_LINEAR:\n-\t  if (!declare_simd)\n+\t  if (ort != C_ORT_OMP_DECLARE_SIMD)\n \t    need_implicitly_determined = true;\n \t  t = OMP_CLAUSE_DECL (c);\n-\t  if (!declare_simd\n+\t  if (ort != C_ORT_OMP_DECLARE_SIMD\n \t      && OMP_CLAUSE_LINEAR_KIND (c) != OMP_CLAUSE_LINEAR_DEFAULT)\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"modifier should not be specified in %<linear%> \"\n \t\t\t\"clause on %<simd%> or %<for%> constructs\");\n \t      OMP_CLAUSE_LINEAR_KIND (c) = OMP_CLAUSE_LINEAR_DEFAULT;\n \t    }\n-\t  if (is_cilk)\n+\t  if (ort & C_ORT_CILK)\n \t    {\n \t      if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t\t  && !SCALAR_FLOAT_TYPE_P (TREE_TYPE (t))\n@@ -12805,7 +12804,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t\t  break;\n \t\t}\n \t    }\n-\t  if (declare_simd)\n+\t  if (ort == C_ORT_OMP_DECLARE_SIMD)\n \t    {\n \t      tree s = OMP_CLAUSE_LINEAR_STEP (c);\n \t      if (TREE_CODE (s) == PARM_DECL)\n@@ -12984,7 +12983,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t    }\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, is_omp))\n+\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n \t\tremove = true;\n \t      break;\n \t    }\n@@ -13007,7 +13006,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, is_omp))\n+\t      if (handle_omp_array_sections (c, ort & C_ORT_OMP))\n \t\tremove = true;\n \t      else\n \t\t{\n@@ -13054,7 +13053,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n \t      break;\n \t    }\n \t  if (TREE_CODE (t) == COMPONENT_REF\n-\t      && is_omp\n+\t      && (ort & C_ORT_OMP)\n \t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE__CACHE_)\n \t    {\n \t      if (DECL_BIT_FIELD (TREE_OPERAND (t, 1)))"}, {"sha": "30dddeb765ce821410a562b5aa30c82f1c79707c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -1,3 +1,26 @@\n+2016-05-02  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* cp-tree.h (finish_omp_clauses): Update prototype.\n+\t* parser.c (cp_parser_oacc_all_clauses): Update call to\n+\tfinish_omp_clauses.\n+\t(cp_parser_omp_all_clauses): Likewise.\n+\t(cp_parser_omp_for_loop): Likewise.\n+\t(cp_omp_split_clauses): Likewise.\n+\t(cp_parser_oacc_cache): Likewise.\n+\t(cp_parser_oacc_loop): Likewise.\n+\t(cp_parser_omp_declare_target):\n+\t(cp_parser_cilk_simd_all_clauses): Likewise.\n+\t(cp_parser_cilk_for): Likewise.\n+\t* pt.c (tsubst_omp_clauses): Replace allow_fields and declare_simd\n+\targuments with enum c_omp_region_type ort.\n+\t(tsubst_omp_clauses): Update calls to finish_omp_clauses.\n+\t(tsubst_omp_attribute): Update calls to tsubst_omp_clauses.\n+\t(tsubst_omp_for_iterator): Update calls to finish_omp_clauses.\n+\t(tsubst_expr): Update calls to tsubst_omp_clauses.\n+\t* semantics.c (finish_omp_clauses): Replace bool arguments\n+\tallow_fields, declare_simd, and is_cilk with bitmask ort.\n+\t(finish_omp_for): Update call to finish_omp_clauses.\n+\n 2016-05-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/62314"}, {"sha": "6665355b192605119ecb2847c61d3cac0834286c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -6399,8 +6399,7 @@ extern tree omp_reduction_id\t\t\t(enum tree_code, tree, tree);\n extern tree cp_remove_omp_priv_cleanup_stmt\t(tree *, int *, void *);\n extern void cp_check_omp_declare_reduction\t(tree);\n extern void finish_omp_declare_simd_methods\t(tree);\n-extern tree finish_omp_clauses\t\t\t(tree, bool, bool = false,\n-\t\t\t\t\t\t bool = false);\n+extern tree finish_omp_clauses\t\t\t(tree, enum c_omp_region_type);\n extern tree push_omp_privatization_clauses\t(bool);\n extern void pop_omp_privatization_clauses\t(tree);\n extern void save_omp_privatization_clauses\t(vec<tree> &);"}, {"sha": "c4941a0599692ae818f54e1b73f6058894d352a1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -32275,7 +32275,7 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n   cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n \n   if (finish_p)\n-    return finish_omp_clauses (clauses, false);\n+    return finish_omp_clauses (clauses, C_ORT_ACC);\n \n   return clauses;\n }\n@@ -32594,9 +32594,9 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n   if (finish_p)\n     {\n       if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_UNIFORM)) != 0)\n-\treturn finish_omp_clauses (clauses, false, true);\n+\treturn finish_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD);\n       else\n-\treturn finish_omp_clauses (clauses, true);\n+\treturn finish_omp_clauses (clauses, C_ORT_OMP);\n     }\n   return clauses;\n }\n@@ -33671,7 +33671,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t      else\n \t\tc = build_omp_clause (loc, OMP_CLAUSE_LASTPRIVATE);\n \t      OMP_CLAUSE_DECL (c) = add_private_clause;\n-\t      c = finish_omp_clauses (c, true);\n+\t      c = finish_omp_clauses (c, C_ORT_OMP);\n \t      if (c)\n \t\t{\n \t\t  OMP_CLAUSE_CHAIN (c) = clauses;\n@@ -33823,7 +33823,7 @@ cp_omp_split_clauses (location_t loc, enum tree_code code,\n   c_omp_split_clauses (loc, code, mask, clauses, cclauses);\n   for (i = 0; i < C_OMP_CLAUSE_SPLIT_COUNT; i++)\n     if (cclauses[i])\n-      cclauses[i] = finish_omp_clauses (cclauses[i], true);\n+      cclauses[i] = finish_omp_clauses (cclauses[i], C_ORT_OMP);\n }\n \n /* OpenMP 4.0:\n@@ -35106,7 +35106,7 @@ cp_parser_oacc_cache (cp_parser *parser, cp_token *pragma_tok)\n   tree stmt, clauses;\n \n   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE__CACHE_, NULL_TREE);\n-  clauses = finish_omp_clauses (clauses, false);\n+  clauses = finish_omp_clauses (clauses, C_ORT_ACC);\n \n   cp_parser_require_pragma_eol (parser, cp_lexer_peek_token (parser->lexer));\n \n@@ -35433,9 +35433,9 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n     {\n       clauses = c_oacc_split_loop_clauses (clauses, cclauses, is_parallel);\n       if (*cclauses)\n-\t*cclauses = finish_omp_clauses (*cclauses, false);\n+\t*cclauses = finish_omp_clauses (*cclauses, C_ORT_ACC);\n       if (clauses)\n-\tclauses = finish_omp_clauses (clauses, false);\n+\tclauses = finish_omp_clauses (clauses, C_ORT_ACC);\n     }\n \n   tree block = begin_omp_structured_block ();\n@@ -35800,7 +35800,7 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n     {\n       clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO_DECLARE,\n \t\t\t\t\tclauses);\n-      clauses = finish_omp_clauses (clauses, true);\n+      clauses = finish_omp_clauses (clauses, C_ORT_OMP);\n       cp_parser_require_pragma_eol (parser, pragma_tok);\n     }\n   else\n@@ -37740,7 +37740,7 @@ cp_parser_cilk_simd_all_clauses (cp_parser *parser, cp_token *pragma_token)\n   if (clauses == error_mark_node)\n     return error_mark_node;\n   else\n-    return finish_omp_clauses (clauses, false, false, true);\n+    return finish_omp_clauses (clauses, C_ORT_CILK);\n }\n \n /* Main entry-point for parsing Cilk Plus <#pragma simd> for loops.  */\n@@ -37785,7 +37785,7 @@ cp_parser_cilk_for (cp_parser *parser, tree grain, bool *if_p)\n   tree clauses = build_omp_clause (EXPR_LOCATION (grain), OMP_CLAUSE_SCHEDULE);\n   OMP_CLAUSE_SCHEDULE_KIND (clauses) = OMP_CLAUSE_SCHEDULE_CILKFOR;\n   OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clauses) = grain;\n-  clauses = finish_omp_clauses (clauses, false);\n+  clauses = finish_omp_clauses (clauses, C_ORT_CILK);\n \n   tree ret = cp_parser_omp_for_loop (parser, CILK_FOR, clauses, NULL, if_p);\n   if (ret)"}, {"sha": "1289d64f071deedd75e091567ffd528a7b263139", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -9563,7 +9563,8 @@ can_complete_type_without_circularity (tree type)\n     return 1;\n }\n \n-static tree tsubst_omp_clauses (tree, bool, bool, tree, tsubst_flags_t, tree);\n+static tree tsubst_omp_clauses (tree, enum c_omp_region_type, tree,\n+\t\t\t\ttsubst_flags_t, tree);\n \n /* Instantiate a single dependent attribute T (a TREE_LIST), and return either\n    T or a new TREE_LIST, possibly a chain in the case of a pack expansion.  */\n@@ -9582,10 +9583,10 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n \t\t\t      get_attribute_name (t)))\n     {\n       tree clauses = TREE_VALUE (val);\n-      clauses = tsubst_omp_clauses (clauses, true, false, args,\n+      clauses = tsubst_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD, args,\n \t\t\t\t    complain, in_decl);\n       c_omp_declare_simd_clauses_to_decls (*decl_p, clauses);\n-      clauses = finish_omp_clauses (clauses, false, true);\n+      clauses = finish_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD);\n       tree parms = DECL_ARGUMENTS (*decl_p);\n       clauses\n \t= c_omp_declare_simd_clauses_to_numbers (parms, clauses);\n@@ -14535,7 +14536,7 @@ tsubst_omp_clause_decl (tree decl, tree args, tsubst_flags_t complain,\n /* Like tsubst_copy, but specifically for OpenMP clauses.  */\n \n static tree\n-tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n+tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t\t    tree args, tsubst_flags_t complain, tree in_decl)\n {\n   tree new_clauses = NULL_TREE, nc, oc;\n@@ -14685,7 +14686,7 @@ tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      if (allow_fields)\n+      if ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP)\n \tswitch (OMP_CLAUSE_CODE (nc))\n \t  {\n \t  case OMP_CLAUSE_SHARED:\n@@ -14747,9 +14748,9 @@ tsubst_omp_clauses (tree clauses, bool declare_simd, bool allow_fields,\n     }\n \n   new_clauses = nreverse (new_clauses);\n-  if (!declare_simd)\n+  if (ort != C_ORT_OMP_DECLARE_SIMD)\n     {\n-      new_clauses = finish_omp_clauses (new_clauses, allow_fields);\n+      new_clauses = finish_omp_clauses (new_clauses, ort);\n       if (linear_no_step)\n \tfor (nc = new_clauses; nc; nc = OMP_CLAUSE_CHAIN (nc))\n \t  if (nc == linear_no_step)\n@@ -14970,7 +14971,7 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree orig_declv,\n \t{\n \t  tree c = build_omp_clause (input_location, OMP_CLAUSE_PRIVATE);\n \t  OMP_CLAUSE_DECL (c) = decl;\n-\t  c = finish_omp_clauses (c, true);\n+\t  c = finish_omp_clauses (c, C_ORT_OMP);\n \t  if (c)\n \t    {\n \t      OMP_CLAUSE_CHAIN (c) = *clauses;\n@@ -15452,7 +15453,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case OACC_KERNELS:\n     case OACC_PARALLEL:\n-      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false, false, args, complain,\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), C_ORT_ACC, args, complain,\n \t\t\t\tin_decl);\n       stmt = begin_omp_parallel ();\n       RECUR (OMP_BODY (t));\n@@ -15461,8 +15462,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case OMP_PARALLEL:\n       r = push_omp_privatization_clauses (OMP_PARALLEL_COMBINED (t));\n-      tmp = tsubst_omp_clauses (OMP_PARALLEL_CLAUSES (t), false, true,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_PARALLEL_CLAUSES (t), C_ORT_OMP, args,\n+\t\t\t\tcomplain, in_decl);\n       if (OMP_PARALLEL_COMBINED (t))\n \tomp_parallel_combined_clauses = &tmp;\n       stmt = begin_omp_parallel ();\n@@ -15475,8 +15476,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case OMP_TASK:\n       r = push_omp_privatization_clauses (false);\n-      tmp = tsubst_omp_clauses (OMP_TASK_CLAUSES (t), false, true,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_TASK_CLAUSES (t), C_ORT_OMP, args,\n+\t\t\t\tcomplain, in_decl);\n       stmt = begin_omp_task ();\n       RECUR (OMP_TASK_BODY (t));\n       finish_omp_task (tmp, stmt);\n@@ -15495,12 +15496,17 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \ttree declv = NULL_TREE, initv = NULL_TREE, condv = NULL_TREE;\n \ttree orig_declv = NULL_TREE;\n \ttree incrv = NULL_TREE;\n+\tenum c_omp_region_type ort = C_ORT_OMP;\n \tint i;\n \n+\tif (TREE_CODE (t) == CILK_SIMD || TREE_CODE (t) == CILK_FOR)\n+\t  ort = C_ORT_CILK;\n+\telse if (TREE_CODE (t) == OACC_LOOP)\n+\t  ort = C_ORT_ACC;\n+\n \tr = push_omp_privatization_clauses (OMP_FOR_INIT (t) == NULL_TREE);\n-\tclauses = tsubst_omp_clauses (OMP_FOR_CLAUSES (t), false,\n-\t\t\t\t      TREE_CODE (t) != OACC_LOOP,\n-\t\t\t\t      args, complain, in_decl);\n+\tclauses = tsubst_omp_clauses (OMP_FOR_CLAUSES (t), ort, args, complain,\n+\t\t\t\t      in_decl);\n \tif (OMP_FOR_INIT (t) != NULL_TREE)\n \t  {\n \t    declv = make_tree_vec (TREE_VEC_LENGTH (OMP_FOR_INIT (t)));\n@@ -15556,8 +15562,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OMP_CRITICAL:\n       r = push_omp_privatization_clauses (TREE_CODE (t) == OMP_TEAMS\n \t\t\t\t\t  && OMP_TEAMS_COMBINED (t));\n-      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false, true,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), C_ORT_OMP, args, complain,\n+\t\t\t\tin_decl);\n       stmt = push_stmt_list ();\n       RECUR (OMP_BODY (t));\n       stmt = pop_stmt_list (stmt);\n@@ -15572,9 +15578,9 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OACC_DATA:\n     case OMP_TARGET_DATA:\n     case OMP_TARGET:\n-      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), false,\n-\t\t\t\tTREE_CODE (t) != OACC_DATA,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), (TREE_CODE (t) == OACC_DATA)\n+\t\t\t\t? C_ORT_ACC : C_ORT_OMP, args, complain,\n+\t\t\t\tin_decl);\n       keep_next_level (true);\n       stmt = begin_omp_structured_block ();\n \n@@ -15619,17 +15625,17 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case OACC_DECLARE:\n       t = copy_node (t);\n-      tmp = tsubst_omp_clauses (OACC_DECLARE_CLAUSES (t), false, false,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OACC_DECLARE_CLAUSES (t), C_ORT_ACC, args,\n+\t\t\t\tcomplain, in_decl);\n       OACC_DECLARE_CLAUSES (t) = tmp;\n       add_stmt (t);\n       break;\n \n     case OMP_TARGET_UPDATE:\n     case OMP_TARGET_ENTER_DATA:\n     case OMP_TARGET_EXIT_DATA:\n-      tmp = tsubst_omp_clauses (OMP_STANDALONE_CLAUSES (t), false, true,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_STANDALONE_CLAUSES (t), C_ORT_OMP, args,\n+\t\t\t\tcomplain, in_decl);\n       t = copy_node (t);\n       OMP_STANDALONE_CLAUSES (t) = tmp;\n       add_stmt (t);\n@@ -15638,16 +15644,16 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OACC_ENTER_DATA:\n     case OACC_EXIT_DATA:\n     case OACC_UPDATE:\n-      tmp = tsubst_omp_clauses (OMP_STANDALONE_CLAUSES (t), false, false,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_STANDALONE_CLAUSES (t), C_ORT_ACC, args,\n+\t\t\t\tcomplain, in_decl);\n       t = copy_node (t);\n       OMP_STANDALONE_CLAUSES (t) = tmp;\n       add_stmt (t);\n       break;\n \n     case OMP_ORDERED:\n-      tmp = tsubst_omp_clauses (OMP_ORDERED_CLAUSES (t), false, true,\n-\t\t\t\targs, complain, in_decl);\n+      tmp = tsubst_omp_clauses (OMP_ORDERED_CLAUSES (t), C_ORT_OMP, args,\n+\t\t\t\tcomplain, in_decl);\n       stmt = push_stmt_list ();\n       RECUR (OMP_BODY (t));\n       stmt = pop_stmt_list (stmt);"}, {"sha": "fed7e88e8dbc1399d65b0dffbdf6850c2f93f1fc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778864283e64809939a20aa70ee50c3d80fe10cf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=778864283e64809939a20aa70ee50c3d80fe10cf", "patch": "@@ -5793,8 +5793,7 @@ cp_finish_omp_clause_depend_sink (tree sink_clause)\n    Remove any elements from the list that are invalid.  */\n \n tree\n-finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n-\t\t    bool is_cilk)\n+finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n   bitmap_head aligned_head, map_head, map_field_head;\n@@ -5820,17 +5819,18 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n       switch (OMP_CLAUSE_CODE (c))\n \t{\n \tcase OMP_CLAUSE_SHARED:\n-\t  field_ok = allow_fields;\n+\t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_PRIVATE:\n-\t  field_ok = allow_fields;\n+\t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_REDUCTION:\n-\t  field_ok = allow_fields;\n+\t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, allow_fields))\n+\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n+\t\t\t\t\t\t == C_ORT_OMP)))\n \t\t{\n \t\t  remove = true;\n \t\t  break;\n@@ -5858,14 +5858,14 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \t  copyprivate_seen = true;\n-\t  field_ok = allow_fields;\n+\t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_COPYIN:\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_LINEAR:\n-\t  field_ok = allow_fields;\n+\t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  t = OMP_CLAUSE_DECL (c);\n-\t  if (!declare_simd\n+\t  if (ort != C_ORT_OMP_DECLARE_SIMD\n \t      && OMP_CLAUSE_LINEAR_KIND (c) != OMP_CLAUSE_LINEAR_DEFAULT)\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n@@ -5890,7 +5890,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t\t}\n \t      if (TREE_CODE (type) == REFERENCE_TYPE)\n \t\ttype = TREE_TYPE (type);\n-\t      if (is_cilk)\n+\t      if (ort == C_ORT_CILK)\n \t\t{\n \t\t  if (!INTEGRAL_TYPE_P (type)\n \t\t      && !SCALAR_FLOAT_TYPE_P (type)\n@@ -5925,7 +5925,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t    }\n \t  else if (!type_dependent_expression_p (t)\n \t\t   && !INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t\t   && (!declare_simd\n+\t\t   && (ort != C_ORT_OMP_DECLARE_SIMD\n \t\t       || TREE_CODE (t) != PARM_DECL\n \t\t       || TREE_CODE (TREE_TYPE (t)) != REFERENCE_TYPE\n \t\t       || !INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (t)))))\n@@ -5937,7 +5937,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t  else\n \t    {\n \t      t = mark_rvalue_use (t);\n-\t      if (declare_simd && TREE_CODE (t) == PARM_DECL)\n+\t      if (ort == C_ORT_OMP_DECLARE_SIMD && TREE_CODE (t) == PARM_DECL)\n \t\t{\n \t\t  OMP_CLAUSE_LINEAR_VARIABLE_STRIDE (c) = 1;\n \t\t  goto check_dup_generic;\n@@ -5946,7 +5946,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t\t  && (VAR_P (OMP_CLAUSE_DECL (c))\n \t\t      || TREE_CODE (OMP_CLAUSE_DECL (c)) == PARM_DECL))\n \t\t{\n-\t\t  if (declare_simd)\n+\t\t  if (ort == C_ORT_OMP_DECLARE_SIMD)\n \t\t    {\n \t\t      t = maybe_constant_value (t);\n \t\t      if (TREE_CODE (t) != INTEGER_CST)\n@@ -5981,7 +5981,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t\t  else if (TREE_CODE (type) == POINTER_TYPE\n \t\t\t   /* Can't multiply the step yet if *this\n \t\t\t      is still incomplete type.  */\n-\t\t\t   && (!declare_simd\n+\t\t\t   && (ort != C_ORT_OMP_DECLARE_SIMD\n \t\t\t       || TREE_CODE (OMP_CLAUSE_DECL (c)) != PARM_DECL\n \t\t\t       || !DECL_ARTIFICIAL (OMP_CLAUSE_DECL (c))\n \t\t\t       || DECL_NAME (OMP_CLAUSE_DECL (c))\n@@ -6018,7 +6018,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t    t = OMP_CLAUSE_DECL (c);\n \tcheck_dup_generic_t:\n \t  if (t == current_class_ptr\n-\t      && (!declare_simd\n+\t      && (ort != C_ORT_OMP_DECLARE_SIMD\n \t\t  || (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_LINEAR\n \t\t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_UNIFORM)))\n \t    {\n@@ -6084,7 +6084,8 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t      break;\n \t    }\n \t  if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL\n-\t      && (!allow_fields || TREE_CODE (t) != FIELD_DECL))\n+\t      && ((ort & C_ORT_OMP_DECLARE_SIMD) != C_ORT_OMP\n+\t\t  || TREE_CODE (t) != FIELD_DECL))\n \t    {\n \t      if (processing_template_decl)\n \t\tbreak;\n@@ -6123,7 +6124,8 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t      break;\n \t    }\n \t  if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL\n-\t      && (!allow_fields || TREE_CODE (t) != FIELD_DECL))\n+\t      && ((ort & C_ORT_OMP_DECLARE_SIMD) != C_ORT_OMP\n+\t\t  || TREE_CODE (t) != FIELD_DECL))\n \t    {\n \t      if (processing_template_decl)\n \t\tbreak;\n@@ -6466,7 +6468,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \n \tcase OMP_CLAUSE_ALIGNED:\n \t  t = OMP_CLAUSE_DECL (c);\n-\t  if (t == current_class_ptr && !declare_simd)\n+\t  if (t == current_class_ptr && ort != C_ORT_OMP_DECLARE_SIMD)\n \t    {\n \t      error (\"%<this%> allowed in OpenMP only in %<declare simd%>\"\n \t\t     \" clauses\");\n@@ -6549,7 +6551,8 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t    }\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, allow_fields))\n+\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n+\t\t\t\t\t\t == C_ORT_OMP)))\n \t\tremove = true;\n \t      break;\n \t    }\n@@ -6583,7 +6586,8 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST)\n \t    {\n-\t      if (handle_omp_array_sections (c, allow_fields))\n+\t      if (handle_omp_array_sections (c, ((ort & C_ORT_OMP_DECLARE_SIMD)\n+\t\t\t\t\t\t == C_ORT_OMP)))\n \t\tremove = true;\n \t      else\n \t\t{\n@@ -6638,7 +6642,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t      OMP_CLAUSE_DECL (c) = t;\n \t    }\n \t  if (TREE_CODE (t) == COMPONENT_REF\n-\t      && allow_fields\n+\t      && (ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP\n \t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE__CACHE_)\n \t    {\n \t      if (type_dependent_expression_p (t))\n@@ -6778,7 +6782,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \thandle_map_references:\n \t  if (!remove\n \t      && !processing_template_decl\n-\t      && allow_fields\n+\t      && (ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP\n \t      && TREE_CODE (TREE_TYPE (OMP_CLAUSE_DECL (c))) == REFERENCE_TYPE)\n \t    {\n \t      t = OMP_CLAUSE_DECL (c);\n@@ -6972,7 +6976,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n-\t  field_ok = allow_fields;\n+\t  field_ok = (ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP;\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (!type_dependent_expression_p (t))\n \t    {\n@@ -7112,7 +7116,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n \t  need_implicitly_determined = true;\n \t  break;\n \tcase OMP_CLAUSE_LINEAR:\n-\t  if (!declare_simd)\n+\t  if (ort != C_ORT_OMP_DECLARE_SIMD)\n \t    need_implicitly_determined = true;\n \t  else if (OMP_CLAUSE_LINEAR_VARIABLE_STRIDE (c)\n \t\t   && !bitmap_bit_p (&map_head,\n@@ -8342,7 +8346,7 @@ finish_omp_for (location_t locus, enum tree_code code, tree declv,\n       OMP_CLAUSE_OPERAND (c, 0)\n \t= cilk_for_number_of_iterations (omp_for);\n       OMP_CLAUSE_CHAIN (c) = clauses;\n-      OMP_PARALLEL_CLAUSES (omp_par) = finish_omp_clauses (c, false);\n+      OMP_PARALLEL_CLAUSES (omp_par) = finish_omp_clauses (c, C_ORT_CILK);\n       add_stmt (omp_par);\n       return omp_par;\n     }"}]}