{"sha": "8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiNDEwMjhmZTQzZGZjMmE5YzhjMmE0OWRlZWZiNzY5ZmMxZjVlNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:32:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:32:25Z"}, "message": "Replace REAL_VALUES_LESS with real_less\n\nThis patch continues the removal of real-related macros by\nreplacing REAL_VALUES_LESS with real_less.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/ada/\n\t* gcc-interface/trans.c (convert_with_check): Use real_less instead\n\tof REAL_VALUES_LESS.\n\ngcc/\n\t* doc/tm.texi.in (REAL_VALUES_LESS): Delete.\n\t* doc/tm.texi: Regenerate.\n\t* real.h (real_less): Declare.\n\t(REAL_VALUES_LESS): Delete.\n\t* real.c (real_less): New function.\n\t(real_compare): Use it.\n\t* config/m68k/m68k.c (floating_exact_log2): Use real_less instead\n\tof REAL_VALUES_LESS.\n\t* config/microblaze/microblaze.c (microblaze_const_double_ok):\n\tLikewise.\n\t* fold-const.c (fold_convert_const_int_from_real): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\t(simplify_const_relational_operation): Likewise.\n\t* tree-call-cdce.c (check_pow): Likewise.\n\t(gen_conditions_for_pow_cst_base): Likewise.\n\nFrom-SVN: r228475", "tree": {"sha": "59a7bf6d45465bd7aba6bc0b93caa118f046c666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59a7bf6d45465bd7aba6bc0b93caa118f046c666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a25c6b1a128110a23c67f4466329263103228b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a25c6b1a128110a23c67f4466329263103228b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a25c6b1a128110a23c67f4466329263103228b2"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "0909386c6c17a421bd713d842c7dccf742f68cff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -1,3 +1,21 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/tm.texi.in (REAL_VALUES_LESS): Delete.\n+\t* doc/tm.texi: Regenerate.\n+\t* real.h (real_less): Declare.\n+\t(REAL_VALUES_LESS): Delete.\n+\t* real.c (real_less): New function.\n+\t(real_compare): Use it.\n+\t* config/m68k/m68k.c (floating_exact_log2): Use real_less instead\n+\tof REAL_VALUES_LESS.\n+\t* config/microblaze/microblaze.c (microblaze_const_double_ok):\n+\tLikewise.\n+\t* fold-const.c (fold_convert_const_int_from_real): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\t(simplify_const_relational_operation): Likewise.\n+\t* tree-call-cdce.c (check_pow): Likewise.\n+\t(gen_conditions_for_pow_cst_base): Likewise.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* real.h (REAL_VALUES_IDENTICAL): Delete."}, {"sha": "54c2f5c7d8877659a1f9fe8fe7294fc1a9553432", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc-interface/trans.c (convert_with_check): Use real_less instead\n+\tof REAL_VALUES_LESS.\n+\n 2015-10-02  Doug Rupp  <rupp@adacore.com>\n             Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "9838da01189bbb3e8e4f66de8d47036ef447ffd4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -8999,8 +8999,8 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n       if (INTEGRAL_TYPE_P (gnu_in_basetype)\n \t  ? tree_int_cst_lt (gnu_in_lb, gnu_out_lb)\n \t  : (FLOAT_TYPE_P (gnu_base_type)\n-\t     ? REAL_VALUES_LESS (TREE_REAL_CST (gnu_in_lb),\n-\t\t\t\t TREE_REAL_CST (gnu_out_lb))\n+\t     ? real_less (&TREE_REAL_CST (gnu_in_lb),\n+\t\t\t  &TREE_REAL_CST (gnu_out_lb))\n \t     : 1))\n \tgnu_cond\n \t  = invert_truthvalue\n@@ -9011,8 +9011,8 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n       if (INTEGRAL_TYPE_P (gnu_in_basetype)\n \t  ? tree_int_cst_lt (gnu_out_ub, gnu_in_ub)\n \t  : (FLOAT_TYPE_P (gnu_base_type)\n-\t     ? REAL_VALUES_LESS (TREE_REAL_CST (gnu_out_ub),\n-\t\t\t\t TREE_REAL_CST (gnu_in_lb))\n+\t     ? real_less (&TREE_REAL_CST (gnu_out_ub),\n+\t\t\t  &TREE_REAL_CST (gnu_in_lb))\n \t     : 1))\n \tgnu_cond\n \t  = build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node, gnu_cond,"}, {"sha": "74de9835f15356b73908fd4b0b47a17a3c8f431a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -4365,7 +4365,7 @@ floating_exact_log2 (rtx x)\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n \n-  if (REAL_VALUES_LESS (r, dconst1))\n+  if (real_less (&r, &dconst1))\n     return 0;\n \n   exp = real_exponent (&r);"}, {"sha": "9efa7397203ce992cbef830686727776d9c7d0fd", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -280,12 +280,12 @@ microblaze_const_double_ok (rtx op, machine_mode mode)\n \n   if (mode == DFmode)\n     {\n-      if (REAL_VALUES_LESS (d, dfhigh) && REAL_VALUES_LESS (dflow, d))\n+      if (real_less (&d, &dfhigh) && real_less (&dflow, &d))\n \treturn 1;\n     }\n   else\n     {\n-      if (REAL_VALUES_LESS (d, sfhigh) && REAL_VALUES_LESS (sflow, d))\n+      if (real_less (&d, &sfhigh) && real_less (&sflow, &d))\n \treturn 1;\n     }\n "}, {"sha": "f6a0b5dd968d0ef667e48c35f21fb82dc9a15fdd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -9708,10 +9708,6 @@ array of @code{HOST_WIDE_INT}, but all code should treat it as an opaque\n quantity.\n @end defmac\n \n-@deftypefn Macro int REAL_VALUES_LESS (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Tests whether @var{x} is less than @var{y}.\n-@end deftypefn\n-\n @deftypefn Macro HOST_WIDE_INT REAL_VALUE_FIX (REAL_VALUE_TYPE @var{x})\n Truncates @var{x} to a signed integer, rounding toward zero.\n @end deftypefn"}, {"sha": "7fae1ca66e492b2982b3d0f409ec9d75216dfaea", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -7131,10 +7131,6 @@ array of @code{HOST_WIDE_INT}, but all code should treat it as an opaque\n quantity.\n @end defmac\n \n-@deftypefn Macro int REAL_VALUES_LESS (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Tests whether @var{x} is less than @var{y}.\n-@end deftypefn\n-\n @deftypefn Macro HOST_WIDE_INT REAL_VALUE_FIX (REAL_VALUE_TYPE @var{x})\n Truncates @var{x} to a signed integer, rounding toward zero.\n @end deftypefn"}, {"sha": "2851a291b998f25547dca66e06ae8fc427e548ad", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -1877,7 +1877,7 @@ fold_convert_const_int_from_real (enum tree_code code, tree type, const_tree arg\n     {\n       tree lt = TYPE_MIN_VALUE (type);\n       REAL_VALUE_TYPE l = real_value_from_int_cst (NULL_TREE, lt);\n-      if (REAL_VALUES_LESS (r, l))\n+      if (real_less (&r, &l))\n \t{\n \t  overflow = true;\n \t  val = lt;\n@@ -1890,7 +1890,7 @@ fold_convert_const_int_from_real (enum tree_code code, tree type, const_tree arg\n       if (ut)\n \t{\n \t  REAL_VALUE_TYPE u = real_value_from_int_cst (NULL_TREE, ut);\n-\t  if (REAL_VALUES_LESS (u, r))\n+\t  if (real_less (&u, &r))\n \t    {\n \t      overflow = true;\n \t      val = ut;"}, {"sha": "49d6739eddd659cc82f07dc8e88506ead68c7efc", "filename": "gcc/real.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -1086,6 +1086,14 @@ real_equal (const REAL_VALUE_TYPE *op0, const REAL_VALUE_TYPE *op1)\n   return do_compare (op0, op1, -1) == 0;\n }\n \n+/* Return whether OP0 < OP1.  */\n+\n+bool\n+real_less (const REAL_VALUE_TYPE *op0, const REAL_VALUE_TYPE *op1)\n+{\n+  return do_compare (op0, op1, 1) < 0;\n+}\n+\n bool\n real_compare (int icode, const REAL_VALUE_TYPE *op0,\n \t      const REAL_VALUE_TYPE *op1)\n@@ -1095,7 +1103,7 @@ real_compare (int icode, const REAL_VALUE_TYPE *op0,\n   switch (code)\n     {\n     case LT_EXPR:\n-      return do_compare (op0, op1, 1) < 0;\n+      return real_less (op0, op1);\n     case LE_EXPR:\n       return do_compare (op0, op1, 1) <= 0;\n     case GT_EXPR:"}, {"sha": "be429b515991411f02fc25b857f5c37923bd8c42", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -250,6 +250,7 @@ extern bool real_isnegzero (const REAL_VALUE_TYPE *);\n /* Test relationships between reals.  */\n extern bool real_identical (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n extern bool real_equal (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n+extern bool real_less (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n /* Extend or truncate to a new mode.  */\n extern void real_convert (REAL_VALUE_TYPE *, machine_mode,\n@@ -333,8 +334,6 @@ extern const struct real_format arm_half_format;\n #define REAL_ARITHMETIC(value, code, d1, d2) \\\n   real_arithmetic (&(value), code, &(d1), &(d2))\n \n-#define REAL_VALUES_LESS(x, y)\t\treal_compare (LT_EXPR, &(x), &(y))\n-\n /* Determine whether a floating-point value X is infinite.  */\n #define REAL_VALUE_ISINF(x)\t\treal_isinf (&(x))\n "}, {"sha": "9f791a7f7742112eb9cff5a006546518bc641879", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -1862,13 +1862,13 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t  /* Test against the signed upper bound.  */\n \t  wmax = wi::max_value (width, SIGNED);\n \t  real_from_integer (&t, VOIDmode, wmax, SIGNED);\n-\t  if (REAL_VALUES_LESS (t, x))\n+\t  if (real_less (&t, &x))\n \t    return immed_wide_int_const (wmax, mode);\n \n \t  /* Test against the signed lower bound.  */\n \t  wmin = wi::min_value (width, SIGNED);\n \t  real_from_integer (&t, VOIDmode, wmin, SIGNED);\n-\t  if (REAL_VALUES_LESS (x, t))\n+\t  if (real_less (&x, &t))\n \t    return immed_wide_int_const (wmin, mode);\n \n \t  return immed_wide_int_const (real_to_integer (&x, &fail, width), mode);\n@@ -1881,7 +1881,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t  /* Test against the unsigned upper bound.  */\n \t  wmax = wi::max_value (width, UNSIGNED);\n \t  real_from_integer (&t, VOIDmode, wmax, UNSIGNED);\n-\t  if (REAL_VALUES_LESS (t, x))\n+\t  if (real_less (&t, &x))\n \t    return immed_wide_int_const (wmax, mode);\n \n \t  return immed_wide_int_const (real_to_integer (&x, &fail, width),\n@@ -4943,7 +4943,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \n       return comparison_result (code,\n \t\t\t\t(real_equal (&d0, &d1) ? CMP_EQ :\n-\t\t\t\t REAL_VALUES_LESS (d0, d1) ? CMP_LT : CMP_GT));\n+\t\t\t\t real_less (&d0, &d1) ? CMP_LT : CMP_GT));\n     }\n \n   /* Otherwise, see if the operands are both integers.  */"}, {"sha": "112a3250c40075f23acbc6437652255d475b9cd8", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=8cb41028fe43dfc2a9c8c2a49deefb769fc1f5e4", "patch": "@@ -201,10 +201,10 @@ check_pow (gcall *pow_call)\n       REAL_VALUE_TYPE bcv = TREE_REAL_CST (base);\n       if (real_equal (&bcv, &dconst1))\n         return false;\n-      if (REAL_VALUES_LESS (bcv, dconst1))\n+      if (real_less (&bcv, &dconst1))\n         return false;\n       real_from_integer (&mv, TYPE_MODE (TREE_TYPE (base)), 256, UNSIGNED);\n-      if (REAL_VALUES_LESS (mv, bcv))\n+      if (real_less (&mv, &bcv))\n         return false;\n       return true;\n     }\n@@ -421,9 +421,9 @@ gen_conditions_for_pow_cst_base (tree base, tree expn,\n   REAL_VALUE_TYPE mv;\n   REAL_VALUE_TYPE bcv = TREE_REAL_CST (base);\n   gcc_assert (!real_equal (&bcv, &dconst1)\n-              && !REAL_VALUES_LESS (bcv, dconst1));\n+              && !real_less (&bcv, &dconst1));\n   real_from_integer (&mv, TYPE_MODE (TREE_TYPE (base)), 256, UNSIGNED);\n-  gcc_assert (!REAL_VALUES_LESS (mv, bcv));\n+  gcc_assert (!real_less (&mv, &bcv));\n \n   exp_domain = get_domain (0, false, false,\n                            127, true, false);"}]}