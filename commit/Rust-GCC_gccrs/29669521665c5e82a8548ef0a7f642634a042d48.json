{"sha": "29669521665c5e82a8548ef0a7f642634a042d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2Njk1MjE2NjVjNWU4MmE4NTQ4ZWYwYTdmNjQyNjM0YTA0MmQ0OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-08T00:37:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-08T00:37:08Z"}, "message": "libstdc++: define std::common_comparison_category for C++20\n\n\t* libsupc++/compare (common_comparison_category)\n\t(common_comparison_category_t): Define for C++20.\n\t* testsuite/18_support/comparisons/common/1.cc: New test.\n\nFrom-SVN: r277943", "tree": {"sha": "1de0f458eeb597d38469f4cd353b8e1a119f55a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de0f458eeb597d38469f4cd353b8e1a119f55a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29669521665c5e82a8548ef0a7f642634a042d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29669521665c5e82a8548ef0a7f642634a042d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29669521665c5e82a8548ef0a7f642634a042d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29669521665c5e82a8548ef0a7f642634a042d48/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780bc8922ba77cec3de90ce86eefedf54ad80c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780bc8922ba77cec3de90ce86eefedf54ad80c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780bc8922ba77cec3de90ce86eefedf54ad80c8f"}], "stats": {"total": 151, "additions": 133, "deletions": 18}, "files": [{"sha": "65e55d097a64dbb24c6b7c0265de8a2e251dc229", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29669521665c5e82a8548ef0a7f642634a042d48", "patch": "@@ -1,5 +1,9 @@\n 2019-11-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* libsupc++/compare (common_comparison_category)\n+\t(common_comparison_category_t): Define for C++20.\n+\t* testsuite/18_support/comparisons/common/1.cc: New test.\n+\n \t* include/bits/stl_algo.h (for_each_n): Handle negative count.\n \t* testsuite/25_algorithms/for_each/for_each_n_debug.cc: New test.\n "}, {"sha": "94728e29de80a1c51e2dbd9aa93aa15bdf464b0e", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=29669521665c5e82a8548ef0a7f642634a042d48", "patch": "@@ -385,18 +385,81 @@ namespace std\n   is_gteq(partial_ordering __cmp) noexcept\n   { return __cmp >= 0; }\n \n+#if __cpp_lib_concepts\n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      inline constexpr unsigned __cmp_cat_id = 1;\n+    template<>\n+      inline constexpr unsigned __cmp_cat_id<strong_ordering> = 2;\n+    template<>\n+      inline constexpr unsigned __cmp_cat_id<weak_ordering> = 4;\n+    template<>\n+      inline constexpr unsigned __cmp_cat_id<partial_ordering> = 8;\n+\n+    template<typename... _Ts>\n+      constexpr unsigned __cmp_cat_ids()\n+      { return (__cmp_cat_id<_Ts> | ...); }\n+\n+    template<unsigned>\n+      struct __common_cmp_cat;\n+\n+    // If any Ti is not a comparison category type, U is void.\n+    template<unsigned _Bits>\n+      requires ((_Bits & 1) == 1)\n+      struct __common_cmp_cat<_Bits> { using type = void; };\n+\n+    // Otherwise, if at least one Ti is std::partial_ordering,\n+    // U is std::partial_ordering.\n+    template<unsigned _Bits>\n+      requires ((_Bits & 0b1001) == 0b1000)\n+      struct __common_cmp_cat<_Bits> { using type = partial_ordering; };\n+\n+    // Otherwise, if at least one Ti is std::weak_ordering,\n+    // U is std::weak_ordering.\n+    template<unsigned _Bits>\n+      requires ((_Bits & 0b1101) == 0b0100)\n+      struct __common_cmp_cat<_Bits> { using type = weak_ordering; };\n+\n+    // Otherwise, U is std::strong_ordering.\n+    template<>\n+      struct __common_cmp_cat<0b0010> { using type = strong_ordering; };\n+  } // namespace __detail\n+\n   // [cmp.common], common comparison category type\n   template<typename... _Ts>\n     struct common_comparison_category\n     {\n-      // using type = TODO\n+      using type\n+\t= __detail::__common_cmp_cat<__detail::__cmp_cat_ids<_Ts...>()>::type;\n     };\n \n+  // Partial specializations for one and zero argument cases.\n+\n+  template<typename _Tp>\n+    struct common_comparison_category<_Tp>\n+    { using type = void; };\n+\n+  template<>\n+    struct common_comparison_category<partial_ordering>\n+    { using type = partial_ordering; };\n+\n+  template<>\n+    struct common_comparison_category<weak_ordering>\n+    { using type = weak_ordering; };\n+\n+  template<>\n+    struct common_comparison_category<strong_ordering>\n+    { using type = strong_ordering; };\n+\n+  template<>\n+    struct common_comparison_category<>\n+    { using type = strong_ordering; };\n+\n   template<typename... _Ts>\n     using common_comparison_category_t\n       = typename common_comparison_category<_Ts...>::type;\n \n-#if __cpp_lib_concepts\n   namespace __detail\n   {\n     template<typename _Tp, typename _Cat>\n@@ -493,22 +556,22 @@ namespace std\n     template<typename _Tp, typename _Up>\n       requires (three_way_comparable_with<_Tp, _Up>\n \t  || __detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n-    constexpr auto\n-    operator()(_Tp&& __t, _Up&& __u) const noexcept\n-    {\n-      if constexpr (__detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n-\t{\n-\t  auto __pt = static_cast<const volatile void*>(__t);\n-\t  auto __pu = static_cast<const volatile void*>(__u);\n-\t  if (__builtin_is_constant_evaluated())\n-\t    return __pt <=> __pu;\n-\t  auto __it = reinterpret_cast<__UINTPTR_TYPE__>(__pt);\n-\t  auto __iu = reinterpret_cast<__UINTPTR_TYPE__>(__pu);\n-\t  return __it <=> __iu;\n-\t}\n-      else\n-\treturn static_cast<_Tp&&>(__t) <=> static_cast<_Up&&>(__u);\n-    }\n+      constexpr auto\n+      operator()(_Tp&& __t, _Up&& __u) const noexcept\n+      {\n+\tif constexpr (__detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n+\t  {\n+\t    auto __pt = static_cast<const volatile void*>(__t);\n+\t    auto __pu = static_cast<const volatile void*>(__u);\n+\t    if (__builtin_is_constant_evaluated())\n+\t      return __pt <=> __pu;\n+\t    auto __it = reinterpret_cast<__UINTPTR_TYPE__>(__pt);\n+\t    auto __iu = reinterpret_cast<__UINTPTR_TYPE__>(__pu);\n+\t    return __it <=> __iu;\n+\t  }\n+\telse\n+\t  return static_cast<_Tp&&>(__t) <=> static_cast<_Up&&>(__u);\n+      }\n \n     using is_transparent = void;\n   };"}, {"sha": "015a8acae97e43e432842b29375bc9ee0a4c4373", "filename": "libstdc++-v3/testsuite/18_support/comparisons/common/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcommon%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29669521665c5e82a8548ef0a7f642634a042d48/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcommon%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcommon%2F1.cc?ref=29669521665c5e82a8548ef0a7f642634a042d48", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <compare>\n+\n+template<typename Cat, typename... T>\n+constexpr bool check()\n+{\n+  return std::same_as<Cat, std::common_comparison_category_t<T...>>;\n+}\n+\n+using std::partial_ordering;\n+using std::weak_ordering;\n+using std::strong_ordering;\n+\n+static_assert(check<strong_ordering>());\n+static_assert(check<void, int>());\n+static_assert(check<void, int, int>());\n+static_assert(check<void, weak_ordering, int>());\n+static_assert(check<void, int, partial_ordering>());\n+static_assert(check<partial_ordering, partial_ordering>());\n+static_assert(check<partial_ordering, weak_ordering, partial_ordering>());\n+\n+using PO = std::partial_ordering;\n+using WO = std::weak_ordering;\n+using SO = std::strong_ordering;\n+\n+static_assert(check<PO, SO, PO, SO, SO>());\n+static_assert(check<PO, SO, PO, SO, WO>());\n+static_assert(check<WO, SO, WO, SO, WO>());\n+static_assert(check<SO, SO, SO, SO, SO>());"}]}