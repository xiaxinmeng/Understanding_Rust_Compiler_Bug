{"sha": "6064858051d6e07bb89f3384c0d828f07c576c7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2NDg1ODA1MWQ2ZTA3YmI4OWYzMzg0YzBkODI4ZjA3YzU3NmM3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-05-09T13:48:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-05-09T13:48:58Z"}, "message": "PR c++/70167 - array prvalue treated as lvalue\n\n\t* cp-tree.h (CONSTRUCTOR_C99_COMPOUND_LITERAL): New.\n\t(enum fcl_t): New.\n\t* semantics.c (finish_compound_literal): Add fcl_context parameter.\n\tOnly make a static variable for C99 syntax.\n\t* parser.c (cp_parser_postfix_expression): Pass it.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* call.c (extend_ref_init_temps): Set\n\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n\nFrom-SVN: r247793", "tree": {"sha": "815f68ce3b1ebd2059c5d426b0319427a127795a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815f68ce3b1ebd2059c5d426b0319427a127795a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6064858051d6e07bb89f3384c0d828f07c576c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6064858051d6e07bb89f3384c0d828f07c576c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6064858051d6e07bb89f3384c0d828f07c576c7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6064858051d6e07bb89f3384c0d828f07c576c7a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c38fbc648dc7bfa73ef703d1584196f64dcc151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c38fbc648dc7bfa73ef703d1584196f64dcc151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c38fbc648dc7bfa73ef703d1584196f64dcc151"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "a5990e2a6c25de8ed91ade8f3d1abe134523f98a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -1,3 +1,15 @@\n+2017-05-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70167 - array prvalue treated as lvalue\n+\t* cp-tree.h (CONSTRUCTOR_C99_COMPOUND_LITERAL): New.\n+\t(enum fcl_t): New.\n+\t* semantics.c (finish_compound_literal): Add fcl_context parameter.\n+\tOnly make a static variable for C99 syntax.\n+\t* parser.c (cp_parser_postfix_expression): Pass it.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* call.c (extend_ref_init_temps): Set\n+\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n+\n 2017-05-09  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-lang.c (get_global_decls, cxx_pushdecl): New."}, {"sha": "dee236e703d228d88b491c748ae2d2b88ad4c557", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -10516,6 +10516,9 @@ extend_ref_init_temps (tree decl, tree init, vec<tree, va_gc> **cleanups)\n \t      FOR_EACH_VEC_SAFE_ELT (elts, i, p)\n \t\tp->value = extend_ref_init_temps (decl, p->value, cleanups);\n \t    }\n+\t  recompute_constructor_flags (ctor);\n+\t  if (decl_maybe_constant_var_p (decl) && TREE_CONSTANT (ctor))\n+\t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = true;\n \t}\n     }\n "}, {"sha": "100f85c126508e15798fa2a3f76452fcfa085dba", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -369,6 +369,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       DECL_NON_TRIVIALLY_INITIALIZED_P (in VAR_DECL)\n       CALL_EXPR_ORDERED_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n       DECLTYPE_FOR_REF_CAPTURE (in DECLTYPE_TYPE)\n+      CONSTUCTOR_C99_COMPOUND_LITERAL (in CONSTRUCTOR)\n    4: TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  CALL_EXPR, or FIELD_DECL).\n       IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n@@ -3898,6 +3899,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CONSTRUCTOR_MUTABLE_POISON(NODE) \\\n   (TREE_LANG_FLAG_2 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if this typed CONSTRUCTOR represents C99 compound-literal syntax rather\n+   than C++11 functional cast syntax.  */\n+#define CONSTRUCTOR_C99_COMPOUND_LITERAL(NODE) \\\n+  (TREE_LANG_FLAG_3 (CONSTRUCTOR_CHECK (NODE)))\n+\n #define DIRECT_LIST_INIT_P(NODE) \\\n    (BRACE_ENCLOSED_INITIALIZER_P (NODE) && CONSTRUCTOR_IS_DIRECT_INIT (NODE))\n \n@@ -6483,7 +6489,10 @@ extern tree finish_this_expr\t\t\t(void);\n extern tree finish_pseudo_destructor_expr       (tree, tree, tree, location_t);\n extern cp_expr finish_unary_op_expr\t\t(location_t, enum tree_code, cp_expr,\n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree finish_compound_literal\t\t(tree, tree, tsubst_flags_t);\n+/* Whether this call to finish_compound_literal represents a C++11 functional\n+   cast or a C99 compound literal.  */\n+enum fcl_t { fcl_functional, fcl_c99 };\n+extern tree finish_compound_literal\t\t(tree, tree, tsubst_flags_t, fcl_t = fcl_functional);\n extern tree finish_fname\t\t\t(tree);\n extern void finish_translation_unit\t\t(void);\n extern tree finish_template_type_parm\t\t(tree, tree);"}, {"sha": "19514525d2f1aae8d6af70d37fce68fb3fe5b582", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -6770,7 +6770,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t/* Form the representation of the compound-literal.  */\n \t\tpostfix_expression\n \t\t  = finish_compound_literal (type, initializer,\n-\t\t\t\t\t     tf_warning_or_error);\n+\t\t\t\t\t     tf_warning_or_error, fcl_c99);\n \t\tpostfix_expression.set_location (initializer.get_location ());\n \t\tbreak;\n \t      }\n@@ -26834,7 +26834,7 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \ttype = TREE_TYPE (type);\n \n       cast = finish_compound_literal (type, expression_list,\n-\t\t\t\t      tf_warning_or_error);\n+\t\t\t\t      tf_warning_or_error, fcl_functional);\n       /* Create a location of the form:\n \t    type_name{i, f}\n \t    ^~~~~~~~~~~~~~~"}, {"sha": "a4a0d83503a7d204f43e38cc5ce783d7647f5048", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -17709,7 +17709,12 @@ tsubst_copy_and_build (tree t,\n \tCONSTRUCTOR_IS_DIRECT_INIT (r) = CONSTRUCTOR_IS_DIRECT_INIT (t);\n \n \tif (TREE_HAS_CONSTRUCTOR (t))\n-\t  RETURN (finish_compound_literal (type, r, complain));\n+\t  {\n+\t    fcl_t cl = fcl_functional;\n+\t    if (CONSTRUCTOR_C99_COMPOUND_LITERAL (t))\n+\t      cl = fcl_c99;\n+\t    RETURN (finish_compound_literal (type, r, complain, cl));\n+\t  }\n \n \tTREE_TYPE (r) = type;\n \tRETURN (r);"}, {"sha": "238dfff4743551ee0435e5bf7479a722e2fa02b7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -2647,12 +2647,14 @@ finish_unary_op_expr (location_t op_loc, enum tree_code code, cp_expr expr,\n   return result;\n }\n \n-/* Finish a compound-literal expression.  TYPE is the type to which\n-   the CONSTRUCTOR in COMPOUND_LITERAL is being cast.  */\n+/* Finish a compound-literal expression or C++11 functional cast with aggregate\n+   initializer.  TYPE is the type to which the CONSTRUCTOR in COMPOUND_LITERAL\n+   is being cast.  */\n \n tree\n finish_compound_literal (tree type, tree compound_literal,\n-\t\t\t tsubst_flags_t complain)\n+\t\t\t tsubst_flags_t complain,\n+\t\t\t fcl_t fcl_context)\n {\n   if (type == error_mark_node)\n     return error_mark_node;\n@@ -2661,7 +2663,7 @@ finish_compound_literal (tree type, tree compound_literal,\n     {\n       compound_literal\n \t= finish_compound_literal (TREE_TYPE (type), compound_literal,\n-\t\t\t\t   complain);\n+\t\t\t\t   complain, fcl_context);\n       return cp_build_c_cast (type, compound_literal, complain);\n     }\n \n@@ -2682,6 +2684,8 @@ finish_compound_literal (tree type, tree compound_literal,\n       TREE_TYPE (compound_literal) = type;\n       /* Mark the expression as a compound literal.  */\n       TREE_HAS_CONSTRUCTOR (compound_literal) = 1;\n+      if (fcl_context == fcl_c99)\n+\tCONSTRUCTOR_C99_COMPOUND_LITERAL (compound_literal) = 1;\n       return compound_literal;\n     }\n \n@@ -2717,10 +2721,17 @@ finish_compound_literal (tree type, tree compound_literal,\n   compound_literal = digest_init_flags (type, compound_literal, LOOKUP_NORMAL,\n \t\t\t\t\tcomplain);\n   if (TREE_CODE (compound_literal) == CONSTRUCTOR)\n-    TREE_HAS_CONSTRUCTOR (compound_literal) = true;\n+    {\n+      TREE_HAS_CONSTRUCTOR (compound_literal) = true;\n+      if (fcl_context == fcl_c99)\n+\tCONSTRUCTOR_C99_COMPOUND_LITERAL (compound_literal) = 1;\n+    }\n \n   /* Put static/constant array temporaries in static variables.  */\n+  /* FIXME all C99 compound literals should be variables rather than C++\n+     temporaries, unless they are used as an aggregate initializer.  */\n   if ((!at_function_scope_p () || CP_TYPE_CONST_P (type))\n+      && fcl_context == fcl_c99\n       && TREE_CODE (type) == ARRAY_TYPE\n       && !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)\n       && initializer_constant_valid_p (compound_literal, type))"}, {"sha": "fdfde0a3c60673f3518efc0228a9d3f48fcc3f60", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-array6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6064858051d6e07bb89f3384c0d828f07c576c7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array6.C?ref=6064858051d6e07bb89f3384c0d828f07c576c7a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/70167\n+// { dg-do compile { target c++11 } }\n+\n+template<class T, unsigned S> void f(T(&&)[S]) { }\n+\n+using arr = const int[2];\n+\n+int main()\n+{\n+  f(arr{1, 2});\n+}"}]}