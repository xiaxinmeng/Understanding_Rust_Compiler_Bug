{"sha": "c96b410243a383fb39a9c92f0632df9e60bb75c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2YjQxMDI0M2EzODNmYjM5YTljOTJmMDYzMmRmOWU2MGJiNzVjNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-18T06:43:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-18T06:43:38Z"}, "message": "re PR target/49411 ([4.6/4.7] ICE: unrecognizable insn with -mxop in _mm_roti_epi8 with negative number)\n\n\tPR target/49411\n\t* config/i386/i386.c (ix86_expand_multi_arg_builtins): If\n\tlast_arg_constant and last argument doesn't match its predicate,\n\tfor xop_vpermil2<mode>3 error out and for xop_rotl<mode>3\n\tif it is CONST_INT, mask it, otherwise expand using rotl<mode>3.\n\t(ix86_expand_sse_pcmpestr, ix86_expand_sse_pcmpistr): Fix\n\tspelling of error message.\n\t* config/i386/sse.md (sse4a_extrqi, sse4a_insertqi,\n\tvcvtps2ph, *vcvtps2ph, *vcvtps2ph_store, vcvtps2ph256): Use\n\tconst_0_to_255_operand instead of const_int_operand.\n\n\tRevert:\n\t2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/sse.md (blendbits): Remove mode attribute.\n\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Use const_int_operand\n\tinstead of const_0_to_<blendbits>_operand for operand 3 predicate.\n\tCheck integer value of operand 3 in insn constraint.\n\n\t* gcc.target/i386/testimm-1.c: New test.\n\t* gcc.target/i386/testimm-2.c: New test.\n\t* gcc.target/i386/testimm-3.c: New test.\n\t* gcc.target/i386/testimm-4.c: New test.\n\t* gcc.target/i386/testimm-5.c: New test.\n\t* gcc.target/i386/testimm-6.c: New test.\n\t* gcc.target/i386/testimm-7.c: New test.\n\t* gcc.target/i386/testimm-8.c: New test.\n\t* gcc.target/i386/xop-vpermil2px-2.c: New test.\n\t* gcc.target/i386/xop-rotate1-int.c: New test.\n\t* gcc.target/i386/xop-rotate2-int.c: New test.\n\nFrom-SVN: r175165", "tree": {"sha": "f0e31a8c58959324acc1421fc8531e571e53178c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e31a8c58959324acc1421fc8531e571e53178c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c96b410243a383fb39a9c92f0632df9e60bb75c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96b410243a383fb39a9c92f0632df9e60bb75c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c96b410243a383fb39a9c92f0632df9e60bb75c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96b410243a383fb39a9c92f0632df9e60bb75c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfe8601ce70a97d09e08e14e0ebd0f2ef4608d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe8601ce70a97d09e08e14e0ebd0f2ef4608d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe8601ce70a97d09e08e14e0ebd0f2ef4608d0f"}], "stats": {"total": 668, "additions": 651, "deletions": 17}, "files": [{"sha": "80431630bf5392d99f9f0f567257dca0160fe850", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -1,3 +1,24 @@\n+2011-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/49411\n+\t* config/i386/i386.c (ix86_expand_multi_arg_builtins): If\n+\tlast_arg_constant and last argument doesn't match its predicate,\n+\tfor xop_vpermil2<mode>3 error out and for xop_rotl<mode>3\n+\tif it is CONST_INT, mask it, otherwise expand using rotl<mode>3.\n+\t(ix86_expand_sse_pcmpestr, ix86_expand_sse_pcmpistr): Fix\n+\tspelling of error message.\n+\t* config/i386/sse.md (sse4a_extrqi, sse4a_insertqi,\n+\tvcvtps2ph, *vcvtps2ph, *vcvtps2ph_store, vcvtps2ph256): Use\n+\tconst_0_to_255_operand instead of const_int_operand.\n+\n+\tRevert:\n+\t2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (blendbits): Remove mode attribute.\n+\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Use const_int_operand\n+\tinstead of const_0_to_<blendbits>_operand for operand 3 predicate.\n+\tCheck integer value of operand 3 in insn constraint.\n+\n 2011-06-17  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR rtl-optimization/48542"}, {"sha": "6029010d90417bf89f905764aa6dfb2d13f34637", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -25566,16 +25566,61 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n       int adjust = (comparison_p) ? 1 : 0;\n       enum machine_mode mode = insn_data[icode].operand[i+adjust+1].mode;\n \n-      if (last_arg_constant && i == nargs-1)\n+      if (last_arg_constant && i == nargs - 1)\n \t{\n-\t  if (!CONST_INT_P (op))\n+\t  if (!insn_data[icode].operand[i + 1].predicate (op, mode))\n \t    {\n-\t      error (\"last argument must be an immediate\");\n-\t      return gen_reg_rtx (tmode);\n+\t      enum insn_code new_icode = icode;\n+\t      switch (icode)\n+\t\t{\n+\t\tcase CODE_FOR_xop_vpermil2v2df3:\n+\t\tcase CODE_FOR_xop_vpermil2v4sf3:\n+\t\tcase CODE_FOR_xop_vpermil2v4df3:\n+\t\tcase CODE_FOR_xop_vpermil2v8sf3:\n+\t\t  error (\"the last argument must be a 2-bit immediate\");\n+\t\t  return gen_reg_rtx (tmode);\n+\t\tcase CODE_FOR_xop_rotlv2di3:\n+\t\t  new_icode = CODE_FOR_rotlv2di3;\n+\t\t  goto xop_rotl;\n+\t\tcase CODE_FOR_xop_rotlv4si3:\n+\t\t  new_icode = CODE_FOR_rotlv4si3;\n+\t\t  goto xop_rotl;\n+\t\tcase CODE_FOR_xop_rotlv8hi3:\n+\t\t  new_icode = CODE_FOR_rotlv8hi3;\n+\t\t  goto xop_rotl;\n+\t\tcase CODE_FOR_xop_rotlv16qi3:\n+\t\t  new_icode = CODE_FOR_rotlv16qi3;\n+\t\txop_rotl:\n+\t\t  if (CONST_INT_P (op))\n+\t\t    {\n+\t\t      int mask = GET_MODE_BITSIZE (GET_MODE_INNER (tmode)) - 1;\n+\t\t      op = GEN_INT (INTVAL (op) & mask);\n+\t\t      gcc_checking_assert\n+\t\t\t(insn_data[icode].operand[i + 1].predicate (op, mode));\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      gcc_checking_assert\n+\t\t\t(nargs == 2\n+\t\t\t && insn_data[new_icode].operand[0].mode == tmode\n+\t\t\t && insn_data[new_icode].operand[1].mode == tmode\n+\t\t\t && insn_data[new_icode].operand[2].mode == mode\n+\t\t\t && insn_data[new_icode].operand[0].predicate\n+\t\t\t    == insn_data[icode].operand[0].predicate\n+\t\t\t && insn_data[new_icode].operand[1].predicate\n+\t\t\t    == insn_data[icode].operand[1].predicate);\n+\t\t      icode = new_icode;\n+\t\t      goto non_constant;\n+\t\t    }\n+\t\t  break;\n+\t\tdefault:\n+\t\t  gcc_unreachable ();\n+\t\t}\n \t    }\n \t}\n       else\n \t{\n+\tnon_constant:\n \t  if (VECTOR_MODE_P (mode))\n \t    op = safe_vector_operand (op, mode);\n \n@@ -25900,7 +25945,7 @@ ix86_expand_sse_pcmpestr (const struct builtin_description *d,\n \n   if (!insn_data[d->icode].operand[6].predicate (op4, modeimm))\n     {\n-      error (\"the fifth argument must be a 8-bit immediate\");\n+      error (\"the fifth argument must be an 8-bit immediate\");\n       return const0_rtx;\n     }\n \n@@ -25995,7 +26040,7 @@ ix86_expand_sse_pcmpistr (const struct builtin_description *d,\n \n   if (!insn_data[d->icode].operand[4].predicate (op2, modeimm))\n     {\n-      error (\"the third argument must be a 8-bit immediate\");\n+      error (\"the third argument must be an 8-bit immediate\");\n       return const0_rtx;\n     }\n "}, {"sha": "7abee333ef2005362287677d030dbc20e7c8842b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -188,6 +188,10 @@\n \n (define_mode_iterator FMAMODE [SF DF V4SF V2DF V8SF V4DF])\n \n+;; Mapping of immediate bits for blend instructions\n+(define_mode_attr blendbits\n+  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n+\n ;; Patterns whose name begins with \"sse{,2,3}_\" are invoked by intrinsics.\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -7707,8 +7711,8 @@\n (define_insn \"sse4a_extrqi\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n-                      (match_operand 2 \"const_int_operand\" \"\")\n-                      (match_operand 3 \"const_int_operand\" \"\")]\n+                      (match_operand 2 \"const_0_to_255_operand\" \"\")\n+                      (match_operand 3 \"const_0_to_255_operand\" \"\")]\n                      UNSPEC_EXTRQI))]\n   \"TARGET_SSE4A\"\n   \"extrq\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -7732,8 +7736,8 @@\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n         \t      (match_operand:V2DI 2 \"register_operand\" \"x\")\n-                      (match_operand 3 \"const_int_operand\" \"\")\n-                      (match_operand 4 \"const_int_operand\" \"\")]\n+                      (match_operand 3 \"const_0_to_255_operand\" \"\")\n+                      (match_operand 4 \"const_0_to_255_operand\" \"\")]\n                      UNSPEC_INSERTQI))]\n   \"TARGET_SSE4A\"\n   \"insertq\\t{%4, %3, %2, %0|%0, %2, %3, %4}\"\n@@ -7766,9 +7770,8 @@\n \t(vec_merge:VF\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")\n \t  (match_operand:VF 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_int_operand\" \"\")))]\n-  \"TARGET_SSE4_1\n-   && IN_RANGE (INTVAL (operands[3]), 0, (1 << GET_MODE_NUNITS (<MODE>mode))-1)\"\n+\t  (match_operand:SI 3 \"const_0_to_<blendbits>_operand\" \"\")))]\n+  \"TARGET_SSE4_1\"\n   \"@\n    blend<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vblend<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -10327,7 +10330,7 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n \t(vec_concat:V8HI\n \t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"immediate_operand\" \"\")]\n+\t\t\t(match_operand:SI 2 \"const_0_to_255_operand\" \"\")]\n \t\t       UNSPEC_VCVTPS2PH)\n \t  (match_dup 3)))]\n   \"TARGET_F16C\"\n@@ -10337,7 +10340,7 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V8HI\n \t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t\t\t(match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t\t(match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t       UNSPEC_VCVTPS2PH)\n \t  (match_operand:V4HI 3 \"const0_operand\" \"\")))]\n   \"TARGET_F16C\"\n@@ -10349,7 +10352,7 @@\n (define_insn \"*vcvtps2ph_store\"\n   [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C\"\n   \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -10360,7 +10363,7 @@\n (define_insn \"vcvtps2ph256\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=xm\")\n \t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C\"\n   \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\""}, {"sha": "dc35df366c50a656df1857765f95a44c809d88e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -1,3 +1,18 @@\n+2011-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/49411\n+\t* gcc.target/i386/testimm-1.c: New test.\n+\t* gcc.target/i386/testimm-2.c: New test.\n+\t* gcc.target/i386/testimm-3.c: New test.\n+\t* gcc.target/i386/testimm-4.c: New test.\n+\t* gcc.target/i386/testimm-5.c: New test.\n+\t* gcc.target/i386/testimm-6.c: New test.\n+\t* gcc.target/i386/testimm-7.c: New test.\n+\t* gcc.target/i386/testimm-8.c: New test.\n+\t* gcc.target/i386/xop-vpermil2px-2.c: New test.\n+\t* gcc.target/i386/xop-rotate1-int.c: New test.\n+\t* gcc.target/i386/xop-rotate2-int.c: New test.\n+\n 2011-06-17  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/rv-func2.C: New."}, {"sha": "57276192e11bd9ab03ea30d9b7ea3380cdf0b333", "filename": "gcc/testsuite/gcc.target/i386/testimm-1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-1.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,94 @@\n+/* PR target/49411 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mf16c -maes -mpclmul\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test8bit (void)\n+{\n+  i1 = _mm_cmpistrm (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistri (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistra (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrc (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistro (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrs (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrz (i2, i3, 256);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cmpestrm (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestri (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestra (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrc (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestro (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrs (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrz (i2, k2, i3, k3, 256);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_blend_ps (b2, b3, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  k1 = _cvtss_sh (f1, 256);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm256_cvtps_ph (b2, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_dp_ps (b2, b3, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  e1 = _mm256_permute2f128_pd (e2, e3, 256);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute2f128_ps (b2, b3, 256);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  l1 = _mm256_permute2f128_si256 (l2, l3, 256);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute_ps (b2, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_aeskeygenassist_si128 (i2, 256);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_blend_epi16 (i2, i3, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_clmulepi64_si128 (i2, i3, 256);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cvtps_ph (a1, 256);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  d1 = _mm_dp_pd (d2, d3, 256);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_dp_ps (a2, a3, 256);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_insert_ps (a2, a3, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_mpsadbw_epu8 (i2, i3, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_permute_ps (a2, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_slli_si128 (i2, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_srli_si128 (i2, 256);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+}\n+\n+void\n+test5bit (void)\n+{\n+  d1 = _mm_cmp_sd (d2, d3, 32);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ss (a2, a3, 32);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  d1 = _mm_cmp_pd (d2, d3, 32);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ps (a2, a3, 32);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  e1 = _mm256_cmp_pd (e2, e3, 32);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  b1 = _mm256_cmp_ps (b2, b3, 32);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+}\n+\n+void\n+test4bit (void)\n+{\n+  d1 = _mm_round_pd (d2, 16);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  d1 = _mm_round_sd (d2, d3, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ps (a2, 16);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ss (a2, a2, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_blend_ps (a2, a3, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_blend_pd (e2, e3, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_round_pd (e2, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  b1 = _mm256_round_ps (b2, 16);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+}\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_blend_pd (d2, d3, 4);\t  /* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+}\n+\n+void\n+test1bit (void)\n+{\n+  d1 = _mm256_extractf128_pd (e2, 2);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  a1 = _mm256_extractf128_ps (b2, 2);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  i1 = _mm256_extractf128_si256 (l2, 2);  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  e1 = _mm256_insertf128_pd (e2, d1, 2);  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  b1 = _mm256_insertf128_ps (b2, a1, 2);  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  l1 = _mm256_insertf128_si256 (l2, i1, 2);/* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+}"}, {"sha": "3d5080920670f26887698b96fad682a88349abc7", "filename": "gcc/testsuite/gcc.target/i386/testimm-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-2.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,94 @@\n+/* PR target/49411 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mf16c -maes -mpclmul\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test8bit (void)\n+{\n+  i1 = _mm_cmpistrm (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistri (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistra (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrc (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistro (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrs (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrz (i2, i3, -10);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cmpestrm (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestri (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestra (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrc (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestro (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrs (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrz (i2, k2, i3, k3, -10);/* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_blend_ps (b2, b3, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  k1 = _cvtss_sh (f1, -10);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm256_cvtps_ph (b2, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_dp_ps (b2, b3, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  e1 = _mm256_permute2f128_pd (e2, e3, -10);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute2f128_ps (b2, b3, -10);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  l1 = _mm256_permute2f128_si256 (l2, l3, -10);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute_ps (b2, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_aeskeygenassist_si128 (i2, -10);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_blend_epi16 (i2, i3, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_clmulepi64_si128 (i2, i3, -10);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cvtps_ph (a1, -10);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  d1 = _mm_dp_pd (d2, d3, -10);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_dp_ps (a2, a3, -10);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_insert_ps (a2, a3, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_mpsadbw_epu8 (i2, i3, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_permute_ps (a2, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_slli_si128 (i2, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_srli_si128 (i2, -10);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+}\n+\n+void\n+test5bit (void)\n+{\n+  d1 = _mm_cmp_sd (d2, d3, -7);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ss (a2, a3, -7);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  d1 = _mm_cmp_pd (d2, d3, -7);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ps (a2, a3, -7);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  e1 = _mm256_cmp_pd (e2, e3, -7);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  b1 = _mm256_cmp_ps (b2, b3, -7);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+}\n+\n+void\n+test4bit (void)\n+{\n+  d1 = _mm_round_pd (d2, -7);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  d1 = _mm_round_sd (d2, d3, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ps (a2, -7);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ss (a2, a2, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_blend_ps (a2, a3, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_blend_pd (e2, e3, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_round_pd (e2, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  b1 = _mm256_round_ps (b2, -7);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+}\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_blend_pd (d2, d3, -1);\t  /* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+}\n+\n+void\n+test1bit (void)\n+{\n+  d1 = _mm256_extractf128_pd (e2, -1);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  a1 = _mm256_extractf128_ps (b2, -1);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  i1 = _mm256_extractf128_si256 (l2, -1); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  e1 = _mm256_insertf128_pd (e2, d1, -1); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  b1 = _mm256_insertf128_ps (b2, a1, -1); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  l1 = _mm256_insertf128_si256 (l2, i1, -1);/* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+}"}, {"sha": "3e4fea7feddfb314ea3dcdb0d8d8c5b34997bb31", "filename": "gcc/testsuite/gcc.target/i386/testimm-3.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-3.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,94 @@\n+/* PR target/49411 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mf16c -maes -mpclmul\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test8bit (void)\n+{\n+  i1 = _mm_cmpistrm (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistri (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistra (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrc (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistro (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrs (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpistrz (i2, i3, k4);\t  /* { dg-error \"the third argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cmpestrm (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestri (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestra (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrc (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestro (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrs (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  k1 = _mm_cmpestrz (i2, k2, i3, k3, k4); /* { dg-error \"the fifth argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_blend_ps (b2, b3, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  k1 = _cvtss_sh (f1, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm256_cvtps_ph (b2, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_dp_ps (b2, b3, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  e1 = _mm256_permute2f128_pd (e2, e3, k4);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute2f128_ps (b2, b3, k4);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  l1 = _mm256_permute2f128_si256 (l2, l3, k4);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  b1 = _mm256_permute_ps (b2, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_aeskeygenassist_si128 (i2, k4);/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_blend_epi16 (i2, i3, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_clmulepi64_si128 (i2, i3, k4); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_cvtps_ph (a1, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  d1 = _mm_dp_pd (d2, d3, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_dp_ps (a2, a3, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_insert_ps (a2, a3, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_mpsadbw_epu8 (i2, i3, k4);\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  a1 = _mm_permute_ps (a2, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_slli_si128 (i2, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_srli_si128 (i2, k4);\t\t  /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+}\n+\n+void\n+test5bit (void)\n+{\n+  d1 = _mm_cmp_sd (d2, d3, k4);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ss (a2, a3, k4);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  d1 = _mm_cmp_pd (d2, d3, k4);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  a1 = _mm_cmp_ps (a2, a3, k4);\t\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  e1 = _mm256_cmp_pd (e2, e3, k4);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+  b1 = _mm256_cmp_ps (b2, b3, k4);\t  /* { dg-error \"the last argument must be a 5-bit immediate\" } */\n+}\n+\n+void\n+test4bit (void)\n+{\n+  d1 = _mm_round_pd (d2, k4);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  d1 = _mm_round_sd (d2, d3, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ps (a2, k4);\t\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_round_ss (a2, a2, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  a1 = _mm_blend_ps (a2, a3, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_blend_pd (e2, e3, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  e1 = _mm256_round_pd (e2, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+  b1 = _mm256_round_ps (b2, k4);\t  /* { dg-error \"the last argument must be a 4-bit immediate\" } */\n+}\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_blend_pd (d2, d3, k4);\t  /* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+}\n+\n+void\n+test1bit (void)\n+{\n+  d1 = _mm256_extractf128_pd (e2, k4);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  a1 = _mm256_extractf128_ps (b2, k4);\t  /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  i1 = _mm256_extractf128_si256 (l2, k4); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  e1 = _mm256_insertf128_pd (e2, d1, k4); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  b1 = _mm256_insertf128_ps (b2, a1, k4); /* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+  l1 = _mm256_insertf128_si256 (l2, i1, k4);/* { dg-error \"the last argument must be a 1-bit immediate\" } */\n+}"}, {"sha": "2eaf4133886b4fbe0d6235850b149ea4bc2d5a90", "filename": "gcc/testsuite/gcc.target/i386/testimm-4.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-4.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,97 @@\n+/* PR target/49411 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O0 -mf16c -maes -mpclmul\" } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-require-effective-target vpclmul } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test8bit (void)\n+{\n+  i1 = _mm_cmpistrm (i2, i3, 255);\n+  k1 = _mm_cmpistri (i2, i3, 255);\n+  k1 = _mm_cmpistra (i2, i3, 255);\n+  k1 = _mm_cmpistrc (i2, i3, 255);\n+  k1 = _mm_cmpistro (i2, i3, 255);\n+  k1 = _mm_cmpistrs (i2, i3, 255);\n+  k1 = _mm_cmpistrz (i2, i3, 255);\n+  i1 = _mm_cmpestrm (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestri (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestra (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestrc (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestro (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestrs (i2, k2, i3, k3, 255);\n+  k1 = _mm_cmpestrz (i2, k2, i3, k3, 255);\n+  b1 = _mm256_blend_ps (b2, b3, 255);\n+  k1 = _cvtss_sh (f1, 255);\n+  i1 = _mm256_cvtps_ph (b2, 255);\n+  b1 = _mm256_dp_ps (b2, b3, 255);\n+  e1 = _mm256_permute2f128_pd (e2, e3, 255);\n+  b1 = _mm256_permute2f128_ps (b2, b3, 255);\n+  l1 = _mm256_permute2f128_si256 (l2, l3, 255);\n+  b1 = _mm256_permute_ps (b2, 255);\n+  i1 = _mm_aeskeygenassist_si128 (i2, 255);\n+  i1 = _mm_blend_epi16 (i2, i3, 255);\n+  i1 = _mm_clmulepi64_si128 (i2, i3, 255);\n+  i1 = _mm_cvtps_ph (a1, 255);\n+  d1 = _mm_dp_pd (d2, d3, 255);\n+  a1 = _mm_dp_ps (a2, a3, 255);\n+  a1 = _mm_insert_ps (a2, a3, 255);\n+  i1 = _mm_mpsadbw_epu8 (i2, i3, 255);\n+  a1 = _mm_permute_ps (a2, 255);\n+  i1 = _mm_slli_si128 (i2, 255);\n+  i1 = _mm_srli_si128 (i2, 255);\n+}\n+\n+void\n+test5bit (void)\n+{\n+  d1 = _mm_cmp_sd (d2, d3, 31);\n+  a1 = _mm_cmp_ss (a2, a3, 31);\n+  d1 = _mm_cmp_pd (d2, d3, 31);\n+  a1 = _mm_cmp_ps (a2, a3, 31);\n+  e1 = _mm256_cmp_pd (e2, e3, 31);\n+  b1 = _mm256_cmp_ps (b2, b3, 31);\n+}\n+\n+void\n+test4bit (void)\n+{\n+  d1 = _mm_round_pd (d2, 15);\n+  d1 = _mm_round_sd (d2, d3, 15);\n+  a1 = _mm_round_ps (a2, 15);\n+  a1 = _mm_round_ss (a2, a2, 15);\n+  a1 = _mm_blend_ps (a2, a3, 15);\n+  e1 = _mm256_blend_pd (e2, e3, 15);\n+  e1 = _mm256_round_pd (e2, 15);\n+  b1 = _mm256_round_ps (b2, 15);\n+}\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_blend_pd (d2, d3, 3);\n+}\n+\n+void\n+test1bit (void)\n+{\n+  d1 = _mm256_extractf128_pd (e2, 1);\n+  a1 = _mm256_extractf128_ps (b2, 1);\n+  i1 = _mm256_extractf128_si256 (l2, 1);\n+  e1 = _mm256_insertf128_pd (e2, d1, 1);\n+  b1 = _mm256_insertf128_ps (b2, a1, 1);\n+  l1 = _mm256_insertf128_si256 (l2, i1, 1);\n+}"}, {"sha": "67c152834f616c467ae7b4c5c98f0e24168647ad", "filename": "gcc/testsuite/gcc.target/i386/testimm-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-5.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/49411 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mf16c -maes -mpclmul\" } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-require-effective-target vpclmul } */\n+\n+#include \"testimm-4.c\""}, {"sha": "087a6ffa5d041860dfdbf3e6443aa6b40158b2ee", "filename": "gcc/testsuite/gcc.target/i386/testimm-6.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-6.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/49411 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mxop\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_permute2_pd (d2, d3, i1, 17);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  e1 = _mm256_permute2_pd (e2, e3, l1, 17);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  a1 = _mm_permute2_ps (a2, a3, i1, 17);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  b1 = _mm256_permute2_ps (b2, b3, l1, 17);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  d1 = _mm_permute2_pd (d2, d3, i1, k4);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  e1 = _mm256_permute2_pd (e2, e3, l1, k4);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  a1 = _mm_permute2_ps (a2, a3, i1, k4);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+  b1 = _mm256_permute2_ps (b2, b3, l1, k4);\t/* { dg-error \"the last argument must be a 2-bit immediate\" } */\n+}\n+\n+void\n+test2args (void)\n+{\n+  i1 = _mm_extracti_si64 (i2, 256, 0);\t\t/* { dg-error \"the next to last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_extracti_si64 (i2, 0, 256);\t\t/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_inserti_si64 (i2, i3, 256, 0);\t/* { dg-error \"the next to last argument must be an 8-bit immediate\" } */\n+  i2 = _mm_inserti_si64 (i2, i3, 0, 256);\t/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_extracti_si64 (i2, k4, 0);\t\t/* { dg-error \"the next to last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_extracti_si64 (i2, 0, k4);\t\t/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+  i1 = _mm_inserti_si64 (i2, i3, k4, 0);\t/* { dg-error \"the next to last argument must be an 8-bit immediate\" } */\n+  i2 = _mm_inserti_si64 (i2, i3, 0, k4);\t/* { dg-error \"the last argument must be an 8-bit immediate\" } */\n+}"}, {"sha": "9b16fc7f0e21d5325ac3b1b650b96913a0979b68", "filename": "gcc/testsuite/gcc.target/i386/testimm-7.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-7.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,46 @@\n+/* PR target/49411 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O0 -mxop\" } */\n+/* { dg-require-effective-target xop } */\n+\n+#include <x86intrin.h>\n+\n+__m128i i1, i2, i3, i4;\n+__m128 a1, a2, a3, a4;\n+__m128d d1, d2, d3, d4;\n+__m256i l1, l2, l3, l4;\n+__m256 b1, b2, b3, b4;\n+__m256d e1, e2, e3, e4;\n+__m64 m1, m2, m3, m4;\n+int k1, k2, k3, k4;\n+float f1, f2, f3, f4;\n+\n+void\n+test2bit (void)\n+{\n+  d1 = _mm_permute2_pd (d2, d3, i1, 3);\n+  e1 = _mm256_permute2_pd (e2, e3, l1, 3);\n+  a1 = _mm_permute2_ps (a2, a3, i1, 3);\n+  b1 = _mm256_permute2_ps (b2, b3, l1, 3);\n+  d1 = _mm_permute2_pd (d2, d3, i1, 0);\n+  e1 = _mm256_permute2_pd (e2, e3, l1, 0);\n+  a1 = _mm_permute2_ps (a2, a3, i1, 0);\n+  b1 = _mm256_permute2_ps (b2, b3, l1, 0);\n+}\n+\n+void\n+test2args (void)\n+{\n+  i1 = _mm_extracti_si64 (i2, 255, 0);\n+  i1 = _mm_extracti_si64 (i2, 0, 255);\n+  i1 = _mm_inserti_si64 (i2, i3, 255, 0);\n+  i2 = _mm_inserti_si64 (i2, i3, 0, 255);\n+  i1 = _mm_extracti_si64 (i2, 255, 255);\n+  i1 = _mm_extracti_si64 (i2, 255, 255);\n+  i1 = _mm_inserti_si64 (i2, i3, 255, 255);\n+  i2 = _mm_inserti_si64 (i2, i3, 255, 255);\n+  i1 = _mm_extracti_si64 (i2, 0, 0);\n+  i1 = _mm_extracti_si64 (i2, 0, 0);\n+  i1 = _mm_inserti_si64 (i2, i3, 0, 0);\n+  i2 = _mm_inserti_si64 (i2, i3, 0, 0);\n+}"}, {"sha": "5169763fe61a88331868cbd8e7a6041ade003db1", "filename": "gcc/testsuite/gcc.target/i386/testimm-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-8.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/49411 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mxop\" } */\n+/* { dg-require-effective-target xop } */\n+\n+#include \"testimm-7.c\""}, {"sha": "a58cd726b2b767afe60d2ab5010ccc431cf105f7", "filename": "gcc/testsuite/gcc.target/i386/xop-rotate1-int.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate1-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate1-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate1-int.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,63 @@\n+/* PR target/49411 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target xop } */\n+/* { dg-options \"-O2 -mxop\" } */\n+\n+#include \"xop-check.h\"\n+\n+#include <x86intrin.h>\n+\n+extern void abort (void);\n+\n+union\n+{\n+  __m128i v;\n+  unsigned char c[16];\n+  unsigned short s[8];\n+  unsigned int i[4];\n+  unsigned long long l[2];\n+} a, b, c, d;\n+\n+#define TEST1(F, N, S, SS) \\\n+do {\t\t\t\t\t\t\t\\\n+  for (i = 0; i < sizeof (a.F) / sizeof (a.F[0]); i++)\t\\\n+    a.F[i] = i * 17;\t\t\t\t\t\\\n+  s = _mm_set1_epi##SS (N);\t\t\t\t\\\n+  b.v = _mm_roti_epi##S (a.v, N);\t\t\t\\\n+  c.v = _mm_rot_epi##S (a.v, s);\t\t\t\\\n+  for (i = 0; i < sizeof (a.F) / sizeof (a.F[0]); i++)\t\\\n+    {\t\t\t\t\t\t\t\\\n+      int mask = __CHAR_BIT__ * sizeof (a.F[i]) - 1;\t\\\n+      d.F[i] = a.F[i] << (N & mask);\t\t\t\\\n+      if (N & mask)\t\t\t\t\t\\\n+\td.F[i] |= a.F[i] >> (mask + 1 - (N & mask));\t\\\n+      if (b.F[i] != c.F[i] || b.F[i] != d.F[i])\t\t\\\n+\tabort ();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+} while (0)\n+#define TEST(N) \\\n+  TEST1 (c, N, 8, 8);\t\t\t\t\t\\\n+  TEST1 (s, N, 16, 16);\t\t\t\t\t\\\n+  TEST1 (i, N, 32, 32);\t\t\t\t\t\\\n+  TEST1 (l, N, 64, 64x)\n+\n+volatile int n;\n+\n+static void\n+xop_test (void)\n+{\n+  unsigned int i;\n+  __m128i s;\n+\n+#ifndef NON_CONST\n+  TEST (5);\n+  TEST (-5);\n+  TEST (0);\n+  TEST (31);\n+#else\n+  n = 5; TEST (n);\n+  n = -5; TEST (n);\n+  n = 0; TEST (n);\n+  n = 31; TEST (n);\n+#endif\n+}"}, {"sha": "634a51a84429f86753068ed31f6c760b0f6ac53e", "filename": "gcc/testsuite/gcc.target/i386/xop-rotate2-int.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate2-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96b410243a383fb39a9c92f0632df9e60bb75c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate2-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-rotate2-int.c?ref=c96b410243a383fb39a9c92f0632df9e60bb75c4", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/49411 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target xop } */\n+/* { dg-options \"-O2 -mxop\" } */\n+\n+#define NON_CONST 1\n+#include \"xop-rotate1-int.c\""}]}