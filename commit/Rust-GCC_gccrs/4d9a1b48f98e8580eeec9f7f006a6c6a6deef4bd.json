{"sha": "4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5YTFiNDhmOThlODU4MGVlZWM5ZjdmMDA2YTZjNmE2ZGVlZjRiZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@midnite.ec.rhno.columbia.edu", "date": "1999-02-15T14:04:21Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-02-15T14:04:21Z"}, "message": "c-common.c (UNGETC [USE_CPPLIB=1]): Do nothing if c is EOF.\n\n1999-02-15 16:59 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n\t* c-common.c (UNGETC [USE_CPPLIB=1]): Do nothing if c is EOF.\n\t* c-lex.c: Likewise.\n\t* cpplib.c (cpp_push_buffer, cpp_pop_buffer): Use a linked\n\tlist in malloced memory for the buffer stack.\n\t(cpp_get_token): Don't pop the last buffer off the stack.\n\tCalls after CPP_EOF has been returned produce CPP_EOF with no\n\tstate change.\n\t(cpp_finish): Pop last buffer here.\n\t(do_line): Don't free ip->last_nominal_fname if it is equal to\n\tip->fname.\n\t(special_symbol): If a T_CONST is the empty string, push a\n\tsingle `@ ' escape instead.\n\t(macroexpand): Special symbol buffers have escapes too.\n\t* cpplib.h (struct cpp_buffer): Remove unused fields, add prev\n\tbuffer pointer.\n\t(struct cpp_reader): Remove buffer_stack.  Add\n\tbuffer_stack_depth.\n\t(CPP_PREV_BUFFER, CPP_NULL_BUFFER): Buffer stack is now a\n\tlinked list.\n\nFrom-SVN: r25218", "tree": {"sha": "12e08c22b74fabe24428ccc67b8228c058221e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e08c22b74fabe24428ccc67b8228c058221e6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/comments", "author": null, "committer": null, "parents": [{"sha": "bd86d7e2b23aa121ff48d2501036d0c164383a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd86d7e2b23aa121ff48d2501036d0c164383a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd86d7e2b23aa121ff48d2501036d0c164383a19"}], "stats": {"total": 107, "additions": 74, "deletions": 33}, "files": [{"sha": "37de7cb89a495a91483ffe7e972f6aa8658f6199", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "patch": "@@ -1,3 +1,26 @@\n+\n+1999-02-15 16:59 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n+\n+\t* c-common.c (UNGETC [USE_CPPLIB=1]): Do nothing if c is EOF.\n+\t* c-lex.c: Likewise.\n+\t* cpplib.c (cpp_push_buffer, cpp_pop_buffer): Use a linked\n+\tlist in malloced memory for the buffer stack.\n+\t(cpp_get_token): Don't pop the last buffer off the stack.\n+\tCalls after CPP_EOF has been returned produce CPP_EOF with no\n+\tstate change.\n+\t(cpp_finish): Pop last buffer here.\n+\t(do_line): Don't free ip->last_nominal_fname if it is equal to\n+\tip->fname.\n+\t(special_symbol): If a T_CONST is the empty string, push a\n+\tsingle `@ ' escape instead.\n+\t(macroexpand): Special symbol buffers have escapes too.\n+\t* cpplib.h (struct cpp_buffer): Remove unused fields, add prev\n+\tbuffer pointer.\n+\t(struct cpp_reader): Remove buffer_stack.  Add\n+\tbuffer_stack_depth.\n+\t(CPP_PREV_BUFFER, CPP_NULL_BUFFER): Buffer stack is now a\n+\tlinked list.\n+\n Mon Feb 15 14:44:53 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cccp.c: Don't define HOST_WIDE_INT.  Replace all occurrences of"}, {"sha": "5975236a3931260c27b5041c5ef7b3f096e87b63", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "patch": "@@ -2826,7 +2826,7 @@ truthvalue_conversion (expr)\n unsigned char *yy_cur, *yy_lim;\n \n #define GETC() (yy_cur < yy_lim ? *yy_cur++ : yy_get_token ())\n-#define UNGETC(c) ((c), yy_cur--)\n+#define UNGETC(c) ((c) == EOF ? 0 : yy_cur--)\n \n int\n yy_get_token ()"}, {"sha": "54734afef93defc27e3da1b878c12c1cb4b66bcb", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "patch": "@@ -79,7 +79,7 @@ extern unsigned char *yy_cur, *yy_lim;\n extern int yy_get_token ();\n \n #define GETC() (yy_cur < yy_lim ? *yy_cur++ : yy_get_token ())\n-#define UNGETC(c) ((void)(c), yy_cur--)\n+#define UNGETC(c) ((c) == EOF ? 0 : yy_cur--)\n #else\n #define GETC() getc (finput)\n #define UNGETC(c) ungetc (c, finput)"}, {"sha": "838935f9f6a9fa10fc3ee91af2aa676187748014", "filename": "gcc/cpplib.c", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "patch": "@@ -1479,23 +1479,25 @@ cpp_push_buffer (pfile, buffer, length)\n      U_CHAR *buffer;\n      long length;\n {\n-  register cpp_buffer *buf = CPP_BUFFER (pfile);\n-  if (buf == pfile->buffer_stack)\n+  cpp_buffer *buf = CPP_BUFFER (pfile);\n+  cpp_buffer *new;\n+  if (++pfile->buffer_stack_depth == CPP_STACK_MAX)\n     {\n-      cpp_fatal (pfile, \"%s: macro or `#include' recursion too deep\",\n-\t\t buf->fname);\n+      cpp_fatal (pfile, \"macro or `#include' recursion too deep\");\n       return NULL;\n     }\n-  buf--;\n-  bzero ((char *) buf, sizeof (cpp_buffer));\n-  CPP_BUFFER (pfile) = buf;\n-  buf->if_stack = pfile->if_stack;\n-  buf->cleanup = null_cleanup;\n-  buf->underflow = null_underflow;\n-  buf->buf = buf->cur = buffer;\n-  buf->alimit = buf->rlimit = buffer + length;\n-  \n-  return buf;\n+\n+  new = xcalloc (sizeof (cpp_buffer), 1);\n+\n+  new->if_stack = pfile->if_stack;\n+  new->cleanup = null_cleanup;\n+  new->underflow = null_underflow;\n+  new->buf = new->cur = buffer;\n+  new->alimit = new->rlimit = buffer + length;\n+  new->prev = buf;\n+\n+  CPP_BUFFER (pfile) = new;\n+  return new;\n }\n \n cpp_buffer *\n@@ -1504,7 +1506,10 @@ cpp_pop_buffer (pfile)\n {\n   cpp_buffer *buf = CPP_BUFFER (pfile);\n   (*buf->cleanup) (buf, pfile);\n-  return ++CPP_BUFFER (pfile);\n+  CPP_BUFFER (pfile) = CPP_PREV_BUFFER (buf);\n+  free (buf);\n+  pfile->buffer_stack_depth--;\n+  return CPP_BUFFER (pfile);\n }\n \n /* Scan until CPP_BUFFER (PFILE) is exhausted into PFILE->token_buffer.\n@@ -1940,6 +1945,8 @@ special_symbol (hp, pfile)\n       buf = hp->value.cpval;\n       if (!buf)\n \treturn;\n+      if (*buf == '\\0')\n+\tbuf = \"@ \";\n \n       len = strlen (buf);\n       CPP_RESERVE (pfile, len + 1);\n@@ -2166,6 +2173,7 @@ macroexpand (pfile, hp)\n       CPP_SET_WRITTEN (pfile, old_written);\n       bcopy (CPP_PWRITTEN (pfile), xbuf, xbuf_len + 1);\n       push_macro_expansion (pfile, xbuf, xbuf_len, hp);\n+      CPP_BUFFER (pfile)->has_escapes = 1;\n       return;\n     }\n \n@@ -2976,7 +2984,8 @@ do_line (pfile, keyword)\n \n \t  if (ip->last_nominal_fname\n \t      && ip->last_nominal_fname != oldname\n-\t      && ip->last_nominal_fname != newname)\n+\t      && ip->last_nominal_fname != newname\n+\t      && ip->last_nominal_fname != ip->fname)\n \t    free (ip->last_nominal_fname);\n \n \t  if (newname == ip->fname)\n@@ -3711,18 +3720,19 @@ cpp_get_token (pfile)\n   long start_line, start_column;\n   enum cpp_token token;\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n-  CPP_BUFFER (pfile)->prev = CPP_BUFFER (pfile)->cur;\n+\n  get_next:\n   c = GETC();\n   if (c == EOF)\n     {\n     handle_eof:\n       if (CPP_BUFFER (pfile)->seen_eof)\n \t{\n-\t  if (cpp_pop_buffer (pfile) != CPP_NULL_BUFFER (pfile))\n-\t    goto get_next;\n-\t  else\n+\t  if (CPP_PREV_BUFFER (CPP_BUFFER (pfile)) == CPP_NULL_BUFFER (pfile))\n \t    return CPP_EOF;\n+\n+\t  cpp_pop_buffer (pfile);\n+\t  goto get_next;\n \t}\n       else\n \t{\n@@ -5523,6 +5533,11 @@ cpp_finish (pfile)\n      cpp_reader *pfile;\n {\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n+\n+  if (CPP_PREV_BUFFER (CPP_BUFFER (pfile)) != CPP_NULL_BUFFER (pfile))\n+    cpp_fatal (pfile,\n+\t       \"cpplib internal error: buffers still stacked in cpp_finish\");\n+  cpp_pop_buffer (pfile);\n   \n   if (opts->print_deps)\n     {\n@@ -5578,7 +5593,7 @@ cpp_cleanup (pfile)\n      cpp_reader *pfile;\n {\n   int i;\n-  while ( CPP_BUFFER (pfile) != CPP_NULL_BUFFER (pfile))\n+  while (CPP_BUFFER (pfile) != CPP_NULL_BUFFER (pfile))\n     cpp_pop_buffer (pfile);\n \n   if (pfile->token_buffer)"}, {"sha": "8a33eed346bf7ca8b3b1221130cd6791c1f991e2", "filename": "gcc/cpplib.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=4d9a1b48f98e8580eeec9f7f006a6c6a6deef4bd", "patch": "@@ -98,13 +98,16 @@ extern void cpp_cleanup PARAMS ((cpp_reader *PFILE));\n /* If we have a huge buffer, may need to cache more recent counts */\n #define CPP_LINE_BASE(BUF) ((BUF)->buf + (BUF)->line_base)\n \n-struct cpp_buffer {\n-  unsigned char *buf;\n-  unsigned char *cur;\n+struct cpp_buffer\n+{\n+  unsigned char *cur;\t /* current position */\n   unsigned char *rlimit; /* end of valid data */\n+  unsigned char *buf;\t /* entire buffer */\n   unsigned char *alimit; /* end of allocated buffer */\n-  unsigned char *prev;  /* start of current token */\n \n+  struct cpp_buffer *prev;\n+\n+  /* Real filename.  (Alias to ->ihash->fname, obsolete). */\n   char *fname;\n   /* Filename specified with #line command.  */\n   char *nominal_fname;\n@@ -114,8 +117,7 @@ struct cpp_buffer {\n   struct file_name_list *actual_dir;\n \n   /* Pointer into the include hash table.  Used for include_next and\n-     to record control macros.\n-     ->fname is an alias to ->ihash->fname. */\n+     to record control macros. */\n   struct include_hash *ihash;\n \n   long line_base;\n@@ -176,6 +178,9 @@ struct cpp_reader\n   /* Current depth in #include directives that use <...>.  */\n   int system_include_depth;\n \n+  /* Current depth of buffer stack. */\n+  int buffer_stack_depth;\n+\n   /* Hash table of other included files.  See cppfiles.c */\n #define ALL_INCLUDE_HASHSIZE 71\n   struct include_hash *all_include_files[ALL_INCLUDE_HASHSIZE];\n@@ -244,8 +249,6 @@ struct cpp_reader\n #ifdef __cplusplus\n   ~cpp_reader () { cpp_cleanup (this); }\n #endif\n-\n-  cpp_buffer buffer_stack[CPP_STACK_MAX];\n };\n \n #define CPP_FATAL_LIMIT 1000\n@@ -290,9 +293,9 @@ struct cpp_reader\n #define CPP_OPTIONS(PFILE) ((PFILE)->opts)\n \n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n-#define CPP_PREV_BUFFER(BUFFER) ((BUFFER)+1)\n+#define CPP_PREV_BUFFER(BUFFER) ((BUFFER)->prev)\n /* The bottom of the buffer stack. */\n-#define CPP_NULL_BUFFER(PFILE) (&(PFILE)->buffer_stack[CPP_STACK_MAX])\n+#define CPP_NULL_BUFFER(PFILE) NULL\n \n /* Pointed to by cpp_reader.opts. */\n struct cpp_options {"}]}