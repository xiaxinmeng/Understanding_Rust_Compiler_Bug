{"sha": "1ce8d92538c3248f9947827607df48ccf36f5bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlOGQ5MjUzOGMzMjQ4Zjk5NDc4Mjc2MDdkZjQ4Y2NmMzZmNWJlZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-11T13:41:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-11T13:41:46Z"}, "message": "predicates.md (call_insn_operand): Allow constant_call_address_operand in Pmode only.\n\n        * config/i386/predicates.md (call_insn_operand): Allow\n\tconstant_call_address_operand in Pmode only.\n\t(sibcall_insn_operand): Ditto.\n\t* config/i386/i386.md (*call): Use W mode iterator instead of P mode.\n\t(*call_vzeroupper): Ditto.\n\t(*sibcall): Ditto.\n\t(*sibcall_vzeroupper): Ditto.\n\t(*call_value): Ditto.\n\t(*call_value_vzeroupper): Ditto.\n\t(*sibcall_value): Ditto.\n\t(*sibcall_value_vzeroupper): Ditto.\n\t(*indirect_jump): Ditto.\n\t(*tablejump_1): Ditto.\n\t(indirect_jump): Convert memory address to word mode for TARGET_X32.\n\t(tablejump): Ditto.\n\t* config/i386/i386.c (ix86_expand_call): Convert indirect operands\n\tto word mode.\n\nFrom-SVN: r185193", "tree": {"sha": "c598933a38ef0b87ae9e3cbdac1cb038fa80f8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c598933a38ef0b87ae9e3cbdac1cb038fa80f8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce8d92538c3248f9947827607df48ccf36f5bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce8d92538c3248f9947827607df48ccf36f5bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce8d92538c3248f9947827607df48ccf36f5bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce8d92538c3248f9947827607df48ccf36f5bee/comments", "author": null, "committer": null, "parents": [{"sha": "07c0b5604acc658ba193b2b5f0c592ade689e8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c0b5604acc658ba193b2b5f0c592ade689e8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c0b5604acc658ba193b2b5f0c592ade689e8e4"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "36fe2f16addf534a7bdc6345591808b664ca9f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ce8d92538c3248f9947827607df48ccf36f5bee", "patch": "@@ -1,3 +1,23 @@\n+2012-03-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+        * config/i386/predicates.md (call_insn_operand): Allow\n+\tconstant_call_address_operand in Pmode only.\n+\t(sibcall_insn_operand): Ditto.\n+\t* config/i386/i386.md (*call): Use W mode iterator instead of P mode.\n+\t(*call_vzeroupper): Ditto.\n+\t(*sibcall): Ditto.\n+\t(*sibcall_vzeroupper): Ditto.\n+\t(*call_value): Ditto.\n+\t(*call_value_vzeroupper): Ditto.\n+\t(*sibcall_value): Ditto.\n+\t(*sibcall_value_vzeroupper): Ditto.\n+\t(*indirect_jump): Ditto.\n+\t(*tablejump_1): Ditto.\n+\t(indirect_jump): Convert memory address to word mode for TARGET_X32.\n+\t(tablejump): Ditto.\n+\t* config/i386/i386.c (ix86_expand_call): Convert indirect operands\n+\tto word mode.\n+\n 2012-03-11  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244\n@@ -11,7 +31,7 @@\n \t* config/i386/i386.c (ix86_decompose_address): Disallow fs:(reg)\n \tif Pmode != word_mode.\n \t(legitimize_tls_address): Call gen_tls_initial_exec_x32 if\n-\tPmode == SImode for x32.\n+\tPmode == SImode for TARGET_X32.\n \n \t* config/i386/i386.md (UNSPEC_TLS_IE_X32): New.\n \t(tls_initial_exec_x32): Likewise.\n@@ -1873,7 +1893,7 @@\n \n \tPR target/52146\n \t* config/i386/i386.c (ix86_legitimate_address_p): Disallow\n-\tnegative constant address for x32.\n+\tnegative constant address for TARGET_X32.\n \n 2012-02-10  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "de2483c3f777aee83317d07127402ef1632c9fdc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1ce8d92538c3248f9947827607df48ccf36f5bee", "patch": "@@ -22990,13 +22990,13 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       && !local_symbolic_operand (XEXP (fnaddr, 0), VOIDmode))\n     fnaddr = gen_rtx_MEM (QImode, construct_plt_address (XEXP (fnaddr, 0)));\n   else if (sibcall\n-\t   ? !sibcall_insn_operand (XEXP (fnaddr, 0), Pmode)\n-\t   : !call_insn_operand (XEXP (fnaddr, 0), Pmode))\n+\t   ? !sibcall_insn_operand (XEXP (fnaddr, 0), word_mode)\n+\t   : !call_insn_operand (XEXP (fnaddr, 0), word_mode))\n     {\n       fnaddr = XEXP (fnaddr, 0);\n-      if (GET_MODE (fnaddr) != Pmode)\n-\tfnaddr = convert_to_mode (Pmode, fnaddr, 1);\n-      fnaddr = gen_rtx_MEM (QImode, copy_to_mode_reg (Pmode, fnaddr));\n+      if (GET_MODE (fnaddr) != word_mode)\n+\tfnaddr = convert_to_mode (word_mode, fnaddr, 1);\n+      fnaddr = gen_rtx_MEM (QImode, copy_to_mode_reg (word_mode, fnaddr));\n     }\n \n   vec_len = 0;"}, {"sha": "5dd1fc6ab2d57e465c70633156f12ecfeb50af3d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1ce8d92538c3248f9947827607df48ccf36f5bee", "patch": "@@ -11086,10 +11086,15 @@\n    (set_attr \"modrm\" \"0\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"indirect_branch_operand\" \"\"))])\n+  [(set (pc) (match_operand 0 \"indirect_branch_operand\" \"\"))]\n+  \"\"\n+{\n+  if (TARGET_X32)\n+    operands[0] = convert_memory_address (word_mode, operands[0]);\n+})\n \n (define_insn \"*indirect_jump\"\n-  [(set (pc) (match_operand:P 0 \"indirect_branch_operand\" \"rw\"))]\n+  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rw\"))]\n   \"\"\n   \"jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n@@ -11131,12 +11136,13 @@\n       operands[0] = expand_simple_binop (Pmode, code, op0, op1, NULL_RTX, 0,\n \t\t\t\t\t OPTAB_DIRECT);\n     }\n-  else if (TARGET_X32)\n-    operands[0] = convert_memory_address (Pmode, operands[0]);\n+\n+  if (TARGET_X32)\n+    operands[0] = convert_memory_address (word_mode, operands[0]);\n })\n \n (define_insn \"*tablejump_1\"\n-  [(set (pc) (match_operand:P 0 \"indirect_branch_operand\" \"rw\"))\n+  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rw\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"jmp\\t%A0\"\n@@ -11223,7 +11229,7 @@\n })\n \n (define_insn_and_split \"*call_vzeroupper\"\n-  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zw\"))\n+  [(call (mem:QI (match_operand:W 0 \"call_insn_operand\" \"<c>zw\"))\n \t (match_operand 1 \"\" \"\"))\n    (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11235,7 +11241,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call\"\n-  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zw\"))\n+  [(call (mem:QI (match_operand:W 0 \"call_insn_operand\" \"<c>zw\"))\n \t (match_operand 1 \"\" \"\"))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n@@ -11287,7 +11293,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn_and_split \"*sibcall_vzeroupper\"\n-  [(call (mem:QI (match_operand:P 0 \"sibcall_insn_operand\" \"Uz\"))\n+  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"Uz\"))\n \t (match_operand 1 \"\" \"\"))\n    (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11299,7 +11305,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall\"\n-  [(call (mem:QI (match_operand:P 0 \"sibcall_insn_operand\" \"Uz\"))\n+  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"Uz\"))\n \t (match_operand 1 \"\" \"\"))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n@@ -11396,7 +11402,7 @@\n \n (define_insn_and_split \"*call_value_vzeroupper\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zw\"))\n+\t(call (mem:QI (match_operand:W 1 \"call_insn_operand\" \"<c>zw\"))\n \t      (match_operand 2 \"\" \"\")))\n    (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11409,15 +11415,15 @@\n \n (define_insn \"*call_value\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zw\"))\n+\t(call (mem:QI (match_operand:W 1 \"call_insn_operand\" \"<c>zw\"))\n \t      (match_operand 2 \"\" \"\")))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n (define_insn_and_split \"*sibcall_value_vzeroupper\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"Uz\"))\n \t      (match_operand 2 \"\" \"\")))\n    (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n@@ -11430,7 +11436,7 @@\n \n (define_insn \"*sibcall_value\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:P 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"Uz\"))\n \t      (match_operand 2 \"\" \"\")))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\""}, {"sha": "7e0e1effaa8d5c71d193ba8607be5e063ae481b6", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8d92538c3248f9947827607df48ccf36f5bee/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=1ce8d92538c3248f9947827607df48ccf36f5bee", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for IA-32 and x86-64.\n-;; Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+;; Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -571,15 +571,18 @@\n \t    (match_operand 0 \"memory_operand\"))))\n \n ;; Test for a valid operand for a call instruction.\n-(define_predicate \"call_insn_operand\"\n-  (ior (match_operand 0 \"constant_call_address_operand\")\n+;; Allow constant call address operands in Pmode only.\n+(define_special_predicate \"call_insn_operand\"\n+  (ior (match_test \"constant_call_address_operand\n+\t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n        (and (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"memory_operand\"))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n-(define_predicate \"sibcall_insn_operand\"\n-  (ior (match_operand 0 \"constant_call_address_operand\")\n+(define_special_predicate \"sibcall_insn_operand\"\n+  (ior (match_test \"constant_call_address_operand\n+\t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"register_no_elim_operand\")))\n \n ;; Match exactly zero."}]}