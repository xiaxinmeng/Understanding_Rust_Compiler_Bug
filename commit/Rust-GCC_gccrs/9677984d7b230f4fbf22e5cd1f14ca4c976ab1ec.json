{"sha": "9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec", "node_id": "C_kwDOANBUbNoAKDk2Nzc5ODRkN2IyMzBmNGZiZjIyZTVjZDFmMTRjYTRjOTc2YWIxZWM", "commit": {"author": {"name": "Boris Yakobowski", "email": "yakobowski@adacore.com", "date": "2022-09-07T17:37:03Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-26T09:02:29Z"}, "message": "ada: Remove GNATmetric's documentation from GNAT's documentation\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove documentation for\n\tgnatmetric.", "tree": {"sha": "fdf8a3cdd93f6d2b9ac8c4875ccb39d21d195448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf8a3cdd93f6d2b9ac8c4875ccb39d21d195448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec/comments", "author": {"login": "yakobowski", "id": 4638069, "node_id": "MDQ6VXNlcjQ2MzgwNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/4638069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yakobowski", "html_url": "https://github.com/yakobowski", "followers_url": "https://api.github.com/users/yakobowski/followers", "following_url": "https://api.github.com/users/yakobowski/following{/other_user}", "gists_url": "https://api.github.com/users/yakobowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/yakobowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yakobowski/subscriptions", "organizations_url": "https://api.github.com/users/yakobowski/orgs", "repos_url": "https://api.github.com/users/yakobowski/repos", "events_url": "https://api.github.com/users/yakobowski/events{/privacy}", "received_events_url": "https://api.github.com/users/yakobowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092d7509db47376a7b910f7af05678058bd9bd3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092d7509db47376a7b910f7af05678058bd9bd3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092d7509db47376a7b910f7af05678058bd9bd3c"}], "stats": {"total": 1120, "additions": 1, "deletions": 1119}, "files": [{"sha": "92877a2d172b90f01a3e0b8a043c6fa3fa6ff7e0", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 1, "deletions": 1119, "changes": 1120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=9677984d7b230f4fbf22e5cd1f14ca4c976ab1ec", "patch": "@@ -15,7 +15,6 @@ This chapter describes a number of utility programs:\n   * :ref:`The_File_Cleanup_Utility_gnatclean`\n   * :ref:`The_GNAT_Library_Browser_gnatls`\n   * :ref:`The_Coding_Standard_Verifier_gnatcheck`\n-  * :ref:`The_GNAT_Metrics_Tool_gnatmetric`\n   * :ref:`The_GNAT_Pretty_Printer_gnatpp`\n   * :ref:`The_Body_Stub_Generator_gnatstub`\n   * :ref:`The_Backtrace_Symbolizer_gnatsymbolize`\n@@ -487,1123 +486,6 @@ building specialized scripts.\n   For full details, plese refer to :title:`GNATcheck Reference Manual`.\n \n \n-\n-.. only:: PRO or GPL\n-\n-  .. _The_GNAT_Metrics_Tool_gnatmetric:\n-\n-  The GNAT Metrics Tool ``gnatmetric``\n-  ====================================\n-\n-  .. index:: ! gnatmetric\n-  .. index:: Metric tool\n-\n-  The ``gnatmetric`` tool is a utility\n-  for computing various program metrics.\n-  It takes an Ada source file as input and generates a file containing the\n-  metrics data as output. Various switches control which\n-  metrics are reported.\n-\n-  ``gnatmetric`` is a project-aware tool\n-  (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n-  the project-related switches). The project file package that can specify\n-  ``gnatmetric`` switches is named ``Metrics``.\n-\n-  The ``gnatmetric`` command has the form\n-\n-    ::\n-\n-       $ gnatmetric [ switches ] { filename }\n-\n-  where:\n-\n-  * ``switches`` specify the metrics to compute and define the destination for\n-    the output\n-\n-  * Each ``filename`` is the name of a source file to process. 'Wildcards' are\n-    allowed, and the file name may contain path information.  If no\n-    ``filename`` is supplied, then the ``switches`` list must contain at least\n-    one :switch:`--files` switch (see :ref:`Other_gnatmetric_Switches`).\n-    Including both a :switch:`--files` switch and one or more ``filename``\n-    arguments is permitted.\n-\n-    Note that it is no longer necessary to specify the Ada language version;\n-    ``gnatmetric`` can process Ada source code written in any version from\n-    Ada 83 onward without specifying any language version switch.\n-\n-  The following subsections describe the various switches accepted by\n-  ``gnatmetric``, organized by category.\n-\n-  .. _Output_File_Control-gnatmetric:\n-\n-  Output File Control\n-  -------------------\n-\n-  .. index:: Output file control in gnatmetric\n-\n-  ``gnatmetric`` has two output formats. It can generate a\n-  textual (human-readable) form, and also XML. By default only textual\n-  output is generated.\n-\n-  When generating the output in textual form, ``gnatmetric`` creates\n-  for each Ada source file a corresponding text file\n-  containing the computed metrics, except for the case when the set of metrics\n-  specified by gnatmetric parameters consists only of metrics that are computed\n-  for the whole set of analyzed sources, but not for each Ada source.\n-  By default, the name of the file containing metric information for a source\n-  is obtained by appending the :file:`.metrix` suffix to the\n-  name of the input source file. If not otherwise specified and no project file\n-  is specified as ``gnatmetric`` option this file is placed in the same\n-  directory as where the source file is located. If ``gnatmetric`` has a\n-  project  file as its parameter, it places all the generated files in the\n-  object directory of the project (or in the project source directory if the\n-  project does not define an object directory). If :switch:`--subdirs` option\n-  is specified, the files are placed in the subrirectory of this directory\n-  specified by this option.\n-\n-  All the output information generated in XML format is placed in a single\n-  file. By default the name of this file is :file:`metrix.xml`.\n-  If not otherwise specified and if no project file is specified\n-  as ``gnatmetric`` option this file is placed in the\n-  current directory.\n-\n-  Some of the computed metrics are summed over the units passed to\n-  ``gnatmetric``; for example, the total number of lines of code.\n-  By default this information is sent to :file:`stdout`, but a file\n-  can be specified with the :switch:`--global-file-name` switch.\n-\n-  The following switches control the ``gnatmetric`` output:\n-\n-  .. index:: --generate-xml-output (gnatmetric)\n-\n-  :switch:`--generate-xml-output`\n-    Generate XML output.\n-\n-  .. index:: --generate-xml-schema (gnatmetric)\n-\n-  :switch:`--generate-xml-schema`\n-    Generate XML output and an XML schema file that describes the structure\n-    of the XML metric report. This schema is assigned to the XML file. The schema\n-    file has the same name as the XML output file with :file:`.xml` suffix replaced\n-    with :file:`.xsd`.\n-\n-  .. index:: --no-text-output (gnatmetric)\n-\n-\n-  :switch:`--no-text-output`\n-    Do not generate the output in text form (implies :switch:`-x`).\n-\n-  .. index:: --output-dir (gnatmetric)\n-\n-\n-  :switch:`--output-dir={output_dir}`\n-    Put text files with detailed metrics into ``output_dir``.\n-\n-  .. index:: --output-suffix (gnatmetric)\n-\n-\n-  :switch:`--output-suffix={file_suffix}`\n-    Use ``file_suffix``, instead of :file:`.metrix`\n-    in the name of the output file.\n-\n-  .. index:: --global-file-name (gnatmetric)\n-\n-  :switch:`--global-file-name={file_name}`\n-    Put global metrics into ``file_name``.\n-\n-  .. index:: --xml-file-name (gnatmetric)\n-\n-\n-  :switch:`--xml-file-name={file_name}`\n-    Put the XML output into ``file_name``\n-    (also implies :switch:`--generate-xml-output`).\n-\n-  .. index:: --short-file-names (gnatmetric)\n-\n-  :switch:`--short-file-names`\n-    Use 'short' source file names in the output. (The ``gnatmetric``\n-    output includes the name(s) of the Ada source file(s) from which the\n-    metrics are computed. By default each name includes the absolute\n-    path. The :switch:`--short-file-names` switch causes ``gnatmetric``\n-    to exclude all directory information from the file names that are\n-    output.)\n-\n-   .. index:: --wide-character-encoding (gnatmetric)\n-\n-  :switch:`--wide-character-encoding={e}`\n-    Specify the wide character encoding method for the input and output\n-    files. ``e`` is one of the following:\n-\n-    * *8* - UTF-8 encoding\n-\n-    * *b* - Brackets encoding (default value)\n-\n-\n-  .. index:: Disable Metrics For Local Units in gnatmetric\n-\n-  .. _Disable_Metrics_For_Local_Units:\n-\n-  Disable Metrics For Local Units\n-  -------------------------------\n-\n-  ``gnatmetric`` relies on the GNAT compilation model --\n-  one compilation\n-  unit per one source file. It computes line metrics for the whole source\n-  file, and it also computes syntax\n-  and complexity metrics for the file's outermost unit.\n-\n-  By default, ``gnatmetric`` will also compute all metrics for certain\n-  kinds of locally declared program units:\n-\n-  * subprogram (and generic subprogram) bodies;\n-\n-  * package (and generic package) specs and bodies;\n-\n-  * task object and type specifications and bodies;\n-\n-  * protected object and type specifications and bodies.\n-\n-  .. index:: Eligible local unit (for gnatmetric)\n-\n-  These kinds of entities will be referred to as\n-  *eligible local program units*, or simply *eligible local units*,\n-  in the discussion below.\n-\n-  Note that a subprogram declaration, generic instantiation,\n-  or renaming declaration only receives metrics\n-  computation when it appear as the outermost entity\n-  in a source file.\n-\n-  Suppression of metrics computation for eligible local units can be\n-  obtained via the following switch:\n-\n-\n-  .. index:: --no-local-metrics (gnatmetric)\n-\n-\n-  :switch:`--no-local-metrics`\n-    Do not compute detailed metrics for eligible local program units.\n-\n-\n-  .. _Specifying_a_set_of_metrics_to_compute:\n-\n-  Specifying a set of metrics to compute\n-  --------------------------------------\n-\n-  By default all the metrics are reported. The switches described in this\n-  subsection allow you to control, on an individual basis, whether metrics are\n-  reported. If at least one positive metric switch is specified (that is, a\n-  switch that defines that a given metric or set of metrics is to be computed),\n-  then only explicitly specified metrics are reported.\n-\n-  .. _Line_Metrics_Control:\n-\n-  Line Metrics Control\n-  ^^^^^^^^^^^^^^^^^^^^\n-\n-  .. index:: Line metrics control in gnatmetric\n-\n-  For each source file, and for each of its eligible local program\n-  units, ``gnatmetric`` computes the following metrics:\n-\n-  * the total number of lines;\n-\n-  * the total number of code lines (i.e., non-blank lines that are not\n-    comments)\n-\n-  * the number of comment lines\n-\n-  * the number of code lines containing end-of-line comments;\n-\n-  * the comment percentage: the ratio between the number of lines that\n-    contain comments and the number of all non-blank lines, expressed as\n-    a percentage\n-\n-  * the number of empty lines and lines containing only space characters\n-    and/or format effectors (blank lines)\n-\n-  * the average number of code lines in subprogram bodies, task bodies,\n-    entry bodies and statement sequences in package bodies\n-\n-  ``gnatmetric`` sums the values of the line metrics for all the files\n-  being processed and then generates the cumulative results. The tool\n-  also computes for all the files being processed the average number of\n-  code lines in bodies.\n-\n-  You can use the following switches to select the specific line metrics\n-  to be reported.\n-\n-\n-  .. index:: --lines (gnatmetric)\n-  .. index:: --no-lines (gnatmetric)\n-\n-\n-  :switch:`--lines-all`\n-    Report all the line metrics\n-\n-\n-  :switch:`--no-lines-all`\n-    Do not report any of line metrics\n-\n-\n-  :switch:`--lines`\n-    Report the number of all lines\n-\n-\n-  :switch:`--no-lines`\n-    Do not report the number of all lines\n-\n-\n-  :switch:`--lines-code`\n-    Report the number of code lines\n-\n-\n-  :switch:`--no-lines-code`\n-    Do not report the number of code lines\n-\n-\n-  :switch:`--lines-comment`\n-    Report the number of comment lines\n-\n-\n-  :switch:`--no-lines-comment`\n-    Do not report the number of comment lines\n-\n-\n-  :switch:`--lines-eol-comment`\n-    Report the number of code lines containing\n-    end-of-line comments\n-\n-\n-  :switch:`--no-lines-eol-comment`\n-    Do not report the number of code lines containing\n-    end-of-line comments\n-\n-\n-  :switch:`--lines-ratio`\n-    Report the comment percentage in the program text\n-\n-\n-  :switch:`--no-lines-ratio`\n-    Do not report the comment percentage in the program text\n-\n-\n-  :switch:`--lines-blank`\n-    Report the number of blank lines\n-\n-\n-  :switch:`--no-lines-blank`\n-    Do not report the number of blank lines\n-\n-\n-  :switch:`--lines-average`\n-    Report the average number of code lines in subprogram bodies, task bodies,\n-    entry bodies and statement sequences in package bodies.\n-\n-\n-  :switch:`--no-lines-average`\n-    Do not report the average number of code lines in subprogram bodies,\n-    task bodies, entry bodies and statement sequences in package bodies.\n-\n-\n-  :switch:`--lines-spark`\n-    Report the number of lines written in SPARK.\n-\n-\n-  :switch:`--no-lines-spark`\n-    Do not report the number of lines written in SPARK.\n-\n-\n-  .. _Syntax_Metrics_Control:\n-\n-  Syntax Metrics Control\n-  ^^^^^^^^^^^^^^^^^^^^^^\n-\n-  .. index:: Syntax metrics control in gnatmetric\n-\n-  ``gnatmetric`` computes various syntactic metrics for the\n-  outermost unit and for each eligible local unit:\n-\n-  * *LSLOC ('Logical Source Lines Of Code')*\n-      The total number of declarations and the total number of\n-      statements. Note that the definition of declarations is the one\n-      given in the reference manual:\n-\n-        \"Each of the following is defined to be a declaration: any\n-        basic_declaration; an enumeration_literal_specification; a\n-        discriminant_specification; a component_declaration; a\n-        loop_parameter_specification; a parameter_specification; a\n-        subprogram_body; an entry_declaration; an\n-        entry_index_specification; a choice_parameter_specification; a\n-        generic_formal_parameter_declaration.\"\n-\n-      This means for example that each enumeration literal adds one to\n-      the count, as well as each subprogram parameter.\n-\n-  * *Maximal static nesting level of inner program units*\n-      According to :title:`Ada Reference Manual`, 10.1(1):\n-\n-        \"A program unit is either a package, a task unit, a protected\n-        unit, a protected entry, a generic unit, or an explicitly\n-        declared subprogram other than an enumeration literal.\"\n-\n-  * *Maximal nesting level of composite syntactic constructs*\n-      This corresponds to the notion of the maximum nesting level in the\n-      GNAT built-in style checks (see :ref:`Style_Checking`).\n-\n-  * *Number of formal parameters*\n-      Number of formal parameters of a subprogram; if a subprogram does\n-      have parameters, then numbers of \"in\", \"out\" and \"in out\"\n-      parameters are also reported. This metric is reported for\n-      subprogram specifications and for subprogram instantiations. For\n-      subprogram bodies, expression functions and null procedures this\n-      metric is reported if the construct acts as a subprogram\n-      declaration but is not a completion of previous declaration. This\n-      metric is not reported for generic and formal subprograms.\n-\n-  For the outermost unit in the file, ``gnatmetric`` additionally\n-  computes the following metrics:\n-\n-  * *Public subprograms*\n-      This metric is computed for package specs. It is the number of\n-      subprograms and generic subprograms declared in the visible part\n-      (including the visible part of nested packages, protected objects,\n-      and protected types).\n-\n-\n-  * *All subprograms*\n-      This metric is computed for bodies and subunits. The metric is\n-      equal to a total number of subprogram bodies in the compilation\n-      unit.\n-      Neither generic instantiations nor renamings-as-a-body nor body\n-      stubs are counted. Any subprogram body is counted, independently\n-      of its nesting level and enclosing constructs. Generic bodies and\n-      bodies of protected subprograms are counted in the same way as\n-      'usual' subprogram bodies.\n-\n-\n-  * *Public types*\n-      This metric is computed for package specs and generic package\n-      declarations. It is the total number of types that can be\n-      referenced from outside this compilation unit, plus the number of\n-      types from all the visible parts of all the visible generic\n-      packages. Generic formal types are not counted. Only types, not\n-      subtypes, are included.\n-\n-      Along with the total number of public types, the following\n-      types are counted and reported separately:\n-\n-      * *Abstract types*\n-\n-      * *Root tagged types^ (abstract, non-abstract, private,\n-        non-private). Type extensions are *not* counted\n-\n-      * *Private types* (including private extensions)\n-\n-      * *Task types*\n-\n-      * *Protected types*\n-\n-  * *All types*\n-      This metric is computed for any compilation unit. It is equal to\n-      the total number of the declarations of different types given in\n-      the compilation unit. The private and the corresponding full type\n-      declaration are counted as one type declaration. Incomplete type\n-      declarations and generic formal types are not counted.\n-      No distinction is made among different kinds of types (abstract,\n-      private etc.); the total number of types is reported.\n-\n-  By default, all the syntax metrics are reported. You can use the following\n-  switches to select specific syntax metrics.\n-\n-\n-  .. index:: --syntax (gnatmetric)\n-  .. index:: --no-syntax (gnatmetric)\n-\n-\n-  :switch:`--syntax-all`\n-    Report all the syntax metrics\n-\n-\n-  :switch:`--no-syntax-all`\n-    Do not report any of syntax metrics\n-\n-\n-  :switch:`--declarations`\n-    Report the total number of declarations\n-\n-\n-  :switch:`--no-declarations`\n-    Do not report the total number of declarations\n-\n-\n-  :switch:`--statements`\n-    Report the total number of statements\n-\n-\n-  :switch:`--no-statements`\n-    Do not report the total number of statements\n-\n-\n-  :switch:`--public-subprograms`\n-    Report the number of public subprograms in a compilation unit\n-\n-\n-  :switch:`--no-public-subprograms`\n-    Do not report the number of public subprograms in a compilation unit\n-\n-\n-  :switch:`--all-subprograms`\n-    Report the number of all the subprograms in a compilation unit\n-\n-\n-  :switch:`--no-all-subprograms`\n-    Do not report the number of all the subprograms in a compilation unit\n-\n-\n-  :switch:`--public-types`\n-    Report the number of public types in a compilation unit\n-\n-\n-  :switch:`--no-public-types`\n-    Do not report the number of public types in a compilation unit\n-\n-\n-  :switch:`--all-types`\n-    Report the number of all the types in a compilation unit\n-\n-\n-  :switch:`--no-all-types`\n-    Do not report the number of all the types in a compilation unit\n-\n-\n-  :switch:`--unit-nesting`\n-    Report the maximal program unit nesting level\n-\n-\n-  :switch:`--no-unit-nesting`\n-    Do not report the maximal program unit nesting level\n-\n-\n-  :switch:`--construct-nesting`\n-    Report the maximal construct nesting level\n-\n-\n-  :switch:`--no-construct-nesting`\n-    Do not report the maximal construct nesting level\n-\n-  :switch:`--param-number`\n-    Report the number of subprogram parameters\n-\n-\n-  :switch:`--no-param-number`\n-    Do not report the number of subprogram parameters\n-\n-\n-  .. _Contract_Metrics_Control:\n-\n-  Contract Metrics Control\n-  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-  .. index:: Contract metrics control in gnatmetric\n-\n-  :switch:`--contract-all`\n-    Report all the contract metrics\n-\n-\n-  :switch:`--no-contract-all`\n-    Do not report any of the contract metrics\n-\n-\n-  :switch:`--contract`\n-    Report the number of public subprograms with contracts\n-\n-\n-  :switch:`--no-contract`\n-    Do not report the number of public subprograms with contracts\n-\n-\n-  :switch:`--post`\n-    Report the number of public subprograms with postconditions\n-\n-\n-  :switch:`--no-post`\n-    Do not report the number of public subprograms with postconditions\n-\n-\n-  :switch:`--contract-complete`\n-    Report the number of public subprograms with complete contracts\n-\n-\n-  :switch:`--no-contract-complete`\n-    Do not report the number of public subprograms with complete contracts\n-\n-\n-  :switch:`--contract-cyclomatic`\n-    Report the McCabe complexity of public subprograms\n-\n-\n-  :switch:`--no-contract-cyclomatic`\n-    Do not report the McCabe complexity of public subprograms\n-\n-\n-  .. _Complexity_Metrics_Control:\n-\n-  Complexity Metrics Control\n-  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-  .. index:: Complexity metrics control in gnatmetric\n-\n-  For a program unit that is an executable body (a subprogram body\n-  (including generic bodies), task body, entry body or a package body\n-  containing its own statement sequence) ``gnatmetric`` computes the\n-  following complexity metrics:\n-\n-  * McCabe cyclomatic complexity;\n-\n-  * McCabe essential complexity;\n-\n-  * maximal loop nesting level;\n-\n-  * extra exit points (for subprograms);\n-\n-  The McCabe cyclomatic complexity metric is defined\n-  in `http://www.mccabe.com/pdf/mccabe-nist235r.pdf <http://www.mccabe.com/pdf/mccabe-nist235r.pdf>`_\n-\n-  According to McCabe, both control statements and short-circuit control\n-  forms should be taken into account when computing cyclomatic\n-  complexity. For Ada 2012 we have also take into account conditional\n-  expressions and quantified expressions. For each body, we compute\n-  three metric values:\n-\n-  * the complexity introduced by control\n-    statements only, without taking into account short-circuit forms\n-    (referred as ``statement complexity`` in ``gnatmetric`` output),\n-\n-  * the complexity introduced by short-circuit control forms only\n-    (referred as ``expression complexity`` in ``gnatmetric`` output),\n-    and\n-\n-  * the total\n-    cyclomatic complexity, which is the sum of these two values\n-    (referred as ``cyclomatic complexity`` in ``gnatmetric`` output).\n-\n-  The cyclomatic complexity is also computed for Ada 2012 expression functions.\n-  An expression function cannot have statements as its components, so only one\n-  metric value is computed as a cyclomatic complexity of an expression function.\n-\n-  The origin of cyclomatic complexity metric is the need to estimate the number\n-  of independent paths in the control flow graph that in turn gives the number\n-  of tests needed to satisfy paths coverage testing completeness criterion.\n-  Considered from the testing point of view, a static Ada ``loop`` (that is,\n-  the ``loop`` statement having static subtype in loop parameter\n-  specification) does not add to cyclomatic complexity. By providing\n-  :switch:`--no-static-loop` option a user\n-  may specify that such loops should not be counted when computing the\n-  cyclomatic complexity metric\n-\n-  The Ada essential complexity metric is a McCabe cyclomatic complexity metric\n-  counted for the code that is reduced by excluding all the pure structural Ada\n-  control statements. An compound statement is considered as a non-structural\n-  if it contains a ``raise`` or ``return`` statement as it subcomponent,\n-  or if it contains a ``goto`` statement that transfers the control outside\n-  the operator. A selective ``accept`` statement with a ``terminate`` alternative\n-  is considered a non-structural statement. When computing this metric,\n-  ``exit`` statements are treated in the same way as ``goto``\n-  statements unless the :switch:`-ne` option is specified.\n-\n-  The Ada essential complexity metric defined here is intended to quantify\n-  the extent to which the software is unstructured. It is adapted from\n-  the McCabe essential complexity metric defined in\n-  http://www.mccabe.com/pdf/mccabe-nist235r.pdf\n-  but is modified to be more\n-  suitable for typical Ada usage. For example, short circuit forms\n-  are not penalized as unstructured in the Ada essential complexity metric.\n-\n-  When computing cyclomatic and essential complexity, ``gnatmetric`` skips\n-  the code in the exception handlers and in all the nested program units. The\n-  code of assertions and predicates (that is, subprogram preconditions and\n-  postconditions, subtype predicates and type invariants) is also skipped.\n-\n-  By default, all the complexity metrics are reported. For more fine-grained\n-  control you can use the following switches:\n-\n-\n-  .. index:: --complexity (gnatmetric)\n-  .. index:: --no-complexity (gnatmetric)\n-\n-\n-  :switch:`--complexity-all`\n-    Report all the complexity metrics\n-\n-\n-  :switch:`--no-complexity-all`\n-    Do not report any of the complexity metrics\n-\n-\n-  :switch:`--complexity-cyclomatic`\n-    Report the McCabe Cyclomatic Complexity\n-\n-\n-  :switch:`--no-complexity-cyclomatic`\n-    Do not report the McCabe Cyclomatic Complexity\n-\n-\n-  :switch:`--complexity-essential`\n-    Report the Essential Complexity\n-\n-\n-  :switch:`--no-complexity-essential`\n-    Do not report the Essential Complexity\n-\n-\n-  :switch:`--loop-nesting`\n-    Report maximal loop nesting level\n-\n-\n-  :switch:`--no-loop-nesting`\n-    Do not report maximal loop nesting level\n-\n-\n-  :switch:`--complexity-average`\n-    Report the average McCabe Cyclomatic Complexity for all the subprogram bodies,\n-    task bodies, entry bodies and statement sequences in package bodies.\n-    The metric is reported for whole set of processed Ada sources only.\n-\n-\n-  :switch:`--no-complexity-average`\n-    Do not report the average McCabe Cyclomatic Complexity for all the subprogram\n-    bodies, task bodies, entry bodies and statement sequences in package bodies\n-\n-  .. index:: --no-treat-exit-as-goto (gnatmetric)\n-\n-\n-  :switch:`--no-treat-exit-as-goto`\n-    Do not consider ``exit`` statements as ``goto``\\ s when\n-    computing Essential Complexity\n-\n-  .. index:: --no-static-loop (gnatmetric)\n-\n-\n-  :switch:`--no-static-loop`\n-    Do not consider static loops when computing cyclomatic complexity\n-\n-\n-  :switch:`--extra-exit-points`\n-    Report the extra exit points for subprogram bodies. As an exit point, this\n-    metric counts ``return`` statements and raise statements in case when the\n-    raised exception is not handled in the same body. In case of a function this\n-    metric subtracts 1 from the number of exit points, because a function body\n-    must contain at least one ``return`` statement.\n-\n-\n-  :switch:`--no-extra-exit-points`\n-    Do not report the extra exit points for subprogram bodies\n-\n-\n-  .. _Coupling_Metrics_Control:\n-\n-  Coupling Metrics Control\n-  ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-  .. index:: Coupling metrics control in gnatmetric\n-\n-  .. index:: Coupling metrics (in gnatmetric)\n-\n-  Coupling metrics measure the dependencies between a given entity and other\n-  entities in the program. This information is useful since high coupling\n-  may signal potential issues with maintainability as the program evolves.\n-\n-  ``gnatmetric`` computes the following coupling metrics:\n-\n-\n-  * *object-oriented coupling*, for classes in traditional object-oriented\n-    sense;\n-\n-  * *unit coupling*, for all the program units making up a program;\n-\n-  * *control coupling*, reflecting dependencies between a unit and\n-    other units that contain subprograms.\n-\n-  .. index:: fan-out coupling\n-  .. index:: efferent coupling\n-\n-  Two kinds of coupling metrics are computed:\n-\n-  * fan-out coupling ('efferent coupling'):\n-    the number of entities the given entity depends upon. This metric\n-    reflects how the given entity depends on the changes in the\n-    'external world'.\n-\n-  .. index:: fan-in coupling\n-  .. index:: afferent coupling\n-\n-  * fan-in coupling ('afferent' coupling):\n-    the number of entities that depend on a given entity.\n-    This metric reflects how the 'external world' depends on the changes in a\n-    given entity.\n-\n-  Object-oriented coupling metrics measure the dependencies\n-  between a given class (or a group of classes) and the other classes in the\n-  program. In this subsection the term 'class' is used in its traditional\n-  object-oriented programming sense (an instantiable module that contains data\n-  and/or method members). A *category* (of classes) is a group of closely\n-  related classes that are reused and/or modified together.\n-\n-  A class ``K``\\ 's fan-out coupling is the number of classes\n-  that ``K`` depends upon.\n-  A category's fan-out coupling is the number of classes outside the\n-  category that the classes inside the category depend upon.\n-\n-  A class ``K``\\ 's fan-in coupling is the number of classes\n-  that depend upon ``K``.\n-  A category's fan-in coupling is the number of classes outside the\n-  category that depend on classes belonging to the category.\n-\n-  Ada's object-oriented paradigm separates the instantiable entity\n-  (type) from the module (package), so the definition of the coupling\n-  metrics for Ada maps the class and class category notions\n-  onto Ada constructs.\n-\n-  For the coupling metrics, several kinds of modules that define a tagged type\n-  or an interface type  -- library packages, library generic packages, and\n-  library generic package instantiations -- are considered to be classes.\n-  A category consists of a library package (or\n-  a library generic package) that defines a tagged or an interface type,\n-  together with all its descendant (generic) packages that define tagged\n-  or interface types. Thus a\n-  category is an Ada hierarchy of library-level program units. Class\n-  coupling in Ada is referred to as 'tagged coupling', and category coupling\n-  is referred to as 'hierarchy coupling'.\n-\n-  For any package serving as a class, its body and subunits (if any) are\n-  considered together with its spec when computing dependencies, and coupling\n-  metrics are reported for spec units only. Dependencies between classes\n-  mean Ada semantic dependencies. For object-oriented coupling\n-  metrics, only dependencies on units treated as classes are\n-  considered.\n-\n-  Similarly, for unit and control coupling an entity is considered to be the\n-  conceptual construct consisting of the entity's specification, body, and\n-  any subunits (transitively).\n-  ``gnatmetric`` computes\n-  the dependencies of all these units as a whole, but\n-  metrics are only reported for spec\n-  units (or for a subprogram body unit in case if there is no\n-  separate spec for the given subprogram).\n-\n-  For unit coupling, dependencies are computed between all kinds of program\n-  units. For control coupling, the dependencies of a given unit are limited to\n-  those units that define subprograms. Thus control fan-out coupling is reported\n-  for all units, but control fan-in coupling is only reported for units\n-  that define subprograms.\n-\n-  The following simple example illustrates the difference between unit coupling\n-  and control coupling metrics:\n-\n-    .. code-block:: ada\n-\n-         package Lib_1 is\n-             function F_1 (I : Integer) return Integer;\n-         end Lib_1;\n-\n-         package Lib_2 is\n-             type T_2 is new Integer;\n-         end Lib_2;\n-\n-         package body Lib_1 is\n-             function F_1 (I : Integer) return Integer is\n-             begin\n-                return I + 1;\n-             end F_1;\n-         end Lib_1;\n-\n-         with Lib_2; use Lib_2;\n-         package Pack is\n-             Var : T_2;\n-             function Fun (I : Integer) return Integer;\n-         end Pack;\n-\n-         with Lib_1; use Lib_1;\n-         package body Pack is\n-             function Fun (I : Integer) return Integer is\n-             begin\n-                return F_1 (I);\n-             end Fun;\n-         end Pack;\n-\n-  If we apply ``gnatmetric`` with the :switch:`--coupling-all` option to\n-  these units, the result will be:\n-\n-    ::\n-\n-       Coupling metrics:\n-       =================\n-           Unit Lib_1 (C:\\\\customers\\\\662\\\\L406-007\\\\lib_1.ads)\n-              control fan-out coupling  : 0\n-              control fan-in coupling   : 1\n-              unit fan-out coupling     : 0\n-              unit fan-in coupling      : 1\n-\n-           Unit Pack (C:\\\\customers\\\\662\\\\L406-007\\\\pack.ads)\n-              control fan-out coupling  : 1\n-              control fan-in coupling   : 0\n-              unit fan-out coupling     : 2\n-              unit fan-in coupling      : 0\n-\n-           Unit Lib_2 (C:\\\\customers\\\\662\\\\L406-007\\\\lib_2.ads)\n-              control fan-out coupling  : 0\n-              unit fan-out coupling     : 0\n-              unit fan-in coupling      : 1\n-\n-  The result does not contain values for object-oriented\n-  coupling because none of the argument units contains a tagged type and\n-  therefore none of these units can be treated as a class.\n-\n-  The ``Pack`` package (spec and body) depends on two\n-  units -- ``Lib_1`` and ``Lib_2`` -- and so its unit fan-out coupling\n-  is 2. Since nothing depends on it, its unit fan-in coupling is 0, as\n-  is its control fan-in coupling. Only one of the units ``Pack`` depends\n-  upon defines a subprogram, so its control fan-out coupling is 1.\n-\n-  ``Lib_2`` depends on nothing, so its fan-out metrics are 0. It does\n-  not define any subprograms, so it has no control fan-in metric.\n-  One unit (``Pack``) depends on it , so its unit fan-in coupling is 1.\n-\n-  ``Lib_1`` is similar to ``Lib_2``, but it does define a subprogram.\n-  Its control fan-in coupling is 1 (because there is one unit\n-  depending on it).\n-\n-  When computing coupling metrics, ``gnatmetric`` counts only\n-  dependencies between units that are arguments of the ``gnatmetric``\n-  invocation. Coupling metrics are program-wide (or project-wide) metrics, so\n-  you should invoke ``gnatmetric`` for\n-  the complete set of sources comprising your program. This can be done\n-  by invoking ``gnatmetric`` with the corresponding project file\n-  and with the :switch:`-U` option.\n-\n-  By default, all the coupling metrics are reported. You can use the following\n-  switches to select specific syntax metrics.\n-\n-  .. index:: --tagged-coupling (gnatmetric)\n-  .. index:: --hierarchy-coupling (gnatmetric)\n-  .. index:: --unit-coupling (gnatmetric)\n-  .. index:: --control-coupling (gnatmetric)\n-\n-  :switch:`--coupling-all`\n-    Report all the coupling metrics\n-\n-\n-  :switch:`--tagged-coupling-out`\n-    Report tagged (class) fan-out coupling\n-\n-\n-  :switch:`--tagged-coupling-in`\n-    Report tagged (class) fan-in coupling\n-\n-\n-  :switch:`--hierarchy-coupling-out`\n-    Report hierarchy (category) fan-out coupling\n-\n-\n-  :switch:`--hierarchy-coupling-in`\n-    Report hierarchy (category) fan-in coupling\n-\n-\n-  :switch:`--unit-coupling-out`\n-    Report unit fan-out coupling\n-\n-\n-  :switch:`--unit-coupling-in`\n-    Report unit fan-in coupling\n-\n-\n-  :switch:`--control-coupling-out`\n-    Report control fan-out coupling\n-\n-\n-  :switch:`--control-coupling-in`\n-    Report control fan-in coupling\n-\n-\n-  .. _Other_gnatmetric_Switches:\n-\n-  Other ``gnatmetric`` Switches\n-  -----------------------------\n-\n-  Additional ``gnatmetric`` switches are as follows:\n-\n-\n-  .. index:: --version (gnatmetric)\n-\n-  :switch:`--version`\n-    Display copyright and version, then exit disregarding all other options.\n-\n-\n-  .. index:: --help (gnatmetric)\n-\n-  :switch:`--help`\n-    Display usage, then exit disregarding all other options.\n-\n-\n-  .. index:: -P (gnatmetric)\n-\n-  :switch:`-P {file}`\n-    Indicates the name of the project file that describes the set of sources\n-    to be processed. The exact set of argument sources depends on other options\n-    specified, see below. An aggregate project is allowed as the file parameter\n-    only if it has exactly one non-aggregate project being aggregated.\n-\n-\n-  .. index:: -U (gnatmetric)\n-\n-  :switch:`-U`\n-    If a project file is specified and no argument source is explicitly\n-    specified (either directly or by means of :switch:`-files` option), process\n-    all the units of the closure of the argument project. Otherwise this option\n-    has no effect.\n-\n-\n-  :switch:`-U {main_unit}`\n-    If a project file is specified and no argument source is explicitly\n-    specified (either directly or by means of :switch:`-files` option), process\n-    the closure of units rooted at ``main_unit``. Otherwise this option\n-    has no effect.\n-\n-\n-  .. index:: -X (gnatmetric)\n-\n-  :switch:`-X{name}={value}`\n-    Indicates that external variable ``name`` in the argument project\n-    has the value ``value``. Has no effect if no project is specified.\n-\n-\n-  .. index:: --RTS (gnatmetric)\n-\n-  :switch:`--RTS={rts-path}`\n-    Specifies the default location of the runtime library. Same meaning as the\n-    equivalent ``gnatmake`` flag (see :ref:`Switches_for_gnatmake`).\n-\n-\n-  .. index:: --subdirs=dir (gnatmetric)\n-\n-  :switch:`--subdirs={dir}`\n-    Use the specified subdirectory of the project objects file (or of the\n-    project file directory if the project does not specify an object directory)\n-    for tool output files. Has no effect if no project is specified as\n-    tool argument r if :switch:`--no-objects-dir` is specified.\n-\n-\n-  .. index:: --files (gnatmetric)\n-\n-  :switch:`--files={file}`\n-    Take as arguments the files listed in text file ``file``.\n-    Text file ``file`` may contain empty lines that are ignored.\n-    Each nonempty line should contain the name of an existing file.\n-    Several such switches may be specified simultaneously.\n-\n-\n-  .. index:: --ignore (gnatmetric)\n-\n-  :switch:`--ignore={filename}`\n-    Do not process the sources listed in a specified file.\n-\n-\n-  .. index:: --verbose (gnatmetric)\n-\n-  :switch:`--verbose`\n-    Verbose mode;\n-    ``gnatmetric`` generates version information and then\n-    a trace of sources being processed.\n-\n-\n-  .. index:: --quiet (gnatmetric)\n-\n-  :switch:`--quiet`\n-    Quiet mode.\n-\n-  If a project file is specified and no argument source is explicitly\n-  specified (either directly or by means of :switch:`-files` option), and no\n-  :switch:`-U` is specified, then the set of processed sources is\n-  all the immediate units of the argument project.\n-\n-\n-  Legacy Switches\n-  ^^^^^^^^^^^^^^^\n-\n-  Some switches have a short form, mostly for legacy reasons,\n-  as shown below.\n-\n-  .. index:: -x (gnatmetric)\n-\n-  :switch:`-x`\n-    :switch:`--generate-xml-output`\n-\n-  .. index:: -xs (gnatmetric)\n-\n-  :switch:`-xs`\n-    :switch:`--generate-xml-schema`\n-\n-  .. index:: -nt (gnatmetric)\n-\n-  :switch:`-nt`\n-    :switch:`--no-text-output`\n-\n-  .. index:: -d (gnatmetric)\n-\n-  :switch:`-d {output-dir}`\n-    :switch:`--output-dir`\n-\n-  .. index:: -o (gnatmetric)\n-\n-  :switch:`-o {file-suffix}`\n-    :switch:`--output-suffix`\n-\n-  .. index:: -og (gnatmetric)\n-\n-  :switch:`-og {file-name}`\n-    :switch:`--global-file-name`\n-\n-  .. index:: -ox (gnatmetric)\n-\n-  :switch:`-ox {file-name}`\n-    :switch:`--xml-file-name`\n-\n-  .. index:: -sfn (gnatmetric)\n-\n-  :switch:`-sfn`\n-    :switch:`--short-file-names`\n-\n-  .. index:: -W (gnatsmetric)\n-\n-  :switch:`-W{e}`\n-    :switch:`--wide-character-encoding={e}`\n-\n-  .. index:: -nolocal (gnatmetric)\n-\n-  :switch:`-nolocal`\n-    :switch:`--no-local-metrics`\n-\n-  .. index:: -ne (gnatmetric)\n-\n-  :switch:`-ne`\n-    :switch:`--no-treat-exit-as-goto`\n-\n-  .. index:: -files (gnatmetric)\n-\n-  :switch:`-files {filename}`\n-    :switch:`--files`\n-\n-  .. index:: -v (gnatmetric)\n-\n-  :switch:`-v`\n-    :switch:`--verbose`\n-\n-  .. index:: -q (gnatmetric)\n-\n-  :switch:`-q`\n-    :switch:`--quiet`\n-\n .. only:: PRO or GPL\n \n    .. _The_GNAT_Pretty_Printer_gnatpp:\n@@ -3026,7 +1908,7 @@ building specialized scripts.\n       naming conventions.\n \n       Note that it is no longer necessary to specify the Ada language version;\n-      ``gnatmetric`` can process Ada source code written in any version from\n+      ``gnatstub`` can process Ada source code written in any version from\n       Ada 83 onward without specifying any language version switch.\n \n   * *switches*"}]}