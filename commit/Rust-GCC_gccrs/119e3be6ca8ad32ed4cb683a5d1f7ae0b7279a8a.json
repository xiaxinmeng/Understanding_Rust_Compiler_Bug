{"sha": "119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5ZTNiZTZjYThhZDMyZWQ0Y2I2ODNhNWQxZjdhZTBiNzI3OWE4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:31:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:31:20Z"}, "message": "[multiple changes]\n\n2012-03-19  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Check_Subprogram_Contract): Do not emit warnings\n\ton trivially True or False postconditions and Ensures components\n\tof contract-cases.\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Fix index entry for -gnatei (now we have\n\tug_words entry).\n\nFrom-SVN: r185527", "tree": {"sha": "22e0379c0f58d394a21ff19982fbaeba29ea359c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e0379c0f58d394a21ff19982fbaeba29ea359c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/comments", "author": null, "committer": null, "parents": [{"sha": "78c0f016063f856d4d35ba5591fbe825d7ab6544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c0f016063f856d4d35ba5591fbe825d7ab6544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c0f016063f856d4d35ba5591fbe825d7ab6544"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "28c47b8e76e895f4fc7fc645aad12767d30811d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "patch": "@@ -1,3 +1,14 @@\n+2012-03-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Subprogram_Contract): Do not emit warnings\n+\ton trivially True or False postconditions and Ensures components\n+\tof contract-cases.\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix index entry for -gnatei (now we have\n+\tug_words entry).\n+\n 2012-03-19  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb (Get_Discriminant_Value): Instead of looking"}, {"sha": "5c313ac76f0e587aef00ffec436eee13b992986d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "patch": "@@ -4155,13 +4155,13 @@ Display full source path name in brief error messages.\n @cindex @option{-gnateG} (@command{gcc})\n Save result of preprocessing in a text file.\n \n-@item ^-gnatei^/MAX_INSTANTIATIONS=^@var{nnn}\n+@item -gnatei@var{nnn}\n @cindex @option{-gnatei} (@command{gcc})\n Set maximum number of instantiations during compilation of a single unit to\n @var{nnn}. This may be useful in increasing the default maximum of 8000 for\n the rare case when a single unit legitimately exceeds this limit.\n \n-@item ^-gnateI^/MULTI_UNIT_INDEX=^@var{nnn}\n+@item -gnateI@var{nnn}\n @cindex @option{-gnateI} (@command{gcc})\n Indicates that the source is a multi-unit source and that the index of the\n unit to compile is @var{nnn}. @var{nnn} needs to be a positive number and need"}, {"sha": "5464d418426c0323269f88009cb95bc129661c93", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "patch": "@@ -6927,23 +6927,29 @@ package body Sem_Ch6 is\n --                      Inherited_Subprograms (Spec_Id);\n --        --  List of subprograms inherited by this subprogram\n \n+      --  We ignore postconditions \"True\" or \"False\" and contract-cases which\n+      --  have similar Ensures components, which we call \"trivial\", when\n+      --  issuing warnings, since these postconditions and contract-cases\n+      --  purposedly ignore the post-state.\n+\n       Last_Postcondition : Node_Id := Empty;\n-      --  Last postcondition on the subprogram, or else Empty if either no\n-      --  postcondition or only inherited postconditions.\n+      --  Last non-trivial postcondition on the subprogram, or else Empty if\n+      --  either no non-trivial postcondition or only inherited postconditions.\n \n       Last_Contract_Case : Node_Id := Empty;\n-      --  Last contract-case on the subprogram, or else Empty\n+      --  Last non-trivial contract-case on the subprogram, or else Empty\n \n       Attribute_Result_Mentioned : Boolean := False;\n-      --  Whether attribute 'Result is mentioned in a postcondition\n+      --  Whether attribute 'Result is mentioned in a non-trivial postcondition\n+      --  or contract-case.\n \n       No_Warning_On_Some_Postcondition : Boolean := False;\n-      --  Whether there exists a postcondition or a contract-case without a\n-      --  corresponding warning.\n+      --  Whether there exists a non-trivial postcondition or contract-case\n+      --  without a corresponding warning.\n \n       Post_State_Mentioned : Boolean := False;\n-      --  Whether some expression mentioned in a postcondition can have a\n-      --  different value in the post-state than in the pre-state.\n+      --  Whether some expression mentioned in a postcondition or contract-case\n+      --  can have a different value in the post-state than in the pre-state.\n \n       function Check_Attr_Result (N : Node_Id) return Traverse_Result;\n       --  Check if N is a reference to the attribute 'Result, and if so set\n@@ -6956,6 +6962,9 @@ package body Sem_Ch6 is\n       --  reference to attribute 'Old, in order to ignore its prefix, which\n       --  is precisely evaluated in the pre-state. Otherwise return OK.\n \n+      function Is_Trivial_Post_Or_Ensures (N : Node_Id) return Boolean;\n+      --  Return whether node N is trivially \"True\" or \"False\"\n+\n       procedure Process_Contract_Cases (Spec : Node_Id);\n       --  This processes the Spec_CTC_List from Spec, processing any contract\n       --  case from the list. The caller has checked that Spec_CTC_List is\n@@ -7046,13 +7055,26 @@ package body Sem_Ch6 is\n          end if;\n       end Check_Post_State;\n \n+      --------------------------------\n+      -- Is_Trivial_Post_Or_Ensures --\n+      --------------------------------\n+\n+      function Is_Trivial_Post_Or_Ensures (N : Node_Id) return Boolean is\n+      begin\n+         return Is_Entity_Name (N)\n+           and then (Entity (N) = Standard_True\n+                       or else\n+                     Entity (N) = Standard_False);\n+      end Is_Trivial_Post_Or_Ensures;\n+\n       ----------------------------\n       -- Process_Contract_Cases --\n       ----------------------------\n \n       procedure Process_Contract_Cases (Spec : Node_Id) is\n-         Prag    : Node_Id;\n-         Arg     : Node_Id;\n+         Prag : Node_Id;\n+         Arg  : Node_Id;\n+\n          Ignored : Traverse_Final_Result;\n          pragma Unreferenced (Ignored);\n \n@@ -7063,8 +7085,12 @@ package body Sem_Ch6 is\n \n             Arg := Get_Ensures_From_CTC_Pragma (Prag);\n \n-            if Pragma_Name (Prag) = Name_Contract_Case then\n+            --  Ignore trivial contract-case when Ensures component is \"True\"\n+            --  or \"False\".\n \n+            if Pragma_Name (Prag) = Name_Contract_Case\n+              and then not Is_Trivial_Post_Or_Ensures (Expression (Arg))\n+            then\n                --  Since contract-cases are listed in reverse order, the first\n                --  contract-case in the list is the last in the source.\n \n@@ -7088,8 +7114,8 @@ package body Sem_Ch6 is\n                if Post_State_Mentioned then\n                   No_Warning_On_Some_Postcondition := True;\n                else\n-                  Error_Msg_N (\"?`Ensures` component refers only to pre-state\",\n-                               Prag);\n+                  Error_Msg_N\n+                    (\"?`Ensures` component refers only to pre-state\", Prag);\n                end if;\n             end if;\n \n@@ -7116,8 +7142,11 @@ package body Sem_Ch6 is\n          loop\n             Arg := First (Pragma_Argument_Associations (Prag));\n \n-            if Pragma_Name (Prag) = Name_Postcondition then\n+            --  Ignore trivial postcondition of \"True\" or \"False\"\n \n+            if Pragma_Name (Prag) = Name_Postcondition\n+              and then not Is_Trivial_Post_Or_Ensures (Expression (Arg))\n+            then\n                --  Since pre- and post-conditions are listed in reverse order,\n                --  the first postcondition in the list is last in the source.\n "}, {"sha": "9901b8477a0d0b1d9e6573f4e7807e2de73f4922", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "patch": "@@ -63,6 +63,7 @@ gcc -c          ^ GNAT COMPILE\n -gnateD         ^ /SYMBOL_PREPROCESSING\n -gnatef         ^ /FULL_PATH_IN_BRIEF_MESSAGES\n -gnateG         ^ /GENERATE_PROCESSED_SOURCE\n+-gnatei         ^ /MAX_INSTANTIATIONS=\n -gnateI         ^ /MULTI_UNIT_INDEX=\n -gnatem         ^ /MAPPING_FILE\n -gnatep         ^ /DATA_PREPROCESSING"}]}