{"sha": "419c6c68e60adc8801b44dab72ebcd680cfe1d97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5YzZjNjhlNjBhZGM4ODAxYjQ0ZGFiNzJlYmNkNjgwY2ZlMWQ5Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-22T00:16:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-22T00:16:46Z"}, "message": "Daily bump.", "tree": {"sha": "db5f3720385deb18cc6a6354a4b9076081092435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5f3720385deb18cc6a6354a4b9076081092435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419c6c68e60adc8801b44dab72ebcd680cfe1d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c6c68e60adc8801b44dab72ebcd680cfe1d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419c6c68e60adc8801b44dab72ebcd680cfe1d97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c6c68e60adc8801b44dab72ebcd680cfe1d97/comments", "author": null, "committer": null, "parents": [{"sha": "893b12cc12877aca1c9df6272123b26eddf12722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893b12cc12877aca1c9df6272123b26eddf12722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893b12cc12877aca1c9df6272123b26eddf12722"}], "stats": {"total": 467, "additions": 466, "deletions": 1}, "files": [{"sha": "7778d3fdcbd77bd9df781a81e83b8e9081a6006d", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,17 @@\n+2021-07-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98821\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Configure using C++.  Pull logic to\n+\tdetect enabled checking modes; default to release\n+\tchecking.\n+\t* server.cc (AI_NUMERICSERV): Define a fallback value.\n+\t(gcc_assert): New.\n+\t(gcc_unreachable): New.\n+\t(fancy_abort): Only build when checking is enabled.\n+\n 2021-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/100731"}, {"sha": "d450c6bd18d6d010446830079da2a0a5b2f80b3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,225 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* tree-core.h (omp_clause_code): Add 'OMP_CLAUSE_NOHOST'.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name, walk_tree_1):\n+\tHandle it.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\t* omp-general.c (oacc_verify_routine_clauses): Likewise.\n+\t* gimplify.c (gimplify_scan_omp_clauses)\n+\t(gimplify_adjust_omp_clauses): Likewise.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses)\n+\t(convert_local_omp_clauses): Likewise.\n+\t* omp-low.c (scan_sharing_clauses): Likewise.\n+\t* omp-offload.c (execute_oacc_device_lower): Update.\n+\n+2021-07-21  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Fix typos in a comment.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (write_init_bif_table):\n+\tImplement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (write_fntype): New\n+\tcallback function.\n+\t(write_fntype_init): New stub function.\n+\t(write_init_bif_table): Likewise.\n+\t(write_init_ovld_table): New function.\n+\t(write_init_file): Implement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c\n+\t(write_autogenerated_header): New function.\n+\t(write_decls): Likewise.\n+\t(write_extern_fntype): New callback function.\n+\t(write_header_file): Implement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (write_defines_file):\n+\tImplement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (complete_vector_type): New\n+\tfunction.\n+\t(complete_base_type): Likewise.\n+\t(construct_fntype_id): Likewise.\n+\t(parse_bif_entry): Call contruct_fntype_id.\n+\t(parse_ovld_entry): Likewise.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (ovld_stanza): New struct.\n+\t(MAXOVLDSTANZAS): New macro.\n+\t(ovld_stanzas): New variable.\n+\t(curr_ovld_stanza): Likewise.\n+\t(MAXOVLDS): New macro.\n+\t(ovlddata): New struct.\n+\t(ovlds): New variable.\n+\t(curr_ovld): Likewise.\n+\t(max_ovld_args): Likewise.\n+\t(parse_ovld_entry): New function.\n+\t(parse_ovld_stanza): Likewise.\n+\t(parse_ovld): Implement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (parse_bif_attrs):\n+\tImplement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (parse_args): New function.\n+\t(parse_prototype): Implement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (bif_stanza): New enum.\n+\t(curr_bif_stanza): New variable.\n+\t(stanza_entry): New struct.\n+\t(stanza_map): New initialized variable.\n+\t(enable_string): Likewise.\n+\t(fnkinds): New enum.\n+\t(typelist): New struct.\n+\t(attrinfo): Likewise.\n+\t(MAXRESTROPNDS): New macro.\n+\t(prototype): New struct.\n+\t(MAXBIFS): New macro.\n+\t(bifdata): New struct.\n+\t(bifs): New variable.\n+\t(curr_bif): Likewise.\n+\t(bif_order): Likewise.\n+\t(bif_index): Likewise.\n+\t(fatal): New function.\n+\t(stanza_name_to_stanza): Likewise.\n+\t(parse_bif_attrs): New stub function.\n+\t(parse_prototype): Likewise.\n+\t(parse_bif_entry): New function.\n+\t(parse_bif_stanza): Likewise.\n+\t(parse_bif): Implement.\n+\t(set_bif_order): New function.\n+\t(create_bif_order): Implement.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (rbtree.h): New #include.\n+\t(num_bifs): New variable.\n+\t(num_ovld_stanzas): Likewise.\n+\t(num_ovlds): Likewise.\n+\t(parse_codes): New enum.\n+\t(bif_rbt): New variable.\n+\t(ovld_rbt): Likewise.\n+\t(fntype_rbt): Likewise.\n+\t(bifo_rbt): Likewise.\n+\t(parse_bif): New stub function.\n+\t(create_bif_order): Likewise.\n+\t(parse_ovld): Likewise.\n+\t(write_header_file): Likewise.\n+\t(write_init_file): Likewise.\n+\t(write_defines_file): Likewise.\n+\t(delete_output_files): New function.\n+\t(main): Likewise.\n+\n+2021-07-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101549\n+\t* config/i386/i386-builtin.def: Remove OPTION_MASK_ISA_SSE4_2\n+\tfrom CRC32 _builtin functions.\n+\n+2021-07-21  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* coverage.c (build_gcov_info_var_registration): Mark the object placed\n+\tin the linker set as referenced so that it does not get optimized away.\n+\n+2021-07-21  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tRevert:\n+\t2021-07-20  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): Detect which python is available.\n+\n+2021-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101535\n+\t* gimplify.c (omp_check_private): Properly skip ORT_TARGET_DATA\n+\tcontexts in which decl isn't privatized and for ORT_TARGET return\n+\tfalse if decl is mapped.\n+\n+2021-07-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple-loop-jam.c: Include tree-ssa-sccvn.h.\n+\t(tree_loop_unroll_and_jam): Run value-numbering on a loop that\n+\thas been successfully unrolled.\n+\n+2021-07-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-ssa-loop-manip.c (determine_exit_conditions): Return a null\n+\texit condition if no tail loop is needed, and if the original exit\n+\tcondition should therefore be kept as-is.\n+\t(tree_transform_and_unroll_loop): Handle that case here too.\n+\n+2021-07-21  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-data-ref.c (free_dependence_relations): Adjust to pass vec\n+\tby reference.\n+\t(free_data_refs): Likewise.\n+\t* tree-data-ref.h (free_dependence_relations): Likewise.\n+\t(free_data_refs): Likewise.\n+\t* tree-predcom.c (struct chain): Use auto_vec instead of vec for\n+\tmembers.\n+\t(struct component): Likewise.\n+\t(pcom_worker::pcom_worker): Adjust for auto_vec and renaming changes.\n+\t(pcom_worker::~pcom_worker): Likewise.\n+\t(pcom_worker::release_chain): Adjust as auto_vec changes.\n+\t(pcom_worker::loop): Rename to ...\n+\t(pcom_worker::m_loop): ... this.\n+\t(pcom_worker::datarefs): Rename to ...\n+\t(pcom_worker::m_datarefs): ... this.  Use auto_vec instead of vec.\n+\t(pcom_worker::dependences): Rename to ...\n+\t(pcom_worker::m_dependences): ... this.  Use auto_vec instead of vec.\n+\t(pcom_worker::chains): Rename to ...\n+\t(pcom_worker::m_chains): ... this.  Use auto_vec instead of vec.\n+\t(pcom_worker::looparound_phis): Rename to ...\n+\t(pcom_worker::m_looparound_phis): ... this.  Use auto_vec instead of\n+\tvec.\n+\t(pcom_worker::cache): Rename to ...\n+\t(pcom_worker::m_cache): ... this.  Use auto_vec instead of vec.\n+\t(pcom_worker::release_chain): Adjust for auto_vec changes.\n+\t(pcom_worker::release_chains): Adjust for auto_vec and renaming\n+\tchanges.\n+\t(release_component): Remove.\n+\t(release_components): Adjust for release_component removal.\n+\t(component_of): Adjust to use vec.\n+\t(merge_comps): Likewise.\n+\t(pcom_worker::aff_combination_dr_offset): Adjust for renaming changes.\n+\t(pcom_worker::determine_offset): Likewise.\n+\t(class comp_ptrs): Remove.\n+\t(pcom_worker::split_data_refs_to_components): Adjust for renaming\n+\tchanges, for comp_ptrs removal with auto_vec.\n+\t(pcom_worker::suitable_component_p): Adjust for renaming changes.\n+\t(pcom_worker::filter_suitable_components): Adjust for release_component\n+\tremoval.\n+\t(pcom_worker::valid_initializer_p): Adjust for renaming changes.\n+\t(pcom_worker::find_looparound_phi): Likewise.\n+\t(pcom_worker::add_looparound_copies): Likewise.\n+\t(pcom_worker::determine_roots_comp): Likewise.\n+\t(pcom_worker::single_nonlooparound_use): Likewise.\n+\t(pcom_worker::execute_pred_commoning_chain): Likewise.\n+\t(pcom_worker::execute_pred_commoning): Likewise.\n+\t(pcom_worker::try_combine_chains): Likewise.\n+\t(pcom_worker::prepare_initializers_chain): Likewise.\n+\t(pcom_worker::prepare_initializers): Likewise.\n+\t(pcom_worker::prepare_finalizers_chain): Likewise.\n+\t(pcom_worker::prepare_finalizers): Likewise.\n+\t(pcom_worker::tree_predictive_commoning_loop): Likewise.\n+\n 2021-07-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/101397"}, {"sha": "9f48762c747914a4b55223b829ec7415ac4d8ec6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1 +1 @@\n-20210721\n+20210722"}, {"sha": "272bf15cc1627a1ecafdf23b5d22c12647f6f241", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,58 @@\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101547\n+\t* sm-file.cc (file_leak::emit): Handle m_arg being NULL.\n+\t(file_leak::describe_final_event): Handle ev.m_expr being NULL.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101522\n+\t* store.cc (binding_cluster::purge_state_involving): Don't change\n+\tm_map whilst iterating through it.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::handle_phi): Add \"old_state\"\n+\tparam and use it.\n+\t(region_model::update_for_phis): Update so that all of the phi\n+\tstmts are effectively handled simultaneously, rather than in\n+\torder.\n+\t* region-model.h (region_model::handle_phi): Add \"old_state\"\n+\tparam.\n+\t* state-purge.cc (self_referential_phi_p): Replace with...\n+\t(name_used_by_phis_p): ...this new function.\n+\t(state_purge_per_ssa_name::process_point): Update to use the\n+\tabove, so that all phi stmts at a basic block are effectively\n+\tconsidered simultaneously, and only consider the phi arguments for\n+\tthe pertinent in-edge.\n+\t* supergraph.cc (cfg_superedge::get_phi_arg_idx): New.\n+\t(cfg_superedge::get_phi_arg): Use the above.\n+\t* supergraph.h (cfg_superedge::get_phi_arg_idx): New decl.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* state-purge.cc (state_purge_annotator::add_node_annotations):\n+\tRather than erroneously always using the NULL in-edge, determine\n+\teach relevant in-edge, and print the appropriate data for each\n+\tin-edge.  Use print_needed to print the data as comma-separated\n+\tlists of SSA names.\n+\t(print_vec_of_names): Add \"within_table\" param and use it.\n+\t(state_purge_annotator::add_stmt_annotations): Factor out\n+\tcollation and printing code into...\n+\t(state_purge_annotator::print_needed): ...this new function.\n+\t* state-purge.h (state_purge_annotator::print_needed): New decl.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-point.cc (function_point::print): Show src BB index at\n+\tBEFORE_SUPERNODE.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* svalue.cc (infix_p): New.\n+\t(binop_svalue::dump_to_pp): Use it to print MIN_EXPR and MAX_EXPR\n+\tin prefix form, rather than infix.\n+\n 2021-07-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101503"}, {"sha": "55f18d991f9ea87ad9d1b7a2aa298256aa8c0dc6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,9 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-pragma.h (pragma_omp_clause): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n+\n 2021-07-20  Martin Sebor  <msebor@redhat.com>\n \n \t* c-common.c (c_build_shufflevector): Adjust by-value argument to"}, {"sha": "367c9c72b4e84e6ff4ae07fe7ad805f7bd5c6917", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,12 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Handle 'nohost'.\n+\t(c_parser_oacc_all_clauses): Handle 'PRAGMA_OACC_CLAUSE_NOHOST'.\n+\t(OACC_ROUTINE_CLAUSE_MASK): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n+\t* c-typeck.c (c_finish_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n+\n 2021-07-20  Martin Sebor  <msebor@redhat.com>\n \n \t* c-tree.h (c_build_function_call_vec): Adjust by-value argument to"}, {"sha": "37ea7f5c3abc97629253581282778439f89fccef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,19 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Handle 'nohost'.\n+\t(cp_parser_oacc_all_clauses): Handle 'PRAGMA_OACC_CLAUSE_NOHOST'.\n+\t(OACC_ROUTINE_CLAUSE_MASK): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n+\t* pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n+\t* semantics.c (finish_omp_clauses): Likewise.\n+\n+2021-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101516\n+\t* semantics.c (finish_omp_reduction_clause): Also call\n+\tcomplete_type_or_else and return true if it fails.\n+\n 2021-07-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95520"}, {"sha": "1c6aa03f1b7db6f2457ae103e5319f0fc0987bd8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,34 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_attr): Update.\n+\t* gfortran.h (symbol_attribute): Add 'oacc_routine_nohost' member.\n+\t(gfc_omp_clauses): Add 'nohost' member.\n+\t* module.c (ab_attribute): Add 'AB_OACC_ROUTINE_NOHOST'.\n+\t(attr_bits, mio_symbol_attribute): Update.\n+\t* openmp.c (omp_mask2): Add 'OMP_CLAUSE_NOHOST'.\n+\t(gfc_match_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n+\t(OACC_ROUTINE_CLAUSES): Add 'OMP_CLAUSE_NOHOST'.\n+\t(gfc_match_oacc_routine): Update.\n+\t* trans-decl.c (add_attributes_to_decl): Update.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n+\n+2021-07-21  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101514\n+\t* target-memory.c (gfc_interpret_derived): Size of array component\n+\tof derived type can only be computed here for explicit shape.\n+\t* trans-types.c (gfc_get_nodesc_array_type): Do not dereference\n+\tNULL pointers.\n+\n+2021-07-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* decl.c (gfc_verify_c_interop_param): Update for F2008 + F2018\n+\tchanges; reject unsupported bits with 'Error: Sorry,'.\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix condition to\n+\tFor using CFI descriptor with characters.\n+\n 2021-07-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/101084"}, {"sha": "141e9482bde6f3fead0fff75ef9d7b43c133a591", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,90 @@\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101547\n+\t* gcc.dg/analyzer/pr101547.c: New test.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101522\n+\t* g++.dg/analyzer/pr101522.C: New test.\n+\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-c++-common/goacc/classify-routine-nohost.c: New file.\n+\t* c-c++-common/goacc/classify-routine.c: Update.\n+\t* c-c++-common/goacc/routine-2.c: Likewise.\n+\t* c-c++-common/goacc/routine-nohost-1.c: New file.\n+\t* c-c++-common/goacc/routine-nohost-2.c: Likewise.\n+\t* g++.dg/goacc/template.C: Update.\n+\t* gfortran.dg/goacc/classify-routine-nohost.f95: New file.\n+\t* gfortran.dg/goacc/classify-routine.f95: Update.\n+\t* gfortran.dg/goacc/pure-elemental-procedures-2.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-6.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-intrinsic-2.f: Likewise.\n+\t* gfortran.dg/goacc/routine-module-1.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-module-2.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-module-3.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-multiple-directives-2.f90: Likewise.\n+\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* g++.dg/goacc/template.C: Fix '#pragma atomic update' typo.\n+\n+2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/explode-2.c: Remove xfail.\n+\t* gcc.dg/analyzer/explode-2a.c: Remove expected leak warning on\n+\twhile stmt.\n+\t* gcc.dg/analyzer/phi-2.c: New test.\n+\n+2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/101531\n+\t* gcc.target/powerpc/pr101129.c: Adjust.\n+\n+2021-07-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101549\n+\t* gcc.target/i386/crc32-6.c: New test.\n+\n+2021-07-21  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101514\n+\t* gfortran.dg/pr101514.f90: New test.\n+\n+2021-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101535\n+\t* c-c++-common/gomp/pr101535-1.c: New test.\n+\t* c-c++-common/gomp/pr101535-2.c: New test.\n+\n+2021-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101516\n+\t* g++.dg/gomp/pr101516.C: New test.\n+\n+2021-07-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/iso_c_binding_char_1.f90: Update dg-error.\n+\t* gfortran.dg/pr32599.f03: Use -std=-f2003 + update comment.\n+\t* gfortran.dg/bind_c_char_10.f90: New test.\n+\t* gfortran.dg/bind_c_char_6.f90: New test.\n+\t* gfortran.dg/bind_c_char_7.f90: New test.\n+\t* gfortran.dg/bind_c_char_8.f90: New test.\n+\t* gfortran.dg/bind_c_char_9.f90: New test.\n+\n+2021-07-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/unroll-10.c: New test.\n+\n+2021-07-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/unroll-9.c: New test/\n+\n 2021-07-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/101397"}, {"sha": "04b53ef17e5f6d583f47011021bc9b241335bff0", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,9 @@\n+2021-07-21  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/101379\n+\t* config/linux/arm/host-config.h (__kernel_helper_version): New\n+\tfunction.  Adjust shadow macro.\n+\n 2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/70454"}, {"sha": "59fa36c0f9bb8f47b1f1e1c3499bfcb66b7c611b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,15 @@\n+2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c: New\n+\tfile.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2_2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-nohost-1.f90: Likewise.\n+\n 2021-07-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR target/101484"}, {"sha": "bc7ce61bd726022a492052ef574d9f335a47c53d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c6c68e60adc8801b44dab72ebcd680cfe1d97/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=419c6c68e60adc8801b44dab72ebcd680cfe1d97", "patch": "@@ -1,3 +1,10 @@\n+2021-07-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101542\n+\t* include/ext/rope (sequence_buffer): Add move constructor and\n+\tmove assignment operator.\n+\t* testsuite/ext/rope/101542.cc: New test.\n+\n 2021-07-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101510"}]}