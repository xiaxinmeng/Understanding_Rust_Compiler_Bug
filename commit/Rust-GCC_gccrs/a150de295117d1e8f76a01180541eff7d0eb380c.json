{"sha": "a150de295117d1e8f76a01180541eff7d0eb380c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1MGRlMjk1MTE3ZDFlOGY3NmEwMTE4MDU0MWVmZjdkMGViMzgwYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-04-01T13:41:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-04-01T13:41:37Z"}, "message": "expr.c (get_inner_reference): Use DECL_UNSIGNED, not TREE_UNSIGNED.\n\n\t* expr.c (get_inner_reference): Use DECL_UNSIGNED, not TREE_UNSIGNED.\n\t* stor-layout.c (layout_decl): Likewise.\n\t* tree.c (get_narrower): Likewise and also use BIT_FIELD_REF_UNSIGNED.\n\t* fold-const.c (make_bit_field_ref): Use BIT_FIELD_REF_UNSIGNED.\n\t* print-tree.c (print_node): Handle various used of unsigned_flag.\n\t* tree.def (BIT_FIELD_REF): Update comment.\n\t* tree.h (TREE_UNSIGNED): Deleted.\n\t(DECL_UNSIGNED, BIT_FIELD_REF_UNSIGNED): New macros.\n\n\t* cp/class.c (VTT_TOP_LEVEL_P): Use unsigned_flag directly.\n\n\t* f/com.c (ffe_truthvalue_conversion, case COMPONENT_REF):\n\tUse DECL_UNSIGNED and integer_onep.\n\nFrom-SVN: r80293", "tree": {"sha": "4f85aaf350d91ff190852cf8f384d2a7a686b351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f85aaf350d91ff190852cf8f384d2a7a686b351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a150de295117d1e8f76a01180541eff7d0eb380c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a150de295117d1e8f76a01180541eff7d0eb380c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a150de295117d1e8f76a01180541eff7d0eb380c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a150de295117d1e8f76a01180541eff7d0eb380c/comments", "author": null, "committer": null, "parents": [{"sha": "0c250f07daed7878b5db0ca1cc48acf92464f2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c250f07daed7878b5db0ca1cc48acf92464f2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c250f07daed7878b5db0ca1cc48acf92464f2eb"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "a1fffe747d4442920597aefcfcd45a7f2aadcd9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -1,3 +1,14 @@\n+2004-04-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (get_inner_reference): Use DECL_UNSIGNED, not TREE_UNSIGNED.\n+\t* stor-layout.c (layout_decl): Likewise.\n+\t* tree.c (get_narrower): Likewise and also use BIT_FIELD_REF_UNSIGNED.\n+\t* fold-const.c (make_bit_field_ref): Use BIT_FIELD_REF_UNSIGNED.\n+\t* print-tree.c (print_node): Handle various used of unsigned_flag.\n+\t* tree.def (BIT_FIELD_REF): Update comment.\n+\t* tree.h (TREE_UNSIGNED): Deleted.\n+\t(DECL_UNSIGNED, BIT_FIELD_REF_UNSIGNED): New macros.\n+\n 2004-03-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* builtins.c, c-aux-info.c, c-common.c, c-cppbuiltin.c, c-decl.c:"}, {"sha": "4a6f648f314957eae698dc869b7157fb6967d742", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -1,3 +1,7 @@\n+2004-04-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* class.c (VTT_TOP_LEVEL_P): Use unsigned_flag directly.\n+\n 2004-03-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* call.c (joust): Use TYPE_UNSIGNED, not TREE_UNSIGNED."}, {"sha": "6188f5e1cbf3ce7ece2e133d76ba3a0fabc077df", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -213,7 +213,7 @@ static tree get_vcall_index (tree, tree);\n /* Macros for dfs walking during vtt construction. See\n    dfs_ctor_vtable_bases_queue_p, dfs_build_secondary_vptr_vtt_inits\n    and dfs_fixup_binfo_vtbls.  */\n-#define VTT_TOP_LEVEL_P(NODE) TREE_UNSIGNED (NODE)\n+#define VTT_TOP_LEVEL_P(NODE) (TREE_LIST_CHECK (NODE)->common.unsigned_flag)\n #define VTT_MARKED_BINFO_P(NODE) TREE_USED (NODE)\n \n /* Variables shared between class.c and call.c.  */"}, {"sha": "f884ad977472abaf62ea5ee2c2bcd812298c4a0e", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -5440,12 +5440,12 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n       if (! DECL_BIT_FIELD (TREE_OPERAND (exp, 1)))\n \tmode = DECL_MODE (TREE_OPERAND (exp, 1));\n \n-      *punsignedp = TREE_UNSIGNED (TREE_OPERAND (exp, 1));\n+      *punsignedp = DECL_UNSIGNED (TREE_OPERAND (exp, 1));\n     }\n   else if (TREE_CODE (exp) == BIT_FIELD_REF)\n     {\n       size_tree = TREE_OPERAND (exp, 1);\n-      *punsignedp = TREE_UNSIGNED (exp);\n+      *punsignedp = BIT_FIELD_REF_UNSIGNED (exp);\n     }\n   else\n     {"}, {"sha": "be92b2974772115550abf8bec0571b8bfc6d56e9", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -1,3 +1,8 @@\n+2004-04-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* com.c (ffe_truthvalue_conversion, case COMPONENT_REF):\n+\tUse DECL_UNSIGNED and integer_onep.\n+\n 2004-03-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* com.c (ffecom_arrayref_): Use TYPE_UNSIGNED, not TREE_UNSIGNED."}, {"sha": "ab6fc1b3597501c3db2cfebcd6da330f65164a2e", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -14754,8 +14754,8 @@ ffe_truthvalue_conversion (tree expr)\n #if 0\n     case COMPONENT_REF:\n       /* A one-bit unsigned bit-field is already acceptable.  */\n-      if (1 == TREE_INT_CST_LOW (DECL_SIZE (TREE_OPERAND (expr, 1)))\n-\t  && TREE_UNSIGNED (TREE_OPERAND (expr, 1)))\n+      if (integer_onep (DECL_SIZE (TREE_OPERAND (expr, 1)))\n+\t  && DECL_UNSIGNED (TREE_OPERAND (expr, 1)))\n \treturn expr;\n       break;\n #endif"}, {"sha": "51e986abf38a4fcb37a884e72df4d937e49b9442", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -2814,7 +2814,7 @@ make_bit_field_ref (tree inner, tree type, int bitsize, int bitpos,\n   tree result = build (BIT_FIELD_REF, type, inner,\n \t\t       size_int (bitsize), bitsize_int (bitpos));\n \n-  TREE_UNSIGNED (result) = unsignedp;\n+  BIT_FIELD_REF_UNSIGNED (result) = unsignedp;\n \n   return result;\n }"}, {"sha": "2fe09967d74880a73a55783dccb601ca31ae939e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -255,8 +255,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     fputs (\" addressable\", file);\n   if (TREE_THIS_VOLATILE (node))\n     fputs (\" volatile\", file);\n-  if (TREE_UNSIGNED (node))\n-    fputs (\" unsigned\", file);\n   if (TREE_ASM_WRITTEN (node))\n     fputs (\" asm_written\", file);\n   if (TREE_USED (node))\n@@ -295,6 +293,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     case 'd':\n       mode = DECL_MODE (node);\n \n+      if (DECL_UNSIGNED (node))\n+\tfputs (\" unsigned\", file);\n       if (DECL_IGNORED_P (node))\n \tfputs (\" ignored\", file);\n       if (DECL_ABSTRACT (node))\n@@ -455,6 +455,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       break;\n \n     case 't':\n+      if (TYPE_UNSIGNED (node))\n+\tfputs (\" unsigned\", file);\n+\n       /* The no-force-blk flag is used for different things in\n \t different types.  */\n       if ((TREE_CODE (node) == RECORD_TYPE\n@@ -576,6 +579,10 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     case '2':\n     case 'r':\n     case 's':\n+      if (TREE_CODE (node) == BIT_FIELD_REF && BIT_FIELD_REF_UNSIGNED (node))\n+\tfputs (\" unsigned\", file);\n+      else if (TREE_CODE (node) == SAVE_EXPR && SAVE_EXPR_NOPLACEHOLDER (node))\n+\tfputs (\" noplaceholder\", file);\n       if (TREE_CODE (node) == BIND_EXPR)\n \t{\n \t  print_node (file, \"vars\", TREE_OPERAND (node, 0), indent + 4);"}, {"sha": "2baa36432a4d878800d6de173c2fb2e448caa0c0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -364,7 +364,7 @@ layout_decl (tree decl, unsigned int known_align)\n      size in bytes from the size in bits.  If we have already set the mode,\n      don't set it again since we can be called twice for FIELD_DECLs.  */\n \n-  TREE_UNSIGNED (decl) = TYPE_UNSIGNED (type);\n+  DECL_UNSIGNED (decl) = TYPE_UNSIGNED (type);\n   if (DECL_MODE (decl) == VOIDmode)\n     DECL_MODE (decl) = TYPE_MODE (type);\n "}, {"sha": "7d5e6d5b600d080075bf3328f8421e13166e1d86", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -4415,7 +4415,7 @@ get_unwidened (tree op, tree for_type)\n     {\n       unsigned int innerprec\n \t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n-      int unsignedp = (TREE_UNSIGNED (TREE_OPERAND (op, 1))\n+      int unsignedp = (DECL_UNSIGNED (TREE_OPERAND (op, 1))\n \t\t       || TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op, 1))));\n       type = lang_hooks.types.type_for_size (innerprec, unsignedp);\n \n@@ -4500,7 +4500,7 @@ get_narrower (tree op, int *unsignedp_ptr)\n     {\n       unsigned HOST_WIDE_INT innerprec\n \t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n-      int unsignedp = (TREE_UNSIGNED (TREE_OPERAND (op, 1))\n+      int unsignedp = (DECL_UNSIGNED (TREE_OPERAND (op, 1))\n \t\t       || TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op, 1))));\n       tree type = lang_hooks.types.type_for_size (innerprec, unsignedp);\n \n@@ -4514,11 +4514,11 @@ get_narrower (tree op, int *unsignedp_ptr)\n \n       if (innerprec < TYPE_PRECISION (TREE_TYPE (op))\n \t  && ! DECL_BIT_FIELD (TREE_OPERAND (op, 1))\n-\t  && (first || uns == TREE_UNSIGNED (TREE_OPERAND (op, 1)))\n+\t  && (first || uns == DECL_UNSIGNED (TREE_OPERAND (op, 1)))\n \t  && type != 0)\n \t{\n \t  if (first)\n-\t    uns = TREE_UNSIGNED (TREE_OPERAND (op, 1));\n+\t    uns = DECL_UNSIGNED (TREE_OPERAND (op, 1));\n \t  win = build (COMPONENT_REF, type, TREE_OPERAND (op, 0),\n \t\t       TREE_OPERAND (op, 1));\n \t  TREE_SIDE_EFFECTS (win) = TREE_SIDE_EFFECTS (op);"}, {"sha": "c8e5398d57526777b22966516752a8751d9d182f", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -365,7 +365,7 @@ DEFTREECODE (COMPONENT_REF, \"component_ref\", 'r', 2)\n    operand 1 is a tree giving the number of bits being referenced;\n    operand 2 is a tree giving the position of the first referenced bit.\n    The field can be either a signed or unsigned field;\n-   TREE_UNSIGNED says which.  */\n+   BIT_FIELD_REF_UNSIGNED says which.  */\n DEFTREECODE (BIT_FIELD_REF, \"bit_field_ref\", 'r', 3)\n    \n /* C unary `*' or Pascal `^'.  One operand, an expression for a pointer.  */"}, {"sha": "c2138dc44fc87bc253037a5b79c990634fdd0885", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a150de295117d1e8f76a01180541eff7d0eb380c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a150de295117d1e8f76a01180541eff7d0eb380c", "patch": "@@ -264,8 +264,10 @@ struct tree_common GTY(())\n \n        TYPE_UNSIGNED in\n            all types\n-       TREE_UNSIGNED in\n-           FIELD_DECL\n+       DECL_UNSIGNED in\n+           all decls\n+       BIT_FIELD_REF_UNSIGNED in\n+           BIT_FIELD_REF\n        SAVE_EXPR_NOPLACEHOLDER in\n \t   SAVE_EXPR\n \n@@ -710,9 +712,12 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    if the value is constant.  */\n #define TREE_CONSTANT(NODE) ((NODE)->common.constant_flag)\n \n-/* In INTEGER_TYPE or ENUMERAL_TYPE nodes, means an unsigned type.\n-   In FIELD_DECL nodes, means an unsigned bit field.  */\n-#define TREE_UNSIGNED(NODE) ((NODE)->common.unsigned_flag)\n+/* In a decl (most significantly a FIELD_DECL), means an unsigned field.  */\n+#define DECL_UNSIGNED(NODE) (DECL_CHECK (NODE)->common.unsigned_flag)\n+\n+/* In a BIT_FIELD_REF, means the bitfield is to be interpreted as unsigned.  */\n+#define BIT_FIELD_REF_UNSIGNED(NODE) \\\n+  (BIT_FIELD_REF_CHECK (NODE)->common.unsigned_flag)\n \n /* In integral and pointer types, means an unsigned type.  */\n #define TYPE_UNSIGNED(NODE) (TYPE_CHECK (NODE)->common.unsigned_flag)"}]}