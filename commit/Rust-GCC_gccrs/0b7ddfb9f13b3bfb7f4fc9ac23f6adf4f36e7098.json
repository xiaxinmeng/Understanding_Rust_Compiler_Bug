{"sha": "0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "node_id": "C_kwDOANBUbNoAKDBiN2RkZmI5ZjEzYjNiZmI3ZjRmYzlhYzIzZjZhZGY0ZjM2ZTcwOTg", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-07-16T14:35:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:46Z"}, "message": "[Ada] More precise analysis of function renamings in GNATprove\n\ngcc/ada/\n\n\t* freeze.adb (Build_Renamed_Body): Special case for GNATprove.\n\t* sem_ch6.adb (Analyze_Expression_Function): Remove useless test\n\tfor a node to come from source, which becomes harmful otherwise.", "tree": {"sha": "41b9ff3f97e4a0ff66d2fddd82bc6d6baeb4da31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b9ff3f97e4a0ff66d2fddd82bc6d6baeb4da31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b54d9393e2af43393cce9b76798617b3c3452f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b54d9393e2af43393cce9b76798617b3c3452f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b54d9393e2af43393cce9b76798617b3c3452f1"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "51671419b4439a8451fca02f268bf8fd16e34abb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "patch": "@@ -636,13 +636,26 @@ package body Freeze is\n          Next (Param_Spec);\n       end loop;\n \n-      Body_Node :=\n-        Make_Subprogram_Body (Loc,\n-          Specification => Spec,\n-          Declarations => New_List,\n-          Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => New_List (Call_Node)));\n+      --  In GNATprove, prefer to generate an expression function whenever\n+      --  possible, to benefit from the more precise analysis in that case\n+      --  (as if an implicit postcondition had been generated).\n+\n+      if GNATprove_Mode\n+        and then Nkind (Call_Node) = N_Simple_Return_Statement\n+      then\n+         Body_Node :=\n+           Make_Expression_Function (Loc,\n+             Specification => Spec,\n+             Expression    => Expression (Call_Node));\n+      else\n+         Body_Node :=\n+           Make_Subprogram_Body (Loc,\n+             Specification              => Spec,\n+             Declarations               => New_List,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Call_Node)));\n+      end if;\n \n       if Nkind (Decl) /= N_Subprogram_Declaration then\n          Rewrite (N,"}, {"sha": "02928342744a625da4191af2423c6b4c8d2e34ce", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=0b7ddfb9f13b3bfb7f4fc9ac23f6adf4f36e7098", "patch": "@@ -385,15 +385,9 @@ package body Sem_Ch6 is\n          Analyze (New_Body);\n          Set_Is_Inlined (Prev);\n \n-      --  If the expression function is a completion, the previous declaration\n-      --  must come from source. We know already that it appears in the current\n-      --  scope. The entity itself may be internally created if within a body\n-      --  to be inlined.\n-\n       elsif Present (Prev)\n         and then Is_Overloadable (Prev)\n         and then not Is_Formal_Subprogram (Prev)\n-        and then Comes_From_Source (Parent (Prev))\n       then\n          Set_Has_Completion (Prev, False);\n          Set_Is_Inlined (Prev);"}]}