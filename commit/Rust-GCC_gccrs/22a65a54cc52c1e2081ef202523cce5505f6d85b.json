{"sha": "22a65a54cc52c1e2081ef202523cce5505f6d85b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhNjVhNTRjYzUyYzFlMjA4MWVmMjAyNTIzY2NlNTUwNWY2ZDg1Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-09T08:07:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-09T08:07:31Z"}, "message": "c-gimplify.c (c_gimplify_expr): Fix the invalid GENERIC &ARRAY addresses by adjusting their types and...\n\n2009-04-09  Richard Guenther  <rguenther@suse.de>\n\n\t* c-gimplify.c (c_gimplify_expr): Fix the invalid GENERIC\n\t&ARRAY addresses by adjusting their types and prepending\n\ta conversion.\n\t* tree-cfg.c (verify_gimple_assign_single): Verify that\n\taddresses are correct.\n\n\t* gcc.dg/vect/vect-54.c: Make constant input data file-scope\n\tto prevent constant propagation.\n\t* gcc.dg/vect/vect-56.c: Likewise.\n\t* gcc.dg/vect/vect-58.c: Likewise.\n\t* gcc.dg/vect/vect-60.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-57.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-61.c: Likewise.\n\t* gcc.dg/tree-prof/stringop-2.c: Adjust expected outcome.\n\nFrom-SVN: r145800", "tree": {"sha": "c27706ee771d0ae8550beb8fc38fe98f547e8e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c27706ee771d0ae8550beb8fc38fe98f547e8e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a65a54cc52c1e2081ef202523cce5505f6d85b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a65a54cc52c1e2081ef202523cce5505f6d85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a65a54cc52c1e2081ef202523cce5505f6d85b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a65a54cc52c1e2081ef202523cce5505f6d85b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f76968e6d5ab3ca8bd5b64ba0143197c00f59943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76968e6d5ab3ca8bd5b64ba0143197c00f59943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76968e6d5ab3ca8bd5b64ba0143197c00f59943"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "0a9d5f26d1da45fa1f2861805c980a35670db47d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -1,3 +1,11 @@\n+2009-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-gimplify.c (c_gimplify_expr): Fix the invalid GENERIC\n+\t&ARRAY addresses by adjusting their types and prepending\n+\ta conversion.\n+\t* tree-cfg.c (verify_gimple_assign_single): Verify that\n+\taddresses are correct.\n+\n 2009-04-09  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (maybe_fold_stmt_addition): Move non-constant"}, {"sha": "cf06974c53ab50b3d640f622d1f1b0232a013a64", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -196,5 +196,19 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n       && !warn_init_self)\n     TREE_NO_WARNING (DECL_EXPR_DECL (*expr_p)) = 1;\n \n+  /* The C frontend is the only one producing &ARRAY with pointer-to-element\n+     type.  This is invalid in gimple, so produce a properly typed\n+     ADDR_EXPR instead and wrap a conversion around it.  */\n+  if (code == ADDR_EXPR\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (*expr_p, 0))) == ARRAY_TYPE\n+      && TREE_CODE (TREE_TYPE (TREE_TYPE (*expr_p))) != ARRAY_TYPE)\n+    {\n+      tree type = TREE_TYPE (*expr_p);\n+      TREE_TYPE (*expr_p)\n+\t= build_pointer_type (TREE_TYPE (TREE_OPERAND (*expr_p, 0)));\n+      *expr_p = build1 (NOP_EXPR, type, *expr_p);\n+      return GS_OK;\n+    }\n+\n   return GS_UNHANDLED;\n }"}, {"sha": "0a2ff3a1548e5aa773e642ec42ca957b516f8eb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -1,3 +1,14 @@\n+2009-04-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-54.c: Make constant input data file-scope\n+\tto prevent constant propagation.\n+\t* gcc.dg/vect/vect-56.c: Likewise.\n+\t* gcc.dg/vect/vect-58.c: Likewise.\n+\t* gcc.dg/vect/vect-60.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-57.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-61.c: Likewise.\n+\t* gcc.dg/tree-prof/stringop-2.c: Adjust expected outcome.\n+\n 2009-04-09  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-ccp-25.c: New testcase."}, {"sha": "e6b49999d3370655284c2dc800687de8c5ce9f99", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -14,7 +14,7 @@ main()\n    return 0;\n }\n /* { dg-final-use { scan-tree-dump \"Single value 4 stringop\" \"tree_profile\"} } */\n-/* Really this ought to simplify into assignment, but we are not there yet.  */\n-/* { dg-final-use { scan-tree-dump \"memset.*4\\\\)\" \"optimized\"} } */\n+/* The versioned memset of size 4 should be optimized to an assignment.  */\n+/* { dg-final-use { scan-tree-dump \"a\\\\\\[0\\\\\\] = 168430090\" \"optimized\"} } */\n /* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n /* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "a80f6330394de122ed981975db3cc74a8795b222", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-57.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -1,6 +1,7 @@\n /* { dg-require-effective-target vect_float } */\n \n #include <stdarg.h>\n+#include <string.h>\n #include \"tree-vect.h\"\n \n #define N 256\n@@ -20,6 +21,15 @@ void bar (float *pa, float *pb, float *pc)\n   return;\n }\n \n+__attribute__ ((noinline))\n+void foo (float *pb, float *pc)\n+{\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  memcpy (pb, b, sizeof (b));\n+  memcpy (pc, c, sizeof (c));\n+}\n+\n /* Unaligned pointer read accesses with known alignment,\n    and an unaligned write access with unknown alignment.\n    The loop bound is known and divisible by the vectorization factor.\n@@ -33,11 +43,13 @@ __attribute__ ((noinline)) int\n main1 (float *pa)\n {\n   int i;\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float b[N] __attribute__ ((__aligned__(16)));\n+  float c[N] __attribute__ ((__aligned__(16)));\n   float *pb = b;\n   float *pc = c;\n \n+  foo (pb, pc);\n+\n   for (i = 0; i < N/2; i++)\n     {\n       pa[i] = pb[i+1] * pc[i+1];"}, {"sha": "582ca1295f12267d2ee53fe4b3a4ff52f1f059ce", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-61.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target vect_float } */\n \n #include <stdarg.h>\n+#include <string.h>\n #include \"tree-vect.h\"\n \n #define N 256\n@@ -21,6 +22,15 @@ void bar (float *pa, float *pb, float *pc)\n   return;\n }\n \n+__attribute__ ((noinline))\n+void foo (float *pb, float *pc)\n+{\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  memcpy (pb, b, sizeof (b));\n+  memcpy (pc, c, sizeof (c));\n+}\n+\n /* Unaligned pointer read accesses with known alignment,\n    and an unaligned write access with unknown alignment.\n    The loop bound is iunknown.\n@@ -34,11 +44,13 @@ __attribute__ ((noinline)) int\n main1 (int n , float *pa)\n {\n   int i;\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+  float b[N] __attribute__ ((__aligned__(16)));\n+  float c[N] __attribute__ ((__aligned__(16)));\n   float *pb = b;\n   float *pc = c;\n \n+  foo (pb, pc);\n+\n   for (i = 0; i < n/2; i++)\n     {\n       pa[i] = pb[i+1] * pc[i+1];"}, {"sha": "a44cdd418111a2702623a813ef10d82e3159a115", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -26,13 +26,14 @@ void bar (float *pa, float *pb, float *pc)\n    vect-58.c is similar to this one with one difference:\n         the loop bound is unknown.  */\n \n+float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n   float *pa = a;\n   float *pb = b;\n   float *pc = c;"}, {"sha": "624a11287ea9ee26be6d3e60a88f2a62e57591ca", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -30,13 +30,14 @@ void bar (float *pa, float *pb, float *pc)\n    vect-57.c is similar to this one with two differences:\n         aliasing is a problem, and the write access has unknown alignment.  */\n \n+float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n   float *pa = a;\n   float *pb = b;\n   float *pc = c;"}, {"sha": "fe58860e00074fdaeb8476dd4f2c409056705655", "filename": "gcc/testsuite/gcc.dg/vect/vect-58.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -26,11 +26,12 @@ void bar (float *pa, float *pb, float *pc)\n    vect-54.c is similar to this one with one difference:\n         the loop bound is known.  */\n \n+float a[N] __attribute__ ((__aligned__(16)));  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n __attribute__ ((noinline)) int\n main1 (int n)\n {\n   int i;\n-  float a[N] __attribute__ ((__aligned__(16)));  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n   float *pa = a;\n   float *pb = b;\n   float *pc = c;"}, {"sha": "efb1d5043c44c8d1946f7f21aca25fb80767c2da", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -30,13 +30,14 @@ void bar (float *pa, float *pb, float *pc)\n    vect-61.c is similar to this one with two differences:\n         aliasing is not a problem, and the write access has unknown alignment.  */\n \n+float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n __attribute__ ((noinline)) int\n main1 (int n)\n {\n   int i;\n   float a[N] __attribute__ ((__aligned__(16)));\n-  float b[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  float c[N] __attribute__ ((__aligned__(16))) = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n   float *pa = a;\n   float *pb = b;\n   float *pc = c;"}, {"sha": "2255ea1cedbbae3051432d44ce31df216c30c6bf", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a65a54cc52c1e2081ef202523cce5505f6d85b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=22a65a54cc52c1e2081ef202523cce5505f6d85b", "patch": "@@ -3697,11 +3697,8 @@ verify_gimple_assign_single (gimple stmt)\n \t    return true;\n \t  }\n \n-\tif (!one_pointer_to_useless_type_conversion_p (lhs_type, TREE_TYPE (op))\n-\t    /* FIXME: a longstanding wart, &a == &a[0].  */\n-\t    && (TREE_CODE (TREE_TYPE (op)) != ARRAY_TYPE\n-\t\t|| !one_pointer_to_useless_type_conversion_p (lhs_type,\n-\t\t      TREE_TYPE (TREE_TYPE (op)))))\n+\tif (!one_pointer_to_useless_type_conversion_p (lhs_type,\n+\t\t\t\t\t\t       TREE_TYPE (op)))\n \t  {\n \t    error (\"type mismatch in address expression\");\n \t    debug_generic_stmt (lhs_type);"}]}