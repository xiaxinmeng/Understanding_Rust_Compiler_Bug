{"sha": "edebe1642eeea426955279e5cf6f8d539320786a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlYmUxNjQyZWVlYTQyNjk1NTI3OWU1Y2Y2ZjhkNTM5MzIwNzg2YQ==", "commit": {"author": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-06-08T13:22:04Z"}, "committer": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-06-08T13:22:04Z"}, "message": "Restrict use of 88110 extended registers to floating point.\n\nFrom-SVN: r4648", "tree": {"sha": "e43200cf786d2ff275b42a8835e9fb6738c69a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43200cf786d2ff275b42a8835e9fb6738c69a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edebe1642eeea426955279e5cf6f8d539320786a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edebe1642eeea426955279e5cf6f8d539320786a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edebe1642eeea426955279e5cf6f8d539320786a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edebe1642eeea426955279e5cf6f8d539320786a/comments", "author": null, "committer": null, "parents": [{"sha": "d4b4cb5f4b08dae76ac508ed10f382a4e5880f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b4cb5f4b08dae76ac508ed10f382a4e5880f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b4cb5f4b08dae76ac508ed10f382a4e5880f68"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "c6cbe5e7bf8297497dd7c64ccb36e4dc861e2a8c", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edebe1642eeea426955279e5cf6f8d539320786a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edebe1642eeea426955279e5cf6f8d539320786a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=edebe1642eeea426955279e5cf6f8d539320786a", "patch": "@@ -666,7 +666,7 @@ extern char * reg_names[];\n    An XRF register can hold any mode, but two GRF registers are required\n    for larger modes.  */\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n-  ((REGNO < FIRST_PSEUDO_REGISTER && REGNO >= FIRST_EXTENDED_REGISTER)\t\\\n+  (XRF_REGNO_P (REGNO)                                                 \\\n    ? 1 : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n@@ -679,8 +679,8 @@ extern char * reg_names[];\n    registers.  The compiler should be allowed to use these as a fast spill\n    area.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n-  ((REGNO < FIRST_PSEUDO_REGISTER && REGNO >= FIRST_EXTENDED_REGISTER)\t\\\n-    ? TARGET_88110\t\t\t\t\t\t\t\\\n+  (XRF_REGNO_P(REGNO)\t\t\t\t\t\t\t\\\n+    ? (TARGET_88110 && GET_MODE_CLASS (MODE) == MODE_FLOAT)             \\\n     : (((MODE) != DImode && (MODE) != DFmode && (MODE) != DCmode)\t\\\n        || ((REGNO) & 1) == 0))\n \n@@ -689,8 +689,10 @@ extern char * reg_names[];\n    If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n    for any hard reg, then this must be 0 for correct output.  */\n #define MODES_TIEABLE_P(MODE1, MODE2) \\\n-  (((MODE1) == DFmode || (MODE1) == DCmode || (MODE1) == DImode) \\\n-   == ((MODE2) == DFmode || (MODE2) == DCmode || (MODE2) == DImode))\n+  (((MODE1) == DFmode || (MODE1) == DCmode || (MODE1) == DImode \\\n+    || (TARGET_88110 && GET_MODE_CLASS (MODE1) == MODE_FLOAT)) \\\n+   == ((MODE2) == DFmode || (MODE2) == DCmode || (MODE2) == DImode \\\n+       || (TARGET_88110 && GET_MODE_CLASS (MODE2) == MODE_FLOAT)))\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */"}]}