{"sha": "10d6af32dd368c41b5796bcd29e31177c05a416c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkNmFmMzJkZDM2OGM0MWI1Nzk2YmNkMjllMzExNzdjMDVhNDE2Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-23T19:19:33Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-23T19:19:33Z"}, "message": "genautomata.c (VLA_HWINT_SHORTEN, [...]): Remove.\n\n\t* genautomata.c (VLA_HWINT_SHORTEN, VLA_HWINT_LAST): Remove.\n\t* df.c (HANDLE_SUBREG, FOR_EACH_BB_IN_BITMAP_REV,\n\tFOR_EACH_BB_IN_SBITMAP): Remove.\n\t* gcse.c (NEVER_SET, FOLLOW_BACK_EDGES): Remove.\n\t* haifa-sched.c (DONE_PRIORITY, MAX_PRIORITY, TAIL_PRIORITY,\n\tLAUNCH_PRIORITY, DONE_PRIORITY_P, LOW_PRIORITY_P): Remove.\n\t* loop.c (PREFETCH_BLOACK_IN_LOOP_MIN,\n\tPREFETCH_LIMIT_TO_SIMULTANEOUS): Remove.\n\t* regrename.c (REGNO_MODE_OK_FOR_BASE_P): Remove.\n\nFrom-SVN: r55685", "tree": {"sha": "7c167bc3db68e8371493456ff6fe70c556fdc5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c167bc3db68e8371493456ff6fe70c556fdc5fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d6af32dd368c41b5796bcd29e31177c05a416c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d6af32dd368c41b5796bcd29e31177c05a416c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d6af32dd368c41b5796bcd29e31177c05a416c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d6af32dd368c41b5796bcd29e31177c05a416c/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aaae39ae576601d0b06c56d89e3ee804581a35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaae39ae576601d0b06c56d89e3ee804581a35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaae39ae576601d0b06c56d89e3ee804581a35e"}], "stats": {"total": 57, "additions": 12, "deletions": 45}, "files": [{"sha": "90bf680648c9004e4b8fdc963cc4167880053571", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -1,3 +1,15 @@\n+2002-07-23  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* genautomata.c (VLA_HWINT_SHORTEN, VLA_HWINT_LAST): Remove.\n+\t* df.c (HANDLE_SUBREG, FOR_EACH_BB_IN_BITMAP_REV,\n+\tFOR_EACH_BB_IN_SBITMAP): Remove.\n+\t* gcse.c (NEVER_SET, FOLLOW_BACK_EDGES): Remove.\n+\t* haifa-sched.c (DONE_PRIORITY, MAX_PRIORITY, TAIL_PRIORITY,\n+\tLAUNCH_PRIORITY, DONE_PRIORITY_P, LOW_PRIORITY_P): Remove.\n+\t* loop.c (PREFETCH_BLOACK_IN_LOOP_MIN,\n+\tPREFETCH_LIMIT_TO_SIMULTANEOUS): Remove.\n+\t* regrename.c (REGNO_MODE_OK_FOR_BASE_P): Remove.\n+\n 2002-07-23  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* pretty-print.h: New file."}, {"sha": "ff900ab70423ff72958aa2a65629746fe37bd19e", "filename": "gcc/df.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -153,8 +153,6 @@ when optimising a loop, only certain registers are of interest.\n Perhaps there should be a bitmap argument to df_analyse to specify\n  which registers should be analysed?   */\n \n-#define HANDLE_SUBREG\n-\n #include \"config.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n@@ -177,18 +175,6 @@ do {\t\t\t\t\t\t\t\t\\\n   EXECUTE_IF_SET_IN_BITMAP (BITMAP, MIN, node_, \t\t\\\n     {(BB) = BASIC_BLOCK (node_); CODE;});} while (0)\n \n-#define FOR_EACH_BB_IN_BITMAP_REV(BITMAP, MIN, BB, CODE)\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  unsigned int node_;\t\t\t\t\t\t\\\n-  EXECUTE_IF_SET_IN_BITMAP_REV (BITMAP, node_, \t\t\\\n-    {(BB) = BASIC_BLOCK (node_); CODE;});} while (0)\n-\n-#define FOR_EACH_BB_IN_SBITMAP(BITMAP, MIN, BB, CODE)           \\\n-do {                                                            \\\n-  unsigned int node_;                                           \\\n-  EXECUTE_IF_SET_IN_SBITMAP (BITMAP, MIN, node_,                \\\n-    {(BB) = BASIC_BLOCK (node_); CODE;});} while (0)\n-\n static struct obstack df_ref_obstack;\n static struct df *ddf;\n "}, {"sha": "69ca31f64e948bfafa58b607cd749fbda7dece45", "filename": "gcc/gcse.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -181,7 +181,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    be done by loop.c, which has more heuristics for when to move invariants\n    out of loops.  At some point we might need to move some of those\n    heuristics into gcse.c.  */\n-#define FOLLOW_BACK_EDGES 1\n \n /* We support GCSE via Partial Redundancy Elimination.  PRE optimizations\n    are a superset of those done by GCSE.\n@@ -1293,10 +1292,6 @@ compute_sets (f)\n \f\n /* Hash table support.  */\n \n-/* For each register, the cuid of the first/last insn in the block\n-   that set it, or -1 if not set.  */\n-#define NEVER_SET -1\n-\n struct reg_avail_info\n {\n   basic_block last_bb;"}, {"sha": "08f81734574877b5715ebdff8849197727eb453f", "filename": "gcc/genautomata.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -595,14 +595,8 @@ static struct obstack irp;\n \n #define VLA_HWINT_BEGIN(vla) (&VARRAY_WIDE_INT ((vla).varray, 0))\n \n-/* Do not use side effects in the macro argument.  */\n-#define VLA_HWINT_LAST(vla) (&VARRAY_WIDE_INT ((vla).varray,          \\\n-                                              (vla).length - 1))\n-\n #define VLA_HWINT_NULLIFY(vla)  ((vla).length = 0)\n \n-#define VLA_HWINT_SHORTEN(vla, n)  ((vla).length -= (n))\n-\n #define VLA_HWINT_EXPAND(vla, n)                                      \\\n   do {                                                                \\\n     vla_hwint_t *const expand_vla_ptr = &(vla);                       \\"}, {"sha": "68a7e0d508bd00d3b1d520110617f39071f721df", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -198,13 +198,6 @@ fix_sched_param (param, val)\n \n struct haifa_insn_data *h_i_d;\n \n-#define DONE_PRIORITY\t-1\n-#define MAX_PRIORITY\t0x7fffffff\n-#define TAIL_PRIORITY\t0x7ffffffe\n-#define LAUNCH_PRIORITY\t0x7f000001\n-#define DONE_PRIORITY_P(INSN) (INSN_PRIORITY (INSN) < 0)\n-#define LOW_PRIORITY_P(INSN) ((INSN_PRIORITY (INSN) & 0x7f000000) == 0)\n-\n #define LINE_NOTE(INSN)\t\t(h_i_d[INSN_UID (INSN)].line_note)\n #define INSN_TICK(INSN)\t\t(h_i_d[INSN_UID (INSN)].tick)\n "}, {"sha": "177c4c5c919101d6f8a67c37f557e0d6edb9b811", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -79,9 +79,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* For very tiny loops it is not worthwhile to prefetch even before the loop,\n    since it is likely that the data are already in the cache.  */\n #define PREFETCH_BLOCKS_BEFORE_LOOP_MIN  2\n-/* The minimal number of prefetch blocks that a loop must consume to make\n-   the emitting of prefetch instruction in the body of loop worthwhile.  */\n-#define PREFETCH_BLOCKS_IN_LOOP_MIN  6\n \n /* Parameterize some prefetch heuristics so they can be turned on and off\n    easily for performance testing on new architecures.  These can be\n@@ -146,12 +143,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define PREFETCH_CONDITIONAL 1\n #endif\n \n-/* If the loop requires more prefetches than the target can process in\n-   parallel then don't prefetch anything in that loop.  */\n-#ifndef PREFETCH_LIMIT_TO_SIMULTANEOUS\n-#define PREFETCH_LIMIT_TO_SIMULTANEOUS 1\n-#endif\n-\n #define LOOP_REG_LIFETIME(LOOP, REGNO) \\\n ((REGNO_LAST_LUID (REGNO) - REGNO_FIRST_LUID (REGNO)))\n "}, {"sha": "62629f0a4cbe049a7f33918852bee72a8aefde78", "filename": "gcc/regrename.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d6af32dd368c41b5796bcd29e31177c05a416c/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=10d6af32dd368c41b5796bcd29e31177c05a416c", "patch": "@@ -36,10 +36,6 @@\n #include \"toplev.h\"\n #include \"obstack.h\"\n \n-#ifndef REGNO_MODE_OK_FOR_BASE_P\n-#define REGNO_MODE_OK_FOR_BASE_P(REGNO, MODE) REGNO_OK_FOR_BASE_P (REGNO)\n-#endif\n-\n #ifndef REG_MODE_OK_FOR_BASE_P\n #define REG_MODE_OK_FOR_BASE_P(REGNO, MODE) REG_OK_FOR_BASE_P (REGNO)\n #endif"}]}