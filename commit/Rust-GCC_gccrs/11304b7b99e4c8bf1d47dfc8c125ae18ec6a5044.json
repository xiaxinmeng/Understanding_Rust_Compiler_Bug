{"sha": "11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzMDRiN2I5OWU0YzhiZjFkNDdkZmM4YzEyNWFlMThlYzZhNTA0NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-12-28T00:06:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-28T00:06:10Z"}, "message": "go-gcc.cc (Gcc_backend::set_placeholder_struct_type): Use build_distinct_type_copy rather than build_variant_type_copy.\n\n\t* go-gcc.cc (Gcc_backend::set_placeholder_struct_type): Use\n\tbuild_distinct_type_copy rather than build_variant_type_copy.\n\t(Gcc_backend::set_placeholder_array_type): Likewise.\n\t(Gcc_backend::named_type): Add special handling for builtin\n\tbasic types.\n\nFrom-SVN: r182698", "tree": {"sha": "6a2286c64c271e38bc044f984d6565492984123c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2286c64c271e38bc044f984d6565492984123c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044/comments", "author": null, "committer": null, "parents": [{"sha": "dd8d9bff4599af02fdff1686728e3579124359c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8d9bff4599af02fdff1686728e3579124359c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8d9bff4599af02fdff1686728e3579124359c4"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "c3b03e9d904184d00d76f80b88eda7e1bcd48c78", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "patch": "@@ -1,10 +1,18 @@\n+2011-12-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::set_placeholder_struct_type): Use\n+\tbuild_distinct_type_copy rather than build_variant_type_copy.\n+\t(Gcc_backend::set_placeholder_array_type): Likewise.\n+\t(Gcc_backend::named_type): Add special handling for builtin\n+\tbasic types.\n+\n 2011-12-22  Ian Lance Taylor  <iant@google.com>\n \n-\t* go-gcc.cc (set_placeholder_pointer_type): Arrange for the type\n-\tname to have a DECL_ORIGINAL_TYPE as gcc expects.\n-\t(set_placeholder_struct_type): Likewise.\n-\t(set_placeholder_array_type): Likewise.\n-\t(named_type): Set DECL_ORIGINAL_TYPE.\n+\t* go-gcc.cc (Gcc_backend::set_placeholder_pointer_type): Arrange\n+\tfor the type name to have a DECL_ORIGINAL_TYPE as gcc expects.\n+\t(Gcc_backend::set_placeholder_struct_type): Likewise.\n+\t(Gcc_backend::set_placeholder_array_type): Likewise.\n+\t(Gcc_backend::named_type): Set DECL_ORIGINAL_TYPE.\n \n 2011-12-13  Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "492787da12dfbd13c326a4962151f012370a7150", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=11304b7b99e4c8bf1d47dfc8c125ae18ec6a5044", "patch": "@@ -663,7 +663,7 @@ Gcc_backend::set_placeholder_struct_type(\n   Btype* r = this->fill_in_struct(placeholder, fields);\n \n   // Build the data structure gcc wants to see for a typedef.\n-  tree copy = build_variant_type_copy(t);\n+  tree copy = build_distinct_type_copy(t);\n   TYPE_NAME(copy) = NULL_TREE;\n   DECL_ORIGINAL_TYPE(TYPE_NAME(t)) = copy;\n \n@@ -696,7 +696,7 @@ Gcc_backend::set_placeholder_array_type(Btype* placeholder,\n   Btype* r = this->fill_in_array(placeholder, element_btype, length);\n \n   // Build the data structure gcc wants to see for a typedef.\n-  tree copy = build_variant_type_copy(t);\n+  tree copy = build_distinct_type_copy(t);\n   TYPE_NAME(copy) = NULL_TREE;\n   DECL_ORIGINAL_TYPE(TYPE_NAME(t)) = copy;\n \n@@ -712,6 +712,24 @@ Gcc_backend::named_type(const std::string& name, Btype* btype,\n   tree type = btype->get_tree();\n   if (type == error_mark_node)\n     return this->error_type();\n+\n+  // The middle-end expects a basic type to have a name.  In Go every\n+  // basic type will have a name.  The first time we see a basic type,\n+  // give it whatever Go name we have at this point.\n+  if (TYPE_NAME(type) == NULL_TREE\n+      && location.gcc_location() == BUILTINS_LOCATION\n+      && (TREE_CODE(type) == INTEGER_TYPE\n+\t  || TREE_CODE(type) == REAL_TYPE\n+\t  || TREE_CODE(type) == COMPLEX_TYPE\n+\t  || TREE_CODE(type) == BOOLEAN_TYPE))\n+    {\n+      tree decl = build_decl(BUILTINS_LOCATION, TYPE_DECL,\n+\t\t\t     get_identifier_from_string(name),\n+\t\t\t     type);\n+      TYPE_NAME(type) = decl;\n+      return this->make_type(type);\n+    }\n+\n   tree copy = build_variant_type_copy(type);\n   tree decl = build_decl(location.gcc_location(), TYPE_DECL,\n \t\t\t get_identifier_from_string(name),"}]}