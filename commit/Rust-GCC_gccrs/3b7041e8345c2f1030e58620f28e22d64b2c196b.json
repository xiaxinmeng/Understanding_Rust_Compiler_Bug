{"sha": "3b7041e8345c2f1030e58620f28e22d64b2c196b", "node_id": "C_kwDOANBUbNoAKDNiNzA0MWU4MzQ1YzJmMTAzMGU1ODYyMGYyOGUyMmQ2NGIyYzE5NmI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-28T11:02:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-28T11:02:51Z"}, "message": "i386: Don't emit fldpi etc. if -frounding-math [PR102498]\n\ni387 has instructions to store some transcedental numbers into the top of\nstack.  The problem is that what exact bit in the last place one gets for\nthose depends on the current rounding mode, the CPU knows the number with\nslightly higher precision.  The compiler assumes rounding to nearest when\ncomparing them against constants in the IL, but at runtime the rounding\ncan be different and so some of these depending on rounding mode and the\nconstant could be 1 ulp higher or smaller than expected.\nWe only support changing the rounding mode at runtime if the non-default\n-frounding-mode option is used, so the following patch just disables\nusing those constants if that flag is on.\n\n2021-09-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/102498\n\t* config/i386/i386.c (standard_80387_constant_p): Don't recognize\n\tspecial 80387 instruction XFmode constants if flag_rounding_math.\n\n\t* gcc.target/i386/pr102498.c: New test.", "tree": {"sha": "261386b7393d54006d01f91dd7bca2098f5166a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/261386b7393d54006d01f91dd7bca2098f5166a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b7041e8345c2f1030e58620f28e22d64b2c196b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7041e8345c2f1030e58620f28e22d64b2c196b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7041e8345c2f1030e58620f28e22d64b2c196b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7041e8345c2f1030e58620f28e22d64b2c196b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34b1e44e166c58df20a15cb35b6cc8d4d299d415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b1e44e166c58df20a15cb35b6cc8d4d299d415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34b1e44e166c58df20a15cb35b6cc8d4d299d415"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "5aeb44c9005fd9630429fc383b1edcce27a7302c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7041e8345c2f1030e58620f28e22d64b2c196b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7041e8345c2f1030e58620f28e22d64b2c196b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b7041e8345c2f1030e58620f28e22d64b2c196b", "patch": "@@ -5039,7 +5039,8 @@ standard_80387_constant_p (rtx x)\n   /* For XFmode constants, try to find a special 80387 instruction when\n      optimizing for size or on those CPUs that benefit from them.  */\n   if (mode == XFmode\n-      && (optimize_function_for_size_p (cfun) || TARGET_EXT_80387_CONSTANTS))\n+      && (optimize_function_for_size_p (cfun) || TARGET_EXT_80387_CONSTANTS)\n+      && !flag_rounding_math)\n     {\n       int i;\n "}, {"sha": "44161c5730bb1c0f9f50cbddb2b5eb2cf7851eb0", "filename": "gcc/testsuite/gcc.target/i386/pr102498.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7041e8345c2f1030e58620f28e22d64b2c196b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102498.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7041e8345c2f1030e58620f28e22d64b2c196b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102498.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102498.c?ref=3b7041e8345c2f1030e58620f28e22d64b2c196b", "patch": "@@ -0,0 +1,59 @@\n+/* PR target/102498 */\n+/* { dg-do run { target fenv } } */\n+/* { dg-options \"-frounding-math\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+__attribute__((noipa)) long double\n+fldlg2 (void)\n+{\n+  return 0.3010299956639811952256464283594894482L;\n+}\n+\n+__attribute__((noipa)) long double\n+fldln2 (void)\n+{\n+  return 0.6931471805599453094286904741849753009L;\n+}\n+\n+__attribute__((noipa)) long double\n+fldl2e (void)\n+{\n+  return 1.4426950408889634073876517827983434472L;\n+}\n+\n+__attribute__((noipa)) long double\n+fldl2t (void)\n+{\n+  return 3.3219280948873623478083405569094566090L;\n+}\n+\n+__attribute__((noipa)) long double\n+fldpi (void)\n+{\n+  return 3.1415926535897932385128089594061862044L;\n+}\n+\n+int\n+main ()\n+{\n+  long double a = fldlg2 ();\n+  long double b = fldln2 ();\n+  long double c = fldl2e ();\n+  long double d = fldl2t ();\n+  long double e = fldpi ();\n+  static int f[] = { FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD, FE_DOWNWARD };\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      fesetround (f[i]);\n+      if (a != fldlg2 ()\n+\t  || b != fldln2 ()\n+\t  || c != fldl2e ()\n+\t  || d != fldl2t ()\n+\t  || e != fldpi ())\n+\tabort ();\n+    }\n+  return 0;\n+}"}]}