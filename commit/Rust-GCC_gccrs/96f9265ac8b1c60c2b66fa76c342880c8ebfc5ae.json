{"sha": "96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmOTI2NWFjOGIxYzYwYzJiNjZmYTc2YzM0Mjg4MGM4ZWJmYzVhZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-07T13:31:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-07T13:31:15Z"}, "message": "omp-low.c (extract_omp_for_data): Use signed_type_for.\n\n2012-03-07  Richard Guenther  <rguenther@suse.de>\n\n\t* omp-low.c (extract_omp_for_data): Use signed_type_for.\n\t(expand_omp_for_generic): Likewise.\n\t(expand_omp_for_static_nochunk): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t* tree-vect-stmts.c (vect_gen_perm_mask): Use type_for_mode.\n\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n\t* tree-vect-loop-manip.c (vect_gen_niters_for_prolog_loop):\n\tUse unsigned_type_for.\n\t(vect_create_cond_for_align_checks): Use signed_type_for.\n\nFrom-SVN: r185042", "tree": {"sha": "eecbd10c30e2b4be2af99880977dcd420642cad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eecbd10c30e2b4be2af99880977dcd420642cad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f1960accc97cdf0da843f19cf9cf3b6be8402c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1960accc97cdf0da843f19cf9cf3b6be8402c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1960accc97cdf0da843f19cf9cf3b6be8402c6"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "e36572bd3a212a0fa483f8a4dfabd1554bce2a21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "patch": "@@ -1,3 +1,15 @@\n+2012-03-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* omp-low.c (extract_omp_for_data): Use signed_type_for.\n+\t(expand_omp_for_generic): Likewise.\n+\t(expand_omp_for_static_nochunk): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t* tree-vect-stmts.c (vect_gen_perm_mask): Use type_for_mode.\n+\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n+\t* tree-vect-loop-manip.c (vect_gen_niters_for_prolog_loop):\n+\tUse unsigned_type_for.\n+\t(vect_create_cond_for_align_checks): Use signed_type_for.\n+\n 2012-03-07  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/52203"}, {"sha": "84986efcddad8b16fc913f94fd0fcda44edfb6ee", "filename": "gcc/omp-low.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "patch": "@@ -407,8 +407,7 @@ extract_omp_for_data (gimple for_stmt, struct omp_for_data *fd,\n \t      tree itype = TREE_TYPE (loop->v);\n \n \t      if (POINTER_TYPE_P (itype))\n-\t\titype\n-\t\t  = lang_hooks.types.type_for_size (TYPE_PRECISION (itype), 0);\n+\t\titype = signed_type_for (itype);\n \t      t = build_int_cst (itype, (loop->cond_code == LT_EXPR ? -1 : 1));\n \t      t = fold_build2_loc (loc,\n \t\t\t       PLUS_EXPR, itype,\n@@ -3772,7 +3771,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t  tree itype = TREE_TYPE (fd->loops[i].v);\n \n \t  if (POINTER_TYPE_P (itype))\n-\t    itype = lang_hooks.types.type_for_size (TYPE_PRECISION (itype), 0);\n+\t    itype = signed_type_for (itype);\n \t  t = build_int_cst (itype, (fd->loops[i].cond_code == LT_EXPR\n \t\t\t\t     ? -1 : 1));\n \t  t = fold_build2 (PLUS_EXPR, itype,\n@@ -3836,8 +3835,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (fd->iter_type))\n \t{\n \t  /* Avoid casting pointers to integer of a different size.  */\n-\t  tree itype\n-\t    = lang_hooks.types.type_for_size (TYPE_PRECISION (type), 0);\n+\t  tree itype = signed_type_for (type);\n \t  t1 = fold_convert (fd->iter_type, fold_convert (itype, fd->loop.n2));\n \t  t0 = fold_convert (fd->iter_type, fold_convert (itype, fd->loop.n1));\n \t}\n@@ -3904,8 +3902,7 @@ expand_omp_for_generic (struct omp_region *region,\n   if (bias)\n     t = fold_build2 (MINUS_EXPR, fd->iter_type, t, bias);\n   if (POINTER_TYPE_P (type))\n-    t = fold_convert (lang_hooks.types.type_for_size (TYPE_PRECISION (type),\n-\t\t\t\t\t\t      0), t);\n+    t = fold_convert (signed_type_for (type), t);\n   t = fold_convert (type, t);\n   t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n \t\t\t\tfalse, GSI_CONTINUE_LINKING);\n@@ -3916,8 +3913,7 @@ expand_omp_for_generic (struct omp_region *region,\n   if (bias)\n     t = fold_build2 (MINUS_EXPR, fd->iter_type, t, bias);\n   if (POINTER_TYPE_P (type))\n-    t = fold_convert (lang_hooks.types.type_for_size (TYPE_PRECISION (type),\n-\t\t\t\t\t\t      0), t);\n+    t = fold_convert (signed_type_for (type), t);\n   t = fold_convert (type, t);\n   iend = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t\t   false, GSI_CONTINUE_LINKING);\n@@ -3932,7 +3928,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t  tree vtype = TREE_TYPE (fd->loops[i].v), itype;\n \t  itype = vtype;\n \t  if (POINTER_TYPE_P (vtype))\n-\t    itype = lang_hooks.types.type_for_size (TYPE_PRECISION (vtype), 0);\n+\t    itype = signed_type_for (vtype);\n \t  t = fold_build2 (TRUNC_MOD_EXPR, type, tem, counts[i]);\n \t  t = fold_convert (itype, t);\n \t  t = fold_build2 (MULT_EXPR, itype, t,\n@@ -4162,7 +4158,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n \n   itype = type = TREE_TYPE (fd->loop.v);\n   if (POINTER_TYPE_P (type))\n-    itype = lang_hooks.types.type_for_size (TYPE_PRECISION (type), 0);\n+    itype = signed_type_for (type);\n \n   entry_bb = region->entry;\n   cont_bb = region->cont;\n@@ -4379,7 +4375,7 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \n   itype = type = TREE_TYPE (fd->loop.v);\n   if (POINTER_TYPE_P (type))\n-    itype = lang_hooks.types.type_for_size (TYPE_PRECISION (type), 0);\n+    itype = signed_type_for (type);\n \n   entry_bb = region->entry;\n   se = split_block (entry_bb, last_stmt (entry_bb));"}, {"sha": "8cf18250bf17b252b16f620f9a080362211528b4", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "patch": "@@ -2058,9 +2058,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n \t  ? size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1) : NULL_TREE;\n       tree start_addr = vect_create_addr_base_for_vector_ref (dr_stmt,\n \t\t\t\t\t\t&new_stmts, offset, loop);\n-      tree ptr_type = TREE_TYPE (start_addr);\n-      tree size = TYPE_SIZE (ptr_type);\n-      tree type = lang_hooks.types.type_for_size (tree_low_cst (size, 1), 1);\n+      tree type = unsigned_type_for (TREE_TYPE (start_addr));\n       tree vectype_size_minus_1 = build_int_cst (type, vectype_align - 1);\n       tree elem_size_log =\n         build_int_cst (type, exact_log2 (vectype_align/nelements));\n@@ -2278,7 +2276,6 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n   int mask = LOOP_VINFO_PTR_MASK (loop_vinfo);\n   tree mask_cst;\n   unsigned int i;\n-  tree psize;\n   tree int_ptrsize_type;\n   char tmp_name[20];\n   tree or_tmp_name = NULL_TREE;\n@@ -2291,11 +2288,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n      all zeros followed by all ones.  */\n   gcc_assert ((mask != 0) && ((mask & (mask+1)) == 0));\n \n-  /* CHECKME: what is the best integer or unsigned type to use to hold a\n-     cast from a pointer value?  */\n-  psize = TYPE_SIZE (ptr_type_node);\n-  int_ptrsize_type\n-    = lang_hooks.types.type_for_size (tree_low_cst (psize, 1), 0);\n+  int_ptrsize_type = signed_type_for (ptr_type_node);\n \n   /* Create expression (mask & (dr_1 || ... || dr_n)) where dr_i is the address\n      of the first vector of the i'th data reference. */"}, {"sha": "d20fc9d522c41e5d2937e9f6a4ab9509b529077f", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "patch": "@@ -2709,9 +2709,8 @@ vect_transform_slp_perm_load (gimple stmt, VEC (tree, heap) *dr_chain,\n \n   /* The generic VEC_PERM_EXPR code always uses an integral type of the\n      same size as the vector element being permuted.  */\n-  mask_element_type\n-    = lang_hooks.types.type_for_size\n-    (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (vectype))), 1);\n+  mask_element_type = lang_hooks.types.type_for_mode\n+\t\t(int_mode_for_mode (TYPE_MODE (TREE_TYPE (vectype))), 1);\n   mask_type = get_vectype_for_scalar_type (mask_element_type);\n   nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   mask = XALLOCAVEC (unsigned char, nunits);"}, {"sha": "65a70fadcfbaea82c1a5067975b3ca92622042bf", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=96f9265ac8b1c60c2b66fa76c342880c8ebfc5ae", "patch": "@@ -4099,9 +4099,8 @@ vect_gen_perm_mask (tree vectype, unsigned char *sel)\n   if (!can_vec_perm_p (TYPE_MODE (vectype), false, sel))\n     return NULL;\n \n-  mask_elt_type\n-    = lang_hooks.types.type_for_size\n-    (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (vectype))), 1);\n+  mask_elt_type = lang_hooks.types.type_for_mode\n+\t\t    (int_mode_for_mode (TYPE_MODE (TREE_TYPE (vectype))), 1);\n   mask_type = get_vectype_for_scalar_type (mask_elt_type);\n \n   mask_vec = NULL;"}]}