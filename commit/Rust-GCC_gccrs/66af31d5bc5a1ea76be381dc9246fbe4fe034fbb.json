{"sha": "66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "node_id": "C_kwDOANBUbNoAKDY2YWYzMWQ1YmM1YTFlYTc2YmUzODFkYzkyNDZmYmU0ZmUwMzRmYmI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-19T11:09:17Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-19T11:09:17Z"}, "message": "lexer: Allow specifiying tokens as reserved in certain editions\n\nSome tokens such as `try` only became reserved keywords in certain\neditions. This behavior might happen again in the future and we should\nbe able to handle it.", "tree": {"sha": "9541637ba71200d98109f7bc3f698842deb4848e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9541637ba71200d98109f7bc3f698842deb4848e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1b2a6bf5eed9dd9405dca9b9c895f48509875e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1b2a6bf5eed9dd9405dca9b9c895f48509875e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1b2a6bf5eed9dd9405dca9b9c895f48509875e"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "ecf151dc778cdcee7e83b2d126fbb11eb1aefbf7", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "patch": "@@ -21,6 +21,7 @@\n #include \"rust-system.h\"      // for rust_assert and rust_unreachable\n #include \"rust-diagnostics.h\" // for rust_error_at\n #include \"rust-linemap.h\"\n+#include \"rust-session-manager.h\"\n #include \"safe-ctype.h\"\n \n namespace Rust {\n@@ -228,10 +229,24 @@ Lexer::classify_keyword (const std::string &str)\n \n   if (idx == last || str != *idx)\n     return IDENTIFIER;\n-  else\n-    return keyword_keys[idx - keyword_index];\n \n   // TODO: possibly replace this x-macro system with something like hash map?\n+\n+  // We now have the expected token ID of the reserved keyword. However, some\n+  // keywords are reserved starting in certain editions. For example, `try` is\n+  // only a reserved keyword in editions >=2018. The language might gain new\n+  // reserved keywords in the future.\n+  //\n+  // https://doc.rust-lang.org/reference/keywords.html#reserved-keywords\n+  auto id = keyword_keys[idx - keyword_index];\n+\n+  // `try` is not a reserved keyword before 2018\n+  if (Session::get_instance ().options.get_edition ()\n+\t== CompileOptions::Edition::E2015\n+      && id == TRY)\n+    return IDENTIFIER;\n+\n+  return id;\n }\n \n TokenPtr"}, {"sha": "24a15f55393bafaddd6e16ffb1fbc02a8ddf7a77", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "patch": "@@ -191,13 +191,13 @@ struct CompileOptions\n   bool proc_macro = false;\n   std::string metadata_output_path;\n \n-  enum Edition\n+  enum class Edition\n   {\n     E2015 = 0,\n     E2018,\n     E2021,\n   } edition\n-    = E2015;\n+    = Edition::E2015;\n \n   bool dump_option_enabled (DumpOption option) const\n   {\n@@ -239,6 +239,8 @@ struct CompileOptions\n     edition = static_cast<Edition> (raw_edition);\n   }\n \n+  const Edition &get_edition () { return edition; }\n+\n   void set_metadata_output (const std::string &path)\n   {\n     metadata_output_path = path;"}, {"sha": "1df6a3a0038496fc7ed61d37e5b71d028c554ee0", "filename": "gcc/testsuite/rust/compile/macro-issue1395-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs?ref=66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-edition=2018\" }\n+\n+macro_rules! try {\n+    // { dg-error \"expecting .identifier. but .try. found\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+    () => {};\n+}"}, {"sha": "b0368c1610f7fb42288602fd36e2f672cee539a4", "filename": "gcc/testsuite/rust/compile/macro-issue1395.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66af31d5bc5a1ea76be381dc9246fbe4fe034fbb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs?ref=66af31d5bc5a1ea76be381dc9246fbe4fe034fbb", "patch": "@@ -0,0 +1,5 @@\n+// Default edition is 2015 - this is valid\n+\n+macro_rules! try {\n+    () => {};\n+}"}]}