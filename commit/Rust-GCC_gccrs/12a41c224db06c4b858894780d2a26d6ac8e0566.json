{"sha": "12a41c224db06c4b858894780d2a26d6ac8e0566", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhNDFjMjI0ZGIwNmM0Yjg1ODg5NDc4MGQyYTI2ZDZhYzhlMDU2Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-13T05:57:38Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-13T05:57:38Z"}, "message": "Makefile.in (c-common.o, cppinit.o): Update.\n\n\t* Makefile.in (c-common.o, cppinit.o): Update.\n\t* c-common.c: Include except.h.\n\t(cb_register_builtins): Handle __USING_SJLJ_EXCEPTIONS__.\n\tCall TARGET_CPU_CPP_BUILTINS and TARGET_OS_CPP_BUILTINS.\n\t* cppinit.c (__USING_SJLJ_EXCEPTIONS): Not here.\n\t* defaults.h (TARGET_OS_CPP_BUILTINS, TARGET_CPU_CPP_BUILTINS,\n\tCPP_PREDEFINES): Handle here.\nconfig:\n\t* alpha/alpha-interix.h, alpha/gnu.h, alpha/linux.h,\n\talpha/netbsd.h, alpha/openbsd.h, alpha/osf.h, alpha/unicosmk.h,\n\talpha/vms.h, alpha/vxworks.h: Remove CPP_PREDEFINES, define\n\tTARGET_OS_CPP_BUILTINS.\n\t* alpha/alpha.h (TARGET_CPU_CPP_BUILTINS): Define.\n\t(CPP_SPEC, EXTRA_SPECS): Update.\n\t(CPP_AM_BWX_SPEC, CPP_AM_MAX_SPEC, CPP_AM_FIX_SPEC,\n\tCPP_AM_CIX_SPEC, CPP_IM_EV4_SPEC, CPP_IM_EV5_SPEC,\n\tCPP_IM_EV6_SPEC, CPP_CPU_EV4_SPEC, CPP_CPU_EV5_SPEC,\n\tCPP_CPU_EV56_SPEC, CPP_CPU_PCA56_SPEC, CPP_CPU_EV6_SPEC,\n\tCPP_CPU_EV67_SPEC, CPP_CPU_DEFAULT_SPEC, CPP_CPU_SPEC): Remove.\ndoc:\n\t* tm.texi (TARGET_REGISTER_CPP_BUILTINS): Remove.\n\t(TARGET_OS_CPP_BUILTINS, TARGET_CPU_CPP_BUILTINS): Define.\n\nFrom-SVN: r53410", "tree": {"sha": "037cab71bf6277cabf4229cda1dff41758365a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037cab71bf6277cabf4229cda1dff41758365a63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a41c224db06c4b858894780d2a26d6ac8e0566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a41c224db06c4b858894780d2a26d6ac8e0566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a41c224db06c4b858894780d2a26d6ac8e0566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a41c224db06c4b858894780d2a26d6ac8e0566/comments", "author": null, "committer": null, "parents": [{"sha": "5692c7bc60a884946e782bb9c1fe72e919301557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5692c7bc60a884946e782bb9c1fe72e919301557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5692c7bc60a884946e782bb9c1fe72e919301557"}], "stats": {"total": 319, "additions": 193, "deletions": 126}, "files": [{"sha": "6381456b82223ac434bbc35776cb3b47d04e1425", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -1,3 +1,28 @@\n+2002-05-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (c-common.o, cppinit.o): Update.\n+\t* c-common.c: Include except.h.\n+\t(cb_register_builtins): Handle __USING_SJLJ_EXCEPTIONS__.\n+\tCall TARGET_CPU_CPP_BUILTINS and TARGET_OS_CPP_BUILTINS.\n+\t* cppinit.c (__USING_SJLJ_EXCEPTIONS): Not here.\n+\t* defaults.h (TARGET_OS_CPP_BUILTINS, TARGET_CPU_CPP_BUILTINS,\n+\tCPP_PREDEFINES): Handle here.\n+config:\n+\t* alpha/alpha-interix.h, alpha/gnu.h, alpha/linux.h,\n+\talpha/netbsd.h, alpha/openbsd.h, alpha/osf.h, alpha/unicosmk.h,\n+\talpha/vms.h, alpha/vxworks.h: Remove CPP_PREDEFINES, define\n+\tTARGET_OS_CPP_BUILTINS.\n+\t* alpha/alpha.h (TARGET_CPU_CPP_BUILTINS): Define.\n+\t(CPP_SPEC, EXTRA_SPECS): Update.\n+\t(CPP_AM_BWX_SPEC, CPP_AM_MAX_SPEC, CPP_AM_FIX_SPEC,\n+\tCPP_AM_CIX_SPEC, CPP_IM_EV4_SPEC, CPP_IM_EV5_SPEC,\n+\tCPP_IM_EV6_SPEC, CPP_CPU_EV4_SPEC, CPP_CPU_EV5_SPEC,\n+\tCPP_CPU_EV56_SPEC, CPP_CPU_PCA56_SPEC, CPP_CPU_EV6_SPEC,\n+\tCPP_CPU_EV67_SPEC, CPP_CPU_DEFAULT_SPEC, CPP_CPU_SPEC): Remove.\n+doc:\n+\t* tm.texi (TARGET_REGISTER_CPP_BUILTINS): Remove.\n+\t(TARGET_OS_CPP_BUILTINS, TARGET_CPU_CPP_BUILTINS): Define.\n+\n 2002-05-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* emit-rtl.c (global_rtl): Update comment."}, {"sha": "937b6e50d2f8ee1fc441568c0d338ebfb6809e09", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -1215,7 +1215,7 @@ s-under: $(GCC_PASSES)\n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H) \\\n-\tdiagnostic.h tree-inline.h\n+\tdiagnostic.h tree-inline.h except.h\n \n # A file used by all variants of C and some other languages.\n \n@@ -2011,7 +2011,7 @@ cpplib.o:   cpplib.c   $(CONFIG_H) $(LIBCPP_DEPS)\n cpphash.o:  cpphash.c  $(CONFIG_H) $(LIBCPP_DEPS)\n cppfiles.o: cppfiles.c $(CONFIG_H) $(LIBCPP_DEPS) $(SPLAY_TREE_H) mkdeps.h\n cppinit.o:  cppinit.c  $(CONFIG_H) $(LIBCPP_DEPS) cppdefault.h \\\n-\t\tmkdeps.h prefix.h version.h except.h\n+\t\tmkdeps.h prefix.h version.h\n \n cppdefault.o: cppdefault.c $(CONFIG_H) $(SYSTEM_H) cppdefault.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "8233187b92a88b1cbcef565b158a78b523888b31", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cpplib.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"except.h\"\t\t/* For USING_SJLJ_EXCEPTIONS.  */\n cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n #undef WCHAR_TYPE_SIZE\n@@ -4325,11 +4326,14 @@ cb_register_builtins (pfile)\n \tcpp_define (pfile, \"__GXX_WEAK__=0\");\n     }\n \n+  /* libgcc needs to know this.  */\n+  if (USING_SJLJ_EXCEPTIONS)\n+    cpp_define (pfile, \"__USING_SJLJ_EXCEPTIONS__\");\n+\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n-#ifdef TARGET_REGISTER_CPP_BUILTINS\n-  TARGET_REGISTER_CPP_BUILTINS;\n-#endif\n+  TARGET_CPU_CPP_BUILTINS ();\n+  TARGET_OS_CPP_BUILTINS ();\n }\n \n /* Pass an object-like macro.  If it doesn't lie in the user's"}, {"sha": "e7874b0a0112d63e170b4699f752cb0ea7a46c3e", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -25,15 +25,18 @@ Boston, MA 02111-1307, USA.  */\n \n /* cpp handles __STDC__ */\n /* The three \"Alpha\" defines on the first such line are from the CLAXP spec */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \" \\\n-  -D__INTERIX \\\n-  -D__OPENNT \\\n-  -D__Alpha_AXP -D_M_ALPHA -D_ALPHA_  \\\n-  -D__alpha -D__alpha__\\\n-  -D__stdcall= \\\n-  -D__cdecl= \\\n-  -Asystem=unix -Asystem=interix -Acpu=alpha -Amachine=alpha\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__INTERIX\");\t\t\t\t\\\n+\tbuiltin_define (\"__OPENNT\");\t\t\t\t\\\n+\tbuiltin_define (\"__Alpha_AXP\");\t\t\t\t\\\n+\tbuiltin_define (\"_M_ALPHA\");\t\t\t\t\\\n+\tbuiltin_define (\"_ALPHA_\");\t\t\t\t\\\n+\tbuiltin_define (\"__stdcall=\");\t\t\t\t\\\n+\tbuiltin_define (\"__cdecl=\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=interix\");\t\t\t\\\n+    } while (0)\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\"}, {"sha": "caab8f60598a6dd735d8e3a39c6d141d5946ffe4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 45, "deletions": 75, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -20,6 +20,50 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* Target CPU builtins.  */\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__alpha\");\t\t\t\\\n+\tbuiltin_define (\"__alpha__\");\t\t\t\\\n+\tbuiltin_assert (\"cpu=alpha\");\t\t\t\\\n+\tbuiltin_assert (\"machine=alpha\");\t\t\\\n+\tif (TARGET_CIX)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_cix__\");\t\t\\\n+\t    builtin_assert (\"cpu=cix\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\tif (TARGET_FIX)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_fix__\");\t\t\\\n+\t    builtin_assert (\"cpu=fix\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\tif (TARGET_BWX)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_bwx__\");\t\t\\\n+\t    builtin_assert (\"cpu=bwx\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\tif (TARGET_MAX)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_max__\");\t\t\\\n+\t    builtin_assert (\"cpu=max\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\tif (TARGET_CPU_EV6)\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_ev6__\");\t\t\\\n+\t    builtin_assert (\"cpu=ev6\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\telse if (TARGET_CPU_EV5)\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_ev5__\");\t\t\\\n+\t    builtin_assert (\"cpu=ev5\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\telse\t/* Presumably ev4.  */\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__alpha_ev4__\");\t\t\\\n+\t    builtin_assert (\"cpu=ev4\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+    } while (0)\n \n /* For C++ we need to ensure that __LANGUAGE_C_PLUS_PLUS is defined independent\n    of the source file extension.  */\n@@ -37,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n %{!.S:%{!.cc:%{!.cxx:%{!.cpp:%{!.cp:%{!.c++:%{!.C:%{!.m:-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C }}}}}}}}}\\\n %{mieee:-D_IEEE_FP }\\\n %{mieee-with-inexact:-D_IEEE_FP -D_IEEE_FP_INEXACT }}\\\n-%(cpp_cpu) %(cpp_subtarget)\"\n+%(cpp_subtarget)\"\n \n #ifndef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\"\n@@ -285,65 +329,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    N_(\"Tune expected memory latency\")},\t\t\t\\\n }\n \n-/* Attempt to describe CPU characteristics to the preprocessor.  */\n-\n-/* Corresponding to amask...  */\n-#define CPP_AM_BWX_SPEC\t\"-D__alpha_bwx__ -Acpu=bwx\"\n-#define CPP_AM_MAX_SPEC\t\"-D__alpha_max__ -Acpu=max\"\n-#define CPP_AM_FIX_SPEC\t\"-D__alpha_fix__ -Acpu=fix\"\n-#define CPP_AM_CIX_SPEC\t\"-D__alpha_cix__ -Acpu=cix\"\n-\n-/* Corresponding to implver...  */\n-#define CPP_IM_EV4_SPEC\t\"-D__alpha_ev4__ -Acpu=ev4\"\n-#define CPP_IM_EV5_SPEC\t\"-D__alpha_ev5__ -Acpu=ev5\"\n-#define CPP_IM_EV6_SPEC\t\"-D__alpha_ev6__ -Acpu=ev6\"\n-\n-/* Common combinations.  */\n-#define CPP_CPU_EV4_SPEC\t\"%(cpp_im_ev4)\"\n-#define CPP_CPU_EV5_SPEC\t\"%(cpp_im_ev5)\"\n-#define CPP_CPU_EV56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx)\"\n-#define CPP_CPU_PCA56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx) %(cpp_am_max)\"\n-#define CPP_CPU_EV6_SPEC \\\n-  \"%(cpp_im_ev6) %(cpp_am_bwx) %(cpp_am_max) %(cpp_am_fix)\"\n-#define CPP_CPU_EV67_SPEC \\\n-  \"%(cpp_im_ev6) %(cpp_am_bwx) %(cpp_am_max) %(cpp_am_fix) %(cpp_am_cix)\"\n-\n-#ifndef CPP_CPU_DEFAULT_SPEC\n-# if TARGET_CPU_DEFAULT & MASK_CPU_EV6\n-#  if TARGET_CPU_DEFAULT & MASK_CIX\n-#    define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV67_SPEC\n-#  else\n-#    define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV6_SPEC\n-#  endif\n-# else\n-#  if TARGET_CPU_DEFAULT & MASK_CPU_EV5\n-#   if TARGET_CPU_DEFAULT & MASK_MAX\n-#    define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_PCA56_SPEC\n-#   else\n-#    if TARGET_CPU_DEFAULT & MASK_BWX\n-#     define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV56_SPEC\n-#    else\n-#     define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV5_SPEC\n-#    endif\n-#   endif\n-#  else\n-#   define CPP_CPU_DEFAULT_SPEC\t\tCPP_CPU_EV4_SPEC\n-#  endif\n-# endif\n-#endif /* CPP_CPU_DEFAULT_SPEC */\n-\n-#ifndef CPP_CPU_SPEC\n-#define CPP_CPU_SPEC \"\\\n-%{!undef:-Acpu=alpha -Amachine=alpha -D__alpha -D__alpha__ \\\n-%{mcpu=ev4|mcpu=21064:%(cpp_cpu_ev4) }\\\n-%{mcpu=ev5|mcpu=21164:%(cpp_cpu_ev5) }\\\n-%{mcpu=ev56|mcpu=21164a:%(cpp_cpu_ev56) }\\\n-%{mcpu=pca56|mcpu=21164pc|mcpu=21164PC:%(cpp_cpu_pca56) }\\\n-%{mcpu=ev6|mcpu=21264:%(cpp_cpu_ev6) }\\\n-%{mcpu=ev67|mcpu=21264a:%(cpp_cpu_ev67) }\\\n-%{!mcpu*:%(cpp_cpu_default) }}\"\n-#endif\n-\n /* This macro defines names of additional specifications to put in the\n    specs that can be used in various specifications like CC1_SPEC.  Its\n    definition is an initializer with a subgrouping for each command option.\n@@ -359,21 +344,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #endif\n \n #define EXTRA_SPECS\t\t\t\t\\\n-  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC },\t\t\\\n-  { \"cpp_am_max\", CPP_AM_MAX_SPEC },\t\t\\\n-  { \"cpp_am_fix\", CPP_AM_FIX_SPEC },\t\t\\\n-  { \"cpp_am_cix\", CPP_AM_CIX_SPEC },\t\t\\\n-  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC },\t\t\\\n-  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC },\t\t\\\n-  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC },\t\t\\\n-  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC },\t\t\\\n-  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC },\t\t\\\n-  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC },\t\\\n-  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC },\t\\\n-  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC },\t\t\\\n-  { \"cpp_cpu_ev67\", CPP_CPU_EV67_SPEC },\t\\\n-  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC },\t\\\n-  { \"cpp_cpu\", CPP_CPU_SPEC },\t\t\t\\\n   { \"cpp_subtarget\", CPP_SUBTARGET_SPEC },\t\\\n   SUBTARGET_EXTRA_SPECS\n "}, {"sha": "ed72429185e60890541245b1885af2e144f35315", "filename": "gcc/config/alpha/gnu.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fgnu.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -3,9 +3,15 @@\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (Alpha GNU)\");\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-\"-D__GNU__ -D__gnu_hurd__ -Dunix -Asystem=gnu -D_LONGLONG -D__alpha__ -D__ELF__\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__GNU__\");\t\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\\\n+\tbuiltin_define (\"__gnu_hurd__\");\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_assert (\"system=gnu\");\t\t\\\n+    } while (0)\n \n #undef ELF_DYNAMIC_LINKER\n #define ELF_DYNAMIC_LINKER\t\"/lib/ld.so\""}, {"sha": "d98a34d3d4596f4cb6c03ae0cf7d26d2322da5bf", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -23,9 +23,14 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-  \"-D__gnu_linux__ -Dlinux -Dunix -Asystem=linux -D_LONGLONG -D__alpha__\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__gnu_linux__\");\t\t\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\t\t\\\n+\tbuiltin_define_std (\"linux\");\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=linux\");\t\t\t\\\n+    } while (0)\n \n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC"}, {"sha": "9b0c23239723eef965b3383d09ef5f35d9effe2f", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -22,10 +22,13 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES\t\t\t\t\t\t\t\\\n-  \"-D__NetBSD__ -D_LP64 -Asystem=unix -Asystem=NetBSD\"\n-\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__NetBSD__\");\t\t\\\n+\tbuiltin_define (\"_LP64\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=NetBSD\");\t\\\n+    } while (0)\n \n /* Show that we need a GP when profiling.  */\n #undef TARGET_PROFILING_NEEDS_GP"}, {"sha": "b82b66df3c8cdee762ea67736c237214e37ebce6", "filename": "gcc/config/alpha/openbsd.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fopenbsd.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -39,8 +39,13 @@ Boston, MA 02111-1307, USA.  */\n   \"%{!nostdlib:%{!r*:%{!e*:-e __start}}} -dc -dp %{assert*}\"\n \n /* run-time target specifications */\n-#define CPP_PREDEFINES \"-D__unix__ -D__ANSI_COMPAT -Asystem=unix \\\n--D__OpenBSD__ -D__alpha__ -D__alpha\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__OpenBSD__\");\t\t\\\n+\tbuiltin_define (\"__ANSI_COMPAT\");\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+    } while (0)\n \n /* Layout of source language data types.  */\n "}, {"sha": "cb3b3447eeee10e4a56e4f15b42983f29ae0262e", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -32,9 +32,16 @@ Boston, MA 02111-1307, USA.  */\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"\\\n--Dunix -D__osf__ -D_LONGLONG -DSYSTYPE_BSD \\\n--D_SYSTYPE_BSD -Asystem=unix -Asystem=xpg4\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"SYSTYPE_BSD\");\t\\\n+\tbuiltin_define (\"_SYSTYPE_BSD\");\t\\\n+\tbuiltin_define (\"__osf__\");\t\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=xpg4\");\t\t\\\n+    } while (0)\n \n /* Tru64 UNIX V5 requires additional definitions for 16 byte long double\n    support.  Empty by default.  */"}, {"sha": "8ed0f72d70cccd6dcd2e763be25b1b823c96a1ba", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -32,8 +32,20 @@ Boston, MA 02111-1307, USA.  */\n /* The following defines are necessary for the standard headers to work\n    correctly.  */\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__unix=1 -D_UNICOS=205 -D_CRAY=1 -D_CRAYT3E=1 -D_CRAYMPP=1 -D_CRAYIEEE=1 -D_ADDR64=1 -D_LD64=1 -D__UNICOSMK__ -D__INT_MAX__=9223372036854775807 -D__SHRT_MAX__=2147483647\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"_UNICOS=205\");\t\t\t\t\\\n+\tbuiltin_define (\"_CRAY\");\t\t\t\t\\\n+\tbuiltin_define (\"_CRAYT3E\");\t\t\t\t\\\n+\tbuiltin_define (\"_CRAYMPP\");\t\t\t\t\\\n+\tbuiltin_define (\"_CRAYIEEE\");\t\t\t\t\\\n+\tbuiltin_define (\"_ADDR64\");\t\t\t\t\\\n+\tbuiltin_define (\"_LD64\");\t\t\t\t\\\n+\tbuiltin_define (\"__UNICOSMK__\");\t\t\t\\\n+\tbuiltin_define (\"__INT_MAX__=9223372036854775807\");\t\\\n+\tbuiltin_define (\"__SHRT_MAX__=2147483647\")\t\t\\\n+    } while (0)\n \n #define SHORT_TYPE_SIZE 32\n "}, {"sha": "53f2fbd707a9a5d92c12dd6c38dfb6b1ee0ac973", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -29,9 +29,13 @@ Boston, MA 02111-1307, USA.  */\n \n #define NO_EXTERNAL_INDIRECT_ADDRESS\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-\"-D__ALPHA -Dvms -DVMS -D__vms__ -D__VMS__ -Asystem=vms\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"vms\");\t\t\\\n+\tbuiltin_define_std (\"VMS\");\t\t\\\n+\tbuiltin_define (\"__ALPHA\");\t\t\\\n+\tbuiltin_assert (\"system=vms\");\t\t\\\n+    } while (0)\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\"}, {"sha": "a27c6452116fb9d000d7d3c050d4df7942840268", "filename": "gcc/config/alpha/vxworks.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fconfig%2Falpha%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvxworks.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -26,10 +26,14 @@ Boston, MA 02111-1307, USA.  */\n %{!mvxsim: %{!mcpu*|mcpu=21064:-DCPU=21064} %{mcpu=21164:-DCPU=21164}} \\\n %{posix: -D_POSIX_SOURCE}\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--D__vxworks -D__alpha_vxworks -Asystem=vxworks \\\n--Asystem=embedded -D_LONGLONG\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__vxworks\");\t\t\\\n+\tbuiltin_define (\"__alpha_vxworks\");\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\\\n+\tbuiltin_assert (\"system=vxworks\");\t\\\n+\tbuiltin_assert (\"system=embedded\");\t\\\n+    } while (0)\n \n /* VxWorks does all the library stuff itself.  */\n "}, {"sha": "7042cd27988582baa4d5a736eebad9edc1507a39", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -28,7 +28,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"version.h\"\n #include \"mkdeps.h\"\n #include \"cppdefault.h\"\n-#include \"except.h\"\t/* for USING_SJLJ_EXCEPTIONS */\n \n /* Predefined symbols, built-in macros, and the default include path.  */\n \n@@ -663,10 +662,6 @@ static const struct builtin builtin_array[] =\n   X(\"__USER_LABEL_PREFIX__\",\tULP),\n   C(\"__REGISTER_PREFIX__\",\tREGISTER_PREFIX),\n   C(\"__HAVE_BUILTIN_SETJMP__\",\t\"1\"),\n-#if USING_SJLJ_EXCEPTIONS\n-  /* libgcc needs to know this.  */\n-  C(\"__USING_SJLJ_EXCEPTIONS__\",\"1\"),\n-#endif\n #ifndef NO_BUILTIN_SIZE_TYPE\n   C(\"__SIZE_TYPE__\",\t\tSIZE_TYPE),\n #endif"}, {"sha": "7a45877f3297aaebc7ad54bbfccb616ce325ac04", "filename": "gcc/defaults.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -35,6 +35,18 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #  define TARGET_ESC 033\n #endif\n \n+/* When removal of CPP_PREDEFINES is complete, TARGET_CPU_CPP_BULITINS\n+   can also be removed from here.  */\n+#ifndef TARGET_OS_CPP_BUILTINS\n+# define TARGET_OS_CPP_BUILTINS()\n+#endif\n+#ifndef TARGET_CPU_CPP_BUILTINS\n+# define TARGET_CPU_CPP_BUILTINS()\n+#endif\n+#ifndef CPP_PREDEFINES\n+# define CPP_PREDEFINES \"\"\n+#endif\n+\n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "36ccaebcd3508233a576a63457332999a28978b4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -623,12 +623,15 @@ The macro @code{STANDARD_STARTFILE_PREFIX}.\n Here are run-time target specifications.\n \n @table @code\n-@findex TARGET_REGISTER_CPP_BUILTINS\n-@item TARGET_REGISTER_CPP_BUILTINS\n-This macro expands to a block of code that defines target-specific\n-built-in preprocessor macros and assertions, using the functions\n-@code{builtin_macro}, @code{builtin_macro_std} and\n-@code{builtin_assert} declared in @file{c-lex.h}.\n+@findex TARGET_CPU_CPP_BUILTINS\n+@item TARGET_CPU_CPP_BUILTINS()\n+This function-like macro expands to a block of code that defines\n+built-in preprocessor macros and assertions for the target cpu, using\n+the functions @code{builtin_macro}, @code{builtin_macro_std} and\n+@code{builtin_assert} declared in @file{c-lex.h}.  When the front end\n+calls this macro it provides a trailing semicolon, and since it has\n+finished command line option processing your code can use those\n+results freely.\n \n @code{builtin_assert} takes a string in the form you pass to the\n command-line option @option{-A}, such as @code{cpu=mips}, and creates\n@@ -646,7 +649,16 @@ and possibly @code{unix}; passing @code{_mips} defines @code{__mips},\n @code{__mips__} and possibly @code{_mips}, and passing @code{_ABI64}\n defines only @code{_ABI64}.\n \n-This macro obsoletes the @code{CPP_PREDEFINES} target macro.\n+With @code{TARGET_OS_CPP_BUILTINS} this macro obsoletes the\n+@code{CPP_PREDEFINES} target macro.\n+\n+@findex TARGET_OS_CPP_BUILTINS\n+@item TARGET_OS_CPP_BUILTINS()\n+Similarly to @code{TARGET_CPU_CPP_BUILTINS} but this macro is optional\n+and is used for the target operating system instead.\n+\n+With @code{TARGET_CPU_CPP_BUILTINS} this macro obsoletes the\n+@code{CPP_PREDEFINES} target macro.\n \n @findex CPP_PREDEFINES\n @item CPP_PREDEFINES"}, {"sha": "1f8fb15dda163b4f51dfec707516b572c2a542a0", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a41c224db06c4b858894780d2a26d6ac8e0566/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=12a41c224db06c4b858894780d2a26d6ac8e0566", "patch": "@@ -694,7 +694,7 @@ static const char *cpp_options =\n  %{fshow-column} %{fno-show-column}\\\n  %{fsigned-char&funsigned-char}\\\n  %{fleading-underscore} %{fno-leading-underscore}\\\n- %{fno-operator-names} %{ftabstop=*}\";\n+ %{fno-operator-names} %{ftabstop=*} %{undef}\";\n \n /* NB: This is shared amongst all front-ends.  */\n static const char *cc1_options ="}]}