{"sha": "88f29a8aa82f2788baf2f9865940d4c83012c580", "node_id": "C_kwDOANBUbNoAKDg4ZjI5YThhYTgyZjI3ODhiYWYyZjk4NjU5NDBkNGM4MzAxMmM1ODA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-31T12:04:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-31T13:20:41Z"}, "message": "tree-optimization/90994 - fix uninit diagnostics with EH\n\nr12-3640-g94c12ffac234b2 sneaked in a hack to avoid the diagnostic\nfor the testcase in PR90994 which sees non-call EH control flow\nconfusing predicate analysis.  The following patch instead adjusts\nthe existing code handling EH to handle non-calls and do what I\nthink was intented.\n\n\tPR tree-optimization/90994\n\t* gimple-predicate-analysis.cc (predicate::init_from_control_deps):\n\tIgnore exceptional control flow and skip the edge for the purpose of\n\tpredicate generation also for non-calls.\n\n\t* g++.dg/torture/pr90994.C: New testcase.", "tree": {"sha": "b60c09aad26b08a142caa6a891af72566709b0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60c09aad26b08a142caa6a891af72566709b0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f29a8aa82f2788baf2f9865940d4c83012c580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f29a8aa82f2788baf2f9865940d4c83012c580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f29a8aa82f2788baf2f9865940d4c83012c580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f29a8aa82f2788baf2f9865940d4c83012c580/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25dd2768afdb8fad7b11d511eb5f739958f9870d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25dd2768afdb8fad7b11d511eb5f739958f9870d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25dd2768afdb8fad7b11d511eb5f739958f9870d"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "58eade433dca37f71218faef6a1c71918ba3aca2", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f29a8aa82f2788baf2f9865940d4c83012c580/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f29a8aa82f2788baf2f9865940d4c83012c580/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=88f29a8aa82f2788baf2f9865940d4c83012c580", "patch": "@@ -41,6 +41,7 @@\n #include \"calls.h\"\n #include \"value-query.h\"\n #include \"cfganal.h\"\n+#include \"tree-eh.h\"\n \n #include \"gimple-predicate-analysis.h\"\n \n@@ -1709,9 +1710,6 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n \t    }\n \t  /* Get the conditional controlling the bb exit edge.  */\n \t  gimple *cond_stmt = gsi_stmt (gsi);\n-\t  if (is_gimple_call (cond_stmt) && EDGE_COUNT (e->src->succs) >= 2)\n-\t    /* Ignore EH edge.  Can add assertion on the other edge's flag.  */\n-\t    continue;\n \t  /* Skip this edge if it is bypassing an abort - when the\n \t     condition is not satisfied we are neither reaching the\n \t     definition nor the use so it isn't meaningful.  Note if\n@@ -1819,10 +1817,15 @@ predicate::init_from_control_deps (const vec<edge> *dep_chains,\n \t\t  has_valid_pred = true;\n \t\t}\n \t    }\n+\t  else if (stmt_can_throw_internal (cfun, cond_stmt)\n+\t\t   && !(e->flags & EDGE_EH))\n+\t    /* Ignore the exceptional control flow and proceed as if\n+\t       E were a fallthru without a controlling predicate for\n+\t       both the USE (valid) and DEF (questionable) case.  */\n+\t    has_valid_pred = true;\n \t  else\n \t    {\n-\t      /* Disabled.  See PR 90994.\n-\t\t has_valid_pred = false;  */\n+\t      has_valid_pred = false;\n \t      break;\n \t    }\n \t}"}, {"sha": "8feb36f2361c5b2c653d44abc6e14ed88f7c748b", "filename": "gcc/testsuite/g++.dg/torture/pr90994.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f29a8aa82f2788baf2f9865940d4c83012c580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr90994.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f29a8aa82f2788baf2f9865940d4c83012c580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr90994.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr90994.C?ref=88f29a8aa82f2788baf2f9865940d4c83012c580", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fnon-call-exceptions -Wuninitialized\" }\n+\n+extern void printval(unsigned char v);\n+\n+inline int readbyte(unsigned char *__restrict presult,\n+\t\t    unsigned char volatile *ptr)\n+{\n+  unsigned char v;\n+  try {\n+      v = *ptr;\n+  } catch (...) {\n+      return -1;\n+  }\n+  *presult = v;\n+  return 0;\n+}\n+\n+int incorrectWarning(unsigned char volatile *ptr)\n+{\n+  int error;\n+  unsigned char first;\n+  unsigned char second;\n+\n+  error = readbyte(&first, ptr);\n+  asm(\"\\n\\n\\n\\n\\n\" : : \"X\" (error != 0));\n+  if (error != 0)\n+    goto err;\n+\n+  error = readbyte(&second, ptr);\n+  if (error != 0)\n+    goto err;\n+\n+  printval(first);   // { dg-bogus \"uninitialized\" }\n+  printval(second);\n+  return 0;\n+\n+err:\n+  return error;\n+}"}]}