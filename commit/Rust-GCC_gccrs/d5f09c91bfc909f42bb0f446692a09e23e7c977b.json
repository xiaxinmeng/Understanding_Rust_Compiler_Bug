{"sha": "d5f09c91bfc909f42bb0f446692a09e23e7c977b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmMDljOTFiZmM5MDlmNDJiYjBmNDQ2NjkyYTA5ZTIzZTdjOTc3Yg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-07-04T13:29:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:29:19Z"}, "message": "sem_ch10.adb (Build_Limited_Views): A type declared with a private type extension needs a limited view.\n\n2005-07-04  Ed Schonberg  <schonberg@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch10.adb (Build_Limited_Views): A type declared with a private\n\ttype extension needs a limited view.\n\tRemove previous restriction on private types available through the\n\tlimited-view (only tagged private types were previously allowed).\n\t(Install_Withed_Unit): In the code that implements the\n\tlegality rule given in AI-377, exclude a child unit with the name\n\tStandard, because it is a homonym of the Standard environment package.\n\nFrom-SVN: r101586", "tree": {"sha": "8aa465075e805d59be9fe017c08cddf531383709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa465075e805d59be9fe017c08cddf531383709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f09c91bfc909f42bb0f446692a09e23e7c977b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f09c91bfc909f42bb0f446692a09e23e7c977b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f09c91bfc909f42bb0f446692a09e23e7c977b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f09c91bfc909f42bb0f446692a09e23e7c977b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "323b59c470a055476f7b2089175de65036abf33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323b59c470a055476f7b2089175de65036abf33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323b59c470a055476f7b2089175de65036abf33c"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "3d3f15327824638eafb006d88a514f17bd12d5bc", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f09c91bfc909f42bb0f446692a09e23e7c977b/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f09c91bfc909f42bb0f446692a09e23e7c977b/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=d5f09c91bfc909f42bb0f446692a09e23e7c977b", "patch": "@@ -3714,7 +3714,8 @@ package body Sem_Ch10 is\n       --  instance I1 of a generic unit G1 has an explicit child unit I1.G2,\n       --  G1 has a generic child also named G2, and the context includes with_\n       --  clauses for both I1.G2 and for G1.G2, making an implicit declaration\n-      --  of I1.G2 visible as well.\n+      --  of I1.G2 visible as well. If the child unit is named Standard, do\n+      --  not apply the check to the Standard package itself.\n \n       if Is_Child_Unit (Uname)\n         and then Is_Visible_Child_Unit (Uname)\n@@ -3728,7 +3729,9 @@ package body Sem_Ch10 is\n \n          begin\n             U2 := Homonym (Uname);\n-            while Present (U2) loop\n+            while Present (U2)\n+              and U2 /= Standard_Standard\n+           loop\n                P2 := Scope (U2);\n                Decl2  := Unit_Declaration_Node (P2);\n \n@@ -4057,13 +4060,15 @@ package body Sem_Ch10 is\n \n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n \n-            elsif Nkind (Decl) = N_Private_Type_Declaration\n-              and then Tagged_Present (Decl)\n-            then\n+            elsif Nkind (Decl) = N_Private_Type_Declaration then\n                Comp_Typ := Defining_Identifier (Decl);\n \n                if not Analyzed_Unit then\n-                  Decorate_Tagged_Type (Sloc (Decl), Comp_Typ, Scope);\n+                  if Tagged_Present (Decl) then\n+                     Decorate_Tagged_Type (Sloc (Decl), Comp_Typ, Scope);\n+                  else\n+                     Decorate_Incomplete_Type (Comp_Typ, Scope);\n+                  end if;\n                end if;\n \n                Lim_Typ  := New_Internal_Shadow_Entity\n@@ -4075,8 +4080,33 @@ package body Sem_Ch10 is\n                Set_Parent (Lim_Typ, Parent (Comp_Typ));\n                Set_From_With_Type (Lim_Typ);\n \n-               Decorate_Tagged_Type (Sloc (Decl), Lim_Typ, Scope);\n+               if Tagged_Present (Decl) then\n+                  Decorate_Tagged_Type (Sloc (Decl), Lim_Typ, Scope);\n+               else\n+                  Decorate_Incomplete_Type (Lim_Typ, Scope);\n+               end if;\n+\n+               Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n+\n+            elsif Nkind (Decl) = N_Private_Extension_Declaration then\n+               Comp_Typ := Defining_Identifier (Decl);\n \n+               if not Analyzed_Unit then\n+                  Decorate_Tagged_Type (Sloc (Decl), Comp_Typ, Scope);\n+               end if;\n+\n+               --  Create shadow entity for type\n+\n+               Lim_Typ := New_Internal_Shadow_Entity\n+                 (Kind       => Ekind (Comp_Typ),\n+                  Sloc_Value => Sloc (Comp_Typ),\n+                  Id_Char    => 'Z');\n+\n+               Set_Chars  (Lim_Typ, Chars (Comp_Typ));\n+               Set_Parent (Lim_Typ, Parent (Comp_Typ));\n+               Set_From_With_Type (Lim_Typ);\n+\n+               Decorate_Tagged_Type (Sloc (Decl), Lim_Typ, Scope);\n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n \n             elsif Nkind (Decl) = N_Package_Declaration then"}]}