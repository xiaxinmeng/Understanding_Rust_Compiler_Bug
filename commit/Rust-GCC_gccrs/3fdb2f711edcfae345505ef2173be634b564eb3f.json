{"sha": "3fdb2f711edcfae345505ef2173be634b564eb3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkYjJmNzExZWRjZmFlMzQ1NTA1ZWYyMTczYmU2MzRiNTY0ZWIzZg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-11-04T07:40:15Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-11-04T07:40:15Z"}, "message": "stormy16.h (CONST_COSTS): Define.\n\n\t* config/stormy16/stormy16.h (CONST_COSTS): Define.\n\t(RTX_COSTS): Define.\n\t(ADDRESS_COST): Define.\n\t(MEMORY_MOVE_COST): Allow for memory_move_secondary_cost.\n\nFrom-SVN: r46764", "tree": {"sha": "57b81dfb0f0121e70d4d0fc4f91ed394ea114748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b81dfb0f0121e70d4d0fc4f91ed394ea114748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fdb2f711edcfae345505ef2173be634b564eb3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdb2f711edcfae345505ef2173be634b564eb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fdb2f711edcfae345505ef2173be634b564eb3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdb2f711edcfae345505ef2173be634b564eb3f/comments", "author": null, "committer": null, "parents": [{"sha": "e06bc4e1fd1e3f7cb939a704bcc3601fcc8aeccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06bc4e1fd1e3f7cb939a704bcc3601fcc8aeccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06bc4e1fd1e3f7cb939a704bcc3601fcc8aeccb"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "10b3542a6a1badeb6edaa56e7a982ddac3ba0f96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fdb2f711edcfae345505ef2173be634b564eb3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fdb2f711edcfae345505ef2173be634b564eb3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fdb2f711edcfae345505ef2173be634b564eb3f", "patch": "@@ -1,5 +1,10 @@\n 2001-11-03  Geoffrey Keating  <geoffk@redhat.com>\n \n+\t* config/stormy16/stormy16.h (CONST_COSTS): Define.\n+\t(RTX_COSTS): Define.\n+\t(ADDRESS_COST): Define.\n+\t(MEMORY_MOVE_COST): Allow for memory_move_secondary_cost.\n+\n \t* config/stormy16/stormy16.h (ASM_SPEC): Pass -g to the assembler.\n \n \t* config/stormy16/stormy16.h (ASM_OUTPUT_MI_THUNK): Call"}, {"sha": "5d9beba20a751fe687701844779dc493f3bd249c", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fdb2f711edcfae345505ef2173be634b564eb3f/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fdb2f711edcfae345505ef2173be634b564eb3f/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=3fdb2f711edcfae345505ef2173be634b564eb3f", "patch": "@@ -3240,7 +3240,17 @@ do {\t\t\t\t\t\t\t\\\n \n    CODE is the expression code--redundant, since it can be obtained with\n    `GET_CODE (X)'.  */\n-/* #define CONST_COSTS(X, CODE, OUTER_CODE)  */     \n+#define CONST_COSTS(X, CODE, OUTER_CODE)\t\\\n+  case CONST_INT:\t\t\t\t\\\n+    if (INTVAL (X) < 16 && INTVAL (X) >= 0)\t\\\n+      return COSTS_N_INSNS (1)/2;\t\t\\\n+    if (INTVAL (X) < 256 && INTVAL (X) >= 0)\t\\\n+      return COSTS_N_INSNS (1);\t\t\t\\\n+  case CONST_DOUBLE:\t\t\t\t\\\n+  case CONST:\t\t\t\t\t\\\n+  case SYMBOL_REF:\t\t\t\t\\\n+  case LABEL_REF:\t\t\t\t\\\n+     return COSTS_N_INSNS(2);\n \n /* Like `CONST_COSTS' but applies to nonconstant RTL expressions.  This can be\n    used, for example, to indicate how costly a multiply instruction is.  In\n@@ -3250,7 +3260,11 @@ do {\t\t\t\t\t\t\t\\\n \n    This macro is optional; do not define it if the default cost assumptions are\n    adequate for the target machine.  */\n-/* #define RTX_COSTS(X, CODE, OUTER_CODE) */\n+#define RTX_COSTS(X, CODE, OUTER_CODE)\t\t\\\n+  case MULT:\t\t\t\t\t\\\n+    return COSTS_N_INSNS (35 + 6);\t\t\\\n+  case DIV:\t\t\t\t\t\\\n+    return COSTS_N_INSNS (51 - 6);\n \n /* An expression giving the cost of an addressing mode that contains ADDRESS.\n    If not defined, the cost is computed from the ADDRESS expression and the\n@@ -3288,8 +3302,12 @@ do {\t\t\t\t\t\t\t\\\n    Equivalent costs should probably only be given to addresses with different\n    numbers of registers on machines with lots of registers.\n \n-   This macro will normally either not be defined or be defined as a constant.  */\n-/* #define ADDRESS_COST(ADDRESS) */\n+   This macro will normally either not be defined or be defined as a\n+   constant.  */\n+#define ADDRESS_COST(ADDRESS)\t\t\t\\\n+  (GET_CODE (ADDRESS) == CONST_INT ? 2\t\t\\\n+   : GET_CODE (ADDRESS) == PLUS ? 7\t\t\\\n+   : 5)\n \n /* A C expression for the cost of moving data of mode MODE from a\n    register in class FROM to one in class TO.  The classes are\n@@ -3315,7 +3333,7 @@ do {\t\t\t\t\t\t\t\\\n \n    If moving between registers and memory is more expensive than between two\n    registers, you should define this macro to express the relative cost.  */\n-#define MEMORY_MOVE_COST(M,C,I) 5\n+#define MEMORY_MOVE_COST(M,C,I) (5 + memory_move_secondary_cost (M, C, I))\n \n /* A C expression for the cost of a branch instruction.  A value of 1 is the\n    default; other values are interpreted relative to that.  */"}]}