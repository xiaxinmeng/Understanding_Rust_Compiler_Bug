{"sha": "a4c3f08dadad805010c2411e79d80d023693a1b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjM2YwOGRhZGFkODA1MDEwYzI0MTFlNzlkODBkMDIzNjkzYTFiMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-20T07:53:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-20T07:53:31Z"}, "message": "Do not use full qualified names if possible.\n\n2019-05-20  Martin Liska  <mliska@suse.cz>\n\n\t* profile-count.h: Do not use full qualified\n\tnames if possible.\n\t* profile-count.c (profile_count::to_frequency): Likewise.\n\nFrom-SVN: r271398", "tree": {"sha": "5b577e46eefa611b8610e9561f84fe229100438a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b577e46eefa611b8610e9561f84fe229100438a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4c3f08dadad805010c2411e79d80d023693a1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c3f08dadad805010c2411e79d80d023693a1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c3f08dadad805010c2411e79d80d023693a1b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c3f08dadad805010c2411e79d80d023693a1b0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e48dc99e234bfb9cbdd0c992dc025b414217ff0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48dc99e234bfb9cbdd0c992dc025b414217ff0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48dc99e234bfb9cbdd0c992dc025b414217ff0c"}], "stats": {"total": 176, "additions": 89, "deletions": 87}, "files": [{"sha": "b117803c522ab5465d103a0d1f122e9ee430057e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4c3f08dadad805010c2411e79d80d023693a1b0", "patch": "@@ -1,3 +1,9 @@\n+2019-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile-count.h: Do not use full qualified\n+\tnames if possible.\n+\t* profile-count.c (profile_count::to_frequency): Likewise.\n+\n 2019-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* profile-count.h (enum profile_quality): Use capital letters"}, {"sha": "010b18c0aa5fd62e76f140ac4eb0370e177ab539", "filename": "gcc/profile-count.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=a4c3f08dadad805010c2411e79d80d023693a1b0", "patch": "@@ -268,7 +268,7 @@ profile_count::to_frequency (struct function *fun) const\n {\n   if (!initialized_p ())\n     return BB_FREQ_MAX;\n-  if (*this == profile_count::zero ())\n+  if (*this == zero ())\n     return 0;\n   gcc_assert (REG_BR_PROB_BASE == BB_FREQ_MAX\n \t      && fun->cfg->count_max.initialized_p ());\n@@ -287,7 +287,7 @@ profile_count::to_cgraph_frequency (profile_count entry_bb_count) const\n {\n   if (!initialized_p () || !entry_bb_count.initialized_p ())\n     return CGRAPH_FREQ_BASE;\n-  if (*this == profile_count::zero ())\n+  if (*this == zero ())\n     return 0;\n   gcc_checking_assert (entry_bb_count.initialized_p ());\n   uint64_t scale;\n@@ -310,7 +310,7 @@ profile_count::to_sreal_scale (profile_count in, bool *known) const\n     }\n   if (known)\n     *known = true;\n-  if (*this == profile_count::zero ())\n+  if (*this == zero ())\n     return 0;\n \n   if (!in.m_val)\n@@ -337,7 +337,7 @@ profile_count::adjust_for_ipa_scaling (profile_count *num,\n   if (*num == *den)\n     return;\n   /* Scaling to zero is always zero.  */\n-  if (*num == profile_count::zero ())\n+  if (*num == zero ())\n     return;\n   /* If den is non-zero we are safe.  */\n   if (den->force_nonzero () == *den)\n@@ -359,9 +359,9 @@ profile_count::combine_with_ipa_count (profile_count ipa)\n   ipa = ipa.ipa ();\n   if (ipa.nonzero_p ())\n     return ipa;\n-  if (!ipa.initialized_p () || *this == profile_count::zero ())\n+  if (!ipa.initialized_p () || *this == zero ())\n     return *this;\n-  if (ipa == profile_count::zero ())\n+  if (ipa == zero ())\n     return this->global0 ();\n   return this->global0adjusted ();\n }\n@@ -406,6 +406,5 @@ profile_probability::combine_with_count (profile_count count1,\n     return *this * count1.probability_in (count1 + count2)\n \t   + other * count2.probability_in (count1 + count2);\n   else\n-    return *this * profile_probability::even ()\n-\t   + other * profile_probability::even ();\n+    return *this * even () + other * even ();\n }"}, {"sha": "a6d913214704c82f5e9f7de1f84b070fd4c08a20", "filename": "gcc/profile-count.h", "status": "modified", "additions": 76, "deletions": 79, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c3f08dadad805010c2411e79d80d023693a1b0/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=a4c3f08dadad805010c2411e79d80d023693a1b0", "patch": "@@ -177,30 +177,28 @@ class GTY((user)) profile_probability\n   static profile_probability very_unlikely ()\n     {\n       /* Be consistent with PROB_VERY_UNLIKELY in predict.h.  */\n-      profile_probability r\n-\t = profile_probability::guessed_always ().apply_scale (1, 2000);\n+      profile_probability r = guessed_always ().apply_scale (1, 2000);\n       r.m_val--;\n       return r;\n     }\n   static profile_probability unlikely ()\n     {\n       /* Be consistent with PROB_VERY_LIKELY in predict.h.  */\n-      profile_probability r\n-\t = profile_probability::guessed_always ().apply_scale (1, 5);\n+      profile_probability r = guessed_always ().apply_scale (1, 5);\n       r.m_val--;\n       return r;\n     }\n   static profile_probability even ()\n     {\n-      return profile_probability::guessed_always ().apply_scale (1, 2);\n+      return guessed_always ().apply_scale (1, 2);\n     }\n   static profile_probability very_likely ()\n     {\n-      return profile_probability::always () - very_unlikely ();\n+      return always () - very_unlikely ();\n     }\n   static profile_probability likely ()\n     {\n-      return profile_probability::always () - unlikely ();\n+      return always () - unlikely ();\n     }\n   static profile_probability guessed_always ()\n     {\n@@ -266,8 +264,7 @@ class GTY((user)) profile_probability\n     {\n       gcc_checking_assert (initialized_p ());\n       int ret = m_val * 8 + m_quality;\n-      gcc_checking_assert (profile_probability::from_reg_br_prob_note (ret)\n-\t\t\t   == *this);\n+      gcc_checking_assert (from_reg_br_prob_note (ret) == *this);\n       return ret;\n     }\n \n@@ -297,12 +294,12 @@ class GTY((user)) profile_probability\n     }\n   profile_probability operator+ (const profile_probability &other) const\n     {\n-      if (other == profile_probability::never ())\n+      if (other == never ())\n \treturn *this;\n-      if (*this == profile_probability::never ())\n+      if (*this == never ())\n \treturn other;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_probability::uninitialized ();\n+\treturn uninitialized ();\n \n       profile_probability ret;\n       ret.m_val = MIN ((uint32_t)(m_val + other.m_val), max_probability);\n@@ -311,15 +308,15 @@ class GTY((user)) profile_probability\n     }\n   profile_probability &operator+= (const profile_probability &other)\n     {\n-      if (other == profile_probability::never ())\n+      if (other == never ())\n \treturn *this;\n-      if (*this == profile_probability::never ())\n+      if (*this == never ())\n \t{\n \t  *this = other;\n \t  return *this;\n \t}\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_probability::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n \t  m_val = MIN ((uint32_t)(m_val + other.m_val), max_probability);\n@@ -329,23 +326,23 @@ class GTY((user)) profile_probability\n     }\n   profile_probability operator- (const profile_probability &other) const\n     {\n-      if (*this == profile_probability::never ()\n-\t  || other == profile_probability::never ())\n+      if (*this == never ()\n+\t  || other == never ())\n \treturn *this;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_probability::uninitialized ();\n+\treturn uninitialized ();\n       profile_probability ret;\n       ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;\n       ret.m_quality = MIN (m_quality, other.m_quality);\n       return ret;\n     }\n   profile_probability &operator-= (const profile_probability &other)\n     {\n-      if (*this == profile_probability::never ()\n-\t  || other == profile_probability::never ())\n+      if (*this == never ()\n+\t  || other == never ())\n \treturn *this;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_probability::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n \t  m_val = m_val >= other.m_val ? m_val - other.m_val : 0;\n@@ -355,23 +352,23 @@ class GTY((user)) profile_probability\n     }\n   profile_probability operator* (const profile_probability &other) const\n     {\n-      if (*this == profile_probability::never ()\n-\t  || other == profile_probability::never ())\n-\treturn profile_probability::never ();\n+      if (*this == never ()\n+\t  || other == never ())\n+\treturn never ();\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_probability::uninitialized ();\n+\treturn uninitialized ();\n       profile_probability ret;\n       ret.m_val = RDIV ((uint64_t)m_val * other.m_val, max_probability);\n       ret.m_quality = MIN (MIN (m_quality, other.m_quality), ADJUSTED);\n       return ret;\n     }\n   profile_probability &operator*= (const profile_probability &other)\n     {\n-      if (*this == profile_probability::never ()\n-\t  || other == profile_probability::never ())\n-\treturn *this = profile_probability::never ();\n+      if (*this == never ()\n+\t  || other == never ())\n+\treturn *this = never ();\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_probability::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n \t  m_val = RDIV ((uint64_t)m_val * other.m_val, max_probability);\n@@ -381,10 +378,10 @@ class GTY((user)) profile_probability\n     }\n   profile_probability operator/ (const profile_probability &other) const\n     {\n-      if (*this == profile_probability::never ())\n-\treturn profile_probability::never ();\n+      if (*this == never ())\n+\treturn never ();\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_probability::uninitialized ();\n+\treturn uninitialized ();\n       profile_probability ret;\n       /* If we get probability above 1, mark it as unreliable and return 1. */\n       if (m_val >= other.m_val)\n@@ -408,10 +405,10 @@ class GTY((user)) profile_probability\n     }\n   profile_probability &operator/= (const profile_probability &other)\n     {\n-      if (*this == profile_probability::never ())\n-\treturn *this = profile_probability::never ();\n+      if (*this == never ())\n+\treturn *this = never ();\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_probability::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n           /* If we get probability above 1, mark it as unreliable\n@@ -460,22 +457,22 @@ class GTY((user)) profile_probability\n \t Avoid scaling when overall outcome is supposed to be always.\n \t Without knowing that one is inverse of toher, the result would be\n \t conservative.  */\n-      if (!(*this == profile_probability::always ()))\n+      if (!(*this == always ()))\n         *this = (*this - ret) / ret.invert ();\n       return ret;\n     }\n \n   gcov_type apply (gcov_type val) const\n     {\n-      if (*this == profile_probability::uninitialized ())\n+      if (*this == uninitialized ())\n \treturn val / 2;\n       return RDIV (val * m_val, max_probability);\n     }\n \n   /* Return 1-*THIS.  */\n   profile_probability invert () const\n     {\n-      return profile_probability::always() - *this;\n+      return always() - *this;\n     }\n \n   /* Return THIS with quality dropped to GUESSED.  */\n@@ -497,10 +494,10 @@ class GTY((user)) profile_probability\n   /* Return *THIS * NUM / DEN.  */\n   profile_probability apply_scale (int64_t num, int64_t den) const\n     {\n-      if (*this == profile_probability::never ())\n+      if (*this == never ())\n \treturn *this;\n       if (!initialized_p ())\n-\treturn profile_probability::uninitialized ();\n+\treturn uninitialized ();\n       profile_probability ret;\n       uint64_t tmp;\n       safe_scale_64bit (m_val, num, den, &tmp);\n@@ -684,8 +681,8 @@ class GTY(()) profile_count\n     {\n       if (!initialized_p () || !other.initialized_p ())\n \treturn true;\n-      if (*this == profile_count::zero ()\n-\t  || other == profile_count::zero ())\n+      if (*this == zero ()\n+\t  || other == zero ())\n \treturn true;\n       return ipa_p () == other.ipa_p ();\n     }\n@@ -789,12 +786,12 @@ class GTY(()) profile_count\n     }\n   profile_count operator+ (const profile_count &other) const\n     {\n-      if (other == profile_count::zero ())\n+      if (other == zero ())\n \treturn *this;\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \treturn other;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n \n       profile_count ret;\n       gcc_checking_assert (compatible_p (other));\n@@ -804,15 +801,15 @@ class GTY(()) profile_count\n     }\n   profile_count &operator+= (const profile_count &other)\n     {\n-      if (other == profile_count::zero ())\n+      if (other == zero ())\n \treturn *this;\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \t{\n \t  *this = other;\n \t  return *this;\n \t}\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_count::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n           gcc_checking_assert (compatible_p (other));\n@@ -823,10 +820,10 @@ class GTY(()) profile_count\n     }\n   profile_count operator- (const profile_count &other) const\n     {\n-      if (*this == profile_count::zero () || other == profile_count::zero ())\n+      if (*this == zero () || other == zero ())\n \treturn *this;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n       gcc_checking_assert (compatible_p (other));\n       profile_count ret;\n       ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;\n@@ -835,10 +832,10 @@ class GTY(()) profile_count\n     }\n   profile_count &operator-= (const profile_count &other)\n     {\n-      if (*this == profile_count::zero () || other == profile_count::zero ())\n+      if (*this == zero () || other == zero ())\n \treturn *this;\n       if (!initialized_p () || !other.initialized_p ())\n-\treturn *this = profile_count::uninitialized ();\n+\treturn *this = uninitialized ();\n       else\n \t{\n           gcc_checking_assert (compatible_p (other));\n@@ -861,9 +858,9 @@ class GTY(()) profile_count\n     {\n       if (!initialized_p () || !other.initialized_p ())\n \treturn false;\n-      if (*this == profile_count::zero ())\n-\treturn !(other == profile_count::zero ());\n-      if (other == profile_count::zero ())\n+      if (*this == zero ())\n+\treturn !(other == zero ());\n+      if (other == zero ())\n \treturn false;\n       gcc_checking_assert (compatible_p (other));\n       return m_val < other.m_val;\n@@ -872,10 +869,10 @@ class GTY(()) profile_count\n     {\n       if (!initialized_p () || !other.initialized_p ())\n \treturn false;\n-      if (*this  == profile_count::zero ())\n+      if (*this  == zero ())\n \treturn false;\n-      if (other == profile_count::zero ())\n-\treturn !(*this == profile_count::zero ());\n+      if (other == zero ())\n+\treturn !(*this == zero ());\n       gcc_checking_assert (compatible_p (other));\n       return initialized_p () && other.initialized_p () && m_val > other.m_val;\n     }\n@@ -896,21 +893,21 @@ class GTY(()) profile_count\n     {\n       if (!initialized_p () || !other.initialized_p ())\n \treturn false;\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \treturn true;\n-      if (other == profile_count::zero ())\n-\treturn (*this == profile_count::zero ());\n+      if (other == zero ())\n+\treturn (*this == zero ());\n       gcc_checking_assert (compatible_p (other));\n       return m_val <= other.m_val;\n     }\n   bool operator>= (const profile_count &other) const\n     {\n       if (!initialized_p () || !other.initialized_p ())\n \treturn false;\n-      if (other == profile_count::zero ())\n+      if (other == zero ())\n \treturn true;\n-      if (*this == profile_count::zero ())\n-\treturn (other == profile_count::zero ());\n+      if (*this == zero ())\n+\treturn (other == zero ());\n       gcc_checking_assert (compatible_p (other));\n       return m_val >= other.m_val;\n     }\n@@ -954,9 +951,9 @@ class GTY(()) profile_count\n \treturn other;\n       if (!other.initialized_p ())\n \treturn *this;\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \treturn other;\n-      if (other == profile_count::zero ())\n+      if (other == zero ())\n \treturn *this;\n       gcc_checking_assert (compatible_p (other));\n       if (m_val < other.m_val || (m_val == other.m_val\n@@ -973,7 +970,7 @@ class GTY(()) profile_count\n       if (m_val == 0)\n \treturn *this;\n       if (!initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n       profile_count ret;\n       ret.m_val = RDIV (m_val * prob, REG_BR_PROB_BASE);\n       ret.m_quality = MIN (m_quality, ADJUSTED);\n@@ -983,12 +980,12 @@ class GTY(()) profile_count\n   /* Scale counter according to PROB.  */\n   profile_count apply_probability (profile_probability prob) const\n     {\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \treturn *this;\n       if (prob == profile_probability::never ())\n-\treturn profile_count::zero ();\n+\treturn zero ();\n       if (!initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n       profile_count ret;\n       uint64_t tmp;\n       safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,\n@@ -1003,7 +1000,7 @@ class GTY(()) profile_count\n       if (m_val == 0)\n \treturn *this;\n       if (!initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n       profile_count ret;\n       uint64_t tmp;\n \n@@ -1015,12 +1012,12 @@ class GTY(()) profile_count\n     }\n   profile_count apply_scale (profile_count num, profile_count den) const\n     {\n-      if (*this == profile_count::zero ())\n+      if (*this == zero ())\n \treturn *this;\n-      if (num == profile_count::zero ())\n+      if (num == zero ())\n \treturn num;\n       if (!initialized_p () || !num.initialized_p () || !den.initialized_p ())\n-\treturn profile_count::uninitialized ();\n+\treturn uninitialized ();\n       if (num == den)\n \treturn *this;\n       gcc_checking_assert (den.m_val);\n@@ -1082,10 +1079,10 @@ class GTY(()) profile_count\n       if (m_quality > GUESSED_GLOBAL0_ADJUSTED)\n \treturn *this;\n       if (m_quality == GUESSED_GLOBAL0)\n-\treturn profile_count::zero ();\n+\treturn zero ();\n       if (m_quality == GUESSED_GLOBAL0_ADJUSTED)\n-\treturn profile_count::adjusted_zero ();\n-      return profile_count::uninitialized ();\n+\treturn adjusted_zero ();\n+      return uninitialized ();\n     }\n \n   /* Return THIS with quality dropped to AFDO.  */\n@@ -1100,8 +1097,8 @@ class GTY(()) profile_count\n      OVERALL.  */\n   profile_probability probability_in (const profile_count overall) const\n     {\n-      if (*this == profile_count::zero ()\n-\t  && !(overall == profile_count::zero ()))\n+      if (*this == zero ()\n+\t  && !(overall == zero ()))\n \treturn profile_probability::never ();\n       if (!initialized_p () || !overall.initialized_p ()\n \t  || !overall.m_val)"}]}