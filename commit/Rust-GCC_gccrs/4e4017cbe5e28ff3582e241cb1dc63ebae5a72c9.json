{"sha": "4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0MDE3Y2JlNWUyOGZmMzU4MmUyNDFjYjFkYzYzZWJhZTVhNzJjOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-25T23:53:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-25T23:53:23Z"}, "message": "ifcvt.c (seq_contains_jump): New.\n\n        * ifcvt.c (seq_contains_jump): New.\n        (noce_try_store_flag_constants): Use it to fail conversion.\n        (noce_try_store_flag_inc, noce_try_store_flag_mask): Likewise.\n\nFrom-SVN: r34179", "tree": {"sha": "e220cd3d4052a3bc02972d1c12f86e4e1ac366ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e220cd3d4052a3bc02972d1c12f86e4e1ac366ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9/comments", "author": null, "committer": null, "parents": [{"sha": "0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "68a7369efdbcc89b7bb44b2f7230944be694dba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "patch": "@@ -1,3 +1,9 @@\n+2000-05-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* ifcvt.c (seq_contains_jump): New.\n+\t(noce_try_store_flag_constants): Use it to fail conversion.\n+\t(noce_try_store_flag_inc, noce_try_store_flag_mask): Likewise.\n+\n 2000-05-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* except.h (can_throw): Declare it."}, {"sha": "9b20b3ae503cbd48b19edbf65dc9e91c795691e5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=4e4017cbe5e28ff3582e241cb1dc63ebae5a72c9", "patch": "@@ -73,6 +73,7 @@ static sbitmap *post_dominators;\n static int count_bb_insns\t\tPARAMS ((basic_block));\n static rtx first_active_insn\t\tPARAMS ((basic_block));\n static int last_active_insn_p\t\tPARAMS ((basic_block, rtx));\n+static int seq_contains_jump\t\tPARAMS ((rtx));\n \n static int cond_exec_process_insns\tPARAMS ((rtx, rtx, rtx, rtx, int));\n static rtx cond_exec_get_condition\tPARAMS ((rtx));\n@@ -173,6 +174,24 @@ last_active_insn_p (bb, insn)\n \n   return GET_CODE (insn) == JUMP_INSN;\n }\n+\n+/* It is possible, especially when having dealt with multi-word \n+   arithmetic, for the expanders to have emitted jumps.  Search\n+   through the sequence and return TRUE if a jump exists so that\n+   we can abort the conversion.  */\n+\n+static int\n+seq_contains_jump (insn)\n+     rtx insn;\n+{\n+  while (insn)\n+    {\n+      if (GET_CODE (insn) == JUMP_INSN)\n+\treturn 1;\n+      insn = NEXT_INSN (insn);\n+    }\n+  return 0;\n+}\n \f\n /* Go through a bunch of insns, converting them to conditional\n    execution format if possible.  Return TRUE if all of the non-note\n@@ -637,6 +656,10 @@ noce_try_store_flag_constants (if_info)\n \n       seq = get_insns ();\n       end_sequence ();\n+\n+      if (seq_contains_jump (seq))\n+\treturn FALSE;\n+\n       emit_insns_before (seq, if_info->cond_earliest);\n \n       return TRUE;\n@@ -691,6 +714,10 @@ noce_try_store_flag_inc (if_info)\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n+\n+\t  if (seq_contains_jump (seq))\n+\t    return FALSE;\n+\n \t  emit_insns_before (seq, if_info->cond_earliest);\n \n \t  return TRUE;\n@@ -738,6 +765,10 @@ noce_try_store_flag_mask (if_info)\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n+\n+\t  if (seq_contains_jump (seq))\n+\t    return FALSE;\n+\n \t  emit_insns_before (seq, if_info->cond_earliest);\n \n \t  return TRUE;"}]}