{"sha": "6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmZGVjZGIxZDhmMGVjZTc0MWUwMGQxODdkOWNiNzNkMGU5YjZlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-08-31T09:55:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-31T09:55:31Z"}, "message": "print-rtl.c (print_rtx): NOTE_INSN_LIVE has an rtx not a bitmap.\n\n\ufffd\n        * print-rtl.c (print_rtx): NOTE_INSN_LIVE has an rtx not a bitmap.\n        * haifa-sched.c (sched_analyze): Handle NOTE_INSN_RANGE_START\n        and NOTE_INSN_RANGE_END specially.\n        (reemit_notes): Likewise.\n\nFrom-SVN: r22127", "tree": {"sha": "233d864c192af8d8a351375918489037b7826dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/233d864c192af8d8a351375918489037b7826dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec/comments", "author": null, "committer": null, "parents": [{"sha": "da2ec29a6cd37cace754777558eb3deb0d9f06e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2ec29a6cd37cace754777558eb3deb0d9f06e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2ec29a6cd37cace754777558eb3deb0d9f06e6"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "10e25a13484cc1fbc0668495849505403ec166f5", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6dfdecdb1d8f0ece741e00d187d9cb73d0e9b6ec", "patch": "@@ -3930,13 +3930,23 @@ sched_analyze (head, tail)\n \t}\n \n       /* See comments on reemit_notes as to why we do this.  */\n+      /* ??? Actually, the reemit_notes just say what is done, not why.  */\n+\n+      else if (GET_CODE (insn) == NOTE\n+\t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_START\n+\t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_END))\n+\t{\n+\t  loop_notes = alloc_EXPR_LIST (REG_DEAD, NOTE_RANGE_INFO (insn),\n+\t\t\t\t\tloop_notes);\n+\t  loop_notes = alloc_EXPR_LIST (REG_DEAD,\n+\t\t\t\t\tGEN_INT (NOTE_LINE_NUMBER (insn)),\n+\t\t\t\t\tloop_notes);\n+\t}\n       else if (GET_CODE (insn) == NOTE\n \t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END\n-\t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_START\n-\t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_END\n \t\t   || (NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP\n \t\t       && GET_CODE (PREV_INSN (insn)) != CALL_INSN)))\n \t{\n@@ -6461,13 +6471,22 @@ reemit_notes (insn, last)\n       if (REG_NOTE_KIND (note) == REG_DEAD\n \t  && GET_CODE (XEXP (note, 0)) == CONST_INT)\n \t{\n-\t  if (INTVAL (XEXP (note, 0)) == NOTE_INSN_SETJMP)\n+\t  int note_type = INTVAL (XEXP (note, 0));\n+\t  if (note_type == NOTE_INSN_SETJMP)\n \t    {\n-\t      retval = emit_note_after (INTVAL (XEXP (note, 0)), insn);\n+\t      retval = emit_note_after (NOTE_INSN_SETJMP, insn);\n \t      CONST_CALL_P (retval) = CONST_CALL_P (note);\n \t      remove_note (insn, note);\n \t      note = XEXP (note, 1);\n \t    }\n+\t  else if (note_type == NOTE_INSN_RANGE_START\n+                   || note_type == NOTE_INSN_RANGE_END)\n+\t    {\n+\t      last = emit_note_before (note_type, last);\n+\t      remove_note (insn, note);\n+\t      note = XEXP (note, 1);\n+\t      NOTE_RANGE_INFO (last) = XEXP (note, 0);\n+\t    }\n \t  else\n \t    {\n \t      last = emit_note_before (INTVAL (XEXP (note, 0)), last);"}]}