{"sha": "b74b7579245cc7724490f6038908858963ac3104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0Yjc1NzkyNDVjYzc3MjQ0OTBmNjAzODkwODg1ODk2M2FjMzEwNA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-05T11:10:31Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-05T11:10:31Z"}, "message": "In gcc/testsuite/: 2011-06-05 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-objc.m: Fixed testcase.  Use log2 of the\n\talignment, not the alignment, when calling class_addIvar().  Add\n\tan 'isa' instance variable to the test root class.\n\t* obj-c++.dg/gnu-api-2-objc.mm: Likewise.\n\nFrom-SVN: r174656", "tree": {"sha": "9e46a0736bc9ea59a5d3fe23daa93cbda170a39f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e46a0736bc9ea59a5d3fe23daa93cbda170a39f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74b7579245cc7724490f6038908858963ac3104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74b7579245cc7724490f6038908858963ac3104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74b7579245cc7724490f6038908858963ac3104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74b7579245cc7724490f6038908858963ac3104/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "586e6d03db7c8353202fca41a9f47b9b99ecaefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586e6d03db7c8353202fca41a9f47b9b99ecaefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586e6d03db7c8353202fca41a9f47b9b99ecaefc"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "7194f87fac405ff4159653e88320e05151791626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b74b7579245cc7724490f6038908858963ac3104", "patch": "@@ -1,3 +1,10 @@\n+2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-objc.m: Fixed testcase.  Use log2 of the\n+\talignment, not the alignment, when calling class_addIvar().  Add\n+\tan 'isa' instance variable to the test root class.\n+\t* obj-c++.dg/gnu-api-2-objc.mm: Likewise.\n+\t\n 2011-06-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/48893"}, {"sha": "ce70c5e434f284dd96d2145647a46e7a75064c6c", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-objc.mm", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm?ref=b74b7579245cc7724490f6038908858963ac3104", "patch": "@@ -45,6 +45,23 @@ - (void) setVariable: (id)value { variable_ivar = value; }\n - (id) variable { return variable_ivar; }\n @end\n \n+/* Hack to calculate the log2 of a byte alignment.  */\n+unsigned char\n+log_2_of (unsigned int x)\n+{\n+  unsigned char result = 0;\n+\n+  /* We count how many times we need to divide by 2 before we reach 1.\n+     This algorithm is good enough for the small numbers (such as 8,\n+     16 or 64) that we have to deal with.  */\n+  while (x > 1)\n+    {\n+      x = x / 2;\n+      result++;\n+    }\n+\n+  return result;\n+}\n \n int main ()\n {\n@@ -56,8 +73,9 @@ int main ()\n     Class new_class = objc_allocateClassPair (objc_getClass (\"MyRootClass\"), \"MyNewSubClass\", 0);\n \n     /* A new root class would obviously need at least an 'isa'\n-       instance variable.  We don't add it so we never actually\n-       instantiate an instance of the class, which wouldn't work.  */\n+       instance variable.  */\n+    class_addIvar (new_root_class, \"isa\", sizeof (Class), log_2_of (__alignof__ (Class)),\n+\t\t   @encode (Class));\n \n     objc_registerClassPair (new_root_class);\n     objc_registerClassPair (new_class);\n@@ -114,7 +132,7 @@ int main ()\n     /* Add a bit of everything to the class to exercise undoing all these changes.  */\n \n     /* Instance variable.  */\n-    class_addIvar (new_class, \"my_variable\", sizeof (float), __alignof__ (float), @encode (float));\n+    class_addIvar (new_class, \"my_variable\", sizeof (float), log_2_of (__alignof__ (float)), @encode (float));\n \n     /* Instance method.  */\n     class_addMethod (new_class, @selector (setVariable:), method_getImplementation (method),"}, {"sha": "d1177d70e5330bbcaa52a46b57689642ce48ea34", "filename": "gcc/testsuite/objc.dg/gnu-api-2-objc.m", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74b7579245cc7724490f6038908858963ac3104/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m?ref=b74b7579245cc7724490f6038908858963ac3104", "patch": "@@ -45,6 +45,23 @@ - (void) setVariable: (id)value { variable_ivar = value; }\n - (id) variable { return variable_ivar; }\n @end\n \n+/* Hack to calculate the log2 of a byte alignment.  */\n+unsigned char\n+log_2_of (unsigned int x)\n+{\n+  unsigned char result = 0;\n+\n+  /* We count how many times we need to divide by 2 before we reach 1.\n+     This algorithm is good enough for the small numbers (such as 8,\n+     16 or 64) that we have to deal with.  */\n+  while (x > 1)\n+    {\n+      x = x / 2;\n+      result++;\n+    }\n+\n+  return result;\n+}\n \n int main(int argc, void **args)\n {\n@@ -56,8 +73,9 @@ int main(int argc, void **args)\n     Class new_class = objc_allocateClassPair (objc_getClass (\"MyRootClass\"), \"MyNewSubClass\", 0);\n \n     /* A new root class would obviously need at least an 'isa'\n-       instance variable.  We don't add it so we never actually\n-       instantiate an instance of the class, which wouldn't work.  */\n+       instance variable.  */\n+    class_addIvar (new_root_class, \"isa\", sizeof (Class), log_2_of (__alignof__ (Class)),\n+\t\t   @encode (Class));\n \n     objc_registerClassPair (new_root_class);\n     objc_registerClassPair (new_class);\n@@ -114,7 +132,7 @@ int main(int argc, void **args)\n     /* Add a bit of everything to the class to exercise undoing all these changes.  */\n \n     /* Instance variable.  */\n-    class_addIvar (new_class, \"my_variable\", sizeof (float), __alignof__ (float), @encode (float));\n+    class_addIvar (new_class, \"my_variable\", sizeof (float), log_2_of (__alignof__ (float)), @encode (float));\n \n     /* Instance method.  */\n     class_addMethod (new_class, @selector (setVariable:), method_getImplementation (method),"}]}