{"sha": "cc48a87f9d1eae385269d87882517c183a06c383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0OGE4N2Y5ZDFlYWUzODUyNjlkODc4ODI1MTdjMTgzYTA2YzM4Mw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-04T00:56:16Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-04T00:56:16Z"}, "message": "[NDS32] Refine implementation of sibcall patterns.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c (nds32_long_call_p): New function.\n\t* config/nds32/nds32-protos.h (nds32_long_call_p): Declare.\n\t* config/nds32/nds32.c (nds32_function_ok_for_sibcall): New function.\n\t(TARGET_FUNCTION_OK_FOR_SIBCALL): Define.\n\t* config/nds32/nds32.md (sibcall_internal): New.\n\t(sibcall_register): Remove.\n\t(sibcall_immediate): Remove.\n\t(sibcall_value_internal): New.\n\t(sibcall_value_register): Remove.\n\t(sibcall_value_immediate): Remove.\n\t* config/nds32/predicates.md (nds32_general_register_operand): New.\n\t(nds32_call_address_operand): New.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\n\nFrom-SVN: r259065", "tree": {"sha": "8c64481b3536726aae27b23b9257fb85095ed3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c64481b3536726aae27b23b9257fb85095ed3d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc48a87f9d1eae385269d87882517c183a06c383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc48a87f9d1eae385269d87882517c183a06c383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc48a87f9d1eae385269d87882517c183a06c383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc48a87f9d1eae385269d87882517c183a06c383/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1b81a03200461827fcfd851af085ab4f7837190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b81a03200461827fcfd851af085ab4f7837190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b81a03200461827fcfd851af085ab4f7837190"}], "stats": {"total": 187, "additions": 130, "deletions": 57}, "files": [{"sha": "2b3369be703e71b7d37f6cba0fc55a33f86e4bb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -1,3 +1,19 @@\n+2018-04-04  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_long_call_p): New function.\n+\t* config/nds32/nds32-protos.h (nds32_long_call_p): Declare.\n+\t* config/nds32/nds32.c (nds32_function_ok_for_sibcall): New function.\n+\t(TARGET_FUNCTION_OK_FOR_SIBCALL): Define.\n+\t* config/nds32/nds32.md (sibcall_internal): New.\n+\t(sibcall_register): Remove.\n+\t(sibcall_immediate): Remove.\n+\t(sibcall_value_internal): New.\n+\t(sibcall_value_register): Remove.\n+\t(sibcall_value_immediate): Remove.\n+\t* config/nds32/predicates.md (nds32_general_register_operand): New.\n+\t(nds32_call_address_operand): New.\n+\n 2018-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/85167"}, {"sha": "5311b69ecf6a98995e00d2acff15f25b8a739c50", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -1145,3 +1145,10 @@ nds32_expand_unaligned_store (rtx *operands, enum machine_mode mode)\n \t}\n     }\n }\n+\n+/* Return true X is need use long call.  */\n+bool\n+nds32_long_call_p (rtx symbol)\n+{\n+  return TARGET_CMODEL_LARGE;\n+}"}, {"sha": "6a3281be1ba851b993089a07bdc34494e98aebbd", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -116,6 +116,9 @@ extern bool nds32_symbol_load_store_p (rtx_insn *);\n extern const char *nds32_output_casesi_pc_relative (rtx *);\n extern const char *nds32_output_casesi (rtx *);\n \n+/* Auxiliary functions to identify long-call symbol.  */\n+extern bool nds32_long_call_p (rtx);\n+\n /* Auxiliary functions to identify 16 bit addresing mode.  */\n \n extern enum nds32_16bit_address_type nds32_mem_format (rtx);"}, {"sha": "829e097eae2ea161178f6bbf36c1233523360e05", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -1762,6 +1762,26 @@ nds32_asm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \n /* -- Permitting tail calls.  */\n \n+/* Return true if it is ok to do sibling call optimization.  */\n+static bool\n+nds32_function_ok_for_sibcall (tree decl,\n+\t\t\t       tree exp ATTRIBUTE_UNUSED)\n+{\n+  /* The DECL is NULL if it is an indirect call.  */\n+\n+  /* 1. Do not apply sibling call if -mv3push is enabled,\n+\tbecause pop25 instruction also represents return behavior.\n+     2. If this function is a variadic function, do not apply sibling call\n+\tbecause the stack layout may be a mess.\n+     3. We don't want to apply sibling call optimization for indirect\n+\tsibcall because the pop behavior in epilogue may pollute the\n+\tcontent of caller-saved regsiter when the register is used for\n+\tindirect sibcall.  */\n+  return (!TARGET_V3PUSH\n+\t  && (cfun->machine->va_args_size == 0)\n+\t  && decl);\n+}\n+\n /* Determine whether we need to enable warning for function return check.  */\n static bool\n nds32_warn_func_return (tree decl)\n@@ -3764,6 +3784,9 @@ nds32_target_alignment (rtx_insn *label)\n \n /* -- Permitting tail calls.  */\n \n+#undef TARGET_FUNCTION_OK_FOR_SIBCALL\n+#define TARGET_FUNCTION_OK_FOR_SIBCALL nds32_function_ok_for_sibcall\n+\n #undef TARGET_WARN_FUNC_RETURN\n #define TARGET_WARN_FUNC_RETURN nds32_warn_func_return\n "}, {"sha": "0ececef50819dbe2ab62b1552e6a3f02950e89b3", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 66, "deletions": 57, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -1996,50 +1996,55 @@ create_template:\n ;; The sibcall patterns.\n \n ;; sibcall\n-;; sibcall_register\n-;; sibcall_immediate\n+;; sibcall_internal\n \n (define_expand \"sibcall\"\n   [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n \t\t    (const_int 0))\n \t      (clobber (reg:SI TA_REGNUM))\n \t      (return)])]\n-  \"\"\n-  \"\"\n-)\n-\n-(define_insn \"*sibcall_register\"\n-  [(parallel [(call (mem (match_operand:SI 0 \"register_operand\" \"r, r\"))\n-\t\t    (match_operand 1))\n-\t      (clobber (reg:SI TA_REGNUM))\n-\t      (return)])]\n-  \"\"\n-  \"@\n-   jr5\\t%0\n-   jr\\t%0\"\n-  [(set_attr \"type\"   \"branch,branch\")\n-   (set_attr \"length\" \"     2,     4\")])\n+  \"\")\n \n-(define_insn \"*sibcall_immediate\"\n-  [(parallel [(call (mem (match_operand:SI 0 \"immediate_operand\" \"i\"))\n+(define_insn \"sibcall_internal\"\n+  [(parallel [(call (mem (match_operand:SI 0 \"nds32_call_address_operand\" \"r, i\"))\n \t\t    (match_operand 1))\n \t      (clobber (reg:SI TA_REGNUM))\n \t      (return)])]\n   \"\"\n {\n-  if (TARGET_CMODEL_LARGE)\n-    return \"b\\t%0\";\n-  else\n-    return \"j\\t%0\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      if (TARGET_16_BIT)\n+\treturn \"jr5\\t%0\";\n+      else\n+\treturn \"jr\\t%0\";\n+    case 1:\n+      if (nds32_long_call_p (operands[0]))\n+\treturn \"b\\t%0\";\n+      else\n+\treturn \"j\\t%0\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\"   \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_test \"TARGET_CMODEL_LARGE\")\n-\t\t      (const_int 12)\n-\t\t      (const_int 4)))])\n+  [(set_attr \"enabled\" \"1\")\n+   (set_attr \"type\" \"branch\")\n+   (set_attr_alternative \"length\"\n+     [\n+       ;; Alternative 0\n+       (if_then_else (match_test \"TARGET_16_BIT\")\n+\t\t     (const_int 2)\n+\t\t     (const_int 4))\n+       ;; Alternative 1\n+       (if_then_else (match_test \"nds32_long_call_p (operands[0])\")\n+\t\t     (const_int 12)\n+\t\t     (const_int 4))\n+     ])]\n+)\n \n ;; sibcall_value\n-;; sibcall_value_register\n+;; sibcall_value_internal\n ;; sibcall_value_immediate\n \n (define_expand \"sibcall_value\"\n@@ -2048,42 +2053,46 @@ create_template:\n \t\t\t (const_int 0)))\n \t      (clobber (reg:SI TA_REGNUM))\n \t      (return)])]\n-  \"\"\n-  \"\"\n-)\n-\n-(define_insn \"*sibcall_value_register\"\n-  [(parallel [(set (match_operand 0)\n-\t\t   (call (mem (match_operand:SI 1 \"register_operand\" \"r, r\"))\n-\t\t\t (match_operand 2)))\n-\t      (clobber (reg:SI TA_REGNUM))\n-\t      (return)])]\n-  \"\"\n-  \"@\n-   jr5\\t%1\n-   jr\\t%1\"\n-  [(set_attr \"type\"   \"branch,branch\")\n-   (set_attr \"length\" \"     2,     4\")])\n+  \"\")\n \n-(define_insn \"*sibcall_value_immediate\"\n+(define_insn \"sibcall_value_internal\"\n   [(parallel [(set (match_operand 0)\n-\t\t   (call (mem (match_operand:SI 1 \"immediate_operand\" \"i\"))\n+\t\t   (call (mem (match_operand:SI 1 \"nds32_call_address_operand\" \"r, i\"))\n \t\t\t (match_operand 2)))\n \t      (clobber (reg:SI TA_REGNUM))\n \t      (return)])]\n   \"\"\n {\n-  if (TARGET_CMODEL_LARGE)\n-    return \"b\\t%1\";\n-  else\n-    return \"j\\t%1\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      if (TARGET_16_BIT)\n+\treturn \"jr5\\t%1\";\n+      else\n+\treturn \"jr\\t%1\";\n+    case 1:\n+      if (nds32_long_call_p (operands[1]))\n+\treturn \"b\\t%1\";\n+      else\n+\treturn \"j\\t%1\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\"   \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_test \"TARGET_CMODEL_LARGE\")\n-\t\t      (const_int 12)\n-\t\t      (const_int 4)))])\n-\n+  [(set_attr \"enabled\" \"1\")\n+   (set_attr \"type\" \"branch\")\n+   (set_attr_alternative \"length\"\n+     [\n+       ;; Alternative 0\n+       (if_then_else (match_test \"TARGET_16_BIT\")\n+\t\t     (const_int 2)\n+\t\t     (const_int 4))\n+       ;; Alternative 1\n+       (if_then_else (match_test \"nds32_long_call_p (operands[1])\")\n+\t\t     (const_int 12)\n+\t\t     (const_int 4))\n+     ])]\n+)\n \n ;; ----------------------------------------------------------------------------\n "}, {"sha": "ad04b51baf26d68615e64a9f97e15765e07d32fa", "filename": "gcc/config/nds32/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc48a87f9d1eae385269d87882517c183a06c383/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpredicates.md?ref=cc48a87f9d1eae385269d87882517c183a06c383", "patch": "@@ -57,6 +57,21 @@\n   return true;\n })\n \n+(define_predicate \"nds32_general_register_operand\"\n+  (match_code \"reg,subreg\")\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  return (REG_P (op)\n+\t  && (REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t      || REGNO (op) <= NDS32_LAST_GPR_REGNUM));\n+})\n+\n+(define_predicate \"nds32_call_address_operand\"\n+  (ior (match_operand 0 \"nds32_symbolic_operand\")\n+       (match_operand 0 \"nds32_general_register_operand\")))\n+\n (define_predicate \"nds32_lmw_smw_base_operand\"\n   (and (match_code \"mem\")\n        (match_test \"nds32_valid_smw_lwm_base_p (op)\")))"}]}