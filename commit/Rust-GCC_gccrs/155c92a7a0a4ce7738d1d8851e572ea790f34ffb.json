{"sha": "155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1YzkyYTdhMGE0Y2U3NzM4ZDFkODg1MWU1NzJlYTc5MGYzNGZmYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-03T10:15:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-03T10:15:54Z"}, "message": "cgraph.h (struct varpool_node): Add const_value_known.\n\n\n\t* cgraph.h (struct varpool_node): Add const_value_known.\n\t(varpool_decide_const_value_known): Declare.\n\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Update initializer folding.\n\t* lto-cgraph.c (lto_output_varpool_node): Store const_value_known.\n\t(input_varpool_node): Restore const_value_known.\n\t* tree-ssa-loop-ivcanon (constant_after_peeling): Check varpool for\n\tinitializer folding.\n\t* ipa.c (ipa_discover_readonly_nonaddressable_var,\n\tfunction_and_variable_visibility): Compute const_value_known.\n\t* gimple-fold.c (get_symbol_constant_value): Use varpool for initializer\n\tfolding.\n\t* varpool.c (varpool_decide_const_value_known): New function.\n\nFrom-SVN: r163808", "tree": {"sha": "557b00c4e086e7d798393273321f3907a7d16cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/557b00c4e086e7d798393273321f3907a7d16cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/comments", "author": null, "committer": null, "parents": [{"sha": "cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "612e0205399d673f1331b2c8ed022edf40691d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -1,3 +1,18 @@\n+2010-09-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.h (struct varpool_node): Add const_value_known.\n+\t(varpool_decide_const_value_known): Declare.\n+\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Update initializer folding.\n+\t* lto-cgraph.c (lto_output_varpool_node): Store const_value_known.\n+\t(input_varpool_node): Restore const_value_known.\n+\t* tree-ssa-loop-ivcanon (constant_after_peeling): Check varpool for\n+\tinitializer folding.\n+\t* ipa.c (ipa_discover_readonly_nonaddressable_var,\n+\tfunction_and_variable_visibility): Compute const_value_known.\n+\t* gimple-fold.c (get_symbol_constant_value): Use varpool for initializer\n+\tfolding.\n+\t* varpool.c (varpool_decide_const_value_known): New function.\n+\n 2010-09-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md: Remove empty prepartion statements"}, {"sha": "c868d329542b497d8c77f353ba64b2dfd303381a", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -503,6 +503,8 @@ struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) varpool_node {\n      During WPA output it is used to mark nodes that are present in\n      multiple partitions.  */\n   unsigned in_other_partition : 1;\n+  /* True when variable is constant and its value is known.  */\n+  unsigned int const_value_known : 1;\n };\n \n /* Every top level asm statement is put into a cgraph_asm_node.  */\n@@ -726,6 +728,7 @@ void varpool_empty_needed_queue (void);\n bool varpool_extra_name_alias (tree, tree);\n const char * varpool_node_name (struct varpool_node *node);\n void varpool_reset_queue (void);\n+bool varpool_decide_const_value_known (struct varpool_node *node);\n \n /* Walk all reachable static variables.  */\n #define FOR_EACH_STATIC_VARIABLE(node) \\"}, {"sha": "033023a9fa77bd61c67b25bfee7ddd32f64362b6", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -38,9 +38,9 @@ along with GCC; see the file COPYING3.  If not see\n tree\n get_symbol_constant_value (tree sym)\n {\n-  if (TREE_STATIC (sym)\n-      && (TREE_READONLY (sym)\n-\t  || TREE_CODE (sym) == CONST_DECL))\n+  if ((TREE_STATIC (sym) || DECL_EXTERNAL (sym))\n+      && (TREE_CODE (sym) == CONST_DECL\n+\t  || varpool_get_node (sym)->const_value_known))\n     {\n       tree val = DECL_INITIAL (sym);\n       if (val)\n@@ -65,8 +65,6 @@ get_symbol_constant_value (tree sym)\n \t have zero as the initializer if they may not be\n \t overridden at link or run time.  */\n       if (!val\n-\t  && !DECL_EXTERNAL (sym)\n-\t  && targetm.binds_local_p (sym)\n           && (INTEGRAL_TYPE_P (TREE_TYPE (sym))\n \t       || SCALAR_FLOAT_TYPE_P (TREE_TYPE (sym))))\n \treturn fold_convert (TREE_TYPE (sym), integer_zero_node);"}, {"sha": "b199796fcdb2f1f320a4266af0119a0e66b1551f", "filename": "gcc/ipa.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -561,6 +561,7 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \t    if (dump_file)\n \t      fprintf (dump_file, \" %s (read-only)\", varpool_node_name (vnode));\n \t    TREE_READONLY (vnode->decl) = 1;\n+\t    vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n \t  }\n       }\n   if (dump_file)\n@@ -767,6 +768,9 @@ function_and_variable_visibility (bool whole_program)\n \t      || ! (ADDR_SPACE_GENERIC_P\n \t\t    (TYPE_ADDR_SPACE (TREE_TYPE (vnode->decl))))))\n \tDECL_COMMON (vnode->decl) = 0;\n+     /* Even extern variables might have initializers known.\n+\tSee, for example testsuite/g++.dg/opt/static3.C  */\n+     vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n     }\n   for (vnode = varpool_nodes_queue; vnode; vnode = vnode->next_needed)\n     {\n@@ -801,6 +805,7 @@ function_and_variable_visibility (bool whole_program)\n \t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));\n \t  cgraph_make_decl_local (vnode->decl);\n \t}\n+     vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n      gcc_assert (TREE_STATIC (vnode->decl));\n     }\n   pointer_set_destroy (aliased_nodes);"}, {"sha": "dac5c3218149acb5ca96a00e6f0e1c6baf693c7d", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -575,6 +575,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, struct varpool_node\n   bp_pack_value (&bp, node->force_output, 1);\n   bp_pack_value (&bp, node->finalized, 1);\n   bp_pack_value (&bp, node->alias, 1);\n+  bp_pack_value (&bp, node->const_value_known, 1);\n   gcc_assert (!node->alias || !node->extra_name);\n   gcc_assert (node->finalized || !node->analyzed);\n   gcc_assert (node->needed);\n@@ -1106,6 +1107,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   node->force_output = bp_unpack_value (&bp, 1);\n   node->finalized = bp_unpack_value (&bp, 1);\n   node->alias = bp_unpack_value (&bp, 1);\n+  node->const_value_known = bp_unpack_value (&bp, 1);\n   node->analyzed = node->finalized; \n   node->used_from_other_partition = bp_unpack_value (&bp, 1);\n   node->in_other_partition = bp_unpack_value (&bp, 1);"}, {"sha": "8c42a63366598eb6cac6a390f8f89dc2f52fdd39", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -1348,7 +1348,8 @@ fold_const_aggregate_ref (tree t)\n \tcase VAR_DECL:\n \t  if (!TREE_READONLY (base)\n \t      || TREE_CODE (TREE_TYPE (base)) != ARRAY_TYPE\n-\t      || !targetm.binds_local_p (base))\n+\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n+\t\t  && !varpool_get_node (base)->const_value_known))\n \t    return NULL_TREE;\n \n \t  ctor = DECL_INITIAL (base);\n@@ -1435,7 +1436,8 @@ fold_const_aggregate_ref (tree t)\n \tcase VAR_DECL:\n \t  if (!TREE_READONLY (base)\n \t      || TREE_CODE (TREE_TYPE (base)) != RECORD_TYPE\n-\t      || !targetm.binds_local_p (base))\n+\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n+\t\t  && !varpool_get_node (base)->const_value_known))\n \t    return NULL_TREE;\n \n \t  ctor = DECL_INITIAL (base);\n@@ -1509,7 +1511,8 @@ fold_const_aggregate_ref (tree t)\n \n \t  if (!TREE_READONLY (base)\n \t      || TREE_CODE (TREE_TYPE (base)) != ARRAY_TYPE\n-\t      || !targetm.binds_local_p (base))\n+\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n+\t\t  && !varpool_get_node (base)->const_value_known))\n \t    return NULL_TREE;\n \n \t  ctor = DECL_INITIAL (base);"}, {"sha": "2ced3070d485d1ce031a8a5dece880a61c1eac21", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -165,9 +165,7 @@ constant_after_peeling (tree op, gimple stmt, struct loop *loop)\n       if ((DECL_P (base)\n       \t   && TREE_STATIC (base)\n \t   && TREE_READONLY (base)\n-           && (DECL_INITIAL (base)\n-\t       || (!DECL_EXTERNAL (base)\n-\t\t   && targetm.binds_local_p (base))))\n+\t   && varpool_get_node (base)->const_value_known)\n \t  || CONSTANT_CLASS_P (base))\n \t{\n \t  /* If so, see if we understand all the indices.  */"}, {"sha": "eac488fa79b2cc74195ce599e7b045e583fbfbe8", "filename": "gcc/varpool.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155c92a7a0a4ce7738d1d8851e572ea790f34ffb/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=155c92a7a0a4ce7738d1d8851e572ea790f34ffb", "patch": "@@ -359,6 +359,37 @@ decide_is_variable_needed (struct varpool_node *node, tree decl)\n   return true;\n }\n \n+/* Return if NODE is constant and its initial value is known (so we can do\n+   constant folding).  The decision depends on whole program decisions\n+   and can not be recomputed at ltrans stage for variables from other\n+   partitions.  For this reason the new value should be always combined\n+   with the previous knowledge.  */\n+\n+bool\n+varpool_decide_const_value_known (struct varpool_node *node)\n+{\n+  tree decl = node->decl;\n+\n+  gcc_assert (TREE_STATIC (decl) || DECL_EXTERNAL (decl));\n+  gcc_assert (TREE_CODE (decl) == VAR_DECL);\n+  if (!TREE_READONLY (decl))\n+    return false;\n+  /* Variables declared 'const' without an initializer\n+     have zero as the initializer if they may not be\n+     overridden at link or run time.  */\n+  if (!DECL_INITIAL (decl)\n+      && (DECL_EXTERNAL (decl)\n+\t  || DECL_REPLACEABLE_P (decl)))\n+    return false;\n+\n+  /* Variables declared `const' with an initializer are considered\n+     to not be overwritable with different initializer by default. \n+\n+     ??? Previously we behaved so for scalar variables but not for array\n+     accesses.  */\n+  return true;\n+}\n+\n /* Mark DECL as finalized.  By finalizing the declaration, frontend instruct the\n    middle end to output the variable to asm file, if needed or externally\n    visible.  */"}]}