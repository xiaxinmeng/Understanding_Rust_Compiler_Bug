{"sha": "6d40c489243bfbdc3a5134389ff51f12b62308bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0MGM0ODkyNDNiZmJkYzNhNTEzNDM4OWZmNTFmMTJiNjIzMDhiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-11-11T09:47:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-11-11T09:47:35Z"}, "message": "re PR middle-end/27528 (compiling linux kernels 2.6.16.14/15 2.6.17-rc3 on powerpc (7450) get error on long exixting code)\n\ngcc/\n\tPR middle-end/27528\n\t* stmt.c (expand_asm_operands): Use EXPAND_INITIALIZER if the\n\tconstraints accept neither registers or memories.\n\ngcc/testsuite/\n\tPR middle-end/27528\n\t* gcc.c-torture/compile/pr27528.c: New test.\n\t* gcc.dg/pr27528.c: Likewise.\n\nFrom-SVN: r118689", "tree": {"sha": "25f526bc8744496c378c59ae62869f60f01a1892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f526bc8744496c378c59ae62869f60f01a1892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d40c489243bfbdc3a5134389ff51f12b62308bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d40c489243bfbdc3a5134389ff51f12b62308bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d40c489243bfbdc3a5134389ff51f12b62308bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d40c489243bfbdc3a5134389ff51f12b62308bc/comments", "author": null, "committer": null, "parents": [{"sha": "5601414805950ad6e66754a595d0a7e74fa9097c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5601414805950ad6e66754a595d0a7e74fa9097c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5601414805950ad6e66754a595d0a7e74fa9097c"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "99ac929e379e9c4b3623a665085c82879f10e44a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d40c489243bfbdc3a5134389ff51f12b62308bc", "patch": "@@ -1,3 +1,9 @@\n+2006-11-11  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR middle-end/27528\n+\t* stmt.c (expand_asm_operands): Use EXPAND_INITIALIZER if the\n+\tconstraints accept neither registers or memories.\n+\n 2006-11-11  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/bfin.h (FUNCTION_PROFILER): Don't use LABELNO."}, {"sha": "d5a181b9d2d997c8d04b1b02c424e693b9e9d0d4", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6d40c489243bfbdc3a5134389ff51f12b62308bc", "patch": "@@ -885,9 +885,13 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \n       val = TREE_VALUE (tail);\n       type = TREE_TYPE (val);\n+      /* EXPAND_INITIALIZER will not generate code for valid initializer\n+\t constants, but will still generate code for other types of operand.\n+\t This is the behavior we want for constant constraints.  */\n       op = expand_expr (val, NULL_RTX, VOIDmode,\n-\t\t\t(allows_mem && !allows_reg\n-\t\t\t ? EXPAND_MEMORY : EXPAND_NORMAL));\n+\t\t\tallows_reg ? EXPAND_NORMAL\n+\t\t\t: allows_mem ? EXPAND_MEMORY\n+\t\t\t: EXPAND_INITIALIZER);\n \n       /* Never pass a CONCAT to an ASM.  */\n       if (GET_CODE (op) == CONCAT)"}, {"sha": "be5d63cebf6a5f9ff78f231dfcf5f49af26fddd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d40c489243bfbdc3a5134389ff51f12b62308bc", "patch": "@@ -1,3 +1,9 @@\n+2006-11-11  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR middle-end/27528\n+\t* gcc.c-torture/compile/pr27528.c: New test.\n+\t* gcc.dg/pr27528.c: Likewise.\n+\n 2006-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-20.c: Add more cases for stripping sign ops."}, {"sha": "ee3cf656fb12f10b3cf4fe0ce54074434ebaf73b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr27528.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27528.c?ref=6d40c489243bfbdc3a5134389ff51f12b62308bc", "patch": "@@ -0,0 +1,38 @@\n+/* Check that constant constraints like \"i\", \"n\" and \"s\" can be used in\n+   cases where the operand is an initializer constant.  */\n+int x[2] = { 1, 2 };\n+\n+#ifdef __OPTIMIZE__\n+static inline void __attribute__((__always_inline__))\n+insn1 (int x)\n+{\n+  asm volatile (\"# %0 %1\" :: \"n\" (x), \"i\" (x));\n+}\n+\n+static inline void __attribute__((__always_inline__))\n+insn2 (const void *x)\n+{\n+  asm volatile (\"# %0 %1\" :: \"s\" (x), \"i\" (x));\n+}\n+#endif\n+\n+void\n+foo (void)\n+{\n+#ifdef __OPTIMIZE__\n+  insn1 (2);\n+  insn1 (2);\n+  insn1 (400);\n+  insn1 (__LINE__);\n+  insn2 (x);\n+  insn2 (x);\n+  insn2 (&x[1]);\n+  insn2 (\"string\");\n+#endif\n+  asm volatile (\"# %0 %1\" :: \"s\" (x), \"i\" (x));\n+  /* At the time of writing, &x[1] is decomposed before reaching expand\n+     when compiling with -O0.  */\n+  asm volatile (\"# %0 %1\" :: \"s\" (\"string\"), \"i\" (\"string\"));\n+  asm volatile (\"# %0 %1\" :: \"s\" (__FILE__), \"i\" (__FILE__));\n+  asm volatile (\"# %0 %1\" :: \"s\" (__FUNCTION__), \"i\" (__FUNCTION__));\n+}"}, {"sha": "4f33a31cb57cf272c05bc27ad0649f7a8d5151a6", "filename": "gcc/testsuite/gcc.dg/pr27528.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d40c489243bfbdc3a5134389ff51f12b62308bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c?ref=6d40c489243bfbdc3a5134389ff51f12b62308bc", "patch": "@@ -0,0 +1,18 @@\n+/* Check the warnings and errors generated for asm operands that aren't\n+   obviously constant but that are constrained to be constants.  */\n+/* { dg-options \"\" } */\n+/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 13 } */\n+/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 14 } */\n+/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 15 } */\n+/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 16 } */\n+int bar (int);\n+void\n+foo (int *x, int y)\n+{\n+  int constant = 0;\n+  asm (\"# %0\" :: \"i\" (x)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (bar (*x))); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (*x + 0x11)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (constant)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (y * 0)); /* folded */\n+}"}]}