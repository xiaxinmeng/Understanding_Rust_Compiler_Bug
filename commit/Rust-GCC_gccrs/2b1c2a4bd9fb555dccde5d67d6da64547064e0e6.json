{"sha": "2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxYzJhNGJkOWZiNTU1ZGNjZGU1ZDY3ZDZkYTY0NTQ3MDY0ZTBlNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-21T17:59:00Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-03T09:18:46Z"}, "message": "d: Fix ICE using non-local variable: internal compiler error: Segmentation fault\n\nMoves no frame access error to own function, adding use of it for both\nwhen get_framedecl() cannot find a path to the outer function frame, and\nguarding get_decl_tree() from recursively calling itself.\n\ngcc/d/ChangeLog:\n\n\tPR d/96254\n\t* d-codegen.cc (error_no_frame_access): New.\n\t(get_frame_for_symbol): Use fdparent name in error message.\n\t(get_framedecl): Replace call to assert with error.\n\t* d-tree.h (error_no_frame_access): Declare.\n\t* decl.cc (get_decl_tree): Detect recursion and error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/96254\n\t* gdc.dg/pr96254a.d: New test.\n\t* gdc.dg/pr96254b.d: New test.", "tree": {"sha": "5da49e400890cbbb33d45ca68f9c47e323bf2baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5da49e400890cbbb33d45ca68f9c47e323bf2baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58cfec3a6e756b534b33787e51c52f5fc63b53ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cfec3a6e756b534b33787e51c52f5fc63b53ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cfec3a6e756b534b33787e51c52f5fc63b53ab"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "73a6a340ccf6fcb9d354258436324aa45c1865f8", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "patch": "@@ -2127,6 +2127,17 @@ build_vthis_function (tree basetype, tree type)\n   return fntype;\n }\n \n+/* Raise an error at that the context pointer of the function or object SYM is\n+   not accessible from the current scope.  */\n+\n+tree\n+error_no_frame_access (Dsymbol *sym)\n+{\n+  error_at (input_location, \"cannot get frame pointer to %qs\",\n+\t    sym->toPrettyChars ());\n+  return null_pointer_node;\n+}\n+\n /* If SYM is a nested function, return the static chain to be\n    used when calling that function from the current function.\n \n@@ -2191,7 +2202,7 @@ get_frame_for_symbol (Dsymbol *sym)\n \t{\n \t  error_at (make_location_t (sym->loc),\n \t\t    \"%qs is a nested function and cannot be accessed from %qs\",\n-\t\t    fd->toPrettyChars (), thisfd->toPrettyChars ());\n+\t\t    fdparent->toPrettyChars (), thisfd->toPrettyChars ());\n \t  return null_pointer_node;\n \t}\n \n@@ -2202,39 +2213,35 @@ get_frame_for_symbol (Dsymbol *sym)\n       while (fd != dsym)\n \t{\n \t  /* Check if enclosing function is a function.  */\n-\t  FuncDeclaration *fd = dsym->isFuncDeclaration ();\n+\t  FuncDeclaration *fdp = dsym->isFuncDeclaration ();\n+\t  Dsymbol *parent = dsym->toParent2 ();\n \n-\t  if (fd != NULL)\n+\t  if (fdp != NULL)\n \t    {\n-\t      if (fdparent == fd->toParent2 ())\n+\t      if (fdparent == parent)\n \t\tbreak;\n \n-\t      gcc_assert (fd->isNested () || fd->vthis);\n-\t      dsym = dsym->toParent2 ();\n+\t      gcc_assert (fdp->isNested () || fdp->vthis);\n+\t      dsym = parent;\n \t      continue;\n \t    }\n \n \t  /* Check if enclosed by an aggregate.  That means the current\n \t     function must be a member function of that aggregate.  */\n-\t  AggregateDeclaration *ad = dsym->isAggregateDeclaration ();\n+\t  AggregateDeclaration *adp = dsym->isAggregateDeclaration ();\n \n-\t  if (ad == NULL)\n-\t    goto Lnoframe;\n-\t  if (ad->isClassDeclaration () && fdparent == ad->toParent2 ())\n-\t    break;\n-\t  if (ad->isStructDeclaration () && fdparent == ad->toParent2 ())\n-\t    break;\n-\n-\t  if (!ad->isNested () || !ad->vthis)\n+\t  if (adp != NULL)\n \t    {\n-\t    Lnoframe:\n-\t      error_at (make_location_t (thisfd->loc),\n-\t\t\t\"cannot get frame pointer to %qs\",\n-\t\t\tsym->toPrettyChars ());\n-\t      return null_pointer_node;\n+\t      if ((adp->isClassDeclaration () || adp->isStructDeclaration ())\n+\t\t  && fdparent == parent)\n+\t\tbreak;\n \t    }\n \n-\t  dsym = dsym->toParent2 ();\n+\t  /* No frame to outer function found.  */\n+\t  if (!adp || !adp->isNested () || !adp->vthis)\n+\t    return error_no_frame_access (sym);\n+\n+\t  dsym = parent;\n \t}\n     }\n \n@@ -2724,8 +2731,10 @@ get_framedecl (FuncDeclaration *inner, FuncDeclaration *outer)\n \tbreak;\n     }\n \n+  if (fd != outer)\n+    return error_no_frame_access (outer);\n+\n   /* Go get our frame record.  */\n-  gcc_assert (fd == outer);\n   tree frame_type = FRAMEINFO_TYPE (get_frameinfo (outer));\n \n   if (frame_type != NULL_TREE)"}, {"sha": "2be80dd18673e9ce3c98992a2fa48c61c45d0c64", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "patch": "@@ -575,6 +575,7 @@ extern tree d_build_call (TypeFunction *, tree, tree, Expressions *);\n extern tree d_assert_call (const Loc &, libcall_fn, tree = NULL_TREE);\n extern tree build_float_modulus (tree, tree, tree);\n extern tree build_vthis_function (tree, tree);\n+extern tree error_no_frame_access (Dsymbol *);\n extern tree get_frame_for_symbol (Dsymbol *);\n extern tree build_vthis (AggregateDeclaration *);\n extern void build_closure (FuncDeclaration *);"}, {"sha": "72c8a8cff0628e8664125f8c69e3a75053bddbd9", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "patch": "@@ -1480,6 +1480,11 @@ get_decl_tree (Declaration *decl)\n       AggregateDeclaration *ad = fd->isThis ();\n       gcc_assert (ad != NULL);\n \n+      /* The parent function is for the same `this' declaration we are\n+\t building a chain to.  Non-local declaration is inaccessible.  */\n+      if (fd->vthis == vd)\n+\treturn error_no_frame_access (fd);\n+\n       t = get_decl_tree (fd->vthis);\n       Dsymbol *outer = fd;\n "}, {"sha": "e5dd1244b947770a90e7b70791b029007e713f5d", "filename": "gcc/testsuite/gdc.dg/pr96254a.d", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254a.d?ref=2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "patch": "@@ -0,0 +1,28 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96254\n+// { dg-do compile }\n+struct map(alias fun)\n+{\n+    @property run()\n+    {\n+    }\n+}\n+\n+struct Task(Args)\n+{\n+    Args _args;\n+}\n+\n+template reduce(functions...)\n+{\n+    auto reduce(Args)(Args args)\n+    {\n+        alias RTask = Task!(typeof(args));\n+        auto task = RTask();\n+    }\n+}\n+\n+void main() // { dg-error \"'D main' is a nested function and cannot be accessed\" }\n+{\n+    immutable delta = 1;\n+    reduce!\"a + b\"(map!({ immutable x = delta; })());\n+}"}, {"sha": "02e3c484d26e837c71bbc5333b54e5256c495026", "filename": "gcc/testsuite/gdc.dg/pr96254b.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96254b.d?ref=2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "patch": "@@ -0,0 +1,24 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96254\n+// { dg-do compile }\n+mixin template test()\n+{\n+    int next;\n+}\n+\n+void foo(alias l)()\n+{\n+    l.next = 0; // { dg-error \"cannot get frame pointer to 'D main'\" }\n+}\n+\n+void bar(alias l, alias t)()\n+{\n+    l.next = 0; // { dg-error \"cannot get frame pointer to 'D main'\" }\n+}\n+\n+void main()\n+{\n+    mixin test l1;\n+    mixin test l2;\n+    foo!(l1);\n+    bar!(l1,l2);\n+}"}]}