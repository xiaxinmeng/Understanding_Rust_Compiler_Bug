{"sha": "9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4ZGJlNzMyYTBkZjA2MDRkZDFhMmRiMWU0NDk1ZTNlYmE2ODZhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-03-02T17:50:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-03-02T17:50:55Z"}, "message": "re PR libstdc++/65279 (std::scoped_allocator_adaptor is not assignable)\n\n\tPR libstdc++/65279\n\t* include/std/scoped_allocator (__inner_type_impl,\n\tscoped_allocator_adaptor): Add defaulted copy assignment and move\n\tassignment operators.\n\t* testsuite/20_util/scoped_allocator/65279.cc: New.\n\nFrom-SVN: r221119", "tree": {"sha": "9bb515a86ab0be192777010d69aca71e0fe25c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb515a86ab0be192777010d69aca71e0fe25c64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59a2e945eaaefc35355a4b8cc301981ab131e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59a2e945eaaefc35355a4b8cc301981ab131e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59a2e945eaaefc35355a4b8cc301981ab131e9e"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "33a90dc5127794264f90c77c27d256b29343f13a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "patch": "@@ -1,3 +1,11 @@\n+2015-03-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65279\n+\t* include/std/scoped_allocator (__inner_type_impl,\n+\tscoped_allocator_adaptor): Add defaulted copy assignment and move\n+\tassignment operators.\n+\t* testsuite/20_util/scoped_allocator/65279.cc: New.\n+\n 2015-03-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64367"}, {"sha": "d163edd109a9d020dd6105e3921e91ba266df39c", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "patch": "@@ -105,6 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __inner_type_impl() = default;\n       __inner_type_impl(const __inner_type_impl&) = default;\n       __inner_type_impl(__inner_type_impl&&) = default;\n+      __inner_type_impl& operator=(const __inner_type_impl&) = default;\n+      __inner_type_impl& operator=(__inner_type_impl&&) = default;\n       \n       template<typename _Alloc>\n       __inner_type_impl(const __inner_type_impl<_Alloc>& __other)\n@@ -136,6 +138,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __inner_type_impl() = default;\n       __inner_type_impl(const __inner_type_impl&) = default;\n       __inner_type_impl(__inner_type_impl&&) = default;\n+      __inner_type_impl& operator=(const __inner_type_impl&) = default;\n+      __inner_type_impl& operator=(__inner_type_impl&&) = default;\n       \n       template<typename... _Allocs>\n       __inner_type_impl(const __inner_type_impl<_Allocs...>& __other)\n@@ -310,6 +314,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           _M_inner(std::move(__other._M_inner))\n         { }\n \n+      scoped_allocator_adaptor&\n+      operator=(const scoped_allocator_adaptor&) = default;\n+\n+      scoped_allocator_adaptor&\n+      operator=(scoped_allocator_adaptor&&) = default;\n+\n       inner_allocator_type& inner_allocator() noexcept\n       { return _M_inner._M_get(this); }\n "}, {"sha": "786d4031cdbcaf8a4068fa8876b7f1fae3284c62", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/65279.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F65279.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8dbe732a0df0604dd1a2db1e4495e3eba686a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F65279.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F65279.cc?ref=9d8dbe732a0df0604dd1a2db1e4495e3eba686a8", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <memory>\n+#include <type_traits>\n+#include <scoped_allocator>\n+\n+template<typename T>\n+  struct Allocator : std::allocator<T>\n+  {\n+    template<typename U>\n+      struct rebind { using other = Allocator<U>; };\n+\n+    using propagate_on_container_copy_assignment = std::true_type;\n+    using propagate_on_container_move_assignment = std::true_type;\n+  };\n+\n+template<typename... T>\n+  using alloc = std::scoped_allocator_adaptor<Allocator<T>...>;\n+\n+void\n+test01()\n+{\n+  // Test partial specialization for sizeof...(InnerAlloc) == 0\n+  alloc<int> a;\n+  a = a;\n+  a = std::move(a);\n+}\n+\n+void\n+test02()\n+{\n+  // Test partial specialization for sizeof...(InnerAlloc) >= 1\n+  alloc<int, char> a;\n+  a = a;\n+  a = std::move(a);\n+}"}]}