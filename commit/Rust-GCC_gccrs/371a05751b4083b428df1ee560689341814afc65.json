{"sha": "371a05751b4083b428df1ee560689341814afc65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxYTA1NzUxYjQwODNiNDI4ZGYxZWU1NjA2ODkzNDE4MTRhZmM2NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-18T13:42:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-18T13:42:01Z"}, "message": "i386.c (ix86_secondary_reload): New static function.\n\n\t* config/i386/i386.c (ix86_secondary_reload): New static function.\n\t(TARGET_SECONDARY_RELOAD): New define.\n\t* config/i386/i386.h (SECONDARY_OUTPUT_RELOAD_CLASS): Remove.\n\t* config/i386/i386.md (reload_outqi): Remove.\n\nFrom-SVN: r135499", "tree": {"sha": "58a57f5dc37b0a8480f045d15be4ac2cce47c92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58a57f5dc37b0a8480f045d15be4ac2cce47c92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/371a05751b4083b428df1ee560689341814afc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371a05751b4083b428df1ee560689341814afc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371a05751b4083b428df1ee560689341814afc65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371a05751b4083b428df1ee560689341814afc65/comments", "author": null, "committer": null, "parents": [{"sha": "3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3571925eb5e0d39f1a1cf3de64e3e9648329cb81"}], "stats": {"total": 86, "additions": 46, "deletions": 40}, "files": [{"sha": "890477b4be623c2774a5a25520e91cecccb46967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371a05751b4083b428df1ee560689341814afc65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371a05751b4083b428df1ee560689341814afc65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=371a05751b4083b428df1ee560689341814afc65", "patch": "@@ -1,3 +1,10 @@\n+2008-05-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_secondary_reload): New static function.\n+\t(TARGET_SECONDARY_RELOAD): New define.\n+\t* config/i386/i386.h (SECONDARY_OUTPUT_RELOAD_CLASS): Remove.\n+\t* config/i386/i386.md (reload_outqi): Remove.\n+\n 2008-05-18 Xinliang David Li   <davidxl@google.com>\n \n \t* gcc/tree-ssa-dce.c: Coding style fix.\n@@ -14,8 +21,7 @@\n \n 2008-05-17  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n-\t* config/sh/sh.c (sh_output_mi_thunk): Update the use of\n-\tinit_flow.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Update the use of init_flow.\n \n 2008-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -47,8 +53,7 @@\n \n 2008-05-16  David S. Miller  <davem@davemloft.net>\n \n-\t* config/sparc/linux.h (NO_PROFILE_COUNTERS): Undef before\n-\toverriding.\n+\t* config/sparc/linux.h (NO_PROFILE_COUNTERS): Undef before overriding.\n \t* config/sparc/linux64.h (NO_PROFILE_COUNTERS): Likewise.\n \n 2008-05-16  Uros Bizjak  <ubizjak@gmail.com>\n@@ -61,8 +66,7 @@\n \t* ifcvt.c (dead_or_predicable): Rename\n \tdf_simulate_one_insn_backwards to df_simulate_one_insn.\n \t* recog.c (peephole2_optimize): Ditto.\n-\t* rtl-factoring.c (collect_pattern_seqs, clear_regs_live_in_seq): \n-\tDitto.\n+\t* rtl-factoring.c (collect_pattern_seqs, clear_regs_live_in_seq): Ditto.\n \t* df.h: Rename df_simulate_one_insn_backwards to\n \tdf_simulate_one_insn.  and delete df_simulate_one_insn_forwards.\n \t* df-problems.c (df_simulate_artificial_refs_at_top) Reversed\n@@ -99,8 +103,8 @@\n \t* tree-ssa-sccvn.c (compare_ops, init_scc_vn): Ditto.\n \t* function.h (cfun.last_stmt_uid): New field.\n \t* tree-flow-inline.h (set_gimple_stmt_uid, gimple_stmt_uid,\n-\tgimple_stmt_max_uid, set_gimple_stmt_max_uid, \n-\tinc_gimple_stmt_max_uid): New functions.\n+\tgimple_stmt_max_uid, set_gimple_stmt_max_uid, inc_gimple_stmt_max_uid):\n+\tNew functions.\n \t* tree-dfa.c (renumber_gimple_stmt_uids): New function.\n \t(create_stmt_ann): Initialize the ann->uid field.\n \t* tree-ssa-pre.c (compute_avail): Encapsulate the stmt_ann->uid\n@@ -141,8 +145,7 @@\n \tMULTILIB_MATCHES, MULTILIB_EXCEPTIONS): Likewise.\n \t* config/bfin/t-bfin-linux (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n \tMULTILIB_MATCHES, MULTILIB_EXCEPTIONS): Likewise.\n-\t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Add\n-\tBFIN_CPU_UNKNOWN.\n+\t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Add BFIN_CPU_UNKNOWN.\n \t* config/bfin/elf.h (STARTFILE_SPEC): Use specific CRT for BF561.\n \t(LIB_SPEC): Use proper linker script for bf561.  Error if no mcpu\n \toption.\n@@ -170,8 +173,8 @@\n \t* cgraph.h (compute_inline_parameters): Made public.\n \t* tree-pass.h (ipa_opt_pass): Removed function_generate_summary,\n \tvariable_generate_summary, function_write_summary,\n-\tvariable_write_summary, variable_read_summary.  Added \n-\tgenerate_summary, write_summary, read_summary.\n+\tvariable_write_summary, variable_read_summary.  Added generate_summary,\n+\twrite_summary, read_summary.\n \t* cgraphunit.c (cgraph_process_new_functions): Changed call from\n \tpass_ipa_inline.function_generate_summary, to\n \tcompute_inline_parameters. "}, {"sha": "776d07a44663ff6b4ae48c45271910385da43c44", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=371a05751b4083b428df1ee560689341814afc65", "patch": "@@ -22023,6 +22023,34 @@ ix86_preferred_output_reload_class (rtx x, enum reg_class regclass)\n   return regclass;\n }\n \n+static enum reg_class\n+ix86_secondary_reload (bool in_p, rtx x, enum reg_class class,\n+\t\t       enum machine_mode mode,\n+\t\t       secondary_reload_info *sri ATTRIBUTE_UNUSED)\n+{\n+  /* QImode spills from non-QI registers require\n+     intermediate register on 32bit targets.  */\n+  if (!in_p && mode == QImode && class == NON_Q_REGS\n+      && !TARGET_64BIT)\n+    {\n+      int regno;\n+\n+      if (REG_P (x))\n+\tregno = REGNO (x);\n+      else\n+\tregno = -1;\n+\n+      if (regno >= FIRST_PSEUDO_REGISTER || GET_CODE (x) == SUBREG)\n+\tregno = true_regnum (x);\n+\n+      /* Return Q_REGS if the operand is in memory.  */\n+      if (regno == -1)\n+\treturn Q_REGS;\n+    }\n+\n+  return NO_REGS;\n+}\n+\n /* If we are copying between general and FP registers, we need a memory\n    location. The same is true for SSE and MMX registers.\n \n@@ -25878,6 +25906,9 @@ x86_builtin_vectorization_cost (bool runtime_test)\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE ix86_function_value\n \n+#undef TARGET_SECONDARY_RELOAD\n+#define TARGET_SECONDARY_RELOAD ix86_secondary_reload\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST x86_builtin_vectorization_cost\n "}, {"sha": "f259d74d9d703dd4a7dff683c82ed973a06e7b39", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=371a05751b4083b428df1ee560689341814afc65", "patch": "@@ -1524,15 +1524,6 @@ enum reg_class\n    ? mode_for_size (32, GET_MODE_CLASS (MODE), 0)\t\t\\\n    : MODE)\n \n-/* QImode spills from non-QI registers need a scratch.  This does not\n-   happen often -- the only example so far requires an uninitialized\n-   pseudo.  */\n-\n-#define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, OUT)\t\t\t\\\n-  (((CLASS) == GENERAL_REGS || (CLASS) == LEGACY_REGS\t\t\t\\\n-    || (CLASS) == INDEX_REGS) && !TARGET_64BIT && (MODE) == QImode\t\\\n-   ? Q_REGS : NO_REGS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n /* On the 80386, this is the size of MODE in words,"}, {"sha": "a021e7c75e7261ab1aa66d0cd9754e398a32c073", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371a05751b4083b428df1ee560689341814afc65/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=371a05751b4083b428df1ee560689341814afc65", "patch": "@@ -1810,25 +1810,6 @@\n \t   ]\n \t   (const_string \"QI\")))])\n \n-(define_expand \"reload_outqi\"\n-  [(parallel [(match_operand:QI 0 \"\" \"=m\")\n-              (match_operand:QI 1 \"register_operand\" \"r\")\n-              (match_operand:QI 2 \"register_operand\" \"=&q\")])]\n-  \"\"\n-{\n-  rtx op0, op1, op2;\n-  op0 = operands[0]; op1 = operands[1]; op2 = operands[2];\n-\n-  gcc_assert (!reg_overlap_mentioned_p (op2, op0));\n-  if (! q_regs_operand (op1, QImode))\n-    {\n-      emit_insn (gen_movqi (op2, op1));\n-      op1 = op2;\n-    }\n-  emit_insn (gen_movqi (op0, op1));\n-  DONE;\n-})\n-\n (define_insn \"*swapqi_1\"\n   [(set (match_operand:QI 0 \"register_operand\" \"+r\")\n \t(match_operand:QI 1 \"register_operand\" \"+r\"))"}]}