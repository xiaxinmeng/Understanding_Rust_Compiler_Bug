{"sha": "818cac82f73e867779c7c62c42f256d9983ef5d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4Y2FjODJmNzNlODY3Nzc5YzdjNjJjNDJmMjU2ZDk5ODNlZjVkMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-25T16:51:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-25T16:51:46Z"}, "message": "Update shift1.go test for recent changes.\n\nFrom-SVN: r200400", "tree": {"sha": "5be1f64623cc8b5e964d6323eb0fd4b8d3b50d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be1f64623cc8b5e964d6323eb0fd4b8d3b50d88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818cac82f73e867779c7c62c42f256d9983ef5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818cac82f73e867779c7c62c42f256d9983ef5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818cac82f73e867779c7c62c42f256d9983ef5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818cac82f73e867779c7c62c42f256d9983ef5d1/comments", "author": null, "committer": null, "parents": [{"sha": "69d8df443906f77be079de8c9bb2c52da69351a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d8df443906f77be079de8c9bb2c52da69351a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d8df443906f77be079de8c9bb2c52da69351a2"}], "stats": {"total": 205, "additions": 204, "deletions": 1}, "files": [{"sha": "44a3792c4fa7ee2cd57e7e7dfe379eb69ef1033c", "filename": "gcc/testsuite/go.test/test/shift1.go", "status": "modified", "additions": 204, "deletions": 1, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818cac82f73e867779c7c62c42f256d9983ef5d1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818cac82f73e867779c7c62c42f256d9983ef5d1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go?ref=818cac82f73e867779c7c62c42f256d9983ef5d1", "patch": "@@ -23,7 +23,7 @@ var (\n \n // non-constant shift expressions\n var (\n-\te1       = g(2.0 << s) // ERROR \"invalid\" \"as type interface\"\n+\te1       = g(2.0 << s) // ERROR \"invalid|shift of non-integer operand\" \"as type interface\"\n \tf1       = h(2 << s)   // ERROR \"invalid\" \"as type float64\"\n \tg1 int64 = 1.1 << s    // ERROR \"truncated\"\n )\n@@ -36,3 +36,206 @@ var (\n \tb2     = 1.0 << c    // ERROR \"overflow\"\n \td2     = f(1.0 << c) // ERROR \"overflow\"\n )\n+\n+var (\n+\t// issues 4882, 4936.\n+\ta3 = 1.0<<s + 0 // ERROR \"invalid|shift of non-integer operand\"\n+\t// issue 4937\n+\tb3 = 1<<s + 1 + 1.0 // ERROR \"invalid|shift of non-integer operand\"\n+\t// issue 5014\n+\tc3     = complex(1<<s, 0) // ERROR \"invalid|shift of type float64\"\n+\td3 int = complex(1<<s, 3) // ERROR \"non-integer|cannot use.*as type int\" \"shift of type float64\"\n+\te3     = real(1 << s)     // ERROR \"invalid\"\n+\tf3     = imag(1 << s)     // ERROR \"invalid\"\n+)\n+\n+// from the spec\n+func _() {\n+\tvar (\n+\t\ts uint  = 33\n+\t\ti       = 1 << s         // 1 has type int\n+\t\tj int32 = 1 << s         // 1 has type int32; j == 0\n+\t\tk       = uint64(1 << s) // 1 has type uint64; k == 1<<33\n+\t\tm int   = 1.0 << s       // 1.0 has type int\n+\t\tn       = 1.0<<s != i    // 1.0 has type int; n == false if ints are 32bits in size\n+\t\to       = 1<<s == 2<<s   // 1 and 2 have type int; o == true if ints are 32bits in size\n+\t\t// next test only fails on 32bit systems\n+\t\t// p = 1<<s == 1<<33  // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int\n+\t\tu          = 1.0 << s    // ERROR \"non-integer|float64\"\n+\t\tu1         = 1.0<<s != 0 // ERROR \"non-integer|float64\"\n+\t\tu2         = 1<<s != 1.0 // ERROR \"non-integer|float64\"\n+\t\tv  float32 = 1 << s      // ERROR \"non-integer|float32\"\n+\t\tw  int64   = 1.0 << 33   // 1.0<<33 is a constant shift expression\n+\t\t_, _, _, _, _, _, _, _, _, _ = j, k, m, n, o, u, u1, u2, v, w\n+\t)\n+}\n+\n+// shifts in comparisons w/ untyped operands\n+var (\n+\t_ = 1<<s == 1\n+\t_ = 1<<s == 1.  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s == 1  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s == 1. // ERROR \"invalid|non-integer|shift of type float64\"\n+\n+\t_ = 1<<s+1 == 1\n+\t_ = 1<<s+1 == 1.   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1. == 1   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1. == 1.  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1 == 1   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1 == 1.  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1. == 1  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1. == 1. // ERROR \"invalid|non-integer|shift of type float64\"\n+\n+\t_ = 1<<s == 1<<s\n+\t_ = 1<<s == 1.<<s  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s == 1<<s  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s == 1.<<s // ERROR \"invalid|non-integer|shift of type float64\"\n+\n+\t_ = 1<<s+1<<s == 1\n+\t_ = 1<<s+1<<s == 1.   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1.  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1.  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1  // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1. // ERROR \"invalid|non-integer|shift of type float64\"\n+\n+\t_ = 1<<s+1<<s == 1<<s+1<<s\n+\t_ = 1<<s+1<<s == 1<<s+1.<<s    // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1<<s == 1.<<s+1<<s    // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1<<s == 1.<<s+1.<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1<<s+1<<s    // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1<<s+1.<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1.<<s+1<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1<<s+1.<<s == 1.<<s+1.<<s  // ERROR \"invalid|non-integer|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1<<s+1<<s    // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1<<s+1.<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1.<<s+1<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1<<s == 1.<<s+1.<<s  // ERROR \"invalid|non-integer|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1<<s+1<<s   // ERROR \"invalid|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1<<s+1.<<s  // ERROR \"invalid|non-integer|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1.<<s+1<<s  // ERROR \"invalid|non-integer|shift of type float64\"\n+\t_ = 1.<<s+1.<<s == 1.<<s+1.<<s // ERROR \"invalid|non-integer|shift of type float64\"\n+)\n+\n+// shifts in comparisons w/ typed operands\n+var (\n+\tx int\n+\t_ = 1<<s == x\n+\t_ = 1.<<s == x\n+\t_ = 1.1<<s == x // ERROR \"truncated\"\n+\n+\t_ = 1<<s+x == 1\n+\t_ = 1<<s+x == 1.\n+\t_ = 1<<s+x == 1.1 // ERROR \"truncated\"\n+\t_ = 1.<<s+x == 1\n+\t_ = 1.<<s+x == 1.\n+\t_ = 1.<<s+x == 1.1  // ERROR \"truncated\"\n+\t_ = 1.1<<s+x == 1   // ERROR \"truncated\"\n+\t_ = 1.1<<s+x == 1.  // ERROR \"truncated\"\n+\t_ = 1.1<<s+x == 1.1 // ERROR \"truncated\"\n+\n+\t_ = 1<<s == x<<s\n+\t_ = 1.<<s == x<<s\n+\t_ = 1.1<<s == x<<s // ERROR \"truncated\"\n+)\n+\n+// shifts as operands in non-arithmetic operations and as arguments\n+func _() {\n+\tvar s uint\n+\tvar a []int\n+\t_ = a[1<<s]\n+\t_ = a[1.]\n+\t// For now, the spec disallows these. We may revisit past Go 1.1.\n+\t_ = a[1.<<s]  // ERROR \"integer|shift of type float64\"\n+\t_ = a[1.1<<s] // ERROR \"integer|shift of type float64\"\n+\n+\t_ = make([]int, 1)\n+\t_ = make([]int, 1.)\n+\t_ = make([]int, 1.<<s)\n+\t_ = make([]int, 1.1<<s) // ERROR \"non-integer|truncated\"\n+\n+\t_ = float32(1)\n+\t_ = float32(1 << s) // ERROR \"non-integer|shift of type float32\"\n+\t_ = float32(1.)\n+\t_ = float32(1. << s)  // ERROR \"non-integer|shift of type float32\"\n+\t_ = float32(1.1 << s) // ERROR \"non-integer|shift of type float32\"\n+\n+\t_ = append(a, 1<<s)\n+\t_ = append(a, 1.<<s)\n+\t_ = append(a, 1.1<<s) // ERROR \"truncated\"\n+\n+\tvar b []float32\n+\t_ = append(b, 1<<s)   // ERROR \"non-integer|type float32\"\n+\t_ = append(b, 1.<<s)  // ERROR \"non-integer|type float32\"\n+\t_ = append(b, 1.1<<s) // ERROR \"non-integer|type float32\"\n+\n+\t_ = complex(1.<<s, 0)  // ERROR \"non-integer|shift of type float64\"\n+\t_ = complex(1.1<<s, 0) // ERROR \"non-integer|shift of type float64\"\n+\t_ = complex(0, 1.<<s)  // ERROR \"non-integer|shift of type float64\"\n+\t_ = complex(0, 1.1<<s) // ERROR \"non-integer|shift of type float64\"\n+\n+\tvar a4 float64\n+\tvar b4 int\n+\t_ = complex(1<<s, a4) // ERROR \"non-integer|shift of type float64\"\n+\t_ = complex(1<<s, b4) // ERROR \"invalid|non-integer|\"\n+\n+\tvar m1 map[int]string\n+\tdelete(m1, 1<<s)\n+\tdelete(m1, 1.<<s)\n+\tdelete(m1, 1.1<<s) // ERROR \"truncated|shift of type float64\"\n+\n+\tvar m2 map[float32]string\n+\tdelete(m2, 1<<s)   // ERROR \"invalid|cannot use 1 << s as type float32\"\n+\tdelete(m2, 1.<<s)  // ERROR \"invalid|cannot use 1 << s as type float32\"\n+\tdelete(m2, 1.1<<s) // ERROR \"invalid|cannot use 1.1 << s as type float32\"\n+}\n+\n+// shifts of shifts\n+func _() {\n+\tvar s uint\n+\t_ = 1 << (1 << s)\n+\t_ = 1 << (1. << s)\n+\t_ = 1 << (1.1 << s)   // ERROR \"non-integer|truncated\"\n+\t_ = 1. << (1 << s)    // ERROR \"non-integer|shift of type float64\"\n+\t_ = 1. << (1. << s)   // ERROR \"non-integer|shift of type float64\"\n+\t_ = 1.1 << (1.1 << s) // ERROR \"invalid|non-integer|truncated\"\n+\n+\t_ = (1 << s) << (1 << s)\n+\t_ = (1 << s) << (1. << s)\n+\t_ = (1 << s) << (1.1 << s)   // ERROR \"truncated\"\n+\t_ = (1. << s) << (1 << s)    // ERROR \"non-integer|shift of type float64\"\n+\t_ = (1. << s) << (1. << s)   // ERROR \"non-integer|shift of type float64\"\n+\t_ = (1.1 << s) << (1.1 << s) // ERROR \"invalid|non-integer|truncated\"\n+\n+\tvar x int\n+\tx = 1 << (1 << s)\n+\tx = 1 << (1. << s)\n+\tx = 1 << (1.1 << s) // ERROR \"truncated\"\n+\tx = 1. << (1 << s)\n+\tx = 1. << (1. << s)\n+\tx = 1.1 << (1.1 << s) // ERROR \"truncated\"\n+\n+\tx = (1 << s) << (1 << s)\n+\tx = (1 << s) << (1. << s)\n+\tx = (1 << s) << (1.1 << s) // ERROR \"truncated\"\n+\tx = (1. << s) << (1 << s)\n+\tx = (1. << s) << (1. << s)\n+\tx = (1.1 << s) << (1.1 << s) // ERROR \"truncated\"\n+\n+\tvar y float32\n+\ty = 1 << (1 << s)     // ERROR \"non-integer|type float32\"\n+\ty = 1 << (1. << s)    // ERROR \"non-integer|type float32\"\n+\ty = 1 << (1.1 << s)   // ERROR \"invalid|truncated|float32\"\n+\ty = 1. << (1 << s)    // ERROR \"non-integer|type float32\"\n+\ty = 1. << (1. << s)   // ERROR \"non-integer|type float32\"\n+\ty = 1.1 << (1.1 << s) // ERROR \"invalid|truncated|float32\"\n+\n+\tvar z complex128\n+\tz = (1 << s) << (1 << s)     // ERROR \"non-integer|type complex128\"\n+\tz = (1 << s) << (1. << s)    // ERROR \"non-integer|type complex128\"\n+\tz = (1 << s) << (1.1 << s)   // ERROR \"invalid|truncated|complex128\"\n+\tz = (1. << s) << (1 << s)    // ERROR \"non-integer|type complex128\"\n+\tz = (1. << s) << (1. << s)   // ERROR \"non-integer|type complex128\"\n+\tz = (1.1 << s) << (1.1 << s) // ERROR \"invalid|truncated|complex128\"\n+}"}]}