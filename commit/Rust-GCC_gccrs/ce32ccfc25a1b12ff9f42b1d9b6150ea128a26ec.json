{"sha": "ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzMmNjZmMyNWExYjEyZmY5ZjQyYjFkOWI2MTUwZWExMjhhMjZlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-12-02T09:15:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:37:54Z"}, "message": "[Ada] Bad handling of 'Valid_Scalars and arrays\n\ngcc/ada/\n\n\t* exp_attr.adb (Build_Array_VS_Func, Build_Record_VS_Func,\n\tExpand_N_Attribute_Reference): Use Get_Fullest_View instead of\n\tValidated_View.\n\t(Build_Record_VS_Func): Adjust to keep using Validated_View.\n\t(Expand_N_Attribute_Reference) [Valid]: Use\n\tSmall_Integer_Type_For to allow for more compile time\n\tevaluations.\n\t* sem_util.adb (Cannot_Raise_Constraint_Error): Add more precise\n\tsupport for N_Indexed_Component and fix support for\n\tN_Selected_Component which wasn't completely safe.\n\t(List_Cannot_Raise_CE): New.\n\t* libgnat/i-cobol.adb (Valid_Packed): Simplify test to address\n\tnew GNAT warning.", "tree": {"sha": "e4f517ec1acc382b979227ce2e6056a5dae1a4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4f517ec1acc382b979227ce2e6056a5dae1a4a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c118453c7c6db1e24145401abf70d286133de3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c118453c7c6db1e24145401abf70d286133de3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c118453c7c6db1e24145401abf70d286133de3f"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "b3ac7b7a9fc2834bca089d613dd2cff16d756b9a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "patch": "@@ -244,7 +244,7 @@ package body Exp_Attr is\n    is\n       Loc      : constant Source_Ptr := Sloc (Attr);\n       Comp_Typ : constant Entity_Id :=\n-        Validated_View (Component_Type (Array_Typ));\n+        Get_Fullest_View (Component_Type (Array_Typ));\n \n       function Validate_Component\n         (Obj_Id  : Entity_Id;\n@@ -531,7 +531,7 @@ package body Exp_Attr is\n       is\n          Field_Id  : constant Entity_Id := Defining_Entity (Field);\n          Field_Nam : constant Name_Id   := Chars (Field_Id);\n-         Field_Typ : constant Entity_Id := Validated_View (Etype (Field_Id));\n+         Field_Typ : constant Entity_Id := Get_Fullest_View (Etype (Field_Id));\n          Attr_Nam  : Name_Id;\n \n       begin\n@@ -733,7 +733,7 @@ package body Exp_Attr is\n    --  Start of processing for Build_Record_VS_Func\n \n    begin\n-      Typ := Rec_Typ;\n+      Typ := Validated_View (Rec_Typ);\n \n       --  Use the root type when dealing with a class-wide type\n \n@@ -7329,7 +7329,7 @@ package body Exp_Attr is\n          --  of the size of the type, not the range of the values). We write\n          --  this as two tests, rather than a range check, so that static\n          --  evaluation will easily remove either or both of the checks if\n-         --  they can be -statically determined to be true (this happens\n+         --  they can be statically determined to be true (this happens\n          --  when the type of X is static and the range extends to the full\n          --  range of stored values).\n \n@@ -7350,12 +7350,39 @@ package body Exp_Attr is\n \n          else\n             declare\n-               Uns : constant Boolean\n-                       := Is_Unsigned_Type (Ptyp)\n-                            or else (Is_Private_Type (Ptyp)\n-                                      and then Is_Unsigned_Type (Btyp));\n+               Uns  : constant Boolean :=\n+                        Is_Unsigned_Type (Ptyp)\n+                          or else (Is_Private_Type (Ptyp)\n+                                    and then Is_Unsigned_Type (Btyp));\n+               Size : Uint;\n+               P    : Node_Id := Pref;\n+\n             begin\n-               PBtyp := Integer_Type_For (Esize (Ptyp), Uns);\n+               --  If the prefix has an entity, use the Esize from this entity\n+               --  to handle in a more user friendly way the case of objects\n+               --  or components with a large Size aspect: if a Size aspect is\n+               --  specified, we want to read a scalar value as large as the\n+               --  Size, unless the Size is larger than\n+               --  System_Max_Integer_Size.\n+\n+               if Nkind (P) = N_Selected_Component then\n+                  P := Selector_Name (P);\n+               end if;\n+\n+               if Nkind (P) in N_Has_Entity\n+                 and then Present (Entity (P))\n+                 and then Esize (Entity (P)) /= Uint_0\n+               then\n+                  if Esize (Entity (P)) <= System_Max_Integer_Size then\n+                     Size := Esize (Entity (P));\n+                  else\n+                     Size := UI_From_Int (System_Max_Integer_Size);\n+                  end if;\n+               else\n+                  Size := Esize (Ptyp);\n+               end if;\n+\n+               PBtyp := Small_Integer_Type_For (Size, Uns);\n                Rewrite (N, Make_Range_Test);\n             end;\n          end if;\n@@ -7385,7 +7412,7 @@ package body Exp_Attr is\n       -------------------\n \n       when Attribute_Valid_Scalars => Valid_Scalars : declare\n-         Val_Typ : constant Entity_Id := Validated_View (Ptyp);\n+         Val_Typ : constant Entity_Id := Get_Fullest_View (Ptyp);\n          Expr    : Node_Id;\n \n       begin"}, {"sha": "96f6f810e85015a75e4ac82e2ccc7a126086bfda", "filename": "gcc/ada/libgnat/i-cobol.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Flibgnat%2Fi-cobol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Flibgnat%2Fi-cobol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cobol.adb?ref=ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "patch": "@@ -692,7 +692,7 @@ package body Interfaces.COBOL is\n             --  For signed, accept all standard and non-standard signs\n \n             else\n-               return Item (Item'Last) in 16#A# .. 16#F#;\n+               return Item (Item'Last) >= 16#A#;\n             end if;\n       end case;\n    end Valid_Packed;"}, {"sha": "e3ac718fedf6d669544d54cf5b3139be2e1d3b40", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ce32ccfc25a1b12ff9f42b1d9b6150ea128a26ec", "patch": "@@ -2900,6 +2900,32 @@ package body Sem_Util is\n    -----------------------------------\n \n    function Cannot_Raise_Constraint_Error (Expr : Node_Id) return Boolean is\n+\n+      function List_Cannot_Raise_CE (L : List_Id) return Boolean;\n+      --  Returns True if none of the list members cannot possibly raise\n+      --  Constraint_Error.\n+\n+      --------------------------\n+      -- List_Cannot_Raise_CE --\n+      --------------------------\n+\n+      function List_Cannot_Raise_CE (L : List_Id) return Boolean is\n+         N : Node_Id;\n+      begin\n+         N := First (L);\n+         while Present (N) loop\n+            if Cannot_Raise_Constraint_Error (N) then\n+               Next (N);\n+            else\n+               return False;\n+            end if;\n+         end loop;\n+\n+         return True;\n+      end List_Cannot_Raise_CE;\n+\n+   --  Start of processing for Cannot_Raise_Constraint_Error\n+\n    begin\n       if Compile_Time_Known_Value (Expr) then\n          return True;\n@@ -2918,8 +2944,14 @@ package body Sem_Util is\n             when N_Expanded_Name =>\n                return True;\n \n+            when N_Indexed_Component =>\n+               return not Do_Range_Check (Expr)\n+                 and then Cannot_Raise_Constraint_Error (Prefix (Expr))\n+                 and then List_Cannot_Raise_CE (Expressions (Expr));\n+\n             when N_Selected_Component =>\n-               return not Do_Discriminant_Check (Expr);\n+               return not Do_Discriminant_Check (Expr)\n+                 and then Cannot_Raise_Constraint_Error (Prefix (Expr));\n \n             when N_Attribute_Reference =>\n                if Do_Overflow_Check (Expr) then\n@@ -2929,21 +2961,7 @@ package body Sem_Util is\n                   return True;\n \n                else\n-                  declare\n-                     N : Node_Id;\n-\n-                  begin\n-                     N := First (Expressions (Expr));\n-                     while Present (N) loop\n-                        if Cannot_Raise_Constraint_Error (N) then\n-                           Next (N);\n-                        else\n-                           return False;\n-                        end if;\n-                     end loop;\n-\n-                     return True;\n-                  end;\n+                  return List_Cannot_Raise_CE (Expressions (Expr));\n                end if;\n \n             when N_Type_Conversion =>"}]}