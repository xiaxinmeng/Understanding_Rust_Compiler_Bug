{"sha": "67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlNmJhNDZhNDIxNWFiODVjMmZhOGFlMDkyMjc0MGY3MWZhNDdiNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2007-07-04T15:05:26Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2007-07-04T15:05:26Z"}, "message": "target.h (struct gcc_target): Add target_help field.\n\n* target.h (struct gcc_target): Add target_help field.\n* target-def.h (TARGET_HELP): New.\n  (TARGET_INITIALIZER): Use TARGET_HELP.\n* opts.c (command_handle_option): Invoke target_help function, if defined, when the \n  user has specified --target-help on the command line.\n* doc/invoke.texi: Mention that --target-help might print additional information.\n* doc/tm.texi: Document TARGET_HELP hook.\n\n* arm.c (TARGET_HELP): Override default definition.\n  (arm_target_help): New - display a wrapped list of cores and architectures supported.\n\nFrom-SVN: r126323", "tree": {"sha": "130ff355eaa28d20f9252f17820bbf64de1c44c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130ff355eaa28d20f9252f17820bbf64de1c44c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fda41d93b807f02db14dd054e6daa4d639233445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda41d93b807f02db14dd054e6daa4d639233445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda41d93b807f02db14dd054e6daa4d639233445"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "cb8bc9519fd1dbb9a32373798ed1cbd7558e5fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -1,3 +1,19 @@\n+2007-07-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* target.h (struct gcc_target): Add target_help field.\n+\t* target-def.h (TARGET_HELP): New.\n+\t(TARGET_INITIALIZER): Use TARGET_HELP.\n+\t* opts.c (command_handle_option): Invoke target_help function, if\n+\tdefined, when the user has specified --target-help on the command\n+\tline.\n+\t* doc/invoke.texi: Mention that --target-help might print\n+\tadditional information.\n+\t* doc/tm.texi: Document TARGET_HELP hook.\n+\n+\t* arm.c (TARGET_HELP): Override default definition.\n+\t(arm_target_help): New - display a wrapped list of cores and\n+\tarchitectures supported.\n+\n 2007-07-04  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* config/gcc/v850/v850.c (expand_prologue): Make sure"}, {"sha": "216925688494ab61524a344b5cb0d2919dd67fb3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -193,6 +193,7 @@ static bool arm_cxx_class_data_always_comdat (void);\n static bool arm_cxx_use_aeabi_atexit (void);\n static void arm_init_libfuncs (void);\n static bool arm_handle_option (size_t, const char *, int);\n+static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n static bool arm_cannot_copy_insn_p (rtx);\n static bool arm_tls_symbol_p (rtx x);\n@@ -243,6 +244,8 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION arm_handle_option\n+#undef  TARGET_HELP\n+#define TARGET_HELP arm_target_help\n \n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n@@ -930,6 +933,92 @@ arm_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n+static void\n+arm_target_help (void)\n+{\n+  int i;\n+  static int columns = 0;\n+  int remaining;\n+\n+  /* If we have not done so already, obtain the desired maximum width of\n+     the output.  Note - this is a duplication of the code at the start of\n+     gcc/opts.c:print_specific_help() - the two copies should probably be\n+     replaced by a single function.  */\n+  if (columns == 0)\n+    {\n+      const char *p;\n+\n+      GET_ENVIRONMENT (p, \"COLUMNS\");\n+      if (p != NULL)\n+\t{\n+\t  int value = atoi (p);\n+\n+\t  if (value > 0)\n+\t    columns = value;\n+\t}\n+\n+      if (columns == 0)\n+\t/* Use a reasonable default.  */\n+\tcolumns = 80;\n+    }\n+\n+  printf (\"  Known ARM CPUs (for use with the -mcpu= and -mtune= options):\\n\");\n+\n+  /* The - 2 is because we know that the last entry in the array is NULL.  */\n+  i = ARRAY_SIZE (all_cores) - 2;\n+  gcc_assert (i > 0);\n+  printf (\"    %s\", all_cores[i].name);\n+  remaining = columns - (strlen (all_cores[i].name) + 4);\n+  gcc_assert (remaining >= 0);\n+\n+  while (i--)\n+    {\n+      int len = strlen (all_cores[i].name);\n+\n+      if (remaining > len + 2)\n+\t{\n+\t  printf (\", %s\", all_cores[i].name);\n+\t  remaining -= len + 2;\n+\t}\n+      else\n+\t{\n+\t  if (remaining > 0)\n+\t    printf (\",\");\n+\t  printf (\"\\n    %s\", all_cores[i].name);\n+\t  remaining = columns - (len + 4);\n+\t}\n+    }\n+\n+  printf (\"\\n\\n  Known ARM architectures (for use with the -march= option):\\n\");\n+\n+  i = ARRAY_SIZE (all_architectures) - 2;\n+  gcc_assert (i > 0);\n+  \n+  printf (\"    %s\", all_architectures[i].name);\n+  remaining = columns - (strlen (all_architectures[i].name) + 4);\n+  gcc_assert (remaining >= 0);\n+\n+  while (i--)\n+    {\n+      int len = strlen (all_architectures[i].name);\n+\n+      if (remaining > len + 2)\n+\t{\n+\t  printf (\", %s\", all_architectures[i].name);\n+\t  remaining -= len + 2;\n+\t}\n+      else\n+\t{\n+\t  if (remaining > 0)\n+\t    printf (\",\");\n+\t  printf (\"\\n    %s\", all_architectures[i].name);\n+\t  remaining = columns - (len + 4);\n+\t}\n+    }\n+  printf (\"\\n\");\n+\n+}\n+\n /* Fix up any incompatible options that the user has specified.\n    This has now turned into a maze.  */\n void"}, {"sha": "b1bbcf0bb02fd23f0028eecbd67e0d8ab0018d47", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -1106,7 +1106,8 @@ have no documentation associated with them will also be displayed.\n @item --target-help\n @opindex target-help\n Print (on the standard output) a description of target-specific command\n-line options for each tool.\n+line options for each tool.  For some targets extra target-specific\n+information may also be printed.\n \n @item --help=@var{class}@r{[},@var{qualifier}@r{]}\n Print (on the standard output) a description of the command line"}, {"sha": "ceeec1150085d37d1a3341f3bc0a1515162d6583", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -842,6 +842,13 @@ this macro!} The debugging options are not supposed to alter the\n generated code.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_HELP (void)\n+This hook is called in response to the user invoking\n+@option{--target-help} on the command line.  It gives the target a\n+chance to display extra information on the target specific command\n+line options found in its @file{.opt} file.\n+@end deftypefn\n+\n @defmac CAN_DEBUG_WITHOUT_FP\n Define this macro if debugging can be performed even without a frame\n pointer.  If this macro is defined, GCC will turn on the"}, {"sha": "97bcb9f998a068e2ebaef7407e2f91d09052d3a6", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -1229,6 +1229,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT__target_help:\n       print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0);\n       exit_after_options = true;\n+\n+      /* Allow the target a chance to give the user some additional information.  */\n+      if (targetm.target_help)\n+\ttargetm.target_help ();\n       break;\n \n     case OPT_fhelp_:"}, {"sha": "48e1c1ab9198b06d1befeabee5029d531417bdb7", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -369,6 +369,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_DEFAULT_TARGET_FLAGS 0\n \n #define TARGET_HANDLE_OPTION hook_bool_size_t_constcharptr_int_true\n+#define TARGET_HELP NULL\n \n /* In except.c */\n #define TARGET_EH_RETURN_FILTER_MODE  default_eh_return_filter_mode\n@@ -666,6 +667,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_VECTORIZE,\t\t\t\t\\\n   TARGET_DEFAULT_TARGET_FLAGS,\t\t\t\\\n   TARGET_HANDLE_OPTION,\t\t\t\t\\\n+  TARGET_HELP,\t\t\t\t\t\\\t\t       \n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\"}, {"sha": "4e84e5ab22902ce2277e3cce31867c1d2f9e9b2e", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6ba46a4215ab85c2fa8ae0922740f71fa47b5/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=67e6ba46a4215ab85c2fa8ae0922740f71fa47b5", "patch": "@@ -425,6 +425,10 @@ struct gcc_target\n      form was.  Return true if the switch was valid.  */\n   bool (* handle_option) (size_t code, const char *arg, int value);\n \n+  /* Display extra, target specific information in response to a\n+     --target-help switch.  */\n+  void (* target_help) (void);\n+\n   /* Return machine mode for filter value.  */\n   enum machine_mode (* eh_return_filter_mode) (void);\n "}]}