{"sha": "ad076f4e6d18d6c69f538f064c852ab043523204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwNzZmNGU2ZDE4ZDZjNjlmNTM4ZjA2NGM4NTJhYjA0MzUyMzIwNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1998-05-26T09:30:56Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1998-05-26T09:30:56Z"}, "message": "arm.c: Include toplev.h.\n\n* arm.c: Include toplev.h.\n(arm_override_options): Add parentheses around use of tune_flags.\n(arm_split_constant): Remove unused variable.\n(arm_gen_constant, arm_gen_movstrqi, add_constant): Likewise.\n(output_func_prologue, arm_expand_prologue): Likewise.\n(arm_canonicalize_comparison): Make I unsigned; rework constants\naccordignly.  Add missing paratheses around << operation.\n(arm_rtx_costs): Correctly parenthesise MULT costs.  Add a DEFAULT\nclause.\n({load,store}_multiple_sequence): Initialize BASE_REG.\n(select_dominance_cc_mode): Add DEFAULT clauses.\n(broken_move): Return zero if the destination is not a register.\n(arm_reorg): Move unused REGNO declaration into the dead code.\n* arm.h (CANONICALIZE_COMPARISON): Ensure OP1 is updated.\n\nFrom-SVN: r20058", "tree": {"sha": "965ef413b6133eb1e1a3d64ae271e12ba54359fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965ef413b6133eb1e1a3d64ae271e12ba54359fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad076f4e6d18d6c69f538f064c852ab043523204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad076f4e6d18d6c69f538f064c852ab043523204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad076f4e6d18d6c69f538f064c852ab043523204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad076f4e6d18d6c69f538f064c852ab043523204/comments", "author": null, "committer": null, "parents": [{"sha": "4d818c85402bcd853c5bda92dfec234267dca3ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d818c85402bcd853c5bda92dfec234267dca3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d818c85402bcd853c5bda92dfec234267dca3ba"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "cf3ba23ae09c2a942ea851e339d03fb66cfe6aa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad076f4e6d18d6c69f538f064c852ab043523204", "patch": "@@ -6,6 +6,21 @@ Tue May 26 07:31:04 1998  Richard Earnshaw (rearnsha@arm.com)\n \tcan't handle.\n \t(define_split): Two new splits for above insns.\n \n+\t* arm.c: Include toplev.h.\n+\t(arm_override_options): Add parentheses around use of tune_flags.\n+\t(arm_split_constant): Remove unused variable.\n+\t(arm_gen_constant, arm_gen_movstrqi, add_constant): Likewise.\n+\t(output_func_prologue, arm_expand_prologue): Likewise.\n+\t(arm_canonicalize_comparison): Make I unsigned; rework constants\n+\taccordignly.  Add missing paratheses around << operation.\n+\t(arm_rtx_costs): Correctly parenthesise MULT costs.  Add a DEFAULT\n+\tclause.\n+\t({load,store}_multiple_sequence): Initialize BASE_REG.\n+\t(select_dominance_cc_mode): Add DEFAULT clauses.\n+\t(broken_move): Return zero if the destination is not a register.\n+\t(arm_reorg): Move unused REGNO declaration into the dead code.\n+\t* arm.h (CANONICALIZE_COMPARISON): Ensure OP1 is updated.\n+\n Mon May 25 22:49:56 PDT 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "9f20b137f7d845e0fcd358fe5c21c788fb44919c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ad076f4e6d18d6c69f538f064c852ab043523204", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"tree.h\"\n #include \"expr.h\"\n+#include \"toplev.h\"\n \n /* The maximum number of insns skipped which will be conditionalised if\n    possible.  */\n@@ -328,7 +329,7 @@ arm_override_options ()\n      assume the user has an FPA.\n      Note: this does not prevent use of floating point instructions,\n      -msoft-float does that.  */\n-  if (tune_flags & FL_CO_PROC == 0)\n+  if ((tune_flags & FL_CO_PROC) == 0)\n     arm_fpu = FP_SOFT3;\n \n   arm_fast_multiply = (flags & FL_FAST_MULT) != 0;\n@@ -481,8 +482,6 @@ arm_split_constant (code, mode, val, target, source, subtargets)\n       || (GET_CODE (target) == REG && GET_CODE (source) == REG\n \t  && REGNO (target) != REGNO (source)))\n     {\n-      rtx temp;\n-\n       if (arm_gen_constant (code, mode, val, target, source, 1, 0)\n \t  > arm_constant_limit + (code != SET))\n \t{\n@@ -526,7 +525,6 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n      int subtargets;\n      int generate;\n {\n-  int can_add = 0;\n   int can_invert = 0;\n   int can_negate = 0;\n   int can_negate_initial = 0;\n@@ -1059,7 +1057,7 @@ arm_canonicalize_comparison (code, op1)\n      enum rtx_code code;\n      rtx *op1;\n {\n-  HOST_WIDE_INT i = INTVAL (*op1);\n+  unsigned HOST_WIDE_INT i = INTVAL (*op1);\n \n   switch (code)\n     {\n@@ -1069,7 +1067,8 @@ arm_canonicalize_comparison (code, op1)\n \n     case GT:\n     case LE:\n-      if (i != (1 << (HOST_BITS_PER_WIDE_INT - 1) - 1)\n+      if (i != ((((unsigned HOST_WIDE_INT) 1) << (HOST_BITS_PER_WIDE_INT - 1))\n+\t\t- 1)\n \t  && (const_ok_for_arm (i+1) || const_ok_for_arm (- (i+1))))\n \t{\n \t  *op1 = GEN_INT (i+1);\n@@ -1079,7 +1078,7 @@ arm_canonicalize_comparison (code, op1)\n \n     case GE:\n     case LT:\n-      if (i != (1 << (HOST_BITS_PER_WIDE_INT - 1))\n+      if (i != (((unsigned HOST_WIDE_INT) 1) << (HOST_BITS_PER_WIDE_INT - 1))\n \t  && (const_ok_for_arm (i-1) || const_ok_for_arm (- (i-1))))\n \t{\n \t  *op1 = GEN_INT (i-1);\n@@ -1089,7 +1088,7 @@ arm_canonicalize_comparison (code, op1)\n \n     case GTU:\n     case LEU:\n-      if (i != ~0\n+      if (i != ~((unsigned HOST_WIDE_INT) 0)\n \t  && (const_ok_for_arm (i+1) || const_ok_for_arm (- (i+1))))\n \t{\n \t  *op1 = GEN_INT (i + 1);\n@@ -1467,10 +1466,10 @@ arm_rtx_costs (x, code, outer_code)\n \t\t     || (subcode == MULT\n \t\t\t && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n \t\t\t && ((INTVAL (XEXP (XEXP (x, 0), 1)) &\n-\t\t\t      (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0))\n+\t\t\t      (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0)))\n \t\t    && (REG_OR_SUBREG_REG (XEXP (XEXP (x, 0), 0)))\n \t\t    && ((REG_OR_SUBREG_REG (XEXP (XEXP (x, 0), 1)))\n-\t\t\t|| GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)))\n+\t\t\t|| GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT))\n \t\t   ? 0 : 4));\n \n       return 8;\n@@ -1560,6 +1559,9 @@ arm_rtx_costs (x, code, outer_code)\n \n \tcase SImode:\n \t  return (1 + (GET_CODE (XEXP (x, 0)) == MEM ? 10 : 0));\n+\n+\tdefault:\n+\t  break;\n \t}\n       abort ();\n \n@@ -2382,7 +2384,7 @@ load_multiple_sequence (operands, nops, regs, base, load_offset)\n   int unsorted_regs[4];\n   HOST_WIDE_INT unsorted_offsets[4];\n   int order[4];\n-  int base_reg;\n+  int base_reg = -1;\n   int i;\n \n   /* Can only handle 2, 3, or 4 insns at present, though could be easily\n@@ -2585,7 +2587,7 @@ store_multiple_sequence (operands, nops, regs, base, load_offset)\n   int unsorted_regs[4];\n   HOST_WIDE_INT unsorted_offsets[4];\n   int order[4];\n-  int base_reg;\n+  int base_reg = -1;\n   int i;\n \n   /* Can only handle 2, 3, or 4 insns at present, though could be easily\n@@ -2907,9 +2909,9 @@ arm_gen_movstrqi (operands)\n      rtx *operands;\n {\n   HOST_WIDE_INT in_words_to_go, out_words_to_go, last_bytes;\n-  int i, r;\n+  int i;\n   rtx src, dst;\n-  rtx st_src, st_dst, end_src, end_dst, fin_src, fin_dst;\n+  rtx st_src, st_dst, fin_src, fin_dst;\n   rtx part_bytes_reg = NULL;\n   rtx mem;\n   int dst_unchanging_p, dst_in_struct_p, src_unchanging_p, src_in_struct_p;\n@@ -3139,6 +3141,7 @@ select_dominance_cc_mode (op, x, y, cond_or)\n \tcase LEU: return CC_DLEUmode;\n \tcase GE: return CC_DGEmode;\n \tcase GEU: return CC_DGEUmode;\n+\tdefault: break;\n \t}\n \n       break;\n@@ -3195,6 +3198,9 @@ select_dominance_cc_mode (op, x, y, cond_or)\n \n     case GEU:\n       return CC_DGEUmode;\n+\n+    default:\n+      break;\n     }\n \n   abort ();\n@@ -3439,7 +3445,6 @@ add_constant (x, mode)\n      enum machine_mode mode;\n {\n   int i;\n-  rtx lab;\n   HOST_WIDE_INT offset;\n \n   if (mode == SImode && GET_CODE (x) == MEM && CONSTANT_P (XEXP (x, 0))\n@@ -3625,13 +3630,16 @@ broken_move (insn)\n       rtx dst = SET_DEST (pat);\n       int destreg;\n       enum machine_mode mode = GET_MODE (dst);\n+\n       if (dst == pc_rtx)\n \treturn 0;\n \n       if (GET_CODE (dst) == REG)\n \tdestreg = REGNO (dst);\n       else if (GET_CODE (dst) == SUBREG && GET_CODE (SUBREG_REG (dst)) == REG)\n \tdestreg = REGNO (SUBREG_REG (dst));\n+      else\n+\treturn 0;\n \n       return fixit (src, mode, destreg);\n     }\n@@ -3644,7 +3652,6 @@ arm_reorg (first)\n {\n   rtx insn;\n   int count_size;\n-  int regno;\n \n #if 0\n   /* The ldr instruction can work with up to a 4k offset, and most constants\n@@ -3659,12 +3666,16 @@ arm_reorg (first)\n      PC, so to make things simple we restrict all loads for such functions.\n      */\n   if (TARGET_HARD_FLOAT)\n-    for (regno = 16; regno < 24; regno++)\n-      if (regs_ever_live[regno])\n-\t{\n-\t  count_size = 1000;\n-\t  break;\n-\t}\n+    {\n+      int regno;\n+\n+      for (regno = 16; regno < 24; regno++)\n+\tif (regs_ever_live[regno])\n+\t  {\n+\t    count_size = 1000;\n+\t    break;\n+\t  }\n+    }\n #else\n   count_size = 1000;\n #endif /* 0 */\n@@ -4803,7 +4814,6 @@ output_func_prologue (f, frame_size)\n      int frame_size;\n {\n   int reg, live_regs_mask = 0;\n-  rtx operands[3];\n   int volatile_func = (optimize > 0\n \t\t       && TREE_THIS_VOLATILE (current_function_decl));\n \n@@ -5153,8 +5163,6 @@ arm_expand_prologue ()\n   int reg;\n   rtx amount = GEN_INT (-(get_frame_size ()\n \t\t\t  + current_function_outgoing_args_size));\n-  rtx push_insn;\n-  int num_regs;\n   int live_regs_mask = 0;\n   int store_arg_regs = 0;\n   int volatile_func = (optimize > 0"}, {"sha": "4aeca61d05840df6123c8213742db2619f2a27b0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad076f4e6d18d6c69f538f064c852ab043523204/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ad076f4e6d18d6c69f538f064c852ab043523204", "patch": "@@ -1759,6 +1759,7 @@ do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       rtx const_op = OP1;\t\t\t\t\t\\\n       CODE = arm_canonicalize_comparison ((CODE), &const_op);\t\\\n+      OP1 = const_op;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n } while (0)\n "}]}