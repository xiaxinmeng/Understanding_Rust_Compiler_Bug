{"sha": "a1e42094e7ac684e556e3a1246516bce5ed5ecee", "node_id": "C_kwDOANBUbNoAKGExZTQyMDk0ZTdhYzY4NGU1NTZlM2ExMjQ2NTE2YmNlNWVkNWVjZWU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:14:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:41Z"}, "message": "RISC-V: Add integer widening instructions\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class widen_binop): New\n\tclass.\n\t(class vwmulsu): Ditto.\n\t(class vwcvt): Ditto.\n\t(BASE): Add integer widening support.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto\n\t* config/riscv/riscv-vector-builtins-functions.def (vwadd): New class.\n\t(vwsub): New class.\n\t(vwmul): New class.\n\t(vwmulu): New class.\n\t(vwmulsu): New class.\n\t(vwaddu): New class.\n\t(vwsubu): New class.\n\t(vwcvt_x): New class.\n\t(vwcvtu_x): New class.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct alu_def): New\n\tclass.\n\t(struct widen_alu_def): New class.\n\t(SHAPE): New class.\n\t* config/riscv/riscv-vector-builtins-shapes.h: New class.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(rvv_arg_type_info::get_base_vector_type): Add integer widening support.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t* config/riscv/riscv-vector-builtins.def (x_x_v): Change into \"x_v\"\n\t(x_v): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Add integer\n\twidening support.\n\t* config/riscv/riscv-vsetvl.cc (change_insn): Fix reg_equal use bug.\n\t* config/riscv/riscv.h (X0_REGNUM): New constant.\n\t* config/riscv/vector-iterators.md: New iterators.\n\t* config/riscv/vector.md\n\t(@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>): New\n\tpattern.\n\t(@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>_scalar):\n\tDitto.\n\t(@pred_single_widen_<plus_minus:optab><any_extend:su><mode>): Ditto.\n\t(@pred_single_widen_<plus_minus:optab><any_extend:su><mode>_scalar):\n\tDitto.\n\t(@pred_widen_mulsu<mode>): Ditto.\n\t(@pred_widen_mulsu<mode>_scalar): Ditto.\n\t(@pred_<optab><mode>): Ditto.", "tree": {"sha": "a789c8b1c488edc809c1d46633f4a3f347f0b7d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a789c8b1c488edc809c1d46633f4a3f347f0b7d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e42094e7ac684e556e3a1246516bce5ed5ecee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e42094e7ac684e556e3a1246516bce5ed5ecee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e42094e7ac684e556e3a1246516bce5ed5ecee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e42094e7ac684e556e3a1246516bce5ed5ecee/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88110b07e73f9065a2e1d7b1ef306f628e65405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88110b07e73f9065a2e1d7b1ef306f628e65405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88110b07e73f9065a2e1d7b1ef306f628e65405"}], "stats": {"total": 552, "additions": 539, "deletions": 13}, "files": [{"sha": "e14a1854eeea104c1c48c1570632c4ff0de526a4", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -239,6 +239,63 @@ class vmulh : public function_base\n   }\n };\n \n+/* Implements vwadd/vwsub/vwmul.  */\n+template<rtx_code CODE1, rtx_code CODE2>\n+class widen_binop : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_dual_widen (CODE1, CODE2, e.vector_mode ()));\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_dual_widen_scalar (CODE1, CODE2, e.vector_mode ()));\n+      case OP_TYPE_wv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_single_widen (CODE1, CODE2, e.vector_mode ()));\n+      case OP_TYPE_wx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_single_widen_scalar (CODE1, CODE2, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vwmulsu.  */\n+class vwmulsu : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (code_for_pred_widen_mulsu (e.vector_mode ()));\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_widen_mulsu_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vwcvt.  */\n+template<rtx_code CODE>\n+class vwcvt : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -288,6 +345,15 @@ static CONSTEXPR const unop<NEG> vneg_obj;\n static CONSTEXPR const unop<NOT> vnot_obj;\n static CONSTEXPR const ext<SIGN_EXTEND> vsext_obj;\n static CONSTEXPR const ext<ZERO_EXTEND> vzext_obj;\n+static CONSTEXPR const widen_binop<PLUS, SIGN_EXTEND>vwadd_obj;\n+static CONSTEXPR const widen_binop<MINUS, SIGN_EXTEND>vwsub_obj;\n+static CONSTEXPR const widen_binop<MULT, SIGN_EXTEND>vwmul_obj;\n+static CONSTEXPR const widen_binop<PLUS, ZERO_EXTEND>vwaddu_obj;\n+static CONSTEXPR const widen_binop<MINUS, ZERO_EXTEND>vwsubu_obj;\n+static CONSTEXPR const widen_binop<MULT, ZERO_EXTEND>vwmulu_obj;\n+static CONSTEXPR const vwmulsu vwmulsu_obj;\n+static CONSTEXPR const vwcvt<SIGN_EXTEND> vwcvt_x_obj;\n+static CONSTEXPR const vwcvt<ZERO_EXTEND> vwcvtu_x_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -347,6 +413,15 @@ BASE (vneg)\n BASE (vnot)\n BASE (vsext)\n BASE (vzext)\n+BASE (vwadd)\n+BASE (vwsub)\n+BASE (vwmul)\n+BASE (vwaddu)\n+BASE (vwsubu)\n+BASE (vwmulu)\n+BASE (vwmulsu)\n+BASE (vwcvt_x)\n+BASE (vwcvtu_x)\n BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)"}, {"sha": "51ec940a5aa352b3d95edcf3d794f901e468a494", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -73,10 +73,20 @@ extern const function_base *const vneg;\n extern const function_base *const vnot;\n extern const function_base *const vsext;\n extern const function_base *const vzext;\n+extern const function_base *const vwadd;\n+extern const function_base *const vwsub;\n+extern const function_base *const vwmul;\n+extern const function_base *const vwaddu;\n+extern const function_base *const vwsubu;\n+extern const function_base *const vwmulu;\n+extern const function_base *const vwmulsu;\n+extern const function_base *const vwcvt_x;\n+extern const function_base *const vwcvtu_x;\n extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;\n extern const function_base *const vssubu;\n+\n }\n \n } // end namespace riscv_vector"}, {"sha": "e53fcb5546b37152a559f01d440f98a303f2454a", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -112,6 +112,30 @@ DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf8_ops)\n DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf2_ops)\n DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf4_ops)\n DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf8_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wvv_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wvv_ops)\n+DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvv_ops)\n+DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvv_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wvx_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wvx_ops)\n+DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvx_ops)\n+DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvx_ops)\n+DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvx_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wvx_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wvx_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wwv_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wwv_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwv_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwv_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wwx_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wwx_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwx_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwx_ops)\n+DEF_RVV_FUNCTION (vwcvt_x, alu, full_preds, i_x_x_v_ops)\n+DEF_RVV_FUNCTION (vwcvtu_x, alu, full_preds, u_x_x_v_ops)\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)"}, {"sha": "62170f607bae56e33ddd0767647b0a7533aed2c5", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -197,7 +197,8 @@ struct alu_def : public build_base\n        API doesn't have OP suffix in overloaded function name, otherwise, we\n        always append OP suffix in function name. For example, vsext_vf2.  */\n     if (instance.op_info->op == OP_TYPE_vv || instance.op_info->op == OP_TYPE_vx\n-\t|| instance.op_info->op == OP_TYPE_v)\n+\t|| instance.op_info->op == OP_TYPE_v\n+\t|| instance.op_info->op == OP_TYPE_x_v)\n       {\n \tif (!overloaded_p)\n \t  b.append_name (operand_suffixes[instance.op_info->op]);\n@@ -218,10 +219,37 @@ struct alu_def : public build_base\n   }\n };\n \n+/* widen_alu_def class. Handle vwadd/vwsub. Unlike\n+   vadd.vx/vadd.vv/vwmul.vv/vwmul.vx, vwadd.vv/vwadd.vx/vwadd.wv/vwadd.wx has\n+   'OP' suffix in overloaded API.  */\n+struct widen_alu_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    /* vop<sew> --> vop<sew>_<op>.  */\n+    b.append_name (operand_suffixes[instance.op_info->op]);\n+\n+    /* vop<sew>_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      b.append_name (type_suffixes[instance.type.index].vector);\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n SHAPE(indexed_loadstore, indexed_loadstore)\n SHAPE(alu, alu)\n+SHAPE(widen_alu, widen_alu)\n \n } // end namespace riscv_vector"}, {"sha": "af5474ab36e8d90501b6e70ac1555694ccdb2920", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -29,6 +29,7 @@ extern const function_shape *const vsetvlmax;\n extern const function_shape *const loadstore;\n extern const function_shape *const indexed_loadstore;\n extern const function_shape *const alu;\n+extern const function_shape *const widen_alu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "fea2f801028eba815468810d6c30699c40f157c7", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -341,6 +341,43 @@ static CONSTEXPR const rvv_arg_type_info vector_size_args[]\n static CONSTEXPR const rvv_arg_type_info vf2_args[]\n   = {rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (double demote type, double demote type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info wvv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (signed double demote type,\n+ * unsigneddouble demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info su_wvv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_unsigned_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (double demote type, double demote type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info wvx_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_scalar), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (signed double demote type, unsigned\n+ * double demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info su_wvx_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_unsigned_scalar),\n+     rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (double demote type, double demote type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info wwv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (double demote type, double demote type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info wwx_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_scalar), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (quad demote type) function.  */\n static CONSTEXPR const rvv_arg_type_info vf4_args[]\n   = {rvv_arg_type_info (RVV_BASE_quad_trunc_vector), rvv_arg_type_info_end};\n@@ -349,6 +386,10 @@ static CONSTEXPR const rvv_arg_type_info vf4_args[]\n static CONSTEXPR const rvv_arg_type_info vf8_args[]\n   = {rvv_arg_type_info (RVV_BASE_oct_trunc_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (double demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info x_x_v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -658,6 +699,102 @@ static CONSTEXPR const rvv_op_info u_vf8_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vf8_args /* Args */};\n \n+/* A static operand information for vector_type func (double demote type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info i_wvv_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvv_args /* Args */};\n+\n+/* A static operand information for vector_type func (signed double demote type,\n+ * unsigned double demote type) function registration. */\n+static CONSTEXPR const rvv_op_info i_su_wvv_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     su_wvv_args /* Args */};\n+\n+/* A static operand information for vector_type func (double demote type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info u_wvv_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvv_args /* Args */};\n+\n+/* A static operand information for vector_type func (double demote type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info i_wvx_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvx_args /* Args */};\n+\n+/* A static operand information for vector_type func (signed double demote type,\n+ * unsigned double demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info i_su_wvx_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     su_wvx_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info i_wwv_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info i_wwx_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwx_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, double\n+ * demote type) function registration. */\n+static CONSTEXPR const rvv_op_info u_wwv_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wv,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info u_wwx_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_wx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wwx_args /* Args */};\n+\n+/* A static operand information for vector_type func (double demote type, double\n+ * demote scalar_type) function registration. */\n+static CONSTEXPR const rvv_op_info u_wvx_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     wvx_args /* Args */};\n+\n+/* A static operand information for vector_type func (double demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_x_x_v_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_x_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     x_x_v_args /* Args */};\n+\n+/* A static operand information for vector_type func (unsigned double demote\n+ * type) function registration. */\n+static CONSTEXPR const rvv_op_info u_x_x_v_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_x_v,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     x_x_v_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -944,6 +1081,9 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n   poly_int64 nunits = GET_MODE_NUNITS (TYPE_MODE (type));\n   machine_mode inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n   bool unsigned_p = TYPE_UNSIGNED (type);\n+  if (base_type == RVV_BASE_double_trunc_unsigned_vector\n+      || base_type == RVV_BASE_double_trunc_unsigned_scalar)\n+    unsigned_p = true;\n   switch (base_type)\n     {\n     case RVV_BASE_uint8_index:\n@@ -967,6 +1107,9 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n       unsigned_p = true;\n       break;\n     case RVV_BASE_double_trunc_vector:\n+    case RVV_BASE_double_trunc_scalar:\n+    case RVV_BASE_double_trunc_unsigned_vector:\n+    case RVV_BASE_double_trunc_unsigned_scalar:\n       if (inner_mode == DImode)\n \tinner_mode = SImode;\n       else if (inner_mode == SImode)\n@@ -1073,11 +1216,19 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_double_trunc_vector:\n     case RVV_BASE_quad_trunc_vector:\n     case RVV_BASE_oct_trunc_vector:\n+    case RVV_BASE_double_trunc_unsigned_vector:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type (\n \t\t\t       builtin_types[type_idx].vector)].vector;\n       break;\n+    case RVV_BASE_double_trunc_scalar:\n+    case RVV_BASE_double_trunc_unsigned_scalar:\n+      if (get_base_vector_type (builtin_types[type_idx].vector)\n+\t  != NUM_VECTOR_TYPES)\n+\treturn builtin_types[get_base_vector_type (\n+\t\t\t       builtin_types[type_idx].vector)].scalar;\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "9f4cd011404c363ffcd522da5f37d76370d11378", "filename": "gcc/config/riscv/riscv-vector-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -273,7 +273,7 @@ DEF_RVV_OP_TYPE (vx)\n DEF_RVV_OP_TYPE (v)\n DEF_RVV_OP_TYPE (wv)\n DEF_RVV_OP_TYPE (wx)\n-DEF_RVV_OP_TYPE (x_x_v)\n+DEF_RVV_OP_TYPE (x_v)\n DEF_RVV_OP_TYPE (vf2)\n DEF_RVV_OP_TYPE (vf4)\n DEF_RVV_OP_TYPE (vf8)"}, {"sha": "d033a2ea83fb5d533a07ab6a0aabef352b7fad8d", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -158,6 +158,9 @@ enum rvv_base_type\n   RVV_BASE_double_trunc_vector,\n   RVV_BASE_quad_trunc_vector,\n   RVV_BASE_oct_trunc_vector,\n+  RVV_BASE_double_trunc_scalar,\n+  RVV_BASE_double_trunc_unsigned_vector,\n+  RVV_BASE_double_trunc_unsigned_scalar,\n   NUM_BASE_TYPES\n };\n "}, {"sha": "77c62e2d8f35592799bb5a5b0b9ad754f974ddb9", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -961,6 +961,46 @@ change_insn (function_info *ssa, insn_change change, insn_info *insn,\n   /* These routines report failures themselves.  */\n   if (!recog (attempt, change) || !change_is_worthwhile (change, false))\n     return false;\n+\n+  /* Fix bug:\n+      (insn 12 34 13 2 (set (reg:VNx8DI 120 v24 [orig:134 _1 ] [134])\n+\t(if_then_else:VNx8DI (unspec:VNx8BI [\n+\t\t    (const_vector:VNx8BI repeat [\n+\t\t\t    (const_int 1 [0x1])\n+\t\t\t])\n+\t\t    (const_int 0 [0])\n+\t\t    (const_int 2 [0x2]) repeated x2\n+\t\t    (const_int 0 [0])\n+\t\t    (reg:SI 66 vl)\n+\t\t    (reg:SI 67 vtype)\n+\t\t] UNSPEC_VPREDICATE)\n+\t    (plus:VNx8DI (reg/v:VNx8DI 104 v8 [orig:137 op1 ] [137])\n+\t\t(sign_extend:VNx8DI (vec_duplicate:VNx8SI (reg:SI 15 a5\n+    [140])))) (unspec:VNx8DI [ (const_int 0 [0]) ] UNSPEC_VUNDEF))) \"rvv.c\":8:12\n+    2784 {pred_single_widen_addsvnx8di_scalar} (expr_list:REG_EQUIV\n+    (mem/c:VNx8DI (reg:DI 10 a0 [142]) [1 <retval>+0 S[64, 64] A128])\n+\t(expr_list:REG_EQUAL (if_then_else:VNx8DI (unspec:VNx8BI [\n+\t\t\t(const_vector:VNx8BI repeat [\n+\t\t\t\t(const_int 1 [0x1])\n+\t\t\t    ])\n+\t\t\t(reg/v:DI 13 a3 [orig:139 vl ] [139])\n+\t\t\t(const_int 2 [0x2]) repeated x2\n+\t\t\t(const_int 0 [0])\n+\t\t\t(reg:SI 66 vl)\n+\t\t\t(reg:SI 67 vtype)\n+\t\t    ] UNSPEC_VPREDICATE)\n+\t\t(plus:VNx8DI (reg/v:VNx8DI 104 v8 [orig:137 op1 ] [137])\n+\t\t    (const_vector:VNx8DI repeat [\n+\t\t\t    (const_int 2730 [0xaaa])\n+\t\t\t]))\n+\t\t(unspec:VNx8DI [\n+\t\t\t(const_int 0 [0])\n+\t\t    ] UNSPEC_VUNDEF))\n+\t    (nil))))\n+    Here we want to remove use \"a3\". However, the REG_EQUAL/REG_EQUIV note use\n+    \"a3\" which made us fail in change_insn.  We reference to the\n+    'aarch64-cc-fusion.cc' and add this method.  */\n+  remove_reg_equal_equiv_notes (rinsn);\n   confirm_change_group ();\n   ssa->change_insn (change);\n "}, {"sha": "120faf17c06601cfb1588e581900942fe2ee9c16", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -645,9 +645,6 @@ enum reg_class\n #define FP_ARG_FIRST (FP_REG_FIRST + 10)\n #define FP_ARG_LAST  (FP_ARG_FIRST + MAX_ARGS_IN_REGISTERS - 1)\n \n-/* Helper macro for RVV vsetvl instruction generation.  */\n-#define X0_REGNUM GP_REG_FIRST\n-\n #define CALLEE_SAVED_REG_NUMBER(REGNO)\t\t\t\\\n   ((REGNO) >= 8 && (REGNO) <= 9 ? (REGNO) - 8 :\t\t\\\n    (REGNO) >= 18 && (REGNO) <= 27 ? (REGNO) - 16 : -1)"}, {"sha": "cef9832d583ba62a97a1b62f2efcde66a4e623df", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -280,6 +280,9 @@\n (define_code_iterator sat_int_plus_binop [ss_plus us_plus])\n (define_code_iterator sat_int_minus_binop [ss_minus us_minus])\n \n+(define_code_iterator any_widen_binop [plus minus mult])\n+(define_code_iterator plus_minus [plus minus])\n+\n (define_code_attr binop_rhs1_predicate [\n \t\t\t(plus \"register_operand\")\n \t\t\t(minus \"vector_arith_operand\")\n@@ -391,6 +394,11 @@\n \t\t\t(ss_minus \"vsalu\")\n \t\t\t(us_minus \"vsalu\")])\n \n+(define_code_attr widen_binop_insn_type [\n+\t\t\t(plus \"walu\")\n+\t\t\t(minus \"walu\")\n+\t\t\t(mult \"wmul\")])\n+\n ;; <binop_vi_variant_insn> expands to the insn name of binop matching constraint rhs1 is immediate.\n ;; minus is negated as vadd and ss_minus is negated as vsadd, others remain <insn>.\n (define_code_attr binop_vi_variant_insn [(ashift \"sll.vi\")"}, {"sha": "4ab6c28d167045274679c8a31dfaa9dbb9096263", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 197, "deletions": 8, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e42094e7ac684e556e3a1246516bce5ed5ecee/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=a1e42094e7ac684e556e3a1246516bce5ed5ecee", "patch": "@@ -30,6 +30,7 @@\n \n (define_constants [\n    (INVALID_ATTRIBUTE            255)\n+   (X0_REGNUM                      0)\n ])\n \n ;; True if the type is RVV instructions that include VTYPE\n@@ -142,7 +143,7 @@\n ;; It is valid for instruction that require sew/lmul ratio.\n (define_attr \"ratio\" \"\"\n   (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n-\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,vext\")\n+\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,viwmul\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -193,7 +194,7 @@\n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,\\\n-\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext\")\n+\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,viwmul\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -210,7 +211,8 @@\n              (const_int 5)\n              (const_int 4))\n \n-\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n+\t\t\t  viwalu,viwmul\")\n \t   (const_int 5)]\n   (const_int INVALID_ATTRIBUTE)))\n \n@@ -226,7 +228,8 @@\n \t     (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n+\t\t\t  viwalu,viwmul\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -242,7 +245,8 @@\n \t     (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n \t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n+\t\t\t  viwalu,viwmul\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -260,7 +264,8 @@\n \t     (const_int INVALID_ATTRIBUTE)\n \t     (symbol_ref \"INTVAL (operands[7])\"))\n \n-\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n+\t\t\t  viwalu,viwmul\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")]\n@@ -670,6 +675,26 @@\n ;;                (const_int:QI N)]), -15 <= N < 16.\n ;;    2. (const_vector:VNx1SF repeat [\n ;;                (const_double:SF 0.0 [0x0.0p+0])]).\n+\n+;; We add \"MEM_P (operands[0]) || MEM_P (operands[3]) || CONST_VECTOR_P (operands[1])\" here to\n+;; make sure we don't want CSE to generate the following pattern:\n+;; (insn 17 8 19 2 (set (reg:VNx1HI 134 [ _1 ])\n+;;       (if_then_else:VNx1HI (unspec:VNx1BI [\n+;;                   (reg/v:VNx1BI 137 [ mask ])\n+;;                   (reg:DI 151)\n+;;                   (const_int 0 [0]) repeated x3\n+;;                   (reg:SI 66 vl)\n+;;                   (reg:SI 67 vtype)\n+;;               ] UNSPEC_VPREDICATE)\n+;;           (const_vector:VNx1HI repeat [\n+;;                   (const_int 0 [0])\n+;;               ])\n+;;           (reg/v:VNx1HI 140 [ merge ]))) \"rvv.c\":8:12 608 {pred_movvnx1hi}\n+;;    (expr_list:REG_DEAD (reg:DI 151)\n+;;       (expr_list:REG_DEAD (reg/v:VNx1HI 140 [ merge ])\n+;;           (expr_list:REG_DEAD (reg/v:VNx1BI 137 [ mask ])\n+;;               (nil)))))\n+;; Since both vmv.v.v and vmv.v.i doesn't have mask operand.\n (define_insn_and_split \"@pred_mov<mode>\"\n   [(set (match_operand:V 0 \"nonimmediate_operand\"      \"=vr,    vr,    vd,     m,    vr,    vr\")\n     (if_then_else:V\n@@ -683,7 +708,8 @@\n          (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n       (match_operand:V 3 \"vector_move_operand\"       \"    m,     m,     m,    vr,    vr, viWc0\")\n       (match_operand:V 2 \"vector_merge_operand\"      \"    0,    vu,    vu,    vu,   vu0,   vu0\")))]\n-  \"TARGET_VECTOR\"\n+  \"TARGET_VECTOR && (MEM_P (operands[0]) || MEM_P (operands[3])\n+   || CONST_VECTOR_P (operands[1]))\"\n   \"@\n    vle<sew>.v\\t%0,%3%p1\n    vle<sew>.v\\t%0,%3\n@@ -1930,14 +1956,16 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"vl_op_idx\" \"4\")\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n-   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n \n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated integer widening operations\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n+;; - 11.2 Vector Widening Integer Add/Subtract\n ;; - 11.3 Vector Integer Extension\n+;; - 11.12 Vector Widening Integer Multiply Instructions\n ;; -------------------------------------------------------------------------------\n \n ;; Vector Double-Widening Sign-extend and Zero-extend.\n@@ -1999,3 +2027,164 @@\n   \"v<sz>ext.vf8\\t%0,%3%p1\"\n   [(set_attr \"type\" \"vext\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Vector Widening Add/Subtract/Multiply.\n+(define_insn \"@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_widen_binop:VWEXTI\n+\t    (any_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (any_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vw<any_widen_binop:insn><any_extend:u>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vi<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_dual_widen_<any_widen_binop:optab><any_extend:su><mode>_scalar\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_widen_binop:VWEXTI\n+\t    (any_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (any_extend:VWEXTI\n+\t      (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t\t(match_operand:<VSUBEL> 4 \"reg_or_0_operand\"       \"   rJ\"))))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vw<any_widen_binop:insn><any_extend:u>.vx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"vi<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_single_widen_<plus_minus:optab><any_extend:su><mode>\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTI\n+\t    (match_operand:VWEXTI 3 \"register_operand\"             \"   vr\")\n+\t    (any_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vw<plus_minus:insn><any_extend:u>.wv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vi<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_single_widen_<plus_minus:optab><any_extend:su><mode>_scalar\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus_minus:VWEXTI\n+\t    (match_operand:VWEXTI 3 \"register_operand\"             \"   vr\")\n+\t    (any_extend:VWEXTI\n+\t      (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t\t(match_operand:<VSUBEL> 4 \"reg_or_0_operand\"       \"   rJ\"))))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vw<plus_minus:insn><any_extend:u>.wx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"vi<widen_binop_insn_type>\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_widen_mulsu<mode>\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (mult:VWEXTI\n+\t    (sign_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (zero_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vwmulsu.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"viwmul\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_widen_mulsu<mode>_scalar\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (mult:VWEXTI\n+\t    (sign_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (zero_extend:VWEXTI\n+\t      (vec_duplicate:<V_DOUBLE_TRUNC>\n+\t\t(match_operand:<VSUBEL> 4 \"reg_or_0_operand\"       \"   rJ\"))))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vwmulsu.vx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"viwmul\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; vwcvt<u>.x.x.v\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"                  \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"           \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"              \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"                  \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                  \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (plus:VWEXTI\n+\t    (any_extend:VWEXTI\n+\t      (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t    (vec_duplicate:VWEXTI\n+\t      (reg:<VEL> X0_REGNUM)))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"           \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vwcvt<u>.x.x.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"viwalu\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])"}]}