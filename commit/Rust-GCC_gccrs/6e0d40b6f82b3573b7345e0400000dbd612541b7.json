{"sha": "6e0d40b6f82b3573b7345e0400000dbd612541b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwZDQwYjZmODJiMzU3M2I3MzQ1ZTA0MDAwMDBkYmQ2MTI1NDFiNw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-04-19T08:53:38Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-04-19T08:53:38Z"}, "message": "PR85463 '[nvptx] \"exit\" in offloaded region doesn't terminate process'\n\n\tlibgomp/\n\tPR libfortran/85166\n\t* testsuite/libgomp.oacc-fortran/abort-1.f90: Switch back to \"call\n\tabort\".\n\t* testsuite/libgomp.oacc-fortran/abort-2.f90: Likewise.\n\n\tlibgfortran/\n\tPR libfortran/85166\n\tPR libgomp/85463\n\t* runtime/minimal.c (stop_numeric): Reimplement.\n\t(stop_string, error_stop_string, error_stop_numeric): New\n\tfunctions.\n\tlibgomp/\n\tPR libgomp/85463\n\t* testsuite/libgomp.oacc-fortran/error_stop-1.f: New file.\n\t* testsuite/libgomp.oacc-fortran/error_stop-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/error_stop-3.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/stop-1.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/stop-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/stop-3.f: Likewise.\n\nFrom-SVN: r259491", "tree": {"sha": "24ddf33011e25e1eeddf1b584fb5a990e27ed36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24ddf33011e25e1eeddf1b584fb5a990e27ed36e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0d40b6f82b3573b7345e0400000dbd612541b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0d40b6f82b3573b7345e0400000dbd612541b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0d40b6f82b3573b7345e0400000dbd612541b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0d40b6f82b3573b7345e0400000dbd612541b7/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1781a04fcc32c710b4bcd9080d8e1d7462ca3226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1781a04fcc32c710b4bcd9080d8e1d7462ca3226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1781a04fcc32c710b4bcd9080d8e1d7462ca3226"}], "stats": {"total": 238, "additions": 234, "deletions": 4}, "files": [{"sha": "ea4358cc54e825cdba8d5841765e1615fac7447a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -1,3 +1,11 @@\n+2018-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libfortran/85166\n+\tPR libgomp/85463\n+\t* runtime/minimal.c (stop_numeric): Reimplement.\n+\t(stop_string, error_stop_string, error_stop_numeric): New\n+\tfunctions.\n+\n 2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure: Regenerated."}, {"sha": "0b1efeb0d58bfee448677bcf52026565f3a13fc9", "filename": "libgfortran/runtime/minimal.c", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgfortran%2Fruntime%2Fminimal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgfortran%2Fruntime%2Fminimal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fminimal.c?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -188,6 +188,22 @@ sys_abort (void)\n   abort();\n }\n \n+\n+/* runtime/stop.c */\n+\n+#undef report_exception\n+#define report_exception() do {} while (0)\n+#undef st_printf\n+#define st_printf printf\n+#undef estr_write\n+#define estr_write printf\n+/* Map \"exit\" to \"abort\"; see PR85463 '[nvptx] \"exit\" in offloaded region\n+   doesn't terminate process'.  */\n+#undef exit\n+#define exit(...) do { abort (); } while (0)\n+#undef exit_error\n+#define exit_error(...) do { abort (); } while (0)\n+\n /* A numeric STOP statement.  */\n \n extern _Noreturn void stop_numeric (int, bool);\n@@ -197,7 +213,67 @@ void\n stop_numeric (int code, bool quiet)\n {\n   if (!quiet)\n-    printf (\"STOP %d\\n\", code);\n-\n+    {\n+      report_exception ();\n+      st_printf (\"STOP %d\\n\", code);\n+    }\n   exit (code);\n }\n+\n+\n+/* A character string or blank STOP statement.  */\n+\n+void\n+stop_string (const char *string, size_t len, bool quiet)\n+{\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      if (string)\n+\t{\n+\t  estr_write (\"STOP \");\n+\t  (void) write (STDERR_FILENO, string, len);\n+\t  estr_write (\"\\n\");\n+\t}\n+    }\n+  exit (0);\n+}\n+\n+\n+/* Per Fortran 2008, section 8.4:  \"Execution of a STOP statement initiates\n+   normal termination of execution. Execution of an ERROR STOP statement\n+   initiates error termination of execution.\"  Thus, error_stop_string returns\n+   a nonzero exit status code.  */\n+\n+extern _Noreturn void error_stop_string (const char *, size_t, bool);\n+export_proto(error_stop_string);\n+\n+void\n+error_stop_string (const char *string, size_t len, bool quiet)\n+{\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      estr_write (\"ERROR STOP \");\n+      (void) write (STDERR_FILENO, string, len);\n+      estr_write (\"\\n\");\n+    }\n+  exit_error (1);\n+}\n+\n+\n+/* A numeric ERROR STOP statement.  */\n+\n+extern _Noreturn void error_stop_numeric (int, bool);\n+export_proto(error_stop_numeric);\n+\n+void\n+error_stop_numeric (int code, bool quiet)\n+{\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      st_printf (\"ERROR STOP %d\\n\", code);\n+    }\n+  exit_error (code);\n+}"}, {"sha": "f68a4a83fad7cca588b7658092b372a63cd4cd43", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -1,3 +1,18 @@\n+2018-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/85463\n+\t* testsuite/libgomp.oacc-fortran/error_stop-1.f: New file.\n+\t* testsuite/libgomp.oacc-fortran/error_stop-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/error_stop-3.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-1.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/stop-3.f: Likewise.\n+\n+\tPR libfortran/85166\n+\t* testsuite/libgomp.oacc-fortran/abort-1.f90: Switch back to \"call\n+\tabort\".\n+\t* testsuite/libgomp.oacc-fortran/abort-2.f90: Likewise.\n+\n 2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure: Regenerated."}, {"sha": "fc0af7ff7d89e3dc7517f9d575369c16101c9126", "filename": "libgomp/testsuite/libgomp.oacc-fortran/abort-1.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-1.f90?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -1,9 +1,12 @@\n+! Verify that an unconditional \"call abort\" inside an OpenACC parallel region\n+! does the right thing.\n+\n program main\n   implicit none\n \n   print *, \"CheCKpOInT\"\n   !$acc parallel\n-  STOP 1\n+  call abort\n   !$acc end parallel\n \n end program main"}, {"sha": "97a692ba6677851d0a71da9a92dfc9664dba0dab", "filename": "libgomp/testsuite/libgomp.oacc-fortran/abort-2.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fabort-2.f90?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -1,3 +1,6 @@\n+! Verify that a conditional \"call abort\" inside an OpenACC parallel region does\n+! the right thing.\n+\n program main\n   implicit none\n \n@@ -6,7 +9,7 @@ program main\n \n   !$acc parallel copyin(argc)\n   if (argc .ne. 0) then\n-     STOP 1\n+     call abort\n   end if\n   !$acc end parallel\n "}, {"sha": "4965e674c27b5b4a319173d227498947f23b2c7f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-1.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-1.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      ERROR STOP\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! { dg-output \"ERROR STOP (\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"Error termination.*\" { target { ! openacc_nvidia_accel_selected } } }\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-shouldfail \"\" }"}, {"sha": "7103fdb5d8ed9b008601d92b72e4f621c1238e33", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-2.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-2.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      ERROR STOP 35\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! { dg-output \"ERROR STOP 35(\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"Error termination.*\" { target { ! openacc_nvidia_accel_selected } } }\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-shouldfail \"\" }"}, {"sha": "9c217f14ea1b7e4eb161fc4c1084987c95850440", "filename": "libgomp/testsuite/libgomp.oacc-fortran/error_stop-3.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ferror_stop-3.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      ERROR STOP \"SiGN\"\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! { dg-output \"ERROR STOP SiGN(\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"Error termination.*\" { target { ! openacc_nvidia_accel_selected } } }\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-shouldfail \"\" }"}, {"sha": "af267fc08d1dc1d567e16180a70370d2aa9be350", "filename": "libgomp/testsuite/libgomp.oacc-fortran/stop-1.f", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-1.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      STOP\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-output \"$\" }\n+! PR85463.  STOP with code zero (as implied here) should actually\n+! terminate the process normally, but doesn't in the \"minimal\"\n+! libgfortran implementation used with nvptx offloading.\n+! { dg-shouldfail \"\" { openacc_nvidia_accel_selected } }"}, {"sha": "13c06845c08fb8e2196fc544955e06a3168cb842", "filename": "libgomp/testsuite/libgomp.oacc-fortran/stop-2.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-2.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      STOP 35\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! { dg-output \"STOP 35(\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-output \"$\" }\n+! { dg-shouldfail \"\" }"}, {"sha": "3bd7446571de17820bf9137e2a69be60daade7ec", "filename": "libgomp/testsuite/libgomp.oacc-fortran/stop-3.f", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d40b6f82b3573b7345e0400000dbd612541b7/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fstop-3.f?ref=6e0d40b6f82b3573b7345e0400000dbd612541b7", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+\n+      PRINT *, \"CheCKpOInT\"\n+!$ACC PARALLEL\n+      STOP \"SiGN\"\n+!$ACC END PARALLEL\n+      PRINT *, \"WrONg WAy\"\n+\n+      END PROGRAM MAIN\n+\n+! { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r)+\" }\n+! { dg-output \"STOP SiGN(\\n|\\r\\n|\\r)+\" }\n+! PR85463.  The \"minimal\" libgfortran implementation used with nvptx\n+! offloading is a little bit different.\n+! { dg-output \"libgomp: cuStreamSynchronize error.*\" { target openacc_nvidia_accel_selected } }\n+! { dg-output \"$\" }\n+! PR85463.  STOP with code zero (as implied here) should actually\n+! terminate the process normally, but doesn't in the \"minimal\"\n+! libgfortran implementation used with nvptx offloading.\n+! { dg-shouldfail \"\" { openacc_nvidia_accel_selected } }"}]}