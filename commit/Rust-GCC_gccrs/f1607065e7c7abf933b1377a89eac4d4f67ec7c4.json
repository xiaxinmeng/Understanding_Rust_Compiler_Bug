{"sha": "f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2MDcwNjVlN2M3YWJmOTMzYjEzNzdhODllYWM0ZDRmNjdlYzdjNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-17T00:07:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-17T00:07:10Z"}, "message": "re PR libitm/51072 (Build with --disable-bootstrap fails in libitm)\n\nPR bootstrap/51072\n        * config-lang.in (target_libs): Include target-libitm.\n\nFrom-SVN: r182424", "tree": {"sha": "0d3f7ad318c5c74dfd47643599b800088e1078a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d3f7ad318c5c74dfd47643599b800088e1078a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1607065e7c7abf933b1377a89eac4d4f67ec7c4/comments", "author": null, "committer": null, "parents": [{"sha": "e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98b1defdd2c6b5dc643a6e2a64a7e72a0c249c8"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "9c847d44f73ebb05bb72d96474e8df4da07f11e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607065e7c7abf933b1377a89eac4d4f67ec7c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607065e7c7abf933b1377a89eac4d4f67ec7c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "patch": "@@ -1,3 +1,8 @@\n+2011-12-16  Richard Henderson  <rth@redhat.com>\n+\n+\tPR bootstrap/51072\n+\t* config-lang.in (target_libs): Include target-libitm.\n+\n 2011-12-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51461\n@@ -33,7 +38,7 @@\n \n \tPR c++/51473\n \t* decl.c (check_tag_decl): Error out on auto specifier with no\n-    \tdeclarator.\n+\tdeclarator.\n \n 2011-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n@@ -58,8 +63,8 @@\n \n \tPR c++/51475\n \t* call.c (struct conversion)<u.next>: Update comment.\n-    \t(next_conversion): New static function.\n-    \t(convert_like_real): Use it.\n+\t(next_conversion): New static function.\n+\t(convert_like_real): Use it.\n \n \tPR c++/51476\n \t* pt.c (convert_nontype_argument): Don't call maybe_constant_value\n@@ -536,13 +541,13 @@\n \n \tPR c++/51027\n \t* parser.c (cp_parser_alias_declaration): Require ';' at the end\n-    \tof the declaration.\n+\tof the declaration.\n \n 2011-11-09  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/51032\n \t* decl2.c (check_member_template): Accept alias templates and ...\n-    \t* parser.c (cp_parser_alias_declaration): ... use it here.\n+\t* parser.c (cp_parser_alias_declaration): ... use it here.\n \n 2011-11-08  Jason Merrill  <jason@redhat.com>\n \n@@ -756,8 +761,8 @@\n \n 2011-11-04  Magnus Fromreide  <magfr@lysator.liu.se>\n \n-        * parser.c (cp_parser_enumerator_list): Do not warn about\n-        trailing commas in C++0x mode.\n+\t* parser.c (cp_parser_enumerator_list): Do not warn about\n+\ttrailing commas in C++0x mode.\n \n 2011-11-04  Olivier Goffart  <olivier@woboq.com>\n \t    Jason Merrill  <jason@redhat.com>\n@@ -886,7 +891,7 @@\n 2011-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert:\n-        2011-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t2011-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50864\n \t* pt.c (tsubst_copy_and_build): Fix qualified_name_lookup_error\n@@ -1598,9 +1603,9 @@\n \tPR c++/33255 - Support -Wunused-local-typedefs warning\n \t* name-lookup.c (pushdecl_maybe_friend_1): Use the new\n \trecord_locally_defined_typedef.\n-    \t* decl.c (finish_function): Use the new\n-    \tmaybe_warn_unused_local_typedefs.\n-    \t(grokfield): Use the new record_locally_defined_typedef.\n+\t* decl.c (finish_function): Use the new\n+\tmaybe_warn_unused_local_typedefs.\n+\t(grokfield): Use the new record_locally_defined_typedef.\n \t* parser.c (lookup_name): Use the new maybe_record_typedef_use.\n \n 2011-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -1857,7 +1862,7 @@\n \tassignment of two MEM_REFs.\n \n 2011-08-11  Romain Geissler  <romain.geissler@gmail.com>\n-            Brian Hackett  <bhackett1024@gmail.com>\n+\t    Brian Hackett  <bhackett1024@gmail.com>\n \n \t* decl.c (cp_finish_decl): Invoke callbacks on finish_decl event.\n \n@@ -3332,15 +3337,15 @@\n \n 2011-05-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n-        * cp-tree.def (EXPR_PACK_EXPANSION): Add an operand.\n-        * cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.\n-        * cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS): Use the new\n-        operand of EXPR_PACK_EXPANSION.\n+\t* cp-tree.def (EXPR_PACK_EXPANSION): Add an operand.\n+\t* cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.\n+\t* cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS): Use the new\n+\toperand of EXPR_PACK_EXPANSION.\n \t(cp_tree_operand_length): Declare.\n-        * tree.c (cp_tree_operand_length): Define.\n+\t* tree.c (cp_tree_operand_length): Define.\n \t(cp_tree_equal): Call it.\n-        * pt.c (value_dependent_expr_P): Likewise.\n-        * mangle.c (write_expression): Likewise.\n+\t* pt.c (value_dependent_expr_P): Likewise.\n+\t* mangle.c (write_expression): Likewise.\n \n 2011-05-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -3492,7 +3497,7 @@\n \t(lookup_label): Refactor timevar calls out to a wrapper function.\n \tChange TV_NAME_LOOKUP to start_cond/stop_cond.\n \n-        * pt.c: (instantiate_class_template): Add a wrapper to push/pop new\n+\t* pt.c: (instantiate_class_template): Add a wrapper to push/pop new\n \tTV_TEMPLATE_INST.\n \t(instantiate_template): Add a wrapper to push/pop new TV_TEMPLATE_INST.\n \t(lookup_template_class): Refactor timevar calls out to a wrapper\n@@ -3557,15 +3562,15 @@\n \tnew TV_PARSE_INMETH.\n \n \t* call.c: Add include of \"timevar.h\".\n-        (convert_class_to_reference): Wrap and add push/pop calls to \n+\t(convert_class_to_reference): Wrap and add push/pop calls to \n \tTV_OVERLOAD.\n \t(build_op_call): Likewise.\n \t(build_conditional_expr): Likewise.\n \t(build_new_op): Likewise.\n \t(build_new_method_call): Likewise.\n-        (build_user_type_conversion): Reorganize to single return and add\n+\t(build_user_type_conversion): Reorganize to single return and add\n \tpush/pop calls to TV_OVERLOAD.\n-        (perform_overload_resolution): Likewise.\n+\t(perform_overload_resolution): Likewise.\n \n \t* Make-lang.in: Add dependence of call.o and parser.o on $(TIMEVAR_H).\n \n@@ -3914,7 +3919,7 @@\n \n \tPR c++/48574\n \t* class.c (fixed_type_or_null): We cannot determine the dynamic\n-    \ttype of a reference variable if its initializer is dependent.\n+\ttype of a reference variable if its initializer is dependent.\n \n 2011-04-13  Jason Merrill  <jason@redhat.com>\n \n@@ -4625,9 +4630,9 @@\n \n \tPR c++/47208\n \t* pt.c (do_auto_deduction): Do not mention error_mark_node in\n-    \tdiagnostics.\n+\tdiagnostics.\n \t* semantics.c (finish_id_expression): Do not pass erroneous decl\n-    \tto decl_constant_var_p.\n+\tto decl_constant_var_p.\n \n 2011-02-17  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -4645,7 +4650,7 @@\n \n \tPR c++/47326\n \t* pt.c (tsubst_copy)<case SIZEOF_EXPR>: Ensure that even pack\n-    \texpansion arguments are not evaluated.\n+\texpansion arguments are not evaluated.\n \n 2011-02-16  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "6f9b4c9a39d680807ecaa875921c1700d9cc8196", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607065e7c7abf933b1377a89eac4d4f67ec7c4/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607065e7c7abf933b1377a89eac4d4f67ec7c4/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=f1607065e7c7abf933b1377a89eac4d4f67ec7c4", "patch": "@@ -28,6 +28,9 @@ language=\"c++\"\n \n compilers=\"cc1plus\\$(exeext)\"\n \n-target_libs=\"target-libstdc++-v3\"\n+# ??? libitm is not a language support library like libstdc++, but it does\n+# use c++, and this is the easiest way to have it be disabled if we don't\n+# include c++ in the set of enabled languages.\n+target_libs=\"target-libstdc++-v3 target-libitm\"\n \n gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c\""}]}