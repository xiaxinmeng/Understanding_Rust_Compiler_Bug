{"sha": "9088c1cc654a768bf3481519372ac3b0853feb4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4OGMxY2M2NTRhNzY4YmYzNDgxNTE5MzcyYWMzYjA4NTNmZWI0ZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2008-07-07T19:06:28Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2008-07-07T19:06:28Z"}, "message": "cgraph.c (cgraph_edge_max_uid): New variable.\n\n2008-07-07  Martin Jambor  <mjambor@suse.cz>\n\n\t* cgraph.c (cgraph_edge_max_uid): New variable.\n\t(struct cgraph_edge_hook_list): New type.\n\t(struct cgraph_node_hook_list): New type.\n\t(struct cgraph_2edge_hook_list): New type.\n\t(struct cgraph_2node_hook_list): New type.\n\t(first_cgraph_edge_removal_hook): New variable.\n\t(first_cgraph_node_removal_hook): New variable.\n\t(first_cgraph_edge_duplicated_hook): New variable.\n\t(first_cgraph_node_duplicated_hook): New variable.\n\t(cgraph_add_edge_removal_hook): New function.\n\t(cgraph_remove_edge_removal_hook): New function.\n\t(cgraph_call_edge_removal_hooks):  New function.\n\t(cgraph_add_node_removal_hook):  New function.\n\t(cgraph_remove_node_removal_hook):  New function.\n\t(cgraph_call_node_removal_hooks):  New function.\n\t(cgraph_add_edge_duplication_hook):  New function.\n\t(cgraph_remove_edge_duplication_hook):  New function.\n\t(cgraph_call_edge_duplication_hooks):  New function.\n\t(cgraph_add_node_duplication_hook):  New function.\n\t(cgraph_remove_node_duplication_hook):  New function.\n\t(cgraph_call_node_duplication_hooks):  New function.\n\t(cgraph_create_edge): Assign to edge uid.\n\t(cgraph_remove_edge): Call edge removal hooks.\n\t(cgraph_node_remove_callees): Call edge removal hooks.\n\t(cgraph_node_remove_callers): Call edge removal hooks.\n\t(cgraph_remove_node): Call node removal hooks.\n\t(cgraph_clone_edge): Call edge duplication hooks.\n\t(cgraph_clone_node): Call node duplication hooks.\n\n\t* cgraph.h (cgraph_edge): New field uid.\n\t(cgraph_edge_hook): New type.\n\t(cgraph_node_hook): New type.\n\t(cgraph_2edge_hook): New type.\n\t(cgraph_2node_hook): New type.\n\nFrom-SVN: r137591", "tree": {"sha": "61b998ffc2d6713cc2e2c2ee4e3b71ae3e4fafdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b998ffc2d6713cc2e2c2ee4e3b71ae3e4fafdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9088c1cc654a768bf3481519372ac3b0853feb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9088c1cc654a768bf3481519372ac3b0853feb4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9088c1cc654a768bf3481519372ac3b0853feb4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9088c1cc654a768bf3481519372ac3b0853feb4d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c71618c614e98cc61b87bc3a9f8aabd04b008ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71618c614e98cc61b87bc3a9f8aabd04b008ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71618c614e98cc61b87bc3a9f8aabd04b008ec2"}], "stats": {"total": 278, "additions": 276, "deletions": 2}, "files": [{"sha": "7c37e08446f5e60678f5265ea6551858bd21a5a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9088c1cc654a768bf3481519372ac3b0853feb4d", "patch": "@@ -1,3 +1,40 @@\n+2008-07-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.c (cgraph_edge_max_uid): New variable.\n+\t(struct cgraph_edge_hook_list): New type.\n+\t(struct cgraph_node_hook_list): New type.\n+\t(struct cgraph_2edge_hook_list): New type.\n+\t(struct cgraph_2node_hook_list): New type.\n+\t(first_cgraph_edge_removal_hook): New variable.\n+\t(first_cgraph_node_removal_hook): New variable.\n+\t(first_cgraph_edge_duplicated_hook): New variable.\n+\t(first_cgraph_node_duplicated_hook): New variable.\n+\t(cgraph_add_edge_removal_hook): New function.\n+\t(cgraph_remove_edge_removal_hook): New function.\n+\t(cgraph_call_edge_removal_hooks):  New function.\n+\t(cgraph_add_node_removal_hook):  New function.\n+\t(cgraph_remove_node_removal_hook):  New function.\n+\t(cgraph_call_node_removal_hooks):  New function.\n+\t(cgraph_add_edge_duplication_hook):  New function.\n+\t(cgraph_remove_edge_duplication_hook):  New function.\n+\t(cgraph_call_edge_duplication_hooks):  New function.\n+\t(cgraph_add_node_duplication_hook):  New function.\n+\t(cgraph_remove_node_duplication_hook):  New function.\n+\t(cgraph_call_node_duplication_hooks):  New function.\n+\t(cgraph_create_edge): Assign to edge uid.\n+\t(cgraph_remove_edge): Call edge removal hooks.\n+\t(cgraph_node_remove_callees): Call edge removal hooks.\n+\t(cgraph_node_remove_callers): Call edge removal hooks.\n+\t(cgraph_remove_node): Call node removal hooks.\n+\t(cgraph_clone_edge): Call edge duplication hooks.\n+\t(cgraph_clone_node): Call node duplication hooks.\n+\n+\t* cgraph.h (cgraph_edge): New field uid.\n+\t(cgraph_edge_hook): New type.\n+\t(cgraph_node_hook): New type.\n+\t(cgraph_2edge_hook): New type.\n+\t(cgraph_2node_hook): New type.\n+\n 2008-07-07  Andreas Tobler  <a.tobler@schweiz.org>\n \n \t* config.in: Regenerate."}, {"sha": "6a80bbed0950702e081aaaacde7ba027ef24844e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 216, "deletions": 2, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=9088c1cc654a768bf3481519372ac3b0853feb4d", "patch": "@@ -109,6 +109,9 @@ int cgraph_n_nodes;\n /* Maximal uid used in cgraph nodes.  */\n int cgraph_max_uid;\n \n+/* Maximal uid used in cgraph edges.  */\n+int cgraph_edge_max_uid;\n+\n /* Maximal pid used for profiling */\n int cgraph_max_pid;\n \n@@ -132,6 +135,206 @@ static GTY(()) struct cgraph_asm_node *cgraph_asm_last_node;\n    them, to support -fno-toplevel-reorder.  */\n int cgraph_order;\n \n+/* List of hooks trigerred on cgraph_edge events.  */\n+struct cgraph_edge_hook_list {\n+  cgraph_edge_hook hook;\n+  void *data;\n+  struct cgraph_edge_hook_list *next;\n+};\n+\n+/* List of hooks trigerred on cgraph_node events.  */\n+struct cgraph_node_hook_list {\n+  cgraph_node_hook hook;\n+  void *data;\n+  struct cgraph_node_hook_list *next;\n+};\n+\n+/* List of hooks trigerred on events involving two cgraph_edges.  */\n+struct cgraph_2edge_hook_list {\n+  cgraph_2edge_hook hook;\n+  void *data;\n+  struct cgraph_2edge_hook_list *next;\n+};\n+\n+/* List of hooks trigerred on events involving two cgraph_nodes.  */\n+struct cgraph_2node_hook_list {\n+  cgraph_2node_hook hook;\n+  void *data;\n+  struct cgraph_2node_hook_list *next;\n+};\n+\n+/* List of hooks triggered when an edge is removed.  */\n+struct cgraph_edge_hook_list *first_cgraph_edge_removal_hook;\n+/* List of hooks triggered when a node is removed.  */\n+struct cgraph_node_hook_list *first_cgraph_node_removal_hook;\n+/* List of hooks triggered when an edge is duplicated.  */\n+struct cgraph_2edge_hook_list *first_cgraph_edge_duplicated_hook;\n+/* List of hooks triggered when a node is duplicated.  */\n+struct cgraph_2node_hook_list *first_cgraph_node_duplicated_hook;\n+\n+\n+/* Register HOOK to be called with DATA on each removed edge.  */\n+struct cgraph_edge_hook_list *\n+cgraph_add_edge_removal_hook (cgraph_edge_hook hook, void *data)\n+{\n+  struct cgraph_edge_hook_list *entry;\n+  struct cgraph_edge_hook_list **ptr = &first_cgraph_edge_removal_hook;\n+\n+  entry = (struct cgraph_edge_hook_list *) xmalloc (sizeof (*entry));\n+  entry->hook = hook;\n+  entry->data = data;\n+  entry->next = NULL;\n+  while (*ptr)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry;\n+  return entry;\n+}\n+\n+/* Remove ENTRY from the list of hooks called on removing edges.  */\n+void\n+cgraph_remove_edge_removal_hook (struct cgraph_edge_hook_list *entry)\n+{\n+  struct cgraph_edge_hook_list **ptr = &first_cgraph_edge_removal_hook;\n+\n+  while (*ptr != entry)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry->next;\n+}\n+\n+/* Call all edge removal hooks.  */\n+static void\n+cgraph_call_edge_removal_hooks (struct cgraph_edge *e)\n+{\n+  struct cgraph_edge_hook_list *entry = first_cgraph_edge_removal_hook;\n+  while (entry)\n+  {\n+    entry->hook (e, entry->data);\n+    entry = entry->next;\n+  }\n+}\n+\n+/* Register HOOK to be called with DATA on each removed node.  */\n+struct cgraph_node_hook_list *\n+cgraph_add_node_removal_hook (cgraph_node_hook hook, void *data)\n+{\n+  struct cgraph_node_hook_list *entry;\n+  struct cgraph_node_hook_list **ptr = &first_cgraph_node_removal_hook;\n+\n+  entry = (struct cgraph_node_hook_list *) xmalloc (sizeof (*entry));\n+  entry->hook = hook;\n+  entry->data = data;\n+  entry->next = NULL;\n+  while (*ptr)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry;\n+  return entry;\n+}\n+\n+/* Remove ENTRY from the list of hooks called on removing nodes.  */\n+void\n+cgraph_remove_node_removal_hook (struct cgraph_node_hook_list *entry)\n+{\n+  struct cgraph_node_hook_list **ptr = &first_cgraph_node_removal_hook;\n+\n+  while (*ptr != entry)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry->next;\n+}\n+\n+/* Call all node removal hooks.  */\n+static void\n+cgraph_call_node_removal_hooks (struct cgraph_node *node)\n+{\n+  struct cgraph_node_hook_list *entry = first_cgraph_node_removal_hook;\n+  while (entry)\n+  {\n+    entry->hook (node, entry->data);\n+    entry = entry->next;\n+  }\n+}\n+\n+/* Register HOOK to be called with DATA on each duplicated edge.  */\n+struct cgraph_2edge_hook_list *\n+cgraph_add_edge_duplication_hook (cgraph_2edge_hook hook, void *data)\n+{\n+  struct cgraph_2edge_hook_list *entry;\n+  struct cgraph_2edge_hook_list **ptr = &first_cgraph_edge_duplicated_hook;\n+\n+  entry = (struct cgraph_2edge_hook_list *) xmalloc (sizeof (*entry));\n+  entry->hook = hook;\n+  entry->data = data;\n+  entry->next = NULL;\n+  while (*ptr)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry;\n+  return entry;\n+}\n+\n+/* Remove ENTRY from the list of hooks called on duplicating edges.  */\n+void\n+cgraph_remove_edge_duplication_hook (struct cgraph_2edge_hook_list *entry)\n+{\n+  struct cgraph_2edge_hook_list **ptr = &first_cgraph_edge_duplicated_hook;\n+\n+  while (*ptr != entry)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry->next;\n+}\n+\n+/* Call all edge duplication hooks.  */\n+static void\n+cgraph_call_edge_duplication_hooks (struct cgraph_edge *cs1,\n+\t\t\t\t    struct cgraph_edge *cs2)\n+{\n+  struct cgraph_2edge_hook_list *entry = first_cgraph_edge_duplicated_hook;\n+  while (entry)\n+  {\n+    entry->hook (cs1, cs2, entry->data);\n+    entry = entry->next;\n+  }\n+}\n+\n+/* Register HOOK to be called with DATA on each duplicated node.  */\n+struct cgraph_2node_hook_list *\n+cgraph_add_node_duplication_hook (cgraph_2node_hook hook, void *data)\n+{\n+  struct cgraph_2node_hook_list *entry;\n+  struct cgraph_2node_hook_list **ptr = &first_cgraph_node_duplicated_hook;\n+\n+  entry = (struct cgraph_2node_hook_list *) xmalloc (sizeof (*entry));\n+  entry->hook = hook;\n+  entry->data = data;\n+  entry->next = NULL;\n+  while (*ptr)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry;\n+  return entry;\n+}\n+\n+/* Remove ENTRY from the list of hooks called on duplicating nodes.  */\n+void\n+cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *entry)\n+{\n+  struct cgraph_2node_hook_list **ptr = &first_cgraph_node_duplicated_hook;\n+\n+  while (*ptr != entry)\n+    ptr = &(*ptr)->next;\n+  *ptr = entry->next;\n+}\n+\n+/* Call all node duplication hooks.  */\n+static void\n+cgraph_call_node_duplication_hooks (struct cgraph_node *node1,\n+\t\t\t\t    struct cgraph_node *node2)\n+{\n+  struct cgraph_2node_hook_list *entry = first_cgraph_node_duplicated_hook;\n+  while (entry)\n+  {\n+    entry->hook (node1, node2, entry->data);\n+    entry = entry->next;\n+  }\n+}\n+\n /* Returns a hash code for P.  */\n \n static hashval_t\n@@ -365,6 +568,7 @@ cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n   gcc_assert (freq >= 0);\n   gcc_assert (freq <= CGRAPH_FREQ_MAX);\n   edge->loop_nest = nest;\n+  edge->uid = cgraph_edge_max_uid++;\n   if (caller->call_site_hash)\n     {\n       void **slot;\n@@ -414,6 +618,7 @@ cgraph_edge_remove_caller (struct cgraph_edge *e)\n void\n cgraph_remove_edge (struct cgraph_edge *e)\n {\n+  cgraph_call_edge_removal_hooks (e);\n   /* Remove from callers list of the callee.  */\n   cgraph_edge_remove_callee (e);\n \n@@ -495,7 +700,10 @@ cgraph_node_remove_callees (struct cgraph_node *node)\n      the callees.  The callee list of the node can be zapped with one\n      assignment.  */\n   for (e = node->callees; e; e = e->next_callee)\n-    cgraph_edge_remove_callee (e);\n+    {\n+      cgraph_call_edge_removal_hooks (e);\n+      cgraph_edge_remove_callee (e);\n+    }\n   node->callees = NULL;\n   if (node->call_site_hash)\n     {\n@@ -515,7 +723,10 @@ cgraph_node_remove_callers (struct cgraph_node *node)\n      the callers.  The caller list of the node can be zapped with one\n      assignment.  */\n   for (e = node->callers; e; e = e->next_caller)\n-    cgraph_edge_remove_caller (e);\n+    {\n+      cgraph_call_edge_removal_hooks (e);\n+      cgraph_edge_remove_caller (e);\n+    }\n   node->callers = NULL;\n }\n \n@@ -549,6 +760,7 @@ cgraph_remove_node (struct cgraph_node *node)\n   void **slot;\n   bool kill_body = false;\n \n+  cgraph_call_node_removal_hooks (node);\n   cgraph_node_remove_callers (node);\n   cgraph_node_remove_callees (node);\n   /* Incremental inlining access removed nodes stored in the postorder list.\n@@ -891,6 +1103,7 @@ cgraph_clone_edge (struct cgraph_edge *e, struct cgraph_node *n,\n       if (e->count < 0)\n \te->count = 0;\n     }\n+  cgraph_call_edge_duplication_hooks (e, new);\n   return new;\n }\n \n@@ -942,6 +1155,7 @@ cgraph_clone_node (struct cgraph_node *n, gcov_type count, int freq, int loop_ne\n   if (new->next_clone)\n     new->next_clone->prev_clone = new;\n \n+  cgraph_call_node_duplication_hooks (n, new);\n   return new;\n }\n "}, {"sha": "ee79c9200f1a0e599bd7085036a10e4bc8a85391", "filename": "gcc/cgraph.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9088c1cc654a768bf3481519372ac3b0853feb4d/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=9088c1cc654a768bf3481519372ac3b0853feb4d", "patch": "@@ -209,6 +209,8 @@ struct cgraph_edge GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_call\n   int frequency;\n   /* Depth of loop nest, 1 means no loop nest.  */\n   int loop_nest;\n+  /* Unique id of the edge.  */\n+  int uid;\n };\n \n #define CGRAPH_FREQ_BASE 1000\n@@ -266,6 +268,7 @@ struct cgraph_asm_node GTY(())\n extern GTY(()) struct cgraph_node *cgraph_nodes;\n extern GTY(()) int cgraph_n_nodes;\n extern GTY(()) int cgraph_max_uid;\n+extern GTY(()) int cgraph_edge_max_uid;\n extern GTY(()) int cgraph_max_pid;\n extern bool cgraph_global_info_ready;\n enum cgraph_state\n@@ -351,6 +354,26 @@ struct cgraph_node *save_inline_function_body (struct cgraph_node *);\n void record_references_in_initializer (tree);\n bool cgraph_process_new_functions (void);\n \n+typedef void (*cgraph_edge_hook)(struct cgraph_edge *, void *);\n+typedef void (*cgraph_node_hook)(struct cgraph_node *, void *);\n+typedef void (*cgraph_2edge_hook)(struct cgraph_edge *, struct cgraph_edge *,\n+\t\t\t\t  void *);\n+typedef void (*cgraph_2node_hook)(struct cgraph_node *, struct cgraph_node *,\n+\t\t\t\t  void *);\n+struct cgraph_edge_hook_list;\n+struct cgraph_node_hook_list;\n+struct cgraph_2edge_hook_list;\n+struct cgraph_2node_hook_list;\n+struct cgraph_edge_hook_list *cgraph_add_edge_removal_hook (cgraph_edge_hook, void *);\n+void cgraph_remove_edge_removal_hook (struct cgraph_edge_hook_list *);\n+struct cgraph_node_hook_list *cgraph_add_node_removal_hook (cgraph_node_hook,\n+\t\t\t\t\t\t\t    void *);\n+void cgraph_remove_node_removal_hook (struct cgraph_node_hook_list *);\n+struct cgraph_2edge_hook_list *cgraph_add_edge_duplication_hook (cgraph_2edge_hook, void *);\n+void cgraph_remove_edge_duplication_hook (struct cgraph_2edge_hook_list *);\n+struct cgraph_2node_hook_list *cgraph_add_node_duplication_hook (cgraph_2node_hook, void *);\n+void cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *);\n+\n /* In cgraphbuild.c  */\n unsigned int rebuild_cgraph_edges (void);\n "}]}