{"sha": "9778f2f8b539a9229cd205e933d1d20c60f1768e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3OGYyZjhiNTM5YTkyMjljZDIwNWU5MzNkMWQyMGM2MGYxNzY4ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-09-06T21:50:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-09-06T21:50:20Z"}, "message": "re PR target/12070 (ICE converting between double and long double with -msoft-float)\n\n\tPR target/12070\n\t* calls.c (emit_library_call_value_1): Fix saving of BLKmode arguments.\n\n\tPR opt/12082\n\t* cfgcleanup.c (try_simplify_condjump): Avoid unreachable code warning.\n\nFrom-SVN: r71147", "tree": {"sha": "ad864c023f86a39edeb88a3acff0497534d95463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad864c023f86a39edeb88a3acff0497534d95463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9778f2f8b539a9229cd205e933d1d20c60f1768e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9778f2f8b539a9229cd205e933d1d20c60f1768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9778f2f8b539a9229cd205e933d1d20c60f1768e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9778f2f8b539a9229cd205e933d1d20c60f1768e/comments", "author": null, "committer": null, "parents": [{"sha": "0761f342c524819173182b1cb0ec75d02c2f709b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0761f342c524819173182b1cb0ec75d02c2f709b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0761f342c524819173182b1cb0ec75d02c2f709b"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "ef3ac7baceb720c49e164d5077be700abd450383", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9778f2f8b539a9229cd205e933d1d20c60f1768e", "patch": "@@ -1,3 +1,11 @@\n+Sat Sep  6 23:49:13 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR target/12070\n+\t* calls.c (emit_library_call_value_1): Fix saving of BLKmode arguments.\n+\n+\tPR opt/12082\n+\t* cfgcleanup.c (try_simplify_condjump): Avoid unreachable code warning.\n+\n 2003-09-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* diagnostic.c (announce_function): Move to toplev.c."}, {"sha": "482d4876f98093348029623e3e8d88f1eb333aa9", "filename": "gcc/calls.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9778f2f8b539a9229cd205e933d1d20c60f1768e", "patch": "@@ -3071,10 +3071,19 @@ expand_call (tree exp, rtx target, int ignore)\n       if (pass && (flags & ECF_LIBCALL_BLOCK))\n \t{\n \t  rtx insns;\n+\t  rtx insn;\n+\t  bool failed = valreg == 0 || GET_CODE (valreg) == PARALLEL;\n \n-\t  if (valreg == 0 || GET_CODE (valreg) == PARALLEL)\n+          insns = get_insns ();\n+\n+\t  /* Expansion of block moves possibly introduced a loop that may\n+\t     not appear inside libcall block.  */\n+\t  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+\t    if (GET_CODE (insn) == JUMP_INSN)\n+\t      failed = true;\n+\n+\t  if (failed)\n \t    {\n-\t      insns = get_insns ();\n \t      end_sequence ();\n \t      emit_insn (insns);\n \t    }\n@@ -3095,7 +3104,6 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t\t\t\t  args[i].initial_value, note);\n \t      note = gen_rtx_EXPR_LIST (VOIDmode, funexp, note);\n \n-\t      insns = get_insns ();\n \t      end_sequence ();\n \n \t      if (flags & ECF_PURE)\n@@ -4008,9 +4016,25 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t\t\t\t     argvec[argnum].locate.offset.constant);\n \t\t  rtx stack_area\n \t\t    = gen_rtx_MEM (save_mode, memory_address (save_mode, adr));\n-\t\t  argvec[argnum].save_area = gen_reg_rtx (save_mode);\n \n-\t\t  emit_move_insn (argvec[argnum].save_area, stack_area);\n+\t\t  if (save_mode == BLKmode)\n+\t\t    {\n+\t\t      argvec[argnum].save_area\n+\t\t\t= assign_stack_temp (BLKmode,\n+\t\t\t\t             argvec[argnum].locate.size.constant,\n+\t\t\t\t\t     0);\n+\n+\t\t      emit_block_move (validize_mem (argvec[argnum].save_area),\n+\t\t\t  \t       stack_area,\n+\t\t\t\t       GEN_INT (argvec[argnum].locate.size.constant),\n+\t\t\t\t       BLOCK_OP_CALL_PARM);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      argvec[argnum].save_area = gen_reg_rtx (save_mode);\n+\n+\t\t      emit_move_insn (argvec[argnum].save_area, stack_area);\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -4229,7 +4253,13 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t    rtx stack_area = gen_rtx_MEM (save_mode,\n \t\t\t\t\t  memory_address (save_mode, adr));\n \n-\t    emit_move_insn (stack_area, argvec[count].save_area);\n+\t    if (save_mode == BLKmode)\n+\t      emit_block_move (stack_area,\n+\t\t  \t       validize_mem (argvec[count].save_area),\n+\t\t\t       GEN_INT (argvec[count].locate.size.constant),\n+\t\t\t       BLOCK_OP_CALL_PARM);\n+\t    else\n+\t      emit_move_insn (stack_area, argvec[count].save_area);\n \t  }\n \n       highest_outgoing_arg_in_use = initial_highest_arg_in_use;"}, {"sha": "fc5be846dee96acf5f3bb2828bdf426e780809c8", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9778f2f8b539a9229cd205e933d1d20c60f1768e/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=9778f2f8b539a9229cd205e933d1d20c60f1768e", "patch": "@@ -118,6 +118,8 @@ try_simplify_condjump (basic_block cbranch_block)\n   basic_block jump_block, jump_dest_block, cbranch_dest_block;\n   edge cbranch_jump_edge, cbranch_fallthru_edge;\n   rtx cbranch_insn;\n+  rtx insn, next;\n+  rtx end;\n \n   /* Verify that there are exactly two successors.  */\n   if (!cbranch_block->succ\n@@ -170,6 +172,20 @@ try_simplify_condjump (basic_block cbranch_block)\n   cbranch_fallthru_edge->flags &= ~EDGE_FALLTHRU;\n   update_br_prob_note (cbranch_block);\n \n+  end = jump_block->end;\n+  /* Deleting a block may produce unreachable code warning even when we are\n+     not deleting anything live.  Supress it by moving all the line number\n+     notes out of the block.  */\n+  for (insn = jump_block->head; insn != NEXT_INSN (jump_block->end);\n+       insn = next)\n+    {\n+      next = NEXT_INSN (insn);\n+      if (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > 0)\n+\t{\n+\t  reorder_insns (insn, insn, end);\n+\t  end = insn;\n+\t}\n+    }\n   /* Delete the block with the unconditional jump, and clean up the mess.  */\n   delete_block (jump_block);\n   tidy_fallthru_edge (cbranch_jump_edge, cbranch_block, cbranch_dest_block);"}]}