{"sha": "b65eff46797a017f6ff524c87e8513948073c089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1ZWZmNDY3OTdhMDE3ZjZmZjUyNGM4N2U4NTEzOTQ4MDczYzA4OQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-22T19:12:46Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-22T19:12:46Z"}, "message": "re PR c++/57709 (-Wshadow is too strict / has false positives)\n\ngcc/cp/ChangeLog:\n\n2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/57709\n\t* name-lookup.c (pushdecl_maybe_friend_1): Do not warn if a\n\tdeclaration shadows a function declaration, unless the former\n\tdeclares a function, pointer to function or pointer to member\n\tfunction, because this is a common and valid case in real-world\n\tcode.\n\t* cp-tree.h (TYPE_PTRFN_P,TYPE_REFFN_P,TYPE_PTRMEMFUNC_P):\n\tImprove description.\n\ngcc/testsuite/ChangeLog:\n\n2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/57709\n\t* g++.dg/Wshadow.C: New test.\n\nFrom-SVN: r214357", "tree": {"sha": "c86a4aafb8a1a26f9bd4278787e962a264ab6afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c86a4aafb8a1a26f9bd4278787e962a264ab6afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65eff46797a017f6ff524c87e8513948073c089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65eff46797a017f6ff524c87e8513948073c089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65eff46797a017f6ff524c87e8513948073c089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65eff46797a017f6ff524c87e8513948073c089/comments", "author": null, "committer": null, "parents": [{"sha": "6c6d76bec50feb6f9d9455d968c05de121b591d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d76bec50feb6f9d9455d968c05de121b591d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6d76bec50feb6f9d9455d968c05de121b591d8"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "2ea266539017debcbcc973920405cc72332053af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b65eff46797a017f6ff524c87e8513948073c089", "patch": "@@ -1,3 +1,14 @@\n+2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/57709\n+\t* name-lookup.c (pushdecl_maybe_friend_1): Do not warn if a\n+\tdeclaration shadows a function declaration, unless the former\n+\tdeclares a function, pointer to function or pointer to member\n+\tfunction, because this is a common and valid case in real-world\n+\tcode.\n+\t* cp-tree.h (TYPE_PTRFN_P,TYPE_REFFN_P,TYPE_PTRMEMFUNC_P):\n+\tImprove description.\n+\n 2014-08-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/62129"}, {"sha": "81c7fd6b99c1f8369246a28db5fdff8ef3096a6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b65eff46797a017f6ff524c87e8513948073c089", "patch": "@@ -3558,18 +3558,17 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    && !(TREE_CODE (TREE_TYPE (NODE)) == FUNCTION_TYPE\t\t\\\n \t|| TREE_CODE (TREE_TYPE (NODE)) == METHOD_TYPE))\n \n-/* Returns true if NODE is a pointer to function.  */\n+/* Returns true if NODE is a pointer to function type.  */\n #define TYPE_PTRFN_P(NODE)\t\t\t\t\\\n   (TYPE_PTR_P (NODE)\t\t\t                \\\n    && TREE_CODE (TREE_TYPE (NODE)) == FUNCTION_TYPE)\n \n-/* Returns true if NODE is a reference to function.  */\n+/* Returns true if NODE is a reference to function type.  */\n #define TYPE_REFFN_P(NODE)\t\t\t\t\\\n   (TREE_CODE (NODE) == REFERENCE_TYPE\t\t\t\\\n    && TREE_CODE (TREE_TYPE (NODE)) == FUNCTION_TYPE)\n \n-/* Nonzero for _TYPE node means that this type is a pointer to member\n-   function type.  */\n+/* Returns true if NODE is a pointer to member function type.  */\n #define TYPE_PTRMEMFUNC_P(NODE)\t\t\\\n   (TREE_CODE (NODE) == RECORD_TYPE\t\\\n    && TYPE_PTRMEMFUNC_FLAG (NODE))"}, {"sha": "ebcbb5c5580f4933a7252d76a70a83de943a6f36", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b65eff46797a017f6ff524c87e8513948073c089", "patch": "@@ -1239,9 +1239,24 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \n \t      if (member && !TREE_STATIC (member))\n \t\t{\n-\t\t  /* Location of previous decl is not useful in this case.  */\n-\t\t  warning (OPT_Wshadow, \"declaration of %qD shadows a member of 'this'\",\n-\t\t\t   x);\n+\t\t  if (BASELINK_P (member))\n+\t\t    member = BASELINK_FUNCTIONS (member);\n+\t\t  member = OVL_CURRENT (member);\n+\t\n+\t\t  /* Do not warn if a variable shadows a function, unless\n+\t\t     the variable is a function or a pointer-to-function.  */\n+\t\t  if (TREE_CODE (member) != FUNCTION_DECL\n+\t\t      || TREE_CODE (x) == FUNCTION_DECL\n+\t\t      || TYPE_PTRFN_P (TREE_TYPE (x))\n+\t\t      || TYPE_PTRMEMFUNC_P (TREE_TYPE (x)))\n+\t\t    {\n+\t\t      if (warning_at (input_location, OPT_Wshadow,\n+\t\t\t\t      \"declaration of %qD shadows a member of %qT\",\n+\t\t\t\t      x, current_nonlambda_class_type ())\n+\t\t\t  && DECL_P (member))\n+\t\t\tinform (DECL_SOURCE_LOCATION (member),\n+\t\t\t\t\"shadowed declaration is here\");\n+\t\t    }\n \t\t}\n \t      else if (oldglobal != NULL_TREE\n \t\t       && (VAR_P (oldglobal)"}, {"sha": "ce3e30e3572f33a7140364a20ff4a5dcfbbe011a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b65eff46797a017f6ff524c87e8513948073c089", "patch": "@@ -1,3 +1,8 @@\n+2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/57709\n+\t* g++.dg/Wshadow.C: New test.\n+\n 2014-08-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR fortran/62135"}, {"sha": "482d2f0309a243dd84868d46e7f4780dcfa2703e", "filename": "gcc/testsuite/g++.dg/Wshadow.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWshadow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65eff46797a017f6ff524c87e8513948073c089/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWshadow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWshadow.C?ref=b65eff46797a017f6ff524c87e8513948073c089", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-Wshadow\" }\n+// PR c++/57709 \n+class C {\n+  int both_var; // { dg-message \"declaration\" }\n+  void var_and_method(void) {} // { dg-message \"declaration\" }\n+  void m() { \n+    int \n+      both_var,  // { dg-warning \"shadows\" }\n+      var_and_method; \n+  }\n+  void m2() { \n+    void (C::*var_and_method)(void); // { dg-warning \"shadows\" }\n+  }\n+};"}]}