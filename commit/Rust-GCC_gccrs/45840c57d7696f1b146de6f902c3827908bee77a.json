{"sha": "45840c57d7696f1b146de6f902c3827908bee77a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4NDBjNTdkNzY5NmYxYjE0NmRlNmY5MDJjMzgyNzkwOGJlZTc3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-11T10:55:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-11T10:55:22Z"}, "message": "(putenv): New function, copied from gcc.c.\n\n(last_file_name): New variable.\n(find_a_file): Ignore name in last_file_name too.\n(main): Look at name in COLLECT_NAME and set it to the name we were called\nwith.\nPass filename used for ld to ld as argv[0].\n\nFrom-SVN: r3461", "tree": {"sha": "8b7bc70f1d976d4d41aababe8f73f4c74d333027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b7bc70f1d976d4d41aababe8f73f4c74d333027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45840c57d7696f1b146de6f902c3827908bee77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45840c57d7696f1b146de6f902c3827908bee77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45840c57d7696f1b146de6f902c3827908bee77a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45840c57d7696f1b146de6f902c3827908bee77a/comments", "author": null, "committer": null, "parents": [{"sha": "9937da1a0c1aee623a0076efba7b55a4d7aa5158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9937da1a0c1aee623a0076efba7b55a4d7aa5158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9937da1a0c1aee623a0076efba7b55a4d7aa5158"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "a8ba20f71b7575337327855dbb03998ffa69091e", "filename": "gcc/collect2.c", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45840c57d7696f1b146de6f902c3827908bee77a/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45840c57d7696f1b146de6f902c3827908bee77a/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=45840c57d7696f1b146de6f902c3827908bee77a", "patch": "@@ -450,6 +450,52 @@ choose_temp_base ()\n   temp_filename_length = strlen (temp_filename);\n }\n \f\n+/* Routine to add variables to the environment.  */\n+\n+#ifndef HAVE_PUTENV\n+\n+putenv (str)\n+     char *str;\n+{\n+#ifndef VMS\t\t\t/* nor about VMS */\n+\n+  extern char **environ;\n+  char **old_environ = environ;\n+  char **envp;\n+  int num_envs = 0;\n+  int name_len = 1;\n+  int str_len = strlen (str);\n+  char *p = str;\n+  int ch;\n+\n+  while ((ch = *p++) != '\\0' && ch != '=')\n+    name_len++;\n+\n+  if (!ch)\n+    abort ();\n+\n+  /* Search for replacing an existing environment variable, and\n+     count the number of total environment variables.  */\n+  for (envp = old_environ; *envp; envp++)\n+    {\n+      num_envs++;\n+      if (!strncmp (str, *envp, name_len))\n+\t{\n+\t  *envp = str;\n+\t  return;\n+\t}\n+    }\n+\n+  /* Add a new environment variable */\n+  environ = (char **) xmalloc (sizeof (char *) * (num_envs+2));\n+  *environ = str;\n+  bcopy (old_environ, environ+1, sizeof (char *) * (num_envs+1));\n+\n+#endif\t/* VMS */\n+}\n+\n+#endif\t/* HAVE_PUTENV */\n+\f\n /* By default, colon separates directories in a path.  */\n #ifndef PATH_SEPARATOR\n #define PATH_SEPARATOR ':'\n@@ -483,10 +529,10 @@ static struct path_prefix cpath, path;\n static char *target_machine = TARGET_MACHINE;\n #endif\n \n-/* Name under which we were executed.  Never return that file in our\n+/* Names under which we were executed.  Never return one of those files in our\n    searches.  */\n \n-static char *our_file_name;\n+static char *our_file_name, *last_file_name;\n \f\n /* Search for NAME using prefix list PPREFIX.  We only look for executable\n    files. \n@@ -523,14 +569,18 @@ find_a_file (pprefix, name)\n       {\n \tstrcpy (temp, pl->prefix);\n \tstrcat (temp, name);\n-\tif (strcmp (temp, our_file_name) != 0 && access (temp, X_OK) == 0)\n+\tif (strcmp (temp, our_file_name) != 0\n+\t    && ! (last_file_name != 0 && strcmp (temp, last_file_name) == 0)\n+\t    && access (temp, X_OK) == 0)\n \t  return temp;\n \n #ifdef EXECUTABLE_SUFFIX\n \t/* Some systems have a suffix for executable files.\n \t   So try appending that.  */\n \tstrcat (temp, EXECUTABLE_SUFFIX);\n-\tif (strcmp (temp, our_file_name) != 0 && access (temp, X_OK) == 0)\n+\tif (strcmp (temp, our_file_name) != 0\n+\t    && ! (last_file_name != 0 && strcmp (temp, last_file_name) == 0)\n+\t    && access (temp, X_OK) == 0)\n \t  return temp;\n #endif\n       }\n@@ -663,6 +713,20 @@ main (argc, argv)\n \n   our_file_name = argv[0];\n \n+  /* We must check that we do not call ourselves in an infinite\n+     recursion loop. We save the name used for us in the COLLECT_NAME\n+     environment variable, first getting the previous value.\n+\n+     To be fully safe, we need to maintain a list of names that name\n+     been used, but, in practice, two names are enough.  */\n+\n+  last_file_name = getenv (\"COLLECT_NAME\");\n+\n+  p = (char *) xcalloc (sizeof (char *),\n+\t\t\tsizeof (our_file_name) + strlen (\"COLLECT_NAME=\") + 1);\n+  sprintf (p, \"COLLECT_NAME=%s\", our_file_name);\n+  putenv (p);\n+\n   p = (char *) getenv (\"COLLECT_GCC_OPTIONS\");\n   if (p)\n     while (*p)\n@@ -820,7 +884,7 @@ main (argc, argv)\n   if (p)\n     c_file_name = p;\n \n-  *ld1++ = *ld2++ = \"ld\";\n+  *ld1++ = *ld2++ = ld_file_name;\n \n   /* Make temp file names. */\n   choose_temp_base ();"}]}