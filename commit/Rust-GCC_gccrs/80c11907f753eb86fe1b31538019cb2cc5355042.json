{"sha": "80c11907f753eb86fe1b31538019cb2cc5355042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjMTE5MDdmNzUzZWI4NmZlMWIzMTUzODAxOWNiMmNjNTM1NTA0Mg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T16:26:10Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-23T16:26:10Z"}, "message": "[AArch64] Simplify prologue expand using new helper functions.\n\nFrom-SVN: r212957", "tree": {"sha": "6f9437efc47780338b5001bd2509231275811cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9437efc47780338b5001bd2509231275811cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c11907f753eb86fe1b31538019cb2cc5355042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c11907f753eb86fe1b31538019cb2cc5355042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c11907f753eb86fe1b31538019cb2cc5355042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c11907f753eb86fe1b31538019cb2cc5355042/comments", "author": null, "committer": null, "parents": [{"sha": "8ed2fc62d4a8bf8dfd2ec080bdfd4b8119d490eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed2fc62d4a8bf8dfd2ec080bdfd4b8119d490eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed2fc62d4a8bf8dfd2ec080bdfd4b8119d490eb"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "f5b80d0d5318fed7f361c15b47d7c51fd7911727", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c11907f753eb86fe1b31538019cb2cc5355042", "patch": "@@ -1,3 +1,10 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_pushwb_pair_reg)\n+\t(aarch64_gen_storewb_pair): New helper function.\n+\t(aarch64_expand_prologue): Simplify code using new helper functions.\n+\t* config/aarch64/aarch64.md (storewb_pair<GPF:mode>_<P:mode>): Define.\n+\n 2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.md: (aarch64_save_or_restore_callee_saves):"}, {"sha": "95d484cad39cb5a62c906cfc8489f21bd5f8c58a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 43, "deletions": 35, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=80c11907f753eb86fe1b31538019cb2cc5355042", "patch": "@@ -1916,6 +1916,41 @@ aarch64_next_callee_save (unsigned regno, unsigned limit)\n   return regno;\n }\n \n+static rtx\n+aarch64_gen_storewb_pair (enum machine_mode mode, rtx base, rtx reg, rtx reg2,\n+\t\t\t  HOST_WIDE_INT adjustment)\n+{\n+  switch (mode)\n+    {\n+    case DImode:\n+      return gen_storewb_pairdi_di (base, base, reg, reg2,\n+\t\t\t\t    GEN_INT (-adjustment),\n+\t\t\t\t    GEN_INT (UNITS_PER_WORD - adjustment));\n+    case DFmode:\n+      return gen_storewb_pairdf_di (base, base, reg, reg2,\n+\t\t\t\t    GEN_INT (-adjustment),\n+\t\t\t\t    GEN_INT (UNITS_PER_WORD - adjustment));\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static void\n+aarch64_pushwb_pair_reg (enum machine_mode mode, unsigned regno1,\n+\t\t\t unsigned regno2, HOST_WIDE_INT adjustment)\n+{\n+  rtx insn;\n+  rtx reg1 = gen_rtx_REG (mode, regno1);\n+  rtx reg2 = gen_rtx_REG (mode, regno2);\n+\n+  insn = emit_insn (aarch64_gen_storewb_pair (mode, stack_pointer_rtx, reg1,\n+\t\t\t\t\t      reg2, adjustment));\n+  RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 2)) = 1;\n+\n+  RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+}\n+\n static rtx\n aarch64_gen_store_pair (enum machine_mode mode, rtx mem1, rtx reg1, rtx mem2,\n \t\t\trtx reg2)\n@@ -2183,8 +2218,6 @@ aarch64_expand_prologue (void)\n \t old frame pointer on the stack.  */\n       if (frame_pointer_needed)\n \t{\n-\t  rtx mem_fp, mem_lr;\n-\n \t  if (fp_offset)\n \t    {\n \t      insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n@@ -2195,38 +2228,12 @@ aarch64_expand_prologue (void)\n \t\t\t\t       gen_rtx_MINUS (Pmode,\n \t\t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t\t      GEN_INT (offset))));\n-\t      mem_fp = gen_frame_mem (DImode,\n-\t\t\t\t      plus_constant (Pmode,\n-\t\t\t\t\t\t     stack_pointer_rtx,\n-\t\t\t\t\t\t     fp_offset));\n-\t      mem_lr = gen_frame_mem (DImode,\n-\t\t\t\t      plus_constant (Pmode,\n-\t\t\t\t\t\t     stack_pointer_rtx,\n-\t\t\t\t\t\t     fp_offset\n-\t\t\t\t\t\t     + UNITS_PER_WORD));\n-\t      insn = emit_insn (gen_store_pairdi (mem_fp,\n-\t\t\t\t\t\t  hard_frame_pointer_rtx,\n-\t\t\t\t\t\t  mem_lr,\n-\t\t\t\t\t\t  gen_rtx_REG (DImode,\n-\t\t\t\t\t\t\t       LR_REGNUM)));\n+\n+\t      aarch64_save_callee_saves (DImode, fp_offset, R29_REGNUM,\n+\t\t\t\t\t R30_REGNUM);\n \t    }\n \t  else\n-\t    {\n-\t      insn = emit_insn (gen_storewb_pairdi_di\n-\t\t\t\t(stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t hard_frame_pointer_rtx,\n-\t\t\t\t gen_rtx_REG (DImode, LR_REGNUM),\n-\t\t\t\t GEN_INT (-offset),\n-\t\t\t\t GEN_INT (GET_MODE_SIZE (DImode) - offset)));\n-\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 2)) = 1;\n-\t    }\n-\n-\t  /* The first part of a frame-related parallel insn is always\n-\t     assumed to be relevant to the frame calculations;\n-\t     subsequent parts, are only frame-related if explicitly\n-\t     marked.  */\n-\t  RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t    aarch64_pushwb_pair_reg (DImode, R29_REGNUM, R30_REGNUM, offset);\n \n \t  /* Set up frame pointer to point to the location of the\n \t     previous frame pointer on the stack.  */\n@@ -2241,17 +2248,18 @@ aarch64_expand_prologue (void)\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  insn = emit_insn (gen_stack_tie (stack_pointer_rtx,\n \t\t\t\t\t   hard_frame_pointer_rtx));\n+\n+\t  aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM, R28_REGNUM);\n \t}\n       else\n \t{\n \t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n \t\t\t\t\t   GEN_INT (-offset)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+\t  aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM, R30_REGNUM);\n \t}\n \n-      aarch64_save_callee_saves (DImode, fp_offset, R0_REGNUM,\n-\t\t\t\t frame_pointer_needed\n-\t\t\t\t ? R28_REGNUM : R30_REGNUM);\n       aarch64_save_callee_saves (DFmode, fp_offset, V0_REGNUM, V31_REGNUM);\n     }\n "}, {"sha": "95b94646768f3567cea8106fc86e59c882d94a54", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c11907f753eb86fe1b31538019cb2cc5355042/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=80c11907f753eb86fe1b31538019cb2cc5355042", "patch": "@@ -1052,6 +1052,22 @@\n   [(set_attr \"type\" \"store2\")]\n )\n \n+(define_insn \"storewb_pair<GPF:mode>_<P:mode>\"\n+  [(parallel\n+    [(set (match_operand:P 0 \"register_operand\" \"=&k\")\n+          (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n+                  (match_operand:P 4 \"const_int_operand\" \"n\")))\n+     (set (mem:GPF (plus:P (match_dup 0)\n+                   (match_dup 4)))\n+          (match_operand:GPF 2 \"register_operand\" \"w\"))\n+     (set (mem:GPF (plus:P (match_dup 0)\n+                   (match_operand:P 5 \"const_int_operand\" \"n\")))\n+          (match_operand:GPF 3 \"register_operand\" \"w\"))])]\n+  \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPF:MODE>mode)\"\n+  \"stp\\\\t%<w>2, %<w>3, [%0, %4]!\"\n+  [(set_attr \"type\" \"neon_store1_2reg<q>\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Sign/Zero extension\n ;; -------------------------------------------------------------------"}]}