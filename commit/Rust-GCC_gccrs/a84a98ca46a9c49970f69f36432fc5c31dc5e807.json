{"sha": "a84a98ca46a9c49970f69f36432fc5c31dc5e807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0YTk4Y2E0NmE5YzQ5OTcwZjY5ZjM2NDMyZmM1YzMxZGM1ZTgwNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-02-24T18:23:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-02-24T18:23:19Z"}, "message": "error.c (dump_expr): Don't deal directly with NEW_EXPR (and VEC_NEW_EXPR), forward to pp_expression.\n\n2008-02-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* error.c (dump_expr): Don't deal directly with NEW_EXPR (and\n\tVEC_NEW_EXPR), forward to pp_expression.\n\t* cxx-pretty-print.c (pp_cxx_new_expression): Fix FIXME.\n\nFrom-SVN: r132595", "tree": {"sha": "f73f7f06b71fcec97609e731d4083690e184a7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73f7f06b71fcec97609e731d4083690e184a7f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a84a98ca46a9c49970f69f36432fc5c31dc5e807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84a98ca46a9c49970f69f36432fc5c31dc5e807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84a98ca46a9c49970f69f36432fc5c31dc5e807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84a98ca46a9c49970f69f36432fc5c31dc5e807/comments", "author": null, "committer": null, "parents": [{"sha": "98d778a6631e548dbee67cf8e2445230300a3c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d778a6631e548dbee67cf8e2445230300a3c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d778a6631e548dbee67cf8e2445230300a3c4e"}], "stats": {"total": 69, "additions": 23, "deletions": 46}, "files": [{"sha": "d4d726c4df2c2cd098b5855e4f313b5fc33982d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a84a98ca46a9c49970f69f36432fc5c31dc5e807", "patch": "@@ -1,3 +1,9 @@\n+2008-02-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* error.c (dump_expr): Don't deal directly with NEW_EXPR (and\n+\tVEC_NEW_EXPR), forward to pp_expression.\n+\t* cxx-pretty-print.c (pp_cxx_new_expression): Fix FIXME.\n+\n 2008-02-24  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR c++/34749"}, {"sha": "62ff1fc3fc3914c247ff5d809bee0f4e1c4503f4", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=a84a98ca46a9c49970f69f36432fc5c31dc5e807", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of subroutines for the GNU C++ pretty-printer.\n-   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -636,6 +636,8 @@ static void\n pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n {\n   enum tree_code code = TREE_CODE (t);\n+  tree type = TREE_OPERAND (t, 1);\n+  tree init = TREE_OPERAND (t, 2);\n   switch (code)\n     {\n     case NEW_EXPR:\n@@ -648,18 +650,22 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_call_argument_list (pp, TREE_OPERAND (t, 0));\n \t  pp_space (pp);\n \t}\n-      /* FIXME: array-types are built with one more element.  */\n-      pp_cxx_type_id (pp, TREE_OPERAND (t, 1));\n-      if (TREE_OPERAND (t, 2))\n+      if (TREE_CODE (type) == ARRAY_REF)\n+\ttype = build_cplus_array_type\n+\t  (TREE_OPERAND (type, 0),\n+\t   build_index_type (fold_build2 (MINUS_EXPR, integer_type_node,\n+\t\t\t\t\t  TREE_OPERAND (type, 1),\n+\t\t\t\t\t  integer_one_node)));\n+      pp_cxx_type_id (pp, type);\n+      if (init)\n \t{\n \t  pp_left_paren (pp);\n-\t  t = TREE_OPERAND (t, 2);\n-\t  if (TREE_CODE (t) == TREE_LIST)\n-\t    pp_c_expression_list (pp_c_base (pp), t);\n-\t  else if (t == void_zero_node)\n+\t  if (TREE_CODE (init) == TREE_LIST)\n+\t    pp_c_expression_list (pp_c_base (pp), init);\n+\t  else if (init == void_zero_node)\n \t    ;\t\t\t/* OK, empty initializer list.  */\n \t  else\n-\t    pp_cxx_expression (pp, t);\n+\t    pp_cxx_expression (pp, init);\n \t  pp_right_paren (pp);\n \t}\n       break;"}, {"sha": "678fd9dd46630ab58040b605a8172f486cb5a830", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a98ca46a9c49970f69f36432fc5c31dc5e807/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a84a98ca46a9c49970f69f36432fc5c31dc5e807", "patch": "@@ -1583,43 +1583,6 @@ dump_expr (tree t, int flags)\n       }\n       break;\n \n-    case NEW_EXPR:\n-      {\n-\ttree type = TREE_OPERAND (t, 1);\n-\ttree init = TREE_OPERAND (t, 2);\n-\tif (NEW_EXPR_USE_GLOBAL (t))\n-\t  pp_cxx_colon_colon (cxx_pp);\n-\tpp_cxx_identifier (cxx_pp, \"new\");\n-\tif (TREE_OPERAND (t, 0))\n-\t  {\n-\t    pp_cxx_left_paren (cxx_pp);\n-\t    dump_expr_list (TREE_OPERAND (t, 0), flags);\n-\t    pp_cxx_right_paren (cxx_pp);\n-\t    pp_cxx_whitespace (cxx_pp);\n-\t  }\n-\tif (TREE_CODE (type) == ARRAY_REF)\n-\t  type = build_cplus_array_type\n-\t    (TREE_OPERAND (type, 0),\n-\t     build_index_type (fold_build2 (MINUS_EXPR, integer_type_node,\n-\t\t\t\t\t    TREE_OPERAND (type, 1),\n-\t\t\t\t\t    integer_one_node)));\n-\tdump_type (type, flags);\n-\tif (init)\n-\t  {\n-\t    pp_cxx_left_paren (cxx_pp);\n-\t    if (TREE_CODE (init) == TREE_LIST)\n-\t      dump_expr_list (init, flags);\n-\t    else if (init == void_zero_node)\n-\t      /* This representation indicates an empty initializer,\n-\t\t e.g.: \"new int()\".  */\n-\t      ;\n-\t    else\n-\t      dump_expr (init, flags);\n-\t    pp_cxx_right_paren (cxx_pp);\n-\t  }\n-      }\n-      break;\n-\n     case TARGET_EXPR:\n       /* Note that this only works for G++ target exprs.  If somebody\n \t builds a general TARGET_EXPR, there's no way to represent that\n@@ -2075,6 +2038,8 @@ dump_expr (tree t, int flags)\n     case TYPEID_EXPR:\n     case MEMBER_REF:\n     case DOTSTAR_EXPR:\n+    case NEW_EXPR:\n+    case VEC_NEW_EXPR:\n     case DELETE_EXPR:\n     case VEC_DELETE_EXPR:\n     case MODOP_EXPR:"}]}