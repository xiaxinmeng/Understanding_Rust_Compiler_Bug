{"sha": "aec868578d8515763d75693c1fdfbc30ff0a1e68", "node_id": "C_kwDOANBUbNoAKGFlYzg2ODU3OGQ4NTE1NzYzZDc1NjkzYzFmZGZiYzMwZmYwYTFlNjg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-06-02T19:44:20Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-06-04T13:57:28Z"}, "message": "c++: Allow mixing GNU/std-style attributes [PR69585]\n\ncp_parser_attributes_opt doesn't accept GNU attributes followed by\n[[]] attributes and vice versa; only a sequence of attributes of the\nsame kind.  That causes grief for code like:\n\n  struct __attribute__ ((may_alias)) alignas (2) struct S { };\n\nor\n\n  #define EXPORT __attribute__((visibility(\"default\")))\n  struct [[nodiscard]] EXPORT F { };\n\nIt doesn't seem to a documented restriction, so this patch fixes the\nproblem.\n\nHowever, the patch does not touch the C FE.  The C FE doesn't have\na counterpart to C++'s cp_parser_attributes_opt -- it only has\nc_parser_transaction_attributes (which parses both GNU and [[]]\nattributes), but that's TM-specific.  The C FE seems to use either\nc_parser_gnu_attributes or c_parser_std_attribute_specifier_sequence.\nAs a consequence, this works:\n\n  [[maybe_unused]] __attribute__((deprecated)) void f2 ();\n\nbut this doesn't:\n\n  __attribute__((deprecated)) [[maybe_unused]] void f1 ();\n\nI'm not sure what, if anything, should be done about this.\n\n\tPR c++/102399\n\tPR c++/69585\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_attributes_opt): Accept GNU attributes\n\tfollowed by [[]] attributes and vice versa.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/attrib65.C: New test.\n\t* g++.dg/ext/attrib66.C: New test.\n\t* g++.dg/ext/attrib67.C: New test.", "tree": {"sha": "6d8b399e71c72fe20dd46dc97052f3a8faac6179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d8b399e71c72fe20dd46dc97052f3a8faac6179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec868578d8515763d75693c1fdfbc30ff0a1e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec868578d8515763d75693c1fdfbc30ff0a1e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec868578d8515763d75693c1fdfbc30ff0a1e68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec868578d8515763d75693c1fdfbc30ff0a1e68/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6fd2aed58f2cca99f15331bf68999c0e6df370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6fd2aed58f2cca99f15331bf68999c0e6df370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6fd2aed58f2cca99f15331bf68999c0e6df370"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "535bf7eedbbe2438ebdb97982c9baaed8afbe6f7", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=aec868578d8515763d75693c1fdfbc30ff0a1e68", "patch": "@@ -28727,9 +28727,17 @@ cp_nth_tokens_can_be_attribute_p (cp_parser *parser, size_t n)\n static tree\n cp_parser_attributes_opt (cp_parser *parser)\n {\n-  if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n-    return cp_parser_gnu_attributes_opt (parser);\n-  return cp_parser_std_attribute_spec_seq (parser);\n+  tree attrs = NULL_TREE;\n+  while (true)\n+    {\n+      if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n+\tattrs = attr_chainon (attrs, cp_parser_gnu_attributes_opt (parser));\n+      else if (cp_next_tokens_can_be_std_attribute_p (parser))\n+\tattrs = attr_chainon (attrs, cp_parser_std_attribute_spec_seq (parser));\n+      else\n+\tbreak;\n+    }\n+  return attrs;\n }\n \n /* Parse an (optional) series of attributes."}, {"sha": "0af138700f626e017552e0e8afd71cc50c206861", "filename": "gcc/testsuite/g++.dg/ext/attrib65.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib65.C?ref=aec868578d8515763d75693c1fdfbc30ff0a1e68", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/102399\n+// { dg-do compile { target c++11 } }\n+// Test mixing the GNU and standard forms of attributes.\n+\n+#define EXPORT __attribute__((visibility(\"default\")))\n+\n+struct [[nodiscard]] EXPORT Foo { Foo(); };"}, {"sha": "102ed709b1dbcc078f80e251b4d62bee2af70fab", "filename": "gcc/testsuite/g++.dg/ext/attrib66.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib66.C?ref=aec868578d8515763d75693c1fdfbc30ff0a1e68", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/69585\n+// { dg-do compile { target c++11 } }\n+\n+struct __attribute__ ((aligned (2))) __attribute__ ((may_alias))\n+S1 { };\n+\n+struct __attribute__ ((aligned (2))) [[gnu::may_alias]]\n+S2 { };\n+\n+struct alignas (2) __attribute__ ((may_alias))\n+S3 { };\n+\n+struct alignas (2) [[gnu::may_alias]]\n+S4 { };\n+\n+\n+struct __attribute__ ((may_alias)) __attribute__ ((aligned (2)))\n+S1_2 { };\n+\n+struct [[gnu::may_alias]] __attribute__ ((aligned (2)))\n+S2_2 { };\n+\n+struct __attribute__ ((may_alias)) alignas (2)\n+S3_2 { };\n+\n+struct [[gnu::may_alias]] alignas (2)\n+S4_2 { };"}, {"sha": "a51076650773761894a752eff73937811c527926", "filename": "gcc/testsuite/g++.dg/ext/attrib67.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec868578d8515763d75693c1fdfbc30ff0a1e68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib67.C?ref=aec868578d8515763d75693c1fdfbc30ff0a1e68", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/69585\n+// { dg-do compile { target c++11 } }\n+// Test mixing the GNU and standard forms of attributes.\n+\n+__attribute__((deprecated)) [[maybe_unused]] void f1 ();\n+[[maybe_unused]] __attribute__((deprecated)) void f2 ();\n+[[maybe_unused]] __attribute__((deprecated)) [[nodiscard]] int f3 ();\n+__attribute__((unused)) [[nodiscard]] __attribute__((deprecated)) int f4 ();\n+\n+struct [[maybe_unused]] __attribute__((aligned)) S1 { double d; };\n+struct __attribute__((aligned)) [[maybe_unused]] S2 { double d; };\n+\n+enum E {\n+  X [[maybe_unused]] __attribute__((unavailable)),\n+  Y  __attribute__((unavailable)) [[maybe_unused]],\n+};\n+\n+void\n+g ([[maybe_unused]] __attribute__((unavailable)) int i1,\n+   __attribute__((unavailable)) [[maybe_unused]] int i2)\n+{\n+  [[maybe_unused]] __attribute__((aligned)) int i3;\n+  __attribute__((aligned)) [[maybe_unused]] int i4;\n+\n+[[maybe_unused]]\n+lab:  __attribute__((cold));\n+}"}]}