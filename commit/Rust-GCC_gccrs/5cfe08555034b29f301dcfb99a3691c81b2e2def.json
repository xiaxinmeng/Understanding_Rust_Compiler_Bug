{"sha": "5cfe08555034b29f301dcfb99a3691c81b2e2def", "node_id": "C_kwDOANBUbNoAKDVjZmUwODU1NTAzNGIyOWYzMDFkY2ZiOTlhMzY5MWM4MWIyZTJkZWY", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-06-29T14:20:09Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-10-11T10:45:38Z"}, "message": "amdgcn: Add vec_extract for partial vectors\n\nAdd vec_extract expanders for all valid pairs of vector types.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-protos.h (get_exec): Add prototypes for two variants.\n\t* config/gcn/gcn-valu.md\n\t(vec_extract<V_ALL:mode><V_ALL_ALT:mode>): New define_expand.\n\t* config/gcn/gcn.cc (get_exec): Export the existing function. Add a\n\tnew overload variant.", "tree": {"sha": "b9e654f7c58702276a1ba1d159aec08f8726dad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e654f7c58702276a1ba1d159aec08f8726dad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cfe08555034b29f301dcfb99a3691c81b2e2def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfe08555034b29f301dcfb99a3691c81b2e2def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cfe08555034b29f301dcfb99a3691c81b2e2def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfe08555034b29f301dcfb99a3691c81b2e2def/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8753cf30486c4e7fb07455b7cae49aa812c6a4"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "f9a1fc00b4f0c1561c5b7e6ddd31282f4f849e68", "filename": "gcc/config/gcn/gcn-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h?ref=5cfe08555034b29f301dcfb99a3691c81b2e2def", "patch": "@@ -24,6 +24,8 @@ extern bool gcn_constant64_p (rtx);\n extern bool gcn_constant_p (rtx);\n extern rtx gcn_convert_mask_mode (rtx reg);\n extern unsigned int gcn_dwarf_register_number (unsigned int regno);\n+extern rtx get_exec (int64_t);\n+extern rtx get_exec (machine_mode mode);\n extern char * gcn_expand_dpp_shr_insn (machine_mode, const char *, int, int);\n extern void gcn_expand_epilogue ();\n extern rtx gcn_expand_scaled_offsets (addr_space_t as, rtx base, rtx offsets,"}, {"sha": "9ea60e1174f2f0df6eba5bdbc40a6881417000ec", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=5cfe08555034b29f301dcfb99a3691c81b2e2def", "patch": "@@ -808,6 +808,40 @@\n    (set_attr \"exec\" \"none\")\n    (set_attr \"laneselect\" \"yes\")])\n \n+(define_expand \"vec_extract<V_ALL:mode><V_ALL_ALT:mode>\"\n+  [(set (match_operand:V_ALL_ALT 0 \"register_operand\")\n+\t(vec_select:V_ALL_ALT\n+\t  (match_operand:V_ALL 1 \"register_operand\")\n+\t  (parallel [(match_operand 2 \"immediate_operand\")])))]\n+  \"MODE_VF (<V_ALL_ALT:MODE>mode) < MODE_VF (<V_ALL:MODE>mode)\n+   && <V_ALL_ALT:SCALAR_MODE>mode == <V_ALL:SCALAR_MODE>mode\"\n+  {\n+    int numlanes = GET_MODE_NUNITS (<V_ALL_ALT:MODE>mode);\n+    int firstlane = INTVAL (operands[2]) * numlanes;\n+    rtx tmp;\n+\n+    if (firstlane == 0)\n+      {\n+\t/* A plain move will do.  */\n+\ttmp = operands[1];\n+      } else {\n+        /* FIXME: optimize this by using DPP where available.  */\n+\n+        rtx permutation = gen_reg_rtx (<V_ALL:VnSI>mode);\n+\temit_insn (gen_vec_series<V_ALL:vnsi> (permutation,\n+\t\t\t\t\t       GEN_INT (firstlane*4),\n+\t\t\t\t\t       GEN_INT (4)));\n+\n+\ttmp = gen_reg_rtx (<V_ALL:MODE>mode);\n+\temit_insn (gen_ds_bpermute<V_ALL:mode> (tmp, permutation, operands[1],\n+\t\t\t\t\t\tget_exec (<V_ALL:MODE>mode)));\n+      }\n+\n+    emit_move_insn (operands[0],\n+\t\t    gen_rtx_SUBREG (<V_ALL_ALT:MODE>mode, tmp, 0));\n+    DONE;\n+  })\n+\n (define_expand \"extract_last_<mode>\"\n   [(match_operand:<SCALAR_MODE> 0 \"register_operand\")\n    (match_operand:DI 1 \"gcn_alu_operand\")"}, {"sha": "fdcf290ef8b4a6cd0bea56c5a0bbf58eb8c59218", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfe08555034b29f301dcfb99a3691c81b2e2def/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=5cfe08555034b29f301dcfb99a3691c81b2e2def", "patch": "@@ -846,14 +846,21 @@ gcn_ira_change_pseudo_allocno_class (int regno, reg_class_t cl,\n /* Create a new DImode pseudo reg and emit an instruction to initialize\n    it to VAL.  */\n \n-static rtx\n+rtx\n get_exec (int64_t val)\n {\n   rtx reg = gen_reg_rtx (DImode);\n   emit_insn (gen_rtx_SET (reg, gen_int_mode (val, DImode)));\n   return reg;\n }\n \n+rtx\n+get_exec (machine_mode mode)\n+{\n+  int vf = (VECTOR_MODE_P (mode) ? GET_MODE_NUNITS (mode) : 1);\n+  return get_exec (0xffffffffffffffffUL >> (64-vf));\n+}\n+\n /* }}}  */\n /* {{{ Immediate constants.  */\n "}]}