{"sha": "b2713e9f16d3f3597d71e4be6384ecd788684936", "node_id": "C_kwDOANBUbNoAKGIyNzEzZTlmMTZkM2YzNTk3ZDcxZTRiZTYzODRlY2Q3ODg2ODQ5MzY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-09T19:16:32Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-09T19:16:32Z"}, "message": "Fortran: accept both old and new-style relational operators in USE, ONLY\n\nF2018:10.1.5.5.1(2) requires the same interpretation of old and new-style\nrelational operators.  As gfortran internally distinguishes between\nthese versions, we must match equivalent notations in\n\tUSE module, ONLY: OPERATOR(op)\nstatements when reading modules.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/65454\n\t* module.c (read_module): Handle old and new-style relational\n\toperators when used in USE module, ONLY: OPERATOR(op).\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/65454\n\t* gfortran.dg/interface_operator_3.f90: New test.", "tree": {"sha": "d4c09d26a8eb6c2ccc7b234fbb13376aec327e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4c09d26a8eb6c2ccc7b234fbb13376aec327e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2713e9f16d3f3597d71e4be6384ecd788684936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2713e9f16d3f3597d71e4be6384ecd788684936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2713e9f16d3f3597d71e4be6384ecd788684936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2713e9f16d3f3597d71e4be6384ecd788684936/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3014326fb883a96601a4dde295858d715289a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3014326fb883a96601a4dde295858d715289a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3014326fb883a96601a4dde295858d715289a7"}], "stats": {"total": 207, "additions": 203, "deletions": 4}, "files": [{"sha": "7b98ba539d6b33c0c8c30cbddbefb5fc94e2f88a", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2713e9f16d3f3597d71e4be6384ecd788684936/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2713e9f16d3f3597d71e4be6384ecd788684936/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=b2713e9f16d3f3597d71e4be6384ecd788684936", "patch": "@@ -5592,25 +5592,83 @@ read_module (void)\n \n   for (i = GFC_INTRINSIC_BEGIN; i != GFC_INTRINSIC_END; i++)\n     {\n+      gfc_use_rename *u = NULL, *v = NULL;\n+      int j = i;\n+\n       if (i == INTRINSIC_USER)\n \tcontinue;\n \n       if (only_flag)\n \t{\n \t  u = find_use_operator ((gfc_intrinsic_op) i);\n \n-\t  if (u == NULL)\n+\t  /* F2018:10.1.5.5.1 requires same interpretation of old and new-style\n+\t     relational operators.  Special handling for USE, ONLY.  */\n+\t  switch (i)\n+\t    {\n+\t    case INTRINSIC_EQ:\n+\t      j = INTRINSIC_EQ_OS;\n+\t      break;\n+\t    case INTRINSIC_EQ_OS:\n+\t      j = INTRINSIC_EQ;\n+\t      break;\n+\t    case INTRINSIC_NE:\n+\t      j = INTRINSIC_NE_OS;\n+\t      break;\n+\t    case INTRINSIC_NE_OS:\n+\t      j = INTRINSIC_NE;\n+\t      break;\n+\t    case INTRINSIC_GT:\n+\t      j = INTRINSIC_GT_OS;\n+\t      break;\n+\t    case INTRINSIC_GT_OS:\n+\t      j = INTRINSIC_GT;\n+\t      break;\n+\t    case INTRINSIC_GE:\n+\t      j = INTRINSIC_GE_OS;\n+\t      break;\n+\t    case INTRINSIC_GE_OS:\n+\t      j = INTRINSIC_GE;\n+\t      break;\n+\t    case INTRINSIC_LT:\n+\t      j = INTRINSIC_LT_OS;\n+\t      break;\n+\t    case INTRINSIC_LT_OS:\n+\t      j = INTRINSIC_LT;\n+\t      break;\n+\t    case INTRINSIC_LE:\n+\t      j = INTRINSIC_LE_OS;\n+\t      break;\n+\t    case INTRINSIC_LE_OS:\n+\t      j = INTRINSIC_LE;\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\n+\t  if (j != i)\n+\t    v = find_use_operator ((gfc_intrinsic_op) j);\n+\n+\t  if (u == NULL && v == NULL)\n \t    {\n \t      skip_list ();\n \t      continue;\n \t    }\n \n-\t  u->found = 1;\n+\t  if (u)\n+\t    u->found = 1;\n+\t  if (v)\n+\t    v->found = 1;\n \t}\n \n       mio_interface (&gfc_current_ns->op[i]);\n-      if (u && !gfc_current_ns->op[i])\n-\tu->found = 0;\n+      if (!gfc_current_ns->op[i] && !gfc_current_ns->op[j])\n+\t{\n+\t  if (u)\n+\t    u->found = 0;\n+\t  if (v)\n+\t    v->found = 0;\n+\t}\n     }\n \n   mio_rparen ();"}, {"sha": "6a580b2f1cf18fa6c5793f916496b9b282ecd7d8", "filename": "gcc/testsuite/gfortran.dg/interface_operator_3.f90", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2713e9f16d3f3597d71e4be6384ecd788684936/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_operator_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2713e9f16d3f3597d71e4be6384ecd788684936/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_operator_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_operator_3.f90?ref=b2713e9f16d3f3597d71e4be6384ecd788684936", "patch": "@@ -0,0 +1,141 @@\n+! { dg-do compile }\n+! PR fortran/65454 - accept both old and new-style relational operators\n+\n+module m\n+  implicit none\n+  private :: t1\n+  type t1\n+     integer :: i\n+  end type t1\n+  interface operator (==)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (/=)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (<=)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (<)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (>=)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (>)\n+     module procedure :: my_cmp\n+  end interface\n+contains\n+  elemental function my_cmp (a, b) result (c)\n+    type(t1), intent(in) :: a, b\n+    logical              :: c\n+    c = a%i == b%i\n+  end function my_cmp\n+end module m\n+\n+module m_os\n+  implicit none\n+  private :: t2\n+  type t2\n+     integer :: i\n+  end type t2\n+  interface operator (.eq.)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (.ne.)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (.le.)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (.lt.)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (.ge.)\n+     module procedure :: my_cmp\n+  end interface\n+  interface operator (.gt.)\n+     module procedure :: my_cmp\n+  end interface\n+contains\n+  elemental function my_cmp (a, b) result (c)\n+    type(t2), intent(in) :: a, b\n+    logical              :: c\n+    c = a%i .eq. b%i\n+  end function my_cmp\n+end module m_os\n+\n+! new style only\n+module m1\n+  use m,    only: operator(==), operator(/=)\n+  use m,    only: operator(<=), operator(<)\n+  use m,    only: operator(>=), operator(>)\n+end module m1\n+\n+! old -> new style\n+module m2\n+  use m_os, only: operator(==), operator(/=)\n+  use m_os, only: operator(<=), operator(<)\n+  use m_os, only: operator(>=), operator(>)\n+end module m2\n+\n+! new -> old style\n+module m3\n+  use m,    only: operator(.eq.), operator(.ne.)\n+  use m,    only: operator(.le.), operator(.lt.)\n+  use m,    only: operator(.ge.), operator(.gt.)\n+end module m3\n+\n+! old style only\n+module m4\n+  use m_os, only: operator(.eq.), operator(.ne.)\n+  use m_os, only: operator(.le.), operator(.lt.)\n+  use m_os, only: operator(.ge.), operator(.gt.)\n+end module m4\n+\n+! new -> all styles\n+module m5\n+  use m,    only: operator(.eq.), operator(.ne.), operator(==), operator(/=)\n+  use m,    only: operator(.le.), operator(.lt.), operator(<=), operator(<)\n+  use m,    only: operator(.ge.), operator(.gt.), operator(>=), operator(>)\n+end module m5\n+\n+! old -> all styles\n+module m6\n+  use m_os, only: operator(.eq.), operator(.ne.), operator(==), operator(/=)\n+  use m_os, only: operator(.le.), operator(.lt.), operator(<=), operator(<)\n+  use m_os, only: operator(.ge.), operator(.gt.), operator(>=), operator(>)\n+end module m6\n+\n+! all -> all styles\n+module m7\n+  use m,    only: operator(.eq.), operator(.ne.), operator(==), operator(/=)\n+  use m,    only: operator(.le.), operator(.lt.), operator(<=), operator(<)\n+  use m,    only: operator(.ge.), operator(.gt.), operator(>=), operator(>)\n+  use m_os, only: operator(.eq.), operator(.ne.), operator(==), operator(/=)\n+  use m_os, only: operator(.le.), operator(.lt.), operator(<=), operator(<)\n+  use m_os, only: operator(.ge.), operator(.gt.), operator(>=), operator(>)\n+end module m7\n+\n+module m_eq\n+  implicit none\n+  private :: t3\n+  type t3\n+     integer :: i\n+  end type t3\n+  interface operator (==)\n+     module procedure :: my_cmp\n+  end interface\n+contains\n+  elemental function my_cmp (a, b) result (c)\n+    type(t3), intent(in) :: a, b\n+    logical              :: c\n+    c = a%i == b%i\n+  end function my_cmp\n+end module m_eq\n+\n+module m8\n+  use m_eq, only: operator(==), operator(.eq.)\n+  use m_eq, only: operator(/=)   ! { dg-error \"operator ./=. referenced\" }\n+  use m_eq, only: operator(.ne.) ! { dg-error \"operator .\\.ne\\.. referenced\" }\n+end module m8"}]}