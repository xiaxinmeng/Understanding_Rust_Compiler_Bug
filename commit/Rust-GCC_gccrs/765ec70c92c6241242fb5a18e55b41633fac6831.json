{"sha": "765ec70c92c6241242fb5a18e55b41633fac6831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1ZWM3MGM5MmM2MjQxMjQyZmI1YTE4ZTU1YjQxNjMzZmFjNjgzMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-01-14T21:11:05Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-01-14T21:11:05Z"}, "message": "re PR middle-end/38431 ([graphite] several ICEs with CP2K (summary))\n\n2009-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/38431\n\t* graphite.c (get_vdef_before_scop, scop_adjust_vphi): New.\n\t(scop_adjust_phis_for_liveouts): Call scop_adjust_vphi.\n\t(gloog): Do not call cleanup_tree_cfg.\n\t(graphite_transform_loops): Call cleanup_tree_cfg after all \n\tscops have been code generated.\n\nFrom-SVN: r143384", "tree": {"sha": "ec69646ad57e2917609ba8f01bf143c5339f1e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec69646ad57e2917609ba8f01bf143c5339f1e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765ec70c92c6241242fb5a18e55b41633fac6831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765ec70c92c6241242fb5a18e55b41633fac6831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765ec70c92c6241242fb5a18e55b41633fac6831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765ec70c92c6241242fb5a18e55b41633fac6831/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bdfeb38540b0d455f167ddc7429816924b808b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdfeb38540b0d455f167ddc7429816924b808b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdfeb38540b0d455f167ddc7429816924b808b6"}], "stats": {"total": 94, "additions": 90, "deletions": 4}, "files": [{"sha": "1f67c45500e2e5b579877b6d52e18ba4b11fb39f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765ec70c92c6241242fb5a18e55b41633fac6831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765ec70c92c6241242fb5a18e55b41633fac6831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=765ec70c92c6241242fb5a18e55b41633fac6831", "patch": "@@ -1,3 +1,12 @@\n+2009-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/38431\n+\t* graphite.c (get_vdef_before_scop, scop_adjust_vphi): New.\n+\t(scop_adjust_phis_for_liveouts): Call scop_adjust_vphi.\n+\t(gloog): Do not call cleanup_tree_cfg.\n+\t(graphite_transform_loops): Call cleanup_tree_cfg after all \n+\tscops have been code generated.\n+\n 2009-01-14  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* testsuite/g++.dg/torture/pr38811.C: New file."}, {"sha": "116349b72022939e342fc96185f2ce664f9b9a1c", "filename": "gcc/graphite.c", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765ec70c92c6241242fb5a18e55b41633fac6831/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765ec70c92c6241242fb5a18e55b41633fac6831/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=765ec70c92c6241242fb5a18e55b41633fac6831", "patch": "@@ -5172,6 +5172,82 @@ scop_insert_phis_for_liveouts (sese region, basic_block bb,\n   update_ssa (TODO_update_ssa);\n }\n \n+/* Get the definition of NAME before the SCOP.  Keep track of the\n+   basic blocks that have been VISITED in a bitmap.  */\n+\n+static tree\n+get_vdef_before_scop (scop_p scop, tree name, sbitmap visited)\n+{\n+  unsigned i;\n+  gimple def_stmt = SSA_NAME_DEF_STMT (name);\n+  basic_block def_bb = gimple_bb (def_stmt);\n+\n+  if (!bb_in_scop_p (def_bb, scop))\n+    return name;\n+\n+  if (TEST_BIT (visited, def_bb->index))\n+    return NULL_TREE;\n+\n+  SET_BIT (visited, def_bb->index);\n+\n+  switch (gimple_code (def_stmt))\n+    {\n+    case GIMPLE_PHI:\n+      for (i = 0; i < gimple_phi_num_args (def_stmt); i++)\n+\t{\n+\t  tree arg = gimple_phi_arg_def (def_stmt, i);\n+\t  tree res = get_vdef_before_scop (scop, arg, visited);\n+\t  if (res)\n+\t    return res;\n+\t}\n+      return NULL_TREE;\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n+/* Adjust a virtual phi node PHI that is placed at the end of the\n+   generated code for SCOP:\n+\n+   | if (1)\n+   |   generated code from REGION;\n+   | else\n+   |   REGION;\n+\n+   The FALSE_E edge comes from the original code, TRUE_E edge comes\n+   from the code generated for the SCOP.  */\n+\n+static void\n+scop_adjust_vphi (scop_p scop, gimple phi, edge true_e)\n+{\n+  unsigned i;\n+\n+  gcc_assert (gimple_phi_num_args (phi) == 2);\n+\n+  for (i = 0; i < gimple_phi_num_args (phi); i++)\n+    if (gimple_phi_arg_edge (phi, i) == true_e)\n+      {\n+\ttree true_arg, false_arg, before_scop_arg;\n+\tsbitmap visited;\n+\n+\ttrue_arg = gimple_phi_arg_def (phi, i);\n+\tif (!SSA_NAME_IS_DEFAULT_DEF (true_arg))\n+\t  return;\n+\n+\tfalse_arg = gimple_phi_arg_def (phi, i == 0 ? 1 : 0);\n+\tif (SSA_NAME_IS_DEFAULT_DEF (false_arg))\n+\t  return;\n+\n+\tvisited = sbitmap_alloc (last_basic_block);\n+\tsbitmap_zero (visited);\n+\tbefore_scop_arg = get_vdef_before_scop (scop, false_arg, visited);\n+\tgcc_assert (before_scop_arg != NULL_TREE);\n+\tSET_PHI_ARG_DEF (phi, i, before_scop_arg);\n+\tsbitmap_free (visited);\n+      }\n+}\n+\n /* Adjusts the phi nodes in the block BB for variables defined in\n    SCOP_REGION and used outside the SCOP_REGION.  The code generation\n    moves SCOP_REGION in the else clause of an \"if (1)\" and generates\n@@ -5198,7 +5274,10 @@ scop_adjust_phis_for_liveouts (scop_p scop, basic_block bb, edge false_e,\n       gimple phi = gsi_stmt (si);\n \n       if (!is_gimple_reg (PHI_RESULT (phi)))\n-\tcontinue;\n+\t{\n+\t  scop_adjust_vphi (scop, phi, true_e);\n+\t  continue;\n+\t}\n \n       for (i = 0; i < gimple_phi_num_args (phi); i++)\n \tif (gimple_phi_arg_edge (phi, i) == false_e)\n@@ -5380,9 +5459,6 @@ gloog (scop_p scop, struct clast_stmt *stmt)\n \n   recompute_all_dominators ();\n   graphite_verify ();\n-  cleanup_tree_cfg ();\n-  recompute_all_dominators ();\n-  graphite_verify ();\n }\n \n /* Returns the number of data references in SCOP.  */\n@@ -6076,6 +6152,7 @@ graphite_transform_loops (void)\n     }\n \n   /* Cleanup.  */\n+  cleanup_tree_cfg ();\n   free_scops (current_scops);\n   cloog_finalize ();\n   free_original_copy_tables ();"}]}