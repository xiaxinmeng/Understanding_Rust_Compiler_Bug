{"sha": "ca752f3929677221a5806daf4940367308fc16d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3NTJmMzkyOTY3NzIyMWE1ODA2ZGFmNDk0MDM2NzMwOGZjMTZkNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:06:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:06:36Z"}, "message": "hash-traits.h (ggc_hasher): Rename to...\n\ngcc/\n\t* hash-traits.h (ggc_hasher): Rename to...\n\t(ggc_remover): ...this and remove typedefs.\n\t(ggc_cache_hasher): Update accordingly.  Add typedefs.\n\t(ggc_ptr_hash): New class.\n\t* hash-table.h: Update comment.\n\t* cfgloop.h (loop_exit_hasher): Inherit from ggc_ptr_hash rather than\n\tggc_hasher.\n\t* cgraph.h (section_name_hasher, cgraph_edge_hasher): Likewise.\n\t(tree_descriptor_hasher): Likewise.\n\t* cgraph.c (function_version_hasher): Likewise.\n\t* dwarf2out.c (indirect_string_hasher, dwarf_file_hasher): Likewise.\n\t(decl_die_hasher, block_die_hasher, decl_loc_hasher): Likewise.\n\t(dw_loc_list_hasher, addr_hasher): Likewise.\n\t* function.h (used_type_hasher): Likewise.\n\t* function.c (temp_address_hasher): Likewise.\n\t* gimple-ssa.h (tm_restart_hasher, ssa_name_hasher): Likewise.\n\t* libfuncs.h (libfunc_hasher): Likewise.\n\t* lto-streamer.h (decl_state_hasher): Likewise.\n\t* optabs.c (libfunc_decl_hasher): Likewise.\n\t* tree-scalar-evolution.c (scev_info_hasher): Likewise.\n\t* varasm.c (section_hasher, object_block_hasher): Likewise.\n\t(const_rtx_desc_hasher): Likewise.\n\t* config/darwin.c (indirection_hasher, cfstring_hasher): Likewise.\n\t* config/rs6000/rs6000.c (toc_hasher, builtin_hasher): Likewise.\n\ngcc/c-family/\n\t* c-common.c (c_type_hasher): Inherit from ggc_ptr_hash rather than\n\tggc_hasher.\n\ngcc/cp/\n\t* constexpr.c (constexpr_fundef_hasher): Inherit from ggc_ptr_hash\n\trather than ggc_hasher.\n\t(constexpr_call_hasher): Likewise.\n\t* cp-tree.h (cxx_int_tree_map_hasher, named_label_hasher): Likewise.\n\t* decl.c (typename_hasher): Likewise.\n\t* mangle.c (conv_type_hasher): Likewise.\n\t* pt.c (spec_hasher): Likewise.\n\t* tree.c (cplus_array_hasher, list_hasher): Likewise.\n\t* typeck2.c (abstract_type_hasher): Likewise.\n\ngcc/fortran/\n\t* trans-decl.c (module_hasher): Likewise.\n\t* trans.h (module_decl_hasher): Likewise.\n\ngcc/java/\n\t* java-tree.h (treetreehasher): Inherit from ggc_ptr_hash\n\trather than ggc_hasher.\n\t(ict_hasher, type_assertion_hasher): Likewise.\n\ngcc/objc/\n\t* objc-act.c (objc_string_hasher): Inherit from ggc_ptr_hash\n\trather than ggc_hasher.\n\nFrom-SVN: r224959", "tree": {"sha": "d35764dd52f6e222b536f1063b2e147b652cc9b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d35764dd52f6e222b536f1063b2e147b652cc9b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca752f3929677221a5806daf4940367308fc16d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca752f3929677221a5806daf4940367308fc16d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca752f3929677221a5806daf4940367308fc16d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca752f3929677221a5806daf4940367308fc16d7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95fbe13e99744b36691495fd81934ccee963c0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fbe13e99744b36691495fd81934ccee963c0a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fbe13e99744b36691495fd81934ccee963c0a3"}], "stats": {"total": 175, "additions": 123, "deletions": 52}, "files": [{"sha": "9737e4ada5c8ac1fde1ee3dad726521e22f66e04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,30 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (ggc_hasher): Rename to...\n+\t(ggc_remover): ...this and remove typedefs.\n+\t(ggc_cache_hasher): Update accordingly.  Add typedefs.\n+\t(ggc_ptr_hash): New class.\n+\t* hash-table.h: Update comment.\n+\t* cfgloop.h (loop_exit_hasher): Inherit from ggc_ptr_hash rather than\n+\tggc_hasher.\n+\t* cgraph.h (section_name_hasher, cgraph_edge_hasher): Likewise.\n+\t(tree_descriptor_hasher): Likewise.\n+\t* cgraph.c (function_version_hasher): Likewise.\n+\t* dwarf2out.c (indirect_string_hasher, dwarf_file_hasher): Likewise.\n+\t(decl_die_hasher, block_die_hasher, decl_loc_hasher): Likewise.\n+\t(dw_loc_list_hasher, addr_hasher): Likewise.\n+\t* function.h (used_type_hasher): Likewise.\n+\t* function.c (temp_address_hasher): Likewise.\n+\t* gimple-ssa.h (tm_restart_hasher, ssa_name_hasher): Likewise.\n+\t* libfuncs.h (libfunc_hasher): Likewise.\n+\t* lto-streamer.h (decl_state_hasher): Likewise.\n+\t* optabs.c (libfunc_decl_hasher): Likewise.\n+\t* tree-scalar-evolution.c (scev_info_hasher): Likewise.\n+\t* varasm.c (section_hasher, object_block_hasher): Likewise.\n+\t(const_rtx_desc_hasher): Likewise.\n+\t* config/darwin.c (indirection_hasher, cfstring_hasher): Likewise.\n+\t* config/rs6000/rs6000.c (toc_hasher, builtin_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (free_ptr_hash): New class."}, {"sha": "780d916b7d73346a16697e919bf4c9ea49079d12", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-common.c (c_type_hasher): Inherit from ggc_ptr_hash rather than\n+\tggc_hasher.\n+\n 2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* cilk.c: Move calls.h after tm.h in the include chain."}, {"sha": "18026306f32f2971721cb0a7e35d8ef0542410f0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -5089,7 +5089,7 @@ c_apply_type_quals_to_decl (int type_quals, tree decl)\n     }\n }\n \n-struct c_type_hasher : ggc_hasher<tree>\n+struct c_type_hasher : ggc_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree);\n   static bool equal (tree, tree);"}, {"sha": "fe3bb921ea46f91730c09982fd51037ce1394297", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -85,7 +85,7 @@ struct GTY ((for_user)) loop_exit {\n   struct loop_exit *next_e;\n };\n \n-struct loop_exit_hasher : ggc_hasher<loop_exit *>\n+struct loop_exit_hasher : ggc_ptr_hash<loop_exit>\n {\n   typedef edge compare_type;\n "}, {"sha": "698f56ea549330dfb7a351264f4a906dc91fd1a0", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -126,7 +126,7 @@ struct cgraph_2node_hook_list {\n \n /* Hash descriptor for cgraph_function_version_info.  */\n \n-struct function_version_hasher : ggc_hasher<cgraph_function_version_info *>\n+struct function_version_hasher : ggc_ptr_hash<cgraph_function_version_info>\n {\n   static hashval_t hash (cgraph_function_version_info *);\n   static bool equal (cgraph_function_version_info *,"}, {"sha": "d4cb94d49501dae9a50470ed460fa06bd041c7c5", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -44,7 +44,7 @@ struct GTY((for_user)) section_hash_entry_d\n \n typedef struct section_hash_entry_d section_hash_entry;\n \n-struct section_name_hasher : ggc_hasher<section_hash_entry *>\n+struct section_name_hasher : ggc_ptr_hash<section_hash_entry>\n {\n   typedef const char *compare_type;\n \n@@ -769,7 +769,7 @@ enum cgraph_inline_failed_type_t\n \n struct cgraph_edge;\n \n-struct cgraph_edge_hasher : ggc_hasher<cgraph_edge *>\n+struct cgraph_edge_hasher : ggc_ptr_hash<cgraph_edge>\n {\n   typedef gimple compare_type;\n \n@@ -2801,7 +2801,7 @@ varpool_node::all_refs_explicit_p ()\n \t  && !force_output);\n }\n \n-struct tree_descriptor_hasher : ggc_hasher<constant_descriptor_tree *>\n+struct tree_descriptor_hasher : ggc_ptr_hash<constant_descriptor_tree>\n {\n   static hashval_t hash (constant_descriptor_tree *);\n   static bool equal (constant_descriptor_tree *, constant_descriptor_tree *);"}, {"sha": "93c6d6734b34c99f9d434bfb5568a6c9e18135d0", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -477,7 +477,7 @@ typedef struct GTY ((for_user)) machopic_indirection\n   bool used;\n } machopic_indirection;\n \n-struct indirection_hasher : ggc_hasher<machopic_indirection *>\n+struct indirection_hasher : ggc_ptr_hash<machopic_indirection>\n {\n   typedef const char *compare_type;\n   static hashval_t hash (machopic_indirection *);\n@@ -3271,7 +3271,7 @@ typedef struct GTY ((for_user)) cfstring_descriptor {\n   tree constructor;\n } cfstring_descriptor;\n \n-struct cfstring_hasher : ggc_hasher<cfstring_descriptor *>\n+struct cfstring_hasher : ggc_ptr_hash<cfstring_descriptor>\n {\n   static hashval_t hash (cfstring_descriptor *);\n   static bool equal (cfstring_descriptor *, cfstring_descriptor *);"}, {"sha": "38442ec3b146f5fec639e6a407a46832c68a7700", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1228,7 +1228,7 @@ struct GTY((for_user)) toc_hash_struct\n   int labelno;\n };\n \n-struct toc_hasher : ggc_hasher<toc_hash_struct *>\n+struct toc_hasher : ggc_ptr_hash<toc_hash_struct>\n {\n   static hashval_t hash (toc_hash_struct *);\n   static bool equal (toc_hash_struct *, toc_hash_struct *);\n@@ -1245,7 +1245,7 @@ struct GTY((for_user)) builtin_hash_struct\n   unsigned char uns_p[4];\t/* and whether the types are unsigned.  */\n };\n \n-struct builtin_hasher : ggc_hasher<builtin_hash_struct *>\n+struct builtin_hasher : ggc_ptr_hash<builtin_hash_struct>\n {\n   static hashval_t hash (builtin_hash_struct *);\n   static bool equal (builtin_hash_struct *, builtin_hash_struct *);"}, {"sha": "338e21e1862eb055e9351d1b9b5ac569b79125ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,15 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* constexpr.c (constexpr_fundef_hasher): Inherit from ggc_ptr_hash\n+\trather than ggc_hasher.\n+\t(constexpr_call_hasher): Likewise.\n+\t* cp-tree.h (cxx_int_tree_map_hasher, named_label_hasher): Likewise.\n+\t* decl.c (typename_hasher): Likewise.\n+\t* mangle.c (conv_type_hasher): Likewise.\n+\t* pt.c (spec_hasher): Likewise.\n+\t* tree.c (cplus_array_hasher, list_hasher): Likewise.\n+\t* typeck2.c (abstract_type_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* class.c (fixed_type_or_null_ref_ht): Inherit from nofree_ptr_hash"}, {"sha": "9cb45eade41aa9c338f867251ab7a8f63f4124e1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -123,7 +123,7 @@ struct GTY((for_user)) constexpr_fundef {\n   tree body;\n };\n \n-struct constexpr_fundef_hasher : ggc_hasher<constexpr_fundef *>\n+struct constexpr_fundef_hasher : ggc_ptr_hash<constexpr_fundef>\n {\n   static hashval_t hash (constexpr_fundef *);\n   static bool equal (constexpr_fundef *, constexpr_fundef *);\n@@ -872,7 +872,7 @@ struct GTY((for_user)) constexpr_call {\n   hashval_t hash;\n };\n \n-struct constexpr_call_hasher : ggc_hasher<constexpr_call *>\n+struct constexpr_call_hasher : ggc_ptr_hash<constexpr_call>\n {\n   static hashval_t hash (constexpr_call *);\n   static bool equal (constexpr_call *, constexpr_call *);"}, {"sha": "e8cc38f97e6bf07e8359de26f79c7f8b337c1f72", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1181,15 +1181,15 @@ struct GTY((for_user)) cxx_int_tree_map {\n   tree to;\n };\n \n-struct cxx_int_tree_map_hasher : ggc_hasher<cxx_int_tree_map *>\n+struct cxx_int_tree_map_hasher : ggc_ptr_hash<cxx_int_tree_map>\n {\n   static hashval_t hash (cxx_int_tree_map *);\n   static bool equal (cxx_int_tree_map *, cxx_int_tree_map *);\n };\n \n struct named_label_entry;\n \n-struct named_label_hasher : ggc_hasher<named_label_entry *>\n+struct named_label_hasher : ggc_ptr_hash<named_label_entry>\n {\n   static hashval_t hash (named_label_entry *);\n   static bool equal (named_label_entry *, named_label_entry *);"}, {"sha": "545f4cd9078bbde51661c39f8fcf48dfca16e4d2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -3331,7 +3331,7 @@ struct typename_info {\n   bool class_p;\n };\n \n-struct typename_hasher : ggc_hasher<tree>\n+struct typename_hasher : ggc_ptr_hash<tree_node>\n {\n   typedef typename_info *compare_type;\n "}, {"sha": "2fdc4b20bcef442707080fbfb42e761448b3a154", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -3841,7 +3841,7 @@ mangle_thunk (tree fn_decl, const int this_adjusting, tree fixed_offset,\n   return result;\n }\n \n-struct conv_type_hasher : ggc_hasher<tree>\n+struct conv_type_hasher : ggc_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree);\n   static bool equal (tree, tree);"}, {"sha": "fe5fc1447426e8698431f7b385ddf2a9747da2f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -89,7 +89,7 @@ struct GTY((for_user)) spec_entry\n   tree spec;\n };\n \n-struct spec_hasher : ggc_hasher<spec_entry *>\n+struct spec_hasher : ggc_ptr_hash<spec_entry>\n {\n   static hashval_t hash (spec_entry *);\n   static bool equal (spec_entry *, spec_entry *);"}, {"sha": "f373ddde77b330418a6d805e1c16feb9861cd339", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -734,7 +734,7 @@ struct cplus_array_info\n   tree domain;\n };\n \n-struct cplus_array_hasher : ggc_hasher<tree>\n+struct cplus_array_hasher : ggc_ptr_hash<tree_node>\n {\n   typedef cplus_array_info *compare_type;\n \n@@ -1712,7 +1712,7 @@ struct list_proxy\n   tree chain;\n };\n \n-struct list_hasher : ggc_hasher<tree>\n+struct list_hasher : ggc_ptr_hash<tree_node>\n {\n   typedef list_proxy *compare_type;\n "}, {"sha": "30d93ed39faab32f7431ca0c6d9183ac61f1bd90", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -156,7 +156,7 @@ struct GTY((chain_next (\"%h.next\"), for_user)) pending_abstract_type {\n   struct pending_abstract_type* next;\n };\n \n-struct abstract_type_hasher : ggc_hasher<pending_abstract_type *>\n+struct abstract_type_hasher : ggc_ptr_hash<pending_abstract_type>\n {\n   typedef tree compare_type;\n   static hashval_t hash (pending_abstract_type *);"}, {"sha": "0f08daacf13ed911f406e693a7e57828024a3f93", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -220,7 +220,7 @@ struct GTY((for_user)) indirect_string_node {\n   unsigned int index;\n };\n \n-struct indirect_string_hasher : ggc_hasher<indirect_string_node *>\n+struct indirect_string_hasher : ggc_ptr_hash<indirect_string_node>\n {\n   typedef const char *compare_type;\n \n@@ -2796,7 +2796,7 @@ static GTY(()) limbo_die_node *limbo_die_list;\n    DW_AT_{,MIPS_}linkage_name once their DECL_ASSEMBLER_NAMEs are set.  */\n static GTY(()) limbo_die_node *deferred_asm_name;\n \n-struct dwarf_file_hasher : ggc_hasher<dwarf_file_data *>\n+struct dwarf_file_hasher : ggc_ptr_hash<dwarf_file_data>\n {\n   typedef const char *compare_type;\n \n@@ -2807,7 +2807,7 @@ struct dwarf_file_hasher : ggc_hasher<dwarf_file_data *>\n /* Filenames referenced by this compilation unit.  */\n static GTY(()) hash_table<dwarf_file_hasher> *file_table;\n \n-struct decl_die_hasher : ggc_hasher<die_node *>\n+struct decl_die_hasher : ggc_ptr_hash<die_node>\n {\n   typedef tree compare_type;\n \n@@ -2818,7 +2818,7 @@ struct decl_die_hasher : ggc_hasher<die_node *>\n    The key is a DECL_UID() which is a unique number identifying each decl.  */\n static GTY (()) hash_table<decl_die_hasher> *decl_die_table;\n \n-struct block_die_hasher : ggc_hasher<die_struct *>\n+struct block_die_hasher : ggc_ptr_hash<die_struct>\n {\n   static hashval_t hash (die_struct *);\n   static bool equal (die_struct *, die_struct *);\n@@ -2882,7 +2882,7 @@ struct GTY ((chain_next (\"%h.next\"))) call_arg_loc_node {\n };\n \n \n-struct decl_loc_hasher : ggc_hasher<var_loc_list *>\n+struct decl_loc_hasher : ggc_ptr_hash<var_loc_list>\n {\n   typedef const_tree compare_type;\n \n@@ -2912,7 +2912,7 @@ struct GTY ((for_user)) cached_dw_loc_list_def {\n };\n typedef struct cached_dw_loc_list_def cached_dw_loc_list;\n \n-struct dw_loc_list_hasher : ggc_hasher<cached_dw_loc_list *>\n+struct dw_loc_list_hasher : ggc_ptr_hash<cached_dw_loc_list>\n {\n \n   typedef const_tree compare_type;\n@@ -4238,7 +4238,7 @@ AT_loc_list_ptr (dw_attr_ref a)\n   return &a->dw_attr_val.v.val_loc_list;\n }\n \n-struct addr_hasher : ggc_hasher<addr_table_entry *>\n+struct addr_hasher : ggc_ptr_hash<addr_table_entry>\n {\n   static hashval_t hash (addr_table_entry *);\n   static bool equal (addr_table_entry *, addr_table_entry *);"}, {"sha": "42a3064aa9d57de60100872aa6550a58f40f1329", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* trans-decl.c (module_hasher): Likewise.\n+\t* trans.h (module_decl_hasher): Likewise.\n+\n 2015-06-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/66528"}, {"sha": "09cdcd0a3ce7263b626b9709982155806ff5ea81", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -4360,7 +4360,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n   gfc_add_init_cleanup (block, gfc_finish_block (&tmpblock), NULL_TREE);\n }\n \n-struct module_hasher : ggc_hasher<module_htab_entry *>\n+struct module_hasher : ggc_ptr_hash<module_htab_entry>\n {\n   typedef const char *compare_type;\n "}, {"sha": "e6180886f19997bc0d8b55e466bb87e8b0c01931", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -598,7 +598,7 @@ void gfc_generate_module_vars (gfc_namespace *);\n /* Get the appropriate return statement for a procedure.  */\n tree gfc_generate_return (void);\n \n-struct module_decl_hasher : ggc_hasher<tree_node *>\n+struct module_decl_hasher : ggc_ptr_hash<tree_node>\n {\n   typedef const char *compare_type;\n "}, {"sha": "f6b7d30b07b82371317d18e52cb57b4216b432ec", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -574,7 +574,7 @@ struct GTY((for_user)) temp_slot_address_entry {\n   struct temp_slot *temp_slot;\n };\n \n-struct temp_address_hasher : ggc_hasher<temp_slot_address_entry *>\n+struct temp_address_hasher : ggc_ptr_hash<temp_slot_address_entry>\n {\n   static hashval_t hash (temp_slot_address_entry *);\n   static bool equal (temp_slot_address_entry *, temp_slot_address_entry *);"}, {"sha": "e286188f01841444761abdb211661f250a6f17b5", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -415,7 +415,7 @@ struct GTY((for_user)) types_used_by_vars_entry {\n   tree var_decl;\n };\n \n-struct used_type_hasher : ggc_hasher<types_used_by_vars_entry *>\n+struct used_type_hasher : ggc_ptr_hash<types_used_by_vars_entry>\n {\n   static hashval_t hash (types_used_by_vars_entry *);\n   static bool equal (types_used_by_vars_entry *, types_used_by_vars_entry *);"}, {"sha": "25dde08315839b5179b69b9d8e21c26402f5b61f", "filename": "gcc/gimple-ssa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fgimple-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fgimple-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -34,7 +34,7 @@ struct GTY((for_user)) tm_restart_node {\n \n /* Hasher for tm_restart_node.  */\n \n-struct tm_restart_hasher : ggc_hasher<tm_restart_node *>\n+struct tm_restart_hasher : ggc_ptr_hash<tm_restart_node>\n {\n   static hashval_t hash (tm_restart_node *n) { return htab_hash_pointer (n); }\n \n@@ -45,7 +45,7 @@ struct tm_restart_hasher : ggc_hasher<tm_restart_node *>\n   }\n };\n \n-struct ssa_name_hasher : ggc_hasher<tree>\n+struct ssa_name_hasher : ggc_ptr_hash<tree_node>\n {\n   /* Hash a tree in a uid_decl_map.  */\n "}, {"sha": "3f49345a909eb34b9b2186f72fe1668e8fc4518a", "filename": "gcc/hash-table.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -91,15 +91,20 @@ along with GCC; see the file COPYING3.  If not see\n    We compose this into a few steps.\n \n       1. Decide on a removal policy for values stored in the table.\n-         hash-traits.h provides class templates for the two most common\n-         policies.\n+         hash-traits.h provides class templates for the three most common\n+         policies:\n \n          * typed_free_remove implements the static 'remove' member function\n          by calling free().\n \n          * typed_noop_remove implements the static 'remove' member function\n          by doing nothing.\n \n+         * ggc_remove implements the static 'remove' member by doing nothing,\n+         but instead provides routines for gc marking and for PCH streaming.\n+         Use this for garbage-collected data that needs to be preserved across\n+         collections.\n+\n          You can use these policies by simply deriving the descriptor type\n          from one of those class template, with the appropriate argument.\n "}, {"sha": "77f88f30dc643c39cb9fed0a22ac080b6ef1bf68", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -121,14 +121,11 @@ pointer_hash <Type>::is_empty (Type *e)\n   return e == NULL;\n }\n \n-/* Hasher for entry in gc memory.  */\n+/* Remover and marker for entries in gc memory.  */\n \n template<typename T>\n-struct ggc_hasher\n+struct ggc_remove\n {\n-  typedef T value_type;\n-  typedef T compare_type;\n-\n   static void remove (T &) {}\n \n   static void\n@@ -155,8 +152,11 @@ struct ggc_hasher\n /* Hasher for cache entry in gc memory.  */\n \n template<typename T>\n-struct ggc_cache_hasher : ggc_hasher<T>\n+struct ggc_cache_hasher : ggc_remove<T>\n {\n+  typedef T value_type;\n+  typedef T compare_type;\n+\n   /* Entries are weakly held because this is for caches.  */\n   static void ggc_mx (T &) {}\n \n@@ -179,4 +179,10 @@ struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T> {};\n template <typename T>\n struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};\n \n+/* Traits for elements that point to gc memory.  The pointed-to data\n+   must be kept across collections.  */\n+\n+template <typename T>\n+struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};\n+\n #endif"}, {"sha": "6a9330481e4790a46af44988b8d131887971a106", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,9 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* java-tree.h (treetreehasher): Inherit from ggc_ptr_hash\n+\trather than ggc_hasher.\n+\t(ict_hasher, type_assertion_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* jcf-io.c (charstar_hash): Inherit from nofree_ptr_hash rather"}, {"sha": "c29911978b61178f18b85a8c49878cc4d2db97c2", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -714,15 +714,15 @@ struct GTY((for_user)) treetreehash_entry {\n   tree value;\n };\n \n-struct treetreehasher : ggc_hasher<treetreehash_entry *>\n+struct treetreehasher : ggc_ptr_hash<treetreehash_entry>\n {\n   typedef tree compare_type;\n \n   static hashval_t hash (treetreehash_entry *);\n   static bool equal (treetreehash_entry *, tree);\n };\n \n-struct ict_hasher : ggc_hasher<tree_node *>\n+struct ict_hasher : ggc_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree t) { return htab_hash_pointer (t); }\n   static bool equal (tree a, tree b) { return a == b; }\n@@ -797,7 +797,7 @@ typedef struct GTY((for_user)) type_assertion {\n   tree op2;           /* Second operand. */\n } type_assertion;\n \n-struct type_assertion_hasher : ggc_hasher<type_assertion *>\n+struct type_assertion_hasher : ggc_ptr_hash<type_assertion>\n {\n   static hashval_t hash (type_assertion *);\n   static bool equal (type_assertion *, type_assertion *);"}, {"sha": "22e6973fd2db9e93781bae538e300f359c1b1b91", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -61,7 +61,7 @@ struct GTY((for_user)) libfunc_entry {\n \n /* Descriptor for libfunc_entry.  */\n \n-struct libfunc_hasher : ggc_hasher<libfunc_entry *>\n+struct libfunc_hasher : ggc_ptr_hash<libfunc_entry>\n {\n   static hashval_t hash (libfunc_entry *);\n   static bool equal (libfunc_entry *, libfunc_entry *);"}, {"sha": "d5a330dfa51a8dfaa5dba0361b0cc3b64acf11eb", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -508,7 +508,7 @@ struct GTY((for_user)) lto_in_decl_state\n \n typedef struct lto_in_decl_state *lto_in_decl_state_ptr;\n \n-struct decl_state_hasher : ggc_hasher<lto_in_decl_state *>\n+struct decl_state_hasher : ggc_ptr_hash<lto_in_decl_state>\n {\n   static hashval_t\n   hash (lto_in_decl_state *s)"}, {"sha": "24fd40f0f4e6867b92a60a0e308ad6fe8ce385e6", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* objc-act.c (objc_string_hasher): Inherit from ggc_ptr_hash\n+\trather than ggc_hasher.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* objc-act.c (decl_name_hash): Inherit from nofree_ptr_hash rather"}, {"sha": "db772605f7c5a76eec79171df8197b9866f3ef35", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -265,7 +265,7 @@ struct GTY((for_user)) string_descriptor {\n   tree constructor;\n };\n \n-struct objc_string_hasher : ggc_hasher<string_descriptor *>\n+struct objc_string_hasher : ggc_ptr_hash<string_descriptor>\n {\n   static hashval_t hash (string_descriptor *);\n   static bool equal (string_descriptor *, string_descriptor *);"}, {"sha": "8377c2267e6003ebc02062b2c9c24fa58aee89dc", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -6051,7 +6051,7 @@ gen_satfractuns_conv_libfunc (convert_optab tab,\n \n /* Hashtable callbacks for libfunc_decls.  */\n \n-struct libfunc_decl_hasher : ggc_hasher<tree>\n+struct libfunc_decl_hasher : ggc_ptr_hash<tree_node>\n {\n   static hashval_t\n   hash (tree entry)"}, {"sha": "676fbe8c8639c761b8a657dd5a7e75117f64eae5", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -339,7 +339,7 @@ tree chrec_dont_know;\n    happen, then it qualifies it with chrec_known.  */\n tree chrec_known;\n \n-struct scev_info_hasher : ggc_hasher<scev_info_str *>\n+struct scev_info_hasher : ggc_ptr_hash<scev_info_str>\n {\n   static hashval_t hash (scev_info_str *i);\n   static bool equal (const scev_info_str *a, const scev_info_str *b);"}, {"sha": "0f87228600bb7c2b1f6b4f581387e3ff988d039b", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca752f3929677221a5806daf4940367308fc16d7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ca752f3929677221a5806daf4940367308fc16d7", "patch": "@@ -188,7 +188,7 @@ static GTY(()) section *unnamed_sections;\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n    && DECL_SECTION_NAME (DECL) != NULL)\n \n-struct section_hasher : ggc_hasher<section *>\n+struct section_hasher : ggc_ptr_hash<section>\n {\n   typedef const char *compare_type;\n \n@@ -199,7 +199,7 @@ struct section_hasher : ggc_hasher<section *>\n /* Hash table of named sections.  */\n static GTY(()) hash_table<section_hasher> *section_htab;\n \n-struct object_block_hasher : ggc_hasher<object_block *>\n+struct object_block_hasher : ggc_ptr_hash<object_block>\n {\n   typedef const section *compare_type;\n \n@@ -3539,7 +3539,7 @@ struct GTY((chain_next (\"%h.next\"), for_user)) constant_descriptor_rtx {\n   int mark;\n };\n \n-struct const_rtx_desc_hasher : ggc_hasher<constant_descriptor_rtx *>\n+struct const_rtx_desc_hasher : ggc_ptr_hash<constant_descriptor_rtx>\n {\n   static hashval_t hash (constant_descriptor_rtx *);\n   static bool equal (constant_descriptor_rtx *, constant_descriptor_rtx *);"}]}