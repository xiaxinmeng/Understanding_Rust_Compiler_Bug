{"sha": "2ec07fa616d283c60844031818c239f1714d31c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjMDdmYTYxNmQyODNjNjA4NDQwMzE4MThjMjM5ZjE3MTRkMzFjOQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2017-04-25T13:52:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-25T13:52:33Z"}, "message": "re PR target/77728 (Miscompilation multiple vector iteration on ARM)\n\n\tPR target/77728\n\t* config/aarch64/aarch64.c (struct aarch64_fn_arg_alignment): New\n\ttype.\n\t(aarch64_function_arg_alignment): Return aarch64_fn_arg_alignment\n\tstruct.  Ignore DECL_ALIGN of decls other than FIELD_DECL for\n\tthe alignment computation, but return their maximum in warn_alignment.\n\t(aarch64_layout_arg): Adjust aarch64_function_arg_alignment caller.\n\tEmit a -Wpsabi note if warn_alignment is 16 bytes, but alignment\n\tis smaller.\n\t(aarch64_function_arg_boundary): Likewise.  Simplify using MIN/MAX.\n\t(aarch64_gimplify_va_arg_expr): Adjust aarch64_function_arg_alignment\n\tcaller.\ntestsuite/\n\t* g++.dg/abi/pr77728-2.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r247239", "tree": {"sha": "24afe4272202c063d39b0f4338594a15bc0177b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24afe4272202c063d39b0f4338594a15bc0177b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec07fa616d283c60844031818c239f1714d31c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec07fa616d283c60844031818c239f1714d31c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec07fa616d283c60844031818c239f1714d31c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec07fa616d283c60844031818c239f1714d31c9/comments", "author": null, "committer": null, "parents": [{"sha": "eb2d5ccc332fa3b9eabd5de8e6ac8a3406a5e40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2d5ccc332fa3b9eabd5de8e6ac8a3406a5e40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2d5ccc332fa3b9eabd5de8e6ac8a3406a5e40e"}], "stats": {"total": 294, "additions": 268, "deletions": 26}, "files": [{"sha": "d44e98b29c51309ba82624bd4c8aa5fe66dbb039", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ec07fa616d283c60844031818c239f1714d31c9", "patch": "@@ -1,3 +1,19 @@\n+2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* config/aarch64/aarch64.c (struct aarch64_fn_arg_alignment): New\n+\ttype.\n+\t(aarch64_function_arg_alignment): Return aarch64_fn_arg_alignment\n+\tstruct.  Ignore DECL_ALIGN of decls other than FIELD_DECL for\n+\tthe alignment computation, but return their maximum in warn_alignment.\n+\t(aarch64_layout_arg): Adjust aarch64_function_arg_alignment caller.\n+\tEmit a -Wpsabi note if warn_alignment is 16 bytes, but alignment\n+\tis smaller.\n+\t(aarch64_function_arg_boundary): Likewise.  Simplify using MIN/MAX.\n+\t(aarch64_gimplify_va_arg_expr): Adjust aarch64_function_arg_alignment\n+\tcaller.\n+\n 2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/simdext.md (dmpyh): Fix typo."}, {"sha": "1e58e9d781912eb1eb764720a3baed96eec5f88c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 75, "deletions": 26, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2ec07fa616d283c60844031818c239f1714d31c9", "patch": "@@ -2256,33 +2256,58 @@ aarch64_vfp_is_call_candidate (cumulative_args_t pcum_v, machine_mode mode,\n \t\t\t\t\t\t  NULL);\n }\n \n-/* Given MODE and TYPE of a function argument, return the alignment in\n+struct aarch64_fn_arg_alignment\n+{\n+  /* Alignment for FIELD_DECLs in function arguments.  */\n+  unsigned int alignment;\n+  /* Alignment for decls other than FIELD_DECLs in function arguments.  */\n+  unsigned int warn_alignment;\n+};\n+\n+/* Given MODE and TYPE of a function argument, return a pair of alignments in\n    bits.  The idea is to suppress any stronger alignment requested by\n    the user and opt for the natural alignment (specified in AAPCS64 \\S 4.1).\n    This is a helper function for local use only.  */\n \n-static unsigned int\n+static struct aarch64_fn_arg_alignment\n aarch64_function_arg_alignment (machine_mode mode, const_tree type)\n {\n+  struct aarch64_fn_arg_alignment aa;\n+  aa.alignment = 0;\n+  aa.warn_alignment = 0;\n+\n   if (!type)\n-    return GET_MODE_ALIGNMENT (mode);\n+    {\n+      aa.alignment = GET_MODE_ALIGNMENT (mode);\n+      return aa;\n+    }\n+\n   if (integer_zerop (TYPE_SIZE (type)))\n-    return 0;\n+    return aa;\n \n   gcc_assert (TYPE_MODE (type) == mode);\n \n   if (!AGGREGATE_TYPE_P (type))\n-    return TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n+    {\n+      aa.alignment = TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n+      return aa;\n+    }\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n-    return TYPE_ALIGN (TREE_TYPE (type));\n-\n-  unsigned int alignment = 0;\n+    {\n+      aa.alignment = TYPE_ALIGN (TREE_TYPE (type));\n+      return aa;\n+    }\n \n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n-    alignment = std::max (alignment, DECL_ALIGN (field));\n+    {\n+      if (TREE_CODE (field) == FIELD_DECL)\n+\taa.alignment = std::max (aa.alignment, DECL_ALIGN (field));\n+      else\n+\taa.warn_alignment = std::max (aa.warn_alignment, DECL_ALIGN (field));\n+    }\n \n-  return alignment;\n+  return aa;\n }\n \n /* Layout a function argument according to the AAPCS64 rules.  The rule\n@@ -2369,24 +2394,39 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n      entirely general registers.  */\n   if (allocate_ncrn && (ncrn + nregs <= NUM_ARG_REGS))\n     {\n-      unsigned int alignment = aarch64_function_arg_alignment (mode, type);\n \n       gcc_assert (nregs == 0 || nregs == 1 || nregs == 2);\n \n       /* C.8 if the argument has an alignment of 16 then the NGRN is\n          rounded up to the next even number.  */\n-      if (nregs == 2 && alignment == 16 * BITS_PER_UNIT && ncrn % 2)\n-\t{\n-\t  ++ncrn;\n-\t  gcc_assert (ncrn + nregs <= NUM_ARG_REGS);\n+      if (nregs == 2 && ncrn % 2)\n+\t{\n+\t  struct aarch64_fn_arg_alignment aa\n+\t    = aarch64_function_arg_alignment (mode, type);\n+\n+\t  /* The == 16 * BITS_PER_UNIT instead of >= 16 * BITS_PER_UNIT\n+\t     comparisons are there because for > 16 * BITS_PER_UNIT\n+\t     alignment nregs should be > 2 and therefore it should be\n+\t     passed by reference rather than value.  */\n+\t  if (aa.warn_alignment == 16 * BITS_PER_UNIT\n+\t      && aa.alignment < aa.warn_alignment\n+\t      && warn_psabi\n+\t      && currently_expanding_gimple_stmt)\n+\t    inform (input_location,\n+\t\t    \"parameter passing for argument of type %qT \"\n+\t\t    \"changed in GCC 7.1\", type);\n+\t  else if (aa.alignment == 16 * BITS_PER_UNIT)\n+\t    {\n+\t      ++ncrn;\n+\t      gcc_assert (ncrn + nregs <= NUM_ARG_REGS);\n+\t    }\n \t}\n+\n       /* NREGS can be 0 when e.g. an empty structure is to be passed.\n          A reg is still generated for it, but the caller should be smart\n \t enough not to use it.  */\n       if (nregs == 0 || nregs == 1 || GET_MODE_CLASS (mode) == MODE_INT)\n-\t{\n-\t  pcum->aapcs_reg = gen_rtx_REG (mode, R0_REGNUM + ncrn);\n-\t}\n+\tpcum->aapcs_reg = gen_rtx_REG (mode, R0_REGNUM + ncrn);\n       else\n \t{\n \t  rtx par;\n@@ -2414,7 +2454,10 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n      this argument and align the total size if necessary.  */\n on_stack:\n   pcum->aapcs_stack_words = size / UNITS_PER_WORD;\n-  if (aarch64_function_arg_alignment (mode, type) == 16 * BITS_PER_UNIT)\n+  struct aarch64_fn_arg_alignment aa\n+    = aarch64_function_arg_alignment (mode, type);\n+\n+  if (aa.alignment == 16 * BITS_PER_UNIT)\n     pcum->aapcs_stack_size = ROUND_UP (pcum->aapcs_stack_size,\n \t\t\t\t       16 / UNITS_PER_WORD);\n   return;\n@@ -2505,13 +2548,17 @@ aarch64_function_arg_regno_p (unsigned regno)\n static unsigned int\n aarch64_function_arg_boundary (machine_mode mode, const_tree type)\n {\n-  unsigned int alignment = aarch64_function_arg_alignment (mode, type);\n+  struct aarch64_fn_arg_alignment aa\n+    = aarch64_function_arg_alignment (mode, type);\n+  aa.alignment = MIN (MAX (aa.alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n+  aa.warn_alignment\n+    = MIN (MAX (aa.warn_alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n+\n+  if (warn_psabi && aa.warn_alignment > aa.alignment)\n+    inform (input_location, \"parameter passing for argument of type %qT \"\n+\t    \"changed in GCC 7.1\", type);\n \n-  if (alignment < PARM_BOUNDARY)\n-    alignment = PARM_BOUNDARY;\n-  if (alignment > STACK_BOUNDARY)\n-    alignment = STACK_BOUNDARY;\n-  return alignment;\n+  return aa.alignment;\n }\n \n /* For use by FUNCTION_ARG_PADDING (MODE, TYPE).\n@@ -10211,7 +10258,9 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   stack = build3 (COMPONENT_REF, TREE_TYPE (f_stack), unshare_expr (valist),\n \t\t  f_stack, NULL_TREE);\n   size = int_size_in_bytes (type);\n-  align = aarch64_function_arg_alignment (mode, type) / BITS_PER_UNIT;\n+  struct aarch64_fn_arg_alignment aa\n+    = aarch64_function_arg_alignment (mode, type);\n+  align = aa.alignment / BITS_PER_UNIT;\n \n   dw_align = false;\n   adjust = 0;"}, {"sha": "c60d9a2b5faff8deeed2fdeccf60e8c79730753c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ec07fa616d283c60844031818c239f1714d31c9", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* g++.dg/abi/pr77728-2.C: New test.\n+\n 2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/80177"}, {"sha": "4e8d7660e1e88c55ae689d8e44ebc20967d87b79", "filename": "gcc/testsuite/g++.dg/abi/pr77728-2.C", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec07fa616d283c60844031818c239f1714d31c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C?ref=2ec07fa616d283c60844031818c239f1714d31c9", "patch": "@@ -0,0 +1,171 @@\n+// { dg-do compile { target { { aarch64-*-* } && c++11 } } }\n+// { dg-options \"-Wpsabi\" }\n+\n+#include <stdarg.h>\n+\n+template <int N>\n+struct alignas (16) A { char p[16]; };\n+\n+A<0> v;\n+\n+template <int N>\n+struct B\n+{\n+  typedef A<N> T;\n+  int i, j, k, l;\n+};\n+\n+struct C : public B<0> {};\n+struct D {};\n+struct E : public D, C {};\n+struct F : public B<1> {};\n+struct G : public F { static int y alignas (16); };\n+struct H : public G {};\n+struct I : public D { int z alignas (16); };\n+struct J : public D { static int z alignas (16); int i, j, k, l; };\n+\n+template <int N>\n+struct K : public D { typedef A<N> T; int i, j; };\n+\n+struct L { static int h alignas (16); int i, j, k, l; };\n+\n+int\n+fn1 (int a, B<0> b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn2 (int a, B<1> b)\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn3 (int a, L b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn4 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, B<0> n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn5 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, B<1> n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn6 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, C n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn7 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, E n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn8 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, H n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn9 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, I n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn10 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, J n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn11 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, K<0> n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn12 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, K<2> n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+void\n+test ()\n+{\n+  static B<0> b0;\n+  static B<1> b1;\n+  static L l;\n+  static C c;\n+  static E e;\n+  static H h;\n+  static I i;\n+  static J j;\n+  static K<0> k0;\n+  static K<2> k2;\n+  fn1 (1, b0);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn2 (1, b1);\n+  fn3 (1, l);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn4 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b0, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn5 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b1, 1, 2, 3, 4);\n+  fn6 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, c, 1, 2, 3, 4);\n+  fn7 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, e, 1, 2, 3, 4);\n+  fn8 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, h, 1, 2, 3, 4);\n+  fn9 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, i, 1, 2, 3, 4);\n+  fn10 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, j, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn11 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k0, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn12 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k2, 1, 2, 3, 4);\n+}"}]}