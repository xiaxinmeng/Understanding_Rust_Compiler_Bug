{"sha": "285a5742c0cc7d86f78dca98ee0287ae6511d16d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1YTU3NDJjMGNjN2Q4NmY3OGRjYTk4ZWUwMjg3YWU2NTExZDE2ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-12T15:29:46Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-12T15:29:46Z"}, "message": "alpha-interix.h: Fix comment formatting.\n\n\t* config/alpha/alpha-interix.h: Fix comment formatting.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/alpha/alpha.h: Likewise.\n\t* config/alpha/alpha32.h: Likewise.\n\t* config/alpha/freebsd.h: Likewise.\n\t* config/alpha/unicosmk.h: Likewise.\n\t* config/alpha/vms.h: Likewise.\n\nFrom-SVN: r46949", "tree": {"sha": "cb2e79fad23321e5db87eb425fd3ced19e98880f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb2e79fad23321e5db87eb425fd3ced19e98880f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285a5742c0cc7d86f78dca98ee0287ae6511d16d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285a5742c0cc7d86f78dca98ee0287ae6511d16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285a5742c0cc7d86f78dca98ee0287ae6511d16d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285a5742c0cc7d86f78dca98ee0287ae6511d16d/comments", "author": null, "committer": null, "parents": [{"sha": "96eaf358c8c5ec4054d076aa7ec766eda6888499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eaf358c8c5ec4054d076aa7ec766eda6888499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96eaf358c8c5ec4054d076aa7ec766eda6888499"}], "stats": {"total": 134, "additions": 72, "deletions": 62}, "files": [{"sha": "95f45320e7b0a3b8e41eb4f8c8bad180a559ea69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -1,3 +1,13 @@\n+2001-11-12  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/alpha/alpha-interix.h: Fix comment formatting.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/alpha/alpha.h: Likewise.\n+\t* config/alpha/alpha32.h: Likewise.\n+\t* config/alpha/freebsd.h: Likewise.\n+\t* config/alpha/unicosmk.h: Likewise.\n+\t* config/alpha/vms.h: Likewise.\n+\n 2001-11-12  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (get_shift_alg): Remove redundant code."}, {"sha": "788eac4f1c020a581091e1b8282841d93eb77fc5", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -129,7 +129,7 @@ const_section ()\t\t\t\t\t\t\t\\\n #define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n /* The linker will take care of this, and having them causes problems with\n-   ld -r (specifically -rU). */\n+   ld -r (specifically -rU).  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1\n \n #define SET_ASM_OP\t\"\\t.set\\t\"\n@@ -157,19 +157,19 @@ while (0)\n #define PCC_BITFIELD_TYPE_TEST TYPE_NATIVE(rec)\n #define GROUP_BITFIELDS_BY_ALIGN TYPE_NATIVE(rec)\n \n-/* DWARF2 Unwinding doesn't work with exception handling yet. */\n+/* DWARF2 Unwinding doesn't work with exception handling yet.  */\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 0\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* The definition of this macro implies that there are cases where\n    a scalar value cannot be returned in registers.\n \n    On NT (according to the spec) anything except strings/array that fits\n    in 64 bits is returned in the registers (this appears to differ from\n-   the rest of the Alpha family). */\n+   the rest of the Alpha family).  */\n \n #undef RETURN_IN_MEMORY\n #define RETURN_IN_MEMORY(TYPE) \\\n@@ -189,7 +189,7 @@ while (0)\n }\n \n /* The current Interix assembler (consistent with the DEC documentation)\n-   uses a=b NOT .set a,b; .set is for assembler options. */\n+   uses a=b NOT .set a,b; .set is for assembler options.  */\n #undef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n #define ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL(FILE, SY, HI, LO)    \t\\\n  do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "ff89b55f9ff68b1a9709e0e70783557b9e309c57", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -50,7 +50,7 @@ Boston, MA 02111-1307, USA.  */\n /* External data.  */\n extern int rtx_equal_function_value_matters;\n \n-/* Specify which cpu to schedule for. */\n+/* Specify which cpu to schedule for.  */\n \n enum processor_type alpha_cpu;\n static const char * const alpha_cpu_name[] = \n@@ -217,7 +217,7 @@ static unsigned int unicosmk_section_type_flags PARAMS ((tree, const char *,\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Parse target option strings. */\n+/* Parse target option strings.  */\n \n void\n override_options ()\n@@ -365,7 +365,7 @@ override_options ()\n \terror (\"bad value `%s' for -mcpu switch\", alpha_tune_string);\n     }\n \n-  /* Do some sanity checks on the above options. */\n+  /* Do some sanity checks on the above options.  */\n \n   if (TARGET_ABI_UNICOSMK && alpha_fptm != ALPHA_FPTM_N)\n     {\n@@ -420,7 +420,7 @@ override_options ()\n \t{\n \t  { 3, 30, -1 },\t/* ev4 -- Bcache is a guess */\n \t  { 2, 12, 38 },\t/* ev5 -- Bcache from PC164 LMbench numbers */\n-\t  { 3, 12, 30 },\t/* ev6 -- Bcache from DS20 LMbench. */\n+\t  { 3, 12, 30 },\t/* ev6 -- Bcache from DS20 LMbench.  */\n \t};\n \n \tlat = alpha_mlat_string[1] - '0';\n@@ -460,7 +460,7 @@ override_options ()\n \n   /* Align labels and loops for optimal branching.  */\n   /* ??? Kludge these by not doing anything if we don't optimize and also if\n-     we are writing ECOFF symbols to work around a bug in DEC's assembler. */\n+     we are writing ECOFF symbols to work around a bug in DEC's assembler.  */\n   if (optimize > 0 && write_symbols != SDB_DEBUG)\n     {\n       if (align_loops <= 0)\n@@ -812,7 +812,7 @@ input_operand (op, mode)\n     case SUBREG:\n       if (register_operand (op, mode))\n \treturn 1;\n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n     case MEM:\n       return ((TARGET_BWX || (mode != HImode && mode != QImode))\n \t      && general_operand (op, mode));\n@@ -2011,7 +2011,7 @@ alpha_emit_set_const (target, mode, c, n)\n   rtx pat;\n   int i;\n \n-  /* Try 1 insn, then 2, then up to N. */\n+  /* Try 1 insn, then 2, then up to N.  */\n   for (i = 1; i <= n; i++)\n     if ((pat = alpha_emit_set_const_1 (target, mode, c, i)) != 0)\n       return pat;\n@@ -2047,7 +2047,7 @@ alpha_emit_set_const_1 (target, mode, c, n)\n \n   /* If this is a sign-extended 32-bit constant, we can do this in at most\n      three insns, so do it if we have enough insns left.  We always have\n-     a sign-extended 32-bit constant when compiling on a narrow machine.   */\n+     a sign-extended 32-bit constant when compiling on a narrow machine.  */\n \n   if (HOST_BITS_PER_WIDE_INT != 64\n       || c >> 31 == -1 || c >> 31 == 0)\n@@ -2162,7 +2162,7 @@ alpha_emit_set_const_1 (target, mode, c, n)\n \n       /* Now try high-order 1 bits.  We get that with a sign-extension.\n \t But one bit isn't enough here.  Be careful to avoid shifting outside\n-\t the mode and to avoid shifting outside the host wide int size. */\n+\t the mode and to avoid shifting outside the host wide int size.  */\n \n       if ((bits = (MIN (HOST_BITS_PER_WIDE_INT, GET_MODE_SIZE (mode) * 8)\n \t\t   - floor_log2 (~ c) - 2)) > 0)\n@@ -2607,7 +2607,7 @@ alpha_emit_conditional_branch (code)\n \n     case NE:\n     case ORDERED:\n-      /* These must be reversed. */\n+      /* These must be reversed.  */\n       cmp_code = reverse_condition (code), branch_code = EQ;\n       break;\n \n@@ -2819,7 +2819,7 @@ alpha_emit_setcc (code)\n    a conditional move (if_then_else CMP ...).\n    If both of the operands that set cc0 are non-zero we must emit\n    an insn to perform the compare (it can't be done within\n-   the conditional move). */\n+   the conditional move).  */\n rtx\n alpha_emit_conditional_move (cmp, mode)\n      rtx cmp;\n@@ -2894,7 +2894,7 @@ alpha_emit_conditional_move (cmp, mode)\n     }\n \n   /* We may be able to use a conditional move directly.\n-     This avoids emitting spurious compares. */\n+     This avoids emitting spurious compares.  */\n   if (signed_comparison_operator (cmp, VOIDmode)\n       && (!fp_p || local_fast_math)\n       && (op0 == CONST0_RTX (cmp_mode) || op1 == CONST0_RTX (cmp_mode)))\n@@ -2915,7 +2915,7 @@ alpha_emit_conditional_move (cmp, mode)\n       break;\n \n     case NE:\n-      /* This must be reversed. */\n+      /* This must be reversed.  */\n       code = reverse_condition (code);\n       cmov_code = EQ;\n       break;\n@@ -2992,7 +2992,7 @@ alpha_split_conditional_move (code, dest, cond, t_rtx, f_rtx)\n   if (f == 0 && exact_log2 (diff) > 0\n       /* On EV6, we've got enough shifters to make non-arithmatic shifts\n \t viable over a longer latency cmove.  On EV5, the E0 slot is a\n-\t scarce resource, and on EV4 shift has the same latency as a cmove. */\n+\t scarce resource, and on EV4 shift has the same latency as a cmove.  */\n       && (diff <= 8 || alpha_cpu == PROCESSOR_EV6))\n     {\n       tmp = gen_rtx_fmt_ee (code, DImode, cond, const0_rtx);\n@@ -4689,7 +4689,7 @@ alpha_adjust_cost (insn, link, dep_insn, cost)\n       break;\n     }\n \n-  /* Otherwise, return the default cost. */\n+  /* Otherwise, return the default cost.  */\n   return cost;\n }\n \n@@ -4798,7 +4798,7 @@ alpha_ra_ever_killed ()\n \n \f\n /* Return the trap mode suffix applicable to the current\n-   instruction, or NULL.   */\n+   instruction, or NULL.  */\n \n static const char *\n get_trap_mode_suffix ()\n@@ -4865,7 +4865,7 @@ get_trap_mode_suffix ()\n }\n \n /* Return the rounding mode suffix applicable to the current\n-   instruction, or NULL.   */\n+   instruction, or NULL.  */\n \n static const char *\n get_round_mode_suffix ()\n@@ -5282,7 +5282,7 @@ alpha_initialize_trampoline (tramp, fnaddr, cxt, fnofs, cxtofs, jmpofs)\n   emit_move_insn (gen_rtx_MEM (mode, addr), cxt);\n \n   /* This has been disabled since the hint only has a 32k range, and in\n-     no existing OS is the stack within 32k of the text segment. */\n+     no existing OS is the stack within 32k of the text segment.  */\n   if (0 && jmpofs >= 0)\n     {\n       /* Compute hint value.  */\n@@ -5597,7 +5597,7 @@ alpha_va_arg (valist, type)\n /* These variables are used for communication between the following functions.\n    They indicate various things about the current function being compiled\n    that are used to tell what kind of prologue, epilogue and procedure\n-   descriptior to generate. */\n+   descriptior to generate.  */\n \n /* Nonzero if we need a stack procedure.  */\n static int alpha_is_stack_procedure;\n@@ -6318,7 +6318,7 @@ alpha_start_function (file, fnname, decl)\n     {\n       /* Set flags in procedure descriptor to request IEEE-conformant\n \t math-library routines.  The value we set it to is PDSC_EXC_IEEE\n-\t (/usr/include/pdsc.h). */\n+\t (/usr/include/pdsc.h).  */\n       fputs (\"\\t.eflag 48\\n\", file);\n     }\n \n@@ -6514,7 +6514,7 @@ alpha_expand_epilogue ()\n \t  FRP (emit_move_insn (sa_reg, sa_reg_exp));\n \t}\n \t  \n-      /* Restore registers in order, excepting a true frame pointer. */\n+      /* Restore registers in order, excepting a true frame pointer.  */\n \n       mem = gen_rtx_MEM (DImode, plus_constant (sa_reg, reg_offset));\n       if (! eh_ofs)"}, {"sha": "83ad9e251f6e83d86ac9b0a318faf7f343b18354", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -71,20 +71,20 @@ enum alpha_trap_precision\n {\n   ALPHA_TP_PROG,\t/* No precision (default).  */\n   ALPHA_TP_FUNC,      \t/* Trap contained within originating function.  */\n-  ALPHA_TP_INSN\t\t/* Instruction accuracy and code is resumption safe. */\n+  ALPHA_TP_INSN\t\t/* Instruction accuracy and code is resumption safe.  */\n };\n \n enum alpha_fp_rounding_mode\n {\n   ALPHA_FPRM_NORM,\t/* Normal rounding mode.  */\n   ALPHA_FPRM_MINF,\t/* Round towards minus-infinity.  */\n-  ALPHA_FPRM_CHOP,\t/* Chopped rounding mode (towards 0). */\n+  ALPHA_FPRM_CHOP,\t/* Chopped rounding mode (towards 0).  */\n   ALPHA_FPRM_DYN\t/* Dynamic rounding mode.  */\n };\n \n enum alpha_fp_trap_mode\n {\n-  ALPHA_FPTM_N,\t\t/* Normal trap mode. */\n+  ALPHA_FPTM_N,\t\t/* Normal trap mode.  */\n   ALPHA_FPTM_U,\t\t/* Underflow traps enabled.  */\n   ALPHA_FPTM_SU,\t/* Software completion, w/underflow traps */\n   ALPHA_FPTM_SUI\t/* Software completion, w/underflow & inexact traps */\n@@ -113,7 +113,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define MASK_GAS\t(1 << 2)\n #define TARGET_GAS\t(target_flags & MASK_GAS)\n \n-/* This means that we should mark procedures as IEEE conformant. */\n+/* This means that we should mark procedures as IEEE conformant.  */\n \n #define MASK_IEEE_CONFORMANT (1 << 3)\n #define TARGET_IEEE_CONFORMANT\t(target_flags & MASK_IEEE_CONFORMANT)\n@@ -298,13 +298,13 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \n /* Attempt to describe CPU characteristics to the preprocessor.  */\n \n-/* Corresponding to amask... */\n+/* Corresponding to amask...  */\n #define CPP_AM_BWX_SPEC\t\"-D__alpha_bwx__ -Acpu=bwx\"\n #define CPP_AM_MAX_SPEC\t\"-D__alpha_max__ -Acpu=max\"\n #define CPP_AM_FIX_SPEC\t\"-D__alpha_fix__ -Acpu=fix\"\n #define CPP_AM_CIX_SPEC\t\"-D__alpha_cix__ -Acpu=cix\"\n \n-/* Corresponding to implver... */\n+/* Corresponding to implver...  */\n #define CPP_IM_EV4_SPEC\t\"-D__alpha_ev4__ -Acpu=ev4\"\n #define CPP_IM_EV5_SPEC\t\"-D__alpha_ev5__ -Acpu=ev5\"\n #define CPP_IM_EV6_SPEC\t\"-D__alpha_ev6__ -Acpu=ev6\"\n@@ -420,7 +420,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \f\n /* target machine storage layout */\n \n-/* Define to enable software floating point emulation. */\n+/* Define to enable software floating point emulation.  */\n #define REAL_ARITHMETIC\n \n /* Define the size of `int'.  The default is the same as the word size.  */\n@@ -482,7 +482,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    numbered.\n \n    For Alpha we can decide arbitrarily since there are no machine instructions\n-   for them.  Might as well be consistent with bytes. */\n+   for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 0\n \n /* number of bits in an addressable storage unit */\n@@ -737,7 +737,7 @@ enum reg_class {\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES\t\t\t\t\\\n  {\"NO_REGS\", \"R24_REG\", \"R25_REG\", \"R27_REG\",\t\\\n@@ -867,7 +867,7 @@ enum reg_class {\n    QImode and HImode from an aligned address to a general register\n    unless byte instructions are permitted.\n    We also cannot load an unaligned address or a paradoxical SUBREG into an\n-   FP register.   */\n+   FP register.  */\n \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS,MODE,IN) \\\n   secondary_reload_class((CLASS), (MODE), (IN), 1)\n@@ -972,7 +972,7 @@ extern int alpha_memory_latency;\n    We have two registers that can be eliminated on the Alpha.  First, the\n    frame pointer register can often be eliminated in favor of the stack\n    pointer register.  Secondly, the argument pointer register can always be\n-   eliminated; it is replaced with either the stack or frame pointer. */\n+   eliminated; it is replaced with either the stack or frame pointer.  */\n \n /* This is an array of structures.  Each structure initializes one pair\n    of eliminable registers.  The \"from\" register number is given first,\n@@ -1136,7 +1136,7 @@ extern int alpha_memory_latency;\n    reference.  If nonzero for an argument, a copy of that argument is\n    made in memory and a pointer to the argument is passed instead of\n    the argument itself.  The pointer is passed in whatever way is\n-   appropriate for passing a pointer to that type. */\n+   appropriate for passing a pointer to that type.  */\n \n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n   ((MODE) == TFmode || (MODE) == TCmode)\n@@ -1266,7 +1266,7 @@ extern struct alpha_compare alpha_compare;\n \n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done.\n-   This assumes that __bb_init_func doesn't garble a1-a5. */\n+   This assumes that __bb_init_func doesn't garble a1-a5.  */\n \n #define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n@@ -1352,7 +1352,7 @@ do {\t\t\t\t\t\t\\\n \n #define RETURN_ADDR_RTX  alpha_return_addr\n \n-/* Before the prologue, RA lives in $26. */\n+/* Before the prologue, RA lives in $26.  */\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)\n #define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (26)\n \n@@ -1428,7 +1428,7 @@ do {\t\t\t\t\t\t\\\n    that may eliminate to the frame pointer.  These will be allowed to\n    have offsets greater than 32K.  This is done because register\n    elimination offsets will change the hi/lo split, and if we split\n-   before reload, we will require additional instructions.   */\n+   before reload, we will require additional instructions.  */\n #define NONSTRICT_REG_OK_FP_BASE_P(X)\t\t\\\n   (REGNO (X) == 31 || REGNO (X) == 63\t\t\\\n    || (REGNO (X) >= FIRST_PSEUDO_REGISTER\t\\\n@@ -1501,7 +1501,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define ADDRESS_COST(X)  0\n \n-/* Machine-dependent reorg pass.   */\n+/* Machine-dependent reorg pass.  */\n #define MACHINE_DEPENDENT_REORG(X)\talpha_reorg(X)\n \f\n /* Specify the machine mode that this machine uses\n@@ -1544,7 +1544,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    move-instruction pairs, we will do a movstr or libcall instead.\n \n    Without byte/word accesses, we want no more than four instructions;\n-   with, several single byte accesses are better.   */\n+   with, several single byte accesses are better.  */\n \n #define MOVE_RATIO  (TARGET_BWX ? 7 : 2)\n \n@@ -1613,7 +1613,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    between pointers and any other objects of this machine mode.  */\n #define Pmode DImode\n \n-/* Mode of a function address in a call instruction (for indexing purposes). */\n+/* Mode of a function address in a call instruction (for indexing purposes).  */\n \n #define FUNCTION_MODE Pmode\n \n@@ -1630,7 +1630,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define NO_FUNCTION_CSE\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Compute the cost of computing a constant rtl expression RTX\n@@ -1716,7 +1716,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n \t&& INTVAL (XEXP (X, 1)) <= 3)\t\t\t\\\n       break;\t\t\t\t\t\t\\\n-    /* ... fall through ... */\t\t\t\t\\\n+    /* ... fall through ...  */\t\t\t\t\\\n   case ASHIFTRT:  case LSHIFTRT:\t\t\t\\\n     switch (alpha_cpu)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n@@ -1776,7 +1776,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n   case NEG:  case ABS:\t\t\t\t\t\\\n     if (! FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n       break;\t\t\t\t\t\t\\\n-    /* ... fall through ... */\t\t\t\t\\\n+    /* ... fall through ...  */\t\t\t\t\\\n   case FLOAT:  case UNSIGNED_FLOAT:  case FIX:  case UNSIGNED_FIX: \\\n   case FLOAT_EXTEND:  case FLOAT_TRUNCATE:\t\t\\\n     switch (alpha_cpu)\t\t\t\t\t\\\n@@ -1847,7 +1847,7 @@ literal_section ()\t\t\t\t\t\t\\\n \n /* If a variable is weakened, made one only or moved into a different\n    section, it may be necessary to redo the section info to move the\n-   variable out of sdata. */\n+   variable out of sdata.  */\n \n #define REDO_SECTION_INFO_P(DECL)                                       \\\n    ((TREE_CODE (DECL) == VAR_DECL)                                      \\\n@@ -1906,7 +1906,7 @@ do {\t\t\t\t\t\t\\\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n   do { fputs (\"\\t.globl \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"\"\n \n@@ -1918,7 +1918,7 @@ do {\t\t\t\t\t\t\\\n \n /* This is how to output a label for a jump table.  Arguments are the same as\n    for ASM_OUTPUT_INTERNAL_LABEL, except the insn for the jump table is\n-   passed. */\n+   passed.  */\n \n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLEINSN)\t\\\n { ASM_OUTPUT_ALIGN (FILE, 2); ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM); }\n@@ -2328,7 +2328,7 @@ do {\t\t\t\t\t\t\t\\\n    mips-tdump.c to print them out.\n \n    These must match the corresponding definitions in gdb/mipsread.c.\n-   Unfortunately, gcc and gdb do not currently share any directories. */\n+   Unfortunately, gcc and gdb do not currently share any directories.  */\n \n #define CODE_MASK 0x8F300\n #define MIPS_IS_STAB(sym) (((sym)->index & 0xFFF00) == CODE_MASK)\n@@ -2347,5 +2347,5 @@ do {\t\t\t\t\t\t\t\\\n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* Generate calls to memcpy, etc., not bcopy, etc. */\n+/* Generate calls to memcpy, etc., not bcopy, etc.  */\n #define TARGET_MEM_FUNCTIONS 1"}, {"sha": "96f3ff47c13d98e8c2c6926aa52024e54d13483c", "filename": "gcc/config/alpha/alpha32.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Falpha32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha32.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n /* WinNT (and thus Interix) use unsigned int */\n #define SIZE_TYPE \"unsigned int\"\n \n-/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended. */\n+/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n #undef POINTER_SIZE\n #define POINTER_SIZE 32\n #define POINTERS_EXTEND_UNSIGNED 0\n@@ -73,7 +73,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.   */\n+   CXT is an RTX for the static chain value for the function.  */\n \n #undef INITIALIZE_TRAMPOLINE\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\"}, {"sha": "4bdbb09a38b27f6c0c42e28c67a792689fb3c0c0", "filename": "gcc/config/alpha/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ffreebsd.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -82,7 +82,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  Under FreeBSD/Alpha, the assembler does\n-   nothing special with -pg. */\n+   nothing special with -pg.  */\n \n #undef  FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\"}, {"sha": "d0923e8abd0080e97bad29f0d514fa89fd431bfb", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #undef INT_TYPE_SIZE\n #define INT_TYPE_SIZE 64\n \n-/* This is consistent with the definition Cray CC uses. */\n+/* This is consistent with the definition Cray CC uses.  */\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n #undef WCHAR_TYPE_SIZE\n@@ -229,7 +229,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef FUNCTION_ARG_PADDING\n \n-/* An argument is passed either entirely in registers or entirely on stack. */\n+/* An argument is passed either entirely in registers or entirely on stack.  */\n  \n #undef FUNCTION_ARG_PARTIAL_NREGS\n /* #define FUNCTION_ARG_PARTIAL_NREGS(CUM,MODE,TYPE,NAMED) 0 */\n@@ -325,7 +325,7 @@ do { fprintf (FILE, \"\\tbr $1,0\\n\");\t\t\t\\\n \f\n /* Specify the machine mode that this machine uses for the index in the\n    tablejump instruction. On Unicos/Mk, we don't support relative case\n-   vectors yet, thus the entries should be absolute addresses. */ \n+   vectors yet, thus the entries should be absolute addresses.  */ \n \n #undef CASE_VECTOR_MODE\n #define CASE_VECTOR_MODE DImode\n@@ -401,7 +401,7 @@ ssib_section ()\t\t\t\\\n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\tunicosmk_asm_file_end (FILE)\n \n-/* We take care of that in ASM_FILE_START. */\n+/* We take care of that in ASM_FILE_START.  */\n \n #undef ASM_OUTPUT_SOURCE_FILENAME\n "}, {"sha": "3b00b269c4c44f35543fcfa062d59fc929a3874f", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285a5742c0cc7d86f78dca98ee0287ae6511d16d/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=285a5742c0cc7d86f78dca98ee0287ae6511d16d", "patch": "@@ -52,7 +52,7 @@ Boston, MA 02111-1307, USA.  */\n    %{!static:%{shared:-shared} %{!shared:-call_shared}} %{pg} %{taso} \\\n    %{rpath*}\"\n \n-/* We allow $'s in identifiers unless -ansi is used .. */\n+/* We allow $'s in identifiers unless -ansi is used ..  */\n \n #define DOLLARS_IN_IDENTIFIERS 2\n \n@@ -87,7 +87,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 32\n \n-/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended. */\n+/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n #undef POINTER_SIZE\n #define POINTER_SIZE 32\n #define POINTERS_EXTEND_UNSIGNED 0\n@@ -201,7 +201,7 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n    However, if NO registers need to be saved, don't allocate any space.\n    This is not only because we won't need the space, but because AP includes\n    the current_pretend_args_size and we don't want to mess up any\n-   ap-relative addresses already made.   */\n+   ap-relative addresses already made.  */\n \n #undef SETUP_INCOMING_VARARGS\n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\"}]}