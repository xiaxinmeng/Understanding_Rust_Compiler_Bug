{"sha": "8dc10d38ccd5b19f4437671102cc18c60919c221", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjMTBkMzhjY2Q1YjE5ZjQ0Mzc2NzExMDJjYzE4YzYwOTE5YzIyMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:13:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:13:27Z"}, "message": "[multiple changes]\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Implement Implicit_Packing for\n\trecords\n\n\t* gnat_rm.texi:\n\tAdd documentation for pragma Implicit_Packing applied to record\n\ttypes.\n\n2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Walk_Library_Items): Place all with_clauses of an\n\tinstantiation on the spec, because late instance bodies may generate\n\twith_clauses for the instance body but are inserted in the instance\n\tspec.\n\nFrom-SVN: r147158", "tree": {"sha": "c7250828c1aabe6ec694d4257049d9c7f3f268a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7250828c1aabe6ec694d4257049d9c7f3f268a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc10d38ccd5b19f4437671102cc18c60919c221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc10d38ccd5b19f4437671102cc18c60919c221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc10d38ccd5b19f4437671102cc18c60919c221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc10d38ccd5b19f4437671102cc18c60919c221/comments", "author": null, "committer": null, "parents": [{"sha": "3249690d952e78edf7d96b5bf217fa137f4bd4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3249690d952e78edf7d96b5bf217fa137f4bd4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3249690d952e78edf7d96b5bf217fa137f4bd4ef"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "4283d89449e394d5add1aa3f832f64c445c52a86", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8dc10d38ccd5b19f4437671102cc18c60919c221", "patch": "@@ -1,3 +1,19 @@\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Implement Implicit_Packing for\n+\trecords\n+\n+\t* gnat_rm.texi:\n+\tAdd documentation for pragma Implicit_Packing applied to record\n+\ttypes.\n+\n+2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): Place all with_clauses of an\n+\tinstantiation on the spec, because late instance bodies may generate\n+\twith_clauses for the instance body but are inserted in the instance\n+\tspec.\n+\n 2009-05-06  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-nmsc.adb (Locate_Directory): Remove unused parameters, and add"}, {"sha": "fa27be545a7068d227bf4d1b112b79d7633fd164", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8dc10d38ccd5b19f4437671102cc18c60919c221", "patch": "@@ -1,4 +1,4 @@\n------------------------------------------------------------------------------\n+------------------------------------------------------------------------------\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n@@ -1545,7 +1545,16 @@ package body Freeze is\n \n          Placed_Component : Boolean := False;\n          --  Set True if we find at least one component with a component\n-         --  clause (used to warn about useless Bit_Order pragmas).\n+         --  clause (used to warn about useless Bit_Order pragmas, and also\n+         --  to detect cases where Implicit_Packing may have an effect).\n+\n+         All_Scalar_Components : Boolean := True;\n+         --  Set False if we encounter a component of a non-scalar type\n+\n+         Scalar_Component_Total_RM_Size : Uint := Uint_0;\n+         Scalar_Component_Total_Esize   : Uint := Uint_0;\n+         --  Accumulates total RM_Size values and total Esize values of all\n+         --  scalar components. Used for processing of Implicit_Packing.\n \n          function Check_Allocator (N : Node_Id) return Node_Id;\n          --  If N is an allocator, possibly wrapped in one or more level of\n@@ -1855,6 +1864,19 @@ package body Freeze is\n                end;\n             end if;\n \n+            --  Processing for possible Implicit_Packing later\n+\n+            if Implicit_Packing then\n+               if not Is_Scalar_Type (Etype (Comp)) then\n+                  All_Scalar_Components := False;\n+               else\n+                  Scalar_Component_Total_RM_Size :=\n+                    Scalar_Component_Total_RM_Size + RM_Size (Etype (Comp));\n+                  Scalar_Component_Total_Esize :=\n+                    Scalar_Component_Total_Esize + Esize (Etype (Comp));\n+               end if;\n+            end if;\n+\n             --  If the component is an Itype with Delayed_Freeze and is either\n             --  a record or array subtype and its base type has not yet been\n             --  frozen, we must remove this from the entity list of this\n@@ -2061,7 +2083,7 @@ package body Freeze is\n          --  Finally, enforce the restriction that access attributes with a\n          --  current instance prefix can only apply to limited types.\n \n-         if  Ekind (Rec) = E_Record_Type then\n+         if Ekind (Rec) = E_Record_Type then\n             if Present (Corresponding_Remote_Type (Rec)) then\n                Freeze_And_Append\n                  (Corresponding_Remote_Type (Rec), Loc, Result);\n@@ -2163,6 +2185,18 @@ package body Freeze is\n                end if;\n             end;\n          end if;\n+\n+         --  Apply implicit packing if all conditions are met\n+\n+         if Implicit_Packing\n+           and then Has_Size_Clause (Rec)\n+           and then All_Scalar_Components\n+           and then not Has_Discriminants (Rec)\n+           and then Esize (Rec) < Scalar_Component_Total_Esize\n+           and then Esize (Rec) >= Scalar_Component_Total_RM_Size\n+         then\n+            Set_Is_Packed (Rec);\n+         end if;\n       end Freeze_Record_Type;\n \n    --  Start of processing for Freeze_Entity"}, {"sha": "0e126c35aa27568c3ab4a03e2b03e65998c0f20e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8dc10d38ccd5b19f4437671102cc18c60919c221", "patch": "@@ -2409,7 +2409,8 @@ pragma Implicit_Packing;\n @noindent\n This is a configuration pragma that requests implicit packing for packed\n arrays for which a size clause is given but no explicit pragma Pack or\n-specification of Component_Size is present. Consider this example:\n+specification of Component_Size is present. It also applies to records\n+where no record representation clause is present. Consider this example:\n \n @smallexample @c ada\n type R is array (0 .. 7) of Boolean;\n@@ -2431,6 +2432,21 @@ specify the exact size that corresponds to the length of the array multiplied\n by the size in bits of the component type.\n @cindex Array packing\n \n+Similarly, the following example shows the use in the record case\n+\n+@smallexample @c ada\n+type r is record\n+   a, b, c, d, e, f, g, h : boolean;\n+   chr                    : character;\n+end record;\n+for r'size use 16;\n+@end smallexample\n+\n+@noindent\n+Without a pragma Pack, each Boolean field requires 8 bits, so the\n+minimum size is 72 bits, but with a pragma Pack, 16 bits would be\n+sufficient. The use of pragma Implciit_Packing allows this record\n+declaration to compile without an explicit pragma Pack.\n @node Pragma Import_Exception\n @unnumberedsec Pragma Import_Exception\n @cindex OpenVMS"}, {"sha": "047460442fbb124b444f4a5a010b8903454123d6", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc10d38ccd5b19f4437671102cc18c60919c221/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=8dc10d38ccd5b19f4437671102cc18c60919c221", "patch": "@@ -1760,7 +1760,7 @@ package body Sem is\n                --  If it's a body, then ignore it, unless it's an instance (in\n                --  which case we do the spec), or it's the main unit (in which\n                --  case we do it). Note that it could be both, in which case we\n-               --  do the spec first.\n+               --  do the with_clauses of spec and body first,\n \n                when N_Package_Body | N_Subprogram_Body =>\n                   declare\n@@ -1783,7 +1783,15 @@ package body Sem is\n                      if Is_Generic_Instance (Entity) then\n                         declare\n                            Spec_Unit : constant Node_Id := Library_Unit (CU);\n+\n                         begin\n+                           --  Move context of body to that of spec, so it\n+                           --  appears before the spec itself, in case it\n+                           --  contains nested instances that generate late\n+                           --  with_clauses that got attached to the body.\n+\n+                           Append_List\n+                            (Context_Items (CU), Context_Items (Spec_Unit));\n                            Do_Unit_And_Dependents\n                              (Spec_Unit, Unit (Spec_Unit));\n                         end;"}]}