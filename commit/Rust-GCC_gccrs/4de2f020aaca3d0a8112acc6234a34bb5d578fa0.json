{"sha": "4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlMmYwMjBhYWNhM2QwYTgxMTJhY2M2MjM0YTM0YmI1ZDU3OGZhMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-11-07T00:46:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-11-07T00:46:45Z"}, "message": "init.c (perform_member_init): Use build_vec_init_expr for value-init of arrays, too.\n\n\t* init.c (perform_member_init): Use build_vec_init_expr for\n\tvalue-init of arrays, too.\n\t* cp-gimplify.c (cp_gimplify_expr): Use VEC_INIT_EXPR_VALUE_INIT.\n\t* cp-tree.h (VEC_INIT_EXPR_IS_CONSTEXPR): New macro.\n\t(VEC_INIT_EXPR_VALUE_INIT): New macro.\n\t* semantics.c (potential_constant_expression): No longer static.\n\tCheck VEC_INIT_EXPR_IS_CONSTEXPR.\n\t* tree.c (build_vec_init_expr): Handle value-init.  Set\n\tVEC_INIT_EXPR_IS_CONSTEXPR and VEC_INIT_EXPR_VALUE_INIT.\n\nFrom-SVN: r166413", "tree": {"sha": "45f9728915ac3c72a301c98db3b78300411445b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45f9728915ac3c72a301c98db3b78300411445b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acd6cc816df8ceee71651b20fb028b00cb4a7e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd6cc816df8ceee71651b20fb028b00cb4a7e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd6cc816df8ceee71651b20fb028b00cb4a7e96"}], "stats": {"total": 104, "additions": 76, "deletions": 28}, "files": [{"sha": "3f3a8ee33f51e7b052c7f0ec1fb5f10055a20b68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -1,3 +1,15 @@\n+2010-11-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (perform_member_init): Use build_vec_init_expr for\n+\tvalue-init of arrays, too.\n+\t* cp-gimplify.c (cp_gimplify_expr): Use VEC_INIT_EXPR_VALUE_INIT.\n+\t* cp-tree.h (VEC_INIT_EXPR_IS_CONSTEXPR): New macro.\n+\t(VEC_INIT_EXPR_VALUE_INIT): New macro.\n+\t* semantics.c (potential_constant_expression): No longer static.\n+\tCheck VEC_INIT_EXPR_IS_CONSTEXPR.\n+\t* tree.c (build_vec_init_expr): Handle value-init.  Set\n+\tVEC_INIT_EXPR_IS_CONSTEXPR and VEC_INIT_EXPR_VALUE_INIT.\n+\n 2010-11-06  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/45332"}, {"sha": "557430d6c833a5dc0005d2db84aeec54d9ba0ba1", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -535,7 +535,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \tgcc_assert (EXPR_HAS_LOCATION (*expr_p));\n \tinput_location = EXPR_LOCATION (*expr_p);\n \t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p), NULL_TREE,\n-\t\t\t\t  init, /*explicit_value_init_p*/false,\n+\t\t\t\t  init, VEC_INIT_EXPR_VALUE_INIT (*expr_p),\n \t\t\t\t  from_array,\n \t\t\t\t  tf_warning_or_error);\n \tret = GS_OK;"}, {"sha": "241805ca36b68e084b33371571acacc1a37c89d1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -72,6 +72,7 @@ c-common.h, not after.\n       CONSTRUCTOR_IS_DIRECT_INIT (in CONSTRUCTOR)\n       LAMBDA_EXPR_CAPTURES_THIS_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_CAPTURE (in DECLTYPE_TYPE)\n+      VEC_INIT_EXPR_IS_CONSTEXPR (in VEC_INIT_EXPR)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -2898,6 +2899,15 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (NODE, 0)\n #define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (NODE, 1)\n \n+/* Indicates that a VEC_INIT_EXPR is a potential constant expression.\n+   Only set when the current function is constexpr.  */\n+#define VEC_INIT_EXPR_IS_CONSTEXPR(NODE) \\\n+  TREE_LANG_FLAG_0 (VEC_INIT_EXPR_CHECK (NODE))\n+\n+/* Indicates that a VEC_INIT_EXPR is expressing value-initialization.  */\n+#define VEC_INIT_EXPR_VALUE_INIT(NODE) \\\n+  TREE_LANG_FLAG_1 (VEC_INIT_EXPR_CHECK (NODE))\n+\n /* The TYPE_MAIN_DECL for a class template type is a TYPE_DECL, not a\n    TEMPLATE_DECL.  This macro determines whether or not a given class\n    type is really a template type, as opposed to an instantiation or\n@@ -5240,6 +5250,7 @@ extern bool literal_type_p (tree);\n extern tree validate_constexpr_fundecl (tree);\n extern tree register_constexpr_fundef (tree, tree);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n+extern bool potential_constant_expression (tree, tsubst_flags_t);\n extern tree cxx_constant_value (tree);\n extern tree maybe_constant_value (tree);\n extern tree maybe_constant_init (tree);"}, {"sha": "0ecd61d3aed2971f6b8dd171e740333726a28286", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -453,10 +453,8 @@ perform_member_init (tree member, tree init)\n       /* mem() means value-initialization.  */\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  init = build_vec_init (decl, NULL_TREE, NULL_TREE,\n-\t\t\t\t /*explicit_value_init_p=*/true,\n-\t\t\t\t /* from_array=*/0,\n-\t\t\t\t tf_warning_or_error);\n+\t  init = build_vec_init_expr (type, init);\n+\t  init = build2 (INIT_EXPR, type, decl, init);\n \t  finish_expr_stmt (init);\n \t}\n       else"}, {"sha": "fd7da34475ac0afc12c93c8145a8599c0205ff70", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -5324,8 +5324,6 @@ typedef struct GTY(()) constexpr_fundef {\n \n static GTY ((param_is (constexpr_fundef))) htab_t constexpr_fundef_table;\n \n-static bool potential_constant_expression (tree, tsubst_flags_t);\n-\n /* Utility function used for managing the constexpr function table.\n    Return true if the entries pointed to by P and Q are for the\n    same constexpr function.  */\n@@ -7066,7 +7064,7 @@ morally_constexpr_builtin_function_p (tree decl)\n       logical OR (5.15), and conditional (5.16) operations that are\n       not evaluated are not considered.   */\n \n-static bool\n+bool\n potential_constant_expression (tree t, tsubst_flags_t flags)\n {\n   int i;\n@@ -7451,11 +7449,7 @@ potential_constant_expression (tree t, tsubst_flags_t flags)\n       return false;\n \n     case VEC_INIT_EXPR:\n-      /* We should only see this in a defaulted constructor for a class\n-\t with a non-static data member of array type; if we get here we\n-\t know this is a potential constant expression.  */\n-      gcc_assert (DECL_DEFAULTED_FN (current_function_decl));\n-      return true;\n+      return VEC_INIT_EXPR_IS_CONSTEXPR (t);\n \n     default:\n       sorry (\"unexpected ast of kind %s\", tree_code_name[TREE_CODE (t)]);"}, {"sha": "5440e10204e2b1340cc54b709d3d228541561efe", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -462,34 +462,54 @@ build_vec_init_expr (tree type, tree init)\n {\n   tree slot;\n   tree inner_type = strip_array_types (type);\n-\n-  gcc_assert (init == NULL_TREE\n-\t      || (same_type_ignoring_top_level_qualifiers_p\n-\t\t  (type, TREE_TYPE (init))));\n+  tree elt_init = integer_zero_node;\n+  bool value_init = false;\n \n   /* Since we're deferring building the actual constructor calls until\n      gimplification time, we need to build one now and throw it away so\n      that the relevant constructor gets mark_used before cgraph decides\n      what functions are needed.  Here we assume that init is either\n-     NULL_TREE or another array to copy.  */\n-  if (CLASS_TYPE_P (inner_type))\n+     NULL_TREE, void_type_node (indicating value-initialization), or\n+     another array to copy.  */\n+  if (init == void_type_node)\n     {\n-      VEC(tree,gc) *argvec = make_tree_vector ();\n-      if (init)\n+      elt_init = build_value_init (inner_type, tf_warning_or_error);\n+      value_init = true;\n+      init = NULL_TREE;\n+    }\n+  else\n+    {\n+      gcc_assert (init == NULL_TREE\n+\t\t  || (same_type_ignoring_top_level_qualifiers_p\n+\t\t      (type, TREE_TYPE (init))));\n+\n+      if (CLASS_TYPE_P (inner_type))\n \t{\n-\t  tree dummy = build_dummy_object (inner_type);\n-\t  if (!real_lvalue_p (init))\n-\t    dummy = move (dummy);\n-\t  VEC_quick_push (tree, argvec, dummy);\n+\t  VEC(tree,gc) *argvec = make_tree_vector ();\n+\t  if (init)\n+\t    {\n+\t      tree dummy = build_dummy_object (inner_type);\n+\t      if (!real_lvalue_p (init))\n+\t\tdummy = move (dummy);\n+\t      VEC_quick_push (tree, argvec, dummy);\n+\t    }\n+\t  elt_init\n+\t    = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t\t &argvec, inner_type, LOOKUP_NORMAL,\n+\t\t\t\t\t tf_warning_or_error);\n \t}\n-      build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t &argvec, inner_type, LOOKUP_NORMAL,\n-\t\t\t\t tf_warning_or_error);\n     }\n \n   slot = build_local_temp (type);\n   init = build2 (VEC_INIT_EXPR, type, slot, init);\n   SET_EXPR_LOCATION (init, input_location);\n+\n+  if (current_function_decl\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+      && potential_constant_expression (elt_init, tf_warning_or_error))\n+    VEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n+  VEC_INIT_EXPR_VALUE_INIT (init) = value_init;\n+\n   init = build_target_expr (slot, init);\n   TARGET_EXPR_IMPLICIT_P (init) = 1;\n "}, {"sha": "c5ccdb8000526f6d529eafbb2fa5bd6130509742", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -1,3 +1,7 @@\n+2010-11-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-ctor3.C: New.\n+\n 2010-11-06  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c/43384"}, {"sha": "50d4d8526dc7614bc8369e3bb27aa3aab79b4509", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de2f020aaca3d0a8112acc6234a34bb5d578fa0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor3.C?ref=4de2f020aaca3d0a8112acc6234a34bb5d578fa0", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  int arr[1];\n+\n+  constexpr A()\n+  : arr() { }\n+};"}]}