{"sha": "294d0b3dd65e8226f9275b2a0448d467ffc4dc76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0ZDBiM2RkNjVlODIyNmY5Mjc1YjJhMDQ0OGQ0NjdmZmM0ZGM3Ng==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-05-23T22:03:11Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-05-23T22:03:11Z"}, "message": "entered into RCS\n\nFrom-SVN: r1067", "tree": {"sha": "95eeb4eeaf69509fd78f2c1a06919299c0934daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95eeb4eeaf69509fd78f2c1a06919299c0934daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294d0b3dd65e8226f9275b2a0448d467ffc4dc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294d0b3dd65e8226f9275b2a0448d467ffc4dc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294d0b3dd65e8226f9275b2a0448d467ffc4dc76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294d0b3dd65e8226f9275b2a0448d467ffc4dc76/comments", "author": null, "committer": null, "parents": [{"sha": "93639b52a650a8844ce69d1a0cb27b497e588dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93639b52a650a8844ce69d1a0cb27b497e588dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93639b52a650a8844ce69d1a0cb27b497e588dd7"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "02f50a8e1b4c6c90daba37944892c956feb01c2b", "filename": "gcc/ginclude/math-68881.h", "status": "modified", "additions": 74, "deletions": 40, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294d0b3dd65e8226f9275b2a0448d467ffc4dc76/gcc%2Fginclude%2Fmath-68881.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294d0b3dd65e8226f9275b2a0448d467ffc4dc76/gcc%2Fginclude%2Fmath-68881.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fmath-68881.h?ref=294d0b3dd65e8226f9275b2a0448d467ffc4dc76", "patch": "@@ -1,6 +1,6 @@\n /******************************************************************\\\n *\t\t\t\t\t\t\t\t   *\n-*  <math-68881.h>\t\tlast modified: 18 May 1989.\t   *\n+*  <math-68881.h>\t\tlast modified: 23 May 1992.\t   *\n *\t\t\t\t\t\t\t\t   *\n *  Copyright (C) 1989 by Matthew Self.\t\t\t\t   *\n *  You may freely distribute verbatim copies of this software\t   *\n@@ -19,9 +19,13 @@\n *\t\t\t\t\t\t\t\t   *\n \\******************************************************************/\n \n+/* If you find this in GCC,\n+   please send bug reports to bug-gcc@prep.ai.mit.edu.  */\n+\n /* Changed by Richard Stallman: % inserted before a #.\n    New function `hypot' added.\n    Nans written in hex to avoid 0rnan.\n+   May 1992, use %! for fpcr register.  Break lines before function names.\n    December 1989, add parens around `&' in pow.\n    November 1990, added alternate definition of HUGE_VAL for Sun.  */\n \n@@ -48,7 +52,8 @@\n #endif\n #endif\n \n-__inline static const double sin (double x)\n+__inline static const double\n+sin (double x)\n {\n   double value;\n \n@@ -58,7 +63,8 @@ __inline static const double sin (double x)\n   return value;\n }\n \n-__inline static const double cos (double x)\n+__inline static const double\n+cos (double x)\n {\n   double value;\n \n@@ -68,7 +74,8 @@ __inline static const double cos (double x)\n   return value;\n }\n \n-__inline static const double tan (double x)\n+__inline static const double\n+tan (double x)\n {\n   double value;\n \n@@ -78,7 +85,8 @@ __inline static const double tan (double x)\n   return value;\n }\n \n-__inline static const double asin (double x)\n+__inline static const double\n+asin (double x)\n {\n   double value;\n \n@@ -88,7 +96,8 @@ __inline static const double asin (double x)\n   return value;\n }\n \n-__inline static const double acos (double x)\n+__inline static const double\n+acos (double x)\n {\n   double value;\n \n@@ -98,7 +107,8 @@ __inline static const double acos (double x)\n   return value;\n }\n \n-__inline static const double atan (double x)\n+__inline static const double\n+atan (double x)\n {\n   double value;\n \n@@ -108,7 +118,8 @@ __inline static const double atan (double x)\n   return value;\n }\n \n-__inline static const double atan2 (double y, double x)\n+__inline static const double\n+atan2 (double y, double x)\n {\n   double pi, pi_over_2;\n \n@@ -164,7 +175,8 @@ __inline static const double atan2 (double y, double x)\n     }\n }\n \n-__inline static const double sinh (double x)\n+__inline static const double\n+sinh (double x)\n {\n   double value;\n \n@@ -174,7 +186,8 @@ __inline static const double sinh (double x)\n   return value;\n }\n \n-__inline static const double cosh (double x)\n+__inline static const double\n+cosh (double x)\n {\n   double value;\n \n@@ -184,7 +197,8 @@ __inline static const double cosh (double x)\n   return value;\n }\n \n-__inline static const double tanh (double x)\n+__inline static const double\n+tanh (double x)\n {\n   double value;\n \n@@ -194,7 +208,8 @@ __inline static const double tanh (double x)\n   return value;\n }\n \n-__inline static const double atanh (double x)\n+__inline static const double\n+atanh (double x)\n {\n   double value;\n \n@@ -204,7 +219,8 @@ __inline static const double atanh (double x)\n   return value;\n }\n \n-__inline static const double exp (double x)\n+__inline static const double\n+exp (double x)\n {\n   double value;\n \n@@ -214,7 +230,8 @@ __inline static const double exp (double x)\n   return value;\n }\n \n-__inline static const double expm1 (double x)\n+__inline static const double\n+expm1 (double x)\n {\n   double value;\n \n@@ -224,7 +241,8 @@ __inline static const double expm1 (double x)\n   return value;\n }\n \n-__inline static const double log (double x)\n+__inline static const double\n+log (double x)\n {\n   double value;\n \n@@ -234,7 +252,8 @@ __inline static const double log (double x)\n   return value;\n }\n \n-__inline static const double log1p (double x)\n+__inline static const double\n+log1p (double x)\n {\n   double value;\n \n@@ -244,7 +263,8 @@ __inline static const double log1p (double x)\n   return value;\n }\n \n-__inline static const double log10 (double x)\n+__inline static const double\n+log10 (double x)\n {\n   double value;\n \n@@ -254,7 +274,8 @@ __inline static const double log10 (double x)\n   return value;\n }\n \n-__inline static const double sqrt (double x)\n+__inline static const double\n+sqrt (double x)\n {\n   double value;\n \n@@ -264,12 +285,14 @@ __inline static const double sqrt (double x)\n   return value;\n }\n \n-__inline static const double hypot (const double x, const double y)\n+__inline static const double\n+hypot (const double x, const double y)\n {\n   return sqrt (x*x + y*y);\n }\n \n-__inline static const double pow (const double x, const double y)\n+__inline static const double\n+pow (const double x, const double y)\n {\n   if (x > 0)\n     return exp (y * log (x));\n@@ -317,7 +340,8 @@ __inline static const double pow (const double x, const double y)\n     }\n }\n \n-__inline static const double fabs (double x)\n+__inline static const double\n+fabs (double x)\n {\n   double value;\n \n@@ -327,71 +351,75 @@ __inline static const double fabs (double x)\n   return value;\n }\n \n-__inline static const double ceil (double x)\n+__inline static const double\n+ceil (double x)\n {\n   int rounding_mode, round_up;\n   double value;\n \n-  __asm volatile (\"fmove%.l fpcr,%0\"\n+  __asm volatile (\"fmove%.l %!,%0\"\n \t\t  : \"=dm\" (rounding_mode)\n \t\t  : /* no inputs */ );\n   round_up = rounding_mode | 0x30;\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (round_up));\n   __asm volatile (\"fint%.x %1,%0\"\n \t\t  : \"=f\" (value)\n \t\t  : \"f\" (x));\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (rounding_mode));\n   return value;\n }\n \n-__inline static const double floor (double x)\n+__inline static const double\n+floor (double x)\n {\n   int rounding_mode, round_down;\n   double value;\n \n-  __asm volatile (\"fmove%.l fpcr,%0\"\n+  __asm volatile (\"fmove%.l %!,%0\"\n \t\t  : \"=dm\" (rounding_mode)\n \t\t  : /* no inputs */ );\n   round_down = (rounding_mode & ~0x10)\n \t\t| 0x20;\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (round_down));\n   __asm volatile (\"fint%.x %1,%0\"\n \t\t  : \"=f\" (value)\n \t\t  : \"f\" (x));\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (rounding_mode));\n   return value;\n }\n \n-__inline static const double rint (double x)\n+__inline static const double\n+rint (double x)\n {\n   int rounding_mode, round_nearest;\n   double value;\n \n-  __asm volatile (\"fmove%.l fpcr,%0\"\n+  __asm volatile (\"fmove%.l %!,%0\"\n \t\t  : \"=dm\" (rounding_mode)\n \t\t  : /* no inputs */ );\n   round_nearest = rounding_mode & ~0x30;\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (round_nearest));\n   __asm volatile (\"fint%.x %1,%0\"\n \t\t  : \"=f\" (value)\n \t\t  : \"f\" (x));\n-  __asm volatile (\"fmove%.l %0,fpcr\"\n+  __asm volatile (\"fmove%.l %0,%!\"\n \t\t  : /* no outputs */\n \t\t  : \"dmi\" (rounding_mode));\n   return value;\n }\n \n-__inline static const double fmod (double x, double y)\n+__inline static const double\n+fmod (double x, double y)\n {\n   double value;\n \n@@ -402,7 +430,8 @@ __inline static const double fmod (double x, double y)\n   return value;\n }\n \n-__inline static const double drem (double x, double y)\n+__inline static const double\n+drem (double x, double y)\n {\n   double value;\n \n@@ -413,7 +442,8 @@ __inline static const double drem (double x, double y)\n   return value;\n }\n \n-__inline static const double scalb (double x, int n)\n+__inline static const double\n+scalb (double x, int n)\n {\n   double value;\n \n@@ -424,7 +454,8 @@ __inline static const double scalb (double x, int n)\n   return value;\n }\n \n-__inline static double logb (double x)\n+__inline static double\n+logb (double x)\n {\n   double exponent;\n \n@@ -434,7 +465,8 @@ __inline static double logb (double x)\n   return exponent;\n }\n \n-__inline static const double ldexp (double x, int n)\n+__inline static const double\n+ldexp (double x, int n)\n {\n   double value;\n \n@@ -445,7 +477,8 @@ __inline static const double ldexp (double x, int n)\n   return value;\n }\n \n-__inline static double frexp (double x, int *exp)\n+__inline static double\n+frexp (double x, int *exp)\n {\n   double float_exponent;\n   int int_exponent;\n@@ -469,7 +502,8 @@ __inline static double frexp (double x, int *exp)\n   return mantissa;\n }\n \n-__inline static double modf (double x, double *ip)\n+__inline static double\n+modf (double x, double *ip)\n {\n   double temp;\n "}]}