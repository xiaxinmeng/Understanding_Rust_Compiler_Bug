{"sha": "98aad294705ac35aec058e020867d736d841dad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhYWQyOTQ3MDVhYzM1YWVjMDU4ZTAyMDg2N2Q3MzZkODQxZGFkMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-11T19:11:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-11T19:11:02Z"}, "message": "ipa-prop.c (ipa_propagate_indirect_call_infos): Remove ipcp summary.\n\n\t* ipa-prop.c (ipa_propagate_indirect_call_infos): Remove ipcp\n\tsummary.\n\t(ipcp_transformation_t::duplicate): Break out from ...\n\t(ipa_node_params_t::duplicate): ... here; add copying of agg\n\treplacements.\n\t* ipa-prop.h (ipcp_transformation): Add constructor and destructor.\n\t(ipcp_transformation_t): Add duplicate.\n\nFrom-SVN: r278062", "tree": {"sha": "06af2352f1bd5c5a3cbfdd8ba9ab736bb6dd968c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06af2352f1bd5c5a3cbfdd8ba9ab736bb6dd968c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98aad294705ac35aec058e020867d736d841dad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98aad294705ac35aec058e020867d736d841dad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98aad294705ac35aec058e020867d736d841dad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98aad294705ac35aec058e020867d736d841dad0/comments", "author": null, "committer": null, "parents": [{"sha": "8be34204decbb1bd751bee05394be5c995831503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be34204decbb1bd751bee05394be5c995831503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be34204decbb1bd751bee05394be5c995831503"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "72d1e3d672df67bfc1762987badc24081a278fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98aad294705ac35aec058e020867d736d841dad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98aad294705ac35aec058e020867d736d841dad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98aad294705ac35aec058e020867d736d841dad0", "patch": "@@ -1,3 +1,13 @@\n+2019-11-11  Jan Hubicka  <hubcika@ucw.cz>\n+\n+\t* ipa-prop.c (ipa_propagate_indirect_call_infos): Remove ipcp\n+\tsummary.\n+\t(ipcp_transformation_t::duplicate): Break out from ...\n+\t(ipa_node_params_t::duplicate): ... here; add copying of agg\n+\treplacements.\n+\t* ipa-prop.h (ipcp_transformation): Add constructor and destructor.\n+\t(ipcp_transformation_t): Add duplicate.\n+\n 2019-11-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR fortran/91828"}, {"sha": "a6c135f242bc56455901a30652ca585894a7dc2a", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98aad294705ac35aec058e020867d736d841dad0/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98aad294705ac35aec058e020867d736d841dad0/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=98aad294705ac35aec058e020867d736d841dad0", "patch": "@@ -3746,6 +3746,8 @@ ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n       if (ok)\n         ipa_edge_args_sum->remove (cs);\n     }\n+  if (ipcp_transformation_sum)\n+    ipcp_transformation_sum->remove (cs->callee);\n \n   return changed;\n }\n@@ -3986,27 +3988,28 @@ ipa_node_params_t::duplicate(cgraph_node *src, cgraph_node *dst,\n \t}\n       ipa_set_node_agg_value_chain (dst, new_av);\n     }\n+}\n \n-  ipcp_transformation *src_trans = ipcp_get_transformation_summary (src);\n-\n-  if (src_trans)\n-    {\n-      ipcp_transformation_initialize ();\n-      src_trans = ipcp_transformation_sum->get_create (src);\n-      ipcp_transformation *dst_trans\n-\t= ipcp_transformation_sum->get_create (dst);\n-\n-      dst_trans->bits = vec_safe_copy (src_trans->bits);\n+/* Duplication of ipcp transformation summaries.  */\n \n-      const vec<ipa_vr, va_gc> *src_vr = src_trans->m_vr;\n-      vec<ipa_vr, va_gc> *&dst_vr\n-\t= ipcp_get_transformation_summary (dst)->m_vr;\n-      if (vec_safe_length (src_trans->m_vr) > 0)\n-\t{\n-\t  vec_safe_reserve_exact (dst_vr, src_vr->length ());\n-\t  for (unsigned i = 0; i < src_vr->length (); ++i)\n-\t    dst_vr->quick_push ((*src_vr)[i]);\n-\t}\n+void\n+ipcp_transformation_t::duplicate(cgraph_node *, cgraph_node *dst,\n+\t\t\t         ipcp_transformation *src_trans,\n+\t\t\t         ipcp_transformation *dst_trans)\n+{\n+  /* Avoid redundant work of duplicating vectors we will never use.  */\n+  if (dst->inlined_to)\n+    return;\n+  dst_trans->bits = vec_safe_copy (src_trans->bits);\n+  dst_trans->m_vr = vec_safe_copy (src_trans->m_vr);\n+  ipa_agg_replacement_value *agg = src_trans->agg_values,\n+\t\t\t    **aggptr = &dst_trans->agg_values;\n+  while (agg)\n+    {\n+      *aggptr = ggc_alloc<ipa_agg_replacement_value> ();\n+      **aggptr = *agg;\n+      agg = agg->next;\n+      aggptr = &(*aggptr)->next;\n     }\n }\n "}, {"sha": "3422cb2ddb95c614e0f71d6341c1495bbf3a7b0a", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98aad294705ac35aec058e020867d736d841dad0/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98aad294705ac35aec058e020867d736d841dad0/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=98aad294705ac35aec058e020867d736d841dad0", "patch": "@@ -639,6 +639,25 @@ struct GTY(()) ipcp_transformation\n   vec<ipa_bits *, va_gc> *bits;\n   /* Value range information.  */\n   vec<ipa_vr, va_gc> *m_vr;\n+\n+  /* Default constructor.  */\n+  ipcp_transformation ()\n+  : agg_values (NULL), bits (NULL), m_vr (NULL)\n+  { }\n+\n+  /* Default destructor.  */\n+  ~ipcp_transformation ()\n+  {\n+    ipa_agg_replacement_value *agg = agg_values;\n+    while (agg)\n+      {\n+\tipa_agg_replacement_value *next = agg->next;\n+\tggc_free (agg);\n+\tagg = next;\n+      }\n+    vec_free (bits);\n+    vec_free (m_vr);\n+  }\n };\n \n void ipa_set_node_agg_value_chain (struct cgraph_node *node,\n@@ -759,6 +778,11 @@ class ipcp_transformation_t\n       ipcp_transformation_t (symtab, true);\n     return summary;\n   }\n+  /* Hook that is called by summary when a node is duplicated.  */\n+  virtual void duplicate (cgraph_node *node,\n+\t\t\t  cgraph_node *node2,\n+\t\t\t  ipcp_transformation *data,\n+\t\t\t  ipcp_transformation *data2);\n };\n \n /* Function summary where the IPA CP transformations are actually stored.  */"}]}