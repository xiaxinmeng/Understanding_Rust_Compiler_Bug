{"sha": "fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlMzczNzFjZjM3MmI4NGQ1YjdmMWE2ZjVmMDk3MWE1MTNkZDVmYQ==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-28T02:24:03Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-28T03:34:08Z"}, "message": "rs6000: Fix vec insert ilp32 ICE and test failures [PR98799]\n\nUNSPEC_SI_FROM_SF is not supported when TARGET_DIRECT_MOVE_64BIT\nis false for -m32, don't generate VIEW_CONVERT_EXPR(ARRAY_REF) for\nvariable vector insert.  Remove rs6000_expand_vector_set_var helper\nfunction, adjust the p8 and p9 definitions position and make them\nstatic.\n\nThe previous commit r11-6858 missed check m32, This patch is tested pass\non P7BE{m32,m64}/P8BE{m32,m64}/P8LE/P9LE with\nRUNTESTFLAGS=\"--target_board =unix'{-m32,-m64}'\" for BE targets.\n\ngcc/ChangeLog:\n\n2021-01-27  Xionghu Luo  <luoxhu@linux.ibm.com>\n\t    David Edelsohn  <dje.gcc@gmail.com>\n\n\tPR target/98799\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tDon't generate VIEW_CONVERT_EXPR for fcode ALTIVEC_BUILTIN_VEC_INSERT\n\twhen -m32.\n\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_set_var):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Remove the\n\twrapper call rs6000_expand_vector_set_var for cleanup.  Call\n\trs6000_expand_vector_set_var_p9 and rs6000_expand_vector_set_var_p8\n\tdirectly.\n\t(rs6000_expand_vector_set_var): Delete.\n\t(rs6000_expand_vector_set_var_p9): Make static.\n\t(rs6000_expand_vector_set_var_p8): Make static.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-27  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/98827\n\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Adjust ilp32.\n\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n\t* gcc.target/powerpc/pr79251.p8.c: Likewise.\n\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.\n\t* gcc.target/powerpc/pr79251-run.c: Build and run with vsx\n\toption.", "tree": {"sha": "faa8d9a8b239467ff6e0c094b12784cd3d62cd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faa8d9a8b239467ff6e0c094b12784cd3d62cd0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76d0d86454baf99ada0748c73a29816854e1b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76d0d86454baf99ada0748c73a29816854e1b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76d0d86454baf99ada0748c73a29816854e1b91"}], "stats": {"total": 383, "additions": 208, "deletions": 175}, "files": [{"sha": "656cdb39f3fa0dbdb0673d88e40820ecb5fbc5c1", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -1600,7 +1600,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  stmt = build1 (COMPOUND_LITERAL_EXPR, arg1_type, stmt);\n \t}\n \n-      if (TARGET_P8_VECTOR)\n+      if (TARGET_P8_VECTOR && TARGET_DIRECT_MOVE_64BIT)\n \t{\n \t  stmt = build_array_ref (loc, stmt, arg2);\n \t  stmt = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg0), stmt,"}, {"sha": "d9d44fe982198f1a9dfa68117ddaca87d7f1f022", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -58,7 +58,6 @@ extern bool rs6000_split_128bit_ok_p (rtx []);\n extern void rs6000_expand_float128_convert (rtx, rtx, bool);\n extern void rs6000_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, rtx);\n-extern void rs6000_expand_vector_set_var (rtx, rtx, rtx);\n extern void rs6000_expand_vector_extract (rtx, rtx, rtx);\n extern void rs6000_split_vec_extract_var (rtx, rtx, rtx, rtx, rtx);\n extern rtx rs6000_adjust_vec_address (rtx, rtx, rtx, rtx, machine_mode);"}, {"sha": "ccfbe7ba9f1278a37c1caadc36c3397a5a837e7a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 116, "deletions": 120, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -6984,122 +6984,10 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n   emit_move_insn (target, mem);\n }\n \n-/* Set field ELT_RTX of TARGET to VAL.  */\n-\n-void\n-rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n-{\n-  machine_mode mode = GET_MODE (target);\n-  machine_mode inner_mode = GET_MODE_INNER (mode);\n-  rtx reg = gen_reg_rtx (mode);\n-  rtx mask, mem, x;\n-  int width = GET_MODE_SIZE (inner_mode);\n-  int i;\n-\n-  val = force_reg (GET_MODE (val), val);\n-\n-  if (VECTOR_MEM_VSX_P (mode))\n-    {\n-      if (!CONST_INT_P (elt_rtx))\n-\t{\n-\t  rs6000_expand_vector_set_var (target, val, elt_rtx);\n-\t  return;\n-\t}\n-\n-      rtx insn = NULL_RTX;\n-\n-      if (mode == V2DFmode)\n-\tinsn = gen_vsx_set_v2df (target, target, val, elt_rtx);\n-\n-      else if (mode == V2DImode)\n-\tinsn = gen_vsx_set_v2di (target, target, val, elt_rtx);\n-\n-      else if (TARGET_P9_VECTOR && TARGET_POWERPC64)\n-\t{\n-\t  if (mode == V4SImode)\n-\t    insn = gen_vsx_set_v4si_p9 (target, target, val, elt_rtx);\n-\t  else if (mode == V8HImode)\n-\t    insn = gen_vsx_set_v8hi_p9 (target, target, val, elt_rtx);\n-\t  else if (mode == V16QImode)\n-\t    insn = gen_vsx_set_v16qi_p9 (target, target, val, elt_rtx);\n-\t  else if (mode == V4SFmode)\n-\t    insn = gen_vsx_set_v4sf_p9 (target, target, val, elt_rtx);\n-\t}\n-\n-      if (insn)\n-\t{\n-\t  emit_insn (insn);\n-\t  return;\n-\t}\n-    }\n-\n-  gcc_assert (CONST_INT_P (elt_rtx));\n-\n-  /* Simplify setting single element vectors like V1TImode.  */\n-  if (GET_MODE_SIZE (mode) == GET_MODE_SIZE (inner_mode)\n-      && INTVAL (elt_rtx) == 0)\n-    {\n-      emit_move_insn (target, gen_lowpart (mode, val));\n-      return;\n-    }\n-\n-  /* Load single variable value.  */\n-  mem = assign_stack_temp (mode, GET_MODE_SIZE (inner_mode));\n-  emit_move_insn (adjust_address_nv (mem, inner_mode, 0), val);\n-  x = gen_rtx_UNSPEC (VOIDmode,\n-\t\t      gen_rtvec (1, const0_rtx), UNSPEC_LVE);\n-  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t       gen_rtvec (2,\n-\t\t\t\t\t  gen_rtx_SET (reg, mem),\n-\t\t\t\t\t  x)));\n-\n-  /* Linear sequence.  */\n-  mask = gen_rtx_PARALLEL (V16QImode, rtvec_alloc (16));\n-  for (i = 0; i < 16; ++i)\n-    XVECEXP (mask, 0, i) = GEN_INT (i);\n-\n-  /* Set permute mask to insert element into target.  */\n-  for (i = 0; i < width; ++i)\n-    XVECEXP (mask, 0, INTVAL (elt_rtx) * width + i) = GEN_INT (i + 0x10);\n-  x = gen_rtx_CONST_VECTOR (V16QImode, XVEC (mask, 0));\n-\n-  if (BYTES_BIG_ENDIAN)\n-    x = gen_rtx_UNSPEC (mode,\n-\t\t\tgen_rtvec (3, target, reg,\n-\t\t\t\t   force_reg (V16QImode, x)),\n-\t\t\tUNSPEC_VPERM);\n-  else\n-    {\n-      if (TARGET_P9_VECTOR)\n-\tx = gen_rtx_UNSPEC (mode,\n-\t\t\t    gen_rtvec (3, reg, target,\n-\t\t\t\t       force_reg (V16QImode, x)),\n-\t\t\t    UNSPEC_VPERMR);\n-      else\n-\t{\n-\t  /* Invert selector.  We prefer to generate VNAND on P8 so\n-\t     that future fusion opportunities can kick in, but must\n-\t     generate VNOR elsewhere.  */\n-\t  rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n-\t  rtx iorx = (TARGET_P8_VECTOR\n-\t\t      ? gen_rtx_IOR (V16QImode, notx, notx)\n-\t\t      : gen_rtx_AND (V16QImode, notx, notx));\n-\t  rtx tmp = gen_reg_rtx (V16QImode);\n-\t  emit_insn (gen_rtx_SET (tmp, iorx));\n-\n-\t  /* Permute with operands reversed and adjusted selector.  */\n-\t  x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n-\t\t\t      UNSPEC_VPERM);\n-\t}\n-    }\n-\n-  emit_insn (gen_rtx_SET (target, x));\n-}\n-\n /* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n    is variable and also counts by vector element size for p9 and above.  */\n \n-void\n+static void\n rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n {\n   machine_mode mode = GET_MODE (target);\n@@ -7146,7 +7034,7 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n /* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n    is variable and also counts by vector element size for p8.  */\n \n-void\n+static void\n rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n {\n   machine_mode mode = GET_MODE (target);\n@@ -7242,18 +7130,126 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n     gen_vector_select_v16qi (target_v16qi, target_v16qi, val_perm, mask_perm));\n }\n \n-/* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n-   is variable and also counts by vector element size.  */\n+/* Set field ELT_RTX of TARGET to VAL.  */\n \n void\n-rs6000_expand_vector_set_var (rtx target, rtx val, rtx idx)\n+rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n {\n   machine_mode mode = GET_MODE (target);\n   machine_mode inner_mode = GET_MODE_INNER (mode);\n-  if (TARGET_P9_VECTOR || GET_MODE_SIZE (inner_mode) == 8)\n-    rs6000_expand_vector_set_var_p9 (target, val, idx);\n+  rtx reg = gen_reg_rtx (mode);\n+  rtx mask, mem, x;\n+  int width = GET_MODE_SIZE (inner_mode);\n+  int i;\n+\n+  val = force_reg (GET_MODE (val), val);\n+\n+  if (VECTOR_MEM_VSX_P (mode))\n+    {\n+      if (!CONST_INT_P (elt_rtx))\n+\t{\n+\t  /* For V2DI/V2DF, could leverage the P9 version to generate xxpermdi\n+\t     when elt_rtx is variable.  */\n+\t  if ((TARGET_P9_VECTOR && TARGET_POWERPC64) || width == 8)\n+\t    {\n+\t      rs6000_expand_vector_set_var_p9 (target, val, elt_rtx);\n+\t      return;\n+\t    }\n+\t  else if (TARGET_P8_VECTOR && TARGET_DIRECT_MOVE_64BIT)\n+\t    {\n+\t      rs6000_expand_vector_set_var_p8 (target, val, elt_rtx);\n+\t      return;\n+\t    }\n+\t}\n+\n+      rtx insn = NULL_RTX;\n+\n+      if (mode == V2DFmode)\n+\tinsn = gen_vsx_set_v2df (target, target, val, elt_rtx);\n+\n+      else if (mode == V2DImode)\n+\tinsn = gen_vsx_set_v2di (target, target, val, elt_rtx);\n+\n+      else if (TARGET_P9_VECTOR && TARGET_POWERPC64)\n+\t{\n+\t  if (mode == V4SImode)\n+\t    insn = gen_vsx_set_v4si_p9 (target, target, val, elt_rtx);\n+\t  else if (mode == V8HImode)\n+\t    insn = gen_vsx_set_v8hi_p9 (target, target, val, elt_rtx);\n+\t  else if (mode == V16QImode)\n+\t    insn = gen_vsx_set_v16qi_p9 (target, target, val, elt_rtx);\n+\t  else if (mode == V4SFmode)\n+\t    insn = gen_vsx_set_v4sf_p9 (target, target, val, elt_rtx);\n+\t}\n+\n+      if (insn)\n+\t{\n+\t  emit_insn (insn);\n+\t  return;\n+\t}\n+    }\n+\n+  gcc_assert (CONST_INT_P (elt_rtx));\n+\n+  /* Simplify setting single element vectors like V1TImode.  */\n+  if (GET_MODE_SIZE (mode) == GET_MODE_SIZE (inner_mode)\n+      && INTVAL (elt_rtx) == 0)\n+    {\n+      emit_move_insn (target, gen_lowpart (mode, val));\n+      return;\n+    }\n+\n+  /* Load single variable value.  */\n+  mem = assign_stack_temp (mode, GET_MODE_SIZE (inner_mode));\n+  emit_move_insn (adjust_address_nv (mem, inner_mode, 0), val);\n+  x = gen_rtx_UNSPEC (VOIDmode,\n+\t\t      gen_rtvec (1, const0_rtx), UNSPEC_LVE);\n+  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (2,\n+\t\t\t\t\t  gen_rtx_SET (reg, mem),\n+\t\t\t\t\t  x)));\n+\n+  /* Linear sequence.  */\n+  mask = gen_rtx_PARALLEL (V16QImode, rtvec_alloc (16));\n+  for (i = 0; i < 16; ++i)\n+    XVECEXP (mask, 0, i) = GEN_INT (i);\n+\n+  /* Set permute mask to insert element into target.  */\n+  for (i = 0; i < width; ++i)\n+    XVECEXP (mask, 0, INTVAL (elt_rtx) * width + i) = GEN_INT (i + 0x10);\n+  x = gen_rtx_CONST_VECTOR (V16QImode, XVEC (mask, 0));\n+\n+  if (BYTES_BIG_ENDIAN)\n+    x = gen_rtx_UNSPEC (mode,\n+\t\t\tgen_rtvec (3, target, reg,\n+\t\t\t\t   force_reg (V16QImode, x)),\n+\t\t\tUNSPEC_VPERM);\n   else\n-    rs6000_expand_vector_set_var_p8 (target, val, idx);\n+    {\n+      if (TARGET_P9_VECTOR)\n+\tx = gen_rtx_UNSPEC (mode,\n+\t\t\t    gen_rtvec (3, reg, target,\n+\t\t\t\t       force_reg (V16QImode, x)),\n+\t\t\t    UNSPEC_VPERMR);\n+      else\n+\t{\n+\t  /* Invert selector.  We prefer to generate VNAND on P8 so\n+\t     that future fusion opportunities can kick in, but must\n+\t     generate VNOR elsewhere.  */\n+\t  rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n+\t  rtx iorx = (TARGET_P8_VECTOR\n+\t\t      ? gen_rtx_IOR (V16QImode, notx, notx)\n+\t\t      : gen_rtx_AND (V16QImode, notx, notx));\n+\t  rtx tmp = gen_reg_rtx (V16QImode);\n+\t  emit_insn (gen_rtx_SET (tmp, iorx));\n+\n+\t  /* Permute with operands reversed and adjusted selector.  */\n+\t  x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n+\t\t\t      UNSPEC_VPERM);\n+\t}\n+    }\n+\n+  emit_insn (gen_rtx_SET (target, x));\n }\n \n /* Extract field ELT from VEC into TARGET.  */"}, {"sha": "4149d5240c8d70ba4afd15e1d13c0b0a36878d25", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p8.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -45,15 +45,21 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n }\n \n /* no store per _var test */\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 0 { target lp64 } } } */\n /* one store-byte per test */\n-/* { dg-final { scan-assembler-times {\\mstb\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 4 { target lp64 } } } */\n /* one load per test */\n /* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target le } } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target be } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target { be && lp64 } } } } */\n \n /* one lvebx per _cst test.*/\n /* { dg-final { scan-assembler-times {\\mlvebx\\M} 4 } } */\n /* one vperm per _cst test.*/\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n+\n+/* -m32 codegen. */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n "}, {"sha": "b8e751fa2c16f70db2548637433d8f3be66dfead", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -56,6 +56,6 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstb\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvebx\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvebx\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */"}, {"sha": "1286010bbaf38e46e946e1d2178cc910a4cccd14", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-double.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -28,7 +28,11 @@ testd_cst (double d, vector double vd)\n /* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { ! has_arch_pwr8 } } } } */\n /* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { ! has_arch_pwr8 } } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr8 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr8 } } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n "}, {"sha": "e458d8f91712d02b15dd462a3795d98a2bed59ca", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p8.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -19,12 +19,18 @@ testf_cst (float f, vector float vf)\n   return vec_insert (f, vf, 12);\n }\n \n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 0 { target lp64 } } } */\n /* cst tests has stfs instead of stfsx. */\n-/* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 1 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxv\\M|\\mlxvd2x\\M|\\mlxvw4x\\M} 2 } } */\n \n /* cst test has a lvewx,vperm combo */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 3 { target lp64 } } } */\n+\n+/* -m32 codegen. */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 2 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 { target ilp32 } } } */\n+\n "}, {"sha": "9684c9f26ba5da28728b08ca03c0a0c80f546c1a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -30,6 +30,6 @@ testf_cst (float f, vector float vf)\n \n /* { dg-final { scan-assembler-times {\\mstfs\\M} 2 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvewx\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 2 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvewx\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */"}, {"sha": "d5fa422c9c1004248c499c8aee84ee16a29d17de", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p8.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -50,9 +50,14 @@ testui2_cst(unsigned int x, vector unsigned int v)\n \n /* Each test has lvx (8).  cst tests have additional lvewx. (4) */\n /* var tests have no stwx and stvx.  cst tests have stw (4).*/\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 4 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target le } } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target be } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target { be && lp64 } } } } */\n \n-/* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */\n+/* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 12 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target ilp32 } } } */"}, {"sha": "5cd6b3e0148bd8588bc6423bb2a5f7809b9e9ec8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p9.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -49,16 +49,17 @@ testui2_cst(unsigned int x, vector unsigned int v)\n }\n \n \n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mstwx\\M} 0 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 } } } */\n \n /* an insert and a move per constant test. */\n /* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 8 { target lp64 } } } */\n \n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstw\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvewx\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */"}, {"sha": "0a0ee31a4112837b3e4f7696f4e4f4148d0dc166", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-longlong.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -60,9 +60,11 @@ testul2_cst(unsigned long long x, vector unsigned long long v)\n \n /* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 4 } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 0 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mstdx\\M} 0 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 8 { target ilp32 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target lp64 } } } */\n \n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 4 { target ilp32 } } } */"}, {"sha": "a479d987bf0301901091a7a2474092f3fc4a32ec", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p8.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -49,10 +49,14 @@ testus2_cst(unsigned short x, vector unsigned short v)\n }\n \n /* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 8 { target le } } } */\n-/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 4 { target be } } } */\n+/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 4 { target {  be && lp64 } } } } */\n /* stores.. 0 per variable tests, 1 each per cst test. */\n-/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 4 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mlvehx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 12 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n "}, {"sha": "cea7488b3c6098184e6eeb408708cda8e08d231c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p9.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -51,13 +51,14 @@ testus2_cst(unsigned short x, vector unsigned short v)\n /* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mvinserth\\M} 8 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 }} } */\n \n /* -m32 uses sth/lvehx as part of the sequence. */\n-/* { dg-final { scan-assembler-times {\\msth\\M} 8 { target ilp32 }} } */\n-/* { dg-final { scan-assembler-times {\\mlvehx\\M} 8 { target ilp32 }} } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 8 { target ilp32 }} } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 }} } */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 8 { target ilp32 }} } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\msth\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvehx\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 8 { target ilp32 } } } */\n "}, {"sha": "6afd357c7ba8990d12c7ec5fd168ff87559b21af", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251-run.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -1,4 +1,6 @@\n-/* { dg-options \"-O2 -maltivec\" } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n \n #include <stddef.h>\n #include <altivec.h>"}, {"sha": "d31a905a013ce0bbbf4b46660634b8163675decb", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p8.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-O2 -mdejagnu-cpu=power8 -maltivec\" } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8 -mvsx\" } */\n \n #include <stddef.h>\n #include <altivec.h>\n@@ -9,9 +9,16 @@\n TEST_VEC_INSERT_ALL (test)\n \n /* { dg-final { scan-assembler-not {\\mstxw\\M} } } */\n-/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 } } */\n-/* { dg-final { scan-assembler-times {\\mlvsr\\M} 3 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 20 } } */\n-/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 10 } } */\n-/* { dg-final { scan-assembler-times {\\mxxsel\\M} 7 } } */\n+/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvsr\\M} 3 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 20 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 7 { target lp64 } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 10 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb|sth|stw|stfs|stfd\\M} 22 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M} 4 { target ilp32 } } } */\n "}, {"sha": "78abd80f447cff08e17f57086fc163634d81a00e", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p9.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-O2 -mdejagnu-cpu=power9 -maltivec\" } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9 -mvsx\" } */\n \n #include <stddef.h>\n #include <altivec.h>\n@@ -9,16 +9,16 @@\n TEST_VEC_INSERT_ALL (test)\n \n /* { dg-final { scan-assembler-not {\\mstxw\\M} } } */\n-/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 } } */\n-/* { dg-final { scan-assembler-times {\\mlvsr\\M} 10 } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvsr\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 20 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mvinserth\\M} 2 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mvinsertb\\M} 2 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 10 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 7 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvebx\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvehx\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvewx\\M} 3 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M} 10 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb|sth|stw|stfs|stfd\\M} 22 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M} 10 { target ilp32 } } } */\n+"}, {"sha": "0780b01ffab4bcc55940159bdb34f8161b79aec4", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-builtin-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c?ref=fbe37371cf372b84d5b7f1a6f5f0971a513dd5fa", "patch": "@@ -193,7 +193,7 @@ vector unsigned __int128 splat_uint128 (unsigned __int128 x) { return vec_splats\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 0  { target { be && ilp32 } } } } */\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target { be && lp64 } } } } */\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target le } } } */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 11 { target be } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 4 { target be } } } */\n /* { dg-final { scan-assembler-times \"xxpermdi\" 6 { target le } } } */\n /* { dg-final { scan-assembler-times \"vspltisb\" 2 } } */\n /* { dg-final { scan-assembler-times \"vspltish\" 2 } } */"}]}