{"sha": "3c756b76327951a6c16d238c0cd0132371b7d9b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NTZiNzYzMjc5NTFhNmMxNmQyMzhjMGNkMDEzMjM3MWI3ZDliMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:59:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:59:41Z"}, "message": "[multiple changes]\n\n2014-11-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* debug.adb, snames.adb-tmpl (Is_Keyword_Name): Consider 'overriding'\n\ta keyword in Ada 95 mode when -gnatd.D is used.\n\t* gnat_ugn.texi: Document -gnatd.D.\n\n2014-11-07  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* gnatls.adb: Lower severity of the program's return value in\n\tsome common cases.\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Decorate_Type): The limited view of a tagged\n\ttype has an empty list of primitive operations.\n\n2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Update references to SPARK\n\tRM.\n\t(Process_Full_View): Update references to SPARK RM.\n\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body): Update references\n\tto SPARK RM.\n\t(Analyze_Subprogram_Body_Helper): Update references\n\tto SPARK RM.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Update references\n\tto SPARK RM.\n\t* sem_prag.adb (Check_Ghost_Constituent): Update references to\n\tSPARK RM.\n\t* sem_res.adb (Check_Ghost_Policy): Update references to SPARK RM.\n\t(Resolve_Actuals): Ensure that the actual parameter of a Ghost\n\tsubprogram whose formal is of mode IN OUT or OUT is Ghost.\n\t* sem_util.adb (Check_Ghost_Completion): Update references to\n\tSPARK RM.\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch7.adb (Make_Final_Call): If type of designated object is\n\tderived from that of the formal of the Deep_Finalize procedure,\n\tadd an unchecked conversion to prevent spurious type error.\n\n2014-11-07  Robert Dewar  <dewar@adacore.com>\n\n\t* table.adb, inline.adb, einfo.adb, gnat1drv.adb, exp_ch13.adb,\n\texp_fixd.adb, prj-conf.adb, exp_strm.adb, a-cofove.adb, exp_ch3.ads:\n\tMinor reformatting.\n\n2014-11-07  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb, sem_ch13.adb, prj-tree.adb: Minor reformatting.\n\nFrom-SVN: r217227", "tree": {"sha": "5922899f31cfff187cacf2e6f7dd4da6e87ec94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5922899f31cfff187cacf2e6f7dd4da6e87ec94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c756b76327951a6c16d238c0cd0132371b7d9b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c756b76327951a6c16d238c0cd0132371b7d9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c756b76327951a6c16d238c0cd0132371b7d9b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c756b76327951a6c16d238c0cd0132371b7d9b3/comments", "author": null, "committer": null, "parents": [{"sha": "102743865182358d96fafb28dcd58aa4ecb1c055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102743865182358d96fafb28dcd58aa4ecb1c055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102743865182358d96fafb28dcd58aa4ecb1c055"}], "stats": {"total": 263, "additions": 186, "deletions": 77}, "files": [{"sha": "f54c409d4f8870041c5d9fa8d27024a2b98badae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -1,3 +1,54 @@\n+2014-11-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* debug.adb, snames.adb-tmpl (Is_Keyword_Name): Consider 'overriding'\n+\ta keyword in Ada 95 mode when -gnatd.D is used.\n+\t* gnat_ugn.texi: Document -gnatd.D.\n+\n+2014-11-07  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* gnatls.adb: Lower severity of the program's return value in\n+\tsome common cases.\n+\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Decorate_Type): The limited view of a tagged\n+\ttype has an empty list of primitive operations.\n+\n+2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Update references to SPARK\n+\tRM.\n+\t(Process_Full_View): Update references to SPARK RM.\n+\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body): Update references\n+\tto SPARK RM.\n+\t(Analyze_Subprogram_Body_Helper): Update references\n+\tto SPARK RM.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Update references\n+\tto SPARK RM.\n+\t* sem_prag.adb (Check_Ghost_Constituent): Update references to\n+\tSPARK RM.\n+\t* sem_res.adb (Check_Ghost_Policy): Update references to SPARK RM.\n+\t(Resolve_Actuals): Ensure that the actual parameter of a Ghost\n+\tsubprogram whose formal is of mode IN OUT or OUT is Ghost.\n+\t* sem_util.adb (Check_Ghost_Completion): Update references to\n+\tSPARK RM.\n+\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Final_Call): If type of designated object is\n+\tderived from that of the formal of the Deep_Finalize procedure,\n+\tadd an unchecked conversion to prevent spurious type error.\n+\n+2014-11-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* table.adb, inline.adb, einfo.adb, gnat1drv.adb, exp_ch13.adb,\n+\texp_fixd.adb, prj-conf.adb, exp_strm.adb, a-cofove.adb, exp_ch3.ads:\n+\tMinor reformatting.\n+\n+2014-11-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb, sem_ch13.adb, prj-tree.adb: Minor reformatting.\n+\n 2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb (Set_Is_Checked_Ghost_Entity,"}, {"sha": "6776bf90fa28d8640046ce3c91fd9c4a37359b5b", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -26,7 +26,8 @@\n ------------------------------------------------------------------------------\n \n with Ada.Containers.Generic_Array_Sort;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n+\n with System; use type System.Address;\n \n package body Ada.Containers.Formal_Vectors is\n@@ -41,7 +42,7 @@ package body Ada.Containers.Formal_Vectors is\n    type Elements_Array_Ptr_Const is access constant Elements_Array;\n \n    procedure Free is\n-      new Unchecked_Deallocation (Elements_Array, Elements_Array_Ptr);\n+      new Ada.Unchecked_Deallocation (Elements_Array, Elements_Array_Ptr);\n \n    function Elems (Container : in out Vector) return Elements_Array_Ptr;\n    function Elemsc"}, {"sha": "47371e3361415dd513f7618d00395846a8fd83fb", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -121,7 +121,7 @@ package body Debug is\n    --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n-   --  d.D\n+   --  d.D  Disable errors on use of overriding keyword in Ada 95 mode\n    --  d.E  Turn selected errors into warnings\n    --  d.F  Debug mode for GNATprove\n    --  d.G  Ignore calls through generic formal parameters for elaboration\n@@ -602,6 +602,10 @@ package body Debug is\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n+   --  d.D  For compatibility with some Ada 95 compilers implementing only\n+   --       one feature of Ada 2005 (overriding keyword), disable errors on use\n+   --       of overriding keyword in Ada 95 mode.\n+\n    --  d.E  Turn selected errors into warnings. This debug switch causes a\n    --       specific set of error messages into warnings. Setting this switch\n    --       causes Opt.Error_To_Warning to be set to True. The intention is"}, {"sha": "3e0c0c7965ffbbbbabf6d5b7b9498fd5f1ee3f72", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -566,9 +566,9 @@ package body Einfo is\n    --    Has_Static_Predicate            Flag269\n    --    Stores_Attribute_Old_Prefix     Flag270\n \n-   --    (Has_Protected)                 Flag271\n-   --    (SSO_Set_Low_By_Default)        Flag272\n-   --    (SSO_Set_High_By_Default)       Flag273\n+   --    Has_Protected                   Flag271\n+   --    SSO_Set_Low_By_Default          Flag272\n+   --    SSO_Set_High_By_Default         Flag273\n    --    Is_Generic_Actual_Subprogram    Flag274\n    --    No_Predicate_On_Actual          Flag275\n    --    No_Dynamic_Predicate_On_Actual  Flag276"}, {"sha": "856fb74e63db40b6c7be8a99078bf73f7ba5f5cb", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -418,7 +418,7 @@ package body Exp_Ch13 is\n             Apply_Address_Clause_Check (E, N);\n          end if;\n \n-         --  Analyze actions in freeze node, if any.\n+         --  Analyze actions in freeze node, if any\n \n          if Present (Actions (N)) then\n             declare"}, {"sha": "3f2db942e575e6b9a7ac0c688e92b82dd4012815", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -107,10 +107,10 @@ package Exp_Ch3 is\n    function Make_Tag_Assignment (N : Node_Id) return Node_Id;\n    --  An object declaration that has an initialization for a tagged object\n    --  requires a separate reassignment of the tag of the given type, because\n-   --  the expression may include an unchecked conversion. This tag\n-   --  assignment is inserted after the declaration, but if the object has\n-   --  an address clause the assignment is handled as part of the freezing\n-   --  of the object, see Check_Address_Clause.\n+   --  the expression may include an unchecked conversion. This tag assignment\n+   --  is inserted after the declaration, but if the object has an address\n+   --  clause the assignment is handled as part of the freezing of the object,\n+   --  see Check_Address_Clause.\n \n    function Needs_Simple_Initialization\n      (T           : Entity_Id;"}, {"sha": "4b2a4120949359ee96a8e03ba26842d46c6e6f09", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -3662,6 +3662,15 @@ package body Exp_Ch7 is\n          Set_Etype (Arg, Ftyp);\n          return Arg;\n \n+      --  Otherwise, introduce a conversion when the designated object\n+      --  has a type derived from the formal of the controlled routine.\n+\n+      elsif Is_Private_Type (Ftyp)\n+        and then Present (Atyp)\n+        and then Is_Derived_Type (Underlying_Type (Base_Type (Atyp)))\n+      then\n+         return Unchecked_Convert_To (Ftyp, Arg);\n+\n       else\n          return Arg;\n       end if;\n@@ -4769,11 +4778,14 @@ package body Exp_Ch7 is\n \n                --  Generate:\n                --    [Deep_]Finalize (Obj_Ref);\n+               --   Set type of dereference, so that proper conversion are\n+               --   generated when operation is inherited.\n \n                Obj_Ref := New_Occurrence_Of (Obj_Id, Loc);\n \n                if Is_Access_Type (Obj_Typ) then\n                   Obj_Ref := Make_Explicit_Dereference (Loc, Obj_Ref);\n+                  Set_Etype (Obj_Ref, Directly_Designated_Type (Obj_Typ));\n                end if;\n \n                Append_To (Stmts,"}, {"sha": "ba0447f28200bc28c5737d2cf4fb92983e3f327f", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -1129,8 +1129,7 @@ package body Exp_Strm is\n       --  to construct.\n \n       if Has_Discriminants (Typ)\n-        and then\n-          No (Discriminant_Default_Value (First_Discriminant (Typ)))\n+        and then No (Discriminant_Default_Value (First_Discriminant (Typ)))\n         and then not Is_Constrained (Underlying_Type (B_Typ))\n       then\n          Discr := First_Discriminant (B_Typ);\n@@ -1148,7 +1147,7 @@ package body Exp_Strm is\n             Decl :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Make_Defining_Identifier (Loc, Cn),\n-                Object_Definition =>\n+                Object_Definition   =>\n                   New_Occurrence_Of (Etype (Discr), Loc));\n \n             --  If this is an access discriminant, do not perform default\n@@ -1163,9 +1162,9 @@ package body Exp_Strm is\n             Append_To (Decls, Decl);\n             Append_To (Decls,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (Etype (Discr), Loc),\n+                Prefix         => New_Occurrence_Of (Etype (Discr), Loc),\n                 Attribute_Name => Name_Read,\n-                Expressions => New_List (\n+                Expressions    => New_List (\n                   Make_Identifier (Loc, Name_S),\n                   Make_Identifier (Loc, Cn))));\n \n@@ -1195,7 +1194,7 @@ package body Exp_Strm is\n          Odef :=\n            Make_Subtype_Indication (Loc,\n              Subtype_Mark => New_Occurrence_Of (B_Typ, Loc),\n-             Constraint =>\n+             Constraint   =>\n                Make_Index_Or_Discriminant_Constraint (Loc,\n                  Constraints => Constr));\n \n@@ -1264,11 +1263,9 @@ package body Exp_Strm is\n       --  because those are written by 'Write.\n \n       if Has_Discriminants (Typ)\n-        and then\n-          No (Discriminant_Default_Value (First_Discriminant (Typ)))\n+        and then No (Discriminant_Default_Value (First_Discriminant (Typ)))\n       then\n          Disc := First_Discriminant (Typ);\n-\n          while Present (Disc) loop\n \n             --  If the type is an unchecked union, it must have default\n@@ -1287,10 +1284,10 @@ package body Exp_Strm is\n \n             Append_To (Stms,\n               Make_Attribute_Reference (Loc,\n-                Prefix =>\n+                Prefix         =>\n                   New_Occurrence_Of (Stream_Base_Type (Etype (Disc)), Loc),\n                 Attribute_Name => Name_Write,\n-                Expressions => New_List (\n+                Expressions    => New_List (\n                   Make_Identifier (Loc, Name_S),\n                   Disc_Ref)));\n \n@@ -1300,9 +1297,9 @@ package body Exp_Strm is\n \n       Append_To (Stms,\n         Make_Attribute_Reference (Loc,\n-          Prefix => New_Occurrence_Of (Typ, Loc),\n+          Prefix         => New_Occurrence_Of (Typ, Loc),\n           Attribute_Name => Name_Write,\n-          Expressions => New_List (\n+          Expressions    => New_List (\n             Make_Identifier (Loc, Name_S),\n             Make_Identifier (Loc, Name_V))));\n \n@@ -1448,7 +1445,7 @@ package body Exp_Strm is\n \n             Append_To (Result,\n               Make_Case_Statement (Loc,\n-                Expression => D_Ref,\n+                Expression   => D_Ref,\n                 Alternatives => Alts));\n          end if;\n \n@@ -1485,10 +1482,9 @@ package body Exp_Strm is\n \n          return\n            Make_Attribute_Reference (Loc,\n-             Prefix =>\n-               New_Occurrence_Of (Field_Typ, Loc),\n+             Prefix         => New_Occurrence_Of (Field_Typ, Loc),\n              Attribute_Name => Nam,\n-             Expressions => New_List (\n+             Expressions    => New_List (\n                Make_Identifier (Loc, Name_S),\n                Make_Selected_Component (Loc,\n                  Prefix        => Make_Identifier (Loc, Name_V),\n@@ -1654,18 +1650,19 @@ package body Exp_Strm is\n           Parameter_Specifications => New_List (\n             Make_Parameter_Specification (Loc,\n               Defining_Identifier => Make_Defining_Identifier (Loc, Name_S),\n-              Parameter_Type =>\n+              Parameter_Type      =>\n                 Make_Access_Definition (Loc,\n                   Null_Exclusion_Present => True,\n-                  Subtype_Mark => New_Occurrence_Of (\n-                    Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc)))),\n+                  Subtype_Mark           =>\n+                    New_Occurrence_Of\n+                      (Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc)))),\n \n           Result_Definition => New_Occurrence_Of (Typ, Loc));\n \n       Decl :=\n         Make_Subprogram_Body (Loc,\n-          Specification => Spec,\n-          Declarations => Decls,\n+          Specification              => Spec,\n+          Declarations               => Decls,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               Statements => Stms));\n@@ -1698,11 +1695,12 @@ package body Exp_Strm is\n           Parameter_Specifications => New_List (\n             Make_Parameter_Specification (Loc,\n               Defining_Identifier => Make_Defining_Identifier (Loc, Name_S),\n-              Parameter_Type =>\n+              Parameter_Type      =>\n                 Make_Access_Definition (Loc,\n                   Null_Exclusion_Present => True,\n-                  Subtype_Mark => New_Occurrence_Of (\n-                    Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc))),\n+                  Subtype_Mark           =>\n+                    New_Occurrence_Of\n+                      (Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc))),\n \n             Make_Parameter_Specification (Loc,\n               Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n@@ -1711,8 +1709,8 @@ package body Exp_Strm is\n \n       Decl :=\n         Make_Subprogram_Body (Loc,\n-          Specification => Spec,\n-          Declarations => Empty_List,\n+          Specification              => Spec,\n+          Declarations               => Empty_List,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               Statements => Stms));"}, {"sha": "cd6b6f48f79794d4f9ea02b7d331944c3808e4a6", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -364,8 +364,7 @@ procedure Gnat1drv is\n          --  SPARK version of the expander.\n \n          --  On the contrary, we need to enable explicitly all language checks,\n-         --  as they may have been marked as suppressed by the use of switch\n-         --  -gnatp\n+         --  as they may have been suppressed by the use of switch -gnatp.\n \n          Suppress_Options.Suppress := (others => False);\n "}, {"sha": "9d8a5ee52f789649aa21a8b364741006b5987c63", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -3588,6 +3588,13 @@ Enforce Ada 83 restrictions.\n @cindex @option{-gnat95} (@command{gcc})\n Enforce Ada 95 restrictions.\n \n+Note: for compatibility with some Ada 95 compilers which support only\n+the @code{overriding} keyword of Ada 2005, the @option{-gnatd.D} switch can\n+be used along with @option{-gnat95} to achieve a similar effect with GNAT.\n+\n+@option{-gnatd.D} instructs GNAT to consider @code{overriding} as a keyword\n+and handle its associated semantic checks, even in Ada 95 mode.\n+\n @item -gnat05\n @cindex @option{-gnat05} (@command{gcc})\n Allow full Ada 2005 features."}, {"sha": "80875b52ffe5c84a4134e382807a22a823852955", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -1663,6 +1663,7 @@ begin\n            (\"Default runtime not available. Use --RTS= with a valid runtime\");\n          Write_Eol;\n          Write_Eol;\n+         Exit_Status := E_Warnings;\n       end if;\n \n       Write_Str (\"Source Search Path:\");\n@@ -1775,10 +1776,11 @@ begin\n             Usage;\n          else\n             Try_Help;\n+            Exit_Status := E_Fatal;\n          end if;\n       end if;\n \n-      Exit_Program (E_Fatal);\n+      Exit_Program (Exit_Status);\n    end if;\n \n    Initialize_ALI;"}, {"sha": "3bd9b9357e18780d85f3ad8f6d33fac741aac6a5", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -496,6 +496,7 @@ package body Inline is\n          end if;\n \n          Last_Inlined := E;\n+\n       else\n          Register_Backend_Not_Inlined_Subprogram (E);\n       end if;\n@@ -3323,6 +3324,7 @@ package body Inline is\n \n       D := First (Decls);\n       while Present (D) loop\n+\n          --  First declarations universally excluded\n \n          if Nkind (D) = N_Package_Declaration then"}, {"sha": "623cf17060c16fc0d182ae8538fe9c65e2a2d3ae", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -1105,17 +1105,17 @@ package body Prj.Conf is\n \n             if Selected_Target /= null and then\n                Selected_Target.all /= \"\"\n+\n             then\n                Args (4) :=\n                   new String'(\"--target=\" & Selected_Target.all);\n                Arg_Last := 4;\n+\n             elsif Normalized_Hostname /= \"\" then\n                if At_Least_One_Compiler_Command then\n-                  Args (4) :=\n-                    new String'(\"--target=all\");\n+                  Args (4) := new String'(\"--target=all\");\n                else\n-                  Args (4) :=\n-                    new String'(\"--target=\" & Normalized_Hostname);\n+                  Args (4) := new String'(\"--target=\" & Normalized_Hostname);\n                end if;\n \n                Arg_Last := 4;\n@@ -1599,7 +1599,7 @@ package body Prj.Conf is\n       Implicit_Project           : Boolean := False;\n       On_New_Tree_Loaded         : Prj.Proc.Tree_Loaded_Callback := null)\n    is\n-      Success : Boolean := False;\n+      Success          : Boolean := False;\n       Target_Try_Again : Boolean := True;\n       Config_Try_Again : Boolean;\n \n@@ -1632,12 +1632,13 @@ package body Prj.Conf is\n \n       Update_Ignore_Missing_With (Env.Flags, True);\n \n-      Automatically_Generated := False;\n-      --  If in fact the config file is automatically generated,\n+      --  Note: If in fact the config file is automatically generated, then\n       --  Automatically_Generated will be set to True after invocation of\n       --  Process_Project_And_Apply_Config.\n \n-      --  Record Target_Value and Target_Origin.\n+      Automatically_Generated := False;\n+\n+      --  Record Target_Value and Target_Origin\n \n       if Target_Name = \"\" then\n          Opt.Target_Value  := new String'(Normalized_Hostname);\n@@ -2165,11 +2166,11 @@ package body Prj.Conf is\n       Tree       : Project_Tree_Ref;\n       With_State : in out State)\n    is\n-      Lang_Id : Language_Ptr;\n+      Lang_Id       : Language_Ptr;\n       Compiler_Root : Compiler_Root_Ptr;\n-      Runtime_Root : Runtime_Root_Ptr;\n-      Comp_Driver : String_Access;\n-      Comp_Dir : String_Access;\n+      Runtime_Root  : Runtime_Root_Ptr;\n+      Comp_Driver   : String_Access;\n+      Comp_Dir      : String_Access;\n       Prefix   : String_Access;\n \n       pragma Unreferenced (Tree);\n@@ -2226,8 +2227,9 @@ package body Prj.Conf is\n \n                   declare\n                      Runtime : constant String :=\n-                       Runtime_Name_For (Lang_Id.Name);\n-                     Root : String_Access;\n+                                 Runtime_Name_For (Lang_Id.Name);\n+                     Root    : String_Access;\n+\n                   begin\n                      if Runtime'Length > 0 then\n                         if Is_Absolute_Path (Runtime) then"}, {"sha": "205c23411b3b40fc08c284af2041c8c7a40bcd5a", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -2458,8 +2458,7 @@ package body Prj.Tree is\n    begin\n       pragma Assert\n         (Present (Node)\n-         and then\n-         In_Tree.Project_Nodes.Table (Node).Kind = N_Project);\n+          and then In_Tree.Project_Nodes.Table (Node).Kind = N_Project);\n       In_Tree.Project_Nodes.Table (Node).Display_Name := To;\n    end Set_Display_Name_Of;\n "}, {"sha": "5479df0d1e8871464af5ebf32aefa6da6cf601a9", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -5615,10 +5615,12 @@ package body Sem_Ch10 is\n          Init_Size_Align       (Ent);\n \n          --  A tagged type and its corresponding shadow entity share one common\n-         --  class-wide type.\n+         --  class-wide type. The list of primitive operations for the shadow\n+         --  entity is empty.\n \n          if Is_Tagged then\n             Set_Is_Tagged_Type (Ent);\n+            Set_Direct_Primitive_Operations (Ent, New_Elmt_List);\n \n             if No (Class_Wide_Type (Ent)) then\n                CW_Typ :="}, {"sha": "d77c1d5e13ead32506ca5328c573e75bb40e2b22", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -3454,9 +3454,10 @@ package body Sem_Ch12 is\n             ASN : Node_Id;\n \n          begin\n-            ASN := Make_Aspect_Specification (Loc,\n-               Identifier => Make_Identifier (Loc, Name_Default_Storage_Pool),\n-               Expression => New_Copy (Default_Pool));\n+            ASN :=\n+              Make_Aspect_Specification (Loc,\n+                Identifier => Make_Identifier (Loc, Name_Default_Storage_Pool),\n+                Expression => New_Copy (Default_Pool));\n \n             if No (Aspect_Specifications (Specification (N))) then\n                Set_Aspect_Specifications (Specification (N), New_List (ASN));\n@@ -3972,8 +3973,8 @@ package body Sem_Ch12 is\n \n                         ASN2 := First (Aspect_Specifications (Gen_Spec));\n                         while Present (ASN2) loop\n-                           if Chars (Identifier (ASN2))\n-                              = Name_Default_Storage_Pool\n+                           if Chars (Identifier (ASN2)) =\n+                                                    Name_Default_Storage_Pool\n                            then\n                               Remove (ASN2);\n                               exit;"}, {"sha": "2ca48ef46dd9cc02f6fc3221a8148b6003868e5a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -9234,10 +9234,10 @@ package body Sem_Ch13 is\n \n    begin\n       --  If rep_clauses are to be ignored, no need for legality checks. In\n-      --  particular, no need to pester user about rep clauses that violate\n-      --  the rule on constant addresses, given that these clauses will be\n-      --  removed by Freeze before they reach the back end.\n-      --  Similarly in CodePeer mode, we want to relax these checks.\n+      --  particular, no need to pester user about rep clauses that violate the\n+      --  rule on constant addresses, given that these clauses will be removed\n+      --  by Freeze before they reach the back end. Similarly in CodePeer mode,\n+      --  we want to relax these checks.\n \n       if not Ignore_Rep_Clauses and not CodePeer_Mode then\n          Check_Expr_Constants (Expr);"}, {"sha": "db348d7a61794edc692df62690f8f3ffac194464", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -3925,7 +3925,7 @@ package body Sem_Ch3 is\n \n                   --  The Ghost policy in effect at the point of declaration\n                   --  and at the point of completion must match\n-                  --  (SPARK RM 6.9(14)).\n+                  --  (SPARK RM 6.9(15)).\n \n                   if Present (Prev_Entity)\n                     and then Is_Ghost_Entity (Prev_Entity)\n@@ -4112,7 +4112,7 @@ package body Sem_Ch3 is\n          Set_Is_Ghost_Entity (Id);\n \n          --  The Ghost policy in effect at the point of declaration and at the\n-         --  point of completion must match (SPARK RM 6.9(14)).\n+         --  point of completion must match (SPARK RM 6.9(16)).\n \n          if Present (Prev_Entity) and then Is_Ghost_Entity (Prev_Entity) then\n             Check_Ghost_Completion (Prev_Entity, Id);\n@@ -19786,7 +19786,7 @@ package body Sem_Ch3 is\n          Set_Is_Ghost_Entity (Full_T);\n \n          --  The Ghost policy in effect at the point of declaration and at the\n-         --  point of completion must match (SPARK RM 6.9(14)).\n+         --  point of completion must match (SPARK RM 6.9(15)).\n \n          Check_Ghost_Completion (Priv_T, Full_T);\n "}, {"sha": "97866c0b67e17b62eaaa7a152a6609d83495f1a4", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -1220,7 +1220,7 @@ package body Sem_Ch6 is\n             Set_Is_Ghost_Entity (Body_Id);\n \n             --  The Ghost policy in effect at the point of declaration and at\n-            --  the point of completion must match (SPARK RM 6.9(14)).\n+            --  the point of completion must match (SPARK RM 6.9(15)).\n \n             Check_Ghost_Completion (Gen_Id, Body_Id);\n          end if;\n@@ -3343,7 +3343,7 @@ package body Sem_Ch6 is\n                Set_Is_Ghost_Entity (Body_Id);\n \n                --  The Ghost policy in effect at the point of declaration and\n-               --  at the point of completion must match (SPARK RM 6.9(14)).\n+               --  at the point of completion must match (SPARK RM 6.9(15)).\n \n                Check_Ghost_Completion (Spec_Id, Body_Id);\n             end if;"}, {"sha": "ebc17a24f09bdaad57ab79c69db2bf66122bc59b", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -735,7 +735,7 @@ package body Sem_Ch7 is\n          Set_Is_Ghost_Entity (Body_Id);\n \n          --  The Ghost policy in effect at the point of declaration and at the\n-         --  point of completion must match (SPARK RM 6.9(14)).\n+         --  point of completion must match (SPARK RM 6.9(15)).\n \n          Check_Ghost_Completion (Spec_Id, Body_Id);\n       end if;"}, {"sha": "b3e41aa8705407f6752060a0a2df8ad4644b6174", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -23473,7 +23473,7 @@ package body Sem_Prag is\n \n                      --  The Ghost policy in effect at the point of abstract\n                      --  state declaration and constituent must match\n-                     --  (SPARK RM 6.9(15)).\n+                     --  (SPARK RM 6.9(16)).\n \n                      if Is_Checked_Ghost_Entity (State_Id)\n                        and then Is_Ignored_Ghost_Entity (Constit_Id)"}, {"sha": "0afa28cdc869c3d53b730ad2c518c9610a64f3e3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -841,7 +841,7 @@ package body Sem_Res is\n \n       begin\n          --  The Ghost policy in effect a the point of declaration and at the\n-         --  point of use must match (SPARK RM 6.9(13)).\n+         --  point of use must match (SPARK RM 6.9(14)).\n \n          if Is_Checked_Ghost_Entity (Id) and then Policy = Name_Ignore then\n             Error_Msg_Sloc := Sloc (Err_N);\n@@ -4625,6 +4625,26 @@ package body Sem_Res is\n                  (\"\\subprogram & has Extensions_Visible True\", A, Nam);\n             end if;\n \n+            --  The actual parameter of a Ghost subprogram whose formal is of\n+            --  mode IN OUT or OUT must be a Ghost variable (SPARK RM 6.9(13)).\n+\n+            if Is_Ghost_Entity (Nam)\n+              and then Ekind_In (F, E_In_Out_Parameter, E_Out_Parameter)\n+              and then Is_Entity_Name (A)\n+              and then Present (Entity (A))\n+              and then not Is_Ghost_Entity (Entity (A))\n+            then\n+               Error_Msg_NE\n+                 (\"non-ghost variable & cannot appear as actual in call to \"\n+                  & \"ghost procedure\", A, Entity (A));\n+\n+               if Ekind (F) = E_In_Out_Parameter then\n+                  Error_Msg_N (\"\\corresponding formal has mode `IN OUT`\", A);\n+               else\n+                  Error_Msg_N (\"\\corresponding formal has mode OUT\", A);\n+               end if;\n+            end if;\n+\n             Next_Actual (A);\n \n          --  Case where actual is not present"}, {"sha": "b3982af884eba73876ae3e279d1f23e809ea0131", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -2681,7 +2681,7 @@ package body Sem_Util is\n \n    begin\n       --  The Ghost policy in effect at the point of declaration and at the\n-      --  point of completion must match (SPARK RM 6.9(14)).\n+      --  point of completion must match (SPARK RM 6.9(15)).\n \n       if Is_Checked_Ghost_Entity (Partial_View)\n         and then Policy = Name_Ignore"}, {"sha": "6e1acd9c22a0522f422efdadb80f29929268b9f9", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -29,6 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Debug; use Debug;\n with Opt;   use Opt;\n with Table;\n with Types; use Types;\n@@ -395,7 +396,11 @@ package body Snames is\n         and then (Ada_Version >= Ada_95\n                    or else N not in Ada_95_Reserved_Words)\n         and then (Ada_Version >= Ada_2005\n-                   or else N not in Ada_2005_Reserved_Words)\n+                   or else N not in Ada_2005_Reserved_Words\n+                   or else (Debug_Flag_Dot_DD and then N = Name_Overriding))\n+                   --  Accept 'overriding' keywords if -gnatd.D is used,\n+                   --  for compatibility with Ada 95 compilers implementing\n+                   --  only this Ada 2005 extension.\n         and then (Ada_Version >= Ada_2012\n                    or else N not in Ada_2012_Reserved_Words);\n    end Is_Keyword_Name;"}, {"sha": "4c745393b29a4925abb999a23aee9f1d75ff556c", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c756b76327951a6c16d238c0cd0132371b7d9b3/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=3c756b76327951a6c16d238c0cd0132371b7d9b3", "patch": "@@ -399,6 +399,10 @@ package body Table is\n          Tree_Read_Data\n            (Tree_Get_Table_Address,\n              (Last_Val - Int (First) + 1) *\n+\n+               --  Note the importance of parenthesizing the following division\n+               --  to avoid the possibility of intermediate overflow.\n+\n                (Table_Type'Component_Size / Storage_Unit));\n       end Tree_Read;\n "}]}