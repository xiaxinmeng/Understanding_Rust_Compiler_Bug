{"sha": "5bde80f48bcc594658c788895ad1fd86d0916fc2", "node_id": "C_kwDOANBUbNoAKDViZGU4MGY0OGJjYzU5NDY1OGM3ODg4OTVhZDFmZDg2ZDA5MTZmYzI", "commit": {"author": {"name": "Ed Catmur", "email": "ed@catmur.uk", "date": "2022-04-18T22:09:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-20T14:15:21Z"}, "message": "c++: Fall through for arrays of T vs T cv [PR104996]\n\nIf two arrays do not have the exact same element type including\nqualification, this could be e.g. f(int (&&)[]) vs. f(int const (&)[]),\nwhich can still be distinguished by the lvalue-rvalue tiebreaker.\n\nBy tightening this branch (in accordance with the letter of the Standard) we\nfall through to the next branch, which tests whether they have different\nelement type ignoring qualification and returns 0 in that case; thus we only\nactually fall through in the T[...] vs. T cv[...] case, eventually\nconsidering the lvalue-rvalue tiebreaker at the end of compare_ics.\n\nSigned-off-by: Ed Catmur <ed@catmur.uk>\n\n\tPR c++/104996\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (compare_ics): When comparing list-initialization\n\tsequences, do not return early.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/initlist129.C: New test.", "tree": {"sha": "547e53800b8acec04789fbfb7a62fa4f51f501df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/547e53800b8acec04789fbfb7a62fa4f51f501df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bde80f48bcc594658c788895ad1fd86d0916fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bde80f48bcc594658c788895ad1fd86d0916fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bde80f48bcc594658c788895ad1fd86d0916fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bde80f48bcc594658c788895ad1fd86d0916fc2/comments", "author": {"login": "ecatmur", "id": 801922, "node_id": "MDQ6VXNlcjgwMTkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/801922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecatmur", "html_url": "https://github.com/ecatmur", "followers_url": "https://api.github.com/users/ecatmur/followers", "following_url": "https://api.github.com/users/ecatmur/following{/other_user}", "gists_url": "https://api.github.com/users/ecatmur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecatmur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecatmur/subscriptions", "organizations_url": "https://api.github.com/users/ecatmur/orgs", "repos_url": "https://api.github.com/users/ecatmur/repos", "events_url": "https://api.github.com/users/ecatmur/events{/privacy}", "received_events_url": "https://api.github.com/users/ecatmur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ded3a1f5b667b4cb5eb2fee8a031e8e4060a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ded3a1f5b667b4cb5eb2fee8a031e8e4060a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ded3a1f5b667b4cb5eb2fee8a031e8e4060a7d"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "fa18d7f8f9d121aa81a345bc4ea81766dea58333", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bde80f48bcc594658c788895ad1fd86d0916fc2/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bde80f48bcc594658c788895ad1fd86d0916fc2/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=5bde80f48bcc594658c788895ad1fd86d0916fc2", "patch": "@@ -11546,12 +11546,9 @@ compare_ics (conversion *ics1, conversion *ics2)\n \t P0388R4.)  */\n       else if (t1->kind == ck_aggr\n \t       && TREE_CODE (t1->type) == ARRAY_TYPE\n-\t       && TREE_CODE (t2->type) == ARRAY_TYPE)\n+\t       && TREE_CODE (t2->type) == ARRAY_TYPE\n+\t       && same_type_p (TREE_TYPE (t1->type), TREE_TYPE (t2->type)))\n \t{\n-\t  /* The type of the array elements must be the same.  */\n-\t  if (!same_type_p (TREE_TYPE (t1->type), TREE_TYPE (t2->type)))\n-\t    return 0;\n-\n \t  tree n1 = nelts_initialized_by_list_init (t1);\n \t  tree n2 = nelts_initialized_by_list_init (t2);\n \t  if (tree_int_cst_lt (n1, n2))"}, {"sha": "4d4faa9e08d9cb8893dcf9b1f81194e5ddfcbb09", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist129.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bde80f48bcc594658c788895ad1fd86d0916fc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist129.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bde80f48bcc594658c788895ad1fd86d0916fc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist129.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist129.C?ref=5bde80f48bcc594658c788895ad1fd86d0916fc2", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/104996\n+// { dg-do compile { target c++11 } }\n+\n+template<unsigned size> char f(int (&&)[size]);\n+template<unsigned size> int f(int const (&)[size]);\n+static_assert(sizeof(f({1, 2, 3})) == 1, \"\");"}]}