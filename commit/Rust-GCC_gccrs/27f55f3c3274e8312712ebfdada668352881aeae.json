{"sha": "27f55f3c3274e8312712ebfdada668352881aeae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmNTVmM2MzMjc0ZTgzMTI3MTJlYmZkYWRhNjY4MzUyODgxYWVhZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-07-23T09:44:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T09:44:59Z"}, "message": "exp_ch4.adb (Expand_N_Type_Conversion): Don't promote integer division operands to 64-bit inside a conversion if...\n\n2009-07-23  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Don't promote integer\n\tdivision operands to 64-bit inside a conversion if 64-bit division not\n\tavailable.\n\nFrom-SVN: r149985", "tree": {"sha": "80a9936e46ae94b8ae88d45dc7df0447407fd733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a9936e46ae94b8ae88d45dc7df0447407fd733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f55f3c3274e8312712ebfdada668352881aeae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f55f3c3274e8312712ebfdada668352881aeae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f55f3c3274e8312712ebfdada668352881aeae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f55f3c3274e8312712ebfdada668352881aeae/comments", "author": null, "committer": null, "parents": [{"sha": "1c5c721a87c80e845d533d1165b72a763fb7e82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5c721a87c80e845d533d1165b72a763fb7e82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5c721a87c80e845d533d1165b72a763fb7e82e"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "8ff8a468af54380413315ef21f626c8088dda047", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f55f3c3274e8312712ebfdada668352881aeae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f55f3c3274e8312712ebfdada668352881aeae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=27f55f3c3274e8312712ebfdada668352881aeae", "patch": "@@ -1,3 +1,9 @@\n+2009-07-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Don't promote integer\n+\tdivision operands to 64-bit inside a conversion if 64-bit division not\n+\tavailable.\n+\n 2009-07-23  Sergey Rybin  <rybin@adacore.com>\n \n \t* gnat_ugn.texi: Update doc on Misnamed_Identifiers rule."}, {"sha": "b982ca6cca623a79aaa93ef9a18a171da852db1a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f55f3c3274e8312712ebfdada668352881aeae/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f55f3c3274e8312712ebfdada668352881aeae/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=27f55f3c3274e8312712ebfdada668352881aeae", "patch": "@@ -7991,12 +7991,22 @@ package body Exp_Ch4 is\n \n          if Present (Inner_Type) then\n \n-            --  Test for binary operation. Note that this includes junk like\n-            --  XOR and concatenation, but none of those will yield a signed\n-            --  integer result, so we won't get here except in the interesting\n-            --  cases of simple arithmetic operators like addition.\n-\n-            if Nkind (Operand) in N_Binary_Op then\n+            --  Test for interesting binary operation, which includes addition,\n+            --  exponentiation, multiplication, and subtraction. We do not\n+            --  include division in the 64-bit case. It is a very marginal\n+            --  situation to get overflow from division in any case (largest\n+            --  negative number divided by minus one), and doing the promotion\n+            --  may result in less efficient code. Worse still we may end up\n+            --  promoting to 64-bit divide on a target that does not support\n+            --  this operation, causing a fatal error.\n+\n+            if Nkind_In (Operand, N_Op_Add,\n+                                  N_Op_Expon,\n+                                  N_Op_Multiply,\n+                                  N_Op_Subtract)\n+              or else (Nkind (Operand) = N_Op_Divide\n+                        and then Inner_Type /= Standard_Long_Long_Integer)\n+            then\n                Rewrite (Left_Opnd (Operand),\n                  Make_Type_Conversion (Loc,\n                    Subtype_Mark => New_Reference_To (Inner_Type, Loc),"}]}