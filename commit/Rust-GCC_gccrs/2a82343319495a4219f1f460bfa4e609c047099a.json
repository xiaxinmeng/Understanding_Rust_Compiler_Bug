{"sha": "2a82343319495a4219f1f460bfa4e609c047099a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4MjM0MzMxOTQ5NWE0MjE5ZjFmNDYwYmZhNGU2MDljMDQ3MDk5YQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:12:53Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:12:53Z"}, "message": "[AArch64, 3/6] Reimplement frsqrte intrinsics\n\n\t* config/aarch64/aarch64-builtins.def (rsqrte): New builtins for modes\n\tVALLF.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrte_<mode>2): Rename to\n\t\"aarch64_rsqrte<mode>\".\n\t* config/aarch64/aarch64.c (get_rsqrte_type): Update gen* name.\n\t* config/aarch64/arm_neon.h (vrsqrts_f32): Remove inline assembly.  Use\n\tbuiltin.\n\t(vrsqrted_f64): Likewise.\n\t(vrsqrte_f32): Likewise.\n\t(vrsqrte_f64): Likewise.\n\t(vrsqrteq_f32): Likewise.\n\t(vrsqrteq_f64): Likewise.\n\nFrom-SVN: r237202", "tree": {"sha": "8a5f2f22926defa6410c50c46408605ee28e6ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5f2f22926defa6410c50c46408605ee28e6ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a82343319495a4219f1f460bfa4e609c047099a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a82343319495a4219f1f460bfa4e609c047099a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a82343319495a4219f1f460bfa4e609c047099a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a82343319495a4219f1f460bfa4e609c047099a/comments", "author": null, "committer": null, "parents": [{"sha": "2644d4d983bc6086155d2ab7938d6b7945468e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2644d4d983bc6086155d2ab7938d6b7945468e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2644d4d983bc6086155d2ab7938d6b7945468e7d"}], "stats": {"total": 134, "additions": 62, "deletions": 72}, "files": [{"sha": "60d420a0cbcd01e438dbf8f650725a02de28613d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a82343319495a4219f1f460bfa4e609c047099a", "patch": "@@ -1,3 +1,18 @@\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.def (rsqrte): New builtins for modes\n+\tVALLF.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrte_<mode>2): Rename to\n+\t\"aarch64_rsqrte<mode>\".\n+\t* config/aarch64/aarch64.c (get_rsqrte_type): Update gen* name.\n+\t* config/aarch64/arm_neon.h (vrsqrts_f32): Remove inline assembly.  Use\n+\tbuiltin.\n+\t(vrsqrted_f64): Likewise.\n+\t(vrsqrte_f32): Likewise.\n+\t(vrsqrte_f64): Likewise.\n+\t(vrsqrteq_f32): Likewise.\n+\t(vrsqrteq_f64): Likewise.\n+\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-builtins.def (scvtf): Register vector modes."}, {"sha": "c26628699dabe75ccae849eadb418ead6c3a2836", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=2a82343319495a4219f1f460bfa4e609c047099a", "patch": "@@ -451,3 +451,6 @@\n   BUILTIN_VSDQ_SDI (BINOP_SUS, ucvtf, 3)\n   BUILTIN_VALLF (BINOP, fcvtzs, 3)\n   BUILTIN_VALLF (BINOP_USS, fcvtzu, 3)\n+\n+  /* Implemented by aarch64_rsqrte<mode>.  */\n+  BUILTIN_VALLF (UNOP, rsqrte, 0)"}, {"sha": "fc66a1676f8f94adaf0e0b8bf7a4356addc112bd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2a82343319495a4219f1f460bfa4e609c047099a", "patch": "@@ -382,7 +382,7 @@\n   [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"aarch64_rsqrte_<mode>2\"\n+(define_insn \"aarch64_rsqrte<mode>\"\n   [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n \t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n \t\t     UNSPEC_RSQRTE))]"}, {"sha": "acfb39dc025d74fe531d439bb87c52d18955ee7c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2a82343319495a4219f1f460bfa4e609c047099a", "patch": "@@ -7349,11 +7349,11 @@ get_rsqrte_type (machine_mode mode)\n {\n   switch (mode)\n   {\n-    case DFmode:   return gen_aarch64_rsqrte_df2;\n-    case SFmode:   return gen_aarch64_rsqrte_sf2;\n-    case V2DFmode: return gen_aarch64_rsqrte_v2df2;\n-    case V2SFmode: return gen_aarch64_rsqrte_v2sf2;\n-    case V4SFmode: return gen_aarch64_rsqrte_v4sf2;\n+    case DFmode:   return gen_aarch64_rsqrtedf;\n+    case SFmode:   return gen_aarch64_rsqrtesf;\n+    case V2DFmode: return gen_aarch64_rsqrtev2df;\n+    case V2SFmode: return gen_aarch64_rsqrtev2sf;\n+    case V4SFmode: return gen_aarch64_rsqrtev4sf;\n     default: gcc_unreachable ();\n   }\n }"}, {"sha": "e4f7a66abcc59f306de289d22e9d09cfe32c0c87", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 38, "deletions": 66, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a82343319495a4219f1f460bfa4e609c047099a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=2a82343319495a4219f1f460bfa4e609c047099a", "patch": "@@ -9163,28 +9163,6 @@ vqrdmulhq_n_s32 (int32x4_t a, int32_t b)\n        result;                                                          \\\n      })\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrsqrte_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frsqrte %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n-vrsqrte_f64 (float64x1_t a)\n-{\n-  float64x1_t result;\n-  __asm__ (\"frsqrte %d0,%d1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vrsqrte_u32 (uint32x2_t a)\n {\n@@ -9196,39 +9174,6 @@ vrsqrte_u32 (uint32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vrsqrted_f64 (float64_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"frsqrte %d0,%d1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrsqrteq_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frsqrte %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrsqrteq_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frsqrte %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vrsqrteq_u32 (uint32x4_t a)\n {\n@@ -9240,17 +9185,6 @@ vrsqrteq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vrsqrtes_f32 (float32_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"frsqrte %s0,%s1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vrsqrts_f32 (float32x2_t a, float32x2_t b)\n {\n@@ -21504,6 +21438,44 @@ vrshrd_n_u64 (uint64_t __a, const int __b)\n   return __builtin_aarch64_urshr_ndi_uus (__a, __b);\n }\n \n+/* vrsqrte.  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vrsqrtes_f32 (float32_t __a)\n+{\n+  return __builtin_aarch64_rsqrtesf (__a);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vrsqrted_f64 (float64_t __a)\n+{\n+  return __builtin_aarch64_rsqrtedf (__a);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrsqrte_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_rsqrtev2sf (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrsqrte_f64 (float64x1_t __a)\n+{\n+  return (float64x1_t) {vrsqrted_f64 (vget_lane_f64 (__a, 0))};\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrsqrteq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_rsqrtev4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrsqrteq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_rsqrtev2df (__a);\n+}\n+\n /* vrsra */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))"}]}