{"sha": "6625fbd0cba10d07e017a1bb3c62775481f56fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyNWZiZDBjYmExMGQwN2UwMTdhMWJiM2M2Mjc3NTQ4MWY1NmZkNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-19T16:23:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-19T16:23:32Z"}, "message": "exp_ch9.adb (Null_Statements): Moved to library level\n\n2007-12-19  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb (Null_Statements): Moved to library level\n\t(Trivial_Accept_OK): New function\n\t(Expand_Accept_Declaration): Use Trivial_Accept_OK\n\t(Expand_N_Accept_Statement): Use Trivial_Accept_OK\n\nFrom-SVN: r131074", "tree": {"sha": "cb0813930717b34d4592e2d5d45cb11ecb1b287c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0813930717b34d4592e2d5d45cb11ecb1b287c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6625fbd0cba10d07e017a1bb3c62775481f56fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6625fbd0cba10d07e017a1bb3c62775481f56fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6625fbd0cba10d07e017a1bb3c62775481f56fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6625fbd0cba10d07e017a1bb3c62775481f56fd6/comments", "author": null, "committer": null, "parents": [{"sha": "5be0911d7d9b51b04b2ef5cf9c925211c3733694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be0911d7d9b51b04b2ef5cf9c925211c3733694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be0911d7d9b51b04b2ef5cf9c925211c3733694"}], "stats": {"total": 147, "additions": 90, "deletions": 57}, "files": [{"sha": "01b261e45121381dffcc1f726189cc885b76d5fe", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 90, "deletions": 57, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6625fbd0cba10d07e017a1bb3c62775481f56fd6/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6625fbd0cba10d07e017a1bb3c62775481f56fd6/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=6625fbd0cba10d07e017a1bb3c62775481f56fd6", "patch": "@@ -347,6 +347,12 @@ package body Exp_Ch9 is\n       Lo         : Node_Id;\n       Hi         : Node_Id) return Boolean;\n \n+   function Null_Statements (Stats : List_Id) return Boolean;\n+   --  Used to check DO-END sequence. Checks for equivalent of DO NULL; END.\n+   --  Allows labels, and pragma Warnings/Unreferenced in the sequence as\n+   --  well to still count as null. Returns True for a null sequence. The\n+   --  argument is the list of statements from the DO-END sequence.\n+\n    function Parameter_Block_Pack\n      (Loc     : Source_Ptr;\n       Blk_Typ : Entity_Id;\n@@ -378,6 +384,16 @@ package body Exp_Ch9 is\n    --    ...\n    --    <actualN> := P.<formalN>;\n \n+   function Trivial_Accept_OK return Boolean;\n+   --  If there is no DO-END block for an accept, or if the DO-END block has\n+   --  only null statements, then it is possible to do the Rendezvous with much\n+   --  less overhead using the Accept_Trivial routine in the run-time library.\n+   --  However, this is not always a valid optimization. Whether it is valid or\n+   --  not depends on the Task_Dispatching_Policy. The issue is whether a full\n+   --  rescheduling action is required or not. In FIFO_Within_Priorities, such\n+   --  a rescheduling is required, so this optimization is not allowed. This\n+   --  function returns True if the optimization is permitted.\n+\n    procedure Update_Prival_Subtypes (N : Node_Id);\n    --  The actual subtypes of the privals will differ from the type of the\n    --  private declaration in the original protected type, if the protected\n@@ -3646,8 +3662,12 @@ package body Exp_Ch9 is\n       Formal   : Entity_Id;\n \n    begin\n-      if Nkind (New_Res) = N_Access_Definition then\n+      --  If the result type is an access_to_subprogram, we must create\n+      --  new entities for its spec.\n \n+      if Nkind (New_Res) = N_Access_Definition\n+        and then Present (Access_To_Subprogram_Definition (New_Res))\n+      then\n          --  Provide new entities for the formals\n \n          Par_Spec := First (Parameter_Specifications\n@@ -4016,7 +4036,8 @@ package body Exp_Ch9 is\n \n    procedure Expand_Accept_Declarations (N : Node_Id; Ent : Entity_Id) is\n       Loc    : constant Source_Ptr := Sloc (N);\n-      Ann    : Entity_Id := Empty;\n+      Stats  : constant Node_Id    := Handled_Statement_Sequence (N);\n+      Ann    : Entity_Id           := Empty;\n       Adecl  : Node_Id;\n       Lab_Id : Node_Id;\n       Lab    : Node_Id;\n@@ -4026,20 +4047,13 @@ package body Exp_Ch9 is\n    begin\n       if Expander_Active then\n \n-         --  If we have no handled statement sequence, then build a dummy\n-         --  sequence consisting of a null statement. This is only done if\n-         --  pragma FIFO_Within_Priorities is specified. The issue here is\n-         --  that even a null accept body has an effect on the called task\n-         --  in terms of its position in the queue, so we cannot optimize\n-         --  the context switch away. However, if FIFO_Within_Priorities\n-         --  is not active, the optimization is legitimate, since we can\n-         --  say that our dispatching policy (i.e. the default dispatching\n-         --  policy) reorders the queue to be the same as just before the\n-         --  call. In the absence of a specified dispatching policy, we are\n-         --  allowed to modify queue orders for a given priority at will!\n-\n-         if Opt.Task_Dispatching_Policy = 'F' and then\n-           No (Handled_Statement_Sequence (N))\n+         --  If we have no handled statement sequence, we may need to build\n+         --  a dummy sequence consisting of a null statement. This can be\n+         --  skipped if the trivial accept optimization is permitted.\n+\n+         if not Trivial_Accept_OK\n+           and then\n+             (No (Stats) or else Null_Statements (Statements (Stats)))\n          then\n             Set_Handled_Statement_Sequence (N,\n               Make_Handled_Sequence_Of_Statements (Loc,\n@@ -4609,34 +4623,6 @@ package body Exp_Ch9 is\n       Call    : Node_Id;\n       Block   : Node_Id;\n \n-      function Null_Statements (Stats : List_Id) return Boolean;\n-      --  Used to check do-end sequence. Checks for equivalent of do null; end.\n-      --  Allows labels, and pragma Warnings/Unreferenced in the sequence as\n-      --  well to still count as null. Returns True for a null sequence.\n-\n-      ---------------------\n-      -- Null_Statements --\n-      ---------------------\n-\n-      function Null_Statements (Stats : List_Id) return Boolean is\n-         Stmt : Node_Id;\n-\n-      begin\n-         Stmt := First (Stats);\n-         while Nkind (Stmt) /= N_Empty\n-           and then (Nkind_In (Stmt, N_Null_Statement, N_Label)\n-                       or else\n-                         (Nkind (Stmt) = N_Pragma\n-                            and then (Chars (Stmt) = Name_Unreferenced\n-                                        or else\n-                                      Chars (Stmt) = Name_Warnings)))\n-         loop\n-            Next (Stmt);\n-         end loop;\n-\n-         return Nkind (Stmt) = N_Empty;\n-      end Null_Statements;\n-\n    --  Start of processing for Expand_N_Accept_Statement\n \n    begin\n@@ -4652,18 +4638,7 @@ package body Exp_Ch9 is\n       --  If the accept statement has declarations, then just insert them\n       --  before the procedure call.\n \n-      --  We avoid this optimization when FIFO_Within_Priorities or some other\n-      --  specified dispatching policy is active, since this may not be not\n-      --  correct according to annex D semantics. For example, in the case of\n-      --  FIFO_Within_Priorities, the call is required to reorder the acceptors\n-      --  position on its ready queue, even though there is nothing to be done.\n-      --  However, if no policy is specified, then we decide that the default\n-      --  dispatching policy always reorders the queue right after the RV to\n-      --  look the way they were just before the RV. Since we are allowed to\n-      --  freely reorder same-priority queues (this is part of what dispatching\n-      --  policies are all about), the optimization is legitimate.\n-\n-      elsif Opt.Task_Dispatching_Policy = ' '\n+      elsif Trivial_Accept_OK\n         and then (No (Stats) or else Null_Statements (Statements (Stats)))\n       then\n          --  Remove declarations for renamings, because the parameter block\n@@ -4877,7 +4852,7 @@ package body Exp_Ch9 is\n    --  begin\n    --     declare\n \n-   --        --  Clean is added by Exp_Ch7.Expand_Cleanup_Actions.\n+   --        --  Clean is added by Exp_Ch7.Expand_Cleanup_Actions\n \n    --        procedure _clean is\n    --        begin\n@@ -11485,6 +11460,29 @@ package body Exp_Ch9 is\n       return Next_Op;\n    end Next_Protected_Operation;\n \n+   ---------------------\n+   -- Null_Statements --\n+   ---------------------\n+\n+   function Null_Statements (Stats : List_Id) return Boolean is\n+      Stmt : Node_Id;\n+\n+   begin\n+      Stmt := First (Stats);\n+      while Nkind (Stmt) /= N_Empty\n+        and then (Nkind_In (Stmt, N_Null_Statement, N_Label)\n+                    or else\n+                      (Nkind (Stmt) = N_Pragma\n+                         and then (Chars (Stmt) = Name_Unreferenced\n+                                     or else\n+                                   Chars (Stmt) = Name_Warnings)))\n+      loop\n+         Next (Stmt);\n+      end loop;\n+\n+      return Nkind (Stmt) = N_Empty;\n+   end Null_Statements;\n+\n    --------------------------\n    -- Parameter_Block_Pack --\n    --------------------------\n@@ -11802,6 +11800,41 @@ package body Exp_Ch9 is\n       Set_Object_Ref (Body_Ent, Priv);\n    end Set_Privals;\n \n+   -----------------------\n+   -- Trivial_Accept_OK --\n+   -----------------------\n+\n+   function Trivial_Accept_OK return Boolean is\n+   begin\n+      case Opt.Task_Dispatching_Policy is\n+\n+         --  If we have the default task dispatching policy in effect, we can\n+         --  definitely do the optimization (one way of looking at this is to\n+         --  think of the formal definition of the default policy being allowed\n+         --  to run any task it likes after a rendezvous, so even if notionally\n+         --  a full rescheduling occurs, we can say that our dispatching policy\n+         --  (i.e. the default dispatching policy) reorders the queue to be the\n+         --  same as just before the call.\n+\n+         when ' ' =>\n+            return True;\n+\n+         --  FIFO_Within_Priorities certainly certainly does not permit this\n+         --  optimization since the Rendezvous is a scheduling action that may\n+         --  require some other task to be run.\n+\n+         when 'F' =>\n+            return False;\n+\n+         --  For now, disallow the optimization for all other policies. This\n+         --  may be over-conservative, but it is certainly not incorrect.\n+\n+         when others =>\n+            return False;\n+\n+      end case;\n+   end Trivial_Accept_OK;\n+\n    ----------------------------\n    -- Update_Prival_Subtypes --\n    ----------------------------"}]}