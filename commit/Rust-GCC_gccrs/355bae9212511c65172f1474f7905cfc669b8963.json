{"sha": "355bae9212511c65172f1474f7905cfc669b8963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1YmFlOTIxMjUxMWM2NTE3MmYxNDc0Zjc5MDVjZmM2NjliODk2Mw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-01-17T19:41:02Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-01-17T19:41:02Z"}, "message": "rs6000.c (rs6000_gimple_builtin): Add gimple folding support for merge[hl].\n\n[gcc]\n\n2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_builtin): Add gimple folding\n\tsupport for merge[hl].\n\t(fold_mergehl_helper): New helper function.\n\t(tree-vector-builder.h): New #include for tree_vector_builder usage.\n\t* config/rs6000/altivec.md (altivec_vmrghw_direct): Add xxmrghw insn.\n\t(altivec_vmrglw_direct): Add xxmrglw insn.\n\n[testsuite]\n\n2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-mergehl-char.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-double.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-float.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-int.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-pixel.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-short.c: New.\n\t* gcc.target/powerpc/builtins-1-be.c: Disable gimple-folding.\n\t* gcc.target/powerpc/builtins-1-le.c: Disable gimple-folding.\n\t* gcc.target/powerpc/builtins-1-be-folded.c: New.\n\t* gcc.target/powerpc/builtins-1-le-folded.c: New.\n\t* gcc.target/powerpc/builtins-1.fold.h: New.\n\nFrom-SVN: r256814", "tree": {"sha": "85c75ad33a264205a0ca1e8077c3a304fcf6c295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c75ad33a264205a0ca1e8077c3a304fcf6c295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/355bae9212511c65172f1474f7905cfc669b8963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355bae9212511c65172f1474f7905cfc669b8963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355bae9212511c65172f1474f7905cfc669b8963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355bae9212511c65172f1474f7905cfc669b8963/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d509539dbc127b44a6b1d7b52057f4fe2dc7e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d509539dbc127b44a6b1d7b52057f4fe2dc7e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d509539dbc127b44a6b1d7b52057f4fe2dc7e87"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "6f30d4cab020616022ca2e706f8eb36f231b6bd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -1,3 +1,12 @@\n+2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_builtin): Add gimple folding\n+\tsupport for merge[hl].\n+\t(fold_mergehl_helper): New helper function.\n+\t(tree-vector-builder.h): New #include for tree_vector_builder usage.\n+\t* config/rs6000/altivec.md (altivec_vmrghw_direct): Add xxmrghw insn.\n+\t(altivec_vmrglw_direct): Add xxmrglw insn.\n+\n 2018-01-17  Andrew Waterman  <andrew@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_conditional_register_usage): If"}, {"sha": "5c28b2d738a05ba3f4920bdb96b818c928dd8bdd", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -997,8 +997,8 @@\n \n (define_insn \"altivec_vmrghb_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VMRGH_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghb %0,%1,%2\"\n@@ -1104,12 +1104,14 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrghw_direct\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VMRGH_DIRECT))]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v,wa\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wa\")]\n+\t\t     UNSPEC_VMRGH_DIRECT))]\n   \"TARGET_ALTIVEC\"\n-  \"vmrghw %0,%1,%2\"\n+  \"@\n+   vmrghw %0,%1,%2\n+   xxmrghw %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vmrghsf\"\n@@ -1186,9 +1188,9 @@\n \n (define_insn \"altivec_vmrglb_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-    \t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n-                      UNSPEC_VMRGL_DIRECT))]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_VMRGL_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n@@ -1244,7 +1246,7 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n \t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VMRGL_DIRECT))]\n+\t\t     UNSPEC_VMRGL_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n@@ -1293,12 +1295,14 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglw_direct\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t              (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VMRGL_DIRECT))]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v,wa\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wa\")]\n+\t\t     UNSPEC_VMRGL_DIRECT))]\n   \"TARGET_ALTIVEC\"\n-  \"vmrglw %0,%1,%2\"\n+  \"@\n+   vmrglw %0,%1,%2\n+   xxmrglw %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vmrglsf\""}, {"sha": "be54cc02bb743a092f144d4a231324abe9d8ccdd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -68,6 +68,7 @@\n #include \"tree-vectorizer.h\"\n #include \"target-globals.h\"\n #include \"builtins.h\"\n+#include \"tree-vector-builder.h\"\n #include \"context.h\"\n #include \"tree-pass.h\"\n #include \"except.h\"\n@@ -16111,6 +16112,40 @@ fold_compare_helper (gimple_stmt_iterator *gsi, tree_code code, gimple *stmt)\n   gsi_replace (gsi, g, true);\n }\n \n+/* Helper function to handle the vector merge[hl] built-ins.  The\n+   implementation difference between h and l versions for this code are in\n+   the values used when building of the permute vector for high word versus\n+   low word merge.  The variance is keyed off the use_high parameter.  */\n+static void\n+fold_mergehl_helper (gimple_stmt_iterator *gsi, gimple *stmt, int use_high)\n+{\n+  tree arg0 = gimple_call_arg (stmt, 0);\n+  tree arg1 = gimple_call_arg (stmt, 1);\n+  tree lhs = gimple_call_lhs (stmt);\n+  tree lhs_type = TREE_TYPE (lhs);\n+  tree lhs_type_type = TREE_TYPE (lhs_type);\n+  int n_elts = TYPE_VECTOR_SUBPARTS (lhs_type);\n+  int midpoint = n_elts / 2;\n+  int offset = 0;\n+\n+  if (use_high == 1)\n+    offset = midpoint;\n+\n+  tree_vector_builder elts (lhs_type, VECTOR_CST_NELTS (arg0), 1);\n+\n+  for (int i = 0; i < midpoint; i++)\n+    {\n+      elts.safe_push (build_int_cst (lhs_type_type, offset + i));\n+      elts.safe_push (build_int_cst (lhs_type_type, offset + n_elts + i));\n+    }\n+\n+  tree permute = elts.build ();\n+\n+  gimple *g = gimple_build_assign (lhs, VEC_PERM_EXPR, arg0, arg1, permute);\n+  gimple_set_location (g, gimple_location (stmt));\n+  gsi_replace (gsi, g, true);\n+}\n+\n /* Fold a machine-dependent built-in in GIMPLE.  (For folding into\n    a constant, use rs6000_fold_builtin.)  */\n \n@@ -16639,6 +16674,28 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t return true;\n       }\n \n+    /* vec_mergel (integrals).  */\n+    case ALTIVEC_BUILTIN_VMRGLH:\n+    case ALTIVEC_BUILTIN_VMRGLW:\n+    case VSX_BUILTIN_XXMRGLW_4SI:\n+    case ALTIVEC_BUILTIN_VMRGLB:\n+    case VSX_BUILTIN_VEC_MERGEL_V2DI:\n+\t/* Do not fold for -maltivec=be on LE targets.  */\n+\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n+\t  return false;\n+\tfold_mergehl_helper (gsi, stmt, 1);\n+\treturn true;\n+    /* vec_mergeh (integrals).  */\n+    case ALTIVEC_BUILTIN_VMRGHH:\n+    case ALTIVEC_BUILTIN_VMRGHW:\n+    case VSX_BUILTIN_XXMRGHW_4SI:\n+    case ALTIVEC_BUILTIN_VMRGHB:\n+    case VSX_BUILTIN_VEC_MERGEH_V2DI:\n+\t/* Do not fold for -maltivec=be on LE targets.  */\n+\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n+\t  return false;\n+\tfold_mergehl_helper (gsi, stmt, 0);\n+\treturn true;\n     default:\n       if (TARGET_DEBUG_BUILTIN)\n \tfprintf (stderr, \"gimple builtin intrinsic not matched:%d %s %s\\n\","}, {"sha": "4e1ae27b06fca6b2dd27a174c47e6d061d7080e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -1,3 +1,18 @@\n+2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-mergehl-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-pixel.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergehl-short.c: New.\n+\t* gcc.target/powerpc/builtins-1-be.c: Disable gimple-folding.\n+\t* gcc.target/powerpc/builtins-1-le.c: Disable gimple-folding.\n+\t* gcc.target/powerpc/builtins-1-be-folded.c: New.\n+\t* gcc.target/powerpc/builtins-1-le-folded.c: New.\n+\t* gcc.target/powerpc/builtins-1.fold.h: New.\n+\n 2018-01-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/g2.c: Add -marm to dg-options."}, {"sha": "aaaf79dad04c7827eb93ad5d6ea66ad6ec7f65c1", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-be.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { powerpc64-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O0\" } */\n+/* { dg-options \"-mcpu=power8 -O0 -mno-fold-gimple\" } */\n \n /* Test that a number of newly added builtin overloads are accepted\n    by the compiler.  */"}, {"sha": "e029d5f44389e2b115e08bac2a9b194347a7ca91", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-le.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355bae9212511c65172f1474f7905cfc669b8963/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c?ref=355bae9212511c65172f1474f7905cfc669b8963", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { powerpc64le-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O0\" } */\n+/* { dg-options \"-mcpu=power8 -O0 -mno-fold-gimple\" } */\n \n /* Test that a number of newly added builtin overloads are accepted\n    by the compiler.  */"}]}