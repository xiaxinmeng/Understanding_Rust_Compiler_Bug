{"sha": "facb553fe47c58844418c15db413a09091895d70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjYjU1M2ZlNDdjNTg4NDQ0MThjMTVkYjQxM2EwOTA5MTg5NWQ3MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-01-06T21:17:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-01-06T21:17:54Z"}, "message": "gcj.texi (Arrays): Added more documentation for JvNewObjectArray.\n\n\t* gcj.texi (Arrays): Added more documentation for\n\tJvNewObjectArray.\n\t(Primitive types): Correct information about primitive classes.\n\t(Reference types): New node.\n\t(Index): New node.\n\nFrom-SVN: r109432", "tree": {"sha": "238141e9c2b7dc0214c755ad3dbdc27477d0a3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238141e9c2b7dc0214c755ad3dbdc27477d0a3a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/facb553fe47c58844418c15db413a09091895d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facb553fe47c58844418c15db413a09091895d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facb553fe47c58844418c15db413a09091895d70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facb553fe47c58844418c15db413a09091895d70/comments", "author": null, "committer": null, "parents": [{"sha": "93846d56e1624d1bb34da982aa270768eaec8c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93846d56e1624d1bb34da982aa270768eaec8c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93846d56e1624d1bb34da982aa270768eaec8c32"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "b310af7fb55694b7dc8150f7ea50fc4c2f351fa1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb553fe47c58844418c15db413a09091895d70/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb553fe47c58844418c15db413a09091895d70/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=facb553fe47c58844418c15db413a09091895d70", "patch": "@@ -1,3 +1,11 @@\n+2006-01-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gcj.texi (Arrays): Added more documentation for\n+\tJvNewObjectArray.\n+\t(Primitive types): Correct information about primitive classes.\n+\t(Reference types): New node.\n+\t(Index): New node.\n+\n 2005-12-16  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* jcf-parse.c (set_source_filename): Set the decl source location"}, {"sha": "84e0e167288f41de2e02415daf0d1ec04b0e9cbc", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb553fe47c58844418c15db413a09091895d70/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb553fe47c58844418c15db413a09091895d70/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=facb553fe47c58844418c15db413a09091895d70", "patch": "@@ -2,6 +2,13 @@\n @setfilename gcj.info\n @settitle Guide to GNU gcj\n \n+@c Merge the standard indexes into a single one.\n+@syncodeindex fn cp\n+@syncodeindex vr cp\n+@syncodeindex ky cp\n+@syncodeindex pg cp\n+@syncodeindex tp cp\n+\n @include gcc-common.texi\n \n @c Note: When reading this manual you'll find lots of strange\n@@ -124,6 +131,7 @@ files and object files, and it can read both Java source code and\n * About CNI::           Description of the Compiled Native Interface\n * System properties::   Modifying runtime behavior of the libgcj library\n * Resources::\t\tWhere to look for more information\n+* Index::               Index.\n @end menu\n \n \n@@ -1426,7 +1434,8 @@ alternative to the standard JNI (Java Native Interface).\n @menu\n * Basic concepts::              Introduction to using CNI@.\n * Packages::                    How packages are mapped to C++.\n-* Primitive types::             Handling Java types in C++.\n+* Primitive types::             Handling primitive Java types in C++.\n+* Reference types::             Handling Java reference types in C++.\n * Interfaces::                  How Java interfaces map to C++.\n * Objects and Classes::         C++ and Java classes.\n * Class Initialization::        How objects are initialized.\n@@ -1623,7 +1632,7 @@ to avoid disappointment.\n @subsection Reference types associated with primitive types\n \n In Java each primitive type has an associated reference type, \n-e.g.: @code{boolean} has an associated @code{java.lang.Boolean} class.\n+e.g.: @code{boolean} has an associated @code{java.lang.Boolean.TYPE} class.\n In order to make working with such classes easier GCJ provides the macro\n @code{JvPrimClass}:\n \n@@ -1637,6 +1646,41 @@ JvPrimClass(void) @result{} java.lang.Void.TYPE\n @end deffn\n \n \n+@node Reference types\n+@section Reference types\n+\n+A Java reference type is treated as a class in C++.  Classes and\n+interfaces are handled this way.  A Java reference is translated to a\n+C++ pointer, so for instance a Java @code{java.lang.String} becomes,\n+in C++, @code{java::lang::String *}.\n+\n+CNI provides a few built-in typedefs for the most common classes:\n+@multitable @columnfractions .30 .25 .60\n+@item @strong{Java type} @tab @strong{C++ typename} @tab @strong{Description}\n+@item @code{java.lang.Object} @tab @code{jobject} @tab Object type\n+@item @code{java.lang.String} @tab @code{jstring} @tab String type\n+@item @code{java.lang.Class} @tab @code{jclass} @tab Class type\n+@end multitable\n+@cindex jobject\n+@cindex jstring\n+@cindex jclass\n+\n+Every Java class or interface has a corresponding @code{Class}\n+instance.  These can be accessed in CNI via the static @code{class$}\n+field of a class.  The @code{class$} field is of type @code{Class}\n+(and not @code{Class *}), so you will typically take the address of\n+it.\n+@cindex class$\n+\n+Here is how you can refer to the class of @code{String}, which in\n+Java would be written @code{String.class}:\n+\n+@example\n+using namespace java::lang;\n+doSomething (&String::class$);\n+@end example\n+\n+\n @node Interfaces\n @section Interfaces\n \n@@ -1896,10 +1940,17 @@ The name of this function may change in the future.\n \n \n @deftypefun jobjectArray JvNewObjectArray (jsize @var{length}, jclass @var{klass}, jobject @var{init})\n-Here @code{klass} is the type of elements of the array and\n+This creates a new array whose elements have reference type.\n+@code{klass} is the type of elements of the array and\n @code{init} is the initial value put into every slot in the array.\n @end deftypefun\n \n+@example\n+using namespace java::lang;\n+JArray<String *> *array\n+  = (JArray<String *> *) JvNewObjectArray(length, &String::class$, NULL);\n+@end example\n+\n \n @subsection Creating arrays\n \n@@ -2761,4 +2812,10 @@ a free software Java class library test suite which is being written\n because the JCK is not free.  See\n @uref{http://sources.redhat.com/mauve/} for more information.\n \n+\n+@node Index\n+@unnumbered Index\n+\n+@printindex cp\n+\n @bye"}]}