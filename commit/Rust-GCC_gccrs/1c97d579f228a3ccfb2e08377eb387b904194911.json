{"sha": "1c97d579f228a3ccfb2e08377eb387b904194911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5N2Q1NzlmMjI4YTNjY2ZiMmUwODM3N2ViMzg3YjkwNDE5NDkxMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-12-19T22:14:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-12-19T22:14:59Z"}, "message": "re PR c++/82593 (Internal compiler error: in process_init_constructor_array, at cp/typeck2.c:1294)\n\n/cp\n2017-12-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/82593\n\t* decl.c (check_array_designated_initializer): Not static.\n\t* cp-tree.h (check_array_designated_initializer): Declare.\n\t* typeck2.c (process_init_constructor_array): Call the latter.\n\t* parser.c (cp_parser_initializer_list): Check the return value\n\tof require_potential_rvalue_constant_expression.\n\n/testsuite\n2017-12-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/82593\n\t* g++.dg/cpp0x/desig2.C: New.\n\t* g++.dg/cpp0x/desig3.C: Likewise.\n\t* g++.dg/cpp0x/desig4.C: Likewise.\n\nFrom-SVN: r255845", "tree": {"sha": "1795a7bd35f6078e54a3ebd2b9182ad6e5c71498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1795a7bd35f6078e54a3ebd2b9182ad6e5c71498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c97d579f228a3ccfb2e08377eb387b904194911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c97d579f228a3ccfb2e08377eb387b904194911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c97d579f228a3ccfb2e08377eb387b904194911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c97d579f228a3ccfb2e08377eb387b904194911/comments", "author": null, "committer": null, "parents": [{"sha": "5837edca5cf5eb7cc45a2a61f69543264b50bbc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5837edca5cf5eb7cc45a2a61f69543264b50bbc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5837edca5cf5eb7cc45a2a61f69543264b50bbc8"}], "stats": {"total": 97, "additions": 84, "deletions": 13}, "files": [{"sha": "77e18677c4fc8d2fd9eaccb4a2e875c78bef5c87", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -1,3 +1,12 @@\n+2017-12-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/82593\n+\t* decl.c (check_array_designated_initializer): Not static.\n+\t* cp-tree.h (check_array_designated_initializer): Declare.\n+\t* typeck2.c (process_init_constructor_array): Call the latter.\n+\t* parser.c (cp_parser_initializer_list): Check the return value\n+\tof require_potential_rvalue_constant_expression.\n+\n 2017-12-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/83394"}, {"sha": "1a7ef9e7d0d56a5788c43c1ac88445312511caea", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -6212,6 +6212,8 @@ extern bool require_deduced_type\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n \n extern tree finish_case_label\t\t\t(location_t, tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree, tsubst_flags_t);\n+extern bool check_array_designated_initializer  (constructor_elt *,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT);\n \n /* in decl2.c */\n extern void record_mangling\t\t\t(tree, bool);"}, {"sha": "cac45f25ec2bbf479d8d5735ed21d23ba28957d1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -5308,7 +5308,7 @@ grok_reference_init (tree decl, tree type, tree init, int flags)\n    initializer.  If it does, an error is issued.  Returns true if CE\n    is valid, i.e., does not have a designated initializer.  */\n \n-static bool\n+bool\n check_array_designated_initializer (constructor_elt *ce,\n \t\t\t\t    unsigned HOST_WIDE_INT index)\n {"}, {"sha": "35f4e367595a7b8be3076a6b9e864e3818ada25f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -22101,8 +22101,10 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \n \t  if (!cp_parser_parse_definitely (parser))\n \t    designator = NULL_TREE;\n-\t  else if (non_const)\n-\t    require_potential_rvalue_constant_expression (designator);\n+\t  else if (non_const\n+\t\t   && (!require_potential_rvalue_constant_expression\n+\t\t       (designator)))\n+\t    designator = NULL_TREE;\n \t  if (designator)\n \t    /* Warn the user that they are using an extension.  */\n \t    pedwarn (loc, OPT_Wpedantic,"}, {"sha": "e54d948f69fa2624b48e44bbda6b9a2b772ab073", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -1305,17 +1305,10 @@ process_init_constructor_array (tree type, tree init, int nested,\n \n   FOR_EACH_VEC_SAFE_ELT (v, i, ce)\n     {\n-      if (ce->index)\n-\t{\n-\t  gcc_assert (TREE_CODE (ce->index) == INTEGER_CST);\n-\t  if (compare_tree_int (ce->index, i) != 0)\n-\t    {\n-\t      ce->value = error_mark_node;\n-\t      sorry (\"non-trivial designated initializers not supported\");\n-\t    }\n-\t}\n-      else\n+      if (!ce->index)\n \tce->index = size_int (i);\n+      else if (!check_array_designated_initializer (ce, i))\n+\tce->index = error_mark_node;\n       gcc_assert (ce->value);\n       ce->value\n \t= massage_init_elt (TREE_TYPE (type), ce->value, nested, complain);"}, {"sha": "5ac2d15d95216dccee242db413124d4f91e3f364", "filename": "gcc/testsuite/g++.dg/cpp0x/desig2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig2.C?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/82593\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+enum {\n+ INDEX1 = 0,\n+ INDEX2\n+};\n+\n+class SomeClass {\n+public:\n+ SomeClass();\n+private:\n+ struct { int field; } member[2];\n+};\n+\n+SomeClass::SomeClass()\n+ : member({\n+   [INDEX1] = { .field = 0 },\n+   [INDEX2] = { .field = 1 }\n+ })\n+{\n+}"}, {"sha": "0a50b742d450eb1d949b11307088adf44b52d3c3", "filename": "gcc/testsuite/g++.dg/cpp0x/desig3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig3.C?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/82593\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+const int INDEX1 = 0;\n+const int INDEX2 = 1;\n+\n+class SomeClass {\n+public:\n+ SomeClass();\n+private:\n+ struct { int field; } member[2];\n+};\n+\n+SomeClass::SomeClass()\n+ : member({\n+   [INDEX1] = { .field = 0 },\n+   [INDEX2] = { .field = 1 }\n+ })\n+{\n+}"}, {"sha": "ff88d82adc079abe1261d483b89c40f93ce717fa", "filename": "gcc/testsuite/g++.dg/cpp0x/desig4.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c97d579f228a3ccfb2e08377eb387b904194911/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdesig4.C?ref=1c97d579f228a3ccfb2e08377eb387b904194911", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/82593\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+int INDEX1 = 0;\n+int INDEX2 = 1;\n+\n+class SomeClass {\n+public:\n+ SomeClass();\n+private:\n+ struct { int field; } member[2];\n+};\n+\n+SomeClass::SomeClass()\n+ : member({\n+   [INDEX1] = { .field = 0 },  // { dg-error \"constant expression\" }\n+   [INDEX2] = { .field = 1 }   // { dg-error \"constant expression\" }\n+ })\n+{\n+}"}]}