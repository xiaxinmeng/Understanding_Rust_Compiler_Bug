{"sha": "848bc05a98b6ea416340bfd9cec9a9584fe182fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4YmMwNWE5OGI2ZWE0MTYzNDBiZmQ5Y2VjOWE5NTg0ZmUxODJmZQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-23T15:34:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-23T17:29:06Z"}, "message": "libstdc++: Improve output verbosity options and default\n\nFor most uses --quiet was too quiet while the default was too noisy. Now\nthe default output, if stdout is a tty, shows the last successful test\non the same line. With --percentage it adds a percentage at the start of\nthe line. --percentage is not default because it requires more resources\nand might not be 100% compatible to all environments.\nIf stdout is not a tty the default is quiet output like for dejagnu.\n\nAdditionally, argument parsing now recognizes contracted short options\nwhich is easier to use with e.g. DRIVEROPTS=-pxk.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/driver.sh: Rewrite output\n\tverbosity logic. Add -p/--percentage option. Allow -v/--verbose\n\tto be used twice. Add -x and -o short options. Parse long\n\toptions with = instead of separating space generically. Parce\n\tcontracted short options. Make unrecognized options an error.\n\tIf same-line output is active, trap on EXIT to increment the\n\tprogress (only with --percentage), erase the line and print the\n\tcurrent status.\n\t* testsuite/experimental/simd/generate_makefile.sh: Initialize\n\thelper files for progress account keeping. Update help target\n\tfor changes to DRIVEROPTS.", "tree": {"sha": "9b5e0da734b1b633ca65ae572bbad7b449a59b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b5e0da734b1b633ca65ae572bbad7b449a59b13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848bc05a98b6ea416340bfd9cec9a9584fe182fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bc05a98b6ea416340bfd9cec9a9584fe182fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848bc05a98b6ea416340bfd9cec9a9584fe182fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bc05a98b6ea416340bfd9cec9a9584fe182fe/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f2669c9d0cbeee9f1df198088492d1bb5c4489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f2669c9d0cbeee9f1df198088492d1bb5c4489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f2669c9d0cbeee9f1df198088492d1bb5c4489"}], "stats": {"total": 170, "additions": 121, "deletions": 49}, "files": [{"sha": "5ae9905e3a300c810e92d0a8fa6c5e79479f9330", "filename": "libstdc++-v3/testsuite/experimental/simd/driver.sh", "status": "modified", "additions": 97, "deletions": 40, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bc05a98b6ea416340bfd9cec9a9584fe182fe/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bc05a98b6ea416340bfd9cec9a9584fe182fe/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh?ref=848bc05a98b6ea416340bfd9cec9a9584fe182fe", "patch": "@@ -5,8 +5,22 @@ abi=0\n name=\n srcdir=\"$(cd \"${0%/*}\" && pwd)/tests\"\n sim=\"$GCC_TEST_SIMULATOR\"\n-quiet=false\n-verbose=false\n+\n+# output_mode values:\n+# print only failures with minimal context\n+readonly really_quiet=0\n+# as above plus same-line output of last successful test\n+readonly same_line=1\n+# as above plus percentage\n+readonly percentage=2\n+# print one line per finished test with minimal context on failure\n+readonly verbose=3\n+# print one line per finished test with full output of the compiler and test\n+readonly really_verbose=4\n+\n+output_mode=$really_quiet\n+[ -t 1 ] && output_mode=$same_line\n+\n timeout=180\n run_expensive=false\n if [ -n \"$GCC_TEST_RUN_EXPENSIVE\" ]; then\n@@ -21,8 +35,12 @@ Usage: $0 [Options] <g++ invocation>\n \n Options:\n   -h, --help          Print this message and exit.\n-  -q, --quiet         Only print failures.\n-  -v, --verbose       Print compiler and test output on failure.\n+  -q, --quiet         Disable same-line progress output (default if stdout is\n+                      not a tty).\n+  -p, --percentage    Add percentage to default same-line progress output.\n+  -v, --verbose       Print one line per test and minimal extra information on\n+                      failure.\n+  -vv                 Print all compiler and test output.\n   -t <type>, --type <type>\n                       The value_type to test (default: $type).\n   -a [0-9], --abi [0-9]\n@@ -36,9 +54,10 @@ Options:\n                       GCC_TEST_SIMULATOR).\n   --timeout-factor <x>\n                       Multiply the default timeout with x.\n-  --run-expensive     Compile and run tests marked as expensive (default:\n+  -x, --run-expensive Compile and run tests marked as expensive (default:\n                       true if GCC_TEST_RUN_EXPENSIVE is set, false otherwise).\n-  --only <pattern>    Compile and run only tests matching the given pattern.\n+  -o <pattern>, --only <pattern>\n+                      Compile and run only tests matching the given pattern.\n EOF\n }\n \n@@ -49,78 +68,92 @@ while [ $# -gt 0 ]; do\n     exit\n     ;;\n   -q|--quiet)\n-    quiet=true\n+    output_mode=$really_quiet\n+    ;;\n+  -p|--percentage)\n+    output_mode=$percentage\n     ;;\n   -v|--verbose)\n-    verbose=true\n+    if [ $output_mode -lt $verbose ]; then\n+      output_mode=$verbose\n+    else\n+      output_mode=$really_verbose\n+    fi\n     ;;\n-  --run-expensive)\n+  -x|--run-expensive)\n     run_expensive=true\n     ;;\n   -k|--keep-failed)\n     keep_failed=true\n     ;;\n-  --only)\n+  -o|--only)\n     only=\"$2\"\n     shift\n     ;;\n-  --only=*)\n-    only=\"${1#--only=}\"\n-    ;;\n   -t|--type)\n     type=\"$2\"\n     shift\n     ;;\n-  --type=*)\n-    type=\"${1#--type=}\"\n-    ;;\n   -a|--abi)\n     abi=\"$2\"\n     shift\n     ;;\n-  --abi=*)\n-    abi=\"${1#--abi=}\"\n-    ;;\n   -n|--name)\n     name=\"$2\"\n     shift\n     ;;\n-  --name=*)\n-    name=\"${1#--name=}\"\n-    ;;\n   --srcdir)\n     srcdir=\"$2\"\n     shift\n     ;;\n-  --srcdir=*)\n-    srcdir=\"${1#--srcdir=}\"\n-    ;;\n   --sim)\n     sim=\"$2\"\n     shift\n     ;;\n-  --sim=*)\n-    sim=\"${1#--sim=}\"\n-    ;;\n   --timeout-factor)\n     timeout=$(awk \"BEGIN { print int($timeout * $2) }\")\n     shift\n     ;;\n-  --timeout-factor=*)\n-    x=${1#--timeout-factor=}\n-    timeout=$(awk \"BEGIN { print int($timeout * $x) }\")\n-    ;;\n   --)\n     shift\n     break\n     ;;\n+  --*=*)\n+    opt=\"$1\"\n+    shift\n+    value=${opt#*=}\n+    set -- ${opt%=$value} \"$value\" ${1+\"$@\"}\n+    continue\n+    ;;\n+  -[ahknopqtvx][ahknopqtvx]*)\n+    opt=\"$1\"\n+    shift\n+    next=${opt#??}\n+    set -- ${opt%$next} \"-$next\" ${1+\"$@\"}\n+    continue\n+    ;;\n+  -*)\n+    echo \"Error: Unrecognized option '$1'\" >&2\n+    exit 1\n+    ;;\n   *)\n     break\n     ;;\n   esac\n   shift\n done\n \n+if [ $output_mode = $percentage ]; then\n+  inc_progress() {\n+    {\n+      flock -n 9\n+      n=$(($(cat .progress) + 1))\n+      echo $n >&9\n+      echo $n\n+    } 9<>.progress\n+  }\n+fi\n+\n CXX=\"$1\"\n shift\n CXXFLAGS=\"$@\"\n@@ -133,6 +166,7 @@ sum=\"${testname}.sum\"\n if [ -n \"$only\" ]; then\n   if echo \"$testname\"|awk \"{ exit /$only/ }\"; then\n     touch \"$log\" \"$sum\"\n+    [ $output_mode = $percentage ] && inc_progress >/dev/null\n     exit 0\n   fi\n fi\n@@ -146,35 +180,58 @@ else\n   exit 1\n fi\n \n+if [ $output_mode = $percentage ]; then\n+  show_progress() {\n+    n=$(inc_progress)\n+    read total < .progress_total\n+    total=${total}0\n+    printf \"\\e[1G\\e[K[%3d %%] ${src##*/} $type $abiflag\" \\\n+      $((n * 1005 / total))\n+  }\n+  trap 'show_progress' EXIT\n+  prefix=\"\\e[1G\\e[K\"\n+elif [ $output_mode = $same_line ]; then\n+  show_progress() {\n+    printf \"\\e[1G\\e[K${src##*/} $type $abiflag\"\n+  }\n+  trap 'show_progress' EXIT\n+  prefix=\"\\e[1G\\e[K\"\n+else\n+  prefix=\"\"\n+fi\n+\n fail() {\n+  printf \"$prefix\"\n   echo \"FAIL: $src $type $abiflag ($*)\" | tee -a \"$sum\" \"$log\"\n }\n \n xpass() {\n+  printf \"$prefix\"\n   echo \"XPASS: $src $type $abiflag ($*)\" | tee -a \"$sum\" \"$log\"\n }\n \n xfail() {\n-  $quiet || echo \"XFAIL: $src $type $abiflag ($*)\"\n+  [ $output_mode -ge $verbose ] && echo \"XFAIL: $src $type $abiflag ($*)\"\n   echo \"XFAIL: $src $type $abiflag ($*)\" >> \"$sum\"\n   echo \"XFAIL: $src $type $abiflag ($*)\" >> \"$log\"\n }\n \n pass() {\n-  $quiet || echo \"PASS: $src $type $abiflag ($*)\"\n+  [ $output_mode -ge $verbose ] && echo \"PASS: $src $type $abiflag ($*)\"\n   echo \"PASS: $src $type $abiflag ($*)\" >> \"$sum\"\n   echo \"PASS: $src $type $abiflag ($*)\" >> \"$log\"\n }\n \n unsupported() {\n-  $quiet || echo \"UNSUPPORTED: $src $type $abiflag ($*)\"\n+  test\n+  [ $output_mode -ge $verbose ] && echo \"UNSUPPORTED: $src $type $abiflag ($*)\"\n   echo \"UNSUPPORTED: $src $type $abiflag ($*)\" >> \"$sum\"\n   echo \"UNSUPPORTED: $src $type $abiflag ($*)\" >> \"$log\"\n }\n \n write_log_and_verbose() {\n   echo \"$*\" >> \"$log\"\n-  if $verbose; then\n+  if [ $output_mode = $really_verbose ]; then\n     if [ -z \"$COLUMNS\" ] || ! type fmt>/dev/null; then\n       echo \"$*\"\n     else\n@@ -265,7 +322,7 @@ if read_src_option timeout-factor factor; then\n fi\n \n log_output() {\n-  if $verbose; then\n+  if [ $output_mode = $really_verbose ]; then\n     maxcol=${1:-1024}\n     awk \"\n BEGIN { count = 0 }\n@@ -323,7 +380,7 @@ verify_compilation() {\n     warnings=$(grep -ic 'warning:' \"$log\")\n     if [ $warnings -gt 0 ]; then\n       fail \"excess warnings:\" $warnings\n-      if ! $verbose && ! $quiet; then\n+      if [ $output_mode = $verbose ]; then\n         grep -i 'warning:' \"$log\" | head -n5\n       fi\n     elif [ \"$xfail\" = \"compile\" ]; then\n@@ -344,7 +401,7 @@ verify_compilation() {\n         fail \"excess errors:\" $errors\n       fi\n     fi\n-    if ! $verbose && ! $quiet; then\n+    if [ $output_mode = $verbose ]; then\n       grep -i 'error:' \"$log\" | head -n5\n     fi\n     return 1\n@@ -365,7 +422,7 @@ verify_test() {\n     return 0\n   else\n     $keep_failed || rm \"$exe\"\n-    if ! $verbose && ! $quiet; then\n+    if [ $output_mode = $verbose ]; then\n       grep -i fail \"$log\" | head -n5\n     fi\n     if [ $exitstatus -eq 124 ]; then"}, {"sha": "ce5162a6cebc4cc686b8c12c453832f65e6752fe", "filename": "libstdc++-v3/testsuite/experimental/simd/generate_makefile.sh", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bc05a98b6ea416340bfd9cec9a9584fe182fe/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bc05a98b6ea416340bfd9cec9a9584fe182fe/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh?ref=848bc05a98b6ea416340bfd9cec9a9584fe182fe", "patch": "@@ -97,7 +97,7 @@ driveroptions := \\$(DRIVEROPTS)\n \n all: simd_testsuite.sum\n \n-simd_testsuite.sum: simd_testsuite.log\n+simd_testsuite.sum: .progress .progress_total simd_testsuite.log\n \t@printf \"\\n\\t\\t=== simd_testsuite \\$(test_flags) Summary ===\\n\\n\"\\\\\n \t\"# of expected passes:\\t\\t\\$(shell grep -c '^PASS:' \\$@)\\n\"\\\\\n \t\"# of unexpected passes:\\t\\t\\$(shell grep -c '^XPASS:' \\$@)\\n\"\\\\\n@@ -255,7 +255,7 @@ EOF\n   done\n   cat <<EOF\n run-%: export GCC_TEST_RUN_EXPENSIVE=yes\n-run-%: driveroptions += -v\n+run-%: driveroptions += -vv\n run-%: %.log\n \t@rm \\$^ \\$(^:log=sum)\n \n@@ -266,17 +266,22 @@ EOF\n   dsthelp=\"${dst%Makefile}.make_help.txt\"\n   cat <<EOF > \"$dsthelp\"\n use DRIVEROPTS=<options> to pass the following options:\n--q, --quiet         Only print failures.\n--v, --verbose       Print compiler and test output on failure.\n+-q, --quiet         Disable same-line progress output (default if stdout is\n+                    not a tty).\n+-p, --percentage    Add percentage to default same-line progress output.\n+-v, --verbose       Print one line per test and minimal extra information on\n+                    failure.\n+-vv                 Print all compiler and test output.\n -k, --keep-failed   Keep executables of failed tests.\n --sim <executable>  Path to an executable that is prepended to the test\n                     execution binary (default: the value of\n                     GCC_TEST_SIMULATOR).\n --timeout-factor <x>\n                     Multiply the default timeout with x.\n---run-expensive     Compile and run tests marked as expensive (default:\n+-x, --run-expensive Compile and run tests marked as expensive (default:\n                     true if GCC_TEST_RUN_EXPENSIVE is set, false otherwise).\n---only <pattern>    Compile and run only tests matching the given pattern.\n+-o <pattern>, --only <pattern>\n+                    Compile and run only tests matching the given pattern.\n \n use TESTFLAGS=<flags> to pass additional compiler flags\n \n@@ -285,9 +290,13 @@ The following are some of the valid targets for this Makefile:\n ... clean\n ... help\"\n EOF\n+  N=$(((0$(\n+    all_tests | while read file && read name; do\n+      all_types \"$file\" | printf \" + %d\" $(wc -l)\n+    done) ) * 5))\n   all_tests | while read file && read name; do\n     echo \"... run-${name}\"\n-    all_types | while read t && read type; do\n+    all_types \"$file\" | while read t && read type; do\n       echo \"... run-${name}-${type}\"\n       for i in $(seq 0 9); do\n         echo \"... run-${name}-${type}-$i\"\n@@ -296,10 +305,16 @@ EOF\n   done >> \"$dsthelp\"\n   cat <<EOF\n \n+.progress:\n+\t@echo 0 > .progress\n+\n+.progress_total:\n+\t@echo $N > .progress_total\n+\n clean:\n-\trm -f -- *.sum *.log *.exe\n+\trm -f -- *.sum *.log *.exe .progress .progress_total\n \n-.PHONY: clean help\n+.PHONY: all clean help .progress .progress_total\n \n .PRECIOUS: %.log %.sum\n EOF"}]}