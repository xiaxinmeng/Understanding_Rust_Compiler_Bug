{"sha": "be7ea145514eba69a3d53340da3f05f804e48833", "node_id": "C_kwDOANBUbNoAKGJlN2VhMTQ1NTE0ZWJhNjlhM2Q1MzM0MGRhM2YwNWY4MDRlNDg4MzM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-26T09:11:18Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-28T12:02:32Z"}, "message": "ada: Adjust runtime library and User's Guide to PIE default on Linux\n\ngcc/ada/\n\n\t* libgnat/g-traceb.ads: Minor tweaks in the commentary.\n\t(Executable_Load_Address): New function.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst (Non-Symbolic\n\tTraceback): Adjust to PIE default on Linux.\n\t(Symbolic Traceback): Likewise.\n\t* doc/gnat_ugn/gnat_utility_programs.rst (gnatsymbolize): Likewise.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "368699c77c633e1f94f3717a3c662984cc8d9822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368699c77c633e1f94f3717a3c662984cc8d9822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7ea145514eba69a3d53340da3f05f804e48833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ea145514eba69a3d53340da3f05f804e48833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7ea145514eba69a3d53340da3f05f804e48833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ea145514eba69a3d53340da3f05f804e48833/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81885f5cca22fe82adbe90eb1a5f7808fc083bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81885f5cca22fe82adbe90eb1a5f7808fc083bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81885f5cca22fe82adbe90eb1a5f7808fc083bec"}], "stats": {"total": 162, "additions": 98, "deletions": 64}, "files": [{"sha": "45ecea75416892811f321daf4d8e1325b880e520", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=be7ea145514eba69a3d53340da3f05f804e48833", "patch": "@@ -859,16 +859,18 @@ bug occurs, and then be able to retrieve the sequence of calls with the same\n program compiled with debug information.\n \n However the ``addr2line`` tool does not work with Position-Independent Code\n-(PIC), the historical example being Windows DLLs, which nowadays encompasses\n-Position-Independent Executables (PIE) on recent Windows versions.\n-\n-In order to translate addresses into the source lines with Position-Independent\n-Executables on recent Windows versions, in other words without using the switch\n-:switch:`-no-pie` during linking, you need to use the ``gnatsymbolize`` tool\n-with :switch:`--load` instead of the ``addr2line`` tool. The main difference\n-is that you need to copy the Load Address output in the traceback ahead of the\n-sequence of addresses. And the default mode of ``gnatsymbolize`` is equivalent\n-to that of ``addr2line`` with the above switches, so none of them is needed::\n+(PIC), the historical example being Linux dynamic libraries and Windows DLLs,\n+which nowadays encompasse Position-Independent Executables (PIE) on recent\n+Linux and Windows versions.\n+\n+In order to translate addresses the source lines with Position-Independent\n+Executables on recent Linux and Windows versions, in other words without\n+using the switch :switch:`-no-pie` during linking, you need to use the\n+``gnatsymbolize`` tool with :switch:`--load` instead of the ``addr2line``\n+tool. The main difference is that you need to copy the Load Address output\n+in the traceback ahead of the sequence of addresses. And the default mode\n+of ``gnatsymbolize`` is equivalent to that of ``addr2line`` with the above\n+switches, so none of them is needed::\n \n      $ gnatmake stb -g -bargs -E\n      $ stb\n@@ -879,7 +881,7 @@ to that of ``addr2line`` with the above switches, so none of them is needed::\n      Call stack traceback locations:\n      0x401373 0x40138b 0x40139c 0x401335 0x4011c4 0x4011f1 0x77e892a4\n \n-     $ gnatsymbolize --load stb 0x400000 0x401373 0x40138b 0x40139c 0x401335\n+     $ gnatsymbolize --load stb 0x400000 0x401373 0x40138b 0x40139c 0x401335 \\\n         0x4011c4 0x4011f1 0x77e892a4\n \n      0x00401373 Stb.P1 at stb.adb:5\n@@ -957,12 +959,17 @@ addresses to strings:\n       with Ada.Text_IO;\n       with GNAT.Traceback;\n       with GNAT.Debug_Utilities;\n+      with System;\n \n       procedure STB is\n \n          use Ada;\n+         use Ada.Text_IO;\n          use GNAT;\n          use GNAT.Traceback;\n+         use System;\n+\n+         LA : constant Address := Executable_Load_Address;\n \n          procedure P1 is\n             TB  : Tracebacks_Array (1 .. 10);\n@@ -972,14 +979,14 @@ addresses to strings:\n          begin\n             Call_Chain (TB, Len);\n \n-            Text_IO.Put (\"In STB.P1 : \");\n+            Put (\"In STB.P1 : \");\n \n             for K in 1 .. Len loop\n-               Text_IO.Put (Debug_Utilities.Image (TB (K)));\n-               Text_IO.Put (' ');\n+               Put (Debug_Utilities.Image_C (TB (K)));\n+               Put (' ');\n             end loop;\n \n-            Text_IO.New_Line;\n+            New_Line;\n          end P1;\n \n          procedure P2 is\n@@ -988,6 +995,10 @@ addresses to strings:\n          end P2;\n \n       begin\n+         if LA /= Null_Address then\n+            Put_Line (\"Load address: \" & Debug_Utilities.Image_C (LA));\n+         end if;\n+\n          P2;\n       end STB;\n \n@@ -996,8 +1007,9 @@ addresses to strings:\n      $ gnatmake stb -g\n      $ stb\n \n-     In STB.P1 : 16#0040_F1E4# 16#0040_14F2# 16#0040_170B# 16#0040_171C#\n-     16#0040_1461# 16#0040_11C4# 16#0040_11F1# 16#77E8_92A4#\n+     Load address: 0x400000\n+     In STB.P1 : 0x40F1E4 0x4014F2 0x40170B 0x40171C 0x401461 0x4011C4 \\\n+       0x4011F1 0x77E892A4\n \n \n You can then get further information by invoking the ``addr2line`` tool or"}, {"sha": "f2d42e96bd4ac758216a1934394fbeecc2e2e1ea", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=be7ea145514eba69a3d53340da3f05f804e48833", "patch": "@@ -2187,30 +2187,32 @@ building specialized scripts.\n \n   This program, when built and run, prints a list of addresses which\n   correspond to the traceback when inside function ``Call_Me_Third``.\n-  For instance, on x86_64 GNU/Linux:\n+  For instance, on x86-64 GNU/Linux:\n \n     ::\n \n        $ gnatmake -g -q foo.adb\n        $ ./foo\n-       0x0000000000402561\n-       0x00000000004025EF\n-       0x00000000004025FB\n-       0x0000000000402611\n-       0x00000000004024C7\n+       Load address: 0x00005586C9D7D000\n+       0x00005586C9D81105\n+       0x00005586C9D8119B\n+       0x00005586C9D811A7\n+       0x00005586C9D8128C\n+       0x00005586C9D81069\n \n   ``gnatsymbolize`` can be used to translate those addresses into\n   code locations as follow:\n \n     ::\n \n-       $ gnatsymbolize foo 0x0000000000402561 0x00000000004025EF \\\n-           0x00000000004025FB 0x0000000000402611 0x00000000004024C7\n-       Pck.Call_Me_Third at pck.adb:12\n-       Pck.Call_Me_Second at pck.adb:20\n-       Pck.Call_Me_First at pck.adb:25\n-       Foo at foo.adb:6\n-       Main at b~foo.adb:184\n+       $ gnatsymbolize --load foo 0x00005586C9D7D000 0x00005586C9D81105 \\\n+           0x00005586C9D8119B 0x00005586C9D811A7 0x00005586C9D8128C \\\n+           0x00005586C9D81069\n+       0x5586c9d81105 Pck.Call_Me_Third at pck.adb:12\n+       0x5586c9d8119b Pck.Call_Me_Second at pck.adb:20\n+       0x5586c9d811a7 Pck.Call_Me_First at pck.adb:25\n+       0x5586c9d8128c Foo at foo.adb:6\n+       0x5586c9d81069 Main at b~foo.adb:199\n \n   Switches for ``gnatsymbolize``\n   ------------------------------\n@@ -2243,7 +2245,7 @@ building specialized scripts.\n \n   :switch:`--load`\n     Interpret the first address as the load address of the executable.\n-    This is needed for position-independent executables on Windows.\n+    This is needed for position-independent executables on Linux and Windows.\n \n   Requirements for Correct Operation\n   ----------------------------------"}, {"sha": "5224a1201b8438477f28ee5e0635d02722b900df", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=be7ea145514eba69a3d53340da3f05f804e48833", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Nov 18, 2022\n+GNAT User's Guide for Native Platforms , Nov 28, 2022\n \n AdaCore\n \n@@ -11100,7 +11100,7 @@ of the pragma @code{Restriction_Warnings}.\n `[warning-as-error]'\n Used to tag warning messages that have been converted to error messages by\n use of the pragma Warning_As_Error. Note that such warnings are prefixed by\n-the string \u201cerror: \u201c rather than \u201cwarning: \u201c.\n+the string \u201cerror: \u201d rather than \u201cwarning: \u201c.\n \n @item \n `[enabled by default]'\n@@ -19128,16 +19128,18 @@ bug occurs, and then be able to retrieve the sequence of calls with the same\n program compiled with debug information.\n \n However the @code{addr2line} tool does not work with Position-Independent Code\n-(PIC), the historical example being Windows DLLs, which nowadays encompasses\n-Position-Independent Executables (PIE) on recent Windows versions.\n+(PIC), the historical example being Linux dynamic libraries and Windows DLLs,\n+which nowadays encompasse Position-Independent Executables (PIE) on recent\n+Linux and Windows versions.\n \n-In order to translate addresses into the source lines with Position-Independent\n-Executables on recent Windows versions, in other words without using the switch\n-@code{-no-pie} during linking, you need to use the @code{gnatsymbolize} tool\n-with @code{--load} instead of the @code{addr2line} tool. The main difference\n-is that you need to copy the Load Address output in the traceback ahead of the\n-sequence of addresses. And the default mode of @code{gnatsymbolize} is equivalent\n-to that of @code{addr2line} with the above switches, so none of them is needed:\n+In order to translate addresses the source lines with Position-Independent\n+Executables on recent Linux and Windows versions, in other words without\n+using the switch @code{-no-pie} during linking, you need to use the\n+@code{gnatsymbolize} tool with @code{--load} instead of the @code{addr2line}\n+tool. The main difference is that you need to copy the Load Address output\n+in the traceback ahead of the sequence of addresses. And the default mode\n+of @code{gnatsymbolize} is equivalent to that of @code{addr2line} with the above\n+switches, so none of them is needed:\n \n @example\n $ gnatmake stb -g -bargs -E\n@@ -19149,7 +19151,7 @@ Load address: 0x400000\n Call stack traceback locations:\n 0x401373 0x40138b 0x40139c 0x401335 0x4011c4 0x4011f1 0x77e892a4\n \n-$ gnatsymbolize --load stb 0x400000 0x401373 0x40138b 0x40139c 0x401335\n+$ gnatsymbolize --load stb 0x400000 0x401373 0x40138b 0x40139c 0x401335 \\\n    0x4011c4 0x4011f1 0x77e892a4\n \n 0x00401373 Stb.P1 at stb.adb:5\n@@ -19234,12 +19236,17 @@ addresses to strings:\n with Ada.Text_IO;\n with GNAT.Traceback;\n with GNAT.Debug_Utilities;\n+with System;\n \n procedure STB is\n \n    use Ada;\n+   use Ada.Text_IO;\n    use GNAT;\n    use GNAT.Traceback;\n+   use System;\n+\n+   LA : constant Address := Executable_Load_Address;\n \n    procedure P1 is\n       TB  : Tracebacks_Array (1 .. 10);\n@@ -19249,14 +19256,14 @@ procedure STB is\n    begin\n       Call_Chain (TB, Len);\n \n-      Text_IO.Put (\"In STB.P1 : \");\n+      Put (\"In STB.P1 : \");\n \n       for K in 1 .. Len loop\n-         Text_IO.Put (Debug_Utilities.Image (TB (K)));\n-         Text_IO.Put (' ');\n+         Put (Debug_Utilities.Image_C (TB (K)));\n+         Put (' ');\n       end loop;\n \n-      Text_IO.New_Line;\n+      New_Line;\n    end P1;\n \n    procedure P2 is\n@@ -19265,6 +19272,10 @@ procedure STB is\n    end P2;\n \n begin\n+   if LA /= Null_Address then\n+      Put_Line (\"Load address: \" & Debug_Utilities.Image_C (LA));\n+   end if;\n+\n    P2;\n end STB;\n @end example\n@@ -19273,8 +19284,9 @@ end STB;\n $ gnatmake stb -g\n $ stb\n \n-In STB.P1 : 16#0040_F1E4# 16#0040_14F2# 16#0040_170B# 16#0040_171C#\n-16#0040_1461# 16#0040_11C4# 16#0040_11F1# 16#77E8_92A4#\n+Load address: 0x400000\n+In STB.P1 : 0x40F1E4 0x4014F2 0x40170B 0x40171C 0x401461 0x4011C4 \\\n+  0x4011F1 0x77E892A4\n @end example\n @end quotation\n \n@@ -29386,8 +29398,8 @@ to permit their use in free software.\n \n @printindex ge\n \n-@anchor{cf}@w{                              }\n @anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n+@anchor{cf}@w{                              }\n \n @c %**end of body\n @bye"}, {"sha": "163201c5befb64f564b3f0926b5f8aa7699e7afa", "filename": "gcc/ada/libgnat/g-traceb.ads", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Flibgnat%2Fg-traceb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ea145514eba69a3d53340da3f05f804e48833/gcc%2Fada%2Flibgnat%2Fg-traceb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-traceb.ads?ref=be7ea145514eba69a3d53340da3f05f804e48833", "patch": "@@ -38,38 +38,36 @@\n \n --  The traceback information is in the form of absolute code locations.\n --  These code locations may be converted to corresponding source locations\n---  using the external addr2line utility, or from within GDB.\n+--  using the addr2line or gnatsymbolize utilities, or from within GDB.\n \n --  In order to use this facility, in some cases the binder must be invoked\n --  with -E switch (store the backtrace with exception occurrence). Please\n --  refer to gnatbind documentation for more information.\n \n---  To analyze the code locations later using addr2line or gdb, the necessary\n---  units must be compiled with the debugging switch -g in the usual manner.\n---  Note that it is not necessary to compile with -g to use Call_Chain. In\n---  other words, the following sequence of steps can be used:\n+--  To analyze the code locations later using addr2line, gnatsymbolize or GDB,\n+--  the necessary units must be compiled with the debugging switch -g in the\n+--  usual manner. Note that it is not necessary to compile with -g to use\n+--  Call_Chain. In other words, the following sequence of steps can be used:\n \n --     Compile without -g\n --     Run the program, and call Call_Chain\n --     Recompile with -g\n---     Use addr2line to interpret the absolute call locations (note that\n---      addr2line expects addresses in hexadecimal format).\n+--     Use addr2line or gnatsymbolize to interpret the absolute call locations\n+--     (note that addr2line expects addresses in hexadecimal format).\n \n --  This capability is currently supported on the following targets:\n \n---     AiX PowerPC\n+--     AIX PowerPC\n --     GNU/Linux x86\n --     GNU/Linux PowerPC\n --     LynxOS x86\n---     LynxOS 178 xcoff PowerPC\n---     LynxOS 178 elf PowerPC\n+--     LynxOS-178 PowerPC\n --     Solaris x86\n---     Solaris sparc\n+--     Solaris SPARC\n --     VxWorks ARM\n---     VxWorks7 ARM\n --     VxWorks PowerPC\n --     VxWorks x86\n---     Windows XP\n+--     Windows\n \n --  Note: see also GNAT.Traceback.Symbolic, a child unit in file g-trasym.ads\n --  providing symbolic trace back capability for a subset of the above targets.\n@@ -101,11 +99,21 @@ package GNAT.Traceback is\n    function Call_Chain\n      (Max_Len     : Positive;\n       Skip_Frames : Natural := 1) return Tracebacks_Array;\n-   --  Returns up to Max_Len tracebacks corresponding to the current call\n+   --  Return up to Max_Len tracebacks corresponding to the current call\n    --  chain. Result array order is the same as in above procedure Call_Chain\n    --  except that Skip_Frames says how many of the most recent calls should be\n    --  excluded from the result, starting with this procedure itself: 1 means\n    --  exclude the frame for this procedure, 2 means 1 + exclude the frame for\n    --  this procedure's caller, ...\n \n+   function Executable_Load_Address return System.Address;\n+   pragma Import (C,\n+                  Executable_Load_Address,\n+                  \"__gnat_get_executable_load_address\");\n+   --  Return the load address of the executable or System.Null_Address if the\n+   --  executable has been loaded at the address computed by the static linker.\n+   --  This address is needed to interpret the absolute call locations given by\n+   --  the subprograms of this unit when Position-Independent Executables (PIE)\n+   --  are used on recent GNU/Linux and Windows versions.\n+\n end GNAT.Traceback;"}]}