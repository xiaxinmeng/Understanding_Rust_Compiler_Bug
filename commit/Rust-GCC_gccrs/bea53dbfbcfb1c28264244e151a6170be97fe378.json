{"sha": "bea53dbfbcfb1c28264244e151a6170be97fe378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhNTNkYmZiY2ZiMWMyODI2NDI0NGUxNTFhNjE3MGJlOTdmZTM3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-03T00:02:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-03T00:02:47Z"}, "message": "istream.cc (basic_istream<char>::ignore(streamsize), [...]): Avoid _M_gcount overflows.\n\n2005-01-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n\tbasic_istream<char>::ignore(streamsize, int_type),\n\tbasic_istream<wchar_t>::ignore(streamsize),\n\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): Avoid\n\t_M_gcount overflows.\n\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n\tint_type)): Likewise; use snextc in the main loop, consistently\n\twith the specializations above.\n\nFrom-SVN: r92816", "tree": {"sha": "146256ff5e26b155136c80927e19e8b3c49a6faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146256ff5e26b155136c80927e19e8b3c49a6faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea53dbfbcfb1c28264244e151a6170be97fe378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea53dbfbcfb1c28264244e151a6170be97fe378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea53dbfbcfb1c28264244e151a6170be97fe378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea53dbfbcfb1c28264244e151a6170be97fe378/comments", "author": null, "committer": null, "parents": [{"sha": "1330529e587cb17366dc5ae6fc510f32b19ad123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1330529e587cb17366dc5ae6fc510f32b19ad123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1330529e587cb17366dc5ae6fc510f32b19ad123"}], "stats": {"total": 254, "additions": 155, "deletions": 99}, "files": [{"sha": "8d25535bb09d03bd686566456acc432d54a95f56", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bea53dbfbcfb1c28264244e151a6170be97fe378", "patch": "@@ -1,3 +1,14 @@\n+2005-01-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n+\tbasic_istream<char>::ignore(streamsize, int_type),\n+\tbasic_istream<wchar_t>::ignore(streamsize),\n+\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): Avoid\n+\t_M_gcount overflows. \t\n+\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n+\tint_type)): Likewise; use snextc in the main loop, consistently\n+\twith the specializations above.\n+\n 2005-01-02  Chris Jefferson  <chris@bubblescope.net>\n \n \t* include/bits/stl_algobase.h (mismatch): Correct concept check."}, {"sha": "49cdc8050a3294b9d97ef63ad6c9795f98519b1f", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=bea53dbfbcfb1c28264244e151a6170be97fe378", "patch": "@@ -1,6 +1,6 @@\n // istream classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -683,13 +683,23 @@ namespace std\n             {\n               const int_type __eof = traits_type::eof();\n               __streambuf_type* __sb = this->rdbuf();\n-              int_type __c = __eof;\n+              int_type __c = __sb->sgetc();\n+\n+\t      while (true)\n+\t\t{\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof))\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof))\n+\t\t    _M_gcount = 0;\n+\t\t  else\n+\t\t    break;\n+\t\t}\n \n-              if (__n != numeric_limits<streamsize>::max())\n-                --__n;\n-              while (_M_gcount <= __n\n-                     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n-\t\t++_M_gcount;\n \t      if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n             }\n@@ -718,19 +728,32 @@ namespace std\n             {\n               const int_type __eof = traits_type::eof();\n               __streambuf_type* __sb = this->rdbuf();\n-              int_type __c = __eof;\n+              int_type __c = __sb->sgetc();\n+\n+\t      while (true)\n+\t\t{\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof)\n+\t\t\t && !traits_type::eq_int_type(__c, __delim))\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof)\n+\t\t      && !traits_type::eq_int_type(__c, __delim))\n+\t\t    _M_gcount = 0;\n+\t\t  else\n+\t\t    break;\n+\t\t}\n \n-              if (__n != numeric_limits<streamsize>::max())\n-                --__n;\n-              while (_M_gcount <= __n\n-                     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n-                {\n-                  ++_M_gcount;\n-                  if (traits_type::eq_int_type(__c, __delim))\n-                    break;\n-                }\n               if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n+\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t\t{\n+\t\t  ++_M_gcount;\n+\t\t  __sb->sbumpc();\n+\t\t}\n             }\n           catch(...)\n             { this->_M_setstate(ios_base::badbit); }"}, {"sha": "a49878a5da20004408fb26a66f511c23be5e83e4", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 104, "deletions": 82, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea53dbfbcfb1c28264244e151a6170be97fe378/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=bea53dbfbcfb1c28264244e151a6170be97fe378", "patch": "@@ -1,6 +1,6 @@\n // Input streams -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -124,28 +124,33 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \t      \n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof))\n+\t      while (true)\n \t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n-\n-\t\t  if (__size > 1)\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof))\n \t\t    {\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n+\t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t      - __sb->gptr()),\n+\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t      if (__size > 1)\n+\t\t\t{\n+\t\t\t  __sb->gbump(__size);\n+\t\t\t  _M_gcount += __size;\n+\t\t\t  __c = __sb->sgetc();\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ++_M_gcount;\n+\t\t\t  __c = __sb->snextc();\n+\t\t\t} \n \t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof))\n+\t\t    _M_gcount == 0;\n \t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n+\t\t    break;\n \t\t}\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n@@ -177,34 +182,40 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof)\n-\t\t     && !traits_type::eq_int_type(__c, __delim))\n+\t      while (true)\n \t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n-\n-\t\t  if (__size > 1)\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof)\n+\t\t\t && !traits_type::eq_int_type(__c, __delim))\n \t\t    {\n-\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t       __size,\n-\t\t\t\t\t\t\t       __cdelim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n+\t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t      - __sb->gptr()),\n+\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t      if (__size > 1)\n+\t\t\t{\n+\t\t\t  const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __cdelim);\n+\t\t\t  if (__p)\n+\t\t\t    __size = __p - __sb->gptr();\n+\t\t\t  __sb->gbump(__size);\n+\t\t\t  _M_gcount += __size;\n+\t\t\t  __c = __sb->sgetc();\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ++_M_gcount;\n+\t\t\t  __c = __sb->snextc();\n+\t\t\t}\n \t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof)\n+\t\t      && !traits_type::eq_int_type(__c, __delim))\n+\t\t    _M_gcount = 0;\n \t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n+\t\t    break;\n \t\t}\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n@@ -390,29 +401,34 @@ namespace std\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n-\t      \n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof))\n-\t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n \n-\t\t  if (__size > 1)\n+\t      while (true)\n+\t\t{\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof))\n \t\t    {\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n+\t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t      - __sb->gptr()),\n+\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t      if (__size > 1)\n+\t\t\t{\n+\t\t\t  __sb->gbump(__size);\n+\t\t\t  _M_gcount += __size;\n+\t\t\t  __c = __sb->sgetc();\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ++_M_gcount;\n+\t\t\t  __c = __sb->snextc();\n+\t\t\t}\n \t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof))\n+\t\t    _M_gcount == 0;\n \t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n+\t\t    break;\n \t\t}\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n@@ -444,34 +460,40 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof)\n-\t\t     && !traits_type::eq_int_type(__c, __delim))\n+\t      while (true)\n \t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n-\n-\t\t  if (__size > 1)\n+\t\t  while (_M_gcount < __n\n+\t\t\t && !traits_type::eq_int_type(__c, __eof)\n+\t\t\t && !traits_type::eq_int_type(__c, __delim))\n \t\t    {\n-\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t       __size,\n-\t\t\t\t\t\t\t       __cdelim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n+\t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t      - __sb->gptr()),\n+\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t      if (__size > 1)\n+\t\t\t{\n+\t\t\t  const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __cdelim);\n+\t\t\t  if (__p)\n+\t\t\t    __size = __p - __sb->gptr();\n+\t\t\t  __sb->gbump(__size);\n+\t\t\t  _M_gcount += __size;\n+\t\t\t  __c = __sb->sgetc();\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ++_M_gcount;\n+\t\t\t  __c = __sb->snextc();\n+\t\t\t}\n \t\t    }\n+\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t      && !traits_type::eq_int_type(__c, __eof)\n+\t\t      && !traits_type::eq_int_type(__c, __delim))\n+\t\t    _M_gcount = 0;\n \t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n+\t\t    break;\n \t\t}\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))"}]}