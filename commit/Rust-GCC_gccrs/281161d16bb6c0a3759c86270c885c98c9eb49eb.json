{"sha": "281161d16bb6c0a3759c86270c885c98c9eb49eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxMTYxZDE2YmI2YzBhMzc1OWM4NjI3MGM4ODVjOThjOWViNDllYg==", "commit": {"author": {"name": "Than McIntosh", "email": "thanm@google.com", "date": "2017-05-19T16:07:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-19T16:07:24Z"}, "message": "dwarf.c (free_line_header): Don't free dirs if dirs_count == 0.\n\n\t* dwarf.c (free_line_header): Don't free dirs if dirs_count == 0.\n\t(read_line_header): Don't allocate dirs if dirs_count == 0.\n\t* edtest.c: New file.\n\t* edtest2.c: New file.\n\t* Makefile.am (edtest_SOURCES, edtest_LDADD): Define.\n\t(check_PROGRAMS): Add edtest.\n\t(edtest2_build.c, gen_edtest2_build): New targets.\n\t* Makefile.in: Rebuild.\n\nFrom-SVN: r248295", "tree": {"sha": "2077ab38904da7c5abb663193b3992c093264c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2077ab38904da7c5abb663193b3992c093264c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/281161d16bb6c0a3759c86270c885c98c9eb49eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281161d16bb6c0a3759c86270c885c98c9eb49eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281161d16bb6c0a3759c86270c885c98c9eb49eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281161d16bb6c0a3759c86270c885c98c9eb49eb/comments", "author": {"login": "thanm", "id": 12280172, "node_id": "MDQ6VXNlcjEyMjgwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/12280172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanm", "html_url": "https://github.com/thanm", "followers_url": "https://api.github.com/users/thanm/followers", "following_url": "https://api.github.com/users/thanm/following{/other_user}", "gists_url": "https://api.github.com/users/thanm/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanm/subscriptions", "organizations_url": "https://api.github.com/users/thanm/orgs", "repos_url": "https://api.github.com/users/thanm/repos", "events_url": "https://api.github.com/users/thanm/events{/privacy}", "received_events_url": "https://api.github.com/users/thanm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51cd6b78eedaefec65059f7a8cbca1f2b9bf4878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51cd6b78eedaefec65059f7a8cbca1f2b9bf4878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51cd6b78eedaefec65059f7a8cbca1f2b9bf4878"}], "stats": {"total": 380, "additions": 365, "deletions": 15}, "files": [{"sha": "60a2f0f99dd9de4402e0b4ea13c1bf76d61e63bc", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -1,3 +1,14 @@\n+2017-05-19  Than McIntosh  <thanm@google.com>\n+\n+\t* dwarf.c (free_line_header): Don't free dirs if dirs_count == 0.\n+\t(read_line_header): Don't allocate dirs if dirs_count == 0.\n+\t* edtest.c: New file.\n+\t* edtest2.c: New file.\n+\t* Makefile.am (edtest_SOURCES, edtest_LDADD): Define.\n+\t(check_PROGRAMS): Add edtest.\n+\t(edtest2_build.c, gen_edtest2_build): New targets.\n+\t* Makefile.in: Rebuild.\n+\n 2017-03-08  Sam Thursfield  <sam.thursfield@codethink.co.uk>\n \n \t* btest.c (test5): Replace #ifdef guard with 'unused' attribute"}, {"sha": "0c6dac3df02d5302a11addd06f47ef71badbfa36", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -100,6 +100,17 @@ stest_LDADD = libbacktrace.la\n \n check_PROGRAMS += stest\n \n+edtest_SOURCES = edtest.c edtest2_build.c\n+edtest_LDADD = libbacktrace.la\n+\n+check_PROGRAMS += edtest\n+\n+edtest2_build.c: gen_edtest2_build; @true\n+gen_edtest2_build: $(srcdir)/edtest2.c\n+\tcat $(srcdir)/edtest2.c > tmp-edtest2_build.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-edtest2_build.c edtest2_build.c\n+\techo timestamp > $@\n+\n endif NATIVE\n \n # We can't use automake's automatic dependency tracking, because it"}, {"sha": "a66359e610620140bf953f722716bbe22b998eb8", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -16,7 +16,7 @@\n @SET_MAKE@\n \n # Makefile.am -- Backtrace Makefile.\n-# Copyright (C) 2012-2016 Free Software Foundation, Inc.\n+# Copyright (C) 2012-2017 Free Software Foundation, Inc.\n \n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions are\n@@ -84,7 +84,7 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n check_PROGRAMS = $(am__EXEEXT_1)\n-@NATIVE_TRUE@am__append_1 = btest stest\n+@NATIVE_TRUE@am__append_1 = btest stest edtest\n subdir = .\n DIST_COMMON = README ChangeLog $(srcdir)/Makefile.in \\\n \t$(srcdir)/Makefile.am $(top_srcdir)/configure \\\n@@ -113,13 +113,18 @@ am__DEPENDENCIES_1 =\n am_libbacktrace_la_OBJECTS = atomic.lo dwarf.lo fileline.lo posix.lo \\\n \tprint.lo sort.lo state.lo\n libbacktrace_la_OBJECTS = $(am_libbacktrace_la_OBJECTS)\n-@NATIVE_TRUE@am__EXEEXT_1 = btest$(EXEEXT) stest$(EXEEXT)\n+@NATIVE_TRUE@am__EXEEXT_1 = btest$(EXEEXT) stest$(EXEEXT) \\\n+@NATIVE_TRUE@\tedtest$(EXEEXT)\n @NATIVE_TRUE@am_btest_OBJECTS = btest-btest.$(OBJEXT)\n btest_OBJECTS = $(am_btest_OBJECTS)\n @NATIVE_TRUE@btest_DEPENDENCIES = libbacktrace.la\n btest_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CCLD) $(btest_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_edtest_OBJECTS = edtest.$(OBJEXT) \\\n+@NATIVE_TRUE@\tedtest2_build.$(OBJEXT)\n+edtest_OBJECTS = $(am_edtest_OBJECTS)\n+@NATIVE_TRUE@edtest_DEPENDENCIES = libbacktrace.la\n @NATIVE_TRUE@am_stest_OBJECTS = stest.$(OBJEXT)\n stest_OBJECTS = $(am_stest_OBJECTS)\n @NATIVE_TRUE@stest_DEPENDENCIES = libbacktrace.la\n@@ -136,7 +141,7 @@ LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n-\t$(btest_SOURCES) $(stest_SOURCES)\n+\t$(btest_SOURCES) $(edtest_SOURCES) $(stest_SOURCES)\n MULTISRCTOP = \n MULTIBUILDTOP = \n MULTIDIRS = \n@@ -330,6 +335,8 @@ TESTS = $(check_PROGRAMS)\n @NATIVE_TRUE@btest_LDADD = libbacktrace.la\n @NATIVE_TRUE@stest_SOURCES = stest.c\n @NATIVE_TRUE@stest_LDADD = libbacktrace.la\n+@NATIVE_TRUE@edtest_SOURCES = edtest.c edtest2_build.c\n+@NATIVE_TRUE@edtest_LDADD = libbacktrace.la\n \n # We can't use automake's automatic dependency tracking, because it\n # breaks when using bootstrap-lean.  Automatic dependency tracking\n@@ -422,6 +429,9 @@ clean-checkPROGRAMS:\n btest$(EXEEXT): $(btest_OBJECTS) $(btest_DEPENDENCIES) $(EXTRA_btest_DEPENDENCIES) \n \t@rm -f btest$(EXEEXT)\n \t$(btest_LINK) $(btest_OBJECTS) $(btest_LDADD) $(LIBS)\n+edtest$(EXEEXT): $(edtest_OBJECTS) $(edtest_DEPENDENCIES) $(EXTRA_edtest_DEPENDENCIES) \n+\t@rm -f edtest$(EXEEXT)\n+\t$(LINK) $(edtest_OBJECTS) $(edtest_LDADD) $(LIBS)\n stest$(EXEEXT): $(stest_OBJECTS) $(stest_DEPENDENCIES) $(EXTRA_stest_DEPENDENCIES) \n \t@rm -f stest$(EXEEXT)\n \t$(LINK) $(stest_OBJECTS) $(stest_LDADD) $(LIBS)\n@@ -745,6 +755,12 @@ uninstall-am:\n \tmostlyclean-multi pdf pdf-am ps ps-am tags uninstall \\\n \tuninstall-am\n \n+\n+@NATIVE_TRUE@edtest2_build.c: gen_edtest2_build; @true\n+@NATIVE_TRUE@gen_edtest2_build: $(srcdir)/edtest2.c\n+@NATIVE_TRUE@\tcat $(srcdir)/edtest2.c > tmp-edtest2_build.c\n+@NATIVE_TRUE@\t$(SHELL) $(srcdir)/../move-if-change tmp-edtest2_build.c edtest2_build.c\n+@NATIVE_TRUE@\techo timestamp > $@\n alloc.lo: config.h backtrace.h internal.h\n backtrace.lo: config.h backtrace.h internal.h\n btest.lo: (INCDIR)/filenames.h backtrace.h backtrace-supported.h"}, {"sha": "9a89735fdf0fd34ca447e674a1f9185de3ffe9b3", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -1563,16 +1563,15 @@ add_line (struct backtrace_state *state, struct dwarf_data *ddata,\n   return 1;\n }\n \n-/* Free the line header information.  If FREE_FILENAMES is true we\n-   free the file names themselves, otherwise we leave them, as there\n-   may be line structures pointing to them.  */\n+/* Free the line header information.  */\n \n static void\n free_line_header (struct backtrace_state *state, struct line_header *hdr,\n \t\t  backtrace_error_callback error_callback, void *data)\n {\n-  backtrace_free (state, hdr->dirs, hdr->dirs_count * sizeof (const char *),\n-\t\t  error_callback, data);\n+  if (hdr->dirs_count != 0)\n+    backtrace_free (state, hdr->dirs, hdr->dirs_count * sizeof (const char *),\n+\t\t    error_callback, data);\n   backtrace_free (state, hdr->filenames,\n \t\t  hdr->filenames_count * sizeof (char *),\n \t\t  error_callback, data);\n@@ -1633,12 +1632,16 @@ read_line_header (struct backtrace_state *state, struct unit *u,\n       ++hdr->dirs_count;\n     }\n \n-  hdr->dirs = ((const char **)\n-\t       backtrace_alloc (state,\n-\t\t\t\thdr->dirs_count * sizeof (const char *),\n-\t\t\t\tline_buf->error_callback, line_buf->data));\n-  if (hdr->dirs == NULL)\n-    return 0;\n+  hdr->dirs = NULL;\n+  if (hdr->dirs_count != 0)\n+    {\n+      hdr->dirs = ((const char **)\n+\t\t   backtrace_alloc (state,\n+\t\t\t\t    hdr->dirs_count * sizeof (const char *),\n+\t\t\t\t    line_buf->error_callback, line_buf->data));\n+      if (hdr->dirs == NULL)\n+\treturn 0;\n+    }\n \n   i = 0;\n   while (*hdr_buf.buf != '\\0')"}, {"sha": "daf4dd9f0be425429ee992a9bdd55be2d59d23b2", "filename": "libbacktrace/edtest.c", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fedtest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fedtest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fedtest.c?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -0,0 +1,266 @@\n+/* edtest.c -- Test for libbacktrace storage allocation stress handling\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+#include \"config.h\"\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys/types.h>\n+\n+#include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n+#include \"internal.h\"\n+\n+#if defined(__MSDOS__) || defined(_WIN32) || defined(__OS2__) || defined (__CYGWIN__)\n+# define IS_DIR_SEPARATOR(c) ((c) == '/' || (c) == '\\\\')\n+#else\n+# define IS_DIR_SEPARATOR(c) ((c) == '/')\n+#endif\n+\n+/* The backtrace state.  */\n+\n+static void *state;\n+\n+/* The number of failures.  */\n+\n+int failures = 0;\n+\n+static int test1 (void) __attribute__ ((noinline, unused));\n+static int test1 (void) __attribute__ ((noinline, unused));\n+extern int f2 (int);\n+extern int f3 (int, int);\n+\n+static int\n+test1 (void)\n+{\n+  /* Returning a value here and elsewhere avoids a tailcall which\n+     would mess up the backtrace.  */\n+  return f2 (__LINE__) + 1;\n+}\n+\n+/* Used to collect backtrace info.  */\n+\n+struct info\n+{\n+  char *filename;\n+  int lineno;\n+  char *function;\n+};\n+\n+/* Return the base name in a path.  */\n+\n+static const char *\n+base (const char *p)\n+{\n+  const char *last;\n+  const char *s;\n+\n+  last = NULL;\n+  for (s = p; *s != '\\0'; ++s)\n+    {\n+      if (IS_DIR_SEPARATOR (*s))\n+        last = s + 1;\n+    }\n+  return last != NULL ? last : p;\n+}\n+\n+/* Check an entry in a struct info array.  */\n+\n+static void\n+check (const char *name, int index, const struct info *all, int want_lineno,\n+       const char *want_function, const char *want_file, int *failed)\n+{\n+  if (*failed)\n+    return;\n+  if (all[index].filename == NULL || all[index].function == NULL)\n+    {\n+      fprintf (stderr, \"%s: [%d]: missing file name or function name\\n\",\n+               name, index);\n+      *failed = 1;\n+      return;\n+    }\n+  if (strcmp (base (all[index].filename), want_file) != 0)\n+    {\n+      fprintf (stderr, \"%s: [%d]: got %s expected %s\\n\", name, index,\n+               all[index].filename, want_file);\n+      *failed = 1;\n+    }\n+  if (all[index].lineno != want_lineno)\n+    {\n+      fprintf (stderr, \"%s: [%d]: got %d expected %d\\n\", name, index,\n+               all[index].lineno, want_lineno);\n+      *failed = 1;\n+    }\n+  if (strcmp (all[index].function, want_function) != 0)\n+    {\n+      fprintf (stderr, \"%s: [%d]: got %s expected %s\\n\", name, index,\n+               all[index].function, want_function);\n+      *failed = 1;\n+    }\n+}\n+\n+/* Passed to backtrace callback function.  */\n+\n+struct bdata\n+{\n+  struct info *all;\n+  size_t index;\n+  size_t max;\n+  int failed;\n+};\n+\n+/* An error callback passed to backtrace.  */\n+\n+static void\n+error_callback_one (void *vdata, const char *msg, int errnum)\n+{\n+  struct bdata *data = (struct bdata *) vdata;\n+\n+  fprintf (stderr, \"%s\", msg);\n+  if (errnum > 0)\n+    fprintf (stderr, \": %s\", strerror (errnum));\n+  fprintf (stderr, \"\\n\");\n+  data->failed = 1;\n+}\n+\n+/* The backtrace callback function.  */\n+\n+static int\n+callback_one (void *vdata, uintptr_t pc ATTRIBUTE_UNUSED,\n+              const char *filename, int lineno, const char *function)\n+{\n+  struct bdata *data = (struct bdata *) vdata;\n+  struct info *p;\n+\n+  if (data->index >= data->max)\n+    {\n+      fprintf (stderr, \"callback_one: callback called too many times\\n\");\n+      data->failed = 1;\n+      return 1;\n+    }\n+\n+  p = &data->all[data->index];\n+  if (filename == NULL)\n+    p->filename = NULL;\n+  else\n+    {\n+      p->filename = strdup (filename);\n+      assert (p->filename != NULL);\n+    }\n+  p->lineno = lineno;\n+  if (function == NULL)\n+    p->function = NULL;\n+  else\n+    {\n+      p->function = strdup (function);\n+      assert (p->function != NULL);\n+    }\n+  ++data->index;\n+\n+  return 0;\n+}\n+\n+int\n+f3 (int f1line, int f2line)\n+{\n+  struct info all[20];\n+  struct bdata data;\n+  int f3line;\n+  int i;\n+\n+  data.all = &all[0];\n+  data.index = 0;\n+  data.max = 20;\n+  data.failed = 0;\n+\n+  f3line = __LINE__ + 1;\n+  i = backtrace_full (state, 0, callback_one, error_callback_one, &data);\n+\n+  if (i != 0)\n+    {\n+      fprintf (stderr, \"test1: unexpected return value %d\\n\", i);\n+      data.failed = 1;\n+    }\n+\n+  if (data.index < 3)\n+    {\n+      fprintf (stderr,\n+               \"test1: not enough frames; got %zu, expected at least 3\\n\",\n+               data.index);\n+      data.failed = 1;\n+    }\n+\n+  check (\"test1\", 0, all, f3line, \"f3\", \"edtest.c\", &data.failed);\n+  check (\"test1\", 1, all, f2line, \"f2\", \"edtest2_build.c\", &data.failed);\n+  check (\"test1\", 2, all, f1line, \"test1\", \"edtest.c\", &data.failed);\n+\n+  printf (\"%s: backtrace_full alloc stress\\n\", data.failed ? \"FAIL\" : \"PASS\");\n+\n+  if (data.failed)\n+    ++failures;\n+\n+  return failures;\n+}\n+\n+static void\n+error_callback_create (void *data ATTRIBUTE_UNUSED, const char *msg,\n+                       int errnum)\n+{\n+  fprintf (stderr, \"%s\", msg);\n+  if (errnum > 0)\n+    fprintf (stderr, \": %s\", strerror (errnum));\n+  fprintf (stderr, \"\\n\");\n+  exit (EXIT_FAILURE);\n+}\n+\n+int\n+main (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)\n+{\n+  state = backtrace_create_state (argv[0], BACKTRACE_SUPPORTS_THREADS,\n+                                  error_callback_create, NULL);\n+\n+  // Grab the storage allocation lock prior to doing anything interesting.\n+  // The intent here is to insure that the backtrace_alloc code is forced\n+  // to always call mmap() for new memory as opposed to reusing previously\n+  // allocated memory from the free list. Doing things this way helps\n+  // simulate what you might see in a multithreaded program in which there\n+  // are racing calls to the allocator.\n+  struct backtrace_state *state_internal =\n+      (struct backtrace_state *) state;\n+  state_internal->lock_alloc = 1;\n+\n+  // Kick off the test\n+  test1();\n+\n+  exit (failures > 0 ? EXIT_FAILURE : EXIT_SUCCESS);\n+}"}, {"sha": "1ab78ee96120175efaf8c5fe89395243486f92e7", "filename": "libbacktrace/edtest2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fedtest2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281161d16bb6c0a3759c86270c885c98c9eb49eb/libbacktrace%2Fedtest2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fedtest2.c?ref=281161d16bb6c0a3759c86270c885c98c9eb49eb", "patch": "@@ -0,0 +1,43 @@\n+/* edtest2.c -- Test for libbacktrace storage allocation stress handling (p2)\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+/* This file intentionally written without any #include's\n+ */\n+\n+extern int f3(int, int);\n+extern int f2(int);\n+\n+int f2(int x)\n+{\n+  /* Returning a value here and elsewhere avoids a tailcall which\n+     would mess up the backtrace.  */\n+  return f3(x, __LINE__) + 3;\n+}"}]}