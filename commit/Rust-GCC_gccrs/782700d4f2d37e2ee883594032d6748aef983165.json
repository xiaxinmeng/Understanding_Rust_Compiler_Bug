{"sha": "782700d4f2d37e2ee883594032d6748aef983165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyNzAwZDRmMmQzN2UyZWU4ODM1OTQwMzJkNjc0OGFlZjk4MzE2NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-30T22:31:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-30T22:31:20Z"}, "message": "intrinsic_nearest.f90: Disable tests of nearest around zero.\n\n        * gfortran.fortran-torture/execute/intrinsic_nearest.f90: Disable\n        tests of nearest around zero.\n\nFrom-SVN: r85361", "tree": {"sha": "d3a0b4cebda946bffe4cc75ed2ed0e6ae4e99e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a0b4cebda946bffe4cc75ed2ed0e6ae4e99e58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/782700d4f2d37e2ee883594032d6748aef983165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782700d4f2d37e2ee883594032d6748aef983165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782700d4f2d37e2ee883594032d6748aef983165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782700d4f2d37e2ee883594032d6748aef983165/comments", "author": null, "committer": null, "parents": [{"sha": "d60bebdd5046c87886b6041caf405c9a63219d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60bebdd5046c87886b6041caf405c9a63219d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60bebdd5046c87886b6041caf405c9a63219d75"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "aaa540cc2bdc888aa338a5457f0bab1dabb62f51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782700d4f2d37e2ee883594032d6748aef983165/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782700d4f2d37e2ee883594032d6748aef983165/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=782700d4f2d37e2ee883594032d6748aef983165", "patch": "@@ -1,3 +1,8 @@\n+2004-07-30  Richard Henderson  <rth@redhat.com>\n+\n+        * gfortran.fortran-torture/execute/intrinsic_nearest.f90: Disable\n+        tests of nearest around zero.\n+\n 2004-07-30  Andrew Pinski  <apinski@apple.com>\n \n \t* gcc.c-torture/compile/20040730-1.c: New test."}, {"sha": "364a3ac345ee094ce7f24d75284e63c440dee181", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_nearest.f90", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782700d4f2d37e2ee883594032d6748aef983165/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_nearest.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782700d4f2d37e2ee883594032d6748aef983165/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_nearest.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_nearest.f90?ref=782700d4f2d37e2ee883594032d6748aef983165", "patch": "@@ -1,7 +1,7 @@\n !Program to test NEAREST intrinsic function.\n \n program test_nearest\n-  real s, r, x, y, inf, max, min\n+  real s, r, x, y, inf, max\n   integer i, infi, maxi\n   equivalence (s,i)\n   equivalence (inf,infi)\n@@ -25,19 +25,26 @@ program test_nearest\n   y = nearest(s, -r)\n   if (.not. (x .gt. s .and. y .lt. s )) call abort()\n \n+! ??? This is pretty sketchy, but passes on most targets.\n   infi = z'7f800000'\n   maxi = z'7f7fffff'\n-  min = tiny(1.0)\n \n   call test_up(max, inf)\n   call test_up(-inf, -max)\n-  call test_up(0, min)\n-  call test_up(-min, 0)\n-\n   call test_down(inf, max)\n   call test_down(-max, -inf)\n-  call test_down(0, -min)\n-  call test_down(min, 0)\n+\n+! ??? Here we require the F2003 IEEE_ARITHMETIC module to\n+! determine if denormals are supported.  If they are, then\n+! nearest(0,1) is the minimum denormal.  If they are not,\n+! then it's the minimum normalized number, TINY.  This fails\n+! much more often than the infinity test above, so it's\n+! disabled for now.\n+\n+! call test_up(0, min)\n+! call test_up(-min, 0)\n+! call test_down(0, -min)\n+! call test_down(min, 0)\n end\n \n subroutine test_up(s, e)"}]}