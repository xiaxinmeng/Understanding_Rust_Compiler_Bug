{"sha": "6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyN2ViZGJlODFjMTNkNjhjNGU1OTBhMDYwZmQxMmU2MTE4ZmViNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-20T15:31:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-20T15:31:07Z"}, "message": "alpha.h (HARD_REGNO_NREGS): Use CEIL macro.\n\n\t* config/alpha/alpha.h (HARD_REGNO_NREGS): Use CEIL macro.\n\t(ALPHA_ARG_SIZE): Ditto.  Remove unused NAMED argument.\n\t* config/alpha/alpha.c (alpha_function_arg_advance): Update\n\tALPHA_ARG_SIZE usage.\n\t(alpha_arg_partial_bytes): Ditto.\n\nFrom-SVN: r229084", "tree": {"sha": "f2a036aa6c5ddc9cea8214484bc779aa6de095b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a036aa6c5ddc9cea8214484bc779aa6de095b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/comments", "author": null, "committer": null, "parents": [{"sha": "fabb2a3def3f31878a3820e21d0630452c0d2f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabb2a3def3f31878a3820e21d0630452c0d2f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabb2a3def3f31878a3820e21d0630452c0d2f5b"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "1badb9bdceabaf3978a940c0463cc64e45081fa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "patch": "@@ -1,3 +1,11 @@\n+2015-10-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (HARD_REGNO_NREGS): Use CEIL macro.\n+\t(ALPHA_ARG_SIZE): Ditto.  Remove unused NAMED argument.\n+\t* config/alpha/alpha.c (alpha_function_arg_advance): Update\n+\tALPHA_ARG_SIZE usage.\n+\t(alpha_arg_partial_bytes): Ditto.\n+\n 2015-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66810\n@@ -169,7 +177,7 @@\n \t(autopref_multipass_init): Use it.  Handle PARALLEL sets.\n \t(autopref_rank_data): New function.\n \t(autopref_rank_for_schedule): Use it.\n-\t(autopref_multipass_dfa_lookahead_guard_1): Likewise. \n+\t(autopref_multipass_dfa_lookahead_guard_1): Likewise.\n \n 2015-10-18  Mikhail Maltsev  <maltsevm@gmail.com>\n \n@@ -179,7 +187,7 @@\n 2015-10-18  Iain Sandoe  <iain@codesourcery.com>\n \n \t* config/darwin.h (TARGET_SYSTEM_ROOT): Remove this from here,\n-\t(HAVE_LD_SYSROOT): New.  (SYSROOT_SPEC): New. \n+\t(HAVE_LD_SYSROOT): New.  (SYSROOT_SPEC): New.\n \t(LINK_SYSROOT_SPEC): Revise to remove the default for target sysroot.\n \t(STANDARD_STARTFILE_PREFIX_1): New.\n \t(STANDARD_STARTFILE_PREFIX_2): New.\n@@ -329,16 +337,17 @@\n \n 2015-10-16  Christian Bruel  <christian.bruel@st.com>\n \n- \tPR target/67745\n- \t* config/arm/arm.h (FUNCTION_BOUNDARY): Use FUNCTION_BOUNDARY_P.\n- \t(FUNCTION_BOUNDARY_P): New macro:\n- \t* config/arm/arm.c (TARGET_RELAYOUT_FUNCTION, arm_relayout_function): \n- \tNew hook.\n- \t* doc/tm.texi.in (TARGET_RELAYOUT_FUNCTION): Document.\n- \t* doc/tm.texi (TARGET_RELAYOUT_FUNCTION): New hook.\n- \t* gcc/target.def (TARGET_RELAYOUT_FUNCTION): Likewise.\n- \t* gcc/function.c (allocate_struct_function): Call relayout_function hook.\n- \t* gcc/passes.c (rest_of_decl_compilation): Likewise.\n+\tPR target/67745\n+\t* config/arm/arm.h (FUNCTION_BOUNDARY): Use FUNCTION_BOUNDARY_P.\n+\t(FUNCTION_BOUNDARY_P): New macro:\n+\t* config/arm/arm.c (TARGET_RELAYOUT_FUNCTION, arm_relayout_function):\n+\tNew hook.\n+\t* doc/tm.texi.in (TARGET_RELAYOUT_FUNCTION): Document.\n+\t* doc/tm.texi (TARGET_RELAYOUT_FUNCTION): New hook.\n+\t* gcc/target.def (TARGET_RELAYOUT_FUNCTION): Likewise.\n+\t* gcc/function.c (allocate_struct_function): Call\n+\trelayout_function hook.\n+\t* gcc/passes.c (rest_of_decl_compilation): Likewise.\n \n 2015-10-16  Christian Bruel  <christian.bruel@st.com>\n \n@@ -369,8 +378,7 @@\n \t(gimple_fold_builtin_stxcpy_chk): Likewise.\n \t(rewrite_to_defined_overflow): Likewise.\n \t(gimple_convert_to_ptrofftype): New function.\n-\t* gimple-fold.h (gimple_convert_to_ptrofftype): New overload,\n-\tdeclare.\n+\t* gimple-fold.h (gimple_convert_to_ptrofftype): New overload, declare.\n \n 2015-10-16  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "d22bf67e52b568770bce819e083c322e22ca4b2d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "patch": "@@ -5613,7 +5613,7 @@ alpha_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   bool onstack = targetm.calls.must_pass_in_stack (mode, type);\n-  int increment = onstack ? 6 : ALPHA_ARG_SIZE (mode, type, named);\n+  int increment = onstack ? 6 : ALPHA_ARG_SIZE (mode, type);\n \n #if TARGET_ABI_OSF\n   *cum += increment;\n@@ -5635,10 +5635,10 @@ alpha_arg_partial_bytes (cumulative_args_t cum_v,\n \n #if TARGET_ABI_OPEN_VMS\n   if (cum->num_args < 6\n-      && 6 < cum->num_args + ALPHA_ARG_SIZE (mode, type, named))\n+      && 6 < cum->num_args + ALPHA_ARG_SIZE (mode, type))\n     words = 6 - cum->num_args;\n #elif TARGET_ABI_OSF\n-  if (*cum < 6 && 6 < *cum + ALPHA_ARG_SIZE (mode, type, named))\n+  if (*cum < 6 && 6 < *cum + ALPHA_ARG_SIZE (mode, type))\n     words = 6 - *cum;\n #else\n #error Unhandled ABI"}, {"sha": "97f5680a8c20d1276c27e431a0e05c3eb8429e6b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c27ebdbe81c13d68c4e590a060fd12e6118feb5/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=6c27ebdbe81c13d68c4e590a060fd12e6118feb5", "patch": "@@ -383,7 +383,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n    but can be less for certain modes in special long registers.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n-  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+  CEIL (GET_MODE_SIZE (MODE), UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On Alpha, the integer registers can hold any mode.  The floating-point\n@@ -674,13 +674,15 @@ extern int alpha_memory_latency;\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   (CUM) = 0\n \n-/* Define intermediate macro to compute the size (in registers) of an argument\n-   for the Alpha.  */\n+/* Define intermediate macro to compute\n+   the size (in registers) of an argument.  */\n \n-#define ALPHA_ARG_SIZE(MODE, TYPE, NAMED)\t\t\t\t\\\n+#define ALPHA_ARG_SIZE(MODE, TYPE)\t\t\t\t\t\\\n   ((MODE) == TFmode || (MODE) == TCmode ? 1\t\t\t\t\\\n-   : (((MODE) == BLKmode ? int_size_in_bytes (TYPE) : GET_MODE_SIZE (MODE)) \\\n-      + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD)\n+   : CEIL (((MODE) == BLKmode\t\t\t\t\t\t\\\n+\t    ? int_size_in_bytes (TYPE)\t\t\t\t\t\\\n+\t    : GET_MODE_SIZE (MODE)),\t\t\t\t\t\\\n+\t   UNITS_PER_WORD))\n \n /* Make (or fake) .linkage entry for function call.\n    IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */"}]}