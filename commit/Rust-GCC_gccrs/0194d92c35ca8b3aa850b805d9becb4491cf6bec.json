{"sha": "0194d92c35ca8b3aa850b805d9becb4491cf6bec", "node_id": "C_kwDOANBUbNoAKDAxOTRkOTJjMzVjYThiM2FhODUwYjgwNWQ5YmVjYjQ0OTFjZjZiZWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-30T13:08:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-30T14:01:25Z"}, "message": "tree-optimization/103489 - fix ICE when bool pattern recog fails\n\nbool pattern recog currently does not handle cycles correctly\nand when it fails we can ICE later vectorizing PHIs with\nmismatched bool and non-bool vector types.  The following avoids\nblindly trusting bool pattern recog here and verifies things\nmore thoroughly in vectorizable_phi.  A bool pattern recog fix\nis for GCC 13.\n\n2021-11-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103489\n\t* tree-vect-loop.c (vectorizable_phi): Verify argument\n\tvector type compatibility to mitigate bool pattern recog\n\tbug.\n\n\t* gcc.dg/torture/pr103489.c: New testcase.", "tree": {"sha": "a4009cca2cc467eb5bbe664febb8e261b4d8c0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4009cca2cc467eb5bbe664febb8e261b4d8c0d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0194d92c35ca8b3aa850b805d9becb4491cf6bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0194d92c35ca8b3aa850b805d9becb4491cf6bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0194d92c35ca8b3aa850b805d9becb4491cf6bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0194d92c35ca8b3aa850b805d9becb4491cf6bec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e846b0f13b8a111484eb3a330044726b9d7ad79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e846b0f13b8a111484eb3a330044726b9d7ad79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e846b0f13b8a111484eb3a330044726b9d7ad79"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "cd62623ece2f7af861cb7affdd6300f6ad181793", "filename": "gcc/testsuite/gcc.dg/torture/pr103489.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0194d92c35ca8b3aa850b805d9becb4491cf6bec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103489.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0194d92c35ca8b3aa850b805d9becb4491cf6bec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103489.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103489.c?ref=0194d92c35ca8b3aa850b805d9becb4491cf6bec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+_Bool a[80];\n+short b, f;\n+void g(short h[][8][16])\n+{\n+  for (_Bool c = 0; c < b;)\n+    for (_Bool d = 0; d < (_Bool)f; d = 1)\n+      for (short e = 0; e < 16; e++)\n+        a[e] = h[b][1][e];\n+}"}, {"sha": "7f544ba1fd5198dd32cda05e62382ab2e1e9bb50", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0194d92c35ca8b3aa850b805d9becb4491cf6bec/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0194d92c35ca8b3aa850b805d9becb4491cf6bec/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0194d92c35ca8b3aa850b805d9becb4491cf6bec", "patch": "@@ -7846,6 +7846,24 @@ vectorizable_phi (vec_info *,\n \t\t\t       \"incompatible vector types for invariants\\n\");\n \t    return false;\n \t  }\n+\telse if (SLP_TREE_DEF_TYPE (child) == vect_internal_def\n+\t\t && !useless_type_conversion_p (vectype,\n+\t\t\t\t\t\tSLP_TREE_VECTYPE (child)))\n+\t  {\n+\t    /* With bools we can have mask and non-mask precision vectors,\n+\t       while pattern recog is supposed to guarantee consistency here\n+\t       bugs in it can cause mismatches (PR103489 for example).\n+\t       Deal with them here instead of ICEing later.  */\n+\t    if (dump_enabled_p ())\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t       \"incompatible vector type setup from \"\n+\t\t\t       \"bool pattern detection\\n\");\n+\t    gcc_checking_assert\n+\t      (VECTOR_BOOLEAN_TYPE_P (SLP_TREE_VECTYPE (child))\n+\t       != VECTOR_BOOLEAN_TYPE_P (vectype));\n+\t    return false;\n+\t  }\n+\n       /* For single-argument PHIs assume coalescing which means zero cost\n \t for the scalar and the vector PHIs.  This avoids artificially\n \t favoring the vector path (but may pessimize it in some cases).  */"}]}