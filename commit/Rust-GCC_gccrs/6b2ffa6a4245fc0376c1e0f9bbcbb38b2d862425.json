{"sha": "6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyZmZhNmE0MjQ1ZmMwMzc2YzFlMGY5YmJjYmIzOGIyZDg2MjQyNQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-08-21T08:16:19Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2018-08-21T08:16:19Z"}, "message": "gimple-ssa-sprintf.c (decl_constant_value): Remove.\n\n2018-08-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gimple-ssa-sprintf.c (decl_constant_value): Remove.\n        (get_format_string): Refer to c_getstr.\n\nFrom-SVN: r263688", "tree": {"sha": "6082a5daeb4005b612088630b142794a5ca5c0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6082a5daeb4005b612088630b142794a5ca5c0d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd9eb2979c1d01c2bea341e5faf1a682c104ff4"}], "stats": {"total": 144, "additions": 6, "deletions": 138}, "files": [{"sha": "38fcea919c42c7327d46056e337bc5cfad4f79a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "patch": "@@ -1,3 +1,8 @@\n+2018-08-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gimple-ssa-sprintf.c (decl_constant_value): Remove.\n+\t(get_format_string): Refer to c_getstr.\n+\n 2018-08-21  Tom de Vries  <tdevries@suse.de>\n \n \t* cgraph.h (debuginfo_early_init, debuginfo_init, debuginfo_fini)"}, {"sha": "91e21af209370e36009016c8e5970eac48c3fa80", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 1, "deletions": 138, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=6b2ffa6a4245fc0376c1e0f9bbcbb38b2d862425", "patch": "@@ -443,152 +443,15 @@ target_strtol10 (const char **ps, const char **erange)\n   return val;\n }\n \n-/* Return the constant initial value of DECL if available or DECL\n-   otherwise.  Same as the synonymous function in c/c-typeck.c.  */\n-\n-static tree\n-decl_constant_value (tree decl)\n-{\n-  if (/* Don't change a variable array bound or initial value to a constant\n-\t in a place where a variable is invalid.  Note that DECL_INITIAL\n-\t isn't valid for a PARM_DECL.  */\n-      current_function_decl != 0\n-      && TREE_CODE (decl) != PARM_DECL\n-      && !TREE_THIS_VOLATILE (decl)\n-      && TREE_READONLY (decl)\n-      && DECL_INITIAL (decl) != 0\n-      && TREE_CODE (DECL_INITIAL (decl)) != ERROR_MARK\n-      /* This is invalid if initial value is not constant.\n-\t If it has either a function call, a memory reference,\n-\t or a variable, then re-evaluating it could give different results.  */\n-      && TREE_CONSTANT (DECL_INITIAL (decl))\n-      /* Check for cases where this is sub-optimal, even though valid.  */\n-      && TREE_CODE (DECL_INITIAL (decl)) != CONSTRUCTOR)\n-    return DECL_INITIAL (decl);\n-  return decl;\n-}\n-\n /* Given FORMAT, set *PLOC to the source location of the format string\n    and return the format string if it is known or null otherwise.  */\n \n static const char*\n get_format_string (tree format, location_t *ploc)\n {\n-  if (VAR_P (format))\n-    {\n-      /* Pull out a constant value if the front end didn't.  */\n-      format = decl_constant_value (format);\n-      STRIP_NOPS (format);\n-    }\n-\n-  if (integer_zerop (format))\n-    {\n-      /* FIXME: Diagnose null format string if it hasn't been diagnosed\n-\t by -Wformat (the latter diagnoses only nul pointer constants,\n-\t this pass can do better).  */\n-      return NULL;\n-    }\n-\n-  HOST_WIDE_INT offset = 0;\n-\n-  if (TREE_CODE (format) == POINTER_PLUS_EXPR)\n-    {\n-      tree arg0 = TREE_OPERAND (format, 0);\n-      tree arg1 = TREE_OPERAND (format, 1);\n-      STRIP_NOPS (arg0);\n-      STRIP_NOPS (arg1);\n-\n-      if (TREE_CODE (arg1) != INTEGER_CST)\n-\treturn NULL;\n-\n-      format = arg0;\n-\n-      /* POINTER_PLUS_EXPR offsets are to be interpreted signed.  */\n-      if (!cst_and_fits_in_hwi (arg1))\n-\treturn NULL;\n-\n-      offset = int_cst_value (arg1);\n-    }\n-\n-  if (TREE_CODE (format) != ADDR_EXPR)\n-    return NULL;\n-\n   *ploc = EXPR_LOC_OR_LOC (format, input_location);\n \n-  format = TREE_OPERAND (format, 0);\n-\n-  if (TREE_CODE (format) == ARRAY_REF\n-      && tree_fits_shwi_p (TREE_OPERAND (format, 1))\n-      && (offset += tree_to_shwi (TREE_OPERAND (format, 1))) >= 0)\n-    format = TREE_OPERAND (format, 0);\n-\n-  if (offset < 0)\n-    return NULL;\n-\n-  tree array_init;\n-  tree array_size = NULL_TREE;\n-\n-  if (VAR_P (format)\n-      && TREE_CODE (TREE_TYPE (format)) == ARRAY_TYPE\n-      && (array_init = decl_constant_value (format)) != format\n-      && TREE_CODE (array_init) == STRING_CST)\n-    {\n-      /* Extract the string constant initializer.  Note that this may\n-\t include a trailing NUL character that is not in the array (e.g.\n-\t const char a[3] = \"foo\";).  */\n-      array_size = DECL_SIZE_UNIT (format);\n-      format = array_init;\n-    }\n-\n-  if (TREE_CODE (format) != STRING_CST)\n-    return NULL;\n-\n-  tree type = TREE_TYPE (format);\n-\n-  scalar_int_mode char_mode;\n-  if (!is_int_mode (TYPE_MODE (TREE_TYPE (type)), &char_mode)\n-      || GET_MODE_SIZE (char_mode) != 1)\n-    {\n-      /* Wide format string.  */\n-      return NULL;\n-    }\n-\n-  const char *fmtstr = TREE_STRING_POINTER (format);\n-  unsigned fmtlen = TREE_STRING_LENGTH (format);\n-\n-  if (array_size)\n-    {\n-      /* Variable length arrays can't be initialized.  */\n-      gcc_assert (TREE_CODE (array_size) == INTEGER_CST);\n-\n-      if (tree_fits_shwi_p (array_size))\n-\t{\n-\t  HOST_WIDE_INT array_size_value = tree_to_shwi (array_size);\n-\t  if (array_size_value > 0\n-\t      && array_size_value == (int) array_size_value\n-\t      && fmtlen > array_size_value)\n-\t    fmtlen = array_size_value;\n-\t}\n-    }\n-  if (offset)\n-    {\n-      if (offset >= fmtlen)\n-\treturn NULL;\n-\n-      fmtstr += offset;\n-      fmtlen -= offset;\n-    }\n-\n-  if (fmtlen < 1 || fmtstr[--fmtlen] != 0)\n-    {\n-      /* FIXME: Diagnose an unterminated format string if it hasn't been\n-\t diagnosed by -Wformat.  Similarly to a null format pointer,\n-\t -Wformay diagnoses only nul pointer constants, this pass can\n-\t do better).  */\n-      return NULL;\n-    }\n-\n-  return fmtstr;\n+  return c_getstr (format);\n }\n \n /* For convenience and brevity, shorter named entrypoints of"}]}