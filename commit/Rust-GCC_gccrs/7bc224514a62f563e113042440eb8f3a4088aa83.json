{"sha": "7bc224514a62f563e113042440eb8f3a4088aa83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjMjI0NTE0YTYyZjU2M2UxMTMwNDI0NDBlYjhmM2E0MDg4YWE4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-08-21T11:32:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-08-21T11:32:16Z"}, "message": "mips.h (MUST_PASS_IN_STACK): Remove BLKmode clause.\n\n\t* config/mips/mips.h (MUST_PASS_IN_STACK): Remove BLKmode clause.\n\t* config/mips/mips.c (function_arg_pass_by_reference): Never return\n\ttrue for n32 & n64.\n\nFrom-SVN: r70641", "tree": {"sha": "bae7fd9f78c20806d0862bb45495c865cbac95a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bae7fd9f78c20806d0862bb45495c865cbac95a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bc224514a62f563e113042440eb8f3a4088aa83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc224514a62f563e113042440eb8f3a4088aa83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc224514a62f563e113042440eb8f3a4088aa83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc224514a62f563e113042440eb8f3a4088aa83/comments", "author": null, "committer": null, "parents": [{"sha": "35c18a2035bc75f7b5dc68f5385986426b5308eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c18a2035bc75f7b5dc68f5385986426b5308eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c18a2035bc75f7b5dc68f5385986426b5308eb"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "0537af7b419fd39faceba2a018986b5d6a4a594c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bc224514a62f563e113042440eb8f3a4088aa83", "patch": "@@ -1,3 +1,9 @@\n+2003-08-21  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (MUST_PASS_IN_STACK): Remove BLKmode clause.\n+\t* config/mips/mips.c (function_arg_pass_by_reference): Never return\n+\ttrue for n32 & n64.\n+\n 2003-08-21  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* fold-const.c (fold): Fix bug in (A & C) == D where D & ~C != 0"}, {"sha": "719c6c89806b72e068a0cbcbe5351eb9b945d03f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7bc224514a62f563e113042440eb8f3a4088aa83", "patch": "@@ -7657,29 +7657,13 @@ mips_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n    nonzero when an argument must be passed by reference.  */\n \n int\n-function_arg_pass_by_reference (const CUMULATIVE_ARGS *cum,\n+function_arg_pass_by_reference (const CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t\t\tenum machine_mode mode, tree type,\n \t\t\t\tint named ATTRIBUTE_UNUSED)\n {\n   int size;\n \n-  if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n-    return 0;\n-\n-  /* We must pass by reference if we would be both passing in registers\n-     and the stack.  This is because any subsequent partial arg would be\n-     handled incorrectly in this case.\n-\n-     ??? This is really a kludge.  We should either fix GCC so that such\n-     a situation causes an abort and then do something in the MIPS port\n-     to prevent it, or add code to function.c to properly handle the case.  */\n-  /* ??? cum can be NULL when called from mips_va_arg.  The problem handled\n-     here hopefully is not relevant to mips_va_arg.  */\n-  if (cum && MUST_PASS_IN_STACK (mode, type)\n-      && FUNCTION_ARG (*cum, mode, type, named) != 0)\n-    return 1;\n-\n-  /* Otherwise, we only do this if EABI is selected.  */\n+  /* The EABI is the only one to pass args by reference.  */\n   if (mips_abi != ABI_EABI)\n     return 0;\n "}, {"sha": "27a4a03eeb4707fffaba32d5f4ae03b11923e41f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc224514a62f563e113042440eb8f3a4088aa83/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7bc224514a62f563e113042440eb8f3a4088aa83", "patch": "@@ -2372,18 +2372,13 @@ typedef struct mips_args {\n   (mips_abi == ABI_EABI && (NAMED)\t\t\t\t\t\\\n    && FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED))\n \n-/* Modified version of the macro in expr.h.  */\n+/* Modified version of the macro in expr.h.  Only return true if\n+   the type has a variable size or if the front end requires it\n+   to be passed by reference.  */\n #define MUST_PASS_IN_STACK(MODE,TYPE)\t\t\t\\\n   ((TYPE) != 0\t\t\t\t\t\t\\\n    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n-       || TREE_ADDRESSABLE (TYPE)\t\t\t\\\n-       || ((MODE) == BLKmode \t\t\t\t\\\n-\t   && mips_abi != ABI_32 && mips_abi != ABI_O64 \\\n-\t   && ! ((TYPE) != 0 && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST \\\n-\t\t && 0 == (int_size_in_bytes (TYPE)\t\\\n-\t\t\t  % (PARM_BOUNDARY / BITS_PER_UNIT))) \\\n-\t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n-\t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n+       || TREE_ADDRESSABLE (TYPE)))\n \n /* True if using EABI and varargs can be passed in floating-point\n    registers.  Under these conditions, we need a more complex form"}]}