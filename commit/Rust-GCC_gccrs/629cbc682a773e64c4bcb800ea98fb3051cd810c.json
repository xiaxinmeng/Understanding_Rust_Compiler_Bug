{"sha": "629cbc682a773e64c4bcb800ea98fb3051cd810c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5Y2JjNjgyYTc3M2U2NGM0YmNiODAwZWE5OGZiMzA1MWNkODEwYw==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-18T22:02:16Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-18T22:05:08Z"}, "message": "[committed] More useless code elimination on the H8\n\ngcc/\n\t* config/h8300/h8300.c (h8300_select_cc_mode): Handle SYMBOL_REF.\n\t* config/h8300/logical.md (<code><mode>3 logcial expander): Generate\n\tmore efficient code when the source can be trivially simplified.", "tree": {"sha": "b145dba0ab7ef721f493039b8404df71bcbd023f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b145dba0ab7ef721f493039b8404df71bcbd023f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/629cbc682a773e64c4bcb800ea98fb3051cd810c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629cbc682a773e64c4bcb800ea98fb3051cd810c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629cbc682a773e64c4bcb800ea98fb3051cd810c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629cbc682a773e64c4bcb800ea98fb3051cd810c/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb448ade74da1de1633e6ed97f8c5ecbac24b27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb448ade74da1de1633e6ed97f8c5ecbac24b27a"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "2b88325d2f751e03b9eca0e85fea47a7586fcf91", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629cbc682a773e64c4bcb800ea98fb3051cd810c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629cbc682a773e64c4bcb800ea98fb3051cd810c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=629cbc682a773e64c4bcb800ea98fb3051cd810c", "patch": "@@ -1950,7 +1950,7 @@ h8300_select_cc_mode (enum rtx_code cond, rtx op0, rtx op1)\n           || GET_CODE (op0) == NEG || GET_CODE (op0) == AND\n           || GET_CODE (op0) == IOR || GET_CODE (op0) == XOR\n           || GET_CODE (op0) == NOT || GET_CODE (op0) == ASHIFT\n-\t  || GET_CODE (op0) == MULT\n+\t  || GET_CODE (op0) == MULT || GET_CODE (op0) == SYMBOL_REF\n \t  || GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND\n \t  || REG_P (op0) || MEM_P (op0)))\n     return CCZNmode;"}, {"sha": "07d36cf0ef4b7086bee3ce3fed0a2d8c3f5448ad", "filename": "gcc/config/h8300/logical.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629cbc682a773e64c4bcb800ea98fb3051cd810c/gcc%2Fconfig%2Fh8300%2Flogical.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629cbc682a773e64c4bcb800ea98fb3051cd810c/gcc%2Fconfig%2Fh8300%2Flogical.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flogical.md?ref=629cbc682a773e64c4bcb800ea98fb3051cd810c", "patch": "@@ -4,7 +4,27 @@\n \t(logicals:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n \t\t       (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n   \"\"\n-  \"\")\n+  \"\n+  {\n+    enum machine_mode mode = GET_MODE (operands[0]);\n+    /* DImodes are not considered tieable, as a result operations involving\n+       subregs of DImode objects are considered expensive which can prevent\n+       CSE from doing obvious simplifications.\n+\n+       We may ultimately change what is tieable, but this is an immediate\n+       workaround while we evaluate changes to tieable modes.\n+\n+       The key in terms of what we want to handle is then the result of\n+       the operation is not a constant.  */\n+    if ((<CODE> == AND && operands[2] == CONSTM1_RTX (mode))\n+\t|| (<CODE> == IOR && operands[2] == CONST0_RTX (mode))\n+\t|| (<CODE> == XOR && operands[2] == CONST0_RTX (mode))\n+\t|| ((<CODE> == AND || <CODE> == IOR) && operands[1] == operands[2]))\n+      {\n+\temit_move_insn (operands[0], operands[1]);\n+\tDONE;\n+      }\n+  }\")\n \n ;; There's a ton of cleanup to do from here below.\n ;; ----------------------------------------------------------------------"}]}