{"sha": "e103542bc8606e7b5033631e33bdfb9e29191b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwMzU0MmJjODYwNmU3YjUwMzM2MzFlMzNiZGZiOWUyOTE5MWIyNA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-09T22:52:36Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-09T22:52:36Z"}, "message": "[PR92840] [OpenACC] Refuse 'acc_unmap_data' unless mapped by 'acc_map_data'\n\n\tlibgomp/\n\tPR libgomp/92840\n\t* oacc-mem.c (acc_map_data): Clarify reference counting behavior.\n\t(acc_unmap_data): Add error case for 'REFCOUNT_INFINITY'.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-1.c:\n\tNew file.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/clauses-1.c: Adjust.\n\t* testsuite/libgomp.oacc-c-c++-common/nested-1.c: Adjust.\n\nFrom-SVN: r279145", "tree": {"sha": "2f4ee534dbefc291c0850e7ef69e927f05801dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f4ee534dbefc291c0850e7ef69e927f05801dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e103542bc8606e7b5033631e33bdfb9e29191b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e103542bc8606e7b5033631e33bdfb9e29191b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e103542bc8606e7b5033631e33bdfb9e29191b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e103542bc8606e7b5033631e33bdfb9e29191b24/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49070d06708a8d8ae3af767f89ac40c4c12dca7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49070d06708a8d8ae3af767f89ac40c4c12dca7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49070d06708a8d8ae3af767f89ac40c4c12dca7b"}], "stats": {"total": 143, "additions": 126, "deletions": 17}, "files": [{"sha": "7606f17825dfb5a743e4ca1da9a3afa0ee113796", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -1,5 +1,17 @@\n 2019-12-09  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/92840\n+\t* oacc-mem.c (acc_map_data): Clarify reference counting behavior.\n+\t(acc_unmap_data): Add error case for 'REFCOUNT_INFINITY'.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-1.c:\n+\tNew file.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/clauses-1.c: Adjust.\n+\t* testsuite/libgomp.oacc-c-c++-common/nested-1.c: Adjust.\n+\n \tPR libgomp/92511\n \t* testsuite/libgomp.oacc-c-c++-common/copyin-devptr-1.c: Remove\n \tthis file..."}, {"sha": "480b9fbb71bf2c4d9724480629d06de134def53b", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -407,7 +407,11 @@ acc_map_data (void *h, void *d, size_t s)\n \n       tgt = gomp_map_vars (acc_dev, mapnum, &hostaddrs, &devaddrs, &sizes,\n \t\t\t   &kinds, true, GOMP_MAP_VARS_OPENACC);\n-      tgt->list[0].key->refcount = REFCOUNT_INFINITY;\n+      splay_tree_key n = tgt->list[0].key;\n+      assert (n->refcount == 1);\n+      assert (n->dynamic_refcount == 0);\n+      /* Special reference counting behavior.  */\n+      n->refcount = REFCOUNT_INFINITY;\n \n       if (profiling_p)\n \t{\n@@ -459,6 +463,18 @@ acc_unmap_data (void *h)\n       gomp_fatal (\"[%p,%d] surrounds %p\",\n \t\t  (void *) n->host_start, (int) host_size, (void *) h);\n     }\n+  /* TODO This currently doesn't catch 'REFCOUNT_INFINITY' usage different from\n+     'acc_map_data'.  Maybe 'dynamic_refcount' can be used for disambiguating\n+     the different 'REFCOUNT_INFINITY' cases, or simply separate\n+     'REFCOUNT_INFINITY' values per different usage ('REFCOUNT_ACC_MAP_DATA'\n+     etc.)?  */\n+  else if (n->refcount != REFCOUNT_INFINITY)\n+    {\n+      gomp_mutex_unlock (&acc_dev->lock);\n+      gomp_fatal (\"refusing to unmap block [%p,+%d] that has not been mapped\"\n+\t\t  \" by 'acc_map_data'\",\n+\t\t  (void *) h, (int) host_size);\n+    }\n \n   /* Mark for removal.  */\n   n->refcount = 1;"}, {"sha": "d7ae59dd548c1d7143a79f332aacd1880e69cdbf", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-1.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -0,0 +1,27 @@\n+/* Verify that we refuse 'acc_unmap_data', after 'acc_create'.  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 101;\n+\n+  char *h = (char *) malloc (N);\n+  void *d = acc_create (h, N - 3);\n+  if (!d)\n+    abort ();\n+\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_unmap_data (h);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"refusing to unmap block \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+98\\\\\\] that has not been mapped by 'acc_map_data'\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "751e6ebc33ff20c9001dc7baa5baf9028a9a39cc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-2.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that we refuse 'acc_unmap_data', after '#pragma acc enter data create'.  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 101;\n+\n+  char *h = (char *) malloc (N);\n+#pragma acc enter data create (h[0:N - 77])\n+\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+  acc_unmap_data (h);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"refusing to unmap block \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+24\\\\\\] that has not been mapped by 'acc_map_data'\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "915a2705ea9f4143cb48997e9b8764875e7913e5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_unmap_data-pr92840-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_unmap_data-pr92840-3.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that we refuse 'acc_unmap_data', inside 'data'.  */\n+\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  const int N = 101;\n+\n+  char *h = (char *) malloc (N);\n+#pragma acc data create (h[0:N - 55])\n+  {\n+    fprintf (stderr, \"CheCKpOInT\\n\");\n+    acc_unmap_data (h);\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"refusing to unmap block \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+46\\\\\\] that has not been mapped by 'acc_map_data'\" } */\n+/* { dg-shouldfail \"\" } */"}, {"sha": "d36a2f1c3041690dfa7946083d643e8244ccf447", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/clauses-1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fclauses-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fclauses-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fclauses-1.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -266,13 +266,15 @@ main (int argc, char **argv)\n     if (!acc_is_present (&b[0], (N * sizeof (float))))\n       abort ();\n \n-    d = (float *) acc_deviceptr (&a[0]);\n-    acc_unmap_data (&a[0]);\n-    acc_free (d);\n+    acc_delete (&a[0], N * sizeof (float));\n \n-    d = (float *) acc_deviceptr (&b[0]);\n-    acc_unmap_data (&b[0]);\n-    acc_free (d);\n+    if (acc_is_present (&a[0], N * sizeof (float)))\n+      abort ();\n+\n+    acc_delete (&b[0], N * sizeof (float));\n+\n+    if (acc_is_present (&b[0], N * sizeof (float)))\n+      abort ();\n \n     for (i = 0; i < N; i++)\n     {\n@@ -475,11 +477,10 @@ main (int argc, char **argv)\n             abort ();\n     }\n \n-    d = (float *) acc_deviceptr (a);\n-\n-    acc_unmap_data (a);\n+    acc_delete (a, N * sizeof (float));\n \n-    acc_free (d);\n+    if (acc_is_present (a, N * sizeof (float)))\n+      abort ();\n \n     d = (float *) acc_deviceptr (c);\n "}, {"sha": "7ebfb8a562b791df4fd3140b50f16d5dae814927", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/nested-1.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fnested-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e103542bc8606e7b5033631e33bdfb9e29191b24/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fnested-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fnested-1.c?ref=e103542bc8606e7b5033631e33bdfb9e29191b24", "patch": "@@ -290,13 +290,15 @@ main (int argc, char **argv)\n     if (!acc_is_present (&b[0], (N * sizeof (float))))\n       abort ();\n \n-    d = (float *) acc_deviceptr (&a[0]);\n-    acc_unmap_data (&a[0]);\n-    acc_free (d);\n+    acc_delete (&a[0], N * sizeof (float));\n \n-    d = (float *) acc_deviceptr (&b[0]);\n-    acc_unmap_data (&b[0]);\n-    acc_free (d);\n+    if (acc_is_present (&a[0], N * sizeof (float)))\n+      abort ();\n+\n+    acc_delete (&b[0], N * sizeof (float));\n+\n+    if (acc_is_present (&b[0], N * sizeof (float)))\n+      abort ();\n \n \n     for (i = 0; i < N; i++)"}]}