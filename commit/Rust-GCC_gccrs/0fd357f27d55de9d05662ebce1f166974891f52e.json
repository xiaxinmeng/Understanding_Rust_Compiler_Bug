{"sha": "0fd357f27d55de9d05662ebce1f166974891f52e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkMzU3ZjI3ZDU1ZGU5ZDA1NjYyZWJjZTFmMTY2OTc0ODkxZjUyZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-27T10:59:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-27T10:59:18Z"}, "message": "genmatch.c (decision_tree::gen_gimple): Split out large subtrees into separate functions.\n\n2015-07-27  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (decision_tree::gen_gimple): Split out large\n\tsubtrees into separate functions.\n\t(decision_tree::gen_generic): Likewise.\n\nFrom-SVN: r226241", "tree": {"sha": "50164d664030a4657a65f8a897d6d16006cfa2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50164d664030a4657a65f8a897d6d16006cfa2a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd357f27d55de9d05662ebce1f166974891f52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd357f27d55de9d05662ebce1f166974891f52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd357f27d55de9d05662ebce1f166974891f52e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd357f27d55de9d05662ebce1f166974891f52e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26b4522dd4f73664fc65364615665ecf1817d35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b4522dd4f73664fc65364615665ecf1817d35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b4522dd4f73664fc65364615665ecf1817d35d"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "e0eb3a2ee6a65e523db7ed64edffede4badd892e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd357f27d55de9d05662ebce1f166974891f52e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd357f27d55de9d05662ebce1f166974891f52e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fd357f27d55de9d05662ebce1f166974891f52e", "patch": "@@ -1,3 +1,9 @@\n+2015-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (decision_tree::gen_gimple): Split out large\n+\tsubtrees into separate functions.\n+\t(decision_tree::gen_generic): Likewise.\n+\n 2015-07-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c: Use SUBREG_P predicate."}, {"sha": "7ad00f26b213a80f2cdef80f622d66cbfc0e3b43", "filename": "gcc/genmatch.c", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd357f27d55de9d05662ebce1f166974891f52e/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd357f27d55de9d05662ebce1f166974891f52e/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=0fd357f27d55de9d05662ebce1f166974891f52e", "patch": "@@ -2951,6 +2951,32 @@ decision_tree::gen_gimple (FILE *f)\n \n   for (unsigned n = 1; n <= 3; ++n)\n     {\n+      /* First generate split-out functions.  */\n+      for (unsigned i = 0; i < root->kids.length (); i++)\n+\t{\n+\t  dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);\n+\t  expr *e = static_cast<expr *>(dop->op);\n+\t  if (e->ops.length () != n)\n+\t    continue;\n+\n+\t  fprintf (f, \"\\nstatic bool\\n\"\n+\t\t   \"gimple_simplify_%s (code_helper *res_code, tree *res_ops,\\n\"\n+\t\t   \"                 gimple_seq *seq, tree (*valueize)(tree) \"\n+\t\t   \"ATTRIBUTE_UNUSED,\\n\"\n+\t\t   \"                 code_helper ARG_UNUSED (code), tree \"\n+\t\t   \"ARG_UNUSED (type)\\n\",\n+\t\t   e->operation->id);\n+\t  for (unsigned i = 0; i < n; ++i)\n+\t    fprintf (f, \", tree op%d\", i);\n+\t  fprintf (f, \")\\n\");\n+\t  fprintf (f, \"{\\n\");\n+\t  dop->gen_kids (f, 2, true);\n+\t  fprintf (f, \"  return false;\\n\");\n+\t  fprintf (f, \"}\\n\");\n+\t}\n+\n+      /* Then generate the main entry with the outermost switch and\n+         tail-calls to the split-out functions.  */\n       fprintf (f, \"\\nstatic bool\\n\"\n \t       \"gimple_simplify (code_helper *res_code, tree *res_ops,\\n\"\n \t       \"                 gimple_seq *seq, tree (*valueize)(tree),\\n\"\n@@ -2976,10 +3002,11 @@ decision_tree::gen_gimple (FILE *f)\n \t    fprintf (f, \"    case %s%s:\\n\",\n \t\t     is_a <fn_id *> (e->operation) ? \"-\" : \"\",\n \t\t     e->operation->id);\n-\t  fprintf (f,   \"      {\\n\");\n-\t  dop->gen_kids (f, 8, true);\n-\t  fprintf (f,   \"        break;\\n\");\n-\t  fprintf (f,   \"      }\\n\");\n+\t  fprintf (f, \"      return gimple_simplify_%s (res_code, res_ops, \"\n+\t\t   \"seq, valueize, code, type\", e->operation->id);\n+\t  for (unsigned i = 0; i < n; ++i)\n+\t    fprintf (f, \", op%d\", i);\n+\t  fprintf (f, \");\\n\");\n \t}\n       fprintf (f,       \"    default:;\\n\"\n \t                \"    }\\n\");\n@@ -3003,6 +3030,34 @@ decision_tree::gen_generic (FILE *f)\n \n   for (unsigned n = 1; n <= 3; ++n)\n     {\n+      /* First generate split-out functions.  */\n+      for (unsigned i = 0; i < root->kids.length (); i++)\n+\t{\n+\t  dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);\n+\t  expr *e = static_cast<expr *>(dop->op);\n+\t  if (e->ops.length () != n\n+\t      /* Builtin simplifications are somewhat premature on\n+\t         GENERIC.  The following drops patterns with outermost\n+\t\t calls.  It's easy to emit overloads for function code\n+\t\t though if necessary.  */\n+\t      || e->operation->kind != id_base::CODE)\n+\t    continue;\n+\n+\t  fprintf (f, \"\\nstatic tree\\n\"\n+\t\t   \"generic_simplify_%s (location_t ARG_UNUSED (loc), enum \"\n+\t\t   \"tree_code ARG_UNUSED (code), tree ARG_UNUSED (type)\",\n+\t\t   e->operation->id);\n+\t  for (unsigned i = 0; i < n; ++i)\n+\t    fprintf (f, \", tree op%d\", i);\n+\t  fprintf (f, \")\\n\");\n+\t  fprintf (f, \"{\\n\");\n+\t  dop->gen_kids (f, 2, false);\n+\t  fprintf (f, \"  return NULL_TREE;\\n\");\n+\t  fprintf (f, \"}\\n\");\n+\t}\n+\n+      /* Then generate the main entry with the outermost switch and\n+         tail-calls to the split-out functions.  */\n       fprintf (f, \"\\ntree\\n\"\n \t       \"generic_simplify (location_t loc, enum tree_code code, \"\n \t       \"tree type ATTRIBUTE_UNUSED\");\n@@ -3030,10 +3085,11 @@ decision_tree::gen_generic (FILE *f)\n \t    fprintf (f, \"    CASE_CONVERT:\\n\");\n \t  else\n \t    fprintf (f, \"    case %s:\\n\", e->operation->id);\n-\t  fprintf (f,   \"      {\\n\");\n-\t  dop->gen_kids (f, 8, false);\n-\t  fprintf (f,   \"        break;\\n\"\n-\t\t        \"      }\\n\");\n+\t  fprintf (f, \"      return generic_simplify_%s (loc, code, type\",\n+\t\t   e->operation->id);\n+\t  for (unsigned i = 0; i < n; ++i)\n+\t    fprintf (f, \", op%d\", i);\n+\t  fprintf (f, \");\\n\");\n \t}\n       fprintf (f, \"    default:;\\n\"\n \t          \"    }\\n\");"}]}