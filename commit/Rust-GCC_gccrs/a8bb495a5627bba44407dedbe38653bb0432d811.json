{"sha": "a8bb495a5627bba44407dedbe38653bb0432d811", "node_id": "C_kwDOANBUbNoAKGE4YmI0OTVhNTYyN2JiYTQ0NDA3ZGVkYmUzODY1M2JiMDQzMmQ4MTE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-20T13:05:33Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-20T13:05:33Z"}, "message": "replace \"the the\" typos\n\ngcc/ada/ChangeLog:\n\n\t* exp_ch6.adb: Replace \"the the\" with \"the\".\n\t* sem_ch6.adb: Likewise.\n\t* sem_disp.ads: Likewise.\n\ngcc/ChangeLog:\n\n\t* ctfc.cc (ctf_add_string): Replace \"the the\" with \"the\".\n\t* doc/md.texi: Likewise.\n\t* gimple-range-infer.cc (non_null_loadstore): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.texi: Replace \"the the\" with \"the\".\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wclass-memaccess.C: Replace \"the the\" with \"the\".\n\t* g++.dg/warn/Wconversion-real-integer2.C: Likewise.\n\t* gcc.target/powerpc/p9-extract-1.c: Likewise.\n\t* gcc.target/s390/s390.exp: Likewise.\n\t* gcc.target/s390/zvector/vec-cmp-2.c: Likewise.\n\t* gdc.dg/torture/simd_store.d: Likewise.\n\t* gfortran.dg/actual_array_offset_1.f90: Likewise.\n\t* gfortran.dg/pdt_15.f03: Likewise.\n\t* gfortran.dg/pointer_array_8.f90: Likewise.", "tree": {"sha": "f78e7faaa29ab5a2f3dd39f8e9b2bd5246260edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f78e7faaa29ab5a2f3dd39f8e9b2bd5246260edb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8bb495a5627bba44407dedbe38653bb0432d811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8bb495a5627bba44407dedbe38653bb0432d811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8bb495a5627bba44407dedbe38653bb0432d811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8bb495a5627bba44407dedbe38653bb0432d811/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed0c11ec2a120031db9cecd9de302549e82dced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed0c11ec2a120031db9cecd9de302549e82dced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed0c11ec2a120031db9cecd9de302549e82dced"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "ce1a7525fa2923a944c8441afe1f9c346f069ee0", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -6582,7 +6582,7 @@ package body Exp_Ch6 is\n \n          --  but optimize the case where the result is a function call that\n          --  also needs finalization. In this case the result can directly be\n-         --  allocated on the the return stack of the caller and no further\n+         --  allocated on the return stack of the caller and no further\n          --  processing is required.\n \n          if Present (Utyp)"}, {"sha": "7db0cb7c08f7293f35e9788e54729ec0396c6818", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -505,7 +505,7 @@ package body Sem_Ch6 is\n          --  this because it is not part of the original source.\n          --  If this is an ignored Ghost entity, analysis of the generated\n          --  body is needed to hide external references (as is done in\n-         --  Analyze_Subprogram_Body) after which the the subprogram profile\n+         --  Analyze_Subprogram_Body) after which the subprogram profile\n          --  can be frozen, which is needed to expand calls to such an ignored\n          --  Ghost subprogram.\n "}, {"sha": "841fc741dfcbf13f119216a8f29855f9bcf082c9", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -63,7 +63,7 @@ package Sem_Disp is\n    --  the inherited subprogram will have been hidden by the current one at\n    --  the point of the type derivation, so it does not appear in the list\n    --  of primitive operations of the type, and this procedure inserts the\n-   --  overriding subprogram in the the full type's list of primitives by\n+   --  overriding subprogram in the full type's list of primitives by\n    --  iterating over the list for the parent type. If instead Subp is a new\n    --  primitive, then it's simply appended to the primitive list.\n "}, {"sha": "09645436fdd6c141333251acb2aee07be3b9e77a", "filename": "gcc/ctfc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fctfc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fctfc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.cc?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -324,7 +324,7 @@ ctf_add_string (ctf_container_ref ctfc, const char * name,\n   return ctfc_strtable_add_str (str_table, name, name_offset);\n }\n \n-/* Add the compilation unit (CU) name string to the the CTF string table.  The\n+/* Add the compilation unit (CU) name string to the CTF string table.  The\n    CU name has a prepended pwd string if it is a relative path.  Also set the\n    CU name offset in the CTF container.  */\n "}, {"sha": "d46963f468c51d52d1df30bbc1cb2ff59ee366bc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -2282,7 +2282,7 @@ This constraint won't match unless @option{-mprefer-short-insn-regs} is\n in effect.\n \n @item Rsc\n-The the register class of registers that can be used to hold a\n+The register class of registers that can be used to hold a\n sibcall call address.  I.e., a caller-saved register.\n \n @item Rct"}, {"sha": "fb4a48911ac5cc0be13588e8f42fa47895c25ceb", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -3786,7 +3786,7 @@ The arguments are passed in the following order\n @code{CHARACTER} and no C binding is used\n @item The arguments in the order in which they appear in the Fortran\n declaration\n-@item The the present status for optional arguments with value attribute,\n+@item The present status for optional arguments with value attribute,\n which are internally passed by value\n @item The character length and/or coarray token and offset for the first\n argument which is a @code{CHARACTER} or a nonallocatable coarray dummy"}, {"sha": "f0d66d047a6863bef5d3b31355471bc5df6e606c", "filename": "gcc/gimple-range-infer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fgimple-range-infer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Fgimple-range-infer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-infer.cc?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -56,7 +56,7 @@ non_null_loadstore (gimple *, tree op, tree, void *data)\n   return false;\n }\n \n-// Add NAME and RANGE to the the range inference summary.\n+// Add NAME and RANGE to the range inference summary.\n \n void\n gimple_infer_range::add_range (tree name, vrange &range)"}, {"sha": "87aaa79ceca07cd98c55c0ce44555bbc49291eb4", "filename": "gcc/testsuite/g++.dg/warn/Wclass-memaccess.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-memaccess.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-memaccess.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-memaccess.C?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -1144,7 +1144,7 @@ void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n \n /* HasVirtuals should only be manipulated by the special member functions\n    and not by bzero, memcpy, or any other raw memory function. Doing\n-   otherwse might corrupt the the vtable pointer.  */\n+   otherwse might corrupt the vtable pointer.  */\n struct HasVirtuals { int i; virtual void foo (); };\n \n void test (HasVirtuals *p, const HasVirtuals &x,"}, {"sha": "404c0668035c838ff89cbb34757bf48407fe3950", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -4,7 +4,7 @@\n \n // Before the fix that came with this test, we'd output an error for\n // the __INT_MAX__ token.  That token has a BUILTINS_LOCATION\n-// location, so the the location prefix in the warning message would\n+// location, so the location prefix in the warning message would\n // be:\n //     <built-in>:0:0: warning: conversion to 'float' alters 'int' constant value\n //"}, {"sha": "d7d3ad77aea822aa3dfeddeb7d7d7607f9a134f2", "filename": "gcc/testsuite/gcc.target/powerpc/p9-extract-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -4,7 +4,7 @@\n \n /* Test to make sure VEXTU{B,H,W}{L,R}X is generated for various vector extract\n    operations for ISA 3.0 (-mcpu=power9).  In addition, make sure that neither\n-   of the the the old methods of doing vector extracts are done either by\n+   of the old methods of doing vector extracts are done either by\n    explict stores to the stack or by using direct move instructions.  */\n \n #include <altivec.h>"}, {"sha": "cae7ea6b212198508791dc8d7dca5baff072d878", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -30,7 +30,7 @@ load_lib target-supports.exp\n load_lib gfortran-dg.exp\n load_lib atomic-dg.exp\n \n-# Return 1 if the the assembler understands .machine and .machinemode.  The\n+# Return 1 if the assembler understands .machine and .machinemode.  The\n # target attribute needs that feature to work.\n proc check_effective_target_target_attribute { } {\n     if { ![check_runtime s390_check_machine_machinemode [subst {"}, {"sha": "c4e75f518c60226f6efe7a7bf2cd444a51da8f8b", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-cmp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -1,5 +1,5 @@\n /* Similiar to vec-cmp-1.c but requires that\n-   s390_canonicalize_comparison is able to merge the the two nested\n+   s390_canonicalize_comparison is able to merge the two nested\n    compares.  */\n \n /* { dg-do compile { target { s390*-*-* } } } */"}, {"sha": "234c020da85df6b1b769667834cc3a91b7fbd6b8", "filename": "gcc/testsuite/gdc.dg/torture/simd_store.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_store.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_store.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_store.d?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -23,7 +23,7 @@ void main()\n             // store `v` to location pointed to by `d`\n             storeUnaligned(cast(T*)d, v);\n \n-            // check that the the data was stored correctly\n+            // check that the data was stored correctly\n             foreach (j; 0..T.sizeof)\n                 assert(ptrToV[j] == d[j]);\n         }"}, {"sha": "53dbc2e7c9176a36f988e8d39e6f107e0fd2af1e", "filename": "gcc/testsuite/gfortran.dg/actual_array_offset_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -155,7 +155,7 @@ program test_quicksort\n \n     call quicksort( array )\n \n-! Check the the array is correctly ordered\n+! Check the array is correctly ordered\n     if (.not.check (array)) STOP 2\n contains\n      logical function check (arg)"}, {"sha": "4ae19839923f3e644d0fbe5efb337d6bf91cafb3", "filename": "gcc/testsuite/gfortran.dg/pdt_15.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_15.f03?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! { dg-options \"-fdump-tree-original\" }\n !\n-! Test the fix for PR82375. This is a wrinkle on the the allocatable\n+! Test the fix for PR82375. This is a wrinkle on the allocatable\n ! version of pdt_13.f03, pdt_14.f03, whereby 'root' is now declared\n ! in a subroutine so that it should be cleaned up automatically. This\n ! is best tested with valgrind or its like."}, {"sha": "1cc1787948be283e1562734b4ae74669667e9c7d", "filename": "gcc/testsuite/gfortran.dg/pointer_array_8.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8bb495a5627bba44407dedbe38653bb0432d811/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_8.f90?ref=a8bb495a5627bba44407dedbe38653bb0432d811", "patch": "@@ -30,7 +30,7 @@\n \n   select type (cptr)\n     type is (integer)\n-      if (any (cptr .ne. [1,2,3])) STOP 3! Check the the scalarizer works.\n+      if (any (cptr .ne. [1,2,3])) STOP 3! Check the scalarizer works.\n       if (cptr(2) .ne. 2) STOP 4! Check ordinary array indexing.\n   end select\n \n@@ -63,7 +63,7 @@ subroutine foo (arg, addr)\n     addr = loc(arg)\n     select type (arg)\n       type is (integer)\n-        if (any (arg .ne. [1,2,3])) STOP 11! Check the the scalarizer works.\n+        if (any (arg .ne. [1,2,3])) STOP 11! Check the scalarizer works.\n         if (arg(2) .ne. 2) STOP 12! Check ordinary array indexing.\n     end select\n   end subroutine"}]}