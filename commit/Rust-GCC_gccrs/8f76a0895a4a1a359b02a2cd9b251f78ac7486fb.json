{"sha": "8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3NmEwODk1YTRhMWEzNTliMDJhMmNkOWIyNTFmNzhhYzc0ODZmYg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-11-25T21:10:34Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-11-25T21:10:34Z"}, "message": "re PR other/54265 (Documentation of \"preferred attribute syntax for Types\" contradicts examples in info.)\n\n2018-11-25  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR other/54265\n\n\tgcc/\n\t* doc/extend.texi (Common Variable Attributes): Use preferred\n\tplacement of type attributes in examples, plus whitespace fixes.\n\t(Type Attributes): Clarify why placement of attributes\n\timmediately after struct/union/enum keyword is preferred.\n\t(Common Type Attributes): Use preferred placement of type\n\tattributes in examples, plus more whitespace fixes.\n\nFrom-SVN: r266440", "tree": {"sha": "b630e6bb0851580a93a7c331d344952a70e2e828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b630e6bb0851580a93a7c331d344952a70e2e828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "537db3a2bc0a0225d2d19d8123f09dd38d20e55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537db3a2bc0a0225d2d19d8123f09dd38d20e55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537db3a2bc0a0225d2d19d8123f09dd38d20e55e"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "4ca5a4bcdd3438d7c6d2661f9fcc6aeb655683e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "patch": "@@ -1,3 +1,13 @@\n+2018-11-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/54265\n+\t* doc/extend.texi (Common Variable Attributes): Use preferred\n+\tplacement of type attributes in examples, plus whitespace fixes.\n+\t(Type Attributes): Clarify why placement of attributes\n+\timmediately after struct/union/enum keyword is preferred.\n+\t(Common Type Attributes): Use preferred placement of type\n+\tattributes in examples, plus more whitespace fixes.\n+\n 2018-11-25  Paul Koning  <ni1d@arrl.net>\n \n \t* config/pdp11/pdp11.h (TARGET_HAS_NO_HW_DIVIDE): Define."}, {"sha": "3639254924446457ddf2844fd4c35c19a6e91fb7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f76a0895a4a1a359b02a2cd9b251f78ac7486fb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8f76a0895a4a1a359b02a2cd9b251f78ac7486fb", "patch": "@@ -6177,7 +6177,7 @@ struct foo\n @{\n   int i1;\n   int i2;\n-  unsigned long long x __attribute__((warn_if_not_aligned(16)));\n+  unsigned long long x __attribute__ ((warn_if_not_aligned (16)));\n @};\n @end smallexample\n \n@@ -6189,12 +6189,12 @@ The compiler also issues a warning, like @samp{warning: 'x' offset\n the misaligned offset:\n \n @smallexample\n-struct foo\n+struct __attribute__ ((aligned (16))) foo\n @{\n   int i1;\n   int i2;\n-  unsigned long long x __attribute__((warn_if_not_aligned(16)));\n-@} __attribute__((aligned(16)));\n+  unsigned long long x __attribute__ ((warn_if_not_aligned (16)));\n+@};\n @end smallexample\n \n This warning can be disabled by @option{-Wno-if-not-aligned}.\n@@ -7019,9 +7019,10 @@ inside double parentheses.\n \n You may specify type attributes in an enum, struct or union type\n declaration or definition by placing them immediately after the\n-@code{struct}, @code{union} or @code{enum} keyword.  A less preferred\n-syntax is to place them just past the closing curly brace of the\n-definition.\n+@code{struct}, @code{union} or @code{enum} keyword.  You can also place\n+them just past the closing curly brace of the definition, but this is less\n+preferred because logically the type should be fully defined at \n+the closing brace.\n \n You can also include type attributes in a @code{typedef} declaration.\n @xref{Attribute Syntax}, for details of the exact syntax for using\n@@ -7053,7 +7054,7 @@ alignment for the target, which is often, but by no means always, 8 or 16\n bytes.  For example, the declarations:\n \n @smallexample\n-struct S @{ short f[3]; @} __attribute__ ((aligned (8)));\n+struct __attribute__ ((aligned (8))) S @{ short f[3]; @};\n typedef int more_aligned_int __attribute__ ((aligned (8)));\n @end smallexample\n \n@@ -7084,7 +7085,7 @@ useful alignment for the target machine you are compiling for.  For\n example, you could write:\n \n @smallexample\n-struct S @{ short f[3]; @} __attribute__ ((aligned));\n+struct __attribute__ ((aligned)) S @{ short f[3]; @};\n @end smallexample\n \n Whenever you leave out the alignment factor in an @code{aligned}\n@@ -7119,7 +7120,7 @@ by inherent limitations in your linker.  On many systems, the linker is\n only able to arrange for variables to be aligned up to a certain maximum\n alignment.  (For some linkers, the maximum supported alignment may\n be very very small.)  If your linker is only able to align variables\n-up to a maximum of 8-byte alignment, then specifying @code{aligned(16)}\n+up to a maximum of 8-byte alignment, then specifying @code{aligned (16)}\n in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n@@ -7137,7 +7138,7 @@ warning will be issued.  For example, the declaration:\n \n @smallexample\n typedef unsigned long long __u64\n-   __attribute__((aligned(4),warn_if_not_aligned(8)));\n+   __attribute__((aligned (4), warn_if_not_aligned (8)));\n \n struct foo\n @{\n@@ -7156,12 +7157,12 @@ has the same alignment when @code{__u64} is aligned at either 4 or\n 8 bytes.  Align @code{struct foo} to 8 bytes:\n \n @smallexample\n-struct foo\n+struct __attribute__ ((aligned (8))) foo\n @{\n   int i1;\n   int i2;\n   __u64 x;\n-@} __attribute__((aligned(8)));\n+@};\n @end smallexample\n \n @noindent\n@@ -7170,13 +7171,13 @@ silences the warning.  The compiler also issues a warning, like\n when the structure field has the misaligned offset:\n \n @smallexample\n-struct foo\n+struct __attribute__ ((aligned (8))) foo\n @{\n   int i1;\n   int i2;\n   int i3;\n   __u64 x;\n-@} __attribute__((aligned(8)));\n+@};\n @end smallexample\n \n This warning can be disabled by @option{-Wno-if-not-aligned}.\n@@ -7281,7 +7282,7 @@ special semantics.\n Example of use:\n \n @smallexample\n-typedef short __attribute__((__may_alias__)) short_a;\n+typedef short __attribute__ ((__may_alias__)) short_a;\n \n int\n main (void)"}]}