{"sha": "a89eb96d79ec3d001579fca8e4bead46080bba7d", "node_id": "C_kwDOANBUbNoAKGE4OWViOTZkNzllYzNkMDAxNTc5ZmNhOGU0YmVhZDQ2MDgwYmJhN2Q", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-01T15:50:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-02T10:18:01Z"}, "message": "Update Reference and Pointer types equality interface\n\nThse types are not equal unless their mutabilities are equal so this patch\nadds in the missing if statements to ensure that two pointers or two\nreferences account for their mutability.\n\nFixes #1289", "tree": {"sha": "8cbd019d977cbc1a0c1c58d39722f45f684a7bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cbd019d977cbc1a0c1c58d39722f45f684a7bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89eb96d79ec3d001579fca8e4bead46080bba7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89eb96d79ec3d001579fca8e4bead46080bba7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89eb96d79ec3d001579fca8e4bead46080bba7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89eb96d79ec3d001579fca8e4bead46080bba7d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6f6a7179d3015f4e658e4b6bda2098796cd2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6f6a7179d3015f4e658e4b6bda2098796cd2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6f6a7179d3015f4e658e4b6bda2098796cd2c7"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "c509d9b845b400dc4770f27da9e4da8eb0eb0e17", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89eb96d79ec3d001579fca8e4bead46080bba7d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89eb96d79ec3d001579fca8e4bead46080bba7d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a89eb96d79ec3d001579fca8e4bead46080bba7d", "patch": "@@ -2441,6 +2441,9 @@ ReferenceType::is_equal (const BaseType &other) const\n     return false;\n \n   auto other2 = static_cast<const ReferenceType &> (other);\n+  if (mutability () != other2.mutability ())\n+    return false;\n+\n   return get_base ()->is_equal (*other2.get_base ());\n }\n \n@@ -2535,6 +2538,9 @@ PointerType::is_equal (const BaseType &other) const\n     return false;\n \n   auto other2 = static_cast<const PointerType &> (other);\n+  if (mutability () != other2.mutability ())\n+    return false;\n+\n   return get_base ()->is_equal (*other2.get_base ());\n }\n "}, {"sha": "8634f1d7e4efff2a639a09d30483280ab3f9aaeb", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89eb96d79ec3d001579fca8e4bead46080bba7d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89eb96d79ec3d001579fca8e4bead46080bba7d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=a89eb96d79ec3d001579fca8e4bead46080bba7d", "patch": "@@ -0,0 +1,42 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+    }\n+}\n+\n+#[lang = \"mut_ptr\"]\n+impl<T> *mut T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: *mut _ = &mut 123;\n+    unsafe {\n+        let _b = a.add(123);\n+    }\n+\n+    0\n+}"}]}