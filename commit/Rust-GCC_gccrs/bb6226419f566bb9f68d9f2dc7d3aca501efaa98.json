{"sha": "bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2MjI2NDE5ZjU2NmJiOWY2OGQ5ZjJkYzdkM2FjYTUwMWVmYWE5OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-11T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-11T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "64792442ef41b9e59e0c44789068b65b0249b673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64792442ef41b9e59e0c44789068b65b0249b673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/comments", "author": null, "committer": null, "parents": [{"sha": "778087e0f54285de1eec5c3bf3657392779b52bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778087e0f54285de1eec5c3bf3657392779b52bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778087e0f54285de1eec5c3bf3657392779b52bf"}], "stats": {"total": 750, "additions": 749, "deletions": 1}, "files": [{"sha": "766ce5f444c6bad5b81210810f4670412a671b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,317 @@\n+2020-11-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.h (HAVE_TF): Use opaque value when\n+\tGENERATOR_FILE is defined.\n+\n+2020-11-10  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* cgraph.h (symtab_node::get_section): Constify.\n+\t(symtab_node::set_section): Declare new overload.\n+\t* symtab.c (symtab_node::set_section): Define new overload.\n+\t(symtab_node::copy_visibility_from): Use new overload of\n+\tsymtab_node::set_section.\n+\t(symtab_node::resolve_alias): Same.\n+\t* tree.h (set_decl_section_name): Declare new overload.\n+\t* tree.c (set_decl_section_name): Define new overload.\n+\t* tree-emutls.c (get_emutls_init_templ_addr): Same.\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone): Use new\n+\toverload of symtab_node::set_section.\n+\t(cgraph_node::create_version_clone_with_body): Same.\n+\t* trans-mem.c (ipa_tm_create_version): Same.\n+\n+2020-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::set): Early exit for poly ints.\n+\n+2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_omp_loop): Use 'do'\n+\tinstead of 'for' in error messages for Fortran.\n+\t* omp-low.c (check_omp_nesting_restrictions): Likewise\n+\n+2020-11-10  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opts.c (control_options_for_live_patching): Reform 'is incompatible\n+\twith' error messages to use a standard message with differing format\n+\targuments.\n+\t(finish_options): Likewise.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97769\n+\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel):\n+\tRemove assert.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97780\n+\t* tree-ssa-pre.c (fini_pre): Deal with added basic blocks\n+\twhen freeing PHI_TRANS_TABLE.\n+\n+2020-11-10  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor tbl/tbx intrinsics.\n+\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gimplify.c (is_or_contains_p): New static helper function.\n+\t(omp_target_reorder_clauses): New function.\n+\t(gimplify_scan_omp_clauses): Add use of omp_target_reorder_clauses to\n+\treorder clause list according to OpenMP 5.0 rules. Add handling of\n+\tGOMP_MAP_ATTACH_DETACH for OpenMP cases.\n+\t* omp-low.c (is_omp_target): New static helper function.\n+\t(scan_sharing_clauses): Add scan phase handling of GOMP_MAP_ATTACH/DETACH\n+\tfor OpenMP cases.\n+\t(lower_omp_target): Add lowering handling of GOMP_MAP_ATTACH/DETACH for\n+\tOpenMP cases.\n+\n+2020-11-10  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390-modes.def (FPRX2): New mode.\n+\t* config/s390/s390-protos.h (s390_fma_allowed_p): New function.\n+\t* config/s390/s390.c (s390_fma_allowed_p): Likewise.\n+\t(s390_build_signbit_mask): Support 128-bit masks.\n+\t(print_operand): Support printing the second word of a TFmode\n+\toperand as vector register.\n+\t(constant_modes): Add FPRX2mode.\n+\t(s390_class_max_nregs): Return 1 for TFmode on z14+.\n+\t(s390_is_fpr128): New function.\n+\t(s390_is_vr128): Likewise.\n+\t(s390_can_change_mode_class): Use s390_is_fpr128 and\n+\ts390_is_vr128 in order to determine whether mode refers to a FPR\n+\tpair or to a VR.\n+\t(s390_emit_compare): Force TFmode operands into registers on\n+\tz14+.\n+\t* config/s390/s390.h (HAVE_TF): New macro.\n+\t(EXPAND_MOVTF): New macro.\n+\t(EXPAND_TF): Likewise.\n+\t* config/s390/s390.md (PFPO_OP_TYPE_FPRX2): PFPO_OP_TYPE_TF\n+\talias.\n+\t(ALL): Add FPRX2.\n+\t(FP_ALL): Add FPRX2 for z14+, restrict TFmode to z13-.\n+\t(FP): Likewise.\n+\t(FP_ANYTF): New mode iterator.\n+\t(BFP): Add FPRX2 for z14+, restrict TFmode to z13-.\n+\t(TD_TF): Likewise.\n+\t(xde): Add FPRX2.\n+\t(nBFP): Likewise.\n+\t(nDFP): Likewise.\n+\t(DSF): Likewise.\n+\t(DFDI): Likewise.\n+\t(SFSI): Likewise.\n+\t(DF): Likewise.\n+\t(SF): Likewise.\n+\t(fT0): Likewise.\n+\t(bt): Likewise.\n+\t(_d): Likewise.\n+\t(HALF_TMODE): Likewise.\n+\t(tf_fpr): New mode_attr.\n+\t(type): New mode_attr.\n+\t(*cmp<mode>_ccz_0): Use type instead of mode with fsimp.\n+\t(*cmp<mode>_ccs_0_fastmath): Likewise.\n+\t(*cmptf_ccs): New pattern for wfcxb.\n+\t(*cmptf_ccsfps): New pattern for wfkxb.\n+\t(mov<mode>): Rename to mov<mode><tf_fpr>.\n+\t(signbit<mode>2): Rename to signbit<mode>2<tf_fpr>.\n+\t(isinf<mode>2): Renamed to isinf<mode>2<tf_fpr>.\n+\t(*TDC_insn_<mode>): Use type instead of mode with fsimp.\n+\t(fixuns_trunc<FP:mode><GPR:mode>2): Rename to\n+\tfixuns_trunc<FP:mode><GPR:mode>2<FP:tf_fpr>.\n+\t(fix_trunctf<mode>2): Rename to fix_trunctf<mode>2_fpr.\n+\t(floatdi<mode>2): Rename to floatdi<mode>2<tf_fpr>, use type\n+\tinstead of mode with itof.\n+\t(floatsi<mode>2): Rename to floatsi<mode>2<tf_fpr>, use type\n+\tinstead of mode with itof.\n+\t(*floatuns<GPR:mode><FP:mode>2): Use type instead of mode for\n+\titof.\n+\t(floatuns<GPR:mode><FP:mode>2): Rename to\n+\tfloatuns<GPR:mode><FP:mode>2<tf_fpr>.\n+\t(trunctf<mode>2): Rename to trunctf<mode>2_fpr, use type instead\n+\tof mode with fsimp.\n+\t(extend<DSF:mode><BFP:mode>2): Rename to\n+\textend<DSF:mode><BFP:mode>2<BFP:tf_fpr>.\n+\t(<FPINT:fpint_name><BFP:mode>2): Rename to\n+\t<FPINT:fpint_name><BFP:mode>2<BFP:tf_fpr>, use type instead of\n+\tmode with fsimp.\n+\t(rint<BFP:mode>2): Rename to rint<BFP:mode>2<BFP:tf_fpr>, use\n+\ttype instead of mode with fsimp.\n+\t(<FPINT:fpint_name><DFP:mode>2): Use type instead of mode for\n+\tfsimp.\n+\t(rint<DFP:mode>2): Likewise.\n+\t(trunc<BFP:mode><DFP_ALL:mode>2): Rename to\n+\ttrunc<BFP:mode><DFP_ALL:mode>2<BFP:tf_fpr>.\n+\t(trunc<DFP_ALL:mode><BFP:mode>2): Rename to\n+\ttrunc<DFP_ALL:mode><BFP:mode>2<BFP:tf_fpr>.\n+\t(extend<BFP:mode><DFP_ALL:mode>2): Rename to\n+\textend<BFP:mode><DFP_ALL:mode>2<BFP:tf_fpr>.\n+\t(extend<DFP_ALL:mode><BFP:mode>2): Rename to\n+\textend<DFP_ALL:mode><BFP:mode>2<BFP:tf_fpr>.\n+\t(add<mode>3): Rename to add<mode>3<tf_fpr>, use type instead of\n+\tmode with fsimp.\n+\t(*add<mode>3_cc): Use type instead of mode with fsimp.\n+\t(*add<mode>3_cconly): Likewise.\n+\t(sub<mode>3): Rename to sub<mode>3<tf_fpr>, use type instead of\n+\tmode with fsimp.\n+\t(*sub<mode>3_cc): Use type instead of mode with fsimp.\n+\t(*sub<mode>3_cconly): Likewise.\n+\t(mul<mode>3): Rename to mul<mode>3<tf_fpr>, use type instead of\n+\tmode with fsimp.\n+\t(fma<mode>4): Restrict using s390_fma_allowed_p.\n+\t(fms<mode>4): Restrict using s390_fma_allowed_p.\n+\t(div<mode>3): Rename to div<mode>3<tf_fpr>, use type instead of\n+\tmode with fdiv.\n+\t(neg<mode>2): Rename to neg<mode>2<tf_fpr>.\n+\t(*neg<mode>2_cc): Use type instead of mode with fsimp.\n+\t(*neg<mode>2_cconly): Likewise.\n+\t(*neg<mode>2_nocc): Likewise.\n+\t(*neg<mode>2): Likeiwse.\n+\t(abs<mode>2): Rename to abs<mode>2<tf_fpr>, use type instead of\n+\tmode with fdiv.\n+\t(*abs<mode>2_cc): Use type instead of mode with fsimp.\n+\t(*abs<mode>2_cconly): Likewise.\n+\t(*abs<mode>2_nocc): Likewise.\n+\t(*abs<mode>2): Likewise.\n+\t(*negabs<mode>2_cc): Likewise.\n+\t(*negabs<mode>2_cconly): Likewise.\n+\t(*negabs<mode>2_nocc): Likewise.\n+\t(*negabs<mode>2): Likewise.\n+\t(sqrt<mode>2): Rename to sqrt<mode>2<tf_fpr>, use type instead\n+\tof mode with fsqrt.\n+\t(cbranch<mode>4): Use FP_ANYTF instead of FP.\n+\t(copysign<mode>3): Rename to copysign<mode>3<tf_fpr>, use type\n+\tinstead of mode with fsimp.\n+\t* config/s390/s390.opt (flag_vx_long_double_fma): New\n+\tundocumented option.\n+\t* config/s390/vector.md (V_HW): Add TF for z14+.\n+\t(V_HW2): Likewise.\n+\t(VFT): Likewise.\n+\t(VF_HW): Likewise.\n+\t(V_128): Likewise.\n+\t(tf_vr): New mode_attr.\n+\t(tointvec): Add TF.\n+\t(mov<mode>): Rename to mov<mode><tf_vr>.\n+\t(movetf): New dispatcher.\n+\t(*vec_tf_to_v1tf): Rename to *vec_tf_to_v1tf_fpr, restrict to\n+\tz13-.\n+\t(*vec_tf_to_v1tf_vr): New pattern for z14+.\n+\t(*fprx2_to_tf): Likewise.\n+\t(*mov_tf_to_fprx2_0): Likewise.\n+\t(*mov_tf_to_fprx2_1): Likewise.\n+\t(add<mode>3): Rename to add<mode>3<tf_vr>.\n+\t(addtf3): New dispatcher.\n+\t(sub<mode>3): Rename to sub<mode>3<tf_vr>.\n+\t(subtf3): New dispatcher.\n+\t(mul<mode>3): Rename to mul<mode>3<tf_vr>.\n+\t(multf3): New dispatcher.\n+\t(div<mode>3): Rename to div<mode>3<tf_vr>.\n+\t(divtf3): New dispatcher.\n+\t(sqrt<mode>2): Rename to sqrt<mode>2<tf_vr>.\n+\t(sqrttf2): New dispatcher.\n+\t(fma<mode>4): Restrict using s390_fma_allowed_p.\n+\t(fms<mode>4): Likewise.\n+\t(neg_fma<mode>4): Likewise.\n+\t(neg_fms<mode>4): Likewise.\n+\t(neg<mode>2): Rename to neg<mode>2<tf_vr>.\n+\t(negtf2): New dispatcher.\n+\t(abs<mode>2): Rename to abs<mode>2<tf_vr>.\n+\t(abstf2): New dispatcher.\n+\t(float<mode>tf2_vr): New forwarder.\n+\t(float<mode>tf2): New dispatcher.\n+\t(floatuns<mode>tf2_vr): New forwarder.\n+\t(floatuns<mode>tf2): New dispatcher.\n+\t(fix_trunctf<mode>2_vr): New forwarder.\n+\t(fix_trunctf<mode>2): New dispatcher.\n+\t(fixuns_trunctf<mode>2_vr): New forwarder.\n+\t(fixuns_trunctf<mode>2): New dispatcher.\n+\t(<FPINT:fpint_name><VF_HW:mode>2<VF_HW:tf_vr>): New pattern.\n+\t(<FPINT:fpint_name>tf2): New forwarder.\n+\t(rint<mode>2<tf_vr>): New pattern.\n+\t(rinttf2): New forwarder.\n+\t(*trunctfdf2_vr): New pattern.\n+\t(trunctfdf2_vr): New forwarder.\n+\t(trunctfdf2): New dispatcher.\n+\t(trunctfsf2_vr): New forwarder.\n+\t(trunctfsf2): New dispatcher.\n+\t(extenddftf2_vr): New pattern.\n+\t(extenddftf2): New dispatcher.\n+\t(extendsftf2_vr): New forwarder.\n+\t(extendsftf2): New dispatcher.\n+\t(signbittf2_vr): New forwarder.\n+\t(signbittf2): New dispatchers.\n+\t(isinftf2_vr): New forwarder.\n+\t(isinftf2): New dispatcher.\n+\t* config/s390/vx-builtins.md (*vftci<mode>_cconly): Use VF_HW\n+\tinstead of VECF_HW, add missing constraint, add vw support.\n+\t(vftci<mode>_intcconly): Use VF_HW instead of VECF_HW.\n+\t(*vftci<mode>): Rename to vftci<mode>, use VF_HW instead of\n+\tVECF_HW, and vw support.\n+\t(vftci<mode>_intcc): Use VF_HW instead of VECF_HW.\n+\n+2020-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* range-op.cc (operator_logical_not::fold_range): Tidy up.\n+\t(operator_logical_not::op1_range): Call above method.\n+\t(operator_bitwise_not::fold_range): If the type is compatible\n+\twith boolean, call op_logical_not.fold_range.\n+\t(operator_bitwise_not::op1_range): If the type is compatible\n+\twith boolean, call op_logical_not.op1_range.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (pre_expr_d::value_id): Add.\n+\t(constant_value_expressions): Turn into an array of pre_expr.\n+\t(get_or_alloc_expr_for_nary): New function.\n+\t(get_or_alloc_expr_for_reference): Likewise.\n+\t(add_to_value): For constant values only ever add a single\n+\tCONSTANT.\n+\t(get_expr_value_id): Return the new value_id member.\n+\t(vn_valnum_from_value_id): Split out and simplify constant\n+\tvalue id handling.\n+\t(get_or_alloc_expr_for_constant): Set the value_id member.\n+\t(phi_translate_1): Use get_or_alloc_expr_for_*.\n+\t(compute_avail): Likewise.\n+\t(bitmap_find_leader): Simplify constant value id handling.\n+\n+2020-11-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* doc/md.texi (Modifiers): Fix grammar in description of\n+\tearlyclobber constraint modifier.\n+\n+2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97764\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): For\n+\tlittle-endian stores with negative pd.offset, subtract\n+\tBITS_PER_UNIT - amnt from size if amnt is non-zero.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97760\n+\t* tree-vect-loop.c (check_reduction_path): Reject\n+\treduction paths we do not handle in epilogue generation.\n+\n+2020-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97767\n+\t* value-range.cc (dump_bound_with_infinite_markers): Use\n+\twi::min_value and wi::max_value.\n+\t(range_tests_strict_enum): New.\n+\t(range_tests): Call range_tests_strict_enum.\n+\t* value-range.h (irange::varying_p): Use wi::min_value\n+\tand wi::max_value.\n+\t(irange::set_varying): Same.\n+\t(irange::normalize_min_max): Remove comment.\n+\n+2020-11-10  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97567\n+\t* gimple-range-gori.cc: (gori_compute::logical_combine): False\n+\tOR operations should intersect the 2 results.\n+\t(gori_compute::compute_logical_operands_in_chain): If def chains\n+\tare outside the current basic block, don't follow them.\n+\n 2020-11-09  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_split_move): Recognize vadd2 instructions."}, {"sha": "bb826fc6328f23a89ab89cc8c79f54f1458eb3a3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1 +1 @@\n-20201110\n+20201111"}, {"sha": "143f2f8b9139fff4ad4d4dfb4db90b34c4f59052", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,18 @@\n+2020-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* constraint-manager.cc (constraint_manager::merge): Remove\n+\tunused code.\n+\t* constraint-manager.h: Likewise.\n+\t* program-state.cc (sm_state_map::sm_state_map): Likewise.\n+\t(program_state::program_state): Likewise.\n+\t(test_sm_state_map): Likewise.\n+\t* program-state.h: Likewise.\n+\t* region-model-reachability.cc (reachable_regions::reachable_regions): Likewise.\n+\t* region-model-reachability.h: Likewise.\n+\t* region-model.cc (region_model::handle_unrecognized_call): Likewise.\n+\t(region_model::get_reachable_svalues): Likewise.\n+\t(region_model::can_merge_with_p): Likewise.\n+\n 2020-11-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97668"}, {"sha": "bef7df318330f45525d6c0c2e12bac79310a242b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,18 @@\n+2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97748\n+\t* c-common.h (warn_if_unused_value): Add quiet argument defaulted\n+\tto false.\n+\t* c-warn.c (warn_if_unused_value): Likewise.  Pass it down\n+\trecursively and just return true instead of warning if it is true.\n+\tHandle COMPLEX_EXPR.\n+\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-common.h (c_omp_adjust_map_clauses): New declaration.\n+\t* c-omp.c (struct map_clause): Helper type for c_omp_adjust_map_clauses.\n+\t(c_omp_adjust_map_clauses): New function.\n+\n 2020-11-09  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1914"}, {"sha": "a16dba4d944618d3113ad7b2d3841be6df8bd202", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,21 @@\n+2020-11-10  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* c-decl.c (merge_decls): Use new overload of\n+\tset_decl_section_name.\n+\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_target_data): Add use of\n+\tnew c_omp_adjust_map_clauses function. Add GOMP_MAP_ATTACH_DETACH as\n+\thandled map clause kind.\n+\t(c_parser_omp_target_enter_data): Likewise.\n+\t(c_parser_omp_target_exit_data): Likewise.\n+\t(c_parser_omp_target): Likewise.\n+\t* c-typeck.c (handle_omp_array_sections): Adjust COMPONENT_REF case to\n+\tuse GOMP_MAP_ATTACH_DETACH map kind for C_ORT_OMP region type.\n+\t(c_finish_omp_clauses): Adjust bitmap checks to allow struct decl and\n+\tsame struct field access to co-exist on OpenMP construct.\n+\n 2020-11-07  Martin Uecker  <muecker@gwdg.de>\n \n \t* c-parser.c (c_parser_label): Implement mixing of labels and code."}, {"sha": "dd0e82edb5824fa9b902623f9267c94550463cf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,48 @@\n+2020-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* cp-tree.h (finish_static_assert): Adjust declaration.\n+\t* parser.c (cp_parser_static_assert): Pass false to\n+\tfinish_static_assert.\n+\t* pt.c (tsubst_expr): Pass true to finish_static_assert.\n+\t* semantics.c (find_failing_clause_r): New function.\n+\t(find_failing_clause): New function.\n+\t(finish_static_assert): Add a bool parameter.  Use\n+\tiloc_sentinel.  Call contextual_conv_bool instead of\n+\tperform_implicit_conversion_flags.  Don't check for INTEGER_CST before\n+\tcalling integer_zerop.  Call find_failing_clause and maybe use its\n+\tlocation.  Print the original condition or the failing clause if\n+\tSHOW_EXPR_P.\n+\n+2020-11-10  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* decl.c (duplicate_decls): Use new overload of\n+\tset_decl_section_name.\n+\t* method.c (use_thunk): Same.\n+\t* optimize.c (maybe_clone_body): Same.\n+\t* coroutines.cc (act_des_fn): Same.\n+\n+2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97748\n+\t* cvt.c (convert_to_void): Check (complain & tf_warning) in the outer\n+\tif rather than twice times in the inner one.  Use warn_if_unused_value.\n+\tFormatting fix.\n+\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_target_data): Add use of\n+\tnew c_omp_adjust_map_clauses function. Add GOMP_MAP_ATTACH_DETACH as\n+\thandled map clause kind.\n+\t(cp_parser_omp_target_enter_data): Likewise.\n+\t(cp_parser_omp_target_exit_data): Likewise.\n+\t(cp_parser_omp_target): Likewise.\n+\t* semantics.c (handle_omp_array_sections): Adjust COMPONENT_REF case to\n+\tuse GOMP_MAP_ATTACH_DETACH map kind for C_ORT_OMP region type. Fix\n+\tinteraction between reference case and attach/detach.\n+\t(finish_omp_clauses): Adjust bitmap checks to allow struct decl and\n+\tsame struct field access to co-exist on OpenMP construct.\n+\n 2020-11-09  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1914"}, {"sha": "e604f5a5e8c670534cec5ccbe11395af049d06c2", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,8 @@\n+2020-11-10  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* decl.cc (finish_thunk): Use new overload of\n+\tset_decl_section_name\n+\n 2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd bec5973b0."}, {"sha": "6a023af97691e4f647dbab47ce7705c21dbab01e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,31 @@\n+2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle new reduction enums.\n+\t* gfortran.h (OMP_LIST_REDUCTION_INSCAN, OMP_LIST_REDUCTION_TASK,\n+\tOMP_LIST_IN_REDUCTION, OMP_LIST_TASK_REDUCTION): Add enums.\n+\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_IN_REDUCTION\n+\tand OMP_CLAUSE_TASK_REDUCTION.\n+\t(gfc_match_omp_clause_reduction): Extend reduction handling;\n+\tmoved from ...\n+\t(gfc_match_omp_clauses): ... here. Add calls to it.\n+\t(OMP_TASK_CLAUSES, OMP_TARGET_CLAUSES, OMP_TASKLOOP_CLAUSES):\n+\tAdd OMP_CLAUSE_IN_REDUCTION.\n+\t(gfc_match_omp_taskgroup): Add task_reduction matching.\n+\t(resolve_omp_clauses): Update for new reduction clause changes;\n+\tremove removed nonmonotonic-schedule restrictions.\n+\t(gfc_resolve_omp_parallel_blocks): Add new enums to switch.\n+\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n+\tgfc_trans_omp_reduction_list, gfc_trans_omp_clauses,\n+\tgfc_split_omp_clauses): Handle updated reduction clause.\n+\n+2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/95847\n+\t* trans-decl.c (gfc_get_symbol_decl): Do not (re)set the location\n+\tof an external procedure.\n+\t(build_entry_thunks, generate_coarray_init, create_main_function,\n+\tgfc_generate_function_code): Use fndecl's location in BIND_EXPR.\n+\n 2020-11-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/90111"}, {"sha": "58726a886b73654658ce160348b037eac34aea56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,213 @@\n+2020-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* g++.dg/diagnostic/pr87386.C: Adjust expected output.\n+\t* g++.dg/diagnostic/static_assert1.C: New test.\n+\t* g++.dg/diagnostic/static_assert2.C: New test.\n+\n+2020-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/52830\n+\tPR c++/88982\n+\tPR c++/90799\n+\tPR c++/87765\n+\tPR c++/89565\n+\t* g++.dg/cpp0x/constexpr-52830.C: New test.\n+\t* g++.dg/cpp0x/vt-88982.C: New test.\n+\t* g++.dg/cpp1z/class-deduction76.C: New test.\n+\t* g++.dg/cpp1z/constexpr-lambda26.C: New test.\n+\t* g++.dg/cpp2a/nontype-class39.C: New test.\n+\n+2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/schedule-modifiers-2.f90: Remove some dg-error.\n+\t* gfortran.dg/gomp/reduction4.f90: New test.\n+\t* gfortran.dg/gomp/reduction5.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-1.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-2.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-3.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-4.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-5.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-6.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-7.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-8.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-9.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-10.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-11.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-12.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-13.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-14.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-15.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-16.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-17.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-18.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-19.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-20.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-21.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-22.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-23.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-24.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-25.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-26.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-27.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-28.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-29.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-30.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-31.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-32.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-33.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-34.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-35.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-36.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-37.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-38.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-39.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-40.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-41.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-42.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-43.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-44.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-45.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-46.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-47.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-48.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-49.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-50.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-51.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-52.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-53.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-54.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-55.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-56.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-57.f90: New test.\n+\t* gfortran.dg/gomp/workshare-reduction-58.f90: New test.\n+\n+2020-11-10  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* c-c++-common/ubsan/sanitize-recover-7.c: Update testcase.\n+\n+2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97748\n+\t* c-c++-common/Wunused-value-1.c: New test.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97769\n+\t* gcc.dg/vect/pr97769.c: New testcase.\n+\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-c++-common/gomp/clauses-2.c: Remove dg-error cases now valid.\n+\t* gfortran.dg/gomp/map-2.f90: Likewise.\n+\t* c-c++-common/gomp/map-5.c: New testcase.\n+\n+2020-11-10  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/long-double-callee-abi-scan.c: New test.\n+\t* gcc.target/s390/vector/long-double-caller-abi-run.c: New test.\n+\t* gcc.target/s390/vector/long-double-caller-abi-scan.c: New test.\n+\t* gcc.target/s390/vector/long-double-copysign.c: New test.\n+\t* gcc.target/s390/vector/long-double-fprx2-constant.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-double.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-float.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-i16.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-i32.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-i64.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-i8.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-u16.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-u32.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-u64.c: New test.\n+\t* gcc.target/s390/vector/long-double-from-u8.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-double.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-float.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-i16.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-i32.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-i64.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-i8.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-u16.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-u32.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-u64.c: New test.\n+\t* gcc.target/s390/vector/long-double-to-u8.c: New test.\n+\t* gcc.target/s390/vector/long-double-vec-duplicate.c: New test.\n+\t* gcc.target/s390/vector/long-double-wf.h: New test.\n+\t* gcc.target/s390/vector/long-double-wfaxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfcxb-0001.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfcxb-0111.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfcxb-1011.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfcxb-1101.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfdxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfixb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfkxb-0111.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfkxb-1011.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfkxb-1101.c: New test.\n+\t* gcc.target/s390/vector/long-double-wflcxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wflpxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmaxb-2.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmaxb-3.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmaxb-disabled.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmaxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmsxb-disabled.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmsxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfmxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfnmaxb-disabled.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfnmaxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfnmsxb-disabled.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfnmsxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfsqxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfsxb-1.c: New test.\n+\t* gcc.target/s390/vector/long-double-wfsxb.c: New test.\n+\t* gcc.target/s390/vector/long-double-wftcixb-1.c: New test.\n+\t* gcc.target/s390/vector/long-double-wftcixb.c: New test.\n+\n+2020-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt88.adb: New test.\n+\n+2020-11-10  David Candler  <david.candler@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_high_n.c: Added skip\n+\tdirective.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrun_high_n.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshrn_high_n.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_high_n.c: Likewise.\n+\n+2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97764\n+\t* gcc.c-torture/execute/pr97764.c: New test.\n+\n+2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/95847\n+\t* gfortran.dg/coverage.f90: New test.\n+\n+2020-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97760\n+\t* gcc.dg/vect/pr97760.c: New testcase.\n+\n+2020-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/opt/pr97767.C: New test.\n+\n+2020-11-10  hongyuw1  <hongyuw1@intel.com>\n+\n+\t* gcc.target/i386/keylocker-aesdec128kl.c: Adjust regex patterns.\n+\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.\n+\t* gcc.target/i386/keylocker-encodekey128.c: Likewise.\n+\t* gcc.target/i386/keylocker-encodekey256.c: Likewise.\n+\t* gcc.target/i386/keylocker-aesenc256kl.c: New test.\n+\n+2020-11-10  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97567-2.c: New.\n+\n 2020-11-09  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1914"}, {"sha": "46f821677be41fa3446cdaf42b92b145c920dc3d", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,9 @@\n+2020-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* libcp1plugin.cc (plugin_add_static_assert): Pass false to\n+\tfinish_static_assert.\n+\n 2020-11-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcc1plugin.cc (address_rewriter): Rename"}, {"sha": "4cc579f72f973986cd194c881318fca05add6725", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,17 @@\n+2020-11-10  Jeff Law  <law@redhat.com>\n+\n+\t* libgcc2.c: Fix whitespace issues in most recent change.\n+\n+2020-11-10  Stefan Kanthak  <stefan.kanthak@nexgo.de>\n+\n+\t* libgcc2.c (__addvSI3): Use overflow builtins.\n+\t(__addvsi3, __addvDI3 ,__subvSI3, __subvsi3): Likewise.\n+\t(__subvDI3 __mulvSI3, __mulvsi3, __negvSI2): Likewise.\n+\t(__negvsi2, __negvDI2): Likewise.\n+\t(__cmpdi2, __ucmpdi2): Adjust implementation to improve\n+\tgenerated code.\n+\t* libgcc2.h (__ucmpdi2): Adjust prototype.\n+\n 2020-11-03  Pat Bernardi  <bernardi@adacore.com>\n \t    Olivier Hainque   <hainque@adacore.com>\n "}, {"sha": "4930d1d05fa72b12e584748a8c814fa7e6438c71", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,18 @@\n+2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* libgomp.h (enum gomp_map_vars_kind): Adjust enum values to be bit-flag\n+\tusable.\n+\t* oacc-mem.c (acc_map_data): Adjust gomp_map_vars argument flags to\n+\t'GOMP_MAP_VARS_OPENACC | GOMP_MAP_VARS_ENTER_DATA'.\n+\t(goacc_enter_datum): Likewise for call to gomp_map_vars_async.\n+\t(goacc_enter_data_internal): Likewise.\n+\t* target.c (gomp_map_vars_internal):\n+\tChange checks of GOMP_MAP_VARS_ENTER_DATA to use bit-and (&). Adjust use\n+\tof gomp_attach_pointer for OpenMP cases.\n+\t(gomp_exit_data): Add handling of GOMP_MAP_DETACH.\n+\t(GOMP_target_enter_exit_data): Add handling of GOMP_MAP_ATTACH.\n+\t* testsuite/libgomp.c-c++-common/ptr-attach-1.c: New testcase.\n+\n 2020-11-05  Ulrich Drepper  <drepper@redhat.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n "}, {"sha": "d2cbb63d5a03e9d4ec9956217528b10429aa474c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6226419f566bb9f68d9f2dc7d3aca501efaa98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "patch": "@@ -1,3 +1,66 @@\n+2020-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/locale/generic/c_locale.cc (__set_C_locale()): New function\n+\tto set the \"C\" locale and return the name of the previous locale.\n+\t(__convert_to_v<float>, __convert_to_v<double>)\n+\t(__convert_to_v<long double>): Use __set_C_locale and set failbit on\n+\terror.\n+\n+2020-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/sstream (basic_stringbug, basic_istringstream)\n+\t(basic_ostringstream, basic_stringstream): Reorder C++20\n+\tconstructors to be declared next to other constructors.\n+\n+2020-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Tighten patterns.\n+\t(GLIBCXX_3.4.29): Export new symbols.\n+\t* include/bits/alloc_traits.h (__allocator_like): New concept.\n+\t* include/std/sstream (basic_stringbuf::swap): Add exception\n+\tspecification.\n+\t(basic_stringbuf::str() const): Add ref-qualifier. Use new\n+\t_M_high_mark function.\n+\t(basic_stringbuf::str(const SAlloc&) const): Define new function.\n+\t(basic_stringbuf::str() &&): Likewise.\n+\t(basic_stringbuf::str(const basic_string<C,T,SAlloc>&)):\n+\tLikewise.\n+\t(basic_stringbuf::str(basic_string<C,T,Alloc>&&)): Likewise.\n+\t(basic_stringbuf::view() const): Use _M_high_mark.\n+\t(basic_istringstream::str, basic_ostringstream::str)\n+\t(basic_stringstream::str): Define new overloads.\n+\t* src/c++20/sstream-inst.cc (basic_stringbuf::str)\n+\t(basic_istringstream::str, basic_ostringstream::str)\n+\t(basic_stringstream::str): Explicit instantiation definitions\n+\tfor new overloads.\n+\t* testsuite/27_io/basic_istringstream/view/char/1.cc: Add more\n+\tchecks.\n+\t* testsuite/27_io/basic_istringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/view/char/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringstream/view/char/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istringstream/str/char/2.cc: New test.\n+\t* testsuite/27_io/basic_istringstream/str/wchar_t/2.cc: New test.\n+\t* testsuite/27_io/basic_ostringstream/str/char/3.cc: New test.\n+\t* testsuite/27_io/basic_ostringstream/str/wchar_t/3.cc: New test.\n+\t* testsuite/27_io/basic_stringbuf/str/char/4.cc: New test.\n+\t* testsuite/27_io/basic_stringbuf/str/wchar_t/4.cc: New test.\n+\t* testsuite/27_io/basic_stringstream/str/char/5.cc: New test.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/5.cc.cc: New test.\n+\n+2020-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97415\n+\t* include/std/sstream (basic_stringbuf::_M_update_egptr)\n+\t(basic_stringbuf::__xfer_bufptrs::__xfer_bufptrs): Check for\n+\tnull before comparing pointers.\n+\n 2020-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/array: Remove."}]}