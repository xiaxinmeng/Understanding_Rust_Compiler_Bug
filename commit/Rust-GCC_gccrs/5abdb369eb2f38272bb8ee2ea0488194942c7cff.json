{"sha": "5abdb369eb2f38272bb8ee2ea0488194942c7cff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiZGIzNjllYjJmMzgyNzJiYjhlZTJlYTA0ODgxOTQ5NDJjN2NmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-10-09T21:16:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-10-09T21:16:09Z"}, "message": "re PR c++/84423 ([concepts] ICE with invalid using declaration)\n\n/cp\n2018-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84423\n\t* pt.c (convert_template_argument): Immediately return error_mark_node\n\tif the second argument is erroneous.\n\t* parser.c (cp_parser_type_id): Add location_t * parameter.\n\t(cp_parser_type_id_1): Likewise.\n\t(cp_parser_alias_declaration): Adjust cp_parser_type_id call,\n\tobtain the location of the type and save it.\n\t(cp_parser_template_type_arg): Adjust.\n\t(cp_parser_trailing_type_id): Likewise.\n\t* decl.c (grokdeclarator): Improve error message for 'auto' in\n\talias declaration.\n\n/testsuite\n2018-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84423\n\t* g++.dg/concepts/pr84423-1.C: New.\n\t* g++.dg/concepts/pr84423-2.C: Likewise.\n\t* g++.dg/cpp0x/auto39.C: Test location too.\n\t* g++.dg/cpp0x/auto9.C: Likewise.\n\t* g++.dg/cpp1y/pr60384.C: Likewise.\n\nFrom-SVN: r264996", "tree": {"sha": "adcae0bb82ca3dd8623043c53ce73c8537089aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adcae0bb82ca3dd8623043c53ce73c8537089aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5abdb369eb2f38272bb8ee2ea0488194942c7cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abdb369eb2f38272bb8ee2ea0488194942c7cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abdb369eb2f38272bb8ee2ea0488194942c7cff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abdb369eb2f38272bb8ee2ea0488194942c7cff/comments", "author": null, "committer": null, "parents": [{"sha": "2f039722d079d4f6cc060e3b9da0e9ba39d65478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f039722d079d4f6cc060e3b9da0e9ba39d65478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f039722d079d4f6cc060e3b9da0e9ba39d65478"}], "stats": {"total": 89, "additions": 74, "deletions": 15}, "files": [{"sha": "975f866c0b7aaf9ff6b0229a6328aed9b32277bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -1,3 +1,17 @@\n+2018-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84423\n+\t* pt.c (convert_template_argument): Immediately return error_mark_node\n+\tif the second argument is erroneous.\n+\t* parser.c (cp_parser_type_id): Add location_t * parameter.\n+\t(cp_parser_type_id_1): Likewise.\n+\t(cp_parser_alias_declaration): Adjust cp_parser_type_id call,\n+\tobtain the location of the type and save it.\n+\t(cp_parser_template_type_arg): Adjust.\n+\t(cp_parser_trailing_type_id): Likewise.\n+\t* decl.c (grokdeclarator): Improve error message for 'auto' in\n+\talias declaration.\n+\n 2018-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71128"}, {"sha": "5ebfaaf85e6e24bebf3d16645a72a55473dd8d2c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -11879,6 +11879,7 @@ grokdeclarator (const cp_declarator *declarator,\n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n   if (typedef_p && decl_context != TYPENAME)\n     {\n+      bool alias_p = decl_spec_seq_has_spec_p (declspecs, ds_alias);\n       tree decl;\n \n       /* This declaration:\n@@ -11901,7 +11902,12 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (type_uses_auto (type))\n \t{\n-\t  error (\"typedef declared %<auto%>\");\n+\t  if (alias_p)\n+\t    error_at (declspecs->locations[ds_type_spec],\n+\t\t      \"%<auto%> not allowed in alias declaration\");\n+\t  else\n+\t    error_at (declspecs->locations[ds_type_spec],\n+\t\t      \"typedef declared %<auto%>\");\n \t  type = error_mark_node;\n \t}\n \n@@ -11961,7 +11967,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t      inlinep, friendp, raises != NULL_TREE,\n \t\t      declspecs->locations);\n \n-      if (decl_spec_seq_has_spec_p (declspecs, ds_alias))\n+      if (alias_p)\n \t/* Acknowledge that this was written:\n \t     `using analias = atype;'.  */\n \tTYPE_DECL_ALIAS_P (decl) = 1;"}, {"sha": "5e83b20360a293037bfb6e86f29b67653b6c2514", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -2216,12 +2216,12 @@ static tree cp_parser_late_return_type_opt\n static tree cp_parser_declarator_id\n   (cp_parser *, bool);\n static tree cp_parser_type_id\n-  (cp_parser *);\n+  (cp_parser *, location_t * = NULL);\n static tree cp_parser_template_type_arg\n   (cp_parser *);\n static tree cp_parser_trailing_type_id (cp_parser *);\n static tree cp_parser_type_id_1\n-  (cp_parser *, bool, bool);\n+  (cp_parser *, bool, bool, location_t *);\n static void cp_parser_type_specifier_seq\n   (cp_parser *, bool, bool, cp_decl_specifier_seq *);\n static tree cp_parser_parameter_declaration_clause\n@@ -19034,7 +19034,7 @@ static tree\n cp_parser_alias_declaration (cp_parser* parser)\n {\n   tree id, type, decl, pushed_scope = NULL_TREE, attributes;\n-  location_t id_location;\n+  location_t id_location, type_location;\n   cp_declarator *declarator;\n   cp_decl_specifier_seq decl_specs;\n   bool member_p;\n@@ -19086,7 +19086,7 @@ cp_parser_alias_declaration (cp_parser* parser)\n \tG_(\"types may not be defined in alias template declarations\");\n     }\n \n-  type = cp_parser_type_id (parser);\n+  type = cp_parser_type_id (parser, &type_location);\n \n   /* Restore the error message if need be.  */\n   if (parser->num_template_parameter_lists)\n@@ -19120,6 +19120,7 @@ cp_parser_alias_declaration (cp_parser* parser)\n   set_and_check_decl_spec_loc (&decl_specs,\n \t\t\t       ds_alias,\n \t\t\t       using_token);\n+  decl_specs.locations[ds_type_spec] = type_location;\n \n   if (parser->num_template_parameter_lists\n       && !cp_parser_check_template_parameters (parser,\n@@ -21110,7 +21111,7 @@ cp_parser_declarator_id (cp_parser* parser, bool optional_p)\n \n static tree\n cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n-\t\t     bool is_trailing_return)\n+\t\t     bool is_trailing_return, location_t * type_location)\n {\n   cp_decl_specifier_seq type_specifier_seq;\n   cp_declarator *abstract_declarator;\n@@ -21119,6 +21120,9 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n   cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\tis_trailing_return,\n \t\t\t\t&type_specifier_seq);\n+  if (type_location)\n+    *type_location = type_specifier_seq.locations[ds_type_spec];\n+\n   if (is_template_arg && type_specifier_seq.type\n       && TREE_CODE (type_specifier_seq.type) == TEMPLATE_TYPE_PARM\n       && CLASS_PLACEHOLDER_TEMPLATE (type_specifier_seq.type))\n@@ -21184,9 +21188,9 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n }\n \n static tree\n-cp_parser_type_id (cp_parser *parser)\n+cp_parser_type_id (cp_parser *parser, location_t * type_location)\n {\n-  return cp_parser_type_id_1 (parser, false, false);\n+  return cp_parser_type_id_1 (parser, false, false, type_location);\n }\n \n static tree\n@@ -21196,7 +21200,7 @@ cp_parser_template_type_arg (cp_parser *parser)\n   const char *saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n     = G_(\"types may not be defined in template arguments\");\n-  r = cp_parser_type_id_1 (parser, true, false);\n+  r = cp_parser_type_id_1 (parser, true, false, NULL);\n   parser->type_definition_forbidden_message = saved_message;\n   if (cxx_dialect >= cxx14 && !flag_concepts && type_uses_auto (r))\n     {\n@@ -21209,7 +21213,7 @@ cp_parser_template_type_arg (cp_parser *parser)\n static tree\n cp_parser_trailing_type_id (cp_parser *parser)\n {\n-  return cp_parser_type_id_1 (parser, false, true);\n+  return cp_parser_type_id_1 (parser, false, true, NULL);\n }\n \n /* Parse a type-specifier-seq."}, {"sha": "f290cb32fc28b8257de010c77426b85628bbb86b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -7776,7 +7776,7 @@ convert_template_argument (tree parm,\n   tree val;\n   int is_type, requires_type, is_tmpl_type, requires_tmpl_type;\n \n-  if (parm == error_mark_node)\n+  if (parm == error_mark_node || error_operand_p (arg))\n     return error_mark_node;\n \n   /* Trivially convert placeholders. */"}, {"sha": "978ecdaa5ade450c98630f7630982d55a9a3182b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -1,3 +1,12 @@\n+2018-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84423\n+\t* g++.dg/concepts/pr84423-1.C: New.\n+\t* g++.dg/concepts/pr84423-2.C: Likewise.\n+\t* g++.dg/cpp0x/auto39.C: Test location too.\n+\t* g++.dg/cpp0x/auto9.C: Likewise.\n+\t* g++.dg/cpp1y/pr60384.C: Likewise.\n+\n 2018-10-09  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* gcc.target/powerpc/sse3-check.h: New file."}, {"sha": "9f772dc3c2264882d86075353e7d7da0860718c8", "filename": "gcc/testsuite/g++.dg/concepts/pr84423-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-1.C?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fconcepts\" }\n+\n+template<typename> using A = auto;  // { dg-error \"30:.auto. not allowed in alias declaration\" }\n+\n+template<template<typename> class> struct B {};\n+\n+B<A> b;"}, {"sha": "b4d00c313810d825a8058d4c5794a22dd2ce4572", "filename": "gcc/testsuite/g++.dg/concepts/pr84423-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84423-2.C?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fconcepts\" }\n+\n+using A = auto;  // { dg-error \"11:.auto. not allowed in alias declaration\" }\n+\n+using A1 = const auto;  // { dg-error \"18:.auto. not allowed in alias declaration\" }\n+\n+using A2 = volatile auto;  // { dg-error \"21:.auto. not allowed in alias declaration\" }\n+\n+using A3 = const volatile auto;  // { dg-error \"27:.auto. not allowed in alias declaration\" }\n+\n+typedef auto B;  // { dg-error \"9:typedef declared .auto.\" }\n+\n+typedef const auto B1;  // { dg-error \"15:typedef declared .auto.\" }\n+\n+typedef volatile auto B2;  // { dg-error \"18:typedef declared .auto.\" }\n+\n+typedef const volatile auto B3;  // { dg-error \"24:typedef declared .auto.\" }"}, {"sha": "ef830806630e289578567d4ad29f4741eb47767e", "filename": "gcc/testsuite/g++.dg/cpp0x/auto39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto39.C?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -1,6 +1,6 @@\n // PR c++/58560\n // { dg-do compile { target c++11 } }\n \n-typedef auto T;     // { dg-error \"typedef declared 'auto'\" }\n+typedef auto T;     // { dg-error \"9:typedef declared 'auto'\" }\n \n void foo() { T(); }"}, {"sha": "8e49a01beb2ae1f3949d4e8adec3020748fbe614", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -120,4 +120,4 @@ void qq (auto);\t\t       // { dg-error \"auto\" \"\" { target { ! concepts } } }\n void qr (auto*);\t       // { dg-error \"auto\" \"\" { target { ! concepts } } }\n \n // PR c++/46145\n-typedef auto autot;\t\t// { dg-error \"auto\" }\n+typedef auto autot;\t\t// { dg-error \"9:typedef declared .auto.\" }"}, {"sha": "a6d7debfb9965427faa8cb39670211b3011cb92c", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60384.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abdb369eb2f38272bb8ee2ea0488194942c7cff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C?ref=5abdb369eb2f38272bb8ee2ea0488194942c7cff", "patch": "@@ -5,5 +5,5 @@ template<typename> int foo();\n \n struct A\n {\n-  typedef auto foo<>();  // { dg-error \"typedef declared 'auto'\" }\n+  typedef auto foo<>();  // { dg-error \"11:typedef declared 'auto'\" }\n };"}]}