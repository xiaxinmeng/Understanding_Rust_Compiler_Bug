{"sha": "d24ecd21b30e9e914788443666912d4dee5be6bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0ZWNkMjFiMzBlOWU5MTQ3ODg0NDM2NjY5MTJkNGRlZTViZTZiYw==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-04-03T21:00:56Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-04-03T21:00:56Z"}, "message": "cpppch.c (reset_ht): Remove.\n\n\t* cpppch.c (reset_ht): Remove.\n\t(cpp_read_state): Remove loop to reset hashtable identifiers.\n\t* ggc-common.c (gt_pch_save): Add call to gt_pch_fixup_stringpool\n\tafter pch file is written.\n\t* ggc.h (gt_pch_fixup_stringpool): Declare.\n\t* stringpool.c (ht_copy_and_clear): Define.  Callback.  Copy\n\thashnode's value to another hashtable, then clear the original.\n\t(saved_ident_hash): Define.\n\t(gt_pch_save_stringpool): Create saved_ident_hash, use it to\n\tstore definitions in ident_hash, and clear ident_hash.\n\t(gt_pch_fixup_stringpool): Define.  Restore definitions from\n\tsaved_ident_hash to ident_hash, then destroy saved_ident_hash.\n\nFrom-SVN: r65215", "tree": {"sha": "dbb1adecad038d29321ac64a1fb29c837c4b0c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb1adecad038d29321ac64a1fb29c837c4b0c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24ecd21b30e9e914788443666912d4dee5be6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24ecd21b30e9e914788443666912d4dee5be6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24ecd21b30e9e914788443666912d4dee5be6bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24ecd21b30e9e914788443666912d4dee5be6bc/comments", "author": null, "committer": null, "parents": [{"sha": "bcc53e2a94852391230761e15c044cd48797d4d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc53e2a94852391230761e15c044cd48797d4d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc53e2a94852391230761e15c044cd48797d4d1"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "0760413f14f59a067d853a7ffbc3aca4d53116b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d24ecd21b30e9e914788443666912d4dee5be6bc", "patch": "@@ -1,3 +1,18 @@\n+2003-04-03  Matt Austern  <austern@apple.com>\n+\n+\t* cpppch.c (reset_ht): Remove.\n+\t(cpp_read_state): Remove loop to reset hashtable identifiers.\n+\t* ggc-common.c (gt_pch_save): Add call to gt_pch_fixup_stringpool\n+\tafter pch file is written.\n+\t* ggc.h (gt_pch_fixup_stringpool): Declare.\n+\t* stringpool.c (ht_copy_and_clear): Define.  Callback.  Copy\n+\thashnode's value to another hashtable, then clear the original.\n+\t(saved_ident_hash): Define.\n+\t(gt_pch_save_stringpool): Create saved_ident_hash, use it to\n+\tstore definitions in ident_hash, and clear ident_hash.\n+\t(gt_pch_fixup_stringpool): Define.  Restore definitions from\n+\tsaved_ident_hash to ident_hash, then destroy saved_ident_hash.\n+\n Thu Apr  3 22:27:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgrtl.c (update_bb_for_insn): Do not set block for barriers."}, {"sha": "637160cd1a899156c7d9e927d4cc4ac6e0118a30", "filename": "gcc/cpppch.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fcpppch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fcpppch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpppch.c?ref=d24ecd21b30e9e914788443666912d4dee5be6bc", "patch": "@@ -34,7 +34,6 @@ static int comp_hashnodes PARAMS ((const void *, const void *));\n static int collect_ht_nodes PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n static int write_defs PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n static int save_macros PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n-static int reset_ht PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n \n /* This structure represents a macro definition on disk.  */\n struct macrodef_struct \n@@ -628,23 +627,6 @@ cpp_prepare_state (r, data)\n   *data = d;\n }\n \n-/* Erase all the existing macros and assertions.  */\n-\n-static int \n-reset_ht (r, h, unused)\n-     cpp_reader *r ATTRIBUTE_UNUSED;\n-     cpp_hashnode *h;\n-     void *unused ATTRIBUTE_UNUSED;\n-{\n-  if (h->type != NT_VOID\n-      && (h->flags & NODE_BUILTIN) == 0)\n-    {\n-      h->type = NT_VOID;\n-      memset (&h->value, 0, sizeof (h->value));\n-    }\n-  return 1;\n-}\n-\n /* Given a precompiled header that was previously determined to be valid,\n    apply all its definitions (and undefinitions) to the current state. \n    DEPNAME is passed to deps_restore.  */\n@@ -664,11 +646,6 @@ cpp_read_state (r, name, f, data)\n   size_t i, mac_count;\n   int saved_line = r->line;\n \n-  /* Erase all the existing hashtable entries for macros.  At this\n-     point, they're all from the PCH file, and their pointers won't be\n-     valid.  */\n-  cpp_forall_identifiers (r, reset_ht, NULL);\n-\n   /* Restore spec_nodes, which will be full of references to the old \n      hashtable entries and so will now be invalid.  */\n   {"}, {"sha": "db8cbd03207bf9476a57ab521e0473bec9cb7909", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=d24ecd21b30e9e914788443666912d4dee5be6bc", "patch": "@@ -543,6 +543,7 @@ gt_pch_save (f)\n \tmemcpy (state.ptrs[i]->obj, this_object, state.ptrs[i]->size);\n     }\n   ggc_pch_finish (state.d, state.f);\n+  gt_pch_fixup_stringpool ();\n \n   free (state.ptrs);\n   htab_delete (saving_htab);"}, {"sha": "e1364a3a84ee20e8d10753d392089f8d4cd34007", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=d24ecd21b30e9e914788443666912d4dee5be6bc", "patch": "@@ -124,6 +124,7 @@ extern void ggc_mark_roots\t\tPARAMS ((void));\n /* Save and restore the string pool entries for PCH.  */\n \n extern void gt_pch_save_stringpool\tPARAMS ((void));\n+extern void gt_pch_fixup_stringpool     PARAMS ((void));\n extern void gt_pch_restore_stringpool\tPARAMS ((void));\n \n /* PCH and GGC handling for strings, mostly trivial.  */"}, {"sha": "afb9bdb0972023d1577e56b9dcc7cb1c31af4fc1", "filename": "gcc/stringpool.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ecd21b30e9e914788443666912d4dee5be6bc/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=d24ecd21b30e9e914788443666912d4dee5be6bc", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"tree.h\"\n #include \"hashtable.h\"\n+#include \"cpplib.h\"\n \n /* The \"\" allocated string.  */\n const char empty_string[] = \"\";\n@@ -50,6 +51,7 @@ static struct obstack string_stack;\n \n static hashnode alloc_node PARAMS ((hash_table *));\n static int mark_ident PARAMS ((struct cpp_reader *, hashnode, const PTR));\n+static int ht_copy_and_clear PARAMS ((struct cpp_reader *, hashnode, const void *));\n \n /* Initialize the string pool.  */\n void\n@@ -214,6 +216,33 @@ struct string_pool_data GTY(())\n \n static GTY(()) struct string_pool_data * spd;\n \n+static int \n+ht_copy_and_clear (r, hp, ht2_p)\n+     cpp_reader *r ATTRIBUTE_UNUSED;\n+     hashnode hp;\n+     const void *ht2_p;\n+{\n+  cpp_hashnode *h = CPP_HASHNODE (hp);\n+  struct ht *ht2 = (struct ht *) ht2_p;\n+\n+  if (h->type != NT_VOID\n+      && (h->flags & NODE_BUILTIN) == 0)\n+    {\n+      cpp_hashnode *h2 = CPP_HASHNODE (ht_lookup (ht2,\n+\t\t\t\t\t\t  NODE_NAME (h),\n+\t\t\t\t\t\t  NODE_LEN (h),\n+\t\t\t\t\t\t  HT_ALLOC));\n+      h2->type = h->type;\n+      memcpy (&h2->value, &h->value, sizeof (h->value));\n+\n+      h->type = NT_VOID;\n+      memset (&h->value, 0, sizeof (h->value));\n+    }\n+  return 1;\n+}\n+\n+static struct ht *saved_ident_hash;\n+\n void\n gt_pch_save_stringpool ()\n {\n@@ -228,6 +257,18 @@ gt_pch_save_stringpool ()\n       spd->entries[i] = HT_IDENT_TO_GCC_IDENT (ident_hash->entries[i]);\n     else\n       spd->entries[i] = NULL;\n+\n+  saved_ident_hash = ht_create (14);\n+  saved_ident_hash->alloc_node = alloc_node;\n+  ht_forall (ident_hash, ht_copy_and_clear, saved_ident_hash);\n+}\n+\n+void\n+gt_pch_fixup_stringpool ()\n+{\n+  ht_forall (saved_ident_hash, ht_copy_and_clear, ident_hash);\n+  ht_destroy (saved_ident_hash);\n+  saved_ident_hash = 0;\n }\n \n void"}]}