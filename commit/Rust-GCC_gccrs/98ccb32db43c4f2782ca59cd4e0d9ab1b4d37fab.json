{"sha": "98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjY2IzMmRiNDNjNGYyNzgyY2E1OWNkNGUwZDlhYjFiNGQzN2ZhYg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-11-21T21:50:58Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-11-21T21:50:58Z"}, "message": "Correct sparc's REGMODE_NATURAL_SIZE and MODES_TIEABLE_P wrt. vector modes.\n\n\t* config/sparc/sparc.c (sparc_regmode_natural_size): New function\n\timplementing REGMODE_NATURAL_SIZE taking into consideration vector\n\tmodes.\n\t(sparc_modes_tieable_p): Similarly for MODES_TIEABLE_P.\n\t* config/sparc/sparc-protos.h (sparc_regmode_natural_size,\n\tsparc_modes_tieable_p): Declare.\n\t* gcc/config/sparc/sparc.h (REGMODE_NATURAL_SIZE,\n\tMODES_TIEABLE_P): Use new helper functions.\n\nFrom-SVN: r181599", "tree": {"sha": "e83a97dd65882dcecbef6e3ce93db0030de097b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e83a97dd65882dcecbef6e3ce93db0030de097b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e57a3447f7117ade80869bbcfeb8f8abc3af346a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57a3447f7117ade80869bbcfeb8f8abc3af346a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57a3447f7117ade80869bbcfeb8f8abc3af346a"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "d45424f8637b8de7500db5f05ef93bc523b15a8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "patch": "@@ -1,5 +1,14 @@\n 2011-11-21  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/sparc.c (sparc_regmode_natural_size): New function\n+\timplementing REGMODE_NATURAL_SIZE taking into consideration vector\n+\tmodes.\n+\t(sparc_modes_tieable_p): Similarly for MODES_TIEABLE_P.\n+\t* config/sparc/sparc-protos.h (sparc_regmode_natural_size,\n+\tsparc_modes_tieable_p): Declare.\n+\t* gcc/config/sparc/sparc.h (REGMODE_NATURAL_SIZE,\n+\tMODES_TIEABLE_P): Use new helper functions.\n+\n \tRevert\n \t2011-11-16  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n "}, {"sha": "10fa5edbb66111ad3c904eb7057e860fd2219745", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "patch": "@@ -109,6 +109,8 @@ extern void sparc_expand_vector_init (rtx, rtx);\n extern void sparc_expand_vec_perm_bmask(enum machine_mode, rtx);\n extern bool sparc_expand_conditional_move (enum machine_mode, rtx *);\n extern void sparc_expand_vcond (enum machine_mode, rtx *, int, int);\n+unsigned int sparc_regmode_natural_size (enum machine_mode);\n+bool sparc_modes_tieable_p (enum machine_mode, enum machine_mode);\n #endif /* RTX_CODE */\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "b315698bc94e97cd75e14853e2ce02d227472fbb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "patch": "@@ -11616,4 +11616,69 @@ sparc_expand_vcond (enum machine_mode mode, rtx *operands, int ccode, int fcode)\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0], bshuf));\n }\n \n+/* On sparc, any mode which naturally allocates into the float\n+   registers should return 4 here.  */\n+\n+unsigned int\n+sparc_regmode_natural_size (enum machine_mode mode)\n+{\n+  int size = UNITS_PER_WORD;\n+\n+  if (TARGET_ARCH64)\n+    {\n+      enum mode_class mclass = GET_MODE_CLASS (mode);\n+\n+      if (mclass == MODE_FLOAT || mclass == MODE_VECTOR_INT)\n+\tsize = 4;\n+    }\n+\n+  return size;\n+}\n+\n+/* Return TRUE if it is a good idea to tie two pseudo registers\n+   when one has mode MODE1 and one has mode MODE2.\n+   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n+   for any hard reg, then this must be FALSE for correct output.\n+\n+   For V9 we have to deal with the fact that only the lower 32 floating\n+   point registers are 32-bit addressable.  */\n+\n+bool\n+sparc_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n+{\n+  enum mode_class mclass1, mclass2;\n+  unsigned short size1, size2;\n+\n+  if (mode1 == mode2)\n+    return true;\n+\n+  mclass1 = GET_MODE_CLASS (mode1);\n+  mclass2 = GET_MODE_CLASS (mode2);\n+  if (mclass1 != mclass2)\n+    return false;\n+\n+  if (! TARGET_V9)\n+    return true;\n+\n+  /* Classes are the same and we are V9 so we have to deal with upper\n+     vs. lower floating point registers.  If one of the modes is a\n+     4-byte mode, and the other is not, we have to mark them as not\n+     tieable because only the lower 32 floating point register are\n+     addressable 32-bits at a time.\n+\n+     We can't just test explicitly for SFmode, otherwise we won't\n+     cover the vector mode cases properly.  */\n+\n+  if (mclass1 != MODE_FLOAT && mclass1 != MODE_VECTOR_INT)\n+    return true;\n+\n+  size1 = GET_MODE_SIZE (mode1);\n+  size2 = GET_MODE_SIZE (mode2);\n+  if ((size1 > 4 && size2 == 4)\n+      || (size2 > 4 && size1 == 4))\n+    return false;\n+\n+  return true;\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "32f8c1074aee0d5bbc61749c077b32cc7536008a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "patch": "@@ -716,8 +716,7 @@ extern enum cmodel sparc_cmodel;\n \n /* Due to the ARCH64 discrepancy above we must override this next\n    macro too.  */\n-#define REGMODE_NATURAL_SIZE(MODE) \\\n-  ((TARGET_ARCH64 && FLOAT_MODE_P (MODE)) ? 4 : UNITS_PER_WORD)\n+#define REGMODE_NATURAL_SIZE(MODE) sparc_regmode_natural_size (MODE)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    See sparc.c for how we initialize this.  */\n@@ -735,20 +734,7 @@ extern int sparc_mode_class[];\n    register window instruction in the prologue.  */\n #define HARD_REGNO_RENAME_OK(FROM, TO) ((FROM) != 1)\n \n-/* Value is 1 if it is a good idea to tie two pseudo registers\n-   when one has mode MODE1 and one has mode MODE2.\n-   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n-   for any hard reg, then this must be 0 for correct output.\n-\n-   For V9: SFmode can't be combined with other float modes, because they can't\n-   be allocated to the %d registers.  Also, DFmode won't fit in odd %f\n-   registers, but SFmode will.  */\n-#define MODES_TIEABLE_P(MODE1, MODE2) \\\n-  ((MODE1) == (MODE2)\t\t\t\t\t\t\\\n-   || (GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2)\t\t\\\n-       && (! TARGET_V9\t\t\t\t\t\t\\\n-\t   || (GET_MODE_CLASS (MODE1) != MODE_FLOAT\t\t\\\n-\t       || (MODE1 != SFmode && MODE2 != SFmode)))))\n+#define MODES_TIEABLE_P(MODE1, MODE2) sparc_modes_tieable_p (MODE1, MODE2)\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */"}]}