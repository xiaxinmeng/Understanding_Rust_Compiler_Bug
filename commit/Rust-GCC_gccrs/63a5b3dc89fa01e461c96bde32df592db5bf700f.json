{"sha": "63a5b3dc89fa01e461c96bde32df592db5bf700f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhNWIzZGM4OWZhMDFlNDYxYzk2YmRlMzJkZjU5MmRiNWJmNzAwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:44:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:44:30Z"}, "message": "[multiple changes]\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* style.adb: Fix typo.\n\n2017-09-08  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.adb (Underlying_Type): Add missing support for class-wide\n\ttypes that come from the limited view.\n\t* exp_attr.adb (Attribute_Address): Check class-wide type\n\tinterfaces using the underlying type to handle limited-withed\n\ttypes.\n\t(Attribute_Tag): Check class-wide type interfaces using\n\tthe underlying type to handle limited-withed types.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Predicated_Loop): Handle properly a loop\n\tover a subtype of a type with a static predicate, taking into\n\taccount the predicate function of the parent type and the bounds\n\tgiven in the loop specification.\n\t* sem_ch3.adb (Inherit_Predicate_Flags): For qn Itype created for\n\ta loop specification that is a subtype indication whose type mark\n\tis a type with a static predicate, inherit predicate function,\n\tused to build case statement for rewritten loop.\n\n2017-09-08  Justin Squirek  <squirek@adacore.com>\n\n\t* lib-load.adb: Modify printing of error message to exclude file\n\tline number.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode):\n\tdon't inline subprograms declared in both visible and private\n\tparts of a package.\n\t(In_Package_Spec): previously In_Package_Visible_Spec; now\n\tdetects subprograms declared both in visible and private parts\n\tof a package spec.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Build_Invariant_Procedure_Declaration): If\n\tthe type is an anonymous array in an object declaration, whose\n\tcomponent type has an invariant, use the object declaration\n\tas the insertion point for the invariant procedure, given that\n\tthere is no explicit type declaration for an anonymous array type.\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* a-cbprqu.ads, a-cbdlli.adb: Suppress warnings.\n\nFrom-SVN: r251876", "tree": {"sha": "286bbbee48bb1a6c769c7f09a02580d3bdac7e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286bbbee48bb1a6c769c7f09a02580d3bdac7e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a5b3dc89fa01e461c96bde32df592db5bf700f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a5b3dc89fa01e461c96bde32df592db5bf700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a5b3dc89fa01e461c96bde32df592db5bf700f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a5b3dc89fa01e461c96bde32df592db5bf700f/comments", "author": null, "committer": null, "parents": [{"sha": "3815f967f9fa3655ee4e9cdc44d6292e09f411de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3815f967f9fa3655ee4e9cdc44d6292e09f411de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3815f967f9fa3655ee4e9cdc44d6292e09f411de"}], "stats": {"total": 228, "additions": 186, "deletions": 42}, "files": [{"sha": "fc0f2caca19b7fb63f17038ddf80a99dcdce0b9b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -1,3 +1,63 @@\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* style.adb: Fix typo.\n+\n+2017-09-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.adb (Underlying_Type): Add missing support for class-wide\n+\ttypes that come from the limited view.\n+\t* exp_attr.adb (Attribute_Address): Check class-wide type\n+\tinterfaces using the underlying type to handle limited-withed\n+\ttypes.\n+\t(Attribute_Tag): Check class-wide type interfaces using\n+\tthe underlying type to handle limited-withed types.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Predicated_Loop): Handle properly a loop\n+\tover a subtype of a type with a static predicate, taking into\n+\taccount the predicate function of the parent type and the bounds\n+\tgiven in the loop specification.\n+\t* sem_ch3.adb (Inherit_Predicate_Flags): For qn Itype created for\n+\ta loop specification that is a subtype indication whose type mark\n+\tis a type with a static predicate, inherit predicate function,\n+\tused to build case statement for rewritten loop.\n+\n+2017-09-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* lib-load.adb: Modify printing of error message to exclude file\n+\tline number.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode):\n+\tdon't inline subprograms declared in both visible and private\n+\tparts of a package.\n+\t(In_Package_Spec): previously In_Package_Visible_Spec; now\n+\tdetects subprograms declared both in visible and private parts\n+\tof a package spec.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Build_Invariant_Procedure_Declaration): If\n+\tthe type is an anonymous array in an object declaration, whose\n+\tcomponent type has an invariant, use the object declaration\n+\tas the insertion point for the invariant procedure, given that\n+\tthere is no explicit type declaration for an anonymous array type.\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cbprqu.ads, a-cbdlli.adb: Suppress warnings.\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* a-strfix.adb (Trim): Compute Low and High only if needed.\n+\n+2017-09-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* lib-load.adb (Load_Main_Source): Add error output in the case a\n+\tsource file is missing.\n+\n 2017-09-08  Bob Duff  <duff@adacore.com>\n \n PR ada/80888"}, {"sha": "8f7b5374901ea2aa2ff6de3e5085201c7d0de1c1", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -1015,9 +1015,10 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n+      pragma Warnings (Off);\n       New_Item : Element_Type;\n-      pragma Unmodified (New_Item);\n-      --  OK to reference, see below. Needed to suppress front end warning.\n+      --  OK to reference, see below. Note that we need to suppress both the\n+      --  front end warning and the back end warning.\n \n    begin\n       --  There is no explicit element provided, but in an instance the element\n@@ -1026,7 +1027,6 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  initialization, so insert the specified number of possibly\n       --  initialized elements at the given position.\n \n-      pragma Warnings (Off); -- Needed to suppress back end warning\n       Insert (Container, Before, New_Item, Position, Count);\n       pragma Warnings (On);\n    end Insert;"}, {"sha": "d3e7e0f0bb9b1c501f9abb9b17740d08b696f88b", "filename": "gcc/ada/a-cbprqu.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fa-cbprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fa-cbprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.ads?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -88,9 +88,13 @@ package Ada.Containers.Bounded_Priority_Queues is\n \n       --  We need a better data structure here, such as a proper heap.  ???\n \n+      pragma Warnings (Off);\n+      --  Otherwise, we get warnings for the uninitialized variable in Insert\n+      --  in Ada.Containers.Bounded_Doubly_Linked_Lists.\n       package List_Types is new Bounded_Doubly_Linked_Lists\n         (Element_Type => Queue_Interfaces.Element_Type,\n          \"=\"          => Queue_Interfaces.\"=\");\n+      pragma Warnings (On);\n \n       type List_Type (Capacity : Count_Type) is tagged limited record\n          Container  : List_Types.List (Capacity);"}, {"sha": "265ec9c43ea05e6a5c17fcae0942290920805076", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -9300,6 +9300,15 @@ package body Einfo is\n       if Ekind (Id) = E_Record_Type_With_Private then\n          return Full_View (Id);\n \n+      --  If we have a class-wide type that comes from the limited view then\n+      --  we return the Underlying_Type of its nonlimited view.\n+\n+      elsif Ekind (Id) = E_Class_Wide_Type\n+        and then From_Limited_With (Id)\n+        and then Present (Non_Limited_View (Id))\n+      then\n+         return Underlying_Type (Non_Limited_View (Id));\n+\n       elsif Ekind (Id) in Incomplete_Or_Private_Kind then\n \n          --  If we have an incomplete or private type with a full view,\n@@ -9324,9 +9333,8 @@ package body Einfo is\n          then\n             return Underlying_Type (Underlying_Full_View (Id));\n \n-         --  If we have an incomplete entity that comes from the limited\n-         --  view then we return the Underlying_Type of its non-limited\n-         --  view.\n+         --  If we have an incomplete entity that comes from the limited view\n+         --  then we return the Underlying_Type of its nonlimited view.\n \n          elsif From_Limited_With (Id)\n            and then Present (Non_Limited_View (Id))"}, {"sha": "99a24e7139d5987004ddfaed36aad6ceaed328ac", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -2235,7 +2235,7 @@ package body Exp_Attr is\n          --  issues are taken care of by the virtual machine.\n \n          elsif Is_Class_Wide_Type (Ptyp)\n-           and then Is_Interface (Ptyp)\n+           and then Is_Interface (Underlying_Type (Ptyp))\n            and then Tagged_Type_Expansion\n            and then not (Nkind (Pref) in N_Has_Entity\n                           and then Is_Subprogram (Entity (Pref)))\n@@ -6241,7 +6241,7 @@ package body Exp_Attr is\n \n          elsif Comes_From_Source (N)\n             and then Is_Class_Wide_Type (Etype (Prefix (N)))\n-            and then Is_Interface (Etype (Prefix (N)))\n+            and then Is_Interface (Underlying_Type (Etype (Prefix (N))))\n          then\n             --  Generate:\n             --    (To_Tag_Ptr (Prefix'Address)).all"}, {"sha": "8762367dd1860593216f5c197d0467c43c1bbdd0", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -4698,6 +4698,10 @@ package body Exp_Ch5 is\n       --        end loop;\n       --     end;\n \n+      --  In addition, if the loop specification is given by a subtype\n+      --  indication that constrains a predicated type, the bounds of\n+      --  iteration are given by those of the subtype indication.\n+\n       else\n          Static_Predicate : declare\n             S    : Node_Id;\n@@ -4706,6 +4710,11 @@ package body Exp_Ch5 is\n             Alts : List_Id;\n             Cstm : Node_Id;\n \n+            --  If the domain is an itype, note the bounds of its range.\n+\n+            L_Hi  : Node_Id;\n+            L_Lo  : Node_Id;\n+\n             function Lo_Val (N : Node_Id) return Node_Id;\n             --  Given static expression or static range, returns an identifier\n             --  whose value is the low bound of the expression value or range.\n@@ -4760,6 +4769,11 @@ package body Exp_Ch5 is\n \n             Set_Warnings_Off (Loop_Id);\n \n+            if Is_Itype (Ltype) then\n+               L_Hi := High_Bound (Scalar_Range (Ltype));\n+               L_Lo := Low_Bound  (Scalar_Range (Ltype));\n+            end if;\n+\n             --  Loop to create branches of case statement\n \n             Alts := New_List;\n@@ -4768,11 +4782,20 @@ package body Exp_Ch5 is\n \n                --  Initial value is largest value in predicate.\n \n-               D :=\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Loop_Id,\n-                   Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n-                   Expression          => Hi_Val (Last (Stat)));\n+               if Is_Itype (Ltype) then\n+                  D :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Loop_Id,\n+                      Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n+                      Expression          => L_Hi);\n+\n+               else\n+                  D :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Loop_Id,\n+                      Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n+                      Expression          => Hi_Val (Last (Stat)));\n+               end if;\n \n                P := Last (Stat);\n                while Present (P) loop\n@@ -4794,15 +4817,34 @@ package body Exp_Ch5 is\n                   Prev (P);\n                end loop;\n \n+               if Is_Itype (Ltype)\n+                 and then Is_OK_Static_Expression (L_Lo)\n+                 and then\n+                   Expr_Value (L_Lo) /= Expr_Value (Lo_Val (First (Stat)))\n+               then\n+                  Append_To (Alts,\n+                    Make_Case_Statement_Alternative (Loc,\n+                      Statements       => New_List (Make_Exit_Statement (Loc)),\n+                      Discrete_Choices => New_List (L_Lo)));\n+               end if;\n+\n             else\n \n                --  Initial value is smallest value in predicate.\n \n-               D :=\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Loop_Id,\n-                   Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n-                   Expression          => Lo_Val (First (Stat)));\n+               if Is_Itype (Ltype) then\n+                  D :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Loop_Id,\n+                      Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n+                      Expression          => L_Lo);\n+               else\n+                  D :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Loop_Id,\n+                      Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n+                      Expression          => Lo_Val (First (Stat)));\n+               end if;\n \n                P := First (Stat);\n                while Present (P) loop\n@@ -4823,6 +4865,17 @@ package body Exp_Ch5 is\n \n                   Next (P);\n                end loop;\n+\n+               if Is_Itype (Ltype)\n+                 and then Is_OK_Static_Expression (L_Hi)\n+                 and then\n+                   Expr_Value (L_Hi) /= Expr_Value (Lo_Val (Last (Stat)))\n+               then\n+                  Append_To (Alts,\n+                    Make_Case_Statement_Alternative (Loc,\n+                      Statements       => New_List (Make_Exit_Statement (Loc)),\n+                      Discrete_Choices => New_List (L_Hi)));\n+               end if;\n             end if;\n \n             --  Add others choice"}, {"sha": "9c6ea2b6acc8061aebc4f48a9baa664c5e570262", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -3408,6 +3408,11 @@ package body Exp_Util is\n \n       --  Derived types with the full view as parent do not have a partial\n       --  view. Insert the invariant procedure after the derived type.\n+      --  Anonymous arrays in object declarations have no explicit declaration\n+      --  so use the related object declaration as the insertion point.\n+\n+      elsif Is_Itype (Work_Typ) and then Is_Array_Type (Work_Typ)  then\n+         Typ_Decl := Associated_Node_For_Itype (Work_Typ);\n \n       else\n          Typ_Decl := Declaration_Node (Full_Typ);"}, {"sha": "ca9986d20da504c21a099253bf5af79aa57131a3", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -1187,9 +1187,9 @@ package body Inline is\n       --  Returns True if subprogram Id defines a compilation unit\n       --  Shouldn't this be in Sem_Aux???\n \n-      function In_Package_Visible_Spec (Id : Node_Id) return Boolean;\n-      --  Returns True if subprogram Id is defined in the visible part of a\n-      --  package specification.\n+      function In_Package_Spec (Id : Node_Id) return Boolean;\n+      --  Returns True if subprogram Id is defined in the package\n+      --  specification, either its visible or private part.\n \n       ---------------------------------------------------\n       -- Has_Formal_With_Discriminant_Dependent_Fields --\n@@ -1288,24 +1288,17 @@ package body Inline is\n          return False;\n       end Has_Some_Contract;\n \n-      -----------------------------\n-      -- In_Package_Visible_Spec --\n-      -----------------------------\n+      ---------------------\n+      -- In_Package_Spec --\n+      ---------------------\n \n-      function In_Package_Visible_Spec  (Id : Node_Id) return Boolean is\n-         Decl : Node_Id := Parent (Parent (Id));\n-         P    : Node_Id;\n+      function In_Package_Spec (Id : Node_Id) return Boolean is\n+         P : constant Node_Id := Parent (Subprogram_Spec (Id));\n+         --  Parent of the subprogram's declaration\n \n       begin\n-         if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n-            Decl := Parent (Decl);\n-         end if;\n-\n-         P := Parent (Decl);\n-\n-         return Nkind (P) = N_Package_Specification\n-           and then List_Containing (Decl) = Visible_Declarations (P);\n-      end In_Package_Visible_Spec;\n+         return Nkind (Enclosing_Declaration (P)) = N_Package_Declaration;\n+      end In_Package_Spec;\n \n       ------------------------\n       -- Is_Unit_Subprogram --\n@@ -1351,9 +1344,11 @@ package body Inline is\n       if Is_Unit_Subprogram (Id) then\n          return False;\n \n-      --  Do not inline subprograms declared in the visible part of a package\n+      --  Do not inline subprograms declared in package specs, because they are\n+      --  not local, i.e. can be called either from anywhere (if declared in\n+      --  visible part) or from the child units (if declared in private part).\n \n-      elsif In_Package_Visible_Spec (Id) then\n+      elsif In_Package_Spec (Id) then\n          return False;\n \n       --  Do not inline subprograms declared in other units. This is important"}, {"sha": "f509721c3986b859a76ec621ffffdff4e02603fe", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -329,8 +329,14 @@ package body Lib.Load is\n          if Main_Source_File /= No_Source_File then\n             Version := Source_Checksum (Main_Source_File);\n          else\n-            Error_Msg_File_1 := Fname;\n-            Error_Msg (\"file{ not found\", Load_Msg_Sloc);\n+            --  To avoid emitting a source location (since there is no file),\n+            --  we write a custom error message instead of using the machinery\n+            --  in errout.adb.\n+\n+            Set_Standard_Error;\n+            Write_Str (\"file \"\"\" & Get_Name_String (Fname) & \"\"\" not found\");\n+            Write_Eol;\n+            Set_Standard_Output;\n          end if;\n \n          Units.Table (Main_Unit) :="}, {"sha": "7afe9a7ead61c31dccf09c97b19add83814809ac", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -18449,6 +18449,19 @@ package body Sem_Ch3 is\n         (Subt, Has_Static_Predicate_Aspect (Par));\n       Set_Has_Dynamic_Predicate_Aspect\n         (Subt, Has_Dynamic_Predicate_Aspect (Par));\n+\n+      --  A named subtype does not inherit the predicate function of its\n+      --  parent but an itype declared for a loop index needs the discrete\n+      --  predicate information of its parent to execute the loop properly.\n+\n+      if Is_Itype (Subt) and then Present (Predicate_Function (Par)) then\n+         Set_Subprograms_For_Type (Subt, Subprograms_For_Type (Par));\n+\n+         if Has_Static_Predicate (Par) then\n+            Set_Static_Discrete_Predicate\n+              (Subt, Static_Discrete_Predicate (Par));\n+         end if;\n+      end if;\n    end Inherit_Predicate_Flags;\n \n    ----------------------"}, {"sha": "a0d61aa37b432aaffd60fe4ecfd1edfec6a2d3bb", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a5b3dc89fa01e461c96bde32df592db5bf700f/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=63a5b3dc89fa01e461c96bde32df592db5bf700f", "patch": "@@ -291,7 +291,7 @@ package body Style is\n \n          elsif Nkind (N) = N_Abstract_Subprogram_Declaration then\n             Error_Msg_NE -- CODEFIX\n-              (\"(style) missing OVERRIDING indicator in deckaration of&\",\n+              (\"(style) missing OVERRIDING indicator in declaration of&\",\n                 Specification (N), E);\n \n          else"}]}