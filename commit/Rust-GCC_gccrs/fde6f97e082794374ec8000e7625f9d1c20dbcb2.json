{"sha": "fde6f97e082794374ec8000e7625f9d1c20dbcb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlNmY5N2UwODI3OTQzNzRlYzgwMDBlNzYyNWY5ZDFjMjBkYmNiMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-09-02T09:42:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-09-02T09:42:39Z"}, "message": "PR c++/21682, implement DR 565\n\n/cp\n2013-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/21682, implement DR 565\n\t* name-lookup.c (compparms_for_decl_and_using_decl): New.\n\t(push_overloaded_decl_1, do_nonmember_using_decl): Use it.\n\n/testsuite\n2013-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/21682, implement DR 565\n\t* g++.dg/template/using24.C: New.\n\t* g++.dg/template/using25.C: Likewise.\n\t* g++.dg/template/using26.C: Likewise.\n\nFrom-SVN: r202163", "tree": {"sha": "ba3527b81eff0d88a2b16e3a9590ef37de65994b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3527b81eff0d88a2b16e3a9590ef37de65994b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fde6f97e082794374ec8000e7625f9d1c20dbcb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde6f97e082794374ec8000e7625f9d1c20dbcb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde6f97e082794374ec8000e7625f9d1c20dbcb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde6f97e082794374ec8000e7625f9d1c20dbcb2/comments", "author": null, "committer": null, "parents": [{"sha": "576016fe9698e90bf397109f854821c4287a2c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576016fe9698e90bf397109f854821c4287a2c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576016fe9698e90bf397109f854821c4287a2c1c"}], "stats": {"total": 138, "additions": 133, "deletions": 5}, "files": [{"sha": "7cafed9c3b547216d3ab9cb1a31d9fa3991168fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -1,3 +1,9 @@\n+2013-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/21682, implement DR 565\n+\t* name-lookup.c (compparms_for_decl_and_using_decl): New.\n+\t(push_overloaded_decl_1, do_nonmember_using_decl): Use it.\n+\n 2013-08-30  Marek Polacek  <polacek@redhat.com>\n \n \t* typeck.c (cp_build_binary_op): Add division by zero and shift"}, {"sha": "025a03cd9fa61e16a0eb979950c9fb996b921602", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -2267,6 +2267,27 @@ pushdecl_with_scope (tree x, cp_binding_level *level, bool is_friend)\n   return ret;\n }\n \n+/* Helper function for push_overloaded_decl_1 and do_nonmember_using_decl.\n+   Compares the parameter-type-lists of DECL1 and DECL2 and returns false\n+   if they are different.  If the DECLs are template functions, the return\n+   types and the template parameter lists are compared too (DR 565).  */\n+\n+static bool\n+compparms_for_decl_and_using_decl (tree decl1, tree decl2)\n+{\n+  if (!compparms (TYPE_ARG_TYPES (TREE_TYPE (decl1)),\n+\t\t  TYPE_ARG_TYPES (TREE_TYPE (decl2))))\n+    return false;\n+\n+  if (! DECL_FUNCTION_TEMPLATE_P (decl1)\n+      || ! DECL_FUNCTION_TEMPLATE_P (decl2))\n+    return true;\n+\n+  return (comp_template_parms (DECL_TEMPLATE_PARMS (decl1),\n+\t\t\t       DECL_TEMPLATE_PARMS (decl2))\n+\t  && same_type_p (TREE_TYPE (TREE_TYPE (decl1)),\n+\t\t\t  TREE_TYPE (TREE_TYPE (decl2))));\n+}\n \n /* DECL is a FUNCTION_DECL for a non-member function, which may have\n    other definitions already in place.  We get around this by making\n@@ -2324,8 +2345,7 @@ push_overloaded_decl_1 (tree decl, int flags, bool is_friend)\n \n \t      if (TREE_CODE (tmp) == OVERLOAD && OVL_USED (tmp)\n \t\t  && !(flags & PUSH_USING)\n-\t\t  && compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n-\t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (decl)))\n+\t\t  && compparms_for_decl_and_using_decl (fn, decl)\n \t\t  && ! decls_match (fn, decl))\n \t\tdiagnose_name_conflict (decl, fn);\n \n@@ -2561,8 +2581,7 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t\t    break;\n \t\t  else if (TREE_CODE (tmp1) == OVERLOAD && OVL_USED (tmp1))\n \t\t    continue; /* this is a using decl */\n-\t\t  else if (compparms (TYPE_ARG_TYPES (TREE_TYPE (new_fn)),\n-\t\t\t\t      TYPE_ARG_TYPES (TREE_TYPE (old_fn))))\n+\t\t  else if (compparms_for_decl_and_using_decl (new_fn, old_fn))\n \t\t    {\n \t\t      gcc_assert (!DECL_ANTICIPATED (old_fn)\n \t\t\t\t  || DECL_HIDDEN_FRIEND_P (old_fn));"}, {"sha": "c87b30ac4b0c5dff28060618e8ba9e40a9383c66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -1,4 +1,11 @@\n-2013-09-01  Jan Hubicka  <jh@suse.cz>\t\n+2013-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/21682, implement DR 565\n+\t* g++.dg/template/using24.C: New.\n+\t* g++.dg/template/using25.C: Likewise.\n+\t* g++.dg/template/using26.C: Likewise.\n+\n+2013-09-01  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/ipa/devirt-15.C: New testcase.\n "}, {"sha": "c3cdf93ec9b702a58cefc9d611adad45a743ca2f", "filename": "gcc/testsuite/g++.dg/template/using24.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing24.C?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/21682\n+\n+template <class T>\n+struct t\n+{\n+  typedef typename T::type type;\n+};\n+template<> class t<int>{};\n+\n+template <class T> struct t1{ };\n+template<> struct t1<int>\n+{\n+  typedef int type;\n+};\n+\n+namespace name1\n+{\n+  template <class S> typename t<S>::type begin(S const& s);\n+  namespace name2\n+  {\n+    template <class S> typename t1<S>::type begin(S const& s);\n+  }\n+  using name2::begin;\n+}\n+\n+/* Test calling the function. */\n+int f(int a) { return name1::begin(a); }\n+\n+struct aa { typedef double type; };\n+double g(aa t) { return name1::begin(t); }"}, {"sha": "6f4a7def7ab7b669d73eb05434cd524bce28fe8e", "filename": "gcc/testsuite/g++.dg/template/using25.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing25.C?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/21682\n+\n+namespace one {\n+  template<typename T> void fun(T);\n+}\n+\n+using one::fun;\n+\n+template<typename T> void fun(T);  // { dg-error \"conflicts\" }\n+\n+template<typename T> void funr(T);\n+\n+namespace oner {\n+  template<typename T> void funr(T);\n+}\n+\n+using oner::funr;  // { dg-error \"conflicts\" }"}, {"sha": "ca21857aad49b7979dd8d945956e62eff2836f76", "filename": "gcc/testsuite/g++.dg/template/using26.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde6f97e082794374ec8000e7625f9d1c20dbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing26.C?ref=fde6f97e082794374ec8000e7625f9d1c20dbcb2", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/21682\n+\n+namespace one {\n+  template<typename T> int bar1(T);\n+}\n+\n+using one::bar1;\n+\n+template<typename T> void bar1(T);\n+\n+template<typename T> void bar1r(T);\n+\n+namespace oner {\n+  template<typename T> int bar1r(T);\n+}\n+\n+using oner::bar1r;\n+\n+namespace two {\n+  template<typename T, typename U> void bar2(T);\n+}\n+\n+using two::bar2;\n+\n+template<typename T> void bar2(T);\n+\n+template<typename T> void bar2r(T);\n+\n+namespace twor {\n+  template<typename T, typename U> void bar2r(T);\n+}\n+\n+using twor::bar2r;\n+\n+namespace three {\n+  template<int i> void bar3();\n+}\n+\n+using three::bar3;\n+\n+template<typename T> void bar3();\n+\n+template<typename T> void bar3r();\n+\n+namespace threer {\n+  template<int i> void bar3r();\n+}\n+\n+using threer::bar3r;"}]}