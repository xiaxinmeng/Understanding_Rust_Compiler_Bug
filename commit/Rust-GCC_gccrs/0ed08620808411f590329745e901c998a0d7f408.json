{"sha": "0ed08620808411f590329745e901c998a0d7f408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkMDg2MjA4MDg0MTFmNTkwMzI5NzQ1ZTkwMWM5OThhMGQ3ZjQwOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-05T17:18:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-05T17:18:42Z"}, "message": "i386.c (x86_initialize_trampoline): New global function.\n\n\n\t* i386.c (x86_initialize_trampoline): New global function.\n\t* i386.h (TRAMPOLINE_SIZE): Size is 23 for x86_64.\n\t(INITIALIZE_TRAMPOLINE): Move offline.\n\t* i386-protos.h (x86_initialize_trampoline): Declare.\n\nFrom-SVN: r41123", "tree": {"sha": "bf9672e66fd1e53dd0aef46ae1f998d9353b68a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9672e66fd1e53dd0aef46ae1f998d9353b68a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed08620808411f590329745e901c998a0d7f408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed08620808411f590329745e901c998a0d7f408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed08620808411f590329745e901c998a0d7f408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed08620808411f590329745e901c998a0d7f408/comments", "author": null, "committer": null, "parents": [{"sha": "ac62a60e1ff8375219584e263fb97853e5f90b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac62a60e1ff8375219584e263fb97853e5f90b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac62a60e1ff8375219584e263fb97853e5f90b8c"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "f40281a92e0492c6e35b8a9f69f5b05473055a8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed08620808411f590329745e901c998a0d7f408/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed08620808411f590329745e901c998a0d7f408/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ed08620808411f590329745e901c998a0d7f408", "patch": "@@ -1,3 +1,10 @@\n+Thu Apr  5 19:13:33 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (x86_initialize_trampoline): New global function.\n+\t* i386.h (TRAMPOLINE_SIZE): Size is 23 for x86_64.\n+\t(INITIALIZE_TRAMPOLINE): Move offline.\n+\t* i386-protos.h (x86_initialize_trampoline): Declare.\n+\n Thu Apr  5 19:02:15 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (movdi_1_rex64): Allow SSE->SSE reg move."}, {"sha": "a3bbc7827e956672eaa5bdc47eafed49b2747b89", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed08620808411f590329745e901c998a0d7f408/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed08620808411f590329745e901c998a0d7f408/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0ed08620808411f590329745e901c998a0d7f408", "patch": "@@ -8936,6 +8936,66 @@ ix86_local_alignment (type, align)\n     }\n   return align;\n }\n+\f\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.  */\n+void\n+x86_initialize_trampoline (tramp, fnaddr, cxt)\n+     rtx tramp, fnaddr, cxt;\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      /* Compute offset from the end of the jmp to the target function.  */\n+      rtx disp = expand_binop (SImode, sub_optab, fnaddr,\n+\t\t\t       plus_constant (tramp, 10),\n+\t\t\t       NULL_RTX, 1, OPTAB_DIRECT);\n+      emit_move_insn (gen_rtx_MEM (QImode, tramp),\n+\t\t      GEN_INT (trunc_int_for_mode (0xb9, QImode)));\n+      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 1)), cxt);\n+      emit_move_insn (gen_rtx_MEM (QImode, plus_constant (tramp, 5)),\n+\t\t      GEN_INT (trunc_int_for_mode (0xe9, QImode)));\n+      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 6)), disp);\n+    }\n+  else\n+    {\n+      int offset = 0;\n+      /* Try to load address using shorter movl instead of movabs.\n+         We may want to support movq for kernel mode, but kernel does not use\n+         trampolines at the moment.  */\n+      if (x86_64_zero_extended_value (fnaddr))\n+\t{\n+\t  fnaddr = copy_to_mode_reg (DImode, fnaddr);\n+\t  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, offset)),\n+\t\t\t  GEN_INT (trunc_int_for_mode (0xbb41, HImode)));\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, offset + 2)),\n+\t\t\t  gen_lowpart (SImode, fnaddr));\n+\t  offset += 6;\n+\t}\n+      else\n+\t{\n+\t  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, offset)),\n+\t\t\t  GEN_INT (trunc_int_for_mode (0xbb49, HImode)));\n+\t  emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, offset + 2)),\n+\t\t\t  fnaddr);\n+\t  offset += 10;\n+\t}\n+      /* Load static chain using movabs to r10.  */\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, offset)),\n+\t\t      GEN_INT (trunc_int_for_mode (0xba49, HImode)));\n+      emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, offset + 2)),\n+\t\t      cxt);\n+      offset += 10;\n+      /* Jump to the r11 */\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, offset)),\n+\t\t      GEN_INT (trunc_int_for_mode (0xff49, HImode)));\n+      emit_move_insn (gen_rtx_MEM (QImode, plus_constant (tramp, offset+2)),\n+\t\t      GEN_INT (trunc_int_for_mode (0xe3, HImode)));\n+      offset += 3;\n+      if (offset > TRAMPOLINE_SIZE)\n+\tabort();\n+    }\n+}\n \n #define def_builtin(NAME, TYPE, CODE) \\\n   builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL_PTR)"}]}