{"sha": "b211c5958a31f1deada10926f384d999043f0a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxMWM1OTU4YTMxZjFkZWFkYTEwOTI2ZjM4NGQ5OTkwNDNmMGE4YQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-01-26T15:37:34Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-01-26T15:37:34Z"}, "message": "fold-vec-abs-int.c: Remove scan-assembler stanzas.\n\n[testsuite]\n\n2018-01-26  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-abs-int.c: Remove scan-assembler stanzas.\n\t* gcc.target/powerpc/fold-vec-abs-int-fwrap.c: Same.\n\t* gcc.target/powerpc/fold-vec-abs-int.p7.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int.p8.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int.p9.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p7.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p8.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p9.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong.c: Remove scan-assembler stanzas.\n\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrap.c: Same.\n\t* gcc.target/powerpc/fold-vec-abs-longlong.p7.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong.p8.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong.p9.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p7.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p8.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p9.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-short.c: Add xxspltib to valid instruction list.\n\t* gcc.target/powerpc/fold-vec-abs-short-fwrapv.c: Same.\n\nFrom-SVN: r257097", "tree": {"sha": "4c24952334d9086c5283c5f8de788257a55839e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c24952334d9086c5283c5f8de788257a55839e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b211c5958a31f1deada10926f384d999043f0a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b211c5958a31f1deada10926f384d999043f0a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b211c5958a31f1deada10926f384d999043f0a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b211c5958a31f1deada10926f384d999043f0a8a/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66d617d083aa4fe61a5206d1fc5356b47f33d114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d617d083aa4fe61a5206d1fc5356b47f33d114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d617d083aa4fe61a5206d1fc5356b47f33d114"}], "stats": {"total": 229, "additions": 217, "deletions": 12}, "files": [{"sha": "adf8c01a82e8eb043c46ce29fcad5e6ec0d53a10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -1,3 +1,26 @@\n+2018-01-26  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-abs-int.c: Remove scan-assembler stanzas.\n+\t* gcc.target/powerpc/fold-vec-abs-int-fwrap.c: Same.\n+\t* gcc.target/powerpc/fold-vec-abs-int.p7.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int.p8.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int.p9.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p7.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p8.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.p9.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong.c: Remove scan-assembler\n+\tstanzas.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrap.c: Same.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong.p7.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong.p8.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong.p9.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p7.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p8.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p9.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-short.c: Add xxspltib to valid\n+\tinstruction list.\n+\t* gcc.target/powerpc/fold-vec-abs-short-fwrapv.c: Same.\n+\n 2018-01-26  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-cmp-int.c: Delete."}, {"sha": "22eec38f25efc1f3023915f261954a289b2a8a8e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int-fwrapv.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -13,6 +13,4 @@ test1 (vector signed int x)\n   return vec_abs (x);\n }\n \n-/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+/* scan-assembler stanzas moved to fold-vec-abs-int-fwrapv.p*.c tests.  */"}, {"sha": "739f1c97df863081591b452bbb962b5df306c791", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int-fwrapv.p7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p7.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,20 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right results when -mcpu=power7 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power7 -fwrapv\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+"}, {"sha": "8c284ff35b89c9bfca2a9fc7d479ca3867f5ede4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int-fwrapv.p8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p8.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,20 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right results when -mcpu=power8 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power8 -fwrapv\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+"}, {"sha": "cde86b8cacdf81cb81b927a17e486c01a033df77", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int-fwrapv.p9.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.p9.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,19 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right results when -mcpu=power9 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power9 -fwrapv\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vnegw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+"}, {"sha": "4fb3fbe8664573826d9bfcde063dbd59ec764fbc", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -13,6 +13,4 @@ test1 (vector signed int x)\n   return vec_abs (x);\n }\n \n-/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+/* scan-assembler entries moved to fold-vec-abs-int.p*.c files. */"}, {"sha": "81b0fc0a5a22248f96e3c2162c3179df5b88a75e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int.p7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p7.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,19 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right code when -mcpu=power7 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power7\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */"}, {"sha": "4e55e0eff2293a8a2c16883a21d02d391f57ff0c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int.p8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p8.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,20 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right code when -mcpu=power8 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power8\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+"}, {"sha": "6f2c686999b8f0407dab98b2ec1860b5e5d392ca", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int.p9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.p9.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right code when -mcpu=power9 is specified.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mcpu=power9\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vnegw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */"}, {"sha": "6c3108c60c78b76551145f146a4d76eef1a81648", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -13,6 +13,5 @@ test3 (vector signed long long x)\n   return vec_abs (x);\n }\n \n-/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */\n+/* scan-assembler stanzas moved to fold-vec-abs-longlong.p*.c.  */\n+"}, {"sha": "244c247efba629bd5e94c27a649c1ba44512f361", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p8.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,20 @@\n+\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2 -mcpu=power8\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}, {"sha": "8f1545d17c6bf86b82f36b899a925413b03ddf0c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.p9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.p9.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -mcpu=power9\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vnegd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}, {"sha": "4f5148ed2374fd450be1b4fdd751d81422f52dd8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -13,6 +13,4 @@ test3 (vector signed long long x)\n   return vec_abs (x);\n }\n \n-/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */\n+/* scan-assembler stanzas moved to fold-vec-abs-longlong.p*.c . */"}, {"sha": "4fa0b6db3165eb75a252e40031804c5adbe3a13b", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong.p8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p8.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2 -mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}, {"sha": "16906ed90073ea6f458c48deaf3c736a25f606df", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong.p9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b211c5958a31f1deada10926f384d999043f0a8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.p9.c?ref=b211c5958a31f1deada10926f384d999043f0a8a", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vnegd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}]}