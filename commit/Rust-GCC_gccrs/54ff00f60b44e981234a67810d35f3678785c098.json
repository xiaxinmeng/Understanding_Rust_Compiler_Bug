{"sha": "54ff00f60b44e981234a67810d35f3678785c098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmZjAwZjYwYjQ0ZTk4MTIzNGE2NzgxMGQzNWYzNjc4Nzg1YzA5OA==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1999-05-10T15:25:49Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1999-05-10T15:25:49Z"}, "message": "cppspec.c: Treat two non-option arguments as input and output file.\n\n1999-05-10 18:21 -0400  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n\t* cppspec.c: Treat two non-option arguments as input and\n\toutput file.  Three or more non-option args is an error.\n\tClean up.\n\t* gcc.c (default_compilers): Pass -$ to the preprocessor.\n\t* cp/lang-specs.h,ch/lang-specs.h,f/lang-specs.h,\n\tobjc/lang-specs.h: Likewise.\n\nFrom-SVN: r26870", "tree": {"sha": "147662539a406aaa6075f9eea99e9975dba625a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/147662539a406aaa6075f9eea99e9975dba625a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ff00f60b44e981234a67810d35f3678785c098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ff00f60b44e981234a67810d35f3678785c098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ff00f60b44e981234a67810d35f3678785c098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ff00f60b44e981234a67810d35f3678785c098/comments", "author": null, "committer": null, "parents": [{"sha": "2c826217f4703c5d4f7b5739607743f693e92842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c826217f4703c5d4f7b5739607743f693e92842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c826217f4703c5d4f7b5739607743f693e92842"}], "stats": {"total": 181, "additions": 103, "deletions": 78}, "files": [{"sha": "d9b59422cac5ee67a90ceddc11463de8ab5f19f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ff00f60b44e981234a67810d35f3678785c098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ff00f60b44e981234a67810d35f3678785c098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54ff00f60b44e981234a67810d35f3678785c098", "patch": "@@ -1,3 +1,27 @@\n+1999-05-10 18:21 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* cppfiles.c (initialize_input_buffer): New function.\n+\t(finclude): Call it, if pfile->input_buffer is NULL.  Accept\n+\tany character device as an input file.\n+\t(read_and_prescan): Use pfile->input_buffer and\n+\tpfile->input_speccase.\n+\t* cppinit.c (cpp_cleanup): Free pfile->input_buffer and\n+\tpfile->input_speccase.\n+\t* cpplib.h (cpp_reader): Add input_buffer, input_speccase, and\n+\tinput_buffer_len members.  Use memcpy in CPP_PUTS_Q.\n+\n+\t* cppmain.c: Buffer output in the token_buffer; throttle\n+\tnumber of calls to fwrite; check for errors from fwrite.\n+\n+1999-05-10 18:21 -0400  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* cppspec.c: Treat two non-option arguments as input and\n+\toutput file.  Three or more non-option args is an error.\n+\tClean up.\n+\t* gcc.c (default_compilers): Pass -$ to the preprocessor.\n+\t* cp/lang-specs.h, ch/lang-specs.h, f/lang-specs.h,\n+\tobjc/lang-specs.h: Likewise.\n+\n Mon May 10 12:59:20 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* optabs.c (emit_cmp_and_jump_insns): Handle the case where both"}, {"sha": "2908b739368e386ff0d62a01a83242beea1cbe30", "filename": "gcc/cppspec.c", "status": "modified", "additions": 73, "deletions": 72, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ff00f60b44e981234a67810d35f3678785c098/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ff00f60b44e981234a67810d35f3678785c098/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=54ff00f60b44e981234a67810d35f3678785c098", "patch": "@@ -57,13 +57,13 @@ Boston, MA 02111-1307, USA.  */\n #define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n #endif\n \n-/* Suffixes for known sorts of input files.  We let gcc.c worry about\n-   which are appropriate preprocessor input.  */\n+/* Suffixes for known sorts of input files.  Note that we do not list\n+   files which are normally considered to have been preprocessed already,\n+   since the user's expectation is that `cpp' always preprocesses.  */\n static const char *const known_suffixes[] =\n {\n-  \".c\",  \".C\",   \".s\",   \".S\",   \".m\",\n+  \".c\",  \".C\",   \".S\",   \".m\",\n   \".cc\", \".cxx\", \".cpp\", \".cp\",  \".c++\",\n-  \".i\",  \".ii\",  \".mi\",  \".o\",   \".a\",\n   NULL\n };\n \n@@ -79,34 +79,30 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n   char **argv = *in_argv;\n   \n   /* Do we need to read stdin? */\n-  int read_stdin;\n+  int read_stdin = 1;\n \n   /* Do we need to insert -E? */\n-  int need_E;\n-\n-  /* Do we need to fixup files with unrecognized suffixes? */\n-  int need_fixups;\n-\n-  /* Table of input files with unrecognized suffixes. */\n-  char *urs_tab;\n-  int urs_count;\n-  int urs_block;\n+  int need_E = 1;\n \n+  /* Have we seen an input file? */\n+  int seen_input = 0;\n+  \n+  /* Positions to insert -xc, -xassembler-with-cpp, and -o, if necessary.\n+     0 means unnecessary. */\n+  int lang_c_here = 0;\n+  int lang_S_here = 0;\n+  int o_here = 0;\n+\n+  /* Do we need to fix up an input file with an unrecognized suffix? */\n+  int need_fixups = 1;\n+  \n   int i, j, quote;\n   char **new_argv;\n   int new_argc;\n \n   /* First pass.  If we see an -S or -c, barf.  If we see an input file,\n-     turn off read_stdin, and if it has an unrecognizable suffix, mark\n-     it for fixup. */\n-  urs_tab = xmalloc (argc);\n-  memset (urs_tab, 0, argc);\n-  urs_count = 0;\n-  urs_block = 0;\n-  quote = 0;\n-  read_stdin = 1;\n-  need_E = 1;\n-  need_fixups = 1;\n+     turn off read_stdin.  If we see a second input file, it is actually\n+     the output file.  If we see a third input file, barf.  */\n   for (i = 1; i < argc; i++)\n     {\n       if (quote == 1)\n@@ -127,7 +123,7 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \t\t{\n \t\t  (*errfn) (\"`%s' is not a legal option to the preprocessor\",\n \t\t\t    argv[i]);\n-\t\t  goto done;\n+\t\t  return;\n \t\t}\n \t      else if (argv[i][1] == 'x')\n \t\t{\n@@ -144,76 +140,81 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \t}\n       else /* not an option */\n \t{\n-\t  int l = strlen (argv[i]);\n-\t  int known = 0;\n-\t  const char *const *suff;\n-\t  \n-\t  read_stdin = 0;\n-\t  for (suff = known_suffixes; *suff; suff++)\n-\t    if (!strcmp (*suff, &argv[i][l - strlen(*suff)]))\n-\t      {\n-\t\tknown = 1;\n-\t\tbreak;\n-\t      }\n-\n-\t  if (known)\n+\t  seen_input++;\n+\t  if (seen_input == 3)\n \t    {\n-\t      if (urs_block)\n-\t\t{\n-\t\t  urs_block = 0;\n-\t\t  urs_tab[i] = 2;\n-\t\t  urs_count++;\n-\t\t}\n+\t      (*errfn) (\"too many input files\");\n+\t      return;\n+\t    }\n+\t  else if (seen_input == 2)\n+\t    {\n+\t      o_here = i;\n \t    }\n \t  else\n \t    {\n-\t      if (!urs_block)\n+\t      read_stdin = 0;\n+\t      if (need_fixups)\n \t\t{\n-\t\t  urs_block = 1;\n-\t\t  urs_tab[i] = 1;\n-\t\t  urs_count++;\n+\t\t  int l = strlen (argv[i]);\n+\t\t  int known = 0;\n+\t\t  const char *const *suff;\n+\n+\t\t  for (suff = known_suffixes; *suff; suff++)\n+\t\t    if (!strcmp (*suff, &argv[i][l - strlen(*suff)]))\n+\t\t      {\n+\t\t\tknown = 1;\n+\t\t\tbreak;\n+\t\t      }\n+\n+\t\t  if (! known)\n+\t\t    {\n+\t\t      /* .s files are a special case; we have to treat\n+\t\t\t them like .S files so -D__ASSEMBLER__ will be\n+\t\t\t in effect.  */\n+\t\t      if (!strcmp (\".s\", &argv[i][l - 2]))\n+\t\t\tlang_S_here = i;\n+\t\t      else\n+\t\t\tlang_c_here = i;\n+\t\t    }\n \t\t}\n \t    }\n \t}\n     }\n \n-  /* If we were given an -E option and an input file, and no input\n-     files have unrecognized suffixes, we can bail early.  */\n-  if (!need_E && !read_stdin && (!need_fixups || urs_count == 0))\n-    goto done;\n+  /* If we don't need to edit the command line, we can bail early.  */\n+\n+  new_argc = argc + need_E + read_stdin\n+    + !!o_here + !!lang_c_here + !!lang_S_here;\n+\n+  if (new_argc == argc)\n+    return;\n \n-  new_argc = argc + need_E + read_stdin + (need_fixups ? urs_count : 0);\n   new_argv = xmalloc (new_argc * sizeof(char *));\n \n   new_argv[0] = argv[0];\n+  j = 1;\n+\n   if (need_E)\n+    new_argv[j++] = \"-E\";\n+\n+  for (i = 1; i < argc; i++, j++)\n     {\n-      new_argv[1] = \"-E\";\n-      j = 2;\n+      if (i == lang_c_here)\n+\tnew_argv[j++] = \"-xc\";\n+      else if (i == lang_S_here)\n+\tnew_argv[j++] = \"-xassembler-with-cpp\";\n+      else if (i == o_here)\n+\tnew_argv[j++] = \"-o\";\n+\n+      new_argv[j] = argv[i];\n     }\n-  else\n-    j = 1;\n-\n-  if (need_fixups)\n-    for (i = 1; i < argc; i++, j++)\n-      {\n-\tif (urs_tab[i])\n-\t  new_argv[j++] = (urs_tab[i] == 1) ? \"-xc\" : \"-xnone\";\n-\n-\tnew_argv[j] = argv[i];\n-      }\n-  else\n-    memcpy (&new_argv[j], &argv[1], (argc - 1)*sizeof (char *));\n \n   if (read_stdin)\n     new_argv[j] = \"-\";\n \n   *in_argc = new_argc;\n   *in_argv = new_argv;\n-\n-done:\n-  free (urs_tab);\n-}\n+} \n \n /* Called before linking.  Returns 0 on success and -1 on failure. */\n int lang_specific_pre_link ()"}, {"sha": "9e2573d6d7612cb4d401df90c4c46560bf95e07b", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ff00f60b44e981234a67810d35f3678785c098/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ff00f60b44e981234a67810d35f3678785c098/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=54ff00f60b44e981234a67810d35f3678785c098", "patch": "@@ -595,7 +595,7 @@ static struct compiler default_compilers[] =\n    {\n #if USE_CPPLIB\n      \"%{E|M|MM:cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n@@ -631,7 +631,7 @@ static struct compiler default_compilers[] =\n                      %{!pipe:%g.s} %A\\n }}}}\"\n #else /* ! USE_CPPLIB */\n     \"cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n@@ -659,7 +659,7 @@ static struct compiler default_compilers[] =\n   }},\n   {\"-\",\n    {\"%{E:cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n@@ -676,9 +676,9 @@ static struct compiler default_compilers[] =\n   {\".h\", {\"@c-header\"}},\n   {\"@c-header\",\n    {\"%{!E:%eCompilation of header file requested} \\\n-    cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+    cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n \t%{std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!std=*:%p}%{std=gnu*:%p} %P} %{trigraphs}\\\n@@ -707,7 +707,7 @@ static struct compiler default_compilers[] =\n \t\t\t    %i %A\\n }}}}\"}},\n   {\".S\", {\"@assembler-with-cpp\"}},\n   {\"@assembler-with-cpp\",\n-   {\"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+   {\"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{trigraphs}\\\n         -$ %{!undef:%p %P} -D__ASSEMBLER__ \\"}]}