{"sha": "ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyNjRmZWYyMzY3YzQ3NzNmNGVkNDg2OGJkYWExM2MzOWIxYWI0NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-08-01T08:52:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-08-01T08:52:59Z"}, "message": "re PR tree-optimization/23109 (compiler generates wrong code leading to spurious division by zero with -funsafe-math-optimizations (instead of -ftrapping-math))\n\n2005-08-01  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/23109\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1):\n\tIf trapping math is in effect, use post-dominator information\n\tto check if we'd in any case reach a trapping point before\n\tdoing the reciprocal insertion.\n\t(execute_cse_reciprocals): Compute post-dominators, if necessary.\n\t* tree-ssa-loop-im.c (determine_invariantness_stmt): RDIV\n\texpressions are invariant only if trapping math is not in effect.\n\nFrom-SVN: r102627", "tree": {"sha": "6c454da7c03895efb5f70d5099fddba16413ef4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c454da7c03895efb5f70d5099fddba16413ef4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19734dd84e999ade0e315247f0de9e1b176257bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19734dd84e999ade0e315247f0de9e1b176257bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19734dd84e999ade0e315247f0de9e1b176257bb"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "07b3141f71eff9c26437d19a23f8f9f90e086415", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "patch": "@@ -1,3 +1,14 @@\n+2005-08-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/23109\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1):\n+\tIf trapping math is in effect, use post-dominator information\n+\tto check if we'd in any case reach a trapping point before\n+\tdoing the reciprocal insertion.\n+\t(execute_cse_reciprocals): Compute post-dominators, if necessary.\n+\t* tree-ssa-loop-im.c (determine_invariantness_stmt): RDIV\n+\texpressions are invariant only if trapping math is not in effect.\n+\n 2005-08-01  Razya Ladelsky  <razya@il.ibm.com>\n \n         * cgraph.h (update_call_expr, cgraph_copy_node_for_versioning,"}, {"sha": "9281079b7fd9618101e403bfad70b784b6f23f37", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "patch": "@@ -610,6 +610,7 @@ determine_invariantness_stmt (struct dom_walk_data *dw_data ATTRIBUTE_UNUSED,\n \t  && (rhs = TREE_OPERAND (stmt, 1)) != NULL\n \t  && TREE_CODE (rhs) == RDIV_EXPR\n \t  && flag_unsafe_math_optimizations\n+\t  && !flag_trapping_math\n \t  && outermost_invariant_loop_expr (TREE_OPERAND (rhs, 1),\n \t\t\t\t\t    loop_containing_stmt (stmt)) != NULL\n \t  && outermost_invariant_loop_expr (rhs,"}, {"sha": "bff3c1db21ab3014a603cf724824615a88a1db40", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac264fef2367c4773f4ed4868bdaa13c39b1ab44/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ac264fef2367c4773f4ed4868bdaa13c39b1ab44", "patch": "@@ -69,6 +69,7 @@ execute_cse_reciprocals_1 (block_stmt_iterator *bsi, tree def, bool phi)\n   imm_use_iterator use_iter;\n   tree t, new_stmt, type;\n   int count = 0;\n+  bool ok = !flag_trapping_math;\n \n   /* Find uses.  */\n   FOR_EACH_IMM_USE_FAST (use_p, use_iter, def)\n@@ -77,13 +78,18 @@ execute_cse_reciprocals_1 (block_stmt_iterator *bsi, tree def, bool phi)\n       if (TREE_CODE (use_stmt) == MODIFY_EXPR\n \t  && TREE_CODE (TREE_OPERAND (use_stmt, 1)) == RDIV_EXPR\n \t  && TREE_OPERAND (TREE_OPERAND (use_stmt, 1), 1) == def)\n-\t{\n-\t  if (++count == 2)\n-\t    break;\n-\t}\n+        {\n+          ++count;\n+          /* Check if this use post-dominates the insertion point.  */\n+          if (ok || dominated_by_p (CDI_POST_DOMINATORS, bsi->bb,\n+\t\t\t\t    bb_for_stmt (use_stmt)))\n+\t    ok = true;\n+        }\n+      if (count >= 2 && ok)\n+        break;\n     }\n \n-  if (count < 2)\n+  if (count < 2 || !ok)\n     return;\n \n   /* Make a variable with the replacement and substitute it.  */\n@@ -116,6 +122,10 @@ static void\n execute_cse_reciprocals (void)\n {\n   basic_block bb;\n+\n+  if (flag_trapping_math)\n+    calculate_dominance_info (CDI_POST_DOMINATORS);\n+\n   FOR_EACH_BB (bb)\n     {\n       block_stmt_iterator bsi;\n@@ -143,6 +153,9 @@ execute_cse_reciprocals (void)\n \t    execute_cse_reciprocals_1 (&bsi, def, false);\n \t}\n     }\n+\n+  if (flag_trapping_math)\n+    free_dominance_info (CDI_POST_DOMINATORS);\n }\n \n struct tree_opt_pass pass_cse_reciprocals ="}]}