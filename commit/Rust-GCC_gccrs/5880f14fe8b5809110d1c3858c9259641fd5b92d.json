{"sha": "5880f14fe8b5809110d1c3858c9259641fd5b92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4MGYxNGZlOGI1ODA5MTEwZDFjMzg1OGM5MjU5NjQxZmQ1YjkyZA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-11-01T05:06:12Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-01T05:06:12Z"}, "message": "In gcc/:\n\n\t* coverage.c (coverage_checksum_string): Update comment.\n\t* dwarf2out.c (switch_to_eh_frame_section): Update for removal\n\tof get_file_function_name.\n\t* cgraphunit.c (cgraph_build_static_cdtor): Update for rename\n\tof get_file_function_name_long.\n\t* tree.c (get_file_function_name): Rename from\n\tget_file_function_name_long; improve comment; handle 'I' and 'D'\n\tspecially when the target has ctor/dtor support; remove special\n\thandling for 'F'.\n\t(get_file_function_name): Remove.\n\t* tree.h (get_file_function_name): Rename from\n        get_file_function_name_long.\n\t(get_file_function_name): Remove prototype.\nIn gcc/cp/:\n\t* name-lookup.c (get_anonymous_namespace_name): New.\n\t(push_namespace_with_attribs): Use get_anonymous_namespace_name.\n\t* decl2.c (start_objects): Update for rename of\n\tget_file_function_name_long.\nIn gcc/fortran/:\n\t* trans-decl.c (gfc_generate_constructors): Update for removal\n\tof get_file_function_name.\n\nFrom-SVN: r118360", "tree": {"sha": "8c979fbf4f8d2c543fdfc9e8d717c274dd8a9eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c979fbf4f8d2c543fdfc9e8d717c274dd8a9eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5880f14fe8b5809110d1c3858c9259641fd5b92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5880f14fe8b5809110d1c3858c9259641fd5b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5880f14fe8b5809110d1c3858c9259641fd5b92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5880f14fe8b5809110d1c3858c9259641fd5b92d/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d04fa0539961487bc95baa222c100afbc6fdf30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d04fa0539961487bc95baa222c100afbc6fdf30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d04fa0539961487bc95baa222c100afbc6fdf30"}], "stats": {"total": 133, "additions": 82, "deletions": 51}, "files": [{"sha": "c5cf3b556d983f4b676a0f6e76622d73f49a7b3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -1,3 +1,19 @@\n+2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* coverage.c (coverage_checksum_string): Update comment.\n+\t* dwarf2out.c (switch_to_eh_frame_section): Update for removal\n+\tof get_file_function_name.\n+\t* cgraphunit.c (cgraph_build_static_cdtor): Update for rename\n+\tof get_file_function_name_long.\n+\t* tree.c (get_file_function_name): Rename from\n+\tget_file_function_name_long; improve comment; handle 'I' and 'D'\n+\tspecially when the target has ctor/dtor support; remove special\n+\thandling for 'F'.\n+\t(get_file_function_name): Remove.\n+\t* tree.h (get_file_function_name): Rename from\n+        get_file_function_name_long.\n+\t(get_file_function_name): Remove prototype.\n+\n 2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/i386/darwin.h (PREFERRED_DEBUGGING_TYPE): Remove."}, {"sha": "242738a44697bd7253a21196a6821d7eb9ed5e92", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -1675,7 +1675,7 @@ cgraph_build_static_cdtor (char which, tree body, int priority)\n   tree decl, name, resdecl;\n \n   sprintf (which_buf, \"%c_%d\", which, counter++);\n-  name = get_file_function_name_long (which_buf);\n+  name = get_file_function_name (which_buf);\n \n   decl = build_decl (FUNCTION_DECL, name,\n \t\t     build_function_type (void_type_node, void_list_node));"}, {"sha": "399eb6ea6c6a861d8cdad2fb91441132504036e4", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -433,7 +433,7 @@ coverage_checksum_string (unsigned chksum, const char *string)\n   char *dup = NULL;\n \n   /* Look for everything that looks if it were produced by\n-     get_file_function_name_long and zero out the second part\n+     get_file_function_name and zero out the second part\n      that may result from flag_random_seed.  This is not critical\n      as the checksums are used only for sanity checking.  */\n   for (i = 0; string[i]; i++)"}, {"sha": "27d86cd49bac3e864fe294629316f935eacd3223", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -1,3 +1,10 @@\n+2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* name-lookup.c (get_anonymous_namespace_name): New.\n+\t(push_namespace_with_attribs): Use get_anonymous_namespace_name.\n+\t* decl2.c (start_objects): Update for rename of\n+\tget_file_function_name_long.\n+\n 2006-10-30  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/28704"}, {"sha": "e4b5c00a31e5a282f79c8e24e9f44fa2ac5f3616", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -2324,7 +2324,7 @@ start_objects (int method_type, int initp)\n     sprintf (type, \"%c\", method_type);\n \n   fndecl = build_lang_decl (FUNCTION_DECL,\n-\t\t\t    get_file_function_name_long (type),\n+\t\t\t    get_file_function_name (type),\n \t\t\t    build_function_type (void_type_node,\n \t\t\t\t\t\t void_list_node));\n   start_preparsed_function (fndecl, /*attrs=*/NULL_TREE, SF_PRE_PARSED);"}, {"sha": "92d398ae5cc97d239029e1a1087293a970d903ee", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -61,6 +61,24 @@ tree global_namespace;\n    unit.  */\n static GTY(()) tree anonymous_namespace_name;\n \n+/* Initialise anonymous_namespace_name if necessary, and return it.  */\n+\n+static tree\n+get_anonymous_namespace_name(void)\n+{\n+  if (!anonymous_namespace_name)\n+    {\n+      /* The anonymous namespace has to have a unique name\n+\t if typeinfo objects are being compared by name.  */\n+      if (! flag_weak || ! SUPPORTS_ONE_ONLY)\n+\tanonymous_namespace_name = get_file_function_name (\"N\");\n+      else\n+\t/* The demangler expects anonymous namespaces to be called\n+\t   something starting with '_GLOBAL__N_'.  */\n+\tanonymous_namespace_name = get_identifier (\"_GLOBAL__N_1\");\n+    }\n+  return anonymous_namespace_name;\n+}\n \n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n@@ -3011,11 +3029,7 @@ push_namespace_with_attribs (tree name, tree attributes)\n \n   if (anon)\n     {\n-      /* The name of anonymous namespace is unique for the translation\n-\t unit.  */\n-      if (!anonymous_namespace_name)\n-\tanonymous_namespace_name = get_file_function_name ('N');\n-      name = anonymous_namespace_name;\n+      name = get_anonymous_namespace_name();\n       d = IDENTIFIER_NAMESPACE_VALUE (name);\n       if (d)\n \t/* Reopening anonymous namespace.  */"}, {"sha": "0aaf70e7431a7a3a062f41c2d7cb3e8939558f3a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -2030,7 +2030,7 @@ switch_to_eh_frame_section (void)\n       /* We have no special eh_frame section.  Put the information in\n \t the data section and emit special labels to guide collect2.  */\n       switch_to_section (data_section);\n-      label = get_file_function_name ('F');\n+      label = get_file_function_name (\"F\");\n       ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n       targetm.asm_out.globalize_label (asm_out_file,\n \t\t\t\t       IDENTIFIER_POINTER (label));"}, {"sha": "f07fcc9416053dcd2902fac6e87f0dba1d87bd7f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -1,3 +1,8 @@\n+2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* trans-decl.c (gfc_generate_constructors): Update for removal\n+\tof get_file_function_name.\n+\n 2006-11-01  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \tPR fortran/29537"}, {"sha": "d81b829e5fa21c3da56bbf11768ce95baca155c9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -3299,7 +3299,7 @@ gfc_generate_constructors (void)\n   if (gfc_static_ctors == NULL_TREE)\n     return;\n \n-  fnname = get_file_function_name ('I');\n+  fnname = get_file_function_name (\"I\");\n   type = build_function_type (void_type_node,\n \t\t\t      gfc_chainon_list (NULL_TREE, void_type_node));\n "}, {"sha": "d5e3f3f9eeca34b64d2c76bf0038b9e6d48eb100", "filename": "gcc/tree.c", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -6042,41 +6042,48 @@ clean_symbol_name (char *p)\n       *p = '_';\n }\n \n-/* Generate a name for a function unique to this translation unit.\n+/* Generate a name for a special-purpose function function.\n+   The generated name may need to be unique across the whole link.\n    TYPE is some string to identify the purpose of this function to the\n-   linker or collect2.  */\n+   linker or collect2; it must start with an uppercase letter,\n+   one of:\n+   I - for constructors\n+   D - for destructors\n+   N - for C++ anonymous namespaces\n+   F - for DWARF unwind frame information.  */\n \n tree\n-get_file_function_name_long (const char *type)\n+get_file_function_name (const char *type)\n {\n   char *buf;\n   const char *p;\n   char *q;\n \n+  /* If we already have a name we know to be unique, just use that.  */\n   if (first_global_object_name)\n+    p = first_global_object_name;\n+  /* If the target is handling the constructors/destructors, they\n+     will be local to this file and the name is only necessary for\n+     debugging purposes.  */\n+  else if ((type[0] == 'I' || type[0] == 'D') && targetm.have_ctors_dtors)\n     {\n-      p = first_global_object_name;\n-\n-      /* For type 'F', the generated name must be unique not only to this\n-\t translation unit but also to any given link.  Since global names\n-\t can be overloaded, we concatenate the first global object name\n-\t with a string derived from the file name of this object.  */\n-      if (!strcmp (type, \"F\"))\n-\t{\n-\t  const char *file = main_input_filename;\n-\n-\t  if (! file)\n-\t    file = input_filename;\n-\n-\t  q = alloca (strlen (p) + 10);\n-\t  sprintf (q, \"%s_%08X\", p, crc32_string (0, file));\n-\n-\t  p = q;\n-\t}\n+      const char *file = main_input_filename;\n+      if (! file)\n+\tfile = input_filename;\n+      /* Just use the file's basename, because the full pathname\n+\t might be quite long.  */\n+      p = strrchr (file, '/');\n+      if (p)\n+\tp++;\n+      else\n+\tp = file;\n+      p = q = ASTRDUP (p);\n+      clean_symbol_name (q);\n     }\n   else\n     {\n-      /* We don't have anything that we know to be unique to this translation\n+      /* Otherwise, the name must be unique across the entire link.\n+\t We don't have anything that we know to be unique to this translation\n \t unit, so use what we do have and throw in some randomness.  */\n       unsigned len;\n       const char *name = weak_global_object_name;\n@@ -6108,20 +6115,6 @@ get_file_function_name_long (const char *type)\n \n   return get_identifier (buf);\n }\n-\n-/* If KIND=='I', return a suitable global initializer (constructor) name.\n-   If KIND=='D', return a suitable global clean-up (destructor) name.  */\n-\n-tree\n-get_file_function_name (int kind)\n-{\n-  char p[2];\n-\n-  p[0] = kind;\n-  p[1] = 0;\n-\n-  return get_file_function_name_long (p);\n-}\n \f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n "}, {"sha": "013232bc1b7b5cc66f0405b5a371bf45a2efc9b1", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5880f14fe8b5809110d1c3858c9259641fd5b92d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5880f14fe8b5809110d1c3858c9259641fd5b92d", "patch": "@@ -4150,7 +4150,7 @@ extern GTY(()) const char * current_function_func_begin_label;\n /* In tree.c */\n extern unsigned crc32_string (unsigned, const char *);\n extern void clean_symbol_name (char *);\n-extern tree get_file_function_name_long (const char *);\n+extern tree get_file_function_name (const char *);\n extern tree get_callee_fndecl (tree);\n extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (tree);\n@@ -4488,10 +4488,6 @@ extern void gimplify_function_tree (tree);\n extern const char *get_name (tree);\n extern tree unshare_expr (tree);\n extern void sort_case_labels (tree);\n-\n-/* If KIND=='I', return a suitable global initializer (constructor) name.\n-   If KIND=='D', return a suitable global clean-up (destructor) name.  */\n-extern tree get_file_function_name (int);\n \f\n /* Interface of the DWARF2 unwind info support.  */\n "}]}