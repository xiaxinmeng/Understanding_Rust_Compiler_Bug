{"sha": "0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5MDEyOTA2MmU3ZTY0YTE1YWRmM2EwZWM1MTIwYTJjZjhlYTdlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:18:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:18:41Z"}, "message": "[multiple changes]\n\n2010-08-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb: Minor reformatting\n\t* gnat1drv.adb: Minor reformatting.\n\tMinor code reorganization (use Nkind_In).\n\n2010-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Needs_Constant_Address): New predicate to\n\tdetermine whether the expression in an address clause for an\n\tinitialized object must be constant. Code moved from freeze.adb.\n\t(Remove_Side_Effects): When the temporary is initialized with a\n\treference, indicate that the temporary is a constant as done in all\n\tother cases.\n\t* freeze.adb (Check_Address_Clause): use Needs_Constant_Address.\n\t* exp_ch13.adb (Expand_N_Attribute_Definition_Clause, case 'Address):\n\tIf object does not need a constant address, remove side effects from\n\taddress expression, so it is elaborated at the point of the address\n\tclause and not at the freeze point of the object, so that elaboration\n\torder is respected.\n\n2010-08-05  Vincent Celier  <celier@adacore.com>\n\n\t* prj.adb (Is_Compilable): Return False for header files of non Ada\n\tlanguages.\n\n2010-08-05  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb: The Missing_Source_Files flag also considers a missing\n\texec directory as a warning rather than an error.\n\nFrom-SVN: r162906", "tree": {"sha": "14345a5db40998ad4c46f9b87480f6d04a270075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14345a5db40998ad4c46f9b87480f6d04a270075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/comments", "author": null, "committer": null, "parents": [{"sha": "676e842077eef03dde5c478d38906d353c81cf1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e842077eef03dde5c478d38906d353c81cf1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e842077eef03dde5c478d38906d353c81cf1b"}], "stats": {"total": 267, "additions": 165, "deletions": 102}, "files": [{"sha": "94a59c05e80e0f48c22939af29bc8aa583140981", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -1,3 +1,34 @@\n+2010-08-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb: Minor reformatting\n+\t* gnat1drv.adb: Minor reformatting.\n+\tMinor code reorganization (use Nkind_In).\n+\n+2010-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Needs_Constant_Address): New predicate to\n+\tdetermine whether the expression in an address clause for an\n+\tinitialized object must be constant. Code moved from freeze.adb.\n+\t(Remove_Side_Effects): When the temporary is initialized with a\n+\treference, indicate that the temporary is a constant as done in all\n+\tother cases.\n+\t* freeze.adb (Check_Address_Clause): use Needs_Constant_Address.\n+\t* exp_ch13.adb (Expand_N_Attribute_Definition_Clause, case 'Address):\n+\tIf object does not need a constant address, remove side effects from\n+\taddress expression, so it is elaborated at the point of the address\n+\tclause and not at the freeze point of the object, so that elaboration\n+\torder is respected.\n+\n+2010-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.adb (Is_Compilable): Return False for header files of non Ada\n+\tlanguages.\n+\n+2010-08-05  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb: The Missing_Source_Files flag also considers a missing\n+\texec directory as a warning rather than an error.\n+\n 2010-08-05  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch6.adb, gnat1drv.adb, exp_ch6.adb, sem_eval.adb: Minor"}, {"sha": "6e8fa823d91ab53a05ce23aad40b0c9dc14c0537", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -127,6 +127,16 @@ package body Exp_Ch13 is\n                   else\n                      Set_Expression (Decl, Empty);\n                   end if;\n+\n+               --  An object declaration to which an address clause applies\n+               --  has a delayed freeze, but the address expression itself\n+               --  must be elaborated at the point it appears. If the object\n+               --  is controlled, additional checks apply elsewhere.\n+\n+               elsif Nkind (Decl) = N_Object_Declaration\n+                 and then not Needs_Constant_Address (Decl, Typ)\n+               then\n+                  Remove_Side_Effects (Exp);\n                end if;\n             end;\n "}, {"sha": "d126dab3f442a0488efad4a75a0a9ec9070e0aa0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -6917,8 +6917,8 @@ package body Exp_Ch4 is\n                Rtyp := Typ;\n             end if;\n \n-            --  The proper unsigned type must have a size compatible with\n-            --  the operand, to prevent misalignment..\n+            --  The proper unsigned type must have a size compatible with the\n+            --  operand, to prevent misalignment.\n \n             if RM_Size (Rtyp) <= 8 then\n                Utyp := RTE (RE_Unsigned_8);\n@@ -6995,16 +6995,12 @@ package body Exp_Ch4 is\n \n          begin\n             if Safe_In_Place_Array_Op (Lhs, Op1, Op2) then\n-               if N = Op1\n-                 and then Nkind (Op2) = N_Op_Not\n-               then\n+               if N = Op1 and then Nkind (Op2) = N_Op_Not then\n                   --  (not A) op (not B) can be reduced to a single call\n \n                   return;\n \n-               elsif N = Op2\n-                 and then Nkind (Parent (N)) = N_Op_Xor\n-               then\n+               elsif N = Op2 and then Nkind (Parent (N)) = N_Op_Xor then\n                   --  A xor (not B) can also be special-cased\n \n                   return;\n@@ -7035,10 +7031,10 @@ package body Exp_Ch4 is\n             Make_Iteration_Scheme (Loc,\n               Loop_Parameter_Specification =>\n                 Make_Loop_Parameter_Specification (Loc,\n-                  Defining_Identifier => J,\n+                  Defining_Identifier         => J,\n                   Discrete_Subtype_Definition =>\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => Make_Identifier (Loc, Chars (A)),\n+                      Prefix         => Make_Identifier (Loc, Chars (A)),\n                       Attribute_Name => Name_Range))),\n \n           Statements => New_List (\n@@ -7070,12 +7066,11 @@ package body Exp_Ch4 is\n               Statements => New_List (\n                 Loop_Statement,\n                 Make_Simple_Return_Statement (Loc,\n-                  Expression =>\n-                    Make_Identifier (Loc, Chars (B)))))));\n+                  Expression => Make_Identifier (Loc, Chars (B)))))));\n \n       Rewrite (N,\n         Make_Function_Call (Loc,\n-          Name => New_Reference_To (Func_Name, Loc),\n+          Name                   => New_Reference_To (Func_Name, Loc),\n           Parameter_Associations => New_List (Opnd)));\n \n       Analyze_And_Resolve (N, Typ);\n@@ -7096,9 +7091,9 @@ package body Exp_Ch4 is\n \n       elsif Is_Boolean_Type (Etype (N)) then\n \n-         --  Replace OR by OR ELSE if Short_Circuit_And_Or active and the\n-         --  type is standard Boolean (do not mess with AND that uses a non-\n-         --  standard Boolean type, because something strange is going on).\n+         --  Replace OR by OR ELSE if Short_Circuit_And_Or active and the type\n+         --  is standard Boolean (do not mess with AND that uses a non-standard\n+         --  Boolean type, because something strange is going on).\n \n          if Short_Circuit_And_Or and then Typ = Standard_Boolean then\n             Rewrite (N,\n@@ -7198,10 +7193,9 @@ package body Exp_Ch4 is\n            Make_Conditional_Expression (Loc,\n              Expressions => New_List (\n                Make_Op_Eq (Loc,\n-                 Left_Opnd => Duplicate_Subexpr (Right),\n+                 Left_Opnd  => Duplicate_Subexpr (Right),\n                  Right_Opnd =>\n-                   Unchecked_Convert_To (Typ,\n-                     Make_Integer_Literal (Loc, -1))),\n+                   Unchecked_Convert_To (Typ, Make_Integer_Literal (Loc, -1))),\n \n                Unchecked_Convert_To (Typ,\n                  Make_Integer_Literal (Loc, Uint_0)),\n@@ -7280,12 +7274,10 @@ package body Exp_Ch4 is\n \n       --  Arithmetic overflow checks for signed integer/fixed point types\n \n-      if Is_Signed_Integer_Type (Typ)\n-        or else Is_Fixed_Point_Type (Typ)\n-      then\n+      if Is_Signed_Integer_Type (Typ) or else Is_Fixed_Point_Type (Typ) then\n          Apply_Arithmetic_Overflow_Check (N);\n \n-      --  Vax floating-point types case\n+      --  VAX floating-point types case\n \n       elsif Vax_Float (Typ) then\n          Expand_Vax_Arith (N);\n@@ -7457,9 +7449,9 @@ package body Exp_Ch4 is\n                null;\n \n             --  Don't do this on the left hand of an assignment statement.\n-            --  Normally one would think that references like this would\n-            --  not occur, but they do in generated code, and mean that\n-            --  we really do want to assign the discriminant!\n+            --  Normally one would think that references like this would not\n+            --  occur, but they do in generated code, and mean that we really\n+            --  do want to assign the discriminant!\n \n             elsif Nkind (Par) = N_Assignment_Statement\n               and then Name (Par) = N"}, {"sha": "cf300544fb0b4b10b84d3b11307e0a2e5648a3d6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -4158,6 +4158,61 @@ package body Exp_Util is\n       end if;\n    end May_Generate_Large_Temp;\n \n+   ----------------------------\n+   -- Needs_Constant_Address --\n+   ----------------------------\n+\n+   function Needs_Constant_Address\n+     (Decl : Node_Id;\n+      Typ  : Entity_Id) return Boolean\n+   is\n+   begin\n+\n+      --  If we have no initialization of any kind, then we don't need to\n+      --  place any restrictions on the address clause, because the object\n+      --  will be elaborated after the address clause is evaluated. This\n+      --  happens if the declaration has no initial expression, or the type\n+      --  has no implicit initialization, or the object is imported.\n+\n+      --  The same holds for all initialized scalar types and all access\n+      --  types. Packed bit arrays of size up to 64 are represented using a\n+      --  modular type with an initialization (to zero) and can be processed\n+      --  like other initialized scalar types.\n+\n+      --  If the type is controlled, code to attach the object to a\n+      --  finalization chain is generated at the point of declaration,\n+      --  and therefore the elaboration of the object cannot be delayed:\n+      --  the address expression must be a constant.\n+\n+      if No (Expression (Decl))\n+        and then not Needs_Finalization (Typ)\n+        and then\n+          (not Has_Non_Null_Base_Init_Proc (Typ)\n+            or else Is_Imported (Defining_Identifier (Decl)))\n+      then\n+         return False;\n+\n+      elsif (Present (Expression (Decl)) and then Is_Scalar_Type (Typ))\n+        or else Is_Access_Type (Typ)\n+        or else\n+          (Is_Bit_Packed_Array (Typ)\n+             and then Is_Modular_Integer_Type (Packed_Array_Type (Typ)))\n+      then\n+         return False;\n+\n+      else\n+\n+         --  Otherwise, we require the address clause to be constant because\n+         --  the call to the initialization procedure (or the attach code) has\n+         --  to happen at the point of the declaration.\n+\n+         --  Actually the IP call has been moved to the freeze actions\n+         --  anyway, so maybe we can relax this restriction???\n+\n+         return True;\n+      end if;\n+   end Needs_Constant_Address;\n+\n    ----------------------------\n    -- New_Class_Wide_Subtype --\n    ----------------------------\n@@ -4946,6 +5001,7 @@ package body Exp_Util is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Def_Id,\n              Object_Definition   => New_Reference_To (Ref_Type, Loc),\n+             Constant_Present    => True,\n              Expression          => New_Exp));\n       end if;\n "}, {"sha": "4a11f93b04a966798405b20fdc67394822ba63db", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -575,6 +575,13 @@ package Exp_Util is\n    --  caller has to check whether stack checking is actually enabled in order\n    --  to guide the expansion (typically of a function call).\n \n+   function Needs_Constant_Address\n+     (Decl : Node_Id;\n+      Typ  : Entity_Id) return Boolean;\n+   --  Check whether the expression in an address clause is restricted to\n+   --  consist of constants, when the object has a non-trivial initialization\n+   --  or is controlled.\n+\n    function Non_Limited_Designated_Type (T : Entity_Id) return Entity_Id;\n    --  An anonymous access type may designate a limited view. Check whether\n    --  non-limited view is available during expansion, to examine components"}, {"sha": "9a22ff7bcf86e0bd6b14ae68df981a829315a9cb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -544,42 +544,7 @@ package body Freeze is\n       if Present (Addr) then\n          Expr := Expression (Addr);\n \n-         --  If we have no initialization of any kind, then we don't need to\n-         --  place any restrictions on the address clause, because the object\n-         --  will be elaborated after the address clause is evaluated. This\n-         --  happens if the declaration has no initial expression, or the type\n-         --  has no implicit initialization, or the object is imported.\n-\n-         --  The same holds for all initialized scalar types and all access\n-         --  types. Packed bit arrays of size up to 64 are represented using a\n-         --  modular type with an initialization (to zero) and can be processed\n-         --  like other initialized scalar types.\n-\n-         --  If the type is controlled, code to attach the object to a\n-         --  finalization chain is generated at the point of declaration,\n-         --  and therefore the elaboration of the object cannot be delayed:\n-         --  the address expression must be a constant.\n-\n-         if (No (Expression (Decl))\n-              and then not Needs_Finalization (Typ)\n-              and then (not Has_Non_Null_Base_Init_Proc (Typ)\n-                         or else Is_Imported (E)))\n-           or else (Present (Expression (Decl)) and then Is_Scalar_Type (Typ))\n-           or else Is_Access_Type (Typ)\n-           or else\n-             (Is_Bit_Packed_Array (Typ)\n-               and then Is_Modular_Integer_Type (Packed_Array_Type (Typ)))\n-         then\n-            null;\n-\n-         --  Otherwise, we require the address clause to be constant because\n-         --  the call to the initialization procedure (or the attach code) has\n-         --  to happen at the point of the declaration.\n-\n-         --  Actually the IP call has been moved to the freeze actions\n-         --  anyway, so maybe we can relax this restriction???\n-\n-         else\n+         if Needs_Constant_Address (Decl, Typ) then\n             Check_Constant_Address_Clause (Expr, E);\n \n             --  Has_Delayed_Freeze was set on E when the address clause was"}, {"sha": "cb14532194e2d03b3e28eab9c0f39de0055509f6", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -151,7 +151,7 @@ procedure Gnat1drv is\n          Front_End_Inlining := False;\n       end if;\n \n-      --  Tune settings for optimal SCIL generation in CodePeer_Mode\n+      --  Tune settings for optimal SCIL generation in CodePeer mode\n \n       if CodePeer_Mode then\n \n@@ -172,11 +172,11 @@ procedure Gnat1drv is\n \n          --  Enable some restrictions systematically to simplify the generated\n          --  code (and ease analysis). Note that restriction checks are also\n-         --  disabled in CodePeer_Mode, see Restrict.Check_Restriction\n+         --  disabled in CodePeer mode, see Restrict.Check_Restriction\n \n-         Restrict.Restrictions.Set (No_Task_Hierarchy) := True;\n-         Restrict.Restrictions.Set (No_Abort_Statements) := True;\n-         Restrict.Restrictions.Set (Max_Asynchronous_Select_Nesting) := True;\n+         Restrict.Restrictions.Set   (No_Task_Hierarchy)               := True;\n+         Restrict.Restrictions.Set   (No_Abort_Statements)             := True;\n+         Restrict.Restrictions.Set   (Max_Asynchronous_Select_Nesting) := True;\n          Restrict.Restrictions.Value (Max_Asynchronous_Select_Nesting) := 0;\n \n          --  Suppress overflow, division by zero and access checks since they\n@@ -205,7 +205,7 @@ procedure Gnat1drv is\n \n          Debug_Generated_Code := False;\n \n-         --  Turn cross-referencing on in case it was disabled (by e.g. -gnatD)\n+         --  Turn cross-referencing on in case it was disabled (e.g. by -gnatD)\n          --  Do we really need to spend time generating xref in CodePeer\n          --  mode??? Consider setting Xref_Active to False.\n \n@@ -215,8 +215,8 @@ procedure Gnat1drv is\n \n          Polling_Required := False;\n \n-         --  Set operating mode to Generate_Code to benefit from full\n-         --  front-end expansion (e.g. generics).\n+         --  Set operating mode to Generate_Code to benefit from full front-end\n+         --  expansion (e.g. generics).\n \n          Operating_Mode := Generate_Code;\n \n@@ -227,8 +227,8 @@ procedure Gnat1drv is\n          --  Enable assertions and debug pragmas, since they give CodePeer\n          --  valuable extra information.\n \n-         Assertions_Enabled     := True;\n-         Debug_Pragmas_Enabled  := True;\n+         Assertions_Enabled    := True;\n+         Debug_Pragmas_Enabled := True;\n \n          --  Suppress compiler warnings, since what we are interested in here\n          --  is what CodePeer can find out. Also disable all simple value\n@@ -320,10 +320,10 @@ procedure Gnat1drv is\n          end if;\n       end if;\n \n-      --  Set proper status for overflow checks. We turn on overflow checks\n-      --  if -gnatp was not specified, and either -gnato is set or the back\n-      --  end takes care of overflow checks. Otherwise we suppress overflow\n-      --  checks by default (since front end checks are expensive).\n+      --  Set proper status for overflow checks. We turn on overflow checks if\n+      --  -gnatp was not specified, and either -gnato is set or the back-end\n+      --  takes care of overflow checks. Otherwise we suppress overflow checks\n+      --  by default (since front end checks are expensive).\n \n       if not Opt.Suppress_Checks\n         and then (Opt.Enable_Overflow_Checks\n@@ -408,7 +408,7 @@ procedure Gnat1drv is\n          Error_Msg_N (\"remove incorrect body in file{!\", Main_Unit_Node);\n       end Bad_Body_Error;\n \n-      --  Start of processing for Check_Bad_Body\n+   --  Start of processing for Check_Bad_Body\n \n    begin\n       --  Nothing to do if we are only checking syntax, because we don't know\n@@ -432,7 +432,7 @@ procedure Gnat1drv is\n          Sname := Unit_Name (Main_Unit);\n \n          --  If we do not already have a body name, then get the body name\n-         --  (but how can we have a body name here ???)\n+         --  (but how can we have a body name here???)\n \n          if not Is_Body_Name (Sname) then\n             Sname := Get_Body_Name (Sname);\n@@ -665,9 +665,8 @@ begin\n          Write_Str (\"GNAT \");\n          Write_Str (Gnat_Version_String);\n          Write_Eol;\n-         Write_Str (\"Copyright 1992-\" &\n-                    Current_Year &\n-                    \", Free Software Foundation, Inc.\");\n+         Write_Str (\"Copyright 1992-\" & Current_Year\n+                    & \", Free Software Foundation, Inc.\");\n          Write_Eol;\n       end if;\n \n@@ -727,9 +726,9 @@ begin\n \n       Set_Generate_Code (Main_Unit);\n \n-      --  If we have a corresponding spec, and it comes from source\n-      --  or it is not a generated spec for a child subprogram body,\n-      --  then we need object code for the spec unit as well.\n+      --  If we have a corresponding spec, and it comes from source or it is\n+      --  not a generated spec for a child subprogram body, then we need object\n+      --  code for the spec unit as well.\n \n       if Nkind (Unit (Main_Unit_Node)) in N_Unit_Body\n         and then not Acts_As_Spec (Main_Unit_Node)\n@@ -763,8 +762,8 @@ begin\n          Back_End_Mode := Declarations_Only;\n \n       --  All remaining cases are cases in which the user requested that code\n-      --  be generated (i.e. no -gnatc or -gnats switch was used). Check if\n-      --  we can in fact satisfy this request.\n+      --  be generated (i.e. no -gnatc or -gnats switch was used). Check if we\n+      --  can in fact satisfy this request.\n \n       --  Cannot generate code if someone has turned off code generation for\n       --  any reason at all. We will try to figure out a reason below.\n@@ -789,9 +788,9 @@ begin\n       --  We can generate code for a package declaration or a subprogram\n       --  declaration only if it does not required a body.\n \n-      elsif (Main_Kind = N_Package_Declaration\n-               or else\n-             Main_Kind = N_Subprogram_Declaration)\n+      elsif Nkind_In (Main_Kind,\n+              N_Package_Declaration,\n+              N_Subprogram_Declaration)\n         and then\n           (not Body_Required (Main_Unit_Node)\n              or else\n@@ -802,18 +801,19 @@ begin\n       --  We can generate code for a generic package declaration of a generic\n       --  subprogram declaration only if does not require a body.\n \n-      elsif (Main_Kind = N_Generic_Package_Declaration\n-               or else\n-             Main_Kind = N_Generic_Subprogram_Declaration)\n+      elsif Nkind_In (Main_Kind,\n+              N_Generic_Package_Declaration,\n+              N_Generic_Subprogram_Declaration)\n         and then not Body_Required (Main_Unit_Node)\n       then\n          Back_End_Mode := Generate_Object;\n \n-      --  Compilation units that are renamings do not require bodies,\n-      --  so we can generate code for them.\n+      --  Compilation units that are renamings do not require bodies, so we can\n+      --  generate code for them.\n \n-      elsif Main_Kind = N_Package_Renaming_Declaration\n-        or else Main_Kind = N_Subprogram_Renaming_Declaration\n+      elsif Nkind_In (Main_Kind,\n+              N_Package_Renaming_Declaration,\n+              N_Subprogram_Renaming_Declaration)\n       then\n          Back_End_Mode := Generate_Object;\n "}, {"sha": "16448928b258c8887b217092f2dcd057121a99ba", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -5379,10 +5379,9 @@ package body Prj.Nmsc is\n \n             if not Dir_Exists then\n                Err_Vars.Error_Msg_File_1 := File_Name_Type (Exec_Dir.Value);\n-               Error_Msg\n-                 (Data.Flags,\n-                  \"exec directory { not found\",\n-                  Project.Location, Project);\n+               Error_Or_Warning\n+                 (Data.Flags, Data.Flags.Missing_Source_Files,\n+                  \"exec directory { not found\", Project.Location, Project);\n             end if;\n          end if;\n       end if;"}, {"sha": "d6e9bd8abb9d2d0dc603f2f2ca0563f2f49dfefc", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=0d90129062e7e64a15adf3a0ec5120a2cf8ea7ee", "patch": "@@ -1153,7 +1153,10 @@ package body Prj is\n    begin\n       return Source.Language.Config.Compiler_Driver /= No_File\n         and then Length_Of_Name (Source.Language.Config.Compiler_Driver) /= 0\n-        and then not Source.Locally_Removed;\n+        and then not Source.Locally_Removed\n+        and then (Source.Language.Config.Kind /= File_Based\n+                    or else\n+                  Source.Kind /= Spec);\n    end Is_Compilable;\n \n    ------------------------------"}]}