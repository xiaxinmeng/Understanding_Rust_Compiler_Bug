{"sha": "985acf5a0ac506f6df453475d0bfd7466ad392d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1YWNmNWEwYWM1MDZmNmRmNDUzNDc1ZDBiZmQ3NDY2YWQzOTJkNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-25T08:32:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-25T08:32:04Z"}, "message": "re PR c++/34938 (ICE with function pointers and attribute noreturn)\n\n/cp\n2014-08-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/34938\n\t* cp-tree.h (TFF_POINTER): Add.\n\t* cxx-pretty-print.h (pp_cxx_cv_qualifiers): Forward the third\n\targument too.\n\t* error.c (dump_type_suffix): Actually print the const and noreturn\n\tattribute when appropriate.\n\n/testsuite\n2014-08-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/34938\n\t* g++.dg/template/pr34938-1.C: New.\n\t* g++.dg/template/pr34938-2.C: Likewise.\n\nFrom-SVN: r214415", "tree": {"sha": "e33f8a7749a7fbd62dcf2839192eb89550037785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33f8a7749a7fbd62dcf2839192eb89550037785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985acf5a0ac506f6df453475d0bfd7466ad392d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985acf5a0ac506f6df453475d0bfd7466ad392d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985acf5a0ac506f6df453475d0bfd7466ad392d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985acf5a0ac506f6df453475d0bfd7466ad392d5/comments", "author": null, "committer": null, "parents": [{"sha": "028aee171abc1b13e97734bac4a3db46743d7a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028aee171abc1b13e97734bac4a3db46743d7a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028aee171abc1b13e97734bac4a3db46743d7a6b"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "18a281b0a586e03bf3705efd75885e40303d46fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -1,3 +1,12 @@\n+2014-08-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/34938\n+\t* cp-tree.h (TFF_POINTER): Add.\n+\t* cxx-pretty-print.h (pp_cxx_cv_qualifiers): Forward the third\n+\targument too.\n+\t* error.c (dump_type_suffix): Actually print the const and noreturn\n+\tattribute when appropriate.\n+\n 2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* decl.c (compute_array_index_type, grokdeclarator,"}, {"sha": "43818cdcd0d8f85f915ae3146ea2ce0b5e3a5e9c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -4728,7 +4728,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n    TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS: do not omit template arguments\n        identical to their defaults.\n    TFF_NO_TEMPLATE_BINDINGS: do not print information about the template\n-       arguments for a function template specialization.  */\n+       arguments for a function template specialization.\n+   TFF_POINTER: we are printing a pointer type.  */\n \n #define TFF_PLAIN_IDENTIFIER\t\t\t(0)\n #define TFF_SCOPE\t\t\t\t(1)\n@@ -4745,6 +4746,7 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define TFF_UNQUALIFIED_NAME\t\t\t(1 << 11)\n #define TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS\t(1 << 12)\n #define TFF_NO_TEMPLATE_BINDINGS\t\t(1 << 13)\n+#define TFF_POINTER\t\t                (1 << 14)\n \n /* Returns the TEMPLATE_DECL associated to a TEMPLATE_TEMPLATE_PARM\n    node.  */"}, {"sha": "9bdd4b61b53630384276745ac752d42a554f100d", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -59,8 +59,8 @@ struct cxx_pretty_printer : c_pretty_printer\n \n #define pp_cxx_cv_qualifier_seq(PP, T)   \\\n    pp_c_type_qualifier_list (PP, T)\n-#define pp_cxx_cv_qualifiers(PP, CV)   \\\n-   pp_c_cv_qualifiers (PP, CV, false)\n+#define pp_cxx_cv_qualifiers(PP, CV, FT) \\\n+   pp_c_cv_qualifiers (PP, CV, FT)\n \n #define pp_cxx_whitespace(PP)\t\tpp_c_whitespace (PP)\n #define pp_cxx_left_paren(PP)\t\tpp_c_left_paren (PP)"}, {"sha": "86fd4056f8d7416c128c69087cc7dded36927cda", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -820,6 +820,8 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n       if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n \tpp_cxx_right_paren (pp);\n+      if (TREE_CODE (t) == POINTER_TYPE)\n+\tflags |= TFF_POINTER;\n       dump_type_suffix (pp, TREE_TYPE (t), flags);\n       break;\n \n@@ -839,7 +841,9 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n \tdump_parameters (pp, arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n \tpp->padding = pp_before;\n-\tpp_cxx_cv_qualifiers (pp, type_memfn_quals (t));\n+\tpp_cxx_cv_qualifiers (pp, type_memfn_quals (t),\n+\t\t\t      TREE_CODE (t) == FUNCTION_TYPE\n+\t\t\t      && (flags & TFF_POINTER));\n \tdump_ref_qualifier (pp, t, flags);\n \tdump_exception_spec (pp, TYPE_RAISES_EXCEPTIONS (t), flags);\n \tdump_type_suffix (pp, TREE_TYPE (t), flags);"}, {"sha": "eb06e0bc7220ea66382c74051e7d2433f60ce675", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -1,3 +1,9 @@\n+2014-08-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/34938\n+\t* g++.dg/template/pr34938-1.C: New.\n+\t* g++.dg/template/pr34938-2.C: Likewise.\n+\n 2014-08-24  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/61996"}, {"sha": "f23a5a3e20f55df36c20d95e7f89f30b9d006bdc", "filename": "gcc/testsuite/g++.dg/template/pr34938-1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-1.C?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/34938\n+\n+typedef void (*fptr)() __attribute((noreturn)); \n+template<int>  void foo();\n+template<fptr> void bar();\n+\n+fptr f = bar< foo<0> >;   // { dg-error \"noreturn\" }"}, {"sha": "fe7650fd62499693cf067f3d21c5af82e7769516", "filename": "gcc/testsuite/g++.dg/template/pr34938-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985acf5a0ac506f6df453475d0bfd7466ad392d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr34938-2.C?ref=985acf5a0ac506f6df453475d0bfd7466ad392d5", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/34938\n+\n+template <class T> struct A { };\n+struct B { };\n+\n+A<void()const>* p1 = 42;           // { dg-error \"void\\\\(\\\\) const\" }\n+A<void(B::*)()const>* p2 = 42;     // { dg-error \"void \\\\(B::\\\\*\\\\)\\\\(\\\\) const\" }\n+\n+A<void()volatile>* p3 = 42;        // { dg-error \"void\\\\(\\\\) volatile\" }\n+A<void(B::*)()volatile>* p4 = 42;  // { dg-error \"void \\\\(B::\\\\*\\\\)\\\\(\\\\) volatile\" }"}]}