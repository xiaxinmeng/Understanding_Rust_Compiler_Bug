{"sha": "3f89235e9d26a56e848d99a812177e149d87df3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4OTIzNWU5ZDI2YTU2ZTg0OGQ5OWE4MTIxNzdlMTQ5ZDg3ZGYzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:38Z"}, "message": "re PR c++/48450 ([C++0x][SFINAE] Hard errors with static_cast expressions)\n\n\tPR c++/48450\n\t* typeck.c (check_for_casting_away_constness): Take complain.\n\t(build_static_cast_1, build_reinterpret_cast_1): Pass it.\n\t(build_const_cast_1): Pass it.  Take full complain parm.\n\t(build_const_cast, cp_build_c_cast): Adjust.\n\nFrom-SVN: r172145", "tree": {"sha": "5dd7d0956d80da281484bf54821d606e208fb3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd7d0956d80da281484bf54821d606e208fb3f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f89235e9d26a56e848d99a812177e149d87df3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f89235e9d26a56e848d99a812177e149d87df3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f89235e9d26a56e848d99a812177e149d87df3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f89235e9d26a56e848d99a812177e149d87df3c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cf0ca233fabc18547767ded4e4361bd632f6461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf0ca233fabc18547767ded4e4361bd632f6461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf0ca233fabc18547767ded4e4361bd632f6461"}], "stats": {"total": 265, "additions": 59, "deletions": 206}, "files": [{"sha": "26159e02d6af95887b890837bd05b835e1c09f89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f89235e9d26a56e848d99a812177e149d87df3c", "patch": "@@ -1,5 +1,11 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48450\n+\t* typeck.c (check_for_casting_away_constness): Take complain.\n+\t(build_static_cast_1, build_reinterpret_cast_1): Pass it.\n+\t(build_const_cast_1): Pass it.  Take full complain parm.\n+\t(build_const_cast, cp_build_c_cast): Adjust.\n+\n \t* tree.c (build_aggr_init_expr): Always return error_mark_node\n \ton abstract violation.\n "}, {"sha": "8e3796e2757179169b4ded2aaca934a9bdb3fe8b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3f89235e9d26a56e848d99a812177e149d87df3c", "patch": "@@ -5579,42 +5579,47 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n }\n \n /* Issue a diagnostic message if casting from SRC_TYPE to DEST_TYPE\n-   casts away constness.  CAST gives the type of cast.  \n+   casts away constness.  CAST gives the type of cast.  Returns true\n+   if the cast is ill-formed, false if it is well-formed.\n \n    ??? This function warns for casting away any qualifier not just\n    const.  We would like to specify exactly what qualifiers are casted\n    away.\n */\n \n-static void\n+static bool\n check_for_casting_away_constness (tree src_type, tree dest_type,\n-\t\t\t\t  enum tree_code cast)\n+\t\t\t\t  enum tree_code cast, tsubst_flags_t complain)\n {\n   /* C-style casts are allowed to cast away constness.  With\n      WARN_CAST_QUAL, we still want to issue a warning.  */\n   if (cast == CAST_EXPR && !warn_cast_qual)\n-      return;\n+    return false;\n   \n   if (!casts_away_constness (src_type, dest_type))\n-    return;\n+    return false;\n \n   switch (cast)\n     {\n     case CAST_EXPR:\n-      warning (OPT_Wcast_qual, \n-\t       \"cast from type %qT to type %qT casts away qualifiers\",\n-\t       src_type, dest_type);\n-      return;\n+      if (complain & tf_warning)\n+\twarning (OPT_Wcast_qual,\n+\t\t \"cast from type %qT to type %qT casts away qualifiers\",\n+\t\t src_type, dest_type);\n+      return false;\n       \n     case STATIC_CAST_EXPR:\n-      error (\"static_cast from type %qT to type %qT casts away qualifiers\",\n-\t     src_type, dest_type);\n-      return;\n+      if (complain & tf_error)\n+\terror (\"static_cast from type %qT to type %qT casts away qualifiers\",\n+\t       src_type, dest_type);\n+      return true;\n       \n     case REINTERPRET_CAST_EXPR:\n-      error (\"reinterpret_cast from type %qT to type %qT casts away qualifiers\",\n-\t     src_type, dest_type);\n-      return;\n+      if (complain & tf_error)\n+\terror (\"reinterpret_cast from type %qT to type %qT casts away qualifiers\",\n+\t       src_type, dest_type);\n+      return true;\n+\n     default:\n       gcc_unreachable();\n     }\n@@ -5832,8 +5837,10 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n     {\n       tree base;\n \n-      if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n+      if (!c_cast_p\n+\t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n+\t\t\t\t\t       complain))\n+\treturn error_mark_node;\n       base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype),\n \t\t\t  c_cast_p ? ba_unique : ba_check,\n \t\t\t  NULL);\n@@ -5868,10 +5875,13 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t}\n       if (can_convert (t1, t2) || can_convert (t2, t1))\n \t{\n-\t  if (!c_cast_p)\n-\t    check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n+\t  if (!c_cast_p\n+\t      && check_for_casting_away_constness (intype, type,\n+\t\t\t\t\t\t   STATIC_CAST_EXPR,\n+\t\t\t\t\t\t   complain))\n+\t    return error_mark_node;\n \t  return convert_ptrmem (type, expr, /*allow_inverse_p=*/1,\n-\t\t\t\t c_cast_p, tf_warning_or_error);\n+\t\t\t\t c_cast_p, complain);\n \t}\n     }\n \n@@ -5885,8 +5895,10 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       && VOID_TYPE_P (TREE_TYPE (intype))\n       && TYPE_PTROB_P (type))\n     {\n-      if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n+      if (!c_cast_p\n+\t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n+\t\t\t\t\t       complain))\n+\treturn error_mark_node;\n       return build_nop (type, expr);\n     }\n \n@@ -6090,8 +6102,11 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n     {\n       tree sexpr = expr;\n \n-      if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, REINTERPRET_CAST_EXPR);\n+      if (!c_cast_p\n+\t  && check_for_casting_away_constness (intype, type,\n+\t\t\t\t\t       REINTERPRET_CAST_EXPR,\n+\t\t\t\t\t       complain))\n+\treturn error_mark_node;\n       /* Warn about possible alignment problems.  */\n       if (STRICT_ALIGNMENT && warn_cast_align\n           && (complain & tf_warning)\n@@ -6168,7 +6183,7 @@ build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n    whether or not the conversion succeeded.  */\n \n static tree\n-build_const_cast_1 (tree dst_type, tree expr, bool complain,\n+build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n \t\t    bool *valid_p)\n {\n   tree src_type;\n@@ -6187,7 +6202,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n \n   if (!POINTER_TYPE_P (dst_type) && !TYPE_PTRMEM_P (dst_type))\n     {\n-      if (complain)\n+      if (complain & tf_error)\n \terror (\"invalid use of const_cast with type %qT, \"\n \t       \"which is not a pointer, \"\n \t       \"reference, nor a pointer-to-data-member type\", dst_type);\n@@ -6196,7 +6211,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n \n   if (TREE_CODE (TREE_TYPE (dst_type)) == FUNCTION_TYPE)\n     {\n-      if (complain)\n+      if (complain & tf_error)\n \terror (\"invalid use of const_cast with type %qT, which is a pointer \"\n \t       \"or reference to a function type\", dst_type);\n       return error_mark_node;\n@@ -6221,7 +6236,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n       reference_type = dst_type;\n       if (! real_lvalue_p (expr))\n \t{\n-\t  if (complain)\n+\t  if (complain & tf_error)\n \t    error (\"invalid const_cast of an rvalue of type %qT to type %qT\",\n \t\t   src_type, dst_type);\n \t  return error_mark_node;\n@@ -6248,12 +6263,12 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n \t  *valid_p = true;\n \t  /* This cast is actually a C-style cast.  Issue a warning if\n \t     the user is making a potentially unsafe cast.  */\n-\t  check_for_casting_away_constness (src_type, dst_type, CAST_EXPR);\n+\t  check_for_casting_away_constness (src_type, dst_type, CAST_EXPR,\n+\t\t\t\t\t    complain);\n \t}\n       if (reference_type)\n \t{\n-\t  expr = cp_build_addr_expr (expr,\n-\t\t\t\t     complain ? tf_warning_or_error : tf_none);\n+\t  expr = cp_build_addr_expr (expr, complain);\n \t  expr = build_nop (reference_type, expr);\n \t  return convert_from_reference (expr);\n \t}\n@@ -6270,7 +6285,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n \t}\n     }\n \n-  if (complain)\n+  if (complain & tf_error)\n     error (\"invalid const_cast from type %qT to type %qT\",\n \t   src_type, dst_type);\n   return error_mark_node;\n@@ -6293,7 +6308,7 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n       return convert_from_reference (t);\n     }\n \n-  return build_const_cast_1 (type, expr, complain & tf_error,\n+  return build_const_cast_1 (type, expr, complain,\n \t\t\t     /*valid_p=*/NULL);\n }\n \n@@ -6379,7 +6394,7 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n \t\t\"cast to pointer from integer of different size\");\n \n   /* A C-style cast can be a const_cast.  */\n-  result = build_const_cast_1 (type, value, /*complain=*/false,\n+  result = build_const_cast_1 (type, value, complain & tf_warning,\n \t\t\t       &valid_p);\n   if (valid_p)\n     return result;"}, {"sha": "288bd1feb9d7c880af7d75805aedef5170a5e3ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f89235e9d26a56e848d99a812177e149d87df3c", "patch": "@@ -1,5 +1,9 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* c-c++-common/Wcast-qual-1.c: Move here from...\n+\t* gcc.dg/cast-qual-3.c: ...here, and...\n+\t* g++.dg/warn/Wcast-qual2.C: ...here.\n+\n \t* g++.dg/cpp0x/sfinae8.C: New.\n \n \t* g++.dg/cpp0x/sfinae7.C: New."}, {"sha": "640e4f0b683c21ab53ac1103dfaf42f2248eb0f1", "filename": "gcc/testsuite/c-c++-common/Wcast-qual-1.c", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f89235e9d26a56e848d99a812177e149d87df3c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-qual-1.c?ref=3f89235e9d26a56e848d99a812177e149d87df3c", "patch": "@@ -1,11 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wcast-qual\" } */\n \n-/* The files gcc.dg/cast-qual-3.c and g++.dg/warn/Wcast-qual2.c are\n-   duals.  they are intended to show that gcc -Wcast-qual and g++\n-   -Wcast-qual emit warnings in the same cases.  If you change this\n-   file, please also change the other one.  */\n-\n void\n f1 (void *bar)\n {", "previous_filename": "gcc/testsuite/g++.dg/warn/Wcast-qual2.C"}, {"sha": "88fdcfb38f5125fbcbac0ed5cd1df30408b704dd", "filename": "gcc/testsuite/gcc.dg/cast-qual-3.c", "status": "removed", "additions": 0, "deletions": 167, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c?ref=3cf0ca233fabc18547767ded4e4361bd632f6461", "patch": "@@ -1,167 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-Wcast-qual\" } */\n-\n-/* The files gcc.dg/cast-qual-3.c and g++.dg/warn/Wcast-qual2.c are\n-   duals.  they are intended to show that gcc -Wcast-qual and g++\n-   -Wcast-qual emit warnings in the same cases.  If you change this\n-   file, please also change the other one.  */\n-\n-void\n-f1 (void *bar)\n-{\n-  const void *p1 = (const void *) bar;\n-  const char *p2 = (const char *) bar;\n-  const void **p3 = (const void **) bar;\n-  const char **p4 = (const char **) bar;\n-  const void * const *p5 = (const void * const *) bar;\n-  const char * const *p6 = (const char * const *) bar;\n-  void * const *p7 = (void * const *) bar;\n-  char * const *p8 = (char * const *) bar;\n-  const void ***p9 = (const void ***) bar;\n-  const char ***p10 = (const char ***) bar;\n-  void * const **p11 = (void * const **) bar;\n-  char * const **p12 = (char * const **) bar;\n-  void ** const *p13 = (void ** const *) bar;\n-  char ** const *p14 = (char ** const *) bar;\n-  const void * const **p15 = (const void * const **) bar;\n-  const char * const **p16 = (const char * const **) bar;\n-  const void ** const *p17 = (const void ** const *) bar;\n-  const char ** const *p18 = (const char ** const *) bar;\n-  void * const * const * p19 = (void * const * const *) bar;\n-  char * const * const * p20 = (char * const * const *) bar;\n-  const void * const * const *p21 = (const void * const * const *) bar;\n-  const char * const * const *p22 = (const char * const * const *) bar;\n-}\n-\n-void\n-f2 (void **bar)\n-{\n-  const void *p1 = (const void *) bar;\n-  const char *p2 = (const char *) bar;\n-  const void **p3 = (const void **) bar; /* { dg-warning \"cast\" } */\n-  const char **p4 = (const char **) bar;\n-  const void * const *p5 = (const void * const *) bar;\n-  const char * const *p6 = (const char * const *) bar;\n-  void * const *p7 = (void * const *) bar;\n-  char * const *p8 = (char * const *) bar;\n-  const void ***p9 = (const void ***) bar;\n-  const char ***p10 = (const char ***) bar;\n-  void * const **p11 = (void * const **) bar;\n-  char * const **p12 = (char * const **) bar;\n-  void ** const *p13 = (void ** const *) bar;\n-  char ** const *p14 = (char ** const *) bar;\n-  const void * const **p15 = (const void * const **) bar;\n-  const char * const **p16 = (const char * const **) bar;\n-  const void ** const *p17 = (const void ** const *) bar;\n-  const char ** const *p18 = (const char ** const *) bar;\n-  void * const * const * p19 = (void * const * const *) bar;\n-  char * const * const * p20 = (char * const * const *) bar;\n-  const void * const * const *p21 = (const void * const * const *) bar;\n-  const char * const * const *p22 = (const char * const * const *) bar;\n-}\n-\n-void\n-f3 (void ***bar)\n-{\n-  const void *p1 = (const void *) bar;\n-  const char *p2 = (const char *) bar;\n-  const void **p3 = (const void **) bar;\n-  const char **p4 = (const char **) bar;\n-  const void * const *p5 = (const void * const *) bar;\n-  const char * const *p6 = (const char * const *) bar;\n-  void * const *p7 = (void * const *) bar;\n-  char * const *p8 = (char * const *) bar;\n-  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n-  const char ***p10 = (const char ***) bar;\n-  void * const **p11 = (void * const **) bar; /* { dg-warning \"cast\" } */\n-  char * const **p12 = (char * const **) bar;\n-  void ** const *p13 = (void ** const *) bar;\n-  char ** const *p14 = (char ** const *) bar;\n-  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n-  const char * const **p16 = (const char * const **) bar;\n-  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n-  const char ** const *p18 = (const char ** const *) bar;\n-  void * const * const * p19 = (void * const * const *) bar;\n-  char * const * const * p20 = (char * const * const *) bar;\n-  const void * const * const *p21 = (const void * const * const *) bar;\n-  const char * const * const *p22 = (const char * const * const *) bar;\n-}\n-\n-void\n-f4 (void * const **bar)\n-{\n-  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n-  void * const **p11 = (void * const **) bar;\n-  void ** const *p13 = (void ** const *) bar; /* { dg-warning \"cast\" } */\n-  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n-  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n-  void * const * const * p19 = (void * const * const *) bar;\n-  const void * const * const *p21 = (const void * const * const *) bar;\n-}\n-\n-void\n-f5 (char ***bar)\n-{\n-  volatile const char ***p9 = (volatile const char ***) bar; /* { dg-warning \"cast\" } */\n-  volatile char * const **p11 = (volatile char * const **) bar; /* { dg-warning \"cast\" } */\n-  volatile char ** const *p13 = (volatile char ** const *) bar; /* { dg-warning \"cast\" } */\n-  volatile const char * const **p15 = (volatile const char * const **) bar; /* { dg-warning \"cast\" } */\n-  volatile const char ** const *p17 = (volatile const char ** const *) bar; /* { dg-warning \"cast\" } */\n-  volatile char * const * const * p19 = (volatile char * const * const *) bar;\n-  volatile const char * const * const *p21 = (volatile const char * const * const *) bar;\n-}\n-\n-void\n-f6 (char ***bar)\n-{\n-  const char * volatile **p9 = (const char * volatile **) bar; /* { dg-warning \"cast\" } */\n-  char * volatile const **p11 = (char * volatile const **) bar; /* { dg-warning \"cast\" } */\n-  char * volatile * const *p13 = (char * volatile * const *) bar;\n-  const char * volatile const **p15 = (const char * volatile const **) bar; /* { dg-warning \"cast\" } */\n-  const char * volatile * const *p17 = (const char * volatile * const *) bar; /* { dg-warning \"cast\" } */\n-  char * volatile const * const * p19 = (char * volatile const * const *) bar;\n-  const char * volatile const * const *p21 = (const char * volatile const * const *) bar;\n-}\n-\n-void\n-f7 (char ***bar)\n-{\n-  const char ** volatile *p9 = (const char ** volatile *) bar; /* { dg-warning \"cast\" } */\n-  char * const * volatile *p11 = (char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n-  char ** volatile const *p13 = (char ** volatile const *) bar;\n-  const char * const * volatile *p15 = (const char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n-  const char ** volatile const *p17 = (const char ** volatile const *) bar; /* { dg-warning \"cast\" } */\n-  char * const * volatile const * p19 = (char * const * volatile const *) bar;\n-  const char * const * volatile const *p21 = (const char * const * volatile const *) bar;\n-}\n-\n-typedef int (intfn) (int);\n-typedef intfn *pintfn;\n-typedef const intfn *constfn;\n-\n-void\n-f8 (constfn ***bar)\n-{\n-  const constfn *p1 = (const constfn *) bar;\n-  const pintfn *p2 = (const pintfn *) bar;\n-  const constfn **p3 = (const constfn **) bar;\n-  const pintfn **p4 = (const pintfn **) bar;\n-  const constfn * const *p5 = (const constfn * const *) bar;\n-  const pintfn * const *p6 = (const pintfn * const *) bar;\n-  constfn * const *p7 = (constfn * const *) bar;\n-  pintfn * const *p8 = (pintfn * const *) bar;\n-  const constfn ***p9 = (const constfn ***) bar; /* { dg-warning \"cast\" } */\n-  const pintfn ***p10 = (const pintfn ***) bar; /* { dg-warning \"cast\" } */\n-  constfn * const **p11 = (constfn * const **) bar; /* { dg-warning \"cast\" } */\n-  pintfn * const **p12 = (pintfn * const **) bar; /* { dg-warning \"cast\" } */\n-  constfn ** const *p13 = (constfn ** const *) bar;\n-  pintfn ** const *p14 = (pintfn ** const *) bar;\n-  const constfn * const **p15 = (const constfn * const **) bar; /* { dg-warning \"cast\" } */\n-  const pintfn * const **p16 = (const pintfn * const **) bar; /* { dg-warning \"cast\" } */\n-  const constfn ** const *p17 = (const constfn ** const *) bar; /* { dg-warning \"cast\" } */\n-  const pintfn ** const *p18 = (const pintfn ** const *) bar; /* { dg-warning \"cast\" } */\n-  constfn * const * const * p19 = (constfn * const * const *) bar;\n-  pintfn * const * const * p20 = (pintfn * const * const *) bar;\n-  const constfn * const * const *p21 = (const constfn * const * const *) bar;\n-  const pintfn * const * const *p22 = (const pintfn * const * const *) bar;\n-}"}]}