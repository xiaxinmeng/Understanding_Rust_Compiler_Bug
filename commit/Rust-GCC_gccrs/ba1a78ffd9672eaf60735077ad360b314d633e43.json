{"sha": "ba1a78ffd9672eaf60735077ad360b314d633e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExYTc4ZmZkOTY3MmVhZjYwNzM1MDc3YWQzNjBiMzE0ZDYzM2U0Mw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2018-12-17T19:18:17Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2018-12-17T19:18:17Z"}, "message": "aarch64-torture.exp: New file.\n\n2018-12-17  Steve Ellcey  <sellcey@cavium.com>\n\n\t* gcc.target/aarch64/torture/aarch64-torture.exp: New file.\n\t* gcc.target/aarch64/torture/simd-abi-1.c: New test.\n\t* gcc.target/aarch64/torture/simd-abi-2.c: Ditto.\n\t* gcc.target/aarch64/torture/simd-abi-3.c: Ditto.\n\t* gcc.target/aarch64/torture/simd-abi-4.c: Ditto.\n\t* gcc.target/aarch64/torture/simd-abi-5.c: Ditto.\n\t* gcc.target/aarch64/torture/simd-abi-6.c: Ditto.\n\t* gcc.target/aarch64/torture/simd-abi-7.c: Ditto.\n\nFrom-SVN: r267209", "tree": {"sha": "847c3e9a3994d529cfc4499262d8a50ce70ab4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/847c3e9a3994d529cfc4499262d8a50ce70ab4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba1a78ffd9672eaf60735077ad360b314d633e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1a78ffd9672eaf60735077ad360b314d633e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1a78ffd9672eaf60735077ad360b314d633e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1a78ffd9672eaf60735077ad360b314d633e43/comments", "author": null, "committer": null, "parents": [{"sha": "a0d0b980f15035a74ec766bbbdbb73397c090f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d0b980f15035a74ec766bbbdbb73397c090f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d0b980f15035a74ec766bbbdbb73397c090f8c"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "22f08ffbb4e7644ce9dc0c9ad2268f6b485ccc30", "filename": "gcc/testsuite/gcc.target/aarch64/torture/aarch64-torture.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Faarch64-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Faarch64-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Faarch64-torture.exp?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `gcc-dg.exp' driver, looping over\n+# optimization options.\n+\n+# Exit immediately if this isn't a Aarch64 target.\n+if { ![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "249554e7b11f439df38b2baf217e225c15885a01", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-1.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+\n+void __attribute__ ((aarch64_vector_pcs))\n+f (void)\n+{\n+  /* Clobber all fp/simd regs and verify that the correct ones are saved\n+     and restored in the prologue and epilogue of a SIMD function. */\n+  __asm__ __volatile__ (\"\" :::  \"q0\",  \"q1\",  \"q2\",  \"q3\");\n+  __asm__ __volatile__ (\"\" :::  \"q4\",  \"q5\",  \"q6\",  \"q7\");\n+  __asm__ __volatile__ (\"\" :::  \"q8\",  \"q9\", \"q10\", \"q11\");\n+  __asm__ __volatile__ (\"\" ::: \"q12\", \"q13\", \"q14\", \"q15\");\n+  __asm__ __volatile__ (\"\" ::: \"q16\", \"q17\", \"q18\", \"q19\");\n+  __asm__ __volatile__ (\"\" ::: \"q20\", \"q21\", \"q22\", \"q23\");\n+  __asm__ __volatile__ (\"\" ::: \"q24\", \"q25\", \"q26\", \"q27\");\n+  __asm__ __volatile__ (\"\" ::: \"q28\", \"q29\", \"q30\", \"q31\");\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\t} } } */"}, {"sha": "e28e82af90ef4687c82608413288b43059413d64", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-2.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+\n+void\n+f (void)\n+{\n+  /* Clobber all fp/simd regs and verify that the correct ones are saved\n+     and restored in the prologue and epilogue of a normal non-SIMD function. */\n+  __asm__ __volatile__ (\"\" :::  \"q0\",  \"q1\",  \"q2\",  \"q3\");\n+  __asm__ __volatile__ (\"\" :::  \"q4\",  \"q5\",  \"q6\",  \"q7\");\n+  __asm__ __volatile__ (\"\" :::  \"q8\",  \"q9\", \"q10\", \"q11\");\n+  __asm__ __volatile__ (\"\" ::: \"q12\", \"q13\", \"q14\", \"q15\");\n+  __asm__ __volatile__ (\"\" ::: \"q16\", \"q17\", \"q18\", \"q19\");\n+  __asm__ __volatile__ (\"\" ::: \"q20\", \"q21\", \"q22\", \"q23\");\n+  __asm__ __volatile__ (\"\" ::: \"q24\", \"q25\", \"q26\", \"q27\");\n+  __asm__ __volatile__ (\"\" ::: \"q28\", \"q29\", \"q30\", \"q31\");\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\td8, d9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\td10, d11} } } */\n+/* { dg-final { scan-assembler {\\sstp\\td12, d13} } } */\n+/* { dg-final { scan-assembler {\\sstp\\td14, d15} } } */\n+/* { dg-final { scan-assembler {\\sldp\\td8, d9} } } */\n+/* { dg-final { scan-assembler {\\sldp\\td10, d11} } } */\n+/* { dg-final { scan-assembler {\\sldp\\td12, d13} } } */\n+/* { dg-final { scan-assembler {\\sldp\\td14, d15} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[01234567]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[01234567]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq1[6789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq1[6789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\t} } } */"}, {"sha": "7d4f54fed9772b5beffadb9a1e599593d1c04503", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-3.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+\n+extern void g (void);\n+\n+void __attribute__ ((aarch64_vector_pcs))\n+f (void)\n+{\n+\tg();\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\t} } } */"}, {"sha": "e399690f364987bbe028cd97dfb28edbcc9db0d1", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-4.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,34 @@\n+/* dg-do run */\n+/* { dg-additional-options \"-std=c99\" }  */\n+\n+\n+\n+/* There is nothing special about the calculations here, this is just\n+   a test that can be compiled and run.  */\n+\n+extern void abort (void);\n+\n+__Float64x2_t __attribute__ ((noinline, aarch64_vector_pcs))\n+foo(__Float64x2_t a, __Float64x2_t b, __Float64x2_t c,\n+    __Float64x2_t d, __Float64x2_t e, __Float64x2_t f,\n+    __Float64x2_t g, __Float64x2_t h, __Float64x2_t i)\n+{\n+\t__Float64x2_t w, x, y, z;\n+\tw = a + b * c;\n+\tx = d + e * f;\n+\ty = g + h * i;\n+\treturn w + x * y;\n+}\n+\n+\n+int main()\n+{\n+\t__Float64x2_t a, b, c, d;\n+\ta = (__Float64x2_t) { 1.0, 2.0 };\n+\tb = (__Float64x2_t) { 3.0, 4.0 };\n+\tc = (__Float64x2_t) { 5.0, 6.0 };\n+\td = foo (a, b, c, (a+b), (b+c), (a+c), (a-b), (b-c), (a-c)) + a + b + c;\n+\tif (d[0] != 337.0 || d[1] != 554.0)\n+\t\tabort ();\n+\treturn 0;\n+}"}, {"sha": "7d639a5e1cb5d548503e3a5b8cfe18cb747412b8", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-5.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+void __attribute__ ((aarch64_vector_pcs))\n+f (void)\n+{\n+  /* Clobber some fp/simd regs and verify that only those are saved\n+     and restored in the prologue and epilogue of a SIMD function. */\n+  __asm__ __volatile__ (\"\" :::  \"q8\",  \"q9\", \"q10\", \"q11\");\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq1[23456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq1[23456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\t} } } */"}, {"sha": "dc13e1634d673f2fb4932194e467dc02f1f5f768", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-6.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+void __attribute__ ((aarch64_vector_pcs))\n+f (void)\n+{\n+  /* Clobber some fp/simd regs and verify that only those are saved\n+     and restored in the prologue and epilogue of a SIMD function. */\n+  __asm__ __volatile__ (\"\" :::  \"q8\", \"q10\", \"q11\");\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q10} } } */\n+/* { dg-final { scan-assembler {\\sstr\\tq11} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[0345679]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[0345679]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq1[123456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq1[123456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\tq[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\tq[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\tq1[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\tq1[023456789]} } } */"}, {"sha": "aafd973335c127fb08d0a2f6b693f185aab15444", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1a78ffd9672eaf60735077ad360b314d633e43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-7.c?ref=ba1a78ffd9672eaf60735077ad360b314d633e43", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+void __attribute__ ((aarch64_vector_pcs))\n+f (void)\n+{\n+  /* Clobber some fp/simd regs and verify that only those are saved\n+     and restored in the prologue and epilogue of a SIMD function. */\n+  __asm__ __volatile__ (\"\" :::  \"q8\", \"q9\", \"q11\");\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstr\\tq11} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq[034567]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq1[0123456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq1[0123456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\tq2[456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sldp\\td} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\tq[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\tq[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sstr\\tq1[023456789]} } } */\n+/* { dg-final { scan-assembler-not {\\sldr\\tq1[023456789]} } } */"}]}