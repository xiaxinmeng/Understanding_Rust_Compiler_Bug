{"sha": "f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyYjI3YTVmNjdkNzQ2Nzc5MmFiN2FiNTJiMmEzNjFlMWM5ZDVlYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-13T14:28:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-13T14:28:39Z"}, "message": "Jan Hubicka <hubicka@freesoft.cz>\n\nJan Hubicka <hubicka@freesoft.cz>\n        * i386.md (movsf_push): Handle memory to memory case too, new splitter.\n        (movdf_push, movxf_push): Likewise.\n        (movsf_push_memory, movdf_push_memory, movxf_push_memory): Remove.\n\nFrom-SVN: r26408", "tree": {"sha": "17e9f3bc12080e53d84092d25df04098a8b04d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e9f3bc12080e53d84092d25df04098a8b04d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea/comments", "author": null, "committer": null, "parents": [{"sha": "eba0e61dc231daa416063ee779e5f5d2d7de250a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba0e61dc231daa416063ee779e5f5d2d7de250a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba0e61dc231daa416063ee779e5f5d2d7de250a"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "94ec13618200a2ab5b3a521591ec62dffd398178", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "patch": "@@ -1,3 +1,9 @@\n+Tue Apr 13 14:26:31 1999  Jan Hubicka <hubicka@freesoft.cz>\n+\n+\t* i386.md (movsf_push): Handle memory to memory case too, new splitter.\n+\t(movdf_push, movxf_push): Likewise.\n+\t(movsf_push_memory, movdf_push_memory, movxf_push_memory): Remove.\n+\n Tue Apr 13 14:14:06 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n \t* i386.md: Do not output mov %0,reg on AMD K6."}, {"sha": "02256d4ea6c6281fbc4bb36114ccb380097c9860", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f72b27a5f67d7467792ab7ab52b2a361e1c9d5ea", "patch": "@@ -1283,7 +1283,8 @@\n (define_insn \"movsf_push\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:SF 1 \"general_operand\" \"*rfF,m\"))]\n-  \"GET_CODE (operands[1]) != MEM || reload_in_progress || reload_completed\"\n+  \"TARGET_PUSH_MEMORY || GET_CODE (operands[1]) != MEM \n+   || reload_in_progress || reload_completed\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1310,11 +1311,15 @@\n   return AS1 (push%L0,%1);\n }\")\n \n-(define_insn \"movsf_push_memory\"\n-  [(set (match_operand:SF 0 \"push_operand\" \"=<\")\n-\t(match_operand:SF 1 \"memory_operand\" \"m\"))]\n-  \"TARGET_PUSH_MEMORY\"\n-  \"* return AS1 (push%L0,%1);\")\n+(define_split\n+  [(set (match_operand:SF 0 \"push_operand\" \"\")\n+        (match_operand:SF 1 \"general_operand\" \"\"))]\n+  \"reload_completed && STACK_REG_P (operands[1])\"\n+  [(set (reg:SI 7)\n+        (minus:SI (reg:SI 7) (const_int 4)))\n+   (set (mem:SF (reg:SI 7))\n+        (match_dup 1))]\n+  \"\")\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n@@ -1405,7 +1410,8 @@\n (define_insn \"movdf_push\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:DF 1 \"general_operand\" \"*rfF,o\"))]\n-  \"GET_CODE (operands[1]) != MEM || reload_in_progress || reload_completed\"\n+  \"TARGET_PUSH_MEMORY || GET_CODE (operands[1]) != MEM \n+   || reload_in_progress || reload_completed\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1432,11 +1438,15 @@\n   return output_move_double (operands);\n }\")\n \n-(define_insn \"movdf_push_memory\"\n-  [(set (match_operand:DF 0 \"push_operand\" \"=<\")\n-\t(match_operand:DF 1 \"memory_operand\" \"o\"))]\n-  \"TARGET_PUSH_MEMORY\"\n-  \"* return output_move_pushmem (operands, insn, GET_MODE_SIZE (DFmode),0,0);\")\n+(define_split\n+  [(set (match_operand:DF 0 \"push_operand\" \"\")\n+        (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"reload_completed && STACK_REG_P (operands[1])\"\n+  [(set (reg:SI 7)\n+        (minus:SI (reg:SI 7) (const_int 8)))\n+   (set (mem:DF (reg:SI 7))\n+        (match_dup 1))]\n+  \"\")\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -1529,7 +1539,8 @@\n (define_insn \"movxf_push\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n  \t(match_operand:XF 1 \"general_operand\" \"*rfF,o\"))]\n-  \"GET_CODE (operands[1]) != MEM || reload_in_progress || reload_completed\"\n+  \"TARGET_PUSH_MEMORY || GET_CODE (operands[1]) != MEM \n+   || reload_in_progress || reload_completed\"\n   \"*\n {\n   if (STACK_REG_P (operands[1]))\n@@ -1555,11 +1566,15 @@\n   return output_move_double (operands);\n  }\")\n \n-(define_insn \"movxf_push_memory\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n- \t(match_operand:XF 1 \"memory_operand\" \"o\"))]\n-  \"TARGET_PUSH_MEMORY\"\n-  \"* return output_move_pushmem (operands, insn, GET_MODE_SIZE (XFmode),0,0);\")\n+(define_split\n+  [(set (match_operand:XF 0 \"push_operand\" \"\")\n+        (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"reload_completed && STACK_REG_P (operands[1])\"\n+  [(set (reg:SI 7)\n+        (minus:SI (reg:SI 7) (const_int 12)))\n+   (set (mem:XF (reg:SI 7))\n+        (match_dup 1))]\n+  \"\")\n \n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"general_operand\" \"\")"}]}