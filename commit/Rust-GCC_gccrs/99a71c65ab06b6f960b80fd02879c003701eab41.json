{"sha": "99a71c65ab06b6f960b80fd02879c003701eab41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlhNzFjNjVhYjA2YjZmOTYwYjgwZmQwMjg3OWMwMDM3MDFlYWI0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:10:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:10:58Z"}, "message": "[multiple changes]\n\n2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Is_Ghost_Subprogram): Remove useless code.\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor addition of index entry.\n\n2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Check_Access_Invariants): Test whether an\n\tinvariant procedure is empty before generating a call to it.\n\t(Has_Enabled_Predicate): New routine.\n\t(Has_Null_Body): New routine.\n\t(Process_PPCs): Test whether an invariant procedure is\n\tempty before generating a call to it. Test whether predicates are\n\tenabled for a particular type before generating a predicate call.\n\t* sem_util.ads, sem_util.adb (Find_Pragma): New routine.\n\nFrom-SVN: r198282", "tree": {"sha": "a92ff2d292c0515852b47744bcaf3b740c139a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a92ff2d292c0515852b47744bcaf3b740c139a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99a71c65ab06b6f960b80fd02879c003701eab41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a71c65ab06b6f960b80fd02879c003701eab41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a71c65ab06b6f960b80fd02879c003701eab41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a71c65ab06b6f960b80fd02879c003701eab41/comments", "author": null, "committer": null, "parents": [{"sha": "09a078a19d3159edcc0e08138721677e219803ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a078a19d3159edcc0e08138721677e219803ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a078a19d3159edcc0e08138721677e219803ac"}], "stats": {"total": 173, "additions": 151, "deletions": 22}, "files": [{"sha": "3d60a92b44e394a71306f9d2c784000d98defe65", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -1,3 +1,22 @@\n+2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Is_Ghost_Subprogram): Remove useless code.\n+\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor addition of index entry.\n+\n+2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Access_Invariants): Test whether an\n+\tinvariant procedure is empty before generating a call to it.\n+\t(Has_Enabled_Predicate): New routine.\n+\t(Has_Null_Body): New routine.\n+\t(Process_PPCs): Test whether an invariant procedure is\n+\tempty before generating a call to it. Test whether predicates are\n+\tenabled for a particular type before generating a predicate call.\n+\t* sem_util.ads, sem_util.adb (Find_Pragma): New routine.\n+\n 2013-04-25  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch7.adb, einfo.adb, repinfo.adb, snames.adb-tmpl,"}, {"sha": "7092ee7adf94622cd3c7698101c6993be666f6ed", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -6592,22 +6592,12 @@ package body Einfo is\n    -------------------------\n \n    function Is_Ghost_Subprogram (Id : E) return B is\n-      Subp_Id : Entity_Id := Id;\n-\n    begin\n-      if Present (Subp_Id)\n-        and then Ekind_In (Subp_Id, E_Function, E_Procedure)\n-      then\n-         --  Handle subprogram renamings\n-\n-         if Present (Alias (Subp_Id)) then\n-            Subp_Id := Alias (Subp_Id);\n-         end if;\n-\n-         return Convention (Subp_Id) = Convention_Ghost;\n+      if Present (Id) and then Ekind_In (Id, E_Function, E_Procedure) then\n+         return Convention (Id) = Convention_Ghost;\n+      else\n+         return False;\n       end if;\n-\n-      return False;\n    end Is_Ghost_Subprogram;\n \n    --------------------"}, {"sha": "4e228b1626fa06618d605bd63da85f8727338a30", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -6043,6 +6043,7 @@ postcondition of the subprogram should be ignored for this test case.\n @findex Thread_Local_Storage\n @cindex Task specific storage\n @cindex TLS (Thread Local Storage)\n+@cindex Task_Attributes\n Syntax:\n \n @smallexample @c ada"}, {"sha": "4b13429e25d526234618cd3cb992a1e45c72c19b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -11241,6 +11241,14 @@ package body Sem_Ch6 is\n       --  references to parameters of the inherited subprogram to point to the\n       --  corresponding parameters of the current subprogram.\n \n+      function Has_Checked_Predicate (Typ : Entity_Id) return Boolean;\n+      --  Determine whether type Typ has or inherits at least one predicate\n+      --  aspect or pragma, for which the applicable policy is Checked.\n+\n+      function Has_Null_Body (Proc_Id : Entity_Id) return Boolean;\n+      --  Determine whether the body of procedure Proc_Id contains a sole null\n+      --  statement, possibly followed by an optional return.\n+\n       procedure Insert_After_Last_Declaration (Nod : Node_Id);\n       --  Insert node Nod after the last declaration of the context\n \n@@ -11294,6 +11302,7 @@ package body Sem_Ch6 is\n \n             if Has_Invariants (Typ)\n               and then Present (Invariant_Procedure (Typ))\n+              and then not Has_Null_Body (Invariant_Procedure (Typ))\n               and then Is_Public_Subprogram_For (Typ)\n             then\n                Obj :=\n@@ -11886,6 +11895,91 @@ package body Sem_Ch6 is\n          return CP;\n       end Grab_PPC;\n \n+      ---------------------------\n+      -- Has_Checked_Predicate --\n+      ---------------------------\n+\n+      function Has_Checked_Predicate (Typ : Entity_Id) return Boolean is\n+         Anc  : Entity_Id;\n+         Pred : Node_Id;\n+\n+      begin\n+         --  Climb the ancestor type chain staring from the input. This is done\n+         --  because the input type may lack aspect/pragma predicate and simply\n+         --  inherit those from its ancestor.\n+\n+         Anc := Typ;\n+         while Present (Anc) loop\n+            Pred := Find_Pragma (Anc, Name_Predicate);\n+\n+            if Present (Pred) and then not Is_Ignored (Pred) then\n+               return True;\n+            end if;\n+\n+            Anc := Nearest_Ancestor (Anc);\n+         end loop;\n+\n+         return False;\n+      end Has_Checked_Predicate;\n+\n+      -------------------\n+      -- Has_Null_Body --\n+      -------------------\n+\n+      function Has_Null_Body (Proc_Id : Entity_Id) return Boolean is\n+         Body_Id : Entity_Id;\n+         Decl    : Node_Id;\n+         Spec    : Node_Id;\n+         Stmt1   : Node_Id;\n+         Stmt2   : Node_Id;\n+\n+      begin\n+         Spec := Parent (Proc_Id);\n+         Decl := Parent (Spec);\n+\n+         --  Retrieve the entity of the invariant procedure body\n+\n+         if Nkind (Spec) = N_Procedure_Specification\n+           and then Nkind (Decl) = N_Subprogram_Declaration\n+         then\n+            Body_Id := Corresponding_Body (Decl);\n+\n+         --  The body acts as a spec\n+\n+         else\n+            Body_Id := Proc_Id;\n+         end if;\n+\n+         --  The body will be generated later\n+\n+         if No (Body_Id) then\n+            return False;\n+         end if;\n+\n+         Spec := Parent (Body_Id);\n+         Decl := Parent (Spec);\n+\n+         pragma Assert\n+           (Nkind (Spec) = N_Procedure_Specification\n+              and then Nkind (Decl) = N_Subprogram_Body);\n+\n+         Stmt1 := First (Statements (Handled_Statement_Sequence (Decl)));\n+\n+         --  Look for a null statement followed by an optional return statement\n+\n+         if Nkind (Stmt1) = N_Null_Statement then\n+            Stmt2 := Next (Stmt1);\n+\n+            if Present (Stmt2) then\n+               return Nkind (Stmt2) = N_Simple_Return_Statement;\n+            else\n+               return True;\n+            end if;\n+         end if;\n+\n+         return False;\n+      end Has_Null_Body;\n+\n       -----------------------------------\n       -- Insert_After_Last_Declaration --\n       -----------------------------------\n@@ -12262,11 +12356,7 @@ package body Sem_Ch6 is\n \n       --  Add an invariant call to check the result of a function\n \n-      if Ekind (Designator) /= E_Procedure\n-        and then Expander_Active\n-        --  Check of Assertions_Enabled is certainly wrong ???\n-        and then Assertions_Enabled\n-      then\n+      if Ekind (Designator) /= E_Procedure and then Expander_Active then\n          Func_Typ := Etype (Designator);\n          Result   := Make_Defining_Identifier (Loc, Name_uResult);\n \n@@ -12285,6 +12375,7 @@ package body Sem_Ch6 is\n \n          if Has_Invariants (Func_Typ)\n            and then Present (Invariant_Procedure (Func_Typ))\n+           and then not Has_Null_Body (Invariant_Procedure (Func_Typ))\n            and then Is_Public_Subprogram_For (Func_Typ)\n          then\n             Append_Enabled_Item\n@@ -12305,8 +12396,7 @@ package body Sem_Ch6 is\n       --  this is done for functions as well, since in Ada 2012 they can have\n       --  IN OUT args.\n \n-      if Expander_Active and then Assertions_Enabled then\n-         --  Check of Assertions_Enabled is certainly wrong ???\n+      if Expander_Active then\n          Formal := First_Formal (Designator);\n          while Present (Formal) loop\n             if Ekind (Formal) /= E_In_Parameter\n@@ -12316,6 +12406,7 @@ package body Sem_Ch6 is\n \n                if Has_Invariants (Formal_Typ)\n                  and then Present (Invariant_Procedure (Formal_Typ))\n+                 and then not Has_Null_Body (Invariant_Procedure (Formal_Typ))\n                  and then Is_Public_Subprogram_For (Formal_Typ)\n                then\n                   Append_Enabled_Item\n@@ -12325,7 +12416,10 @@ package body Sem_Ch6 is\n \n                Check_Access_Invariants (Formal);\n \n-               if Present (Predicate_Function (Formal_Typ)) then\n+               if Has_Predicates (Formal_Typ)\n+                 and then Present (Predicate_Function (Formal_Typ))\n+                 and then Has_Checked_Predicate (Formal_Typ)\n+               then\n                   Append_Enabled_Item\n                     (Make_Predicate_Check\n                       (Formal_Typ, New_Occurrence_Of (Formal, Loc)),"}, {"sha": "f55f594a50ac89524e1ca22567b3fc97d93525fc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -4882,6 +4882,26 @@ package body Sem_Util is\n       end if;\n    end Find_Parameter_Type;\n \n+   -----------------\n+   -- Find_Pragma --\n+   -----------------\n+\n+   function Find_Pragma (Id : Entity_Id; Name : Name_Id) return Node_Id is\n+      Item : Node_Id;\n+\n+   begin\n+      Item := First_Rep_Item (Id);\n+      while Present (Item) loop\n+         if Nkind (Item) = N_Pragma and then Pragma_Name (Item) = Name then\n+            return Item;\n+         end if;\n+\n+         Item := Next_Rep_Item (Item);\n+      end loop;\n+\n+      return Empty;\n+   end Find_Pragma;\n+\n    -----------------------------\n    -- Find_Static_Alternative --\n    -----------------------------"}, {"sha": "11b7a913a695cef07adaf25b14f1da442a4c7c8a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a71c65ab06b6f960b80fd02879c003701eab41/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=99a71c65ab06b6f960b80fd02879c003701eab41", "patch": "@@ -494,6 +494,11 @@ package Sem_Util is\n    --  Return the type of formal parameter Param as determined by its\n    --  specification.\n \n+   function Find_Pragma (Id : Entity_Id; Name : Name_Id) return Node_Id;\n+   --  Given entity Id and pragma name Name, attempt to find the corresponding\n+   --  pragma in Id's chain of representation items. The function returns Empty\n+   --  if no such pragma has been found.\n+\n    function Find_Static_Alternative (N : Node_Id) return Node_Id;\n    --  N is a case statement whose expression is a compile-time value.\n    --  Determine the alternative chosen, so that the code of non-selected"}]}