{"sha": "a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "node_id": "C_kwDOANBUbNoAKGE0YjdmY2ExZWMxZDJhMWI5ZjQxNmNiZWZjN2EyZGNkNmYzOTM1ZjM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-13T11:21:13Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:29Z"}, "message": "libproc_macro: Add documentation to interface\n\nAdd some string documentation to existing rust type interface.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/ident.rs: Add documentation.\n\t* librust/proc_macro/rust/lib.rs: Add documentation.\n\t* librust/proc_macro/rust/literal.rs: Add documentation.\n\t* librust/proc_macro/rust/span.rs: Add documentation.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "416aeed334cd3c3cb54cee59e0c1a47b34e7e9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/416aeed334cd3c3cb54cee59e0c1a47b34e7e9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08ccfe9c65d8a8d934a403b40d0a4549e3c642d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ccfe9c65d8a8d934a403b40d0a4549e3c642d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ccfe9c65d8a8d934a403b40d0a4549e3c642d1"}], "stats": {"total": 79, "additions": 70, "deletions": 9}, "files": [{"sha": "5d21cbd498a0c6259ccebf25baa8df895a4f8876", "filename": "librust/proc_macro/rust/ident.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fident.rs?ref=a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "patch": "@@ -1,18 +1,40 @@\n use std::fmt;\n use Span;\n \n+/// An identifier.\n #[derive(Clone)]\n pub struct Ident {\n     // Internal implementation details\n }\n \n impl Ident {\n-    /// Creates a new identifier from a string and a span\n+    /// Creates a new identifier.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `string` - A valid identifier.\n+    /// * `span` - The span of the identifier.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The `string` argument must be a valid identifier permitted by the\n+    /// language, otherwise the function will panic.\n     pub fn new(_string: &str, _span: Span) -> Self {\n         todo!(\"Implement this function\")\n     }\n \n-    /// Creates a raw new identifier from a string and a span\n+    /// Creates a new raw identifier.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `string` - A valid identifier.\n+    /// * `span` - The span of the identifier.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The `string` argument must be a valid identifier permitted by the\n+    /// language. Furthermore, it should not be a keyword used in path\n+    /// segments, otherwise this function will panic.\n     pub fn new_raw(_string: &str, _span: Span) -> Self {\n         todo!(\"Implement this function\")\n     }\n@@ -22,21 +44,24 @@ impl Ident {\n         todo!(\"Implement this function\")\n     }\n \n-    /// change the span of the identifier\n+    /// Change the span of the identifier.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `span` - The new span value.\n     pub fn set_span(&mut self, _span: Span) {\n         todo!(\"Implement this function\")\n     }\n }\n \n impl fmt::Display for Ident {\n-    /// Display as lossless converted string\n+    /// Display as lossless converted string.\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         todo!(\"Implement this function\")\n     }\n }\n \n impl fmt::Debug for Ident {\n-    /// display debug friendly version of the Identifier\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         todo!(\"Implement this function\")\n     }"}, {"sha": "fa1160ef60f5fd373c3544c2a8ab4cd14174f728", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "patch": "@@ -10,15 +10,20 @@ mod literal;\n mod punct;\n mod span;\n \n+/// Describes how a sequence of token trees is delimited.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Delimiter {\n+    /// The sequence is delimited by a parentheses `(...)`.\n     Parenthesis,\n+    /// The sequence is delimited by a brace `{...}`.\n     Brace,\n+    /// The sequence is delimited by a bracket `[...]`.\n     Bracket,\n-    /// Invisible delimiter\n+    /// Invisible delimiter to preserve operator priority.\n     None,\n }\n \n+/// Error returned from `from_str` functions.\n #[derive(Debug)]\n pub struct LexError;\n "}, {"sha": "93d9b76ead6e34578078bd7ee30a0d50c9fa050b", "filename": "librust/proc_macro/rust/literal.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fliteral.rs?ref=a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "patch": "@@ -3,6 +3,22 @@ use std::str::FromStr;\n use LexError;\n use Span;\n \n+/// A type representing a literal value except `true` and `false`.\n+///\n+/// This could be one of the following:\n+/// * literal string (`\"hello\"`)\n+/// * byte string (`b\"hello\"`)\n+/// * character (`'a'`)\n+/// * byte character (`b'a'`)\n+/// * unsuffixed integer (`42`)\n+/// * suffixed integer (`42u8`)\n+/// * unsuffixed floating point number (`1.618`)\n+/// * suffixed floating point number (`1.618f32`)\n+///\n+/// # Note\n+///\n+/// Boolean literals like `true` and `false` are `Ident`s and do not belong\n+/// here.\n #[derive(Clone)]\n pub struct Literal {\n     // Internal implementation details\n@@ -137,10 +153,16 @@ impl Literal {\n         todo!(\"Implement this function\")\n     }\n \n+    /// Get the [`Span`] for this literal.\n     pub fn span(&self) -> Span {\n         todo!(\"Get the span of a literal\")\n     }\n \n+    /// Set the span for this literal.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `span` - The new span value.\n     pub fn set_span(&mut self, _span: Span) {\n         todo!(\"Set the span of a literal\")\n     }"}, {"sha": "b1c51d2c07ee8c5c527a8731a1cc5d6ed9cb88dc", "filename": "librust/proc_macro/rust/span.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fspan.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3/librust%2Fproc_macro%2Frust%2Fspan.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fspan.rs?ref=a4b7fca1ec1d2a1b9f416cbefc7a2dcd6f3935f3", "patch": "@@ -1,5 +1,6 @@\n use std::fmt;\n \n+/// A region of source code along with macro expansion information.\n #[derive(Copy, Clone)]\n pub struct Span {\n     // Internal implementation details\n@@ -8,25 +9,33 @@ pub struct Span {\n impl Span {\n     // TODO: Add experimental API functions for this type\n \n-    /// Creates a new span that resolves at the macro call location\n+    /// Creates a new span that resolves at the macro call location.\n     pub fn call_site() -> Self {\n         todo!(\"Implement this function\")\n     }\n \n     /// Creates a new span that resolved sometimes at macro call site, and\n-    /// sometimes at macro definition site\n+    /// sometimes at macro definition site.\n     pub fn mixed_site() -> Self {\n         todo!(\"Implement this function\")\n     }\n \n     /// Creates a new span with the same line/column informations but that\n-    /// resolve symbols as though it were at `other`\n+    /// resolve symbols as though it were at `other`.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `other` - Other span to resolve at.\n     pub fn resolved_at(&self, _other: Span) -> Self {\n         todo!(\"Implement this function\")\n     }\n \n     /// Creates a new span with the same name resolution behavior as self, but\n     /// with the line/column information of `other`.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `other` - Other span containing the line/column informations to use.\n     pub fn located_at(&self, _other: Span) -> Self {\n         todo!(\"Implement this function\")\n     }"}]}