{"sha": "215552adac04bc04778b3052c24d8c66b8455fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE1NTUyYWRhYzA0YmMwNDc3OGIzMDUyYzI0ZDhjNjZiODQ1NWZlZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-09T22:31:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-09T22:31:15Z"}, "message": "compiler, runtime: Fix complex division of NaN / 0.\n\nFrom-SVN: r203331", "tree": {"sha": "ecca99f169c43eb56f3f628b9248c8e0361b9a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecca99f169c43eb56f3f628b9248c8e0361b9a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/215552adac04bc04778b3052c24d8c66b8455fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215552adac04bc04778b3052c24d8c66b8455fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215552adac04bc04778b3052c24d8c66b8455fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215552adac04bc04778b3052c24d8c66b8455fef/comments", "author": null, "committer": null, "parents": [{"sha": "4d5b5e9f2c37500cb85e18ce685be3bdd6ba549d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5b5e9f2c37500cb85e18ce685be3bdd6ba549d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5b5e9f2c37500cb85e18ce685be3bdd6ba549d"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "9d59349c866a1e2ecc945c0a982544e82b3a0326", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -5967,6 +5967,43 @@ Binary_expression::do_get_tree(Translate_context* context)\n \t\t\t\tright);\n     }\n \n+  // For complex division Go wants slightly different results than the\n+  // GCC library provides, so we have our own runtime routine.\n+  if (this->op_ == OPERATOR_DIV && this->left_->type()->complex_type() != NULL)\n+    {\n+      const char *name;\n+      tree *pdecl;\n+      Type* ctype;\n+      static tree complex64_div_decl;\n+      static tree complex128_div_decl;\n+      switch (this->left_->type()->complex_type()->bits())\n+\t{\n+\tcase 64:\n+\t  name = \"__go_complex64_div\";\n+\t  pdecl = &complex64_div_decl;\n+\t  ctype = Type::lookup_complex_type(\"complex64\");\n+\t  break;\n+\tcase 128:\n+\t  name = \"__go_complex128_div\";\n+\t  pdecl = &complex128_div_decl;\n+\t  ctype = Type::lookup_complex_type(\"complex128\");\n+\t  break;\n+\tdefault:\n+\t  go_unreachable();\n+\t}\n+      Btype* cbtype = ctype->get_backend(gogo);\n+      tree ctype_tree = type_to_tree(cbtype);\n+      return Gogo::call_builtin(pdecl,\n+\t\t\t\tthis->location(),\n+\t\t\t\tname,\n+\t\t\t\t2,\n+\t\t\t\tctype_tree,\n+\t\t\t\tctype_tree,\n+\t\t\t\tfold_convert_loc(gccloc, ctype_tree, left),\n+\t\t\t\ttype,\n+\t\t\t\tfold_convert_loc(gccloc, ctype_tree, right));\n+    }\n+\n   tree compute_type = excess_precision_type(type);\n   if (compute_type != NULL_TREE)\n     {"}, {"sha": "3b0f1880758cc165022575a346abd5a35e355f39", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -42,6 +42,8 @@ enum Runtime_function_type\n   RFT_RUNE,\n   // Go type float64, C type double.\n   RFT_FLOAT64,\n+  // Go type complex64, C type __complex float.\n+  RFT_COMPLEX64,\n   // Go type complex128, C type __complex double.\n   RFT_COMPLEX128,\n   // Go type string, C type struct __go_string.\n@@ -126,6 +128,10 @@ runtime_function_type(Runtime_function_type bft)\n \t  t = Type::lookup_float_type(\"float64\");\n \t  break;\n \n+\tcase RFT_COMPLEX64:\n+\t  t = Type::lookup_complex_type(\"complex64\");\n+\t  break;\n+\n \tcase RFT_COMPLEX128:\n \t  t = Type::lookup_complex_type(\"complex128\");\n \t  break;\n@@ -216,6 +222,7 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     case RFT_UINTPTR:\n     case RFT_RUNE:\n     case RFT_FLOAT64:\n+    case RFT_COMPLEX64:\n     case RFT_COMPLEX128:\n     case RFT_STRING:\n     case RFT_POINTER:"}, {"sha": "a303a50410f030062496b424d2a185dd20332336", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -68,6 +68,12 @@ DEF_GO_RUNTIME(STRING_TO_INT_ARRAY, \"__go_string_to_int_array\",\n \t       P1(STRING), R1(SLICE))\n \n \n+// Complex division.\n+DEF_GO_RUNTIME(COMPLEX64_DIV, \"__go_complex64_div\",\n+\t       P2(COMPLEX64, COMPLEX64), R1(COMPLEX64))\n+DEF_GO_RUNTIME(COMPLEX128_DIV, \"__go_complex128_div\",\n+\t       P2(COMPLEX128, COMPLEX128), R1(COMPLEX128))\n+\n // Make a slice.\n DEF_GO_RUNTIME(MAKESLICE1, \"__go_make_slice1\", P2(TYPE, UINTPTR), R1(SLICE))\n DEF_GO_RUNTIME(MAKESLICE2, \"__go_make_slice2\", P3(TYPE, UINTPTR, UINTPTR),"}, {"sha": "957f23ced9f2a7015f16dc78323afccb59ff4623", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -424,6 +424,7 @@ runtime_files = \\\n \truntime/go-caller.c \\\n \truntime/go-callers.c \\\n \truntime/go-can-convert-interface.c \\\n+\truntime/go-cdiv.c \\\n \truntime/go-cgo.c \\\n \truntime/go-check-interface.c \\\n \truntime/go-construct-map.c \\"}, {"sha": "706a72e1d82abee286251a99822f3183ff73cc5a", "filename": "libgo/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -195,7 +195,7 @@ libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) \\\n @LIBGO_IS_LINUX_TRUE@am__objects_5 = getncpu-linux.lo\n am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-byte-array-to-string.lo go-breakpoint.lo go-caller.lo \\\n-\tgo-callers.lo go-can-convert-interface.lo go-cgo.lo \\\n+\tgo-callers.lo go-can-convert-interface.lo go-cdiv.lo go-cgo.lo \\\n \tgo-check-interface.lo go-construct-map.lo \\\n \tgo-convert-interface.lo go-copy.lo go-defer.lo \\\n \tgo-deferred-recover.lo go-eface-compare.lo \\\n@@ -757,6 +757,7 @@ runtime_files = \\\n \truntime/go-caller.c \\\n \truntime/go-callers.c \\\n \truntime/go-can-convert-interface.c \\\n+\truntime/go-cdiv.c \\\n \truntime/go-cgo.c \\\n \truntime/go-check-interface.c \\\n \truntime/go-construct-map.c \\\n@@ -2368,6 +2369,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-caller.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-callers.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-can-convert-interface.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-cdiv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-cgo.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-check-interface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-construct-map.Plo@am__quote@\n@@ -2554,6 +2556,13 @@ go-can-convert-interface.lo: runtime/go-can-convert-interface.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-can-convert-interface.lo `test -f 'runtime/go-can-convert-interface.c' || echo '$(srcdir)/'`runtime/go-can-convert-interface.c\n \n+go-cdiv.lo: runtime/go-cdiv.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-cdiv.lo -MD -MP -MF $(DEPDIR)/go-cdiv.Tpo -c -o go-cdiv.lo `test -f 'runtime/go-cdiv.c' || echo '$(srcdir)/'`runtime/go-cdiv.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-cdiv.Tpo $(DEPDIR)/go-cdiv.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-cdiv.c' object='go-cdiv.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-cdiv.lo `test -f 'runtime/go-cdiv.c' || echo '$(srcdir)/'`runtime/go-cdiv.c\n+\n go-cgo.lo: runtime/go-cgo.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-cgo.lo -MD -MP -MF $(DEPDIR)/go-cgo.Tpo -c -o go-cgo.lo `test -f 'runtime/go-cgo.c' || echo '$(srcdir)/'`runtime/go-cgo.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-cgo.Tpo $(DEPDIR)/go-cgo.Plo"}, {"sha": "0a81e458c84d35f69bf8d5ad06a5a5df27c574e8", "filename": "libgo/runtime/go-cdiv.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2Fruntime%2Fgo-cdiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215552adac04bc04778b3052c24d8c66b8455fef/libgo%2Fruntime%2Fgo-cdiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-cdiv.c?ref=215552adac04bc04778b3052c24d8c66b8455fef", "patch": "@@ -0,0 +1,46 @@\n+/* go-cdiv.c -- complex division routines\n+\n+   Copyright 2013 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+/* Calls to these functions are generated by the Go frontend for\n+   division of complex64 or complex128.  We use these because Go's\n+   complex division expects slightly different results from the GCC\n+   default.  When dividing NaN+1.0i / 0+0i, Go expects NaN+NaNi but\n+   GCC generates NaN+Infi.  NaN+Infi seems wrong seems the rules of\n+   C99 Annex G specify that if either side of a complex number is Inf,\n+   the the whole number is Inf, but an operation involving NaN ought\n+   to result in NaN, not Inf.  */\n+\n+__complex float\n+__go_complex64_div (__complex float a, __complex float b)\n+{\n+  if (__builtin_expect (b == 0+0i, 0))\n+    {\n+      if (!__builtin_isinff (__real__ a)\n+\t  && !__builtin_isinff (__imag__ a)\n+\t  && (__builtin_isnanf (__real__ a) || __builtin_isnanf (__imag__ a)))\n+\t{\n+\t  /* Pass \"1\" to nanf to match math/bits.go.  */\n+\t  return __builtin_nanf(\"1\") + __builtin_nanf(\"1\")*1i;\n+\t}\n+    }\n+  return a / b;\n+}\n+\n+__complex double\n+__go_complex128_div (__complex double a, __complex double b)\n+{\n+  if (__builtin_expect (b == 0+0i, 0))\n+    {\n+      if (!__builtin_isinf (__real__ a)\n+\t  && !__builtin_isinf (__imag__ a)\n+\t  && (__builtin_isnan (__real__ a) || __builtin_isnan (__imag__ a)))\n+\t{\n+\t  /* Pass \"1\" to nan to match math/bits.go.  */\n+\t  return __builtin_nan(\"1\") + __builtin_nan(\"1\")*1i;\n+\t}\n+    }\n+  return a / b;\n+}"}]}