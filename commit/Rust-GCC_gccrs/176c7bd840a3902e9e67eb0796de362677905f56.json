{"sha": "176c7bd840a3902e9e67eb0796de362677905f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2YzdiZDg0MGEzOTAyZTllNjdlYjA3OTZkZTM2MjY3NzkwNWY1Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T08:09:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T08:10:29Z"}, "message": "ifcvt: Avoid ICEs trying to force_operand random RTL [PR97487]\n\nAs the testcase shows, RTL ifcvt can throw random RTL (whatever it found in\nsome insns) at expand_binop or expand_unop and expects it to do something\n(and then will check if it created valid insns and punts if not).\nThese functions in the end if the operands don't match try to\ncopy_to_mode_reg the operands, which does\nif (!general_operand (x, VOIDmode))\n  x = force_operand (x, temp);\nbut, force_operand is far from handling all possible RTLs, it will ICE for\nall more unusual RTL codes.  Basically handles just simple arithmetic and\nunary RTL operations if they have an optab and\nexpand_simple_binop/expand_simple_unop ICE on others.\n\nThe following patch fixes it by adding some operand verification (whether\nthere is a hope that copy_to_mode_reg will succeed on those).  It is added\nboth to noce_emit_move_insn (not needed for this exact testcase,\nthat function simply tries to recog the insn as is and if it fails,\nhandles some simple binop/unop cases; the patch performs the verification\nof their operands) and noce_try_sign_mask.\n\n2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/97487\n\t* ifcvt.c (noce_can_force_operand): New function.\n\t(noce_emit_move_insn): Use it.\n\t(noce_try_sign_mask): Likewise.  Formatting fix.\n\n\t* gcc.dg/pr97487-1.c: New test.\n\t* gcc.dg/pr97487-2.c: New test.", "tree": {"sha": "43173c707ca54d3dc919fdcf8726e2ed2ceaed48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43173c707ca54d3dc919fdcf8726e2ed2ceaed48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/176c7bd840a3902e9e67eb0796de362677905f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176c7bd840a3902e9e67eb0796de362677905f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176c7bd840a3902e9e67eb0796de362677905f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176c7bd840a3902e9e67eb0796de362677905f56/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb69a49c4d3287e797e0d6279186221354905fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69a49c4d3287e797e0d6279186221354905fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb69a49c4d3287e797e0d6279186221354905fe0"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "b467eb5902aac03e9612704bab1df7f14351f072", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=176c7bd840a3902e9e67eb0796de362677905f56", "patch": "@@ -885,6 +885,60 @@ noce_emit_store_flag (struct noce_if_info *if_info, rtx x, int reversep,\n \t\t\t   || code == GEU || code == GTU), normalize);\n }\n \n+/* Return true if X can be safely forced into a register by copy_to_mode_reg\n+   / force_operand.  */\n+\n+static bool\n+noce_can_force_operand (rtx x)\n+{\n+  if (general_operand (x, VOIDmode))\n+    return true;\n+  if (SUBREG_P (x))\n+    {\n+      if (!noce_can_force_operand (SUBREG_REG (x)))\n+\treturn false;\n+      return true;\n+    }\n+  if (ARITHMETIC_P (x))\n+    {\n+      if (!noce_can_force_operand (XEXP (x, 0))\n+\t  || !noce_can_force_operand (XEXP (x, 1)))\n+\treturn false;\n+      switch (GET_CODE (x))\n+\t{\n+\tcase MULT:\n+\tcase DIV:\n+\tcase MOD:\n+\tcase UDIV:\n+\tcase UMOD:\n+\t  return true;\n+\tdefault:\n+\t  return code_to_optab (GET_CODE (x));\n+\t}\n+    }\n+  if (UNARY_P (x))\n+    {\n+      if (!noce_can_force_operand (XEXP (x, 0)))\n+\treturn false;\n+      switch (GET_CODE (x))\n+\t{\n+\tcase ZERO_EXTEND:\n+\tcase SIGN_EXTEND:\n+\tcase TRUNCATE:\n+\tcase FLOAT_EXTEND:\n+\tcase FLOAT_TRUNCATE:\n+\tcase FIX:\n+\tcase UNSIGNED_FIX:\n+\tcase FLOAT:\n+\tcase UNSIGNED_FLOAT:\n+\t  return true;\n+\tdefault:\n+\t  return code_to_optab (GET_CODE (x));\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Emit instruction to move an rtx, possibly into STRICT_LOW_PART.\n    X is the destination/target and Y is the value to copy.  */\n \n@@ -943,7 +997,7 @@ noce_emit_move_insn (rtx x, rtx y)\n \t    {\n \t    case RTX_UNARY:\n \t      ot = code_to_optab (GET_CODE (y));\n-\t      if (ot)\n+\t      if (ot && noce_can_force_operand (XEXP (y, 0)))\n \t\t{\n \t\t  start_sequence ();\n \t\t  target = expand_unop (GET_MODE (y), ot, XEXP (y, 0), x, 0);\n@@ -960,7 +1014,9 @@ noce_emit_move_insn (rtx x, rtx y)\n \t    case RTX_BIN_ARITH:\n \t    case RTX_COMM_ARITH:\n \t      ot = code_to_optab (GET_CODE (y));\n-\t      if (ot)\n+\t      if (ot\n+\t\t  && noce_can_force_operand (XEXP (y, 0))\n+\t\t  && noce_can_force_operand (XEXP (y, 1)))\n \t\t{\n \t\t  start_sequence ();\n \t\t  target = expand_binop (GET_MODE (y), ot,\n@@ -2763,15 +2819,18 @@ noce_try_sign_mask (struct noce_if_info *if_info)\n      INSN_B which can happen for e.g. conditional stores to memory.  For the\n      cost computation use the block TEST_BB where the evaluation will end up\n      after the transformation.  */\n-  t_unconditional =\n-    (t == if_info->b\n-     && (if_info->insn_b == NULL_RTX\n-\t || BLOCK_FOR_INSN (if_info->insn_b) == if_info->test_bb));\n+  t_unconditional\n+    = (t == if_info->b\n+       && (if_info->insn_b == NULL_RTX\n+\t   || BLOCK_FOR_INSN (if_info->insn_b) == if_info->test_bb));\n   if (!(t_unconditional\n \t|| (set_src_cost (t, mode, if_info->speed_p)\n \t    < COSTS_N_INSNS (2))))\n     return FALSE;\n \n+  if (!noce_can_force_operand (t))\n+    return FALSE;\n+\n   start_sequence ();\n   /* Use emit_store_flag to generate \"m < 0 ? -1 : 0\" instead of expanding\n      \"(signed) m >> 31\" directly.  This benefits targets with specialized"}, {"sha": "e79d1f14c21c7a5bf3bc497191834ede3916f08f", "filename": "gcc/testsuite/gcc.dg/pr97487-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-1.c?ref=176c7bd840a3902e9e67eb0796de362677905f56", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/97487 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param max-rtl-if-conversion-unpredictable-cost=0\" } */\n+\n+long int __attribute__ ((simd))\n+foo (long int x, long int y)\n+{\n+  return x < 0 ? y : 0;\n+}"}, {"sha": "0b623814a145fadf6370c830fc71dd72e18e037c", "filename": "gcc/testsuite/gcc.dg/pr97487-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176c7bd840a3902e9e67eb0796de362677905f56/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97487-2.c?ref=176c7bd840a3902e9e67eb0796de362677905f56", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/97487 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param max-rtl-if-conversion-unpredictable-cost=0 -Wno-psabi -w\" } */\n+\n+typedef long long int V __attribute__((vector_size (16)));\n+\n+long long int\n+foo (V x, V y)\n+{\n+  long long int t1 = y[0];\n+  long long int t2 = x[0];\n+  long long int t3;\n+  if (t2 < 0)\n+    t3 = t1;\n+  else\n+    t3 = 0;\n+  return t3;\n+}"}]}