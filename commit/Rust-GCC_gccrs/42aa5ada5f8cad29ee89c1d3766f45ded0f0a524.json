{"sha": "42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhYTVhZGE1ZjhjYWQyOWVlODljMWQzNzY2ZjQ1ZGVkMGYwYTUyNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-12-13T20:46:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-12-13T20:46:34Z"}, "message": "foo\n\nFrom-SVN: r167769", "tree": {"sha": "52863ba1474c8225ec04f661f4594ffb8b251902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52863ba1474c8225ec04f661f4594ffb8b251902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524/comments", "author": null, "committer": null, "parents": [{"sha": "f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c2df63c64cb18ff1e8be7d0042108efd6483b3"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "1b3bfa33919eb5d2cb18a642ca0a2615a5abe4d1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "patch": "@@ -5485,9 +5485,20 @@ build_data_member_initialization (tree t, VEC(constructor_elt,gc) **vec)\n       init = unshare_expr (TREE_OPERAND (t, 1));\n       if (TREE_CODE (member) == INDIRECT_REF)\n \t{\n-\t  /* Don't put out anything for an empty base.  */\n-\t  gcc_assert (is_empty_class (TREE_TYPE (member)));\n-\t  return true;\n+\t  tree op = TREE_OPERAND (member, 0);\n+\t  STRIP_NOPS (op);\n+\t  gcc_assert (TREE_CODE (op) == ADDR_EXPR);\n+\t  op = TREE_OPERAND (op, 0);\n+\t  if (TREE_CODE (op) == COMPONENT_REF)\n+\t    /* Initializing a cv-qualified member; we just looked through\n+\t       the const_cast.  */\n+\t    member = op;\n+\t  else\n+\t    {\n+\t      /* Initializing an empty base; just skip it.  */\n+\t      gcc_assert (is_empty_class (TREE_TYPE (member)));\n+\t      return true;\n+\t    }\n \t}\n     }\n   else"}]}