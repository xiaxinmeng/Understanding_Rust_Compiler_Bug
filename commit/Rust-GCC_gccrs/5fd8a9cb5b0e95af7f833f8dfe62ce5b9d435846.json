{"sha": "5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkOGE5Y2I1YjBlOTVhZjdmODMzZjhkZmU2MmNlNWI5ZDQzNTg0Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-06-04T09:05:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-06-04T09:05:10Z"}, "message": "re PR middle-end/90726 (exponential behavior on SCEV results everywhere)\n\n2019-06-04  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/90726\n\t* tree-chrec.c (chrec_contains_symbols): Add to visited.\n\t(tree_contains_chrecs): Likewise.\n\t(chrec_contains_symbols_defined_in_loop): Move here and avoid\n\texponential behaivor from ...\n\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n\t... here.\n\t(expression_expensive_p): Avoid exponential behavior and compute\n\texpanded size, rejecting any expansion.\n\t* tree-ssa-loop-ivopts.c (abnormal_ssa_name_p): Remove.\n\t(idx_contains_abnormal_ssa_name_p): Likewise.\n\t(contains_abnormal_ssa_name_p_1): New helper for walk_tree.\n\t(contains_abnormal_ssa_name_p): Simplify and use\n\twalk_tree_without_duplicates.\n\n\t* gcc.dg/pr90726.c: New testcase.\n\nFrom-SVN: r271903", "tree": {"sha": "3b5d284dec65e1db933d98245b02d38df7414bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b5d284dec65e1db933d98245b02d38df7414bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d62887a42bc49963179b0429f6914b050dd2517c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62887a42bc49963179b0429f6914b050dd2517c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62887a42bc49963179b0429f6914b050dd2517c"}], "stats": {"total": 345, "additions": 206, "deletions": 139}, "files": [{"sha": "d4d020b7fe83be1e0c9ac961b1c5c5da1d029467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -1,3 +1,20 @@\n+2019-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90726\n+\t* tree-chrec.c (chrec_contains_symbols): Add to visited.\n+\t(tree_contains_chrecs): Likewise.\n+\t(chrec_contains_symbols_defined_in_loop): Move here and avoid\n+\texponential behaivor from ...\n+\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n+\t... here.\n+\t(expression_expensive_p): Avoid exponential behavior and compute\n+\texpanded size, rejecting any expansion.\n+\t* tree-ssa-loop-ivopts.c (abnormal_ssa_name_p): Remove.\n+\t(idx_contains_abnormal_ssa_name_p): Likewise.\n+\t(contains_abnormal_ssa_name_p_1): New helper for walk_tree.\n+\t(contains_abnormal_ssa_name_p): Simplify and use\n+\twalk_tree_without_duplicates.\n+\n 2019-06-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90738"}, {"sha": "8b3e36066da0ef714f8e92c4312e917f1666516f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -1,3 +1,8 @@\n+2019-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90726\n+\t* gcc.dg/pr90726.c: New testcase.\n+\n 2019-06-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90738"}, {"sha": "acdb0fe7efcebd31702bca8aa9fc46d4fc460147", "filename": "gcc/testsuite/gcc.dg/pr90726.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O2 -fno-ivopts\" } */\n+\n+int __GIMPLE (ssa,guessed_local(12348030),startwith(\"fix_loops\"))\n+un (int dd)\n+{\n+  int s2;\n+  int q8;\n+  int nz;\n+\n+  __BB(2,guessed_local(12348030)):\n+  goto __BB3(guessed(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(37044096)):\n+  nz_7 = __PHI (__BB2: 0, __BB5: nz_10);\n+  q8_13 = dd_9(D) * dd_9(D);\n+  q8_17 = q8_13 * q8_13;\n+  q8_21 = q8_17 * q8_17;\n+  q8_25 = q8_21 * q8_21;\n+  q8_29 = q8_25 * q8_25;\n+  q8_33 = q8_29 * q8_29;\n+  q8_37 = q8_33 * q8_33;\n+  q8_41 = q8_37 * q8_37;\n+  q8_45 = q8_41 * q8_41;\n+  q8_49 = q8_45 * q8_45;\n+  q8_53 = q8_49 * q8_49;\n+  q8_57 = q8_53 * q8_53;\n+  q8_61 = q8_57 * q8_57;\n+  q8_65 = q8_61 * q8_61;\n+  q8_69 = q8_65 * q8_65;\n+  q8_73 = q8_69 * q8_69;\n+  q8_77 = q8_73 * q8_73;\n+  q8_81 = q8_77 * q8_77;\n+  q8_85 = q8_81 * q8_81;\n+  q8_89 = q8_85 * q8_85;\n+  q8_93 = q8_89 * q8_89;\n+  q8_97 = q8_93 * q8_93;\n+  q8_101 = q8_97 * q8_97;\n+  q8_105 = q8_101 * q8_101;\n+  q8_109 = q8_105 * q8_105;\n+  q8_113 = q8_109 * q8_109;\n+  q8_117 = q8_113 * q8_113;\n+  q8_121 = q8_117 * q8_117;\n+  nz_10 = nz_7 + 1;\n+  if (nz_10 != 3)\n+    goto __BB5(guessed(89478485));\n+  else\n+    goto __BB4(guessed(44739243));\n+\n+  __BB(5,guessed_local(24696064)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(4,guessed_local(12348031)):\n+  return q8_121;\n+\n+}"}, {"sha": "f50fd2012e126b1d8a9798278bc0dd4ed6c1bc81", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-ssa-loop-niter.h\"\n #include \"tree-chrec.h\"\n+#include \"gimple.h\"\n+#include \"tree-ssa-loop.h\"\n #include \"dumpfile.h\"\n #include \"params.h\"\n #include \"tree-scalar-evolution.h\"\n@@ -959,6 +961,9 @@ chrec_contains_symbols (const_tree chrec, hash_set<const_tree> &visited,\n       && flow_loop_nested_p (get_chrec_loop (chrec), loop))\n     return true;\n \n+  if (visited.add (chrec))\n+    return false;\n+\n   n = TREE_OPERAND_LENGTH (chrec);\n   for (i = 0; i < n; i++)\n     if (chrec_contains_symbols (TREE_OPERAND (chrec, i), visited, loop))\n@@ -978,6 +983,63 @@ chrec_contains_symbols (const_tree chrec, struct loop* loop)\n   return chrec_contains_symbols (chrec, visited, loop);\n }\n \n+/* Return true when CHREC contains symbolic names defined in\n+   LOOP_NB.  */\n+\n+static bool\n+chrec_contains_symbols_defined_in_loop (const_tree chrec, unsigned loop_nb,\n+\t\t\t\t\thash_set<const_tree> &visited)\n+{\n+  int i, n;\n+\n+  if (chrec == NULL_TREE)\n+    return false;\n+\n+  if (is_gimple_min_invariant (chrec))\n+    return false;\n+\n+  if (TREE_CODE (chrec) == SSA_NAME)\n+    {\n+      gimple *def;\n+      loop_p def_loop, loop;\n+\n+      if (SSA_NAME_IS_DEFAULT_DEF (chrec))\n+\treturn false;\n+\n+      def = SSA_NAME_DEF_STMT (chrec);\n+      def_loop = loop_containing_stmt (def);\n+      loop = get_loop (cfun, loop_nb);\n+\n+      if (def_loop == NULL)\n+\treturn false;\n+\n+      if (loop == def_loop || flow_loop_nested_p (loop, def_loop))\n+\treturn true;\n+\n+      return false;\n+    }\n+\n+  if (visited.add (chrec))\n+    return false;\n+\n+  n = TREE_OPERAND_LENGTH (chrec);\n+  for (i = 0; i < n; i++)\n+    if (chrec_contains_symbols_defined_in_loop (TREE_OPERAND (chrec, i),\n+\t\t\t\t\t\tloop_nb, visited))\n+      return true;\n+  return false;\n+}\n+\n+/* Return true when CHREC contains symbolic names defined in\n+   LOOP_NB.  */\n+\n+bool\n+chrec_contains_symbols_defined_in_loop (const_tree chrec, unsigned loop_nb)\n+{\n+  hash_set<const_tree> visited;\n+  return chrec_contains_symbols_defined_in_loop (chrec, loop_nb, visited);\n+}\n+\n /* Determines whether the chrec contains undetermined coefficients.  */\n \n static bool\n@@ -1026,6 +1088,9 @@ tree_contains_chrecs (const_tree expr, int *size, hash_set<const_tree> &visited)\n   if (tree_is_chrec (expr))\n     return true;\n \n+  if (visited.add (expr))\n+    return false;\n+\n   n = TREE_OPERAND_LENGTH (expr);\n   for (i = 0; i < n; i++)\n     if (tree_contains_chrecs (TREE_OPERAND (expr, i), size, visited))"}, {"sha": "0bda94ab325bd0388e663e9b3841f364d5ede2af", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 52, "deletions": 58, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -411,49 +411,6 @@ instantiate_cache_type::~instantiate_cache_type ()\n static instantiate_cache_type *global_cache;\n \n \n-/* Return true when CHREC contains symbolic names defined in\n-   LOOP_NB.  */\n-\n-bool\n-chrec_contains_symbols_defined_in_loop (const_tree chrec, unsigned loop_nb)\n-{\n-  int i, n;\n-\n-  if (chrec == NULL_TREE)\n-    return false;\n-\n-  if (is_gimple_min_invariant (chrec))\n-    return false;\n-\n-  if (TREE_CODE (chrec) == SSA_NAME)\n-    {\n-      gimple *def;\n-      loop_p def_loop, loop;\n-\n-      if (SSA_NAME_IS_DEFAULT_DEF (chrec))\n-\treturn false;\n-\n-      def = SSA_NAME_DEF_STMT (chrec);\n-      def_loop = loop_containing_stmt (def);\n-      loop = get_loop (cfun, loop_nb);\n-\n-      if (def_loop == NULL)\n-\treturn false;\n-\n-      if (loop == def_loop || flow_loop_nested_p (loop, def_loop))\n-\treturn true;\n-\n-      return false;\n-    }\n-\n-  n = TREE_OPERAND_LENGTH (chrec);\n-  for (i = 0; i < n; i++)\n-    if (chrec_contains_symbols_defined_in_loop (TREE_OPERAND (chrec, i),\n-\t\t\t\t\t\tloop_nb))\n-      return true;\n-  return false;\n-}\n-\n /* Return true when PHI is a loop-phi-node.  */\n \n static bool\n@@ -3505,8 +3462,9 @@ scev_finalize (void)\n /* Returns true if the expression EXPR is considered to be too expensive\n    for scev_const_prop.  */\n \n-bool\n-expression_expensive_p (tree expr)\n+static bool\n+expression_expensive_p (tree expr, hash_map<tree, uint64_t> &cache,\n+\t\t\tuint64_t &cost)\n {\n   enum tree_code code;\n \n@@ -3530,6 +3488,19 @@ expression_expensive_p (tree expr)\n \treturn true;\n     }\n \n+  bool visited_p;\n+  uint64_t &local_cost = cache.get_or_insert (expr, &visited_p);\n+  if (visited_p)\n+    {\n+      uint64_t tem = cost + local_cost;\n+      if (tem < cost)\n+\treturn true;\n+      cost = tem;\n+      return false;\n+    }\n+  local_cost = 1;\n+\n+  uint64_t op_cost = 0;\n   if (code == CALL_EXPR)\n     {\n       tree arg;\n@@ -3568,39 +3539,62 @@ expression_expensive_p (tree expr)\n       if (!is_inexpensive_builtin (get_callee_fndecl (expr)))\n \treturn true;\n       FOR_EACH_CALL_EXPR_ARG (arg, iter, expr)\n-\tif (expression_expensive_p (arg))\n+\tif (expression_expensive_p (arg, cache, op_cost))\n \t  return true;\n+      *cache.get (expr) += op_cost;\n+      cost += op_cost + 1;\n       return false;\n     }\n \n   if (code == COND_EXPR)\n-    return (expression_expensive_p (TREE_OPERAND (expr, 0))\n-\t    || (EXPR_P (TREE_OPERAND (expr, 1))\n-\t\t&& EXPR_P (TREE_OPERAND (expr, 2)))\n-\t    /* If either branch has side effects or could trap.  */\n-\t    || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n-\t    || generic_expr_could_trap_p (TREE_OPERAND (expr, 1))\n-\t    || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0))\n-\t    || generic_expr_could_trap_p (TREE_OPERAND (expr, 0))\n-\t    || expression_expensive_p (TREE_OPERAND (expr, 1))\n-\t    || expression_expensive_p (TREE_OPERAND (expr, 2)));\n+    {\n+      if (expression_expensive_p (TREE_OPERAND (expr, 0), cache, op_cost)\n+\t  || (EXPR_P (TREE_OPERAND (expr, 1))\n+\t      && EXPR_P (TREE_OPERAND (expr, 2)))\n+\t  /* If either branch has side effects or could trap.  */\n+\t  || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n+\t  || generic_expr_could_trap_p (TREE_OPERAND (expr, 1))\n+\t  || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0))\n+\t  || generic_expr_could_trap_p (TREE_OPERAND (expr, 0))\n+\t  || expression_expensive_p (TREE_OPERAND (expr, 1),\n+\t\t\t\t     cache, op_cost)\n+\t  || expression_expensive_p (TREE_OPERAND (expr, 2),\n+\t\t\t\t     cache, op_cost))\n+\treturn true;\n+      *cache.get (expr) += op_cost;\n+      cost += op_cost + 1;\n+      return false;\n+    }\n \n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_binary:\n     case tcc_comparison:\n-      if (expression_expensive_p (TREE_OPERAND (expr, 1)))\n+      if (expression_expensive_p (TREE_OPERAND (expr, 1), cache, op_cost))\n \treturn true;\n \n       /* Fallthru.  */\n     case tcc_unary:\n-      return expression_expensive_p (TREE_OPERAND (expr, 0));\n+      if (expression_expensive_p (TREE_OPERAND (expr, 0), cache, op_cost))\n+\treturn true;\n+      *cache.get (expr) += op_cost;\n+      cost += op_cost + 1;\n+      return false;\n \n     default:\n       return true;\n     }\n }\n \n+bool\n+expression_expensive_p (tree expr)\n+{\n+  hash_map<tree, uint64_t> cache;\n+  uint64_t expanded_size = 0;\n+  return (expression_expensive_p (expr, cache, expanded_size)\n+\t  || expanded_size > cache.elements ());\n+}\n+\n /* Do final value replacement for LOOP, return true if we did anything.  */\n \n bool"}, {"sha": "890f9b788b49b6d658d7ecfe90c23f363bff8448", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 11, "deletions": 81, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=5fd8a9cb5b0e95af7f833f8dfe62ce5b9d435846", "patch": "@@ -944,36 +944,19 @@ stmt_after_increment (struct loop *loop, struct iv_cand *cand, gimple *stmt)\n     }\n }\n \n-/* Returns true if EXP is a ssa name that occurs in an abnormal phi node.  */\n+/* walk_tree callback for contains_abnormal_ssa_name_p.  */\n \n-static bool\n-abnormal_ssa_name_p (tree exp)\n+static tree\n+contains_abnormal_ssa_name_p_1 (tree *tp, int *walk_subtrees, void *)\n {\n-  if (!exp)\n-    return false;\n-\n-  if (TREE_CODE (exp) != SSA_NAME)\n-    return false;\n-\n-  return SSA_NAME_OCCURS_IN_ABNORMAL_PHI (exp) != 0;\n-}\n+  if (TREE_CODE (*tp) == SSA_NAME\n+      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (*tp))\n+    return *tp;\n \n-/* Returns false if BASE or INDEX contains a ssa name that occurs in an\n-   abnormal phi node.  Callback for for_each_index.  */\n+  if (!EXPR_P (*tp))\n+    *walk_subtrees = 0;\n \n-static bool\n-idx_contains_abnormal_ssa_name_p (tree base, tree *index,\n-\t\t\t\t  void *data ATTRIBUTE_UNUSED)\n-{\n-  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n-    {\n-      if (abnormal_ssa_name_p (TREE_OPERAND (base, 2)))\n-\treturn false;\n-      if (abnormal_ssa_name_p (TREE_OPERAND (base, 3)))\n-\treturn false;\n-    }\n-\n-  return !abnormal_ssa_name_p (*index);\n+  return NULL_TREE;\n }\n \n /* Returns true if EXPR contains a ssa name that occurs in an\n@@ -982,61 +965,8 @@ idx_contains_abnormal_ssa_name_p (tree base, tree *index,\n bool\n contains_abnormal_ssa_name_p (tree expr)\n {\n-  enum tree_code code;\n-  enum tree_code_class codeclass;\n-\n-  if (!expr)\n-    return false;\n-\n-  code = TREE_CODE (expr);\n-  codeclass = TREE_CODE_CLASS (code);\n-\n-  if (code == CALL_EXPR)\n-    {\n-      tree arg;\n-      call_expr_arg_iterator iter;\n-      FOR_EACH_CALL_EXPR_ARG (arg, iter, expr)\n-\tif (contains_abnormal_ssa_name_p (arg))\n-\t  return true;\n-      return false;\n-    }\n-\n-  if (code == SSA_NAME)\n-    return SSA_NAME_OCCURS_IN_ABNORMAL_PHI (expr) != 0;\n-\n-  if (code == INTEGER_CST\n-      || is_gimple_min_invariant (expr))\n-    return false;\n-\n-  if (code == ADDR_EXPR)\n-    return !for_each_index (&TREE_OPERAND (expr, 0),\n-\t\t\t    idx_contains_abnormal_ssa_name_p,\n-\t\t\t    NULL);\n-\n-  if (code == COND_EXPR)\n-    return contains_abnormal_ssa_name_p (TREE_OPERAND (expr, 0))\n-      || contains_abnormal_ssa_name_p (TREE_OPERAND (expr, 1))\n-      || contains_abnormal_ssa_name_p (TREE_OPERAND (expr, 2));\n-\n-  switch (codeclass)\n-    {\n-    case tcc_binary:\n-    case tcc_comparison:\n-      if (contains_abnormal_ssa_name_p (TREE_OPERAND (expr, 1)))\n-\treturn true;\n-\n-      /* Fallthru.  */\n-    case tcc_unary:\n-      if (contains_abnormal_ssa_name_p (TREE_OPERAND (expr, 0)))\n-\treturn true;\n-\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return false;\n+  return walk_tree_without_duplicates\n+\t   (&expr, contains_abnormal_ssa_name_p_1, NULL) != NULL_TREE;\n }\n \n /*  Returns the structure describing number of iterations determined from"}]}