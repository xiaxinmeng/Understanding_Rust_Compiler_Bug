{"sha": "b9e59e4f11bc85b72167f93d1f356ff77074af01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllNTllNGYxMWJjODViNzIxNjdmOTNkMWYzNTZmZjc3MDc0YWYwMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-06T23:26:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-06T23:26:20Z"}, "message": "[PATCH] Allow vrp to thread across backedges using FSM threader\n\n\t* cfg-flags.def (IGNORE): New edge flag.\n\t* tree-vrp.c (identify_jump_threads): Mark and clear edges\n\tscheduled for removal with EDGE_IGNORE around call into\n\tjump threader.  Do no thread across edges with EDGE_IGNORE,\n\tbut do allow threading across those with EDGE_DFS_BACK.\n\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust to look for\n\trealized jump threads.\n\t* gcc.dg/tree-ssa-pr66752-3.c: Look in vrp1 dump for jump\n\tthreads rather than dom1 dump.\n\nFrom-SVN: r229902", "tree": {"sha": "7996214e64ec8ce0a80f2a8768057c4e391c0fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7996214e64ec8ce0a80f2a8768057c4e391c0fe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e59e4f11bc85b72167f93d1f356ff77074af01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e59e4f11bc85b72167f93d1f356ff77074af01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e59e4f11bc85b72167f93d1f356ff77074af01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e59e4f11bc85b72167f93d1f356ff77074af01/comments", "author": null, "committer": null, "parents": [{"sha": "a6fa947e8261399636817b840fd0fc7c202742e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fa947e8261399636817b840fd0fc7c202742e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fa947e8261399636817b840fd0fc7c202742e6"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "552c51b2ceb63ca2b140def686044ed7567050ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -1,3 +1,11 @@\n+2015-11-06  Jeff Law <jeff@redhat.com>\n+\n+\t* cfg-flags.def (IGNORE): New edge flag.\n+\t* tree-vrp.c (identify_jump_threads): Mark and clear edges\n+\tscheduled for removal with EDGE_IGNORE around call into\n+\tjump threader.  Do no thread across edges with EDGE_IGNORE,\n+\tbut do allow threading across those with EDGE_DFS_BACK.\n+\n 2015-11-06  David Wohlferd  <dw@LimeGreenSocks.com>\n \n \t* doc/md.texi (multi-alternative constraints): Don't document"}, {"sha": "e2bfbed5ecf5aaf033b2ccb4a32371b96e4357a0", "filename": "gcc/cfg-flags.def", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Fcfg-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Fcfg-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg-flags.def?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -78,7 +78,7 @@ DEF_BASIC_BLOCK_FLAG(RTL, 9)\n DEF_BASIC_BLOCK_FLAG(FORWARDER_BLOCK, 10)\n \n /* Set on blocks that cannot be threaded through.\n-   Only used in cfgcleanup.c.  */\n+   Only used for jump threading.  */\n DEF_BASIC_BLOCK_FLAG(NONTHREADABLE_BLOCK, 11)\n \n /* Set on blocks that were modified in some way.  This bit is set in\n@@ -177,6 +177,11 @@ DEF_EDGE_FLAG(TM_UNINSTRUMENTED, 15)\n /* Abort (over) edge out of a GIMPLE_TRANSACTION statement.  */\n DEF_EDGE_FLAG(TM_ABORT, 16)\n \n+/* An edge we should ignore.  It should be entirely local to\n+   passes.  ie, it is never set on any edge upon the completion\n+   of any pass.  */\n+DEF_EDGE_FLAG(IGNORE, 17)\n+\n #endif\n \n /*"}, {"sha": "af4a7387e829edfddeb13096dd4235377766b675", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -1,3 +1,10 @@\n+2015-11-06  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust to look for\n+\trealized jump threads.\n+\t* gcc.dg/tree-ssa-pr66752-3.c: Look in vrp1 dump for jump\n+\tthreads rather than dom1 dump.\n+\n 2015-11-06  Michael Collison  <michael.collison@linaro.org\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n "}, {"sha": "577a489dd8cb6754996b7978ef7e4d05fb77feb8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-optimized\" } */\n \n extern int status, pt;\n extern int count;\n@@ -33,7 +33,7 @@ foo (int N, int c, int b, int *a)\n }\n \n /* There are 3 FSM jump threading opportunities.  */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 3 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"FSM\" 3 \"vrp1\"} } */\n \n /* There should be no assignments or references to FLAG.  */\n /* { dg-final { scan-tree-dump-not \"flag\" \"optimized\"} } */"}, {"sha": "ac12b6ca7141fdbd2fbe82ae1defebe5a5737044", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1-details\" } */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 38 \"dom1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 7\"  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 12\" \"dom1\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 3\"  \"dom2\" } } */\n \n enum STATE {\n   S0=0,"}, {"sha": "87c02654c488e24b3a1539424bf65856ca3f2132", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e59e4f11bc85b72167f93d1f356ff77074af01/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b9e59e4f11bc85b72167f93d1f356ff77074af01", "patch": "@@ -10076,9 +10076,9 @@ identify_jump_threads (void)\n   mark_dfs_back_edges ();\n \n   /* Do not thread across edges we are about to remove.  Just marking\n-     them as EDGE_DFS_BACK will do.  */\n+     them as EDGE_IGNORE will do.  */\n   FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n-    e->flags |= EDGE_DFS_BACK;\n+    e->flags |= EDGE_IGNORE;\n \n   /* Allocate our unwinder stack to unwind any temporary equivalences\n      that might be recorded.  */\n@@ -10135,9 +10135,9 @@ identify_jump_threads (void)\n \t     it to a specific successor.  */\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    {\n-\t      /* Do not thread across back edges or abnormal edges\n-\t\t in the CFG.  */\n-\t      if (e->flags & (EDGE_DFS_BACK | EDGE_COMPLEX))\n+\t      /* Do not thread across edges marked to ignoreor abnormal\n+\t\t edges in the CFG.  */\n+\t      if (e->flags & (EDGE_IGNORE | EDGE_COMPLEX))\n \t\tcontinue;\n \n \t      thread_across_edge (dummy, e, true, equiv_stack, NULL,\n@@ -10146,6 +10146,10 @@ identify_jump_threads (void)\n \t}\n     }\n \n+  /* Clear EDGE_IGNORE.  */\n+  FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n+    e->flags &= ~EDGE_IGNORE;\n+\n   /* We do not actually update the CFG or SSA graphs at this point as\n      ASSERT_EXPRs are still in the IL and cfg cleanup code does not yet\n      handle ASSERT_EXPRs gracefully.  */"}]}