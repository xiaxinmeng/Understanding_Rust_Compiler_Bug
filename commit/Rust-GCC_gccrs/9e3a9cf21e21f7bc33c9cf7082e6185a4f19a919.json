{"sha": "9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzYTljZjIxZTIxZjdiYzMzYzljZjcwODJlNjE4NWE0ZjE5YTkxOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "2000-01-12T12:40:49Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "2000-01-12T12:40:49Z"}, "message": "Fix suboptimal code generation bug in reload\n\nFrom-SVN: r31352", "tree": {"sha": "941205febbd323ea550b25d18acc1dfac3c3bd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941205febbd323ea550b25d18acc1dfac3c3bd1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919/comments", "author": null, "committer": null, "parents": [{"sha": "02368d6dd494ec96e04bb987fcadfc39fa065301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02368d6dd494ec96e04bb987fcadfc39fa065301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02368d6dd494ec96e04bb987fcadfc39fa065301"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "a585836e5943a918c96b280797836fbb9f67b7d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "patch": "@@ -1,3 +1,11 @@\n+2000-01-12  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* reload1.c (reload_reg_unavailable): New static variable.\n+\t(reload_reg_free_p): Test it.\n+\t(reload_reg_free_for_value_p): Test it instead of\n+\treload_reg_used.\n+\t(choose_reload_regs_init): Compute it.\n+\n Wed Jan 12 03:24:41 2000  Toshiyasu Morita (toshi.morita@sega.com)\n \n \t* reorg.c (fill_slots_from_thread): Check modified_in_p"}, {"sha": "2245e9f2f169d5635c53afba56163a5b46242f21", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9e3a9cf21e21f7bc33c9cf7082e6185a4f19a919", "patch": "@@ -3990,6 +3990,8 @@ forget_old_reloads_1 (x, ignored, data)\n /* The following HARD_REG_SETs indicate when each hard register is\n    used for a reload of various parts of the current insn.  */\n \n+/* If reg is unavailable for all reloads.  */\n+static HARD_REG_SET reload_reg_unavailable;\n /* If reg is in use as a reload reg for a RELOAD_OTHER reload.  */\n static HARD_REG_SET reload_reg_used;\n /* If reg is in use for a RELOAD_FOR_INPUT_ADDRESS reload for operand I.  */\n@@ -4213,7 +4215,8 @@ reload_reg_free_p (regno, opnum, type)\n   int i;\n \n   /* In use for a RELOAD_OTHER means it's not available for anything.  */\n-  if (TEST_HARD_REG_BIT (reload_reg_used, regno))\n+  if (TEST_HARD_REG_BIT (reload_reg_used, regno)\n+      || TEST_HARD_REG_BIT (reload_reg_unavailable, regno))\n     return 0;\n \n   switch (type)\n@@ -4617,11 +4620,7 @@ reload_reg_free_for_value_p (regno, opnum, type, value, out, reloadnum,\n   int i;\n   int copy = 0;\n \n-  /* ??? reload_reg_used is abused to hold the registers that are not\n-     available as spill registers, including hard registers that are\n-     earlyclobbered in asms.  As a temporary measure, reject anything\n-     in reload_reg_used.  */\n-  if (TEST_HARD_REG_BIT (reload_reg_used, regno))\n+  if (TEST_HARD_REG_BIT (reload_reg_unavailable, regno))\n     return 0;\n \n   if (out == const0_rtx)\n@@ -5064,7 +5063,7 @@ choose_reload_regs_init (chain, save_reload_reg_rtx)\n       CLEAR_HARD_REG_SET (reload_reg_used_in_outaddr_addr[i]);\n     }\n \n-  IOR_COMPL_HARD_REG_SET (reload_reg_used, chain->used_spill_regs);\n+  COMPL_HARD_REG_SET (reload_reg_unavailable, chain->used_spill_regs);\n \n   CLEAR_HARD_REG_SET (reload_reg_used_for_inherit);\n "}]}