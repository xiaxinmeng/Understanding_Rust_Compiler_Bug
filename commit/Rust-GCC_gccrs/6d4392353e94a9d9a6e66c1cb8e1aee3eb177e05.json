{"sha": "6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0MzkyMzUzZTk0YTlkOWE2ZTY2YzFjYjhlMWFlZTNlYjE3N2UwNQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-07-29T22:21:41Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-07-29T22:21:41Z"}, "message": "elf.h: Remove ecoff.h and gofast includes.\n\n2002-07-29  Eric Christopher  <echristo@redhat.com>\n\n       \t* config/mips/elf.h: Remove ecoff.h and gofast includes.\n        (DWARF2_DEBUGGING_INFO, DBX_DEBUGGING_INFO): Define unconditionally.\n        (SDB_DEBUGGING_INFO): Undefine.\n        (PREFERRED_DEBUGGING_TYPE): Set to DWARF2_DEBUG.\n\t(PUT_SDB_SIZE): Remove.\n\t(SUBTARGET_ASM_DEBUGGING_SPEC): Redefine.\n       \t(STARTFILE_SPEC): Add isa3264 define.\n       \t* config/mips/elf64.h: Ditto.  Move TARGET_MEM_FUNCTIONS from here...\n       \t* config/mips/ecoff.h: Remove. and here...\n       \t* config/mips/iris3.h: and here...\n       \t* config/mips/sni-svr4.h: and here...\n       \t* config/mips/mips.h: To here. Remove OBJECT_FORMAT_ROSE ifdefs.\n\tAdd assembler -mmdebug options for non-dwarf debugging.\n\t* config/mips/r3900.h: Remove debug info defines.\n       \t* config/mips/isa32-linux.h: Remove, move functionality to config.gcc.\n       \t* config/mips/isa3264.h: Ditto.\n       \t* config/mips/t-isa3264: Fix up for file removal and gofast configure\n       \tchange.\n       \t* config/mips/t-elf: Ditto.\n       \t* config/mips/t-ecoff: Ditto.\n       \t* config/mips/t-r3900: Ditto.\n       \t* config/mips/t-iris5-6: Ditto.\n       \t* config/mips/t-isa3264: Ditto.\n       \t* config/mips/t-linux: Remove.\n       \t* config/mips/t-netbsd: Remove.\n       \t* config/mips/t-mips: New file.\n       \t* config/mips/t-gofast: Ditto.\n       \t* config/mips/netbsd.h: Remove unnecessary undefines.\n       \t* config/mips/linux.h: Remove #include of mips.h.\n       \t* config.gcc: Add mips.h include for elf targets. Remove tm_file\n       \tfor ecoff. Add gofast configure option for mips.\n\nFrom-SVN: r55852", "tree": {"sha": "53a67fa5e056e948fc0866051e59701ab03ab8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a67fa5e056e948fc0866051e59701ab03ab8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/comments", "author": null, "committer": null, "parents": [{"sha": "4357a6c3481d4ab2a32cc905480efdfaacec7937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4357a6c3481d4ab2a32cc905480efdfaacec7937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4357a6c3481d4ab2a32cc905480efdfaacec7937"}], "stats": {"total": 491, "additions": 121, "deletions": 370}, "files": [{"sha": "dee88424ae13c873ac5e87bd58accb3a0fcda98c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,3 +1,37 @@\n+2002-07-29  Eric Christopher  <echristo@redhat.com>\n+\n+       \t* config/mips/elf.h: Remove ecoff.h and gofast includes.\n+        (DWARF2_DEBUGGING_INFO, DBX_DEBUGGING_INFO): Define unconditionally.\n+        (SDB_DEBUGGING_INFO): Undefine.\n+        (PREFERRED_DEBUGGING_TYPE): Set to DWARF2_DEBUG.\n+\t(PUT_SDB_SIZE): Remove.\n+\t(SUBTARGET_ASM_DEBUGGING_SPEC): Redefine.\n+       \t(STARTFILE_SPEC): Add isa3264 define.\n+       \t* config/mips/elf64.h: Ditto.  Move TARGET_MEM_FUNCTIONS from here...\n+       \t* config/mips/ecoff.h: Remove. and here...\n+       \t* config/mips/iris3.h: and here...\n+       \t* config/mips/sni-svr4.h: and here...\n+       \t* config/mips/mips.h: To here. Remove OBJECT_FORMAT_ROSE ifdefs.\n+\tAdd assembler -mmdebug options for non-dwarf debugging.\n+\t* config/mips/r3900.h: Remove debug info defines.\n+       \t* config/mips/isa32-linux.h: Remove, move functionality to config.gcc.\n+       \t* config/mips/isa3264.h: Ditto.\n+       \t* config/mips/t-isa3264: Fix up for file removal and gofast configure\n+       \tchange.\n+       \t* config/mips/t-elf: Ditto.\n+       \t* config/mips/t-ecoff: Ditto.\n+       \t* config/mips/t-r3900: Ditto.\n+       \t* config/mips/t-iris5-6: Ditto.\n+       \t* config/mips/t-isa3264: Ditto.\n+       \t* config/mips/t-linux: Remove.\n+       \t* config/mips/t-netbsd: Remove.\n+       \t* config/mips/t-mips: New file.\n+       \t* config/mips/t-gofast: Ditto.\n+       \t* config/mips/netbsd.h: Remove unnecessary undefines.\n+       \t* config/mips/linux.h: Remove #include of mips.h.\n+       \t* config.gcc: Add mips.h include for elf targets. Remove tm_file\n+       \tfor ecoff. Add gofast configure option for mips.\n+\n 2002-07-29  Chris Demetriou  <cgd@broadcom.com>\n \n \t* configure.in (mips*-*-*): Add a test to see if MIPS libgloss\n@@ -114,7 +148,7 @@\n \n 2002-07-29  Mike Stump  <mrs@apple.com>\n \n-\t* config.gcc (target_gtfiles): Initialize, as otherwise cross \n+\t* config.gcc (target_gtfiles): Initialize, as otherwise cross\n \tcompilers hosted on powerpc-apple-darwin6.0 won't even build.\n \n 2002-07-29  Richard Earnshaw  <rearnsha@arm.com>"}, {"sha": "913bc16fb9bcbd2d297c935ecfcfef769a9911c5", "filename": "gcc/config.gcc", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1439,7 +1439,7 @@ ia64*-*-hpux*)\n \tuse_collect2=no\n \tfloat_format=i128\n \t;;\n-ip2k-*-elf)\t\t\n+ip2k-*-elf)\n \t;;\n m32r-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n@@ -1786,7 +1786,7 @@ mips-sgi-irix6*)\t\t# SGI System V.4., IRIX 6\n #\tfi\n \t;;\n mips-wrs-vxworks)\n-\ttm_file=\"mips/elf.h mips/vxworks.h\"\n+\ttm_file=\"${tm_file} mips/elf.h mips/vxworks.h\"\n \ttmake_file=mips/t-ecoff\n \tgas=yes\n \tgnu_ld=yes\n@@ -1854,11 +1854,11 @@ mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \ttmake_file=\"${tmake_file} mips/t-netbsd\"\n \t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n-        tm_file=\"dbxelf.h elfos.h svr4.h linux.h mips/linux.h\"\n+        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h mips/linux.h\"\n \tcase $machine in\n         mipsisa32*-*)\n-                tm_file=\"$tm_file mips/isa32-linux.h\"\n                 target_cpu_default=\"MASK_SOFT_FLOAT\"\n+\t\ttm_defines=\"MIPS_ISA_DEFAULT=32\"\n                 ;;\n         esac\n \ttmake_file=\"t-slibgcc-elf-ver t-linux mips/t-linux\"\n@@ -1877,53 +1877,60 @@ mips*-*-openbsd*)\t\t# mips big endian\n \ttm_file=\"mips/openbsd-be.h ${tm_file}\"\n \t;;\n mips-*-ecoff* | mipsel-*-ecoff*)\n-\ttm_file=\"gofast.h mips/ecoff.h\"\n \tif test x$stabs = xyes; then\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \ttmake_file=mips/t-ecoff\n \t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf*)\n-\ttm_file=\"mips/isa3264.h mips/abi64.h\"\n+\ttm_file=\"${tm_file} mips/elf.h mips/abi64.h\"\n \ttmake_file=mips/t-isa3264\n-\ttarget_cpu_default=\"MASK_SOFT_FLOAT\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=32 MIPS_ABI_DEFAULT=ABI_MEABI\"\n \t;;\n mipsisa64-*-elf* | mipsisa64el-*-elf*)\n-\ttm_file=\"mips/isa3264.h mips/abi64.h\"\n+\ttm_file=\"${tm_file} mips/elf.h mips/abi64.h\"\n \ttmake_file=mips/t-isa3264\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n-\ttm_defines=\"MIPS_ISA_DEFAULT=64\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_ABI_DEFAULT=ABI_MEABI\"\n \t;;\n mips-*-elf* | mipsel-*-elf*)\n-\ttm_file=\"mips/elf.h\"\n+\ttm_file=\"${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-elf\n \t;;\n mips64-*-elf* | mips64el-*-elf*)\n-\ttm_file=\"mips/elf64.h\"\n+\ttm_file=\"${tm_file} mips/elf64.h\"\n \ttmake_file=mips/t-elf\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n mips64orion-*-elf* | mips64orionel-*-elf*)\n-\ttm_file=\"mips/elforion.h mips/elf64.h\"\n+\ttm_file=\"${tm_file} mips/elforion.h mips/elf64.h\"\n+\ttmake_file=mips/t-elf\n \ttmake_file=mips/t-elf\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n mips64orion-*-rtems*)\n \txm_defines=POSIX\n-\ttm_file=\"mips/elforion.h mips/elf64.h mips/rtems64.h rtems.h\"\n+\ttm_file=\"${tm_file} mips/elforion.h mips/elf64.h mips/rtems64.h rtems.h\"\n \ttmake_file=\"mips/t-elf t-rtems\"\n+\ttmake_file=mips/t-elf\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n \t;;\n mips*-*-rtems*)\n \txm_defines=POSIX\n-\ttm_file=\"mips/elf.h mips/rtems.h rtems.h\"\n+\ttm_file=\"${tm_file} mips/elf.h mips/rtems.h rtems.h\"\n \ttmake_file=\"mips/t-elf t-rtems\"\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n \t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n-\ttm_file=\"mips/r3900.h mips/elf.h mips/abi64.h\"\n+\ttm_file=\"${tm_file} mips/r3900.h mips/elf.h mips/abi64.h\"\n \ttmake_file=mips/t-r3900\n \t;;\n mmix-knuth-mmixware)\n@@ -2915,6 +2922,14 @@ mips*-*-*)\n \t\t\ttm_defines=\"TARGET_ENDIAN_DEFAULT=0 $tm_defines\"\n \t\t\t;;\n \tesac\n+\tif test \"x$enable_gofast\" = xyes\n+\tthen\n+\t\ttm_defines=\"INIT_SUBTARGET_OPTABS=INIT_GOFAST_OPTABS $tm_defines\"\n+\t\ttm_file=\"gofast.h $tm_file\"\n+\t\ttmake_file=\"mips/t-gofast $tmake_file\"\n+\telse\n+\t\ttmake_file=\"mips/t-mips $tmake_file\"\n+\tfi\n \t;;\n powerpc*-*-* | rs6000-*-*)\n         if test x$enable_altivec = xyes"}, {"sha": "0db9bc743274f9c79fbfee1aeceda6dc07053e3f", "filename": "gcc/config/mips/ecoff.h", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fecoff.h?ref=4357a6c3481d4ab2a32cc905480efdfaacec7937", "patch": "@@ -1,33 +0,0 @@\n-/* Definitions of target machine for GNU compiler.  MIPS version with\n-   GOFAST floating point library.\n-   Copyright (C) 1994, 1998 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* US Software GOFAST library support.  */\n-#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS\n-\n-#include \"mips/mips.h\"\n-\n-/* Use memcpy, et. al., rather than bcopy.  */\n-#define TARGET_MEM_FUNCTIONS\n-\n-/* Don't assume anything about startfiles.  The linker script will load the\n-   appropriate startfiles.  */\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"\""}, {"sha": "07fe78511ad1dc5bee5341ca79d5c5da3fbd31b1", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 19, "deletions": 39, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -20,59 +20,39 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Use ELF.  */\n+#undef  OBJECT_FORMAT_COFF\n+#undef  EXTENDED_COFF\n #define OBJECT_FORMAT_ELF\n \n-/* All ELF targets can support DWARF-2.  */\n+/* ??? Move all SDB stuff into separate header file.  */\n+#undef  SDB_DEBUGGING_INFO\n \n-#ifndef DWARF2_DEBUGGING_INFO\n-#define DWARF2_DEBUGGING_INFO 1\n-#endif\n+#define DBX_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n \n-/* Until we figure out what MIPS ELF targets normally use, just do\n-   stabs in ELF.  */\n-#ifndef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-#endif\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* Mostly like ECOFF.  */\n-#include \"gofast.h\"\n-#include \"mips/ecoff.h\"\n-\n-/* We need to use .esize and .etype instead of .size and .type to\n-   avoid conflicting with ELF directives.  */\n-#undef PUT_SDB_SIZE\n-#define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t\");\t\t\\\n-  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n-  fprintf (asm_out_text_file, \";\");\t\t       \t\\\n-} while (0)\n-\n-#undef PUT_SDB_TYPE\n-#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.etype\\t0x%x;\", (a));\t\\\n-} while (0)\n+#undef  SUBTARGET_ASM_DEBUGGING_SPEC\n+#define SUBTARGET_ASM_DEBUGGING_SPEC \"-g0\"\n \n /* Biggest alignment supported by the object file format of this\n    machine.  Use this macro to limit the alignment which can be\n    specified using the `__attribute__ ((aligned (N)))' construct.  If\n    not defined, the default value is `BIGGEST_ALIGNMENT'.  */\n \n-#undef MAX_OFILE_ALIGNMENT\n+#undef  MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)\n \n /* Switch into a generic section.  */\n-#undef TARGET_ASM_NAMED_SECTION\n+#undef  TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* Given that Irix has it's own headers, not having TARGET_GAS here\n    seems a mistake.  If we actually need to be prepared for file\n    switching, then we need a custom TARGET_ASM_NAMED_SECTION too.  */\n \n-#undef TEXT_SECTION\n+#undef  TEXT_SECTION\n #define TEXT_SECTION()\t\t\t\t\\\n do {\t\t\t\t\t\t\\\n   if (TARGET_FILE_SWITCHING)\t\t\t\\\n@@ -145,7 +125,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n-#undef ASM_DECLARE_OBJECT_NAME\n+#undef  ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n@@ -166,7 +146,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    size_directive_output was set\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n-#undef ASM_FINISH_DECLARE_OBJECT\n+#undef  ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n@@ -198,7 +178,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    but until that support is generally available, the 'if' below\n    should serve.  */\n \n-#undef ASM_WEAKEN_LABEL\n+#undef  ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE,NAME) ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,0)\n #define ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,VALUE)\t\\\n  do {\t\t\t\t\t\t\\\n@@ -221,10 +201,10 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n-#undef EXTRA_SECTIONS\n+#undef  EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_sbss\n \n-#undef EXTRA_SECTION_FUNCTIONS\n+#undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n@@ -251,7 +231,7 @@ void FN ()                                                            \\\n #define FINI_SECTION_ASM_OP     \"\\t.section\\t.fini\"\n \n /* Don't set the target flags, this is done by the linker script */\n-#undef LIB_SPEC\n+#undef  LIB_SPEC\n #define LIB_SPEC \"\"\n \n #undef  STARTFILE_SPEC"}, {"sha": "1882747fbf310451e0473b8dff8ac146f9f74e4c", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -20,33 +20,19 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#undef  OBJECT_FORMAT_COFF\n+#undef  EXTENDED_COFF\n #define OBJECT_FORMAT_ELF\n \n-/* If an embedded ABI is selected, prefer to generate 64-bit code.\n-   Implies -mips3 in such cases.  */\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_FLOAT64|MASK_64BIT\n-#endif\n-\n-/* This should change to n32 when it is supported in gas.  */\n-#ifndef MIPS_ABI_DEFAULT\n-#define MIPS_ABI_DEFAULT ABI_O64\n-#endif\n-\n-/* Until we figure out what MIPS ELF targets normally use, just do\n-   stabs in ELF.  */\n-#ifndef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-#endif\n+#undef  SDB_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n \n-/* US Software GOFAST library support.  */\n-#include \"gofast.h\"\n-#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-#include \"mips/mips.h\"\n-\n-/* Use memcpy, et. al., rather than bcopy.  */\n-#define TARGET_MEM_FUNCTIONS\n+#undef  SUBTARGET_ASM_DEBUGGING_SPEC\n+#define SUBTARGET_ASM_DEBUGGING_SPEC \"-g0\"\n \n /* Biggest alignment supported by the object file format of this\n    machine.  Use this macro to limit the alignment which can be\n@@ -56,24 +42,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)\n \n-/* We need to use .esize and .etype instead of .size and .type to\n-   avoid conflicting with ELF directives.  */\n-#undef PUT_SDB_SIZE\n-#define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t\");\t\t\\\n-  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n-  fprintf (asm_out_text_file, \";\");\t\t       \t\\\n-} while (0)\n-\n-#undef PUT_SDB_TYPE\n-#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.etype\\t0x%x;\", (a));\t\\\n-} while (0)\n-\n /* Switch into a generic section.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section"}, {"sha": "5b05a9f9fbfae1896153c059e22e9dee0158597a", "filename": "gcc/config/mips/iris3.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Firis3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Firis3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis3.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -65,8 +65,5 @@ Boston, MA 02111-1307, USA.  */\n #define WCHAR_TYPE\t\"unsigned char\"\n #define WCHAR_TYPE_SIZE BITS_PER_UNIT\n \n-/* Generate calls to memcpy, etc., not bcopy, etc.  */\n-#define TARGET_MEM_FUNCTIONS\n-\n /* Plain char is unsigned in the SGI compiler.  */\n #define DEFAULT_SIGNED_CHAR 0"}, {"sha": "a03b79a6621e6c6379354dd293e8355ad712e7ff", "filename": "gcc/config/mips/isa32-linux.h", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fisa32-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fisa32-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fisa32-linux.h?ref=4357a6c3481d4ab2a32cc905480efdfaacec7937", "patch": "@@ -1,29 +0,0 @@\n-/* Definitions for MIPS32 running Linux-based GNU systems with ELF format.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#undef TARGET_VERSION\n-#if TARGET_ENDIAN_DEFAULT == 0\n-#define TARGET_VERSION fprintf (stderr, \" (MIPS32el GNU/Linux with ELF)\");\n-#else\n-#define TARGET_VERSION fprintf (stderr, \" (MIPS32 GNU/Linux with ELF)\");\n-#endif\n-\n-#undef MIPS_ISA_DEFAULT\n-#define MIPS_ISA_DEFAULT 32"}, {"sha": "90525963a2bbc5b316beccee684bc9bb27fc0481", "filename": "gcc/config/mips/isa3264.h", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fisa3264.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4357a6c3481d4ab2a32cc905480efdfaacec7937/gcc%2Fconfig%2Fmips%2Fisa3264.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fisa3264.h?ref=4357a6c3481d4ab2a32cc905480efdfaacec7937", "patch": "@@ -1,45 +0,0 @@\n-/* Definitions of target machine for GNU compiler.\n-   MIPS 32 and MIPS 64 version.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#ifndef MIPS_ISA_DEFAULT\n-#define MIPS_ISA_DEFAULT 32\n-#endif\n-\n-#ifndef MIPS_ABI_DEFAULT\n-#define MIPS_ABI_DEFAULT ABI_MEABI\n-#endif\n-\n-#ifndef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-#endif\n-\n-#include \"mips/elf.h\"\n-\n-#ifndef HAVE_MIPS_LIBGLOSS_STARTUP_DIRECTIVES\n-/* Once HAVE_MIPS_LIBGLOSS_STARTUP_DIRECTIVES is always true, this code\n-   can be GC'd.  */\n-#if MIPS_ABI_DEFAULT == ABI_MEABI\n-/* For MEABI, don't link with crt0 files, let the linker start files specify\n-   the appropriate crt0 file.  */\n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \"crti%O%s crtbegin%O%s\"\n-#endif\n-#endif"}, {"sha": "71de1611699b042bbc843f4376542062950d34fe", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -18,7 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include \"mips/mips.h\"\n #include \"mips/abi64.h\"\n \n #undef WCHAR_TYPE\n@@ -188,14 +187,13 @@ void FN ()\t\t\t\t\t\t\t\\\n         %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}} \\\n         %{static:-static}}}\"\n \n-\n #undef SUBTARGET_ASM_SPEC\n #define SUBTARGET_ASM_SPEC \"\\\n %{mabi=64: -64} \\\n %{!fno-PIC:%{!fno-pic:-KPIC}} \\\n %{fno-PIC:-non_shared} %{fno-pic:-non_shared}\"\n \n-#undef SUBTARGET_ASM_DEBUGGING_SPEC\n+#undef  SUBTARGET_ASM_DEBUGGING_SPEC\n #define SUBTARGET_ASM_DEBUGGING_SPEC \"-g0\"\n \n /* The MIPS assembler has different syntax for .set. We set it to"}, {"sha": "532e55994ea5d1934266d1c1604fdb0a4d4ad253", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -5357,13 +5357,13 @@ override_options ()\n \n \t  else if (FP_REG_P (regno))\n \t    temp = (((regno % FP_INC) == 0\n-\t\t      /* I think this change is OK regardless of abi, but\n+\t\t     /* I think this change is OK regardless of abi, but\n                         I'm being cautions untill I can test this more.\n                         HARD_REGNO_MODE_OK is about whether or not you\n                         can move to and from a register without changing\n                         the value, not about whether math works on the\n-                        register.  */\n-                     || (mips_abi == ABI_MEABI && size <= 4))\n+                        register. */\n+\t\t     || (mips_abi == ABI_MEABI && size <= 4))\n \t\t    && (((class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n \t\t\t && size <= UNITS_PER_FPVALUE)\n \t\t\t/* Allow integer modes that fit into a single\n@@ -10369,20 +10369,17 @@ mips_return_in_memory (type)\n static int\n mips_issue_rate ()\n {\n-  int rate;\n-\n   switch (mips_tune)\n     {\n     case PROCESSOR_R3000:\n-      rate = 1;\n-      break;\n+      return 1;\n \n     default:\n-      rate = 1;\n-      break;\n+      return 1;\n     }\n \n-  return rate;\n+  abort ();\n+\n }\n \n const char *"}, {"sha": "3ec2cf5fe5dfe11c2e7001920479839b21ccf33d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1046,7 +1046,8 @@ extern int mips_abi;\n %{ggdb:-g} %{ggdb0:-g0} %{ggdb1:-g1} %{ggdb2:-g2} %{ggdb3:-g3} \\\n %{gstabs:-g} %{gstabs0:-g0} %{gstabs1:-g1} %{gstabs2:-g2} %{gstabs3:-g3} \\\n %{gstabs+:-g} %{gstabs+0:-g0} %{gstabs+1:-g1} %{gstabs+2:-g2} %{gstabs+3:-g3} \\\n-%{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3}\"\n+%{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3} \\\n+%{!gdwarf*:-mmdebug} %{gdwarf*:-mno-mdebug}\"\n #endif\n \n /* SUBTARGET_ASM_SPEC is always passed to the assembler.  It may be\n@@ -1448,10 +1449,8 @@ do {\t\t\t\t\t\t\t\\\n   mips_debugger_offset (X, (HOST_WIDE_INT) OFFSET)\n \n /* Tell collect that the object format is ECOFF */\n-#ifndef OBJECT_FORMAT_ROSE\n #define OBJECT_FORMAT_COFF\t/* Object file looks like COFF */\n #define EXTENDED_COFF\t\t/* ECOFF, not normal coff */\n-#endif\n \f\n /* Target machine storage layout */\n \n@@ -2646,7 +2645,6 @@ extern enum reg_class mips_char_to_class[256];\n /* 1 if N is a possible register number for function argument passing.\n    We have no FP argument registers when soft-float.  When FP registers\n    are 32 bits, we can't directly reference the odd numbered ones.  */\n-/* For o64 we should be checking the mode for SFmode as well.  */\n \n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\\\n   ((IN_RANGE((N), GP_ARG_FIRST, GP_ARG_LAST)\t\t\t\\\n@@ -4656,3 +4654,6 @@ while (0)\n #define SFMODE_NAN \\\n \tunsigned short SFbignan[2] = {0x7fbf, 0xffff}; \\\n \tunsigned short SFlittlenan[2] = {0xffff, 0xffbf}\n+\n+/* Generate calls to memcpy, etc., not bcopy, etc.  */\n+#define TARGET_MEM_FUNCTIONS 1"}, {"sha": "bda605848714b211d5a5905665fa3b672e611ada", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -60,13 +60,8 @@ Boston, MA 02111-1307, USA.  */\n #include <mips/elf.h>\n \n /* Now clean up after it.  */\n-#undef OBJECT_FORMAT_COFF\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n-#undef US_SOFTWARE_GOFAST\n-#undef INIT_SUBTARGET_OPTABS\n-#define INIT_SUBTARGET_OPTABS\n-\n \n /* Get generic NetBSD definitions.  */\n #include <netbsd.h>"}, {"sha": "ebef39f8787deeed314e3c56268cae6cdd865b07", "filename": "gcc/config/mips/r3900.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fr3900.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fr3900.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fr3900.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -35,22 +35,3 @@ Boston, MA 02111-1307, USA.  */\n %{mhard-float:%e-mhard-float not supported} \\\n %{msingle-float:%{msoft-float: \\\n   %e-msingle-float and -msoft-float can not both be specified}}\"\n-\n-/* Debugging */\n-\n-#define DWARF2_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-\n-/* For the 'preferred' cases (\"gN\" and \"ggdbN\") we need to tell the\n-   gnu assembler not to generate debugging information.  */\n-\n-#define SUBTARGET_ASM_DEBUGGING_SPEC \"\\\n-%{!mmips-as: \\\n-  %{g:-g0} %{g0:-g0} %{g1:-g0} %{g2:-g0} %{g3:-g0} \\\n-  %{ggdb:-g0} %{ggdb0:-g0} %{ggdb1:-g0} %{ggdb2:-g0} %{ggdb3:-g0} \\\n-  %{gdwarf-2*:-g0}} \\\n-%{gstabs:-g} %{gstabs0:-g0} %{gstabs1:-g1} %{gstabs2:-g2} %{gstabs3:-g3} \\\n-%{gstabs+:-g} %{gstabs+0:-g0} %{gstabs+1:-g1} %{gstabs+2:-g2} %{gstabs+3:-g3} \\\n-%{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3}\"\n-\n-/* eof */"}, {"sha": "f912759a16ba699f566668c2587693a54766358b", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -59,9 +59,6 @@ Boston, MA 02111-1307, USA.  */\n #define getpagesize()\tsysconf(_SC_PAGE_SIZE)\n #endif /*  L_trampoline */\n \n-/* Generate calls to memcpy, etc., not bcopy, etc.  */\n-#define TARGET_MEM_FUNCTIONS\n-\n #define OBJECT_FORMAT_ELF\n \n #define\tTARGET_DEFAULT\tMASK_ABICALLS"}, {"sha": "89e9bcf86c3c65a2f2bb82e7fd942bee30d0ae89", "filename": "gcc/config/mips/t-ecoff", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-ecoff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-ecoff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-ecoff?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,5 +1,3 @@\n-CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n-\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -19,26 +17,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for both hard and soft floating point\n \n MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB mips1/mips3"}, {"sha": "13ddcc3d22ae0bc1ddb2c7ab7f4b4c986ae416dc", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,5 +1,3 @@\n-CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n-\n # Don't let CTOR_LIST end up in sdata section.\n CRTSTUFF_T_CFLAGS = -G 0\n \n@@ -31,31 +29,11 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for both hard and soft floating point\n \n-MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB\n-MULTILIB_DIRNAMES = soft-float single el eb\n-MULTILIB_MATCHES = msingle-float=m4650\n+MULTILIB_OPTIONS = msoft-float EL/EB\n+MULTILIB_DIRNAMES = soft-float el eb\n+#MULTILIB_MATCHES = msingle-float=m4650\n EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib"}, {"sha": "a6c60d4bf57704608129866a3753d82fba8086bc", "filename": "gcc/config/mips/t-gofast", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-gofast", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-gofast", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-gofast?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -7,14 +7,13 @@ dp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#ifdef __MIPSEL__' > dp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n \techo '#endif' >> dp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' >> dp-bit.c\n-\techo '#undef FLOAT' >> dp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n \n fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifdef __MIPSEL__' >> fp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n \techo '#endif' >> fp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' >> fp-bit.c\n-\techo '#define FLOAT' >> fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c", "previous_filename": "gcc/config/mips/t-netbsd"}, {"sha": "d0440bc5ca12f4041ca0559064d2c75d1a184e19", "filename": "gcc/config/mips/t-iris5-6", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-iris5-6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-iris5-6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris5-6?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -27,19 +27,4 @@ SHLIB_INSTALL = \\\n \t$(LN_S) $(SHLIB_SONAME) \\\n \t  $$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' > dp-bit.c\n-\techo '#undef FLOAT' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver"}, {"sha": "02c9d272ea0e621ee17f663ad0935c2d3283c6bf", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,4 +1,4 @@\n-CONFIG2_H\t= $(srcdir)/config/mips/isa3264.h $(srcdir)/config/mips/elf.h $(srcdir)/config/mips/ecoff.h $(srcdir)/config/mips/mips.h\n+CONFIG2_H\t= $(srcdir)/config/mips/elf.h $(srcdir)/config/mips/mips.h\n \n # Don't let CTOR_LIST end up in sdata section.\n CRTSTUFF_T_CFLAGS = -G 0\n@@ -31,28 +31,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for both hard and soft floating point\n \n MULTILIB_OPTIONS = msoft-float EL/EB mips32/mips64"}, {"sha": "292386d03830a83283bd024a6576da10ee966fc3", "filename": "gcc/config/mips/t-mips", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,3 +1,5 @@\n+# fp-bit and dp-bit are really part of libgcc1, but this will cause\n+# them to be built correctly, so... [taken from t-sparclite]\n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries.\n FPBIT = fp-bit.c\n@@ -7,14 +9,11 @@ dp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#ifdef __MIPSEL__' > dp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n \techo '#endif' >> dp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' >> dp-bit.c\n-\techo '#undef FLOAT' >> dp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n \n fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifdef __MIPSEL__' >> fp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n \techo '#endif' >> fp-bit.c\n-\techo '#undef US_SOFTWARE_GOFAST' >> fp-bit.c\n-\techo '#define FLOAT' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c", "previous_filename": "gcc/config/mips/t-linux"}, {"sha": "f8778cd158d1014d8ab937b8583944ba84d023c0", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=6d4392353e94a9d9a6e66c1cb8e1aee3eb177e05", "patch": "@@ -1,5 +1,3 @@\n-CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n-\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -19,34 +17,14 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n # Don't let CTOR_LIST end up in sdata section.\n CRTSTUFF_T_CFLAGS = -G 0\n \n # Build the libraries for both hard and soft floating point\n \n-MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB\n-MULTILIB_DIRNAMES = soft-float single el eb\n+MULTILIB_OPTIONS = msoft-float EL/EB\n+MULTILIB_DIRNAMES = soft-float el eb\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}]}