{"sha": "cd38efa560f565cb02cba62fe919e591dc110b74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzOGVmYTU2MGY1NjVjYjAyY2JhNjJmZTkxOWU1OTFkYzExMGI3NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T10:37:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T10:37:53Z"}, "message": "[multiple changes]\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sinput-c.adb (Load_File): Ensure Source_Align alignment.\n\t* sinput-d.adb (Create_Debug_Source): Ensure Source_Align alignment.\n\t* sinput-l.adb (Create_Instantiation_Source): Ensure Source_Align\n\talignment.\n\t(Load_File): Ditto.\n\t* sinput.ads, sinput.adb (Get_Source_File_Index): New optimized (single\n\tline) version.\n\t* types.ads (Source_Align): New definition.\n\t(Source_Buffer): Document new alignment requirement.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Linker_Section): Allow\n\tthis for types.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor adjustment to doc for To_Address attribute.\n\n2013-10-10  Vadim Godunko  <godunko@adacore.com>\n\n\t* s-stopoo.ads (Root_Storage_Pool): Add pragma\n\tPreelaborable_Initialization.\n\nFrom-SVN: r203343", "tree": {"sha": "4eae409e43f75727ce132480e1c6fc7592638197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eae409e43f75727ce132480e1c6fc7592638197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd38efa560f565cb02cba62fe919e591dc110b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd38efa560f565cb02cba62fe919e591dc110b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd38efa560f565cb02cba62fe919e591dc110b74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd38efa560f565cb02cba62fe919e591dc110b74/comments", "author": null, "committer": null, "parents": [{"sha": "d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6394e2bbc175f53f60e71fccc5a9be4542ce68e"}], "stats": {"total": 192, "additions": 91, "deletions": 101}, "files": [{"sha": "d0658b9ad1b8d1f203c679dbc9d218cbdeb5754e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -1,3 +1,33 @@\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinput-c.adb (Load_File): Ensure Source_Align alignment.\n+\t* sinput-d.adb (Create_Debug_Source): Ensure Source_Align alignment.\n+\t* sinput-l.adb (Create_Instantiation_Source): Ensure Source_Align\n+\talignment.\n+\t(Load_File): Ditto.\n+\t* sinput.ads, sinput.adb (Get_Source_File_Index): New optimized (single\n+\tline) version.\n+\t* types.ads (Source_Align): New definition.\n+\t(Source_Buffer): Document new alignment requirement.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Linker_Section): Allow\n+\tthis for types.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor adjustment to doc for To_Address attribute.\n+\n+2013-10-10  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* s-stopoo.ads (Root_Storage_Pool): Add pragma\n+\tPreelaborable_Initialization.\n+\n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n \t* gcc-interface/Makefile.in (OUTPUT_OPTION): Define as \"-o $@\"."}, {"sha": "74acbb3379fc9714bd8368a31e4341d1949bdb19", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -8669,7 +8669,8 @@ static expression.  The result is that such an expression can be\n used in contexts (e.g.@: preelaborable packages) which require a\n static expression and where the function call could not be used\n (since the function call is always non-static, even if its\n-argument is static).\n+argument is static). The argument must be in the range 0 .. 2**m-1,\n+where m is the memory size (typically 32 or 64).\n \n @node Attribute Type_Class\n @unnumberedsec Attribute Type_Class"}, {"sha": "d6153acd409305a0afaff0a768d497a62ff2b8aa", "filename": "gcc/ada/s-stopoo.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fs-stopoo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fs-stopoo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stopoo.ads?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -41,6 +41,7 @@ package System.Storage_Pools is\n \n    type Root_Storage_Pool is abstract\n      new Ada.Finalization.Limited_Controlled with private;\n+   pragma Preelaborable_Initialization (Root_Storage_Pool);\n \n    procedure Allocate\n      (Pool                     : in out Root_Storage_Pool;"}, {"sha": "4965288dc5f44fccf0c940b56cfcdfd006ab115f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -5101,12 +5101,14 @@ package body Sem_Ch3 is\n \n                   if Nkind (Def) = N_Access_Definition then\n                      if Present (Access_To_Subprogram_Definition (Def)) then\n-                        Set_Etype (Def,\n+                        Set_Etype\n+                          (Def,\n                            Replace_Anonymous_Access_To_Protected_Subprogram\n                             (Spec));\n                      else\n                         Find_Type (Subtype_Mark (Def));\n                      end if;\n+\n                   else\n                      Find_Type (Def);\n                   end if;"}, {"sha": "165df6196f2dca946970404a45a3b069f49fdd5e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -13736,10 +13736,13 @@ package body Sem_Prag is\n             Check_Arg_Is_Library_Level_Local_Name (Arg1);\n             Check_Arg_Is_Static_Expression (Arg2, Standard_String);\n \n-            --  This pragma applies only to objects\n+            --  This pragma applies to objects and types\n \n-            if not Is_Object (Entity (Get_Pragma_Arg (Arg1))) then\n-               Error_Pragma_Arg (\"pragma% applies only to objects\", Arg1);\n+            if not Is_Object (Entity (Get_Pragma_Arg (Arg1)))\n+              and then not Is_Type (Entity (Get_Pragma_Arg (Arg1)))\n+            then\n+               Error_Pragma_Arg\n+                 (\"pragma% applies only to objects and types\", Arg1);\n             end if;\n \n             --  The only processing required is to link this item on to the"}, {"sha": "83dadaf408c4a18ec2cc3aba7cfd65ae29084a8a", "filename": "gcc/ada/sinput-c.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-c.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,7 +68,8 @@ package body Sinput.C is\n       if X = Source_File.First then\n          Lo := First_Source_Ptr;\n       else\n-         Lo := Source_File.Table (X - 1).Source_Last + 1;\n+         Lo := ((Source_File.Table (X - 1).Source_Last + Source_Align) /\n+                  Source_Align) * Source_Align;\n       end if;\n \n       Name_Len := Path'Length;"}, {"sha": "f150ebf7f0a6a0299234182880499492e3c5be11", "filename": "gcc/ada/sinput-d.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-d.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-d.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-d.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,7 +62,9 @@ package body Sinput.D is\n       Loc    : out Source_Ptr)\n    is\n    begin\n-      Loc := Source_File.Table (Source_File.Last).Source_Last + 1;\n+      Loc :=\n+        ((Source_File.Table (Source_File.Last).Source_Last + Source_Align) /\n+           Source_Align) * Source_Align;\n       Source_File.Append (Source_File.Table (Source));\n       Dfile := Source_File.Last;\n "}, {"sha": "b72278851b467267f8722a828468396ce98e096c", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -112,7 +112,6 @@ package body Sinput.L is\n \n    procedure Complete_Source_File_Entry is\n       CSF : constant Source_File_Index := Current_Source_File;\n-\n    begin\n       Trim_Lines_Table (CSF);\n       Source_File.Table (CSF).Source_Checksum := Checksum;\n@@ -158,7 +157,6 @@ package body Sinput.L is\n             Snew.Inlined_Call := Sloc (Inst_Node);\n \n          else\n-\n             --  If the spec has been instantiated already, and we are now\n             --  creating the instance source for the corresponding body now,\n             --  retrieve the instance id that was assigned to the spec, which\n@@ -167,10 +165,10 @@ package body Sinput.L is\n             Inst_Spec := Instance_Spec (Inst_Node);\n             if Present (Inst_Spec) then\n                declare\n-                  Inst_Spec_Ent     : Entity_Id;\n+                  Inst_Spec_Ent : Entity_Id;\n                   --  Instance spec entity\n \n-                  Inst_Spec_Sloc    : Source_Ptr;\n+                  Inst_Spec_Sloc : Source_Ptr;\n                   --  Virtual sloc of the spec instance source\n \n                   Inst_Spec_Inst_Id : Instance_Id;\n@@ -188,12 +186,13 @@ package body Sinput.L is\n \n                   --  The specification of the instance entity has a virtual\n                   --  sloc within the instance sloc range.\n+\n                   --  ??? But the Unit_Declaration_Node has the sloc of the\n                   --  instantiation, which is somewhat of an oddity.\n \n-                  Inst_Spec_Sloc    :=\n-                    Sloc (Specification (Unit_Declaration_Node\n-                                           (Inst_Spec_Ent)));\n+                  Inst_Spec_Sloc :=\n+                    Sloc\n+                      (Specification (Unit_Declaration_Node (Inst_Spec_Ent)));\n                   Inst_Spec_Inst_Id :=\n                     Source_File.Table\n                       (Get_Source_File_Index (Inst_Spec_Sloc)).Instance;\n@@ -209,11 +208,16 @@ package body Sinput.L is\n             end if;\n          end if;\n \n-         --  Now we need to compute the new values of Source_First,\n+         --  Now we need to compute the new values of Source_First and\n          --  Source_Last and adjust the source file pointer to have the\n          --  correct virtual origin for the new range of values.\n \n-         Snew.Source_First := Source_File.Table (Xnew - 1).Source_Last + 1;\n+         --  Source_First must be greater than the last Source_Last value\n+         --  and also must be a multiple of Source_Align\n+\n+         Snew.Source_First :=\n+           ((Source_File.Table (Xnew - 1).Source_Last + Source_Align) /\n+              Source_Align) * Source_Align;\n          A.Adjust := Snew.Source_First - A.Lo;\n          Snew.Source_Last := A.Hi + A.Adjust;\n \n@@ -398,10 +402,13 @@ package body Sinput.L is\n       Source_File.Increment_Last;\n       X := Source_File.Last;\n \n+      --  Compute starting index, respecting alignment requirement\n+\n       if X = Source_File.First then\n          Lo := First_Source_Ptr;\n       else\n-         Lo := Source_File.Table (X - 1).Source_Last + 1;\n+         Lo := ((Source_File.Table (X - 1).Source_Last + Source_Align) /\n+                  Source_Align) * Source_Align;\n       end if;\n \n       Osint.Read_Source_File (N, Lo, Hi, Src, T);"}, {"sha": "7bd0a693470620d2b82393f2387d15c59cdbdfac", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 8, "deletions": 53, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -434,44 +434,9 @@ package body Sinput is\n    -- Get_Source_File_Index --\n    ---------------------------\n \n-   Source_Cache_First : Source_Ptr := 1;\n-   Source_Cache_Last  : Source_Ptr := 0;\n-   --  Records the First and Last subscript values for the most recently\n-   --  referenced entry in the source table, to optimize the common case of\n-   --  repeated references to the same entry. The initial values force an\n-   --  initial search to set the cache value.\n-\n-   Source_Cache_Index : Source_File_Index := No_Source_File;\n-   --  Contains the index of the entry corresponding to Source_Cache\n-\n    function Get_Source_File_Index (S : Source_Ptr) return Source_File_Index is\n    begin\n-      if S in Source_Cache_First .. Source_Cache_Last then\n-         return Source_Cache_Index;\n-\n-      else\n-         pragma Assert (Source_File_Index_Table (Int (S) / Chunk_Size)\n-                          /=\n-                        No_Source_File);\n-         for J in Source_File_Index_Table (Int (S) / Chunk_Size)\n-                                                    .. Source_File.Last\n-         loop\n-            if S in Source_File.Table (J).Source_First ..\n-                    Source_File.Table (J).Source_Last\n-            then\n-               Source_Cache_Index := J;\n-               Source_Cache_First :=\n-                 Source_File.Table (Source_Cache_Index).Source_First;\n-               Source_Cache_Last :=\n-                 Source_File.Table (Source_Cache_Index).Source_Last;\n-               return Source_Cache_Index;\n-            end if;\n-         end loop;\n-      end if;\n-\n-      --  We must find a matching entry in the above loop!\n-\n-      raise Program_Error;\n+      return Source_File_Index_Table (Int (S) / Source_Align);\n    end Get_Source_File_Index;\n \n    ----------------\n@@ -480,9 +445,6 @@ package body Sinput is\n \n    procedure Initialize is\n    begin\n-      Source_Cache_First := 1;\n-      Source_Cache_Last  := 0;\n-      Source_Cache_Index := No_Source_File;\n       Source_gnat_adc    := No_Source_File;\n       First_Time_Around  := True;\n \n@@ -724,15 +686,13 @@ package body Sinput is\n       Ind : Int;\n       SP  : Source_Ptr;\n       SL  : constant Source_Ptr := Source_File.Table (Xnew).Source_Last;\n-\n    begin\n-      SP  := (Source_File.Table (Xnew).Source_First + Chunk_Size - 1)\n-                                                    / Chunk_Size * Chunk_Size;\n-      Ind := Int (SP) / Chunk_Size;\n-\n+      SP  := Source_File.Table (Xnew).Source_First;\n+      pragma Assert (SP mod Source_Align = 0);\n+      Ind := Int (SP) / Source_Align;\n       while SP <= SL loop\n          Source_File_Index_Table (Ind) := Xnew;\n-         SP := SP + Chunk_Size;\n+         SP := SP + Source_Align;\n          Ind := Ind + 1;\n       end loop;\n    end Set_Source_File_Index_Table;\n@@ -921,19 +881,14 @@ package body Sinput is\n          end loop;\n       end if;\n \n-      --  Reset source cache pointers to force new read\n-\n-      Source_Cache_First := 1;\n-      Source_Cache_Last  := 0;\n-\n       --  Read in source file table and instance table\n \n       Source_File.Tree_Read;\n       Instances.Tree_Read;\n \n-      --  The pointers we read in there for the source buffer and lines\n-      --  table pointers are junk. We now read in the actual data that\n-      --  is referenced by these two fields.\n+      --  The pointers we read in there for the source buffer and lines table\n+      --  pointers are junk. We now read in the actual data that is referenced\n+      --  by these two fields.\n \n       for J in Source_File.First .. Source_File.Last loop\n          declare"}, {"sha": "b5b2d747cc1b9c5e5957d38db35ad3d7a69ef5dd", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -342,36 +342,17 @@ package Sinput is\n \n    --  The Get_Source_File_Index function is called very frequently. Earlier\n    --  versions cached a single entry, but then reverted to a serial search,\n-   --  and this proved to be a significant source of inefficiency. To get\n-   --  around this, we use the following directly indexed array. The space\n-   --  of possible input values is a value of type Source_Ptr which is simply\n-   --  an Int value. The values in this space are allocated sequentially as\n-   --  new units are loaded.\n-\n-   --  The following table has an entry for each 4K range of possible\n-   --  Source_Ptr values. The value in the table is the lowest value\n-   --  Source_File_Index whose Source_Ptr range contains value in the\n-   --  range.\n-\n-   --  For example, the entry with index 4 in this table represents Source_Ptr\n-   --  values in the range 4*4096 .. 5*4096-1. The Source_File_Index value\n-   --  stored would be the lowest numbered source file with at least one byte\n-   --  in this range.\n-\n-   --  The algorithm used in Get_Source_File_Index is simply to access this\n-   --  table and then do a serial search starting at the given position. This\n-   --  will almost always terminate with one or two checks.\n+   --  and this proved to be a significant source of inefficiency. We then\n+   --  switched to using a table with a start point followed by a serial\n+   --  search. Now we make sure source buffers are on a reasonable boundary\n+   --  (see Types.Source_Align), and we can just use a direct look up in the\n+   --  following table.\n \n    --  Note that this array is pretty large, but in most operating systems\n    --  it will not be allocated in physical memory unless it is actually used.\n \n-   Chunk_Power : constant := 12;\n-   Chunk_Size  : constant := 2 ** Chunk_Power;\n-   --  Change comments above if value changed. Note that Chunk_Size must\n-   --  be a power of 2 (to allow for efficient access to the table).\n-\n    Source_File_Index_Table :\n-     array (Int range 0 .. Int'Last / Chunk_Size) of Source_File_Index;\n+     array (Int range 0 .. 1 + (Int'Last / Source_Align)) of Source_File_Index;\n \n    procedure Set_Source_File_Index_Table (Xnew : Source_File_Index);\n    --  Sets entries in the Source_File_Index_Table for the newly created\n@@ -605,6 +586,7 @@ package Sinput is\n    --  value is the physical line number in the source being compiled.\n \n    function Get_Source_File_Index (S : Source_Ptr) return Source_File_Index;\n+   pragma Inline (Get_Source_File_Index);\n    --  Return file table index of file identified by given source pointer\n    --  value. This call must always succeed, since any valid source pointer\n    --  value belongs to some previously loaded source file."}, {"sha": "19e633ab209f3c2fe5e6024922967f052d47e202", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd38efa560f565cb02cba62fe919e591dc110b74/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=cd38efa560f565cb02cba62fe919e591dc110b74", "patch": "@@ -183,11 +183,17 @@ package Types is\n    No_Column_Number : constant Column_Number := 0;\n    --  Special value used to indicate no column number\n \n+   Source_Align : constant := 2 ** 12;\n+   --  Alignment requirement for source buffers (by keeping source buffers\n+   --  aligned, we can optimize the implementation of Get_Source_File_Index.\n+   --  See this routine in Sinput for details.\n+\n    subtype Source_Buffer is Text_Buffer;\n    --  Type used to store text of a source file. The buffer for the main\n    --  source (the source specified on the command line) has a lower bound\n    --  starting at zero. Subsequent subsidiary sources have lower bounds\n-   --  which are one greater than the previous upper bound.\n+   --  which are one greater than the previous upper bound, rounded up to\n+   --  a multiple of Source_Align.\n \n    subtype Big_Source_Buffer is Text_Buffer (0 .. Text_Ptr'Last);\n    --  This is a virtual type used as the designated type of the access type"}]}