{"sha": "46ff5047273650dd7feac4612ffa4892163b9bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmZjUwNDcyNzM2NTBkZDdmZWFjNDYxMmZmYTQ4OTIxNjNiOWJhZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-03-26T18:37:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-03-26T18:37:56Z"}, "message": "re PR c++/4884 (g++ 3.0.2 problem with -fvolatile)\n\n\tPR c++/4884.\n\t* init.c (build_new_1): Allow for the fact the result of\n\tbuild_function_call may be a COMPOUND_EXPR.\n\n\t* g++.dg/init/new1.C: New test.\n\nFrom-SVN: r51396", "tree": {"sha": "457c94b15fbf4b8396dc29d7b64acf8e374db662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457c94b15fbf4b8396dc29d7b64acf8e374db662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ff5047273650dd7feac4612ffa4892163b9bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ff5047273650dd7feac4612ffa4892163b9bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ff5047273650dd7feac4612ffa4892163b9bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ff5047273650dd7feac4612ffa4892163b9bae/comments", "author": null, "committer": null, "parents": [{"sha": "6d4c57a0a4a143743358da16e3e94d44973aa25a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4c57a0a4a143743358da16e3e94d44973aa25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4c57a0a4a143743358da16e3e94d44973aa25a"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "e82644cd99caf3b17dff6558a602046e0ac08ebb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46ff5047273650dd7feac4612ffa4892163b9bae", "patch": "@@ -1,3 +1,9 @@\n+2002-03-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/4884.\n+\t* init.c (build_new_1): Allow for the fact the result of\n+\tbuild_function_call may be a COMPOUND_EXPR.\n+\n 2002-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5682"}, {"sha": "de3fd2c39c3b778a43540459e9524d6863bc42d8", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=46ff5047273650dd7feac4612ffa4892163b9bae", "patch": "@@ -2189,6 +2189,7 @@ build_new_1 (exp)\n   tree full_type;\n   tree nelts = NULL_TREE;\n   tree alloc_call, alloc_expr, alloc_node;\n+  tree alloc_fn;\n   tree cookie_expr, init_expr;\n   int has_array = 0;\n   enum tree_code code;\n@@ -2329,13 +2330,14 @@ build_new_1 (exp)\n   if (alloc_call == error_mark_node)\n     return error_mark_node;\n \n-  /* The ALLOC_CALL should be a CALL_EXPR, and the first operand\n-     should be the address of a known FUNCTION_DECL.  */\n-  my_friendly_assert (TREE_CODE (alloc_call) == CALL_EXPR, 20000521);\n-  t = TREE_OPERAND (alloc_call, 0);\n-  my_friendly_assert (TREE_CODE (t) == ADDR_EXPR, 20000521);\n-  t = TREE_OPERAND (t, 0);\n-  my_friendly_assert (TREE_CODE (t) == FUNCTION_DECL, 20000521);\n+  /* The ALLOC_CALL should be a CALL_EXPR -- or a COMPOUND_EXPR whose\n+     right-hand-side is ultimately a CALL_EXPR -- and the first\n+     operand should be the address of a known FUNCTION_DECL.  */\n+  t = alloc_call;\n+  while (TREE_CODE (t) == COMPOUND_EXPR) \n+    t = TREE_OPERAND (t, 1);\n+  alloc_fn = get_callee_fndecl (t);\n+  my_friendly_assert (alloc_fn != NULL_TREE, 20020325);\n   /* Now, check to see if this function is actually a placement\n      allocation function.  This can happen even when PLACEMENT is NULL\n      because we might have something like:\n@@ -2347,7 +2349,8 @@ build_new_1 (exp)\n      one argument, or there are variable arguments, then this is a\n      placement allocation function.  */\n   placement_allocation_fn_p \n-    = (type_num_arguments (TREE_TYPE (t)) > 1 || varargs_function_p (t));\n+    = (type_num_arguments (TREE_TYPE (alloc_fn)) > 1 \n+       || varargs_function_p (alloc_fn));\n \n   /*        unless an allocation function is declared with an empty  excep-\n      tion-specification  (_except.spec_),  throw(), it indicates failure to\n@@ -2359,11 +2362,7 @@ build_new_1 (exp)\n \n      So check for a null exception spec on the op new we just called.  */\n \n-  /* The ADDR_EXPR.  */\n-  t = TREE_OPERAND (alloc_call, 0);\n-  /* The function.  */\n-  t = TREE_OPERAND (t, 0);\n-  nothrow = TYPE_NOTHROW_P (TREE_TYPE (t));\n+  nothrow = TYPE_NOTHROW_P (TREE_TYPE (alloc_fn));\n   check_new = (flag_check_new || nothrow) && ! use_java_new;\n \n   alloc_expr = alloc_call;"}, {"sha": "1862977b920d5384db1538f518371cf981d7dfa9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46ff5047273650dd7feac4612ffa4892163b9bae", "patch": "@@ -1,3 +1,7 @@\n+2002-03-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/init/new1.C: New test.\n+\n 2002-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/abi/vbase9.C: New test."}, {"sha": "1acfa2618522683f36ffa78ae04ce6bb4297c41c", "filename": "gcc/testsuite/g++.dg/other/new1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ff5047273650dd7feac4612ffa4892163b9bae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C?ref=46ff5047273650dd7feac4612ffa4892163b9bae", "patch": "@@ -0,0 +1,20 @@\n+// Origin: asharji@uwaterloo.ca\n+\n+// { dg-do compile }\n+// { dg-options \"-fvolatile\" }\n+\n+typedef unsigned int size_t;\n+\n+class bar {\n+    int i;\n+  public :\n+    void * operator new ( size_t , void * storage );\n+};\n+\n+class foo {\n+    int storage[ 5 ];\n+  public:\n+    void mem ( ) {\n+        bar *s = new ( ( void * ) & storage ) bar;\n+    }\n+};"}]}