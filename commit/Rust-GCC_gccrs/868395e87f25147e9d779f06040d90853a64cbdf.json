{"sha": "868395e87f25147e9d779f06040d90853a64cbdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4Mzk1ZTg3ZjI1MTQ3ZTlkNzc5ZjA2MDQwZDkwODUzYTY0Y2JkZg==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "marcus.shawcroft@arm.com", "date": "2012-12-04T14:16:17Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2012-12-04T14:16:17Z"}, "message": "aarch64: Refactor aarch64 sfp-machine.h\n\n2012-12-04  Marcus Shawcroft <marcus.shawcroft@arm.com>\n\n\t* config/aarch64/sfp-machine.h (FP_RND_MASK): Define.\n\t(FP_ROUNDMODE): Use FP_RND_MASK.\n\t* config/aarch64/sfp-exceptions.c: New.\n\t* config/aarch64/sfp-machine.h (FP_HANDLE_EXCEPTIONS):\n\tUse __sfp_handle_exceptions.\n\nFrom-SVN: r194142", "tree": {"sha": "07c103afd59a7e37faa4a702adc72236d7cba3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c103afd59a7e37faa4a702adc72236d7cba3de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868395e87f25147e9d779f06040d90853a64cbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868395e87f25147e9d779f06040d90853a64cbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868395e87f25147e9d779f06040d90853a64cbdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868395e87f25147e9d779f06040d90853a64cbdf/comments", "author": {"login": "mshawcroft", "id": 6357566, "node_id": "MDQ6VXNlcjYzNTc1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6357566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mshawcroft", "html_url": "https://github.com/mshawcroft", "followers_url": "https://api.github.com/users/mshawcroft/followers", "following_url": "https://api.github.com/users/mshawcroft/following{/other_user}", "gists_url": "https://api.github.com/users/mshawcroft/gists{/gist_id}", "starred_url": "https://api.github.com/users/mshawcroft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mshawcroft/subscriptions", "organizations_url": "https://api.github.com/users/mshawcroft/orgs", "repos_url": "https://api.github.com/users/mshawcroft/repos", "events_url": "https://api.github.com/users/mshawcroft/events{/privacy}", "received_events_url": "https://api.github.com/users/mshawcroft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71ce1a34856faf6e981c68864004a4478bb220ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ce1a34856faf6e981c68864004a4478bb220ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ce1a34856faf6e981c68864004a4478bb220ce"}], "stats": {"total": 148, "additions": 96, "deletions": 52}, "files": [{"sha": "a120f08b406b6118ed27910d442f270dbc3c705b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=868395e87f25147e9d779f06040d90853a64cbdf", "patch": "@@ -1,3 +1,11 @@\n+2012-12-04  Marcus Shawcroft <marcus.shawcroft@arm.com>\n+\n+\t* config/aarch64/sfp-machine.h (FP_RND_MASK): Define.\n+\t(FP_ROUNDMODE): Use FP_RND_MASK.\n+\t* config/aarch64/sfp-exceptions.c: New.\n+\t* config/aarch64/sfp-machine.h (FP_HANDLE_EXCEPTIONS):\n+\tUse __sfp_handle_exceptions.\n+\n 2012-12-04  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config.host: (arm*-*-freebsd*): Remove."}, {"sha": "878cf8f95cdcd85fe030e1f8f161d3ad2d567a6e", "filename": "libgcc/config/aarch64/sfp-exceptions.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Fsfp-exceptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Fsfp-exceptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Fsfp-exceptions.c?ref=868395e87f25147e9d779f06040d90853a64cbdf", "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (C) 2012 Free Software Foundation, Inc.\n+ *\n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 3, or (at your option) any\n+ * later version.\n+ *\n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ *\n+ * Under Section 7 of GPL version 3, you are granted additional\n+ * permissions described in the GCC Runtime Library Exception, version\n+ * 3.1, as published by the Free Software Foundation.\n+ *\n+ * You should have received a copy of the GNU General Public License and\n+ * a copy of the GCC Runtime Library Exception along with this program;\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+ * <http://www.gnu.org/licenses/>.\n+ */\n+\n+#include \"sfp-machine.h\"\n+\n+void\n+__sfp_handle_exceptions (int _fex)\n+{\n+  const float fp_max = __FLT_MAX__;\n+  const float fp_min = __FLT_MIN__;\n+  const float fp_1e32 = 1.0e32f;\n+  const float fp_zero = 0.0;\n+  const float fp_one = 1.0;\n+  unsigned fpsr;\n+\n+  if (_fex & FP_EX_INVALID)\n+    {\n+      __asm__ __volatile__ (\"fdiv\\ts0, %s0, %s0\"\n+\t\t\t    :\n+\t\t\t    : \"w\" (fp_zero)\n+\t\t\t    : \"s0\");\n+      __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\n+    }\n+  if (_fex & FP_EX_DIVZERO)\n+    {\n+      __asm__ __volatile__ (\"fdiv\\ts0, %s0, %s1\"\n+\t\t\t    :\n+\t\t\t    : \"w\" (fp_one), \"w\" (fp_zero)\n+\t\t\t    : \"s0\");\n+      __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\n+    }\n+  if (_fex & FP_EX_OVERFLOW)\n+    {\n+      __asm__ __volatile__ (\"fadd\\ts0, %s0, %s1\"\n+\t\t\t    :\n+\t\t\t    : \"w\" (fp_max), \"w\" (fp_1e32)\n+\t\t\t    : \"s0\");\n+      __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\n+    }\n+  if (_fex & FP_EX_UNDERFLOW)\n+    {\n+      __asm__ __volatile__ (\"fmul\\ts0, %s0, %s0\"\n+\t\t\t    :\n+\t\t\t    : \"w\" (fp_min)\n+\t\t\t    : \"s0\");\n+      __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\n+    }\n+  if (_fex & FP_EX_INEXACT)\n+    {\n+      __asm__ __volatile__ (\"fsub\\ts0, %s0, %s1\"\n+\t\t\t    :\n+\t\t\t    : \"w\" (fp_max), \"w\" (fp_one)\n+\t\t\t    : \"s0\");\n+      __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\n+    }\n+}"}, {"sha": "6c56a92c4f1d8473618e918fdd47b74077872cef", "filename": "libgcc/config/aarch64/sfp-machine.h", "status": "modified", "additions": 10, "deletions": 52, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h?ref=868395e87f25147e9d779f06040d90853a64cbdf", "patch": "@@ -70,61 +70,19 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define FP_EX_UNDERFLOW\t0x08\n #define FP_EX_INEXACT\t0x10\n \n-#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    const float fp_max = __FLT_MAX__;\t\t\t\t\t\\\n-    const float fp_min = __FLT_MIN__;\t\t\t\t\t\\\n-    const float fp_1e32 = 1.0e32f;\t\t\t\t\t\\\n-    const float fp_zero = 0.0;\t\t\t\t\t\t\\\n-    const float fp_one = 1.0;\t\t\t\t\t\t\\\n-    unsigned fpsr;\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        __asm__ __volatile__ (\"fdiv\\ts0, %s0, %s0\"\t\t\t\\\n-\t\t\t      :\t\t\t\t\t\t\\\n-\t\t\t      : \"w\" (fp_zero)\t\t\t\t\\\n-\t\t\t      : \"s0\");\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fdiv\\ts0, %s0, %s1\"\t\t\t\\\n-\t\t\t      :\t\t\t\t\t\t\\\n-\t\t\t      : \"w\" (fp_one), \"w\" (fp_zero)\t\t\\\n-\t\t\t      : \"s0\");\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        __asm__ __volatile__ (\"fadd\\ts0, %s0, %s1\"\t\t\t\\\n-\t\t\t      :\t\t\t\t\t\t\\\n-\t\t\t      : \"w\" (fp_max), \"w\" (fp_1e32)\t\t\\\n-\t\t\t      : \"s0\");\t\t\t\t\t\\\n-        __asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fmul\\ts0, %s0, %s0\"\t\t\t\\\n-\t\t\t      :\t\t\t\t\t\t\\\n-\t\t\t      : \"w\" (fp_min)\t\t\t\t\\\n-\t\t\t      : \"s0\");\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fsub\\ts0, %s0, %s1\"\t\t\t\\\n-\t\t\t      :\t\t\t\t\t\t\\\n-\t\t\t      : \"w\" (fp_max), \"w\" (fp_one)\t\t\\\n-\t\t\t      : \"s0\");\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"mrs\\t%0, fpsr\" : \"=r\" (fpsr));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+void __sfp_handle_exceptions (int);\n \n+#define FP_HANDLE_EXCEPTIONS\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (__builtin_expect (_fex, 0))\t\t\\\n+      __sfp_handle_exceptions (_fex);\t\t\\\n+  } while (0);\n \n-#define FP_RND_NEAREST\t\t0\n-#define FP_RND_ZERO\t\t0xc00000\n+#define FP_RND_NEAREST\t\t0x000000\n #define FP_RND_PINF\t\t0x400000\n #define FP_RND_MINF\t\t0x800000\n+#define FP_RND_ZERO\t\t0xc00000\n+#define FP_RND_MASK\t\t0xc00000\n \n #define _FP_DECL_EX \\\n   unsigned long int _fpcr __attribute__ ((unused)) = FP_RND_NEAREST\n@@ -135,7 +93,7 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n \t\t\t  : \"=r\" (_fpcr));\t\\\n   } while (0)\n \n-#define FP_ROUNDMODE (_fpcr & 0xc00000)\n+#define FP_ROUNDMODE (_fpcr & FP_RND_MASK)\n \n #define\t__LITTLE_ENDIAN\t1234\n #define\t__BIG_ENDIAN\t4321"}, {"sha": "586dca224691114020709d3d3f558f07be4619cb", "filename": "libgcc/config/aarch64/t-softfp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868395e87f25147e9d779f06040d90853a64cbdf/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ft-softfp?ref=868395e87f25147e9d779f06040d90853a64cbdf", "patch": "@@ -5,3 +5,5 @@ softfp_truncations := tfsf tfdf\n softfp_exclude_libgcc2 := n\n \n TARGET_LIBGCC2_CFLAGS += -Wno-missing-prototypes\n+\n+LIB2ADD += $(srcdir)/config/aarch64/sfp-exceptions.c"}]}