{"sha": "92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5NDFjZWEyZjA1YThjZjc5ZmM3MWFhMzlmYTk0OGRjZmI4MmQ3YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-09T16:11:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-09T16:17:12Z"}, "message": "c++: Fix indirect partitions [PR 98944]\n\nThe most recent reimplementation of module loading initialization\nchanged the behaviour of setting an import's location, and broke some\npartition handling.\n\n\tPR c++/98944\n\tgcc/cp/\n\t* module.cc (module_state::is_rooted): Rename to ...\n\t(module_state::has_location): ... here.  Adjust callers.\n\t(module_state::read_partitions): Adjust validity check.\n\tDon't overwrite a known location.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr98944_a.C: New.\n\t* g++.dg/modules/pr98944_b.C: New.\n\t* g++.dg/modules/pr98944_c.C: New.\n\t* g++.dg/modules/pr98944_d.C: New.", "tree": {"sha": "00a2763e9a640813f764a0d60f83d7761fb53556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a2763e9a640813f764a0d60f83d7761fb53556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a3f288f1895a8c061c0458590542a3d2ee796a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a3f288f1895a8c061c0458590542a3d2ee796a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a3f288f1895a8c061c0458590542a3d2ee796a"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "0749db8fe94654b00b9e957bde1fbeacfbf90ea0", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "patch": "@@ -3608,8 +3608,8 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n   }\n \n  public:\n-  /* Is this not a real module?  */\n-  bool is_rooted () const\n+  /* Is this a real module?  */\n+  bool has_location () const\n   {\n     return loc != UNKNOWN_LOCATION;\n   }\n@@ -4416,7 +4416,7 @@ dumper::operator () (const char *format, ...)\n \t    const char *str = \"(none)\";\n \t    if (module_state *m = va_arg (args, module_state *))\n \t      {\n-\t\tif (!m->is_rooted ())\n+\t\tif (!m->has_location ())\n \t\t  str = \"(detached)\";\n \t\telse\n \t\t  str = m->get_flatname ();\n@@ -14441,16 +14441,17 @@ module_state::read_partitions (unsigned count)\n       dump () && dump (\"Reading elided partition %s (crc=%x)\", name, crc);\n \n       module_state *imp = get_module (name);\n-      if (!imp || !imp->is_partition () || imp->is_rooted ()\n-\t  || get_primary (imp) != this)\n+      if (!imp\t/* Partition should be ...  */\n+\t  || !imp->is_partition () /* a partition ...  */\n+\t  || imp->loadedness != ML_NONE  /* that is not yet loaded ...  */\n+\t  || get_primary (imp) != this) /* whose primary is this.  */\n \t{\n \t  sec.set_overrun ();\n \t  break;\n \t}\n \n-      /* Attach the partition without loading it.  We'll have to load\n-\t for real if it's indirectly imported.  */\n-      imp->loc = floc;\n+      if (!imp->has_location ())\n+\timp->loc = floc;\n       imp->crc = crc;\n       if (!imp->filename && fname[0])\n \timp->filename = xstrdup (fname);\n@@ -18857,7 +18858,7 @@ direct_import (module_state *import, cpp_reader *reader)\n   timevar_start (TV_MODULE_IMPORT);\n   unsigned n = dump.push (import);\n \n-  gcc_checking_assert (import->is_direct () && import->is_rooted ());\n+  gcc_checking_assert (import->is_direct () && import->has_location ());\n   if (import->loadedness == ML_NONE)\n     if (!import->do_import (reader, true))\n       gcc_unreachable ();\n@@ -18904,7 +18905,7 @@ import_module (module_state *import, location_t from_loc, bool exporting_p,\n       linemap_module_reparent (line_table, import->loc, from_loc);\n     }\n   gcc_checking_assert (!import->module_p);\n-  gcc_checking_assert (import->is_direct () && import->is_rooted ());\n+  gcc_checking_assert (import->is_direct () && import->has_location ());\n \n   direct_import (import, reader);\n }\n@@ -18934,7 +18935,7 @@ declare_module (module_state *module, location_t from_loc, bool exporting_p,\n     }\n \n   gcc_checking_assert (module->module_p);\n-  gcc_checking_assert (module->is_direct () && module->is_rooted ());\n+  gcc_checking_assert (module->is_direct () && module->has_location ());\n \n   /* Yer a module, 'arry.  */\n   module_kind &= ~MK_GLOBAL;"}, {"sha": "9475317dc823d72acab40f12553bfd030114c7f5", "filename": "gcc/testsuite/g++.dg/modules/pr98944_a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_a.C?ref=92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "patch": "@@ -0,0 +1,9 @@\n+// PR 98944, the example in [module.unit]/4\n+// { dg-additional-options -fmodules-ts }\n+\n+// tu3\n+\n+module A:Internals;\n+// { dg-module-cmi A:Internals }\n+\n+int bar();"}, {"sha": "209eafccc76a8a0ce51748ec802139292e9f8be8", "filename": "gcc/testsuite/g++.dg/modules/pr98944_b.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_b.C?ref=92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+// tu2\n+export module A:Foo;\n+// { dg-module-cmi A:Foo }\n+\n+import :Internals;\n+export int foo() { return 2 * (bar() + 1); }"}, {"sha": "90be60f2629874a26c7bd137e6d03afbd9b426be", "filename": "gcc/testsuite/g++.dg/modules/pr98944_c.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_c.C?ref=92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+// tu1\n+export module A;\n+// { dg-module-cmi A }\n+\n+export import :Foo;\n+export int baz();"}, {"sha": "25364ab9aaea914ba086326c1d05f0d580b2778b", "filename": "gcc/testsuite/g++.dg/modules/pr98944_d.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92941cea2f05a8cf79fc71aa39fa948dcfb82d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98944_d.C?ref=92941cea2f05a8cf79fc71aa39fa948dcfb82d7a", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+// tu4\n+module A;\n+\n+import :Internals;\n+int bar() { return baz() - 10; }\n+int baz() { return 30; }"}]}