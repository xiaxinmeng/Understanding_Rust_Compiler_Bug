{"sha": "c8aea42ce2c691e4e891476c456f4650d3757810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhZWE0MmNlMmM2OTFlNGU4OTE0NzZjNDU2ZjQ2NTBkMzc1NzgxMA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-08-18T15:15:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-08-18T15:15:39Z"}, "message": "Makefile.tpl (DEBUG_PREFIX_CFLAGS_FOR_TARGET): New.\n\n2007-08-18  Paul Brook  <paul@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* Makefile.tpl (DEBUG_PREFIX_CFLAGS_FOR_TARGET): New.\n\t(CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Include it.\n\t* Makefile.in: Regenerate.\n\t* configure.ac (--with-debug-prefix-map): New.\n\t* configure: Regenerate.\n\nconfig:\n2007-08-18  Paul Brook  <paul@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* mt-gnu (CXXFLAGS_FOR_TARGET): Add\n\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET).\n\ngcc:\n2007-08-18  Paul Brook  <paul@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* common.opt (-fdebug-prefix-map=): New option.\n\t* opts.c: Include debug.h.\n\t(common_handle_option): Handle -fdebug-prefix-map.\n\t* final.c: Include ggc.h.\n\t(struct debug_prefix_map, debug_prefix_maps, add_debug_prefix_map,\n\tremap_debug_filename): New.\n\t* Makefile.in (final.o, opts.o): Update dependencies.\n\t* debug.h (remap_debug_filename, add_debug_prefix_map): Declare.\n\t* configure.ac: Check for assembler --debug-prefix-map support.\n\t* configure, config.in: Regenerate.\n\t* gcc.c (ASM_MAP): Define conditional on HAVE_AS_DEBUG_PREFIX_MAP.\n\t(ASM_DEBUG_SPEC): Include ASM_MAP.\n\t* doc/install.texi (--with-debug-prefix-map): Document.\n\t* doc/invoke.texi (-fdebug-prefix-map): Document.\n\t* dbxout.c (dbxout_init, dbxout_start_source_file,\n\tdbxout_source_file): Call remap_debug_filename.\n\t* dwarf2out.c (add_comp_dir_attribute, maybe_emit_file,\n\tdwarf2out_start_source_file, dwarf2out_finish): Call\n\tremap_debug_filename.\n\t(file_table_relative_p): Do not check d->emitted_number.\n\t* toplev.c (output_file_directive): Call remap_debug_filename.\n\t* vmsdbgout.c (write_srccorr): Call remap_debug_filename.\n\t* xcoffout.c (xcoffout_source_file): Call remap_debug_filename.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r127613", "tree": {"sha": "2e4cb7ceb95c3ce97266450ff573e6d60f7ba70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4cb7ceb95c3ce97266450ff573e6d60f7ba70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8aea42ce2c691e4e891476c456f4650d3757810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8aea42ce2c691e4e891476c456f4650d3757810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8aea42ce2c691e4e891476c456f4650d3757810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8aea42ce2c691e4e891476c456f4650d3757810/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e1d712c405048f18f246c974865777971c8be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1d712c405048f18f246c974865777971c8be16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1d712c405048f18f246c974865777971c8be16"}], "stats": {"total": 284, "additions": 258, "deletions": 26}, "files": [{"sha": "f03b3ab82e40c10c8a2fda2efeba5027dbf7820f", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1,3 +1,12 @@\n+2007-08-18  Paul Brook  <paul@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.tpl (DEBUG_PREFIX_CFLAGS_FOR_TARGET): New.\n+\t(CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Include it.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (--with-debug-prefix-map): New.\n+\t* configure: Regenerate.\n+\n 2007-08-17  Richard Sandiford  <richard@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n "}, {"sha": "80b2474686a050ce555c844c34423134bc6ccfa4", "filename": "Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -366,9 +366,12 @@ COMPILER_NM_FOR_TARGET=@COMPILER_NM_FOR_TARGET@\n # CFLAGS will be just -g.  We want to ensure that TARGET libraries\n # (which we know are built with gcc) are built with optimizations so\n # prepend -O2 when setting CFLAGS_FOR_TARGET.\n-CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)\n+CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n-CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)\n+DEBUG_PREFIX_CFLAGS_FOR_TARGET = @DEBUG_PREFIX_CFLAGS_FOR_TARGET@\n+CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)\n LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates\n LDFLAGS_FOR_TARGET = "}, {"sha": "cf97961663613f18e4890e1ca002e9997795bbd3", "filename": "Makefile.tpl", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -369,9 +369,12 @@ COMPILER_NM_FOR_TARGET=@COMPILER_NM_FOR_TARGET@\n # CFLAGS will be just -g.  We want to ensure that TARGET libraries\n # (which we know are built with gcc) are built with optimizations so\n # prepend -O2 when setting CFLAGS_FOR_TARGET.\n-CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)\n+CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n-CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)\n+DEBUG_PREFIX_CFLAGS_FOR_TARGET = @DEBUG_PREFIX_CFLAGS_FOR_TARGET@\n+CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)\n LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates\n LDFLAGS_FOR_TARGET = "}, {"sha": "3df146fbd9c43f9663147c36284ae9fbfac7ba73", "filename": "config/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1,3 +1,9 @@\n+2007-08-18  Paul Brook  <paul@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* mt-gnu (CXXFLAGS_FOR_TARGET): Add\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET).\n+\n 2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* tls.m4 (GCC_CHECK_CC_TLS): New."}, {"sha": "2400fa44e55f22ef8aa9d5f228097ea1ee8da12b", "filename": "config/mt-gnu", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/config%2Fmt-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/config%2Fmt-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmt-gnu?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1 +1,2 @@\n-CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) -D_GNU_SOURCE\n+CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n+\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET) -D_GNU_SOURCE"}, {"sha": "1a37bfd6b33db51e7665291df86f972160e1bc32", "filename": "configure", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n \n ac_unique_file=\"move-if-change\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S TOPLEVEL_CONFIGURE_ARGUMENTS build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc stage1_languages SYSROOT_CFLAGS_FOR_TARGET RPATH_ENVVAR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs CC_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CFLAGS_FOR_BUILD CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S TOPLEVEL_CONFIGURE_ARGUMENTS build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc stage1_languages SYSROOT_CFLAGS_FOR_TARGET DEBUG_PREFIX_CFLAGS_FOR_TARGET RPATH_ENVVAR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs CC_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CFLAGS_FOR_BUILD CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n ac_subst_files='serialization_dependencies host_makefile_frag target_makefile_frag alphaieee_frag ospace_frag'\n \n # Initialize some variables set by options.\n@@ -965,6 +965,8 @@ Optional Packages:\n   --with-gmp-lib=PATH     specify directory for the installed GMP library\n   --with-build-sysroot=SYSROOT\n                           use sysroot as the system root during the build\n+  --with-debug-prefix-map='A=B C=D ...'\n+                             map A to B, C to D ... in debug information\n   --with-build-time-tools=PATH\n                           use given path to find target tools during the build\n   --with-datarootdir      use datarootdir as the data root directory.\n@@ -5069,6 +5071,21 @@ else\n fi;\n \n \n+\n+# Check whether --with-debug-prefix-map or --without-debug-prefix-map was given.\n+if test \"${with_debug_prefix_map+set}\" = set; then\n+  withval=\"$with_debug_prefix_map\"\n+  if test x\"$withval\" != x; then\n+     DEBUG_PREFIX_CFLAGS_FOR_TARGET=\n+     for debug_map in $withval; do\n+       DEBUG_PREFIX_CFLAGS_FOR_TARGET=\"$DEBUG_PREFIX_CFLAGS_FOR_TARGET -fdebug-prefix-map=$debug_map\"\n+     done\n+   fi\n+else\n+  DEBUG_PREFIX_CFLAGS_FOR_TARGET=\n+fi;\n+\n+\n # Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n # the named directory are copied to $(tooldir)/sys-include.\n if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then\n@@ -12723,6 +12740,7 @@ s,@gmplibs@,$gmplibs,;t t\n s,@gmpinc@,$gmpinc,;t t\n s,@stage1_languages@,$stage1_languages,;t t\n s,@SYSROOT_CFLAGS_FOR_TARGET@,$SYSROOT_CFLAGS_FOR_TARGET,;t t\n+s,@DEBUG_PREFIX_CFLAGS_FOR_TARGET@,$DEBUG_PREFIX_CFLAGS_FOR_TARGET,;t t\n s,@RPATH_ENVVAR@,$RPATH_ENVVAR,;t t\n s,@tooldir@,$tooldir,;t t\n s,@build_tooldir@,$build_tooldir,;t t"}, {"sha": "2486049cf18bd264ac1685a5ffcb4863f2ecc764", "filename": "configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1593,6 +1593,18 @@ AC_ARG_WITH([build-sysroot],\n   [SYSROOT_CFLAGS_FOR_TARGET=])\n AC_SUBST(SYSROOT_CFLAGS_FOR_TARGET)\n \n+AC_ARG_WITH([debug-prefix-map],\n+  [  --with-debug-prefix-map='A=B C=D ...'\n+                             map A to B, C to D ... in debug information],\n+  [if test x\"$withval\" != x; then\n+     DEBUG_PREFIX_CFLAGS_FOR_TARGET=\n+     for debug_map in $withval; do\n+       DEBUG_PREFIX_CFLAGS_FOR_TARGET=\"$DEBUG_PREFIX_CFLAGS_FOR_TARGET -fdebug-prefix-map=$debug_map\"\n+     done\n+   fi],\n+  [DEBUG_PREFIX_CFLAGS_FOR_TARGET=])\n+AC_SUBST(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n+\n # Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n # the named directory are copied to $(tooldir)/sys-include.\n if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then"}, {"sha": "0af10bdebb7596e9115c01140581753cad3be8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1,3 +1,30 @@\n+2007-08-18  Paul Brook  <paul@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (-fdebug-prefix-map=): New option.\n+\t* opts.c: Include debug.h.\n+\t(common_handle_option): Handle -fdebug-prefix-map.\n+\t* final.c: Include ggc.h.\n+\t(struct debug_prefix_map, debug_prefix_maps, add_debug_prefix_map,\n+\tremap_debug_filename): New.\n+\t* Makefile.in (final.o, opts.o): Update dependencies.\n+\t* debug.h (remap_debug_filename, add_debug_prefix_map): Declare.\n+\t* configure.ac: Check for assembler --debug-prefix-map support.\n+\t* configure, config.in: Regenerate.\n+\t* gcc.c (ASM_MAP): Define conditional on HAVE_AS_DEBUG_PREFIX_MAP.\n+\t(ASM_DEBUG_SPEC): Include ASM_MAP.\n+\t* doc/install.texi (--with-debug-prefix-map): Document.\n+\t* doc/invoke.texi (-fdebug-prefix-map): Document.\n+\t* dbxout.c (dbxout_init, dbxout_start_source_file,\n+\tdbxout_source_file): Call remap_debug_filename.\n+\t* dwarf2out.c (add_comp_dir_attribute, maybe_emit_file,\n+\tdwarf2out_start_source_file, dwarf2out_finish): Call\n+\tremap_debug_filename.\n+\t(file_table_relative_p): Do not check d->emitted_number.\n+\t* toplev.c (output_file_directive): Call remap_debug_filename.\n+\t* vmsdbgout.c (write_srccorr): Call remap_debug_filename.\n+\t* xcoffout.c (xcoffout_source_file): Call remap_debug_filename.\n+\n 2007-08-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* loop-invariant.c (find_invariants_to_move): Add missing macro"}, {"sha": "597e2468fcebf3516c6480f21aff1e47ea7d5ce7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -2295,7 +2295,7 @@ diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n-   $(FLAGS_H) $(PARAMS_H) tree-pass.h $(DBGCNT_H)\n+   $(FLAGS_H) $(PARAMS_H) tree-pass.h $(DBGCNT_H) debug.h\n opts-common.o : opts-common.c opts.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n@@ -2785,7 +2785,7 @@ final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) output.h hard-reg-set.h \\\n    except.h debug.h xcoffout.h toplev.h reload.h dwarf2out.h tree-pass.h \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) $(EXPR_H) $(CFGLAYOUT_H) dbxout.h \\\n-   $(TIMEVAR_H) $(CGRAPH_H) $(COVERAGE_H) $(REAL_H) $(DF_H) vecprim.h\n+   $(TIMEVAR_H) $(CGRAPH_H) $(COVERAGE_H) $(REAL_H) $(DF_H) vecprim.h $(GGC_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) toplev.h output.h reload.h \\"}, {"sha": "d9894a98844deec59815cfc235d3f9fdc40f8042", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -399,6 +399,10 @@ fdbg-cnt=\n Common RejectNegative Joined\n -fdbg-cnt=<counter>:<limit>[,<counter>:<limit>,...]    Set the debug counter limit.   \n \n+fdebug-prefix-map=\n+Common Joined RejectNegative\n+Map one directory name to another in debug information\n+\n ; Nonzero for -fdefer-pop: don't pop args after each function call\n ; instead save them up to pop many calls' args with one insns.\n fdefer-pop"}, {"sha": "42748868bf32cef238e3eb57580d7435ef575691", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -186,6 +186,12 @@\n #endif\n \n \n+/* Define if your assembler supports the --debug-prefix-map option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_DEBUG_PREFIX_MAP\n+#endif\n+\n+\n /* Define if your assembler supports DFP instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_DFP"}, {"sha": "ac5f49a6120d519058441c509fcdf8095f65d376", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -16178,6 +16178,43 @@ cat >>confdefs.h <<\\_ACEOF\n #define HAVE_AS_GSTABS_DEBUG_FLAG 1\n _ACEOF\n \n+fi\n+\n+ echo \"$as_me:$LINENO: checking assembler for --debug-prefix-map option\" >&5\n+echo $ECHO_N \"checking assembler for --debug-prefix-map option... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_debug_prefix_map_flag+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_debug_prefix_map_flag=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 19 \\) \\* 1000 + 0`\n+  then gcc_cv_as_debug_prefix_map_flag=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$insn\" > conftest.s\n+    if { ac_try='$gcc_cv_as --debug-prefix-map /a=/b -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_debug_prefix_map_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_debug_prefix_map_flag\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_debug_prefix_map_flag\" >&6\n+if test $gcc_cv_as_debug_prefix_map_flag = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_DEBUG_PREFIX_MAP 1\n+_ACEOF\n+\n fi\n fi\n "}, {"sha": "8bb9fc6b170e9a569ae6429cedcd64a0d43a090d", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -3068,6 +3068,12 @@ if test x\"$insn\" != x; then\n    fi],\n   [AC_DEFINE(HAVE_AS_GSTABS_DEBUG_FLAG, 1,\n [Define if your assembler supports the --gstabs option.])])\n+\n+ gcc_GAS_CHECK_FEATURE([--debug-prefix-map option],\n+  gcc_cv_as_debug_prefix_map_flag,\n+  [2,19,0], [--debug-prefix-map /a=/b], [$insn],,\n+  [AC_DEFINE(HAVE_AS_DEBUG_PREFIX_MAP, 1,\n+[Define if your assembler supports the --debug-prefix-map option.])])\n fi\n \n AC_CACHE_CHECK([assembler for tolerance to line number 0],"}, {"sha": "8c6a72e05ff98e180b599bf43ebdc082ce93157f", "filename": "gcc/dbxout.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -983,6 +983,7 @@ dbxout_init (const char *input_file_name)\n   char ltext_label_name[100];\n   bool used_ltext_label_name = false;\n   tree syms = lang_hooks.decls.getdecls ();\n+  const char *mapped_name;\n \n   typevec_len = 100;\n   typevec = ggc_calloc (typevec_len, sizeof typevec[0]);\n@@ -1008,6 +1009,7 @@ dbxout_init (const char *input_file_name)\n \t    cwd = \"/\";\n \t  else if (!IS_DIR_SEPARATOR (cwd[strlen (cwd) - 1]))\n \t    cwd = concat (cwd, \"/\", NULL);\n+\t  cwd = remap_debug_filename (cwd);\n \t}\n #ifdef DBX_OUTPUT_MAIN_SOURCE_DIRECTORY\n       DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (asm_out_file, cwd);\n@@ -1018,10 +1020,11 @@ dbxout_init (const char *input_file_name)\n #endif /* no DBX_OUTPUT_MAIN_SOURCE_DIRECTORY */\n     }\n \n+  mapped_name = remap_debug_filename (input_file_name);\n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILENAME\n-  DBX_OUTPUT_MAIN_SOURCE_FILENAME (asm_out_file, input_file_name);\n+  DBX_OUTPUT_MAIN_SOURCE_FILENAME (asm_out_file, mapped_name);\n #else\n-  dbxout_begin_simple_stabs_desc (input_file_name, N_SO, get_lang_number ());\n+  dbxout_begin_simple_stabs_desc (mapped_name, N_SO, get_lang_number ());\n   dbxout_stab_value_label (ltext_label_name);\n   used_ltext_label_name = true;\n #endif\n@@ -1163,7 +1166,7 @@ dbxout_start_source_file (unsigned int line ATTRIBUTE_UNUSED,\n   n->prev = NULL;\n   current_file->prev = n;\n   n->bincl_status = BINCL_PENDING;\n-  n->pending_bincl_name = filename;\n+  n->pending_bincl_name = remap_debug_filename (filename);\n   pending_bincls = 1;\n   current_file = n;\n #endif\n@@ -1229,7 +1232,7 @@ dbxout_source_file (const char *filename)\n       if (current_function_decl == NULL_TREE)\n \tswitch_to_section (text_section);\n \n-      dbxout_begin_simple_stabs (filename, N_SOL);\n+      dbxout_begin_simple_stabs (remap_debug_filename (filename), N_SOL);\n       dbxout_stab_value_internal_label (\"Ltext\", &source_label_number);\n       lastfile = filename;\n     }"}, {"sha": "d1431f5c7ad9b625c27e3febdf53cbcb95bf5803", "filename": "gcc/debug.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -167,4 +167,7 @@ extern void debug_free_queue (void);\n extern int debug_nesting;\n extern int symbol_queue_index;\n \n+const char *remap_debug_filename (const char *);\n+void add_debug_prefix_map (const char *);\n+\n #endif /* !GCC_DEBUG_H  */"}, {"sha": "bf017761d0ee3e2984fab4d34ccc3d9410c5d425", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1345,6 +1345,11 @@ GCC, you can explicitly specify the directory where they are installed\n shorthand assumptions are not correct, you can use the explicit\n include and lib options directly.\n \n+@item --with-debug-prefix-map=@var{map}\n+Convert source directory names using @option{-fdebug-prefix-map} when\n+building runtime libraries.  @samp{@var{map}} is a space-separated\n+list of maps of the form @samp{@var{old}=@var{new}}.\n+\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "3815e593e0585b31c028674d02c4765ebb9bbe9e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -303,6 +303,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftest-coverage  -ftime-report -fvar-tracking @gol\n -g  -g@var{level}  -gcoff -gdwarf-2 @gol\n -ggdb  -gstabs  -gstabs+  -gvms  -gxcoff  -gxcoff+ @gol\n+-fdebug-prefix-map=@var{old}=@var{new} @gol\n -femit-struct-debug-baseonly -femit-struct-debug-reduced @gol\n -femit-struct-debug-detailed@r{[}=@var{spec-list}@r{]} @gol\n -p  -pg  -print-file-name=@var{library}  -print-libgcc-file-name @gol\n@@ -4144,6 +4145,11 @@ The default is @samp{-femit-struct-debug-detailed=all}.\n \n This option works only with DWARF 2.\n \n+@item -fdebug-prefix-map=@var{old}=@var{new}\n+@opindex fdebug-prefix-map\n+When compiling files in directory @file{@var{old}}, record debugging\n+information describing them as in @file{@var{new}} instead.\n+\n @cindex @command{prof}\n @item -p\n @opindex p"}, {"sha": "bfeb5447c79d35dc5aa44dd37426b705a443341f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -10906,7 +10906,7 @@ add_comp_dir_attribute (dw_die_ref die)\n {\n   const char *wd = get_src_pwd ();\n   if (wd != NULL)\n-    add_AT_string (die, DW_AT_comp_dir, wd);\n+    add_AT_string (die, DW_AT_comp_dir, remap_debug_filename (wd));\n }\n \n /* Given a tree node describing an array bound (either lower or upper) output\n@@ -14000,7 +14000,8 @@ maybe_emit_file (struct dwarf_file_data * fd)\n       if (DWARF2_ASM_LINE_DEBUG_INFO)\n \t{\n \t  fprintf (asm_out_file, \"\\t.file %u \", fd->emitted_number);\n-\t  output_quoted_string (asm_out_file, fd->filename);\n+\t  output_quoted_string (asm_out_file,\n+\t\t\t\tremap_debug_filename (fd->filename));\n \t  fputc ('\\n', asm_out_file);\n \t}\n     }\n@@ -14167,7 +14168,7 @@ dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n       dw_die_ref bincl_die;\n \n       bincl_die = new_die (DW_TAG_GNU_BINCL, comp_unit_die, NULL);\n-      add_AT_string (bincl_die, DW_AT_name, filename);\n+      add_AT_string (bincl_die, DW_AT_name, remap_debug_filename (filename));\n     }\n \n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n@@ -14626,7 +14627,7 @@ file_table_relative_p (void ** slot, void *param)\n {\n   bool *p = param;\n   struct dwarf_file_data *d = *slot;\n-  if (d->emitted_number && !IS_ABSOLUTE_PATH (d->filename))\n+  if (!IS_ABSOLUTE_PATH (d->filename))\n     {\n       *p = true;\n       return 0;\n@@ -14645,7 +14646,7 @@ dwarf2out_finish (const char *filename)\n \n   /* Add the name for the main input file now.  We delayed this from\n      dwarf2out_init to avoid complications with PCH.  */\n-  add_name_attribute (comp_unit_die, filename);\n+  add_name_attribute (comp_unit_die, remap_debug_filename (filename));\n   if (!IS_ABSOLUTE_PATH (filename))\n     add_comp_dir_attribute (comp_unit_die);\n   else if (get_AT (comp_unit_die, DW_AT_comp_dir) == NULL)"}, {"sha": "008a773ca23b442d5d234ec51daceb11bb63462b", "filename": "gcc/final.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -77,6 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"df.h\"\n #include \"vecprim.h\"\n+#include \"ggc.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data\n@@ -1350,6 +1351,72 @@ asm_insn_count (rtx body)\n }\n #endif\n \f\n+/* ??? This is probably the wrong place for these.  */\n+/* Structure recording the mapping from source file and directory\n+   names at compile time to those to be embedded in debug\n+   information.  */\n+typedef struct debug_prefix_map\n+{\n+  const char *old_prefix;\n+  const char *new_prefix;\n+  size_t old_len;\n+  size_t new_len;\n+  struct debug_prefix_map *next;\n+} debug_prefix_map;\n+\n+/* Linked list of such structures.  */\n+debug_prefix_map *debug_prefix_maps;\n+\n+\n+/* Record a debug file prefix mapping.  ARG is the argument to\n+   -fdebug-prefix-map and must be of the form OLD=NEW.  */\n+\n+void\n+add_debug_prefix_map (const char *arg)\n+{\n+  debug_prefix_map *map;\n+  const char *p;\n+\n+  p = strchr (arg, '=');\n+  if (!p)\n+    {\n+      error (\"invalid argument %qs to -fdebug-prefix-map\", arg);\n+      return;\n+    }\n+  map = XNEW (debug_prefix_map);\n+  map->old_prefix = ggc_alloc_string (arg, p - arg);\n+  map->old_len = p - arg;\n+  p++;\n+  map->new_prefix = ggc_strdup (p);\n+  map->new_len = strlen (p);\n+  map->next = debug_prefix_maps;\n+  debug_prefix_maps = map;\n+}\n+\n+/* Perform user-specified mapping of debug filename prefixes.  Return\n+   the new name corresponding to FILENAME.  */\n+\n+const char *\n+remap_debug_filename (const char *filename)\n+{\n+  debug_prefix_map *map;\n+  char *s;\n+  const char *name;\n+  size_t name_len;\n+\n+  for (map = debug_prefix_maps; map; map = map->next)\n+    if (strncmp (filename, map->old_prefix, map->old_len) == 0)\n+      break;\n+  if (!map)\n+    return filename;\n+  name = filename + map->old_len;\n+  name_len = strlen (name) + 1;\n+  s = (char *) alloca (name_len + map->new_len);\n+  memcpy (s, map->new_prefix, map->new_len);\n+  memcpy (s + map->new_len, name, name_len);\n+  return ggc_strdup (s);\n+}\n+\f\n /* Output assembler code for the start of a function,\n    and initialize some of the variables in this file\n    for the new function.  The label for the function and associated"}, {"sha": "9546ff9c703e0df8998e6c388ba71b3dcb54189c", "filename": "gcc/gcc.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -655,21 +655,27 @@ proper position among the other output files.  */\n #define LINKER_NAME \"collect2\"\n #endif\n \n+#ifdef HAVE_AS_DEBUG_PREFIX_MAP\n+#define ASM_MAP \" %{fdebug-prefix-map=*:--debug-prefix-map %*}\"\n+#else\n+#define ASM_MAP \"\"\n+#endif\n+\n /* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n    to the assembler.  */\n #ifndef ASM_DEBUG_SPEC\n # if defined(DBX_DEBUGGING_INFO) && defined(DWARF2_DEBUGGING_INFO) \\\n      && defined(HAVE_AS_GDWARF2_DEBUG_FLAG) && defined(HAVE_AS_GSTABS_DEBUG_FLAG)\n-#  define ASM_DEBUG_SPEC\t\t\t\t\t\\\n-      (PREFERRED_DEBUGGING_TYPE == DBX_DEBUG\t\t\t\\\n-       ? \"%{gdwarf-2*:--gdwarf2}%{!gdwarf-2*:%{g*:--gstabs}}\"\t\\\n-       : \"%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}\")\n+#  define ASM_DEBUG_SPEC\t\t\t\t\t\t\\\n+      (PREFERRED_DEBUGGING_TYPE == DBX_DEBUG\t\t\t\t\\\n+       ? \"%{gdwarf-2*:--gdwarf2}%{!gdwarf-2*:%{g*:--gstabs}}\" ASM_MAP\t\\\n+       : \"%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}\" ASM_MAP)\n # else\n #  if defined(DBX_DEBUGGING_INFO) && defined(HAVE_AS_GSTABS_DEBUG_FLAG)\n-#   define ASM_DEBUG_SPEC \"%{g*:--gstabs}\"\n+#   define ASM_DEBUG_SPEC \"%{g*:--gstabs}\" ASM_MAP\n #  endif\n #  if defined(DWARF2_DEBUGGING_INFO) && defined(HAVE_AS_GDWARF2_DEBUG_FLAG)\n-#   define ASM_DEBUG_SPEC \"%{g*:--gdwarf2}\"\n+#   define ASM_DEBUG_SPEC \"%{g*:--gdwarf2}\" ASM_MAP\n #  endif\n # endif\n #endif"}, {"sha": "dc5a26d24830bd0b02133cb71397cd5a520d4601", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n+#include \"debug.h\"\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n unsigned HOST_WIDE_INT g_switch_value;\n@@ -1531,6 +1532,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       dbg_cnt_list_all_counters ();\n       break;\n \n+    case OPT_fdebug_prefix_map_:\n+      add_debug_prefix_map (arg);\n+      break;\n+\n     case OPT_fdiagnostics_show_location_:\n       if (!strcmp (arg, \"once\"))\n \tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;"}, {"sha": "440b4474e92a37df4deb94ca2eef566a480051dd", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -694,6 +694,8 @@ output_file_directive (FILE *asm_file, const char *input_name)\n \n   if (input_name == NULL)\n     input_name = \"<stdin>\";\n+  else\n+    input_name = remap_debug_filename (input_name);\n \n   len = strlen (input_name);\n   na = input_name + len;"}, {"sha": "e865eb14297df93e7efcb9ef931f8fc176940d59", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -1150,7 +1150,8 @@ write_srccorr (int fileid, dst_file_info_entry file_info_entry,\n     (src_command.dst_a_src_cmd_fields.dst_a_src_decl_src.dst_b_src_df_filename,\n      \"source_corr (filename length)\", dosizeonly);\n \n-  totsize += write_debug_string (file_info_entry.file_name,\n+  totsize += write_debug_string (remap_debug_filename (\n+\t\t\t\t    file_info_entry.file_name),\n \t\t\t\t \"source file name\", dosizeonly);\n   totsize += write_debug_data1 (src_cmdtrlr.dst_b_src_df_libmodname,\n \t\t\t\t\"source_corr (libmodname)\", dosizeonly);"}, {"sha": "d1dc5a3a4dbdedca0815baaf8fbabf53588843c9", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8aea42ce2c691e4e891476c456f4650d3757810/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=c8aea42ce2c691e4e891476c456f4650d3757810", "patch": "@@ -300,15 +300,16 @@ xcoffout_source_file (FILE *file, const char *filename, int inline_p)\n       if (xcoff_current_include_file)\n \t{\n \t  fprintf (file, \"\\t.ei\\t\");\n-\t  output_quoted_string (file, xcoff_current_include_file);\n+\t  output_quoted_string (file,\n+\t      remap_debug_filename (xcoff_current_include_file));\n \t  fprintf (file, \"\\n\");\n \t  xcoff_current_include_file = NULL;\n \t}\n       xcoff_inlining = inline_p;\n       if (strcmp (main_input_filename, filename) || inline_p)\n \t{\n \t  fprintf (file, \"\\t.bi\\t\");\n-\t  output_quoted_string (file, filename);\n+\t  output_quoted_string (file, remap_debug_filename (filename));\n \t  fprintf (file, \"\\n\");\n \t  xcoff_current_include_file = filename;\n \t}"}]}