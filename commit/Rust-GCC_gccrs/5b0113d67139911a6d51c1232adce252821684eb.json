{"sha": "5b0113d67139911a6d51c1232adce252821684eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwMTEzZDY3MTM5OTExYTZkNTFjMTIzMmFkY2UyNTI4MjE2ODRlYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-03-30T09:26:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:26:00Z"}, "message": "lib-xref.adb, [...]: Minor reformatting & code reorganization.\n\n2012-03-30  Robert Dewar  <dewar@adacore.com>\n\n\t* lib-xref.adb, lib-xref-alfa.adb: Minor reformatting & code\n\treorganization.\n\nFrom-SVN: r186003", "tree": {"sha": "31ef6fc3cb5f5e200e92e502f1ed6be9382e2712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ef6fc3cb5f5e200e92e502f1ed6be9382e2712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b0113d67139911a6d51c1232adce252821684eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0113d67139911a6d51c1232adce252821684eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0113d67139911a6d51c1232adce252821684eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0113d67139911a6d51c1232adce252821684eb/comments", "author": null, "committer": null, "parents": [{"sha": "23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c"}], "stats": {"total": 92, "additions": 42, "deletions": 50}, "files": [{"sha": "f342fa8dc37450b36284d3ff54fd5e58d4a98fd3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b0113d67139911a6d51c1232adce252821684eb", "patch": "@@ -1,3 +1,8 @@\n+2012-03-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-xref.adb, lib-xref-alfa.adb: Minor reformatting & code\n+\treorganization.\n+\n 2012-03-30  Yannick Moy  <moy@adacore.com>\n \n \t* lib-xref-alfa.adb (Generate_Dereference): Use Get_Code_Unit"}, {"sha": "5081dfd716a5fdf996dcbfaf30afa7b0b592246e", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=5b0113d67139911a6d51c1232adce252821684eb", "patch": "@@ -52,6 +52,7 @@ package body Alfa is\n       others             => False);\n \n    --  True for each reference type used in Alfa\n+\n    Alfa_References : constant array (Character) of Boolean :=\n      ('m' => True,\n       'r' => True,\n@@ -79,6 +80,8 @@ package body Alfa is\n    --  dereferences, that are output as reads/writes to the special variable\n    --  \"Heap\". These references are added to the regular references when\n    --  computing Alfa cross-references.\n+   --\n+   --  Why is Alloc.Xrefs_* used here ??? seems clearly wrong.\n \n    -----------------------\n    -- Local Subprograms --\n@@ -121,8 +124,7 @@ package body Alfa is\n      (N            : Node_Id;\n       Process      : Node_Processing;\n       Inside_Stubs : Boolean);\n-   --  Traverse the corresponding constructs, calling Process on all\n-   --  declarations.\n+   --  Traverse corresponding construct, calling Process on all declarations\n \n    -------------------\n    -- Add_Alfa_File --\n@@ -159,13 +161,11 @@ package body Alfa is\n \n       declare\n          Scope_Id : Int;\n-\n       begin\n          Scope_Id := 1;\n          for Index in From .. Alfa_Scope_Table.Last loop\n             declare\n                S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n-\n             begin\n                S.Scope_Num := Scope_Id;\n                S.File_Num  := D;\n@@ -184,7 +184,6 @@ package body Alfa is\n          for Index in From .. Alfa_Scope_Table.Last loop\n             declare\n                S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n-\n             begin\n                if S.Scope_Num /= 0 then\n                   Alfa_Scope_Table.Table (Scope_Id) := S;\n@@ -339,10 +338,16 @@ package body Alfa is\n \n       package Sorting is new GNAT.Heap_Sort_G (Move, Lt);\n \n+      --  Comment required for this package ???\n+      --  Why is an internal package used here at all ???\n+\n       package Scopes is\n          No_Scope : constant Nat := 0;\n          function Get_Scope_Num (N : Entity_Id) return Nat;\n+         --  Comment required ???\n+\n          procedure Set_Scope_Num (N : Entity_Id; Num : Nat);\n+         --  Comment required ???\n       end Scopes;\n \n       ------------\n@@ -390,6 +395,7 @@ package body Alfa is\n       --  not suitable for local cross-references.\n \n       Nrefs_Add : constant Nat := Drefs.Last;\n+      --  Comment needed ???\n \n       Rnums : array (0 .. Nrefs + Nrefs_Add) of Nat;\n       --  This array contains numbers of references in the Xrefs table. This\n@@ -411,17 +417,13 @@ package body Alfa is\n       ---------------------\n \n       function Get_Entity_Type (E : Entity_Id) return Character is\n-         C : Character;\n-\n       begin\n          case Ekind (E) is\n-            when E_Out_Parameter    => C := '<';\n-            when E_In_Out_Parameter => C := '=';\n-            when E_In_Parameter     => C := '>';\n-            when others             => C := '*';\n+            when E_Out_Parameter    => return '<';\n+            when E_In_Out_Parameter => return '=';\n+            when E_In_Parameter     => return '>';\n+            when others             => return '*';\n          end case;\n-\n-         return C;\n       end Get_Entity_Type;\n \n       -----------------------\n@@ -553,7 +555,7 @@ package body Alfa is\n \n          if T1.Ent_Scope_File /= T2.Ent_Scope_File then\n             return Dependency_Num (T1.Ent_Scope_File) <\n-              Dependency_Num (T2.Ent_Scope_File);\n+                   Dependency_Num (T2.Ent_Scope_File);\n \n          --  Second test: within same unit, sort by location of the scope of\n          --  the entity definition.\n@@ -562,7 +564,7 @@ package body Alfa is\n                Get_Scope_Num (T2.Key.Ent_Scope)\n          then\n             return Get_Scope_Num (T1.Key.Ent_Scope) <\n-              Get_Scope_Num (T2.Key.Ent_Scope);\n+                   Get_Scope_Num (T2.Key.Ent_Scope);\n \n          --  Third test: within same unit and scope, sort by location of\n          --  entity definition.\n@@ -668,7 +670,6 @@ package body Alfa is\n       for Index in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n          declare\n             S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n-\n          begin\n             Set_Scope_Num (S.Scope_Entity, S.Scope_Num);\n          end;\n@@ -706,8 +707,7 @@ package body Alfa is\n               and then not Is_Global_Constant (Ref.Ent)\n               and then Is_Alfa_Reference (Ref.Ent, Ref.Typ)\n \n-              --  Discard references from unknown scopes, such as generic\n-              --  scopes.\n+              --  Discard references from unknown scopes, e.g. generic scopes\n \n               and then Get_Scope_Num (Ref.Ent_Scope) /= No_Scope\n               and then Get_Scope_Num (Ref.Ref_Scope) /= No_Scope\n@@ -757,8 +757,7 @@ package body Alfa is\n \n          begin\n             if Ref.Loc /= Loc\n-              or else (Prev_Typ = 'm'\n-                        and then Ref.Typ = 'r')\n+              or else (Prev_Typ = 'm' and then Ref.Typ = 'r')\n             then\n                Loc           := Ref.Loc;\n                Prev_Typ      := Ref.Typ;\n@@ -791,8 +790,7 @@ package body Alfa is\n             --  construction of the scope table, or an erroneous scope for the\n             --  current cross-reference.\n \n-            pragma Assert\n-              (Is_Future_Scope_Entity (Ref.Ent_Scope, Scope_Id));\n+            pragma Assert (Is_Future_Scope_Entity (Ref.Ent_Scope, Scope_Id));\n \n             --  Update the range of cross references to which the current scope\n             --  refers to. This may be the empty range only for the first scope\n@@ -898,8 +896,7 @@ package body Alfa is\n                                Entity_Hash_Table.Get (Spec_Entity);\n \n             begin\n-               --  Spec of generic may be missing, in which case Spec_Scope is\n-               --  zero.\n+               --  Generic spec may be missing in which case Spec_Scope is zero\n \n                if Spec_Entity /= Srec.Scope_Entity\n                  and then Spec_Scope /= 0\n@@ -999,7 +996,7 @@ package body Alfa is\n          Result := Defining_Identifier (Result);\n       end if;\n \n-      --  Do no return a scope without a proper location\n+      --  Do not return a scope without a proper location\n \n       if Present (Result)\n         and then Sloc (Result) = No_Location\n@@ -1399,7 +1396,8 @@ package body Alfa is\n    procedure Traverse_Subprogram_Body\n      (N            : Node_Id;\n       Process      : Node_Processing;\n-      Inside_Stubs : Boolean) is\n+      Inside_Stubs : Boolean)\n+   is\n    begin\n       Traverse_Declarations_Or_Statements\n         (Declarations (N), Process, Inside_Stubs);"}, {"sha": "af5a69eec32dc39692d7e1b914aa2ab6d4c0c81f", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0113d67139911a6d51c1232adce252821684eb/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=5b0113d67139911a6d51c1232adce252821684eb", "patch": "@@ -639,9 +639,7 @@ package body Lib.Xref is\n            or else\n              (Alfa_Mode\n                 and then In_Extended_Main_Code_Unit (N)\n-                and then (Typ = 'm'\n-                            or else Typ = 'r'\n-                            or else Typ = 's'))\n+                and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n          then\n             null;\n          else\n@@ -893,34 +891,25 @@ package body Lib.Xref is\n \n          and then\n            (Instantiation_Location (Sloc (N)) = No_Location\n-              or else Typ = 'i'\n-              or else Alfa_Mode)\n+             or else Typ = 'i'\n+             or else Alfa_Mode)\n \n-         --  Ignore dummy references\n+        --  Ignore dummy references\n \n         and then Typ /= ' '\n       then\n-         if Nkind (N) = N_Identifier\n-              or else\n-            Nkind (N) = N_Defining_Identifier\n-              or else\n-            Nkind (N) in N_Op\n-              or else\n-            Nkind (N) = N_Defining_Operator_Symbol\n-              or else\n-            Nkind (N) = N_Operator_Symbol\n-              or else\n-            (Nkind (N) = N_Character_Literal\n-              and then Sloc (Entity (N)) /= Standard_Location)\n-              or else\n-            Nkind (N) = N_Defining_Character_Literal\n+         if Nkind_In (N, N_Identifier,\n+                         N_Defining_Identifier,\n+                         N_Defining_Operator_Symbol,\n+                         N_Operator_Symbol,\n+                         N_Defining_Character_Literal)\n+           or else Nkind (N) in N_Op\n+           or else (Nkind (N) = N_Character_Literal\n+                     and then Sloc (Entity (N)) /= Standard_Location)\n          then\n             Nod := N;\n \n-         elsif Nkind (N) = N_Expanded_Name\n-                 or else\n-               Nkind (N) = N_Selected_Component\n-         then\n+         elsif Nkind_In (N, N_Expanded_Name, N_Selected_Component) then\n             Nod := Selector_Name (N);\n \n          else"}]}