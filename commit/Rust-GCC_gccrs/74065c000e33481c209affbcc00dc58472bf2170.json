{"sha": "74065c000e33481c209affbcc00dc58472bf2170", "node_id": "C_kwDOANBUbNoAKDc0MDY1YzAwMGUzMzQ4MWMyMDlhZmZiY2MwMGRjNTg0NzJiZjIxNzA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-14T13:00:16Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:34Z"}, "message": "gccrs: Refactor TraitResolver to not require a visitor\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-trait-resolve.cc (TraitResolver::TraitResolver): Do not nullptr init\n\t`resolved_trait_reference` anymore.\n\t(TraitResolver::resolve_path): Simplify function and rename to...\n\t(TraitResolver::resolve_path_to_trait): ...this.\n\t(TraitResolver::lookup_path): Use new interface.\n\t* typecheck/rust-hir-trait-resolve.h (class TraitResolver): Do not inherit `HIRFullVisitor`\n\tclass anymore.", "tree": {"sha": "70622fe4702dc6c00acb7605642ae40ce2490acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70622fe4702dc6c00acb7605642ae40ce2490acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74065c000e33481c209affbcc00dc58472bf2170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74065c000e33481c209affbcc00dc58472bf2170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74065c000e33481c209affbcc00dc58472bf2170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74065c000e33481c209affbcc00dc58472bf2170/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173f98ae49d816178d8fa5b627c62aade9547d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f98ae49d816178d8fa5b627c62aade9547d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173f98ae49d816178d8fa5b627c62aade9547d04"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "1b0bcaac79da98ac669627ef8f5748ea9a692775", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74065c000e33481c209affbcc00dc58472bf2170/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74065c000e33481c209affbcc00dc58472bf2170/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=74065c000e33481c209affbcc00dc58472bf2170", "patch": "@@ -91,33 +91,42 @@ TraitResolver::Lookup (HIR::TypePath &path)\n   return resolver.lookup_path (path);\n }\n \n-TraitResolver::TraitResolver ()\n-  : TypeCheckBase (), resolved_trait_reference (nullptr)\n-{}\n+TraitResolver::TraitResolver () : TypeCheckBase () {}\n \n-TraitReference *\n-TraitResolver::resolve_path (HIR::TypePath &path)\n+bool\n+TraitResolver::resolve_path_to_trait (const HIR::TypePath &path,\n+\t\t\t\t      HIR::Trait **resolved) const\n {\n   NodeId ref;\n   if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t       &ref))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n-      return &TraitReference::error_node ();\n+      return false;\n     }\n \n   HirId hir_node = UNKNOWN_HIRID;\n   if (!mappings->lookup_node_to_hir (ref, &hir_node))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n-      return &TraitReference::error_node ();\n+      return false;\n     }\n \n   HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n-\n   rust_assert (resolved_item != nullptr);\n-  resolved_item->accept_vis (*this);\n-  rust_assert (resolved_trait_reference != nullptr);\n+  rust_assert (resolved_item->get_item_kind () == HIR::Item::ItemKind::Trait);\n+  *resolved = static_cast<HIR::Trait *> (resolved_item);\n+\n+  return true;\n+}\n+\n+TraitReference *\n+TraitResolver::resolve_path (HIR::TypePath &path)\n+{\n+  HIR::Trait *resolved_trait_reference;\n+  bool ok = resolve_path_to_trait (path, &resolved_trait_reference);\n+  if (!ok)\n+    return &TraitReference::error_node ();\n \n   return resolve_trait (resolved_trait_reference);\n }\n@@ -237,26 +246,10 @@ TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n TraitReference *\n TraitResolver::lookup_path (HIR::TypePath &path)\n {\n-  NodeId ref;\n-  if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n-\t\t\t\t       &ref))\n-    {\n-      rust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n-      return &TraitReference::error_node ();\n-    }\n-\n-  HirId hir_node = UNKNOWN_HIRID;\n-  if (!mappings->lookup_node_to_hir (ref, &hir_node))\n-    {\n-      rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n-      return &TraitReference::error_node ();\n-    }\n-\n-  HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n-\n-  rust_assert (resolved_item != nullptr);\n-  resolved_item->accept_vis (*this);\n-  rust_assert (resolved_trait_reference != nullptr);\n+  HIR::Trait *resolved_trait_reference;\n+  bool ok = resolve_path_to_trait (path, &resolved_trait_reference);\n+  if (!ok)\n+    return &TraitReference::error_node ();\n \n   TraitReference *tref = &TraitReference::error_node ();\n   if (context->lookup_trait_reference ("}, {"sha": "ca23d48c3dd2cfa02d7e09f00e11922eaf2c6593", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74065c000e33481c209affbcc00dc58472bf2170/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74065c000e33481c209affbcc00dc58472bf2170/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=74065c000e33481c209affbcc00dc58472bf2170", "patch": "@@ -55,10 +55,8 @@ class ResolveTraitItemToRef : public TypeCheckBase,\n   std::vector<TyTy::SubstitutionParamMapping> substitutions;\n };\n \n-class TraitResolver : public TypeCheckBase, private HIR::HIRFullVisitorBase\n+class TraitResolver : public TypeCheckBase\n {\n-  using HIR::HIRFullVisitorBase::visit;\n-\n public:\n   static TraitReference *Resolve (HIR::TypePath &path);\n \n@@ -75,10 +73,8 @@ class TraitResolver : public TypeCheckBase, private HIR::HIRFullVisitorBase\n \n   TraitReference *lookup_path (HIR::TypePath &path);\n \n-  HIR::Trait *resolved_trait_reference;\n-\n-public:\n-  void visit (HIR::Trait &trait) override { resolved_trait_reference = &trait; }\n+  bool resolve_path_to_trait (const HIR::TypePath &path,\n+\t\t\t      HIR::Trait **resolved) const;\n };\n \n } // namespace Resolver"}]}