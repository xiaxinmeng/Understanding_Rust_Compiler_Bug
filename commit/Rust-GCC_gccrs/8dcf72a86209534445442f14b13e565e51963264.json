{"sha": "8dcf72a86209534445442f14b13e565e51963264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjZjcyYTg2MjA5NTM0NDQ1NDQyZjE0YjEzZTU2NWU1MTk2MzI2NA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-11-22T16:13:00Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-11-22T16:13:00Z"}, "message": "line-map.h (linemap_dump): Declare.\n\n\t* include/line-map.h (linemap_dump): Declare.\n\t(line_table_dump): Declare.\n\t* line-map.c (linemap_dump): New.\n\t(line_table_dump): New.\n\nFrom-SVN: r181625", "tree": {"sha": "d6a2a2cc3ba40550db6147ea6c6ac40a98129901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a2a2cc3ba40550db6147ea6c6ac40a98129901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dcf72a86209534445442f14b13e565e51963264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dcf72a86209534445442f14b13e565e51963264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dcf72a86209534445442f14b13e565e51963264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dcf72a86209534445442f14b13e565e51963264/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a262bafd143b42531b09013547df19ef3dfba95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a262bafd143b42531b09013547df19ef3dfba95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a262bafd143b42531b09013547df19ef3dfba95"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "1df9e0802687d8bf7276a6a631d47d24510871a9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dcf72a86209534445442f14b13e565e51963264/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dcf72a86209534445442f14b13e565e51963264/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8dcf72a86209534445442f14b13e565e51963264", "patch": "@@ -1,3 +1,10 @@\n+2011-11-22   Diego Novillo  <dnovillo@google.com>\n+\n+\t* include/line-map.h (linemap_dump): Declare.\n+\t(line_table_dump): Declare.\n+\t* line-map.c (linemap_dump): New.\n+\t(line_table_dump): New.\n+\n 2011-11-21  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/50958"}, {"sha": "4e30742596caa63859a12d6be124571e086ca01e", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dcf72a86209534445442f14b13e565e51963264/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dcf72a86209534445442f14b13e565e51963264/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=8dcf72a86209534445442f14b13e565e51963264", "patch": "@@ -705,4 +705,14 @@ void linemap_get_statistics (struct line_maps *, struct linemap_stats *);\n    stream STREAM. SET is the line map set LOC comes from.  */\n void linemap_dump_location (struct line_maps *, source_location, FILE *);\n \n+/* Dump line map at index IX in line table SET to STREAM.  If STREAM\n+   is NULL, use stderr.  IS_MACRO is true if the caller wants to\n+   dump a macro map, false otherwise.  */\n+void linemap_dump (FILE *, struct line_maps *, unsigned, bool);\n+\n+/* Dump line table SET to STREAM.  If STREAM is NULL, stderr is used.\n+   NUM_ORDINARY specifies how many ordinary maps to dump.  NUM_MACRO\n+   specifies how many macro maps to dump.  */\n+void line_table_dump (FILE *, struct line_maps *, unsigned int, unsigned int);\n+\n #endif /* !LIBCPP_LINE_MAP_H  */"}, {"sha": "d7752bb4e61c0b65d93c9d60ea4ec534215cc6f7", "filename": "libcpp/line-map.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dcf72a86209534445442f14b13e565e51963264/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dcf72a86209534445442f14b13e565e51963264/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=8dcf72a86209534445442f14b13e565e51963264", "patch": "@@ -1153,6 +1153,57 @@ linemap_expand_location (struct line_maps *set,\n   return xloc;\n }\n \n+\n+/* Dump line map at index IX in line table SET to STREAM.  If STREAM\n+   is NULL, use stderr.  IS_MACRO is true if the caller wants to\n+   dump a macro map, false otherwise.  */\n+\n+void\n+linemap_dump (FILE *stream, struct line_maps *set, unsigned ix, bool is_macro)\n+{\n+  const char *lc_reasons_v[LC_ENTER_MACRO + 1]\n+      = { \"LC_ENTER\", \"LC_LEAVE\", \"LC_RENAME\", \"LC_RENAME_VERBATIM\",\n+\t  \"LC_ENTER_MACRO\" };\n+  const char *reason;\n+  struct line_map *map;\n+\n+  if (stream == NULL)\n+    stream = stderr;\n+\n+  if (!is_macro)\n+    map = LINEMAPS_ORDINARY_MAP_AT (set, ix);\n+  else\n+    map = LINEMAPS_MACRO_MAP_AT (set, ix);\n+\n+  reason = (map->reason <= LC_ENTER_MACRO) ? lc_reasons_v[map->reason] : \"???\";\n+\n+  fprintf (stream, \"Map #%u [%p] - LOC: %u - REASON: %s - SYSP: %s\\n\",\n+\t   ix, (void *) map, map->start_location, reason,\n+\t   (!is_macro && ORDINARY_MAP_IN_SYSTEM_HEADER_P (map)) ? \"yes\" : \"no\");\n+  if (!is_macro)\n+    {\n+      unsigned includer_ix;\n+      struct line_map *includer_map;\n+\n+      includer_ix = ORDINARY_MAP_INCLUDER_FILE_INDEX (map);\n+      includer_map = includer_ix < LINEMAPS_ORDINARY_USED (set)\n+\t\t     ? LINEMAPS_ORDINARY_MAP_AT (set, includer_ix)\n+\t\t     : NULL;\n+\n+      fprintf (stream, \"File: %s:%d\\n\", ORDINARY_MAP_FILE_NAME (map),\n+\t       ORDINARY_MAP_STARTING_LINE_NUMBER (map));\n+      fprintf (stream, \"Included from: [%d] %s\\n\", includer_ix,\n+\t       includer_map ? ORDINARY_MAP_FILE_NAME (includer_map) : \"None\");\n+    }\n+  else\n+    fprintf (stream, \"Macro: %s (%u tokens)\\n\",\n+\t     linemap_map_get_macro_name (map),\n+\t     MACRO_MAP_NUM_MACRO_TOKENS (map));\n+\n+  fprintf (stream, \"\\n\");\n+}\n+\n+\n /* Dump debugging information about source location LOC into the file\n    stream STREAM. SET is the line map set LOC comes from.  */\n \n@@ -1254,3 +1305,42 @@ linemap_get_statistics (struct line_maps *set,\n   s->duplicated_macro_maps_locations_size =\n     duplicated_macro_maps_locations_size;\n }\n+\n+\n+/* Dump line table SET to STREAM.  If STREAM is NULL, stderr is used.\n+   NUM_ORDINARY specifies how many ordinary maps to dump.  NUM_MACRO\n+   specifies how many macro maps to dump.  */\n+\n+void\n+line_table_dump (FILE *stream, struct line_maps *set, unsigned int num_ordinary,\n+\t\t unsigned int num_macro)\n+{\n+  unsigned int i;\n+\n+  if (set == NULL)\n+    return;\n+\n+  if (stream == NULL)\n+    stream = stderr;\n+\n+  fprintf (stream, \"# of ordinary maps:  %d\\n\", LINEMAPS_ORDINARY_USED (set));\n+  fprintf (stream, \"# of macro maps:     %d\\n\", LINEMAPS_MACRO_USED (set));\n+  fprintf (stream, \"Include stack depth: %d\\n\", set->depth);\n+  fprintf (stream, \"Highest location:    %u\\n\", set->highest_location);\n+\n+  if (num_ordinary)\n+    {\n+      fprintf (stream, \"\\nOrdinary line maps\\n\");\n+      for (i = 0; i < num_ordinary && i < LINEMAPS_ORDINARY_USED (set); i++)\n+\tlinemap_dump (stream, set, i, false);\n+      fprintf (stream, \"\\n\");\n+    }\n+\n+  if (num_macro)\n+    {\n+      fprintf (stream, \"\\nMacro line maps\\n\");\n+      for (i = 0; i < num_macro && i < LINEMAPS_MACRO_USED (set); i++)\n+\tlinemap_dump (stream, set, i, true);\n+      fprintf (stream, \"\\n\");\n+    }\n+}"}]}