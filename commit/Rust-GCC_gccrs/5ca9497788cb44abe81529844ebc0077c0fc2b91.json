{"sha": "5ca9497788cb44abe81529844ebc0077c0fc2b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhOTQ5Nzc4OGNiNDRhYmU4MTUyOTg0NGViYzAwNzdjMGZjMmI5MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-10-21T20:27:09Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-10-21T20:27:09Z"}, "message": "i386: Enable AVX512 memory broadcast for FNMADD\n\nMany AVX512 vector operations can broadcast from a scalar memory source.\nThis patch enables memory broadcast for FNMADD operations.  In order to\nsupport AVX512 memory broadcast for FNMADD, FNMADD builtin functions are\nalso added, instead of passing the negated value to FMA builtin functions.\n\ngcc/\n\n\tPR target/72782\n\t* config/i386/avx512fintrin.h (_mm512_fnmadd_round_pd): Use\n\t__builtin_ia32_vfnmaddpd512_mask.\n\t(_mm512_mask_fnmadd_round_pd): Likewise.\n\t(_mm512_fnmadd_pd): Likewise.\n\t(_mm512_mask_fnmadd_pd): Likewise.\n\t(_mm512_maskz_fnmadd_round_pd): Use\n\t__builtin_ia32_vfnmaddpd512_maskz.\n\t(_mm512_maskz_fnmadd_pd): Likewise.\n\t(_mm512_fnmadd_round_ps): Use __builtin_ia32_vfnmaddps512_mask.\n\t(_mm512_mask_fnmadd_round_ps): Likewise.\n\t(_mm512_fnmadd_ps): Likewise.\n\t(_mm512_mask_fnmadd_ps): Likewise.\n\t(_mm512_maskz_fnmadd_round_ps): Use\n\t__builtin_ia32_vfnmaddps512_maskz.\n\t(_mm512_maskz_fnmadd_ps): Likewise.\n\t* config/i386/avx512vlintrin.h (_mm256_mask_fnmadd_pd): Use\n\t__builtin_ia32_vfnmaddpd256_mask.\n\t(_mm256_maskz_fnmadd_pd): Use __builtin_ia32_vfnmaddpd256_maskz.\n\t(_mm_mask_fnmadd_pd): Use __builtin_ia32_vfmaddpd128_mask\n\t(_mm_maskz_fnmadd_pd): Use __builtin_ia32_vfnmaddpd128_maskz.\n\t(_mm256_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_mask.\n\t(_mm256_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_mask.\n\t(_mm256_maskz_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_maskz.\n\t(_mm_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps128_mask.\n\t(_mm_maskz_fnmadd_ps): Use __builtin_ia32_vfnmaddps128_maskz.\n\t* config/i386/fmaintrin.h (_mm_fnmadd_pd): Use\n\t__builtin_ia32_vfnmaddpd.\n\t(_mm256_fnmadd_pd): Use __builtin_ia32_vfnmaddpd256.\n\t(_mm_fnmadd_ps): Use __builtin_ia32_vfnmaddps.\n\t(_mm256_fnmadd_ps): Use __builtin_ia32_vfnmaddps256.\n\t(_mm_fnmadd_sd): Use __builtin_ia32_vfnmaddsd3.\n\t(_mm_fnmadd_ss): Use __builtin_ia32_vfnmaddss3.\n\t* config/i386/i386-builtin.def: Add\n\t__builtin_ia32_vfnmaddpd256_mask,\n\t__builtin_ia32_vfnmaddpd256_maskz,\n\t__builtin_ia32_vfnmaddpd128_mask,\n\t__builtin_ia32_vfnmaddpd128_maskz,\n\t__builtin_ia32_vfnmaddps256_mask,\n\t__builtin_ia32_vfnmaddps256_maskz,\n\t__builtin_ia32_vfnmaddps128_mask,\n\t__builtin_ia32_vfnmaddps128_maskz,\n\t__builtin_ia32_vfnmaddpd512_mask,\n\t__builtin_ia32_vfnmaddpd512_maskz,\n\t__builtin_ia32_vfnmaddps512_mask,\n\t__builtin_ia32_vfnmaddps512_maskz, __builtin_ia32_vfnmaddss3,\n\t__builtin_ia32_vfnmaddsd3, __builtin_ia32_vfnmaddps,\n\t__builtin_ia32_vfnmaddpd, __builtin_ia32_vfnmaddps256 and.\n\t__builtin_ia32_vfnmaddpd256.\n\t* config/i386/sse.md (fma4i_fnmadd_<mode>): New.\n\t(<avx512>_fnmadd_<mode>_maskz<round_expand_name>): Likewise.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1):\n\tLikewise.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2):\n\tLikewise.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3):\n\tLikewise.\n\t(fmai_vmfnmadd_<mode><round_name>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/72782\n\t* gcc.target/i386/avx512f-fnmadd-df-zmm-1.c: New test.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-1.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-2.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-3.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-4.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-5.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-6.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-7.c: Likewise.\n\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-8.c: Likewise.\n\t* gcc.target/i386/avx512vl-fnmadd-sf-xmm-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-fnmadd-sf-ymm-1.c: Likewise.\n\nFrom-SVN: r265357", "tree": {"sha": "4e550ed034eb6210a9130f63a48ba758eaac4db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e550ed034eb6210a9130f63a48ba758eaac4db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca9497788cb44abe81529844ebc0077c0fc2b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca9497788cb44abe81529844ebc0077c0fc2b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca9497788cb44abe81529844ebc0077c0fc2b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca9497788cb44abe81529844ebc0077c0fc2b91/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564"}], "stats": {"total": 517, "additions": 411, "deletions": 106}, "files": [{"sha": "1148b15809eee1432cf3ec315ad8aa04920d4a21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -1,3 +1,64 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/72782\n+\t* config/i386/avx512fintrin.h (_mm512_fnmadd_round_pd): Use\n+\t__builtin_ia32_vfnmaddpd512_mask.\n+\t(_mm512_mask_fnmadd_round_pd): Likewise.\n+\t(_mm512_fnmadd_pd): Likewise.\n+\t(_mm512_mask_fnmadd_pd): Likewise.\n+\t(_mm512_maskz_fnmadd_round_pd): Use\n+\t__builtin_ia32_vfnmaddpd512_maskz.\n+\t(_mm512_maskz_fnmadd_pd): Likewise.\n+\t(_mm512_fnmadd_round_ps): Use __builtin_ia32_vfnmaddps512_mask.\n+\t(_mm512_mask_fnmadd_round_ps): Likewise.\n+\t(_mm512_fnmadd_ps): Likewise.\n+\t(_mm512_mask_fnmadd_ps): Likewise.\n+\t(_mm512_maskz_fnmadd_round_ps): Use\n+\t__builtin_ia32_vfnmaddps512_maskz.\n+\t(_mm512_maskz_fnmadd_ps): Likewise.\n+\t* config/i386/avx512vlintrin.h (_mm256_mask_fnmadd_pd): Use\n+\t__builtin_ia32_vfnmaddpd256_mask.\n+\t(_mm256_maskz_fnmadd_pd): Use __builtin_ia32_vfnmaddpd256_maskz.\n+\t(_mm_mask_fnmadd_pd): Use __builtin_ia32_vfmaddpd128_mask\n+\t(_mm_maskz_fnmadd_pd): Use __builtin_ia32_vfnmaddpd128_maskz.\n+\t(_mm256_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_mask.\n+\t(_mm256_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_mask.\n+\t(_mm256_maskz_fnmadd_ps): Use __builtin_ia32_vfnmaddps256_maskz.\n+\t(_mm_mask_fnmadd_ps): Use __builtin_ia32_vfnmaddps128_mask.\n+\t(_mm_maskz_fnmadd_ps): Use __builtin_ia32_vfnmaddps128_maskz.\n+\t* config/i386/fmaintrin.h (_mm_fnmadd_pd): Use\n+\t__builtin_ia32_vfnmaddpd.\n+\t(_mm256_fnmadd_pd): Use __builtin_ia32_vfnmaddpd256.\n+\t(_mm_fnmadd_ps): Use __builtin_ia32_vfnmaddps.\n+\t(_mm256_fnmadd_ps): Use __builtin_ia32_vfnmaddps256.\n+\t(_mm_fnmadd_sd): Use __builtin_ia32_vfnmaddsd3.\n+\t(_mm_fnmadd_ss): Use __builtin_ia32_vfnmaddss3.\n+\t* config/i386/i386-builtin.def: Add\n+\t__builtin_ia32_vfnmaddpd256_mask,\n+\t__builtin_ia32_vfnmaddpd256_maskz,\n+\t__builtin_ia32_vfnmaddpd128_mask,\n+\t__builtin_ia32_vfnmaddpd128_maskz,\n+\t__builtin_ia32_vfnmaddps256_mask,\n+\t__builtin_ia32_vfnmaddps256_maskz,\n+\t__builtin_ia32_vfnmaddps128_mask,\n+\t__builtin_ia32_vfnmaddps128_maskz,\n+\t__builtin_ia32_vfnmaddpd512_mask,\n+\t__builtin_ia32_vfnmaddpd512_maskz,\n+\t__builtin_ia32_vfnmaddps512_mask,\n+\t__builtin_ia32_vfnmaddps512_maskz, __builtin_ia32_vfnmaddss3,\n+\t__builtin_ia32_vfnmaddsd3, __builtin_ia32_vfnmaddps,\n+\t__builtin_ia32_vfnmaddpd, __builtin_ia32_vfnmaddps256 and.\n+\t__builtin_ia32_vfnmaddpd256.\n+\t* config/i386/sse.md (fma4i_fnmadd_<mode>): New.\n+\t(<avx512>_fnmadd_<mode>_maskz<round_expand_name>): Likewise.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1):\n+\tLikewise.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2):\n+\tLikewise.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3):\n+\tLikewise.\n+\t(fmai_vmfnmadd_<mode><round_name>): Likewise.\n+\n 2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "1445e9e8b3c2c2243956e73edbdaa797deab268f", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -3613,10 +3613,10 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fnmadd_round_pd (__m512d __A, __m512d __B, __m512d __C, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,\n-\t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    (__v8df) __C,\n-\t\t\t\t\t\t    (__mmask8) -1, __R);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_mask ((__v8df) __A,\n+\t\t\t\t\t\t     (__v8df) __B,\n+\t\t\t\t\t\t     (__v8df) __C,\n+\t\t\t\t\t\t     (__mmask8) -1, __R);\n }\n \n extern __inline __m512d\n@@ -3635,31 +3635,31 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fnmadd_round_pd (__m512d __A, __m512d __B, __m512d __C,\n \t\t\t      __mmask8 __U, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 (-(__v8df) __A,\n-\t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     (__v8df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U, __R);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_mask3 ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8df) __B,\n+\t\t\t\t\t\t      (__v8df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U, __R);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fnmadd_round_pd (__mmask8 __U, __m512d __A, __m512d __B,\n \t\t\t      __m512d __C, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,\n-\t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     (__v8df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U, __R);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_maskz ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8df) __B,\n+\t\t\t\t\t\t      (__v8df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U, __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fnmadd_round_ps (__m512 __A, __m512 __B, __m512 __C, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,\n-\t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   (__v16sf) __C,\n-\t\t\t\t\t\t   (__mmask16) -1, __R);\n+  return (__m512) __builtin_ia32_vfnmaddps512_mask ((__v16sf) __A,\n+\t\t\t\t\t\t    (__v16sf) __B,\n+\t\t\t\t\t\t    (__v16sf) __C,\n+\t\t\t\t\t\t    (__mmask16) -1, __R);\n }\n \n extern __inline __m512\n@@ -3678,21 +3678,21 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fnmadd_round_ps (__m512 __A, __m512 __B, __m512 __C,\n \t\t\t      __mmask16 __U, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask3 (-(__v16sf) __A,\n-\t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    (__v16sf) __C,\n-\t\t\t\t\t\t    (__mmask16) __U, __R);\n+  return (__m512) __builtin_ia32_vfnmaddps512_mask3 ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16sf) __B,\n+\t\t\t\t\t\t     (__v16sf) __C,\n+\t\t\t\t\t\t     (__mmask16) __U, __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fnmadd_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n \t\t\t      __m512 __C, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,\n-\t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    (__v16sf) __C,\n-\t\t\t\t\t\t    (__mmask16) __U, __R);\n+  return (__m512) __builtin_ia32_vfnmaddps512_maskz ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16sf) __B,\n+\t\t\t\t\t\t     (__v16sf) __C,\n+\t\t\t\t\t\t     (__mmask16) __U, __R);\n }\n \n extern __inline __m512d\n@@ -3878,28 +3878,28 @@ _mm512_maskz_fnmsub_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n     (__m512)__builtin_ia32_vfmaddsubps512_maskz(A, B, -(C), U, R)\n \n #define _mm512_fnmadd_round_pd(A, B, C, R)            \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_mask(-(A), B, C, -1, R)\n+    (__m512d)__builtin_ia32_vfnmaddpd512_mask(A, B, C, -1, R)\n \n #define _mm512_mask_fnmadd_round_pd(A, U, B, C, R)    \\\n-    (__m512d)__builtin_ia32_vfnmaddpd512_mask(-(A), B, C, U, R)\n+    (__m512d)__builtin_ia32_vfnmaddpd512_mask(A, B, C, U, R)\n \n #define _mm512_mask3_fnmadd_round_pd(A, B, C, U, R)   \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_mask3(-(A), B, C, U, R)\n+    (__m512d)__builtin_ia32_vfnmaddpd512_mask3(A, B, C, U, R)\n \n #define _mm512_maskz_fnmadd_round_pd(U, A, B, C, R)   \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_maskz(-(A), B, C, U, R)\n+    (__m512d)__builtin_ia32_vfnmaddpd512_maskz(A, B, C, U, R)\n \n #define _mm512_fnmadd_round_ps(A, B, C, R)            \\\n-    (__m512)__builtin_ia32_vfmaddps512_mask(-(A), B, C, -1, R)\n+    (__m512)__builtin_ia32_vfnmaddps512_mask(A, B, C, -1, R)\n \n #define _mm512_mask_fnmadd_round_ps(A, U, B, C, R)    \\\n-    (__m512)__builtin_ia32_vfnmaddps512_mask(-(A), B, C, U, R)\n+    (__m512)__builtin_ia32_vfnmaddps512_mask(A, B, C, U, R)\n \n #define _mm512_mask3_fnmadd_round_ps(A, B, C, U, R)   \\\n-    (__m512)__builtin_ia32_vfmaddps512_mask3(-(A), B, C, U, R)\n+    (__m512)__builtin_ia32_vfnmaddps512_mask3(A, B, C, U, R)\n \n #define _mm512_maskz_fnmadd_round_ps(U, A, B, C, R)   \\\n-    (__m512)__builtin_ia32_vfmaddps512_maskz(-(A), B, C, U, R)\n+    (__m512)__builtin_ia32_vfnmaddps512_maskz(A, B, C, U, R)\n \n #define _mm512_fnmsub_round_pd(A, B, C, R)            \\\n     (__m512d)__builtin_ia32_vfmaddpd512_mask(-(A), B, -(C), -1, R)\n@@ -12680,11 +12680,11 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fnmadd_pd (__m512d __A, __m512d __B, __m512d __C)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask (-(__v8df) __A,\n-\t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    (__v8df) __C,\n-\t\t\t\t\t\t    (__mmask8) -1,\n-\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_mask ((__v8df) __A,\n+\t\t\t\t\t\t     (__v8df) __B,\n+\t\t\t\t\t\t     (__v8df) __C,\n+\t\t\t\t\t\t     (__mmask8) -1,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512d\n@@ -12702,33 +12702,33 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fnmadd_pd (__m512d __A, __m512d __B, __m512d __C, __mmask8 __U)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask3 (-(__v8df) __A,\n-\t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     (__v8df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U,\n-\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_mask3 ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8df) __B,\n+\t\t\t\t\t\t      (__v8df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U,\n+\t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fnmadd_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_maskz (-(__v8df) __A,\n-\t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     (__v8df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U,\n-\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+  return (__m512d) __builtin_ia32_vfnmaddpd512_maskz ((__v8df) __A,\n+\t\t\t\t\t\t      (__v8df) __B,\n+\t\t\t\t\t\t      (__v8df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U,\n+\t\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fnmadd_ps (__m512 __A, __m512 __B, __m512 __C)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask (-(__v16sf) __A,\n-\t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   (__v16sf) __C,\n-\t\t\t\t\t\t   (__mmask16) -1,\n-\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+  return (__m512) __builtin_ia32_vfnmaddps512_mask ((__v16sf) __A,\n+\t\t\t\t\t\t    (__v16sf) __B,\n+\t\t\t\t\t\t    (__v16sf) __C,\n+\t\t\t\t\t\t    (__mmask16) -1,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n@@ -12746,22 +12746,22 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fnmadd_ps (__m512 __A, __m512 __B, __m512 __C, __mmask16 __U)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask3 (-(__v16sf) __A,\n-\t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    (__v16sf) __C,\n-\t\t\t\t\t\t    (__mmask16) __U,\n-\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+  return (__m512) __builtin_ia32_vfnmaddps512_mask3 ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16sf) __B,\n+\t\t\t\t\t\t     (__v16sf) __C,\n+\t\t\t\t\t\t     (__mmask16) __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fnmadd_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_maskz (-(__v16sf) __A,\n-\t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    (__v16sf) __C,\n-\t\t\t\t\t\t    (__mmask16) __U,\n-\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+  return (__m512) __builtin_ia32_vfnmaddps512_maskz ((__v16sf) __A,\n+\t\t\t\t\t\t     (__v16sf) __B,\n+\t\t\t\t\t\t     (__v16sf) __C,\n+\t\t\t\t\t\t     (__mmask16) __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512d"}, {"sha": "b46c38e1f8197580684d70ec163c5e4874d0658e", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -4525,21 +4525,21 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask3_fnmadd_pd (__m256d __A, __m256d __B, __m256d __C,\n \t\t\t__mmask8 __U)\n {\n-  return (__m256d) __builtin_ia32_vfmaddpd256_mask3 (-(__v4df) __A,\n-\t\t\t\t\t\t     (__v4df) __B,\n-\t\t\t\t\t\t     (__v4df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m256d) __builtin_ia32_vfnmaddpd256_mask3 ((__v4df) __A,\n+\t\t\t\t\t\t      (__v4df) __B,\n+\t\t\t\t\t\t      (__v4df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_fnmadd_pd (__mmask8 __U, __m256d __A, __m256d __B,\n \t\t\t__m256d __C)\n {\n-  return (__m256d) __builtin_ia32_vfmaddpd256_maskz (-(__v4df) __A,\n-\t\t\t\t\t\t     (__v4df) __B,\n-\t\t\t\t\t\t     (__v4df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m256d) __builtin_ia32_vfnmaddpd256_maskz ((__v4df) __A,\n+\t\t\t\t\t\t      (__v4df) __B,\n+\t\t\t\t\t\t      (__v4df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128d\n@@ -4558,21 +4558,21 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fnmadd_pd (__m128d __A, __m128d __B, __m128d __C,\n \t\t     __mmask8 __U)\n {\n-  return (__m128d) __builtin_ia32_vfmaddpd128_mask3 (-(__v2df) __A,\n-\t\t\t\t\t\t     (__v2df) __B,\n-\t\t\t\t\t\t     (__v2df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m128d) __builtin_ia32_vfnmaddpd128_mask3 ((__v2df) __A,\n+\t\t\t\t\t\t      (__v2df) __B,\n+\t\t\t\t\t\t      (__v2df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_fnmadd_pd (__mmask8 __U, __m128d __A, __m128d __B,\n \t\t     __m128d __C)\n {\n-  return (__m128d) __builtin_ia32_vfmaddpd128_maskz (-(__v2df) __A,\n-\t\t\t\t\t\t     (__v2df) __B,\n-\t\t\t\t\t\t     (__v2df) __C,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m128d) __builtin_ia32_vfnmaddpd128_maskz ((__v2df) __A,\n+\t\t\t\t\t\t      (__v2df) __B,\n+\t\t\t\t\t\t      (__v2df) __C,\n+\t\t\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256\n@@ -4591,21 +4591,21 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask3_fnmadd_ps (__m256 __A, __m256 __B, __m256 __C,\n \t\t\t__mmask8 __U)\n {\n-  return (__m256) __builtin_ia32_vfmaddps256_mask3 (-(__v8sf) __A,\n-\t\t\t\t\t\t    (__v8sf) __B,\n-\t\t\t\t\t\t    (__v8sf) __C,\n-\t\t\t\t\t\t    (__mmask8) __U);\n+  return (__m256) __builtin_ia32_vfnmaddps256_mask3 ((__v8sf) __A,\n+\t\t\t\t\t\t     (__v8sf) __B,\n+\t\t\t\t\t\t     (__v8sf) __C,\n+\t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_fnmadd_ps (__mmask8 __U, __m256 __A, __m256 __B,\n \t\t\t__m256 __C)\n {\n-  return (__m256) __builtin_ia32_vfmaddps256_maskz (-(__v8sf) __A,\n-\t\t\t\t\t\t    (__v8sf) __B,\n-\t\t\t\t\t\t    (__v8sf) __C,\n-\t\t\t\t\t\t    (__mmask8) __U);\n+  return (__m256) __builtin_ia32_vfnmaddps256_maskz ((__v8sf) __A,\n+\t\t\t\t\t\t     (__v8sf) __B,\n+\t\t\t\t\t\t     (__v8sf) __C,\n+\t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128\n@@ -4622,20 +4622,20 @@ extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fnmadd_ps (__m128 __A, __m128 __B, __m128 __C, __mmask8 __U)\n {\n-  return (__m128) __builtin_ia32_vfmaddps128_mask3 (-(__v4sf) __A,\n-\t\t\t\t\t\t    (__v4sf) __B,\n-\t\t\t\t\t\t    (__v4sf) __C,\n-\t\t\t\t\t\t    (__mmask8) __U);\n+  return (__m128) __builtin_ia32_vfnmaddps128_mask3 ((__v4sf) __A,\n+\t\t\t\t\t\t     (__v4sf) __B,\n+\t\t\t\t\t\t     (__v4sf) __C,\n+\t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_fnmadd_ps (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128) __builtin_ia32_vfmaddps128_maskz (-(__v4sf) __A,\n-\t\t\t\t\t\t    (__v4sf) __B,\n-\t\t\t\t\t\t    (__v4sf) __C,\n-\t\t\t\t\t\t    (__mmask8) __U);\n+  return (__m128) __builtin_ia32_vfnmaddps128_maskz ((__v4sf) __A,\n+\t\t\t\t\t\t     (__v4sf) __B,\n+\t\t\t\t\t\t     (__v4sf) __C,\n+\t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256d"}, {"sha": "0a2f4a7f676f421bf046d853e38f13e710853ec1", "filename": "gcc/config/i386/fmaintrin.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffmaintrin.h?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -134,48 +134,48 @@ extern __inline __m128d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fnmadd_pd (__m128d __A, __m128d __B, __m128d __C)\n {\n-  return (__m128d)__builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B,\n-                                           (__v2df)__C);\n+  return (__m128d)__builtin_ia32_vfnmaddpd ((__v2df)__A, (__v2df)__B,\n+\t\t\t\t\t    (__v2df)__C);\n }\n \n extern __inline __m256d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_fnmadd_pd (__m256d __A, __m256d __B, __m256d __C)\n {\n-  return (__m256d)__builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B,\n-                                              (__v4df)__C);\n+  return (__m256d)__builtin_ia32_vfnmaddpd256 ((__v4df)__A, (__v4df)__B,\n+\t\t\t\t\t       (__v4df)__C);\n }\n \n extern __inline __m128\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fnmadd_ps (__m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128)__builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B,\n-                                          (__v4sf)__C);\n+  return (__m128)__builtin_ia32_vfnmaddps ((__v4sf)__A, (__v4sf)__B,\n+\t\t\t\t\t   (__v4sf)__C);\n }\n \n extern __inline __m256\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_fnmadd_ps (__m256 __A, __m256 __B, __m256 __C)\n {\n-  return (__m256)__builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B,\n-                                             (__v8sf)__C);\n+  return (__m256)__builtin_ia32_vfnmaddps256 ((__v8sf)__A, (__v8sf)__B,\n+\t\t\t\t\t      (__v8sf)__C);\n }\n \n extern __inline __m128d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fnmadd_sd (__m128d __A, __m128d __B, __m128d __C)\n {\n-  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, -(__v2df)__B,\n-                                            (__v2df)__C);\n+  return (__m128d)__builtin_ia32_vfnmaddsd3 ((__v2df)__A, (__v2df)__B,\n+\t\t\t\t\t     (__v2df)__C);\n }\n \n extern __inline __m128\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fnmadd_ss (__m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, -(__v4sf)__B,\n-                                           (__v4sf)__C);\n+  return (__m128)__builtin_ia32_vfnmaddss3 ((__v4sf)__A, (__v4sf)__B,\n+\t\t\t\t\t    (__v4sf)__C);\n }\n \n extern __inline __m128d"}, {"sha": "74343db1cbebab84451dbe19597e2083f70ec6f9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -1916,9 +1916,19 @@ BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_mask, \"__builtin_i\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_mask3, \"__builtin_ia32_vfmsubps128_mask3\", IX86_BUILTIN_VFMSUBPS128_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_maskz, \"__builtin_ia32_vfmsubps128_maskz\", IX86_BUILTIN_VFMSUBPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4df_mask, \"__builtin_ia32_vfnmaddpd256_mask\", IX86_BUILTIN_VFNMADDPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4df_mask3, \"__builtin_ia32_vfnmaddpd256_mask3\", IX86_BUILTIN_VFNMADDPD256_MASK3, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4df_maskz,\n+\"__builtin_ia32_vfnmaddpd256_maskz\", IX86_BUILTIN_VFNMADDPD256_MASKZ, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v2df_mask, \"__builtin_ia32_vfnmaddpd128_mask\", IX86_BUILTIN_VFNMADDPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v2df_mask3, \"__builtin_ia32_vfnmaddpd128_mask3\", IX86_BUILTIN_VFNMADDPD128_MASK3, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v2df_maskz,\n+\"__builtin_ia32_vfnmaddpd128_maskz\", IX86_BUILTIN_VFNMADDPD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v8sf_mask, \"__builtin_ia32_vfnmaddps256_mask\", IX86_BUILTIN_VFNMADDPS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v8sf_mask3, \"__builtin_ia32_vfnmaddps256_mask3\", IX86_BUILTIN_VFNMADDPS256_MASK3, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v8sf_maskz, \"__builtin_ia32_vfnmaddps256_maskz\", IX86_BUILTIN_VFNMADDPS256_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4sf_mask, \"__builtin_ia32_vfnmaddps128_mask\", IX86_BUILTIN_VFNMADDPS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4sf_mask3, \"__builtin_ia32_vfnmaddps128_mask3\", IX86_BUILTIN_VFNMADDPS128_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4sf_maskz, \"__builtin_ia32_vfnmaddps128_maskz\", IX86_BUILTIN_VFNMADDPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmsub_v4df_mask, \"__builtin_ia32_vfnmsubpd256_mask\", IX86_BUILTIN_VFNMSUBPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmsub_v4df_mask3, \"__builtin_ia32_vfnmsubpd256_mask3\", IX86_BUILTIN_VFNMSUBPD256_MASK3, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmsub_v2df_mask, \"__builtin_ia32_vfnmsubpd128_mask\", IX86_BUILTIN_VFNMSUBPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n@@ -2783,7 +2793,11 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_mask_round, \"__buil\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_mask3_round, \"__builtin_ia32_vfmsubps512_mask3\", IX86_BUILTIN_VFMSUBPS512_MASK3, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_maskz_round, \"__builtin_ia32_vfmsubps512_maskz\", IX86_BUILTIN_VFMSUBPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v8df_mask_round, \"__builtin_ia32_vfnmaddpd512_mask\", IX86_BUILTIN_VFNMADDPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v8df_mask3_round, \"__builtin_ia32_vfnmaddpd512_mask3\", IX86_BUILTIN_VFNMADDPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v8df_maskz_round, \"__builtin_ia32_vfnmaddpd512_maskz\", IX86_BUILTIN_VFNMADDPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v16sf_mask_round, \"__builtin_ia32_vfnmaddps512_mask\", IX86_BUILTIN_VFNMADDPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v16sf_mask3_round, \"__builtin_ia32_vfnmaddps512_mask3\", IX86_BUILTIN_VFNMADDPS512_MASK3, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v16sf_maskz_round, \"__builtin_ia32_vfnmaddps512_maskz\", IX86_BUILTIN_VFNMADDPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmsub_v8df_mask_round, \"__builtin_ia32_vfnmsubpd512_mask\", IX86_BUILTIN_VFNMSUBPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmsub_v8df_mask3_round, \"__builtin_ia32_vfnmsubpd512_mask3\", IX86_BUILTIN_VFNMSUBPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmsub_v16sf_mask_round, \"__builtin_ia32_vfnmsubps512_mask\", IX86_BUILTIN_VFNMSUBPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n@@ -2869,6 +2883,8 @@ BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v4sf, \"__builtin_ia32_vfmaddss\n BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v2df, \"__builtin_ia32_vfmaddsd3\", IX86_BUILTIN_VFMADDSD3, UNKNOWN, (int)MULTI_ARG_3_DF)\n BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmsub_v4sf, \"__builtin_ia32_vfmsubss3\", IX86_BUILTIN_VFMSUBSS3, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmsub_v2df, \"__builtin_ia32_vfmsubsd3\", IX86_BUILTIN_VFMSUBSD3, UNKNOWN, (int)MULTI_ARG_3_DF)\n+BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfnmadd_v4sf, \"__builtin_ia32_vfnmaddss3\", IX86_BUILTIN_VFNMADDSS3, UNKNOWN, (int)MULTI_ARG_3_SF)\n+BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfnmadd_v2df, \"__builtin_ia32_vfnmaddsd3\", IX86_BUILTIN_VFNMADDSD3, UNKNOWN, (int)MULTI_ARG_3_DF)\n \n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4sf, \"__builtin_ia32_vfmaddps\", IX86_BUILTIN_VFMADDPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v2df, \"__builtin_ia32_vfmaddpd\", IX86_BUILTIN_VFMADDPD, UNKNOWN, (int)MULTI_ARG_3_DF)\n@@ -2878,6 +2894,10 @@ BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v4sf, \"_\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v2df, \"__builtin_ia32_vfmsubpd\", IX86_BUILTIN_VFMSUBPD, UNKNOWN, (int)MULTI_ARG_3_DF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v8sf, \"__builtin_ia32_vfmsubps256\", IX86_BUILTIN_VFMSUBPS256, UNKNOWN, (int)MULTI_ARG_3_SF2)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v4df, \"__builtin_ia32_vfmsubpd256\", IX86_BUILTIN_VFMSUBPD256, UNKNOWN, (int)MULTI_ARG_3_DF2)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fnmadd_v4sf, \"__builtin_ia32_vfnmaddps\", IX86_BUILTIN_VFNMADDPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fnmadd_v2df, \"__builtin_ia32_vfnmaddpd\", IX86_BUILTIN_VFNMADDPD, UNKNOWN, (int)MULTI_ARG_3_DF)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fnmadd_v8sf, \"__builtin_ia32_vfnmaddps256\", IX86_BUILTIN_VFNMADDPS256, UNKNOWN, (int)MULTI_ARG_3_SF2)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fnmadd_v4df, \"__builtin_ia32_vfnmaddpd256\", IX86_BUILTIN_VFNMADDPD256, UNKNOWN, (int)MULTI_ARG_3_DF2)\n \n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v4sf, \"__builtin_ia32_vfmaddsubps\", IX86_BUILTIN_VFMADDSUBPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v2df, \"__builtin_ia32_vfmaddsubpd\", IX86_BUILTIN_VFMADDSUBPD, UNKNOWN, (int)MULTI_ARG_3_DF)"}, {"sha": "0426da420e86e5534758cefdb53eb3febd393234", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -3756,6 +3756,14 @@\n \t  (neg:FMAMODE_AVX512\n \t    (match_operand:FMAMODE_AVX512 3 \"nonimmediate_operand\"))))])\n \n+(define_expand \"fma4i_fnmadd_<mode>\"\n+  [(set (match_operand:FMAMODE_AVX512 0 \"register_operand\")\n+\t(fma:FMAMODE_AVX512\n+\t  (neg:FMAMODE_AVX512\n+\t    (match_operand:FMAMODE_AVX512 1 \"nonimmediate_operand\"))\n+\t  (match_operand:FMAMODE_AVX512 2 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE_AVX512 3 \"nonimmediate_operand\")))])\n+\n (define_expand \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\"\n   [(match_operand:VF_AVX512VL 0 \"register_operand\")\n    (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n@@ -4016,6 +4024,20 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"<avx512>_fnmadd_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_fma_fnmadd_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n (define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n@@ -4031,6 +4053,49 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (neg:VF_AVX512\n+\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t  (vec_duplicate:VF_AVX512\n+\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\"))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"vfnmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (neg:VF_AVX512\n+\t    (vec_duplicate:VF_AVX512\n+\t      (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\")))\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n+\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"@\n+   vfnmadd132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n+   vfnmadd231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (neg:VF_AVX512\n+\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n+\t  (vec_duplicate:VF_AVX512\n+\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n+\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"@\n+   vfnmadd132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n+   vfnmadd231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4326,6 +4391,18 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n+(define_expand \"fmai_vmfnmadd_<mode><round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\"))\n+\t    (match_operand:VF_128 1 \"<round_nimm_predicate>\")\n+\t    (match_operand:VF_128 3 \"<round_nimm_predicate>\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\")\n+\n (define_insn \"*fmai_fmadd_<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128"}, {"sha": "649a8384c9290def4a5036dcd2dd910f2beaa499", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -1,3 +1,18 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/72782\n+\t* gcc.target/i386/avx512f-fnmadd-df-zmm-1.c: New test.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-2.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-3.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-4.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-5.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-6.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-7.c: Likewise.\n+\t* gcc.target/i386/avx512f-fnmadd-sf-zmm-8.c: Likewise.\n+\t* gcc.target/i386/avx512vl-fnmadd-sf-xmm-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-fnmadd-sf-ymm-1.c: Likewise.\n+\n 2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "d4db6f74ff85ceced2e68069c4dd52796a176fe4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-df-zmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-df-zmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-df-zmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-df-zmm-1.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastsd\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512d\n+#define vec 512\n+#define op fnmadd\n+#define suffix pd\n+#define SCALAR double\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "9da0cad2f09c788fe55a832477d5dfcf449a7c7a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-1.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "cf355d16dd938f9e62014608fa02376215058761", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-2.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-2.h\""}, {"sha": "a4e723e23207afea0f812589f886e510d19c49d1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-3.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-3.h\""}, {"sha": "ceeba440ca579b9f4610b27e40a73702fb6f12b4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-4.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-4.h\""}, {"sha": "4733dce087eab9ecc42c7a77350a5f8bb37e78bb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-5.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-5.h\""}, {"sha": "cbf90ca7587e5aab1f4beadac01da1364e476c81", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-6.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-6.h\""}, {"sha": "db5c34678c07e5fd28af831fd57227aae329d522", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-7.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-7.h\""}, {"sha": "909ab25796bbda16f78f8d3f72cea7a5f92425ab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fnmadd-sf-zmm-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fnmadd-sf-zmm-8.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+%zmm\\[0-9\\]+, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-8.h\""}, {"sha": "ec68fa9e08467e379e27ea7084f0db3c43689a5a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-fnmadd-sf-xmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-xmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-xmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-xmm-1.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %xmm\\[0-9\\]+, %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%xmm\\[0-9\\]+\" } } */\n+\n+#define type __m128\n+#define vec\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "d668d0ee3199ef908e2250261fd724b7a66a551f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-fnmadd-sf-ymm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-ymm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9497788cb44abe81529844ebc0077c0fc2b91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-ymm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fnmadd-sf-ymm-1.c?ref=5ca9497788cb44abe81529844ebc0077c0fc2b91", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %ymm\\[0-9\\]+, %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%ymm\\[0-9\\]+\" } } */\n+\n+#define type __m256\n+#define vec 256\n+#define op fnmadd\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}]}