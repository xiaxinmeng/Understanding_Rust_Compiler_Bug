{"sha": "d4ba3b369cbe9bce0a1212670825ecfb99762520", "node_id": "C_kwDOANBUbNoAKGQ0YmEzYjM2OWNiZTliY2UwYTEyMTI2NzA4MjVlY2ZiOTk3NjI1MjA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-01T09:48:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-13T01:10:44Z"}, "message": "libstdc++: Allow std::to_chars for 128-bit integers in strict mode\n\nThis allows std::format to support __int128 when __STRICT_ANSI__ is\ndefined, which previously failed because __int128 is not an integral\ntype in strict mode.\n\nWith these changes, std::to_chars still rejects 128-bit integers in\nstrict mode, but std::format will be able to use __detail::__to_chars_i\nfor unsigned __int128.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/charconv.h (__integer_to_chars_is_unsigned):\n\tNew variable template.\n\t(__to_chars_len, __to_chars_10_impl): Use variable template in\n\tassertions to allow unsigned __int128 in strict mode.\n\t* include/std/charconv (__to_chars, __to_chars_16)\n\t(__to_chars_10, __to_chars_8, __to_chars_2): Likewise.", "tree": {"sha": "5ba9b0ae3ec94f3bfe938ad9435b1914b6ea0de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ba9b0ae3ec94f3bfe938ad9435b1914b6ea0de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4ba3b369cbe9bce0a1212670825ecfb99762520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba3b369cbe9bce0a1212670825ecfb99762520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ba3b369cbe9bce0a1212670825ecfb99762520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba3b369cbe9bce0a1212670825ecfb99762520/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce0cee77adf33397d0ba61e7445effd8a5d8fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce0cee77adf33397d0ba61e7445effd8a5d8fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce0cee77adf33397d0ba61e7445effd8a5d8fcc"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "103cfcb817723d9aa6e75fdda3b1a47450d870e6", "filename": "libstdc++-v3/include/bits/charconv.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba3b369cbe9bce0a1212670825ecfb99762520/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba3b369cbe9bce0a1212670825ecfb99762520/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h?ref=d4ba3b369cbe9bce0a1212670825ecfb99762520", "patch": "@@ -35,19 +35,28 @@\n #if __cplusplus >= 201103L\n \n #include <type_traits>\n+#include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n namespace __detail\n {\n+#if __cpp_variable_templates\n+  // This accepts 128-bit integers even in strict mode.\n+  template<typename _Tp>\n+    constexpr bool __integer_to_chars_is_unsigned\n+      = ! __gnu_cxx::__int_traits<_Tp>::__is_signed;\n+#endif\n+\n   // Generic implementation for arbitrary bases.\n   template<typename _Tp>\n     _GLIBCXX14_CONSTEXPR unsigned\n     __to_chars_len(_Tp __value, int __base = 10) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+#if __cpp_variable_templates\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n+#endif\n \n       unsigned __n = 1;\n       const unsigned __b2 = __base  * __base;\n@@ -71,8 +80,9 @@ namespace __detail\n     _GLIBCXX23_CONSTEXPR void\n     __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+#if __cpp_variable_templates\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n+#endif\n \n       constexpr char __digits[201] =\n \t\"0001020304050607080910111213141516171819\""}, {"sha": "8f02395172fb2c24f598af039319458531e3a4b0", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ba3b369cbe9bce0a1212670825ecfb99762520/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ba3b369cbe9bce0a1212670825ecfb99762520/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=d4ba3b369cbe9bce0a1212670825ecfb99762520", "patch": "@@ -88,6 +88,10 @@ namespace __detail\n     using __integer_to_chars_result_type\n       = enable_if_t<__or_<__is_signed_integer<_Tp>,\n \t\t\t  __is_unsigned_integer<_Tp>,\n+#if defined __SIZEOF_INT128__ && defined __STRICT_ANSI__\n+\t\t\t  is_same<_Tp, signed __int128>,\n+\t\t\t  is_same<_Tp, unsigned __int128>,\n+#endif\n \t\t\t  is_same<char, remove_cv_t<_Tp>>>::value,\n \t\t    to_chars_result>;\n \n@@ -126,8 +130,7 @@ namespace __detail\n     constexpr to_chars_result\n     __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n \n       to_chars_result __res;\n \n@@ -167,8 +170,7 @@ namespace __detail\n     constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_16(char* __first, char* __last, _Tp __val) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n \n       to_chars_result __res;\n \n@@ -214,8 +216,7 @@ namespace __detail\n     constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_10(char* __first, char* __last, _Tp __val) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n \n       to_chars_result __res;\n \n@@ -238,8 +239,7 @@ namespace __detail\n     constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_8(char* __first, char* __last, _Tp __val) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n \n       to_chars_result __res;\n       unsigned __len;\n@@ -292,8 +292,7 @@ namespace __detail\n     constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_2(char* __first, char* __last, _Tp __val) noexcept\n     {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\n \n       to_chars_result __res;\n "}]}