{"sha": "8b9a92f794b8ad8011e6beb11a609efa635c4600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5YTkyZjc5NGI4YWQ4MDExZTZiZWIxMWE2MDllZmE2MzVjNDYwMA==", "commit": {"author": {"name": "Strager Neds", "email": "strager.nds@gmail.com", "date": "2020-11-10T18:42:01Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-10T18:44:15Z"}, "message": "Refactor copying decl section names\n\ngcc/\n\n\t* cgraph.h (symtab_node::get_section): Constify.\n\t(symtab_node::set_section): Declare new overload.\n\t* symtab.c (symtab_node::set_section): Define new overload.\n\t(symtab_node::copy_visibility_from): Use new overload of\n\tsymtab_node::set_section.\n\t(symtab_node::resolve_alias): Same.\n\t* tree.h (set_decl_section_name): Declare new overload.\n\t* tree.c (set_decl_section_name): Define new overload.\n\t* tree-emutls.c (get_emutls_init_templ_addr): Same.\n\t* cgraphclones.c (cgraph_node::create_virtual_clone): Use new\n\toverload of symtab_node::set_section.\n\t(cgraph_node::create_version_clone_with_body): Same.\n\t* trans-mem.c (ipa_tm_create_version): Same.\n\ngcc/c\n\t* c-decl.c (merge_decls): Use new overload of\n\tset_decl_section_name.\n\ngcc/cp\n\t* decl.c (duplicate_decls): Use new overload of\n\tset_decl_section_name.\n\t* method.c (use_thunk): Same.\n\t* optimize.c (maybe_clone_body): Same.\n\t* coroutines.cc (act_des_fn): Same.\n\ngcc/d\n\t* decl.cc (finish_thunk): Use new overload of\n\tset_decl_section_name", "tree": {"sha": "015dae9357148c23ef517657a3b019656fd2ebd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/015dae9357148c23ef517657a3b019656fd2ebd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9a92f794b8ad8011e6beb11a609efa635c4600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a92f794b8ad8011e6beb11a609efa635c4600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9a92f794b8ad8011e6beb11a609efa635c4600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a92f794b8ad8011e6beb11a609efa635c4600/comments", "author": {"login": "strager", "id": 48666, "node_id": "MDQ6VXNlcjQ4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/48666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/strager", "html_url": "https://github.com/strager", "followers_url": "https://api.github.com/users/strager/followers", "following_url": "https://api.github.com/users/strager/following{/other_user}", "gists_url": "https://api.github.com/users/strager/gists{/gist_id}", "starred_url": "https://api.github.com/users/strager/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/strager/subscriptions", "organizations_url": "https://api.github.com/users/strager/orgs", "repos_url": "https://api.github.com/users/strager/repos", "events_url": "https://api.github.com/users/strager/events{/privacy}", "received_events_url": "https://api.github.com/users/strager/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e41e7f0928de55d189475fc14f7e6c9737cd507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e41e7f0928de55d189475fc14f7e6c9737cd507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e41e7f0928de55d189475fc14f7e6c9737cd507"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "d348e39c27a1f1c6641a5dbcd756ec19746e3230", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -2884,7 +2884,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t       || TREE_PUBLIC (olddecl)\n \t       || TREE_STATIC (olddecl))\n \t      && DECL_SECTION_NAME (newdecl) != NULL)\n-\t    set_decl_section_name (olddecl, DECL_SECTION_NAME (newdecl));\n+\t    set_decl_section_name (olddecl, newdecl);\n \n \t  /* This isn't quite correct for something like\n \t\tint __thread x attribute ((tls_model (\"local-exec\")));"}, {"sha": "2e62db2a33b40927dd0889a5d0cffbcb5887ccb6", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -263,7 +263,7 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n     }\n \n   /* Return section as string.  */\n-  const char * get_section ()\n+  const char * get_section () const\n     {\n       if (!x_section)\n \treturn NULL;\n@@ -322,6 +322,9 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Set section for symbol and its aliases.  */\n   void set_section (const char *section);\n \n+  /* Like set_section, but copying the section name from another node.  */\n+  void set_section (const symtab_node &other);\n+\n   /* Set section, do not recurse into aliases.\n      When one wants to change section of symbol and its aliases,\n      use set_section.  */"}, {"sha": "2e69689025aa4c0cc78fbb6ec4dc7ee7ec486aef", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -626,7 +626,7 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n   if (tree_map)\n     clone_info::get_create (new_node)->tree_map = tree_map;\n   if (!implicit_section)\n-    new_node->set_section (get_section ());\n+    new_node->set_section (*this);\n \n   /* Clones of global symbols or symbols with unique names are unique.  */\n   if ((TREE_PUBLIC (old_decl)\n@@ -1060,7 +1060,7 @@ cgraph_node::create_version_clone_with_body\n   new_version_node->local = 1;\n   new_version_node->lowered = true;\n   if (!implicit_section)\n-    new_version_node->set_section (get_section ());\n+    new_version_node->set_section (*this);\n   /* Clones of global symbols or symbols with unique names are unique.  */\n   if ((TREE_PUBLIC (old_decl)\n        && !DECL_EXTERNAL (old_decl)"}, {"sha": "fd6cda41991774acaca8c7501d923c0c4407cd18", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -3756,7 +3756,7 @@ act_des_fn (tree orig, tree fn_type, tree coro_frame_ptr, const char* name)\n   /* Copy selected attributes from the original function.  */\n   TREE_USED (fn) = TREE_USED (orig);\n   if (DECL_SECTION_NAME (orig))\n-    set_decl_section_name (fn, DECL_SECTION_NAME (orig));\n+    set_decl_section_name (fn, orig);\n   /* Copy any alignment that the FE added.  */\n   if (DECL_ALIGN (orig))\n     SET_DECL_ALIGN (fn, DECL_ALIGN (orig));"}, {"sha": "42e704e7af295f077aee47eaa3e64778e7edbb49", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -2866,7 +2866,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t     done later in decl_attributes since we are called before attributes\n \t     are assigned.  */\n \t  if (DECL_SECTION_NAME (newdecl) != NULL)\n-\t    set_decl_section_name (olddecl, DECL_SECTION_NAME (newdecl));\n+\t    set_decl_section_name (olddecl, newdecl);\n \n \t  if (DECL_ONE_ONLY (newdecl))\n \t    {"}, {"sha": "4de192fac00597c746bef214c39e47d1dbf47199", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -351,7 +351,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n \t  resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n \n \t  /* Output the thunk into the same section as function.  */\n-\t  set_decl_section_name (thunk_fndecl, DECL_SECTION_NAME (fn));\n+\t  set_decl_section_name (thunk_fndecl, fn);\n \t  symtab_node::get (thunk_fndecl)->implicit_section\n \t    = symtab_node::get (fn)->implicit_section;\n \t}"}, {"sha": "127d7fa30fca9adb77f156434dfd3ce9f69a31ee", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -512,7 +512,7 @@ maybe_clone_body (tree fn)\n       DECL_DLLIMPORT_P (clone) = DECL_DLLIMPORT_P (fn);\n       DECL_ATTRIBUTES (clone) = copy_list (DECL_ATTRIBUTES (fn));\n       DECL_DISREGARD_INLINE_LIMITS (clone) = DECL_DISREGARD_INLINE_LIMITS (fn);\n-      set_decl_section_name (clone, DECL_SECTION_NAME (fn));\n+      set_decl_section_name (clone, fn);\n \n       /* Adjust the parameter names and locations.  */\n       parm = DECL_ARGUMENTS (fn);"}, {"sha": "d668715af597194db4d2427d4c6cc4bbfdb916c7", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -1663,7 +1663,7 @@ finish_thunk (tree thunk, tree function)\n \t  resolve_unique_section (thunk, 0, flag_function_sections);\n \n \t  /* Output the thunk into the same section as function.  */\n-\t  set_decl_section_name (thunk, DECL_SECTION_NAME (fn));\n+\t  set_decl_section_name (thunk, fn);\n \t  symtab_node::get (thunk)->implicit_section\n \t    = symtab_node::get (fn)->implicit_section;\n \t}"}, {"sha": "883cc3eae0d504efcbc0786b6fe4194e3a18c7e2", "filename": "gcc/symtab.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -1484,8 +1484,7 @@ symtab_node::copy_visibility_from (symtab_node *n)\n   DECL_DLLIMPORT_P (decl) = DECL_DLLIMPORT_P (n->decl);\n   resolution = n->resolution;\n   set_comdat_group (n->get_comdat_group ());\n-  call_for_symbol_and_aliases (symtab_node::set_section,\n-\t\t\t     const_cast<char *>(n->get_section ()), true);\n+  set_section (*n);\n   externally_visible = n->externally_visible;\n   if (!DECL_RTL_SET_P (decl))\n     return;\n@@ -1671,6 +1670,14 @@ symtab_node::set_section (const char *section)\n     (symtab_node::set_section, const_cast<char *>(section), true);\n }\n \n+void\n+symtab_node::set_section (const symtab_node &other)\n+{\n+  const char *section = other.get_section ();\n+  call_for_symbol_and_aliases\n+    (symtab_node::set_section, const_cast<char *>(section), true);\n+}\n+\n /* Return the initialization priority.  */\n \n priority_type\n@@ -1814,8 +1821,7 @@ symtab_node::resolve_alias (symtab_node *target, bool transparent)\n     {\n       error (\"section of alias %q+D must match section of its target\", decl);\n     }\n-  call_for_symbol_and_aliases (symtab_node::set_section,\n-\t\t\t     const_cast<char *>(target->get_section ()), true);\n+  set_section (*target);\n   if (target->implicit_section)\n     call_for_symbol_and_aliases (set_implicit_section, NULL, true);\n "}, {"sha": "c078a12ef84d1c3e7e2a738c522588a328ce11f7", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -4998,7 +4998,7 @@ ipa_tm_create_version (struct cgraph_node *old_node)\n   new_node->lowered = true;\n   new_node->tm_clone = 1;\n   if (!old_node->implicit_section)\n-    new_node->set_section (old_node->get_section ());\n+    new_node->set_section (*old_node);\n   get_cg_data (&old_node, true)->clone = new_node;\n \n   if (old_node->get_availability () >= AVAIL_INTERPOSABLE)"}, {"sha": "5b55832688c1bb8dfcf2a2d4228e616dfbdf60cc", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -259,7 +259,7 @@ get_emutls_init_templ_addr (tree decl)\n   if (targetm.emutls.tmpl_section)\n     set_decl_section_name (to, targetm.emutls.tmpl_section);\n   else\n-    set_decl_section_name (to, DECL_SECTION_NAME (decl));\n+    set_decl_section_name (to, decl);\n \n   /* Create varpool node for the new variable and finalize it if it is\n      not external one.  */"}, {"sha": "663f3ecfd1239fa8db527f150bde99e8052bc58e", "filename": "gcc/tree.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -773,6 +773,33 @@ set_decl_section_name (tree node, const char *value)\n   snode->set_section (value);\n }\n \n+/* Set section name of NODE to match the section name of OTHER.\n+\n+   set_decl_section_name (decl, other) is equivalent to\n+   set_decl_section_name (decl, DECL_SECTION_NAME (other)), but possibly more\n+   efficient.  */\n+void\n+set_decl_section_name (tree decl, const_tree other)\n+{\n+  struct symtab_node *other_node = symtab_node::get (other);\n+  if (other_node)\n+    {\n+      struct symtab_node *decl_node;\n+      if (VAR_P (decl))\n+    decl_node = varpool_node::get_create (decl);\n+      else\n+    decl_node = cgraph_node::get_create (decl);\n+      decl_node->set_section (*other_node);\n+    }\n+  else\n+    {\n+      struct symtab_node *decl_node = symtab_node::get (decl);\n+      if (!decl_node)\n+    return;\n+      decl_node->set_section (NULL);\n+    }\n+}\n+\n /* Return TLS model of a variable NODE.  */\n enum tls_model\n decl_tls_model (const_tree node)"}, {"sha": "684be10b440a7b7617cc284a68ce22d0e7ac216c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a92f794b8ad8011e6beb11a609efa635c4600/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8b9a92f794b8ad8011e6beb11a609efa635c4600", "patch": "@@ -4281,6 +4281,7 @@ extern tree decl_comdat_group (const_tree);\n extern tree decl_comdat_group_id (const_tree);\n extern const char *decl_section_name (const_tree);\n extern void set_decl_section_name (tree, const char *);\n+extern void set_decl_section_name (tree, const_tree);\n extern enum tls_model decl_tls_model (const_tree);\n extern void set_decl_tls_model (tree, enum tls_model);\n "}]}