{"sha": "630a1249a0053ef61fe50a31a348e78dfb229c22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwYTEyNDlhMDA1M2VmNjFmZTUwYTMxYTM0OGU3OGRmYjIyOWMyMg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:31:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:11Z"}, "message": "AVX512FP16: Add testcase for fma instructions\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vfmaddXXXph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vfmaddXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmsubXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmsubXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmaddXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmaddXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmsubXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmsubXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmaddXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmaddXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmsubXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmsubXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1b.c: Ditto.", "tree": {"sha": "6ce8659a1d322352276a4f5b3dae0b7414dcc5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce8659a1d322352276a4f5b3dae0b7414dcc5e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630a1249a0053ef61fe50a31a348e78dfb229c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630a1249a0053ef61fe50a31a348e78dfb229c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630a1249a0053ef61fe50a31a348e78dfb229c22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630a1249a0053ef61fe50a31a348e78dfb229c22/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede1820d2148b9bc41de2a22485b7608c9521eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede1820d2148b9bc41de2a22485b7608c9521eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede1820d2148b9bc41de2a22485b7608c9521eb2"}], "stats": {"total": 923, "additions": 923, "deletions": 0}, "files": [{"sha": "f9e2777196ab86ec971aa331092b25b5ce3fbf68", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ph\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmadd_ph (x1, x2, x3);\n+  x1 = _mm512_mask_fmadd_ph (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmadd_ph (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmadd_ph (m, x1, x2, x3);\n+  x1 = _mm512_fmadd_round_ph (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmadd_round_ph (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmadd_round_ph (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmadd_round_ph (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "71c2b8fb93024278f6584b1617675eabe348d870", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddXXXph-1b.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(fmadd_ph) (V512 * dest, V512 op1, V512 op2,\n+                 __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = v1.f32[i] * v3.f32[i] + v7.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = v2.f32[i] * v4.f32[i] + v8.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+EMULATE(m_fmadd_ph) (V512 * dest, V512 op1, V512 op2,\n+                   __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = v7.f32[i] * v1.f32[i] + v3.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = v8.f32[i] * v2.f32[i] + v4.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fmadd_ph) (HF(src1), HF(src2),\n+\t\t\t\t   HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fmadd_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\tHF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fmadd_ph) (HF(src1), HF(src2),\n+\t\t\t\t   HF(res), MASK_VALUE);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fmadd_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t   HF(src2), HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmadd_ph);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fmadd_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t   HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fmadd_round_ph) (HF(res), MASK_VALUE, HF(src1),\n+\t\t\t\t\tHF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmadd_ph);\n+\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fmadd_round_ph) (HF(src1), HF(src2), HF(res),\n+\t\t\t\t\t MASK_VALUE, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmadd_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fmadd_round_ph) (ZMASK_VALUE, HF(src1), HF(src2),\n+\t\t\t\t\t HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmadd_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "3b1147a41cde6bcc4be403f8c1db16e061fb3f38", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmsubXXXph-1a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ph\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fmsub_ph (x1, x2, x3);\n+  x1 = _mm512_mask_fmsub_ph (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fmsub_ph (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fmsub_ph (m, x1, x2, x3);\n+  x1 = _mm512_fmsub_round_ph (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t      | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmsub_round_ph (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF\n+\t\t\t\t   | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmsub_round_ph (x1, x2, x3, m, _MM_FROUND_TO_POS_INF\n+\t\t\t\t    | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmsub_round_ph (m, x1, x2, x3, _MM_FROUND_TO_ZERO\n+\t\t\t\t    | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "abb9a9bc826f1df748156486f3290a003a208c77", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmsubXXXph-1b.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,155 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(fmsub_ph) (V512 * dest, V512 op1, V512 op2,\n+                 __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = v1.f32[i] * v3.f32[i] - v7.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = v2.f32[i] * v4.f32[i] - v8.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+EMULATE(m_fmsub_ph) (V512 * dest, V512 op1, V512 op2,\n+                   __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = v7.f32[i] * v1.f32[i] - v3.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = v8.f32[i] * v2.f32[i] - v4.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fmsub_ph) (HF(src1), HF(src2), HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fmsub_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\tHF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fmsub_ph) (HF(src1), HF(src2), HF(res), MASK_VALUE);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fmsub_ph) (ZMASK_VALUE, HF(src1), HF(src2), HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmsub_ph);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fmsub_round_ph) (HF(src1), HF(src2), HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fmsub_round_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\tHF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmsub_ph);\n+\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fmsub_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t\t HF(res), MASK_VALUE, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fmsub_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fmsub_round_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t\t HF(src2), HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmsub_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+    abort ();\n+  }\n+}\n+"}, {"sha": "20e77ce7398b265b0fb35accf75017b49091efa3", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmaddXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ph\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmadd_ph (x1, x2, x3);\n+  x1 = _mm512_mask_fnmadd_ph (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmadd_ph (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmadd_ph (m, x1, x2, x3);\n+  x1 = _mm512_fnmadd_round_ph (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmadd_round_ph (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmadd_round_ph (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmadd_round_ph (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "b15b1bd11498536762666f672c0e52e90932a448", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmaddXXXph-1b.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,159 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(fnmadd_ph) (V512 * dest, V512 op1, V512 op2,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = -(v1.f32[i] * v3.f32[i]) + v7.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+                 v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = -(v2.f32[i] * v4.f32[i]) + v8.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+EMULATE(m_fnmadd_ph) (V512 * dest, V512 op1, V512 op2,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = -(v1.f32[i] * v7.f32[i]) + v3.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+                 v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = -(v2.f32[i] * v8.f32[i]) + v4.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fnmadd_ph) (HF(src1), HF(src2),\n+\t\t\t\t    HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fnmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fnmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fnmadd_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fnmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fnmadd_ph) (HF(src1), HF(src2),\n+\t\t\t\t    HF(res), MASK_VALUE);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fnmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fnmadd_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t    HF(src2), HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fnmadd_ph);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fnmadd_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t    HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fnmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fnmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fnmadd_round_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t HF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fnmadd_ph);\n+\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fnmadd_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t\t  HF(res), MASK_VALUE, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fnmadd_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmadd_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fnmadd_round_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t\t  HF(src2), HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fnmadd_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "eb05de463478e52e0e7ecdcb6079e0c5209c76fe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmsubXXXph-1a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ph\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x1, x2, x3;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm512_fnmsub_ph (x1, x2, x3);\n+  x1 = _mm512_mask_fnmsub_ph (x1, m, x2, x3);\n+  x3 = _mm512_mask3_fnmsub_ph (x1, x2, x3, m);\n+  x1 = _mm512_maskz_fnmsub_ph (m, x1, x2, x3);\n+  x1 = _mm512_fnmsub_round_ph (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t       | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmsub_round_ph (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF\n+\t\t\t\t    | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmsub_round_ph (x1, x2, x3, m, _MM_FROUND_TO_POS_INF\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmsub_round_ph (m, x1, x2, x3, _MM_FROUND_TO_ZERO\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "73f0172ca20e720aff294bd32046dfe20567100e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmsubXXXph-1b.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(fnmsub_ph) (V512 * dest, V512 op1, V512 op2,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+    int i;\n+    __mmask16 m1, m2;\n+    \n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+ \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = -(v1.f32[i] * v3.f32[i]) - v7.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+                 v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = -(v2.f32[i] * v4.f32[i]) - v8.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+EMULATE(m_fnmsub_ph) (V512 * dest, V512 op1, V512 op2,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    __mmask16 m1, m2;\n+\n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+                v5.f32[i] = 0;\n+            }\n+            else {\n+                v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+           v5.f32[i] = -(v1.f32[i] * v7.f32[i]) - v3.f32[i];\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+                 v6.f32[i] = 0;\n+            }\n+            else {\n+                v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = -(v2.f32[i] * v8.f32[i]) - v4.f32[i];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fnmsub_ph) (HF(src1), HF(src2),\n+\t\t\t\t    HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fnmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fnmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fnmsub_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fnmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fnmsub_ph) (HF(src1), HF(src2), HF(res), MASK_VALUE);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fnmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fnmsub_ph) (ZMASK_VALUE, HF(src1), HF(src2), HF(res));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fnmsub_ph);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_fnmsub_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t    HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fnmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(m_fnmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_fnmsub_round_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t HF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fnmsub_ph);\n+\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask3_fnmsub_round_ph) (HF(src1), HF(src2),\n+\t\t\t\t\t  HF(res), MASK_VALUE, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fnmsub_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(fnmsub_ph)(&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_fnmsub_round_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t\t  HF(src2), HF(res), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fnmsub_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+    abort ();\n+  }\n+}\n+"}, {"sha": "eea38b860aec2a243245a8584c9f66b358fff831", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmaddXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h yy, y2, y3;\n+volatile __m128h xx, x2, x3;\n+volatile __mmask8 m;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  yy = _mm256_mask_fmadd_ph (yy, m16, y2, y3);\n+  xx = _mm_mask_fmadd_ph (xx, m, x2, x3);\n+\n+  y3 = _mm256_mask3_fmadd_ph (yy, y2, y3, m16);\n+  x3 = _mm_mask3_fmadd_ph (xx, x2, x3, m);\n+\n+  yy = _mm256_maskz_fmadd_ph (m16, yy, y2, y3);\n+  xx = _mm_maskz_fmadd_ph (m, xx, x2, x3);\n+}"}, {"sha": "f6e4a9ae128f99283ef10adf07f0b1f097e9a4b9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmaddXXXph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmaddXXXph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmaddXXXph-1b.c\"\n+"}, {"sha": "add1abc2bea39f9fa05dff7c3b62fac65b65a16d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmsubXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h yy, y2, y3;\n+volatile __m128h xx, x2, x3;\n+volatile __mmask8 m;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  yy = _mm256_mask_fmsub_ph (yy, m16, y2, y3);\n+  xx = _mm_mask_fmsub_ph (xx, m, x2, x3);\n+\n+  y3 = _mm256_mask3_fmsub_ph (yy, y2, y3, m16);\n+  x3 = _mm_mask3_fmsub_ph (xx, x2, x3, m);\n+\n+  yy = _mm256_maskz_fmsub_ph (m16, yy, y2, y3);\n+  xx = _mm_maskz_fmsub_ph (m, xx, x2, x3);\n+}"}, {"sha": "b9c2085ecd416cfa082c833e94a2cb6002d45a19", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmsubXXXph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmsubXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmsubXXXph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmsubXXXph-1b.c\"\n+"}, {"sha": "6dad901358163e6357eb121566427dd7cda7cd88", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h yy, y2, y3;\n+volatile __m128h xx, x2, x3;\n+volatile __mmask8 m;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  yy = _mm256_mask_fnmadd_ph (yy, m16, y2, y3);\n+  xx = _mm_mask_fnmadd_ph (xx, m, x2, x3);\n+\n+  y3 = _mm256_mask3_fnmadd_ph (yy, y2, y3, m16);\n+  x3 = _mm_mask3_fnmadd_ph (xx, x2, x3, m);\n+\n+  yy = _mm256_maskz_fnmadd_ph (m16, yy, y2, y3);\n+  xx = _mm_maskz_fnmadd_ph (m, xx, x2, x3);\n+}"}, {"sha": "6c615d6541e499094e1e2b447350a1c551083604", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmaddXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfnmaddXXXph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfnmaddXXXph-1b.c\"\n+"}, {"sha": "1a7fd092b73c10d6d1f4c4ba63b8aefd294b6344", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1a.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h yy, y2, y3;\n+volatile __m128h xx, x2, x3;\n+volatile __mmask8 m;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  yy = _mm256_mask_fnmsub_ph (yy, m16, y2, y3);\n+  xx = _mm_mask_fnmsub_ph (xx, m, x2, x3);\n+\n+  y3 = _mm256_mask3_fnmsub_ph (yy, y2, y3, m16);\n+  x3 = _mm_mask3_fnmsub_ph (xx, x2, x3, m);\n+\n+  yy = _mm256_maskz_fnmsub_ph (m16, yy, y2, y3);\n+  xx = _mm_maskz_fnmsub_ph (m, xx, x2, x3);\n+}"}, {"sha": "6d72b3dc220dc21a4d71ed027f6ed767583a0674", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630a1249a0053ef61fe50a31a348e78dfb229c22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfnmsubXXXph-1b.c?ref=630a1249a0053ef61fe50a31a348e78dfb229c22", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfnmsubXXXph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfnmsubXXXph-1b.c\"\n+"}]}