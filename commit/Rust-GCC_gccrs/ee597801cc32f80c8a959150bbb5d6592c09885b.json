{"sha": "ee597801cc32f80c8a959150bbb5d6592c09885b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1OTc4MDFjYzMyZjgwYzhhOTU5MTUwYmJiNWQ2NTkyYzA5ODg1Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-12-01T13:13:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-12-01T13:13:23Z"}, "message": "re PR bootstrap/46730 (Failed to profiledbootstrap)\n\n2010-12-01  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46730\n\t* value-prof.c (gimple_ic): Always generate a separate merge BB.\n\n\t* g++.dg/tree-prof/indir-call-prof-2.C: New testcase.\n\nFrom-SVN: r167326", "tree": {"sha": "44803feb4e00bc3081c8260ed6256fa187ed2823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44803feb4e00bc3081c8260ed6256fa187ed2823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee597801cc32f80c8a959150bbb5d6592c09885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee597801cc32f80c8a959150bbb5d6592c09885b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee597801cc32f80c8a959150bbb5d6592c09885b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee597801cc32f80c8a959150bbb5d6592c09885b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b14df1dbd07e302aa5fa5251af9fc08e6e57fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14df1dbd07e302aa5fa5251af9fc08e6e57fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b14df1dbd07e302aa5fa5251af9fc08e6e57fac"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "56bb5347d2d4b1208b7fb3e97db0dc975f433c88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee597801cc32f80c8a959150bbb5d6592c09885b", "patch": "@@ -1,3 +1,8 @@\n+2010-12-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46730\n+\t* value-prof.c (gimple_ic): Always generate a separate merge BB.\n+\n 2010-11-30  Ian Lance Taylor  <iant@google.com>\n \n \t* config/i386/linux.h (ASM_SPEC): Pass -v as -v, not -V.  Remove"}, {"sha": "55f33a1068e69f37b84383b534b9495be6b1309e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee597801cc32f80c8a959150bbb5d6592c09885b", "patch": "@@ -1,3 +1,8 @@\n+2010-12-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46730\n+\t* g++.dg/tree-prof/indir-call-prof-2.C: New testcase.\n+\n 2010-11-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fma-7.c: New file, test that (a*b)+c and"}, {"sha": "e20cc64d37392cbd5ec012e39aa7773fa1e132ce", "filename": "gcc/testsuite/g++.dg/tree-prof/indir-call-prof-2.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof-2.C?ref=ee597801cc32f80c8a959150bbb5d6592c09885b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-options \"-O\" } */\n+\n+int foo1(void) { return 0; }\n+int bar1(void) { throw 1; }\n+void foo2(void) { }\n+void bar2(void) { throw 1; }\n+void __attribute__((noinline,noclone)) test1(void (*f)(void)) { (*f)(); }\n+void __attribute__((noinline,noclone)) test2(void (*f)(void)) { (*f)(); }\n+int __attribute__((noinline,noclone)) test3(int (*f)(void)) { return (*f)(); }\n+int __attribute__((noinline,noclone)) test4(int (*f)(void)) { return (*f)(); }\n+int __attribute__((noinline,noclone)) test5(int (*f)(void), int x) { return x ? x : (*f)(); }\n+int __attribute__((noinline,noclone)) test6(int (*f)(void), int x) { return x ? x : (*f)(); }\n+void __attribute__((noinline,noclone)) test7(void (*f)(void)) { try { (*f)(); } catch (...) {} }\n+void __attribute__((noinline,noclone)) test8(void (*f)(void)) { try { (*f)();  } catch (...) {}}\n+int __attribute__((noinline,noclone)) test9(int (*f)(void)) { try { return (*f)(); } catch (...) {return 0;} }\n+int __attribute__((noinline,noclone)) test10(int (*f)(void)) { try { return (*f)(); } catch (...) {return 0;} }\n+int __attribute__((noinline,noclone)) test11(int (*f)(void), int x) { try { return x ? x : (*f)(); } catch (...) {return 0;} }\n+int __attribute__((noinline,noclone)) test12(int (*f)(void), int x) { try { return x ? x : (*f)(); } catch (...) {return 0;} }\n+\n+int main()\n+{\n+  for (int i = 0; i < 100; ++i) test1(foo2);\n+  for (int i = 0; i < 100; ++i) try { test2(bar2); } catch (...) {} \n+  for (int i = 0; i < 100; ++i) test3(foo1);\n+  for (int i = 0; i < 100; ++i) try { test4(bar1); } catch (...) {} \n+  for (int i = 0; i < 100; ++i) test5(foo1, 0);\n+  for (int i = 0; i < 100; ++i) try { test6(bar1, 0); } catch (...) {} \n+  for (int i = 0; i < 100; ++i) test7(foo2);\n+  for (int i = 0; i < 100; ++i) try { test8(bar2); } catch (...) {} \n+  for (int i = 0; i < 100; ++i) test9(foo1);\n+  for (int i = 0; i < 100; ++i) try { test10(bar1); } catch (...) {} \n+  for (int i = 0; i < 100; ++i) test11(foo1, 0);\n+  for (int i = 0; i < 100; ++i) try { test12(bar1, 0); } catch (...) {} \n+  return 0;\n+}"}, {"sha": "6011922db0af3d623da717d026fa912720248c9f", "filename": "gcc/value-prof.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee597801cc32f80c8a959150bbb5d6592c09885b/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=ee597801cc32f80c8a959150bbb5d6592c09885b", "patch": "@@ -1146,10 +1146,15 @@ gimple_ic (gimple icall_stmt, struct cgraph_node *direct_call,\n   icall_bb->count = all - count;\n \n   /* Do not disturb existing EH edges from the indirect call.  */\n-  if (last_stmt (icall_bb) != icall_stmt)\n+  if (gsi_stmt (gsi_last_bb (icall_bb)) != icall_stmt)\n     e_ij = split_block (icall_bb, icall_stmt);\n   else\n-    e_ij = find_fallthru_edge (icall_bb->succs);\n+    {\n+      e_ij = find_fallthru_edge (icall_bb->succs);\n+      e_ij->probability = REG_BR_PROB_BASE;\n+      e_ij->count = all - count;\n+      e_ij = single_pred_edge (split_edge (e_ij));\n+    }\n   join_bb = e_ij->dest;\n   join_bb->count = all;\n "}]}