{"sha": "1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhYmJmYjBmNGE5ZmJkYzc3ZTFlYTRkYjczMDI1ODZmMDA4OTVlMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-12T17:21:15Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-03T14:52:37Z"}, "message": "c++: ICE with deduction guide in checking type-dep [PR99009, PR97034]\n\nWe represent deduction guides with FUNCTION_DECLs, but they are built\nwithout DECL_CONTEXT, leading to an ICE in type_dependent_expression_p\non the assert that the type of a function template with no dependent\n(innermost!) template arguments must be non-dependent.  Consider the\nattached class-deduction79.C: we create a deduction guide:\n\n  template<class T> G(T)-> E<Z>::G<T>\n\nwe deduce T and create a partial instantiation:\n\n  G(T) -> E<Z>::G<T> [with T = int]\n\nAnd then do_class_deduction wants to create a CALL_EXPR from the above\nusing build_new_function_call -> build_over_call which calls mark_used\n-> maybe_instantiate_noexcept -> type_dependent_expression_p.\n\nThere, the innermost template arguments are non-dependent (<int>), but\nthe fntype is dependent -- the return type is a TYPENAME_TYPE, and\nsince we have no DECL_CONTEXT, this check holds:\n\n  /* Otherwise, if the function decl isn't from a dependent scope, it can't be\n     type-dependent.  Checking this is important for functions with auto return\n     type, which looks like a dependent type.  */\n  if (TREE_CODE (expression) == FUNCTION_DECL\n      && !(DECL_CLASS_SCOPE_P (expression)\n           && dependent_type_p (DECL_CONTEXT (expression)))\n\nwhereupon we ICE.\n\nThis patch fixes it by deferring the class deduction until the\nenclosing scope is non-dependent.  build_deduction_guide and maybe_aggr_guide\nneeded a little tweaking to make the deduction work in a member\ntemplate.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97034\n\tPR c++/99009\n\t* pt.c (build_deduction_guide): Use INNERMOST_TEMPLATE_ARGS.\n\t(maybe_aggr_guide): Use the original template type where needed.  In\n\ta class member template, partially instantiate the result of\n\tcollect_ctor_idx_types.\n\t(do_class_deduction): Defer the deduction until the enclosing\n\tscope is non-dependent.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97034\n\tPR c++/99009\n\t* g++.dg/cpp1z/class-deduction81.C: New test.\n\t* g++.dg/cpp1z/class-deduction82.C: New test.\n\t* g++.dg/cpp2a/class-deduction-aggr8.C: New test.\n\t* g++.dg/cpp2a/class-deduction-aggr9.C: New test.\n\t* g++.dg/cpp2a/class-deduction-aggr10.C: New test.", "tree": {"sha": "98f220954fdc781fea26a10059280c9dfe9382bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f220954fdc781fea26a10059280c9dfe9382bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15cf7fe3556d11aa895cee0f162f6678da9daca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15cf7fe3556d11aa895cee0f162f6678da9daca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15cf7fe3556d11aa895cee0f162f6678da9daca6"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "a4686e0affbcb4b30c34a5360ed727e515b77ae7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -28643,7 +28643,7 @@ build_deduction_guide (tree type, tree ctor, tree outer_args, tsubst_flags_t com\n \n       tree ctmpl = CLASSTYPE_TI_TEMPLATE (type);\n       tparms = DECL_TEMPLATE_PARMS (ctmpl);\n-      targs = CLASSTYPE_TI_ARGS (type);\n+      targs = INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (type));\n       ci = NULL_TREE;\n       fargs = NULL_TREE;\n       loc = DECL_SOURCE_LOCATION (ctmpl);\n@@ -28866,8 +28866,22 @@ maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n   if (init == NULL_TREE)\n     return NULL_TREE;\n \n+  /* We might be creating a guide for a class member template, e.g.,\n+\n+       template<typename U> struct A {\n+\t template<typename T> struct B { T t; };\n+       };\n+\n+     At this point, A will have been instantiated.  Below, we need to\n+     use both A<U>::B<T> (TEMPLATE_TYPE) and A<int>::B<T> (TYPE) types.  */\n+  const bool member_template_p\n+    = (DECL_TEMPLATE_INFO (tmpl)\n+       && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (tmpl)));\n   tree type = TREE_TYPE (tmpl);\n-  if (!CP_AGGREGATE_TYPE_P (type))\n+  tree template_type = (member_template_p\n+\t\t\t? TREE_TYPE (DECL_TI_TEMPLATE (tmpl))\n+\t\t\t: type);\n+  if (!CP_AGGREGATE_TYPE_P (template_type))\n     return NULL_TREE;\n \n   /* No aggregate candidate for copy-initialization.  */\n@@ -28884,10 +28898,21 @@ maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n   tree parms = NULL_TREE;\n   if (BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n-      init = reshape_init (type, init, complain);\n+      init = reshape_init (template_type, init, complain);\n       if (init == error_mark_node)\n \treturn NULL_TREE;\n       parms = collect_ctor_idx_types (init, parms);\n+      /* If we're creating a deduction guide for a member class template,\n+\t we've used the original template pattern type for the reshape_init\n+\t above; this is done because we want PARMS to be a template parameter\n+\t type, something that can be deduced when used as a function template\n+\t parameter.  At this point the outer class template has already been\n+\t partially instantiated (we deferred the deduction until the enclosing\n+\t scope is non-dependent).  Therefore we have to partially instantiate\n+\t PARMS, so that its template level is properly reduced and we don't get\n+\t mismatches when deducing types using the guide with PARMS.  */\n+      if (member_template_p)\n+\tparms = tsubst (parms, DECL_TI_ARGS (tmpl), complain, init);\n     }\n   else if (TREE_CODE (init) == TREE_LIST)\n     {\n@@ -29225,6 +29250,11 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   if (DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl))\n     return ptype;\n \n+  /* Wait until the enclosing scope is non-dependent.  */\n+  if (DECL_CLASS_SCOPE_P (tmpl)\n+      && dependent_type_p (DECL_CONTEXT (tmpl)))\n+    return ptype;\n+\n   /* Initializing one placeholder from another.  */\n   if (init && TREE_CODE (init) == TEMPLATE_PARM_INDEX\n       && is_auto (TREE_TYPE (init))"}, {"sha": "86a682481575830aab602364d8c6ee235bdc4958", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction81.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction81.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction81.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction81.C?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/97034\n+// { dg-do compile { target c++17 } }\n+\n+template <typename Z>\n+struct E {\n+  template <typename T>\n+  struct G {\n+    T t;\n+    G(T) { }\n+  };\n+\n+  void fn() { G{1}; }\n+};\n+\n+void\n+g ()\n+{\n+  E<int> e;\n+  e.fn ();\n+}"}, {"sha": "238024c508feb7b6bff5d63f77fb6b0ce2dc014e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction82.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction82.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction82.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction82.C?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/99009\n+// { dg-do compile { target c++17 } }\n+\n+template<typename> struct B {\n+  B(int = A()) {}\n+  template <typename ...> struct A;\n+};\n+\n+template<typename T> struct X {\n+  template <T...> struct Y;\n+  X() { Y y; };\n+};"}, {"sha": "be922bbfb73814ad921058a729bb4fce472da3ae", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr10.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr10.C?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/97034\n+// { dg-do compile { target c++20 } }\n+\n+namespace N {\n+template <typename, typename> struct S {\n+  template <typename T, typename U> S(T, U);\n+};\n+} // namespace N\n+template <int I> struct E {\n+  template<typename U> struct M {\n+    template <typename T> struct G { T t; };\n+    void fn() { G{N::S<char, int>{'a', 1}}; }\n+  };\n+};\n+\n+void\n+g ()\n+{\n+  E<1>::M<int> m;\n+  m.fn ();\n+}"}, {"sha": "399061100aeebbb42ed2add524e1c27579b88c86", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr8.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr8.C?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/97034\n+// { dg-do compile { target c++20 } }\n+\n+namespace N {\n+template <typename, typename> struct S {\n+  template <typename T, typename U> S(T, U);\n+};\n+} // namespace N\n+template <int> struct E {\n+  template <typename T> struct G { T t; };\n+  void fn() { G{N::S<char, int>{'a', 1}}; }\n+};\n+\n+void\n+g ()\n+{\n+  E<1> e;\n+  e.fn ();\n+}"}, {"sha": "245a04cd5f90aadaf1578cb142982a03a5a3442b", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr9.C?ref=1dabbfb0f4a9fbdc77e1ea4db7302586f00895e1", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/97034\n+// { dg-do compile { target c++20 } }\n+\n+template<typename>\n+struct E {\n+  template <typename T>\n+  struct G {\n+    T t;\n+  };\n+\n+  void fn() { G{1}; }\n+};\n+\n+void\n+g () {\n+  E<int> e;\n+  e.fn ();\n+}"}]}