{"sha": "4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhNWZkOGFjYTExNDBhZGYwOTE3ZGM1MzM5N2VmZGRjN2ZkNGMxMQ==", "commit": {"author": {"name": "Dragan Mladjenovic", "email": "draganm@gcc.gnu.org", "date": "2019-11-19T18:14:32Z"}, "committer": {"name": "Dragan Mladjenovic", "email": "draganm@gcc.gnu.org", "date": "2019-11-19T18:14:32Z"}, "message": "[MIPS] Prevent MSA branches from being put into delay slots\n\n This patch tightens the instruction definitions to make sure\n that MSA branch instructions cannot be put into delay slots and have their\n delay slots eligible for being filled. Also, MSA *div*3 patterns use MSA\n branches for zero checks but are not marked as being multi instruction and\n thus could be put into delay slots. This patch fixes that.\n\ngcc/ChangeLog:\n\n2019-11-19  Zoran Jovanovic <zoran.jovanovic@mips.com>\n\t\tDragan Mladjenovic  <dmladjenovic@wavecomp.com>\n\n\t* config/mips/mips-msa.md (msa_<msabr>_<msafmt_f>, msa_<msabr>_v_<msafmt_f>):\n\tMark as not having \"likely\" version.\n\t* config/mips/mips.md (insn_count): The simd_div instruction with\n\tTARGET_CHECK_ZERO_DIV consists of 3 instructions.\n\t(can_delay): Exclude simd_branch.\n\t(defile_delay *): Add simd_branch instructions.\n\tThey have one regular delay slot.\n\ngcc/testsuite/ChangeLog:\n\n2019-11-19  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>\n\n\t* gcc.target/mips/msa-ds.c: New test.\n\nFrom-SVN: r278458", "tree": {"sha": "1702499848761bf8961de779a0e6c7d4c2ca3596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1702499848761bf8961de779a0e6c7d4c2ca3596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/comments", "author": null, "committer": null, "parents": [{"sha": "aa5355781fd8746cb2ac8f0e456f8ac6dc4bf9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5355781fd8746cb2ac8f0e456f8ac6dc4bf9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5355781fd8746cb2ac8f0e456f8ac6dc4bf9c5"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "3516235f6065692fed291a3d8b7283f27528f42f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "patch": "@@ -1,3 +1,14 @@\n+2019-11-19  Zoran Jovanovic <zoran.jovanovic@mips.com>\n+\t\t\tDragan Mladjenovic  <dmladjenovic@wavecomp.com>\n+\n+\t* config/mips/mips-msa.md (msa_<msabr>_<msafmt_f>, msa_<msabr>_v_<msafmt_f>):\n+\tMark as not having \"likely\" version.\n+\t* config/mips/mips.md (insn_count): The simd_div instruction with\n+\tTARGET_CHECK_ZERO_DIV consists of 3 instructions.\n+\t(can_delay): Exclude simd_branch.\n+\t(defile_delay *): Add simd_branch instructions.\n+\tThey have one regular delay slot.\n+\n 2019-11-19  Martin Liska  <mliska@suse.cz>\n \n \t* toplev.c (general_init): Move the call..."}, {"sha": "100cf99c22d4324565fb935ce79f4bcb47272c03", "filename": "gcc/config/mips/mips-msa.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Fconfig%2Fmips%2Fmips-msa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Fconfig%2Fmips%2Fmips-msa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-msa.md?ref=4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "patch": "@@ -2719,7 +2719,8 @@\n }\n  [(set_attr \"type\" \"simd_branch\")\n   (set_attr \"mode\" \"<MODE>\")\n-  (set_attr \"compact_form\" \"never\")])\n+  (set_attr \"compact_form\" \"never\")\n+  (set_attr \"branch_likely\" \"no\")])\n \n (define_insn \"msa_<msabr>_v_<msafmt_f>\"\n  [(set (pc) (if_then_else\n@@ -2738,4 +2739,5 @@\n }\n  [(set_attr \"type\" \"simd_branch\")\n   (set_attr \"mode\" \"TI\")\n-  (set_attr \"compact_form\" \"never\")])\n+  (set_attr \"compact_form\" \"never\")\n+  (set_attr \"branch_likely\" \"no\")])"}, {"sha": "929e3684908228e79d605da07a732c7fe02f06b5", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "patch": "@@ -560,6 +560,12 @@\n \t (eq_attr \"type\" \"idiv,idiv3\")\n \t (symbol_ref \"mips_idiv_insns (GET_MODE (PATTERN (insn)))\")\n \n+\t ;; simd div have 3 instruction if TARGET_CHECK_ZERO_DIV is true.\n+\t (eq_attr \"type\" \"simd_div\")\n+\t (if_then_else (match_test \"TARGET_CHECK_ZERO_DIV\")\n+\t\t       (const_int 3)\n+\t\t       (const_int 1))\n+\n \t (not (eq_attr \"sync_mem\" \"none\"))\n \t (symbol_ref \"mips_sync_loop_insns (insn, operands)\")]\n \t(const_int 1)))\n@@ -759,7 +765,7 @@\n \n ;; Can the instruction be put into a delay slot?\n (define_attr \"can_delay\" \"no,yes\"\n-  (if_then_else (and (eq_attr \"type\" \"!branch,call,jump\")\n+  (if_then_else (and (eq_attr \"type\" \"!branch,call,jump,simd_branch\")\n \t\t     (eq_attr \"hazard\" \"none\")\n \t\t     (match_test \"get_attr_insn_count (insn) == 1\"))\n \t\t(const_string \"yes\")\n@@ -1098,7 +1104,7 @@\n \n ;; Branches that have delay slots and don't have likely variants do\n ;; not annul on false.\n-(define_delay (and (eq_attr \"type\" \"branch\")\n+(define_delay (and (eq_attr \"type\" \"branch,simd_branch\")\n \t\t   (not (match_test \"TARGET_MIPS16\"))\n \t\t   (ior (match_test \"TARGET_CB_NEVER\")\n \t\t\t(and (eq_attr \"compact_form\" \"maybe\")"}, {"sha": "fc275fa0a7ffa02f5a8e56aa5a06dea377a24b7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "patch": "@@ -1,3 +1,7 @@\n+2019-11-19  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>\n+\n+\t* gcc.target/mips/msa-ds.c: New test.\n+\n 2019-11-19  Richard Sandiford  <richard.sandiford@arm.com>\n gcc/\n \tRevert:"}, {"sha": "c6932b280cb3586ae475174c286bb38b24663666", "filename": "gcc/testsuite/gcc.target/mips/msa-ds.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa5fd8aca1140adf0917dc53397efddc7fd4c11/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsa-ds.c?ref=4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mmsa -mfp64 -mhard-float\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+/* Check that delay slots for MSA branches are filled. */\n+\n+typedef unsigned v4si __attribute__ ((vector_size (16)));\n+\n+int __attribute__ ((cold)) foo (v4si v , int a, int b)\n+{\n+  int c = 0xf0f0f0f0;\n+  int f = __builtin_msa_bnz_w (v);\n+\n+  if (f)\n+   return a + c;\n+  else\n+   return b + c;\n+}\n+\n+int __attribute__ ((cold)) bar (v4si v , int a, int b)\n+{\n+  int c = 0xf0f0f0f0;\n+  int f = __builtin_msa_bz_w (v);\n+\n+  if (f)\n+   return a + c;\n+  else\n+   return b + c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"foo:.*nop.*jr.*foo,\" } } */\n+/* { dg-final { scan-assembler-not \"bar:.*nop.*jr.*bar,\" } } */"}]}