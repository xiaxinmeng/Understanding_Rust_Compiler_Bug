{"sha": "af9f5d95df023eab3779878815bc2ad09870f36e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5ZjVkOTVkZjAyM2VhYjM3Nzk4Nzg4MTViYzJhZDA5ODcwZjM2ZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2015-02-04T14:23:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2015-02-04T14:23:47Z"}, "message": "Simplify XOR of (AND or IOR) of XOR.\n\nfor  gcc/ChangeLog\n\n\tPR debug/64817\n\t* simplify-rtx.c (simplify_binary_operation_1): Simplify one\n\tof two XORs that have an intervening AND or IOR.\n\nFrom-SVN: r220405", "tree": {"sha": "6e157abd20a27c5839f432d59185a44538a8581a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e157abd20a27c5839f432d59185a44538a8581a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af9f5d95df023eab3779878815bc2ad09870f36e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9f5d95df023eab3779878815bc2ad09870f36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9f5d95df023eab3779878815bc2ad09870f36e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9f5d95df023eab3779878815bc2ad09870f36e/comments", "author": null, "committer": null, "parents": [{"sha": "a720f0efffdf29c2f486e3d825446be4aa77b375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a720f0efffdf29c2f486e3d825446be4aa77b375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a720f0efffdf29c2f486e3d825446be4aa77b375"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "977e208052c64e1a880aa2598b420098f82d1bca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9f5d95df023eab3779878815bc2ad09870f36e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9f5d95df023eab3779878815bc2ad09870f36e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af9f5d95df023eab3779878815bc2ad09870f36e", "patch": "@@ -1,5 +1,9 @@\n 2015-02-04  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR debug/64817\n+\t* simplify-rtx.c (simplify_binary_operation_1): Simplify one\n+\tof two XORs that have an intervening AND or IOR.\n+\n \tPR debug/64817\n \t* simplify-rtx.c (simplify_binary_operation_1): Rewrite\n \tsimplification of XOR of AND to not allocate new rtx before"}, {"sha": "04452c6e4478c22ee86dbdc93f20d3b650cf8fa4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9f5d95df023eab3779878815bc2ad09870f36e/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9f5d95df023eab3779878815bc2ad09870f36e/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=af9f5d95df023eab3779878815bc2ad09870f36e", "patch": "@@ -2708,6 +2708,39 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t\t\t\t\t\tXEXP (op0, 1), mode),\n \t\t\t\t    op1);\n \n+      /* Given (xor (ior (xor A B) C) D), where B, C and D are\n+\t constants, simplify to (xor (ior A C) (B&~C)^D), canceling\n+\t out bits inverted twice and not set by C.  Similarly, given\n+\t (xor (and (xor A B) C) D), simplify without inverting C in\n+\t the xor operand: (xor (and A C) (B&C)^D).\n+      */\n+      else if ((GET_CODE (op0) == IOR || GET_CODE (op0) == AND)\n+\t       && GET_CODE (XEXP (op0, 0)) == XOR\n+\t       && CONST_INT_P (op1)\n+\t       && CONST_INT_P (XEXP (op0, 1))\n+\t       && CONST_INT_P (XEXP (XEXP (op0, 0), 1)))\n+\t{\n+\t  enum rtx_code op = GET_CODE (op0);\n+\t  rtx a = XEXP (XEXP (op0, 0), 0);\n+\t  rtx b = XEXP (XEXP (op0, 0), 1);\n+\t  rtx c = XEXP (op0, 1);\n+\t  rtx d = op1;\n+\t  HOST_WIDE_INT bval = INTVAL (b);\n+\t  HOST_WIDE_INT cval = INTVAL (c);\n+\t  HOST_WIDE_INT dval = INTVAL (d);\n+\t  HOST_WIDE_INT xcval;\n+\n+\t  if (op == IOR)\n+\t    xcval = cval;\n+\t  else\n+\t    xcval = ~cval;\n+\n+\t  return simplify_gen_binary (XOR, mode,\n+\t\t\t\t      simplify_gen_binary (op, mode, a, c),\n+\t\t\t\t      gen_int_mode ((bval & xcval) ^ dval,\n+\t\t\t\t\t\t    mode));\n+\t}\n+\n       /* Given (xor (and A B) C), using P^Q == (~P&Q) | (~Q&P),\n \t we can transform like this:\n             (A&B)^C == ~(A&B)&C | ~C&(A&B)"}]}