{"sha": "766a9002a3d5fb6701de2d84ce689379811eabff", "node_id": "C_kwDOANBUbNoAKDc2NmE5MDAyYTNkNWZiNjcwMWRlMmQ4NGNlNjg5Mzc5ODExZWFiZmY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-16T14:13:57Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-17T10:23:25Z"}, "message": "frust-cfg: Only allow double quoted values\n\nThis commit separates the `handle_cfg_option()` function in two,\nseparating the parsing logic from the session logic. The parsing logic\nis able to be unit tested, and now only allows quoted values.", "tree": {"sha": "3a94ffcbbc033f140cb1ec44cb70ad6e1739faa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a94ffcbbc033f140cb1ec44cb70ad6e1739faa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766a9002a3d5fb6701de2d84ce689379811eabff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766a9002a3d5fb6701de2d84ce689379811eabff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766a9002a3d5fb6701de2d84ce689379811eabff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766a9002a3d5fb6701de2d84ce689379811eabff/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81ba63f4829c12b89e87564c398e95879c89db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81ba63f4829c12b89e87564c398e95879c89db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81ba63f4829c12b89e87564c398e95879c89db1"}], "stats": {"total": 224, "additions": 147, "deletions": 77}, "files": [{"sha": "883e133daec9bfed2f6f26be3a4013392f6f66a9", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -66,6 +66,7 @@ GRS_OBJS = \\\n     rust/rust-gcc.o \\\n     rust/rust-token.o \\\n     rust/rust-lex.o \\\n+    rust/rust-cfg-parser.o \\\n     rust/rust-parse.o \\\n     rust/rust-ast-full-test.o \\\n     rust/rust-session-manager.o \\"}, {"sha": "a6f34b6e83a3fb1e4b46efd953455f308d53aadd", "filename": "gcc/rust/parse/rust-cfg-parser.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -0,0 +1,75 @@\n+#include \"rust-cfg-parser.h\"\n+#include \"selftest.h\"\n+\n+namespace Rust {\n+bool\n+parse_cfg_option (const std::string &input, std::string &key,\n+\t\t  std::string &value)\n+{\n+  key.clear ();\n+  value.clear ();\n+\n+  auto equal = input.find ('=');\n+\n+  // If there is no equal sign, it means there is no value. Clean up the key\n+  // and return\n+  if (equal == std::string::npos)\n+    {\n+      key = input;\n+\n+      // FIXME: Make sure key is a proper identifier\n+\n+      return true;\n+    }\n+\n+  key = input.substr (0, equal);\n+\n+  auto remaining_input = input.substr (equal + 1);\n+  if (remaining_input[0] != '\"' || remaining_input.back () != '\"')\n+    return false;\n+\n+  // Remove the quotes around the value, by advancing one character\n+  value = remaining_input.substr (1);\n+  // And trimming the rightmost character. This is fine since we've already\n+  // checked that both the first and last characters were quotes.\n+  value.resize (value.size () - 1);\n+\n+  // FIXME: We need to sanitize here and make sure that both key and value\n+  // are proper identifiers\n+\n+  return true;\n+}\n+\n+} // namespace Rust\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+void\n+rust_cfg_parser_test (void)\n+{\n+  std::string key;\n+  std::string value;\n+\n+  ASSERT_TRUE (Rust::parse_cfg_option (\"key-no-value\", key, value));\n+  ASSERT_EQ (key, \"key-no-value\");\n+  ASSERT_TRUE (value.empty ());\n+\n+  ASSERT_TRUE (Rust::parse_cfg_option (\"k=\\\"v\\\"\", key, value));\n+  ASSERT_EQ (key, \"k\");\n+  ASSERT_EQ (value, \"v\");\n+\n+  // values should be between double quotes\n+  ASSERT_FALSE (Rust::parse_cfg_option (\"k=v\", key, value));\n+\n+  // No value is an error if there is an equal sign\n+  ASSERT_FALSE (Rust::parse_cfg_option (\"k=\", key, value));\n+\n+  // No key is an error\n+  ASSERT_FALSE (Rust::parse_cfg_option (\"=\", key, value));\n+  ASSERT_FALSE (Rust::parse_cfg_option (\"=value\", key, value));\n+}\n+} // namespace selftest\n+\n+#endif // CHECKING_P"}, {"sha": "a4b860f1a0c81b55835ad7fc966bb4f183a6e6a3", "filename": "gcc/rust/parse/rust-cfg-parser.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-cfg-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-cfg-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-cfg-parser.h?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -0,0 +1,57 @@\n+/* This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>. */\n+\n+#ifndef RUST_CFG_PARSER_H\n+#define RUST_CFG_PARSER_H\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+\n+#include <string>\n+\n+namespace Rust {\n+/**\n+ * Parse a `key` or `key=\"value\"` pair given to the `-frust-cfg` compiler\n+ * option.\n+ *\n+ * The format is as follows:\n+ *\n+ * -frust-cfg=<input>\n+ *\n+ * cfg_input: identifier | identifier '=' '\"' identifier '\"'\n+ *\n+ * @param input User input given to the -frust-cfg option\n+ * @param key String in which to store the parsed `key`.\n+ * @param value String in which to store the parsed `value` if it exists\n+ *\n+ * @return false if the given input was invalid, true otherwise\n+ */\n+bool\n+parse_cfg_option (const std::string &input, std::string &key,\n+\t\t  std::string &value);\n+} // namespace Rust\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+extern void\n+rust_cfg_parser_test (void);\n+} // namespace selftest\n+\n+#endif // CHECKING_P\n+\n+#endif // RUST_CFG_PARSER_H"}, {"sha": "f2c1301d5988933ec46863de9e6010ece72e89c5", "filename": "gcc/rust/parse/rust-parse.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-parse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Fparse%2Frust-parse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.cc?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -118,5 +118,4 @@ extract_module_path (const AST::AttrVec &inner_attrs,\n \n   return path;\n }\n-\n } // namespace Rust"}, {"sha": "5ecd79b154fa64f2bd1c979e7e17bfd645716aac", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -33,6 +33,7 @@\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"selftest.h\"\n+#include \"rust-cfg-parser.h\"\n \n #include <mpfr.h>\n // note: header files must be in this order or else forward declarations don't\n@@ -453,6 +454,7 @@ run_rust_tests ()\n {\n   // Call tests for the rust frontend here\n   simple_assert ();\n+  rust_cfg_parser_test ();\n }\n } // namespace selftest\n "}, {"sha": "cd2c5902481dc346ff442619c307a7ba7de7c2e2", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 11, "deletions": 75, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -29,6 +29,7 @@\n #include \"rust-tycheck-dump.h\"\n #include \"rust-ast-resolve-unused.h\"\n #include \"rust-compile.h\"\n+#include \"rust-cfg-parser.h\"\n \n #include \"diagnostic.h\"\n #include \"input.h\"\n@@ -382,87 +383,22 @@ Session::handle_cfg_option (const std::string &input)\n   std::string key;\n   std::string value;\n \n-  enum pstate\n-  {\n-    KEY,\n-    EQ,\n-    VAL,\n-    DONE,\n-    ERROR\n-  };\n-\n-  // FIXME\n-  // we need to use the GCC self_test framework to unit-test this its\n-  // likely got a bunch of bugs. This simple parser could be extracted to a\n-  // helper function to be more easily unit-tested or it could be tested via\n-  // checking what the target_options contain\n-  bool expect_quote = false;\n-  pstate s = KEY;\n-  for (const auto &ch : input)\n+  // Refactor this if needed\n+  if (!parse_cfg_option (input, key, value))\n     {\n-      if (ch == ' ')\n-\t{\n-\t  if (!key.empty ())\n-\t    s = EQ;\n-\t  else if (!value.empty ())\n-\t    s = DONE;\n-\t  else\n-\t    {\n-\t      s = ERROR;\n-\t      break;\n-\t    }\n-\t}\n-      else if (ch == '\"')\n-\t{\n-\t  expect_quote = !expect_quote;\n-\t}\n-      else if (ch == '=')\n-\t{\n-\t  if (key.empty ())\n-\t    {\n-\t      s = ERROR;\n-\t      break;\n-\t    }\n-\n-\t  s = VAL;\n-\t}\n-      else\n-\t{\n-\t  if (s == KEY)\n-\t    key.push_back (ch);\n-\t  else if (s == VAL)\n-\t    value.push_back (ch);\n-\t  else\n-\t    {\n-\t      s = ERROR;\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  if (key.empty () && value.empty ())\n-    s = ERROR;\n-\n-  if (expect_quote)\n-    s = ERROR;\n-\n-  if (s == ERROR)\n-    {\n-      rust_error_at (Location (),\n-\t\t     \"invalid %<-frust-cfg=option%> expected %<key%> or \"\n-\t\t     \"key=%<value%> got %<%s%>\",\n-\t\t     input.c_str ());\n+      rust_error_at (\n+\tLocation (),\n+\t\"invalid argument to %<-frust-cfg%>: Accepted formats are \"\n+\t\"%<-frust-cfg=key%> or %<-frust-cfg=key=\\\"value\\\"%> (quoted)\");\n       return false;\n     }\n \n   if (value.empty ())\n-    {\n-      // rustc does not seem to error on dup key\n-      options.target_data.insert_key (key);\n-      return true;\n-    }\n+    // rustc does not seem to error on dup key\n+    options.target_data.insert_key (key);\n+  else\n+    options.target_data.insert_key_value_pair (key, value);\n \n-  options.target_data.insert_key_value_pair (key, value);\n   return true;\n }\n "}, {"sha": "1852efaf8df9f462d2fb252725a4bd29f769d1d9", "filename": "gcc/testsuite/rust/compile/cfg5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a9002a3d5fb6701de2d84ce689379811eabff/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs?ref=766a9002a3d5fb6701de2d84ce689379811eabff", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-w -frust-cfg=A=B\" }\n+// { dg-additional-options \"-w -frust-cfg=A=\\\"B\\\"\" }\n struct Foo;\n impl Foo {\n     #[cfg(A = \"B\")]"}]}