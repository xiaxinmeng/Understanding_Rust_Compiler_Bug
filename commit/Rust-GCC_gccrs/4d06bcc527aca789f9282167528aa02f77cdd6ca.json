{"sha": "4d06bcc527aca789f9282167528aa02f77cdd6ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwNmJjYzUyN2FjYTc4OWY5MjgyMTY3NTI4YWEwMmY3N2NkZDZjYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@redhat.com", "date": "2000-07-15T14:58:53Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2000-07-15T14:58:53Z"}, "message": "Fix (<cond> ? FOO++ : BAR++) == 2 from misoptimizing FOO++ into ++FOO without bumping up the comparison value\n\nFrom-SVN: r35046", "tree": {"sha": "cc186924767d7116187ea8c5addebe72555b7ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc186924767d7116187ea8c5addebe72555b7ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d06bcc527aca789f9282167528aa02f77cdd6ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d06bcc527aca789f9282167528aa02f77cdd6ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d06bcc527aca789f9282167528aa02f77cdd6ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d06bcc527aca789f9282167528aa02f77cdd6ca/comments", "author": null, "committer": null, "parents": [{"sha": "bbed132f325e85bb0ee7cdfeac9c4504278e99d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbed132f325e85bb0ee7cdfeac9c4504278e99d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbed132f325e85bb0ee7cdfeac9c4504278e99d6"}], "stats": {"total": 160, "additions": 152, "deletions": 8}, "files": [{"sha": "45b1d54c124e13a0b9790b614200c03e8f390a60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d06bcc527aca789f9282167528aa02f77cdd6ca", "patch": "@@ -1,3 +1,9 @@\n+2000-07-15  Michael Meissner  <meissner@redhat.com>\n+\n+\t* fold-const.c (fold): When optimizing FOO++ == CONST into ++FOO\n+\t== CONST + INCREMENT, don't overwrite the tree node for FOO++,\n+\tcreate a new node instead.\n+\n 2000-07-15  Neil Booth  <NeilB@earthling.net>\n \n \t* README.Portability: Correct example about calling a function"}, {"sha": "f2591159184d4a2eab07e77bf09386b0f9eed74c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4d06bcc527aca789f9282167528aa02f77cdd6ca", "patch": "@@ -6136,7 +6136,15 @@ fold (expr)\n \t\ttree newconst\n \t\t  = fold (build (PLUS_EXPR, TREE_TYPE (varop),\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n-\t\tTREE_SET_CODE (varop, PREINCREMENT_EXPR);\n+\n+\t\t/* Do not overwrite the current varop to be a preincrement,\n+\t\t   create a new node so that we won't confuse our caller who\n+\t\t   might create trees and throw them away, reusing the\n+\t\t   arguments that they passed to build.  This shows up in\n+\t\t   the THEN or ELSE parts of ?: being postincrements.  */\n+\t\tvarop = build (PREINCREMENT_EXPR, TREE_TYPE (varop),\n+\t\t\t       TREE_OPERAND (varop, 0),\n+\t\t\t       TREE_OPERAND (varop, 1));\n \n \t\t/* If VAROP is a reference to a bitfield, we must mask\n \t\t   the constant by the width of the field.  */\n@@ -6180,9 +6188,9 @@ fold (expr)\n \t\t  }\n \t\t\t\t\t\t\t \n \n-\t\tt = build (code, type, TREE_OPERAND (t, 0),\n-\t\t\t   TREE_OPERAND (t, 1));\n-\t\tTREE_OPERAND (t, constopnum) = newconst;\n+\t\tt = build (code, type,\n+\t\t\t   (constopnum == 0) ? newconst : varop,\n+\t\t\t   (constopnum == 1) ? newconst : varop);\n \t\treturn t;\n \t      }\n \t  }\n@@ -6195,7 +6203,15 @@ fold (expr)\n \t\ttree newconst\n \t\t  = fold (build (MINUS_EXPR, TREE_TYPE (varop),\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n-\t\tTREE_SET_CODE (varop, PREDECREMENT_EXPR);\n+\n+\t\t/* Do not overwrite the current varop to be a predecrement,\n+\t\t   create a new node so that we won't confuse our caller who\n+\t\t   might create trees and throw them away, reusing the\n+\t\t   arguments that they passed to build.  This shows up in\n+\t\t   the THEN or ELSE parts of ?: being postdecrements.  */\n+\t\tvarop = build (PREDECREMENT_EXPR, TREE_TYPE (varop),\n+\t\t\t       TREE_OPERAND (varop, 0),\n+\t\t\t       TREE_OPERAND (varop, 1));\n \n \t\tif (TREE_CODE (TREE_OPERAND (varop, 0)) == COMPONENT_REF\n \t\t    && DECL_BIT_FIELD(TREE_OPERAND\n@@ -6234,9 +6250,9 @@ fold (expr)\n \t\t  }\n \t\t\t\t\t\t\t \n \n-\t\tt = build (code, type, TREE_OPERAND (t, 0),\n-\t\t\t   TREE_OPERAND (t, 1));\n-\t\tTREE_OPERAND (t, constopnum) = newconst;\n+\t\tt = build (code, type,\n+\t\t\t   (constopnum == 0) ? newconst : varop,\n+\t\t\t   (constopnum == 1) ? newconst : varop);\n \t\treturn t;\n \t      }\n \t  }"}, {"sha": "e778d70f28935ea841292a8c33b4c935b3d57fba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d06bcc527aca789f9282167528aa02f77cdd6ca", "patch": "@@ -1,3 +1,7 @@\n+2000-07-15  Michael Meissner  <meissner@redhat.com>\n+\n+\t* gcc.c-torture/execute/20000715-1.c: New test.\n+\n 2000-07-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20000707-1.c: New test."}, {"sha": "43af11480b41cd369919382315e2d4a4f4cd754f", "filename": "gcc/testsuite/gcc.c-torture/execute/20000715-1.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000715-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d06bcc527aca789f9282167528aa02f77cdd6ca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000715-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000715-1.c?ref=4d06bcc527aca789f9282167528aa02f77cdd6ca", "patch": "@@ -0,0 +1,118 @@\n+void abort(void);\n+void exit(int);\n+\n+void\n+test1(void)\n+{\n+  int x = 3, y = 2;\n+\n+  if ((x < y ? x++ : y++) != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+void\n+test2(void)\n+{\n+  int x = 3, y = 2, z;\n+\n+  z = (x < y) ? x++ : y++;\n+  if (z != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+void\n+test3(void)\n+{\n+  int x = 3, y = 2;\n+  int xx = 3, yy = 2;\n+\n+  if ((xx < yy ? x++ : y++) != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+int x, y;\n+\n+static void\n+init_xy(void)\n+{\n+  x = 3;\n+  y = 2;\n+}\n+\n+void\n+test4(void)\n+{\n+  init_xy();\n+  if ((x < y ? x++ : y++) != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+void\n+test5(void)\n+{\n+  int z;\n+\n+  init_xy();\n+  z = (x < y) ? x++ : y++;\n+  if (z != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+void\n+test6(void)\n+{\n+  int xx = 3, yy = 2;\n+  int z;\n+\n+  init_xy();\n+  z = (xx < y) ? x++ : y++;\n+  if (z != 2)\n+    abort ();\n+\n+  if (x != 3)\n+    abort ();\n+\n+  if (y != 3)\n+    abort ();\n+}\n+\n+int\n+main(){\n+  test1 ();\n+  test2 ();\n+  test3 ();\n+  test4 ();\n+  test5 ();\n+  test6 ();\n+  exit (0);\n+}"}]}