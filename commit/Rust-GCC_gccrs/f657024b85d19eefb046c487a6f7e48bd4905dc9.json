{"sha": "f657024b85d19eefb046c487a6f7e48bd4905dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1NzAyNGI4NWQxOWVlZmIwNDZjNDg3YTZmN2U0OGJkNDkwNWRjOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-08-20T05:47:46Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-08-20T05:47:46Z"}, "message": "re PR fortran/54301 (Add optional warning if pointer assigning a local variable to a nonlocal pointer)\n\n2012-08-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54301\n        * expr.c (gfc_check_pointer_assign): Warn when the pointer\n        might outlive its target.\n        * gfortran.h (struct gfc_option_t): Add warn_target_lifetime.\n        * options.c (gfc_init_options, set_wall, gfc_handle_option):\n        handle it.\n        * invoke.texi (-Wtarget-lifetime): Document it.\n        (-Wall): Implied it.\n        * lang.opt (-Wtarget-lifetime): New flag.\n\n2012-08-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54301\n        * gfortran.dg/warn_target_lifetime_1.f90: New.\n\nFrom-SVN: r190522", "tree": {"sha": "51ca2ece33f0faaea70effd3caefa5961c1fb915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ca2ece33f0faaea70effd3caefa5961c1fb915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f657024b85d19eefb046c487a6f7e48bd4905dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f657024b85d19eefb046c487a6f7e48bd4905dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f657024b85d19eefb046c487a6f7e48bd4905dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f657024b85d19eefb046c487a6f7e48bd4905dc9/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15f1338f99a03da935ecbb1f04097469296e91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f1338f99a03da935ecbb1f04097469296e91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15f1338f99a03da935ecbb1f04097469296e91a"}], "stats": {"total": 118, "additions": 115, "deletions": 3}, "files": [{"sha": "de255eaf79fac3016de68f1bacf26210c622bd16", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -1,3 +1,15 @@\n+2012-08-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54301\n+\t* expr.c (gfc_check_pointer_assign): Warn when the pointer\n+\tmight outlive its target.\n+\t* gfortran.h (struct gfc_option_t): Add warn_target_lifetime.\n+\t* options.c (gfc_init_options, set_wall, gfc_handle_option):\n+\thandle it.\n+\t* invoke.texi (-Wtarget-lifetime): Document it.\n+\t(-Wall): Implied it.\n+\t* lang.opt (-Wtarget-lifetime): New flag.\n+\n 2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/54298"}, {"sha": "6f1283d152e71353566e6d4873b5a4c313cbcec9", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -3659,6 +3659,38 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t  }\n     }\n \n+  /* Warn if it is the LHS pointer may lives longer than the RHS target.  */\n+  if (gfc_option.warn_target_lifetime\n+      && rvalue->expr_type == EXPR_VARIABLE\n+      && !rvalue->symtree->n.sym->attr.save\n+      && !attr.pointer && !rvalue->symtree->n.sym->attr.host_assoc\n+      && !rvalue->symtree->n.sym->attr.in_common\n+      && !rvalue->symtree->n.sym->attr.use_assoc\n+      && !rvalue->symtree->n.sym->attr.dummy)\n+    {\n+      bool warn;\n+      gfc_namespace *ns;\n+\n+      warn = lvalue->symtree->n.sym->attr.dummy\n+\t     || lvalue->symtree->n.sym->attr.result\n+\t     || lvalue->symtree->n.sym->attr.host_assoc\n+\t     || lvalue->symtree->n.sym->attr.use_assoc\n+\t     || lvalue->symtree->n.sym->attr.in_common;\n+\n+      if (rvalue->symtree->n.sym->ns->proc_name\n+\t  && rvalue->symtree->n.sym->ns->proc_name->attr.flavor != FL_PROCEDURE\n+\t  && rvalue->symtree->n.sym->ns->proc_name->attr.flavor != FL_PROGRAM)\n+       for (ns = rvalue->symtree->n.sym->ns;\n+\t    ns->proc_name && ns->proc_name->attr.flavor != FL_PROCEDURE;\n+\t    ns = ns->parent)\n+\tif (ns->parent == lvalue->symtree->n.sym->ns)\n+\t  warn = true;\n+\n+      if (warn)\n+\tgfc_warning (\"Pointer at %L in pointer assignment might outlive the \"\n+\t\t     \"pointer target\", &lvalue->where);\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "4c8a856e210b35852d705957a7893fd1e1067655", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -2226,6 +2226,7 @@ typedef struct\n   int warn_realloc_lhs;\n   int warn_realloc_lhs_all;\n   int warn_compare_reals;\n+  int warn_target_lifetime;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "dfd4ca7fad0b54c2a8f0e9261e918a08451a53a1", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -147,7 +147,7 @@ and warnings}.\n -Wimplicit-procedure -Wintrinsic-shadow -Wintrinsics-std @gol\n -Wline-truncation -Wno-align-commons -Wno-tabs -Wreal-q-constant @gol\n -Wsurprising -Wunderflow -Wunused-parameter -Wrealloc-lhs Wrealloc-lhs-all @gol\n--fmax-errors=@var{n} -fsyntax-only -pedantic -pedantic-errors\n+-Wtarget-lifetime -fmax-errors=@var{n} -fsyntax-only -pedantic -pedantic-errors\n }\n \n @item Debugging Options\n@@ -729,8 +729,8 @@ we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing}, @option{-Wampersand},\n @option{-Wconversion}, @option{-Wcompare-reals}, @option{-Wsurprising},\n @option{-Wintrinsics-std}, @option{-Wno-tabs}, @option{-Wintrinsic-shadow},\n-@option{-Wline-truncation}, @option{-Wreal-q-constant} and\n-@option{-Wunused}.\n+@option{-Wline-truncation}, @option{-Wtarget-lifetime},\n+@option{-Wreal-q-constant} and @option{-Wunused}.\n \n @item -Waliasing\n @opindex @code{Waliasing}\n@@ -941,6 +941,11 @@ allocatable variable; this includes scalars and derived types.\n Warn when comparing real or complex types for equality or inequality.\n Enabled by @option{-Wall}.\n \n+@item -Wtarget-lifetime\n+@opindex @code{Wtargt-lifetime}\n+Warn if the pointer in a pointer assignment might be longer than the its\n+target. This option is implied by @option{-Wall}.\n+\n @item -Werror\n @opindex @code{Werror}\n @cindex warnings, to errors"}, {"sha": "b38b1e8bea19d47b1e97f1b2642374d01decf4f7", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -262,6 +262,10 @@ Wrealloc-lhs-all\n Fortran Warning\n Warn when a left-hand-side variable is reallocated\n \n+Wtarget-lifetime\n+Fortran Warning\n+Warn if the pointer in a pointer assignment might outlive its target\n+\n Wreturn-type\n Fortran Warning\n ; Documented in C"}, {"sha": "cbec705b195ca070dffabb74d89cc235690d340b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -114,6 +114,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_realloc_lhs = 0;\n   gfc_option.warn_realloc_lhs_all = 0;\n   gfc_option.warn_compare_reals = 0;\n+  gfc_option.warn_target_lifetime = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -475,6 +476,7 @@ set_Wall (int setting)\n   gfc_option.warn_real_q_constant = setting;\n   gfc_option.warn_unused_dummy_argument = setting;\n   gfc_option.warn_compare_reals = setting;\n+  gfc_option.warn_target_lifetime = setting;\n \n   warn_return_type = setting;\n   warn_switch = setting;\n@@ -688,6 +690,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_tabs = value;\n       break;\n \n+    case OPT_Wtarget_lifetime:\n+      gfc_option.warn_target_lifetime = value;\n+      break;\n+\n     case OPT_Wunderflow:\n       gfc_option.warn_underflow = value;\n       break;"}, {"sha": "c115e553b9cf169fc91833f8788bf7d0b6194d1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -1,3 +1,8 @@\n+2012-08-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54301\n+\t* gfortran.dg/warn_target_lifetime_1.f90: New.\n+\n 2012-08-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/54298"}, {"sha": "fafa0f123bd92d43839bc39cf88f584bb7b964cf", "filename": "gcc/testsuite/gfortran.dg/warn_target_lifetime_1.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_target_lifetime_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f657024b85d19eefb046c487a6f7e48bd4905dc9/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_target_lifetime_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_target_lifetime_1.f90?ref=f657024b85d19eefb046c487a6f7e48bd4905dc9", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do compile }\n+! { dg-options \"-Wtarget-lifetime\" }\n+!\n+! PR fortran/54301\n+!\n+function f () result (ptr)\n+  integer, pointer :: ptr(:)\n+  integer, allocatable, target :: a(:)\n+  allocate(a(5))\n+\n+  ptr => a ! { dg-warning \"Pointer at .1. in pointer assignment might outlive the pointer target\" }\n+  a = [1,2,3,4,5]\n+end function\n+\n+\n+subroutine foo()\n+  integer, pointer :: ptr(:)\n+  call bar ()\n+contains\n+  subroutine bar ()\n+    integer, target :: tgt(5)\n+    ptr => tgt ! { dg-warning \"Pointer at .1. in pointer assignment might outlive the pointer target\" }\n+  end subroutine bar\n+end subroutine foo\n+\n+function foo3(tgt)\n+  integer, target :: tgt\n+  integer, pointer :: foo3\n+  foo3 => tgt\n+end function\n+\n+subroutine sub()\n+  implicit none\n+  integer, pointer :: ptr\n+  integer, target :: tgt\n+  ptr => tgt\n+\n+  block\n+    integer, pointer :: p2\n+    integer, target :: tgt2\n+    p2 => tgt2\n+    p2 => tgt\n+    ptr => p2\n+    ptr => tgt\n+    ptr => tgt2 ! { dg-warning \"Pointer at .1. in pointer assignment might outlive the pointer target\" }\n+  end block\n+end subroutine sub"}]}