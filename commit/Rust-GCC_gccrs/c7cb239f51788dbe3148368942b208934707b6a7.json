{"sha": "c7cb239f51788dbe3148368942b208934707b6a7", "node_id": "C_kwDOANBUbNoAKGM3Y2IyMzlmNTE3ODhkYmUzMTQ4MzY4OTQyYjIwODkzNDcwN2I2YTc", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-10T21:55:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-10T22:13:47Z"}, "message": "c++: Lambda context mangling\n\nVAR and FIELD decls can become part of a lambda context, when the\nlambda is 'attached' to that entity (It's a C++20 ODR thing that was\ndiscovered with modules, but is actually separate.)  We were not\nmarking those decls as substitution candidates, leading to demangling\nfailures and variance from other compilers.\n\nThis patch bumps the ABI, and adds the contexts them to the\nsubstitution table.  This is the intent of the ABI.\n\n\tgcc/\n\t* common.opt (-fabi-version=): Document 18.\n\t* doc/invoke.texi (-fabi-version): Document 18.\n\tgcc/c-family/\n\t* c-opts.cc (c_common_post_options): Bump abi to 18.\n\tgcc/cp/\n\t* mangle.cc (write_prefix): Add VAR_DECL & FIELD_DECL to\n\tsubstitution table under abi=18.  Note possible mismatch.\n\tgcc/testsuite/\n\t* g++.dg/abi/lambda-ctx1-17.C: New.\n\t* g++.dg/abi/lambda-ctx1-18.C: New.\n\t* g++.dg/abi/lambda-ctx1-18vs17.C: New.\n\t* g++.dg/abi/lambda-ctx1.h: New.\n\t* g++.dg/abi/lambda-vis.C: Adjust expected mangles.\n\t* g++.dg/abi/macro0.C: Adjust.", "tree": {"sha": "5623c918585a6fb4aa69910b91dc982d2100933d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5623c918585a6fb4aa69910b91dc982d2100933d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7cb239f51788dbe3148368942b208934707b6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7cb239f51788dbe3148368942b208934707b6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7cb239f51788dbe3148368942b208934707b6a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7cb239f51788dbe3148368942b208934707b6a7/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b0fe393859729215b0db5d28f2faea30c6ec32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b0fe393859729215b0db5d28f2faea30c6ec32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b0fe393859729215b0db5d28f2faea30c6ec32"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "55cebf68f9c3f12eaa0592868b1ad068fa5980a0", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -975,7 +975,7 @@ c_common_post_options (const char **pfilename)\n \n   /* Change flag_abi_version to be the actual current ABI level, for the\n      benefit of c_cpp_builtins, and to make comparison simpler.  */\n-  const int latest_abi_version = 17;\n+  const int latest_abi_version = 18;\n   /* Generate compatibility aliases for ABI v13 (8.2) by default.  */\n   const int abi_compat_default = 13;\n "}, {"sha": "bce3e514f65bbf18c0d6394fca85292478c1f284", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -1004,6 +1004,9 @@ Driver Undocumented\n ;     member initializers in C++14 and up.\n ;     Default in G++ 12.\n ;\n+; 18: Corrects errors in mangling of lambdas with additional context.\n+;     Default in G++ 13.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "1215463089b5479e85abb3a0151e8c81bea9b9ee", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -1252,7 +1252,14 @@ write_prefix (const tree node)\n \t{\n \t  /* <data-member-prefix> := <member source-name> M */\n \t  write_char ('M');\n-\t  return;\n+\n+\t  /* Before ABI 18, we did not count these as substitution\n+\t     candidates.  This leads to incorrect demanglings (and\n+\t     ABI divergence to other compilers).  */\n+\t  if (abi_warn_or_compat_version_crosses (18))\n+\t    G.need_abi_warning = true;\n+\t  if (!abi_version_at_least (18))\n+\t    return;\n \t}\n     }\n "}, {"sha": "271c8bb846852bea6e2289ea871a4c2404b8a2f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -2973,6 +2973,9 @@ Version 17, which first appeared in G++ 12, fixes layout of classes\n that inherit from aggregate classes with default member initializers\n in C++14 and up.\n \n+Version 18, which first appeard in G++ 13, fixes manglings of lambdas\n+that have additional context.\n+\n See also @option{-Wabi}.\n \n @item -fabi-compat-version=@var{n}"}, {"sha": "42f277a2117080ce89d02bb213698dae9631557c", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1-17.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-17.C?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options -fabi-version=17 }\n+\n+#include \"lambda-ctx1.h\"\n+\n+// These demangle incorrectly, due to a missed substitution candidate\n+// { dg-final { scan-assembler {_ZNK1C1fMUlT_E_clIMS_iEEDaS0_:} } }\n+// { dg-final { scan-assembler {_ZNK2L2MUlT_T0_E_clIifEEvS_S0_:} } }\n+// { dg-final { scan-assembler {_ZNK1B2L3MUlT_T0_E_clIjdEEvS0_S1_:} } }\n+// { dg-final { scan-assembler {_Z3fooIN1qMUlvE_EN1qMUlvE0_EEiOT_OT0_:} } }"}, {"sha": "c1c9e274d7f38a18a6b6fa368e038a322b71f6ac", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1-18.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options -fabi-version=18 }\n+\n+#include \"lambda-ctx1.h\"\n+\n+// These correctly include the lambda's extra context as a\n+// substitution candidate, and thus demangle as expected\n+// { dg-final { scan-assembler {_ZNK1C1fMUlT_E_clIMS_iEEDaS1_:} } }\n+// { dg-final { scan-assembler {_ZNK2L2MUlT_T0_E_clIifEEvS0_S1_:} } }\n+// { dg-final { scan-assembler {_ZNK1B2L3MUlT_T0_E_clIjdEEvS1_S2_:} } }\n+// { dg-final { scan-assembler {_Z3fooIN1qMUlvE_ENS0_UlvE0_EEiOT_OT0_:} } }"}, {"sha": "f5ec905dec3a2a1c2439c7f0581b87a257941be2", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1-18vs17.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options {-fabi-version=18 -Wabi=17} }\n+\n+#include \"lambda-ctx1.h\"\n+\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK1B2L3MUlT_T0_E_clIjdEEvS0_S1_'\\) and '-fabi-version=18' \\('_ZNK1B2L3MUlT_T0_E_clIjdEEvS1_S2_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK2L2MUlT_T0_E_clIifEEvS_S0_'\\) and '-fabi-version=18' \\('_ZNK2L2MUlT_T0_E_clIifEEvS0_S1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK1C1fMUlT_E_clIMS_iEEDaS0_'\\) and '-fabi-version=18' \\('_ZNK1C1fMUlT_E_clIMS_iEEDaS1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_Z3fooIN1qMUlvE_EN1qMUlvE0_EEiOT_OT0_'\\) and '-fabi-version=18' \\('_Z3fooIN1qMUlvE_ENS0_UlvE0_EEiOT_OT0_'\\) [^\\n]*\\n} }"}, {"sha": "9afb66aae76a3407492ba4d2d6befc6b3a2b71e2", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1.h?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -0,0 +1,20 @@\n+inline auto L2 = [] <typename T, typename U> (T, U) -> void {};\n+namespace B\n+{\n+  inline auto L3 = [] <typename T, typename U> (T, U) -> void {};\n+}\n+\n+struct C\n+{\n+  int f = [] (auto){ return 1;}(&C::f);\n+  C ();\n+};\n+\n+C::C ()\n+{\n+  L2 (1, 1.2f);\n+  B::L3 (1u, 1.2);\n+}\n+\n+template <typename A, typename B> int foo (A&&, B&&) {return 0;}\n+inline int q = foo ([](){}, [](){});"}, {"sha": "81cffcbe5a6d7eaeed329ddca2bf2ffb9a052e58", "filename": "gcc/testsuite/g++.dg/abi/lambda-vis.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -13,9 +13,11 @@ int gvar = gfoo (capture ([]{}));\n \n inline int ivar = ifoo (capture ([]{}));\n \n-// { dg-final { scan-assembler {_?_Z7captureINL4svarMUlvE_EE7WrapperIT_EOS2_:} } }\n-// { dg-final { scan-assembler {_?_Z7captureIN4gvarMUlvE_EE7WrapperIT_EOS2_:} } }\n-// { dg-final { scan-assembler {_?_Z7captureIN4ivarMUlvE_EE7WrapperIT_EOS2_:} } }\n+// These manglings change between ABIs 17 and 18 (the final\n+// substitution number).\n+// { dg-final { scan-assembler {_?_Z7captureINL4svarMUlvE_EE7WrapperIT_EOS3_:} } }\n+// { dg-final { scan-assembler {_?_Z7captureIN4gvarMUlvE_EE7WrapperIT_EOS3_:} } }\n+// { dg-final { scan-assembler {_?_Z7captureIN4ivarMUlvE_EE7WrapperIT_EOS3_:} } }\n \n // Calls to the foos are emitted.\n // { dg-final { scan-assembler {call[ \\t]*_?_Z4sfooI7WrapperINL4svarMUlvE_EEEiT_} { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "4a0e9d06ca0f846c3386c145dcadf0b04fee30f8", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7cb239f51788dbe3148368942b208934707b6a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=c7cb239f51788dbe3148368942b208934707b6a7", "patch": "@@ -1,6 +1,6 @@\n // This testcase will need to be kept in sync with c_common_post_options.\n // { dg-options \"-fabi-version=0\" }\n \n-#if __GXX_ABI_VERSION != 1017\n+#if __GXX_ABI_VERSION != 1018\n #error \"Incorrect value of __GXX_ABI_VERSION\"\n #endif"}]}