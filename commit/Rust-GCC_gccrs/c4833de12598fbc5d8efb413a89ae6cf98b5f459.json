{"sha": "c4833de12598fbc5d8efb413a89ae6cf98b5f459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ4MzNkZTEyNTk4ZmJjNWQ4ZWZiNDEzYTg5YWU2Y2Y5OGI1ZjQ1OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-24T09:00:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-24T09:00:45Z"}, "message": "decl.c (gnat_to_gnu_entity): In ASIS mode, do a minimal translation for root types with discriminants.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <Concurrent types>: In\n\tASIS mode, do a minimal translation for root types with discriminants.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Subunit>: Move around.\n\t<N_Entry_Body, N_Protected_Body, N_Task_Body>: Likewise.  In ASIS mode,\n\tprocess the declarations attached to the body.\n\nFrom-SVN: r230792", "tree": {"sha": "9220dc1c269c874df02585567bdb0a21cfcb3364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9220dc1c269c874df02585567bdb0a21cfcb3364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4833de12598fbc5d8efb413a89ae6cf98b5f459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4833de12598fbc5d8efb413a89ae6cf98b5f459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4833de12598fbc5d8efb413a89ae6cf98b5f459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4833de12598fbc5d8efb413a89ae6cf98b5f459/comments", "author": null, "committer": null, "parents": [{"sha": "93200f92e5e0c4450e7a350887112f9c974d8e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93200f92e5e0c4450e7a350887112f9c974d8e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93200f92e5e0c4450e7a350887112f9c974d8e3f"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "caea65a6a22109ebd9135be0ccb34ebb72545a40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c4833de12598fbc5d8efb413a89ae6cf98b5f459", "patch": "@@ -1,3 +1,11 @@\n+2015-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <Concurrent types>: In\n+\tASIS mode, do a minimal translation for root types with discriminants.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Subunit>: Move around.\n+\t<N_Entry_Body, N_Protected_Body, N_Task_Body>: Likewise.  In ASIS mode,\n+\tprocess the declarations attached to the body.\n+\n 2015-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): In type_annotate_only mode, do"}, {"sha": "3ae079ff9047f217ac52955a4fbde522735f0f6b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c4833de12598fbc5d8efb413a89ae6cf98b5f459", "patch": "@@ -4737,13 +4737,51 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       maybe_present = true;\n       break;\n \n-    case E_Task_Type:\n-    case E_Task_Subtype:\n     case E_Protected_Type:\n     case E_Protected_Subtype:\n-      /* Concurrent types are always transformed into their record type.  */\n+    case E_Task_Type:\n+    case E_Task_Subtype:\n+      /* If we are just annotating types and have no equivalent record type,\n+\t just return void_type, except for root types that have discriminants\n+\t because the discriminants will very likely be used in the declarative\n+\t part of the associated body so they need to be translated.  */\n       if (type_annotate_only && No (gnat_equiv_type))\n-\tgnu_type = void_type_node;\n+\t{\n+\t  if (Has_Discriminants (gnat_entity)\n+\t      && Root_Type (gnat_entity) == gnat_entity)\n+\t    {\n+\t      tree gnu_field_list = NULL_TREE;\n+\t      Entity_Id gnat_field;\n+\n+\t      /* This is a minimal version of the E_Record_Type handling.  */\n+\t      gnu_type = make_node (RECORD_TYPE);\n+\t      TYPE_NAME (gnu_type) = gnu_entity_name;\n+\n+\t      for (gnat_field = First_Stored_Discriminant (gnat_entity);\n+\t\t   Present (gnat_field);\n+\t\t   gnat_field = Next_Stored_Discriminant (gnat_field))\n+\t\t{\n+\t\t  tree gnu_field\n+\t\t    = gnat_to_gnu_field (gnat_field, gnu_type, false,\n+\t\t\t\t\t definition, debug_info_p);\n+\n+\t\t  save_gnu_tree (gnat_field,\n+\t\t\t\t build3 (COMPONENT_REF, TREE_TYPE (gnu_field),\n+\t\t\t\t\t build0 (PLACEHOLDER_EXPR, gnu_type),\n+\t\t\t\t\t gnu_field, NULL_TREE),\n+\t\t\t\t true);\n+\n+\t\t  DECL_CHAIN (gnu_field) = gnu_field_list;\n+\t\t  gnu_field_list = gnu_field;\n+\t\t}\n+\n+\t      TYPE_FIELDS (gnu_type) = nreverse (gnu_field_list);\n+\t    }\n+\t  else\n+\t    gnu_type = void_type_node;\n+\t}\n+\n+      /* Concurrent types are always transformed into their record type.  */\n       else\n \tgnu_decl = gnat_to_gnu_entity (gnat_equiv_type, NULL_TREE, 0);\n       maybe_present = true;"}, {"sha": "fdcf9a3c2203114ef85aeb0cec70a7ded039ea25", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4833de12598fbc5d8efb413a89ae6cf98b5f459/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c4833de12598fbc5d8efb413a89ae6cf98b5f459", "patch": "@@ -7272,6 +7272,19 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = alloc_stmt_list ();\n       break;\n \n+    case N_Subunit:\n+      gnu_result = gnat_to_gnu (Proper_Body (gnat_node));\n+      break;\n+\n+    case N_Entry_Body:\n+    case N_Protected_Body:\n+    case N_Task_Body:\n+      /* These nodes should only be present when annotating types.  */\n+      gcc_assert (type_annotate_only);\n+      process_decls (Declarations (gnat_node), Empty, Empty, true, true);\n+      gnu_result = alloc_stmt_list ();\n+      break;\n+\n     case N_Subprogram_Body_Stub:\n     case N_Package_Body_Stub:\n     case N_Protected_Body_Stub:\n@@ -7286,10 +7299,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \t}\n       break;\n \n-    case N_Subunit:\n-      gnu_result = gnat_to_gnu (Proper_Body (gnat_node));\n-      break;\n-\n     /***************************/\n     /* Chapter 11: Exceptions  */\n     /***************************/\n@@ -7662,8 +7671,6 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Procedure_Specification:\n     case N_Op_Concat:\n     case N_Component_Association:\n-    case N_Protected_Body:\n-    case N_Task_Body:\n       /* These nodes should only be present when annotating types.  */\n       gcc_assert (type_annotate_only);\n       gnu_result = alloc_stmt_list ();"}]}