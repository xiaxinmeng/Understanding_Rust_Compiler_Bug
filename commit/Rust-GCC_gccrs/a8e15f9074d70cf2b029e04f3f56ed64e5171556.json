{"sha": "a8e15f9074d70cf2b029e04f3f56ed64e5171556", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlMTVmOTA3NGQ3MGNmMmIwMjllMDRmM2Y1NmVkNjRlNTE3MTU1Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-15T10:53:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-15T10:53:29Z"}, "message": "tree-ssa-pre.c (get_representative_for): Make sure to return the value number of SSA names.\n\n2016-07-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (get_representative_for): Make sure to return\n\tthe value number of SSA names.\n\t(phi_translate_1): get_representative_for cannot return NULL.\n\t(do_pre_regular_insertion): Remove redundant call to\n\tfully_constant_expression.\n\t(do_pre_partial_partial_insertion): Likewise.\n\nFrom-SVN: r238370", "tree": {"sha": "2aae7d8dd4c803b42f5755515450c664ec7bc8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aae7d8dd4c803b42f5755515450c664ec7bc8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e15f9074d70cf2b029e04f3f56ed64e5171556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e15f9074d70cf2b029e04f3f56ed64e5171556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e15f9074d70cf2b029e04f3f56ed64e5171556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e15f9074d70cf2b029e04f3f56ed64e5171556/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddbbcb1981b4f7c8ee18f4aecaf84c2cb2d98e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbbcb1981b4f7c8ee18f4aecaf84c2cb2d98e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbbcb1981b4f7c8ee18f4aecaf84c2cb2d98e2e"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "7e04fe94814142409f8cad8d9747265a1a0e9de8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e15f9074d70cf2b029e04f3f56ed64e5171556/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e15f9074d70cf2b029e04f3f56ed64e5171556/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8e15f9074d70cf2b029e04f3f56ed64e5171556", "patch": "@@ -1,3 +1,12 @@\n+2016-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (get_representative_for): Make sure to return\n+\tthe value number of SSA names.\n+\t(phi_translate_1): get_representative_for cannot return NULL.\n+\t(do_pre_regular_insertion): Remove redundant call to\n+\tfully_constant_expression.\n+\t(do_pre_partial_partial_insertion): Likewise.\n+\n 2016-07-15  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-scalar-evolution.c (simple_iv_with_niters): New funcion."}, {"sha": "c45eb2e9095a91d957614dc99c57111af9f703bf", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e15f9074d70cf2b029e04f3f56ed64e5171556/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e15f9074d70cf2b029e04f3f56ed64e5171556/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a8e15f9074d70cf2b029e04f3f56ed64e5171556", "patch": "@@ -1365,7 +1365,7 @@ get_representative_for (const pre_expr e)\n   switch (e->kind)\n     {\n     case NAME:\n-      return PRE_EXPR_NAME (e);\n+      return VN_INFO (PRE_EXPR_NAME (e))->valnum;\n     case CONSTANT:\n       return PRE_EXPR_CONSTANT (e);\n     case NARY:\n@@ -1380,7 +1380,7 @@ get_representative_for (const pre_expr e)\n \t  {\n \t    pre_expr rep = expression_for_id (i);\n \t    if (rep->kind == NAME)\n-\t      return PRE_EXPR_NAME (rep);\n+\t      return VN_INFO (PRE_EXPR_NAME (rep))->valnum;\n \t    else if (rep->kind == CONSTANT)\n \t      return PRE_EXPR_CONSTANT (rep);\n \t  }\n@@ -1448,12 +1448,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n                 result = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (result && result != leader)\n-\t\t  {\n-\t\t    tree name = get_representative_for (result);\n-\t\t    if (!name)\n-\t\t      return NULL;\n-\t\t    newnary->op[i] = name;\n-\t\t  }\n+\t\t  newnary->op[i] = get_representative_for (result);\n \t\telse if (!result)\n \t\t  return NULL;\n \n@@ -1543,19 +1538,15 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t  }\n \t\top_val_id = VN_INFO (op[n])->value_id;\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n-\t\tif (!leader)\n-\t\t  break;\n \t\topresult = phi_translate (leader, set1, set2, pred, phiblock);\n-\t\tif (!opresult)\n-\t\t  break;\n-\t\tif (opresult != leader)\n+\t\tif (opresult && opresult != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (opresult);\n-\t\t    if (!name)\n-\t\t      break;\n \t\t    changed |= name != op[n];\n \t\t    op[n] = name;\n \t\t  }\n+\t\telse if (!opresult)\n+\t\t  break;\n \t      }\n \t    if (n != 3)\n \t      {\n@@ -3198,7 +3189,6 @@ do_pre_regular_insertion (basic_block block, basic_block dom)\n \t\t  break;\n \t\t}\n \n-\t      eprime = fully_constant_expression (eprime);\n \t      vprime = get_expr_value_id (eprime);\n \t      edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime),\n \t\t\t\t\t\t vprime);\n@@ -3357,7 +3347,6 @@ do_pre_partial_partial_insertion (basic_block block, basic_block dom)\n \t\t  break;\n \t\t}\n \n-\t      eprime = fully_constant_expression (eprime);\n \t      vprime = get_expr_value_id (eprime);\n \t      edoubleprime = bitmap_find_leader (AVAIL_OUT (bprime), vprime);\n \t      avail[pred->dest_idx] = edoubleprime;"}]}