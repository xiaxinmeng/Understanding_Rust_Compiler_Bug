{"sha": "b3b5c6a236cf0816e987626120419845c8177eb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiNWM2YTIzNmNmMDgxNmU5ODc2MjYxMjA0MTk4NDVjODE3N2ViNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-12T11:06:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:06:34Z"}, "message": "sem_ch13.adb (Analyze_Attribute_Definition_Clause): For a variable, if this is not an overlay, set on Treat_As_Volatile on it.\n\n2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): For a\n\tvariable, if this is not an overlay, set on Treat_As_Volatile on it.\n\t* gcc-interface/decl.c (E_Variable): Do not force the type to volatile\n\tfor address clauses. Tweak and adjust various RM references.\n\n2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* checks.ads: Minor comment fix.\n\nFrom-SVN: r230233", "tree": {"sha": "9b26aa63288781895e7e1d6bde83aae451caa8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b26aa63288781895e7e1d6bde83aae451caa8e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b5c6a236cf0816e987626120419845c8177eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b5c6a236cf0816e987626120419845c8177eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b5c6a236cf0816e987626120419845c8177eb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b5c6a236cf0816e987626120419845c8177eb5/comments", "author": null, "committer": null, "parents": [{"sha": "637535d736f4d09948b1d86495487c617cfc98f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637535d736f4d09948b1d86495487c617cfc98f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637535d736f4d09948b1d86495487c617cfc98f7"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "b8542eee6ab9b0a3110157618d0ec52bbf93b94a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3b5c6a236cf0816e987626120419845c8177eb5", "patch": "@@ -1,3 +1,14 @@\n+2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): For a\n+\tvariable, if this is not an overlay, set on Treat_As_Volatile on it.\n+\t* gcc-interface/decl.c (E_Variable): Do not force the type to volatile\n+\tfor address clauses. Tweak and adjust various RM references.\n+\n+2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads: Minor comment fix.\n+\n 2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_rm.texi, gnat_ugn.texi,"}, {"sha": "9883c830bf2dc8554209343b72021d5717bec03e", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=b3b5c6a236cf0816e987626120419845c8177eb5", "patch": "@@ -573,7 +573,7 @@ package Checks is\n    --  For scalar types, constructs a range check action that first tests that\n    --  the expression is contained in the Target_Typ range. The difference\n    --  between this and Apply_Scalar_Range_Check is that the latter generates\n-   --  the actual checking code in gigi against the Etype of the expression.\n+   --  the actual checking code against the Etype of the expression.\n    --\n    --  For constrained array types, construct series of range check actions\n    --  to check that each Expr range is properly contained in the range of"}, {"sha": "ceeb9958617bdcbfffc1e6aaa60714542ed6792a", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=b3b5c6a236cf0816e987626120419845c8177eb5", "patch": "@@ -1068,14 +1068,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* Make a volatile version of this object's type if we are to make\n-\t   the object volatile.  We also interpret 13.3(19) conservatively\n-\t   and disallow any optimizations for such a non-constant object.  */\n+\t   the object volatile.  We also implement RM 13.3(19) for exported\n+\t   and imported (non-constant) objects by making them volatile.  */\n \tif ((Treat_As_Volatile (gnat_entity)\n \t     || (!const_flag\n \t\t && gnu_type != except_type_node\n-\t\t && (Is_Exported (gnat_entity)\n-\t\t     || imported_p\n-\t\t     || Present (Address_Clause (gnat_entity)))))\n+\t\t && (Is_Exported (gnat_entity) || imported_p)))\n \t    && !TYPE_VOLATILE (gnu_type))\n \t  {\n \t    const int quals\n@@ -1118,7 +1116,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  gnu_expr = convert (gnu_type, gnu_expr);\n \n \t/* If this is a pointer that doesn't have an initializing expression,\n-\t   initialize it to NULL, unless the object is imported.  */\n+\t   initialize it to NULL, unless the object is declared imported as\n+\t   per RM B.1(24).  */\n \tif (definition\n \t    && (POINTER_TYPE_P (gnu_type) || TYPE_IS_FAT_POINTER_P (gnu_type))\n \t    && !gnu_expr\n@@ -1141,7 +1140,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    save_gnu_tree (gnat_entity, NULL_TREE, false);\n \n \t    /* Convert the type of the object to a reference type that can\n-\t       alias everything as per 13.3(19).  */\n+\t       alias everything as per RM 13.3(19).  */\n \t    gnu_type\n \t      = build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t    gnu_address = convert (gnu_type, gnu_address);\n@@ -1206,11 +1205,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   as an indirect object.  Likewise for Stdcall objects that are\n \t   imported.  */\n \tif ((!definition && Present (Address_Clause (gnat_entity)))\n-\t    || (Is_Imported (gnat_entity)\n-\t\t&& Has_Stdcall_Convention (gnat_entity)))\n+\t    || (imported_p && Has_Stdcall_Convention (gnat_entity)))\n \t  {\n \t    /* Convert the type of the object to a reference type that can\n-\t       alias everything as per 13.3(19).  */\n+\t       alias everything as per RM 13.3(19).  */\n \t    gnu_type\n \t      = build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t    used_by_ref = true;\n@@ -1402,10 +1400,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t/* If this name is external or a name was specified, use it, but don't\n \t   use the Interface_Name with an address clause (see cd30005).  */\n-\tif ((Present (Interface_Name (gnat_entity))\n-\t     && No (Address_Clause (gnat_entity)))\n-\t    || (Is_Public (gnat_entity)\n-\t\t&& (!Is_Imported (gnat_entity) || Is_Exported (gnat_entity))))\n+\tif ((Is_Public (gnat_entity) && !Is_Imported (gnat_entity))\n+\t    || (Present (Interface_Name (gnat_entity))\n+\t\t&& No (Address_Clause (gnat_entity))))\n \t  gnu_ext_name = create_concat_name (gnat_entity, NULL);\n \n \t/* If this is an aggregate constant initialized to a constant, force it\n@@ -4618,7 +4615,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    save_gnu_tree (gnat_entity, NULL_TREE, false);\n \n \t    /* Convert the type of the object to a reference type that can\n-\t       alias everything as per 13.3(19).  */\n+\t       alias everything as per RM 13.3(19).  */\n \t    gnu_type\n \t      = build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t    if (gnu_address)"}, {"sha": "3d33e639e34b58237a2a17b288182822ee86890a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5c6a236cf0816e987626120419845c8177eb5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b3b5c6a236cf0816e987626120419845c8177eb5", "patch": "@@ -4724,10 +4724,24 @@ package body Sem_Ch13 is\n \n                   Find_Overlaid_Entity (N, O_Ent, Off);\n \n-                  --  If the object overlays a constant view, mark it so\n+                  if Present (O_Ent) then\n+                     --  If the object overlays a constant object, mark it so\n \n-                  if Present (O_Ent) and then Is_Constant_Object (O_Ent) then\n-                     Set_Overlays_Constant (U_Ent);\n+                     if Is_Constant_Object (O_Ent) then\n+                        Set_Overlays_Constant (U_Ent);\n+                     end if;\n+                  else\n+                     --  If this is not an overlay, mark a variable as being\n+                     --  volatile to prevent unwanted optimizations. It's a\n+                     --  conservative interpretation of RM 13.3(19) for the\n+                     --  cases where the compiler cannot detect potential\n+                     --  aliasing issues easily and it also covers the case\n+                     --  of an absolute address where the volatile aspect is\n+                     --  kind of implicit.\n+\n+                     if Ekind (U_Ent) = E_Variable then\n+                        Set_Treat_As_Volatile (U_Ent);\n+                     end if;\n                   end if;\n \n                   --  Overlaying controlled objects is erroneous."}]}