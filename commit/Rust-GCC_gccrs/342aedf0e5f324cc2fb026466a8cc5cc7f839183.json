{"sha": "342aedf0e5f324cc2fb026466a8cc5cc7f839183", "node_id": "C_kwDOANBUbNoAKDM0MmFlZGYwZTVmMzI0Y2MyZmIwMjY0NjZhOGNjNWNjN2Y4MzkxODM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-12T07:30:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-12T07:30:41Z"}, "message": "libgomp: alloc* test fixes [PR102628, PR102668]\n\nAs reported, the alloc-9.c test and alloc-{1,2,3}.F* and alloc-11.f90\ntests fail on powerpc64-linux with -m32.\nThe reason why it fails just there is that malloc doesn't guarantee there\n128-bit alignment (historically glibc guaranteed 2 * sizeof (void *)\nalignment from malloc).\n\nThere are two separate issues.\nOne is a thinko on my side.\nIn this part of alloc-9.c test (copied to alloc-11.f90), we have\n2 allocators, a with pool size 1024B and alignment 16B and default fallback\nand a2 with pool size 512B and alignment 32B and a as fallback allocator.\nWe start at no allocations in both at line 194 and do:\n  p = (int *) omp_alloc (sizeof (int), a2);\n// This succeeds in a2 and needs 4+overhead bytes (which includes the 32B alignment)\n  p = (int *) omp_realloc (p, 420, a, a2);\n// This allocates 420 bytes+overhead in a, with 16B alignment and deallocates the above\n  q = (int *) omp_alloc (sizeof (int), a);\n// This allocates 4+overhead bytes in a, with 16B alignment\n  q = (int *) omp_realloc (q, 420, a2, a);\n// This allocates 420+overhead in a2 with 32B alignment\n  q = (int *) omp_realloc (q, 768, a2, a2);\n// This attempts to reallocate, but as there are elevated alignment\n// requirements doesn't try to just realloc (even if it wanted to try that\n// a2 is almost full, with 512-420-overhead bytes left in it), so it\n// tries to alloc in a2, but there is no space left in the pool, falls\n// back to a, which already has 420+overhead bytes allocated in it and\n// 1024-420-overhead bytes left and so fails too and fails to default\n// non-pool allocator that allocates it, but doesn't guarantee alignment\n// higher than malloc guarantees.\n// But, the test expected 16B alignment.\n\nSo, I've slightly lowered the allocation sizes in that part of the test\n420->320 and 768 -> 568, so that the last test still fails to allocate\nin a2 (568 > 512-320-overhead) but succeeds in a as fallback, which was\nthe intent of the test.\n\nAnother thing is that alloc-1.F90 seems to be transcription of\nlibgomp.c-c++-common/alloc-1.c into Fortran, but alloc-1.c had:\n  q = (int *) omp_alloc (768, a2);\n  if ((((uintptr_t) q) % 16) != 0)\n    abort ();\n  q[0] = 7;\n  q[767 / sizeof (int)] = 8;\n  r = (int *) omp_alloc (512, a2);\n  if ((((uintptr_t) r) % __alignof (int)) != 0)\n    abort ();\nthere but Fortran has:\n        cq = omp_alloc (768_c_size_t, a2)\n        if (mod (transfer (cq, intptr), 16_c_intptr_t) /= 0) stop 12\n        call c_f_pointer (cq, q, [768 / c_sizeof (i)])\n        q(1) = 7\n        q(768 / c_sizeof (i)) = 8\n        cr = omp_alloc (512_c_size_t, a2)\n        if (mod (transfer (cr, intptr), 16_c_intptr_t) /= 0) stop 13\nI'm changing the latter to 4_c_intptr_t because other spots in the\ntestcase do that, Fortran sadly doesn't have c_alignof, but strictly\nspeaking it isn't correct, __alignof (int) could be on some architectures\nsmaller than 4.\nSo probably alloc-1.F90 etc. should also have\n! { dg-additional-sources alloc-7.c }\n! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\nand use get__alignof_int.\n\n2021-10-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/102628\n\tPR libgomp/102668\n\t* testsuite/libgomp.c-c++-common/alloc-9.c (main): Decrease\n\tallocation sizes from 420 to 320 and from 768 to 568.\n\t* testsuite/libgomp.fortran/alloc-11.f90: Likewise.\n\t* testsuite/libgomp.fortran/alloc-1.F90: Change expected alignment\n\tfor cr from 16 to 4.", "tree": {"sha": "d568a29e0c1e03069eaba712960b738f149ec976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d568a29e0c1e03069eaba712960b738f149ec976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342aedf0e5f324cc2fb026466a8cc5cc7f839183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342aedf0e5f324cc2fb026466a8cc5cc7f839183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342aedf0e5f324cc2fb026466a8cc5cc7f839183", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342aedf0e5f324cc2fb026466a8cc5cc7f839183/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab2f61dc1b195fec9161be15635b87d312e4626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab2f61dc1b195fec9161be15635b87d312e4626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab2f61dc1b195fec9161be15635b87d312e4626"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "b3682ef7161dc8b7713ccffb190e97aa884f0116", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-9.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c?ref=342aedf0e5f324cc2fb026466a8cc5cc7f839183", "patch": "@@ -195,25 +195,25 @@ main ()\n   if ((((uintptr_t) p) % 32) != 0)\n     abort ();\n   p[0] = 85;\n-  p = (int *) omp_realloc (p, 420, a, a2);\n+  p = (int *) omp_realloc (p, 320, a, a2);\n   if ((((uintptr_t) p) % 16) != 0 || p[0] != 85)\n     abort ();\n   p[0] = 5;\n-  p[419 / sizeof (int)] = 6;\n+  p[319 / sizeof (int)] = 6;\n   q = (int *) omp_alloc (sizeof (int), a);\n   if ((((uintptr_t) q) % 16) != 0)\n     abort ();\n   q[0] = 43;\n-  q = (int *) omp_realloc (q, 420, a2, a);\n+  q = (int *) omp_realloc (q, 320, a2, a);\n   if ((((uintptr_t) q) % 32) != 0 || q[0] != 43)\n     abort ();\n   q[0] = 44;\n-  q[419 / sizeof (int)] = 8;\n-  q = (int *) omp_realloc (q, 768, a2, a2);\n+  q[319 / sizeof (int)] = 8;\n+  q = (int *) omp_realloc (q, 568, a2, a2);\n   if ((((uintptr_t) q) % 16) != 0 || q[0] != 44)\n     abort ();\n   q[0] = 7;\n-  q[767 / sizeof (int)] = 8;\n+  q[567 / sizeof (int)] = 8;\n   omp_free (p, omp_null_allocator);\n   omp_free (q, a2);\n   omp_destroy_allocator (a2);"}, {"sha": "7e051692eec481419e12b699efb52051703fe000", "filename": "libgomp/testsuite/libgomp.fortran/alloc-1.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90?ref=342aedf0e5f324cc2fb026466a8cc5cc7f839183", "patch": "@@ -117,7 +117,7 @@ program main\n         q(1) = 7\n         q(768 / c_sizeof (i)) = 8\n         cr = omp_alloc (512_c_size_t, a2)\n-        if (mod (transfer (cr, intptr), 16_c_intptr_t) /= 0) stop 13\n+        if (mod (transfer (cr, intptr), 4_c_intptr_t) /= 0) stop 13\n         call c_f_pointer (cr, r, [512 / c_sizeof (i)])\n         r(1) = 9\n         r(512 / c_sizeof (i)) = 10"}, {"sha": "b02c68fbeeae1ebbb664809da1fc57e3f4bdf4c4", "filename": "libgomp/testsuite/libgomp.fortran/alloc-11.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342aedf0e5f324cc2fb026466a8cc5cc7f839183/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90?ref=342aedf0e5f324cc2fb026466a8cc5cc7f839183", "patch": "@@ -230,32 +230,32 @@ program main\n   if (mod (TRANSFER (p, iptr), 32) /= 0) &\n     stop 36\n   ip(1) = 85\n-  p = omp_realloc (p, 420_c_size_t, a, a2)\n-  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  p = omp_realloc (p, 320_c_size_t, a, a2)\n+  call c_f_pointer (p, ip, [320 / c_sizeof (0)])\n   if (mod (TRANSFER (p, iptr), 16) /= 0 &\n       .or. ip(1) /= 85) &\n     stop 37\n   ip(1) = 5\n-  ip(420 / c_sizeof (0)) = 6\n+  ip(320 / c_sizeof (0)) = 6\n   q = omp_alloc (c_sizeof (0), a)\n   call c_f_pointer (q, iq, [1])\n   if (mod (TRANSFER (q, iptr), 16) /= 0) &\n     stop 38\n   iq(1) = 43\n-  q = omp_realloc (q, 420_c_size_t, a2, a)\n-  call c_f_pointer (q, iq, [420 / c_sizeof (0)])\n+  q = omp_realloc (q, 320_c_size_t, a2, a)\n+  call c_f_pointer (q, iq, [320 / c_sizeof (0)])\n   if (mod (TRANSFER (q, iptr), 32) /= 0 &\n       .or. iq(1) /= 43) &\n     stop 39\n   iq(1) = 44\n-  iq(420 / c_sizeof (0)) = 8\n-  q = omp_realloc (q, 768_c_size_t, a2, a2)\n-  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  iq(320 / c_sizeof (0)) = 8\n+  q = omp_realloc (q, 568_c_size_t, a2, a2)\n+  call c_f_pointer (q, iq, [568 / c_sizeof (0)])\n   if (mod (TRANSFER (q, iptr), 16) /= 0 &\n       .or. iq(1) /= 44) &\n     stop 40\n   iq(1) = 7\n-  iq(768 / c_sizeof (0)) = 8\n+  iq(568 / c_sizeof (0)) = 8\n   call omp_free (p, omp_null_allocator)\n   call omp_free (q, a2)\n   call omp_destroy_allocator (a2)"}]}