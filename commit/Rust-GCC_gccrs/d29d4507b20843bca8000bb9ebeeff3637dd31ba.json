{"sha": "d29d4507b20843bca8000bb9ebeeff3637dd31ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5ZDQ1MDdiMjA4NDNiY2E4MDAwYmI5ZWJlZWZmMzYzN2RkMzFiYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-05-21T01:12:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-05-21T01:12:00Z"}, "message": "functional (function): Use explicit operator bool.\n\n2009-05-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/tr1_impl/functional (function): Use explicit operator bool.\n\t* include/bits/shared_ptr.h (__shared_ptr): Same.\n\t* include/bits/unique_ptr.h (unique_ptr): Same.\n\t* include/std/mutex (unique_lock): Same.\n\t* include/std/system_error (error_code): Same.\n\t(error_condition): Same.\n\t* include/std/ostream (sentry): Same.\n\t* include/std/istream (sentry): Same.\n\t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Adjust.\n\t* testsuite/19_diagnostics/error_condition/operators/bool_neg.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/bool_neg.cc: Same.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Same.\n\t* testsuite/20_util/shared_ptr/observers/bool_conv.cc: Same.\n\nFrom-SVN: r147756", "tree": {"sha": "c56e29414015d8d362048f2600dec8925fe585b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56e29414015d8d362048f2600dec8925fe585b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29d4507b20843bca8000bb9ebeeff3637dd31ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29d4507b20843bca8000bb9ebeeff3637dd31ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29d4507b20843bca8000bb9ebeeff3637dd31ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29d4507b20843bca8000bb9ebeeff3637dd31ba/comments", "author": null, "committer": null, "parents": [{"sha": "f256c06431521e45c8bdfa52d99ee481b7bf77ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f256c06431521e45c8bdfa52d99ee481b7bf77ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f256c06431521e45c8bdfa52d99ee481b7bf77ce"}], "stats": {"total": 124, "additions": 67, "deletions": 57}, "files": [{"sha": "d0d5d668da61887d5b82f6c21195599516f233af", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -1,3 +1,21 @@\n+2009-05-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/tr1_impl/functional (function): Use explicit operator bool.\n+\t* include/bits/shared_ptr.h (__shared_ptr): Same.\n+\t* include/bits/unique_ptr.h (unique_ptr): Same.\n+\t* include/std/mutex (unique_lock): Same.\n+\t* include/std/system_error (error_code): Same.\n+\t(error_condition): Same.\n+\t* include/std/ostream (sentry): Same.\n+\t* include/std/istream (sentry): Same.\n+\t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Adjust.\n+\t* testsuite/19_diagnostics/error_condition/operators/bool_neg.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/bool_neg.cc: Same.\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n+\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Same.\n+\t* testsuite/20_util/shared_ptr/observers/bool_conv.cc: Same.\n+\n 2009-05-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/23_containers/list/14340.cc: Abstract list type.\n@@ -182,7 +200,7 @@\n \t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n \tinitlist_fun.cc: Likewise\n \t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n-\tnum_xbound_fun.cc: Likewise \n+\tnum_xbound_fun.cc: Likewise\n \n 2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -200,7 +218,7 @@\n 2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.tcc (cauchy_distribution<>::\n-\toperator()(_UniformRandomNumberGenerator&, const param_type&)): \n+\toperator()(_UniformRandomNumberGenerator&, const param_type&)):\n \tAvoid M_PI, a glibc extension.\n \n 2009-05-13  Ben Elliston  <bje@au.ibm.com>\n@@ -215,7 +233,7 @@\n \n 2009-05-12  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n-        * doc/xml/manual/status_cxx200x.xml: Note missing constexpr for\n+\t* doc/xml/manual/status_cxx200x.xml: Note missing constexpr for\n \trandom number engines, complex, bitset, array, time utilities, and\n \tchar_traits.\n "}, {"sha": "c7a45f39bc1fc02118f681c22382ca74a374c644", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -816,13 +816,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       get() const // never throws\n       { return _M_ptr; }\n \n-      // Implicit conversion to \"bool\"\n-    private:\n-      typedef _Tp* __shared_ptr::*__unspecified_bool_type;\n-\n-    public:\n-      operator __unspecified_bool_type() const // never throws\n-      { return _M_ptr == 0 ? 0 : &__shared_ptr::_M_ptr; }\n+      explicit operator bool() const // never throws\n+      { return _M_ptr == 0 ? false : true; }\n \n       bool\n       unique() const // never throws"}, {"sha": "7c08c81eac783cf600045957a40745dbf50800a7", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -85,7 +85,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class unique_ptr\n     {\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n-      typedef __tuple_type unique_ptr::*     __unspecified_bool_type;\n       typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n     public:\n@@ -181,8 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       get_deleter() const\n       { return std::get<1>(_M_t); }\n \n-      operator __unspecified_bool_type () const\n-      { return get() == 0 ? 0 : &unique_ptr::_M_t; }\n+      explicit operator bool() const\n+      { return get() == 0 ? false : true; }\n \n       // Modifiers.\n       pointer\n@@ -233,7 +232,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class unique_ptr<_Tp[], _Tp_Deleter>\n     {\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n-      typedef __tuple_type unique_ptr::*     __unspecified_bool_type;\n       typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n     public:\n@@ -323,8 +321,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       get_deleter() const\n       { return std::get<1>(_M_t); }    \n \n-      operator __unspecified_bool_type () const \n-      { return get() == 0 ? 0 : &unique_ptr::_M_t; }\n+      explicit operator bool() const \n+      { return get() == 0 ? false : true; }\n     \n       // Modifiers.\n       pointer"}, {"sha": "1979a51327f857bf58465acb5592981da650ad70", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -631,6 +631,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     class basic_istream<_CharT, _Traits>::sentry\n     {\n+      // Data Members.\n+      bool _M_ok;\n+\n     public:\n       /// Easy access to dependant types.\n       typedef _Traits \t\t\t\t\ttraits_type;\n@@ -670,11 +673,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  For ease of use, sentries may be converted to booleans.  The\n        *  return value is that of the sentry state (true == okay).\n       */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+#endif\n       operator bool() const\n       { return _M_ok; }\n-\n-    private:\n-      bool _M_ok;\n     };\n \n   // [27.6.1.2.3] character extraction templates"}, {"sha": "b3a04380641160050818028f5b64af07e493b78f", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -574,7 +574,7 @@ namespace std\n       owns_lock() const\n       { return _M_owns; }\n \n-      /* explicit */ operator bool () const\n+      explicit operator bool() const\n       { return owns_lock(); }\n \n       mutex_type*"}, {"sha": "b9ea4a8ce19f68ca923fb8f768f73c1f6fabdb24", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -376,7 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template <typename _CharT, typename _Traits>\n     class basic_ostream<_CharT, _Traits>::sentry\n     {\n-      // Data Members:\n+      // Data Members.\n       bool \t\t\t\t_M_ok;\n       basic_ostream<_CharT, _Traits>& \t_M_os;\n       \n@@ -420,6 +420,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  For ease of use, sentries may be converted to booleans.  The\n        *  return value is that of the sentry state (true == okay).\n       */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit\n+#endif\n       operator bool() const\n       { return _M_ok; }\n     };"}, {"sha": "7f462a20dff53322d28bd72675feb8e52cdf6568", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -152,15 +152,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     message() const\n     { return category().message(value()); }\n \n-    // Safe bool idiom.\n-    // explicit operator bool() const throw()\n-    // { return _M_value != 0; }\n-    typedef void (*__bool_type)();\n-\n-    static void __not_bool_type() { }\n-\n-    operator __bool_type() const\n-    { return _M_value != 0 ? &__not_bool_type : false; }\n+    explicit operator bool() const\n+    { return _M_value != 0 ? true : false; }\n \n     // DR 804.\n   private:\n@@ -233,15 +226,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     message() const\n     { return category().message(value()); }\n \n-    // Safe bool idiom.\n-    // explicit operator bool() const throw()\n-    // { return _M_value != 0; }\n-    typedef void (*__bool_type)();\n-\n-    static void __not_bool_type() { }\n-\n-    operator __bool_type() const\n-    { return _M_value != 0 ? &__not_bool_type : false; }\n+    explicit operator bool() const\n+    { return _M_value != 0 ? true : false; }\n \n     // DR 804.\n   private:"}, {"sha": "75a6fdfdf87bc3394797a0a40af618e8e3110545", "filename": "libstdc++-v3/include/tr1_impl/functional", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -1761,6 +1761,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,\n       private _Function_base\n     {\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       /// This class is used to implement the safe_bool idiom.\n       struct _Hidden_type\n       {\n@@ -1769,6 +1770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n       /// This typedef is used to implement the safe_bool idiom.\n       typedef _Hidden_type* _Hidden_type::* _Safe_bool;\n+#endif\n \n       typedef _Res _Signature_type(_ArgTypes...);\n       \n@@ -1918,13 +1920,18 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n        *\n        *  This function will not throw an exception.\n        */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit operator bool() const\n+      { return !_M_empty(); }\n+#else\n       operator _Safe_bool() const\n       {\n         if (_M_empty())\n \t  return 0;\n \telse\n \t  return &_Hidden_type::_M_bool;\n       }\n+#endif\n \n       // [3.7.2.4] function invocation\n "}, {"sha": "2562b8dc5828569144baf078e912d48d4c8895ac", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -28,14 +28,14 @@ int main()\n \n   // 1\n   std::error_code e1;\n-  if (e1)\n+  if (static_cast<bool>(e1))\n     {\n       VERIFY( false );\n     }\n \n   // 2\n   std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n-  if (e2)\n+  if (static_cast<bool>(e2))\n     {\n       VERIFY( true );\n     }"}, {"sha": "554b59f3e7aed296c0b97d7ecdcb02f9985c5ba7", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -30,4 +30,4 @@ int main()\n   return i;\n }\n \n-// { dg-error \"invalid conversion\" \"\" { target *-*-* } 28 }\n+// { dg-error \"could not convert\" \"\" { target *-*-* } 28 }"}, {"sha": "62490fd2e3071f8d36ed3441c0f34096cbe9c0e8", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -27,14 +27,14 @@ void test01()\n \n   // 1\n   std::error_condition e1;\n-  if (e1)\n+  if (static_cast<bool>(e1))\n     {\n       VERIFY( false );\n     }\n \n   // 2\n   std::error_condition e2(std::errc::operation_not_supported);\n-  if (e2)\n+  if (static_cast<bool>(e2))\n     {\n       VERIFY( true );\n     }"}, {"sha": "776179f3efa29ca164176943fb52100021fade79", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -29,4 +29,4 @@ int test01()\n   return i;\n }\n \n-// { dg-error \"invalid conversion\" \"\" { target *-*-* } 27 }\n+// { dg-error \"could not convert\" \"\" { target *-*-* } 27 }"}, {"sha": "dc2d53386cd1752134dd7ff7dd40d6aba1c45b3e", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/observers/bool_conv.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fbool_conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fbool_conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fbool_conv.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -33,9 +33,9 @@ test01()\n   bool test __attribute__((unused)) = true;\n \n   const std::shared_ptr<A> p1;\n-  VERIFY( p1 == false );\n+  VERIFY( static_cast<bool>(p1) == false );\n   const std::shared_ptr<A> p2(p1);\n-  VERIFY( p2 == false );\n+  VERIFY( static_cast<bool>(p2) == false );\n }\n \n void\n@@ -44,12 +44,12 @@ test02()\n   bool test __attribute__((unused)) = true;\n \n   std::shared_ptr<A> p1(new A);\n-  VERIFY( p1 );\n+  VERIFY( static_cast<bool>(p1) );\n   std::shared_ptr<A> p2(p1);\n-  VERIFY( p2 );\n+  VERIFY( static_cast<bool>(p2) );\n   p1.reset();\n-  VERIFY( !p1 );\n-  VERIFY( p2 );\n+  VERIFY( !static_cast<bool>(p1) );\n+  VERIFY( static_cast<bool>(p2) );\n }\n \n void\n@@ -60,8 +60,8 @@ test03()\n   std::shared_ptr<A> p1(new A);\n   std::shared_ptr<A> p2(p1);\n   p2.reset(new A);\n-  VERIFY( p1 );\n-  VERIFY( p2 );\n+  VERIFY( static_cast<bool>(p1) );\n+  VERIFY( static_cast<bool>(p2) );\n }\n \n "}, {"sha": "f0236eb26370fed8c3542375407e43af60f9c86b", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -52,7 +52,7 @@ test03()\n // { dg-error \"used here\" \"\" { target *-*-* } 42 }\n // { dg-error \"no matching\" \"\" { target *-*-* } 48 }\n // { dg-error \"used here\" \"\" { target *-*-* } 49 }\n-// { dg-error \"candidates are\" \"\" { target *-*-* } 214 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 214 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 360 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 213 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 213 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 358 }\n // { dg-excess-errors \"note\" }"}, {"sha": "ae3d39463382bac2e87d891efea8b5b97b5a992a", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29d4507b20843bca8000bb9ebeeff3637dd31ba/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=d29d4507b20843bca8000bb9ebeeff3637dd31ba", "patch": "@@ -36,4 +36,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 35 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 350 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 348 }"}]}