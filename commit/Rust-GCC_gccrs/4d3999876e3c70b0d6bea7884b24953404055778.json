{"sha": "4d3999876e3c70b0d6bea7884b24953404055778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzOTk5ODc2ZTNjNzBiMGQ2YmVhNzg4NGIyNDk1MzQwNDA1NTc3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-09-18T03:47:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-09-18T03:47:35Z"}, "message": "re PR c++/54575 (ICE with std::vector::insert and -std=c++11)\n\n\tPR c++/54575\n\t* pt.c (instantiate_alias_template): New.\n\t(tsubst): Use it.\n\t(push_access_scope): Allow TYPE_DECL.\n\nFrom-SVN: r191412", "tree": {"sha": "1dc1e080b46aebb2ea058ed99dded5a56ee5f668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc1e080b46aebb2ea058ed99dded5a56ee5f668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3999876e3c70b0d6bea7884b24953404055778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3999876e3c70b0d6bea7884b24953404055778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3999876e3c70b0d6bea7884b24953404055778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3999876e3c70b0d6bea7884b24953404055778/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "342ebbda0f9050e1a12784c23ce73182aa991e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342ebbda0f9050e1a12784c23ce73182aa991e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342ebbda0f9050e1a12784c23ce73182aa991e27"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "676c1669298c05cb29040db2b472d8c2b602bd65", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d3999876e3c70b0d6bea7884b24953404055778", "patch": "@@ -1,3 +1,10 @@\n+2012-09-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54575\n+\t* pt.c (instantiate_alias_template): New.\n+\t(tsubst): Use it.\n+\t(push_access_scope): Allow TYPE_DECL.\n+\n 2012-09-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53661"}, {"sha": "16952bffa0c7b5a695d9fd05f798bae1a1465786", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4d3999876e3c70b0d6bea7884b24953404055778", "patch": "@@ -205,16 +205,18 @@ static tree template_parm_to_arg (tree t);\n static bool arg_from_parm_pack_p (tree, tree);\n static tree current_template_args (void);\n static tree tsubst_template_parm (tree, tree, tsubst_flags_t);\n+static tree instantiate_alias_template (tree, tree, tsubst_flags_t);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n-   template, or VAR_DECL for static member variable (need by\n-   instantiate_decl).  */\n+   template, VAR_DECL for static member variable, or TYPE_DECL for\n+   alias template (needed by instantiate_decl).  */\n \n static void\n push_access_scope (tree t)\n {\n   gcc_assert (TREE_CODE (t) == FUNCTION_DECL\n+\t      || TREE_CODE (t) == TYPE_DECL\n \t      || TREE_CODE (t) == VAR_DECL);\n \n   if (DECL_FRIEND_CONTEXT (t))\n@@ -10949,10 +10951,10 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (decl)))\n \t{\n \t  /* DECL represents an alias template and we want to\n-\t     instantiate it.  Let's substitute our arguments for the\n-\t     template parameters into the declaration and get the\n-\t     resulting type.  */\n-\t  r = tsubst (decl, args, complain, decl);\n+\t     instantiate it.  */\n+\t  tree tmpl = most_general_template (DECL_TI_TEMPLATE (decl));\n+\t  tree gen_args = tsubst (DECL_TI_ARGS (decl), args, complain, in_decl);\n+\t  r = instantiate_alias_template (tmpl, gen_args, complain);\n \t}\n       else if (DECL_CLASS_SCOPE_P (decl)\n \t       && CLASSTYPE_TEMPLATE_INFO (DECL_CONTEXT (decl))\n@@ -14377,7 +14379,7 @@ recheck_decl_substitution (tree d, tree tmpl, tree args)\n   pop_access_scope (d);\n }\n \n-/* Instantiate the indicated variable or function template TMPL with\n+/* Instantiate the indicated variable, function, or alias template TMPL with\n    the template arguments in TARG_PTR.  */\n \n static tree\n@@ -14526,6 +14528,35 @@ instantiate_template (tree tmpl, tree orig_args, tsubst_flags_t complain)\n   return ret;\n }\n \n+/* Instantiate the alias template TMPL with ARGS.  Also push a template\n+   instantiation level, which instantiate_template doesn't do because\n+   functions and variables have sufficient context established by the\n+   callers.  */\n+\n+static tree\n+instantiate_alias_template (tree tmpl, tree args, tsubst_flags_t complain)\n+{\n+  struct pending_template *old_last_pend = last_pending_template;\n+  struct tinst_level *old_error_tinst = last_error_tinst_level;\n+  if (tmpl == error_mark_node || args == error_mark_node)\n+    return error_mark_node;\n+  tree tinst = build_tree_list (tmpl, args);\n+  if (!push_tinst_level (tinst))\n+    {\n+      ggc_free (tinst);\n+      return error_mark_node;\n+    }\n+  tree r = instantiate_template (tmpl, args, complain);\n+  pop_tinst_level ();\n+  /* We can't free this if a pending_template entry or last_error_tinst_level\n+     is pointing at it.  */\n+  if (last_pending_template == old_last_pend\n+      && last_error_tinst_level == old_error_tinst)\n+    ggc_free (tinst);\n+\n+  return r;\n+}\n+\n /* PARM is a template parameter pack for FN.  Returns true iff\n    PARM is used in a deducible way in the argument list of FN.  */\n "}, {"sha": "19e2719367163c90dc2f381786e48b61b7405d7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d3999876e3c70b0d6bea7884b24953404055778", "patch": "@@ -1,3 +1,9 @@\n+2012-09-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54575\n+\t* g++.dg/cpp0x/alias-decl-21.C: New.\n+\t* g++.dg/cpp0x/alias-decl-22.C: New.\n+\n 2012-09-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54608"}, {"sha": "463f539d38fd46dcec33ccb22930572817986a07", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-21.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-21.C?ref=4d3999876e3c70b0d6bea7884b24953404055778", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/54575\n+// { dg-do compile { target c++11 } }\n+\n+template<typename _From, typename _To>\n+struct is_convertible { static const bool value = true; };\n+\n+template<bool> struct enable_if       { };\n+template<>     struct enable_if<true> { typedef int type; };\n+\n+template<typename _InIter>\n+using _RequireInputIter\n+= typename enable_if<is_convertible<_InIter,bool>::value>::type;\n+\n+template<typename _Tp> struct X {\n+    template<typename _InputIterator,\n+         typename = _RequireInputIter<_InputIterator>>\n+      void insert(_InputIterator) {}\n+};\n+\n+template<typename> void foo() {\n+  X<int> subdomain_indices;\n+  subdomain_indices.insert(0);\n+}"}, {"sha": "1f6cb8f40b8c1dba81ddbc559607c941488957ab", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-22.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3999876e3c70b0d6bea7884b24953404055778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-22.C?ref=4d3999876e3c70b0d6bea7884b24953404055778", "patch": "@@ -0,0 +1,12 @@\n+// The standard is unclear about whether this testcase is well-formed.\n+// Clang considers it well-formed, EDG not.  Let's go with EDG for now.\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+using foo = typename T::bar;\t// { dg-error \"this context\" }\n+\n+class B\n+{\n+  typedef int bar;\t\t// { dg-error \"private\" }\n+  foo<B> f;\t\t\t// { dg-message \"required\" }\n+};"}]}