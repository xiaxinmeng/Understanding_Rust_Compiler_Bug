{"sha": "6adfdff68b1fef146b97c39d4b9d8db59d498837", "node_id": "C_kwDOANBUbNoAKDZhZGZkZmY2OGIxZmVmMTQ2Yjk3YzM5ZDRiOWQ4ZGI1OWQ0OTg4Mzc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-26T10:31:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-26T10:33:28Z"}, "message": "Unify offset and byte_offset for vect_create_addr_base_for_vector_ref\n\nNow that both are measured in bytes we can unify the two parameters.\n\n2021-10-26  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_create_addr_base_for_vector_ref):\n\tRemove byte_offset parameter.\n\t(vect_create_data_ref_ptr): Likewise.\n\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n\tLikewise.\n\t(vect_create_data_ref_ptr): Likewise.\n\t* tree-vect-stmts.c (vectorizable_store): Adjust.\n\t(vectorizable_load): Likewise.", "tree": {"sha": "a5831103c2563803dca1b14418920aeba119f312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5831103c2563803dca1b14418920aeba119f312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6adfdff68b1fef146b97c39d4b9d8db59d498837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adfdff68b1fef146b97c39d4b9d8db59d498837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adfdff68b1fef146b97c39d4b9d8db59d498837", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adfdff68b1fef146b97c39d4b9d8db59d498837/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f28340513753ba94ab483e93ce1d096842a5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f28340513753ba94ab483e93ce1d096842a5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f28340513753ba94ab483e93ce1d096842a5ad"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "2ea8e983fe6010639b6cf98360dc2e519c49d54d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=6adfdff68b1fef146b97c39d4b9d8db59d498837", "patch": "@@ -4772,8 +4772,6 @@ vect_duplicate_ssa_name_ptr_info (tree name, dr_vec_info *dr_info)\n \t    is as follows:\n \t    if LOOP=i_loop:\t&in\t\t(relative to i_loop)\n \t    if LOOP=j_loop: \t&in+i*2B\t(relative to j_loop)\n-   BYTE_OFFSET: Optional, defaulted to NULL.  If supplied, it is added to the\n-\t    initial address.  Both OFFSET and BYTE_OFFSET are measured in bytes.\n \n    Output:\n    1. Return an SSA_NAME whose value is the address of the memory location of\n@@ -4786,8 +4784,7 @@ vect_duplicate_ssa_name_ptr_info (tree name, dr_vec_info *dr_info)\n tree\n vect_create_addr_base_for_vector_ref (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t\t      gimple_seq *new_stmt_list,\n-\t\t\t\t      tree offset,\n-\t\t\t\t      tree byte_offset)\n+\t\t\t\t      tree offset)\n {\n   dr_vec_info *dr_info = STMT_VINFO_DR_INFO (stmt_info);\n   struct data_reference *dr = dr_info->dr;\n@@ -4823,12 +4820,6 @@ vect_create_addr_base_for_vector_ref (vec_info *vinfo, stmt_vec_info stmt_info,\n       base_offset = fold_build2 (PLUS_EXPR, sizetype,\n \t\t\t\t base_offset, offset);\n     }\n-  if (byte_offset)\n-    {\n-      byte_offset = fold_convert (sizetype, byte_offset);\n-      base_offset = fold_build2 (PLUS_EXPR, sizetype,\n-\t\t\t\t base_offset, byte_offset);\n-    }\n \n   /* base + base_offset */\n   if (loop_vinfo)\n@@ -4882,10 +4873,6 @@ vect_create_addr_base_for_vector_ref (vec_info *vinfo, stmt_vec_info stmt_info,\n    5. BSI: location where the new stmts are to be placed if there is no loop\n    6. ONLY_INIT: indicate if ap is to be updated in the loop, or remain\n         pointing to the initial address.\n-   7. BYTE_OFFSET (optional, defaults to NULL): a byte offset to be added\n-\tto the initial address accessed by the data-ref in STMT_INFO.  This is\n-\tsimilar to OFFSET, but OFFSET is counted in elements, while BYTE_OFFSET\n-\tin bytes.\n    8. IV_STEP (optional, defaults to NULL): the amount that should be added\n \tto the IV during each iteration of the loop.  NULL says to move\n \tby one copy of AGGR_TYPE up or down, depending on the step of the\n@@ -4920,7 +4907,7 @@ vect_create_data_ref_ptr (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t  tree aggr_type, class loop *at_loop, tree offset,\n \t\t\t  tree *initial_address, gimple_stmt_iterator *gsi,\n \t\t\t  gimple **ptr_incr, bool only_init,\n-\t\t\t  tree byte_offset, tree iv_step)\n+\t\t\t  tree iv_step)\n {\n   const char *base_name;\n   loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n@@ -5048,11 +5035,11 @@ vect_create_data_ref_ptr (vec_info *vinfo, stmt_vec_info stmt_info,\n   /* (2) Calculate the initial address of the aggregate-pointer, and set\n      the aggregate-pointer to point to it before the loop.  */\n \n-  /* Create: (&(base[init_val]+offset+byte_offset) in the loop preheader.  */\n+  /* Create: (&(base[init_val]+offset) in the loop preheader.  */\n \n   new_temp = vect_create_addr_base_for_vector_ref (vinfo,\n \t\t\t\t\t\t   stmt_info, &new_stmt_list,\n-\t\t\t\t\t\t   offset, byte_offset);\n+\t\t\t\t\t\t   offset);\n   if (new_stmt_list)\n     {\n       if (pe)"}, {"sha": "bf07e7a94956e8293617b7412257b22f4d27aa25", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6adfdff68b1fef146b97c39d4b9d8db59d498837", "patch": "@@ -8110,7 +8110,7 @@ vectorizable_store (vec_info *vinfo,\n \t      = vect_create_data_ref_ptr (vinfo, first_stmt_info, aggr_type,\n \t\t\t\t\t  simd_lane_access_p ? loop : NULL,\n \t\t\t\t\t  offset, &dummy, gsi, &ptr_incr,\n-\t\t\t\t\t  simd_lane_access_p, NULL_TREE, bump);\n+\t\t\t\t\t  simd_lane_access_p, bump);\n \t}\n       else\n \t{\n@@ -8518,7 +8518,6 @@ vectorizable_load (vec_info *vinfo,\n   unsigned int group_size;\n   poly_uint64 group_gap_adj;\n   tree msq = NULL_TREE, lsq;\n-  tree byte_offset = NULL_TREE;\n   tree realignment_token = NULL_TREE;\n   gphi *phi = NULL;\n   vec<tree> dr_chain = vNULL;\n@@ -9290,6 +9289,7 @@ vectorizable_load (vec_info *vinfo,\n   bool diff_first_stmt_info\n     = first_stmt_info_for_drptr && first_stmt_info != first_stmt_info_for_drptr;\n \n+  tree offset = NULL_TREE;\n   if ((alignment_support_scheme == dr_explicit_realign_optimized\n        || alignment_support_scheme == dr_explicit_realign)\n       && !compute_in_loop)\n@@ -9306,17 +9306,18 @@ vectorizable_load (vec_info *vinfo,\n       if (alignment_support_scheme == dr_explicit_realign_optimized)\n \t{\n \t  phi = as_a <gphi *> (SSA_NAME_DEF_STMT (msq));\n-\t  byte_offset = size_binop (MINUS_EXPR, TYPE_SIZE_UNIT (vectype),\n-\t\t\t\t    size_one_node);\n+\t  offset = size_binop (MINUS_EXPR, TYPE_SIZE_UNIT (vectype),\n+\t\t\t       size_one_node);\n \t  gcc_assert (!first_stmt_info_for_drptr);\n \t}\n     }\n   else\n     at_loop = loop;\n \n-  tree offset = NULL_TREE;\n   if (!known_eq (poffset, 0))\n-    offset = size_int (poffset);\n+    offset = (offset\n+\t      ? size_binop (PLUS_EXPR, offset, size_int (poffset))\n+\t      : size_int (poffset));\n \n   tree bump;\n   tree vec_offset = NULL_TREE;\n@@ -9374,7 +9375,7 @@ vectorizable_load (vec_info *vinfo,\n \t\t= vect_create_data_ref_ptr (vinfo, first_stmt_info_for_drptr,\n \t\t\t\t\t    aggr_type, at_loop, offset, &dummy,\n \t\t\t\t\t    gsi, &ptr_incr, simd_lane_access_p,\n-\t\t\t\t\t    byte_offset, bump);\n+\t\t\t\t\t    bump);\n \t      /* Adjust the pointer by the difference to first_stmt.  */\n \t      data_reference_p ptrdr\n \t\t= STMT_VINFO_DATA_REF (first_stmt_info_for_drptr);\n@@ -9406,8 +9407,7 @@ vectorizable_load (vec_info *vinfo,\n \t      = vect_create_data_ref_ptr (vinfo, first_stmt_info, aggr_type,\n \t\t\t\t\t  at_loop,\n \t\t\t\t\t  offset, &dummy, gsi, &ptr_incr,\n-\t\t\t\t\t  simd_lane_access_p,\n-\t\t\t\t\t  byte_offset, bump);\n+\t\t\t\t\t  simd_lane_access_p, bump);\n \t  if (mask)\n \t    vec_mask = vec_masks[0];\n \t}"}, {"sha": "73347ce1f4e1b9a6c49203cd270a7ac3097fc3f2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adfdff68b1fef146b97c39d4b9d8db59d498837/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6adfdff68b1fef146b97c39d4b9d8db59d498837", "patch": "@@ -2003,7 +2003,7 @@ extern tree vect_create_data_ref_ptr (vec_info *,\n \t\t\t\t      stmt_vec_info, tree, class loop *, tree,\n \t\t\t\t      tree *, gimple_stmt_iterator *,\n \t\t\t\t      gimple **, bool,\n-\t\t\t\t      tree = NULL_TREE, tree = NULL_TREE);\n+\t\t\t\t      tree = NULL_TREE);\n extern tree bump_vector_ptr (vec_info *, tree, gimple *, gimple_stmt_iterator *,\n \t\t\t     stmt_vec_info, tree);\n extern void vect_copy_ref_info (tree, tree);\n@@ -2028,7 +2028,7 @@ extern tree vect_get_new_ssa_name (tree, enum vect_var_kind,\n \t\t\t\t   const char * = NULL);\n extern tree vect_create_addr_base_for_vector_ref (vec_info *,\n \t\t\t\t\t\t  stmt_vec_info, gimple_seq *,\n-\t\t\t\t\t\t  tree, tree = NULL_TREE);\n+\t\t\t\t\t\t  tree);\n \n /* In tree-vect-loop.c.  */\n extern widest_int vect_iv_limit_for_partial_vectors (loop_vec_info loop_vinfo);"}]}