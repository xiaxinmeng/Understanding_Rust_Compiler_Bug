{"sha": "167f68ede42b2bb0bf287769951c5a6aca3e7281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3ZjY4ZWRlNDJiMmJiMGJmMjg3NzY5OTUxYzVhNmFjYTNlNzI4MQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-07-17T11:15:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-07-17T11:15:24Z"}, "message": "s390.c: (s390_expand_builtin): Allow -mhtm to be enabled without -march=zEC12.\n\n2013-07-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c: (s390_expand_builtin): Allow -mhtm to be\n\tenabled without -march=zEC12.\n\t* config/s390/s390.h (TARGET_HTM): Do not require EC12 machine\n\tflags to be set.\n\n2013-07-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* acinclude.m4: Add htm asm check for s390.\n\t* configure.tgt: Add -mhtm and -Wa,-march=zEC12 to the options.\n\t* configure: Regenerate.\n\t* config/s390/target.h: Remove __HTM__ check.\n\t(htm_available): Call getauxval to get hwcaps and check whether\n\tHTM is available or not.\n\nFrom-SVN: r201004", "tree": {"sha": "7c128616f0a4ca4d09f410d31fee5de4433fc49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c128616f0a4ca4d09f410d31fee5de4433fc49c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167f68ede42b2bb0bf287769951c5a6aca3e7281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167f68ede42b2bb0bf287769951c5a6aca3e7281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167f68ede42b2bb0bf287769951c5a6aca3e7281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167f68ede42b2bb0bf287769951c5a6aca3e7281/comments", "author": null, "committer": null, "parents": [{"sha": "1b2d0112c5dd2d847aaa4e6bf529fc74e78158fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2d0112c5dd2d847aaa4e6bf529fc74e78158fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2d0112c5dd2d847aaa4e6bf529fc74e78158fb"}], "stats": {"total": 98, "additions": 83, "deletions": 15}, "files": [{"sha": "60c176da0a9f5f9f443a466aab5105c9064dd21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -1,3 +1,10 @@\n+2013-07-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c: (s390_expand_builtin): Allow -mhtm to be\n+\tenabled without -march=zEC12.\n+\t* config/s390/s390.h (TARGET_HTM): Do not require EC12 machine\n+\tflags to be set.\n+\n 2013-07-16  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* config/mips/mips.h (ISA_HAS_FP4): Correct formatting."}, {"sha": "ab4cc8bb269e0f112bab14dfa6087ba97b0dfeee", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -9771,11 +9771,8 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   if (icode == 0)\n     internal_error (\"bad builtin fcode\");\n \n-  if (!TARGET_ZEC12)\n-    error (\"Transactional execution builtins require zEC12 or later\\n\");\n-\n-  if (!TARGET_HTM && TARGET_ZEC12)\n-    error (\"Transactional execution builtins not enabled (-mtx)\\n\");\n+  if (!TARGET_HTM)\n+    error (\"Transactional execution builtins not enabled (-mhtm)\\n\");\n \n   /* Set a flag in the machine specific cfun part in order to support\n      saving/restoring of FPRs.  */"}, {"sha": "bca18fe36f59253bdede497274e1a5898990a42b", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -81,8 +81,7 @@ enum processor_flags\n        (TARGET_ZARCH && TARGET_CPU_Z196)\n #define TARGET_ZEC12 \\\n        (TARGET_ZARCH && TARGET_CPU_ZEC12)\n-#define TARGET_HTM \\\n-       (TARGET_ZARCH && TARGET_CPU_HTM && TARGET_OPT_HTM)\n+#define TARGET_HTM (TARGET_OPT_HTM)\n \n \n #define TARGET_AVOID_CMP_AND_BRANCH (s390_tune == PROCESSOR_2817_Z196)"}, {"sha": "3e9a70679792aa6d662f1f4518c68c7e65395c48", "filename": "libitm/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -1,3 +1,12 @@\n+2013-07-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* acinclude.m4: Add htm asm check for s390.\n+\t* configure.tgt: Add -mhtm and -Wa,-march=zEC12 to the options.\n+\t* configure: Regenerate.\n+\t* config/s390/target.h: Remove __HTM__ check.\n+\t(htm_available): Call getauxval to get hwcaps and check whether\n+\tHTM is available or not.\n+\n 2013-07-15  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* acinclude.m4 (LIBITM_CHECK_AS_HTM): New."}, {"sha": "ca7e0a92118029e69e8746d0852e7f91312556a4", "filename": "libitm/acinclude.m4", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Facinclude.m4?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -135,6 +135,17 @@ powerpc*)\n     AC_DEFINE(HAVE_AS_HTM, 1, [Define to 1 if the assembler supports HTM.])\n   fi\n   ;;\n+s390*)\n+  AC_CACHE_CHECK([if the assembler supports HTM], libitm_cv_as_htm, [\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -march=zEC12\"\n+    AC_TRY_COMPILE([], [asm(\"tbegin 0,0; tend\");],\n+\t\t   [libitm_cv_as_htm=yes], [libitm_cv_as_htm=no])\n+    CFLAGS=\"$save_CFLAGS\"])\n+  if test x$libitm_cv_as_htm = xyes; then\n+    AC_DEFINE(HAVE_AS_HTM, 1, [Define to 1 if the assembler supports HTM.])\n+  fi\n+  ;;\n esac])\n \n sinclude(../libtool.m4)"}, {"sha": "17228f844dd702cacc11534de03eb5207dc4e340", "filename": "libitm/config/s390/target.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfig%2Fs390%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfig%2Fs390%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fs390%2Ftarget.h?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -22,11 +22,9 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-\n-#include <htmintrin.h>\n-\n-/* Number of retries for transient failures.  */\n-#define _HTM_ITM_RETRIES 10\n+#ifdef HAVE_SYS_AUXV_H\n+#include <sys/auxv.h>\n+#endif\n \n namespace GTM HIDDEN {\n \n@@ -58,13 +56,24 @@ cpu_relax (void)\n   __asm volatile (\"\" : : : \"memory\");\n }\n \n-#ifdef __HTM__\n+\n+// Use HTM if it is supported by the system.\n+// See gtm_thread::begin_transaction for how these functions are used.\n+#if defined (__linux__) \\\n+    && defined (HAVE_AS_HTM) \\\n+    && defined (HAVE_GETAUXVAL) \\\n+    && defined (HWCAP_S390_TE)\n+\n+#include <htmintrin.h>\n+\n+/* Number of retries for transient failures.  */\n+#define _HTM_ITM_RETRIES 10\n #define USE_HTM_FASTPATH\n \n static inline bool\n htm_available ()\n {\n-  return true;\n+  return (getauxval (AT_HWCAP) & HWCAP_S390_TE) ? true : false;\n }\n \n static inline uint32_t"}, {"sha": "21361b031ad65c25818ebc7430f78876359ac483", "filename": "libitm/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -17395,6 +17395,42 @@ fi\n $as_echo \"$libitm_cv_as_htm\" >&6; }\n   if test x$libitm_cv_as_htm = xyes; then\n \n+$as_echo \"#define HAVE_AS_HTM 1\" >>confdefs.h\n+\n+  fi\n+  ;;\n+s390*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the assembler supports HTM\" >&5\n+$as_echo_n \"checking if the assembler supports HTM... \" >&6; }\n+if test \"${libitm_cv_as_htm+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -march=zEC12\"\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm(\"tbegin 0,0; tend\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libitm_cv_as_htm=yes\n+else\n+  libitm_cv_as_htm=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+    CFLAGS=\"$save_CFLAGS\"\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libitm_cv_as_htm\" >&5\n+$as_echo \"$libitm_cv_as_htm\" >&6; }\n+  if test x$libitm_cv_as_htm = xyes; then\n+\n $as_echo \"#define HAVE_AS_HTM 1\" >>confdefs.h\n \n   fi"}, {"sha": "4dc2807cfe52e36f9430c0acd67fd0e78b91ec04", "filename": "libitm/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167f68ede42b2bb0bf287769951c5a6aca3e7281/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=167f68ede42b2bb0bf287769951c5a6aca3e7281", "patch": "@@ -109,8 +109,8 @@ case \"${target_cpu}\" in\n \tARCH=x86\n \t;;\n   s390|s390x)\n+\tXCFLAGS=\"${XCFLAGS} -mzarch -mhtm -Wa,-march=zEC12\"\n \tARCH=s390\n-\tXCFLAGS=\"${XCFLAGS} -mzarch\"\n \t;;\n \n   *)"}]}