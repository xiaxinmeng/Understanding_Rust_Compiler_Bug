{"sha": "9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlYjNiOGQ4ZjZkZDA4OGYzZWZkNTkwYWFlOWU1NGEyNjVlNWIwNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-27T11:04:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-27T11:08:13Z"}, "message": "streamline TARGET_MEM_REF dumping\n\nThe following streamlines TARGET_MEM_REF dumping building\non what we do for MEM_REF and thus dumping things like\naccess type, TBAA type and base/clique.  I've changed it\nto do semantic dumping aka base + offset + step * index\nrather than the odd base: A, step: way.\n\n2020-08-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-pretty-print.c (dump_mem_ref): Handle TARGET_MEM_REFs.\n\t(dump_generic_node): Use dump_mem_ref also for TARGET_MEM_REF.\n\n\t* gcc.dg/tree-ssa/loop-19.c: Adjust.\n\t* gcc.dg/tree-ssa/loop-2.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-3.c: Likewise.", "tree": {"sha": "72e28009a0387602d3b70e6e3cdaa3fab74b7b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e28009a0387602d3b70e6e3cdaa3fab74b7b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3034eaba83935d9f6dfb20d2efbdb34b5b00bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3034eaba83935d9f6dfb20d2efbdb34b5b00bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3034eaba83935d9f6dfb20d2efbdb34b5b00bf"}], "stats": {"total": 97, "additions": 30, "deletions": 67}, "files": [{"sha": "0c73111c1ee026b39252c967ab784b30a5d1c10c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-19.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c?ref=9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "patch": "@@ -22,6 +22,6 @@ void tuned_STREAM_Copy()\n    However, due to a bug in jump threading, we end up peeling one iteration from\n    the loop, which creates an additional occurrence.  */\n \n-/* { dg-final { scan-tree-dump-times \"MEM.(base: &|symbol: )a,\" 2 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM.(base: &|symbol: )c,\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\[^;\\]*&a\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\[^;\\]*&c\" 1 \"optimized\" } } */\n "}, {"sha": "e58561a6650d36764f272eea5ece3459a932f092", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c?ref=9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "patch": "@@ -27,7 +27,6 @@ void xxx(void)\n \n /* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[base\" 1 \"optimized\" } } */\n \n /* 17 * iter should be strength reduced.  */\n "}, {"sha": "74491f80e497b96967194745d5ab781ee87d41bb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c?ref=9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "patch": "@@ -20,8 +20,7 @@ void xxx(void)\n /* Access to arr_base[iter].y should not be strength reduced, since\n    we have a memory mode including multiplication by 4.  */\n \n-/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"step:\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\[^;\\]* \\* 4\" 1 \"optimized\" } } */\n \n /* And original induction variable should be preserved.  */\n "}, {"sha": "075a3fca766192ac1febc9fed9f5ba57d8747ef4", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 27, "deletions": 62, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "patch": "@@ -1441,7 +1441,7 @@ dump_omp_atomic_memory_order (pretty_printer *pp, enum omp_memory_order mo)\n static void\n dump_mem_ref (pretty_printer *pp, tree node, int spc, dump_flags_t flags)\n {\n-  if (flags & TDF_GIMPLE)\n+  if (TREE_CODE (node) == MEM_REF && (flags & TDF_GIMPLE))\n     {\n       pp_string (pp, \"__MEM <\");\n       dump_generic_node (pp, TREE_TYPE (node),\n@@ -1472,7 +1472,8 @@ dump_mem_ref (pretty_printer *pp, tree node, int spc, dump_flags_t flags)\n \t}\n       pp_right_paren (pp);\n     }\n-  else if (integer_zerop (TREE_OPERAND (node, 1))\n+  else if (TREE_CODE (node) == MEM_REF\n+\t   && integer_zerop (TREE_OPERAND (node, 1))\n \t   /* Dump the types of INTEGER_CSTs explicitly, for we can't\n \t      infer them and MEM_ATTR caching will share MEM_REFs\n \t      with differently-typed op0s.  */\n@@ -1541,12 +1542,33 @@ dump_mem_ref (pretty_printer *pp, tree node, int spc, dump_flags_t flags)\n       dump_generic_node (pp, op1type, spc, flags | TDF_SLIM, false);\n       pp_right_paren (pp);\n       dump_generic_node (pp, op0, spc, flags, false);\n-      if (!integer_zerop (op1))\n-      if (!integer_zerop (TREE_OPERAND (node, 1)))\n+      if (TREE_CODE (node) == MEM_REF\n+\t  && !integer_zerop (op1))\n \t{\n \t  pp_string (pp, \" + \");\n \t  dump_generic_node (pp, op1, spc, flags, false);\n \t}\n+      if (TREE_CODE (node) == TARGET_MEM_REF)\n+\t{\n+\t  tree tmp = TMR_INDEX2 (node);\n+\t  if (tmp)\n+\t    {\n+\t      pp_string (pp, \" + \");\n+\t      dump_generic_node (pp, tmp, spc, flags, false);\n+\t    }\n+\t  tmp = TMR_INDEX (node);\n+\t  if (tmp)\n+\t    {\n+\t      pp_string (pp, \" + \");\n+\t      dump_generic_node (pp, tmp, spc, flags, false);\n+\t      tmp = TMR_STEP (node);\n+\t      pp_string (pp, \" * \");\n+\t      if (tmp)\n+\t\tdump_generic_node (pp, tmp, spc, flags, false);\n+\t      else\n+\t\tpp_string (pp, \"1\");\n+\t    }\n+\t}\n       if ((flags & TDF_ALIAS)\n \t  && MR_DEPENDENCE_CLIQUE (node) != 0)\n \t{\n@@ -1854,65 +1876,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       break;\n \n     case MEM_REF:\n-      dump_mem_ref (pp, node, spc, flags);\n-      break;\n-\n     case TARGET_MEM_REF:\n-      {\n-\tconst char *sep = \"\";\n-\ttree tmp;\n-\n-\tpp_string (pp, \"MEM[\");\n-\n-\tif (TREE_CODE (TMR_BASE (node)) == ADDR_EXPR)\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"symbol: \");\n-\t    dump_generic_node (pp, TREE_OPERAND (TMR_BASE (node), 0),\n-\t\t\t       spc, flags, false);\n-\t  }\n-\telse\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"base: \");\n-\t    dump_generic_node (pp, TMR_BASE (node), spc, flags, false);\n-\t  }\n-\ttmp = TMR_INDEX2 (node);\n-\tif (tmp)\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"base: \");\n-\t    dump_generic_node (pp, tmp, spc, flags, false);\n-\t  }\n-\ttmp = TMR_INDEX (node);\n-\tif (tmp)\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"index: \");\n-\t    dump_generic_node (pp, tmp, spc, flags, false);\n-\t  }\n-\ttmp = TMR_STEP (node);\n-\tif (tmp)\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"step: \");\n-\t    dump_generic_node (pp, tmp, spc, flags, false);\n-\t  }\n-\ttmp = TMR_OFFSET (node);\n-\tif (tmp)\n-\t  {\n-\t    pp_string (pp, sep);\n-\t    sep = \", \";\n-\t    pp_string (pp, \"offset: \");\n-\t    dump_generic_node (pp, tmp, spc, flags, false);\n-\t  }\n-\tpp_right_bracket (pp);\n-      }\n+      dump_mem_ref (pp, node, spc, flags);\n       break;\n \n     case ARRAY_TYPE:"}]}