{"sha": "e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmYjM2YjhlNGM0MTI1ZjFhMDMyOGQ2Y2YyYjY4N2JhOWYxNjg0MA==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2019-05-26T17:33:52Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2019-05-26T17:33:52Z"}, "message": "invoke.texi (Link Options): Many editorial changes around -flinker-output.\n\n\t* doc/invoke.texi (Link Options): Many editorial changes around\n\t-flinker-output.\n\nFrom-SVN: r271633", "tree": {"sha": "efdebe53b0749e66004571ddbc52dee7b4104f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efdebe53b0749e66004571ddbc52dee7b4104f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840/comments", "author": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abbb83070a7a0fb605fb215c69bdca4962f28ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbb83070a7a0fb605fb215c69bdca4962f28ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbb83070a7a0fb605fb215c69bdca4962f28ed1"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "2ffb48cef0f0327f5e95e55ac56303d482fdb847", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "patch": "@@ -1,3 +1,8 @@\n+2019-05-26  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/invoke.texi (Link Options): Many editorial changes around\n+\t-flinker-output.\n+\n 2019-05-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/invoke.texi (x86 Options, -mvect8-ret-in-mem): Remove"}, {"sha": "1719037a8e08d157f5f0fb138ca941c4f698f123", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e1fb36b8e4c4125f1a0328d6cf2b687ba9f16840", "patch": "@@ -13141,44 +13141,48 @@ Options}.\n \n @item -flinker-output=@var{type}\n @opindex flinker-output\n-This option controls the code generation of the link time optimizer.  By\n-default the linker output is determined by the linker plugin automatically. For\n-debugging the compiler and in the case of incremental linking to non-lto object\n-file is desired, it may be useful to control the type manually.\n-\n-If @var{type} is @samp{exec} the code generation is configured to produce static\n-binary. In this case @option{-fpic} and @option{-fpie} are both disabled.\n-\n-If @var{type} is @samp{dyn} the code generation is configured to produce shared\n-library. In this case @option{-fpic} or @option{-fPIC} is preserved, but not\n-enabled automatically.  This makes it possible to build shared libraries without\n-position independent code on architectures this is possible, i.e.@: on x86.\n-\n-If @var{type} is @samp{pie} the code generation is configured to produce\n-@option{-fpie} executable. This result in similar optimizations as @samp{exec}\n-except that @option{-fpie} is not disabled if specified at compilation time.\n+This option controls code generation of the link time optimizer.  By\n+default the linker output is automatically determined by the linker\n+plugin.  For debugging the compiler and if incremental linking with a \n+non-LTO object file is desired, it may be useful to control the type\n+manually.\n+\n+If @var{type} is @samp{exec} code generation produces a static\n+binary. In this case @option{-fpic} and @option{-fpie} are both\n+disabled.\n+\n+If @var{type} is @samp{dyn} code generation produces a shared\n+library.  In this case @option{-fpic} or @option{-fPIC} is preserved,\n+but not enabled automatically.  This allows to build shared libraries\n+without position independent code on architectures where this is\n+possible, i.e.@: on x86.\n+\n+If @var{type} is @samp{pie} code generation produces an @option{-fpie}\n+executable. This results in similar optimizations as @samp{exec}\n+except that @option{-fpie} is not disabled if specified at compilation\n+time.\n \n If @var{type} is @samp{rel} the compiler assumes that incremental linking is\n done.  The sections containing intermediate code for link-time optimization are\n merged, pre-optimized, and output to the resulting object file. In addition, if\n @option{-ffat-lto-objects} is specified the binary code is produced for future\n-non-lto linking. The object file produced by incremental linking will be smaller\n-than a static library produced from the same object files.  At link-time the\n+non-LTO linking. The object file produced by incremental linking will be smaller\n+than a static library produced from the same object files.  At link time the\n result of incremental linking will also load faster to compiler than a static\n-library assuming that majority of objects in the library are used.\n+library assuming that the majority of objects in the library are used.\n \n-Finally @samp{nolto-rel} configure compiler to for incremental linking where\n-code generation is forced, final binary is produced and the intermediate code\n-for later link-time optimization is stripped. When multiple object files are\n-linked together the resulting code will be optimized better than with link time\n-optimizations disabled (for example, the cross-module inlining will happen),\n-most of benefits of whole program optimizations are however lost. \n+Finally @samp{nolto-rel} configures the compiler for incremental linking where\n+code generation is forced, a final binary is produced and the intermediate\n+code for later link-time optimization is stripped. When multiple object files\n+are linked together the resulting code will be optimized better than with\n+link-time optimizations disabled (for example, cross-module inlining will\n+happen), most of benefits of whole program optimizations are however lost. \n \n During the incremental link (by @option{-r}) the linker plugin will default to\n @option{rel}. With current interfaces to GNU Binutils it is however not\n-possible to link incrementally LTO objects and non-LTO objects into a single\n+possible to incrementally link LTO objects and non-LTO objects into a single\n mixed object file.  In the case any of object files in incremental link cannot\n-be used for link-time optimization the linker plugin will output warning and\n+be used for link-time optimization the linker plugin will issue a warning and\n use @samp{nolto-rel}. To maintain the whole program optimization it is\n recommended to link such objects into static library instead. Alternatively it\n is possible to use H.J. Lu's binutils with support for mixed objects."}]}