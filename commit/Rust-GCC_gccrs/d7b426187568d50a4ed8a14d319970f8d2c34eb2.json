{"sha": "d7b426187568d50a4ed8a14d319970f8d2c34eb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiNDI2MTg3NTY4ZDUwYTRlZDhhMTRkMzE5OTcwZjhkMmMzNGViMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-14T12:26:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-14T12:26:36Z"}, "message": "Makefile.in: Update to use common.opt and lang_opt_files.\n\n\t* Makefile.in: Update to use common.opt and lang_opt_files.\n\t(c-options.c, c-options.h): Remove.\n\t(options.c, options.h): Add.\n\t* c-opts.c: Include options.h not c-options.h.\n\t* common.opt: New file.\n\t* configure, configure.in: Add lang_opt_files.\n\t* opts.c: Include flags.h and diagnostic.h.\n\t(common_handle_option): New.\n\t(handle_option): Update to recognize common options and all\n\tlanguage-dependent options.\n\t* opts.h (CL_F77, CL_JAVA, CL_ADA, CL_COMMON, CL_TREELANG): New.\n\t(struct cl_option): Make flags of type int.\n\t* opts.h: Flag option with front ends to which it applies.\n\tHandle duplicate options.\n\t* toplev.c (filename): Remove.\n\t(independent_decode_option): Don't handle filenames and -quiet.\n\t(process_options, do_compile): Update.\nada:\n\t* Make-lang.in: Update to use options.c and options.h.\n\t* misc.c: Include options.h not aoptions.h.\n\t(gnat_handle_option): Abort on unrecognized switch.\n\t(gnat_init_options): Request Ada switches.\ncp:\n\t* Make-lang.in: Remove c-options.o.\nf:\n\t* Make-lang.in: Update to use options.c and options.h.\n\t* top.c: Include options.h not f-options.h.\n\t(gnat_handle_option): Abort on unrecognized switch.\n\t(ffe_init_options): From com.c.  Request F77 options.\n\t(ffe_handle_options): Abort on unrecognized switch.\n\t* com.c (ffe_init_options): Move to top.c.\n\t* top.h (fee_init_options): New.\njava:\n\t* Make-lang.in: Update to use options.c and options.h.\n\t* lang.c: Include options.h not j-options.h.\n\t(java_handle_option): Abort on unrecognized option.\n\t(java_init_options): Request Java switches.\ntreelang:\n\t* Make-lang.in: Update to use options.c and options.h.\n\t* tree1.c: Include options.h not t-options.h.\n\t(treelang_init_options): New.\n\t(treelang_handle_option): Abort on unrecognized switch.\n\t* treetree.c (LANG_HOOKS_INIT_OPTIONS): Override.\n\t* treetree.h (treelang_init_options): New.\n\nFrom-SVN: r67941", "tree": {"sha": "c305de4bdbbe6e6f7807a99ebcbbb965f0549ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c305de4bdbbe6e6f7807a99ebcbbb965f0549ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b426187568d50a4ed8a14d319970f8d2c34eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b426187568d50a4ed8a14d319970f8d2c34eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b426187568d50a4ed8a14d319970f8d2c34eb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b426187568d50a4ed8a14d319970f8d2c34eb2/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81d2d258f5b5578131c9add593df10bd4758f219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d2d258f5b5578131c9add593df10bd4758f219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d2d258f5b5578131c9add593df10bd4758f219"}], "stats": {"total": 400, "additions": 277, "deletions": 123}, "files": [{"sha": "d824921d3991d03f564919489cf244438acf5ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,23 @@\n+2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Update to use common.opt and lang_opt_files.\n+\t(c-options.c, c-options.h): Remove.\n+\t(options.c, options.h): Add.\n+\t* c-opts.c: Include options.h not c-options.h.\n+\t* common.opt: New file.\n+\t* configure, configure.in: Add lang_opt_files.\n+\t* opts.c: Include flags.h and diagnostic.h.\n+\t(common_handle_option): New.\n+\t(handle_option): Update to recognize common options and all\n+\tlanguage-dependent options.\n+\t* opts.h (CL_F77, CL_JAVA, CL_ADA, CL_COMMON, CL_TREELANG): New.\n+\t(struct cl_option): Make flags of type int.\n+\t* opts.h: Flag option with front ends to which it applies.\n+\tHandle duplicate options.\n+\t* toplev.c (filename): Remove.\n+\t(independent_decode_option): Don't handle filenames and -quiet.\n+\t(process_options, do_compile): Update.\n+\n 2003-06-14  Nick Clifton  <nickc@redhat.com>\n \n \t* doc/install.texi (Specific): Add description of different"}, {"sha": "e96eb38d8ec93e934f6290fdf3c95c3561c0a70b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -353,6 +353,7 @@ host_xm_file=@host_xm_file@\n host_xm_defines=@host_xm_defines@\n xm_file=@xm_file@\n xm_defines=@xm_defines@\n+lang_opt_files=@lang_opt_files@ $(srcdir)/c.opt $(srcdir)/common.opt\n lang_specs_files=@lang_specs_files@\n lang_options_files=@lang_options_files@\n lang_tree_files=@lang_tree_files@\n@@ -793,7 +794,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n-  c-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o c-options.o prefix.o \\\n+  c-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n   c-objc-common.o c-dump.o c-pch.o libcpp.a $(C_TARGET_OBJS)\n \n # Language-specific object files for C.\n@@ -812,7 +813,7 @@ OBJS = alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t   \\\n  haifa-sched.o hashtable.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n  integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n- loop.o mbchar.o optabs.o opts.o params.o predict.o\t\t\t   \\\n+ loop.o mbchar.o optabs.o options.o opts.o params.o predict.o\t\t   \\\n  print-rtl.o print-tree.o\t\t\t\t\t\t   \\\n  profile.o ra.o ra-build.o ra-colorize.o ra-debug.o ra-rewrite.o\t   \\\n  real.o recog.o reg-stack.o regclass.o regmove.o regrename.o\t\t   \\\n@@ -1317,16 +1318,10 @@ c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n         c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n-\tintl.h debug.h $(C_COMMON_H) opts.h c-options.h\n+\tintl.h debug.h $(C_COMMON_H) opts.h options.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n-c-options.c: c.opt $(srcdir)/opts.sh c-options.h\n-\n-c-options.h: c.opt $(srcdir)/opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh c-options.c c-options.h \\\n-\t\t$(srcdir)/c.opt\n-\n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_COMMON_H) c-pragma.h flags.h toplev.h langhooks.h \\\n \toutput.h except.h real.h $(TM_P_H)\n@@ -1421,6 +1416,12 @@ s-specs : Makefile\n \t$(SHELL) $(srcdir)/move-if-change tmp-specs.h specs.h\n \t$(STAMP) s-specs\n \n+options.c: $(lang_opt_files) $(srcdir)/opts.sh options.h\n+\n+options.h: $(lang_opt_files) $(srcdir)/opts.sh\n+\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh options.c options.h \\\n+\t\t$(lang_opt_files)\n+\n dumpvers: dumpvers.c\n \n version.o: version.c version.h\n@@ -1480,7 +1481,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n-opts.o : opts.c opts.h $(CONFIG_H) $(SYSTEM_H) \\\n+opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H)\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n@@ -2788,7 +2789,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f xlimits.h\n # Delete other built files.\n \t-rm -f xsys-protos.hT\n-\t-rm -f specs.h options_.h gencheck.h c-options.c c-options.h\n+\t-rm -f specs.h options_.h gencheck.h options.c options.h\n # Delete the stamp and temporary files.\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*"}, {"sha": "a0bdb474d8bc664e4105792bf22449441dea6047", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update to use options.c and options.h.\n+\t* misc.c: Include options.h not aoptions.h.\n+\t(gnat_handle_option): Abort on unrecognized switch.\n+\t(gnat_init_options): Request Ada switches.\n+\n 2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.opt: Add -Wall."}, {"sha": "a2ca68475ea14d34e6d6f8f8249b427a25eec2d8", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -116,8 +116,7 @@ ADA_TOOLS_FLAGS_TO_PASS=\\\n # Object files for gnat1 from C sources.\n GNAT1_C_OBJS = ada/b_gnat1.o ada/adadecode.o ada/adaint.o ada/cstreams.o \\\n  ada/cio.o ada/targtyps.o ada/decl.o ada/misc.o ada/utils.o ada/utils2.o \\\n- ada/trans.o ada/cuintp.o ada/argv.o ada/raise.o ada/init.o ada/tracebak.o \\\n- ada/aoptions.o\n+ ada/trans.o ada/cuintp.o ada/argv.o ada/raise.o ada/init.o ada/tracebak.o\n \n # Object files from Ada sources that are used by gnat1\n \n@@ -761,7 +760,6 @@ ada.mostlyclean:\n \t-$(RM) ada/*$(objext) ada/*.ali ada/b_*.c\n \t-$(RM) ada/*$(coverageexts)\n \t-$(RM) ada/sdefault.adb ada/stamp-sdefault\n-\t-$(RM) ada/aoptions.c ada/aoptions.h\n \t-$(RMDIR) ada/tools\n ada.clean:\n ada.distclean:\n@@ -1016,7 +1014,7 @@ ada/misc.o : ada/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    diagnostic.h output.h except.h $(TM_P_H) langhooks.h debug.h $(LANGHOOKS_DEF_H) \\\n    libfuncs.h $(OPTABS_H) ada/ada.h ada/types.h ada/atree.h ada/nlists.h \\\n    ada/elists.h ada/sinfo.h ada/einfo.h ada/namet.h ada/stringt.h ada/uintp.h \\\n-   ada/fe.h $(ADA_TREE_H) ada/gigi.h ada/adadecode.h opts.h ada/aoptions.h\n+   ada/fe.h $(ADA_TREE_H) ada/gigi.h ada/adadecode.h opts.h options.h\n \n ada/targtyps.o : ada/targtyps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    ada/ada.h ada/types.h ada/atree.h ada/nlists.h ada/elists.h ada/uintp.h \\\n@@ -2525,10 +2523,4 @@ ada/widechar.o : ada/ada.ads ada/a-except.ads ada/hostparm.ads \\\n    ada/types.ads ada/unchconv.ads ada/unchdeal.ads ada/widechar.ads \\\n    ada/widechar.adb \n \n-ada/aoptions.c: ada/lang.opt opts.sh ada/aoptions.h\n-\n-ada/aoptions.h: ada/lang.opt opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh ada/aoptions.c \\\n-\t\tada/aoptions.h $(srcdir)/ada/lang.opt\n-\n # end of regular dependencies"}, {"sha": "4d171fc1a6fa04257004660f068d788cc0383a98", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -75,7 +75,7 @@\n #include \"gigi.h\"\n #include \"adadecode.h\"\n #include \"opts.h\"\n-#include \"aoptions.h\"\n+#include \"options.h\"\n \n extern FILE *asm_out_file;\n extern int save_argc;\n@@ -238,7 +238,7 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n   switch (code)\n     {\n     default:\n-      return 0;\n+      abort();\n \n     case OPT_I:\n       q = xmalloc (sizeof(\"-I\") + strlen (arg));\n@@ -294,7 +294,7 @@ gnat_init_options ()\n   gnat_argv[0] = save_argv[0];     /* name of the command */ \n   gnat_argc = 1;\n \n-  return 0;\n+  return CL_ADA;\n }\n \n /* Here is the function to handle the compiler error processing in GCC.  */"}, {"sha": "f1c87cb41b695fe8358c10e5e7816f89f6db36da", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -36,7 +36,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-incpath.h\"\n #include \"debug.h\"\t\t/* For debug_hooks.  */\n #include \"opts.h\"\n-#include \"c-options.h\"\n+#include \"options.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true"}, {"sha": "c3c955e2462359ef4ce6e4d2235a8318798c5936", "filename": "gcc/common.opt", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -0,0 +1,47 @@\n+; Options for the language- and target-independent parts of the compiler.\n+; Copyright (C) 2003 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+; \n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+; \n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+\n+; This file is processed by the script opts.sh.  It is a database of\n+; command line options, with each record separated by a blank line,\n+; and each field appearing on its own line.  The first field is the\n+; command-line switch with the leading \"-\" removed.  All options\n+; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n+; form; this form should not be listed.  If you do not want this\n+; negative form and you want it to be automatically rejected, add\n+; RejectNegative to the second field.\n+\n+; The second field should contain \"Common\".  If the switch takes an\n+; argument, then you should also specify \"Joined\" and/or \"Separate\" to\n+; indicate where the argument can appear.\n+\n+; Comments can appear on their own line anwhere in the file, preceded\n+; by a semicolon.  Whitespace is permitted before the semicolon.\n+\n+; For each switch XXX below, an enumeration constant is created by the\n+; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n+; characters replaced with an underscore.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+quiet\n+Common\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "b4ac3e0b73817f308d9e383873d390f73d1ff79a", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -2440,7 +2440,7 @@ fi\n \n \n # Find some useful tools\n-for ac_prog in gawk mawk nawk awk\n+for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -8799,11 +8799,15 @@ fi\n # Make empty files to contain the specs and options for each language.\n # Then add #include lines to for a compiler that has specs and/or options.\n \n+lang_opt_files=\n lang_specs_files=\n lang_options_files=\n lang_tree_files=\n for subdir in . $subdirs\n do\n+\tif test -f $srcdir/$subdir/lang.opt; then\n+\t    lang_opt_files=\"$lang_opt_files $srcdir/$subdir/lang.opt\"\n+\tfi\n \tif test -f $srcdir/$subdir/lang-specs.h; then\n \t    lang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n \tfi\n@@ -9078,6 +9082,7 @@ ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xma\n \n \n \n+\n \n \n # Echo that links are built\n@@ -9387,6 +9392,7 @@ s%@host_xm_file@%$host_xm_file%g\n s%@host_xm_defines@%$host_xm_defines%g\n s%@out_host_hook_obj@%$out_host_hook_obj%g\n s%@install@%$install%g\n+s%@lang_opt_files@%$lang_opt_files%g\n s%@lang_options_files@%$lang_options_files%g\n s%@lang_specs_files@%$lang_specs_files%g\n s%@lang_tree_files@%$lang_tree_files%g"}, {"sha": "a3fe7ec270a2818033932d39def0ffce536e4332", "filename": "gcc/configure.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -2893,11 +2893,15 @@ AC_SUBST(MAINT)dnl\n # Make empty files to contain the specs and options for each language.\n # Then add #include lines to for a compiler that has specs and/or options.\n \n+lang_opt_files=\n lang_specs_files=\n lang_options_files=\n lang_tree_files=\n for subdir in . $subdirs\n do\n+\tif test -f $srcdir/$subdir/lang.opt; then\n+\t    lang_opt_files=\"$lang_opt_files $srcdir/$subdir/lang.opt\"\n+\tfi\n \tif test -f $srcdir/$subdir/lang-specs.h; then\n \t    lang_specs_files=\"$lang_specs_files $srcdir/$subdir/lang-specs.h\"\n \tfi\n@@ -3141,6 +3145,7 @@ AC_SUBST(host_xm_file)\n AC_SUBST(host_xm_defines)\n AC_SUBST(out_host_hook_obj)\n AC_SUBST(install)\n+AC_SUBST(lang_opt_files)\n AC_SUBST(lang_options_files)\n AC_SUBST(lang_specs_files)\n AC_SUBST(lang_tree_files)"}, {"sha": "8713ac966b3d5a5225505037d270be71a1d0779a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,7 @@\n+2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Remove c-options.o.\n+\n 2003-06-13  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* lex.c: Convert to ISO C."}, {"sha": "ddada02bd6b8016d039cb26eb1cc2a68a359b8ba", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -80,8 +80,7 @@ g++-cross$(exeext): g++$(exeext)\n # Shared with C front end:\n CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n \tc-dump.o $(CXX_TARGET_OBJS) c-pretty-print.o c-opts.o c-pch.o \\\n-\tc-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n-\tc-options.o\n+\tc-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o\n \n # Language-specific object files.\n CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\"}, {"sha": "e6667f4695e489a61c6c942caf5fe622c85bf874", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,12 @@\n+Sat Jun 14 13:25:00 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update to use options.c and options.h.\n+\t* top.c: Include options.h not f-options.h.\n+\t(ffe_init_options): From com.c.  Request F77 options.\n+\t(ffe_handle_options): Abort on unrecognized switch.\n+\t* com.c (ffe_init_options): Move to top.c.\n+\t* top.h (fee_init_options): New.\n+\n 2003-06-13  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/9864"}, {"sha": "c243317e7aee460d4fbaafdc44e44d138429e217", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -88,7 +88,7 @@ g77-cross$(exeext): g77$(exeext)\n \n F77_OBJS = f/bad.o f/bit.o f/bld.o f/com.o f/data.o f/equiv.o f/expr.o \\\n  f/global.o f/implic.o f/info.o f/intrin.o f/lab.o f/lex.o f/malloc.o \\\n- f/name.o f/f-options.o f/parse.o f/src.o f/st.o f/sta.o f/stb.o f/stc.o \\\n+ f/name.o f/parse.o f/src.o f/st.o f/sta.o f/stb.o f/stc.o \\\n  f/std.o f/ste.o f/storag.o f/stp.o f/str.o f/sts.o f/stt.o f/stu.o \\\n  f/stv.o f/stw.o f/symbol.o f/target.o f/top.o f/type.o f/where.o\n \n@@ -320,7 +320,6 @@ f77.uninstall: installdirs\n f77.mostlyclean:\n \t-rm -f f/*$(objext)\n \t-rm -f f/*$(coverageexts)\n-\t-rm -f f/f-options.c f/f-options.h\n \t-rm -f f/fini$(build_exeext) f/stamp-str f/str-*.h f/str-*.j\n \t-rm -f f/intdoc$(build_exeext) f/ansify$(build_exeext) f/intdoc.h0\n \t-rm -f g77.aux g77.cps g77.ky g77.toc g77.vr g77.fn g77.kys \\\n@@ -543,14 +542,8 @@ f/top.o: f/top.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/top.h f/malloc.h f/where.h \\\n  f/info-w.def f/target.h f/lex.h f/type.h f/lab.h f/storag.h \\\n  f/symbol.h f/symbol.def f/equiv.h f/global.h f/name.h f/intrin.h \\\n  f/intrin.def f/data.h f/expr.h f/implic.h f/src.h f/st.h flags.h \\\n- toplev.h coretypes.h $(TM_H) opts.h f/f-options.h\n+ toplev.h coretypes.h $(TM_H) opts.h options.h\n f/type.o: f/type.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/type.h f/malloc.h \\\n  coretypes.h $(TM_H)\n f/where.o: f/where.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/where.h glimits.h \\\n  f/top.h f/malloc.h f/lex.h $(GGC_H) gt-f-where.h coretypes.h $(TM_H)\n-\n-f/f-options.c: f/lang.opt opts.sh f/f-options.h\n-\n-f/f-options.h: f/lang.opt opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh f/f-options.c \\\n-\t\tf/f-options.h $(srcdir)/f/lang.opt"}, {"sha": "6750fc32f209ae58cf508057bbdd8c8649aea4b0", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -14125,7 +14125,6 @@ insert_block (tree block)\n static bool ffe_init PARAMS ((void));\n static void ffe_finish PARAMS ((void));\n static bool ffe_post_options PARAMS ((const char **));\n-static int ffe_init_options PARAMS ((void));\n static void ffe_print_identifier PARAMS ((FILE *, tree, int));\n \n struct language_function GTY(())\n@@ -14265,20 +14264,6 @@ ffe_finish ()\n   fclose (finput);\n }\n \n-static int\n-ffe_init_options ()\n-{\n-  /* Set default options for Fortran.  */\n-  flag_move_all_movables = 1;\n-  flag_reduce_all_givs = 1;\n-  flag_argument_noalias = 2;\n-  flag_merge_constants = 2;\n-  flag_errno_math = 0;\n-  flag_complex_divide_method = 1;\n-\n-  return 0;\n-}\n-\n static bool\n ffe_mark_addressable (tree exp)\n {"}, {"sha": "7ca2db998b86b3923cb0ca7e0bb9fb148f0b6051", "filename": "gcc/f/top.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -47,7 +47,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"lex.h\"\n #include \"malloc.h\"\n #include \"name.h\"\n-#include \"f-options.h\"\n+#include \"options.h\"\n #include \"opts.h\"\n #include \"src.h\"\n #include \"st.h\"\n@@ -155,6 +155,21 @@ ffe_is_digit_string_ (const char *s)\n   return (p != s) && (*p == '\\0');\n }\n \n+/* Get ready for options handling.  */\n+int\n+ffe_init_options ()\n+{\n+  /* Set default options for Fortran.  */\n+  flag_move_all_movables = 1;\n+  flag_reduce_all_givs = 1;\n+  flag_argument_noalias = 2;\n+  flag_merge_constants = 2;\n+  flag_errno_math = 0;\n+  flag_complex_divide_method = 1;\n+\n+  return CL_F77;\n+}\n+\n /* Handle command-line options.\t Returns 0 if unrecognized, 1 if\n    recognized and handled.  */\n int\n@@ -176,7 +191,7 @@ ffe_handle_option (size_t scode, const char *arg, int value)\n   switch (code)\n     {\n     default:\n-      return 0;\n+      abort();\n \n     case OPT_fversion:\n       ffe_set_is_version (TRUE);"}, {"sha": "041dc16ef629a50f5007d3d3cbf1f75db13ee739", "filename": "gcc/f/top.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Ftop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ff%2Ftop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.h?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -141,6 +141,7 @@ extern bool ffe_in_4;\n \n /* Declare functions with prototypes. */\n \n+int ffe_init_options (void);\n int ffe_handle_option (size_t code, const char *arg, int on);\n void ffe_file (ffewhereFile wf, FILE *f);\n void ffe_init_0 (void);"}, {"sha": "88bc7fe44dd37d66491931e55a4bb8db385e53c5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update to use options.c and options.h.\n+\t* lang.c: Include options.h not j-options.h.\n+\t(java_handle_option): Abort on unrecognized option.\n+\t(java_init_options): Request Java switches.\n+\n 2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Handle mostlyclean."}, {"sha": "ae2a7e73165415f7a248418b8fac9991efc62e04", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -108,7 +108,7 @@ gt-java-builtins.h gtype-java.h gt-java-resource.h : s-gtype ; @true\n JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/constants.o java/lang.o java/typeck.o java/except.o java/verify.o \\\n   java/zextract.o java/jcf-io.o java/jcf-parse.o java/mangle.o \\\n-  java/mangle_name.o java/builtins.o java/resource.o java/j-options.o \\\n+  java/mangle_name.o java/builtins.o java/resource.o \\\n   java/jcf-write.o java/buffer.o java/check-init.o java/jcf-depend.o \\\n   java/jcf-path.o java/xref.o java/boehm.o java/java-tree-inline.o mkdeps.o\n \n@@ -237,7 +237,6 @@ java.install-info: installdirs\n java.mostlyclean:\n \t-rm -f java/*$(objext) $(DEMANGLER_PROG)\n \t-rm -f java/*$(coverageexts)\n-\t-rm -f java/j-options.c java/j-options.h\n \t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext) s-java\n java.clean:\n java.distclean:\n@@ -327,7 +326,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H)\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) diagnostic.h \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h java/j-options.h\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\\n@@ -348,12 +347,6 @@ java/xref.o: java/xref.c java/xref.h $(CONFIG_H) $(JAVA_TREE_H) toplev.h \\\n java/zextract.o: java/zextract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   java/zipfile.h\n \n-java/j-options.c: java/lang.opt opts.sh java/j-options.h\n-\n-java/j-options.h: java/lang.opt opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh java/j-options.c \\\n-\t\tjava/j-options.h $(srcdir)/java/lang.opt\n-\n # jcf-io.o needs $(ZLIBINC) added to cflags.\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(JAVA_TREE_H)"}, {"sha": "8fd4ba07437d9832e462616a0bc8e7d3fb251ebf", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -46,7 +46,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"splay-tree.h\"\n #include \"tree-dump.h\"\n #include \"opts.h\"\n-#include \"j-options.h\"\n+#include \"options.h\"\n \n static bool java_init (void);\n static void java_finish (void);\n@@ -290,7 +290,7 @@ java_handle_option (size_t scode, const char *arg, int value)\n   switch (code)\n     {\n     default:\n-      return 0;\n+      abort();\n \n     case OPT_I:\n       jcf_path_include_arg (arg);\n@@ -695,7 +695,7 @@ java_init_options (void)\n \n   jcf_path_init ();\n \n-  return 0;\n+  return CL_JAVA;\n }\n \n static bool"}, {"sha": "99b3298688b4cab89706e6050847282a54b3608b", "filename": "gcc/opts.c", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -26,8 +26,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree.h\"\n #include \"langhooks.h\"\n #include \"opts.h\"\n+#include \"options.h\"\n+#include \"flags.h\"\n+#include \"toplev.h\"\n \n static size_t find_opt (const char *, int);\n+static int common_handle_option (size_t scode, const char *arg, int value);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS on\n@@ -134,7 +138,8 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n     {\n       opt_index = cl_options_count;\n       arg = opt;\n-      result = 1;\n+      main_input_filename = opt;\n+      result = (*lang_hooks.handle_option) (opt_index, arg, on);\n     }\n   else\n     {\n@@ -152,8 +157,7 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \t  on = false;\n \t}\n \n-      /* Skip over '-'.  */\n-      opt_index = find_opt (opt + 1, lang_mask);\n+      opt_index = find_opt (opt + 1, lang_mask | CL_COMMON);\n       if (opt_index == cl_options_count)\n \tgoto done;\n \n@@ -191,14 +195,51 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \t  if (*arg == '\\0')\n \t    arg = NULL;\n \t}\n-    }\n \n-  temp = (*lang_hooks.handle_option) (opt_index, arg, on);\n-  if (temp <= 0)\n-    result = temp;\n+      if (option->flags & lang_mask)\n+\t{\n+\t  temp = (*lang_hooks.handle_option) (opt_index, arg, on);\n+\t  if (temp <= 0)\n+\t    result = temp;\n+\t}\n+\n+      if (result > 0 && (option->flags & CL_COMMON))\n+\t{\n+\t  if (common_handle_option (opt_index, arg, on) == 0)\n+\t    result = 0;\n+\t}\n+    }\n \n  done:\n   if (dup)\n     free (dup);\n   return result;\n }\n+\n+/* Handle target- and language-independent options.  Return zero to\n+   generate an \"unknown option\" message.  */\n+static int\n+common_handle_option (size_t scode, const char *arg,\n+\t\t      int value ATTRIBUTE_UNUSED)\n+{\n+  const struct cl_option *option = &cl_options[scode];\n+  enum opt_code code = (enum opt_code) scode;\n+\n+  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n+    {\n+      error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n+      return 1;\n+    }\n+\n+  switch (code)\n+    {\n+    default:\n+      abort ();\n+\n+    case OPT_quiet:\n+      quiet_flag = 1;\n+      break;\n+    }\n+\n+  return 1;\n+}"}, {"sha": "340092e87d3792b405b2801ad2fdb1bb4131e6db", "filename": "gcc/opts.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -27,7 +27,7 @@ struct cl_option\n {\n   const char *opt_text;\n   unsigned char opt_len;\n-  unsigned char flags;\n+  unsigned int flags;\n };\n \n extern const struct cl_option cl_options[];\n@@ -37,8 +37,14 @@ extern const unsigned int cl_options_count;\n #define CL_OBJC\t\t\t(1 << 1) /* Only ObjC.  */\n #define CL_CXX\t\t\t(1 << 2) /* Only C++.  */\n #define CL_OBJCXX\t\t(1 << 3) /* Only ObjC++.  */\n-#define CL_JOINED\t\t(1 << 4) /* If takes joined argument.  */\n-#define CL_SEPARATE\t\t(1 << 5) /* If takes a separate argument.  */\n-#define CL_REJECT_NEGATIVE\t(1 << 6) /* Reject no- form.  */\n+#define CL_F77\t\t\t(1 << 4) /* Only Fortran.  */\n+#define CL_JAVA\t\t\t(1 << 5) /* Only Java.  */\n+#define CL_ADA\t\t\t(1 << 6) /* Only Ada.  */\n+#define CL_TREELANG\t\t(1 << 7) /* Only Treelang.  */\n+#define CL_COMMON\t\t(1 << 8) /* Language-independent.  */\n+\n+#define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */\n+#define CL_REJECT_NEGATIVE\t(1 << 26) /* Reject no- form.  */\n \n #endif"}, {"sha": "9be2c5d7befb65f3a973bfc92758de1489178c97", "filename": "gcc/opts.sh", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -48,6 +48,11 @@ cat \"$@\" | ${AWK} '\n         if (langs ~ \":ObjC:\") flags = flags \" | CL_OBJC\"\n         if (langs ~ \":C\\\\+\\\\+:\") flags = flags \" | CL_CXX\"\n         if (langs ~ \":ObjC\\\\+\\\\+:\") flags = flags \" | CL_OBJCXX\"\n+        if (langs ~ \":F77:\") flags = flags \" | CL_F77\"\n+        if (langs ~ \":Java:\") flags = flags \" | CL_JAVA\"\n+        if (langs ~ \":Ada:\") flags = flags \" | CL_ADA\"\n+        if (langs ~ \":Tree:\") flags = flags \" | CL_TREELANG\"\n+        if (langs ~ \":Common:\") flags = flags \" | CL_COMMON\"\n         if (langs ~ \":Joined:\") flags = flags \" | CL_JOINED\"\n         if (langs ~ \":Separate:\") flags = flags \" | CL_SEPARATE\"\n         if (langs ~ \":RejectNegative:\") flags = flags \" | CL_REJECT_NEGATIVE\"\n@@ -56,29 +61,50 @@ cat \"$@\" | ${AWK} '\n     }\n \n     BEGIN {\n+\tFS = \"\\034\"\n+\tn_opts = 0\n+    }\n+\n+# Collect the text and flags of each option into an array\n+    {\n+\topts[n_opts] = $1\n+\tflags[n_opts] = $2\n+\tn_opts++;\n+    }\n+\n+# Dump out an enumeration into a .h file, and an array of options into a\n+# C file.  Combine the flags of duplicate options.\n+    END {\n \tc_file = \"'${C_FILE}'\"\n \th_file = \"'${H_FILE}'\"\n-\tFS = \"\\034\"\n+\tcomma = \",\"\n+\n \tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > h_file\n-\tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > c_file\n \tprint \"enum opt_code\\n{\"\t\t\t>> h_file\n+\n+\tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > c_file\n \tprint \"#include \\\"\" h_file \"\\\"\"\t\t\t>> c_file\n \tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n \tprint \"const unsigned int cl_options_count = N_OPTS;\\n\" >> c_file\n \tprint \"const struct cl_option cl_options[] =\\n{\" >> c_file\n-    }\n \n-    {\n-\topt = $1\n-\tgsub ( \"[^A-Za-z0-9]\", \"_\", opt)\n-\ts = substr (\"                                  \", length (opt))\n-\tenum = \"OPT_\" opt\n-\tprintf (\"  %s,%s/* -%s */\\n\", enum, s, $1 )\t>> h_file\n-\tprintf (\"  { \\\"%s\\\", %u, %s },\\n\", $1, \\\n-\t    length ($1), switch_flags($2))\t\t>> c_file\n-    }\n+\tfor (i = 0; i < n_opts; i++) {\n+\t    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+\t\tflags[i + 1] = flags[i] \" \" flags[i + 1];\n+\t\ti++;\n+\t    }\n+\n+\t    enum = \"OPT_\" opts[i]\n+\t    gsub( \"[^A-Za-z0-9]\", \"_\", enum)\n+\t    s = substr(\"                                  \", length (opts[i]))\n+\t    if (i + 1 == n_opts)\n+\t\tcomma = \"\"\n+\n+\t    printf(\"  %s,%s/* -%s */\\n\", enum, s, opts[i]) >> h_file\n+\t    printf(\"  { \\\"%s\\\", %u, %s }%s\\n\", opts[i], \\\n+\t\tlength(opts[i]), switch_flags(flags[i]), comma) >> c_file\n+\t}\n \n-    END {\n \tprint \"  N_OPTS\\n};\"\t\t\t\t>> h_file\n \tprint \"};\"\t\t\t\t\t>> c_file\n     }"}, {"sha": "f349f73f5f1464989f875ad50cba48ddbf70f2a8", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -359,7 +359,6 @@ static void close_dump_file (enum dump_file_index,\n int rtl_dump_and_exit;\n int flag_print_asm_name;\n static int version_flag;\n-static const char *filename;\n enum graph_dump_types graph_dump_format;\n \n /* Name for output file of assembly code, specified with -o.  */\n@@ -4594,14 +4593,7 @@ independent_decode_option (int argc, char **argv)\n   char *arg = argv[0];\n \n   if (arg[0] != '-' || arg[1] == 0)\n-    {\n-      if (arg[0] == '+')\n-\treturn 0;\n-\n-      filename = arg;\n-\n-      return 1;\n-    }\n+    return 1;\n \n   arg++;\n \n@@ -4705,13 +4697,6 @@ independent_decode_option (int argc, char **argv)\n \treturn 0;\n       break;\n \n-    case 'q':\n-      if (!strcmp (arg, \"quiet\"))\n-\tquiet_flag = 1;\n-      else\n-\treturn 0;\n-      break;\n-\n     case 'v':\n       if (!strcmp (arg, \"version\"))\n \tversion_flag = 1;\n@@ -5385,8 +5370,8 @@ process_options (void)\n      initialization based on the command line options.  This hook also\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)\n      so we can correctly initialize debug output.  */\n-  no_backend = (*lang_hooks.post_options) (&filename);\n-  main_input_filename = input_filename = filename;\n+  no_backend = (*lang_hooks.post_options) (&main_input_filename);\n+  input_filename = main_input_filename;\n \n #ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n@@ -5396,9 +5381,9 @@ process_options (void)\n   /* Set aux_base_name if not already set.  */\n   if (aux_base_name)\n     ;\n-  else if (filename)\n+  else if (main_input_filename)\n     {\n-      char *name = xstrdup (lbasename (filename));\n+      char *name = xstrdup (lbasename (main_input_filename));\n \n       strip_off_ending (name, strlen (name));\n       aux_base_name = name;\n@@ -5738,7 +5723,7 @@ do_compile (void)\n \tbackend_init ();\n \n       /* Language-dependent initialization.  Returns true on success.  */\n-      if (lang_dependent_init (filename))\n+      if (lang_dependent_init (main_input_filename))\n \tcompile_file ();\n \n       finalize ();"}, {"sha": "710f468de2a66098c18c65733992cb2aa1e496bf", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -1,3 +1,12 @@\n+2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update to use options.c and options.h.\n+\t* tree1.c: Include options.h not t-options.h.\n+\t(treelang_init_options): New.\n+\t(treelang_handle_option): Abort on unrecognized switch.\n+\t* treetree.c (LANG_HOOKS_INIT_OPTIONS): Override.\n+\t* treetree.h (treelang_init_options): New.\n+\n 2003-06-12  Andreas Jaeger  <aj@suse.de>\n \n \t* treetree.c: Remove cl_options-count and cl_options."}, {"sha": "52106a4329163feef29c42b960ebcc43a2746f12", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -85,11 +85,11 @@ treelang.done: tree1$(exeext)\n # core compiler\n tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/parse.o\\\n \t$(TREE_BE_LIBS) c-convert.o c-typeck.o c-common.o c-cppbuiltin.o \\\n-\tc-decl.o attribs.o treelang/t-options.o\n+\tc-decl.o attribs.o\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \ttreelang/tree1.o treelang/treetree.o treelang/lex.o treelang/parse.o \\\n \tc-convert.o c-typeck.o c-common.o c-cppbuiltin.o c-decl.o attribs.o \\\n-\t$(TREE_BE_LIBS) treelang/t-options.o\n+\t$(TREE_BE_LIBS)\n \n #\f\n # Compiling object files from source files.\n@@ -98,7 +98,7 @@ tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/par\n \n treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   flags.h toplev.h $(GGC_H) $(TREE_H) diagnostic.h treelang/treelang.h \\\n-  input.h treelang/treetree.h treelang/t-options.h \\\n+  input.h treelang/treetree.h options.h opts.h \\\n   treelang/treetree.h gt-treelang-tree1.h gtype-treelang.h\n \n treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -112,12 +112,6 @@ treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n treelang/lex.o: treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) diagnostic.h $(TREE_H) treelang/treelang.h input.h treelang/parse.h\n \n-treelang/t-options.c: treelang/lang.opt opts.sh treelang/t-options.h\n-\n-treelang/t-options.h: treelang/lang.opt opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh treelang/t-options.c \\\n-\t\ttreelang/t-options.h $(srcdir)/treelang/lang.opt\n-\n # generated files the files from lex and yacc are put into the source\n # directory in case someone wants to build but does not have\n # lex/yacc\n@@ -237,7 +231,6 @@ treelang.mostlyclean:\n \t    rm -f treelang/$$name$(exeext); \\\n \t  fi ; \\\n \tdone\n-\t-rm -f treelang/t-options.c treelang/t-options.h\n \t-rm -f treelang/*$(objext)\n \t-rm -f treelang/*$(coverageexts)\n \t-rm treelang.done"}, {"sha": "6be21a34095d806552fa9a2990cc13833d3c9a48", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -45,7 +45,7 @@\n #include \"treelang.h\"\n #include \"treetree.h\"\n #include \"opts.h\"\n-#include \"t-options.h\"\n+#include \"options.h\"\n \n extern int yyparse (void);\n \n@@ -88,6 +88,13 @@ static int version_done = 0;\n \n static unsigned int work_nesting_level = 0;\n \n+/* Prepare to handle switches.  */\n+int\n+treelang_init_options (void)\n+{\n+  return CL_TREELANG;\n+}\n+\n /* Process a switch - called by opts.c.  */\n int\n treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n@@ -98,7 +105,7 @@ treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n   switch (code)\n     {\n     default:\n-      return 0;\n+      abort();\n \n     case OPT__help:\n       if (!version_done)"}, {"sha": "40db190851709779a1d4685a9dbabb4417e2c905", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -112,6 +112,8 @@ extern char **file_names;\n #define LANG_HOOKS_NAME\t\"GNU treelang\"\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH\t\ttreelang_finish\n+#undef LANG_HOOKS_INIT_OPTIONS\n+#define LANG_HOOKS_INIT_OPTIONS  treelang_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION treelang_handle_option\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "2c7aec3b5f32507e9d607b125397c1c653de1646", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b426187568d50a4ed8a14d319970f8d2c34eb2/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=d7b426187568d50a4ed8a14d319970f8d2c34eb2", "patch": "@@ -63,6 +63,7 @@ tree tree_code_get_type (int type_num);\n void treelang_init_decl_processing (void);\n void treelang_finish (void);\n bool treelang_init (void);\n+int treelang_init_options (void);\n int treelang_handle_option (size_t scode, const char *arg, int value);\n void treelang_parse_file (int debug_flag);\n void push_var_level (void);"}]}