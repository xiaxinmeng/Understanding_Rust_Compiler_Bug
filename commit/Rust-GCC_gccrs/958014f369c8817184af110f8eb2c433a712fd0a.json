{"sha": "958014f369c8817184af110f8eb2c433a712fd0a", "node_id": "C_kwDOANBUbNoAKDk1ODAxNGYzNjljODgxNzE4NGFmMTEwZjhlYjJjNDMzYTcxMmZkMGE", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-10-25T05:18:08Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-10-25T05:18:08Z"}, "message": "vect: Fix wrong shift_n after widening on BE [PR107338]\n\nAs PR107338 shows, with the use of widening loads, the\ncontainer_type can become a wider type, it causes us to\nget wrong shift_n since the BIT_FIELD_REF offset actually\nbecomes bigger on BE.  Taking the case in PR107338 as\nexample, at the beginning the container type is short and\nBIT_FIELD_REF offset is 8 and size is 4, with unpacking to\nwider type int, the high 16 bits are zero, by viewing it\nas type int, its offset actually becomes to 24.  So the\nshift_n should be 4 (32 - 24 - 4) instead of 20 (32 - 8\n- 4).\n\nI noticed that if we move shift_n calculation early\nbefore the adjustments for widening loads (container type\nchange), it's based on all the stuffs of the original\ncontainer, the shfit_n calculated there is exactly what\nwe want, it can be independent of widening.  Besides, I\nadd prec adjustment together with the current adjustments\nfor widening loads, although prec's subsequent uses don't\nrequire this change for now, since the container type gets\nchanged, we should keep the corresponding prec consistent.\n\n\tPR tree-optimization/107338\n\ngcc/ChangeLog:\n\n\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Move\n\tshfit_n calculation before the adjustments for widening loads.", "tree": {"sha": "622861233e1174cd9b8118e1b1a673d5ce7ae961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622861233e1174cd9b8118e1b1a673d5ce7ae961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/958014f369c8817184af110f8eb2c433a712fd0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958014f369c8817184af110f8eb2c433a712fd0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958014f369c8817184af110f8eb2c433a712fd0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958014f369c8817184af110f8eb2c433a712fd0a/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a20a4705c960ac323d1fe25f766e1204e0c98bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a20a4705c960ac323d1fe25f766e1204e0c98bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a20a4705c960ac323d1fe25f766e1204e0c98bd"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "4e2612e5b95f6d391edb9212d396fb077a402901", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958014f369c8817184af110f8eb2c433a712fd0a/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958014f369c8817184af110f8eb2c433a712fd0a/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=958014f369c8817184af110f8eb2c433a712fd0a", "patch": "@@ -1925,6 +1925,16 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n   tree container_type = TREE_TYPE (container);\n   tree vectype = get_vectype_for_scalar_type (vinfo, container_type);\n \n+  /* Calculate shift_n before the adjustments for widening loads, otherwise\n+     the container may change and we have to consider offset change for\n+     widening loads on big endianness.  The shift_n calculated here can be\n+     independent of widening.  */\n+  unsigned HOST_WIDE_INT shift_n = bit_field_offset (bf_ref).to_constant ();\n+  unsigned HOST_WIDE_INT mask_width = bit_field_size (bf_ref).to_constant ();\n+  unsigned HOST_WIDE_INT prec = tree_to_uhwi (TYPE_SIZE (container_type));\n+  if (BYTES_BIG_ENDIAN)\n+    shift_n = prec - shift_n - mask_width;\n+\n   /* We move the conversion earlier if the loaded type is smaller than the\n      return type to enable the use of widening loads.  */\n   if (TYPE_PRECISION (TREE_TYPE (container)) < TYPE_PRECISION (ret_type)\n@@ -1935,6 +1945,7 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t       NOP_EXPR, container);\n       container = gimple_get_lhs (pattern_stmt);\n       container_type = TREE_TYPE (container);\n+      prec = tree_to_uhwi (TYPE_SIZE (container_type));\n       vectype = get_vectype_for_scalar_type (vinfo, container_type);\n       append_pattern_def_seq (vinfo, stmt_info, pattern_stmt, vectype);\n     }\n@@ -1953,12 +1964,6 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n \tshift_first = false;\n     }\n \n-  unsigned HOST_WIDE_INT shift_n = bit_field_offset (bf_ref).to_constant ();\n-  unsigned HOST_WIDE_INT mask_width = bit_field_size (bf_ref).to_constant ();\n-  unsigned HOST_WIDE_INT prec = tree_to_uhwi (TYPE_SIZE (container_type));\n-  if (BYTES_BIG_ENDIAN)\n-    shift_n = prec - shift_n - mask_width;\n-\n   /* If we don't have to shift we only generate the mask, so just fix the\n      code-path to shift_first.  */\n   if (shift_n == 0)"}]}