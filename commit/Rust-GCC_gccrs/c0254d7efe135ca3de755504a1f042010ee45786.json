{"sha": "c0254d7efe135ca3de755504a1f042010ee45786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyNTRkN2VmZTEzNWNhM2RlNzU1NTA0YTFmMDQyMDEwZWU0NTc4Ng==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-10T13:53:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T13:53:54Z"}, "message": "Merge #661 #663\n\n661: Add support for choosing other builtin GCC calling conventions r=philberty a=philberty\n\nAdd support for some other ABI options.\r\n\r\nI was able to test this with linking against some C code but\r\nthese options like stdcall seem to be limited to 32 bit mode\r\n\r\n```rust\r\nextern \"stdcall\" {\r\n    pub fn test(a: i32) -> i32;\r\n}\r\n\r\nextern \"C\" {\r\n    fn printf(s: *const i8, ...);\r\n}\r\n\r\nfn main() -> i32 {\r\n    unsafe {\r\n        let a = 3;\r\n        let res = test(a);\r\n\r\n        let a = \"%i\\n\\0\";\r\n        let b = a as *const str;\r\n        let c = b as *const i8;\r\n\r\n        printf(c, res);\r\n    }\r\n    0\r\n}\r\n```\r\n\r\n```c\r\n__attribute__ ((stdcall)) int test(int x)  {\r\n  return x + 3;\r\n}\r\n\r\n```\r\n\r\nCompiling like this:\r\n\r\n```\r\n$ gccrs -g -O0 -m32 -c test.rs -o test.o\r\n$ gcc -g -O0 -m32 -c lib.c -o lib.o\r\n$ gcc -m32 -o test test.o lib.o\r\n```\r\n\r\nMore testing will be required over time here but this was\r\nkind of fun to see that it worked.\n\n663: Move module output test case from compile/ to execute/ r=philberty a=CohenArthur\n\nFixes [this issue](https://github.com/Rust-GCC/gccrs/pull/639#discussion_r705922519) by `@tschwinge` \r\n\r\nI think this shows that we need to figure out a better way to keep test files and their modules, as pointed out by `@dkm` [here](https://github.com/Rust-GCC/gccrs/pull/639#issuecomment-905457557). Here, the modules/ directory is a straight up duplicate of the other one in compile/ which I'm not a fan of.\r\n\r\nI have no experience with having a separate .exp in the subdir but I can try and I think that it would be better. Maybe it can also be simpler if the regex to match *.rs files only looks inside one level of subdirectories? But I can think of a few places where this might be an issue\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "3b38c7d9fb95193caaf2797dc8c4a5d172973bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b38c7d9fb95193caaf2797dc8c4a5d172973bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0254d7efe135ca3de755504a1f042010ee45786", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO2NyCRBK7hj4Ov3rIwAAinYIACpbQw9YfOBaRvhjbl4Pta6D\nkwgrUpMnn8bynIAHw3N0JoIZisD3wI6rekK66npkRNaF8uB0mAZSMNnDLl9OFHhk\nwY6a6X+ZTeYd+LnTBWUse2nqcc+mob+4WhNmmwFu36bbLa5cWY31I79iRu1WG62m\n9882b/qYbuUTeYhwmqYWtkpjhDk/VbKRmWZbGkYpHvL9eW3OT6BUSDRgOYvh2CPt\nhiY9w/8k18/eue4Fz3esoIVAhxBHfbSTZ4DqdyJDmKaDy1GFFArU5hVonuk5VJ/A\nBsnb1H+26P3A7FQ9sLCZ+vgYLJTjbDZMraysV9IfEbWWpRaamrb5Yv2LEw9/dVI=\n=R3JQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b38c7d9fb95193caaf2797dc8c4a5d172973bf6\nparent d52030df14a50ed78f388520edc9dd506b59dbee\nparent 995bc1c9834f4b881a5d620cf4d707962c3841a7\nparent 0de1b5646cf39bcdef42f2a824521c7427fe4754\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631282034 +0000\ncommitter GitHub <noreply@github.com> 1631282034 +0000\n\nMerge #661 #663\n\n661: Add support for choosing other builtin GCC calling conventions r=philberty a=philberty\n\nAdd support for some other ABI options.\r\n\r\nI was able to test this with linking against some C code but\r\nthese options like stdcall seem to be limited to 32 bit mode\r\n\r\n```rust\r\nextern \"stdcall\" {\r\n    pub fn test(a: i32) -> i32;\r\n}\r\n\r\nextern \"C\" {\r\n    fn printf(s: *const i8, ...);\r\n}\r\n\r\nfn main() -> i32 {\r\n    unsafe {\r\n        let a = 3;\r\n        let res = test(a);\r\n\r\n        let a = \"%i\\n\\0\";\r\n        let b = a as *const str;\r\n        let c = b as *const i8;\r\n\r\n        printf(c, res);\r\n    }\r\n    0\r\n}\r\n```\r\n\r\n```c\r\n__attribute__ ((stdcall)) int test(int x)  {\r\n  return x + 3;\r\n}\r\n\r\n```\r\n\r\nCompiling like this:\r\n\r\n```\r\n$ gccrs -g -O0 -m32 -c test.rs -o test.o\r\n$ gcc -g -O0 -m32 -c lib.c -o lib.o\r\n$ gcc -m32 -o test test.o lib.o\r\n```\r\n\r\nMore testing will be required over time here but this was\r\nkind of fun to see that it worked.\n\n663: Move module output test case from compile/ to execute/ r=philberty a=CohenArthur\n\nFixes [this issue](https://github.com/Rust-GCC/gccrs/pull/639#discussion_r705922519) by `@tschwinge` \r\n\r\nI think this shows that we need to figure out a better way to keep test files and their modules, as pointed out by `@dkm` [here](https://github.com/Rust-GCC/gccrs/pull/639#issuecomment-905457557). Here, the modules/ directory is a straight up duplicate of the other one in compile/ which I'm not a fan of.\r\n\r\nI have no experience with having a separate .exp in the subdir but I can try and I think that it would be better. Maybe it can also be simpler if the regex to match *.rs files only looks inside one level of subdirectories? But I can think of a few places where this might be an issue\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0254d7efe135ca3de755504a1f042010ee45786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0254d7efe135ca3de755504a1f042010ee45786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0254d7efe135ca3de755504a1f042010ee45786/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d52030df14a50ed78f388520edc9dd506b59dbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52030df14a50ed78f388520edc9dd506b59dbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52030df14a50ed78f388520edc9dd506b59dbee"}, {"sha": "995bc1c9834f4b881a5d620cf4d707962c3841a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995bc1c9834f4b881a5d620cf4d707962c3841a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995bc1c9834f4b881a5d620cf4d707962c3841a7"}, {"sha": "0de1b5646cf39bcdef42f2a824521c7427fe4754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de1b5646cf39bcdef42f2a824521c7427fe4754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de1b5646cf39bcdef42f2a824521c7427fe4754"}], "stats": {"total": 223, "additions": 163, "deletions": 60}, "files": [{"sha": "f0aaceedd4113849317d479316a189b9f7e72dbe", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -119,27 +119,29 @@ class CompileExternItem : public HIRCompileBase\n \tfntype->override_context ();\n       }\n \n-    if (fntype->get_abi () == TyTy::FnType::ABI::INTRINSIC)\n+    if (fntype->get_abi () == ABI::INTRINSIC)\n       {\n \tIntrinsics compile (ctx);\n \tBfunction *fndecl = compile.compile (fntype);\n \tctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n \treturn;\n       }\n \n-    rust_assert (fntype->get_abi () == TyTy::FnType::ABI::C);\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+    compiled_fn_type\n+      = ctx->get_backend ()->specify_abi_attribute (compiled_fn_type,\n+\t\t\t\t\t\t    fntype->get_abi ());\n \n     const unsigned int flags\n       = Backend::function_is_declaration | Backend::function_is_visible;\n \n     std::string ir_symbol_name = function.get_item_name ();\n-    // FIXME this assumes C ABI\n     std::string asm_name = function.get_item_name ();\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n+\n     ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n   }\n "}, {"sha": "66d36e32ecb22376a89d3cdaedff21fd3a7aed3d", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -24,8 +24,9 @@ Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n Bfunction *\n Intrinsics::compile (TyTy::FnType *fntype)\n {\n-  rust_assert (fntype->get_abi () == TyTy::FnType::ABI::INTRINSIC);\n+  rust_assert (fntype->get_abi () == ABI::INTRINSIC);\n \n+  // https://github.com/rust-lang/rust/blob/master/library/core/src/intrinsics.rs\n   // https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs\n   // https://github.com/Rust-GCC/gccrs/issues/658\n "}, {"sha": "bd3043295ceb08a0c6f9873ff8380d22d2271dff", "filename": "gcc/rust/rust-abi.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-abi.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -0,0 +1,35 @@\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_ABI_OPTIONS_H\n+#define RUST_ABI_OPTIONS_H\n+\n+namespace Rust {\n+\n+enum ABI\n+{\n+  UNKNOWN,\n+  RUST,\n+  INTRINSIC,\n+  C,\n+  CDECL,\n+  STDCALL,\n+  FASTCALL,\n+};\n+\n+} // namespace Rust\n+\n+#endif // RUST_ABI_OPTIONS_H"}, {"sha": "b6f18f8df26cb40cfe35965dc440328132653672", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -25,7 +25,9 @@\n \n #include \"rust-location.h\"\n #include \"rust-linemap.h\"\n+#include \"rust-diagnostics.h\"\n #include \"operator.h\"\n+#include \"rust-abi.h\"\n \n extern bool\n saw_errors (void);\n@@ -98,6 +100,49 @@ class Backend\n   virtual std::string const_size_val_to_string (Bexpression *) = 0;\n   virtual bool const_values_equal (Bexpression *, Bexpression *) = 0;\n \n+  static Rust::ABI get_abi_from_string (const std::string &abi, Location locus)\n+  {\n+    if (abi.compare (\"rust\") == 0)\n+      return Rust::ABI::C;\n+    else if (abi.compare (\"rust-intrinsic\") == 0)\n+      return Rust::ABI::INTRINSIC;\n+    else if (abi.compare (\"C\") == 0)\n+      return Rust::ABI::C;\n+    else if (abi.compare (\"cdecl\") == 0)\n+      return Rust::ABI::CDECL;\n+    else if (abi.compare (\"stdcall\") == 0)\n+      return Rust::ABI::STDCALL;\n+    else if (abi.compare (\"fastcall\") == 0)\n+      return Rust::ABI::FASTCALL;\n+\n+    rust_error_at (locus, \"unknown abi specified\");\n+\n+    return Rust::ABI::UNKNOWN;\n+  }\n+\n+  static std::string get_string_from_abi (Rust::ABI abi)\n+  {\n+    switch (abi)\n+      {\n+      case Rust::ABI::RUST:\n+\treturn \"rust\";\n+      case Rust::ABI::INTRINSIC:\n+\treturn \"rust-intrinsic\";\n+      case Rust::ABI::C:\n+\treturn \"C\";\n+      case Rust::ABI::CDECL:\n+\treturn \"cdecl\";\n+      case Rust::ABI::STDCALL:\n+\treturn \"stdcall\";\n+      case Rust::ABI::FASTCALL:\n+\treturn \"fastcall\";\n+\n+      case Rust::ABI::UNKNOWN:\n+\treturn \"unknown\";\n+      }\n+    return \"unknown\";\n+  }\n+\n   // Types.\n \n   // Produce an error type.  Actually the backend could probably just\n@@ -818,6 +863,8 @@ class Backend\n \t\t\t       Location)\n     = 0;\n \n+  virtual Btype *specify_abi_attribute (Btype *type, Rust::ABI abi) = 0;\n+\n   // Create a statement that runs all deferred calls for FUNCTION.  This should\n   // be a statement that looks like this in C++:\n   //   finish:"}, {"sha": "0b17865e7d09c35a683cb458aaabf4d7ff40b672", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -44,6 +44,7 @@\n #include \"realmpfr.h\"\n #include \"builtins.h\"\n #include \"print-tree.h\"\n+#include \"attribs.h\"\n \n #include \"rust-location.h\"\n #include \"rust-linemap.h\"\n@@ -251,6 +252,10 @@ class Gcc_backend : public Backend\n \n   Btype *immutable_type (Btype *);\n \n+  Btype *specify_abi_attribute (Btype *, Rust::ABI);\n+\n+  Btype *insert_type_attribute (Btype *, const std::string &);\n+\n   Btype *function_type (const Btyped_identifier &,\n \t\t\tconst std::vector<Btyped_identifier> &,\n \t\t\tconst std::vector<Btyped_identifier> &, Btype *,\n@@ -925,6 +930,52 @@ Gcc_backend::immutable_type (Btype *base)\n   return this->make_type (constified);\n }\n \n+// ABI\n+\n+Btype *\n+Gcc_backend::specify_abi_attribute (Btype *type, Rust::ABI abi)\n+{\n+  std::string abi_string;\n+  switch (abi)\n+    {\n+    case Rust::ABI::UNKNOWN:\n+      return error_type ();\n+\n+    case Rust::ABI::RUST:\n+    case Rust::ABI::INTRINSIC:\n+    case Rust::ABI::C:\n+    case Rust::ABI::CDECL:\n+      abi_string = \"cdecl\";\n+      break;\n+\n+    case Rust::ABI::STDCALL:\n+      abi_string = \"stdcall\";\n+      break;\n+    case Rust::ABI::FASTCALL:\n+      abi_string = \"fastcall\";\n+      break;\n+    }\n+\n+  return insert_type_attribute (type, abi_string);\n+}\n+\n+Btype *\n+Gcc_backend::insert_type_attribute (Btype *type, const std::string &attrname)\n+{\n+  tree ident = get_identifier (attrname.c_str ());\n+\n+  tree attribs = NULL_TREE;\n+  tree old_attrs = TYPE_ATTRIBUTES (type->get_tree ());\n+  if (old_attrs)\n+    attribs = merge_type_attributes (old_attrs,\n+\t\t\t\t     tree_cons (ident, NULL_TREE, NULL_TREE));\n+  else\n+    attribs = tree_cons (ident, NULL_TREE, NULL_TREE);\n+\n+  tree res = build_type_attribute_variant (type->get_tree (), attribs);\n+  return this->make_type (res);\n+}\n+\n // Make a function type.\n \n Btype *"}, {"sha": "0b4daea3d21a8419cbed38d6788c7372c8173c91", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-name-resolver.h\"\n #include \"rust-hir-visitor.h\"\n #include \"rust-hir-map.h\"\n+#include \"rust-backend.h\"\n \n namespace Rust {\n namespace Resolver {"}, {"sha": "d3977c36e29c14ffaf9570e1a6d3dc3c340ecacc", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -118,8 +118,7 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n     auto fnType = new TyTy::FnType (\n       function.get_mappings ().get_hirid (),\n       function.get_mappings ().get_defid (), function.get_item_name (), flags,\n-      TyTy::FnType::get_abi_from_string (parent.get_abi (),\n-\t\t\t\t\t parent.get_locus ()),\n+      ::Backend::get_abi_from_string (parent.get_abi (), parent.get_locus ()),\n       std::move (params), ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n@@ -238,14 +237,11 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType\n-      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t  function.get_mappings ().get_defid (),\n-\t\t\t  function.get_function_name (),\n-\t\t\t  function.is_method () ? FNTYPE_IS_METHOD_FLAG\n-\t\t\t\t\t\t: FNTYPE_DEFAULT_FLAGS,\n-\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n-\t\t\t  std::move (substitutions));\n+    auto fnType = new TyTy::FnType (\n+      function.get_mappings ().get_hirid (),\n+      function.get_mappings ().get_defid (), function.get_function_name (),\n+      function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n+      ABI::RUST, std::move (params), ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n "}, {"sha": "5f4721b955ba55bc25589c9a67e35bf77e086353", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -333,7 +333,7 @@ class TypeCheckStmt : public TypeCheckBase\n       = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t  function.get_mappings ().get_defid (),\n \t\t\t  function.get_function_name (), FNTYPE_DEFAULT_FLAGS,\n-\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n+\t\t\t  ABI::RUST, std::move (params), ret_type,\n \t\t\t  std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n "}, {"sha": "9fac813c46db9f74a9db3f91a3bf03165640c70b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -291,7 +291,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t  function.get_mappings ().get_defid (),\n \t\t\t  function.get_function_name (), FNTYPE_DEFAULT_FLAGS,\n-\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n+\t\t\t  ABI::RUST, std::move (params), ret_type,\n \t\t\t  std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }"}, {"sha": "f960f772ba678aa4ec45cdc323ba5e55e42b7149", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -546,11 +546,13 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n       context->insert_type (param.get_mappings (), param_tyty);\n     }\n \n-  auto resolved = new TyTy::FnType (\n-    fn.get_mappings ().get_hirid (), fn.get_mappings ().get_defid (),\n-    function.get_function_name (),\n-    function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n-    TyTy::FnType::ABI::RUST, std::move (params), ret_type, substitutions);\n+  auto resolved\n+    = new TyTy::FnType (fn.get_mappings ().get_hirid (),\n+\t\t\tfn.get_mappings ().get_defid (),\n+\t\t\tfunction.get_function_name (),\n+\t\t\tfunction.is_method () ? FNTYPE_IS_METHOD_FLAG\n+\t\t\t\t\t      : FNTYPE_DEFAULT_FLAGS,\n+\t\t\tABI::RUST, std::move (params), ret_type, substitutions);\n \n   context->insert_type (fn.get_mappings (), resolved);\n   return resolved;"}, {"sha": "33dc88b2818b6cde742feae7f1de1195f9996b61", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-hir-map.h\"\n #include \"rust-hir-full.h\"\n #include \"rust-diagnostics.h\"\n+#include \"rust-abi.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -1077,44 +1078,6 @@ class FnType : public BaseType, public SubstitutionRef\n #define FNTYPE_IS_EXTERN_FLAG 0x02\n #define FNTYPE_IS_VARADIC_FLAG 0X04\n \n-  enum ABI\n-  {\n-    UNKNOWN,\n-    RUST,\n-    INTRINSIC,\n-    C,\n-  };\n-\n-  static ABI get_abi_from_string (const std::string &abi, Location locus)\n-  {\n-    if (abi.compare (\"rust\") == 0)\n-      return ABI::C;\n-    else if (abi.compare (\"rust-intrinsic\") == 0)\n-      return ABI::INTRINSIC;\n-    else if (abi.compare (\"C\") == 0)\n-      return ABI::C;\n-\n-    rust_error_at (locus, \"unknown abi specified\");\n-    return ABI::UNKNOWN;\n-  }\n-\n-  static std::string get_string_from_abi (ABI abi)\n-  {\n-    switch (abi)\n-      {\n-      case ABI::RUST:\n-\treturn \"rust\";\n-      case ABI::INTRINSIC:\n-\treturn \"rust-intrinsic\";\n-      case ABI::C:\n-\treturn \"C\";\n-\n-      case ABI::UNKNOWN:\n-\treturn \"unknown\";\n-      }\n-    return \"unknown\";\n-  }\n-\n   FnType (HirId ref, DefId id, std::string identifier, uint8_t flags, ABI abi,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *>> params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,"}, {"sha": "99b6fb5c9ba0e3ee2acc781bc55819c135614e4b", "filename": "gcc/testsuite/rust/execute/torture/extern_mod4.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -6,12 +6,14 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn main() {\n+fn main() -> i32 {\n     unsafe {\n         let fmt_s = \"%d\\n\\0\";\n         let fmt_p = fmt_s as *const str;\n         let fmt_i8 = fmt_p as *const i8;\n \n         printf(fmt_i8, modules::return_12());\n     }\n+\n+    return 0;\n }", "previous_filename": "gcc/testsuite/rust/compile/torture/extern_mod4.rs"}, {"sha": "9020aaf4bb8dfd2705fe59578a1664e6dacce93b", "filename": "gcc/testsuite/rust/execute/torture/modules/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0254d7efe135ca3de755504a1f042010ee45786/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs?ref=c0254d7efe135ca3de755504a1f042010ee45786", "patch": "@@ -0,0 +1,3 @@\n+fn return_12() -> i32 {\n+    12\n+}"}]}