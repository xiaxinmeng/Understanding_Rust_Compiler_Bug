{"sha": "eeb183e9c7a61a80616950475e9cb76565537653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViMTgzZTljN2E2MWE4MDYxNjk1MDQ3NWU5Y2I3NjU2NTUzNzY1Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1999-05-17T23:37:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-17T23:37:19Z"}, "message": "cppspec.c: Insert -no-gcc into command line unless -gcc was given by user.\n\n        * cppspec.c: Insert -no-gcc into command line unless -gcc was\n        given by user.\n        * gcc.c (default_compilers): Define __GNUC__ and\n        __GNUC_MINOR__ only if -no-gcc was not given.\n        * objc/lang-specs.h: Likewise.\n        * cpp.texi: Document -x and -std options; explain that -lang\n        is no longer supported.  Minor related corrections.\n\nFrom-SVN: r26990", "tree": {"sha": "662f9ef1f6360e03f9a4e747bf73cf9551fe3fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/662f9ef1f6360e03f9a4e747bf73cf9551fe3fa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeb183e9c7a61a80616950475e9cb76565537653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb183e9c7a61a80616950475e9cb76565537653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb183e9c7a61a80616950475e9cb76565537653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb183e9c7a61a80616950475e9cb76565537653/comments", "author": null, "committer": null, "parents": [{"sha": "49933dbade0ebe5d04684912166b5494f8b948bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49933dbade0ebe5d04684912166b5494f8b948bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49933dbade0ebe5d04684912166b5494f8b948bb"}], "stats": {"total": 144, "additions": 99, "deletions": 45}, "files": [{"sha": "fc5dd1a05c9961910fc327e4c925750c915bb35e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeb183e9c7a61a80616950475e9cb76565537653", "patch": "@@ -1,3 +1,13 @@\n+Tue May 18 00:21:34 1999  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* cppspec.c: Insert -no-gcc into command line unless -gcc was\n+\tgiven by user.\n+\t* gcc.c (default_compilers): Define __GNUC__ and\n+\t__GNUC_MINOR__ only if -no-gcc was not given.\n+\t* objc/lang-specs.h: Likewise.\n+\t* cpp.texi: Document -x and -std options; explain that -lang\n+\tis no longer supported.  Minor related corrections.\n+\n Mon May 17 23:56:39 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* Makefile.in (stmp-fixproto): Pass location of mkinstalldirs to"}, {"sha": "ca50137957759fa35fb68f11427b8a6c1ac246a9", "filename": "gcc/cpp.texi", "status": "modified", "additions": 72, "deletions": 36, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=eeb183e9c7a61a80616950475e9cb76565537653", "patch": "@@ -2658,7 +2658,9 @@ warnings.\n \n @item -Wtrigraphs\n @findex -Wtrigraphs\n-Warn if any trigraphs are encountered (assuming they are enabled).\n+Warn if any trigraphs are encountered.  Currently this only works if you\n+have turned trigraphs on with @samp{-trigraphs} or @samp{-ansi}; in the\n+future this restriction will be removed.\n \n @item -Wcomment\n @findex -Wcomment\n@@ -2756,14 +2758,21 @@ is not predefined.\n @findex -undef\n Do not predefine any nonstandard macros.\n \n+@item -gcc\n+@findex -gcc\n+Define the macros @var{__GNUC__} and @var{__GNUC_MINOR__}.  These are\n+defined automatically when you use @samp{gcc -E}; you can turn them off\n+in that case with @samp{-no-gcc}.\n+\n @item -A @var{predicate}(@var{answer})\n @findex -A\n Make an assertion with the predicate @var{predicate} and answer\n @var{answer}.  @xref{Assertions}.\n \n @noindent\n You can use @samp{-A-} to disable all predefined assertions; it also\n-undefines all predefined macros that identify the type of target system.\n+undefines all predefined macros and all macros that preceded it on the\n+command line.\n \n @item -dM\n @findex -dM\n@@ -2874,48 +2883,75 @@ Add a directory to the beginning of the second include path, marking it\n as a system directory, so that it gets the same special treatment as\n is applied to the standard system directories.\n \n-@item -lang-c\n-@itemx -lang-c89\n-@itemx -lang-c++\n-@itemx -lang-objc\n-@itemx -lang-objc++\n-@findex -lang-c\n-@findex -lang-c89\n-@findex -lang-c++\n-@findex -lang-objc\n-@findex -lang-objc++\n-Specify the source language.  @samp{-lang-c} is the default; it\n-allows recognition of C++ comments (comments that begin with\n-@samp{//} and end at end of line) and hexadecimal floating-point constants,\n-since these features will most likely appear in the next C standard.\n-@samp{-lang-c89} disables recognition of C++ comments and\n-hexadecimal floating-point constants.  @samp{-lang-c++}\n-handles C++ comment syntax and includes extra default include\n-directories for C++.  @samp{-lang-objc} enables the Objective C\n-@samp{#import} directive.  @samp{-lang-objc++} enables both C++ and Objective C\n-extensions.\n-\n-These options are generated by the compiler driver @code{gcc}, but not\n-passed from the @samp{gcc} command line unless you use the driver's\n-@samp{-Wp} option.\n-\n-@item -lint\n+@item -x c\n+@itemx -x c++\n+@itemx -x objective-c\n+@itemx -x assembler-with-cpp\n+@findex -x c\n+@findex -x objective-c\n+@findex -x assembler-with-cpp\n+Specify the source language: C, C++, Objective-C, or assembly.  This has\n+nothing to do with standards conformance or extensions; it merely\n+selects which base syntax to expect.  If you give none of these options,\n+cpp will deduce the language from the extension of the source file:\n+@samp{.c}, @samp{.cc}, @samp{.m}, or @samp{.S}.  Some other common\n+extensions for C++ and assembly are also recognized.  If cpp does not\n+recognize the extension, it will treat the file as C; this is the most\n+generic mode.\n+\n+@strong{Note:} Previous versions of cpp accepted a @samp{-lang} option\n+which selected both the language and the standards conformance level.\n+This option has been removed, because it conflicts with the @samp{-l}\n+option.\n+\n+@item -std=@var{standard}\n+@itemx -ansi\n+@findex -std\n+@findex -ansi\n+Specify the standard to which the code should conform.  Currently cpp\n+only knows about the standards for C; other language standards will be\n+added in the future.\n+\n+@var{standard}\n+may be one of:\n+@table @code\n+@item iso9899:1990\n+The ISO C standard from 1990.\n+\n+@item iso9899:199409\n+@itemx c89\n+The 1990 C standard, as amended in 1994.  @samp{c89} is the customary\n+shorthand for this version of the standard.\n+\n+The @samp{-ansi} option is equivalent to @samp{-std=c89}.\n+\n+@item iso9899:199x\n+@itemx c9x\n+The revised ISO C standard, which is expected to be promulgated some\n+time in 1999.  It has not been approved yet, hence the @samp{x}.\n+\n+@item gnu89\n+The 1990 C standard plus GNU extensions.  This is the default.\n+\n+@item gnu9x\n+The 199x C standard plus GNU extensions.\n+@end table\n+\n+@item -Wp,-lint\n+@findex -lint\n Look for commands to the program checker @code{lint} embedded in\n comments, and emit them preceded by @samp{#pragma lint}.  For example,\n the comment @samp{/* NOTREACHED */} becomes @samp{#pragma lint\n NOTREACHED}.\n \n-This option is available only when you call @code{cpp} directly;\n-@code{gcc} will not pass it from its command line.\n+Because of the clash with @samp{-l}, you must use the awkward syntax\n+above.  In a future release, this option will be replaced by\n+@samp{-flint} or @samp{-Wlint}; we are not sure which yet.\n \n @item -$\n @findex -$\n-Forbid the use of @samp{$} in identifiers.  This was formerly required\n-for strict conformance to the C Standard before the standard was\n-corrected.\n-\n-This option is available only when you call @code{cpp} directly;\n-@code{gcc} will not pass it from its command line.\n+Forbid the use of @samp{$} in identifiers.  The C standard does not\n+permit this, but it is a common extension.\n \n @end table\n "}, {"sha": "2e0221626e32852629e21396d274be460f10c100", "filename": "gcc/cppspec.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=eeb183e9c7a61a80616950475e9cb76565537653", "patch": "@@ -84,6 +84,9 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n   /* Do we need to insert -E? */\n   int need_E = 1;\n \n+  /* Do we need to insert -no-gcc? */\n+  int need_no_gcc = 1;\n+\n   /* Have we seen an input file? */\n   int seen_input = 0;\n   \n@@ -135,6 +138,8 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \t    }\n \t  else if (argv[i][1] == 'x')\n \t    need_fixups = 0;\n+\t  else if (argv[i][1] == 'g' && !strcmp(&argv[i][2], \"cc\"))\n+\t    need_no_gcc = 0;\n \t  else if (WORD_SWITCH_TAKES_ARG (&argv[i][1]))\n \t    quote = 1;\n \t}\n@@ -183,7 +188,7 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \n   /* If we don't need to edit the command line, we can bail early.  */\n \n-  new_argc = argc + need_E + read_stdin\n+  new_argc = argc + need_E + need_no_gcc + read_stdin\n     + !!o_here + !!lang_c_here + !!lang_S_here;\n \n   if (new_argc == argc)\n@@ -197,6 +202,9 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n   if (need_E)\n     new_argv[j++] = \"-E\";\n \n+  if (need_no_gcc)\n+    new_argv[j++] = \"-no-gcc\";\n+\n   for (i = 1; i < argc; i++, j++)\n     {\n       if (i == lang_c_here)"}, {"sha": "e02bc0c1e9a8ed05c739525d5c9e98fdd225e78f", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=eeb183e9c7a61a80616950475e9cb76565537653", "patch": "@@ -598,7 +598,7 @@ static struct compiler default_compilers[] =\n \t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -612,7 +612,7 @@ static struct compiler default_compilers[] =\n                   %{std*} %{nostdinc*} %{A*} %{I*} %I\\\n                   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n                   %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-                  -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+                  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t\t  %{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t\t  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n                   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -634,7 +634,7 @@ static struct compiler default_compilers[] =\n \t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -662,7 +662,7 @@ static struct compiler default_compilers[] =\n \t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -679,7 +679,7 @@ static struct compiler default_compilers[] =\n     cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t%{std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!std=*:%p}%{std=gnu*:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\"}, {"sha": "41dc097b5023e64de0ca2f5f85e1ad8098d417a8", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb183e9c7a61a80616950475e9cb76565537653/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=eeb183e9c7a61a80616950475e9cb76565537653", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n    {\"%{E|M|MM:cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        -D__OBJC__ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n     \"%{!M:%{!MM:%{!E:cc1obj %i %1 \\\n \t\t   %{nostdinc*} %{A*} %{I*} %{P} %I\\\n                    %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-\t\t   -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+\t\t   -D__OBJC__ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t\t   %{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n \t\t   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t\t   %{ffast-math:-D__FAST_MATH__}\\\n@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n    {\"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__OBJC__ -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+        -D__OBJC__ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n \t %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\"}]}