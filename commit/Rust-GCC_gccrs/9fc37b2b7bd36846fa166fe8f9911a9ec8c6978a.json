{"sha": "9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMzdiMmI3YmQzNjg0NmZhMTY2ZmU4Zjk5MTFhOWVjOGM2OTc4YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-04-17T17:01:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-04-17T17:01:02Z"}, "message": "rtl.def (ADDRESS): Turn operand into a HOST_WIDE_INT.\n\ngcc/\n\t* rtl.def (ADDRESS): Turn operand into a HOST_WIDE_INT.\n\t* alias.c (reg_base_value): Expand and update comment.\n\t(arg_base_value): New variable.\n\t(unique_id): Move up file.\n\t(unique_base_value, unique_base_value_p, known_base_value_p): New.\n\t(find_base_value): Use arg_base_value and known_base_value_p.\n\t(record_set): Document REG_NOALIAS handling.  Use unique_base_value.\n\t(find_base_term): Use known_base_value_p.\n\t(base_alias_check): Use unique_base_value_p.\n\t(init_alias_target): Initialize arg_base_value.  Use unique_base_value.\n\t(init_alias_analysis): Use 1 as the first id for REG_NOALIAS bases.\n\nFrom-SVN: r186540", "tree": {"sha": "0484afa16b93c9b332431c182e386302b377eccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0484afa16b93c9b332431c182e386302b377eccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac9ce934ed56bc46b865adb396adbf35a1e5a7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9ce934ed56bc46b865adb396adbf35a1e5a7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9ce934ed56bc46b865adb396adbf35a1e5a7a1"}], "stats": {"total": 163, "additions": 105, "deletions": 58}, "files": [{"sha": "c4f826e921226c23d1746d0c7285a5bcf1066ceb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "patch": "@@ -1,3 +1,17 @@\n+2012-04-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.def (ADDRESS): Turn operand into a HOST_WIDE_INT.\n+\t* alias.c (reg_base_value): Expand and update comment.\n+\t(arg_base_value): New variable.\n+\t(unique_id): Move up file.\n+\t(unique_base_value, unique_base_value_p, known_base_value_p): New.\n+\t(find_base_value): Use arg_base_value and known_base_value_p.\n+\t(record_set): Document REG_NOALIAS handling.  Use unique_base_value.\n+\t(find_base_term): Use known_base_value_p.\n+\t(base_alias_check): Use unique_base_value_p.\n+\t(init_alias_target): Initialize arg_base_value.  Use unique_base_value.\n+\t(init_alias_analysis): Use 1 as the first id for REG_NOALIAS bases.\n+\n 2012-04-17  Pat Haugen <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Remove DImode."}, {"sha": "80c8759dae087f4454e5ec0c82aa6cfe9e63dfc7", "filename": "gcc/alias.c", "status": "modified", "additions": 89, "deletions": 56, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "patch": "@@ -187,21 +187,42 @@ static void memory_modified_1 (rtx, const_rtx, void *);\n    of the first set.\n \n    A base address can be an ADDRESS, SYMBOL_REF, or LABEL_REF.  ADDRESS\n-   expressions represent certain special values: function arguments and\n-   the stack, frame, and argument pointers.\n+   expressions represent three types of base:\n \n-   The contents of an ADDRESS is not normally used, the mode of the\n-   ADDRESS determines whether the ADDRESS is a function argument or some\n-   other special value.  Pointer equality, not rtx_equal_p, determines whether\n-   two ADDRESS expressions refer to the same base address.\n+     1. incoming arguments.  There is just one ADDRESS to represent all\n+\targuments, since we do not know at this level whether accesses\n+\tbased on different arguments can alias.  The ADDRESS has id 0.\n \n-   The only use of the contents of an ADDRESS is for determining if the\n-   current function performs nonlocal memory memory references for the\n-   purposes of marking the function as a constant function.  */\n+     2. stack_pointer_rtx, frame_pointer_rtx, hard_frame_pointer_rtx\n+\t(if distinct from frame_pointer_rtx) and arg_pointer_rtx.\n+\tEach of these rtxes has a separate ADDRESS associated with it,\n+\teach with a negative id.\n+\n+\tGCC is (and is required to be) precise in which register it\n+\tchooses to access a particular region of stack.  We can therefore\n+\tassume that accesses based on one of these rtxes do not alias\n+\taccesses based on another of these rtxes.\n+\n+     3. bases that are derived from malloc()ed memory (REG_NOALIAS).\n+\tEach such piece of memory has a separate ADDRESS associated\n+\twith it, each with an id greater than 0.\n+\n+   Accesses based on one ADDRESS do not alias accesses based on other\n+   ADDRESSes.  Accesses based on ADDRESSes in groups (2) and (3) do not\n+   alias globals either; the ADDRESSes have Pmode to indicate this.\n+   The ADDRESS in group (1) _may_ alias globals; it has VOIDmode to\n+   indicate this.  */\n \n static GTY(()) VEC(rtx,gc) *reg_base_value;\n static rtx *new_reg_base_value;\n \n+/* The single VOIDmode ADDRESS that represents all argument bases.\n+   It has id 0.  */\n+static GTY(()) rtx arg_base_value;\n+\n+/* Used to allocate unique ids to each REG_NOALIAS ADDRESS.  */\n+static int unique_id;\n+\n /* We preserve the copy of old array around to avoid amount of garbage\n    produced.  About 8% of garbage produced were attributed to this\n    array.  */\n@@ -993,6 +1014,43 @@ get_frame_alias_set (void)\n   return frame_set;\n }\n \n+/* Create a new, unique base with id ID.  */\n+\n+static rtx\n+unique_base_value (HOST_WIDE_INT id)\n+{\n+  return gen_rtx_ADDRESS (Pmode, id);\n+}\n+\n+/* Return true if accesses based on any other base value cannot alias\n+   those based on X.  */\n+\n+static bool\n+unique_base_value_p (rtx x)\n+{\n+  return GET_CODE (x) == ADDRESS && GET_MODE (x) == Pmode;\n+}\n+\n+/* Return true if X is known to be a base value.  */\n+\n+static bool\n+known_base_value_p (rtx x)\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      return true;\n+\n+    case ADDRESS:\n+      /* Arguments may or may not be bases; we don't know for sure.  */\n+      return GET_MODE (x) != VOIDmode;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Inside SRC, the source of a SET, find a base address.  */\n \n static rtx\n@@ -1049,7 +1107,7 @@ find_base_value (rtx src)\n \t  && (XEXP (src, 0) == arg_pointer_rtx\n \t      || (GET_CODE (XEXP (src, 0)) == PLUS\n \t\t  && XEXP (XEXP (src, 0), 0) == arg_pointer_rtx)))\n-\treturn gen_rtx_ADDRESS (VOIDmode, src);\n+\treturn arg_base_value;\n       return 0;\n \n     case CONST:\n@@ -1090,18 +1148,10 @@ find_base_value (rtx src)\n \t/* If either base is named object or a special address\n \t   (like an argument or stack reference), then use it for the\n \t   base term.  */\n-\tif (src_0 != 0\n-\t    && (GET_CODE (src_0) == SYMBOL_REF\n-\t\t|| GET_CODE (src_0) == LABEL_REF\n-\t\t|| (GET_CODE (src_0) == ADDRESS\n-\t\t    && GET_MODE (src_0) != VOIDmode)))\n+\tif (src_0 != 0 && known_base_value_p (src_0))\n \t  return src_0;\n \n-\tif (src_1 != 0\n-\t    && (GET_CODE (src_1) == SYMBOL_REF\n-\t\t|| GET_CODE (src_1) == LABEL_REF\n-\t\t|| (GET_CODE (src_1) == ADDRESS\n-\t\t    && GET_MODE (src_1) != VOIDmode)))\n+\tif (src_1 != 0 && known_base_value_p (src_1))\n \t  return src_1;\n \n \t/* Guess which operand is the base address:\n@@ -1169,16 +1219,14 @@ find_base_value (rtx src)\n   return 0;\n }\n \n-/* Called from init_alias_analysis indirectly through note_stores.  */\n+/* Called from init_alias_analysis indirectly through note_stores,\n+   or directly if DEST is a register with a REG_NOALIAS note attached.\n+   SET is null in the latter case.  */\n \n /* While scanning insns to find base values, reg_seen[N] is nonzero if\n    register N has been set in this function.  */\n static char *reg_seen;\n \n-/* Addresses which are known not to alias anything else are identified\n-   by a unique integer.  */\n-static int unique_id;\n-\n static void\n record_set (rtx dest, const_rtx set, void *data ATTRIBUTE_UNUSED)\n {\n@@ -1223,14 +1271,14 @@ record_set (rtx dest, const_rtx set, void *data ATTRIBUTE_UNUSED)\n     }\n   else\n     {\n+      /* There's a REG_NOALIAS note against DEST.  */\n       if (reg_seen[regno])\n \t{\n \t  new_reg_base_value[regno] = 0;\n \t  return;\n \t}\n       reg_seen[regno] = 1;\n-      new_reg_base_value[regno] = gen_rtx_ADDRESS (Pmode,\n-\t\t\t\t\t\t   GEN_INT (unique_id++));\n+      new_reg_base_value[regno] = unique_base_value (unique_id++);\n       return;\n     }\n \n@@ -1666,18 +1714,10 @@ find_base_term (rtx x)\n \t/* If either base term is named object or a special address\n \t   (like an argument or stack reference), then use it for the\n \t   base term.  */\n-\tif (tmp1 != 0\n-\t    && (GET_CODE (tmp1) == SYMBOL_REF\n-\t\t|| GET_CODE (tmp1) == LABEL_REF\n-\t\t|| (GET_CODE (tmp1) == ADDRESS\n-\t\t    && GET_MODE (tmp1) != VOIDmode)))\n+\tif (tmp1 != 0 && known_base_value_p (tmp1))\n \t  return tmp1;\n \n-\tif (tmp2 != 0\n-\t    && (GET_CODE (tmp2) == SYMBOL_REF\n-\t\t|| GET_CODE (tmp2) == LABEL_REF\n-\t\t|| (GET_CODE (tmp2) == ADDRESS\n-\t\t    && GET_MODE (tmp2) != VOIDmode)))\n+\tif (tmp2 != 0 && known_base_value_p (tmp2))\n \t  return tmp2;\n \n \t/* We could not determine which of the two operands was the\n@@ -1762,12 +1802,7 @@ base_alias_check (rtx x, rtx y, enum machine_mode x_mode,\n   if (GET_CODE (x_base) != ADDRESS && GET_CODE (y_base) != ADDRESS)\n     return 0;\n \n-  /* If one address is a stack reference there can be no alias:\n-     stack references using different base registers do not alias,\n-     a stack reference can not alias a parameter, and a stack reference\n-     can not alias a global.  */\n-  if ((GET_CODE (x_base) == ADDRESS && GET_MODE (x_base) == Pmode)\n-      || (GET_CODE (y_base) == ADDRESS && GET_MODE (y_base) == Pmode))\n+  if (unique_base_value_p (x_base) || unique_base_value_p (y_base))\n     return 0;\n \n   return 1;\n@@ -2686,6 +2721,9 @@ init_alias_target (void)\n {\n   int i;\n \n+  if (!arg_base_value)\n+    arg_base_value = gen_rtx_ADDRESS (VOIDmode, 0);\n+\n   memset (static_reg_base_value, 0, sizeof static_reg_base_value);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -2694,18 +2732,13 @@ init_alias_target (void)\n        numbers, so translate if necessary due to register windows.  */\n     if (FUNCTION_ARG_REGNO_P (OUTGOING_REGNO (i))\n \t&& HARD_REGNO_MODE_OK (i, Pmode))\n-      static_reg_base_value[i]\n-\t= gen_rtx_ADDRESS (VOIDmode, gen_rtx_REG (Pmode, i));\n-\n-  static_reg_base_value[STACK_POINTER_REGNUM]\n-    = gen_rtx_ADDRESS (Pmode, stack_pointer_rtx);\n-  static_reg_base_value[ARG_POINTER_REGNUM]\n-    = gen_rtx_ADDRESS (Pmode, arg_pointer_rtx);\n-  static_reg_base_value[FRAME_POINTER_REGNUM]\n-    = gen_rtx_ADDRESS (Pmode, frame_pointer_rtx);\n+      static_reg_base_value[i] = arg_base_value;\n+\n+  static_reg_base_value[STACK_POINTER_REGNUM] = unique_base_value (-1);\n+  static_reg_base_value[ARG_POINTER_REGNUM] = unique_base_value (-2);\n+  static_reg_base_value[FRAME_POINTER_REGNUM] = unique_base_value (-3);\n #if !HARD_FRAME_POINTER_IS_FRAME_POINTER\n-  static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n-    = gen_rtx_ADDRESS (Pmode, hard_frame_pointer_rtx);\n+  static_reg_base_value[HARD_FRAME_POINTER_REGNUM] = unique_base_value (-4);\n #endif\n }\n \n@@ -2791,8 +2824,8 @@ init_alias_analysis (void)\n       changed = 0;\n \n       /* We want to assign the same IDs each iteration of this loop, so\n-\t start counting from zero each iteration of the loop.  */\n-      unique_id = 0;\n+\t start counting from one each iteration of the loop.  */\n+      unique_id = 1;\n \n       /* We're at the start of the function each iteration through the\n \t loop, so we're copying arguments.  */"}, {"sha": "83326b31f551b7752ac15768e83fb68a16c5cdb0", "filename": "gcc/rtl.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=9fc37b2b7bd36846fa166fe8f9911a9ec8c6978a", "patch": "@@ -109,8 +109,8 @@ DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n    `emit_insn' takes the SEQUENCE apart and makes separate insns.  */\n DEF_RTL_EXPR(SEQUENCE, \"sequence\", \"E\", RTX_EXTRA)\n \n-/* Refers to the address of its argument.  This is only used in alias.c.  */\n-DEF_RTL_EXPR(ADDRESS, \"address\", \"e\", RTX_MATCH)\n+/* Represents a non-global base address.  This is only used in alias.c.  */\n+DEF_RTL_EXPR(ADDRESS, \"address\", \"w\", RTX_EXTRA)\n \n /* ----------------------------------------------------------------------\n    Expression types used for things in the instruction chain."}]}