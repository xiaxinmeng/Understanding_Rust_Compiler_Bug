{"sha": "1156b23c785de68c3ebcba98a11634f388f97bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1NmIyM2M3ODVkZTY4YzNlYmNiYTk4YTExNjM0ZjM4OGY5N2JmNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-15T20:47:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-15T20:47:38Z"}, "message": "Minor whitespace fixes\n\nFrom-SVN: r35729", "tree": {"sha": "67cfcfcab1414fbbe272ccc27e432daa7744a061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67cfcfcab1414fbbe272ccc27e432daa7744a061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1156b23c785de68c3ebcba98a11634f388f97bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1156b23c785de68c3ebcba98a11634f388f97bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1156b23c785de68c3ebcba98a11634f388f97bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1156b23c785de68c3ebcba98a11634f388f97bf7/comments", "author": null, "committer": null, "parents": [{"sha": "7300c8eb641ad10cc9a0833862c340c9d4843013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7300c8eb641ad10cc9a0833862c340c9d4843013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7300c8eb641ad10cc9a0833862c340c9d4843013"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e219d5ab043d34d4c1f61515f65ccc5a687cbf87", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1156b23c785de68c3ebcba98a11634f388f97bf7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1156b23c785de68c3ebcba98a11634f388f97bf7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1156b23c785de68c3ebcba98a11634f388f97bf7", "patch": "@@ -937,7 +937,7 @@ gen_lowpart_common (mode, x)\n \t{\n \tcase SFmode:\n \t  REAL_VALUE_TO_TARGET_SINGLE (r, i[endian]);\n-\t  i[1-endian] = 0;\n+\t  i[1 - endian] = 0;\n \t  break;\n \tcase DFmode:\n \t  REAL_VALUE_TO_TARGET_DOUBLE (r, i);\n@@ -950,26 +950,28 @@ gen_lowpart_common (mode, x)\n \t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, i);\n \t  break;\n \tdefault:\n-\t  abort();\n+\t  abort ();\n \t}\n \n       /* Now, pack the 32-bit elements of the array into a CONST_DOUBLE\n \t and return it.  */\n #if HOST_BITS_PER_WIDE_INT == 32\n-      return immed_double_const (i[endian], i[1-endian], mode);\n+      return immed_double_const (i[endian], i[1 - endian], mode);\n #else\n       {\n \tint c;\n \n \tif (HOST_BITS_PER_WIDE_INT != 64)\n-\t  abort();\n+\t  abort ();\n+\n \tfor (c = 0; c < 4; c++)\n-\t  i[c] &= 0xffffffffL;\n+\t  i[c] &= ~ (0L);\n       \n-\treturn immed_double_const (i[endian*3] | \n-\t\t\t\t   (((HOST_WIDE_INT) i[1+endian]) << 32),\n-\t\t\t\t   i[2-endian] |\n-\t\t\t\t   (((HOST_WIDE_INT) i[3-endian*3]) << 32),\n+\treturn immed_double_const (i[endian * 3]\n+\t\t\t\t   | (((HOST_WIDE_INT) i[1 + endian]) << 32),\n+\t\t\t\t   i[2 - endian]\n+\t\t\t\t   | (((HOST_WIDE_INT) i[3 - endian * 3])\n+\t\t\t\t      << 32),\n \t\t\t\t   mode);\n       }\n #endif"}]}