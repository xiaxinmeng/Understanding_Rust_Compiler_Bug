{"sha": "a344e3cbb65b400f2250ed90f1529f83ac980c05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0NGUzY2JiNjViNDAwZjIyNTBlZDkwZjE1MjlmODNhYzk4MGMwNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-04-06T20:14:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-04-06T20:14:12Z"}, "message": "i386.md (extend<mode>xf2): Rename from extendsfxf2 and extenddfxf2.\n\n        * config/i386/i386.md (extend<mode>xf2): Rename from extendsfxf2\n        and extenddfxf2. Macroize expander using X87MODEF12 mode macro.\n        (*truncdfsf_mixed, *truncdfsf_i387, *truncdfsf2_i387_1):\n        Use output_387_reg_move().\n        (*truncxf<mode>2): Rename from *truncxfsf2 and truncxfdf2. Macroize\n        expander using X87MODEF12 mode macro.\n        (*truncxfsf2_mixed): Combine alternatives, ignore \"r\" alternative when\n        choosing register preferences.  Use output_387_reg_move().\n        (*truncxfdf2_mixed): Combine alternatives, use \"r\" alternative\n        instead of \"x\".  Use output_387_reg_move().\n        (*truncxf<mode>2_i387_noop): Rename from *truncxfsf2_i387_noop and\n        *truncxfdf2_i387_noop.  Macroize insn using X87MODEF12 mode macro.\n        (*truncxf<mode>2_i387): Rename from *truncxfsf2_i387 and\n        *truncxfdf2_i387.  Macroize insn using X87MODEF12 mode macro.\n        Use output_387_reg_move().\n        (*truncxf?f_mixed splitter): Macroize splitter using X87MODEF12\n        mode macro.\n        (*truncxf?f_i387 splitter): Ditto.\n\nFrom-SVN: r123626", "tree": {"sha": "dfa8e20fca47b86540f000e41d8237866927a10c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa8e20fca47b86540f000e41d8237866927a10c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a344e3cbb65b400f2250ed90f1529f83ac980c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a344e3cbb65b400f2250ed90f1529f83ac980c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a344e3cbb65b400f2250ed90f1529f83ac980c05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a344e3cbb65b400f2250ed90f1529f83ac980c05/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234"}], "stats": {"total": 235, "additions": 74, "deletions": 161}, "files": [{"sha": "898aeaaa2829488c4ab12a15ad7cfb67789f3a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a344e3cbb65b400f2250ed90f1529f83ac980c05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a344e3cbb65b400f2250ed90f1529f83ac980c05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a344e3cbb65b400f2250ed90f1529f83ac980c05", "patch": "@@ -1,3 +1,24 @@\n+2007-04-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (extend<mode>xf2): Rename from extendsfxf2\n+\tand extenddfxf2. Macroize expander using X87MODEF12 mode macro.\n+\t(*truncdfsf_mixed, *truncdfsf_i387, *truncdfsf2_i387_1):\n+\tUse output_387_reg_move().\n+\t(*truncxf<mode>2): Rename from *truncxfsf2 and truncxfdf2. Macroize\n+\texpander using X87MODEF12 mode macro.\n+\t(*truncxfsf2_mixed): Combine alternatives, ignore \"r\" alternative when\n+\tchoosing register preferences.  Use output_387_reg_move().\n+\t(*truncxfdf2_mixed): Combine alternatives, use \"r\" alternative\n+\tinstead of \"x\".  Use output_387_reg_move().\n+\t(*truncxf<mode>2_i387_noop): Rename from *truncxfsf2_i387_noop and\n+\t*truncxfdf2_i387_noop.  Macroize insn using X87MODEF12 mode macro.\n+\t(*truncxf<mode>2_i387): Rename from *truncxfsf2_i387 and\n+\t*truncxfdf2_i387.  Macroize insn using X87MODEF12 mode macro.\n+\tUse output_387_reg_move().\n+\t(*truncxf?f_mixed splitter): Macroize splitter using X87MODEF12\n+\tmode macro.\n+\t(*truncxf?f_i387 splitter): Ditto.\n+\n 2007-04-06  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove"}, {"sha": "e524f08dd260e2c336a9997be8b83acd4e2374e2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 161, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a344e3cbb65b400f2250ed90f1529f83ac980c05/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a344e3cbb65b400f2250ed90f1529f83ac980c05/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a344e3cbb65b400f2250ed90f1529f83ac980c05", "patch": "@@ -3784,9 +3784,9 @@\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"SF,XF\")])\n \n-(define_expand \"extendsfxf2\"\n+(define_expand \"extend<mode>xf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n-        (float_extend:XF (match_operand:SF 1 \"general_operand\" \"\")))]\n+        (float_extend:XF (match_operand:X87MODEF12 1 \"general_operand\" \"\")))]\n   \"TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n@@ -3796,49 +3796,22 @@\n       if (standard_80387_constant_p (operands[1]) > 0)\n \t{\n \t  operands[1] = simplify_const_unary_operation\n-\t    (FLOAT_EXTEND, XFmode, operands[1], SFmode);\n+\t    (FLOAT_EXTEND, XFmode, operands[1], <MODE>mode);\n \t  emit_move_insn_1 (operands[0], operands[1]);\n \t  DONE;\n \t}\n-      operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n+      operands[1] = validize_mem (force_const_mem (<MODE>mode, operands[1]));\n     }\n })\n \n-(define_insn \"*extendsfxf2_i387\"\n+(define_insn \"*extend<mode>xf2_i387\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n-        (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n+        (float_extend:XF\n+\t  (match_operand:X87MODEF12 1 \"nonimmediate_operand\" \"fm,f\")))]\n   \"TARGET_80387\"\n   \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF,XF\")])\n-\n-(define_expand \"extenddfxf2\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n-        (float_extend:XF (match_operand:DF 1 \"general_operand\" \"\")))]\n-  \"TARGET_80387\"\n-{\n-  /* ??? Needed for compress_float_constant since all fp constants\n-     are LEGITIMATE_CONSTANT_P.  */\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    {\n-      if (standard_80387_constant_p (operands[1]) > 0)\n-\t{\n-\t  operands[1] = simplify_const_unary_operation\n-\t    (FLOAT_EXTEND, XFmode, operands[1], DFmode);\n-\t  emit_move_insn_1 (operands[0], operands[1]);\n-\t  DONE;\n-\t}\n-      operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n-    }\n-})\n-\n-(define_insn \"*extenddfxf2_i387\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n-        (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"DF,XF\")])\n+   (set_attr \"mode\" \"<MODE>,XF\")])\n \n ;; %%% This seems bad bad news.\n ;; This cannot output into an f-reg because there is no way to be sure\n@@ -3922,10 +3895,8 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n+      return output_387_reg_move (insn, operands);\n+\n     case 1:\n       return \"#\";\n     case 2:\n@@ -3948,10 +3919,8 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n+      return output_387_reg_move (insn, operands);\n+\n     case 1:\n       return \"#\";\n     default:\n@@ -3969,12 +3938,7 @@\n   \"TARGET_80387\n    && !(TARGET_SSE2 && TARGET_SSE_MATH)\n    && !TARGET_MIX_SSE_I387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n-}\n+  \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -3990,162 +3954,90 @@\n   operands[1] = gen_rtx_REG (SFmode, true_regnum (operands[1]));\n })\n \n-;; Conversion from XFmode to SFmode.\n+;; Conversion from XFmode to {SF,DF}mode\n \n-(define_expand \"truncxfsf2\"\n-  [(parallel [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (float_truncate:SF\n-\t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n+(define_expand \"truncxf<mode>2\"\n+  [(parallel [(set (match_operand:X87MODEF12 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_truncate:X87MODEF12\n+\t\t     (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n   \"TARGET_80387\"\n {\n   if (flag_unsafe_math_optimizations)\n     {\n-      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SFmode);\n-      emit_insn (gen_truncxfsf2_i387_noop (reg, operands[1]));\n+      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_truncxf<mode>2_i387_noop (reg, operands[1]));\n       if (reg != operands[0])\n \temit_move_insn (operands[0], reg);\n       DONE;\n     }\n   else\n-    operands[2] = assign_386_stack_local (SFmode, SLOT_TEMP);\n+    operands[2] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n })\n \n (define_insn \"*truncxfsf2_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f,?r,?x\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?fx*r\")\n \t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n+\t  (match_operand:XF 1 \"register_operand\" \"f,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m\"))]\n   \"TARGET_80387\"\n {\n   gcc_assert (!which_alternative);\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n+  return output_387_reg_move (insn, operands);\n }\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,i387,i387,i387\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"truncxfsf2_i387_noop\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*truncxfsf2_i387\"\n-  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n-\t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n-}\n-  [(set_attr \"type\" \"fmov\")\n+  [(set_attr \"type\" \"fmov,multi\")\n+   (set_attr \"unit\" \"*,i387\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 2) (float_truncate:SF (match_dup 1)))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"memory_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:SF (match_dup 1)))]\n-  \"\")\n-\n-;; Conversion from XFmode to DFmode.\n-\n-(define_expand \"truncxfdf2\"\n-  [(parallel [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (float_truncate:DF\n-\t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n-{\n-  if (flag_unsafe_math_optimizations)\n-    {\n-      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DFmode);\n-      emit_insn (gen_truncxfdf2_i387_noop (reg, operands[1]));\n-      if (reg != operands[0])\n-\temit_move_insn (operands[0], reg);\n-      DONE;\n-    }\n-  else\n-    operands[2] = assign_386_stack_local (DFmode, SLOT_TEMP);\n-})\n-\n (define_insn \"*truncxfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f,?r,?Y2*x\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?fY2*r\")\n \t(float_truncate:DF\n-\t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n+\t  (match_operand:XF 1 \"register_operand\" \"f,f\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m\"))]\n   \"TARGET_80387\"\n {\n   gcc_assert (!which_alternative);\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n+  return output_387_reg_move (insn, operands);\n }\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,i387,i387,i387\")\n+  [(set_attr \"type\" \"fmov,multi\")\n+   (set_attr \"unit\" \"*,i387\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"truncxfdf2_i387_noop\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:DF (match_operand:XF 1 \"register_operand\" \"f\")))]\n+(define_insn \"truncxf<mode>2_i387_noop\"\n+  [(set (match_operand:X87MODEF12 0 \"register_operand\" \"=f\")\n+\t(float_truncate:X87MODEF12\n+\t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_80387 && flag_unsafe_math_optimizations\"\n   \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*truncxfdf2_i387\"\n-  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n-\t(float_truncate:DF\n+(define_insn \"*truncxf<mode>2_i387\"\n+  [(set (match_operand:X87MODEF12 0 \"memory_operand\" \"=m\")\n+\t(float_truncate:X87MODEF12\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n-}\n+  \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float_truncate:DF\n-\t (match_operand:XF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))]\n+  [(set (match_operand:X87MODEF12 0 \"register_operand\" \"\")\n+\t(float_truncate:X87MODEF12\n+\t  (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:X87MODEF12 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 2) (float_truncate:DF (match_dup 1)))\n+  [(set (match_dup 2) (float_truncate:X87MODEF12 (match_dup 1)))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"memory_operand\" \"\")\n-\t(float_truncate:DF\n-\t (match_operand:XF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))]\n+  [(set (match_operand:X87MODEF12 0 \"memory_operand\" \"\")\n+\t(float_truncate:X87MODEF12\n+\t  (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:X87MODEF12 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:DF (match_dup 1)))]\n+  [(set (match_dup 0) (float_truncate:X87MODEF12 (match_dup 1)))]\n   \"\")\n \f\n ;; Signed conversion to DImode."}]}