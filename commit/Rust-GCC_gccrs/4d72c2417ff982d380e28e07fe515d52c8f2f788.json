{"sha": "4d72c2417ff982d380e28e07fe515d52c8f2f788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3MmMyNDE3ZmY5ODJkMzgwZTI4ZTA3ZmU1MTVkNTJjOGYyZjc4OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T18:58:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T18:58:36Z"}, "message": "pa.md (call, call_value): If flag_pic, emit restore of PIC table register.\n\n\t* pa.md (call, call_value): If flag_pic, emit restore of PIC table\n\tregister.\n\t(call_interal, call_value_internal): Name matching insns.\n\t(movsi, movhi, movqi, movdi, movsf, movdf patterns): Don't\n\tmatch memory to memory moves.\n\nFrom-SVN: r3066", "tree": {"sha": "9ef73e95d0638ea6cb7b60b813e09e496368786f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef73e95d0638ea6cb7b60b813e09e496368786f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d72c2417ff982d380e28e07fe515d52c8f2f788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d72c2417ff982d380e28e07fe515d52c8f2f788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d72c2417ff982d380e28e07fe515d52c8f2f788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d72c2417ff982d380e28e07fe515d52c8f2f788/comments", "author": null, "committer": null, "parents": [{"sha": "3ae7de4ed745c3a4ac764131c491f9a92ba76404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae7de4ed745c3a4ac764131c491f9a92ba76404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae7de4ed745c3a4ac764131c491f9a92ba76404"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "1743b3db1f46eca79bab311a60fadd3dd8c4dd3f", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d72c2417ff982d380e28e07fe515d52c8f2f788/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d72c2417ff982d380e28e07fe515d52c8f2f788/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=4d72c2417ff982d380e28e07fe515d52c8f2f788", "patch": "@@ -746,7 +746,9 @@\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=r,r,Q,!r,!fx,!fx\")\n \t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,!fxy,!r,!fx\"))]\n-  \"\"\n+  \"register_operand (operands[0], SImode)\n+   || register_operand (operands[1], SImode)\n+   || operands[1] == const0_rtx\"\n   \"@\n    copy %r1,%0\n    ldw%M1 %1,%0\n@@ -898,7 +900,9 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q,!r,!*fx,!*fx\")\n \t(match_operand:HI 1 \"move_operand\" \"rM,Q,rM,*fx,r,!*fx\"))]\n-  \"\"\n+  \"register_operand (operands[0], HImode)\n+   || register_operand (operands[1], HImode)\n+   || operands[1] == const0_rtx\"\n   \"@\n    copy %r1,%0\n    ldh%M1 %1,%0\n@@ -959,7 +963,9 @@\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q,!r,!*fx,!*fx\")\n \t(match_operand:QI 1 \"move_operand\" \"rM,Q,rM,*fx,r,*fx\"))]\n-  \"\"\n+  \"register_operand (operands[0], QImode)\n+   || register_operand (operands[1], QImode)\n+   || operands[1] == const0_rtx\"\n   \"@\n    copy %r1,%0\n    ldb%M1 %1,%0\n@@ -1239,7 +1245,9 @@\n \t\t\t  \"=r,Q,&r,&r,fx,fx,r\")\n \t(match_operand:DI 1 \"general_operand\"\n \t\t\t  \"r,r,Q,i,r,fx,fx\"))]\n-  \"\"\n+  \"register_operand (operands[0], DImode)\n+   || register_operand (operands[1], DImode)\n+   || operands[1] == const0_rtx\"\n   \"*\n {\n   if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n@@ -1287,7 +1295,8 @@\n \t\t\t  \"=fx,r,r,fx,fx,r,Q,Q\")\n \t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"fx,r,!fx,!r,Q,Q,fx,r\"))]\n-  \"\"\n+  \"register_operand (operands[0], SFmode)\n+   || register_operand (operands[1], SFmode)\"\n   \"@\n    fcpy,sgl %1,%0\n    copy %1,%0\n@@ -2325,14 +2334,24 @@\n  \"\"\n  \"\n {\n+  rtx op;\n+  \n   if (TARGET_LONG_CALLS) \n-    operands[0] = gen_rtx (MEM, SImode, \n-\t\t  force_reg (SImode, XEXP (operands[0], 0)));\n+    op = force_reg (SImode, XEXP (operands[0], 0));\n   else\n-    operands[0] = gen_rtx (MEM, SImode, XEXP (operands[0], 0));\n+    op = XEXP (operands[0], 0);\n+  emit_call_insn (gen_call_internal (op, operands[1]));\n+  if (flag_pic)\n+    {\n+      if (!hppa_save_pic_table_rtx)\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+      emit_insn (gen_rtx (SET, VOIDmode,\n+\t\t\t  gen_rtx (REG, Pmode, 19), hppa_save_pic_table_rtx));\n+    }\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"call_internal\"\n  [(call (mem:SI (match_operand:SI 0 \"call_operand_address\" \"r,S\"))\n \t(match_operand 1 \"\" \"i,i\"))\n   (clobber (reg:SI 31))\n@@ -2361,14 +2380,24 @@\n   \"\"\n   \"\n {\n+  rtx op;\n+  \n   if (TARGET_LONG_CALLS) \n-    operands[1] = gen_rtx (MEM, SImode, \n-\t\t\t   force_reg (SImode, XEXP (operands[1], 0)));\n+    op = force_reg (SImode, XEXP (operands[1], 0));\n   else\n-    operands[1] = gen_rtx (MEM, SImode, XEXP (operands[1], 0));\n+    op = XEXP (operands[1], 0);\n+  emit_call_insn (gen_call_value_internal (operands[0], op, operands[2]));\n+  if (flag_pic)\n+    {\n+      if (!hppa_save_pic_table_rtx)\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+      emit_insn (gen_rtx (SET, VOIDmode,\n+\t\t\t  gen_rtx (REG, Pmode, 19), hppa_save_pic_table_rtx));\n+    }\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"call_value_internal\"\n   [(set (match_operand 0 \"\" \"=rfx,rfx\")\n \t(call (mem:SI (match_operand:SI 1 \"call_operand_address\" \"r,S\"))\n \t      (match_operand 2 \"\" \"i,i\")))"}]}