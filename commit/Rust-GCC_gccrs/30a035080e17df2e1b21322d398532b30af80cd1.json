{"sha": "30a035080e17df2e1b21322d398532b30af80cd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhMDM1MDgwZTE3ZGYyZTFiMjEzMjJkMzk4NTMyYjMwYWY4MGNkMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-12-29T17:02:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-29T17:02:03Z"}, "message": "re PR c++/12774 (Type checking problems in templates)\n\ncp:\n\tPR c++/12774\n\t* typeck.c (comp_array_types): Fold non-dependent domains for\n\tABI-1.\ntestsuite:\n\tPR c++/12774\n\t* g++.dg/template/array1-1.C: New test.\n\t* g++.dg/template/array1-2.C: New test.\n\nFrom-SVN: r75204", "tree": {"sha": "c3923f14a15451d884b19950367d2be72de87c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3923f14a15451d884b19950367d2be72de87c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a035080e17df2e1b21322d398532b30af80cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a035080e17df2e1b21322d398532b30af80cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a035080e17df2e1b21322d398532b30af80cd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a035080e17df2e1b21322d398532b30af80cd1/comments", "author": null, "committer": null, "parents": [{"sha": "b66906a8ff79931bc3d23b9362833b1567c5ac56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66906a8ff79931bc3d23b9362833b1567c5ac56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66906a8ff79931bc3d23b9362833b1567c5ac56"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "1d61141af0423f3a11db200607282e94fad2b3a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30a035080e17df2e1b21322d398532b30af80cd1", "patch": "@@ -1,3 +1,9 @@\n+2003-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12774\n+\t* typeck.c (comp_array_types): Fold non-dependent domains for\n+\tABI-1.\n+\n 2003-12-29  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/13289"}, {"sha": "ff397c0417d0d36e2b21ff946347580b92882cbe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=30a035080e17df2e1b21322d398532b30af80cd1", "patch": "@@ -857,6 +857,7 @@ comp_array_types (tree t1, tree t2, bool allow_redeclaration)\n {\n   tree d1;\n   tree d2;\n+  tree max1, max2;\n \n   if (t1 == t2)\n     return true;\n@@ -887,8 +888,27 @@ comp_array_types (tree t1, tree t2, bool allow_redeclaration)\n     return allow_redeclaration;\n \n   /* Check that the dimensions are the same.  */\n-  return (cp_tree_equal (TYPE_MIN_VALUE (d1), TYPE_MIN_VALUE (d2))\n-\t  && cp_tree_equal (TYPE_MAX_VALUE (d1), TYPE_MAX_VALUE (d2)));\n+\n+  if (!cp_tree_equal (TYPE_MIN_VALUE (d1), TYPE_MIN_VALUE (d2)))\n+    return false;\n+  max1 = TYPE_MAX_VALUE (d1);\n+  max2 = TYPE_MAX_VALUE (d2);\n+  if (processing_template_decl && !abi_version_at_least (2)\n+      && !value_dependent_expression_p (max1)\n+      && !value_dependent_expression_p (max2))\n+    {\n+      /* With abi-1 we do not fold non-dependent array bounds, (and\n+         consequently mangle them incorrectly).  We must therefore\n+         fold them here, to verify the domains have the same\n+         value.  */\n+      max1 = fold (max1);\n+      max2 = fold (max2);\n+    }\n+\n+  if (!cp_tree_equal (max1, max2))\n+    return false;\n+\n+  return true;\n }\n \n /* Return true if T1 and T2 are related as allowed by STRICT.  STRICT"}, {"sha": "be64671bf901001a7eceda761c47cbc099dbabf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30a035080e17df2e1b21322d398532b30af80cd1", "patch": "@@ -1,3 +1,9 @@\n+2003-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12774\n+\t* g++.dg/template/array1-1.C: New test.\n+\t* g++.dg/template/array1-2.C: New test.\n+\n 2003-12-29  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/12632"}, {"sha": "97fe7cde25d5eeabbb4697570c8083ddbe0abb9c", "filename": "gcc/testsuite/g++.dg/template/array1-1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-1.C?ref=30a035080e17df2e1b21322d398532b30af80cd1", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=1\" }\n+\n+// Contributed by Nathan Sidwell 22 Dec 2003 <nathan@codesourcery.com>\n+// Origin: Roger Sayle  <roger@eyesopen.com>\n+\n+// PR c++/12774 Array domains compared unequal\n+\n+void Foo(double r[3][3])\n+{\n+}\n+\n+void Baz()\n+{\n+   double m[3][3];\n+   Foo(m);\n+}\n+\n+template <class T>\n+void Bar()\n+{\n+   double m[3][3];\n+   Foo(m);\n+}\n+\n+int main()\n+{\n+   Baz();\n+   Bar<int>();\n+   return 0;\n+}\n+"}, {"sha": "7214517b3c643624e10dc744cbe715a3824d3b1f", "filename": "gcc/testsuite/g++.dg/template/array1-2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a035080e17df2e1b21322d398532b30af80cd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray1-2.C?ref=30a035080e17df2e1b21322d398532b30af80cd1", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=2\" }\n+\n+// Contributed by Nathan Sidwell 22 Dec 2003 <nathan@codesourcery.com>\n+// Origin: Roger Sayle  <roger@eyesopen.com>\n+\n+// PR c++/12774 Array domains compared unequal\n+\n+void Foo(double r[3][3])\n+{\n+}\n+\n+void Baz()\n+{\n+   double m[3][3];\n+   Foo(m);\n+}\n+\n+template <class T>\n+void Bar()\n+{\n+   double m[3][3];\n+   Foo(m);\n+}\n+\n+int main()\n+{\n+   Baz();\n+   Bar<int>();\n+   return 0;\n+}\n+"}]}