{"sha": "8d0cf15e1c9583723314193c1add818374d5f897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwY2YxNWUxYzk1ODM3MjMzMTQxOTNjMWFkZDgxODM3NGQ1Zjg5Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-30T17:12:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-30T17:12:06Z"}, "message": "c-common.h (enum rid): Remove RID_IS_CONVERTIBLE_TO.\n\nc-family/\n\t* c-common.h (enum rid): Remove RID_IS_CONVERTIBLE_TO.\n\t* c-common.c (c_common_reswords): Remove __is_convertible_to.\ncp/\n\t* cp-tree.h (cp_trait_kind): Remove CPTK_IS_CONVERTIBLE_TO.\n\t* cxx-pretty-print.c (pp_cxx_trait_expression): Likewise.\n\t* semantics.c (trait_expr_value): Likewise.\n\t(finish_trait_expr): Likewise.\n\t* parser.c (cp_parser_primary_expression): Likewise.\n\t(cp_parser_trait_expr): Likewise. Remove redundant grokdeclarator.\n\nFrom-SVN: r215735", "tree": {"sha": "8c362cff0a078a9a626be3899830a2360da10e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c362cff0a078a9a626be3899830a2360da10e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0cf15e1c9583723314193c1add818374d5f897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0cf15e1c9583723314193c1add818374d5f897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0cf15e1c9583723314193c1add818374d5f897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0cf15e1c9583723314193c1add818374d5f897/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00b365d5804abd82373216e807ef46de8e24ca02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b365d5804abd82373216e807ef46de8e24ca02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b365d5804abd82373216e807ef46de8e24ca02"}], "stats": {"total": 87, "additions": 19, "deletions": 68}, "files": [{"sha": "262b2d4de2faca3752f7e417c11c27322814397c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -1,3 +1,8 @@\n+2014-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.h (enum rid): Remove RID_IS_CONVERTIBLE_TO.\n+\t* c-common.c (c_common_reswords): Remove __is_convertible_to.\n+\n 2014-09-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61405"}, {"sha": "0324a0aaa30355071586047a32102ab73be9b9d3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -472,7 +472,6 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__is_abstract\",\tRID_IS_ABSTRACT, D_CXXONLY },\n   { \"__is_base_of\",\tRID_IS_BASE_OF, D_CXXONLY },\n   { \"__is_class\",\tRID_IS_CLASS,\tD_CXXONLY },\n-  { \"__is_convertible_to\", RID_IS_CONVERTIBLE_TO, D_CXXONLY },\n   { \"__is_empty\",\tRID_IS_EMPTY,\tD_CXXONLY },\n   { \"__is_enum\",\tRID_IS_ENUM,\tD_CXXONLY },\n   { \"__is_final\",\tRID_IS_FINAL,\tD_CXXONLY },"}, {"sha": "5ba7859cb9dcfe54da4e49c2f5fc1115acb7e786", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -138,7 +138,7 @@ enum rid\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,\n   RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_VIRTUAL_DESTRUCTOR,\n   RID_IS_ABSTRACT,             RID_IS_BASE_OF,\n-  RID_IS_CLASS,                RID_IS_CONVERTIBLE_TO,\n+  RID_IS_CLASS,\n   RID_IS_EMPTY,                RID_IS_ENUM,\n   RID_IS_FINAL,                RID_IS_LITERAL_TYPE,\n   RID_IS_POD,                  RID_IS_POLYMORPHIC,"}, {"sha": "00d3fe277f8640afe8ba64e089f83b83cf776eb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -1,3 +1,12 @@\n+2014-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (cp_trait_kind): Remove CPTK_IS_CONVERTIBLE_TO.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Likewise.\n+\t* semantics.c (trait_expr_value): Likewise.\n+\t(finish_trait_expr): Likewise.\n+\t* parser.c (cp_parser_primary_expression): Likewise.\n+\t(cp_parser_trait_expr): Likewise. Remove redundant grokdeclarator.\n+\n 2014-09-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n        PR c++/16564"}, {"sha": "e6e90f76c021de6ea1b7656857dad5df2d53b20f", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -354,9 +354,9 @@ DEFTREECODE (STMT_EXPR, \"stmt_expr\", tcc_expression, 1)\n    is applied.  */\n DEFTREECODE (UNARY_PLUS_EXPR, \"unary_plus_expr\", tcc_unary, 1)\n \n-/** C++0x extensions. */\n+/** C++11 extensions. */\n \n-/* A static assertion.  This is a C++0x extension.\n+/* A static assertion.  This is a C++11 extension.\n    STATIC_ASSERT_CONDITION contains the condition that is being\n    checked.  STATIC_ASSERT_MESSAGE contains the message (a string\n    literal) to be displayed if the condition fails to hold.  */"}, {"sha": "789ef1afb446da481cee30f68c6111a8e8900149", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -645,7 +645,6 @@ typedef enum cp_trait_kind\n   CPTK_IS_ABSTRACT,\n   CPTK_IS_BASE_OF,\n   CPTK_IS_CLASS,\n-  CPTK_IS_CONVERTIBLE_TO,\n   CPTK_IS_EMPTY,\n   CPTK_IS_ENUM,\n   CPTK_IS_FINAL,"}, {"sha": "f0734ec2f4fc3e6c708009d0f3c21a6ec44f2c7b", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -388,7 +388,6 @@ pp_cxx_userdef_literal (cxx_pretty_printer *pp, tree t)\n      __is_abstract ( type-id )\n      __is_base_of ( type-id , type-id )\n      __is_class ( type-id )\n-     __is_convertible_to ( type-id , type-id )     \n      __is_empty ( type-id )\n      __is_enum ( type-id )\n      __is_literal_type ( type-id )\n@@ -2373,9 +2372,6 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     case CPTK_IS_CLASS:\n       pp_cxx_ws_string (pp, \"__is_class\");\n       break;\n-    case CPTK_IS_CONVERTIBLE_TO:\n-      pp_cxx_ws_string (pp, \"__is_convertible_to\");\n-      break;\n     case CPTK_IS_EMPTY:\n       pp_cxx_ws_string (pp, \"__is_empty\");\n       break;\n@@ -2411,7 +2407,7 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n   pp_cxx_left_paren (pp);\n   pp->type_id (TRAIT_EXPR_TYPE1 (t));\n \n-  if (kind == CPTK_IS_BASE_OF || kind == CPTK_IS_CONVERTIBLE_TO)\n+  if (kind == CPTK_IS_BASE_OF)\n     {\n       pp_cxx_separate_with (pp, ',');\n       pp->type_id (TRAIT_EXPR_TYPE2 (t));"}, {"sha": "63cc0d3dd716583a403af504f66bd097ab026e02", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -4134,7 +4134,6 @@ complain_flags (bool decltype_p)\n      __is_abstract ( type-id )\n      __is_base_of ( type-id , type-id )\n      __is_class ( type-id )\n-     __is_convertible_to ( type-id , type-id )     \n      __is_empty ( type-id )\n      __is_enum ( type-id )\n      __is_final ( type-id )\n@@ -4483,7 +4482,6 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_IS_ABSTRACT:\n \tcase RID_IS_BASE_OF:\n \tcase RID_IS_CLASS:\n-\tcase RID_IS_CONVERTIBLE_TO:\n \tcase RID_IS_EMPTY:\n \tcase RID_IS_ENUM:\n \tcase RID_IS_FINAL:\n@@ -8665,7 +8663,6 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n   cp_trait_kind kind;\n   tree type1, type2 = NULL_TREE;\n   bool binary = false;\n-  cp_decl_specifier_seq decl_specs;\n \n   switch (keyword)\n     {\n@@ -8703,10 +8700,6 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_IS_CLASS:\n       kind = CPTK_IS_CLASS;\n       break;\n-    case RID_IS_CONVERTIBLE_TO:\n-      kind = CPTK_IS_CONVERTIBLE_TO;\n-      binary = true;\n-      break;\n     case RID_IS_EMPTY:\n       kind = CPTK_IS_EMPTY;\n       break;\n@@ -8757,14 +8750,6 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n   if (type1 == error_mark_node)\n     return error_mark_node;\n \n-  /* Build a trivial decl-specifier-seq.  */\n-  clear_decl_specs (&decl_specs);\n-  decl_specs.type = type1;\n-\n-  /* Call grokdeclarator to figure out what type this is.  */\n-  type1 = grokdeclarator (NULL, &decl_specs, TYPENAME,\n-\t\t\t  /*initialized=*/0, /*attrlist=*/NULL);\n-\n   if (binary)\n     {\n       cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n@@ -8773,14 +8758,6 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \n       if (type2 == error_mark_node)\n \treturn error_mark_node;\n-\n-      /* Build a trivial decl-specifier-seq.  */\n-      clear_decl_specs (&decl_specs);\n-      decl_specs.type = type2;\n-\n-      /* Call grokdeclarator to figure out what type this is.  */\n-      type2 = grokdeclarator (NULL, &decl_specs, TYPENAME,\n-\t\t\t      /*initialized=*/0, /*attrlist=*/NULL);\n     }\n \n   cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);"}, {"sha": "3fbbb17dc3d2009a689896a3e1712f9ec7ccb9f5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -7355,10 +7355,6 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_IS_CLASS:\n       return (NON_UNION_CLASS_TYPE_P (type1));\n \n-    case CPTK_IS_CONVERTIBLE_TO:\n-      /* TODO  */\n-      return false;\n-\n     case CPTK_IS_EMPTY:\n       return (NON_UNION_CLASS_TYPE_P (type1) && CLASSTYPE_EMPTY_P (type1));\n \n@@ -7413,36 +7409,8 @@ check_trait_type (tree type)\n tree\n finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n {\n-  gcc_assert (kind == CPTK_HAS_NOTHROW_ASSIGN\n-\t      || kind == CPTK_HAS_NOTHROW_CONSTRUCTOR\n-\t      || kind == CPTK_HAS_NOTHROW_COPY\n-\t      || kind == CPTK_HAS_TRIVIAL_ASSIGN\n-\t      || kind == CPTK_HAS_TRIVIAL_CONSTRUCTOR\n-\t      || kind == CPTK_HAS_TRIVIAL_COPY\n-\t      || kind == CPTK_HAS_TRIVIAL_DESTRUCTOR\n-\t      || kind == CPTK_HAS_VIRTUAL_DESTRUCTOR\t      \n-\t      || kind == CPTK_IS_ABSTRACT\n-\t      || kind == CPTK_IS_BASE_OF\n-\t      || kind == CPTK_IS_CLASS\n-\t      || kind == CPTK_IS_CONVERTIBLE_TO\n-\t      || kind == CPTK_IS_EMPTY\n-\t      || kind == CPTK_IS_ENUM\n-\t      || kind == CPTK_IS_FINAL\n-\t      || kind == CPTK_IS_LITERAL_TYPE\n-\t      || kind == CPTK_IS_POD\n-\t      || kind == CPTK_IS_POLYMORPHIC\n-\t      || kind == CPTK_IS_STD_LAYOUT\n-\t      || kind == CPTK_IS_TRIVIAL\n-\t      || kind == CPTK_IS_UNION);\n-\n-  if (kind == CPTK_IS_CONVERTIBLE_TO)\n-    {\n-      sorry (\"__is_convertible_to\");\n-      return error_mark_node;\n-    }\n-\n   if (type1 == error_mark_node\n-      || ((kind == CPTK_IS_BASE_OF || kind == CPTK_IS_CONVERTIBLE_TO)\n+      || ((kind == CPTK_IS_BASE_OF)\n \t  && type2 == error_mark_node))\n     return error_mark_node;\n \n@@ -7491,7 +7459,6 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_IS_UNION:\n       break;\n     \n-    case CPTK_IS_CONVERTIBLE_TO:\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "b8c0385d3d803ac62e587492d7d186160be34634", "filename": "gcc/testsuite/g++.dg/ext/is_class_error2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0cf15e1c9583723314193c1add818374d5f897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_class_error2.C?ref=8d0cf15e1c9583723314193c1add818374d5f897", "patch": "@@ -13,7 +13,6 @@ template<int> void foo()\n   __is_abstract(int)(); // { dg-error \"'__is_abstract\\\\(int\\\\)' cannot be used\" }\n   __is_base_of(int, float)(); // { dg-error \"'__is_base_of\\\\(int, float\\\\)' cannot be used\" }\n   __is_class(int)(); // { dg-error \"'__is_class\\\\(int\\\\)' cannot be used\" }\n-  __is_convertible_to(int, float)(); // { dg-message \"unimplemented\" }\n   __is_empty(int)(); // { dg-error \"'__is_empty\\\\(int\\\\)' cannot be used\" }\n   __is_enum(int)(); // { dg-error \"'__is_enum\\\\(int\\\\)' cannot be used\" }\n   __is_pod(int)(); // { dg-error \"'__is_pod\\\\(int\\\\)' cannot be used\" }"}]}