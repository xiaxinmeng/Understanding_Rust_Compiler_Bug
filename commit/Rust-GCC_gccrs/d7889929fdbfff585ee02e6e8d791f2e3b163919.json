{"sha": "d7889929fdbfff585ee02e6e8d791f2e3b163919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4ODk5MjlmZGJmZmY1ODVlZTAyZTZlOGQ3OTFmMmUzYjE2MzkxOQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-11-22T21:53:11Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-11-22T21:53:11Z"}, "message": "cfg.texi (Maintaining the CFG): Use @ftable instead of @table to list the BSI methods.\n\n\t* doc/cfg.texi (Maintaining the CFG): Use @ftable instead of\n\t@table to list the BSI methods.  Use individual @findex directives\n\tinstead of one with a comma-separated list of index entries.\n\nFrom-SVN: r91033", "tree": {"sha": "1dee707ea85a830cd6be0abaea377fcf185e4cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dee707ea85a830cd6be0abaea377fcf185e4cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7889929fdbfff585ee02e6e8d791f2e3b163919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7889929fdbfff585ee02e6e8d791f2e3b163919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7889929fdbfff585ee02e6e8d791f2e3b163919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7889929fdbfff585ee02e6e8d791f2e3b163919/comments", "author": null, "committer": null, "parents": [{"sha": "1d481ba83c705072441d4a3c52902c4e3573069f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d481ba83c705072441d4a3c52902c4e3573069f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d481ba83c705072441d4a3c52902c4e3573069f"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "113616f6eebb12236aabe7024fad2aa485a2a12b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7889929fdbfff585ee02e6e8d791f2e3b163919/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7889929fdbfff585ee02e6e8d791f2e3b163919/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7889929fdbfff585ee02e6e8d791f2e3b163919", "patch": "@@ -1,3 +1,9 @@\n+2004-11-23  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* doc/cfg.texi (Maintaining the CFG): Use @ftable instead of\n+\t@table to list the BSI methods.  Use individual @findex directives\n+\tinstead of one with a comma-separated list of index entries.\n+\n 2004-11-22  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/18529"}, {"sha": "c3529aa48048f02b6c9ec6887f96b1f623ffb01e", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7889929fdbfff585ee02e6e8d791f2e3b163919/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7889929fdbfff585ee02e6e8d791f2e3b163919/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=d7889929fdbfff585ee02e6e8d791f2e3b163919", "patch": "@@ -457,41 +457,34 @@ instruction stream.  Block statement iterators iterators are\n constructed using the @code{block_stmt_iterator} data structure and\n several modifier are available, including the following:\n \n-@table @code\n+@ftable @code\n @item bsi_start\n-@findex bsi_start\n This function initializes a @code{block_stmt_iterator} that points to\n the first non-empty statement in a basic block.\n \n @item bsi_last\n-@findex bsi_last\n This function initializes a @code{block_stmt_iterator} that points to\n the last statement in a basic block.\n \n @item bsi_end_p\n-@findex bsi_end_p\n This predicate is @code{true} if a @code{block_stmt_iterator}\n represents the end of a basic block.\n \n @item bsi_next\n-@findex bsi_next\n This function takes a @code{block_stmt_iterator} and makes it point to\n its successor.\n \n @item bsi_prev\n-@findex bsi_prev\n This function takes a @code{block_stmt_iterator} and makes it point to\n its predecessor.\n \n @item bsi_insert_after\n-@findex bsi_insert_after\n This function inserts a statement after the @code{block_stmt_iterator}\n passed in.  The final parameter determines whether the statement\n iterator is updated to point to the newly inserted statement, or left\n pointing to the original statement.\n \n @item bsi_insert_before\n-@findex bsi_insert_before\n This function inserts a statement before the @code{block_stmt_iterator}\n passed in.  The final parameter determines whether the statement\n iterator is updated to point to the newly inserted statement, or left\n@@ -500,8 +493,7 @@ pointing to the original  statement.\n @item bsi_remove\n This function removes the @code{block_stmt_iterator} passed in and\n rechains the remaining statements in a basic block, if any.\n-\n-@end table\n+@end ftable\n \n @findex BB_HEAD, BB_END\n In the RTL representation, the macros @code{BB_HEAD} and @code{BB_END}\n@@ -540,8 +532,10 @@ and add necessary edges.  The CFG hook @code{split_block} may be used\n when an instruction in the middle of a basic block has to become the\n target of a jump or branch instruction.\n \n-@findex insert_insn_on_edge, commit_edge_insertions\n-@findex bsi_insert_on_edge, bsi_commit_edge_inserts\n+@findex insert_insn_on_edge\n+@findex commit_edge_insertions\n+@findex bsi_insert_on_edge\n+@findex bsi_commit_edge_inserts\n @cindex edge splitting\n For a global optimizer, a common operation is to split edges in the\n flow graph and insert instructions on them.  In the RTL"}]}