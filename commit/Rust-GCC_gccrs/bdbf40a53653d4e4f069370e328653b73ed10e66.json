{"sha": "bdbf40a53653d4e4f069370e328653b73ed10e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiZjQwYTUzNjUzZDRlNGYwNjkzNzBlMzI4NjUzYjczZWQxMGU2Ng==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2007-04-16T15:04:18Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2007-04-16T15:04:18Z"}, "message": "re PR middle-end/28071 (A file that can not be compiled in reasonable time/space)\n\nPR middle-end/28071\n* sched-int.h (struct deps): Split field 'pending_lists_length' into\n'pending_read_list_length' and 'pending_write_list_length'.  Update\ncomment.\n* sched-deps.c (add_insn_mem_dependence): Change signature.  Update\nto handle two length counters instead of one.  Update all uses.\n(flush_pending_lists, sched_analyze_1, init_deps): Update to handle\ntwo length counters instead of one.\n* sched-rgn.c (propagate_deps): Update to handle two length counters\ninstead of one.\n\nFrom-SVN: r123874", "tree": {"sha": "ed980709254e5d24aa85241a49360562d6c042e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed980709254e5d24aa85241a49360562d6c042e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbf40a53653d4e4f069370e328653b73ed10e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbf40a53653d4e4f069370e328653b73ed10e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbf40a53653d4e4f069370e328653b73ed10e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbf40a53653d4e4f069370e328653b73ed10e66/comments", "author": null, "committer": null, "parents": [{"sha": "b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "cda7596032cbd265af2e30aa6205d1ea4c6c18ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdbf40a53653d4e4f069370e328653b73ed10e66", "patch": "@@ -1,3 +1,16 @@\n+2007-04-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR middle-end/28071\n+\t* sched-int.h (struct deps): Split field 'pending_lists_length' into\n+\t'pending_read_list_length' and 'pending_write_list_length'.  Update\n+\tcomment.\n+\t* sched-deps.c (add_insn_mem_dependence): Change signature.  Update\n+\tto handle two length counters instead of one.  Update all uses.\n+\t(flush_pending_lists, sched_analyze_1, init_deps): Update to handle\n+\ttwo length counters instead of one.\n+\t* sched-rgn.c (propagate_deps): Update to handle two length counters\n+\tinstead of one.\n+\n 2007-04-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/31582"}, {"sha": "c3dc5793d2305810e3df7b00d1caf26e6213dc1a", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=bdbf40a53653d4e4f069370e328653b73ed10e66", "patch": "@@ -1017,11 +1017,26 @@ fixup_sched_groups (rtx insn)\n    so that we can do memory aliasing on it.  */\n \n static void\n-add_insn_mem_dependence (struct deps *deps, rtx *insn_list, rtx *mem_list,\n+add_insn_mem_dependence (struct deps *deps, bool read_p,\n \t\t\t rtx insn, rtx mem)\n {\n+  rtx *insn_list;\n+  rtx *mem_list;\n   rtx link;\n \n+  if (read_p)\n+    {\n+      insn_list = &deps->pending_read_insns;\n+      mem_list = &deps->pending_read_mems;\n+      deps->pending_read_list_length++;\n+    }\n+  else\n+    {\n+      insn_list = &deps->pending_write_insns;\n+      mem_list = &deps->pending_write_mems;\n+      deps->pending_write_list_length++;\n+    }\n+\n   link = alloc_INSN_LIST (insn, *insn_list);\n   *insn_list = link;\n \n@@ -1032,8 +1047,6 @@ add_insn_mem_dependence (struct deps *deps, rtx *insn_list, rtx *mem_list,\n     }\n   link = alloc_EXPR_LIST (VOIDmode, canon_rtx (mem), *mem_list);\n   *mem_list = link;\n-\n-  deps->pending_lists_length++;\n }\n \n /* Make a dependency between every memory reference on the pending lists\n@@ -1049,12 +1062,13 @@ flush_pending_lists (struct deps *deps, rtx insn, int for_read,\n       add_dependence_list_and_free (insn, &deps->pending_read_insns, 1,\n \t\t\t\t    REG_DEP_ANTI);\n       free_EXPR_LIST_list (&deps->pending_read_mems);\n+      deps->pending_read_list_length = 0;\n     }\n \n   add_dependence_list_and_free (insn, &deps->pending_write_insns, 1,\n \t\t\t\tfor_read ? REG_DEP_ANTI : REG_DEP_OUTPUT);\n   free_EXPR_LIST_list (&deps->pending_write_mems);\n-  deps->pending_lists_length = 0;\n+  deps->pending_write_list_length = 0;\n \n   add_dependence_list_and_free (insn, &deps->last_pending_memory_flush, 1,\n \t\t\t\tfor_read ? REG_DEP_ANTI : REG_DEP_OUTPUT);\n@@ -1218,7 +1232,8 @@ sched_analyze_1 (struct deps *deps, rtx x, rtx insn)\n \t}\n       t = canon_rtx (t);\n \n-      if (deps->pending_lists_length > MAX_PENDING_LIST_LENGTH)\n+      if ((deps->pending_read_list_length + deps->pending_write_list_length)\n+\t  > MAX_PENDING_LIST_LENGTH)\n \t{\n \t  /* Flush all pending reads and writes to prevent the pending lists\n \t     from getting any larger.  Insn scheduling runs too slowly when\n@@ -1258,8 +1273,7 @@ sched_analyze_1 (struct deps *deps, rtx x, rtx insn)\n \t  add_dependence_list (insn, deps->last_pending_memory_flush, 1,\n \t\t\t       REG_DEP_ANTI);\n \n-\t  add_insn_mem_dependence (deps, &deps->pending_write_insns,\n-\t\t\t\t   &deps->pending_write_mems, insn, dest);\n+\t  add_insn_mem_dependence (deps, false, insn, dest);\n \t}\n       sched_analyze_2 (deps, XEXP (dest, 0), insn);\n     }\n@@ -1380,8 +1394,7 @@ sched_analyze_2 (struct deps *deps, rtx x, rtx insn)\n \n \t/* Always add these dependencies to pending_reads, since\n \t   this insn may be followed by a write.  */\n-\tadd_insn_mem_dependence (deps, &deps->pending_read_insns,\n-\t\t\t\t &deps->pending_read_mems, insn, x);\n+\tadd_insn_mem_dependence (deps, true, insn, x);\n \n \t/* Take advantage of tail recursion here.  */\n \tsched_analyze_2 (deps, XEXP (x, 0), insn);\n@@ -2081,7 +2094,8 @@ init_deps (struct deps *deps)\n   deps->pending_read_mems = 0;\n   deps->pending_write_insns = 0;\n   deps->pending_write_mems = 0;\n-  deps->pending_lists_length = 0;\n+  deps->pending_read_list_length = 0;\n+  deps->pending_write_list_length = 0;\n   deps->pending_flush_length = 0;\n   deps->last_pending_memory_flush = 0;\n   deps->last_function_call = 0;"}, {"sha": "3ea245b6f399e86f0634d5cdb218f46e524a32f6", "filename": "gcc/sched-int.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=bdbf40a53653d4e4f069370e328653b73ed10e66", "patch": "@@ -278,11 +278,16 @@ struct deps\n   /* An EXPR_LIST containing all MEM rtx's which are pending writes.  */\n   rtx pending_write_mems;\n \n-  /* Indicates the combined length of the two pending lists.  We must prevent\n-     these lists from ever growing too large since the number of dependencies\n-     produced is at least O(N*N), and execution time is at least O(4*N*N), as\n-     a function of the length of these pending lists.  */\n-  int pending_lists_length;\n+  /* We must prevent the above lists from ever growing too large since\n+     the number of dependencies produced is at least O(N*N),\n+     and execution time is at least O(4*N*N), as a function of the\n+     length of these pending lists.  */\n+\n+  /* Indicates the length of the pending_read list.  */\n+  int pending_read_list_length;\n+\n+  /* Indicates the length of the pending_write list.  */\n+  int pending_write_list_length;\n \n   /* Length of the pending memory flush list. Large functions with no\n      calls may build up extremely large lists.  */"}, {"sha": "79129bba66f4c02baadcab38f1b12c23acf1c256", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbf40a53653d4e4f069370e328653b73ed10e66/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=bdbf40a53653d4e4f069370e328653b73ed10e66", "patch": "@@ -2463,7 +2463,10 @@ propagate_deps (int bb, struct deps *pred_deps)\n \t= concat_INSN_LIST (pred_deps->last_pending_memory_flush,\n \t\t\t    succ_deps->last_pending_memory_flush);\n \n-      succ_deps->pending_lists_length += pred_deps->pending_lists_length;\n+      succ_deps->pending_read_list_length\n+\t+= pred_deps->pending_read_list_length;\n+      succ_deps->pending_write_list_length\n+\t+= pred_deps->pending_write_list_length;\n       succ_deps->pending_flush_length += pred_deps->pending_flush_length;\n \n       /* last_function_call is inherited by successor.  */"}]}