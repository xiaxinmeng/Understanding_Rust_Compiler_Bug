{"sha": "72acf258c6df6782d4f49b7f638a116ce70ad0ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhY2YyNThjNmRmNjc4MmQ0ZjQ5YjdmNjM4YTExNmNlNzBhZDBmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-01-07T21:58:22Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-01-07T21:58:22Z"}, "message": "x\n\nFrom-SVN: r13478", "tree": {"sha": "81cf095863938da19e400e8a3debd820d909461d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81cf095863938da19e400e8a3debd820d909461d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72acf258c6df6782d4f49b7f638a116ce70ad0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72acf258c6df6782d4f49b7f638a116ce70ad0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72acf258c6df6782d4f49b7f638a116ce70ad0ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72acf258c6df6782d4f49b7f638a116ce70ad0ff/comments", "author": null, "committer": null, "parents": [{"sha": "a88498e15f99091a0de07c4fc3e93fbbe66ca550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88498e15f99091a0de07c4fc3e93fbbe66ca550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88498e15f99091a0de07c4fc3e93fbbe66ca550"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "2a40c5a3ce061538a867bc687893d2fd8ce4bbbb", "filename": "gcc/c-parse.in", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72acf258c6df6782d4f49b7f638a116ce70ad0ff/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72acf258c6df6782d4f49b7f638a116ce70ad0ff/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=72acf258c6df6782d4f49b7f638a116ce70ad0ff", "patch": "@@ -31,7 +31,7 @@ ifobjc\n %expect 66\n end ifobjc\n ifc\n-%expect 45 \n+%expect 46\n \n /* These are the 23 conflicts you should get in parse.output;\n    the state numbers may vary if minor changes in the grammar are made.\n@@ -309,6 +309,8 @@ end ifobjc\n \t\t    assemble_asm ($3);\n \t\t  else\n \t\t    error (\"argument of `asm' is not a constant string\"); }\n+\t| extension extdef\n+\t\t{ pedantic = $<itype>1; }\n \t;\n \n datadef:\n@@ -447,11 +449,8 @@ unary_expr:\n \t| '*' cast_expr   %prec UNARY\n \t\t{ $$ = build_indirect_ref ($2, \"unary *\"); }\n \t/* __extension__ turns off -pedantic for following primary.  */\n-\t| EXTENSION\n-\t\t{ $<itype>1 = pedantic;\n-\t\t  pedantic = 0; }\n-\t  cast_expr\t  %prec UNARY\n-\t\t{ $$ = $3;\n+\t| extension cast_expr\t  %prec UNARY\n+\t\t{ $$ = $2;\n \t\t  pedantic = $<itype>1; }\n \t| unop cast_expr  %prec UNARY\n \t\t{ $$ = build_unary_op ($1, $2, 0);\n@@ -1012,6 +1011,8 @@ decl:\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'\n \t\t{ pedwarn (\"empty declaration\"); }\n+\t| extension decl\n+\t\t{ pedantic = $<itype>1; }\n \t;\n \n /* Declspecs which contain at least one type specifier or typedef name.\n@@ -1564,6 +1565,9 @@ component_decl:\n \t\t  $$ = NULL_TREE; }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n+\t| extension component_decl\n+\t\t{ $$ = $2;\n+\t\t  pedantic = $<itype>1; }\n \t;\n \n components:\n@@ -2357,6 +2361,12 @@ identifiers_or_typenames:\n \t| identifiers_or_typenames ',' identifier\n \t\t{ $$ = chainon ($1, build_tree_list (NULL_TREE, $3)); }\n \t;\n+\n+extension:\n+\tEXTENSION\n+\t\t{ $<itype>$ = pedantic;\n+\t\t  pedantic = 0; }\n+\t;\n \f\n ifobjc\n /* Objective-C productions.  */"}]}