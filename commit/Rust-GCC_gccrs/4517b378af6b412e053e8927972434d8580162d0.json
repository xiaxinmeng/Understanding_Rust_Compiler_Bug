{"sha": "4517b378af6b412e053e8927972434d8580162d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxN2IzNzhhZjZiNDEyZTA1M2U4OTI3OTcyNDM0ZDg1ODAxNjJkMA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-07-26T08:44:51Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-07-26T08:44:51Z"}, "message": "[PR 89330] Remove non-useful speculations from new_edges\n\n2019-07-26  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/89330\n\t* ipa-inline-transform.c (check_speculations_1): New function.\n\t(push_all_edges_in_set_to_vec): Likewise.\n\t(check_speculations): Use check_speculations_1, new parameter\n\tnew_edges.\n\t(inline_call): Pass new_edges to check_speculations.\n\t* ipa-inline.c (add_new_edges_to_heap): Assert edge_callee is not\n\tNULL.\n\t(speculation_useful_p): Early return true if edge is inlined, remove\n\tlater checks for inline_failed.\n\n\ttestsuite/\n\t* g++.dg/lto/pr89330_[01].C: New test.\n\t* g++.dg/tree-prof/devirt.C: Added -fno-profile-values to dg-options.\n\nFrom-SVN: r273825", "tree": {"sha": "8ba242b52d8258623593e284cd0ffb7d7618141e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba242b52d8258623593e284cd0ffb7d7618141e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4517b378af6b412e053e8927972434d8580162d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4517b378af6b412e053e8927972434d8580162d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4517b378af6b412e053e8927972434d8580162d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4517b378af6b412e053e8927972434d8580162d0/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac2dca4daf516c6972df1f5ef66e64b3c8f12bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2dca4daf516c6972df1f5ef66e64b3c8f12bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2dca4daf516c6972df1f5ef66e64b3c8f12bc2"}], "stats": {"total": 161, "additions": 152, "deletions": 9}, "files": [{"sha": "e5ef2ebf407624d5795d6fc696bd150da1df4e48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -1,3 +1,16 @@\n+2019-07-26  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/89330\n+\t* ipa-inline-transform.c (check_speculations_1): New function.\n+\t(push_all_edges_in_set_to_vec): Likewise.\n+\t(check_speculations): Use check_speculations_1, new parameter\n+\tnew_edges.\n+\t(inline_call): Pass new_edges to check_speculations.\n+\t* ipa-inline.c (add_new_edges_to_heap): Assert edge_callee is not\n+\tNULL.\n+\t(speculation_useful_p): Early return true if edge is inlined, remove\n+\tlater checks for inline_failed.\n+\n 2019-07-25  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/91223"}, {"sha": "897c563f19aeb08c816193b2c67b1408c689d228", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -237,10 +237,13 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n     }\n }\n \n-/* Check all speculations in N and resolve them if they seems useless. */\n+/* Check all speculations in N and if any seem useless, resolve them.  When a\n+   first edge is resolved, pop all edges from NEW_EDGES and insert them to\n+   EDGE_SET.  Then remove each resolved edge from EDGE_SET, if it is there.  */\n \n static bool\n-check_speculations (cgraph_node *n)\n+check_speculations_1 (cgraph_node *n, vec<cgraph_edge *> *new_edges,\n+\t\t      hash_set <cgraph_edge *> *edge_set)\n {\n   bool speculation_removed = false;\n   cgraph_edge *next;\n@@ -250,15 +253,46 @@ check_speculations (cgraph_node *n)\n       next = e->next_callee;\n       if (e->speculative && !speculation_useful_p (e, true))\n \t{\n+\t  while (new_edges && !new_edges->is_empty ())\n+\t    edge_set->add (new_edges->pop ());\n+\t  edge_set->remove (e);\n+\n \t  e->resolve_speculation (NULL);\n \t  speculation_removed = true;\n \t}\n       else if (!e->inline_failed)\n-\tspeculation_removed |= check_speculations (e->callee);\n+\tspeculation_removed |= check_speculations_1 (e->callee, new_edges,\n+\t\t\t\t\t\t     edge_set);\n     }\n   return speculation_removed;\n }\n \n+/* Push E to NEW_EDGES.  Called from hash_set traverse method, which\n+   unfortunately means this function has to have external linkage, otherwise\n+   the code will not compile with gcc 4.8.  */\n+\n+bool\n+push_all_edges_in_set_to_vec (cgraph_edge * const &e,\n+\t\t\t      vec<cgraph_edge *> *new_edges)\n+{\n+  new_edges->safe_push (e);\n+  return true;\n+}\n+\n+/* Check all speculations in N and if any seem useless, resolve them and remove\n+   them from NEW_EDGES.  */\n+\n+static bool\n+check_speculations (cgraph_node *n, vec<cgraph_edge *> *new_edges)\n+{\n+  hash_set <cgraph_edge *> edge_set;\n+  bool res = check_speculations_1 (n, new_edges, &edge_set);\n+  if (!edge_set.is_empty ())\n+    edge_set.traverse <vec<cgraph_edge *> *,\n+\t\t       push_all_edges_in_set_to_vec> (new_edges);\n+  return res;\n+}\n+\n /* Mark all call graph edges coming out of NODE and all nodes that have been\n    inlined to it as in_polymorphic_cdtor.  */\n \n@@ -450,7 +484,7 @@ inline_call (struct cgraph_edge *e, bool update_original,\n     mark_all_inlined_calls_cdtor (e->callee);\n   if (opt_for_fn (e->caller->decl, optimize))\n     new_edges_found = ipa_propagate_indirect_call_infos (curr, new_edges);\n-  check_speculations (e->callee);\n+  check_speculations (e->callee, new_edges);\n   if (update_overall_summary)\n     ipa_update_overall_fn_summary (to);\n   else"}, {"sha": "b62d280eb2587ac95e006bc47e448785e3ecdbb0", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -1629,6 +1629,7 @@ add_new_edges_to_heap (edge_heap_t *heap, vec<cgraph_edge *> new_edges)\n       struct cgraph_edge *edge = new_edges.pop ();\n \n       gcc_assert (!edge->aux);\n+      gcc_assert (edge->callee);\n       if (edge->inline_failed\n \t  && can_inline_edge_p (edge, true)\n \t  && want_inline_small_function_p (edge, true)\n@@ -1656,6 +1657,10 @@ heap_edge_removal_hook (struct cgraph_edge *e, void *data)\n bool\n speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining)\n {\n+  /* If we have already decided to inline the edge, it seems useful.  */\n+  if (!e->inline_failed)\n+    return true;\n+\n   enum availability avail;\n   struct cgraph_node *target = e->callee->ultimate_alias_target (&avail,\n \t\t\t\t\t\t\t\t e->caller);\n@@ -1690,12 +1695,11 @@ speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining)\n      to an ipa-cp clone (that are seen by having local flag set),\n      it is probably pointless to inline it unless hardware is missing\n      indirect call predictor.  */\n-  if (!anticipate_inlining && e->inline_failed && !target->local.local)\n+  if (!anticipate_inlining && !target->local.local)\n     return false;\n   /* For overwritable targets there is not much to do.  */\n-  if (e->inline_failed\n-      && (!can_inline_edge_p (e, false)\n-\t  || !can_inline_edge_by_limits_p (e, false, true)))\n+  if (!can_inline_edge_p (e, false)\n+      || !can_inline_edge_by_limits_p (e, false, true))\n     return false;\n   /* OK, speculation seems interesting.  */\n   return true;"}, {"sha": "ca3596deda04f2d2e4ea860218613c1b0c6efb3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -1,3 +1,9 @@\n+2019-07-26  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/89330\n+\t* g++.dg/lto/pr89330_[01].C: New test.\n+\t* g++.dg/tree-prof/devirt.C: Added -fno-profile-values to dg-options.\n+\n 2019-07-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/91183"}, {"sha": "10082f8341299e5d314592ed14cefb5189b5c1b0", "filename": "gcc/testsuite/g++.dg/lto/pr89330_0.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_0.C?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -0,0 +1,50 @@\n+// { dg-lto-do link }\n+// { dg-lto-options { { -O3 -g -flto -shared -Wno-odr } } }\n+\n+namespace Inkscape {\n+class Anchored {};\n+namespace XML {\n+enum NodeType {};\n+class Node :Anchored {\n+public:\n+  virtual NodeType type() ;\n+  virtual char name() ;\n+  virtual int code() ;\n+  virtual unsigned position() ;\n+  virtual unsigned childCount() ;\n+  virtual char content() ;\n+  virtual char *attribute() const ;\n+  virtual int attributeList() ;\n+  virtual bool matchAttributeName() ;\n+  virtual void setPosition() ;\n+  virtual void setContent() ;\n+  virtual void setAttribute() ;\n+  virtual int document() ;\n+  virtual int document() const ;\n+  virtual Node *root() ;\n+  virtual Node *root() const ;\n+  virtual Node *parent() ;\n+  virtual Node *next() const ;\n+  virtual Node *firstChild() const ;\n+\n+};\n+} } struct rdf_license_t {\n+  };\n+;\n+class RDFImpl {\n+;\n+  rdf_license_t *getLicense();\n+};\n+static bool rdf_match_license(Inkscape::XML::Node const *repr) {\n+  for (Inkscape::XML::Node *current = repr->firstChild(); current;\n+       current->next()->attribute());\n+  return 0;\n+}\n+rdf_license_t *RDFImpl::getLicense() {\n+  Inkscape::XML::Node *repr ;\n+  for (rdf_license_t *license ; license;\n+       license) {\n+    rdf_match_license(repr);\n+  }\n+  return 0;\n+}"}, {"sha": "5b999eee8d7c4d38714db264e52aeb9f1131d697", "filename": "gcc/testsuite/g++.dg/lto/pr89330_1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr89330_1.C?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -0,0 +1,36 @@\n+typedef char gchar;\n+namespace Inkscape {\n+class Anchored {\n+int _anchor;\n+};\n+namespace XML {\n+enum NodeType {};\n+class Node :Anchored {\n+virtual NodeType type() ;\n+  virtual char const *name() const ;\n+  virtual int code() ;\n+  virtual unsigned position() ;\n+  virtual unsigned childCount() ;\n+  virtual char content() ;\n+  virtual char attribute() ;\n+  virtual int attributeList() ;\n+  virtual bool matchAttributeName() ;\n+  virtual void setPosition() ;\n+  virtual void setContent() ;\n+  virtual int document() ;\n+  virtual int document() const ;\n+  virtual Node *root() ;\n+  virtual Node *root() const ;\n+  virtual Node *parent() ;\n+  virtual Node *parent() const ;\n+  virtual Node *next() ;\n+  virtual Node const *next() const ;\n+\n+};\n+class SimpleNode : virtual Node {\n+char const *name() const;\n+  Node *next() const { return _next; }\n+  SimpleNode *_next;\n+};\n+gchar const *SimpleNode::name() const { return 0; }\n+} } "}, {"sha": "1121f4871573d4c6402e13f6f9f3c293e007349d", "filename": "gcc/testsuite/g++.dg/tree-prof/devirt.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4517b378af6b412e053e8927972434d8580162d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C?ref=4517b378af6b412e053e8927972434d8580162d0", "patch": "@@ -1,5 +1,5 @@\n /* PR ipa/88561 */\n-/* { dg-options \"-O3 -fdump-tree-tracer-details -fdump-tree-dom3-details\" } */\n+/* { dg-options \"-O3 -fdump-tree-tracer-details -fdump-tree-dom3-details -fno-profile-values\" } */\n \n struct nsISupports\n {"}]}