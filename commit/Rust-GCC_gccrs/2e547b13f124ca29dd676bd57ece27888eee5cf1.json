{"sha": "2e547b13f124ca29dd676bd57ece27888eee5cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1NDdiMTNmMTI0Y2EyOWRkNjc2YmQ1N2VjZTI3ODg4ZWVlNWNmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2001-09-10T10:14:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2001-09-10T10:14:13Z"}, "message": "* calls.c (store_one_arg): Expand comment.\n\nFrom-SVN: r45502", "tree": {"sha": "fb0f90e33e85af613e3006139a211658823e0466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0f90e33e85af613e3006139a211658823e0466"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e547b13f124ca29dd676bd57ece27888eee5cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e547b13f124ca29dd676bd57ece27888eee5cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e547b13f124ca29dd676bd57ece27888eee5cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e547b13f124ca29dd676bd57ece27888eee5cf1/comments", "author": null, "committer": null, "parents": [{"sha": "0df299ae0b9ef2d4ba4649db92b033d2baecafcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df299ae0b9ef2d4ba4649db92b033d2baecafcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df299ae0b9ef2d4ba4649db92b033d2baecafcb"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "892a74c3a4761136d189508cbec85c754232a7ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e547b13f124ca29dd676bd57ece27888eee5cf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e547b13f124ca29dd676bd57ece27888eee5cf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e547b13f124ca29dd676bd57ece27888eee5cf1", "patch": "@@ -1,3 +1,7 @@\n+2001-09-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* calls.c (store_one_arg): Expand comment.\n+\n 2001-09-10  Roman Lechtchinsky  <rl@cs.tu-berlin.de>\n \n \t* calls.c (store_one_arg): Make sure that the entire argument is"}, {"sha": "f21160fa61e35eac2f753aedc2ab8ca5cd3a0f86", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e547b13f124ca29dd676bd57ece27888eee5cf1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e547b13f124ca29dd676bd57ece27888eee5cf1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=2e547b13f124ca29dd676bd57ece27888eee5cf1", "patch": "@@ -4565,8 +4565,14 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t    }\n \t}\n \n-      /*  If parm is passed both in stack and in register and offset is \n-\t  greater than reg_parm_stack_space, split the offset.  */\n+      /* Special handling is required if part of the parameter lies in the\n+\t register parameter area.  The argument may be copied into the stack\n+\t slot using memcpy(), but the original contents of the register\n+\t parameter area will be restored after the memcpy() call.\n+\n+\t To ensure that the part that lies in the register parameter area\n+\t is copied correctly, we emit a separate push for that part.  This\n+\t push should be small enough to avoid a call to memcpy().  */\n #ifndef STACK_PARMS_IN_REG_PARM_AREA\n       if (arg->reg && arg->pass_on_stack)\n #else"}]}