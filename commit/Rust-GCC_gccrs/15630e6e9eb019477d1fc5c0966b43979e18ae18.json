{"sha": "15630e6e9eb019477d1fc5c0966b43979e18ae18", "node_id": "C_kwDOANBUbNoAKDE1NjMwZTZlOWViMDE5NDc3ZDFmYzVjMDk2NmI0Mzk3OWUxOGFlMTg", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-01-16T17:33:36Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-01-16T18:13:01Z"}, "message": "testsuite: Enrich tests with variants failing on the branch.\n\nBackporting the fix for pr103789 on the 11 branch revealed a lack of test\ncoverage for the tests provided with that fix.  Indeed, the tests use the KIND\nargument of the respective intrinsics only with keyword arguments.\nThis adds variants with non-keyword arguments.\n\nThe tests enriched this way fail on the branch if the fix is cherry-picked\nstraightforwardly.  The fix will have to be tweaked slightly there.\n\n\tPR fortran/103789\n\tPR fortran/87711\n\tPR fortran/97896\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/index_5.f90: Enrich test with usages of INDEX with\n\ta non-keyword KIND argument.\n\t* gfortran.dg/len_trim.f90: Same for LEN_TRIM.\n\t* gfortran.dg/maskl_1.f90: Same for MASKL.\n\t* gfortran.dg/maskr_1.f90: Same for MASKR.\n\t* gfortran.dg/scan_3.f90: Same for SCAN.\n\t* gfortran.dg/verify_3.f90: Same for VERIFY.", "tree": {"sha": "f98124a9873628363c8308367989a6462e7e2eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f98124a9873628363c8308367989a6462e7e2eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15630e6e9eb019477d1fc5c0966b43979e18ae18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15630e6e9eb019477d1fc5c0966b43979e18ae18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15630e6e9eb019477d1fc5c0966b43979e18ae18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15630e6e9eb019477d1fc5c0966b43979e18ae18/comments", "author": null, "committer": null, "parents": [{"sha": "a78b1ab1df9ca44acc5638e8f9d0ae2e62bd65ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78b1ab1df9ca44acc5638e8f9d0ae2e62bd65ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78b1ab1df9ca44acc5638e8f9d0ae2e62bd65ed"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "4dc2ce4c0a1af8f4115084d435119fa9c15503b1", "filename": "gcc/testsuite/gfortran.dg/index_5.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_5.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -19,5 +19,7 @@ program p\n   d = index ('xyxyz','yx', back=a, kind=8)\n   b = index ('xyxyz','yx', back=a, kind=8)\n   d = index ('xyxyz','yx', back=a, kind=4)\n+  b = index ('xyxyz','yx',      a,      4)\n+  d = index ('xyxyz','yx',      a,      8)\n end\n "}, {"sha": "77e3d30c669649a2e950d6c9f63cb7705f8c1167", "filename": "gcc/testsuite/gfortran.dg/len_trim.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Flen_trim.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Flen_trim.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flen_trim.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -17,11 +17,17 @@ program main\n   kk = len_trim (a)\n   mm = len_trim (a, kind=4)\n   nn = len_trim (a, kind=8)\n+  mm = len_trim (a,      4)\n+  nn = len_trim (a,      8)\n   kk = len_trim ([b])\n   mm = len_trim ([b],kind=4)\n   nn = len_trim ([b],kind=8)\n+  mm = len_trim ([b],     4)\n+  nn = len_trim ([b],     8)\n   kk = len_trim (c)\n   mm = len_trim (c, kind=4)\n   nn = len_trim (c, kind=8)\n+  mm = len_trim (c,      4)\n+  nn = len_trim (c,      8)\n   if (any (l4 /= 2_4) .or. any (l8 /= 2_8)) stop 1\n end program main"}, {"sha": "56350e269da48d0c8796b05d84b8d68186a117df", "filename": "gcc/testsuite/gfortran.dg/maskl_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -4,7 +4,8 @@\n ! Check the absence of ICE when generating calls to MASKL with a KIND argument.\n \n program p\n-   integer :: z(2), y(2)\n+   integer :: z(2), y(2), x(2)\n    y = [1, 13]\n    z = maskl(y, kind=4) + 1\n+   x = maskl(y,      4) + 1\n end program p"}, {"sha": "f8ccdd11ab3d58e9482a1d22feaac352549c3aa4", "filename": "gcc/testsuite/gfortran.dg/maskr_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -4,7 +4,8 @@\n ! Check the absence of ICE when generating calls to MASKR with a KIND argument.\n \n program p\n-   integer :: z(2), y(2)\n+   integer :: z(2), y(2), x(2)\n    y = [1, 13]\n    z = maskr(y, kind=4) + 1\n+   x = maskr(y,      4) + 1\n end program p"}, {"sha": "2a9ed080957c7b507aad73bafc816ca8cf493b63", "filename": "gcc/testsuite/gfortran.dg/scan_3.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -5,7 +5,10 @@\n \n program p\n    character(len=10) :: y(2)\n-   integer :: z(2)\n+   integer :: z(2), x(2), w(2), v(2)\n    y = ['abc', 'def']\n    z = scan(y, 'e', kind=4) + 1\n+   x = scan(y, 'e', back=.false., kind=4) + 1\n+   w = scan(y, 'e',      .false., kind=4) + 1\n+   v = scan(y, 'e',      .false.,      4) + 1\n end program p"}, {"sha": "c8b26b7061462c924b5f5a89c03563337bcccd9a", "filename": "gcc/testsuite/gfortran.dg/verify_3.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15630e6e9eb019477d1fc5c0966b43979e18ae18/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90?ref=15630e6e9eb019477d1fc5c0966b43979e18ae18", "patch": "@@ -5,7 +5,10 @@\n \n program p\n    character(len=10) :: y(2)\n-   integer :: z(2)\n+   integer :: z(2), x(2), w(2), v(2)\n    y = ['abc', 'def']\n    z = verify(y, 'e', kind=4) + 1\n+   x = verify(y, 'e', back=.false., kind=4) + 1\n+   w = verify(y, 'e',      .false., kind=4) + 1\n+   x = verify(y, 'e',      .false.,      4) + 1\n end program p"}]}