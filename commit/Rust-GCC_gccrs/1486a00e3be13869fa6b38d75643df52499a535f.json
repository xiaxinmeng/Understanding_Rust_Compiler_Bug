{"sha": "1486a00e3be13869fa6b38d75643df52499a535f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4NmEwMGUzYmUxMzg2OWZhNmIzOGQ3NTY0M2RmNTI0OTlhNTM1Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:49:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:49:20Z"}, "message": "[multiple changes]\n\n2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Process_Transient_Object): Add new\n\tlocal variable Fin_Call. Remove and explain ??? comment. Use the\n\tActions of logical operators \"and then\" and \"or else\" to insert\n\tthe generated finalization call.\n\n2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_rm.texi: Fix typo.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\nFrom-SVN: r197767", "tree": {"sha": "472187c53e844b31ee1d04946b7c4bea3475ae75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472187c53e844b31ee1d04946b7c4bea3475ae75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1486a00e3be13869fa6b38d75643df52499a535f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1486a00e3be13869fa6b38d75643df52499a535f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1486a00e3be13869fa6b38d75643df52499a535f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1486a00e3be13869fa6b38d75643df52499a535f/comments", "author": null, "committer": null, "parents": [{"sha": "fc142f6327838046dd9d363de53fad60771304e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc142f6327838046dd9d363de53fad60771304e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc142f6327838046dd9d363de53fad60771304e2"}], "stats": {"total": 275, "additions": 155, "deletions": 120}, "files": [{"sha": "6089371edd720d11f3d3ab5c449daad24f78606f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1486a00e3be13869fa6b38d75643df52499a535f", "patch": "@@ -1,3 +1,18 @@\n+2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_Object): Add new\n+\tlocal variable Fin_Call. Remove and explain ??? comment. Use the\n+\tActions of logical operators \"and then\" and \"or else\" to insert\n+\tthe generated finalization call.\n+\n+2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_rm.texi: Fix typo.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\n 2013-04-11  Robert Dewar  <dewar@adacore.com>\n \n \t* atree.h: Add declarations for Flag255-Flag289 Fix declaration"}, {"sha": "be011f8c7b2cd5e8ec07d854d9847c4864b8f6cc", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1486a00e3be13869fa6b38d75643df52499a535f", "patch": "@@ -5166,8 +5166,8 @@ package body Exp_Ch4 is\n                      if Nkind_In (Par, N_Assignment_Statement,\n                                        N_Object_Declaration,\n                                        N_Pragma,\n-                                       N_Simple_Return_Statement,\n-                                       N_Procedure_Call_Statement)\n+                                       N_Procedure_Call_Statement,\n+                                       N_Simple_Return_Statement)\n                      then\n                         return Par;\n \n@@ -5192,6 +5192,7 @@ package body Exp_Ch4 is\n             Obj_Typ   : constant Node_Id    := Etype (Obj_Id);\n             Desig_Typ : Entity_Id;\n             Expr      : Node_Id;\n+            Fin_Call  : Node_Id;\n             Ptr_Id    : Entity_Id;\n             Temp_Id   : Entity_Id;\n \n@@ -5244,9 +5245,12 @@ package body Exp_Ch4 is\n \n             --  Step 3: Hook the transient object to the temporary\n \n-            if Is_Access_Type (Obj_Typ) then\n+            --  The use of unchecked conversion / unrestricted access is needed\n+            --  to avoid an accessibility violation. Note that the finalization\n+            --  code is structured in such a way that the \"hook\" is processed\n+            --  only when it points to an existing object.\n \n-               --  Why is this an unchecked conversion ???\n+            if Is_Access_Type (Obj_Typ) then\n                Expr :=\n                  Unchecked_Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n             else\n@@ -5282,7 +5286,7 @@ package body Exp_Ch4 is\n             --  the return statement as this would make it unreachable.\n \n             if Nkind (Context) /= N_Simple_Return_Statement then\n-               Insert_Action_After (Context,\n+               Fin_Call :=\n                  Make_Implicit_If_Statement (Obj_Decl,\n                    Condition =>\n                      Make_Op_Ne (Loc,\n@@ -5298,7 +5302,17 @@ package body Exp_Ch4 is\n \n                      Make_Assignment_Statement (Loc,\n                        Name       => New_Reference_To (Temp_Id, Loc),\n-                       Expression => Make_Null (Loc)))));\n+                       Expression => Make_Null (Loc))));\n+\n+               --  Use the Actions list of logical operators when inserting the\n+               --  finalization call. This ensures that all transient objects\n+               --  are finalized after the operators are evaluated.\n+\n+               if Nkind_In (Context, N_And_Then, N_Or_Else) then\n+                  Insert_Action (Context, Fin_Call);\n+               else\n+                  Insert_Action_After (Context, Fin_Call);\n+               end if;\n             end if;\n          end Process_Transient_Object;\n "}, {"sha": "e1356e5de23679cfc1b0fbac86ca8586dfd2775c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1486a00e3be13869fa6b38d75643df52499a535f", "patch": "@@ -4032,7 +4032,7 @@ earlier versions of the package body.\n Syntax:\n \n @smallexample @c ada\n-pragma No_Inline (NAME [, NAME]);\n+pragma No_Inline (NAME {, NAME});\n @end smallexample\n \n @noindent"}, {"sha": "338ff78185d5ae98a44e5dd89b7dea87f2f59f6b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 119, "deletions": 113, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1486a00e3be13869fa6b38d75643df52499a535f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1486a00e3be13869fa6b38d75643df52499a535f", "patch": "@@ -2060,11 +2060,18 @@ package body Sem_Res is\n          Analyze_Dimension (N);\n          return;\n \n-      --  Return if type = Any_Type (previous error encountered). except that\n-      --  a Raise_Expression node is OK: it is legitimately labeled this way\n-      --  since it provides no information on the context.\n+      --  A Raise_Expression takes its type from context. The expression\n+      --  itself does not specify any possible interpretation.\n \n-      elsif Etype (N) = Any_Type and then Nkind (N) /= N_Raise_Expression then\n+      --  Seems confusing to set the Etype to Typ here, only to be overwritten\n+      --  and set to Ctx_Type in the big case statement???\n+\n+      elsif Nkind (N) = N_Raise_Expression then\n+         Set_Etype (N, Typ);\n+\n+      --  Return if type = Any_Type (previous error encountered).\n+\n+      elsif Etype (N) = Any_Type then\n          Debug_A_Exit (\"resolving  \", N, \"  (done, Etype = Any_Type)\");\n          return;\n       end if;\n@@ -2301,9 +2308,8 @@ package body Sem_Res is\n                           and then Scope (It.Nam) = Standard_Standard\n                         then\n                            Error_Msg_N\n-                             (\"\\\\possible interpretation as \" &\n-                                \"universal_fixed operation \" &\n-                                  \"(RM 4.5.5 (19))\", N);\n+                             (\"\\\\possible interpretation as universal_fixed \"\n+                              & \"operation (RM 4.5.5 (19))\", N);\n                         else\n                            Error_Msg_N\n                              (\"\\\\possible interpretation (predefined)#!\", N);\n@@ -2591,8 +2597,9 @@ package body Sem_Res is\n                      end if;\n \n                      Error_Msg_Node_2 := Typ;\n-                     Error_Msg_NE (\"no visible interpretation of&\" &\n-                       \" matches expected type&\", N, Subp_Name);\n+                     Error_Msg_NE\n+                       (\"no visible interpretation of& \"\n+                        & \"matches expected type&\", N, Subp_Name);\n                   end;\n \n                   if All_Errors_Mode then\n@@ -3520,8 +3527,8 @@ package body Sem_Res is\n                         or else Is_By_Reference_Type (Etype (Expression (A)))\n                      then\n                         Error_Msg_N\n-                          (\"view conversion between unrelated by reference \" &\n-                           \"array types not allowed (\\'A'I-00246)\", A);\n+                          (\"view conversion between unrelated by reference \"\n+                           & \"array types not allowed (\\'A'I-00246)\", A);\n \n                      --  In Ada 2005 mode, check view conversion component\n                      --  type cannot be private, tagged, or volatile. Note\n@@ -3605,8 +3612,8 @@ package body Sem_Res is\n                      or else Is_Limited_Type (Etype (Expression (A))))\n                then\n                   Error_Msg_N\n-                    (\"conversion between unrelated limited array types \" &\n-                     \"not allowed (\\A\\I-00246)\", A);\n+                    (\"conversion between unrelated limited array types \"\n+                     & \"not allowed (\\A\\I-00246)\", A);\n \n                   if Is_Limited_Type (Etype (F)) then\n                      Explain_Limited_Type (Etype (F), A);\n@@ -4087,8 +4094,8 @@ package body Sem_Res is\n                        and then No (Non_Limited_View (Desig))\n                      then\n                         Error_Msg_NE\n-                          (\"premature use of incomplete type& \" &\n-                           \"in dispatching call\", A, Desig);\n+                          (\"premature use of incomplete type& \"\n+                           & \"in dispatching call\", A, Desig);\n                      end if;\n                   end;\n                end if;\n@@ -4323,8 +4330,8 @@ package body Sem_Res is\n                               (Etype (Pool), Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_N\n-                    (\"limited function calls not yet supported in simple \" &\n-                     \"storage pool allocators\", Expression (E));\n+                    (\"limited function calls not yet supported in simple \"\n+                     & \"storage pool allocators\", Expression (E));\n                end if;\n             end;\n          end if;\n@@ -4471,10 +4478,11 @@ package body Sem_Res is\n                  Deepest_Type_Access_Level (Typ)\n             then\n                if In_Instance_Body then\n-                  Error_Msg_N (\"??type in allocator has deeper level than\" &\n-                               \" designated class-wide type\", E);\n-                  Error_Msg_N (\"\\??Program_Error will be raised at run time\",\n-                               E);\n+                  Error_Msg_N\n+                    (\"??type in allocator has deeper level than \"\n+                     & \" designated class-wide type\", E);\n+                  Error_Msg_N\n+                    (\"\\??Program_Error will be raised at run time\", E);\n                   Rewrite (N,\n                     Make_Raise_Program_Error (Sloc (N),\n                       Reason => PE_Accessibility_Check_Failed));\n@@ -4485,8 +4493,8 @@ package body Sem_Res is\n                --  type. A run-time check will be performed in the instance.\n \n                elsif not Is_Generic_Type (Exp_Typ) then\n-                  Error_Msg_N (\"type in allocator has deeper level than\" &\n-                               \" designated class-wide type\", E);\n+                  Error_Msg_N (\"type in allocator has deeper level than \"\n+                               & \"designated class-wide type\", E);\n                end if;\n             end if;\n          end;\n@@ -5048,8 +5056,8 @@ package body Sem_Res is\n                        and then not Machine_Overflows_On_Target\n                      then\n                         Error_Msg_N\n-                          (\"float division by zero, \" &\n-                           \"may generate '+'/'- infinity??\", Right_Opnd (N));\n+                          (\"float division by zero, may generate \"\n+                           & \"'+'/'- infinity??\", Right_Opnd (N));\n \n                         --  For all other cases, we get a Constraint_Error\n \n@@ -9776,8 +9784,8 @@ package body Sem_Res is\n                      Error_Msg_Name_1 := Chars (Etype (Target));\n                      Error_Msg_Name_2 := Chars (Opnd);\n                      Error_Msg_N\n-                       (\"wrong interface conversion (% is not a progenitor \" &\n-                        \"of %)\", N);\n+                       (\"wrong interface conversion (% is not a progenitor \"\n+                        & \"of %)\", N);\n                   end if;\n \n                else\n@@ -10499,14 +10507,10 @@ package body Sem_Res is\n          Msg   : String) return Boolean;\n       --  Little routine to post Msg if Valid is False, returns Valid value\n \n-      --  The following are badly named, this kind of overloading is actively\n-      --  confusing in reading code, please rename to something like\n-      --  Error_Msg_N_If_Reporting ???\n-\n-      procedure Error_Msg_N (Msg : String; N : Node_Or_Entity_Id);\n+      procedure Conversion_Error_N (Msg : String; N : Node_Or_Entity_Id);\n       --  If Report_Errs, then calls Errout.Error_Msg_N with its arguments\n \n-      procedure Error_Msg_NE\n+      procedure Conversion_Error_NE\n         (Msg : String;\n          N   : Node_Or_Entity_Id;\n          E   : Node_Or_Entity_Id);\n@@ -10543,37 +10547,37 @@ package body Sem_Res is\n \n            and then not In_Instance\n          then\n-            Error_Msg_N (Msg, Operand);\n+            Conversion_Error_N (Msg, Operand);\n          end if;\n \n          return Valid;\n       end Conversion_Check;\n \n-      -----------------\n-      -- Error_Msg_N --\n-      -----------------\n+      ------------------------\n+      -- Conversion_Error_N --\n+      ------------------------\n \n-      procedure Error_Msg_N (Msg : String; N : Node_Or_Entity_Id) is\n+      procedure Conversion_Error_N (Msg : String; N : Node_Or_Entity_Id) is\n       begin\n          if Report_Errs then\n-            Errout.Error_Msg_N (Msg, N);\n+            Error_Msg_N (Msg, N);\n          end if;\n-      end Error_Msg_N;\n+      end Conversion_Error_N;\n \n-      ------------------\n-      -- Error_Msg_NE --\n-      ------------------\n+      -------------------------\n+      -- Conversion_Error_NE --\n+      -------------------------\n \n-      procedure Error_Msg_NE\n+      procedure Conversion_Error_NE\n         (Msg : String;\n          N   : Node_Or_Entity_Id;\n          E   : Node_Or_Entity_Id)\n       is\n       begin\n          if Report_Errs then\n-            Errout.Error_Msg_NE (Msg, N, E);\n+            Error_Msg_NE (Msg, N, E);\n          end if;\n-      end Error_Msg_NE;\n+      end Conversion_Error_NE;\n \n       ----------------------------\n       -- Valid_Array_Conversion --\n@@ -10601,7 +10605,7 @@ package body Sem_Res is\n          if\n            Number_Dimensions (Target_Type) /= Number_Dimensions (Opnd_Type)\n          then\n-            Error_Msg_N\n+            Conversion_Error_N\n               (\"incompatible number of dimensions for conversion\", Operand);\n             return False;\n \n@@ -10623,7 +10627,7 @@ package body Sem_Res is\n                  and then (Root_Type (Target_Index_Type)\n                            /= Root_Type (Opnd_Index_Type))\n                then\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"incompatible index types for array conversion\",\n                      Operand);\n                   return False;\n@@ -10657,10 +10661,10 @@ package body Sem_Res is\n                     Deepest_Type_Access_Level (Opnd_Type)\n                then\n                   if In_Instance_Body then\n-                     Error_Msg_N\n-                       (\"??source array type has \" &\n-                        \"deeper accessibility level than target\", Operand);\n-                     Error_Msg_N\n+                     Conversion_Error_N\n+                       (\"??source array type has deeper accesibility \"\n+                        & \"level than target\", Operand);\n+                     Conversion_Error_N\n                        (\"\\??Program_Error will be raised at run time\",\n                         Operand);\n                      Rewrite (N,\n@@ -10672,9 +10676,9 @@ package body Sem_Res is\n                   --  Conversion not allowed because of accessibility levels\n \n                   else\n-                     Error_Msg_N\n-                       (\"source array type has \" &\n-                       \"deeper accessibility level than target\", Operand);\n+                     Conversion_Error_N\n+                       (\"source array type has deeper accessibility \"\n+                        & \"level than target\", Operand);\n                      return False;\n                   end if;\n \n@@ -10685,7 +10689,7 @@ package body Sem_Res is\n             --  All other cases where component base types do not match\n \n             else\n-               Error_Msg_N\n+               Conversion_Error_N\n                  (\"incompatible component types for array conversion\",\n                   Operand);\n                return False;\n@@ -10699,7 +10703,7 @@ package body Sem_Res is\n             if not Subtypes_Statically_Match\n                      (Target_Comp_Type, Opnd_Comp_Type)\n             then\n-               Error_Msg_N\n+               Conversion_Error_N\n                  (\"component subtypes must statically match\", Operand);\n                return False;\n             end if;\n@@ -10762,7 +10766,7 @@ package body Sem_Res is\n             return True;\n \n          else\n-            Error_Msg_NE\n+            Conversion_Error_NE\n               (\"invalid tagged conversion, not compatible with}\",\n                N, First_Subtype (Opnd_Type));\n             return False;\n@@ -10829,7 +10833,7 @@ package body Sem_Res is\n             It1 := It;\n \n             if No (It.Typ) then\n-               Error_Msg_N (\"illegal operand in conversion\", Operand);\n+               Conversion_Error_N (\"illegal operand in conversion\", Operand);\n                return False;\n             end if;\n \n@@ -10841,7 +10845,8 @@ package body Sem_Res is\n                It1 :=  Disambiguate (Operand, I1, I, Any_Type);\n \n                if It1 = No_Interp then\n-                  Error_Msg_N (\"ambiguous operand in conversion\", Operand);\n+                  Conversion_Error_N\n+                    (\"ambiguous operand in conversion\", Operand);\n \n                   --  If the interpretation involves a standard operator, use\n                   --  the location of the type, which may be user-defined.\n@@ -10852,7 +10857,7 @@ package body Sem_Res is\n                      Error_Msg_Sloc := Sloc (It.Nam);\n                   end if;\n \n-                  Error_Msg_N -- CODEFIX\n+                  Conversion_Error_N -- CODEFIX\n                     (\"\\\\possible interpretation#!\", Operand);\n \n                   if Sloc (N1) = Standard_Location then\n@@ -10861,7 +10866,7 @@ package body Sem_Res is\n                      Error_Msg_Sloc := Sloc (N1);\n                   end if;\n \n-                  Error_Msg_N -- CODEFIX\n+                  Conversion_Error_N -- CODEFIX\n                     (\"\\\\possible interpretation#!\", Operand);\n \n                   return False;\n@@ -10912,7 +10917,8 @@ package body Sem_Res is\n            or else Opnd_Type = Any_Composite\n            or else Opnd_Type = Any_String\n          then\n-            Error_Msg_N (\"illegal operand for array conversion\", Operand);\n+            Conversion_Error_N\n+              (\"illegal operand for array conversion\", Operand);\n             return False;\n          else\n             return Valid_Array_Conversion;\n@@ -10944,14 +10950,14 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"??cannot convert local pointer to non-local access type\",\n                      Operand);\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"\\??Program_Error will be raised at run time\", Operand);\n \n                else\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"cannot convert local pointer to non-local access type\",\n                      Operand);\n                   return False;\n@@ -10977,16 +10983,16 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n-                     Error_Msg_N\n-                       (\"??cannot convert access discriminant to non-local\" &\n-                        \" access type\", Operand);\n-                     Error_Msg_N\n+                     Conversion_Error_N\n+                       (\"??cannot convert access discriminant to non-local \"\n+                        & \"access type\", Operand);\n+                     Conversion_Error_N\n                        (\"\\??Program_Error will be raised at run time\",\n                         Operand);\n                   else\n-                     Error_Msg_N\n-                       (\"cannot convert access discriminant to non-local\" &\n-                        \" access type\", Operand);\n+                     Conversion_Error_N\n+                       (\"cannot convert access discriminant to non-local \"\n+                        & \"access type\", Operand);\n                      return False;\n                   end if;\n                end if;\n@@ -11003,7 +11009,7 @@ package body Sem_Res is\n                    Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"discriminant has deeper accessibility level than target\",\n                      Operand);\n                   return False;\n@@ -11028,7 +11034,7 @@ package body Sem_Res is\n          if Is_Access_Constant (Opnd_Type)\n            and then not Is_Access_Constant (Target_Type)\n          then\n-            Error_Msg_N\n+            Conversion_Error_N\n               (\"access-to-constant operand type not allowed\", Operand);\n             return False;\n          end if;\n@@ -11068,9 +11074,9 @@ package body Sem_Res is\n                   if Nkind (Associated_Node_For_Itype (Opnd_Type)) =\n                        N_Object_Declaration\n                   then\n-                     Error_Msg_N\n-                       (\"implicit conversion of stand-alone anonymous \" &\n-                        \"access object not allowed\", Operand);\n+                     Conversion_Error_N\n+                       (\"implicit conversion of stand-alone anonymous \"\n+                        & \"access object not allowed\", Operand);\n                      return False;\n \n                   --  Implicit conversions aren't allowed for anonymous access\n@@ -11082,9 +11088,9 @@ package body Sem_Res is\n                                        N_Function_Specification,\n                                        N_Procedure_Specification)\n                   then\n-                     Error_Msg_N\n-                       (\"implicit conversion of anonymous access formal \" &\n-                        \"not allowed\", Operand);\n+                     Conversion_Error_N\n+                       (\"implicit conversion of anonymous access formal \"\n+                        & \"not allowed\", Operand);\n                      return False;\n \n                   --  This is a case where there's an enclosing object whose\n@@ -11095,9 +11101,9 @@ package body Sem_Res is\n                   elsif Object_Access_Level (Operand)\n                           = Scope_Depth (Standard_Standard)\n                   then\n-                     Error_Msg_N\n-                       (\"implicit conversion of anonymous access value \" &\n-                        \"not allowed\", Operand);\n+                     Conversion_Error_N\n+                       (\"implicit conversion of anonymous access value \"\n+                        & \"not allowed\", Operand);\n                      return False;\n \n                   --  In other cases, the level of the operand's type must be\n@@ -11107,9 +11113,9 @@ package body Sem_Res is\n                   elsif Type_Access_Level (Opnd_Type) >\n                         Deepest_Type_Access_Level (Target_Type)\n                   then\n-                     Error_Msg_N\n-                       (\"implicit conversion of anonymous access value \" &\n-                        \"violates accessibility\", Operand);\n+                     Conversion_Error_N\n+                       (\"implicit conversion of anonymous access value \"\n+                        & \"violates accessibility\", Operand);\n                      return False;\n                   end if;\n                end if;\n@@ -11122,17 +11128,17 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"??cannot convert local pointer to non-local access type\",\n                      Operand);\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"\\??Program_Error will be raised at run time\", Operand);\n \n                else\n                   --  Avoid generation of spurious error message\n \n                   if not Error_Posted (N) then\n-                     Error_Msg_N\n+                     Conversion_Error_N\n                       (\"cannot convert local pointer to non-local access type\",\n                        Operand);\n                   end if;\n@@ -11160,17 +11166,17 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n-                     Error_Msg_N\n-                       (\"??cannot convert access discriminant to non-local\"\n-                        & \" access type\", Operand);\n-                     Error_Msg_N\n+                     Conversion_Error_N\n+                       (\"??cannot convert access discriminant to non-local \"\n+                        & \"access type\", Operand);\n+                     Conversion_Error_N\n                        (\"\\??Program_Error will be raised at run time\",\n                         Operand);\n \n                   else\n-                     Error_Msg_N\n-                       (\"cannot convert access discriminant to non-local\" &\n-                        \" access type\", Operand);\n+                     Conversion_Error_N\n+                       (\"cannot convert access discriminant to non-local \"\n+                        & \"access type\", Operand);\n                      return False;\n                   end if;\n                end if;\n@@ -11186,7 +11192,7 @@ package body Sem_Res is\n                    Ekind_In (Entity (Operand), E_In_Parameter, E_Constant)\n                  and then Present (Discriminal_Link (Entity (Operand)))\n                then\n-                  Error_Msg_N\n+                  Conversion_Error_N\n                     (\"discriminant has deeper accessibility level than target\",\n                      Operand);\n                   return False;\n@@ -11237,7 +11243,7 @@ package body Sem_Res is\n \n             else\n                if not Same_Base then\n-                  Error_Msg_NE\n+                  Conversion_Error_NE\n                     (\"target designated type not compatible with }\",\n                      N, Base_Type (Opnd));\n                   return False;\n@@ -11262,10 +11268,10 @@ package body Sem_Res is\n                     and then Known_Static_RM_Size (Opnd)\n                     and then RM_Size (Target) /= RM_Size (Opnd)\n                   then\n-                     Error_Msg_NE\n+                     Conversion_Error_NE\n                        (\"target designated subtype not compatible with }\",\n                         N, Opnd);\n-                     Error_Msg_NE\n+                     Conversion_Error_NE\n                        (\"\\because sizes of the two designated subtypes differ\",\n                         N, Opnd);\n                      return False;\n@@ -11303,12 +11309,12 @@ package body Sem_Res is\n                or else not Is_Entity_Name (Name (Parent (N)))\n                or else not Is_Return_Object (Entity (Name (Parent (N)))))\n          then\n-            Error_Msg_N\n+            Conversion_Error_N\n               (\"illegal attempt to store anonymous access to subprogram\",\n                Operand);\n-            Error_Msg_N\n-              (\"\\value has deeper accessibility than any master \" &\n-               \"(RM 3.10.2 (13))\",\n+            Conversion_Error_N\n+              (\"\\value has deeper accessibility than any master \"\n+               & \"(RM 3.10.2 (13))\",\n                Operand);\n \n             Error_Msg_NE\n@@ -11327,7 +11333,7 @@ package body Sem_Res is\n          if Type_Access_Level (Opnd_Type) >\n             Deepest_Type_Access_Level (Target_Type)\n          then\n-            Error_Msg_N\n+            Conversion_Error_N\n               (\"operand type has deeper accessibility level than target\",\n                Operand);\n \n@@ -11349,9 +11355,9 @@ package body Sem_Res is\n                end loop;\n \n                if T_Gen /= O_Gen then\n-                  Error_Msg_N\n-                    (\"target type must be declared in same generic body\"\n-                     & \" as operand type\", N);\n+                  Conversion_Error_N\n+                    (\"target type must be declared in same generic body \"\n+                     & \"as operand type\", N);\n                end if;\n             end;\n          end if;\n@@ -11408,14 +11414,14 @@ package body Sem_Res is\n       elsif Ekind (Target_Type) = E_Access_Type\n          and then Is_Access_Type (Opnd_Type)\n       then\n-         Error_Msg_N (\"target type must be general access type!\", N);\n-         Error_Msg_NE -- CODEFIX\n+         Conversion_Error_N (\"target type must be general access type!\", N);\n+         Conversion_Error_NE -- CODEFIX\n             (\"add ALL to }!\", N, Target_Type);\n          return False;\n \n       else\n-         Error_Msg_NE (\"invalid conversion, not compatible with }\",\n-           N, Opnd_Type);\n+         Conversion_Error_NE\n+           (\"invalid conversion, not compatible with }\", N, Opnd_Type);\n          return False;\n       end if;\n    end Valid_Conversion;"}]}