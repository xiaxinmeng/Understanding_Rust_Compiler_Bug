{"sha": "49eef89f35bccc18ff2da56be533eb50ea15a988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllZWY4OWYzNWJjY2MxOGZmMmRhNTZiZTUzM2ViNTBlYTE1YTk4OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:46:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:46:18Z"}, "message": "[multiple changes]\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\n2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Expand_N_Aggregate): Use special circuitry to\n\tfold strings with a single others choice only if there are no\n\texpressions in the aggregate.\n\n2013-04-25  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Update doc on Ada 2012 default mode.\n\nFrom-SVN: r198293", "tree": {"sha": "f5cfef2e64abc46844de433294eac569bd1690f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5cfef2e64abc46844de433294eac569bd1690f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49eef89f35bccc18ff2da56be533eb50ea15a988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49eef89f35bccc18ff2da56be533eb50ea15a988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49eef89f35bccc18ff2da56be533eb50ea15a988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49eef89f35bccc18ff2da56be533eb50ea15a988/comments", "author": null, "committer": null, "parents": [{"sha": "8b404dac662e36a1dcce3f48b06a04a13ab48fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b404dac662e36a1dcce3f48b06a04a13ab48fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b404dac662e36a1dcce3f48b06a04a13ab48fae"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "3ce146979fe99162215943b979a06d6b0676f12e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=49eef89f35bccc18ff2da56be533eb50ea15a988", "patch": "@@ -1,3 +1,17 @@\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\n+2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_N_Aggregate): Use special circuitry to\n+\tfold strings with a single others choice only if there are no\n+\texpressions in the aggregate.\n+\n+2013-04-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Update doc on Ada 2012 default mode.\n+\n 2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb: Add with and use clause for Stringt."}, {"sha": "e0a91324a8069e5e7637c65c9a8943d4e02668fe", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=49eef89f35bccc18ff2da56be533eb50ea15a988", "patch": "@@ -5226,9 +5226,10 @@ package body Exp_Aggr is\n       else\n          --  A special case, if we have a string subtype with bounds 1 .. N,\n          --  where N is known at compile time, and the aggregate is of the\n-         --  form (others => 'x'), and N is less than 80 (an arbitrary limit\n-         --  for now), then replace the aggregate by the equivalent string\n-         --  literal (but do not mark it as static since it is not!)\n+         --  form (others => 'x'), with a single choice and no expressions,\n+         --  and N is less than 80 (an arbitrary limit for now), then replace\n+         --  the aggregate by the equivalent string literal (but do not mark\n+         --  it as static since it is not!)\n \n          --  Note: this entire circuit is redundant with respect to code in\n          --  Expand_Array_Aggregate that collapses others choices to positional\n@@ -5262,6 +5263,7 @@ package body Exp_Aggr is\n             begin\n                if Nkind (First (Choices (CA))) = N_Others_Choice\n                  and then Nkind (Expression (CA)) = N_Character_Literal\n+                 and then No (Expressions (N))\n                then\n                   declare\n                      T  : constant Entity_Id := Etype (N);"}, {"sha": "af5209c5f8b35dbe89dc017c2d58cf495b4714af", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=49eef89f35bccc18ff2da56be533eb50ea15a988", "patch": "@@ -89,8 +89,6 @@ Texts.  A copy of the license is included in the section entitled\n \n @set FSFEDITION\n @set EDITION GNAT\n-@set DEFAULTLANGUAGEVERSION Ada 2005\n-@set NONDEFAULTLANGUAGEVERSION Ada 95\n \n @ifset unw\n @set PLATFORM\n@@ -237,24 +235,20 @@ toolset for the full Ada programming language.\n It documents the features of the compiler and tools, and explains\n how to use them to build Ada applications.\n \n-@value{EDITION} implements Ada 95 and Ada 2005, and it may also be invoked in\n-Ada 83 compatibility mode.\n-By default, @value{EDITION} assumes @value{DEFAULTLANGUAGEVERSION},\n-but you can override with a compiler switch\n-(@pxref{Compiling Different Versions of Ada})\n+@value{EDITION} implements Ada 95, Ada 2005 and Ada 2012, and it may also be\n+invoked in Ada 83 compatibility mode.\n+By default, @value{EDITION} assumes Ada 2012, but you can override with a\n+compiler switch (@pxref{Compiling Different Versions of Ada})\n to explicitly specify the language version.\n Throughout this manual, references to ``Ada'' without a year suffix\n-apply to both the Ada 95 and Ada 2005 versions of the language.\n-\n+apply to both all Ada 95/2005/2012 versions of the language.\n \n @ifclear FSFEDITION\n For ease of exposition, ``@value{EDITION}'' will be referred to simply as\n ``GNAT'' in the remainder of this document.\n @end ifclear\n \n \n-\n-\n @menu\n * What This Guide Contains::\n * What You Should Know before Reading This Guide::\n@@ -6762,8 +6756,8 @@ and specifications where a separate body is present).\n @noindent\n The switches described in this section allow you to explicitly specify\n the version of the Ada language that your programs are written in.\n-By default @value{EDITION} assumes @value{DEFAULTLANGUAGEVERSION},\n-but you can also specify @value{NONDEFAULTLANGUAGEVERSION} or\n+The default mode is Ada 2012,\n+but you can also specify Ada 95, Ada 2005 mode, or\n indicate Ada 83 compatibility mode.\n \n @table @option\n@@ -6831,33 +6825,21 @@ may generally be compiled using this switch (see the description of the\n @option{-gnat83} and @option{-gnat95} switches for further\n information).\n \n-@ifset PROEDITION\n-Note that even though Ada 2005 is the current official version of the\n-language, GNAT still compiles in Ada 95 mode by default, so if you are\n-using Ada 2005 features in your program, you must use this switch (or\n-the equivalent Ada_05 or Ada_2005 configuration pragmas).\n-@end ifset\n-\n @item -gnat12 or -gnat2012 (Ada 2012 mode)\n @cindex @option{-gnat12} (@command{gcc})\n @cindex @option{-gnat2012} (@command{gcc})\n @cindex Ada 2012 mode\n \n @noindent\n This switch directs the compiler to implement the Ada 2012 version of the\n-language.\n+language (also the default).\n Since Ada 2012 is almost completely upwards\n compatible with Ada 2005 (and thus also with Ada 83, and Ada 95),\n Ada 83 and Ada 95 programs\n may generally be compiled using this switch (see the description of the\n @option{-gnat83}, @option{-gnat95}, and @option{-gnat05/2005} switches\n for further information).\n \n-For information about the approved ``Ada Issues'' that have been incorporated\n-into Ada 2012, see @url{http://www.ada-auth.org/ais.html}.\n-Included with GNAT releases is a file @file{features-ada12} that describes\n-the set of implemented Ada 2012 features.\n-\n @item -gnatX (Enable GNAT Extensions)\n @cindex @option{-gnatX} (@command{gcc})\n @cindex Ada language extensions"}, {"sha": "ab68c39f9912d2bb5f392e1147c46aea010da9c1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eef89f35bccc18ff2da56be533eb50ea15a988/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=49eef89f35bccc18ff2da56be533eb50ea15a988", "patch": "@@ -8891,10 +8891,10 @@ package body Sem_Util is\n    begin\n       Note_Possible_Modification (AV, Sure => True);\n \n-      --  We must reject parenthesized variable names. The check for\n-      --  Comes_From_Source is present because there are currently\n-      --  cases where the compiler violates this rule (e.g. passing\n-      --  a task object to its controlled Initialize routine).\n+      --  We must reject parenthesized variable names. Comes_From_Source is\n+      --  checked because there are currently cases where the compiler violates\n+      --  this rule (e.g. passing a task object to its controlled Initialize\n+      --  routine). This should be properly documented in sinfo???\n \n       if Paren_Count (AV) > 0 and then Comes_From_Source (AV) then\n          return False;\n@@ -8907,15 +8907,13 @@ package body Sem_Util is\n       --  Unchecked conversions are allowed only if they come from the\n       --  generated code, which sometimes uses unchecked conversions for out\n       --  parameters in cases where code generation is unaffected. We tell\n-      --  source unchecked conversions by seeing if they are rewrites of an\n-      --  original Unchecked_Conversion function call, or of an explicit\n+      --  source unchecked conversions by seeing if they are rewrites of\n+      --  an original Unchecked_Conversion function call, or of an explicit\n       --  conversion of a function call or an aggregate (as may happen in the\n       --  expansion of a packed array aggregate).\n \n       elsif Nkind (AV) = N_Unchecked_Type_Conversion then\n-         if Nkind_In (Original_Node (AV),\n-                        N_Function_Call, N_Aggregate)\n-         then\n+         if Nkind_In (Original_Node (AV), N_Function_Call, N_Aggregate) then\n             return False;\n \n          elsif Comes_From_Source (AV)"}]}