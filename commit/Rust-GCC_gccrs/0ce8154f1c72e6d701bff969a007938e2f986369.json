{"sha": "0ce8154f1c72e6d701bff969a007938e2f986369", "node_id": "C_kwDOANBUbNoAKDBjZTgxNTRmMWM3MmU2ZDcwMWJmZjk2OWEwMDc5MzhlMmY5ODYzNjk", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-30T17:57:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-31T01:41:39Z"}, "message": "c++: parse trivial DMI immediately [PR96645]\n\nThe recent change to reject __is_constructible for nested classes with DMI\nis, unsurprisingly, breaking some code.  Let's allow simple cases by\nimmediately parsing DMI that do no name lookup; then being in complete class\nscope makes no difference.\n\n\tPR c++/96645\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_early_parsing_nsdmi): New.\n\t(cp_parser_member_declaration): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi10.C: Now OK.\n\t* g++.dg/ext/is_constructible3.C: Likewise.\n\t* g++.dg/ext/is_constructible7.C: Likewise.", "tree": {"sha": "4e17b6464921f41bb0056a4b655ec4f029d3414d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e17b6464921f41bb0056a4b655ec4f029d3414d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ce8154f1c72e6d701bff969a007938e2f986369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce8154f1c72e6d701bff969a007938e2f986369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce8154f1c72e6d701bff969a007938e2f986369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce8154f1c72e6d701bff969a007938e2f986369/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150ab50f7449cf5b496bbe6e5c60cb1adb2e2d6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150ab50f7449cf5b496bbe6e5c60cb1adb2e2d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150ab50f7449cf5b496bbe6e5c60cb1adb2e2d6c"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "63c8af1c72292fbd702c56f943de0f8db2bb92b0", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=0ce8154f1c72e6d701bff969a007938e2f986369", "patch": "@@ -2701,6 +2701,8 @@ static tree cp_parser_late_parse_one_default_arg\n   (cp_parser *, tree, tree, tree);\n static void cp_parser_late_parsing_nsdmi\n   (cp_parser *, tree);\n+static bool cp_parser_early_parsing_nsdmi\n+  (cp_parser *, tree);\n static void cp_parser_late_parsing_default_args\n   (cp_parser *, tree);\n static tree cp_parser_sizeof_operand\n@@ -27478,7 +27480,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      if (DECL_DECLARES_FUNCTION_P (decl))\n \t\tcp_parser_save_default_args (parser, STRIP_TEMPLATE (decl));\n \t      else if (TREE_CODE (decl) == FIELD_DECL\n-\t\t       && DECL_INITIAL (decl))\n+\t\t       && DECL_INITIAL (decl)\n+\t\t       && !cp_parser_early_parsing_nsdmi (parser, decl))\n \t\t/* Add DECL to the queue of NSDMI to be parsed later.  */\n \t\tvec_safe_push (unparsed_nsdmis, decl);\n \t    }\n@@ -32292,6 +32295,29 @@ cp_parser_late_parsing_nsdmi (cp_parser *parser, tree field)\n   DECL_INITIAL (field) = def;\n }\n \n+/* If the DEFERRED_PARSE for FIELD is safe to parse immediately, do so.\n+   Returns true if deferred parsing is no longer needed.  */\n+\n+static bool\n+cp_parser_early_parsing_nsdmi (cp_parser *parser, tree field)\n+{\n+  tree init = DECL_INITIAL (field);\n+  if (TREE_CODE (init) != DEFERRED_PARSE)\n+    return true;\n+\n+  cp_token_cache *tokens = DEFPARSE_TOKENS (init);\n+  for (cp_token *p = tokens->first; p != tokens->last; ++p)\n+    if (p->type == CPP_NAME\n+\t|| p->keyword == RID_THIS\n+\t|| p->keyword == RID_OPERATOR)\n+      /* There's a name to look up or 'this', give up.  */\n+      return false;\n+\n+  /* It's trivial, parse now.  */\n+  cp_parser_late_parsing_nsdmi (parser, field);\n+  return true;\n+}\n+\n /* FN is a FUNCTION_DECL which may contains a parameter with an\n    unparsed DEFERRED_PARSE.  Parse the default args now.  This function\n    assumes that the current scope is the scope in which the default"}, {"sha": "a965f7bc33347b2f240a0efeed9bd6018e51fb85", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C?ref=0ce8154f1c72e6d701bff969a007938e2f986369", "patch": "@@ -6,13 +6,13 @@ struct A1 {\n     int y1 = 1;\n   };\n \n-  A1(const B1& opts = B1()) {}  // { dg-error \"default member initializer\" }\n+  A1(const B1& opts = B1()) {}\n };\n \n struct A2 {\n   struct B2 {\n     int x2, y2 = 1;\n   };\n \n-  A2(const B2& opts = B2()) {}  // { dg-error \"default member initializer\" }\n+  A2(const B2& opts = B2()) {}\n };"}, {"sha": "c7c58746cd0a5b2d790cf13cbf0ae40b08b55908", "filename": "gcc/testsuite/g++.dg/ext/is_constructible3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C?ref=0ce8154f1c72e6d701bff969a007938e2f986369", "patch": "@@ -8,7 +8,7 @@ struct A {\n     B() = default;\n   };\n \n-  static constexpr bool v = __is_constructible (B); // { dg-error \"member initializer\" }\n+  static constexpr bool v = __is_constructible (B);\n \n };\n "}, {"sha": "013a1df03c6ad7e81685c5b338b3d008ba170e9e", "filename": "gcc/testsuite/g++.dg/ext/is_constructible7.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce8154f1c72e6d701bff969a007938e2f986369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C?ref=0ce8154f1c72e6d701bff969a007938e2f986369", "patch": "@@ -12,7 +12,7 @@ using true_type = bool_constant<true>;\n \n template<typename T>\n struct is_default_constructible\n-  : bool_constant<__is_constructible(T)> // { dg-error \"default member init\" }\n+  : bool_constant<__is_constructible(T)>\n { };\n \n void testVarStruct()\n@@ -22,7 +22,6 @@ void testVarStruct()\n       int number = 5; // compiles, if remove initialization\n     };\n \n-    // { dg-prune-output \"could not convert\" }\n     is_default_constructible<A>::type t = true_type{};\n   };\n }"}]}