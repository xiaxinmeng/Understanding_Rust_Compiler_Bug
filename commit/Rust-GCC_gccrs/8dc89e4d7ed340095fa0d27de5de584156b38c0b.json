{"sha": "8dc89e4d7ed340095fa0d27de5de584156b38c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjODllNGQ3ZWQzNDAwOTVmYTBkMjdkZTVkZTU4NDE1NmIzOGMwYg==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-08-19T15:23:11Z"}, "committer": {"name": "David Sherwood", "email": "davids@gcc.gnu.org", "date": "2015-08-19T15:23:11Z"}, "message": "genmodes.c (emit_mode_unit_size_inline): New function.\n\n2015-08-19  David Sherwood  <david.sherwood@arm.com>\n\n    gcc/\n\t* genmodes.c (emit_mode_unit_size_inline): New function.\n\t(emit_mode_unit_precision_inline): New function.\n\t(emit_insn_modes_h): Emit new #define.  Emit new functions.\n\t(emit_mode_unit_size): New function.\n\t(emit_mode_unit_precision): New function.\n\t(emit_mode_adjustments): Add mode_unit_size adjustments.\n\t(emit_insn_modes_c): Emit new arrays.\n\t* machmode.h (GET_MODE_UNIT_SIZE, GET_MODE_UNIT_PRECISION): Update to\n\tuse new inline methods.\n\nFrom-SVN: r227013", "tree": {"sha": "2b377ed532e090b8c3c26e8bb610668f7077e860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b377ed532e090b8c3c26e8bb610668f7077e860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc89e4d7ed340095fa0d27de5de584156b38c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc89e4d7ed340095fa0d27de5de584156b38c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc89e4d7ed340095fa0d27de5de584156b38c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc89e4d7ed340095fa0d27de5de584156b38c0b/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d55c61ba84df5753cad7e04cabaed0f11af76b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d55c61ba84df5753cad7e04cabaed0f11af76b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d55c61ba84df5753cad7e04cabaed0f11af76b5"}], "stats": {"total": 154, "additions": 152, "deletions": 2}, "files": [{"sha": "0f39e3f9dafe3123e5bee091d517b15efe7159ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dc89e4d7ed340095fa0d27de5de584156b38c0b", "patch": "@@ -1,3 +1,15 @@\n+2015-08-19  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* genmodes.c (emit_mode_unit_size_inline): New function.\n+\t(emit_mode_unit_precision_inline): New function.\n+\t(emit_insn_modes_h): Emit new #define.  Emit new functions.\n+\t(emit_mode_unit_size): New function.\n+\t(emit_mode_unit_precision): New function.\n+\t(emit_mode_adjustments): Add mode_unit_size adjustments.\n+\t(emit_insn_modes_c): Emit new arrays.\n+\t* machmode.h (GET_MODE_UNIT_SIZE, GET_MODE_UNIT_PRECISION): Update to\n+\tuse new inline methods.\n+\n 2015-08-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (bit_count): Delete prototype"}, {"sha": "065ca54f30bd7b20e361e107b38beca88eb24b2e", "filename": "gcc/genmodes.c", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=8dc89e4d7ed340095fa0d27de5de584156b38c0b", "patch": "@@ -1047,6 +1047,79 @@ mode_inner_inline (machine_mode mode)\\n\\\n }\\n\");\n }\n \n+/* Emit mode_unit_size_inline routine into insn-modes.h header.  */\n+static void\n+emit_mode_unit_size_inline (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  puts (\"\\\n+#ifdef __cplusplus\\n\\\n+inline __attribute__((__always_inline__))\\n\\\n+#else\\n\\\n+extern __inline__ __attribute__((__always_inline__, __gnu_inline__))\\n\\\n+#endif\\n\\\n+unsigned char\\n\\\n+mode_unit_size_inline (machine_mode mode)\\n\\\n+{\\n\\\n+  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];\\n\\\n+  switch (mode)\\n\\\n+    {\");\n+\n+  for_all_modes (c, m)\n+    {\n+      const char *name = m->name;\n+      struct mode_data *m2 = m;\n+      if (c != MODE_PARTIAL_INT && m2->component)\n+\tm2 = m2->component;\n+      if (!m2->need_bytesize_adj)\n+\tprintf (\"    case %smode: return %u;\\n\", name, m2->bytesize);\n+    }\n+\n+  puts (\"\\\n+    default: return mode_unit_size[mode];\\n\\\n+    }\\n\\\n+}\\n\");\n+}\n+\n+/* Emit mode_unit_precision_inline routine into insn-modes.h header.  */\n+static void\n+emit_mode_unit_precision_inline (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  puts (\"\\\n+#ifdef __cplusplus\\n\\\n+inline __attribute__((__always_inline__))\\n\\\n+#else\\n\\\n+extern __inline__ __attribute__((__always_inline__, __gnu_inline__))\\n\\\n+#endif\\n\\\n+unsigned short\\n\\\n+mode_unit_precision_inline (machine_mode mode)\\n\\\n+{\\n\\\n+  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];\\n\\\n+  switch (mode)\\n\\\n+    {\");\n+\n+  for_all_modes (c, m)\n+    {\n+      struct mode_data *m2\n+\t= (c != MODE_PARTIAL_INT && m->component) ? m->component : m;\n+      if (m2->precision != (unsigned int)-1)\n+\tprintf (\"    case %smode: return %u;\\n\", m->name, m2->precision);\n+      else\n+\tprintf (\"    case %smode: return %u*BITS_PER_UNIT;\\n\",\n+\t\tm->name, m2->bytesize);\n+    }\n+\n+  puts (\"\\\n+    default: return mode_unit_precision[mode];\\n\\\n+    }\\n\\\n+}\\n\");\n+}\n+\n static void\n emit_insn_modes_h (void)\n {\n@@ -1107,6 +1180,7 @@ enum machine_mode\\n{\");\n \n   /* I can't think of a better idea, can you?  */\n   printf (\"#define CONST_MODE_SIZE%s\\n\", adj_bytesize ? \"\" : \" const\");\n+  printf (\"#define CONST_MODE_UNIT_SIZE%s\\n\", adj_bytesize ? \"\" : \" const\");\n   printf (\"#define CONST_MODE_BASE_ALIGN%s\\n\", adj_alignment ? \"\" : \" const\");\n #if 0 /* disabled for backward compatibility, temporary */\n   printf (\"#define CONST_REAL_FORMAT_FOR_MODE%s\\n\", adj_format ? \"\" :\" const\");\n@@ -1125,6 +1199,8 @@ enum machine_mode\\n{\");\n   emit_mode_size_inline ();\n   emit_mode_nunits_inline ();\n   emit_mode_inner_inline ();\n+  emit_mode_unit_size_inline ();\n+  emit_mode_unit_precision_inline ();\n   puts (\"#endif /* GCC_VERSION >= 4001 */\");\n \n   puts (\"\\\n@@ -1344,6 +1420,47 @@ emit_mode_inner (void)\n   print_closer ();\n }\n \n+/* Emit mode_unit_size array into insn-modes.c file.  */\n+static void\n+emit_mode_unit_size (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  print_maybe_const_decl (\"%sunsigned char\", \"mode_unit_size\",\n+\t\t\t  \"NUM_MACHINE_MODES\", bytesize);\n+\n+  for_all_modes (c, m)\n+    tagged_printf (\"%u\",\n+\t\t   c != MODE_PARTIAL_INT && m->component\n+\t\t   ? m->component->bytesize : m->bytesize, m->name);\n+\n+  print_closer ();\n+}\n+\n+/* Emit mode_unit_precision array into insn-modes.c file.  */\n+static void\n+emit_mode_unit_precision (void)\n+{\n+  int c;\n+  struct mode_data *m;\n+\n+  print_decl (\"unsigned short\", \"mode_unit_precision\", \"NUM_MACHINE_MODES\");\n+\n+  for_all_modes (c, m)\n+    {\n+      struct mode_data *m2 = (c != MODE_PARTIAL_INT && m->component) ?\n+\t\t\t     m->component : m;\n+      if (m2->precision != (unsigned int)-1)\n+\ttagged_printf (\"%u\", m2->precision, m->name);\n+      else\n+\ttagged_printf (\"%u*BITS_PER_UNIT\", m2->bytesize, m->name);\n+    }\n+\n+  print_closer ();\n+}\n+\n+\n static void\n emit_mode_base_align (void)\n {\n@@ -1439,6 +1556,7 @@ emit_mode_adjustments (void)\n       printf (\"\\n  /* %s:%d */\\n  s = %s;\\n\",\n \t      a->file, a->line, a->adjustment);\n       printf (\"  mode_size[%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_unit_size[%smode] = s;\\n\", a->mode->name);\n       printf (\"  mode_base_align[%smode] = s & (~s + 1);\\n\",\n \t      a->mode->name);\n \n@@ -1449,6 +1567,7 @@ emit_mode_adjustments (void)\n \t    case MODE_COMPLEX_INT:\n \t    case MODE_COMPLEX_FLOAT:\n \t      printf (\"  mode_size[%smode] = 2*s;\\n\", m->name);\n+\t      printf (\"  mode_unit_size[%smode] = s;\\n\", m->name);\n \t      printf (\"  mode_base_align[%smode] = s & (~s + 1);\\n\",\n \t\t      m->name);\n \t      break;\n@@ -1461,6 +1580,7 @@ emit_mode_adjustments (void)\n \t    case MODE_VECTOR_UACCUM:\n \t      printf (\"  mode_size[%smode] = %d*s;\\n\",\n \t\t      m->name, m->ncomponents);\n+\t      printf (\"  mode_unit_size[%smode] = s;\\n\", m->name);\n \t      printf (\"  mode_base_align[%smode] = (%d*s) & (~(%d*s)+1);\\n\",\n \t\t      m->name, m->ncomponents, m->ncomponents);\n \t      break;\n@@ -1626,6 +1746,8 @@ emit_insn_modes_c (void)\n   emit_mode_wider ();\n   emit_mode_mask ();\n   emit_mode_inner ();\n+  emit_mode_unit_size ();\n+  emit_mode_unit_precision ();\n   emit_mode_base_align ();\n   emit_class_narrowest_mode ();\n   emit_real_format_for_mode ();"}, {"sha": "5de1634991969a631548a917f6883d125dc7a49f", "filename": "gcc/machmode.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc89e4d7ed340095fa0d27de5de584156b38c0b/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=8dc89e4d7ed340095fa0d27de5de584156b38c0b", "patch": "@@ -225,12 +225,28 @@ extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n /* Get the size in bytes or bits of the basic parts of an\n    object of mode MODE.  */\n \n-#define GET_MODE_UNIT_SIZE(MODE) GET_MODE_SIZE (GET_MODE_INNER (MODE))\n+extern CONST_MODE_UNIT_SIZE unsigned char mode_unit_size[NUM_MACHINE_MODES];\n+#if GCC_VERSION >= 4001\n+#define GET_MODE_UNIT_SIZE(MODE) \\\n+  ((unsigned char) (__builtin_constant_p (MODE) \\\n+\t\t   ? mode_unit_size_inline (MODE) : mode_unit_size[MODE]))\n+#else\n+#define GET_MODE_UNIT_SIZE(MODE) mode_unit_size[MODE]\n+#endif\n \n #define GET_MODE_UNIT_BITSIZE(MODE) \\\n   ((unsigned short) (GET_MODE_UNIT_SIZE (MODE) * BITS_PER_UNIT))\n \n-#define GET_MODE_UNIT_PRECISION(MODE) GET_MODE_PRECISION (GET_MODE_INNER (MODE))\n+extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];\n+#if GCC_VERSION >= 4001\n+#define GET_MODE_UNIT_PRECISION(MODE) \\\n+  ((unsigned short) (__builtin_constant_p (MODE) \\\n+\t\t    ? mode_unit_precision_inline (MODE)\\\n+\t\t    : mode_unit_precision[MODE]))\n+#else\n+#define GET_MODE_UNIT_PRECISION(MODE) mode_unit_precision[MODE]\n+#endif\n+\n \n /* Get the number of units in the object.  */\n "}]}