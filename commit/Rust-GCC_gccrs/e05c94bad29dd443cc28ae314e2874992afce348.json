{"sha": "e05c94bad29dd443cc28ae314e2874992afce348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1Yzk0YmFkMjlkZDQ0M2NjMjhhZTMxNGUyODc0OTkyYWZjZTM0OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:12:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:12:55Z"}, "message": "[32/77] Check is_a <scalar_int_mode> before calling valid_pointer_mode\n\nA future patch will make valid_pointer_mode take a scalar_int_mode\ninstead of a machine_mode.  is_a <...> rather than as_a <...> is\nneeded here because we're checking a mode supplied by the user.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/c-family/\n\t* c-attribs.c (handle_mode_attribute): Check for a scalar_int_mode\n\tbefore calling targetm.addr_space.valid_pointer_mode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251484", "tree": {"sha": "464c6084aa6d986120de2dce326c3955b27fde13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464c6084aa6d986120de2dce326c3955b27fde13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e05c94bad29dd443cc28ae314e2874992afce348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05c94bad29dd443cc28ae314e2874992afce348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05c94bad29dd443cc28ae314e2874992afce348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05c94bad29dd443cc28ae314e2874992afce348/comments", "author": null, "committer": null, "parents": [{"sha": "1e047eedb4c116f861f9d781b0a36821084242ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e047eedb4c116f861f9d781b0a36821084242ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e047eedb4c116f861f9d781b0a36821084242ef"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "fe3fd5829ed79a0631f598787da49151a6b3b9e5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05c94bad29dd443cc28ae314e2874992afce348/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05c94bad29dd443cc28ae314e2874992afce348/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e05c94bad29dd443cc28ae314e2874992afce348", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-attribs.c (handle_mode_attribute): Check for a scalar_int_mode\n+\tbefore calling targetm.addr_space.valid_pointer_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "e564c727e245aa4d064cb237a7e99944fd984d6b", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05c94bad29dd443cc28ae314e2874992afce348/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05c94bad29dd443cc28ae314e2874992afce348/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=e05c94bad29dd443cc28ae314e2874992afce348", "patch": "@@ -1469,10 +1469,12 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n       if (POINTER_TYPE_P (type))\n \t{\n+\t  scalar_int_mode addr_mode;\n \t  addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (type));\n \t  tree (*fn)(tree, machine_mode, bool);\n \n-\t  if (!targetm.addr_space.valid_pointer_mode (mode, as))\n+\t  if (!is_a <scalar_int_mode> (mode, &addr_mode)\n+\t      || !targetm.addr_space.valid_pointer_mode (addr_mode, as))\n \t    {\n \t      error (\"invalid pointer mode %qs\", p);\n \t      return NULL_TREE;\n@@ -1482,7 +1484,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t    fn = build_pointer_type_for_mode;\n \t  else\n \t    fn = build_reference_type_for_mode;\n-\t  typefm = fn (TREE_TYPE (type), mode, false);\n+\t  typefm = fn (TREE_TYPE (type), addr_mode, false);\n \t}\n       else\n \t{"}]}