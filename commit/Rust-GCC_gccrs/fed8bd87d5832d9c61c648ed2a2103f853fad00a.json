{"sha": "fed8bd87d5832d9c61c648ed2a2103f853fad00a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkOGJkODdkNTgzMmQ5YzYxYzY0OGVkMmEyMTAzZjg1M2ZhZDAwYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-05-12T09:28:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T09:28:19Z"}, "message": "sem_ch9.adb, [...]: Minor reformatting.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch9.adb, einfo.ads, exp_intr.adb: Minor reformatting.\n\t* sem_disp.adb: Minor code reorganization (remove junk redundant\n\tnull statement).\n\t* exp_unst.adb (Unnest_Subprogram.Uplev_Refs): Ignore uplevel\n\treferences to bounds of types coming from original type reference.\n\t* checks.ads: Minor reformatting.\n\t* checks.adb: Minor reformatting.\n\t* sem_prag.adb (Analyze_Pragma, case Check): If in ignored\n\tassertion, then make sure we do not drag in bignum stuff.\n\nFrom-SVN: r223053", "tree": {"sha": "5513301ef8e56200c391753bd0ede25c21b307b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5513301ef8e56200c391753bd0ede25c21b307b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed8bd87d5832d9c61c648ed2a2103f853fad00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed8bd87d5832d9c61c648ed2a2103f853fad00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed8bd87d5832d9c61c648ed2a2103f853fad00a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed8bd87d5832d9c61c648ed2a2103f853fad00a/comments", "author": null, "committer": null, "parents": [{"sha": "27fd9ad83b56a6cb256bae3a1c6524afb624d209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fd9ad83b56a6cb256bae3a1c6524afb624d209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fd9ad83b56a6cb256bae3a1c6524afb624d209"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "7a90775fc20e5b97a8eb5c4f55a18abda8b266e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -1,3 +1,15 @@\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch9.adb, einfo.ads, exp_intr.adb: Minor reformatting.\n+\t* sem_disp.adb: Minor code reorganization (remove junk redundant\n+\tnull statement).\n+\t* exp_unst.adb (Unnest_Subprogram.Uplev_Refs): Ignore uplevel\n+\treferences to bounds of types coming from original type reference.\n+\t* checks.ads: Minor reformatting.\n+\t* checks.adb: Minor reformatting.\n+\t* sem_prag.adb (Analyze_Pragma, case Check): If in ignored\n+\tassertion, then make sure we do not drag in bignum stuff.\n+\n 2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch9.adb (Collect_Interfaces): Initialize"}, {"sha": "b2e779c99e6a902c5d2cff3961cd9a83d9fd931f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -7789,9 +7789,9 @@ package body Checks is\n \n          Analyze_And_Resolve (N, Typ);\n \n-         Scope_Suppress.Suppress (Overflow_Check)  := Svo;\n-         Scope_Suppress.Overflow_Mode_General    := Svg;\n-         Scope_Suppress.Overflow_Mode_Assertions := Sva;\n+         Scope_Suppress.Suppress (Overflow_Check) := Svo;\n+         Scope_Suppress.Overflow_Mode_General     := Svg;\n+         Scope_Suppress.Overflow_Mode_Assertions  := Sva;\n       end Reanalyze;\n \n       --------------\n@@ -7817,9 +7817,9 @@ package body Checks is\n \n          Expand (N);\n \n-         Scope_Suppress.Suppress (Overflow_Check)  := Svo;\n-         Scope_Suppress.Overflow_Mode_General    := Svg;\n-         Scope_Suppress.Overflow_Mode_Assertions := Sva;\n+         Scope_Suppress.Suppress (Overflow_Check) := Svo;\n+         Scope_Suppress.Overflow_Mode_General     := Svg;\n+         Scope_Suppress.Overflow_Mode_Assertions  := Sva;\n       end Reexpand;\n \n    --  Start of processing for Minimize_Eliminate_Overflows"}, {"sha": "5375eed48a23fe1d433966d33b6848e3a75aa399", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -81,11 +81,11 @@ package Checks is\n \n    function Overflow_Check_Mode return Overflow_Mode_Type;\n    --  Returns current overflow checking mode, taking into account whether\n-   --  we are inside an assertion expression.\n+   --  we are inside an assertion expression and the assertion policy.\n \n-   ------------------------------------------\n-   --  Control of Alignment Check Warnings --\n-   ------------------------------------------\n+   -----------------------------------------\n+   -- Control of Alignment Check Warnings --\n+   -----------------------------------------\n \n    --  When we have address clauses, there is an issue of whether the address\n    --  specified is appropriate to the alignment. In the general case where the"}, {"sha": "d752a1ed5aa7990088996b113e0dd0ac5d8d4af1", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -882,6 +882,7 @@ package Einfo is\n --       primitives that come from source must be stored in this list in the\n --       order of their occurrence in the sources. For incomplete types the\n --       list is always empty.\n+--\n --       When expansion is disabled the corresponding record type of a\n --       synchronized type is not constructed. In that case, such types\n --       carry this attribute directly, for ASIS use.\n@@ -2017,7 +2018,7 @@ package Einfo is\n --       Defined in all entities. Indicates that the entity is locally defined\n --       within a subprogram P, and there is a reference to the entity within\n --       a subprogram nested within P (at any depth). Set only for the VM case\n---       (where it is set for variables, constants and loop parameters). Note\n+--       (where it is set for variables, constants, and loop parameters). Note\n --       that this is similar in usage to Is_Uplevel_Referenced_Entity (which\n --       is used when we are unnesting subprograms), but the usages are a bit\n --       different and it is cleaner to leave the old VM usage unchanged."}, {"sha": "8002fef8bc97cc583d283745ff2b2ab1682a9275", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -359,8 +359,8 @@ package body Exp_Intr is\n                        Parameter_Associations => New_List (\n                          Relocate_Node (Tag_Arg),\n                          New_Occurrence_Of\n-                           (Node (First_Elmt (Access_Disp_Table\n-                                               (Etype (Act_Constr)))),\n+                           (Node (First_Elmt\n+                                    (Access_Disp_Table (Etype (Act_Constr)))),\n                             Loc))));\n                Insert_Action (N, Iface_Tag);\n             end;"}, {"sha": "a85725971afaea436f61798b614b807dfa1309da", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -1428,6 +1428,16 @@ package body Exp_Unst is\n                goto Continue;\n             end if;\n \n+            --  Also ignore uplevel references to bounds of types that come\n+            --  from the original type reference.\n+\n+            if Is_Entity_Name (UPJ.Ref)\n+              and then Present (Entity (UPJ.Ref))\n+              and then Is_Type (Entity (UPJ.Ref))\n+            then\n+               goto Continue;\n+            end if;\n+\n             --  Rewrite one reference\n \n             Rewrite_One_Ref : declare"}, {"sha": "ff112317080ca45ed5a121f07eeec9e11c15d8dc", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -3225,10 +3225,10 @@ package body Sem_Ch9 is\n       if Present (Interface_List (N)) then\n          Set_Is_Tagged_Type (T);\n \n-         --  The primitive operations of a tagged synchronized type are\n-         --  placed on the Corresponding_Record for proper dispatching,\n-         --  but are attached to the synchronized type itself when\n-         --  expansion is disabled, for ASIS use.\n+         --  The primitive operations of a tagged synchronized type are placed\n+         --  on the Corresponding_Record for proper dispatching, but are\n+         --  attached to the synchronized type itself when expansion is\n+         --  disabled, for ASIS use.\n \n          Set_Direct_Primitive_Operations (T, New_Elmt_List);\n "}, {"sha": "4bc21f778d543c771ec28add2b067da4b661025c", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -1335,11 +1335,10 @@ package body Sem_Disp is\n       elsif Is_Concurrent_Type (Tagged_Type) then\n          pragma Assert (not Expander_Active);\n \n-         --  Attach operation to list of primitives of the synchronized\n-         --  type itself, for ASIS use.\n+         --  Attach operation to list of primitives of the synchronized type\n+         --  itself, for ASIS use.\n \n          Append_Elmt (Subp, Direct_Primitive_Operations (Tagged_Type));\n-         null;\n \n       --  If no old subprogram, then we add this as a dispatching operation,\n       --  but we avoid doing this if an error was posted, to prevent annoying"}, {"sha": "ede76850ad7e985e59e3db3adc808ecd6fdacd8b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed8bd87d5832d9c61c648ed2a2103f853fad00a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fed8bd87d5832d9c61c648ed2a2103f853fad00a", "patch": "@@ -11373,7 +11373,7 @@ package body Sem_Prag is\n             end case;\n \n             --  Check applicable policy. We skip this if Checked/Ignored status\n-            --  is already set (e.g. in the casse of a pragma from an aspect).\n+            --  is already set (e.g. in the case of a pragma from an aspect).\n \n             if Is_Checked (N) or else Is_Ignored (N) then\n                null;\n@@ -11441,7 +11441,7 @@ package body Sem_Prag is\n                   end if;\n             end case;\n \n-            --  Deal with analyzing the string argument.\n+            --  Deal with analyzing the string argument\n \n             if Arg_Count = 3 then\n \n@@ -11495,10 +11495,38 @@ package body Sem_Prag is\n                        Left_Opnd  => Make_Identifier (Eloc, Name_False),\n                        Right_Opnd => Expr),\n                    Then_Statements => New_List (\n-                     Make_Null_Statement (Eloc))));\n+                            Make_Null_Statement (Eloc))));\n+\n+               --  Now go ahead and analyze the if statement\n \n                In_Assertion_Expr := In_Assertion_Expr + 1;\n-               Analyze (N);\n+\n+               --  One rather special treatment. If we are now in Eliminated\n+               --  overflow mode, then suppress overflow checking since we do\n+               --  not want to drag in the bignum stuff if we are in Ignore\n+               --  mode anyway. This is particularly important if we are using\n+               --  a configurable run time that does not support bignum ops.\n+\n+               if Scope_Suppress.Overflow_Mode_Assertions = Eliminated then\n+                  declare\n+                     Svo : constant Boolean :=\n+                             Scope_Suppress.Suppress (Overflow_Check);\n+                  begin\n+                     Scope_Suppress.Overflow_Mode_Assertions  := Strict;\n+                     Scope_Suppress.Suppress (Overflow_Check) := True;\n+                     Analyze (N);\n+                     Scope_Suppress.Suppress (Overflow_Check) := Svo;\n+                     Scope_Suppress.Overflow_Mode_Assertions  := Eliminated;\n+                  end;\n+\n+               --  Not that special case!\n+\n+               else\n+                  Analyze (N);\n+               end if;\n+\n+               --  All done with this check\n+\n                In_Assertion_Expr := In_Assertion_Expr - 1;\n \n             --  Check is active or expansion not active. In these cases we can"}]}