{"sha": "90429b962e25574217f1a706ee16c238b30e22be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0MjliOTYyZTI1NTc0MjE3ZjFhNzA2ZWUxNmMyMzhiMzBlMjJiZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-19T08:43:29Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add vcvtsh2ss/vcvtsh2sd/vcvtss2sh/vcvtsd2sh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_cvtsh_ss):\n\tNew intrinsic.\n\t(_mm_mask_cvtsh_ss): Likewise.\n\t(_mm_maskz_cvtsh_ss): Likewise.\n\t(_mm_cvtsh_sd): Likewise.\n\t(_mm_mask_cvtsh_sd): Likewise.\n\t(_mm_maskz_cvtsh_sd): Likewise.\n\t(_mm_cvt_roundsh_ss): Likewise.\n\t(_mm_mask_cvt_roundsh_ss): Likewise.\n\t(_mm_maskz_cvt_roundsh_ss): Likewise.\n\t(_mm_cvt_roundsh_sd): Likewise.\n\t(_mm_mask_cvt_roundsh_sd): Likewise.\n\t(_mm_maskz_cvt_roundsh_sd): Likewise.\n\t(_mm_cvtss_sh): Likewise.\n\t(_mm_mask_cvtss_sh): Likewise.\n\t(_mm_maskz_cvtss_sh): Likewise.\n\t(_mm_cvtsd_sh): Likewise.\n\t(_mm_mask_cvtsd_sh): Likewise.\n\t(_mm_maskz_cvtsd_sh): Likewise.\n\t(_mm_cvt_roundss_sh): Likewise.\n\t(_mm_mask_cvt_roundss_sh): Likewise.\n\t(_mm_maskz_cvt_roundss_sh): Likewise.\n\t(_mm_cvt_roundsd_sh): Likewise.\n\t(_mm_mask_cvt_roundsd_sh): Likewise.\n\t(_mm_maskz_cvt_roundsd_sh): Likewise.\n\t* config/i386/i386-builtin-types.def\n\t(V8HF_FTYPE_V2DF_V8HF_V8HF_UQI_INT,\n\tV8HF_FTYPE_V4SF_V8HF_V8HF_UQI_INT,\n\tV2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT,\n\tV4SF_FTYPE_V8HF_V4SF_V4SF_UQI_INT): Add new builtin types.\n\t* config/i386/i386-builtin.def: Add corrresponding new builtins.\n\t* config/i386/i386-expand.c: Handle new builtin types.\n\t* config/i386/sse.md (VF48_128): New mode iterator.\n\t(avx512fp16_vcvtsh2<ssescalarmodesuffix><mask_scalar_name><round_saeonly_scalar_name>):\n\tNew.\n\t(avx512fp16_vcvt<ssescalarmodesuffix>2sh<mask_scalar_name><round_scalar_name>):\n\tDitto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "20af0b56a28baaa4db761a869e98da8a350986d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20af0b56a28baaa4db761a869e98da8a350986d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90429b962e25574217f1a706ee16c238b30e22be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90429b962e25574217f1a706ee16c238b30e22be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90429b962e25574217f1a706ee16c238b30e22be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90429b962e25574217f1a706ee16c238b30e22be/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fe603b4bf0cae80eab34c2c76a265a9c89db08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fe603b4bf0cae80eab34c2c76a265a9c89db08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fe603b4bf0cae80eab34c2c76a265a9c89db08"}], "stats": {"total": 393, "additions": 392, "deletions": 1}, "files": [{"sha": "3b236ecbfc4141e07a534ba9cf5078bf2ab4a8e4", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -4610,6 +4610,286 @@ _mm512_maskz_cvt_roundpd_ph (__mmask8 __A, __m512d __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvtsh2ss, vcvtsh2sd.  */\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_ss (__m128 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t      (__mmask8) -1,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtsh_ss (__m128 __A, __mmask8 __B, __m128 __C,\n+\t\t\t __m128h __D)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtsh_ss (__mmask8 __A, __m128 __B,\n+\t\t\t  __m128h __C)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t      __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_sd (__m128d __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_pd (),\n+\t\t\t\t\t      (__mmask8) -1,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtsh_sd (__m128d __A, __mmask8 __B, __m128d __C,\n+\t\t\t __m128h __D)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtsh_sd (__mmask8 __A, __m128d __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_pd (),\n+\t\t\t\t\t      __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_ss (__m128 __A, __m128h __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t      (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundsh_ss (__m128 __A, __mmask8 __B, __m128 __C,\n+\t\t\t __m128h __D, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__D, __C, __A, __B, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundsh_ss (__mmask8 __A, __m128 __B,\n+\t\t\t  __m128h __C, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2ss_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t      __A, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_sd (__m128d __A, __m128h __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_pd (),\n+\t\t\t\t\t      (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundsh_sd (__m128d __A, __mmask8 __B, __m128d __C,\n+\t\t\t __m128h __D, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__D, __C, __A, __B, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundsh_sd (__mmask8 __A, __m128d __B, __m128h __C, const int __R)\n+{\n+  return __builtin_ia32_vcvtsh2sd_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_pd (),\n+\t\t\t\t\t      __A, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundsh_ss(A, B, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsh2ss_mask_round ((B), (A),\t\t\\\n+\t\t\t\t\t_mm_setzero_ps (),\t\\\n+\t\t\t\t\t(__mmask8) -1, (R)))\n+\n+#define _mm_mask_cvt_roundsh_ss(A, B, C, D, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsh2ss_mask_round ((D), (C), (A), (B), (R)))\n+\n+#define _mm_maskz_cvt_roundsh_ss(A, B, C, R)\t\t\t\\\n+  (__builtin_ia32_vcvtsh2ss_mask_round ((C), (B),\t\t\\\n+\t\t\t\t\t_mm_setzero_ps (),\t\\\n+\t\t\t\t\t(A), (R)))\n+\n+#define _mm_cvt_roundsh_sd(A, B, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsh2sd_mask_round ((B), (A),\t\t\\\n+\t\t\t\t\t_mm_setzero_pd (),\t\\\n+\t\t\t\t\t(__mmask8) -1, (R)))\n+\n+#define _mm_mask_cvt_roundsh_sd(A, B, C, D, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsh2sd_mask_round ((D), (C), (A), (B), (R)))\n+\n+#define _mm_maskz_cvt_roundsh_sd(A, B, C, R)\t\t\t\\\n+  (__builtin_ia32_vcvtsh2sd_mask_round ((C), (B),\t\t\\\n+\t\t\t\t\t_mm_setzero_pd (),\t\\\n+\t\t\t\t\t(A), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtss2sh, vcvtsd2sh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtss_sh (__m128h __A, __m128 __B)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      (__mmask8) -1,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtss_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128 __D)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtss_sh (__mmask8 __A, __m128h __B, __m128 __C)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsd_sh (__m128h __A, __m128d __B)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      (__mmask8) -1,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtsd_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128d __D)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtsd_sh (__mmask8 __A, __m128h __B, __m128d __C)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundss_sh (__m128h __A, __m128 __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundss_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128 __D,\n+\t\t\t const int __R)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__D, __C, __A, __B, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundss_sh (__mmask8 __A, __m128h __B, __m128 __C,\n+\t\t\t  const int __R)\n+{\n+  return __builtin_ia32_vcvtss2sh_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      __A, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsd_sh (__m128h __A, __m128d __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__B, __A,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundsd_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128d __D,\n+\t\t\t const int __R)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__D, __C, __A, __B, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundsd_sh (__mmask8 __A, __m128h __B, __m128d __C,\n+\t\t\t  const int __R)\n+{\n+  return __builtin_ia32_vcvtsd2sh_mask_round (__C, __B,\n+\t\t\t\t\t      _mm_setzero_ph (),\n+\t\t\t\t\t      __A, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundss_sh(A, B, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtss2sh_mask_round ((B), (A),\t\t\\\n+\t\t\t\t\t_mm_setzero_ph (),\t\\\n+\t\t\t\t\t(__mmask8) -1, R))\n+\n+#define _mm_mask_cvt_roundss_sh(A, B, C, D, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtss2sh_mask_round ((D), (C), (A), (B), (R)))\n+\n+#define _mm_maskz_cvt_roundss_sh(A, B, C, R)\t\t\t\\\n+  (__builtin_ia32_vcvtss2sh_mask_round ((C), (B),\t\t\\\n+\t\t\t\t\t_mm_setzero_ph (),\t\\\n+\t\t\t\t\tA, R))\n+\n+#define _mm_cvt_roundsd_sh(A, B, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsd2sh_mask_round ((B), (A),\t\t\\\n+\t\t\t\t\t_mm_setzero_ph (),\t\\\n+\t\t\t\t\t(__mmask8) -1, R))\n+\n+#define _mm_mask_cvt_roundsd_sh(A, B, C, D, R)\t\t\t\t\\\n+  (__builtin_ia32_vcvtsd2sh_mask_round ((D), (C), (A), (B), (R)))\n+\n+#define _mm_maskz_cvt_roundsd_sh(A, B, C, R)\t\t\t\\\n+  (__builtin_ia32_vcvtsd2sh_mask_round ((C), (B),\t\t\\\n+\t\t\t\t\t_mm_setzero_ph (),\t\\\n+\t\t\t\t\t(A), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "7fd4286ef2653feab7c649b2747c00eb0e01147d", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -1348,6 +1348,10 @@ DEF_FUNCTION_TYPE (V8DF, V8HF, V8DF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8DI, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8DF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V2DF, V8HF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V4SF, V8HF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V8HF, V2DF, V2DF, UQI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V8HF, V4SF, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HI, V16HF, V16HI, UHI)"}, {"sha": "dc56dc2c0f5de2a9b4d14fa0bd30a400e5ef49fe", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -3136,7 +3136,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv8df2_\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_float_extend_phv16sf2_mask_round, \"__builtin_ia32_vcvtph2psx512_mask_round\", IX86_BUILTIN_VCVTPH2PSX512_MASK_ROUND, UNKNOWN, (int) V16SF_FTYPE_V16HF_V16SF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtpd2ph_v8df_mask_round, \"__builtin_ia32_vcvtpd2ph512_mask_round\", IX86_BUILTIN_VCVTPD2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtps2ph_v16sf_mask_round, \"__builtin_ia32_vcvtps2phx512_mask_round\", IX86_BUILTIN_VCVTPS2PHX512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SF_V16HF_UHI_INT)\n-\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2ss_mask_round, \"__builtin_ia32_vcvtsh2ss_mask_round\", IX86_BUILTIN_VCVTSH2SS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V8HF_V4SF_V4SF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2sd_mask_round, \"__builtin_ia32_vcvtsh2sd_mask_round\", IX86_BUILTIN_VCVTSH2SD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtss2sh_mask_round, \"__builtin_ia32_vcvtss2sh_mask_round\", IX86_BUILTIN_VCVTSS2SH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V4SF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsd2sh_mask_round, \"__builtin_ia32_vcvtsd2sh_mask_round\", IX86_BUILTIN_VCVTSD2SH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V2DF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "bfafd1517c865d6681d7407e64124de632e6a8a9", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -10743,15 +10743,19 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT:\n+    case V4SF_FTYPE_V8HF_V4SF_V4SF_UQI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT:\n     case V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT:\n+    case V2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_QI_INT:\n     case V4SF_FTYPE_V4SF_V2DF_V4SF_QI_INT:\n     case V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT:\n     case V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT:\n+    case V8HF_FTYPE_V2DF_V8HF_V8HF_UQI_INT:\n+    case V8HF_FTYPE_V4SF_V8HF_V8HF_UQI_INT:\n       nargs = 5;\n       break;\n     case V32HF_FTYPE_V32HF_INT_V32HF_USI_INT:"}, {"sha": "d7a132877e9902de28b82608c703d66f5fcedc27", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -809,6 +809,10 @@\n   [V16SI V16SF V8DI V8DF V32HI V64QI])\n (define_mode_iterator VF48H_AVX512VL\n   [V8DF V16SF (V8SF \"TARGET_AVX512VL\")])\n+\n+(define_mode_iterator VF48_128\n+  [V2DF V4SF])\n+\n (define_mode_iterator VI48F\n   [V16SI V16SF V8DI V8DF\n    (V8SI \"TARGET_AVX512VL\") (V8SF \"TARGET_AVX512VL\")\n@@ -6222,6 +6226,66 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512fp16_vcvtsh2<ssescalarmodesuffix><mask_scalar_name><round_saeonly_scalar_name>\"\n+  [(set (match_operand:VF48_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF48_128\n+\t  (vec_duplicate:VF48_128\n+\t    (float_extend:<ssescalarmode>\n+\t      (vec_select:HF\n+\t\t(match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t\t(parallel [(const_int 0)]))))\n+\t  (match_operand:VF48_128 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtsh2<ssescalarmodesuffix>\\t{<round_saeonly_scalar_mask_op3>%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %1<round_saeonly_scalar_mask_op3>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"avx512fp16_vcvtsh2<ssescalarmodesuffix><mask_scalar_name>_mem\"\n+  [(set (match_operand:VF48_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF48_128\n+\t  (vec_duplicate:VF48_128\n+\t    (float_extend:<ssescalarmode>\n+\t      (match_operand:HF 1 \"memory_operand\" \"m\")))\n+\t  (match_operand:VF48_128 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtsh2<ssescalarmodesuffix>\\t{%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"avx512fp16_vcvt<ssescalarmodesuffix>2sh<mask_scalar_name><round_scalar_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (float_truncate:HF\n+\t      (vec_select:<ssescalarmode>\n+\t\t(match_operand:VF48_128 1 \"register_operand\" \"v\")\n+\t\t(parallel [(const_int 0)]))))\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<ssescalarmodesuffix>2sh\\t{<round_scalar_mask_op3>%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %1<round_scalar_mask_op3>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"avx512fp16_vcvt<ssescalarmodesuffix>2sh<mask_scalar_name>_mem\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (float_truncate:HF\n+\t      (match_operand:MODEF 1 \"memory_operand\" \"m\")))\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<ssescalarmodesuffix>2sh\\t{%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "add3e0ced24359e04f2b8e7843dd5b0bc543e9d4", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -753,6 +753,10 @@\n #define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "dd3399397f23e419e43bbab2b9b1f25dfa819169", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -770,6 +770,10 @@\n #define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "e64321d8afadcc9b28d17979920038239089d937", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -766,6 +766,10 @@ test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvtx_roundps_ph, __m256h, __mmask16, __m512, 8)\n test_2 (_mm512_maskz_cvt_roundpd_ph, __m128h, __mmask8, __m512d, 8)\n+test_2 (_mm_cvt_roundsh_ss, __m128, __m128, __m128h, 8)\n+test_2 (_mm_cvt_roundsh_sd, __m128d, __m128d, __m128h, 8)\n+test_2 (_mm_cvt_roundss_sh, __m128h, __m128h, __m128, 8)\n+test_2 (_mm_cvt_roundsd_sh, __m128h, __m128h, __m128d, 8)\n test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n@@ -828,6 +832,10 @@ test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvtx_roundps_ph, __m256h, __m256h, __mmask16, __m512, 8)\n test_3 (_mm512_mask_cvt_roundpd_ph, __m128h, __m128h, __mmask8, __m512d, 8)\n+test_3 (_mm_maskz_cvt_roundsh_ss, __m128, __mmask8, __m128, __m128h, 8)\n+test_3 (_mm_maskz_cvt_roundsh_sd, __m128d, __mmask8, __m128d, __m128h, 8)\n+test_3 (_mm_maskz_cvt_roundss_sh, __m128h, __mmask8, __m128h, __m128, 8)\n+test_3 (_mm_maskz_cvt_roundsd_sh, __m128h, __mmask8, __m128h, __m128d, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -856,6 +864,10 @@ test_4 (_mm_mask_scalef_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h,\n test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_getexp_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundsh_ss, __m128, __m128, __mmask8, __m128, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundsh_sd, __m128d, __m128d, __mmask8, __m128d, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundss_sh, __m128h, __m128h, __mmask8, __m128h, __m128, 8)\n+test_4 (_mm_mask_cvt_roundsd_sh, __m128h, __m128h, __mmask8, __m128h, __m128d, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "d92898fdd11d40f608723909f49e0f8dc72f9494", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -872,6 +872,10 @@ test_2 (_mm512_maskz_cvtx_roundps_ph, __m256h, __mmask16, __m512, 8)\n test_2 (_mm512_maskz_cvt_roundpd_ph, __m128h, __mmask8, __m512d, 8)\n test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n+test_2 (_mm_cvt_roundsh_ss, __m128, __m128, __m128h, 8)\n+test_2 (_mm_cvt_roundsh_sd, __m128d, __m128d, __m128h, 8)\n+test_2 (_mm_cvt_roundss_sh, __m128h, __m128h, __m128, 8)\n+test_2 (_mm_cvt_roundsd_sh, __m128h, __m128h, __m128d, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -931,6 +935,10 @@ test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3 (_mm512_mask_cvtx_roundps_ph, __m256h, __m256h, __mmask16, __m512, 8)\n test_3 (_mm512_mask_cvt_roundpd_ph, __m128h, __m128h, __mmask8, __m512d, 8)\n+test_3 (_mm_maskz_cvt_roundsh_ss, __m128, __mmask8, __m128, __m128h, 8)\n+test_3 (_mm_maskz_cvt_roundsh_sd, __m128d, __mmask8, __m128d, __m128h, 8)\n+test_3 (_mm_maskz_cvt_roundss_sh, __m128h, __mmask8, __m128h, __m128, 8)\n+test_3 (_mm_maskz_cvt_roundsd_sh, __m128h, __mmask8, __m128h, __m128d, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -958,6 +966,10 @@ test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m51\n test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_getexp_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundsh_ss, __m128, __m128, __mmask8, __m128, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundsh_sd, __m128d, __m128d, __mmask8, __m128d, __m128h, 8)\n+test_4 (_mm_mask_cvt_roundss_sh, __m128h, __m128h, __mmask8, __m128h, __m128, 8)\n+test_4 (_mm_mask_cvt_roundsd_sh, __m128h, __m128h, __mmask8, __m128h, __m128d, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "9c32b7b981640ac6680a67d00274820944b42cd5", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90429b962e25574217f1a706ee16c238b30e22be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=90429b962e25574217f1a706ee16c238b30e22be", "patch": "@@ -771,6 +771,10 @@\n #define __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2psx512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtpd2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, D) __builtin_ia32_vcvtps2phx512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsh2sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtss2sh_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, E) __builtin_ia32_vcvtsd2sh_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}