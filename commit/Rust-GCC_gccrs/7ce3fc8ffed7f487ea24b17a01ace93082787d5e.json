{"sha": "7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlM2ZjOGZmZWQ3ZjQ4N2VhMjRiMTdhMDFhY2U5MzA4Mjc4N2Q1ZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-09-30T01:39:35Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-09-30T01:39:35Z"}, "message": "builtins.c (expand_builtin_strlen): Do not call emit_move_insn with a PLUS as source operand.\n\n\t* builtins.c (expand_builtin_strlen): Do not call emit_move_insn\n\twith a PLUS as source operand.\n\t(expand_movstr): Likewise.\n\t(expand_builtin_stpcpy): Likewise.\n\nFrom-SVN: r88322", "tree": {"sha": "55b63db8c40918329d735b5d045aceb9f60266e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b63db8c40918329d735b5d045aceb9f60266e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3fc8ffed7f487ea24b17a01ace93082787d5e/comments", "author": null, "committer": null, "parents": [{"sha": "e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "8f4b3964445db0e133d9b0faa64edb0a62135468", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3fc8ffed7f487ea24b17a01ace93082787d5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3fc8ffed7f487ea24b17a01ace93082787d5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "patch": "@@ -1,3 +1,10 @@\n+2004-09-29  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* builtins.c (expand_builtin_strlen): Do not call emit_move_insn\n+\twith a PLUS as source operand.\n+\t(expand_movstr): Likewise.\n+\t(expand_builtin_stpcpy): Likewise.\n+\n 2004-09-29  Richard Henderson  <rth@redhat.com>\n \n \tPR 17739"}, {"sha": "039110afe45b0de80f6378fe0def737246852472", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3fc8ffed7f487ea24b17a01ace93082787d5e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3fc8ffed7f487ea24b17a01ace93082787d5e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7ce3fc8ffed7f487ea24b17a01ace93082787d5e", "patch": "@@ -2433,8 +2433,7 @@ expand_builtin_strlen (tree arglist, rtx target,\n \n       /* Now that we are assured of success, expand the source.  */\n       start_sequence ();\n-      pat = memory_address (BLKmode,\n-\t\t\t    expand_expr (src, src_reg, ptr_mode, EXPAND_SUM));\n+      pat = expand_expr (src, src_reg, ptr_mode, EXPAND_NORMAL);\n       if (pat != src_reg)\n \temit_move_insn (src_reg, pat);\n       pat = get_insns ();\n@@ -3045,8 +3044,10 @@ expand_movstr (tree dest, tree src, rtx target, int endp)\n      terminator.  If the caller requested a mempcpy-like return value,\n      adjust it.  */\n   if (endp == 1 && target != const0_rtx)\n-    emit_move_insn (target, plus_constant (gen_lowpart (GET_MODE (target),\n-\t\t\t\t\t\t\tend), 1));\n+    {\n+      rtx tem = plus_constant (gen_lowpart (GET_MODE (target), end), 1);\n+      emit_move_insn (target, force_operand (tem, NULL_RTX));\n+    }\n \n   return target;\n }\n@@ -3156,9 +3157,8 @@ expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n \t\t  if (GET_MODE (target) != GET_MODE (ret))\n \t\t    ret = gen_lowpart (GET_MODE (target), ret);\n \n-\t\t  ret = emit_move_insn (target,\n-\t\t\t\t\tplus_constant (ret,\n-\t\t\t\t\t\t       INTVAL (len_rtx)));\n+\t\t  ret = plus_constant (ret, INTVAL (len_rtx));\n+\t\t  ret = emit_move_insn (target, force_operand (ret, NULL_RTX));\n \t\t  gcc_assert (ret);\n \n \t\t  return target;"}]}