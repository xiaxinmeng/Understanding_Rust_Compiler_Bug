{"sha": "93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlMWRkY2Y5YzhmNGI4YjY0ZDBlNTNiZDRhNGYzMDZlYjcwYmRkNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-19T21:02:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-19T21:02:03Z"}, "message": "decl.c (grokdeclarator): Don't check quals on fn type.\n\n\t* decl.c (grokdeclarator): Don't check quals on fn type.\n\t* typeck.c (cp_apply_type_quals_to_decl): Likewise.\n\t* tree.c (cp_build_qualified_type_real): Simplify qualifier checking.\n\nFrom-SVN: r159597", "tree": {"sha": "73962fa75beb82263d63e1c7b90f861c66bc93df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73962fa75beb82263d63e1c7b90f861c66bc93df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2872152c39fbc1c91da3fc07e8701fadb6b87f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2872152c39fbc1c91da3fc07e8701fadb6b87f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2872152c39fbc1c91da3fc07e8701fadb6b87f98"}], "stats": {"total": 82, "additions": 26, "deletions": 56}, "files": [{"sha": "26eaafc386d80635529073e14ff429a2a931c414", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -1,5 +1,9 @@\n 2010-05-19  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (grokdeclarator): Don't check quals on fn type.\n+\t* typeck.c (cp_apply_type_quals_to_decl): Likewise.\n+\t* tree.c (cp_build_qualified_type_real): Simplify qualifier checking.\n+\n \tPR c++/44193\n \t* typeck.c (type_memfn_quals): New fn.\n \t(apply_memfn_quals): New fn."}, {"sha": "d3cc02b913b2cd561c81fd51f8ac549bcec1bff5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -8224,21 +8224,6 @@ grokdeclarator (const cp_declarator *declarator,\n     error (\"qualifiers are not allowed on declaration of %<operator %T%>\",\n \t   ctor_return_type);\n \n-  if (TREE_CODE (type) == FUNCTION_TYPE\n-      && type_quals != TYPE_UNQUALIFIED)\n-    {\n-      /* This was an error in C++98 (cv-qualifiers cannot be added to\n-\t a function type), but DR 295 makes the code well-formed by\n-\t dropping the extra qualifiers. */\n-      if (pedantic && cxx_dialect == cxx98)\n-\t{\n-\t  tree bad_type = build_qualified_type (type, type_quals);\n-\t  pedwarn (input_location, OPT_pedantic, \n-\t\t   \"ignoring %qV qualifiers added to function type %qT\",\n-\t\t   bad_type, type);\n-\t}\n-      type_quals = TYPE_UNQUALIFIED;\n-    }\n   type_quals |= cp_type_quals (type);\n   type = cp_build_qualified_type_real\n     (type, type_quals, ((typedef_decl && !DECL_ARTIFICIAL (typedef_decl)"}, {"sha": "e7e43c0fe56a58b6d30ff4ebe7491acdd7bb690e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -14099,9 +14099,9 @@ check_cv_quals_for_unify (int strict, tree arg, tree parm)\n     {\n       /*  Although a CVR qualifier is ignored when being applied to a\n \t  substituted template parameter ([8.3.2]/1 for example), that\n-\t  does not apply during deduction [14.8.2.4]/1, (even though\n-\t  that is not explicitly mentioned, [14.8.2.4]/9 indicates\n-\t  this).  Except when we're allowing additional CV qualifiers\n+\t  does not allow us to unify \"const T\" with \"int&\" because both\n+\t  types are not of the form \"cv-list T\" [14.8.2.5 temp.deduct.type].\n+\t  It is ok when we're allowing additional CV qualifiers\n \t  at the outer level [14.8.2.1]/3,1st bullet.  */\n       if ((TREE_CODE (arg) == REFERENCE_TYPE\n \t   || TREE_CODE (arg) == FUNCTION_TYPE"}, {"sha": "e34a69cf6bad87bf1575c8e2354e9ab9b0858f70", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -865,13 +865,15 @@ cp_build_qualified_type_real (tree type,\n     }\n \n   /* A reference or method type shall not be cv-qualified.\n-     [dcl.ref], [dcl.fct]  */\n+     [dcl.ref], [dcl.fct].  This used to be an error, but as of DR 295\n+     (in CD1) we always ignore extra cv-quals on functions.  */\n   if (type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)\n       && (TREE_CODE (type) == REFERENCE_TYPE\n \t  || TREE_CODE (type) == FUNCTION_TYPE\n \t  || TREE_CODE (type) == METHOD_TYPE))\n     {\n-      bad_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n+      if (TREE_CODE (type) == REFERENCE_TYPE)\n+\tbad_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n       type_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n     }\n \n@@ -890,24 +892,16 @@ cp_build_qualified_type_real (tree type,\n       type_quals &= ~TYPE_QUAL_RESTRICT;\n     }\n \n-  if (bad_quals == TYPE_UNQUALIFIED)\n+  if (bad_quals == TYPE_UNQUALIFIED\n+      || (complain & tf_ignore_bad_quals))\n     /*OK*/;\n-  else if (!(complain & (tf_error | tf_ignore_bad_quals)))\n+  else if (!(complain & tf_error))\n     return error_mark_node;\n   else\n     {\n-      if (complain & tf_ignore_bad_quals)\n-\t/* We're not going to warn about constifying things that can't\n-\t   be constified.  */\n-\tbad_quals &= ~TYPE_QUAL_CONST;\n-      if (bad_quals)\n-\t{\n-\t  tree bad_type = build_qualified_type (ptr_type_node, bad_quals);\n-\n-\t  if (!(complain & tf_ignore_bad_quals))\n-\t    error (\"%qV qualifiers cannot be applied to %qT\",\n-\t\t   bad_type, type);\n-\t}\n+      tree bad_type = build_qualified_type (ptr_type_node, bad_quals);\n+      error (\"%qV qualifiers cannot be applied to %qT\",\n+\t     bad_type, type);\n     }\n \n   /* Retrieve (or create) the appropriately qualified variant.  */"}, {"sha": "44d7ab10b2141ebc81aab4b73e227b9023405e00", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -7952,23 +7952,8 @@ cp_apply_type_quals_to_decl (int type_quals, tree decl)\n   if (TREE_CODE (decl) == TYPE_DECL)\n     return;\n \n-  if (TREE_CODE (type) == FUNCTION_TYPE\n-      && type_quals != TYPE_UNQUALIFIED)\n-    {\n-      /* This was an error in C++98 (cv-qualifiers cannot be added to\n-\t a function type), but DR 295 makes the code well-formed by\n-\t dropping the extra qualifiers. */\n-      if (pedantic)\n-\t{\n-\t  tree bad_type = build_qualified_type (type, type_quals);\n-\t  pedwarn (input_location, OPT_pedantic, \n-\t\t   \"ignoring %qV qualifiers added to function type %qT\",\n-\t\t   bad_type, type);\n-\t}\n-\n-      TREE_TYPE (decl) = TYPE_MAIN_VARIANT (type);\n-      return;\n-    }\n+  gcc_assert (!(TREE_CODE (type) == FUNCTION_TYPE\n+\t\t&& type_quals != TYPE_UNQUALIFIED));\n \n   /* Avoid setting TREE_READONLY incorrectly.  */\n   if (/* If the object has a constructor, the constructor may modify"}, {"sha": "b6146f68cef31843783243610f9c97aa438bef87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -1,5 +1,8 @@\n 2010-05-19  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/other/cv_func.C: Don't expect errors about cv-qualified\n+\tfunction type.\n+\n \tPR c++/44193\n \t* g++.dg/template/fntype1.C: New.\n "}, {"sha": "941cb8d53d86cf07b894d2fb6f421e765cd27e03", "filename": "gcc/testsuite/g++.dg/other/cv_func.C", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C?ref=93e1ddcf9c8f4b8b64d0e53bd4a4f306eb70bdd4", "patch": "@@ -1,21 +1,20 @@\n // { dg-do compile }\n-// { dg-options \"-pedantic -pedantic-errors\" }\n+\n typedef int FIC(int) const;\n typedef int FI(int);\n \n FIC f; // { dg-error \"qualified\" }\n struct S {\n   FIC f; // OK\n \n-  const FI g; // { dg-error \"qualifier\" }\n+  const FI g;\n \n   int h(int) const;\n \n };\n FIC S::*pm = &S::f;\n-const FI S::*pm2 = &S::f; // { dg-error \"qualifier\" }\n-// { dg-error \"cannot convert\" \"cannot convert\" { target *-*-* } 16 }\n-const FIC S::*pm3 = &S::f; // { dg-error \"qualifier\" }\n+const FI S::*pm2 = &S::f; // { dg-error \"cannot convert\" }\n+const FIC S::*pm3 = &S::f;\n \n int S::f(int) const\n {"}]}