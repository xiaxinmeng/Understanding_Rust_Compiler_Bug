{"sha": "8695bf78dad1a42636775843ca832a2f4dba4da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5NWJmNzhkYWQxYTQyNjM2Nzc1ODQzY2E4MzJhMmY0ZGJhNGRhMw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-02T15:55:00Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-13T20:02:58Z"}, "message": "gcc: Add vec_select -> subreg RTL simplification\n\nAdd a new RTL simplification for the case of a VEC_SELECT selecting\nthe low part of a vector. The simplification returns a SUBREG.\n\nThe primary goal of this patch is to enable better combinations of\nNeon RTL patterns - specifically allowing generation of 'write-to-\nhigh-half' narrowing intructions.\n\nAdding this RTL simplification means that the expected results for a\nnumber of tests need to be updated:\n* aarch64 Neon: Update the scan-assembler regex for intrinsics tests\n  to expect a scalar register instead of lane 0 of a vector.\n* aarch64 SVE: Likewise.\n* arm MVE: Use lane 1 instead of lane 0 for lane-extraction\n  intrinsics tests (as the move instructions get optimized away for\n  lane 0.)\n\nThis patch also adds new code generation tests to\nnarrow_high_combine.c to verify the benefit of this RTL\nsimplification.\n\ngcc/ChangeLog:\n\n2021-06-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* combine.c (combine_simplify_rtx): Add vec_select -> subreg\n\tsimplification.\n\t* config/aarch64/aarch64.md (*zero_extend<SHORT:mode><GPI:mode>2_aarch64):\n\tAdd Neon to general purpose register case for zero-extend\n\tpattern.\n\t* config/arm/vfp.md (*arm_movsi_vfp): Remove \"*\" from *t -> r\n\tcase to prevent some cases opting to go through memory.\n\t* cse.c (fold_rtx): Add vec_select -> subreg simplification.\n\t* rtl.c (rtvec_series_p): Define predicate to determine\n\twhether a vector contains a linear series of integers.\n\t* rtl.h (rtvec_series_p): Define.\n\t* rtlanal.c (vec_series_lowpart_p): Define predicate to\n\tdetermine if a vector selection is equivalent to the low part\n\tof the vector.\n\t* rtlanal.h (vec_series_lowpart_p): Define.\n\t* simplify-rtx.c (simplify_context::simplify_binary_operation_1):\n\tAdd vec_select -> subreg simplification.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/extract_zero_extend.c: Remove dump scan\n\tfor RTL pattern match.\n\t* gcc.target/aarch64/narrow_high_combine.c: Add new tests.\n\t* gcc.target/aarch64/simd/vmulx_laneq_f64_1.c: Update\n\tscan-assembler regex to look for a scalar register instead of\n\tlane 0 of a vector.\n\t* gcc.target/aarch64/simd/vmulxd_laneq_f64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmulxs_lane_f32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmulxs_laneq_f32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlals_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsls_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmullh_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulls_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/dup_lane_1.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n\t* gcc.target/aarch64/sve/live_1.c: Update scan-assembler regex\n\tcases to look for 'b' and 'h' registers instead of 'w'.\n\t* gcc.target/arm/crypto-vsha1cq_u32.c: Update scan-assembler\n\tregex to reflect lane 0 vector extractions being simplified\n\tto scalar register moves.\n\t* gcc.target/arm/crypto-vsha1h_u32.c: Likewise.\n\t* gcc.target/arm/crypto-vsha1mq_u32.c: Likewise.\n\t* gcc.target/arm/crypto-vsha1pq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c: Extract\n\tlane 1 as the moves for lane 0 now get optimized away.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c: Likewise.", "tree": {"sha": "ef451d228433838626da5180c03eee39f86b1bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef451d228433838626da5180c03eee39f86b1bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8695bf78dad1a42636775843ca832a2f4dba4da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8695bf78dad1a42636775843ca832a2f4dba4da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8695bf78dad1a42636775843ca832a2f4dba4da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8695bf78dad1a42636775843ca832a2f4dba4da3/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60aee15bb7ed57d70face854834468b8b9a3ec39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60aee15bb7ed57d70face854834468b8b9a3ec39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60aee15bb7ed57d70face854834468b8b9a3ec39"}], "stats": {"total": 525, "additions": 355, "deletions": 170}, "files": [{"sha": "cb5fa401fcb354fa49a5dc1e82f47b61d3567f81", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -90,6 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-iter.h\"\n #include \"print-rtl.h\"\n #include \"function-abi.h\"\n+#include \"rtlanal.h\"\n \n /* Number of attempts to combine instructions in this function.  */\n \n@@ -6276,6 +6277,19 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \t\t\t      - 1,\n \t\t\t      0));\n       break;\n+    case VEC_SELECT:\n+      {\n+\trtx trueop0 = XEXP (x, 0);\n+\tmode = GET_MODE (trueop0);\n+\trtx trueop1 = XEXP (x, 1);\n+\t/* If we select a low-part subreg, return that.  */\n+\tif (vec_series_lowpart_p (GET_MODE (x), mode, trueop1))\n+\t  {\n+\t    rtx new_rtx = lowpart_subreg (GET_MODE (x), trueop0, mode);\n+\t    if (new_rtx != NULL_RTX)\n+\t      return new_rtx;\n+\t  }\n+      }\n \n     default:\n       break;"}, {"sha": "f12a0bebd3d6dd3381ac8248cd3fa3f519115105", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -1884,15 +1884,16 @@\n )\n \n (define_insn \"*zero_extend<SHORT:mode><GPI:mode>2_aarch64\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w\")\n-        (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m,m\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,r\")\n+        (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m,m,w\")))]\n   \"\"\n   \"@\n    and\\t%<GPI:w>0, %<GPI:w>1, <SHORT:short_mask>\n    ldr<SHORT:size>\\t%w0, %1\n-   ldr\\t%<SHORT:size>0, %1\"\n-  [(set_attr \"type\" \"logic_imm,load_4,f_loads\")\n-   (set_attr \"arch\" \"*,*,fp\")]\n+   ldr\\t%<SHORT:size>0, %1\n+   umov\\t%w0, %1.<SHORT:size>[0]\"\n+  [(set_attr \"type\" \"logic_imm,load_4,f_loads,neon_to_gp\")\n+   (set_attr \"arch\" \"*,*,fp,fp\")]\n )\n \n (define_expand \"<optab>qihi2\""}, {"sha": "93e963696dad30f29a76025696670f8b31bf2c35", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -224,7 +224,7 @@\n ;; problems because small constants get converted into adds.\n (define_insn \"*arm_movsi_vfp\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m ,*t,r,*t,*t, *Uv\")\n-      (match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,j,mi,rk,r,*t,*t,*Uvi,*t\"))]\n+      (match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,j,mi,rk,r,t,*t,*Uvi,*t\"))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\""}, {"sha": "330c1e90ce05b8f95b58f24576ec93e10ec55d89", "filename": "gcc/cse.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-iter.h\"\n #include \"regs.h\"\n #include \"function-abi.h\"\n+#include \"rtlanal.h\"\n \n /* The basic idea of common subexpression elimination is to go\n    through the code, keeping a record of expressions that would\n@@ -3171,6 +3172,19 @@ fold_rtx (rtx x, rtx_insn *insn)\n       if (NO_FUNCTION_CSE && CONSTANT_P (XEXP (XEXP (x, 0), 0)))\n \treturn x;\n       break;\n+    case VEC_SELECT:\n+      {\n+\trtx trueop0 = XEXP (x, 0);\n+\tmode = GET_MODE (trueop0);\n+\trtx trueop1 = XEXP (x, 1);\n+\t/* If we select a low-part subreg, return that.  */\n+\tif (vec_series_lowpart_p (GET_MODE (x), mode, trueop1))\n+\t  {\n+\t    rtx new_rtx = lowpart_subreg (GET_MODE (x), trueop0, mode);\n+\t    if (new_rtx != NULL_RTX)\n+\t      return new_rtx;\n+\t  }\n+      }\n \n     /* Anything else goes through the loop below.  */\n     default:"}, {"sha": "4a30d2174e2ba01f566b9d4a9b3a442b877b7f64", "filename": "gcc/rtl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -736,6 +736,21 @@ rtvec_all_equal_p (const_rtvec vec)\n     }\n }\n \n+/* Return true if VEC contains a linear series of integers\n+   { START, START+1, START+2, ... }.  */\n+\n+bool\n+rtvec_series_p (rtvec vec, int start)\n+{\n+  for (int i = 0; i < GET_NUM_ELEM (vec); i++)\n+    {\n+      rtx x = RTVEC_ELT (vec, i);\n+      if (!CONST_INT_P (x) || INTVAL (x) != i + start)\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n /* Return an indication of which type of insn should have X as a body.\n    In generator files, this can be UNKNOWN if the answer is only known\n    at (GCC) runtime.  Otherwise the value is CODE_LABEL, INSN, CALL_INSN"}, {"sha": "2dbc4339469376ce26f1f0477ef8624fae2fcaf6", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -2996,6 +2996,7 @@ extern unsigned int rtx_size (const_rtx);\n extern rtx shallow_copy_rtx (const_rtx CXX_MEM_STAT_INFO);\n extern int rtx_equal_p (const_rtx, const_rtx);\n extern bool rtvec_all_equal_p (const_rtvec);\n+extern bool rtvec_series_p (rtvec, int);\n \n /* Return true if X is a vector constant with a duplicated element value.  */\n "}, {"sha": "ec7a062829cb4ead3eaedf1546956107f4ad3bb2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -6940,3 +6940,22 @@ register_asm_p (const_rtx x)\n \t  && DECL_ASSEMBLER_NAME_SET_P (REG_EXPR (x))\n \t  && DECL_REGISTER (REG_EXPR (x)));\n }\n+\n+/* Return true if, for all OP of mode OP_MODE:\n+\n+     (vec_select:RESULT_MODE OP SEL)\n+\n+   is equivalent to the lowpart RESULT_MODE of OP.  */\n+\n+bool\n+vec_series_lowpart_p (machine_mode result_mode, machine_mode op_mode, rtx sel)\n+{\n+  int nunits;\n+  if (GET_MODE_NUNITS (op_mode).is_constant (&nunits)\n+      && targetm.can_change_mode_class (op_mode, result_mode, ALL_REGS))\n+    {\n+      int offset = BYTES_BIG_ENDIAN ? nunits - XVECLEN (sel, 0) : 0;\n+      return rtvec_series_p (XVEC (sel, 0), offset);\n+    }\n+  return false;\n+}"}, {"sha": "e1642424db89736675ac3e0d505aeaa59dca8bad", "filename": "gcc/rtlanal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtlanal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Frtlanal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.h?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -331,4 +331,7 @@ inline vec_rtx_properties_base::~vec_rtx_properties_base ()\n    collecting the references a second time.  */\n using vec_rtx_properties = growing_rtx_properties<vec_rtx_properties_base>;\n \n+bool\n+vec_series_lowpart_p (machine_mode result_mode, machine_mode op_mode, rtx sel);\n+\n #endif"}, {"sha": "2d169d3f9f70c85d396adaed124b6c52aca98f07", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"selftest.h\"\n #include \"selftest-rtl.h\"\n #include \"rtx-vector-builder.h\"\n+#include \"rtlanal.h\"\n \n /* Simplification and canonicalization of RTL.  */\n \n@@ -4201,6 +4202,15 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \t\treturn trueop0;\n \t    }\n \n+\t  /* If we select a low-part subreg, return that.  */\n+\t  if (vec_series_lowpart_p (mode, GET_MODE (trueop0), trueop1))\n+\t    {\n+\t      rtx new_rtx = lowpart_subreg (mode, trueop0,\n+\t\t\t\t\t    GET_MODE (trueop0));\n+\t      if (new_rtx != NULL_RTX)\n+\t\treturn new_rtx;\n+\t    }\n+\n \t  /* If we build {a,b} then permute it, build the result directly.  */\n \t  if (XVECLEN (trueop1, 0) == 2\n \t      && CONST_INT_P (XVECEXP (trueop1, 0, 0))"}, {"sha": "193b945b41ad821da6d1112ffae79ca463b4a5e4", "filename": "gcc/testsuite/gcc.target/aarch64/extract_zero_extend.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -70,12 +70,3 @@ foo_siv4hi (siv4hi a)\n \r\n /* { dg-final { scan-assembler-times \"umov\\\\t\" 8 } } */\r\n /* { dg-final { scan-assembler-not \"and\\\\t\" } } */\r\n-\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv16qi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv8qi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv8hi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv4hi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv16qi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv8qi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv8hi\" \"final\" } } */\r\n-/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv4hi\" \"final\" } } */\r"}, {"sha": "50ecab002a3552d37a5cc0d8921f42f6c3dba195", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high_combine.c", "status": "modified", "additions": 210, "deletions": 104, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -4,122 +4,228 @@\n \n #include <arm_neon.h>\n \n-#define TEST_ARITH(name, rettype, rmwtype, intype, fs, rs) \\\n-  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+#define TEST_1_ARITH(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_1_ ## name ## _ ## fs ## _high_combine \\\n \t\t(rmwtype a, intype b, intype c) \\\n \t{ \\\n \t\treturn vcombine_ ## rs (a, name ## _ ## fs (b, c)); \\\n \t}\n \n-TEST_ARITH (vaddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_ARITH (vaddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_ARITH (vaddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_ARITH (vaddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_ARITH (vaddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_ARITH (vaddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_ARITH (vraddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_ARITH (vraddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_ARITH (vraddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_ARITH (vraddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_ARITH (vraddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_ARITH (vraddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_ARITH (vsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_ARITH (vsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_ARITH (vsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_ARITH (vsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_ARITH (vsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_ARITH (vsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_ARITH (vrsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_ARITH (vrsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_ARITH (vrsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_ARITH (vrsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_ARITH (vrsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_ARITH (vrsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-#define TEST_SHIFT(name, rettype, rmwtype, intype, fs, rs) \\\n-  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+TEST_1_ARITH (vaddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_ARITH (vaddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_ARITH (vaddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_ARITH (vaddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_ARITH (vaddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_ARITH (vaddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_ARITH (vraddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_ARITH (vraddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_ARITH (vraddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_ARITH (vraddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_ARITH (vraddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_ARITH (vraddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_ARITH (vsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_ARITH (vsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_ARITH (vsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_ARITH (vsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_ARITH (vsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_ARITH (vsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_ARITH (vrsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_ARITH (vrsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_ARITH (vrsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_ARITH (vrsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_ARITH (vrsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_ARITH (vrsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+#define TEST_2_ARITH(name, rettype, intype, fs, rs) \\\n+  rettype test_2_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(intype a, intype b, intype c) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a, c), \\\n+\t\t\t\t\tname ## _ ## fs (b, c)); \\\n+\t}\n+\n+TEST_2_ARITH (vaddhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_ARITH (vaddhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_ARITH (vaddhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_ARITH (vaddhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_ARITH (vaddhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_ARITH (vaddhn, uint32x4_t,  uint64x2_t, u64, u32)\n+\n+TEST_2_ARITH (vraddhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_ARITH (vraddhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_ARITH (vraddhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_ARITH (vraddhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_ARITH (vraddhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_ARITH (vraddhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_ARITH (vsubhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_ARITH (vsubhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_ARITH (vsubhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_ARITH (vsubhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_ARITH (vsubhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_ARITH (vsubhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_ARITH (vrsubhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_ARITH (vrsubhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_ARITH (vrsubhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_ARITH (vrsubhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_ARITH (vrsubhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_ARITH (vrsubhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+#define TEST_1_SHIFT(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_1_ ## name ## _ ## fs ## _high_combine \\\n \t\t(rmwtype a, intype b) \\\n \t{ \\\n \t\treturn vcombine_ ## rs (a, name ## _ ## fs (b, 4)); \\\n \t}\n \n-TEST_SHIFT (vshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_SHIFT (vshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_SHIFT (vshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_SHIFT (vshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_SHIFT (vshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_SHIFT (vshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_SHIFT (vrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_SHIFT (vrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_SHIFT (vrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_SHIFT (vrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_SHIFT (vrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_SHIFT (vrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_SHIFT (vqshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_SHIFT (vqshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_SHIFT (vqshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_SHIFT (vqshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_SHIFT (vqshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_SHIFT (vqshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_SHIFT (vqrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_SHIFT (vqrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_SHIFT (vqrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_SHIFT (vqrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_SHIFT (vqrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_SHIFT (vqrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_SHIFT (vqshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n-TEST_SHIFT (vqshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n-TEST_SHIFT (vqshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n-\n-TEST_SHIFT (vqrshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n-TEST_SHIFT (vqrshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n-TEST_SHIFT (vqrshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n-\n-#define TEST_UNARY(name, rettype, rmwtype, intype, fs, rs) \\\n-  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+TEST_1_SHIFT (vshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_SHIFT (vshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_SHIFT (vshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_SHIFT (vshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_SHIFT (vshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_SHIFT (vshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_SHIFT (vrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_SHIFT (vrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_SHIFT (vrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_SHIFT (vrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_SHIFT (vrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_SHIFT (vrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_SHIFT (vqshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_SHIFT (vqshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_SHIFT (vqshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_SHIFT (vqshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_SHIFT (vqshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_SHIFT (vqshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_SHIFT (vqrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_SHIFT (vqrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_SHIFT (vqrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_SHIFT (vqrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_SHIFT (vqrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_SHIFT (vqrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_SHIFT (vqshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_1_SHIFT (vqshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_1_SHIFT (vqshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+TEST_1_SHIFT (vqrshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_1_SHIFT (vqrshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_1_SHIFT (vqrshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+#define TEST_2_SHIFT(name, rettype, intype, fs, rs) \\\n+  rettype test_2_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(intype a, intype b) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a, 4), \\\n+\t\t\t\t\tname ## _ ## fs (b, 4)); \\\n+\t}\n+\n+TEST_2_SHIFT (vshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_SHIFT (vshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_SHIFT (vshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_SHIFT (vshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_SHIFT (vshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_SHIFT (vshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_SHIFT (vrshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_SHIFT (vrshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_SHIFT (vrshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_SHIFT (vrshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_SHIFT (vrshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_SHIFT (vrshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_SHIFT (vqshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_SHIFT (vqshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_SHIFT (vqshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_SHIFT (vqshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_SHIFT (vqshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_SHIFT (vqshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_SHIFT (vqrshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_SHIFT (vqrshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_SHIFT (vqrshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_SHIFT (vqrshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_SHIFT (vqrshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_SHIFT (vqrshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_SHIFT (vqshrun_n, uint8x16_t, int16x8_t, s16, u8)\n+TEST_2_SHIFT (vqshrun_n, uint16x8_t, int32x4_t, s32, u16)\n+TEST_2_SHIFT (vqshrun_n, uint32x4_t, int64x2_t, s64, u32)\n+\n+TEST_2_SHIFT (vqrshrun_n, uint8x16_t, int16x8_t, s16, u8)\n+TEST_2_SHIFT (vqrshrun_n, uint16x8_t, int32x4_t, s32, u16)\n+TEST_2_SHIFT (vqrshrun_n, uint32x4_t, int64x2_t, s64, u32)\n+\n+#define TEST_1_UNARY(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_1_ ## name ## _ ## fs ## _high_combine \\\n \t\t(rmwtype a, intype b) \\\n \t{ \\\n \t\treturn vcombine_ ## rs (a, name ## _ ## fs (b)); \\\n \t}\n \n-TEST_UNARY (vmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_UNARY (vmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_UNARY (vmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_UNARY (vmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_UNARY (vmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_UNARY (vmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_UNARY (vqmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n-TEST_UNARY (vqmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n-TEST_UNARY (vqmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n-TEST_UNARY (vqmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n-TEST_UNARY (vqmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n-TEST_UNARY (vqmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n-\n-TEST_UNARY (vqmovun, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n-TEST_UNARY (vqmovun, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n-TEST_UNARY (vqmovun, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n-\n-/* { dg-final { scan-assembler-times \"\\\\taddhn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsubhn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\trsubhn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\traddhn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\trshrn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tshrn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqshrun2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqrshrun2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqshrn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tuqshrn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqrshrn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tuqrshrn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tuqxtn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqxtn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"\\\\tsqxtun2\\\\tv\" 3} }  */\n+TEST_1_UNARY (vmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_UNARY (vmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_UNARY (vmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_UNARY (vmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_UNARY (vmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_UNARY (vmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_UNARY (vqmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_1_UNARY (vqmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_1_UNARY (vqmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_1_UNARY (vqmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_1_UNARY (vqmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_1_UNARY (vqmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_1_UNARY (vqmovun, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_1_UNARY (vqmovun, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_1_UNARY (vqmovun, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+#define TEST_2_UNARY(name, rettype, intype, fs, rs) \\\n+  rettype test_2_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(intype a, intype b) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a), \\\n+\t\t\t\t\tname ## _ ## fs (b)); \\\n+\t}\n+\n+TEST_2_UNARY (vmovn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_UNARY (vmovn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_UNARY (vmovn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_UNARY (vmovn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_UNARY (vmovn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_UNARY (vmovn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_UNARY (vqmovn, int8x16_t, int16x8_t, s16, s8)\n+TEST_2_UNARY (vqmovn, int16x8_t, int32x4_t, s32, s16)\n+TEST_2_UNARY (vqmovn, int32x4_t, int64x2_t, s64, s32)\n+TEST_2_UNARY (vqmovn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_2_UNARY (vqmovn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_2_UNARY (vqmovn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_2_UNARY (vqmovun, uint8x16_t, int16x8_t, s16, u8)\n+TEST_2_UNARY (vqmovun, uint16x8_t, int32x4_t, s32, u16)\n+TEST_2_UNARY (vqmovun, uint32x4_t, int64x2_t, s64, u32)\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddhn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsubhn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trsubhn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\traddhn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trshrn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tshrn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 12} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtun2\\\\tv\" 6} }  */"}, {"sha": "9ef001eb3bad40ea09008d1d79b2211ff81f911a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulx_laneq_f64_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_laneq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_laneq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_laneq_f64_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -72,5 +72,5 @@ main (void)\n   set_and_test_case3 ();\n   return 0;\n }\n-/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[dD\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[dD\\]\\\\\\[1\\\\\\]\\n\" 1 } } */"}, {"sha": "232ade910472bf2ea3aa182f4216f55c8403b45b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxd_laneq_f64_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_laneq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_laneq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_laneq_f64_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -58,5 +58,5 @@ main (void)\n   set_and_test_case3 ();\n   return 0;\n }\n-/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[dD\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[dD\\]\\\\\\[1\\\\\\]\\n\" 1 } } */"}, {"sha": "37aa0ec270c29d998973ef37acd4d06470caf1f1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxs_lane_f32_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_lane_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_lane_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_lane_f32_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -57,5 +57,5 @@ main (void)\n   set_and_test_case3 ();\n   return 0;\n }\n-/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[1\\\\\\]\\n\" 1 } } */"}, {"sha": "c9f2484975a66afd7d69e7fc1d9ea023a655a4d6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxs_laneq_f32_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_laneq_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_laneq_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_laneq_f32_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -79,7 +79,7 @@ main (void)\n   set_and_test_case3 ();\n   return 0;\n }\n-/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[1\\\\\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[2\\\\\\]\\n\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[3\\\\\\]\\n\" 1 } } */"}, {"sha": "6b96d1cbf0fa0de7c79811abcce25990867549ab", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_lane_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmlalh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n   return vqdmlalh_lane_s16 (a, b, c, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "a780ddbe2f90a0750497448ed05f0be61bd173c0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlals_lane_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmlals_lane_s32 (int64_t a, int32_t b, int32x2_t c)\n   return vqdmlals_lane_s32 (a, b, c, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "8bbac1a3c59f60844fb75aeec57adf1b8b830d2a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_lane_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmlslh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n   return vqdmlslh_lane_s16 (a, b, c, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "069ba918d5bbae20bda5fa6b3c23e41dd8068b40", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsls_lane_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmlsls_lane_s32 (int64_t a, int32_t b, int32x2_t c)\n   return vqdmlsls_lane_s32 (a, b, c, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "fcd496b1aaa773204053bec6a0d3b764a71fcf63", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmullh_lane_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmullh_lane_s16 (int16_t a, int16x4_t b)\n   return vqdmullh_lane_s16 (a, b, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "db77fff27f3ec4838f9e2d06f0d9cede495dedac", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmullh_laneq_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_laneq_s16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmullh_laneq_s16 (int16_t a, int16x8_t b)\n   return vqdmullh_laneq_s16 (a, b, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "04bbe7f9daf19b93ef48779452ff03898cc62c19", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulls_lane_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmulls_lane_s32 (int32_t a, int32x2_t b)\n   return vqdmulls_lane_s32 (a, b, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "e8e236894fbb7d029995dcb7f9938c4f0c4511f2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulls_laneq_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_laneq_s32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -11,4 +11,4 @@ t_vqdmulls_laneq_s32 (int32_t a, int32x4_t b)\n   return vqdmulls_laneq_s32 (a, b, 0);\n }\n \n-/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]\\n\" 1 } } */"}, {"sha": "14c1f5ab4c2de84bf923eae5ae26e1bdd81cd6ef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/dup_lane_1.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -56,15 +56,27 @@ TEST_ALL (DUP_LANE)\n \n /* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n \n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, d[0-9]} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[0\\]} 2 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[3\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, s[0-9]} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[0\\]} 2 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[5\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[7\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, h[0-9]} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[0\\]} 2 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[6\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[15\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[0\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, b[0-9]} 1 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[0\\]} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[19\\]} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[31\\]} 1 } } */"}, {"sha": "1a926dbb76fb42ab4bcfa18922fdbb2366d04e6e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -56,15 +56,15 @@ typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "1c54d10cd348f8c81b6369b7b180e30580c8988d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -56,15 +56,15 @@ typedef _Float16 vnx16hf __attribute__((vector_size (64)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "501b9f3027128d3297ef77694f6dbcf1fb4d9824", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -77,7 +77,7 @@ typedef _Float16 vnx32hf __attribute__((vector_size (128)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 5 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -86,7 +86,7 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 5 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "94d31554b0a41822cb472522948d8a3bb0765f1e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -84,7 +84,7 @@ typedef _Float16 v128hf __attribute__((vector_size (256)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 6 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -93,7 +93,7 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 6 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "80ee176d1807bf628ad47551d69ff5d84deda79e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/live_1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flive_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flive_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flive_1.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -32,10 +32,9 @@ TEST_ALL (EXTRACT_LAST)\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7].s, } 4 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7].d, } 4 } } */\n \n-/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "0cadd19c4dccad85294d9bdc14d0050115ab6fd4", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1cq_u32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -31,5 +31,5 @@ uint32_t foo (void)\n TEST_SHA1C_VEC_SELECT (GET_LANE)\n \n /* { dg-final { scan-assembler-times {sha1c.32\\tq[0-9]+, q[0-9]+} 5 } } */\n-/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n-/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 3 } } */"}, {"sha": "33af705c59e390843e7c2dfca7d332938a8bab60", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1h_u32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -27,5 +27,5 @@ uint32_t foo (void)\n TEST_SHA1H_VEC_SELECT (GET_LANE)\n \n /* { dg-final { scan-assembler-times {sha1h.32\\tq[0-9]+, q[0-9]+} 5 } } */\n-/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n-/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 8 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 3 } } */"}, {"sha": "bdd1c4f3315958ac8d8b32e8058a2158cb332080", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1mq_u32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -31,5 +31,5 @@ uint32_t foo (void)\n TEST_SHA1M_VEC_SELECT (GET_LANE)\n \n /* { dg-final { scan-assembler-times {sha1m.32\\tq[0-9]+, q[0-9]+} 5 } } */\n-/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n-/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 3 } } */"}, {"sha": "d48a07c6fa4ea9b029d8e1d2a822437be4c7a6bd", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1pq_u32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -31,5 +31,5 @@ uint32_t foo (void)\n TEST_SHA1P_VEC_SELECT (GET_LANE)\n \n /* { dg-final { scan-assembler-times {sha1p.32\\tq[0-9]+, q[0-9]+} 5 } } */\n-/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 3 } } */\n-/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vdup.32\\tq[0-9]+, r[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-times {vmov.32\\tr[0-9]+, d[0-9]+\\[[0-9]+\\]+} 3 } } */"}, {"sha": "a92e1d47393ac1e6d5d39d967787c4a88f16d0f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n float16_t\n foo (float16x8_t a)\n {\n-  return vgetq_lane_f16 (a, 0);\n+  return vgetq_lane_f16 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u16\"  }  } */\n \n float16_t\n foo1 (float16x8_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u16\"  }  } */"}, {"sha": "98319eff5c0f5825edd3563b8fa018a437fa3458", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n float32_t\n foo (float32x4_t a)\n {\n-  return vgetq_lane_f32 (a, 0);\n+  return vgetq_lane_f32 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n float32_t\n foo1 (float32x4_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "c9eefeb9972eaac8168218b5c10c5efaa2e59fce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n int16_t\n foo (int16x8_t a)\n {\n-  return vgetq_lane_s16 (a, 0);\n+  return vgetq_lane_s16 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.s16\"  }  } */\n \n int16_t\n foo1 (int16x8_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.s16\"  }  } */"}, {"sha": "0925a25bb45df9708d46038b5f534a02a2d6dbbb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n int32_t\n foo (int32x4_t a)\n {\n-  return vgetq_lane_s32 (a, 0);\n+  return vgetq_lane_s32 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n int32_t\n foo1 (int32x4_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "5b76e3da5562fb8e2a2a49de851bed3329bc6ea0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n int8_t\n foo (int8x16_t a)\n {\n-  return vgetq_lane_s8 (a, 0);\n+  return vgetq_lane_s8 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.s8\"  }  } */\n \n int8_t\n foo1 (int8x16_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.s8\"  }  } */"}, {"sha": "c4a3fb0d3794c67a789c3c479fa7ca6415da35c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n uint16_t\n foo (uint16x8_t a)\n {\n-  return vgetq_lane_u16 (a, 0);\n+  return vgetq_lane_u16 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u16\"  }  } */\n \n uint16_t\n foo1 (uint16x8_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u16\"  }  } */"}, {"sha": "d79837023248e84d4c30774afc07e243edc8ba65", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n uint32_t\n foo (uint32x4_t a)\n {\n-  return vgetq_lane_u32 (a, 0);\n+  return vgetq_lane_u32 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n uint32_t\n foo1 (uint32x4_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "631d995dc17f99c7a30cb9cbf56883f818fa2b1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8695bf78dad1a42636775843ca832a2f4dba4da3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c?ref=8695bf78dad1a42636775843ca832a2f4dba4da3", "patch": "@@ -8,15 +8,15 @@\n uint8_t\n foo (uint8x16_t a)\n {\n-  return vgetq_lane_u8 (a, 0);\n+  return vgetq_lane_u8 (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u8\"  }  } */\n \n uint8_t\n foo1 (uint8x16_t a)\n {\n-  return vgetq_lane (a, 0);\n+  return vgetq_lane (a, 1);\n }\n \n /* { dg-final { scan-assembler \"vmov.u8\"  }  } */"}]}