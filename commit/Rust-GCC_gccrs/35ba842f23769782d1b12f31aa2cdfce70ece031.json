{"sha": "35ba842f23769782d1b12f31aa2cdfce70ece031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViYTg0MmYyMzc2OTc4MmQxYjEyZjMxYWEyY2RmY2U3MGVjZTAzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-11-19T13:14:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-11-19T13:14:20Z"}, "message": "arm: Fixes for asm-flags vs thumb1 and ilp32\n\nThumb1 cannot support asm-flags currently, because we don't expose the\nflags register to the compiler.  Disable the support for that case.\n\nAdjust the asm-flag-6 test for aarch64 ilp32 correctness.\n\ngcc/\n\t* config/arm/arm-c.c (arm_cpu_builtins): Use def_or_undef_macro\n\tto define __GCC_ASM_FLAG_OUTPUTS__.\n\t* config/arm/arm.c (thumb1_md_asm_adjust): New function.\n\t(arm_option_params_internal): Swap out targetm.md_asm_adjust\n\tdepending on TARGET_THUMB1.\n\t* doc/extend.texi (FlagOutputOperands): Document thumb1 restriction.\n\ngcc/testsuite/\n\t* testsuite/gcc.target/arm/asm-flag-3.c: Skip for thumb1.\n\t* testsuite/gcc.target/arm/asm-flag-5.c: Likewise.\n\t* testsuite/gcc.target/arm/asm-flag-6.c: Likewise.\n\t* testsuite/gcc.target/arm/asm-flag-4.c: New test.\n\n\t* testsuite/gcc.target/aarch64/asm-flag-6.c: Use %w for\n\tasm inputs to cmp instruction for ILP32.\n\nFrom-SVN: r278443", "tree": {"sha": "1fe9113dde8e1c6c19097c649c50b8133605d7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe9113dde8e1c6c19097c649c50b8133605d7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ba842f23769782d1b12f31aa2cdfce70ece031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ba842f23769782d1b12f31aa2cdfce70ece031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ba842f23769782d1b12f31aa2cdfce70ece031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ba842f23769782d1b12f31aa2cdfce70ece031/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ecaaf98dc6678fab9607822ec083830c536eb68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecaaf98dc6678fab9607822ec083830c536eb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ecaaf98dc6678fab9607822ec083830c536eb68"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "1449ea4296216cd237751ca9e4fe526e0e9bbb18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,3 +1,12 @@\n+2019-11-19  Richard Henderson  <richard.henderson@linaro.org>\n+\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Use def_or_undef_macro\n+\tto define __GCC_ASM_FLAG_OUTPUTS__.\n+\t* config/arm/arm.c (thumb1_md_asm_adjust): New function.\n+\t(arm_option_params_internal): Swap out targetm.md_asm_adjust\n+\tdepending on TARGET_THUMB1.\n+\t* doc/extend.texi (FlagOutputOperands): Document thumb1 restriction.\n+\n 2019-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92549"}, {"sha": "546b35a5cbde2d877ed2e2d4a40c3dc1fcbdfb3d", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -122,7 +122,8 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n   if (arm_arch_notm)\n     builtin_define (\"__ARM_ARCH_ISA_ARM\");\n   builtin_define (\"__APCS_32__\");\n-  builtin_define (\"__GCC_ASM_FLAG_OUTPUTS__\");\n+\n+  def_or_undef_macro (pfile, \"__GCC_ASM_FLAG_OUTPUTS__\", !TARGET_THUMB1);\n \n   def_or_undef_macro (pfile, \"__thumb__\", TARGET_THUMB);\n   def_or_undef_macro (pfile, \"__thumb2__\", TARGET_THUMB2);"}, {"sha": "a6b401b7f2e3738ff68316bd83d6e5a2bcf0e7d7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -325,6 +325,9 @@ static unsigned int arm_hard_regno_nregs (unsigned int, machine_mode);\n static bool arm_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool arm_modes_tieable_p (machine_mode, machine_mode);\n static HOST_WIDE_INT arm_constant_alignment (const_tree, HOST_WIDE_INT);\n+static rtx_insn * thumb1_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n+\t\t\t\t\tvec<const char *> &, vec<rtx> &,\n+\t\t\t\t\tHARD_REG_SET &);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -2941,6 +2944,11 @@ arm_option_params_internal (void)\n   /* For THUMB2, we limit the conditional sequence to one IT block.  */\n   if (TARGET_THUMB2)\n     max_insns_skipped = MIN (max_insns_skipped, MAX_INSN_PER_IT_BLOCK);\n+\n+  if (TARGET_THUMB1)\n+    targetm.md_asm_adjust = thumb1_md_asm_adjust;\n+  else\n+    targetm.md_asm_adjust = arm_md_asm_adjust;\n }\n \n /* True if -mflip-thumb should next add an attribute for the default\n@@ -32528,6 +32536,23 @@ arm_run_selftests (void)\n #define TARGET_RUN_TARGET_SELFTESTS selftest::arm_run_selftests\n #endif /* CHECKING_P */\n \n+/* Worker function for TARGET_MD_ASM_ADJUST, while in thumb1 mode.\n+   Unlike the arm version, we do NOT implement asm flag outputs.  */\n+\n+rtx_insn *\n+thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n+\t\t      vec<const char *> &constraints,\n+\t\t      vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n+{\n+  for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n+    if (strncmp (constraints[i], \"=@cc\", 4) == 0)\n+      {\n+\tsorry (\"asm flags not supported in thumb1 mode\");\n+\tbreak;\n+      }\n+  return NULL;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arm.h\""}, {"sha": "62a98e939c8fb5edf47180b675766eae1a0494a5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -9810,6 +9810,8 @@ signed greater than\n signed less than equal\n @end table\n \n+The flag output constraints are not supported in thumb1 mode.\n+\n @item x86 family\n The flag output constraints for the x86 family are of the form\n @samp{=@@cc@var{cond}} where @var{cond} is one of the standard"}, {"sha": "1eb5f3cb8fa2895253bcdfb1b995dd0dad219b23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,3 +1,13 @@\n+2019-11-19  Richard Henderson  <richard.henderson@linaro.org>\n+\n+\t* testsuite/gcc.target/arm/asm-flag-3.c: Skip for thumb1.\n+\t* testsuite/gcc.target/arm/asm-flag-5.c: Likewise.\n+\t* testsuite/gcc.target/arm/asm-flag-6.c: Likewise.\n+\t* testsuite/gcc.target/arm/asm-flag-4.c: New test.\n+\n+\t* testsuite/gcc.target/aarch64/asm-flag-6.c: Use %w for\n+\tasm inputs to cmp instruction for ILP32.\n+\n 2019-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92549"}, {"sha": "54d7fbf317d1f4e20e9035430614512783138022", "filename": "gcc/testsuite/gcc.target/aarch64/asm-flag-6.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-6.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,6 +1,12 @@\n /* Executable testcase for 'output flags.'  */\n /* { dg-do run } */\n \n+#ifdef __LP64__\n+#define W \"\"\n+#else\n+#define W \"w\"\n+#endif\n+\n int test_bits (long nzcv)\n {\n   long n, z, c, v;\n@@ -16,7 +22,7 @@ int test_cmps (long x, long y)\n {\n   long gt, lt, ge, le;\n \n-  __asm__ (\"cmp %[x], %[y]\"\n+  __asm__ (\"cmp %\"W\"[x], %\"W\"[y]\"\n \t   : \"=@ccgt\"(gt), \"=@cclt\"(lt), \"=@ccge\"(ge), \"=@ccle\"(le)\n \t   : [x] \"r\"(x), [y] \"r\"(y));\n \n@@ -30,7 +36,7 @@ int test_cmpu (unsigned long x, unsigned long y)\n {\n   long gt, lt, ge, le;\n \n-  __asm__ (\"cmp %[x], %[y]\"\n+  __asm__ (\"cmp %\"W\"[x], %\"W\"[y]\"\n \t   : \"=@cchi\"(gt), \"=@cclo\"(lt), \"=@cchs\"(ge), \"=@ccls\"(le)\n \t   : [x] \"r\"(x), [y] \"r\"(y));\n "}, {"sha": "97104d3ac73ad95f90ca4ec71f3d968c495283f8", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-1.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,6 +1,7 @@\n /* Test the valid @cc<cc> asm flag outputs.  */\n /* { dg-do compile } */\n /* { dg-options \"-O\" } */\n+/* { dg-skip-if \"\" { arm_thumb1 } } */\n \n #ifndef __GCC_ASM_FLAG_OUTPUTS__\n #error \"missing preprocessor define\""}, {"sha": "e2d616051cc5262b21b219b9c3016ab6a646cf17", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-3.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,6 +1,7 @@\n /* Test some of the valid @cc<cc> asm flag outputs.  */\n /* { dg-do compile } */\n /* { dg-options \"-O\" } */\n+/* { dg-skip-if \"\" { arm_thumb1 } } */\n \n #define DO(C) \\\n void f##C(void) { char x; asm(\"\" : \"=@cc\"#C(x)); if (!x) asm(\"\"); asm(\"\"); }"}, {"sha": "3791cadda023f86fc670c2c79909f92dbd200ad3", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-4.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -0,0 +1,13 @@\n+/* Test that we do not ice in thumb1 mode */\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv4t\" } */\n+\n+void __attribute__((target(\"arm\"))) f(char *out)\n+{\n+  asm(\"\" : \"=@ccne\"(out[0]));\n+}\n+\n+void __attribute__((target(\"thumb\"))) g(char *out)\n+{\n+  asm(\"\" : \"=@ccne\"(out[0]));  /* { dg-error asm flags not supported } */\n+}"}, {"sha": "9a8ff586c297371b357310c5867dfdc16ef87000", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-5.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,6 +1,7 @@\n /* Test error conditions of asm flag outputs.  */\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n+/* { dg-skip-if \"\" { arm_thumb1 } } */\n \n void f_B(void) { _Bool x; asm(\"\" : \"=@cccc\"(x)); }\n void f_c(void) { char x; asm(\"\" : \"=@cccc\"(x)); }"}, {"sha": "d862db4e106301952a5707df0965703d9e76bce6", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ba842f23769782d1b12f31aa2cdfce70ece031/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-6.c?ref=35ba842f23769782d1b12f31aa2cdfce70ece031", "patch": "@@ -1,5 +1,6 @@\n /* Executable testcase for 'output flags.'  */\n /* { dg-do run } */\n+/* { dg-skip-if \"\" { arm_thumb1 } } */\n \n int test_bits (long nzcv)\n {"}]}