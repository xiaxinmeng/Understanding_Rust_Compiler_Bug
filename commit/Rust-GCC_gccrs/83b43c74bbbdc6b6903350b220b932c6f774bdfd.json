{"sha": "83b43c74bbbdc6b6903350b220b932c6f774bdfd", "node_id": "C_kwDOANBUbNoAKDgzYjQzYzc0YmJiZGM2YjY5MDMzNTBiMjIwYjkzMmM2Zjc3NGJkZmQ", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-04-06T03:18:30Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-04-06T03:18:30Z"}, "message": "rs6000: Support UN[GL][ET] in rs6000_maybe_emit_maxc_minc [PR105002]\n\nCommit r12-7687 exposed one miss optimization chance in function\nrs6000_maybe_emit_maxc_minc, for now it only considers comparison\ncodes GE/GT/LE/LT, but it can support more variants with codes\nUNLT/UNLE/UNGT/UNGE by reversing them into the equivalent ones\nwith GE/GT/LE/LT.\n\ngcc/ChangeLog:\n\n\tPR target/105002\n\t* config/rs6000/rs6000.cc (rs6000_maybe_emit_maxc_minc): Support more\n\tcomparison codes UNLT/UNLE/UNGT/UNGE.", "tree": {"sha": "f52493d6832c2513e0e32d760107fe610e548bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52493d6832c2513e0e32d760107fe610e548bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b43c74bbbdc6b6903350b220b932c6f774bdfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b43c74bbbdc6b6903350b220b932c6f774bdfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b43c74bbbdc6b6903350b220b932c6f774bdfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b43c74bbbdc6b6903350b220b932c6f774bdfd/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d84ed6812dce4a50e64334e7cc4abdeebe41523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d84ed6812dce4a50e64334e7cc4abdeebe41523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d84ed6812dce4a50e64334e7cc4abdeebe41523"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "ceaddafd33b0b405f480ecc2294437852adabc96", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b43c74bbbdc6b6903350b220b932c6f774bdfd/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b43c74bbbdc6b6903350b220b932c6f774bdfd/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=83b43c74bbbdc6b6903350b220b932c6f774bdfd", "patch": "@@ -15867,11 +15867,30 @@ rs6000_maybe_emit_maxc_minc (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   rtx op1 = XEXP (op, 1);\n   machine_mode compare_mode = GET_MODE (op0);\n   machine_mode result_mode = GET_MODE (dest);\n-  bool max_p = false;\n \n   if (result_mode != compare_mode)\n     return false;\n \n+  /* See the comments of this function, it simply expects GE/GT/LE/LT in\n+     the checks, but for the reversible equivalent UNLT/UNLE/UNGT/UNGE,\n+     we need to do the reversions first to make the following checks\n+     support fewer cases, like:\n+\n+\t(a UNLT b) ? op1 : op2 =>  (a >= b) ? op2 : op1;\n+\t(a UNLE b) ? op1 : op2 =>  (a >  b) ? op2 : op1;\n+\t(a UNGT b) ? op1 : op2 =>  (a <= b) ? op2 : op1;\n+\t(a UNGE b) ? op1 : op2 =>  (a <  b) ? op2 : op1;\n+\n+     By the way, if we see these UNLT/UNLE/UNGT/UNGE it's guaranteed\n+     that we have 4-way condition codes (LT/GT/EQ/UN), so we do not\n+     have to check for fast-math or the like.  */\n+  if (code == UNGE || code == UNGT || code == UNLE || code == UNLT)\n+    {\n+      code = reverse_condition_maybe_unordered (code);\n+      std::swap (true_cond, false_cond);\n+    }\n+\n+  bool max_p;\n   if (code == GE || code == GT)\n     max_p = true;\n   else if (code == LE || code == LT)"}]}