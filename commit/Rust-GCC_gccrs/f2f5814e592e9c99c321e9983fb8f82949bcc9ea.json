{"sha": "f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmNTgxNGU1OTJlOWM5OWMzMjFlOTk4M2ZiOGY4Mjk0OWJjYzllYQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-10-25T13:02:32Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-10-25T13:02:32Z"}, "message": "Added missing testcases of r229294 for patch of\nPR fortran/66927.\n\nFrom-SVN: r229295", "tree": {"sha": "b30749026e3253b2f80b5ac1ecbc292a374ab1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b30749026e3253b2f80b5ac1ecbc292a374ab1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f5814e592e9c99c321e9983fb8f82949bcc9ea/comments", "author": null, "committer": null, "parents": [{"sha": "b8ac4f3b22887143eec7e51497e95ff7301631df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ac4f3b22887143eec7e51497e95ff7301631df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ac4f3b22887143eec7e51497e95ff7301631df"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "b9c68b4b45bdc4ad89d5c6eca5a9d85594f376e0", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_10.f08", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f5814e592e9c99c321e9983fb8f82949bcc9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f5814e592e9c99c321e9983fb8f82949bcc9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08?ref=f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "patch": "@@ -0,0 +1,51 @@\n+!{ dg-do run }\n+!\n+! Testcase for pr66927\n+! Contributed by Juergen Reuter <juergen.reuter@desy.de>\n+\n+module processes\n+  implicit none\n+  private\n+\n+  type :: t1_t\n+     real :: p = 0.0\n+  end type t1_t\n+\n+  type :: t2_t\n+     private\n+     type(t1_t), dimension(:), allocatable :: p\n+   contains\n+     procedure :: func => t2_func\n+  end type t2_t\n+\n+  type, public :: t3_t\n+    type(t2_t), public :: int_born\n+  end type t3_t\n+\n+  public :: evaluate\n+\n+contains\n+\n+  function t2_func (int) result (p)\n+    class(t2_t), intent(in) :: int\n+    type(t1_t), dimension(:), allocatable :: p\n+    allocate(p(5))\n+  end function t2_func\n+\n+  subroutine evaluate (t3)\n+    class(t3_t), intent(inout) :: t3\n+    type(t1_t), dimension(:), allocatable :: p_born\n+    allocate (p_born(1:size(t3%int_born%func ())), &\n+         source = t3%int_born%func ())\n+    if (.not. allocated(p_born)) call abort()\n+    if (size(p_born) /= 5) call abort()\n+  end subroutine evaluate\n+\n+end module processes\n+\n+program pr66927\n+use processes\n+type(t3_t) :: o\n+call evaluate(o)\n+end\n+"}, {"sha": "5491b49218d3434de002a8a8883d084ff841d15f", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_11.f08", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f5814e592e9c99c321e9983fb8f82949bcc9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f5814e592e9c99c321e9983fb8f82949bcc9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08?ref=f2f5814e592e9c99c321e9983fb8f82949bcc9ea", "patch": "@@ -0,0 +1,51 @@\n+!{ dg-do run }\n+!\n+! Testcase for pr66927, pr67123\n+! Contributed by Juergen Reuter <juergen.reuter@desy.de>\n+\n+module processes\n+  implicit none\n+  private\n+\n+  type :: t1_t\n+     real :: p = 0.0\n+  end type t1_t\n+\n+  type :: t2_t\n+     private\n+     type(t1_t), dimension(:), allocatable :: p\n+   contains\n+     procedure :: func => t2_func\n+  end type t2_t\n+\n+  type, public :: t3_t\n+    type(t2_t), public :: int_born\n+  end type t3_t\n+\n+  public :: evaluate\n+\n+contains\n+\n+  function t2_func (int) result (p)\n+    class(t2_t), intent(in) :: int\n+    class(t1_t), dimension(:), allocatable :: p\n+    allocate(p(5))\n+  end function t2_func\n+\n+  subroutine evaluate (t3)\n+    class(t3_t), intent(inout) :: t3\n+    type(t1_t), dimension(:), allocatable :: p_born\n+    allocate (p_born(1:size(t3%int_born%func ())), &\n+         source = t3%int_born%func ())\n+    if (.not. allocated(p_born)) call abort()\n+    if (size(p_born) /= 5) call abort()\n+  end subroutine evaluate\n+\n+end module processes\n+\n+program pr66927\n+use processes\n+type(t3_t) :: o\n+call evaluate(o)\n+end\n+"}]}