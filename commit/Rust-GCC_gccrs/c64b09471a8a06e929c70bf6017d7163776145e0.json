{"sha": "c64b09471a8a06e929c70bf6017d7163776145e0", "node_id": "C_kwDOANBUbNoAKGM2NGIwOTQ3MWE4YTA2ZTkyOWM3MGJmNjAxN2Q3MTYzNzc2MTQ1ZTA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-03T00:17:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-03T00:17:21Z"}, "message": "Daily bump.", "tree": {"sha": "de0a7c24e9dcae1952f5663599ed4be5704e7c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de0a7c24e9dcae1952f5663599ed4be5704e7c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c64b09471a8a06e929c70bf6017d7163776145e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64b09471a8a06e929c70bf6017d7163776145e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64b09471a8a06e929c70bf6017d7163776145e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64b09471a8a06e929c70bf6017d7163776145e0/comments", "author": null, "committer": null, "parents": [{"sha": "bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedfca647a9e9c1adadd8924f3ee0ab4189424e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedfca647a9e9c1adadd8924f3ee0ab4189424e0"}], "stats": {"total": 573, "additions": 572, "deletions": 1}, "files": [{"sha": "ca2daf31c0b4424a6f80401edb4325d02551a003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,322 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* doc/invoke.texi (Warning Options): Add -Wxor-used-as-pow.\n+\n+2022-09-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/105659\n+\t* config.gcc: Set tm_d_file to ${cpu_type}/${cpu_type}-d.h.\n+\t* config/aarch64/aarch64-d.cc: Include tm_d.h.\n+\t* config/aarch64/aarch64-protos.h (aarch64_d_target_versions): Move to\n+\tconfig/aarch64/aarch64-d.h.\n+\t(aarch64_d_register_target_info): Likewise.\n+\t* config/aarch64/aarch64.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/arm/arm-d.cc: Include tm_d.h and arm-protos.h instead of\n+\ttm_p.h.\n+\t* config/arm/arm-protos.h (arm_d_target_versions): Move to\n+\tconfig/arm/arm-d.h.\n+\t(arm_d_register_target_info): Likewise.\n+\t* config/arm/arm.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/default-d.cc: Remove memmodel.h include.\n+\t* config/freebsd-d.cc: Include tm_d.h instead of tm_p.h.\n+\t* config/glibc-d.cc: Likewise.\n+\t* config/i386/i386-d.cc: Include tm_d.h.\n+\t* config/i386/i386-protos.h (ix86_d_target_versions): Move to\n+\tconfig/i386/i386-d.h.\n+\t(ix86_d_register_target_info): Likewise.\n+\t(ix86_d_has_stdcall_convention): Likewise.\n+\t* config/i386/i386.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t(TARGET_D_HAS_STDCALL_CONVENTION): Likewise.\n+\t* config/i386/winnt-d.cc: Include tm_d.h instead of tm_p.h.\n+\t* config/mips/mips-d.cc: Include tm_d.h.\n+\t* config/mips/mips-protos.h (mips_d_target_versions): Move to\n+\tconfig/mips/mips-d.h.\n+\t(mips_d_register_target_info): Likewise.\n+\t* config/mips/mips.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/netbsd-d.cc: Include tm_d.h instead of tm.h and memmodel.h.\n+\t* config/openbsd-d.cc: Likewise.\n+\t* config/pa/pa-d.cc: Include tm_d.h.\n+\t* config/pa/pa-protos.h (pa_d_target_versions): Move to\n+\tconfig/pa/pa-d.h.\n+\t(pa_d_register_target_info): Likewise.\n+\t* config/pa/pa.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/riscv/riscv-d.cc: Include tm_d.h.\n+\t* config/riscv/riscv-protos.h (riscv_d_target_versions): Move to\n+\tconfig/riscv/riscv-d.h.\n+\t(riscv_d_register_target_info): Likewise.\n+\t* config/riscv/riscv.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/rs6000/rs6000-d.cc: Include tm_d.h.\n+\t* config/rs6000/rs6000-protos.h (rs6000_d_target_versions): Move to\n+\tconfig/rs6000/rs6000-d.h.\n+\t(rs6000_d_register_target_info): Likewise.\n+\t* config/rs6000/rs6000.h (TARGET_D_CPU_VERSIONS) Likewise.:\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO) Likewise.:\n+\t* config/s390/s390-d.cc: Include tm_d.h.\n+\t* config/s390/s390-protos.h (s390_d_target_versions): Move to\n+\tconfig/s390/s390-d.h.\n+\t(s390_d_register_target_info): Likewise.\n+\t* config/s390/s390.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* config/sol2-d.cc: Include tm_d.h instead of tm.h and memmodel.h.\n+\t* config/sparc/sparc-d.cc: Include tm_d.h.\n+\t* config/sparc/sparc-protos.h (sparc_d_target_versions): Move to\n+\tconfig/sparc/sparc-d.h.\n+\t(sparc_d_register_target_info): Likewise.\n+\t* config/sparc/sparc.h (TARGET_D_CPU_VERSIONS): Likewise.\n+\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n+\t* configure: Regenerate.\n+\t* configure.ac (tm_d_file): Remove defaults.h.\n+\t(tm_d_include_list): Remove options.h and insn-constants.h.\n+\t* config/aarch64/aarch64-d.h: New file.\n+\t* config/arm/arm-d.h: New file.\n+\t* config/i386/i386-d.h: New file.\n+\t* config/mips/mips-d.h: New file.\n+\t* config/pa/pa-d.h: New file.\n+\t* config/riscv/riscv-d.h: New file.\n+\t* config/rs6000/rs6000-d.h: New file.\n+\t* config/s390/s390-d.h: New file.\n+\t* config/sparc/sparc-d.h: New file.\n+\n+2022-09-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* builtins.cc (fold_builtin_inf): Convert use of real_info to dconstinf.\n+\t(fold_builtin_fpclassify): Same.\n+\t* fold-const-call.cc (fold_const_call_cc): Same.\n+\t* match.pd: Same.\n+\t* omp-low.cc (omp_reduction_init_op): Same.\n+\t* realmpfr.cc (real_from_mpfr): Same.\n+\t* tree.cc (build_complex_inf): Same.\n+\n+2022-09-02  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_mma_builtin): Use\n+\tNOP_EXPR for MMA pointer casting.\n+\n+2022-09-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.cc (vect_optimize_slp_pass::internal_node_cost):\n+\tReduce the fallback cost to 1.  Only use it if the number of\n+\tinput lanes is equal to the number of output lanes.\n+\n+2022-09-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/106787\n+\t* tree-vect-slp.cc (vect_map_to_instance): New function, split out\n+\tfrom...\n+\t(vect_bb_partition_graph_r): ...here.  Replace the visited set\n+\twith a map from nodes to instances.  Ensure that a node only\n+\tappears in one partition.\n+\t(vect_bb_partition_graph): Update accordingly.\n+\n+2022-09-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* timevar.def (TV_TREE_RPO_VN): New.\n+\t* tree-ssa-sccvn.h (do_rpo_vn): Remove one overload.\n+\t* tree-ssa-sccvn.cc (do_rpo_vn_1): Rename the worker.\n+\t(do_rpo_vn): Unify the public API, track with TV_TREE_RPO_VN.\n+\t(pass_fre::execute): Adjust.\n+\t* tree-ssa-uninit.cc (execute_early_warn_uninitialized): Adjust.\n+\n+2022-09-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106809\n+\t* tree-ssa-sccvn.cc (dominaged_by_p_w_unex): Check we have\n+\tmore than one successor before doing extra work.\n+\n+2022-09-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.cc: Include <vector>.\n+\t(struct riscv_multi_lib_info_t): New.\n+\t(riscv_subset_list::match_score): Ditto.\n+\t(find_last_appear_switch): Ditto.\n+\t(prefixed_with): Ditto.\n+\t(struct multi_lib_info_t): Ditto.\n+\t(riscv_current_arch_str): Ditto.\n+\t(riscv_current_abi_str): Ditto.\n+\t(riscv_multi_lib_info_t::parse): Ditto.\n+\t(riscv_check_cond): Ditto.\n+\t(riscv_check_conds): Ditto.\n+\t(riscv_compute_multilib): Ditto.\n+\t(TARGET_COMPUTE_MULTILIB): Defined.\n+\t* config/riscv/elf.h (LIB_SPEC): Call riscv_multi_lib_check if\n+\tdoing link.\n+\t(RISCV_USE_CUSTOMISED_MULTI_LIB): New.\n+\t* config/riscv/riscv.h (riscv_multi_lib_check): New.\n+\t(EXTRA_SPEC_FUNCTIONS): Add riscv_multi_lib_check.\n+\t* config/riscv/riscv-subset.h (riscv_subset_list::match_score): New.\n+\n+2022-09-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/common-target.def (compute_multilib): New.\n+\t* common/common-targhooks.h (default_compute_multilib): New.\n+\t* common/common-targhooks.cc (default_compute_multilib): New.\n+\t* doc/tm.texi.in (TARGET_COMPUTE_MULTILIB): New.\n+\t* doc/tm.texi: Regen.\n+\t* gcc.cc: Include common/common-target.h.\n+\t(set_multilib_dir) Call targetm_common.compute_multilib.\n+\t(SWITCH_LIVE): Move to opts.h.\n+\t(SWITCH_FALSE): Ditto.\n+\t(SWITCH_IGNORE): Ditto.\n+\t(SWITCH_IGNORE_PERMANENTLY): Ditto.\n+\t(SWITCH_KEEP_FOR_GCC): Ditto.\n+\t(struct switchstr): Ditto.\n+\t* opts.h (SWITCH_LIVE): Move from gcc.c.\n+\t(SWITCH_FALSE): Ditto.\n+\t(SWITCH_IGNORE): Ditto.\n+\t(SWITCH_IGNORE_PERMANENTLY): Ditto.\n+\t(SWITCH_KEEP_FOR_GCC): Ditto.\n+\t(struct switchstr): Ditto.\n+\n+2022-09-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/pdp11/pdp11.h (PREFERRED_DEBUGGING_TYPE): Disable\n+\tdebugging format.\n+\n+2022-09-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Remove -gstabs option support, DBX-related\n+\t  macros and DBX debugging info support.\n+\t* collect2.cc (scan_prog_file): Likewise.\n+\t* common.opt: Likewise.\n+\t* config.gcc: Likewise.\n+\t* config.in: Likewise.\n+\t* config/aarch64/aarch64-elf.h (DBX_DEBUGGING_INFO): Likewise.\n+\t* config/alpha/alpha.cc: Likewise.\n+\t* config/alpha/elf.h (ASM_SPEC): Likewise.\n+\t* config/arc/arc.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/arm/aout.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/arm/netbsd-elf.h (DBX_CONTIN_LENGTH): Likewise.\n+\t* config/darwin.h (DSYMUTIL_SPEC): Likewise.\n+\t(ASM_DEBUG_SPEC): Likewise.\n+\t(DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_USE_BINCL): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t(DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END): Likewise.\n+\t* config/epiphany/epiphany.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/i386/bsd.h (DBX_NO_XREFS): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/i386/gas.h (DBX_NO_XREFS): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ia64/sysv4.h (DBX_DEBUGGING_INFO): Likewise.\n+\t* config/m68k/linux.h (DBX_CONTIN_LENGTH): Likewise.\n+\t* config/m68k/openbsd.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t(DBX_CONTIN_CHAR): Likewise.\n+\t* config/mips/mips.cc (mips_output_filename): Likewise.\n+\t(mips_option_override): Likewise.\n+\t* config/mips/mips.h (SUBTARGET_ASM_DEBUGGING_SPEC): Likewise.\n+\t(DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t(DBX_REGISTER_NUMBER): Likewise.\n+\t(GP_DBX_FIRST): Likewise.\n+\t(FP_DBX_FIRST): Likewise.\n+\t(MD_DBX_FIRST): Likewise.\n+\t* config/nvptx/nvptx.cc: Likewise.\n+\t* config/openbsd.h (DBX_NO_XREFS): Likewise.\n+\t* config/pa/pa-64.h (DBX_DEBUGGING_INFO): Likewise.\n+\t* config/pa/pa.h (ASSEMBLER_DIALECT): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/pa/som.h (PREFERRED_DEBUGGING_TYPE): Likewise.\n+\t(DBX_USE_BINCL): Likewise.\n+\t(DBX_LINES_FUNCTION_RELATIVE): Likewise.\n+\t(DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END): Likewise.\n+\t* config/pdp11/pdp11.cc: Likewise.\n+\t* config/pdp11/pdp11.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(PREFERRED_DEBUGGING_TYPE): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t* config/rs6000/rs6000-builtin.cc: Likewise.\n+\t* config/rs6000/rs6000-call.cc: Likewise.\n+\t* config/rs6000/rs6000-logue.cc (defined): Likewise.\n+\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Likewise.\n+\t(HAVE_XCOFF_DWARF_EXTRAS): Likewise.\n+\t(rs6000_xcoff_declare_function_name): Likewise.\n+\t* config/rs6000/sysv4.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_FUNCTION_FIRST): Likewise.\n+\t* config/rs6000/xcoff.h (XCOFF_DEBUGGING_INFO): Likewise.\n+\t* config/rx/rx.h (DBX_DEBUGGING_INFO): Likewise.\n+\t* config/sh/elf.h (DBX_LINES_FUNCTION_RELATIVE): Likewise.\n+\t(DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END): Likewise.\n+\t* config/sol2.h (NO_DBX_BNSYM_ENSYM): Likewise.\n+\t* config/sparc/freebsd.h (DBX_CONTIN_CHAR): Likewise.\n+\t* config/sparc/netbsd-elf.h (DBX_CONTIN_CHAR): Likewise.\n+\t* config/sparc/sparc.h (DBX_CONTIN_LENGTH): Likewise.\n+\t* config/vax/vax.cc (vax_file_start): Likewise.\n+\t* config/vax/vax.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(DBX_CONTIN_LENGTH): Likewise.\n+\t(DBX_CONTIN_CHAR): Likewise.\n+\t(DBX_NO_XREFS): Likewise.\n+\t(DBX_STATIC_STAB_DATA_SECTION): Likewise.\n+\t* config/vx-common.h (DBX_DEBUGGING_INFO): Likewise.\n+\t(XCOFF_DEBUGGING_INFO): Likewise.\n+\t* configure: Regenerate. Likewise.\n+\t* configure.ac: Likewise.\n+\t* debug.h: Likewise.\n+\t* doc/install.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/passes.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tm.texi.in: Likewise.\n+\t* dwarf2asm.cc (XCOFF_DEBUGGING_INFO): Likewise.\n+\t(dw2_asm_output_nstring): Likewise.\n+\t(USE_LINKONCE_INDIRECT): Likewise.\n+\t* dwarf2out.cc (XCOFF_DEBUGGING_INFO): Likewise.\n+\t(HAVE_XCOFF_DWARF_EXTRAS): Likewise.\n+\t(output_fde): Likewise.\n+\t(output_call_frame_info): Likewise.\n+\t(have_macinfo): Likewise.\n+\t(add_AT_loc_list): Likewise.\n+\t(add_AT_view_list): Likewise.\n+\t(output_compilation_unit_header): Likewise.\n+\t(output_pubnames): Likewise.\n+\t(output_aranges): Likewise.\n+\t(output_line_info): Likewise.\n+\t(output_macinfo): Likewise.\n+\t(dwarf2out_finish): Likewise.\n+\t(dwarf2out_early_finish): Likewise.\n+\t* final.cc (final_scan_insn_1): Likewise.\n+\t(rest_of_handle_final): Likewise.\n+\t* flag-types.h (enum debug_info_type): Likewise.\n+\t(DBX_DEBUG): Likewise.\n+\t(XCOFF_DEBUG): Likewise.\n+\t* function.cc (defined): Likewise.\n+\t* gcc.cc (defined): Likewise.\n+\t(ASM_DEBUG_SPEC): Likewise.\n+\t(ASM_DEBUG_OPTION_SPEC): Likewise.\n+\t* opts.cc (common_handle_option): Likewise.\n+\t(set_debug_level): Likewise.\n+\t* system.h (fancy_abort): Likewise.\n+\t* target-def.h (TARGET_ASM_CONSTRUCTOR): Likewise.\n+\t(TARGET_ASM_DESTRUCTOR): Likewise.\n+\t* toplev.cc (defined): Likewise.\n+\t* varasm.cc: Likewise.\n+\t* config/dbxcoff.h: Removed.\n+\t* config/dbxelf.h: Removed.\n+\t* dbxout.cc: Removed.\n+\t* dbxout.h: Removed.\n+\t* gstab.h: Removed.\n+\t* stab.def: Removed.\n+\t* xcoffout.cc: Removed.\n+\t* xcoffout.h: Removed.\n+\n+2022-09-02  Simon Rainer  <gcc.gnu@vvalter.com>\n+\n+\tPR ipa/106627\n+\t* config/i386/i386-features.cc (ix86_get_function_versions_dispatcher):\n+\tSet TREE_NOTHROW correctly for dispatcher declaration.\n+\t* config/rs6000/rs6000.cc (rs6000_get_function_versions_dispatcher):\n+\tLikewise.\n+\n 2022-09-01  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR other/106782"}, {"sha": "e15744dd99e9641058efa7fb0a127d5bd5718d46", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1 +1 @@\n-20220902\n+20220903"}, {"sha": "7bad8a6290174c474965af18c462dde29eb022e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,96 @@\n+2022-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Be prepared for\n+\trewritten aggregates as expressions.\n+\n+2022-09-02  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return) Bypass creation of an actual\n+\tsubtype and unchecked conversion to that subtype when the underlying type\n+\tof the expression has discriminants without defaults.\n+\n+2022-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Check for the presence\n+\tof the Is_Constr_Subt_For_U_Nominal flag instead of the absence\n+\tof the Is_Constr_Subt_For_UN_Aliased flag on the subtype of the\n+\texpression of an object declaration before reusing this subtype.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Do not incorrectly\n+\tset the Is_Constr_Subt_For_UN_Aliased flag on the actual subtype\n+\tof an array with definite nominal subtype.  Remove useless test.\n+\n+2022-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst\n+\t(No_Dependence): Cite implicit dependences on the runtime library.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2022-09-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-strmap.adb: Add variants to simple and while loops.\n+\t* libgnat/a-strsea.adb: Idem.\n+\n+2022-09-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-expmod.adb (Lemma_Add_Mod): Add new lemma to factor\n+\tout a complex sub-proof.\n+\t(Exp_Modular): Add assertion to help proof.\n+\n+2022-09-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-widthu.adb (Lemma_Euclidean): Lemma to prove the\n+\trelation between the quotient/remainder of a division.\n+\n+2022-09-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb: Add or rework ghost code.\n+\t* libgnat/s-aridou.ads: Add Big_Positive subtype.\n+\n+2022-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst\n+\t(Non-Symbolic Traceback): Update section.\n+\t* gnat_rm.texi, gnat_ugn.texi, gnat-style.texi: Regenerate.\n+\n+2022-09-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-nbnbig.ads: Add Always_Return annotation.\n+\t* libgnat/s-vaispe.ads: New ghost unit for the specification of\n+\tSystem.Value_I. Restore proofs.\n+\t* libgnat/s-vauspe.ads: New ghost unit for the specification of\n+\tSystem.Value_U. Restore proofs.\n+\t* libgnat/s-valuei.adb: The specification only subprograms are\n+\tmoved to System.Value_I_Spec. Restore proofs.\n+\t* libgnat/s-valueu.adb: The specification only subprograms are\n+\tmoved to System.Value_U_Spec. Restore proofs.\n+\t* libgnat/s-valuti.ads\n+\t(Uns_Params): Generic unit used to bundle together the\n+\tspecification functions of System.Value_U_Spec.\n+\t(Int_Params): Generic unit used to bundle together the\n+\tspecification functions of System.Value_I_Spec.\n+\t* libgnat/s-imagef.adb: It is now possible to instantiate the\n+\tappropriate specification units instead of creating imported ghost\n+\tsubprograms.\n+\t* libgnat/s-imagei.adb: Update to refactoring of specifications\n+\tand fix proofs.\n+\t* libgnat/s-imageu.adb: Likewise.\n+\t* libgnat/s-imgint.ads: Ghost parameters are grouped together in a\n+\tpackage now.\n+\t* libgnat/s-imglli.ads: Likewise.\n+\t* libgnat/s-imgllu.ads: Likewise.\n+\t* libgnat/s-imgllli.ads: Likewise.\n+\t* libgnat/s-imglllu.ads: Likewise.\n+\t* libgnat/s-imguns.ads: Likewise.\n+\t* libgnat/s-vallli.ads: Likewise.\n+\t* libgnat/s-valllli.ads: Likewise.\n+\t* libgnat/s-imagei.ads: Likewise.\n+\t* libgnat/s-imageu.ads: Likewise.\n+\t* libgnat/s-vaispe.adb: Likewise.\n+\t* libgnat/s-valint.ads: Likewise.\n+\t* libgnat/s-valuei.ads: Likewise.\n+\t* libgnat/s-valueu.ads: Likewise.\n+\t* libgnat/s-vauspe.adb: Likewise.\n+\n 2022-07-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.cc (gnat_to_gnu) <N_Assignment_Statement>: Fix"}, {"sha": "360586e3fbfdcef1f6dfe220c74c1f260e056487", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,11 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* c-common.h (check_for_xor_used_as_pow): New decl.\n+\t* c-lex.cc (c_lex_with_flags): Add DECIMAL_INT to flags as appropriate.\n+\t* c-warn.cc (check_for_xor_used_as_pow): New.\n+\t* c.opt (Wxor-used-as-pow): New.\n+\n 2022-09-01  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.cc (c_common_nodes_and_builtins): Set TREE_STRING_FLAG on"}, {"sha": "fb3f97059b4b4d563b26f462b846854b6958eb3d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,21 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* c-parser.cc (c_parser_string_literal): Clear ret.m_decimal.\n+\t(c_parser_expr_no_commas): Likewise.\n+\t(c_parser_conditional_expression): Likewise.\n+\t(c_parser_binary_expression): Clear m_decimal when popping the\n+\tstack.\n+\t(c_parser_unary_expression): Clear ret.m_decimal.\n+\t(c_parser_has_attribute_expression): Likewise for result.\n+\t(c_parser_predefined_identifier): Likewise for expr.\n+\t(c_parser_postfix_expression): Likewise for expr.\n+\tSet expr.m_decimal when handling a CPP_NUMBER that was a decimal\n+\ttoken.\n+\t* c-tree.h (c_expr::m_decimal): New bitfield.\n+\t* c-typeck.cc (parser_build_binary_op): Clear result.m_decimal.\n+\t(parser_build_binary_op): Call check_for_xor_used_as_pow.\n+\n 2022-09-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.cc (grokparms): Handle () in a function declaration the"}, {"sha": "3d2cd755fc289a0609921bff179daaa397eee790", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,15 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* cp-tree.h (class cp_expr): Add bitfield m_decimal.  Clear it in\n+\texisting ctors.  Add ctor that allows specifying its value.\n+\t(cp_expr::decimal_p): New accessor.\n+\t* parser.cc (cp_parser_expression_stack_entry::flags): New field.\n+\t(cp_parser_primary_expression): Set m_decimal of cp_expr when\n+\thandling numbers.\n+\t(cp_parser_binary_expression): Extract flags from token when\n+\tpopulating stack.  Call check_for_xor_used_as_pow.\n+\n 2022-09-01  Marek Polacek  <polacek@redhat.com>\n \n \t* cp-tree.h (maybe_strip_ref_conversion): Remove."}, {"sha": "8baf15a19cbfc5cdd661709db3bcd6537f8bebf6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,9 @@\n+2022-09-02  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/99349\n+\t* decl.cc (match_data_constant): Avoid NULL pointer dereference.\n+\n 2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/106579"}, {"sha": "c3f3da10e5c26d4db077afc76267e841e5ab13cb", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,9 @@\n+2022-09-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* go-lang.cc (go_langhook_pushdecl): Remove -gstabs option support, DBX-related\n+\t  macros and DBX debugging info support.\n+\t* gospec.cc (lang_specific_driver): Likewise.\n+\n 2022-07-16  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-gcc.cc (Gcc_backend::struct_field_expression): Handle a void"}, {"sha": "96808a48f18478a9c55e608f765964e064578ff6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,62 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* c-c++-common/Wxor-used-as-pow-1.c: New test.\n+\t* c-c++-common/Wxor-used-as-pow-fixits.c: New test.\n+\t* g++.dg/parse/expr3.C: Convert 2 to 0x2 to suppress\n+\t-Wxor-used-as-pow.\n+\t* g++.dg/warn/Wparentheses-10.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-18.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-19.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-9.C: Likewise.\n+\t* g++.dg/warn/Wxor-used-as-pow-named-op.C: New test.\n+\t* gcc.dg/Wparentheses-6.c: Convert 2 to 0x2 to suppress\n+\t-Wxor-used-as-pow.\n+\t* gcc.dg/Wparentheses-7.c: Likewise.\n+\t* gcc.dg/precedence-1.c: Likewise.\n+\n+2022-09-02  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/99349\n+\t* gfortran.dg/pr99349.f90: New test.\n+\n+2022-09-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-layout-20.c: New test.\n+\n+2022-09-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-layout-19.c: New test.\n+\n+2022-09-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106809\n+\t* gcc.dg/torture/pr106809.c: New testcase.\n+\n+2022-09-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* lib/gcc-dg.exp: Remove -gstabs option support, DBX-related\n+\t  macros and DBX debugging info support.\n+\t* lib/gfortran-dg.exp: Likewise.\n+\t* lib/target-supports.exp: Likewise.\n+\t* g++.dg/cpp0x/alias-decl-debug-0.C: Removed.\n+\t* g++.dg/other/PR23205.C: Removed.\n+\t* g++.dg/other/pr23205-2.C: Removed.\n+\t* gcc.dg/20040813-1.c: Removed.\n+\t* gcc.dg/darwin-20040809-2.c: Removed.\n+\t* gcc.dg/debug/pr35154.c: Removed.\n+\t* gcc.dg/pr69471-2.c: Removed.\n+\t* gcc.target/powerpc/stabs-attrib-vect-darwin.c: Removed.\n+\t* gcc.target/s390/20041216-1.c: Removed.\n+\t* gfortran.dg/debug/pr35154-stabs.f: Removed.\n+\t* objc.dg/stabs-1.m: Removed.\n+\n+2022-09-02  Simon Rainer  <gcc.gnu@vvalter.com>\n+\n+\tPR ipa/106627\n+\t* g++.target/i386/pr106627.C: New test.\n+\n 2022-09-01  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/106707"}, {"sha": "c9f2f6bb066bc2de80c56e5d79350446e00bd115", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,11 @@\n+2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/90885\n+\t* include/cpplib.h (BOL): Move macro to 1 << 12 since it is\n+\tnot used by C/C++'s unsigned char token flags.\n+\t(DECIMAL_INT): New, using 1 << 6, so that it is visible as\n+\tpart of C/C++'s 8 bits of token flags.\n+\n 2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/106655"}, {"sha": "d905767c7ab99851978a1fa1e2f92c57d7ee4d6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64b09471a8a06e929c70bf6017d7163776145e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64b09471a8a06e929c70bf6017d7163776145e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c64b09471a8a06e929c70bf6017d7163776145e0", "patch": "@@ -1,3 +1,45 @@\n+2022-09-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/tuple (tuple::_UseOtherCtor): Use ::type when\n+\tderiving from __and_, __or_ or __not_.\n+\t* include/std/type_traits (negation): Likewise.\n+\t(is_unsigned): Likewise.\n+\t(__is_implicitly_default_constructible): Likewise.\n+\t(is_trivially_destructible): Likewise.\n+\t(__is_nt_invocable_impl): Likewise.\n+\n+2022-09-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_constructible_v)\n+\t(is_default_constructible_v, is_copy_constructible_v)\n+\t(is_move_constructible_v): Define using __is_constructible.\n+\t(is_assignable_v, is_copy_assignable_v, is_move_assignable_v):\n+\tDefine using __is_assignable.\n+\t(is_trivially_constructible_v)\n+\t(is_trivially_default_constructible_v)\n+\t(is_trivially_copy_constructible_v)\n+\t(is_trivially_move_constructible_v): Define using\n+\t__is_trivially_constructible.\n+\t(is_trivially_assignable_v, is_trivially_copy_assignable_v)\n+\t(is_trivially_move_assignable_v): Define using\n+\t__is_trivially_assignable.\n+\t(is_nothrow_constructible_v)\n+\t(is_nothrow_default_constructible_v)\n+\t(is_nothrow_copy_constructible_v)\n+\t(is_nothrow_move_constructible_v): Define using\n+\t__is_nothrow_constructible.\n+\t(is_nothrow_assignable_v, is_nothrow_copy_assignable_v)\n+\t(is_nothrow_move_assignable_v): Define using\n+\t__is_nothrow_assignable.\n+\n+2022-09-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/type_traits (__or_, __and_, __not_): Redefine as a\n+\tclass template instead of as an alias template.\n+\t* testsuite/20_util/logical_traits/requirements/short_circuit.cc:\n+\tAdd more tests for conjunction and disjunction.  Add corresponding\n+\ttests for __and_ and __or_.\n+\n 2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/ranges (adjacent_transform_view::_Iterator): Add"}]}