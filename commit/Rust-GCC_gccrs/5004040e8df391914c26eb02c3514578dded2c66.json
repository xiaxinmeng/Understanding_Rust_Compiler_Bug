{"sha": "5004040e8df391914c26eb02c3514578dded2c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwNDA0MGU4ZGYzOTE5MTRjMjZlYjAyYzM1MTQ1NzhkZGVkMmM2Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-03T14:50:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-03T14:50:09Z"}, "message": "hashtable (_Hashtable<>): Remove insert_return_type typedef.\n\n2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/hashtable (_Hashtable<>): Remove insert_return_type\n\ttypedef.\n\t* include/profile/unordered_map (unordered_map<>::insert(const\n\tvalue_type&), unordered_multimap<>::insert(const value_type&)): Adjust.\n\t* include/profile/unordered_set (unordered_set<>::insert(const\n\tvalue_type&), unordered_multimap<>::insert(const value_type&)):\n\tLikewise.\n\nFrom-SVN: r155587", "tree": {"sha": "cf5f69958c571b59e816f33865c5ed216a4f9983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5f69958c571b59e816f33865c5ed216a4f9983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5004040e8df391914c26eb02c3514578dded2c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5004040e8df391914c26eb02c3514578dded2c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5004040e8df391914c26eb02c3514578dded2c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5004040e8df391914c26eb02c3514578dded2c66/comments", "author": null, "committer": null, "parents": [{"sha": "b0de17ef396499ebc675c7c902927984625c1752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0de17ef396499ebc675c7c902927984625c1752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0de17ef396499ebc675c7c902927984625c1752"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "f768680e9652855d004d358c3ebb5d1ad0d55944", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5004040e8df391914c26eb02c3514578dded2c66", "patch": "@@ -1,3 +1,13 @@\n+2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/hashtable (_Hashtable<>): Remove insert_return_type\n+\ttypedef.\n+\t* include/profile/unordered_map (unordered_map<>::insert(const\n+\tvalue_type&), unordered_multimap<>::insert(const value_type&)): Adjust.\n+\t* include/profile/unordered_set (unordered_set<>::insert(const\n+\tvalue_type&), unordered_multimap<>::insert(const value_type&)):\n+\tLikewise.\n+\n 2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_pair.h (pair<>::pair(_U1&&, const _T2&),"}, {"sha": "b8adc44108b972e16a4311a613e4fc534c259d75", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=5004040e8df391914c26eb02c3514578dded2c66", "patch": "@@ -1,6 +1,6 @@\n // Profiling unordered_map/unordered_multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -72,8 +72,6 @@ namespace __profile\n       typedef typename _Base::reference       reference;\n       typedef typename _Base::const_reference const_reference;\n       typedef typename _Base::mapped_type      mapped_type;\n-      typedef std::pair<typename _Base::iterator, bool> pair_type;\n-      typedef typename _Base::insert_return_type insert_return_type;\n \n       typedef typename _Base::iterator iterator;\n       typedef typename _Base::const_iterator const_iterator;\n@@ -148,7 +146,8 @@ namespace __profile\n \n       ~unordered_map()\n       {\n-        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());\n+        __profcxx_hashtable_destruct(this, _Base::bucket_count(),\n+\t\t\t\t     _Base::size());\n         _M_profile_destruct();\n       }\n \n@@ -162,7 +161,8 @@ namespace __profile\n       void\n       clear()\n       {\n-        __profcxx_hashtable_destruct(this, _Base::bucket_count(), _Base::size());\n+        __profcxx_hashtable_destruct(this, _Base::bucket_count(),\n+\t\t\t\t     _Base::size());\n         _M_profile_destruct();\n         _Base::clear();\n       }\n@@ -175,14 +175,15 @@ namespace __profile\n         _M_profile_resize(__old_size, _Base::bucket_count()); \n       }\n \n-       insert_return_type\n+      std::pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n         size_type __old_size =  _Base::bucket_count();\n-        insert_return_type __res = _Base::insert(__obj);\n+        std::pair<iterator, bool> __res = _Base::insert(__obj);\n         _M_profile_resize(__old_size, _Base::bucket_count()); \n         return __res;\n       }\n+\n       iterator\n       insert(iterator __iter, const value_type& __v)\n       { \n@@ -301,8 +302,6 @@ namespace __profile\n       typedef typename _Base::difference_type difference_type;\n       typedef typename _Base::reference       reference;\n       typedef typename _Base::const_reference const_reference;\n-      typedef std::pair<typename _Base::iterator, bool> pair_type;\n-      typedef typename _Base::insert_return_type insert_return_type;\n \n       typedef typename _Base::iterator iterator;\n       typedef typename _Base::const_iterator const_iterator;\n@@ -401,14 +400,15 @@ namespace __profile\n         _M_profile_resize(__old_size, _Base::bucket_count());\n       }\n \n-      insert_return_type\n+      iterator\n       insert(const value_type& __obj)\n       {\n         size_type __old_size =  _Base::bucket_count();\n-        insert_return_type __res = _Base::insert(__obj);\n+        iterator __res = _Base::insert(__obj);\n         _M_profile_resize(__old_size, _Base::bucket_count()); \n         return __res;\n       }\n+\n       iterator\n       insert(iterator __iter, const value_type& __v)\n       { "}, {"sha": "b350da0878e25c794ac4e1bef65a0e62802c6174", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=5004040e8df391914c26eb02c3514578dded2c66", "patch": "@@ -1,6 +1,6 @@\n // Profiling unordered_set/unordered_multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,7 +71,6 @@ namespace __profile\n       typedef typename _Base::difference_type difference_type;\n       typedef typename _Base::reference       reference;\n       typedef typename _Base::const_reference const_reference;\n-      typedef typename _Base::insert_return_type insert_return_type;\n \n       typedef typename _Base::iterator iterator;\n       typedef typename _Base::const_iterator const_iterator;\n@@ -165,20 +164,24 @@ namespace __profile\n         _M_profile_destruct();\n         _Base::clear();\n       }\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n         size_type __old_size =  _Base::bucket_count();\n         _Base::insert(__l); \n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n       }\n-      insert_return_type insert(const value_type& __obj)\n+\n+      std::pair<iterator, bool>\n+      insert(const value_type& __obj)\n       {\n         size_type __old_size =  _Base::bucket_count();\n-        insert_return_type __res = _Base::insert(__obj);\n+        std::pair<iterator, bool> __res = _Base::insert(__obj);\n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n         return __res;\n       }\n+\n       iterator\n       insert(iterator __iter, const value_type& __v)\n       { \n@@ -220,6 +223,7 @@ namespace __profile\n         _Base::rehash(__n);\n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n       }\n+\n     private:\n       _Base&\n       _M_base()       { return *this; }\n@@ -285,7 +289,6 @@ namespace __profile\n       typedef typename _Base::difference_type difference_type;\n       typedef typename _Base::reference       reference;\n       typedef typename _Base::const_reference const_reference;\n-      typedef typename _Base::insert_return_type insert_return_type;\n \n       typedef typename _Base::iterator iterator;\n       typedef typename _Base::const_iterator const_iterator;\n@@ -375,20 +378,24 @@ namespace __profile\n         _M_profile_destruct();\n         _Base::clear();\n       }\n+\n       void\n       insert(std::initializer_list<value_type> __l)\n       { \n         size_type __old_size =  _Base::bucket_count();\n         _Base::insert(__l); \n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n       }\n-      insert_return_type insert(const value_type& __obj)\n+\n+      iterator\n+      insert(const value_type& __obj)\n       {\n         size_type __old_size =  _Base::bucket_count();\n-        insert_return_type __res = _Base::insert(__obj);\n+        iterator __res = _Base::insert(__obj);\n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n         return __res;\n       }\n+\n       iterator\n       insert(iterator __iter, const value_type& __v)\n       { \n@@ -430,6 +437,7 @@ namespace __profile\n         _Base::rehash(__n);\n         _M_profile_resize(__old_size,  _Base::bucket_count()); \n       }\n+\n     private:\n       _Base&\n       _M_base()       { return *this; }"}, {"sha": "f9ff933cad9c379b34934296ad858acd86b22dba", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5004040e8df391914c26eb02c3514578dded2c66/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=5004040e8df391914c26eb02c3514578dded2c66", "patch": "@@ -1,6 +1,6 @@\n // Internal header for TR1 unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -409,9 +409,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       _M_erase_node(_Node*, _Node**);\n \n     public:\t\t\t\t\n-      // Expose insert_return_type for profiling mode.\n-      typedef _Insert_Return_Type insert_return_type;\n-\n       // Insert and erase\n       _Insert_Return_Type\n       insert(const value_type& __v) "}]}