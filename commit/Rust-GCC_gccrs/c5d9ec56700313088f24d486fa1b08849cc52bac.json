{"sha": "c5d9ec56700313088f24d486fa1b08849cc52bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkOWVjNTY3MDAzMTMwODhmMjRkNDg2ZmExYjA4ODQ5Y2M1MmJhYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-07-13T17:15:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-13T17:15:48Z"}, "message": "c++config (_GLIBCXX_NOEXCEPT_IF): Define.\n\n\t* include/bits/c++config (_GLIBCXX_NOEXCEPT_IF): Define.\n\t* include/bits/forward_list.h (forward_list::swap): Make noexcept\n\tunconditional.\n\t* include/bits/hashtable.h (_Hashtable::swap): Do not use\n\t_S_nothrow_swap().\n\t* include/bits/stl_bvector.h (vector<bool>::swap): Make noexcept\n\tunconditional.\n\t* include/bits/stl_deque.h (deque::swap): Likewise.\n\t(swap(deque&, deque&)): Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/bits/stl_list.h (list::swap): Make noexcept unconditional.\n\t(swap(list&, list&)): Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/bits/stl_map.h (map::swap, swap(map&, map&)): Use\n\t_GLIBCXX_NOEXCEPT_IF, do not depend on _S_nothrow_swap.\n\t* include/bits/stl_multimap.h (multimap::swap,\n\tswap(multimap&, multimap&)): Likewise.\n\t* include/bits/stl_multiset.h (multiset::swap,\n\tswap(multiset&, multiset&)): Likewise.\n\t* include/bits/stl_set.h (set::swap, swap(set&, set&)): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree::swap,\n\tswap(_Rb_tree&, _Rb_tree&)): Likewise.\n\t* include/bits/stl_vector.h (vector::swap): Make noexcept\n\tunconditional.\n\t(swap(vector&, vector&)): Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/debug/deque (deque::swap, swap): Likewise.\n\t* include/debug/forward_list (swap): Add noexcept.\n\t* include/debug/list (list::swap, swap): Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/debug/map.h (map::swap, swap): Likewise.\n\t* include/debug/multimap.h (multimap::swap, swap): Likewise.\n\t* include/debug/multiset.h (multiset::Swap, swap): Likewise.\n\t* include/debug/set.h (set::swap, swap): Likewise.\n\t* include/debug/unordered_map (unordered_map::swap,\n\tunordered_multimap::swap, swap): Likewise.\n\t* include/debug/unordered_set (unordered_set::swap,\n\tunordered_multiset::swap, swap): Likewise.\n\t* include/debug/vector (vector::swap, swap): Likewise.\n\t* include/ext/alloc_traits.h (__alloc_traits::_S_nothrow_swap()):\n\tRemove.\n\t* include/profile/deque (deque::swap, swap): Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/profile/forward_list (swap): Add noexcept.\n\t* include/profile/list (list::swap, swap) : Use _GLIBCXX_NOEXCEPT_IF.\n\t* include/profile/map.h (map::swap, swap): Likewise.\n\t* include/profile/multimap.h (multimap::swap, swap): Likewise.\n\t* include/profile/multiset.h (multiset::swap, swap): Likewise.\n\t* include/profile/set.h (set::swap, swap): Likewise.\n\t* include/profile/unordered_map (swap): Likewise.\n\t* include/profile/unordered_set (swap): Likewise.\n\t* include/profile/vector (vector::swap, swap): Likewise. Remove\n\toverloads for swapping rvalues.\n\t* testsuite/23_containers/deque/allocator/noexcept.cc: Update tests\n\tfor noexcept on swap.\n\t* testsuite/23_containers/forward_list/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/map/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/multimap/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/multiset/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/set/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/allocator/noexcept.cc: Likewise.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error line\n\tnumber.\n\nFrom-SVN: r225744", "tree": {"sha": "9e12f4e5c07647680bb885951ca6c932264ad147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e12f4e5c07647680bb885951ca6c932264ad147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5d9ec56700313088f24d486fa1b08849cc52bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d9ec56700313088f24d486fa1b08849cc52bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d9ec56700313088f24d486fa1b08849cc52bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d9ec56700313088f24d486fa1b08849cc52bac/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474d4bbe1dae16f9f846d4ea0d166aa382186c2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474d4bbe1dae16f9f846d4ea0d166aa382186c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474d4bbe1dae16f9f846d4ea0d166aa382186c2b"}], "stats": {"total": 608, "additions": 322, "deletions": 286}, "files": [{"sha": "93a9adb575f631f6674b018dda0d8b9c700fac97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -1,3 +1,75 @@\n+2015-07-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_NOEXCEPT_IF): Define.\n+\t* include/bits/forward_list.h (forward_list::swap): Make noexcept\n+\tunconditional.\n+\t* include/bits/hashtable.h (_Hashtable::swap): Do not use\n+\t_S_nothrow_swap().\n+\t* include/bits/stl_bvector.h (vector<bool>::swap): Make noexcept\n+\tunconditional.\n+\t* include/bits/stl_deque.h (deque::swap): Likewise.\n+\t(swap(deque&, deque&)): Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/bits/stl_list.h (list::swap): Make noexcept unconditional.\n+\t(swap(list&, list&)): Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/bits/stl_map.h (map::swap, swap(map&, map&)): Use\n+\t_GLIBCXX_NOEXCEPT_IF, do not depend on _S_nothrow_swap.\n+\t* include/bits/stl_multimap.h (multimap::swap,\n+\tswap(multimap&, multimap&)): Likewise.\n+\t* include/bits/stl_multiset.h (multiset::swap,\n+\tswap(multiset&, multiset&)): Likewise.\n+\t* include/bits/stl_set.h (set::swap, swap(set&, set&)): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree::swap,\n+\tswap(_Rb_tree&, _Rb_tree&)): Likewise.\n+\t* include/bits/stl_vector.h (vector::swap): Make noexcept\n+\tunconditional.\n+\t(swap(vector&, vector&)): Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/debug/deque (deque::swap, swap): Likewise.\n+\t* include/debug/forward_list (swap): Add noexcept.\n+\t* include/debug/list (list::swap, swap): Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/debug/map.h (map::swap, swap): Likewise.\n+\t* include/debug/multimap.h (multimap::swap, swap): Likewise.\n+\t* include/debug/multiset.h (multiset::Swap, swap): Likewise.\n+\t* include/debug/set.h (set::swap, swap): Likewise.\n+\t* include/debug/unordered_map (unordered_map::swap,\n+\tunordered_multimap::swap, swap): Likewise.\n+\t* include/debug/unordered_set (unordered_set::swap,\n+\tunordered_multiset::swap, swap): Likewise.\n+\t* include/debug/vector (vector::swap, swap): Likewise.\n+\t* include/ext/alloc_traits.h (__alloc_traits::_S_nothrow_swap()):\n+\tRemove.\n+\t* include/profile/deque (deque::swap, swap): Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/profile/forward_list (swap): Add noexcept.\n+\t* include/profile/list (list::swap, swap) : Use _GLIBCXX_NOEXCEPT_IF.\n+\t* include/profile/map.h (map::swap, swap): Likewise.\n+\t* include/profile/multimap.h (multimap::swap, swap): Likewise.\n+\t* include/profile/multiset.h (multiset::swap, swap): Likewise.\n+\t* include/profile/set.h (set::swap, swap): Likewise.\n+\t* include/profile/unordered_map (swap): Likewise.\n+\t* include/profile/unordered_set (swap): Likewise.\n+\t* include/profile/vector (vector::swap, swap): Likewise. Remove\n+\toverloads for swapping rvalues.\n+\t* testsuite/23_containers/deque/allocator/noexcept.cc: Update tests\n+\tfor noexcept on swap.\n+\t* testsuite/23_containers/forward_list/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/map/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/multimap/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/multiset/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/set/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/vector/bool/allocator/noexcept.cc: Likewise.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error line\n+\tnumber.\n+\n 2015-07-13  John Marino  <gnugcc@marino.st>\n \n \t* config/os/bsd/dragonfly/os_defines.h (_GLIBCXX_USE_C99_CHECK,"}, {"sha": "34acca36f38cd1932b837d31087895953203d260", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -115,10 +115,12 @@\n #ifndef _GLIBCXX_NOEXCEPT\n # if __cplusplus >= 201103L\n #  define _GLIBCXX_NOEXCEPT noexcept\n+#  define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)\n #  define _GLIBCXX_USE_NOEXCEPT noexcept\n #  define _GLIBCXX_THROW(_EXC)\n # else\n #  define _GLIBCXX_NOEXCEPT\n+#  define _GLIBCXX_NOEXCEPT_IF(_COND)\n #  define _GLIBCXX_USE_NOEXCEPT throw()\n #  define _GLIBCXX_THROW(_EXC) throw(_EXC)\n # endif"}, {"sha": "d87f1754ed3b02b4f2f527d2b112a48285672a2c", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -992,8 +992,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  function.\n        */\n       void\n-      swap(forward_list& __list)\n-      noexcept(_Node_alloc_traits::_S_nothrow_swap())\n+      swap(forward_list& __list) noexcept\n       {\n         std::swap(this->_M_impl._M_head._M_next,\n \t\t  __list._M_impl._M_head._M_next);"}, {"sha": "fcecdc46b441f5e399ec612afb663ee38257b6a8", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -475,8 +475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(_Hashtable&)\n-      noexcept(__node_alloc_traits::_S_nothrow_swap()\n-\t       && __is_nothrow_swappable<_H1>::value\n+      noexcept(__is_nothrow_swappable<_H1>::value\n \t       && __is_nothrow_swappable<_Equal>::value);\n \n       // Basic container operations\n@@ -1237,8 +1236,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     swap(_Hashtable& __x)\n-    noexcept(__node_alloc_traits::_S_nothrow_swap()\n-\t     && __is_nothrow_swappable<_H1>::value\n+    noexcept(__is_nothrow_swappable<_H1>::value\n \t     && __is_nothrow_swappable<_Equal>::value)\n     {\n       // The only base class with member variables is hash_code_base."}, {"sha": "800b4740d6362364d8ceed02d1d22fa196cd2c89", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -927,10 +927,7 @@ template<typename _Alloc>\n     }\n \n     void\n-    swap(vector& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Bit_alloc_traits::_S_nothrow_swap())\n-#endif\n+    swap(vector& __x) _GLIBCXX_NOEXCEPT\n     {\n       std::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n       std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);"}, {"sha": "50570efbfa70a5e02bee58dd64a07b7ffc12bbca", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -1777,10 +1777,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  std::swap(d1,d2) will feed to this function.\n        */\n       void\n-      swap(deque& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n-#endif\n+      swap(deque& __x) _GLIBCXX_NOEXCEPT\n       {\n \t_M_impl._M_swap_data(__x._M_impl);\n \t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n@@ -2271,9 +2268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n #undef _GLIBCXX_DEQUE_BUF_SIZE"}, {"sha": "0509164828e7b38e250d2b4d5a8724fb612ec9a1", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -1350,10 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  function.\n        */\n       void\n-      swap(list& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Node_alloc_traits::_S_nothrow_swap())\n-#endif\n+      swap(list& __x) _GLIBCXX_NOEXCEPT\n       {\n \t__detail::_List_node_base::swap(this->_M_impl._M_node,\n \t\t\t\t        __x._M_impl._M_node);\n@@ -1919,9 +1916,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "6e9fdcc2a4a0afe4b81ff0b6017d3973e86820e4", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -794,10 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(map& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap()\n-\t       && __is_nothrow_swappable<_Compare>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)\n       { _M_t.swap(__x._M_t); }\n \n       /**\n@@ -1125,9 +1122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(map<_Key, _Tp, _Compare, _Alloc>& __x,\n \t map<_Key, _Tp, _Compare, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "12ff6e6a74cb25333a62864bbec9fc5bb300ffe5", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -704,10 +704,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(multimap& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap()\n-\t       && __is_nothrow_swappable<_Compare>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)\n       { _M_t.swap(__x._M_t); }\n \n       /**\n@@ -1026,9 +1023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n          multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "5ccc6dd61f72fd2cd4e8bb7dcfc4d640716a733c", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -406,10 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(multiset& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap()\n-\t       && __is_nothrow_swappable<_Compare>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n@@ -875,9 +872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(multiset<_Key, _Compare, _Alloc>& __x,\n \t multiset<_Key, _Compare, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "cf74368fa0e145e6a51bd81b0b7ec40e38e9f10b", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -410,10 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(set& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap()\n-\t       && __is_nothrow_swappable<_Compare>::value)\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n@@ -891,9 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Key, typename _Compare, typename _Alloc>\n     inline void\n     swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "3030e1ed0241d7ce63e2f28e793a37023aea7905", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -920,11 +920,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _Alloc_traits::max_size(_M_get_Node_allocator()); }\n \n       void\n-#if __cplusplus >= 201103L\n-      swap(_Rb_tree& __t) noexcept(_Alloc_traits::_S_nothrow_swap());\n-#else\n-      swap(_Rb_tree& __t);\n-#endif\n+      swap(_Rb_tree& __t)\n+      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);\n \n       // Insert/erase.\n #if __cplusplus >= 201103L\n@@ -1747,10 +1744,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)\n-#if __cplusplus >= 201103L\n-    noexcept(_Alloc_traits::_S_nothrow_swap())\n-#endif\n+    swap(_Rb_tree& __t)\n+    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)\n     {\n       if (_M_root() == 0)\n \t{"}, {"sha": "8407a153f069887a8442cf01c8b71eb881d22d9f", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -1190,10 +1190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  std::swap(v1,v2) will feed to this function.\n        */\n       void\n-      swap(vector& __x)\n-#if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n-#endif\n+      swap(vector& __x) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_impl._M_swap_data(__x._M_impl);\n \t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n@@ -1556,9 +1553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(__x.swap(__y)))\n-#endif\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "fe8b3ac4a9519222be1abfb8a30a901974b8aefb", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -588,9 +588,7 @@ namespace __debug\n \n       void\n       swap(deque& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -649,6 +647,7 @@ namespace __debug\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug"}, {"sha": "ad2d2652003821afe5a8801c5c1af93d9674b8cc", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -473,7 +473,7 @@ namespace __debug\n \n       void\n       swap(forward_list& __list)\n-\tnoexcept( noexcept(declval<_Base>().swap(__list)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__list)) )\n       {\n \t_Safe::_M_swap(__list);\n \t_Base::swap(__list);\n@@ -814,8 +814,8 @@ namespace __debug\n   /// See std::forward_list::swap().\n   template<typename _Tp, typename _Alloc>\n     inline void\n-    swap(forward_list<_Tp, _Alloc>& __lx,\n-\t forward_list<_Tp, _Alloc>& __ly)\n+    swap(forward_list<_Tp, _Alloc>& __lx, forward_list<_Tp, _Alloc>& __ly)\n+    noexcept(noexcept(__lx.swap(__ly)))\n     { __lx.swap(__ly); }\n \n } // namespace __debug"}, {"sha": "bd9f5a3f8efeff40541a248f0f54f1339d601669", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -525,9 +525,7 @@ namespace __debug\n \n       void\n       swap(list& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -808,6 +806,7 @@ namespace __debug\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug"}, {"sha": "d45cf793e9d033806d17224e4781dd0d83335344", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -393,9 +393,7 @@ namespace __debug\n \n       void\n       swap(map& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -589,6 +587,7 @@ namespace __debug\n     inline void\n     swap(map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug"}, {"sha": "710cd4614bf73e599ef813ba0f050e324fa7d4ee", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -374,9 +374,7 @@ namespace __debug\n \n       void\n       swap(multimap& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -570,6 +568,7 @@ namespace __debug\n     inline void\n     swap(multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug"}, {"sha": "94fa3594b5f9bad4c44b50240bf79519b58f01a2", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -361,9 +361,7 @@ namespace __debug\n \n       void\n       swap(multiset& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -550,6 +548,7 @@ namespace __debug\n     void\n     swap(multiset<_Key, _Compare, _Allocator>& __x,\n \t multiset<_Key, _Compare, _Allocator>& __y)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { return __x.swap(__y); }\n \n } // namespace __debug"}, {"sha": "ad2c76e2f40aeead68cc9e65929b5f8f27e02a7e", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -368,9 +368,7 @@ namespace __debug\n \n       void\n       swap(set& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -557,6 +555,7 @@ namespace __debug\n     void\n     swap(set<_Key, _Compare, _Allocator>& __x,\n \t set<_Key, _Compare, _Allocator>& __y)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { return __x.swap(__y); }\n \n } // namespace __debug"}, {"sha": "cc3bc3fb7bcbc487d2216b153b90c65628a3a7ce", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -185,7 +185,7 @@ namespace __debug\n \n       void\n       swap(unordered_map& __x)\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -486,6 +486,7 @@ namespace __debug\n     inline void\n     swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Key, typename _Tp, typename _Hash,\n@@ -641,7 +642,7 @@ namespace __debug\n \n       void\n       swap(unordered_multimap& __x)\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -938,6 +939,7 @@ namespace __debug\n     inline void\n     swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Key, typename _Tp, typename _Hash,"}, {"sha": "a45d3b54d387f8aa2e02d40e1dd386e0326a8951", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -182,7 +182,7 @@ namespace __debug\n \n       void\n       swap(unordered_set& __x)\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -480,6 +480,7 @@ namespace __debug\n     inline void\n     swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n@@ -634,7 +635,7 @@ namespace __debug\n \n       void\n       swap(unordered_multiset& __x)\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -920,6 +921,7 @@ namespace __debug\n     inline void\n     swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>"}, {"sha": "fede4f0917cc2eb54905d82165b6d117061b9163", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -674,9 +674,7 @@ namespace __debug\n \n       void\n       swap(vector& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Safe::_M_swap(__x);\n \t_Base::swap(__x);\n@@ -744,6 +742,7 @@ namespace __debug\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug"}, {"sha": "4d322fb6b9d439628f4985db27c259e184e40303", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -112,12 +112,6 @@ template<typename _Alloc>\n     static constexpr bool _S_nothrow_move()\n     { return _S_propagate_on_move_assign() || _S_always_equal(); }\n \n-    static constexpr bool _S_nothrow_swap()\n-    {\n-      return !_S_propagate_on_swap()\n-\t|| std::__is_nothrow_swappable<_Alloc>::value;\n-    }\n-\n     template<typename _Tp>\n       struct rebind\n       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };"}, {"sha": "724bc43b5f466fe93ead83c367eb3bb761227474", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -130,9 +130,7 @@ namespace __profile\n \n       void\n       swap(deque& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       { _Base::swap(__x); }\n \n       _Base&\n@@ -181,6 +179,7 @@ namespace __profile\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __profile"}, {"sha": "081b202982cf651b2afc8e0951cef61d8bc116f8", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -108,7 +108,7 @@ namespace __profile\n \n       void\n       swap(forward_list& __fl)\n-\tnoexcept( noexcept(declval<_Base>().swap(__fl)) )\n+\tnoexcept( noexcept(declval<_Base&>().swap(__fl)) )\n       { _Base::swap(__fl); }\n \n       void\n@@ -208,6 +208,7 @@ namespace __profile\n     inline void\n     swap(forward_list<_Tp, _Alloc>& __lx,\n \t forward_list<_Tp, _Alloc>& __ly)\n+    noexcept(noexcept(__lx.swap(__ly)))\n     { __lx.swap(__ly); }\n \n } // namespace __profile"}, {"sha": "edc321e8302c19f54a0a454b772479b815c93731", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -411,9 +411,7 @@ namespace __profile\n \n       void\n       swap(list& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -643,6 +641,7 @@ namespace __profile\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __profile"}, {"sha": "8a19592386c8c948ffce735872b082fffe86586e", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -405,9 +405,7 @@ namespace __profile\n \n       void\n       swap(map& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -698,6 +696,7 @@ namespace __profile\n     inline void\n     swap(map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __profile"}, {"sha": "1055e9e9dd7e2640ef0e8661ef6b19aba0d34da4", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -364,9 +364,7 @@ namespace __profile\n \n       void\n       swap(multimap& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \tstd::swap(this->_M_map2umap_info, __x._M_map2umap_info);\n \t_Base::swap(__x);\n@@ -656,6 +654,7 @@ namespace __profile\n     inline void\n     swap(multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n \t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n } // namespace __profile"}, {"sha": "55090e3936cf177841bbe63857c12bafba401255", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -226,9 +226,7 @@ namespace __profile\n \n       void\n       swap(multiset& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -640,6 +638,7 @@ namespace __profile\n     void\n     swap(multiset<_Key, _Compare, _Allocator>& __x,\n \t multiset<_Key, _Compare, _Allocator>& __y)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { return __x.swap(__y); }\n \n } // namespace __profile"}, {"sha": "24d2ed55a5903dd3fd6542d500caecc7cef7c416", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -223,9 +223,7 @@ namespace __profile\n \n       void\n       swap(set& __x)\n-#if __cplusplus >= 201103L\n-\tnoexcept( noexcept(declval<_Base>().swap(__x)) )\n-#endif\n+      _GLIBCXX_NOEXCEPT_IF( noexcept(declval<_Base&>().swap(__x)) )\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -621,6 +619,7 @@ namespace __profile\n     void\n     swap(set<_Key, _Compare, _Allocator>& __x,\n \t set<_Key, _Compare, _Allocator>& __y)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))\n     { return __x.swap(__y); }\n \n } // namespace __profile"}, {"sha": "619486e7394003ad3c9e71a714b87cdfbc3d3bf1", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -299,6 +299,7 @@ namespace __profile\n     inline void\n     swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Key, typename _Tp, typename _Hash,\n@@ -557,6 +558,7 @@ namespace __profile\n     inline void\n     swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Key, typename _Tp, typename _Hash,"}, {"sha": "4c2a7ff19679c199e1e536bd2c84f95d2eaa5431", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -279,6 +279,7 @@ namespace __profile\n     inline void\n     swap(unordered_set<_Key, _Hash, _Pred, _Alloc>& __x,\n \t unordered_set<_Key, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Key, typename _Hash, typename _Pred, typename _Alloc>\n@@ -534,6 +535,7 @@ namespace __profile\n     inline void\n     swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>"}, {"sha": "dc015f2f2a9335fe2db7f1e759100ae5dec0e600", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -547,20 +547,9 @@ namespace __profile\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n+    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n-#if __cplusplus >= 201103L\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>&& __lhs, vector<_Tp, _Alloc>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __profile\n \n #if __cplusplus >= 201103L"}, {"sha": "c6f82666a901b6082a34ecc5ecdb3eb22d3cf90a", "filename": "libstdc++-v3/testsuite/23_containers/deque/allocator/noexcept.cc", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -23,15 +23,6 @@\n \n struct T { int i; };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n-\n using __gnu_test::propagating_allocator;\n \n void test01()\n@@ -62,6 +53,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   // static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // noexcept spec of deque::swap depends on swap overload at top of this file\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "51af42d2c3dbd79162a3ab947ee9528713fab37d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/noexcept.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -23,15 +23,6 @@\n \n struct T { int i; };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n-\n using __gnu_test::propagating_allocator;\n \n void test01()\n@@ -62,5 +53,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "bc80d37941e78e5da17a6982ba4ae028fe303bd6", "filename": "libstdc++-v3/testsuite/23_containers/list/allocator/noexcept.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -23,15 +23,6 @@\n \n struct T { int i; };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n-\n using __gnu_test::propagating_allocator;\n \n void test01()\n@@ -62,5 +53,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "47a8a144b9f4c64d9d605ff23b7ccf30730cc4d1", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/noexcept.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -27,16 +27,10 @@ bool operator<(T l, T r) { return l.i < r.i; }\n \n using Cmp = std::less<T>;\n \n-struct U { };\n+struct CmpThrow : Cmp { };\n+void swap(CmpThrow&, CmpThrow&) noexcept(false) { }\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+struct U { };\n \n using __gnu_test::propagating_allocator;\n \n@@ -52,6 +46,16 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<std::pair<const T, U>> alloc_type;\n+  typedef std::map<T, U, CmpThrow, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n {\n   typedef propagating_allocator<std::pair<const T, U>, false> alloc_type;\n   typedef std::map<T, U, Cmp, alloc_type> test_type;\n@@ -61,12 +65,12 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test04()\n {\n   typedef propagating_allocator<std::pair<const T, U>, true> alloc_type;\n   typedef std::map<T, U, Cmp, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "2f27fd76170978bf5e0f0ed36f80915e42ce18c9", "filename": "libstdc++-v3/testsuite/23_containers/multimap/allocator/noexcept.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -27,16 +27,10 @@ bool operator<(T l, T r) { return l.i < r.i; }\n \n using Cmp = std::less<T>;\n \n-struct U { };\n+struct CmpThrow : Cmp { };\n+void swap(CmpThrow&, CmpThrow&) noexcept(false) { }\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+struct U { };\n \n using __gnu_test::propagating_allocator;\n \n@@ -53,20 +47,20 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<std::pair<const T, U>, false> alloc_type;\n-  typedef std::multimap<T, U, Cmp, alloc_type> test_type;\n-  test_type v1(alloc_type(1));\n-  test_type v2(alloc_type(2));\n-  static_assert( !noexcept( v1 = std::move(v2) ), \"Move assign can throw\" );\n-  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+  typedef std::allocator<std::pair<const T, U>> alloc_type;\n+  typedef std::multimap<T, U, CmpThrow, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n \n void test03()\n {\n-  typedef propagating_allocator<std::pair<const T, U>, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, U>, false> alloc_type;\n   typedef std::multimap<T, U, Cmp, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n-  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( !noexcept( v1 = std::move(v2) ), \"Move assign can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "665a8d2950ed023dda4e78c26a1f7f127e1f4244", "filename": "libstdc++-v3/testsuite/23_containers/multiset/allocator/noexcept.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -28,14 +28,8 @@ bool operator<(T l, T r) { return l.i < r.i; }\n \n using Cmp = std::less<T>;\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+struct CmpThrow : Cmp { };\n+void swap(CmpThrow&, CmpThrow&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -51,6 +45,16 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::multiset<T, CmpThrow, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::multiset<T, Cmp, alloc_type> test_type;\n@@ -60,12 +64,12 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test04()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::multiset<T, Cmp, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "325264580367484cd05f9c995612c8ee23df3d06", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/noexcept.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -27,14 +27,8 @@ bool operator<(T l, T r) { return l.i < r.i; }\n \n using Cmp = std::less<T>;\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+struct CmpThrow : Cmp { };\n+void swap(CmpThrow&, CmpThrow&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -50,6 +44,16 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::set<T, CmpThrow, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::set<T, Cmp, alloc_type> test_type;\n@@ -59,12 +63,12 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test04()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::set<T, Cmp, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "dca473d2c7cdfcc0caeb61adbfa6e647da146b42", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/noexcept.cc", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -35,14 +35,11 @@ struct equal_to\n   { return lhs.i == rhs.i; }\n };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+// Versions of the function objects without nothrow swap.\n+struct hash_t : hash { };\n+void swap(hash_t&, hash_t&) noexcept(false) { }\n+struct equal_to_t : equal_to { };\n+void swap(equal_to_t&, equal_to_t&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -58,6 +55,26 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_map<T, T, hash_t, equal_to, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_map<T, T, hash, equal_to_t, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test04()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n@@ -67,19 +84,19 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test05()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test04()\n+void test06()\n {\n   typedef std::unordered_map<int, int> test_type;\n-  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n-  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+  static_assert( noexcept( test_type() ), \"Default constructor does not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor does not throw\" );\n }"}, {"sha": "3c67d238be121ea52170d8c9417d2971094b8fc2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/noexcept.cc", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -35,14 +35,11 @@ struct equal_to\n   { return lhs.i == rhs.i; }\n };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+// Versions of the function objects without nothrow swap.\n+struct hash_t : hash { };\n+void swap(hash_t&, hash_t&) noexcept(false) { }\n+struct equal_to_t : equal_to { };\n+void swap(equal_to_t&, equal_to_t&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -58,6 +55,27 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_multimap<T, T, hash_t, equal_to, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_multimap<T, T, hash, equal_to_t, alloc_type>\n+    test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test04()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n@@ -67,19 +85,19 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test05()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test04()\n+void test06()\n {\n   typedef std::unordered_multimap<int, int> test_type;\n-  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n-  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+  static_assert( noexcept( test_type() ), \"Default constructor does not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor does not throw\" );\n }"}, {"sha": "37c3eb15abd72f8b38e5edd979d5c92976c94071", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/allocator/noexcept.cc", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -35,14 +35,11 @@ struct equal_to\n   { return lhs.i == rhs.i; }\n };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+// Versions of the function objects without nothrow swap.\n+struct hash_t : hash { };\n+void swap(hash_t&, hash_t&) noexcept(false) { }\n+struct equal_to_t : equal_to { };\n+void swap(equal_to_t&, equal_to_t&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -58,6 +55,26 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_multiset<T, hash_t, equal_to, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_multiset<T, hash, equal_to_t, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test04()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::unordered_multiset<T, hash, equal_to, alloc_type> test_type;\n@@ -67,19 +84,19 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test05()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::unordered_multiset<T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test04()\n+void test06()\n {\n   typedef std::unordered_multiset<int> test_type;\n-  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n-  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+  static_assert( noexcept( test_type() ), \"Default constructor does not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor does not throw\" );\n }"}, {"sha": "a844c35716eb14637ebf66efa8eef4f7c1c12c91", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/noexcept.cc", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -35,14 +35,11 @@ struct equal_to\n   { return lhs.i == rhs.i; }\n };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n+// Versions of the function objects without nothrow swap.\n+struct hash_t : hash { };\n+void swap(hash_t&, hash_t&) noexcept(false) { }\n+struct equal_to_t : equal_to { };\n+void swap(equal_to_t&, equal_to_t&) noexcept(false) { }\n \n using __gnu_test::propagating_allocator;\n \n@@ -58,6 +55,26 @@ void test01()\n }\n \n void test02()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_set<T, hash_t, equal_to, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::unordered_set<T, hash, equal_to_t, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+void test04()\n {\n   typedef propagating_allocator<T, false> alloc_type;\n   typedef std::unordered_set<T, hash, equal_to, alloc_type> test_type;\n@@ -67,19 +84,19 @@ void test02()\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test03()\n+void test05()\n {\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::unordered_set<T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n \n-void test04()\n+void test06()\n {\n   typedef std::unordered_set<int> test_type;\n-  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n-  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+  static_assert( noexcept( test_type() ), \"Default constructor does not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor does not throw\" );\n }"}, {"sha": "0cb120576ff6106852037265500bbfddfc6358e1", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/noexcept.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -23,15 +23,6 @@\n  \n struct T { int i; };\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n-\n using __gnu_test::propagating_allocator;\n \n void test01()\n@@ -62,5 +53,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "1e2b9547f65280de4ef2bcb094100bc649336fe7", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/allocator/noexcept.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fnoexcept.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -23,15 +23,6 @@\n \n using T = bool;\n \n-namespace __gnu_test\n-{\n-  template<typename U>\n-    inline void\n-    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n-    noexcept(false)\n-    { }\n-}\n-\n using __gnu_test::propagating_allocator;\n \n void test01()\n@@ -62,5 +53,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }"}, {"sha": "8ed54ea291b4543c2262ef365626366485852d92", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d9ec56700313088f24d486fa1b08849cc52bac/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=c5d9ec56700313088f24d486fa1b08849cc52bac", "patch": "@@ -25,7 +25,7 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 322 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 324 }\n \n // \"template argument 1 is invalid\"\n // { dg-prune-output \"tuple:993\" }"}]}