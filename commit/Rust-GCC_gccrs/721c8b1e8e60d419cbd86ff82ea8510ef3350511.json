{"sha": "721c8b1e8e60d419cbd86ff82ea8510ef3350511", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxYzhiMWU4ZTYwZDQxOWNiZDg2ZmY4MmVhODUxMGVmMzM1MDUxMQ==", "commit": {"author": {"name": "Riyadh Baghdadi", "email": "baghdadi.mr@gmail.com", "date": "2010-09-30T21:17:12Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-09-30T21:17:12Z"}, "message": "Enable graphite to read an OpenScop file.\n\n2010-08-12  Riyadh Baghdadi <baghdadi.mr@gmail.com>\n\n\t* graphite-cloog-util.c (openscop_read_cloog_matrix): New.\n\t(openscop_read_polyhedron_matrix): New.\n\t* graphite-cloog-util.h (openscop_read_polyhedron_matrix): Declared.\n\t(openscop_read_N_int): Same.\n\t* graphite-poly.c (openscop_read_N_int): New.\n\t(openscop_read_one_int): New.\n\t(openscop_read_N_string): New.\n\t(openscop_read_one_string): New.\n\t(openscop_read_powerset_matrix): New.\n\t(graphite_read_transforms): Remove.\n\t(graphite_read_scatt): New.\n\t(graphite_read_scop_file): New.\n\t(apply_poly_transforms): Updated to call graphite_read_scop_file.\n\nFrom-SVN: r164778", "tree": {"sha": "a0ccbcc73847fed9ec59209131f8140c27a2123a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0ccbcc73847fed9ec59209131f8140c27a2123a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/721c8b1e8e60d419cbd86ff82ea8510ef3350511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721c8b1e8e60d419cbd86ff82ea8510ef3350511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721c8b1e8e60d419cbd86ff82ea8510ef3350511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721c8b1e8e60d419cbd86ff82ea8510ef3350511/comments", "author": {"login": "rbaghdadi", "id": 9944372, "node_id": "MDQ6VXNlcjk5NDQzNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/9944372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbaghdadi", "html_url": "https://github.com/rbaghdadi", "followers_url": "https://api.github.com/users/rbaghdadi/followers", "following_url": "https://api.github.com/users/rbaghdadi/following{/other_user}", "gists_url": "https://api.github.com/users/rbaghdadi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbaghdadi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbaghdadi/subscriptions", "organizations_url": "https://api.github.com/users/rbaghdadi/orgs", "repos_url": "https://api.github.com/users/rbaghdadi/repos", "events_url": "https://api.github.com/users/rbaghdadi/events{/privacy}", "received_events_url": "https://api.github.com/users/rbaghdadi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8bb59129cbb672aa4515c4dd1a2424c4ef45a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8bb59129cbb672aa4515c4dd1a2424c4ef45a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8bb59129cbb672aa4515c4dd1a2424c4ef45a9"}], "stats": {"total": 360, "additions": 360, "deletions": 0}, "files": [{"sha": "77302872e1cedbc664bf8163b70cfbacd23c6003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=721c8b1e8e60d419cbd86ff82ea8510ef3350511", "patch": "@@ -1,3 +1,19 @@\n+2010-09-30  Riyadh Baghdadi <baghdadi.mr@gmail.com>\n+\n+\t* graphite-cloog-util.c (openscop_read_cloog_matrix): New.\n+\t(openscop_read_polyhedron_matrix): New.\n+\t* graphite-cloog-util.h (openscop_read_polyhedron_matrix): Declared.\n+\t(openscop_read_N_int): Same.\n+\t* graphite-poly.c (openscop_read_N_int): New.\n+\t(openscop_read_one_int): New.\n+\t(openscop_read_N_string): New.\n+\t(openscop_read_one_string): New.\n+\t(openscop_read_powerset_matrix): New.\n+\t(graphite_read_transforms): Remove.\n+\t(graphite_read_scatt): New.\n+\t(graphite_read_scop_file): New.\n+\t(apply_poly_transforms): Updated to call graphite_read_scop_file.\n+\n 2010-09-30  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-poly.c: Change include order."}, {"sha": "6c56686842a3bec9574c8611d0309743f8b34336", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=721c8b1e8e60d419cbd86ff82ea8510ef3350511", "patch": "@@ -1,3 +1,19 @@\n+2010-08-12  Riyadh Baghdadi <baghdadi.mr@gmail.com>\n+\n+\t* graphite-cloog-util.c (openscop_read_cloog_matrix): New.\n+\t(openscop_read_polyhedron_matrix): New.\n+\t* graphite-cloog-util.h (openscop_read_polyhedron_matrix): Declared.\n+\t(openscop_read_N_int): Same.\n+\t* graphite-poly.c (openscop_read_N_int): New.\n+\t(openscop_read_one_int): New.\n+\t(openscop_read_N_string): New.\n+\t(openscop_read_one_string): New.\n+\t(openscop_read_powerset_matrix): New.\n+\t(graphite_read_transforms): Remove.\n+\t(graphite_read_scatt): New.\n+\t(graphite_read_scop_file): New.\n+\t(apply_poly_transforms): Updated to call graphite_read_scop_file.\n+\n 2010-08-11  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-poly.c: Change include order."}, {"sha": "40c6fbc004f2cbc6aff11cf0630de30daa9c60bd", "filename": "gcc/graphite-cloog-util.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-cloog-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-cloog-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.c?ref=721c8b1e8e60d419cbd86ff82ea8510ef3350511", "patch": "@@ -339,4 +339,69 @@ openscop_print_polyhedron_matrix (FILE *file, ppl_const_Polyhedron_t ph,\n   cloog_matrix_free (mat);\n }\n \n+/* Read from FILE a matrix in OpenScop format.  OUTPUT is the number of\n+   output dimensions, INPUT is the number of input dimensions, LOCALS\n+   is the number of existentially quantified variables and PARAMS is the\n+   number of parameters.  */\n+\n+static CloogMatrix *\n+openscop_read_cloog_matrix (FILE *file, int *output, int *input, int *locals,\n+\t\t\t    int *params)\n+{\n+  int nb_rows, nb_cols, i, j;\n+  CloogMatrix *mat;\n+  int *openscop_matrix_header, *matrix_line;\n+\n+  openscop_matrix_header = openscop_read_N_int (file, 6);\n+\n+  nb_rows = openscop_matrix_header[0];\n+  nb_cols = openscop_matrix_header[1];\n+  *output = openscop_matrix_header[2];\n+  *input = openscop_matrix_header[3];\n+  *locals = openscop_matrix_header[4];\n+  *params = openscop_matrix_header[5];\n+\n+  free (openscop_matrix_header);\n+\n+  if (nb_rows == 0 || nb_cols == 0)\n+    return NULL;\n+\n+  mat = cloog_matrix_alloc (nb_rows, nb_cols);\n+  mat->NbRows = nb_rows;\n+  mat->NbColumns = nb_cols;\n+\n+  for (i = 0; i < nb_rows; i++)\n+    {\n+      matrix_line = openscop_read_N_int (file, nb_cols);\n+\n+      for (j = 0; j < nb_cols; j++)\n+        mpz_set_si (mat->p[i][j], matrix_line[j]);\n+    }\n+\n+  return mat;\n+}\n+\n+/* Read from FILE the polyhedron PH in OpenScop format.  OUTPUT is the number\n+   of output dimensions, INPUT is the number of input dimensions, LOCALS is\n+   the number of existentially quantified variables and PARAMS is the number\n+   of parameters.  */\n+\n+void\n+openscop_read_polyhedron_matrix (FILE *file, ppl_Polyhedron_t *ph,\n+\t\t\t\t int *output, int *input, int *locals,\n+\t\t\t\t int *params)\n+{\n+  CloogMatrix *mat;\n+\n+  mat = openscop_read_cloog_matrix (file, output, input, locals, params);\n+\n+  if (!mat)\n+    *ph = NULL;\n+  else\n+    {\n+      new_C_Polyhedron_from_Cloog_Matrix (ph, mat);\n+      cloog_matrix_free (mat);\n+    }\n+}\n+\n #endif"}, {"sha": "9686e7cd465f7fbc8d6ede7ed6d990a0b80afb82", "filename": "gcc/graphite-cloog-util.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-cloog-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-cloog-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-cloog-util.h?ref=721c8b1e8e60d419cbd86ff82ea8510ef3350511", "patch": "@@ -34,5 +34,9 @@ CloogDomain * new_Cloog_Domain_from_ppl_Pointset_Powerset\n void new_C_Polyhedron_from_Cloog_Matrix (ppl_Polyhedron_t *, CloogMatrix *);\n void openscop_print_polyhedron_matrix (FILE *, ppl_const_Polyhedron_t, int,\n \t\t\t\t       int, int, int);\n+void openscop_read_polyhedron_matrix (FILE *, ppl_Polyhedron_t *, int *, int *,\n+\t       \t\t\t     int *, int *);\n+\n+extern int *openscop_read_N_int (FILE *, int);\n \n #endif /* GRAPHITE_CLOOG_UTIL_H */"}, {"sha": "eb4d61fe841c5c5c892670178e97c02b4d1881bb", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721c8b1e8e60d419cbd86ff82ea8510ef3350511/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=721c8b1e8e60d419cbd86ff82ea8510ef3350511", "patch": "@@ -54,6 +54,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-dependences.h\"\n #include \"graphite-cloog-util.h\"\n \n+#define OPENSCOP_MAX_STRING 256\n+\n /* Return the maximal loop depth in SCOP.  */\n \n int\n@@ -434,6 +436,252 @@ debug_iteration_domains (scop_p scop, int verbosity)\n   print_iteration_domains (stderr, scop, verbosity);\n }\n \n+/* Read N integer from FILE.  */\n+\n+int *\n+openscop_read_N_int (FILE *file, int N)\n+{\n+  char s[OPENSCOP_MAX_STRING];\n+  char *str;\n+  int i, *res = (int *) xmalloc (OPENSCOP_MAX_STRING * sizeof (int));\n+\n+  /* Skip blank and commented lines.  */\n+  while (fgets (s, sizeof s, file) == (char *) 0\n+\t || s[0] == '#'\n+\t || ISSPACE (s[0]))\n+    ;\n+\n+  str = s;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sscanf (str, \"%d\", &res[i]);\n+\n+      /* Jump the integer that was read.  */\n+      while ((*str) && !ISSPACE (*str) && (*str != '#'))\n+\tstr++;\n+\n+      /* Jump spaces.  */\n+      while ((*str) && ISSPACE (*str) && (*str != '#'))\n+\tstr++;\n+    }\n+\n+  return res;\n+}\n+\n+/* Read one integer from FILE.  */\n+\n+static int\n+openscop_read_one_int (FILE *file)\n+{\n+  int *x = openscop_read_N_int (file, 1);\n+  int res = *x;\n+\n+  free (x);\n+  return res;\n+}\n+\n+/* Read N string from FILE.  */\n+\n+static char *\n+openscop_read_N_string (FILE *file, int N)\n+{\n+  int count, i;\n+  char str[OPENSCOP_MAX_STRING];\n+  char *tmp = (char *) xmalloc (sizeof (char) * OPENSCOP_MAX_STRING);\n+  char *s = NULL;\n+\n+  /* Skip blank and commented lines.  */\n+  while (fgets (str, sizeof str, file) == (char *) 0\n+\t || str[0] == '#'\n+\t || ISSPACE (str[0]))\n+    ;\n+\n+  s = str;\n+  count = 0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      /* Read the first word.  */\n+      for (; (*s) && (!ISSPACE (*s)) && (*s != '#'); ++count)\n+        tmp[count] = *(s++);\n+\n+      tmp[count] = ' ';\n+      count++;\n+\n+      /* Jump spaces.  */\n+      while ((*s) && ISSPACE (*s) && (*s != '#'))\n+\ts++;\n+    }\n+\n+  tmp[count-1] = '\\0';\n+\n+  return tmp;\n+}\n+\n+/* Read one string from FILE.  */\n+\n+static char *\n+openscop_read_one_string (FILE *file)\n+{\n+  return openscop_read_N_string (file, 1);\n+}\n+\n+/* Read from FILE the powerset PS in its OpenScop matrix form.  OUTPUT is the\n+   number of output dimensions, INPUT is the number of input dimensions,\n+   LOCALS is the number of existentially quantified variables and PARAMS is\n+   the number of parameters.  */\n+\n+static void\n+openscop_read_powerset_matrix (FILE *file,\n+\t\t\t       ppl_Pointset_Powerset_C_Polyhedron_t *ps,\n+\t\t\t       int *output, int *input, int *locals,\n+\t\t\t       int *params)\n+{\n+  int nb_disjuncts, i;\n+\n+  nb_disjuncts = openscop_read_one_int (file);\n+\n+  for (i = 0; i < nb_disjuncts; i++)\n+    {\n+      ppl_Polyhedron_t ph;\n+\n+      openscop_read_polyhedron_matrix (file, &ph, output, input, locals,\n+\t\t\t\t       params);\n+      if (!ph)\n+        *ps = NULL;\n+      else if (i == 0)\n+        ppl_new_Pointset_Powerset_C_Polyhedron_from_C_Polyhedron (ps, ph);\n+      else\n+        ppl_Pointset_Powerset_C_Polyhedron_add_disjunct (*ps, ph);\n+    }\n+}\n+\n+/* Read a scattering function from FILE and save it to PBB.  Return whether\n+   the scattering function was provided or not.  */\n+\n+static bool\n+graphite_read_scatt (FILE *file, poly_bb_p pbb)\n+{\n+  bool scattering_provided = false;\n+  int output, input, locals, params;\n+  ppl_Polyhedron_t newp;\n+\n+  if (openscop_read_one_int (file) > 0)\n+    {\n+      /* Read number of disjunct components.  */\n+      openscop_read_one_int (file);\n+\n+      /* Read scattering function.  */\n+      openscop_read_polyhedron_matrix (file, &newp, &output, &input,\n+\t\t\t\t       &locals, &params);\n+      store_scattering (PBB_SCOP (pbb));\n+      PBB_TRANSFORMED (pbb) = poly_scattering_new ();\n+      PBB_TRANSFORMED_SCATTERING (pbb) = newp;\n+      PBB_NB_LOCAL_VARIABLES (pbb) = locals;\n+\n+      /* New scattering dimension.  */\n+      PBB_NB_SCATTERING_TRANSFORM (pbb) = output;\n+\n+      scattering_provided = true;\n+    }\n+\n+  return scattering_provided;\n+}\n+\n+/* Read a scop file.  Return true if the scop is transformed.  */\n+\n+static bool\n+graphite_read_scop_file (FILE *file, scop_p scop)\n+{\n+  char *tmp, *language;\n+  size_t i, j, nb_statements, nbr, nbw;\n+  int input, output, locals, params;\n+  ppl_Pointset_Powerset_C_Polyhedron_t ps;\n+  poly_bb_p pbb;\n+  bool transform_done;\n+\n+  /* Ensure that the file is in OpenScop format.  */\n+  tmp = openscop_read_N_string (file, 2);\n+\n+  if (strcmp (tmp, \"SCoP 1\"))\n+    {\n+      error (\"The file is not in OpenScop format.\\n\");\n+      return false;\n+    }\n+\n+  free (tmp);\n+\n+  /* Read the language.  */\n+  language = openscop_read_one_string (file);\n+\n+  if (strcmp (language, \"Gimple\"))\n+    {\n+      error (\"The language is not recognized\\n\");\n+      return false;\n+    }\n+\n+  free (language);\n+\n+  /* Read the context but do not use it.  */\n+  openscop_read_powerset_matrix (file, &ps, &input, &output, &locals, &params);\n+\n+  if ((size_t) params != scop->nb_params)\n+    {\n+      error (\"Parameters number in the scop file is different from the\"\n+\t     \" internal scop parameter number.\");\n+      return false;\n+    }\n+\n+  /* Read parameter names if provided.  */\n+  if (openscop_read_one_int (file))\n+    openscop_read_N_string (file, scop->nb_params);\n+\n+  nb_statements = openscop_read_one_int (file);\n+\n+  if (nb_statements != VEC_length (poly_bb_p, SCOP_BBS (scop)))\n+    {\n+      error (\"Number of statements in the OpenScop file does not match\"\n+\t     \" the graphite internal statements number.\");\n+      return false;\n+    }\n+\n+  for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n+    {\n+      /* Read iteration domain.  */\n+      openscop_read_powerset_matrix (file, &ps, &input, &output, &locals,\n+\t\t\t\t     &params);\n+\n+      /* Read scattering.  */\n+      transform_done = graphite_read_scatt (file, pbb);\n+\n+      /* Scattering names.  */\n+      openscop_read_one_int (file);\n+\n+      /* Read access functions.  */\n+      if (openscop_read_one_int (file) > 0)\n+\t{\n+\t  nbr = openscop_read_one_int (file);\n+\n+\t  /* Read access functions.  */\n+\t  for (j = 0; j < nbr; j++)\n+\t    openscop_read_powerset_matrix (file, &ps, &input, &output, &locals,\n+\t\t\t\t\t   &params);\n+\n+\t  nbw = openscop_read_one_int (file);\n+\n+\t  /* Write access functions.  */\n+\t  for (j = 0; j < nbw; j++)\n+\t    openscop_read_powerset_matrix (file, &ps, &input, &output, &locals,\n+\t\t\t\t\t   &params);\n+\t}\n+\n+      /* Statement body.  */\n+      openscop_read_one_int (file);\n+    }\n+\n+  return transform_done;\n+}\n \n /* Apply graphite transformations to all the basic blocks of SCOP.  */\n \n@@ -442,6 +690,13 @@ apply_poly_transforms (scop_p scop)\n {\n   bool transform_done = false;\n \n+  /* This feature is only enabled in the Graphite branch.  */\n+  if (0)\n+    {\n+      transform_done |= graphite_read_scop_file (dump_file, scop);\n+      gcc_assert (graphite_legal_transform (scop));\n+    }\n+\n   /* Generate code even if we did not apply any real transformation.\n      This also allows to check the performance for the identity\n      transformation: GIMPLE -> GRAPHITE -> GIMPLE\n@@ -464,6 +719,10 @@ apply_poly_transforms (scop_p scop)\n \ttransform_done |= scop_do_interchange (scop);\n     }\n \n+  /* This feature is only enabled in the Graphite branch.  */\n+  if (0)\n+    print_scop (dump_file, scop, 1);\n+\n   return transform_done;\n }\n "}]}