{"sha": "1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjOWQwYjBlNDY1N2IyOWZmMTQwZmEwM2RjYTE3MTFhYTVhMTE5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-09T23:25:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-09T23:25:53Z"}, "message": "Define aliases for containers using polymorphic_allocator\n\nThese aliases are placed in the top-level header, e.g. <vector> not\n<bits/stl_vector.h>. This ensures that they refer to whichever of\nstd::vector or __debug::vector or __profile::vector is in use when the\nheader is included.\n\n\t* include/std/deque (std::pmr::deque): Declare alias.\n\t* include/std/forward_list (std::pmr::forward_list): Likewise.\n\t* include/std/list (std::pmr::list): Likewise.\n\t* include/std/map (std::pmr::map, std::pmr::multimap): Likewise.\n\t* include/std/regex (std::pmr::match_results, std::pmr::cmatch)\n\t(std::pmr::smatch, std::pmr::wcmatch, std::pmr::wsmatch): Likewise.\n\t* include/std/set (std::pmr::set, std::pmr::multiset): Likewise.\n\t* include/std/string (std::pmr::basic_string, std::pmr::string)\n\t(std::pmr::u16string, std::pmr::u32string, std::pmr::wstring):\n\tLikewise.\n\t* include/std/unordered_map (std::pmr::unordered_map)\n\t(std::pmr::unordered_multimap): Likewise.\n\t* include/std/unordered_set (std::pmr::unordered_set)\n\t(std::pmr::unordered_multiset): Likewise.\n\t* include/std/vector (std::pmr::vector): Likewise.\n\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/deque/types/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/forward_list/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/list/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/map/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/multimap/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/multiset/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/set/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/unordered_map/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/pmr_typedefs.cc: New\n\ttest.\n\t* testsuite/23_containers/unordered_multiset/pmr_typedefs.cc: New\n\ttest.\n\t* testsuite/23_containers/unordered_set/pmr_typedefs.cc: New test.\n\t* testsuite/23_containers/vector/pmr_typedefs.cc: New test.\n\t* testsuite/28_regex/match_results/pmr_typedefs.cc: New test.\n\nFrom-SVN: r263456", "tree": {"sha": "de7d6dd8a1e2e274f4feb0b9d819fd3f00b6f82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7d6dd8a1e2e274f4feb0b9d819fd3f00b6f82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "093f71dbec040e07161888cc30a923599f38ac95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093f71dbec040e07161888cc30a923599f38ac95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093f71dbec040e07161888cc30a923599f38ac95"}], "stats": {"total": 685, "additions": 683, "deletions": 2}, "files": [{"sha": "1b61ec79360f3b91d4b48febc91b70a5e42cbbde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -1,3 +1,37 @@\n+2018-08-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/deque (std::pmr::deque): Declare alias.\n+\t* include/std/forward_list (std::pmr::forward_list): Likewise.\n+\t* include/std/list (std::pmr::list): Likewise.\n+\t* include/std/map (std::pmr::map, std::pmr::multimap): Likewise.\n+\t* include/std/regex (std::pmr::match_results, std::pmr::cmatch)\n+\t(std::pmr::smatch, std::pmr::wcmatch, std::pmr::wsmatch): Likewise.\n+\t* include/std/set (std::pmr::set, std::pmr::multiset): Likewise.\n+\t* include/std/string (std::pmr::basic_string, std::pmr::string)\n+\t(std::pmr::u16string, std::pmr::u32string, std::pmr::wstring):\n+\tLikewise.\n+\t* include/std/unordered_map (std::pmr::unordered_map)\n+\t(std::pmr::unordered_multimap): Likewise.\n+\t* include/std/unordered_set (std::pmr::unordered_set)\n+\t(std::pmr::unordered_multiset): Likewise.\n+\t* include/std/vector (std::pmr::vector): Likewise.\n+\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/deque/types/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/forward_list/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/list/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/map/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/multimap/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/multiset/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/set/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/unordered_map/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/pmr_typedefs.cc: New\n+\ttest.\n+\t* testsuite/23_containers/unordered_multiset/pmr_typedefs.cc: New\n+\ttest.\n+\t* testsuite/23_containers/unordered_set/pmr_typedefs.cc: New test.\n+\t* testsuite/23_containers/vector/pmr_typedefs.cc: New test.\n+\t* testsuite/28_regex/match_results/pmr_typedefs.cc: New test.\n+\n 2018-08-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_algo.h"}, {"sha": "d2c75f1f07825b2faa3968782b9c5a8914bebf91", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -73,4 +73,18 @@\n # include <profile/deque>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Tp>\n+      using deque = std::deque<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n+\n #endif /* _GLIBCXX_DEQUE */"}, {"sha": "00b41354c7d79f0b646a1fa4d7281c4f081c711a", "filename": "libstdc++-v3/include/std/forward_list", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -47,6 +47,19 @@\n # include <profile/forward_list>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Tp>\n+      using forward_list = std::forward_list<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n #endif // C++11\n \n #endif // _GLIBCXX_FORWARD_LIST"}, {"sha": "555371ffb769a8d8278c051c2ec96bb40c1b8034", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -71,5 +71,17 @@\n # include <profile/list>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Tp>\n+      using list = std::list<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n #endif /* _GLIBCXX_LIST */\n-"}, {"sha": "84f8cdb701dfd76afe5e40e174680863acac727b", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -70,4 +70,24 @@\n # include <profile/map>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Key, typename _Tp, typename _Cmp = std::less<_Key>>\n+      using map\n+\t= std::map<_Key, _Tp, _Cmp,\n+\t\t   polymorphic_allocator<pair<const _Key, _Tp>>>;\n+    template<typename _Key, typename _Tp, typename _Cmp = std::less<_Key>>\n+      using multimap\n+\t= std::multimap<_Key, _Tp, _Cmp,\n+\t\t\tpolymorphic_allocator<pair<const _Key, _Tp>>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n+\n #endif /* _GLIBCXX_MAP */"}, {"sha": "f0dfa3f68ab9b2c449c4d7528ca62b26d60d5e94", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -62,6 +62,27 @@\n #include <bits/regex.h>\n #include <bits/regex_executor.h>\n \n+#if __cplusplus >= 201703L\n+#include <memory_resource>\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _BidirectionalIterator>\n+      using match_results\n+\t= std::match_results<_BidirectionalIterator, polymorphic_allocator<\n+\t\t\t\tsub_match<_BidirectionalIterator>>>;\n+    using cmatch  = match_results<const char*>;\n+    using smatch  = match_results<string::const_iterator>;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    using wcmatch = match_results<const wchar_t*>;\n+    using wsmatch = match_results<wstring::const_iterator>;\n+#endif\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n #endif // C++11\n \n #endif // _GLIBCXX_REGEX"}, {"sha": "dd41b2f19113e97ce401ef2ef91add4c783f7a9d", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -70,4 +70,20 @@\n # include <profile/set>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Key, typename _Cmp = std::less<_Key>>\n+      using set = std::set<_Key, _Cmp, polymorphic_allocator<_Key>>;\n+    template<typename _Key, typename _Cmp = std::less<_Key>>\n+      using multiset = std::multiset<_Key, _Cmp, polymorphic_allocator<_Key>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n+\n #endif /* _GLIBCXX_SET */"}, {"sha": "d3cc03aa179a17cfcf8c23664c0b6cb40a5fb395", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -52,4 +52,24 @@\n #include <bits/basic_string.h>\n #include <bits/basic_string.tcc>\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+      using basic_string = std::basic_string<_CharT, _Traits,\n+\t\t\t\t\t     polymorphic_allocator<_CharT>>;\n+    using string    = basic_string<char>;\n+    using u16string = basic_string<char16_t>;\n+    using u32string = basic_string<char32_t>;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    using wstring   = basic_string<wchar_t>;\n+#endif\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n+\n #endif /* _GLIBCXX_STRING */"}, {"sha": "fc1b1e3c71cc90433563b2bf9808994090fbfef5", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -55,6 +55,27 @@\n # include <profile/unordered_map>\n #endif\n \n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Key, typename _Tp, typename _Hash = std::hash<_Key>,\n+\t     typename _Pred = std::equal_to<_Key>>\n+      using unordered_map\n+\t= std::unordered_map<_Key, _Tp, _Hash, _Pred,\n+\t\t\t     polymorphic_allocator<pair<const _Key, _Tp>>>;\n+    template<typename _Key, typename _Tp, typename _Hash = std::hash<_Key>,\n+\t     typename _Pred = std::equal_to<_Key>>\n+      using unordered_multimap\n+\t= std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\n+\t\t\t\t  polymorphic_allocator<pair<const _Key, _Tp>>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n #endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_MAP"}, {"sha": "8c04669a46e681fc2de8a8146300e498313d1ed6", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -54,6 +54,28 @@\n #ifdef _GLIBCXX_PROFILE\n # include <profile/unordered_set>\n #endif\n+\n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr\n+  {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Key, typename _Hash = std::hash<_Key>,\n+\t     typename _Pred = std::equal_to<_Key>>\n+      using unordered_set\n+\t= std::unordered_set<_Key, _Hash, _Pred,\n+\t\t\t     polymorphic_allocator<_Key>>;\n+    template<typename _Key, typename _Hash = std::hash<_Key>,\n+\t     typename _Pred = std::equal_to<_Key>>\n+      using unordered_multiset\n+\t= std::unordered_multiset<_Key, _Hash, _Pred,\n+\t\t\t\t  polymorphic_allocator<_Key>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n #endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_SET"}, {"sha": "2a421c631f1823819b9ca4bcced2835a9b6f69c0", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -77,5 +77,17 @@\n # include <profile/vector>\n #endif\n \n-#endif /* _GLIBCXX_VECTOR */\n+#if __cplusplus >= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  namespace pmr {\n+    template<typename _Tp> class polymorphic_allocator;\n+    template<typename _Tp>\n+      using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n+  } // namespace pmr\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++17\n \n+#endif /* _GLIBCXX_VECTOR */"}, {"sha": "d20fc42901e93f0e4552ce6796d8f5fea4e1bf46", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/types/pmr_typedefs.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <string>\n+#include <memory_resource>\n+\n+struct T : std::char_traits<char> { };\n+\n+static_assert(std::is_same_v<std::pmr::basic_string<char>,\n+    std::basic_string<char, std::char_traits<char>,\n+\t\t      std::pmr::polymorphic_allocator<char>>>);\n+static_assert(std::is_same_v<std::pmr::basic_string<char, T>,\n+    std::basic_string<char, T, std::pmr::polymorphic_allocator<char>>>);\n+\n+static_assert(std::is_same_v<std::pmr::string,\n+    std::basic_string<char, std::char_traits<char>,\n+\t\t      std::pmr::polymorphic_allocator<char>>>);\n+static_assert(std::is_same_v<std::pmr::u16string,\n+    std::basic_string<char16_t, std::char_traits<char16_t>,\n+\t\t      std::pmr::polymorphic_allocator<char16_t>>>);\n+static_assert(std::is_same_v<std::pmr::u32string,\n+    std::basic_string<char32_t, std::char_traits<char32_t>,\n+\t\t      std::pmr::polymorphic_allocator<char32_t>>>);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+static_assert(std::is_same_v<std::pmr::basic_string<wchar_t>,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t      std::pmr::polymorphic_allocator<wchar_t>>>);\n+static_assert(std::is_same_v<std::pmr::basic_string<wchar_t, T>,\n+    std::basic_string<wchar_t, T, std::pmr::polymorphic_allocator<wchar_t>>>);\n+\n+static_assert(std::is_same_v<std::pmr::wstring,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t      std::pmr::polymorphic_allocator<wchar_t>>>);\n+#endif"}, {"sha": "cd51626d35b83cd4d2f57cdf68ca0c1e239420fe", "filename": "libstdc++-v3/testsuite/23_containers/deque/types/pmr_typedefs.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <deque>\n+#include <memory_resource>\n+\n+struct X { };\n+\n+static_assert(std::is_same_v<std::pmr::deque<X>,\n+    std::deque<X, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "7bf61fac5f129c55447ecdfa32f25fb92901f00e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/pmr_typedefs.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <forward_list>\n+#include <memory_resource>\n+\n+struct X { };\n+\n+static_assert(std::is_same_v<std::pmr::forward_list<X>,\n+    std::forward_list<X, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "3359295ea33bd3cf7a76b6c799ab53d506f4b57f", "filename": "libstdc++-v3/testsuite/23_containers/list/pmr_typedefs.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <list>\n+#include <memory_resource>\n+\n+struct X { };\n+\n+static_assert(std::is_same_v<std::pmr::list<X>,\n+    std::list<X, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "1a49272b30c59fbfb32f8486e10c809cd5b8c26b", "filename": "libstdc++-v3/testsuite/23_containers/map/pmr_typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <map>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Y { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same_v<std::pmr::map<X, Y>,\n+    std::map<X, Y, std::less<X>,\n+\t     std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::map<X, Y, Cmp>,\n+    std::map<X, Y, Cmp,\n+\t     std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);"}, {"sha": "f1dc01e33934f9df856229a56a302db83dff401f", "filename": "libstdc++-v3/testsuite/23_containers/multimap/pmr_typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <map>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Y { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same_v<std::pmr::multimap<X, Y>,\n+    std::multimap<X, Y, std::less<X>,\n+\t\t  std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::multimap<X, Y, Cmp>,\n+    std::multimap<X, Y, Cmp,\n+\t\t  std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);"}, {"sha": "224d8821a2756cb3bf27b0fd625860331f8e91b0", "filename": "libstdc++-v3/testsuite/23_containers/multiset/pmr_typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <set>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same_v<std::pmr::multiset<X>,\n+    std::multiset<X, std::less<X>, std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::multiset<X, Cmp>,\n+    std::multiset<X, Cmp, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "f041c853118af3be053629fe85e27da8bba2450c", "filename": "libstdc++-v3/testsuite/23_containers/set/pmr_typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <set>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same_v<std::pmr::set<X>,\n+    std::set<X, std::less<X>, std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::set<X, Cmp>,\n+    std::set<X, Cmp, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "c628539663e7f030b0bcaa8ad23e5304659a0a05", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/pmr_typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_map>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Y { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same_v<std::pmr::unordered_map<X, Y>,\n+    std::unordered_map<X, Y, std::hash<X>, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_map<X, Y, Hash>,\n+    std::unordered_map<X, Y, Hash, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_map<X, Y, Hash, Eq>,\n+    std::unordered_map<X, Y, Hash, Eq,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);"}, {"sha": "849b5ab71e7c449d7d436e8fe844e967c7cba219", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/pmr_typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_map>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Y { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same_v<std::pmr::unordered_multimap<X, Y>,\n+    std::unordered_multimap<X, Y, std::hash<X>, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_multimap<X, Y, Hash>,\n+    std::unordered_multimap<X, Y, Hash, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_multimap<X, Y, Hash, Eq>,\n+    std::unordered_multimap<X, Y, Hash, Eq,\n+      std::pmr::polymorphic_allocator<std::pair<const X, Y>>>>);"}, {"sha": "c4eaaf5c7b70ae1746c4afc1d728c6a45fe79092", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/pmr_typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_set>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same_v<std::pmr::unordered_multiset<X>,\n+    std::unordered_multiset<X, std::hash<X>, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_multiset<X, Hash>,\n+    std::unordered_multiset<X, Hash, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_multiset<X, Hash, Eq>,\n+    std::unordered_multiset<X, Hash, Eq,\n+      std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "ecd38235657ea1f75db2d41ee7aaf4743eb2bee9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/pmr_typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_set>\n+#include <memory_resource>\n+\n+struct X { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same_v<std::pmr::unordered_set<X>,\n+    std::unordered_set<X, std::hash<X>, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_set<X, Hash>,\n+    std::unordered_set<X, Hash, std::equal_to<X>,\n+      std::pmr::polymorphic_allocator<X>>>);\n+static_assert(std::is_same_v<std::pmr::unordered_set<X, Hash, Eq>,\n+    std::unordered_set<X, Hash, Eq,\n+      std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "d2f60febe8d95d6f996c8acacee9b9f78c6e51e3", "filename": "libstdc++-v3/testsuite/23_containers/vector/pmr_typedefs.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <vector>\n+#include <memory_resource>\n+\n+struct X { };\n+\n+static_assert(std::is_same_v<std::pmr::vector<X>,\n+    std::vector<X, std::pmr::polymorphic_allocator<X>>>);"}, {"sha": "23aef39caf32441686d2d0ac58770c78a26dfc53", "filename": "libstdc++-v3/testsuite/28_regex/match_results/pmr_typedefs.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc9d0b0e4657b29ff140fa03dca1711aa5a1198/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fpmr_typedefs.cc?ref=1fc9d0b0e4657b29ff140fa03dca1711aa5a1198", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <regex>\n+#include <memory_resource>\n+\n+struct X;\n+static_assert(std::is_same_v<std::pmr::match_results<X*>,\n+    std::match_results<X*,\n+      std::pmr::polymorphic_allocator<std::sub_match<X*>>>>);\n+\n+static_assert(std::is_same_v<std::pmr::cmatch,\n+    std::match_results<const char*,\n+      std::pmr::polymorphic_allocator<std::sub_match<const char*>>>>);\n+static_assert(std::is_same_v<std::pmr::smatch,\n+    std::match_results<std::pmr::string::const_iterator,\n+      std::pmr::polymorphic_allocator<\n+\tstd::sub_match<std::pmr::string::const_iterator>>>>);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+static_assert(std::is_same_v<std::pmr::wcmatch,\n+    std::match_results<const wchar_t*,\n+      std::pmr::polymorphic_allocator<std::sub_match<const wchar_t*>>>>);\n+static_assert(std::is_same_v<std::pmr::wsmatch,\n+    std::match_results<std::pmr::wstring::const_iterator,\n+      std::pmr::polymorphic_allocator<\n+\tstd::sub_match<std::pmr::wstring::const_iterator>>>>);\n+#endif"}]}