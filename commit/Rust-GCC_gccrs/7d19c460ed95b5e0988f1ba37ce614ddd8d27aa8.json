{"sha": "7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxOWM0NjBlZDk1YjVlMDk4OGYxYmEzN2NlNjE0ZGRkOGQyN2FhOA==", "commit": {"author": {"name": "Mukesh Kapoor", "email": "mukesh.kapoor@oracle.com", "date": "2017-11-06T10:33:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-11-06T10:33:41Z"}, "message": "re PR c++/80955 (Macros expanded in definition of user-defined literals)\n\n/libcpp\n2017-11-06  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n\n\tPR c++/80955\n\t* lex.c (lex_string): When checking for a valid macro for the\n\twarning related to -Wliteral-suffix (CPP_W_LITERAL_SUFFIX),\n\tcheck that the macro name does not start with an underscore\n\tbefore calling is_macro().\n\n/gcc/testsuite\n2017-11-06  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n\n\tPR c++/80955\n\t* g++.dg/cpp0x/udlit-macros.C: New.\n\nFrom-SVN: r254443", "tree": {"sha": "4ef2defce67d2862f4fcf5611615d618f5d1f6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef2defce67d2862f4fcf5611615d618f5d1f6ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/comments", "author": {"login": "mukapoor", "id": 29608874, "node_id": "MDQ6VXNlcjI5NjA4ODc0", "avatar_url": "https://avatars.githubusercontent.com/u/29608874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mukapoor", "html_url": "https://github.com/mukapoor", "followers_url": "https://api.github.com/users/mukapoor/followers", "following_url": "https://api.github.com/users/mukapoor/following{/other_user}", "gists_url": "https://api.github.com/users/mukapoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mukapoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mukapoor/subscriptions", "organizations_url": "https://api.github.com/users/mukapoor/orgs", "repos_url": "https://api.github.com/users/mukapoor/repos", "events_url": "https://api.github.com/users/mukapoor/events{/privacy}", "received_events_url": "https://api.github.com/users/mukapoor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16f681db1100e78ff9a0cb04fc8fd18719c92839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f681db1100e78ff9a0cb04fc8fd18719c92839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f681db1100e78ff9a0cb04fc8fd18719c92839"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "b56ace44321df07e1bb831e5b824e16b1259808f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "patch": "@@ -1,3 +1,8 @@\n+2017-11-06  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n+\n+\tPR c++/80955\n+\t* g++.dg/cpp0x/udlit-macros.C: New.\n+\n 2017-11-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69739"}, {"sha": "fb5182818118d068ba9658d8a7b8d841c2c9b89b", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-macros.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C?ref=7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/80955\n+// { dg-do run { target c++11 } }\n+\n+extern \"C\" int sprintf (char *s, const char *format, ...);\n+extern \"C\" int strcmp (const char *s1, const char *s2);\n+\n+#define __PRI64_PREFIX        \"l\"\n+#define PRId64         __PRI64_PREFIX \"d\"\n+\n+using size_t = decltype(sizeof(0));\n+#define _zero\n+#define _ID _xx\n+int operator\"\"_zero(const char*, size_t) { return 0; }\n+int operator\"\"_ID(const char*, size_t) { return 0; }\n+\n+int main()\n+{\n+  long i64 = 123;\n+  char buf[100];\n+  sprintf(buf, \"%\"PRId64\"abc\", i64);  // { dg-warning \"invalid suffix on literal\" }\n+  return strcmp(buf, \"123abc\")\n+\t + \"\"_zero\n+\t + \"bob\"_zero\n+\t + R\"#(raw\n+\t       string)#\"_zero\n+\t + \"xx\"_ID\n+\t + \"\"_ID\n+\t + R\"AA(another\n+\t\traw\n+\t\tstring)AA\"_ID;\n+}"}, {"sha": "86c42affdedc05a2b60ab89d7406d709bfc05396", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "patch": "@@ -1,3 +1,11 @@\n+2017-11-06  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n+\n+\tPR c++/80955\n+\t* lex.c (lex_string): When checking for a valid macro for the\n+\twarning related to -Wliteral-suffix (CPP_W_LITERAL_SUFFIX),\n+\tcheck that the macro name does not start with an underscore\n+\tbefore calling is_macro().\n+\n 2017-11-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/82784"}, {"sha": "8af09e50295535048b2f9f7105bd24ea2ab968e1", "filename": "libcpp/lex.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7d19c460ed95b5e0988f1ba37ce614ddd8d27aa8", "patch": "@@ -1871,8 +1871,9 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n       /* If a string format macro, say from inttypes.h, is placed touching\n \t a string literal it could be parsed as a C++11 user-defined string\n \t literal thus breaking the program.\n-\t Try to identify macros with is_macro. A warning is issued. */\n-      if (is_macro (pfile, cur))\n+\t Try to identify macros with is_macro. A warning is issued.\n+\t The macro name should not start with '_' for this warning. */\n+      if ((*cur != '_') && is_macro (pfile, cur))\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix) && !pfile->state.skipping)\n@@ -2001,8 +2002,9 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n       /* If a string format macro, say from inttypes.h, is placed touching\n \t a string literal it could be parsed as a C++11 user-defined string\n \t literal thus breaking the program.\n-\t Try to identify macros with is_macro. A warning is issued. */\n-      if (is_macro (pfile, cur))\n+\t Try to identify macros with is_macro. A warning is issued.\n+\t The macro name should not start with '_' for this warning. */\n+      if ((*cur != '_') && is_macro (pfile, cur))\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix) && !pfile->state.skipping)"}]}