{"sha": "931050d044409ae6f3e18ac2fe4128e1e2bee11b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMDUwZDA0NDQwOWFlNmYzZTE4YWMyZmU0MTI4ZTFlMmJlZTExYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-29T16:02:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-29T16:02:56Z"}, "message": "re PR tree-optimization/49539 (ICE building gnattools)\n\n\tPR tree-optimization/49539\n\t* tree-ssa-forwprop.c (can_propagate_from): Check for abnormal SSA\n\tnames by means of stmt_references_abnormal_ssa_name.\n\t(associate_plusminus): Call can_propagate_from before propagating\n\tfrom definition statements.\n\t(ssa_forward_propagate_and_combine): Remove superfluous newline.\n\nFrom-SVN: r175650", "tree": {"sha": "ec4c6de260e96259274f75556d8c508f71b8f061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4c6de260e96259274f75556d8c508f71b8f061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931050d044409ae6f3e18ac2fe4128e1e2bee11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931050d044409ae6f3e18ac2fe4128e1e2bee11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931050d044409ae6f3e18ac2fe4128e1e2bee11b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931050d044409ae6f3e18ac2fe4128e1e2bee11b/comments", "author": null, "committer": null, "parents": [{"sha": "f732fa7b6cd8f125f19aa150d88d47a15e0099cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f732fa7b6cd8f125f19aa150d88d47a15e0099cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f732fa7b6cd8f125f19aa150d88d47a15e0099cc"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "e37d823b42bf8ad41bc2b14972154074cda9ff87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931050d044409ae6f3e18ac2fe4128e1e2bee11b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931050d044409ae6f3e18ac2fe4128e1e2bee11b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=931050d044409ae6f3e18ac2fe4128e1e2bee11b", "patch": "@@ -1,3 +1,12 @@\n+2011-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/49539\n+\t* tree-ssa-forwprop.c (can_propagate_from): Check for abnormal SSA\n+\tnames by means of stmt_references_abnormal_ssa_name.\n+\t(associate_plusminus): Call can_propagate_from before propagating\n+\tfrom definition statements.\n+\t(ssa_forward_propagate_and_combine): Remove superfluous newline.\n+\n 2011-06-29  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/invoke.texi: Document -scev dump modifier.\n@@ -963,7 +972,7 @@\n \n 2011-06-20  Changpeng Fang  <changpeng.fang@amd.com>\n \n-\tPR i386/49089\n+\tPR target/49089\n \t* config/i386/i386.c (avx256_split_unaligned_load): New definition.\n \t(avx256_split_unaligned_store): New definition.\n \t(ix86_option_override_internal): Enable avx256 unaligned load/store"}, {"sha": "e93acdfc081ac9da4ba000991ae37da2337de563", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931050d044409ae6f3e18ac2fe4128e1e2bee11b/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931050d044409ae6f3e18ac2fe4128e1e2bee11b/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=931050d044409ae6f3e18ac2fe4128e1e2bee11b", "patch": "@@ -260,9 +260,6 @@ get_prop_source_stmt (tree name, bool single_use_only, bool *single_use_p)\n static bool\n can_propagate_from (gimple def_stmt)\n {\n-  use_operand_p use_p;\n-  ssa_op_iter iter;\n-\n   gcc_assert (is_gimple_assign (def_stmt));\n \n   /* If the rhs has side-effects we cannot propagate from it.  */\n@@ -280,9 +277,8 @@ can_propagate_from (gimple def_stmt)\n     return true;\n \n   /* We cannot propagate ssa names that occur in abnormal phi nodes.  */\n-  FOR_EACH_SSA_USE_OPERAND (use_p, def_stmt, iter, SSA_OP_USE)\n-    if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (USE_FROM_PTR (use_p)))\n-      return false;\n+  if (stmt_references_abnormal_ssa_name (def_stmt))\n+    return false;\n \n   /* If the definition is a conversion of a pointer to a function type,\n      then we can not apply optimizations as some targets require\n@@ -1803,7 +1799,8 @@ associate_plusminus (gimple stmt)\n \t{\n \t  gimple def_stmt = SSA_NAME_DEF_STMT (rhs2);\n \t  if (is_gimple_assign (def_stmt)\n-\t      && gimple_assign_rhs_code (def_stmt) == NEGATE_EXPR)\n+\t      && gimple_assign_rhs_code (def_stmt) == NEGATE_EXPR\n+\t      && can_propagate_from (def_stmt))\n \t    {\n \t      code = (code == MINUS_EXPR) ? PLUS_EXPR : MINUS_EXPR;\n \t      gimple_assign_set_rhs_code (stmt, code);\n@@ -1820,7 +1817,8 @@ associate_plusminus (gimple stmt)\n \t{\n \t  gimple def_stmt = SSA_NAME_DEF_STMT (rhs1);\n \t  if (is_gimple_assign (def_stmt)\n-\t      && gimple_assign_rhs_code (def_stmt) == NEGATE_EXPR)\n+\t      && gimple_assign_rhs_code (def_stmt) == NEGATE_EXPR\n+\t      && can_propagate_from (def_stmt))\n \t    {\n \t      code = MINUS_EXPR;\n \t      gimple_assign_set_rhs_code (stmt, code);\n@@ -1863,7 +1861,7 @@ associate_plusminus (gimple stmt)\n   if (TREE_CODE (rhs1) == SSA_NAME)\n     {\n       gimple def_stmt = SSA_NAME_DEF_STMT (rhs1);\n-      if (is_gimple_assign (def_stmt))\n+      if (is_gimple_assign (def_stmt) && can_propagate_from (def_stmt))\n \t{\n \t  enum tree_code def_code = gimple_assign_rhs_code (def_stmt);\n \t  if (def_code == PLUS_EXPR\n@@ -1963,7 +1961,7 @@ associate_plusminus (gimple stmt)\n   if (rhs2 && TREE_CODE (rhs2) == SSA_NAME)\n     {\n       gimple def_stmt = SSA_NAME_DEF_STMT (rhs2);\n-      if (is_gimple_assign (def_stmt))\n+      if (is_gimple_assign (def_stmt) && can_propagate_from (def_stmt))\n \t{\n \t  enum tree_code def_code = gimple_assign_rhs_code (def_stmt);\n \t  if (def_code == PLUS_EXPR\n@@ -2285,8 +2283,7 @@ ssa_forward_propagate_and_combine (void)\n \t      else\n \t\tgsi_next (&gsi);\n \t    }\n-\t  else if (code == POINTER_PLUS_EXPR\n-\t\t   && can_propagate_from (stmt))\n+\t  else if (code == POINTER_PLUS_EXPR && can_propagate_from (stmt))\n \t    {\n \t      if (TREE_CODE (gimple_assign_rhs2 (stmt)) == INTEGER_CST\n \t\t  /* ???  Better adjust the interface to that function"}]}