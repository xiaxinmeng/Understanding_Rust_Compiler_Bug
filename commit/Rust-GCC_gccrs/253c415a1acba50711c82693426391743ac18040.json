{"sha": "253c415a1acba50711c82693426391743ac18040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzYzQxNWExYWNiYTUwNzExYzgyNjkzNDI2MzkxNzQzYWMxODA0MA==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-11-15T16:22:19Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-11-15T16:30:50Z"}, "message": "Do not put reload insns in the last empty BB.\n\ngcc/\n\t* lra.c (lra_process_new_insns): Don't put reload insns in the\n\tlast empty BB.", "tree": {"sha": "600a63f76292e6aa56e9ccf8df4116a3fbf7f948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/600a63f76292e6aa56e9ccf8df4116a3fbf7f948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253c415a1acba50711c82693426391743ac18040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253c415a1acba50711c82693426391743ac18040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253c415a1acba50711c82693426391743ac18040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253c415a1acba50711c82693426391743ac18040/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26285af40f98dfdb809b98b08386073c63b65db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26285af40f98dfdb809b98b08386073c63b65db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26285af40f98dfdb809b98b08386073c63b65db1"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "b318cfd7456531c2890340c674c429f65bd0cc7b", "filename": "gcc/lra.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253c415a1acba50711c82693426391743ac18040/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253c415a1acba50711c82693426391743ac18040/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=253c415a1acba50711c82693426391743ac18040", "patch": "@@ -1903,15 +1903,23 @@ lra_process_new_insns (rtx_insn *insn, rtx_insn *before, rtx_insn *after,\n \t      {\n \t\t/* We already made the edge no-critical in ira.c::ira */\n \t\tlra_assert (!EDGE_CRITICAL_P (e));\n-\t\trtx_insn *tmp = BB_HEAD (e->dest);\n+\t\trtx_insn *curr, *tmp = BB_HEAD (e->dest);\n \t\tif (LABEL_P (tmp))\n \t\t  tmp = NEXT_INSN (tmp);\n \t\tif (NOTE_INSN_BASIC_BLOCK_P (tmp))\n \t\t  tmp = NEXT_INSN (tmp);\n-\t\tstart_sequence ();\n-\t\tfor (rtx_insn *curr = after;\n-\t\t     curr != NULL_RTX;\n+\t\tfor (curr = tmp;\n+\t\t     curr != NULL\n+\t\t       && (!INSN_P (curr) || BLOCK_FOR_INSN (curr) == e->dest);\n \t\t     curr = NEXT_INSN (curr))\n+\t\t  ;\n+\t\t/* Do not put reload insns if it is the last BB\n+\t\t   without actual insns.  In this case the reload insns\n+\t\t   can get null BB after emitting.  */\n+\t\tif (curr == NULL)\n+\t\t  continue;\n+\t\tstart_sequence ();\n+\t\tfor (curr = after; curr != NULL_RTX; curr = NEXT_INSN (curr))\n \t\t  emit_insn (copy_insn (PATTERN (curr)));\n \t\trtx_insn *copy = get_insns (), *last = get_last_insn ();\n \t\tend_sequence ();"}]}