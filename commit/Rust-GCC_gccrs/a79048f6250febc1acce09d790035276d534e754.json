{"sha": "a79048f6250febc1acce09d790035276d534e754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5MDQ4ZjYyNTBmZWJjMWFjY2UwOWQ3OTAwMzUyNzZkNTM0ZTc1NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:04:46Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:04:46Z"}, "message": "[arm] Improve constant handling for usubvsi4.\n\nThis patch improves the expansion of usubvsi4 by allowing suitable\nconstants to be passed directly.  Unlike normal subtraction, either\noperand may be a constant (and indeed I have seen cases where both can\nbe with LTO enabled).  One interesting testcase that improves as a\nresult of this is:\n\nunsigned f6 (unsigned a)\n{\n  unsigned x;\n  return __builtin_sub_overflow (5U, a, &x) ? 0 : x;\n}\n\nWhich previously compiled to:\n\n\trsbs\tr3, r0, #5\n\tcmp\tr0, #5\n\tmovls\tr0, r3\n\tmovhi\tr0, #0\n\nbut now generates the optimal sequence:\n\n\trsbs\tr0, r0, #5\n\tmovcc\tr0, #0\n\n\t* config/arm/arm.md (usubv<mode>4): Delete expansion.\n\t(usubvsi4): New pattern.  Allow some immediate values for inputs.\n\t(usubvdi4): New pattern.\n\nFrom-SVN: r277187", "tree": {"sha": "f1e52a3111c47fb41bbec05a282a1f88a986cbd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e52a3111c47fb41bbec05a282a1f88a986cbd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a79048f6250febc1acce09d790035276d534e754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79048f6250febc1acce09d790035276d534e754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79048f6250febc1acce09d790035276d534e754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79048f6250febc1acce09d790035276d534e754/comments", "author": null, "committer": null, "parents": [{"sha": "fa62df0e600ef617bce549d64026c0e5cc817c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa62df0e600ef617bce549d64026c0e5cc817c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa62df0e600ef617bce549d64026c0e5cc817c31"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "9e4e2d721a872952b81e8bd02dca2f5965a1fa28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79048f6250febc1acce09d790035276d534e754/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79048f6250febc1acce09d790035276d534e754/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a79048f6250febc1acce09d790035276d534e754", "patch": "@@ -1,3 +1,9 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (usubv<mode>4): Delete expansion.\n+\t(usubvsi4): New pattern.  Allow some immediate values for inputs.\n+\t(usubvdi4): New pattern.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.c (arm_select_cc_mode): Allow either the first"}, {"sha": "a465bf8e7a396847d33c9b6516cd14a8546d4894", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79048f6250febc1acce09d790035276d534e754/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79048f6250febc1acce09d790035276d534e754/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a79048f6250febc1acce09d790035276d534e754", "patch": "@@ -1352,14 +1352,50 @@\n   DONE;\n })\n \n-(define_expand \"usubv<mode>4\"\n-  [(match_operand:SIDI 0 \"register_operand\")\n-   (match_operand:SIDI 1 \"register_operand\")\n-   (match_operand:SIDI 2 \"register_operand\")\n+(define_expand \"usubvsi4\"\n+  [(match_operand:SI 0 \"s_register_operand\")\n+   (match_operand:SI 1 \"arm_rhs_operand\")\n+   (match_operand:SI 2 \"arm_add_operand\")\n    (match_operand 3 \"\")]\n   \"TARGET_32BIT\"\n {\n-  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  machine_mode mode = CCmode;\n+  if (CONST_INT_P (operands[1]) && CONST_INT_P (operands[2]))\n+    {\n+      /* If both operands are constants we can decide the result statically.  */\n+      wi::overflow_type overflow;\n+      wide_int val = wi::sub (rtx_mode_t (operands[1], SImode),\n+\t\t\t      rtx_mode_t (operands[2], SImode),\n+\t\t\t      UNSIGNED, &overflow);\n+      emit_move_insn (operands[0], GEN_INT (val.to_shwi ()));\n+      if (overflow != wi::OVF_NONE)\n+\temit_jump_insn (gen_jump (operands[3]));\n+      DONE;\n+    }\n+  else if (CONST_INT_P (operands[2]))\n+    emit_insn (gen_cmpsi2_addneg (operands[0], operands[1], operands[2],\n+\t\t\t\t  GEN_INT (-INTVAL (operands[2]))));\n+  else if (CONST_INT_P (operands[1]))\n+    {\n+      mode = CC_RSBmode;\n+      emit_insn (gen_rsb_imm_compare (operands[0], operands[1], operands[2],\n+\t\t\t\t      GEN_INT (~UINTVAL (operands[1]))));\n+    }\n+  else\n+    emit_insn (gen_subsi3_compare1 (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (LTU, mode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"usubvdi4\"\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:DI 2 \"s_register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_subdi3_compare1 (operands[0], operands[1], operands[2]));\n   arm_gen_unlikely_cbranch (LTU, CCmode, operands[3]);\n \n   DONE;"}]}