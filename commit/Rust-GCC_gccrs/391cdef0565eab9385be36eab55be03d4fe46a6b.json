{"sha": "391cdef0565eab9385be36eab55be03d4fe46a6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxY2RlZjA1NjVlYWI5Mzg1YmUzNmVhYjU1YmUwM2Q0ZmU0NmE2Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-11T18:46:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-11T18:46:52Z"}, "message": "cplus-dem.c (demangle_template_value_parm): Handle pointers-to-members.\n\n\t* cplus-dem.c (demangle_template_value_parm): Handle\n\tpointers-to-members.\n\t(do_type): Handle template parameters as qualifiers.\n\nFrom-SVN: r26350", "tree": {"sha": "bd0eaa2d37124ed2f242bc556d3bf2561ef0f154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd0eaa2d37124ed2f242bc556d3bf2561ef0f154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391cdef0565eab9385be36eab55be03d4fe46a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391cdef0565eab9385be36eab55be03d4fe46a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391cdef0565eab9385be36eab55be03d4fe46a6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391cdef0565eab9385be36eab55be03d4fe46a6b/comments", "author": null, "committer": null, "parents": [{"sha": "c45df9c1247cc54ef2fafa00aa22094e91c86eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45df9c1247cc54ef2fafa00aa22094e91c86eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45df9c1247cc54ef2fafa00aa22094e91c86eff"}], "stats": {"total": 86, "additions": 55, "deletions": 31}, "files": [{"sha": "70dc8ddda7285c2bafefa5e684c8f496a596e9f5", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=391cdef0565eab9385be36eab55be03d4fe46a6b", "patch": "@@ -1,3 +1,9 @@\n+1999-04-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cplus-dem.c (demangle_template_value_parm): Handle\n+\tpointers-to-members.\n+\t(do_type): Handle template parameters as qualifiers.\n+\n 1999-04-01  Jim Blandy  <jimb@zwingli.cygnus.com>\n \n \t* cplus-dem.c: Attempt to handle overflows in counts with some"}, {"sha": "1ebcb7da60027920debf15f55a19c75f060f46da", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 45, "deletions": 31, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=391cdef0565eab9385be36eab55be03d4fe46a6b", "patch": "@@ -1505,36 +1505,43 @@ demangle_template_value_parm (work, mangled, s, tk)\n     }\n   else if (tk == tk_pointer || tk == tk_reference)\n     {\n-      int symbol_len = consume_count (mangled);\n-      if (symbol_len == -1)\n-\treturn -1;\n-      if (symbol_len == 0)\n-\tstring_appendn (s, \"0\", 1);\n+      if (**mangled == 'Q')\n+\tsuccess = demangle_qualified (work, mangled, s,\n+\t\t\t\t      /*isfuncname=*/0, \n+\t\t\t\t      /*append=*/1);\n       else\n \t{\n-\t  char *p = xmalloc (symbol_len + 1), *q;\n-\t  strncpy (p, *mangled, symbol_len);\n-\t  p [symbol_len] = '\\0';\n-\t  /* We use cplus_demangle here, rather than\n-\t     internal_cplus_demangle, because the name of the entity\n-\t     mangled here does not make use of any of the squangling\n-\t     or type-code information we have built up thus far; it is\n-\t     mangled independently.  */\n-\t  q = cplus_demangle (p, work->options);\n-\t  if (tk == tk_pointer)\n-\t    string_appendn (s, \"&\", 1);\n-\t  /* FIXME: Pointer-to-member constants should get a\n-\t            qualifying class name here.  */\n-\t  if (q)\n+\t  int symbol_len  = consume_count (mangled);\n+\t  if (symbol_len == -1)\n+\t    return -1;\n+\t  if (symbol_len == 0)\n+\t    string_appendn (s, \"0\", 1);\n+\t  else\n \t    {\n-\t      string_append (s, q);\n-\t      free (q);\n+\t      char *p = xmalloc (symbol_len + 1), *q;\n+\t      strncpy (p, *mangled, symbol_len);\n+\t      p [symbol_len] = '\\0';\n+\t      /* We use cplus_demangle here, rather than\n+\t\t internal_cplus_demangle, because the name of the entity\n+\t\t mangled here does not make use of any of the squangling\n+\t\t or type-code information we have built up thus far; it is\n+\t\t mangled independently.  */\n+\t      q = cplus_demangle (p, work->options);\n+\t      if (tk == tk_pointer)\n+\t\tstring_appendn (s, \"&\", 1);\n+\t      /* FIXME: Pointer-to-member constants should get a\n+\t\t qualifying class name here.  */\n+\t      if (q)\n+\t\t{\n+\t\t  string_append (s, q);\n+\t\t  free (q);\n+\t\t}\n+\t      else\n+\t\tstring_append (s, p);\n+\t      free (p);\n \t    }\n-\t  else\n-\t    string_append (s, p);\n-\t  free (p);\n+\t  *mangled += symbol_len;\n \t}\n-      *mangled += symbol_len;\n     }\n \n   return success;\n@@ -3040,11 +3047,6 @@ do_type (work, mangled, result)\n \n \t    member = **mangled == 'M';\n \t    (*mangled)++;\n-\t    if (!isdigit ((unsigned char)**mangled) && **mangled != 't')\n-\t      {\n-\t\tsuccess = 0;\n-\t\tbreak;\n-\t      }\n \n \t    string_append (&decl, \")\");\n \t    string_prepend (&decl, SCOPE_STRING (work));\n@@ -3060,7 +3062,13 @@ do_type (work, mangled, result)\n \t\tstring_prependn (&decl, *mangled, n);\n \t\t*mangled += n;\n \t      }\n-\t    else\n+\t    else if (**mangled == 'X' || **mangled == 'Y')\n+\t      {\n+\t\tstring temp;\n+\t\tdo_type (work, mangled, &temp);\n+\t\tstring_prepends (&decl, &temp);\n+\t      }\n+\t    else if (**mangled == 't')\n \t      {\n \t\tstring temp;\n \t\tstring_init (&temp);\n@@ -3074,6 +3082,12 @@ do_type (work, mangled, result)\n \t\telse\n \t\t  break;\n \t      }\n+\t    else\n+\t      {\n+\t\tsuccess = 0;\n+\t\tbreak;\n+\t      }\n+\n \t    string_prepend (&decl, \"(\");\n \t    if (member)\n \t      {"}, {"sha": "ad04d116d8b4da8b23034456d1bb306320d6aa54", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cdef0565eab9385be36eab55be03d4fe46a6b/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=391cdef0565eab9385be36eab55be03d4fe46a6b", "patch": "@@ -2466,3 +2466,7 @@ basic_string<char,string_char_traits<char>,allocator>::unLink(void)\n \n _Utf390_1__1_9223372036854775807__9223372036854775\n _Utf390_1__1_9223372036854775807__9223372036854775\n+#\n+--format=gnu\n+call__H1Z4Test_RX01_t1C2ZX01PMX01FPX01i_vQ2X016output\n+C<Test, Test::output> call<Test>(Test &)"}]}