{"sha": "b2693faff38d6735aea6aee5fab54c6b39f21444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2OTNmYWZmMzhkNjczNWFlYTZhZWU1ZmFiNTRjNmIzOWYyMTQ0NA==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-02T01:07:08Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-02T01:07:08Z"}, "message": "pt.c (tsubst_qualified_id): Improved error message when a type is expected but\tnot found.\n\n\t* pt.c (tsubst_qualified_id): Improved error message when a type\n\tis expected but\tnot found.\n\nFrom-SVN: r77089", "tree": {"sha": "41fab7747ae52718d59de077990287a61fb18289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41fab7747ae52718d59de077990287a61fb18289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2693faff38d6735aea6aee5fab54c6b39f21444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2693faff38d6735aea6aee5fab54c6b39f21444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2693faff38d6735aea6aee5fab54c6b39f21444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2693faff38d6735aea6aee5fab54c6b39f21444/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66fd46b6c6483a6fb074f768ee101333860a8de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66fd46b6c6483a6fb074f768ee101333860a8de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66fd46b6c6483a6fb074f768ee101333860a8de5"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "633aa760b21cd072864c60831fa1728ef75ccc23", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2693faff38d6735aea6aee5fab54c6b39f21444/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2693faff38d6735aea6aee5fab54c6b39f21444/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b2693faff38d6735aea6aee5fab54c6b39f21444", "patch": "@@ -7264,8 +7264,11 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \t\t     ? DECL_TEMPLATE_RESULT (expr) : expr) == TYPE_DECL)\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"`%E' names a type, but a non-type is expected\",\n-\t\t   qualified_id);\n+\t    {\n+\t      error (\"dependent-name`%E' is parsed as a non-type, but \"\n+\t\t     \"instantiation yields a type\", qualified_id);\n+\t      inform (\"say `typename %E' if a type is meant\", qualified_id);\n+\t    }\n \t  return error_mark_node;\n \t}\n     }"}]}