{"sha": "ed323421344929d7b6104566d8301ce4f88fd00c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzMjM0MjEzNDQ5MjlkN2I2MTA0NTY2ZDgzMDFjZTRmODhmZDAwYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T10:09:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T10:09:17Z"}, "message": "[multiple changes]\n\n2017-09-07  Yannick Moy  <moy@adacore.com>\n\n\t* a-exetim-mingw.ads: Add contract Global=>null\n\ton all operations that are modeled as having no read or write\n\tof global variables in SPARK.\n\n2017-09-07  Raphael Amiard  <amiard@adacore.com>\n\n\t* a-chtgop.adb, a-chtgop.ads (Generic_Iteration_With_Position): Added\n\tto Hmaps.Generic_Ops.\n\t* a-cohama.adb (Ada.Containers.Hmaps.Iterate): Pass proper position in\n\tcursors.\n\t* a-cihama.adb (Ada.Containers.Indefinite_Hmaps.Iterate): Pass pos in\n\tcursors.\n\t* a-cohase.adb (Ada.Containers.Hashed_Sets.Iterate): Pass proper\n\tposition in cursors.\n\n2017-09-07  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_elab.adb (Check_Task_Activation): Adding switch -gnatd.y to\n\tallow disabling the generation of implicit pragma Elaborate_All\n\ton task bodies.\n\n2017-09-07  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_Tags): Avoid suffix counter\n\tin the external name of the elaboration flag. Required to fix\n\tthe regressions introduced by the initial version of this patch.\n\n2017-09-07  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Function_Return): Do not\n\tinsert an explicit conversion to force the displacement of the\n\t\"this\" pointer to reference the secondary dispatch table in the\n\tcase where the return statement is returning a raise expression,\n\tas in \"return raise ...\".\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_disp.adb (Is_User_Defined_Equality): Removed procedure.\n\t* sem_util.ads, sem_util.adb (Is_User_Defined_Equality): Copied\n\tprocedure from sem_disp.adb.\n\t* sem_ch12.ads (Get_Unit_Instantiation_Node): rename Package\n\twith Unit.\n\t* sem_ch12.adb (Get_Unit_Instantiation_Node): function extended to\n\treturn the instantiation node for subprograms. Update references\n\tto Get_Unit_Instantiation_Node.\n\t* sem_ch7.adb (Install_Parent_Private_Declarations): update\n\treference to Get_Unit_Instantiation_Node.\n\t* exp_dist.adb (Build_Package_Stubs): update reference to\n\tGet_Unit_Instantiation_Node.\n\t* sem_ch9.adb: minor typo in comment.\n\t* lib-xref-spark_specific.adb\n\t(Traverse_Declaration_Or_Statement): traverse into task type\n\tdefinition.\n\n2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension_Type_Conversion): New procedure\n\tto handle properly various cases of type conversions where the\n\ttarget type and/or the expression carry dimension information.\n\t(Dimension_System_Root); If a subtype carries dimension\n\tinformation, obtain the source parent type that carries the\n\tDimension aspect.\n\n2017-09-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n\n\t* g-socket.adb, g-socket.ads (GNAT.Sockets.To_Ada): New routine.\n\n2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case 'Constrained):\n\tIf the prefix is a reference to an object, rewrite it as an\n\texplicit dereference, as required by 3.7.2 (2) and as is done\n\twith most other attributes whose prefix is an access value.\n\n2017-09-07  Bob Duff  <duff@adacore.com>\n\n\t* par-ch13.adb: Set the Inside_Depends flag if we are inside a\n\tRefined_Depends aspect.\n\t* par-ch2.adb: Set the Inside_Depends flag if we are inside a\n\tRefined_Depends pragma.\n\t* scans.ads: Fix documentation of Inside_Depends flag.\n\t* styleg.adb, styleg.ads: Minor reformatting and comment fixes.\n\n2017-09-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Insert_Actions_In_Scope_Around):\n\tAccount for the case where the are no lists to insert, but the\n\tsecondary stack still requires management.\n\t* a-chtgop.adb, a-cihama.adb, a-cohama.adb, a-cohase.adb, a-tags.adb,\n\tcomperr.adb, einfo.adb, exp_aggr.adb, exp_ch3.adb, exp_disp.adb,\n\tlib-xref.adb, lib-xref-spark_specific.adb, sem_ch12.adb, sem_ch13.adb,\n\tsem_ch6.adb, sem_dim.adb, sem_dim.ads, sem_elab.adb, sem_prag.adb:\n\tMinor reformatting.\n\nFrom-SVN: r251842", "tree": {"sha": "0f38ba31444dfb438c849f40a21b0eeeaab079ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f38ba31444dfb438c849f40a21b0eeeaab079ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed323421344929d7b6104566d8301ce4f88fd00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed323421344929d7b6104566d8301ce4f88fd00c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed323421344929d7b6104566d8301ce4f88fd00c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed323421344929d7b6104566d8301ce4f88fd00c/comments", "author": null, "committer": null, "parents": [{"sha": "c8e072dafbfc0b07d56d457c5b92d3ac77fb4cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e072dafbfc0b07d56d457c5b92d3ac77fb4cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e072dafbfc0b07d56d457c5b92d3ac77fb4cfe"}], "stats": {"total": 587, "additions": 418, "deletions": 169}, "files": [{"sha": "eb6fe7ad5545e6dceeff87f856a25f892993c239", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -1,3 +1,99 @@\n+2017-09-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-exetim-mingw.ads: Add contract Global=>null\n+\ton all operations that are modeled as having no read or write\n+\tof global variables in SPARK.\n+\n+2017-09-07  Raphael Amiard  <amiard@adacore.com>\n+\n+\t* a-chtgop.adb, a-chtgop.ads (Generic_Iteration_With_Position): Added\n+\tto Hmaps.Generic_Ops.\n+\t* a-cohama.adb (Ada.Containers.Hmaps.Iterate): Pass proper position in\n+\tcursors.\n+\t* a-cihama.adb (Ada.Containers.Indefinite_Hmaps.Iterate): Pass pos in\n+\tcursors.\n+\t* a-cohase.adb (Ada.Containers.Hashed_Sets.Iterate): Pass proper\n+\tposition in cursors.\n+\n+2017-09-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_elab.adb (Check_Task_Activation): Adding switch -gnatd.y to\n+\tallow disabling the generation of implicit pragma Elaborate_All\n+\ton task bodies.\n+\n+2017-09-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_Tags): Avoid suffix counter\n+\tin the external name of the elaboration flag. Required to fix\n+\tthe regressions introduced by the initial version of this patch.\n+\n+2017-09-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Function_Return): Do not\n+\tinsert an explicit conversion to force the displacement of the\n+\t\"this\" pointer to reference the secondary dispatch table in the\n+\tcase where the return statement is returning a raise expression,\n+\tas in \"return raise ...\".\n+\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_disp.adb (Is_User_Defined_Equality): Removed procedure.\n+\t* sem_util.ads, sem_util.adb (Is_User_Defined_Equality): Copied\n+\tprocedure from sem_disp.adb.\n+\t* sem_ch12.ads (Get_Unit_Instantiation_Node): rename Package\n+\twith Unit.\n+\t* sem_ch12.adb (Get_Unit_Instantiation_Node): function extended to\n+\treturn the instantiation node for subprograms. Update references\n+\tto Get_Unit_Instantiation_Node.\n+\t* sem_ch7.adb (Install_Parent_Private_Declarations): update\n+\treference to Get_Unit_Instantiation_Node.\n+\t* exp_dist.adb (Build_Package_Stubs): update reference to\n+\tGet_Unit_Instantiation_Node.\n+\t* sem_ch9.adb: minor typo in comment.\n+\t* lib-xref-spark_specific.adb\n+\t(Traverse_Declaration_Or_Statement): traverse into task type\n+\tdefinition.\n+\n+2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.adb (Analyze_Dimension_Type_Conversion): New procedure\n+\tto handle properly various cases of type conversions where the\n+\ttarget type and/or the expression carry dimension information.\n+\t(Dimension_System_Root); If a subtype carries dimension\n+\tinformation, obtain the source parent type that carries the\n+\tDimension aspect.\n+\n+2017-09-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* g-socket.adb, g-socket.ads (GNAT.Sockets.To_Ada): New routine.\n+\n+2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case 'Constrained):\n+\tIf the prefix is a reference to an object, rewrite it as an\n+\texplicit dereference, as required by 3.7.2 (2) and as is done\n+\twith most other attributes whose prefix is an access value.\n+\n+2017-09-07  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch13.adb: Set the Inside_Depends flag if we are inside a\n+\tRefined_Depends aspect.\n+\t* par-ch2.adb: Set the Inside_Depends flag if we are inside a\n+\tRefined_Depends pragma.\n+\t* scans.ads: Fix documentation of Inside_Depends flag.\n+\t* styleg.adb, styleg.ads: Minor reformatting and comment fixes.\n+\n+2017-09-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Insert_Actions_In_Scope_Around):\n+\tAccount for the case where the are no lists to insert, but the\n+\tsecondary stack still requires management.\n+\t* a-chtgop.adb, a-cihama.adb, a-cohama.adb, a-cohase.adb, a-tags.adb,\n+\tcomperr.adb, einfo.adb, exp_aggr.adb, exp_ch3.adb, exp_disp.adb,\n+\tlib-xref.adb, lib-xref-spark_specific.adb, sem_ch12.adb, sem_ch13.adb,\n+\tsem_ch6.adb, sem_dim.adb, sem_dim.ads, sem_elab.adb, sem_prag.adb:\n+\tMinor reformatting.\n+\n 2017-09-07  Vincent Celier  <celier@adacore.com>\n \n \t* clean.adb: Do not get the target parameters before calling"}, {"sha": "ad951e452dd6655afba66174e44c86f7ecd68ff6", "filename": "gcc/ada/a-chtgop.adb", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-chtgop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-chtgop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -439,6 +439,33 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n    -----------------------\n \n    procedure Generic_Iteration (HT : Hash_Table_Type) is\n+      procedure Wrapper (Node : Node_Access; Dummy_Pos : Hash_Type);\n+\n+      -------------\n+      -- Wrapper --\n+      -------------\n+\n+      procedure Wrapper (Node : Node_Access; Dummy_Pos : Hash_Type) is\n+      begin\n+         Process (Node);\n+      end Wrapper;\n+\n+      procedure Internal_With_Pos is\n+        new Generic_Iteration_With_Position (Wrapper);\n+\n+   --  Start of processing for Generic_Iteration\n+\n+   begin\n+      Internal_With_Pos (HT);\n+   end Generic_Iteration;\n+\n+   -------------------------------------\n+   -- Generic_Iteration_With_Position --\n+   -------------------------------------\n+\n+   procedure Generic_Iteration_With_Position\n+     (HT : Hash_Table_Type)\n+   is\n       Node : Node_Access;\n \n    begin\n@@ -449,11 +476,11 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n       for Indx in HT.Buckets'Range loop\n          Node := HT.Buckets (Indx);\n          while Node /= null loop\n-            Process (Node);\n+            Process (Node, Indx);\n             Node := Next (Node);\n          end loop;\n       end loop;\n-   end Generic_Iteration;\n+   end Generic_Iteration_With_Position;\n \n    ------------------\n    -- Generic_Read --"}, {"sha": "ea2209bf7fb6c831e001aca190c0cc76bdcecfff", "filename": "gcc/ada/a-chtgop.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-chtgop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-chtgop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -168,6 +168,11 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n    --  is not supplied, it will be recomputed. It is provided so that clients\n    --  can implement efficient iterators.\n \n+   generic\n+      with procedure Process (Node : Node_Access; Position : Hash_Type);\n+   procedure Generic_Iteration_With_Position (HT : Hash_Table_Type);\n+   --  Calls Process for each node in hash table HT\n+\n    generic\n       with procedure Process (Node : Node_Access);\n    procedure Generic_Iteration (HT : Hash_Table_Type);"}, {"sha": "43a03806dce5a52d7787946110415aa228dcafb5", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -770,20 +770,19 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      procedure Process_Node (Node : Node_Access);\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type);\n       pragma Inline (Process_Node);\n \n       procedure Local_Iterate is\n-         new HT_Ops.Generic_Iteration (Process_Node);\n+        new HT_Ops.Generic_Iteration_With_Position (Process_Node);\n \n       ------------------\n       -- Process_Node --\n       ------------------\n \n-      procedure Process_Node (Node : Node_Access) is\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type) is\n       begin\n-         Process\n-           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n+         Process (Cursor'(Container'Unrestricted_Access, Node, Position));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);"}, {"sha": "c71576c1f8428146eee0eb2c8304a5c792fe100d", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -699,19 +699,19 @@ package body Ada.Containers.Hashed_Maps is\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      procedure Process_Node (Node : Node_Access);\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type);\n       pragma Inline (Process_Node);\n \n-      procedure Local_Iterate is new HT_Ops.Generic_Iteration (Process_Node);\n+      procedure Local_Iterate is\n+        new HT_Ops.Generic_Iteration_With_Position (Process_Node);\n \n       ------------------\n       -- Process_Node --\n       ------------------\n \n-      procedure Process_Node (Node : Node_Access) is\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type) is\n       begin\n-         Process\n-           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n+         Process (Cursor'(Container'Unrestricted_Access, Node, Position));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);"}, {"sha": "bde870494853b0be45b2466d42834d75da0c3069", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -977,20 +977,19 @@ package body Ada.Containers.Hashed_Sets is\n      (Container : Set;\n       Process   : not null access procedure (Position : Cursor))\n    is\n-      procedure Process_Node (Node : Node_Access);\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type);\n       pragma Inline (Process_Node);\n \n       procedure Iterate is\n-         new HT_Ops.Generic_Iteration (Process_Node);\n+        new HT_Ops.Generic_Iteration_With_Position (Process_Node);\n \n       ------------------\n       -- Process_Node --\n       ------------------\n \n-      procedure Process_Node (Node : Node_Access) is\n+      procedure Process_Node (Node : Node_Access; Position : Hash_Type) is\n       begin\n-         Process\n-           (Cursor'(Container'Unrestricted_Access, Node, Hash_Type'Last));\n+         Process (Cursor'(Container'Unrestricted_Access, Node, Position));\n       end Process_Node;\n \n       Busy : With_Busy (Container.HT.TC'Unrestricted_Access);"}, {"sha": "d4295c6f1cac9f70773192e2b994762753044d4d", "filename": "gcc/ada/a-exetim-mingw.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-exetim-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-exetim-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -79,7 +79,9 @@ is\n \n    function \"-\"\n      (Left  : CPU_Time;\n-      Right : CPU_Time) return Ada.Real_Time.Time_Span;\n+      Right : CPU_Time) return Ada.Real_Time.Time_Span\n+   with\n+     Global => null;\n \n    function \"<\"  (Left, Right : CPU_Time) return Boolean with\n      Global => null;"}, {"sha": "b15c990a03b61382653f11ed00e051e9e94fb40b", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -915,6 +915,7 @@ package body Ada.Tags is\n       Prim_DT     : constant Dispatch_Table_Ptr := DT (Prim_T);\n       Iface_Table : constant Interface_Data_Ptr :=\n                       To_Type_Specific_Data_Ptr (Prim_DT.TSD).Interfaces_Table;\n+\n    begin\n       --  Save Offset_Value in the table of interfaces of the primary DT.\n       --  This data will be used by the subprogram \"Displace\" to give support\n@@ -927,11 +928,11 @@ package body Ada.Tags is\n             if Iface_Table.Ifaces_Table (Id).Iface_Tag = Interface_T then\n                if Is_Static or else Offset_Value = 0 then\n                   Iface_Table.Ifaces_Table (Id).Static_Offset_To_Top := True;\n-                  Iface_Table.Ifaces_Table (Id).Offset_To_Top_Value :=\n+                  Iface_Table.Ifaces_Table (Id).Offset_To_Top_Value  :=\n                     Offset_Value;\n                else\n                   Iface_Table.Ifaces_Table (Id).Static_Offset_To_Top := False;\n-                  Iface_Table.Ifaces_Table (Id).Offset_To_Top_Func :=\n+                  Iface_Table.Ifaces_Table (Id).Offset_To_Top_Func   :=\n                     Offset_Func;\n                end if;\n "}, {"sha": "1b5aa3ebfe5b8162bdfb046bc609ca032dca391d", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -476,8 +476,8 @@ package body Comperr is\n          when N_Package_Body =>\n             Unit_Name := Corresponding_Spec (Main);\n \n-         when N_Package_Renaming_Declaration\n-            | N_Package_Instantiation\n+         when N_Package_Instantiation\n+            | N_Package_Renaming_Declaration\n          =>\n             Unit_Name := Defining_Unit_Name (Main);\n "}, {"sha": "46a5d0e2afc471626331d768d2e534adf59effd5", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -115,7 +115,7 @@ package body Debug is\n    --  d.v\n    --  d.w  Do not check for infinite loops\n    --  d.x  No exception handlers\n-   --  d.y\n+   --  d.y  Disable implicit pragma Elaborate_All on task bodies\n    --  d.z  Restore previous support for frontend handling of Inline_Always\n \n    --  d.A  Read/write Aspect_Specifications hash table to tree\n@@ -603,6 +603,12 @@ package body Debug is\n    --       fully compiled and analyzed, they just get eliminated from the\n    --       code generation step.\n \n+   --  d.y  Disable implicit pragma Elaborate_All on task bodies. When a task\n+   --       body calls a procedure in the same package, and that procedure\n+   --       calls a procedure in another package, the static elaboration\n+   --       machinery adds an implicit Elaborate_All on the other package. This\n+   --       switch disables the addition of the implicit pragma in such cases.\n+   --\n    --  d.z  Restore previous front-end support for Inline_Always. In default\n    --       mode, for targets that use the GCC back end, Inline_Always is\n    --       handled by the back end. Use of this switch restores the previous"}, {"sha": "c0d48b7b36c6193a278902b579e8b86cfc1bb5c4", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -719,17 +719,17 @@ package body Einfo is\n \n    function Access_Disp_Table (Id : E) return L is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Type,\n-                                   E_Record_Type_With_Private,\n-                                   E_Record_Subtype));\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype,\n+                                   E_Record_Type,\n+                                   E_Record_Type_With_Private));\n       return Elist16 (Implementation_Base_Type (Id));\n    end Access_Disp_Table;\n \n    function Access_Disp_Table_Elab_Flag (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Record_Type,\n-                                   E_Record_Type_With_Private,\n-                                   E_Record_Subtype));\n+      pragma Assert (Ekind_In (Id, E_Record_Subtype,\n+                                   E_Record_Type,\n+                                   E_Record_Type_With_Private));\n       return Node30 (Implementation_Base_Type (Id));\n    end Access_Disp_Table_Elab_Flag;\n "}, {"sha": "55fdde5b899cfa8f3ed297f70419928941f27122", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -3322,9 +3322,9 @@ package body Exp_Aggr is\n \n                   if Has_Interfaces (Base_Type (Typ)) then\n                      Init_Secondary_Tags\n-                       (Typ        => Base_Type (Typ),\n-                        Target     => Target,\n-                        Stmts_List => Assign,\n+                       (Typ            => Base_Type (Typ),\n+                        Target         => Target,\n+                        Stmts_List     => Assign,\n                         Init_Tags_List => Assign);\n                   end if;\n                end if;\n@@ -3858,9 +3858,9 @@ package body Exp_Aggr is\n \n          if Has_Interfaces (Base_Type (Typ)) then\n             Init_Secondary_Tags\n-              (Typ        => Base_Type (Typ),\n-               Target     => Target,\n-               Stmts_List => L,\n+              (Typ            => Base_Type (Typ),\n+               Target         => Target,\n+               Stmts_List     => L,\n                Init_Tags_List => L);\n          end if;\n       end if;"}, {"sha": "62ccc4be725f4b213b26739015776cdd756b828c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -2671,6 +2671,18 @@ package body Exp_Attr is\n               New_Occurrence_Of\n                 (Extra_Constrained (Formal_Ent), Sloc (N)));\n \n+         --  If the prefix is an access to object, the attribute applies to\n+         --  the designated object, so rewrite with an explicit dereference.\n+\n+         elsif Is_Access_Type (Etype (Pref))\n+           and then\n+             (not Is_Entity_Name (Pref) or else Is_Object (Entity (Pref)))\n+         then\n+            Rewrite (Pref,\n+              Make_Explicit_Dereference (Loc, Relocate_Node (Pref)));\n+            Analyze_And_Resolve (N, Standard_Boolean);\n+            return;\n+\n          --  For variables with a Extra_Constrained field, we use the\n          --  corresponding entity.\n "}, {"sha": "6ed0f0feffa61be8d2a1c6be90693269c30cf348", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -2489,28 +2489,27 @@ package body Exp_Ch3 is\n \n                      Append_To (Elab_Sec_DT_Stmts_List,\n                        Make_Assignment_Statement (Loc,\n-                         Name =>\n+                         Name       =>\n                            New_Occurrence_Of\n                              (Access_Disp_Table_Elab_Flag (Rec_Type), Loc),\n                          Expression =>\n                            New_Occurrence_Of (Standard_False, Loc)));\n \n-                     Prepend_List_To (Body_Stmts,\n-                       New_List (\n-                         Make_If_Statement (Loc,\n-                           Condition => New_Occurrence_Of (Set_Tag, Loc),\n-                           Then_Statements => Init_Tags_List),\n+                     Prepend_List_To (Body_Stmts, New_List (\n+                       Make_If_Statement (Loc,\n+                         Condition       => New_Occurrence_Of (Set_Tag, Loc),\n+                         Then_Statements => Init_Tags_List),\n \n                        Make_If_Statement (Loc,\n-                         Condition =>\n+                         Condition       =>\n                            New_Occurrence_Of\n                              (Access_Disp_Table_Elab_Flag (Rec_Type), Loc),\n                          Then_Statements => Elab_Sec_DT_Stmts_List)));\n                   end;\n                else\n                   Prepend_To (Body_Stmts,\n                     Make_If_Statement (Loc,\n-                      Condition => New_Occurrence_Of (Set_Tag, Loc),\n+                      Condition       => New_Occurrence_Of (Set_Tag, Loc),\n                       Then_Statements => Init_Tags_List));\n                end if;\n "}, {"sha": "2ca42de1939ec1888abf228aa1e397fc0484e52a", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -5297,7 +5297,14 @@ package body Exp_Ch7 is\n    --  Start of processing for Insert_Actions_In_Scope_Around\n \n    begin\n-      if No (Act_Before) and then No (Act_After) and then No (Act_Cleanup) then\n+      --  Nothing to do if the scope does not manage the secondary stack or\n+      --  does not contain meaninful actions for insertion.\n+\n+      if not Manage_SS\n+        and then No (Act_Before)\n+        and then No (Act_After)\n+        and then No (Act_Cleanup)\n+      then\n          return;\n       end if;\n "}, {"sha": "2abd7d17cc8b1413da60baa7b3344576724051c6", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6700,7 +6700,7 @@ package body Exp_Disp is\n       if Elab_Flag_Needed (Typ) then\n          Set_Access_Disp_Table_Elab_Flag (Typ,\n            Make_Defining_Identifier (Loc,\n-             New_External_Name (Tname, 'F', Suffix_Index => -1)));\n+             Chars => New_External_Name (Tname, 'F')));\n \n          Append_To (Result,\n            Make_Object_Declaration (Loc,"}, {"sha": "89cf665b077440b3ff892d1a2c37258dae83d25d", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -977,7 +977,7 @@ package body Exp_Dist is\n                     or else\n                       (Is_Generic_Instance (Pkg_Ent)\n                          and then Comes_From_Source\n-                                    (Get_Package_Instantiation_Node (Pkg_Ent)))\n+                                    (Get_Unit_Instantiation_Node (Pkg_Ent)))\n                   then\n                      Visit_Nested_Pkg (Decl);\n                   end if;"}, {"sha": "9b2ad7f74fb390ae30ef379f1a3817fd8f62252e", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -2478,6 +2478,15 @@ package body GNAT.Sockets is\n       return Stream_Access (S);\n    end Stream;\n \n+   ------------\n+   -- To_Ada --\n+   ------------\n+\n+   function To_Ada (Fd : Integer) return Socket_Type is\n+   begin\n+      return Socket_Type (Fd);\n+   end To_Ada;\n+\n    ----------\n    -- To_C --\n    ----------"}, {"sha": "06d7a85b202ee81b3527d15579efd049b8aee553", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -456,7 +456,11 @@ package GNAT.Sockets is\n    function Image (Socket : Socket_Type) return String;\n    --  Return a printable string for Socket\n \n-   function To_C (Socket : Socket_Type) return Integer;\n+   function To_Ada (Fd : Integer) return Socket_Type with Inline;\n+   --  Convert a file descriptor to Socket_Type. This is useful when a socket\n+   --  file descriptor is obtained from an external library call.\n+\n+   function To_C (Socket : Socket_Type) return Integer with Inline;\n    --  Return a file descriptor to be used by external subprograms. This is\n    --  useful for C functions that are not yet interfaced in this package.\n "}, {"sha": "b627a8e59ee35519f7c3c866bea6031a3fedd2df", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1307,8 +1307,18 @@ package body SPARK_Specific is\n             when N_Protected_Type_Declaration =>\n                Traverse_Visible_And_Private_Parts (Protected_Definition (N));\n \n-            when N_Task_Definition =>\n-               Traverse_Visible_And_Private_Parts (N);\n+            when N_Task_Type_Declaration =>\n+\n+               --  Task type definition is optional (unlike protected type\n+               --  definition, which is mandatory).\n+\n+               declare\n+                  Task_Def : constant Node_Id := Task_Definition (N);\n+               begin\n+                  if Present (Task_Def) then\n+                     Traverse_Visible_And_Private_Parts (Task_Def);\n+                  end if;\n+               end;\n \n             when N_Task_Body =>\n                Traverse_Task_Body (N);"}, {"sha": "eb6ac0a629f910bf02528229e7b8ebc2877e2ade", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -1126,12 +1126,14 @@ package body Lib.Xref is\n          --  Comment needed here for special SPARK code ???\n \n          if GNATprove_Mode then\n-            --  Ignore reference to an entity that is a Part_Of single\n+\n+            --  Ignore references to an entity which is a Part_Of single\n             --  concurrent object. Ideally we would prefer to add it as a\n             --  reference to the corresponding concurrent type, but it is quite\n             --  difficult (as such references are not currently added even for)\n             --  reads/writes of private protected components) and not worth the\n             --  effort.\n+\n             if Ekind_In (Ent, E_Abstract_State, E_Constant, E_Variable)\n               and then Present (Encapsulating_State (Ent))\n               and then Is_Single_Concurrent_Object (Encapsulating_State (Ent))"}, {"sha": "a238d66d9cbe0964972b490fd65a057c94028774", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -520,9 +520,11 @@ package body Ch13 is\n                   end if;\n                end if;\n \n-               --  Note if inside Depends aspect\n+               --  Note if inside Depends or Refined_Depends aspect\n \n-               if A_Id = Aspect_Depends then\n+               if A_Id = Aspect_Depends\n+                 or else A_Id = Aspect_Refined_Depends\n+               then\n                   Inside_Depends := True;\n                end if;\n "}, {"sha": "a97ed81238e9bcfd6c315035eb388754b6cbee8d", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -304,7 +304,9 @@ package body Ch2 is\n \n       --  Set global to indicate if we are within a Depends pragma\n \n-      if Chars (Ident_Node) = Name_Depends then\n+      if Chars (Ident_Node) = Name_Depends\n+        or else Chars (Ident_Node) = Name_Refined_Depends\n+      then\n          Inside_Depends := True;\n       end if;\n "}, {"sha": "faa06f2087dd4dd89e21f931875e4ea2c25df63a", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -485,8 +485,9 @@ package Scans is\n    --  about the case of Wide_Wide_Characters???\n \n    Inside_Depends : Boolean := False;\n-   --  True while parsing the argument of a Depends pragma or aspect (used to\n-   --  allow/require non-standard style rules for =>+ with -gnatyt).\n+   --  True while parsing the argument of a Depends or Refined_Depends pragma\n+   --  or aspect. Used to allow/require nonstandard style rules for =>+ with\n+   --  -gnatyt.\n \n    Inside_If_Expression : Nat := 0;\n    --  This is a counter that is set non-zero while scanning out an if"}, {"sha": "f1e659c4bab1c0e29c5e5fb6d43e406db94cd25e", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -8431,7 +8431,7 @@ package body Sem_Ch12 is\n          --  The parent was a premature instantiation. Insert freeze node at\n          --  the end the current declarative part.\n \n-         if ABE_Is_Certain (Get_Package_Instantiation_Node (Par)) then\n+         if ABE_Is_Certain (Get_Unit_Instantiation_Node (Par)) then\n             Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n \n          --  Handle the following case:\n@@ -8452,7 +8452,7 @@ package body Sem_Ch12 is\n          --  after that of Parent_Inst. This relation is established by\n          --  comparing the Slocs of Parent_Inst freeze node and Inst.\n \n-         elsif List_Containing (Get_Package_Instantiation_Node (Par)) =\n+         elsif List_Containing (Get_Unit_Instantiation_Node (Par)) =\n                List_Containing (Inst_Node)\n            and then Sloc (Freeze_Node (Par)) < Sloc (Inst_Node)\n          then\n@@ -8574,11 +8574,11 @@ package body Sem_Ch12 is\n       end if;\n    end Get_Instance_Of;\n \n-   ------------------------------------\n-   -- Get_Package_Instantiation_Node --\n-   ------------------------------------\n+   ---------------------------------\n+   -- Get_Unit_Instantiation_Node --\n+   ---------------------------------\n \n-   function Get_Package_Instantiation_Node (A : Entity_Id) return Node_Id is\n+   function Get_Unit_Instantiation_Node (A : Entity_Id) return Node_Id is\n       Decl : Node_Id := Unit_Declaration_Node (A);\n       Inst : Node_Id;\n \n@@ -8624,7 +8624,10 @@ package body Sem_Ch12 is\n             Decl := Unit_Declaration_Node (Corresponding_Body (Decl));\n          end if;\n \n-         if Nkind (Original_Node (Decl)) = N_Package_Instantiation then\n+         if Nkind_In (Original_Node (Decl), N_Function_Instantiation,\n+                                            N_Package_Instantiation,\n+                                            N_Procedure_Instantiation)\n+         then\n             return Original_Node (Decl);\n          else\n             return Unit (Parent (Decl));\n@@ -8637,15 +8640,17 @@ package body Sem_Ch12 is\n \n       else\n          Inst := Next (Decl);\n-         while not Nkind_In (Inst, N_Package_Instantiation,\n-                                   N_Formal_Package_Declaration)\n+         while not Nkind_In (Inst, N_Formal_Package_Declaration,\n+                                   N_Function_Instantiation,\n+                                   N_Package_Instantiation,\n+                                   N_Procedure_Instantiation)\n          loop\n             Next (Inst);\n          end loop;\n \n          return Inst;\n       end if;\n-   end Get_Package_Instantiation_Node;\n+   end Get_Unit_Instantiation_Node;\n \n    ------------------------\n    -- Has_Been_Exchanged --\n@@ -9311,7 +9316,7 @@ package body Sem_Ch12 is\n                --  Parent_Inst. This relation is established by comparing\n                --  the Slocs of Parent_Inst freeze node and Inst.\n \n-               if List_Containing (Get_Package_Instantiation_Node (Par)) =\n+               if List_Containing (Get_Unit_Instantiation_Node (Par)) =\n                   List_Containing (N)\n                  and then Sloc (Freeze_Node (Par)) < Sloc (N)\n                then\n@@ -9572,7 +9577,7 @@ package body Sem_Ch12 is\n \n          --  Load grandparent instance as well\n \n-         Inst_Node := Get_Package_Instantiation_Node (Inst_Par);\n+         Inst_Node := Get_Unit_Instantiation_Node (Inst_Par);\n \n          if Nkind (Name (Inst_Node)) = N_Expanded_Name then\n             Inst_Par := Entity (Prefix (Name (Inst_Node)));"}, {"sha": "114a45af9aa0a708706e401a92209f2f6748a5a0", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,7 +93,7 @@ package Sem_Ch12 is\n    --  Retrieve actual associated with given generic parameter.\n    --  If A is uninstantiated or not a generic parameter, return A.\n \n-   function Get_Package_Instantiation_Node (A : Entity_Id) return Node_Id;\n+   function Get_Unit_Instantiation_Node (A : Entity_Id) return Node_Id;\n    --  Given the entity of a unit that is an instantiation, retrieve the\n    --  original instance node. This is used when loading the instantiations\n    --  of the ancestors of a child generic that is being instantiated."}, {"sha": "20619964bd2ebda595d90700088c7f41a4369994", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -9280,8 +9280,9 @@ package body Sem_Ch13 is\n             T := Standard_Integer;\n \n          when Aspect_Small =>\n-            --  Note that the expression can be of any real type (not just\n-            --  a real universal literal) as long as it is a static constant.\n+\n+            --  Note that the expression can be of any real type (not just a\n+            --  real universal literal) as long as it is a static constant.\n \n             T := Any_Real;\n "}, {"sha": "c5b2aa75275521791b4465a38da159a24782f51a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -910,7 +910,7 @@ package body Sem_Ch6 is\n             if Expander_Active\n               and then Serious_Errors_Detected = 0\n               and then Is_Access_Type (R_Type)\n-              and then Nkind (Expr) /= N_Null\n+              and then not Nkind_In (Expr, N_Null, N_Raise_Expression)\n               and then Is_Interface (Designated_Type (R_Type))\n               and then Is_Progenitor (Designated_Type (R_Type),\n                                       Designated_Type (Etype (Expr)))"}, {"sha": "7b0761b8200e66a9e4ef7955acdc5264b70ab78e", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -1411,7 +1411,7 @@ package body Sem_Ch7 is\n          Gen_Par :=\n            Generic_Parent (Specification (Unit_Declaration_Node (Inst_Par)));\n          while Present (Gen_Par) and then Is_Child_Unit (Gen_Par) loop\n-            Inst_Node := Get_Package_Instantiation_Node (Inst_Par);\n+            Inst_Node := Get_Unit_Instantiation_Node (Inst_Par);\n \n             if Nkind_In (Inst_Node, N_Package_Instantiation,\n                                     N_Formal_Package_Declaration)"}, {"sha": "2fb8ebdc942b9e91737fde36a61ed52d6fd2ca55", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -2773,7 +2773,7 @@ package body Sem_Ch9 is\n       Generate_Definition (Obj_Id);\n       Tasking_Used := True;\n \n-      --  A single task declaration is transformed into a pait of an anonymous\n+      --  A single task declaration is transformed into a pair of an anonymous\n       --  task type and an object of that type. Generate:\n \n       --    task type Typ is ...;"}, {"sha": "baa56391358a66881b79922b3f950841de383b8c", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 83, "deletions": 27, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -35,6 +35,7 @@ with Nmake;    use Nmake;\n with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -280,6 +281,14 @@ package body Sem_Dim is\n    --  both the identifier and the parent type of N are not dimensionless,\n    --  return an error.\n \n+   procedure Analyze_Dimension_Type_Conversion (N : Node_Id);\n+   --  Type conversions handle conversions between literals and dimensioned\n+   --  types, from dimensioned types to their base type, and between different\n+   --  dimensioned systems. Dimensions of the conversion are obtained either\n+   --  from those of the expression, or from the target type, and dimensional\n+   --  consistency must be checked when converting between values belonging\n+   --  to different dimensioned systems.\n+\n    procedure Analyze_Dimension_Unary_Op (N : Node_Id);\n    --  Subroutine of Analyze_Dimension for unary operators. For Plus, Minus and\n    --  Abs operators, propagate the dimensions from the operand to N.\n@@ -301,6 +310,11 @@ package body Sem_Dim is\n    --  dimension\" if Description_Needed. if N is dimensionless, return \"'[']\",\n    --  or \"is dimensionless\" if Description_Needed.\n \n+   function Dimension_System_Root (T : Entity_Id) return Entity_Id;\n+   --  Given a type that has dimension information, return the type that is the\n+   --  root of its dimension system, e.g. Mks_Type. If T is not a dimensioned\n+   --  type, i.e. a standard numeric type, return Empty.\n+\n    procedure Dim_Warning_For_Numeric_Literal (N : Node_Id; Typ : Entity_Id);\n    --  Issue a warning on the given numeric literal N to indicate that the\n    --  compiler made the assumption that the literal is not dimensionless\n@@ -1191,13 +1205,7 @@ package body Sem_Dim is\n             Analyze_Dimension_Subtype_Declaration (N);\n \n          when  N_Type_Conversion =>\n-            if In_Instance\n-              and then Exists (Dimensions_Of (Expression (N)))\n-            then\n-               Set_Dimensions (N, Dimensions_Of (Expression (N)));\n-            else\n-               Analyze_Dimension_Has_Etype (N);\n-            end if;\n+            Analyze_Dimension_Type_Conversion (N);\n \n          when N_Unary_Op =>\n             Analyze_Dimension_Unary_Op (N);\n@@ -1384,26 +1392,6 @@ package body Sem_Dim is\n                return Dimensions_Of (Etype (N));\n             end if;\n \n-         --  A type conversion may have been inserted to rewrite other\n-         --  expressions, e.g. function returns. Dimensions are those of\n-         --  the target type, unless this is a conversion in an instance,\n-         --  in which case the proper dimensions are those of the operand,\n-\n-         elsif Nkind (N) = N_Type_Conversion then\n-            if In_Instance\n-              and then Is_Generic_Actual_Type (Etype (Expression (N)))\n-            then\n-               return Dimensions_Of (Etype (Expression (N)));\n-\n-            elsif In_Instance\n-              and then Exists (Dimensions_Of (Expression (N)))\n-            then\n-               return Dimensions_Of (Expression (N));\n-\n-            else\n-               return Dimensions_Of (Etype (N));\n-            end if;\n-\n          --  Otherwise return the default dimensions\n \n          else\n@@ -2339,6 +2327,56 @@ package body Sem_Dim is\n       end if;\n    end Analyze_Dimension_Subtype_Declaration;\n \n+   ---------------------------------------\n+   -- Analyze_Dimension_Type_Conversion --\n+   ---------------------------------------\n+\n+   procedure Analyze_Dimension_Type_Conversion (N : Node_Id) is\n+      Expr_Root   : constant Entity_Id :=\n+                      Dimension_System_Root (Etype (Expression (N)));\n+      Target_Root : constant Entity_Id :=\n+                      Dimension_System_Root (Etype (N));\n+\n+   begin\n+      --  If the expression has dimensions and the target type has dimensions,\n+      --  the conversion has the dimensions of the expression. Consistency is\n+      --  checked below. Converting to a non-dimensioned type such as Float\n+      --  ignores the dimensions of the expression.\n+\n+      if Exists (Dimensions_Of (Expression (N)))\n+        and then Present (Target_Root)\n+      then\n+         Set_Dimensions (N, Dimensions_Of (Expression (N)));\n+\n+      --  Otherwise the dimensions are those of the target type.\n+\n+      else\n+         Analyze_Dimension_Has_Etype (N);\n+      end if;\n+\n+      --  A conversion between types in different dimension systems (e.g. MKS\n+      --  and British units) must respect the dimensions of expression and\n+      --  type, It is up to the user to provide proper conversion factors.\n+\n+      --  Upward conversions to root type of a dimensioned system are legal,\n+      --  and correspond to \"view conversions\", i.e. preserve the dimensions\n+      --  of the expression; otherwise conversion must be between types with\n+      --  then same dimensions. Conversions to a non-dimensioned type such as\n+      --  Float lose the dimensions of the expression.\n+\n+      if Present (Expr_Root)\n+       and then Present (Target_Root)\n+       and then Etype (N) /= Target_Root\n+       and then Dimensions_Of (Expression (N)) /= Dimensions_Of (Etype (N))\n+      then\n+         Error_Msg_N (\"dimensions mismatch in conversion\", N);\n+         Error_Msg_N\n+           (\"\\expression \" & Dimensions_Msg_Of (Expression (N), True), N);\n+         Error_Msg_N\n+           (\"\\target type \" & Dimensions_Msg_Of (Etype (N), True), N);\n+      end if;\n+   end Analyze_Dimension_Type_Conversion;\n+\n    --------------------------------\n    -- Analyze_Dimension_Unary_Op --\n    --------------------------------\n@@ -2665,6 +2703,24 @@ package body Sem_Dim is\n           or else Dimensions_Of (T1) = Dimensions_Of (T2);\n    end Dimensions_Match;\n \n+   ---------------------------\n+   -- Dimension_System_Root --\n+   ---------------------------\n+\n+   function Dimension_System_Root (T : Entity_Id) return Entity_Id is\n+      Root : Entity_Id;\n+\n+   begin\n+      Root := Base_Type (T);\n+\n+      if Has_Dimension_System (Root) then\n+         return First_Subtype (Root);   --  for example Dim_Mks\n+\n+      else\n+         return Empty;\n+      end if;\n+   end Dimension_System_Root;\n+\n    ----------------------------------------\n    -- Eval_Op_Expon_For_Dimensioned_Type --\n    ----------------------------------------"}, {"sha": "7ee2e79f110f37eff12e377d795121c7c51d5b55", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -195,14 +195,6 @@ package Sem_Dim is\n    --  a full copy of the type declaration of the parent, and the dimension\n    --  information of individual components must be transferred explicitly.\n \n-   function New_Copy_Tree_And_Copy_Dimensions\n-     (Source    : Node_Id;\n-      Map       : Elist_Id   := No_Elist;\n-      New_Sloc  : Source_Ptr := No_Location;\n-      New_Scope : Entity_Id  := Empty) return Node_Id;\n-   --  Same as New_Copy_Tree (defined in Sem_Util), except that this routine\n-   --  also copies the dimensions of Source to the returned node.\n-\n    function Dimensions_Match (T1 : Entity_Id; T2 : Entity_Id) return Boolean;\n    --  If the common base type has a dimension system, verify that two\n    --  subtypes have the same dimensions. Used for conformance checking.\n@@ -228,6 +220,14 @@ package Sem_Dim is\n    --  Return True if N is a package instantiation of System.Dim.Integer_IO or\n    --  of System.Dim.Float_IO.\n \n+   function New_Copy_Tree_And_Copy_Dimensions\n+     (Source    : Node_Id;\n+      Map       : Elist_Id   := No_Elist;\n+      New_Sloc  : Source_Ptr := No_Location;\n+      New_Scope : Entity_Id  := Empty) return Node_Id;\n+   --  Same as New_Copy_Tree (defined in Sem_Util), except that this routine\n+   --  also copies the dimensions of Source to the returned node.\n+\n    procedure Remove_Dimension_In_Statement (Stmt : Node_Id);\n    --  Remove the dimensions associated with Stmt\n "}, {"sha": "974edd35679acd28e99396ae936a572e24af8bd0", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -427,29 +427,6 @@ package body Sem_Disp is\n \n       procedure Check_Direct_Call is\n          Typ : Entity_Id := Etype (Control);\n-\n-         function Is_User_Defined_Equality (Id : Entity_Id) return Boolean;\n-         --  Determine whether an entity denotes a user-defined equality\n-\n-         ------------------------------\n-         -- Is_User_Defined_Equality --\n-         ------------------------------\n-\n-         function Is_User_Defined_Equality (Id : Entity_Id) return Boolean is\n-         begin\n-            return\n-              Ekind (Id) = E_Function\n-                and then Chars (Id) = Name_Op_Eq\n-                and then Comes_From_Source (Id)\n-\n-               --  Internally generated equalities have a full type declaration\n-               --  as their parent.\n-\n-                and then Nkind (Parent (Id)) = N_Function_Specification;\n-         end Is_User_Defined_Equality;\n-\n-      --  Start of processing for Check_Direct_Call\n-\n       begin\n          --  Predefined primitives do not receive wrappers since they are built\n          --  from scratch for the corresponding record of synchronized types."}, {"sha": "6d920e49477a677c229b52d90ff4348aa9caab8d", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -2961,19 +2961,21 @@ package body Sem_Elab is\n          Next_Elmt (Elmt);\n       end loop;\n \n-      --  For tasks declared in the current unit, trace other calls within\n-      --  the task procedure bodies, which are available.\n+      --  For tasks declared in the current unit, trace other calls within the\n+      --  task procedure bodies, which are available.\n \n-      In_Task_Activation := True;\n+      if not Debug_Flag_Dot_Y then\n+         In_Task_Activation := True;\n \n-      Elmt := First_Elmt (Intra_Procs);\n-      while Present (Elmt) loop\n-         Ent := Node (Elmt);\n-         Check_Internal_Call_Continue (N, Ent, Enclosing, Ent);\n-         Next_Elmt (Elmt);\n-      end loop;\n+         Elmt := First_Elmt (Intra_Procs);\n+         while Present (Elmt) loop\n+            Ent := Node (Elmt);\n+            Check_Internal_Call_Continue (N, Ent, Enclosing, Ent);\n+            Next_Elmt (Elmt);\n+         end loop;\n \n-      In_Task_Activation := False;\n+         In_Task_Activation := False;\n+      end if;\n    end Check_Task_Activation;\n \n    -------------------------------"}, {"sha": "d24658276811f2b354484f651f1a5392bfaaeff7", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -71,7 +71,7 @@ package Sem_Elab is\n    --  output a warning.\n \n    --  For calls to a subprogram in a with'ed unit or a 'Access or variable\n-   --  refernece (SPARK mode case), we require that a pragma Elaborate_All\n+   --  reference (SPARK mode case), we require that a pragma Elaborate_All\n    --  or pragma Elaborate be present, or that the referenced unit have a\n    --  pragma Preelaborate, pragma Pure, or pragma Elaborate_Body. If none\n    --  of these conditions is met, then a warning is generated that a pragma"}, {"sha": "9cf91556922f54f973a6e4a8bf4e9745babd2582", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -3076,9 +3076,11 @@ package body Sem_Prag is\n                  and then Nkind (Decl) = N_Object_Declaration\n                then\n                   Append_New_Elmt (Defining_Entity (Decl), States_And_Objs);\n+\n                elsif Is_Single_Concurrent_Type_Declaration (Decl) then\n-                  Append_New_Elmt (Anonymous_Object (Defining_Entity (Decl)),\n-                                   States_And_Objs);\n+                  Append_New_Elmt\n+                    (Anonymous_Object (Defining_Entity (Decl)),\n+                     States_And_Objs);\n                end if;\n \n                Next (Decl);"}, {"sha": "e9bcdada8735408e38bdc77e2fc25a1ccdc7f58c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -15730,6 +15730,22 @@ package body Sem_Util is\n       return T = Universal_Integer or else T = Universal_Real;\n    end Is_Universal_Numeric_Type;\n \n+   ------------------------------\n+   -- Is_User_Defined_Equality --\n+   ------------------------------\n+\n+   function Is_User_Defined_Equality (Id : Entity_Id) return Boolean is\n+   begin\n+      return Ekind (Id) = E_Function\n+        and then Chars (Id) = Name_Op_Eq\n+        and then Comes_From_Source (Id)\n+\n+        --  Internally generated equalities have a full type declaration\n+        --  as their parent.\n+\n+        and then Nkind (Parent (Id)) = N_Function_Specification;\n+   end Is_User_Defined_Equality;\n+\n    --------------------------------------\n    -- Is_Validation_Variable_Reference --\n    --------------------------------------"}, {"sha": "b8f4bed7996bf3b6d5e7eb613f5dcab1765ed84e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -1875,6 +1875,9 @@ package Sem_Util is\n    pragma Inline (Is_Universal_Numeric_Type);\n    --  True if T is Universal_Integer or Universal_Real\n \n+   function Is_User_Defined_Equality (Id : Entity_Id) return Boolean;\n+   --  Determine whether an entity denotes a user-defined equality\n+\n    function Is_Validation_Variable_Reference (N : Node_Id) return Boolean;\n    --  Determine whether N denotes a reference to a variable which captures the\n    --  value of an object for validation purposes."}, {"sha": "14a63c0a42b6dde47d1224f54aa1f538a1fc83cc", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,20 +127,17 @@ package body Styleg is\n    -----------------\n \n    --  In check tokens mode (-gnatys), arrow must be surrounded by spaces,\n-   --  except that within the argument of a Depends macro the required format\n-   --  is =>+ rather than => +).\n+   --  except that within the argument of a Depends or Refined_Depends aspect\n+   --  or pragma the required format is \"=>+ \" rather than \"=> +\").\n \n    procedure Check_Arrow (Inside_Depends : Boolean := False) is\n    begin\n       if Style_Check_Tokens then\n          Require_Preceding_Space;\n \n-         if not Inside_Depends then\n-            Require_Following_Space;\n-\n-         --  Special handling for Inside_Depends\n+         --  Special handling for Depends and Refined_Depends\n \n-         else\n+         if Inside_Depends then\n             if Source (Scan_Ptr) = ' '\n               and then Source (Scan_Ptr + 1) = '+'\n             then\n@@ -151,6 +148,11 @@ package body Styleg is\n             then\n                Require_Following_Space;\n             end if;\n+\n+         --  Normal case\n+\n+         else\n+            Require_Following_Space;\n          end if;\n       end if;\n    end Check_Arrow;\n@@ -1054,16 +1056,17 @@ package body Styleg is\n    --  In check token mode (-gnatyt), unary plus or minus must not be\n    --  followed by a space.\n \n-   --  Annoying exception: if we have the sequence =>+ within a Depends pragma\n-   --  or aspect, then we insist on a space rather than forbidding it.\n+   --  Annoying exception: if we have the sequence =>+ within a Depends or\n+   --  Refined_Depends pragma or aspect, then we insist on a space rather\n+   --  than forbidding it.\n \n    procedure Check_Unary_Plus_Or_Minus (Inside_Depends : Boolean := False) is\n    begin\n       if Style_Check_Tokens then\n-         if not Inside_Depends then\n-            Check_No_Space_After;\n-         else\n+         if Inside_Depends then\n             Require_Following_Space;\n+         else\n+            Check_No_Space_After;\n          end if;\n       end if;\n    end Check_Unary_Plus_Or_Minus;"}, {"sha": "7b23d2e72daac7e8560e573322c9c2c026216d94", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed323421344929d7b6104566d8301ce4f88fd00c/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=ed323421344929d7b6104566d8301ce4f88fd00c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,8 +54,8 @@ package Styleg is\n \n    procedure Check_Arrow (Inside_Depends : Boolean := False);\n    --  Called after scanning out an arrow to check spacing. Inside_Depends is\n-   --  true if the call is from an argument of the Depends pragma (where the\n-   --  allowed/required format is =>+).\n+   --  True if the call is from an argument of the Depends or Refined_Depends\n+   --  aspect or pragma (where the allowed/required format is =>+).\n \n    procedure Check_Attribute_Name (Reserved : Boolean);\n    --  The current token is an attribute designator. Check that it\n@@ -147,8 +147,9 @@ package Styleg is\n \n    procedure Check_Unary_Plus_Or_Minus  (Inside_Depends : Boolean := False);\n    --  Called after scanning a unary plus or minus to check spacing. The flag\n-   --  Inside_Depends is set if we are scanning within a Depends pragma or\n-   --  Aspect, in which case =>+ requires a following space).\n+   --  Inside_Depends is set if we are scanning within a Depends or\n+   --  Refined_Depends pragma or Aspect, in which case =>+ requires a\n+   --  following space.\n \n    procedure Check_Vertical_Bar;\n    --  Called after scanning a vertical bar to check spacing"}]}