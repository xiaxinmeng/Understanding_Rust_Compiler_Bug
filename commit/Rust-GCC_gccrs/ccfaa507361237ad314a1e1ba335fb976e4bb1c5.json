{"sha": "ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "node_id": "C_kwDOANBUbNoAKGNjZmFhNTA3MzYxMjM3YWQzMTRhMWUxYmEzMzVmYjk3NmU0YmIxYzU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:53:30Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:44Z"}, "message": "RISC-V: Add vwadd.w C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vwadd_wv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wv_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwadd_wx_tumu-3.C: New test.", "tree": {"sha": "23177a1e38ce833fbd9cf71e577700818932f56b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23177a1e38ce833fbd9cf71e577700818932f56b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0006e578d0aceac9c37ebfeca7e1a8c16ec102d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0006e578d0aceac9c37ebfeca7e1a8c16ec102d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0006e578d0aceac9c37ebfeca7e1a8c16ec102d5"}], "stats": {"total": 3960, "additions": 3960, "deletions": 0}, "files": [{"sha": "d4789dc4c70161386d2232c5e58a993da85343c7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b900041e1744d21a327108b23395d8987de1cecf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "75eed0bd3fe02bb51111ebf4c904c12d669af906", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wv(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8b85281bf9c472de817efd47f117097e7a44b848", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8fe88aaacf30852ac1a8d23eea3392e1297c1fa2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "41e6fde26cb9c9fc91b63c7c4178e20077f716cd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "aaeef67f864b0889a5dd4c1b3205c87b163e71a2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "adc01a0a2dd0e821d8a97228af94fd1bbb91b5a6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "9152b96ba4ee07b4380ac73e8ecded48ba22e8ee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "db2fe034939a45bae46cc9eb86d32785bbb6ae9b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ed7ad4ee17c5a4778f9d7b05a0f295b8686a1386", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d4e7dd3923c23f7e6fc81b4a99b58a21966328e5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3d68e06e4ac1ec47d8ee629d75759544833232d4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "494beffb6c428155b5c9183ce6b67afbf98218b4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3b6d36ba5f47745009be4c4c582f986fbc7bc4a8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wv_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1351b7abe67ee10b63200977380b583b5f43e736", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "fc7de2815443b6e43b4db82425ce1c18c73f11c3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "fffa55e93a15abb95ad3d91ebf0c4a2b283778eb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(op1,0xAA,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwadd_wx(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx(mask,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "71d9f8cce9c5a15fa834c3384042dd11c6bfba30", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "256270a17616e655ba60197133e0f30a8ab6e494", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2c72c2507073c6c907b6cb96137ec1f8faf3255f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8ee818652912e1f3ab6b4efee3f32fb9ca5814e0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "284f4b07320ee39857c7575c5a6068fae978826a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "27ba74833c994c2584bb7c8c4263f6b4c1d0ce3f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "22d4d0eb50801aaa60b8fa570841d05c7c4b1811", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "db285a583a664ee8895e45ae4ef081f2f635226a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9c1cad1b83d2d9d44dc597be8c01486311ad15bc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "15842274ac046c9b4dc3ea5ac25889f4e0555ee8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d818bbf17769297e052e2639d1e0a3e8d34f0a8b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "195d1643085d91366446784dc02f3ef1452adcd9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwadd_wx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfaa507361237ad314a1e1ba335fb976e4bb1c5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.C?ref=ccfaa507361237ad314a1e1ba335fb976e4bb1c5", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}