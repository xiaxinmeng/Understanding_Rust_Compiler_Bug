{"sha": "10b6d89baddd86139480ba902f491903fcb464a6", "node_id": "C_kwDOANBUbNoAKDEwYjZkODliYWRkZDg2MTM5NDgwYmE5MDJmNDkxOTAzZmNiNDY0YTY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-30T14:04:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:47Z"}, "message": "libstdc++: Make move ctor noexcept for fully-dynamic string\n\nThe move constructor for the \"fully-dynamic\" COW string is not noexcept,\nbecause it allocates a new empty string rep for the moved-from string.\nHowever, there is no need to do that, because the moved-from string does\nnot have to be left empty. Instead, implement move construction for the\nfully-dynamic case as a reference count increment, so the string is\nshared.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/cow_string.h [_GLIBCXX_FULLY_DYNAMIC_STRING]\n\t(basic_string(basic_string&&)): Add noexcept and avoid\n\tallocation, by sharing rep with the rvalue string.", "tree": {"sha": "b94c73c23bcea0a8e47d84a4c0b940c372fbd083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b94c73c23bcea0a8e47d84a4c0b940c372fbd083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b6d89baddd86139480ba902f491903fcb464a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b6d89baddd86139480ba902f491903fcb464a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b6d89baddd86139480ba902f491903fcb464a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b6d89baddd86139480ba902f491903fcb464a6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce709ad3dc0ed5d7ea48a116311d4441225446f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce709ad3dc0ed5d7ea48a116311d4441225446f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce709ad3dc0ed5d7ea48a116311d4441225446f0"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "ba4a8cc2e98893df4d64a188cc826fc9fa64ec6e", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b6d89baddd86139480ba902f491903fcb464a6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b6d89baddd86139480ba902f491903fcb464a6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=10b6d89baddd86139480ba902f491903fcb464a6", "patch": "@@ -620,18 +620,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The newly-created string contains the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        */\n-      basic_string(basic_string&& __str)\n+      basic_string(basic_string&& __str) noexcept\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n-      noexcept // FIXME C++11: should always be noexcept.\n-#endif\n       : _M_dataplus(std::move(__str._M_dataplus))\n       {\n-#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t__str._M_data(_S_empty_rep()._M_refdata());\n+      }\n #else\n-\t__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));\n-#endif\n+      : _M_dataplus(__str._M_rep())\n+      {\n+\t// Rather than allocate an empty string for the rvalue string,\n+\t// just share ownership with it by incrementing the reference count.\n+\t// If the rvalue string was \"leaked\" then it was the unique owner,\n+\t// so need an extra increment to indicate shared ownership.\n+\tif (_M_rep()->_M_is_leaked())\n+\t  __gnu_cxx::__atomic_add_dispatch(&_M_rep()->_M_refcount, 2);\n+\telse\n+\t  __gnu_cxx::__atomic_add_dispatch(&_M_rep()->_M_refcount, 1);\n       }\n+#endif\n \n       /**\n        *  @brief  Construct string from an initializer %list."}]}