{"sha": "8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "node_id": "C_kwDOANBUbNoAKDhiYzVjZGFhZmEyZTcyOWY5MjA5Njg0ZGMzMGFhMGFjYjcyZDI1ODA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-27T02:05:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-28T13:35:58Z"}, "message": "c++: CTAD and member function references [PR103943]\n\nMore quirks of rewriting member references to dependent references for\nCTAD.  A reference to a member of dependent scope is definitely dependent.\nAnd since r11-7044, tsubst_baselink builds a SCOPE_REF, so\ntsubst_qualified_id should just use it.\n\n\tPR c++/103943\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_qualified_id): Handle getting SCOPE_REF from\n\ttsubst_baselink.\n\t(instantiation_dependent_scope_ref_p): Check dependent_scope_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction109.C: New test.", "tree": {"sha": "0204dfbc4f6db215d3b0c399df1e3e49e24bf35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0204dfbc4f6db215d3b0c399df1e3e49e24bf35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc5cdaafa2e729f9209684dc30aa0acb72d2580/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72bdfcb848327020f62f72405d72cf85650666e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bdfcb848327020f62f72405d72cf85650666e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72bdfcb848327020f62f72405d72cf85650666e1"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "b229c9fc739ffeace7ddabc52f842c685354b895", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5cdaafa2e729f9209684dc30aa0acb72d2580/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5cdaafa2e729f9209684dc30aa0acb72d2580/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "patch": "@@ -16590,12 +16590,20 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \n   if (dependent_scope_p (scope))\n     {\n-      if (is_template)\n-\texpr = build_min_nt_loc (loc, TEMPLATE_ID_EXPR, expr, template_args);\n-      tree r = build_qualified_name (NULL_TREE, scope, expr,\n-\t\t\t\t     QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n-      REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (qualified_id);\n-      return r;\n+      if (TREE_CODE (expr) == SCOPE_REF)\n+\t/* We built one in tsubst_baselink.  */\n+\tgcc_checking_assert (same_type_p (scope, TREE_OPERAND (expr, 0)));\n+      else\n+\t{\n+\t  if (is_template)\n+\t    expr = build_min_nt_loc (loc, TEMPLATE_ID_EXPR, expr,\n+\t\t\t\t     template_args);\n+\t  expr = build_qualified_name (NULL_TREE, scope, expr,\n+\t\t\t\t       QUALIFIED_NAME_IS_TEMPLATE\n+\t\t\t\t       (qualified_id));\n+\t}\n+      REF_PARENTHESIZED_P (expr) = REF_PARENTHESIZED_P (qualified_id);\n+      return expr;\n     }\n \n   if (!BASELINK_P (name) && !DECL_P (expr))\n@@ -27334,6 +27342,7 @@ instantiation_dependent_scope_ref_p (tree t)\n {\n   if (DECL_P (TREE_OPERAND (t, 1))\n       && CLASS_TYPE_P (TREE_OPERAND (t, 0))\n+      && !dependent_scope_p (TREE_OPERAND (t, 0))\n       && !unknown_base_ref_p (t)\n       && accessible_in_template_p (TREE_OPERAND (t, 0),\n \t\t\t\t   TREE_OPERAND (t, 1)))"}, {"sha": "e621ebad28af6579109fca6111878bef3cf62ba1", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction109.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5cdaafa2e729f9209684dc30aa0acb72d2580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction109.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5cdaafa2e729f9209684dc30aa0acb72d2580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction109.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction109.C?ref=8bc5cdaafa2e729f9209684dc30aa0acb72d2580", "patch": "@@ -0,0 +1,64 @@\n+// PR c++/103943\n+// { dg-do compile { target c++17 } }\n+\n+template<typename R, typename...AA> struct F0 { //OK\n+    R(*fun_ptr)(AA...);\n+};\n+template<typename R, typename...AA> struct F1 { //OK\n+    R(*fun_ptr)(AA...);\n+    F1(R(*fun_ptr)(AA...)) : fun_ptr(fun_ptr) {}\n+};\n+template<typename R, typename...AA> struct F2 { //OK\n+    R(*fun_ptr)(AA...);\n+    using fun_ptr_t = decltype(fun_ptr);\n+    F2(fun_ptr_t fun_ptr) : fun_ptr(fun_ptr) {}\n+};\n+template<typename R, typename...AA> struct F3 {\n+    R(*fun_ptr)(AA...);\n+//  using fun_ptr_t = decltype(fun_ptr); //OK as in F2\n+    using fun_ptr_t = decltype(F3::fun_ptr); //ICE: Segmentation fault\n+//  using fun_ptr_t = decltype(F3<R, AA...>::fun_ptr); //ICE: Segmentation fault\n+    F3(fun_ptr_t fun_ptr) : fun_ptr(fun_ptr) {}\n+};\n+template<typename R, typename...AA> struct F4 {\n+    static R fun_not_implemented(AA...);\n+//  using fun_ptr_t = decltype(&fun_not_implemented); //OK\n+    using fun_ptr_t = decltype(&F4::fun_not_implemented); //OK with aggregate initialization (no ctor)\n+//  using fun_ptr_t = decltype(&F4<R, AA...>::fun_not_implemented); //OK with aggregate initialization (no ctor)\n+    fun_ptr_t fun_ptr;\n+};\n+template<typename R, typename...AA> struct F5 { //OK\n+    static R fun_not_implemented(AA...);\n+    using fun_ptr_t = decltype(&fun_not_implemented);\n+    fun_ptr_t fun_ptr;\n+    F5(fun_ptr_t fun_ptr) : fun_ptr(fun_ptr) {}\n+};\n+template<typename R, typename...AA> struct F6 {\n+    static R fun_not_implemented(AA...);\n+//  using fun_ptr_t = decltype(&fun_not_implemented); //OK as in F5\n+    using fun_ptr_t = decltype(&F6::fun_not_implemented); //ICE: in build_qualified_name, at cp/tree.c:2238\n+//  using fun_ptr_t = decltype(&F6<R, AA...>::fun_not_implemented); //ICE: in build_qualified_name, at cp/tree.c:2238\n+    fun_ptr_t fun_ptr;\n+    F6(fun_ptr_t fun_ptr) : fun_ptr(fun_ptr) {}\n+};\n+template<typename R, typename...AA> F0(R(*fun_ptr)(AA...)) -> F0<R, AA...>;\n+template<typename R, typename...AA> F1(R(*fun_ptr)(AA...)) -> F1<R, AA...>;\n+template<typename R, typename...AA> F2(R(*fun_ptr)(AA...)) -> F2<R, AA...>;\n+template<typename R, typename...AA> F3(R(*fun_ptr)(AA...)) -> F3<R, AA...>;\n+template<typename R, typename...AA> F4(R(*fun_ptr)(AA...)) -> F4<R, AA...>;\n+template<typename R, typename...AA> F5(R(*fun_ptr)(AA...)) -> F5<R, AA...>;\n+template<typename R, typename...AA> F6(R(*fun_ptr)(AA...)) -> F6<R, AA...>;\n+\n+int fun(int a) {\n+    return a + 1;\n+}\n+#pragma GCC diagnostic ignored \"-Wunused-but-set-variable\"\n+void test() {\n+    auto f0 = F0{&fun}; //OK\n+    auto f1 = F1{&fun}; //OK\n+    auto f2 = F2{&fun}; //OK\n+    auto f3 = F3{&fun}; //ICE: Segmentation fault\n+    auto f4 = F4{&fun}; //OK\n+    auto f5 = F5{&fun}; //OK\n+    auto f6 = F6{&fun}; //ICE: in build_qualified_name, at cp/tree.c:2238\n+}"}]}