{"sha": "8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkN2FlYzI2ZjExZDNkMzE3ZTBlNTllM2RiZTA0Yjk2YjcwNTJlNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-04-23T09:46:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:30Z"}, "message": "[Ada] Add support for XDR streaming in the default runtime\n\n2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* Makefile.rtl: Add s-statxd.o.\n\t* bindgen.adb (Gen_Adainit): Add support for XDR_Stream.\n\t* bindusg.adb (Display): Add mention of -xdr.\n\t* gnatbind.adb: Process -xdr switch.\n\t* init.c (__gl_xdr_stream): New.\n\t* opt.ads (XDR_Stream): New.\n\t* libgnat/s-stratt__xdr.adb: Rename to...\n\t* libgnat/s-statxd.adb: this and adjust.\n\t* libgnat/s-statxd.ads: New.\n\t* libgnat/s-stratt.ads, libgnat/s-stratt.adb: Choose between\n\tdefault and XDR implementation at runtime.\n\t* libgnat/s-ststop.ads: Update comments.\n\t* doc/gnat_rm/implementation_advice.rst: Update doc on XDR\n\tstreaming.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "4d86db185b225f11a160ebf06051052c0ade1ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d86db185b225f11a160ebf06051052c0ade1ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3950bed95136ad2b5e037e29daf3a464dc7cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3950bed95136ad2b5e037e29daf3a464dc7cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3950bed95136ad2b5e037e29daf3a464dc7cd5"}], "stats": {"total": 595, "additions": 428, "deletions": 167}, "files": [{"sha": "92af01733dfe4319c9b201a9e34998450fb1d2f0", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -707,6 +707,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-stopoo$(objext) \\\n   s-stposu$(objext) \\\n   s-stratt$(objext) \\\n+  s-statxd$(objext) \\\n   s-strhas$(objext) \\\n   s-string$(objext) \\\n   s-ststop$(objext) \\"}, {"sha": "91b4cb38486a00cd04c9c40b55a62104c28130ca", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -197,6 +197,7 @@ package body Bindgen is\n    --     Main_CPU                      : Integer;\n    --     Default_Sized_SS_Pool         : System.Address;\n    --     Binder_Sec_Stacks_Count       : Natural;\n+   --     XDR_Stream                    : Integer;\n \n    --  Main_Priority is the priority value set by pragma Priority in the main\n    --  program. If no such pragma is present, the value is -1.\n@@ -295,6 +296,9 @@ package body Bindgen is\n    --  Binder_Sec_Stacks_Count is the number of generated secondary stacks in\n    --  the Default_Sized_SS_Pool.\n \n+   --  XDR_Stream indicates whether streaming should be performed using the\n+   --  XDR protocol. A value of one indicates that XDR streaming is enabled.\n+\n    procedure WBI (Info : String) renames Osint.B.Write_Binder_Info;\n    --  Convenient shorthand used throughout\n \n@@ -758,13 +762,21 @@ package body Bindgen is\n                  \"\"\"__gnat_default_ss_size\"\");\");\n          end if;\n \n-         WBI (\"      Leap_Seconds_Support : Integer;\");\n-         WBI (\"      pragma Import (C, Leap_Seconds_Support, \" &\n-              \"\"\"__gl_leap_seconds_support\"\");\");\n+         if Leap_Seconds_Support then\n+            WBI (\"      Leap_Seconds_Support : Integer;\");\n+            WBI (\"      pragma Import (C, Leap_Seconds_Support, \" &\n+                 \"\"\"__gl_leap_seconds_support\"\");\");\n+         end if;\n+\n          WBI (\"      Bind_Env_Addr : System.Address;\");\n          WBI (\"      pragma Import (C, Bind_Env_Addr, \" &\n               \"\"\"__gl_bind_env_addr\"\");\");\n \n+         if XDR_Stream then\n+            WBI (\"      XDR_Stream : Integer;\");\n+            WBI (\"      pragma Import (C, XDR_Stream, \"\"__gl_xdr_stream\"\");\");\n+         end if;\n+\n          --  Import entry point for elaboration time signal handler\n          --  installation, and indication of if it's been called previously.\n \n@@ -978,16 +990,13 @@ package body Bindgen is\n          Set_String (\";\");\n          Write_Statement_Buffer;\n \n-         Set_String (\"      Leap_Seconds_Support := \");\n-\n          if Leap_Seconds_Support then\n-            Set_Int (1);\n-         else\n-            Set_Int (0);\n+            WBI (\"      Leap_Seconds_Support := 1;\");\n          end if;\n \n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n+         if XDR_Stream then\n+            WBI (\"      XDR_Stream := 1;\");\n+         end if;\n \n          if Bind_Env_String_Built then\n             WBI (\"      Bind_Env_Addr := Bind_Env'Address;\");"}, {"sha": "6fd55ee87211b144b99444f5030df6484b1ae66e", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -315,6 +315,11 @@ package body Bindusg is\n       Write_Line\n         (\"  -x        Exclude source files (check object consistency only)\");\n \n+      --  Line for -xdr switch\n+\n+      Write_Line\n+        (\"  -xdr      Use the XDR protocol for streaming\");\n+\n       --  Line for -X switch\n \n       Write_Line"}, {"sha": "998d0c597df361e8702e8f665979c40ab557a2b8", "filename": "gcc/ada/doc/gnat_rm/implementation_advice.rst", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -712,43 +712,20 @@ RM 13.13.2(1.6): Stream Oriented Attributes\n   to the nearest factor or multiple of the word size that is also a\n   multiple of the stream element size.\"\n \n-Followed, except that the number of stream elements is a power of 2.\n+Followed, except that the number of stream elements is 1, 2, 3, 4 or 8.\n The Stream_Size may be used to override the default choice.\n \n-However, such an implementation is based on direct binary\n-representations and is therefore target- and endianness-dependent.  To\n-address this issue, GNAT also supplies an alternate implementation of\n-the stream attributes ``Read`` and ``Write``, which uses the\n-target-independent XDR standard representation for scalar types.\n+The default implementation is based on direct binary representations and is\n+therefore target- and endianness-dependent.  To address this issue, GNAT also\n+supplies an alternate implementation of the stream attributes ``Read`` and\n+``Write``, which uses the target-independent XDR standard representation for\n+scalar types. This XDR alternative can be enabled via the binder switch -xdr.\n \n .. index:: XDR representation\n-\n .. index:: Read attribute\n-\n .. index:: Write attribute\n-\n .. index:: Stream oriented attributes\n \n-The XDR implementation is provided as an alternative body of the\n-``System.Stream_Attributes`` package, in the file\n-:file:`s-stratt-xdr.adb` in the GNAT library.\n-There is no :file:`s-stratt-xdr.ads` file.\n-In order to install the XDR implementation, do the following:\n-\n-* Replace the default implementation of the\n-  ``System.Stream_Attributes`` package with the XDR implementation.\n-  For example on a Unix platform issue the commands:\n-\n-  .. code-block:: sh\n-\n-    $ mv s-stratt.adb s-stratt-default.adb\n-    $ mv s-stratt-xdr.adb s-stratt.adb\n-\n-\n-*\n-  Rebuild the GNAT run-time library as documented in\n-  the *GNAT and Libraries* section of the :title:`GNAT User's Guide`.\n-\n RM A.1(52): Names of Predefined Numeric Types\n =============================================\n "}, {"sha": "d72f905a2dfee92c7d7584d5de99094bb400968e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -14445,14 +14445,14 @@ to the nearest factor or multiple of the word size that is also a\n multiple of the stream element size.\"\n @end quotation\n \n-Followed, except that the number of stream elements is a power of 2.\n+Followed, except that the number of stream elements is 1, 2, 3, 4 or 8.\n The Stream_Size may be used to override the default choice.\n \n-However, such an implementation is based on direct binary\n-representations and is therefore target- and endianness-dependent.  To\n-address this issue, GNAT also supplies an alternate implementation of\n-the stream attributes @code{Read} and @code{Write}, which uses the\n-target-independent XDR standard representation for scalar types.\n+The default implementation is based on direct binary representations and is\n+therefore target- and endianness-dependent.  To address this issue, GNAT also\n+supplies an alternate implementation of the stream attributes @code{Read} and\n+@code{Write}, which uses the target-independent XDR standard representation for\n+scalar types. This XDR alternative can be enabled via the binder switch -xdr.\n \n @geindex XDR representation\n \n@@ -14462,30 +14462,6 @@ target-independent XDR standard representation for scalar types.\n \n @geindex Stream oriented attributes\n \n-The XDR implementation is provided as an alternative body of the\n-@code{System.Stream_Attributes} package, in the file\n-@code{s-stratt-xdr.adb} in the GNAT library.\n-There is no @code{s-stratt-xdr.ads} file.\n-In order to install the XDR implementation, do the following:\n-\n-\n-@itemize *\n-\n-@item \n-Replace the default implementation of the\n-@code{System.Stream_Attributes} package with the XDR implementation.\n-For example on a Unix platform issue the commands:\n-\n-@example\n-$ mv s-stratt.adb s-stratt-default.adb\n-$ mv s-stratt-xdr.adb s-stratt.adb\n-@end example\n-\n-@item \n-Rebuild the GNAT run-time library as documented in\n-the @emph{GNAT and Libraries} section of the @cite{GNAT User's Guide}.\n-@end itemize\n-\n @node RM A 1 52 Names of Predefined Numeric Types,RM A 3 2 49 Ada Characters Handling,RM 13 13 2 1 6 Stream Oriented Attributes,Implementation Advice\n @anchor{gnat_rm/implementation_advice rm-a-1-52-names-of-predefined-numeric-types}@anchor{236}\n @section RM A.1(52): Names of Predefined Numeric Types"}, {"sha": "4372152b439c5b298a5b38994daecaa4a0b40f7e", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -499,6 +499,11 @@ procedure Gnatbind is\n             Opt.Bind_Alternate_Main_Name := True;\n             Opt.Alternate_Main_Name := new String'(Argv (3 .. Argv'Last));\n \n+         --  -xdr\n+\n+         elsif Argv (2 .. Argv'Last) = \"xdr\" then\n+            Opt.XDR_Stream := True;\n+\n          --  All other options are single character and are handled by\n          --  Scan_Binder_Switches.\n "}, {"sha": "e76aa79c5a8f1a88bbc74bcc1f1f66f2f7cfdee1", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -122,6 +122,7 @@ int   __gl_default_stack_size            = -1;\n int   __gl_leap_seconds_support          = 0;\n int   __gl_canonical_streams             = 0;\n char *__gl_bind_env_addr                 = NULL;\n+int   __gl_xdr_stream                    = 0;\n \n /* This value is not used anymore, but kept for bootstrapping purpose.  */\n int   __gl_zero_cost_exceptions          = 0;"}, {"sha": "fcefae7e6f2eccee923d4d9c766f4e787158ab57", "filename": "gcc/ada/libgnat/s-statxd.adb", "status": "renamed", "additions": 19, "deletions": 44, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-statxd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-statxd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-statxd.adb?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---             S Y S T E M . S T R E A M _ A T T R I B U T E S              --\n+--          S Y S T E M . S T R E A M _ A T T R I B U T E S . X D R         --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n@@ -29,20 +29,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This file is an alternate version of s-stratt.adb based on the XDR\n---  standard. It is especially useful for exchanging streams between two\n---  different systems with different basic type representations and endianness.\n-\n-pragma Warnings (Off, \"*not allowed in compiler unit\");\n---  This body is used only when rebuilding the runtime library, not when\n---  building the compiler, so it's OK to depend on features that would\n---  otherwise break bootstrap (e.g. IF-expressions).\n-\n with Ada.IO_Exceptions;\n with Ada.Streams;              use Ada.Streams;\n with Ada.Unchecked_Conversion;\n \n-package body System.Stream_Attributes is\n+package body System.Stream_Attributes.XDR is\n \n    pragma Suppress (Range_Check);\n    pragma Suppress (Overflow_Check);\n@@ -68,19 +59,16 @@ package body System.Stream_Attributes is\n    subtype SEA is Ada.Streams.Stream_Element_Array;\n    subtype SEO is Ada.Streams.Stream_Element_Offset;\n \n-   generic function UC renames Ada.Unchecked_Conversion;\n-\n-   type Field_Type is\n-      record\n-         E_Size       : Integer; --  Exponent bit size\n-         E_Bias       : Integer; --  Exponent bias\n-         F_Size       : Integer; --  Fraction bit size\n-         E_Last       : Integer; --  Max exponent value\n-         F_Mask       : SE;      --  Mask to apply on first fraction byte\n-         E_Bytes      : SEO;     --  N. of exponent bytes completely used\n-         F_Bytes      : SEO;     --  N. of fraction bytes completely used\n-         F_Bits       : Integer; --  N. of bits used on first fraction word\n-      end record;\n+   type Field_Type is record\n+      E_Size       : Integer; --  Exponent bit size\n+      E_Bias       : Integer; --  Exponent bias\n+      F_Size       : Integer; --  Fraction bit size\n+      E_Last       : Integer; --  Max exponent value\n+      F_Mask       : SE;      --  Mask to apply on first fraction byte\n+      E_Bytes      : SEO;     --  N. of exponent bytes completely used\n+      F_Bytes      : SEO;     --  N. of fraction bytes completely used\n+      F_Bits       : Integer; --  N. of bits used on first fraction word\n+   end record;\n \n    type Precision is (Single, Double, Quadruple);\n \n@@ -255,8 +243,8 @@ package body System.Stream_Attributes is\n    type XDR_TM is mod BB ** TM_L;\n \n    type XDR_SA is mod 2 ** Standard'Address_Size;\n-   function To_XDR_SA is new UC (System.Address, XDR_SA);\n-   function To_XDR_SA is new UC (XDR_SA, System.Address);\n+   function To_XDR_SA is new Ada.Unchecked_Conversion (System.Address, XDR_SA);\n+   function To_XDR_SA is new Ada.Unchecked_Conversion (XDR_SA, System.Address);\n \n    --  Enumerations have the same representation as signed integers.\n    --  Enumerations are handy for describing subsets of the integers.\n@@ -299,19 +287,6 @@ package body System.Stream_Attributes is\n    Optimize_Integers : constant Boolean :=\n      Default_Bit_Order = High_Order_First;\n \n-   -----------------\n-   -- Block_IO_OK --\n-   -----------------\n-\n-   --  We must inhibit Block_IO, because in XDR mode, each element is output\n-   --  according to XDR requirements, which is not at all the same as writing\n-   --  the whole array in one block.\n-\n-   function Block_IO_OK return Boolean is\n-   begin\n-      return False;\n-   end Block_IO_OK;\n-\n    ----------\n    -- I_AD --\n    ----------\n@@ -1485,7 +1460,7 @@ package body System.Stream_Attributes is\n \n    procedure W_LI (Stream : not null access RST; Item : Long_Integer) is\n       S : XDR_S_LI;\n-      U : Unsigned;\n+      U : Unsigned := 0;\n       X : Long_Unsigned;\n \n    begin\n@@ -1629,7 +1604,7 @@ package body System.Stream_Attributes is\n       Item   : Long_Long_Integer)\n    is\n       S : XDR_S_LLI;\n-      U : Unsigned;\n+      U : Unsigned := 0;\n       X : Long_Long_Unsigned;\n \n    begin\n@@ -1677,7 +1652,7 @@ package body System.Stream_Attributes is\n       Item   : Long_Long_Unsigned)\n    is\n       S : XDR_S_LLU;\n-      U : Unsigned;\n+      U : Unsigned := 0;\n       X : Long_Long_Unsigned := Item;\n \n    begin\n@@ -1714,7 +1689,7 @@ package body System.Stream_Attributes is\n \n    procedure W_LU (Stream : not null access RST; Item : Long_Unsigned) is\n       S : XDR_S_LU;\n-      U : Unsigned;\n+      U : Unsigned := 0;\n       X : Long_Unsigned := Item;\n \n    begin\n@@ -2032,4 +2007,4 @@ package body System.Stream_Attributes is\n       end if;\n    end W_WWC;\n \n-end System.Stream_Attributes;\n+end System.Stream_Attributes.XDR;", "previous_filename": "gcc/ada/libgnat/s-stratt__xdr.adb"}, {"sha": "cca5e5471bd3349798d43010ec54d1a21ce1b872", "filename": "gcc/ada/libgnat/s-statxd.ads", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-statxd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-statxd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-statxd.ads?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -0,0 +1,117 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--          S Y S T E M . S T R E A M _ A T T R I B U T E S . X D R         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains alternate implementations of the stream attributes\n+--  for elementary types based on the XDR standard. These are the subprograms\n+--  that are directly accessed by occurrences of the stream attributes where\n+--  the type is elementary.\n+\n+--  It is especially useful for exchanging streams between two different\n+--  systems with different basic type representations and endianness.\n+\n+--  We only provide the subprograms for the standard base types. For user\n+--  defined types, the subprogram for the corresponding root type is called\n+--  with an appropriate conversion.\n+\n+package System.Stream_Attributes.XDR is\n+   pragma Preelaborate;\n+\n+   pragma Suppress (Accessibility_Check, XDR);\n+   --  No need to check accessibility on arguments of subprograms\n+\n+   ---------------------\n+   -- Input Functions --\n+   ---------------------\n+\n+   --  Functions for S'Input attribute. These functions are also used for\n+   --  S'Read, with the obvious transformation, since the input operation\n+   --  is the same for all elementary types (no bounds or discriminants\n+   --  are involved).\n+\n+   function I_AD  (Stream : not null access RST) return Fat_Pointer;\n+   function I_AS  (Stream : not null access RST) return Thin_Pointer;\n+   function I_B   (Stream : not null access RST) return Boolean;\n+   function I_C   (Stream : not null access RST) return Character;\n+   function I_F   (Stream : not null access RST) return Float;\n+   function I_I   (Stream : not null access RST) return Integer;\n+   function I_I24 (Stream : not null access RST) return Integer_24;\n+   function I_LF  (Stream : not null access RST) return Long_Float;\n+   function I_LI  (Stream : not null access RST) return Long_Integer;\n+   function I_LLF (Stream : not null access RST) return Long_Long_Float;\n+   function I_LLI (Stream : not null access RST) return Long_Long_Integer;\n+   function I_LLU (Stream : not null access RST) return UST.Long_Long_Unsigned;\n+   function I_LU  (Stream : not null access RST) return UST.Long_Unsigned;\n+   function I_SF  (Stream : not null access RST) return Short_Float;\n+   function I_SI  (Stream : not null access RST) return Short_Integer;\n+   function I_SSI (Stream : not null access RST) return Short_Short_Integer;\n+   function I_SSU (Stream : not null access RST) return\n+                                                   UST.Short_Short_Unsigned;\n+   function I_SU  (Stream : not null access RST) return UST.Short_Unsigned;\n+   function I_U   (Stream : not null access RST) return UST.Unsigned;\n+   function I_U24 (Stream : not null access RST) return Unsigned_24;\n+   function I_WC  (Stream : not null access RST) return Wide_Character;\n+   function I_WWC (Stream : not null access RST) return Wide_Wide_Character;\n+\n+   -----------------------\n+   -- Output Procedures --\n+   -----------------------\n+\n+   --  Procedures for S'Write attribute. These procedures are also used for\n+   --  'Output, since for elementary types there is no difference between\n+   --  'Write and 'Output because there are no discriminants or bounds to\n+   --  be written.\n+\n+   procedure W_AD  (Stream : not null access RST; Item : Fat_Pointer);\n+   procedure W_AS  (Stream : not null access RST; Item : Thin_Pointer);\n+   procedure W_B   (Stream : not null access RST; Item : Boolean);\n+   procedure W_C   (Stream : not null access RST; Item : Character);\n+   procedure W_F   (Stream : not null access RST; Item : Float);\n+   procedure W_I   (Stream : not null access RST; Item : Integer);\n+   procedure W_I24 (Stream : not null access RST; Item : Integer_24);\n+   procedure W_LF  (Stream : not null access RST; Item : Long_Float);\n+   procedure W_LI  (Stream : not null access RST; Item : Long_Integer);\n+   procedure W_LLF (Stream : not null access RST; Item : Long_Long_Float);\n+   procedure W_LLI (Stream : not null access RST; Item : Long_Long_Integer);\n+   procedure W_LLU (Stream : not null access RST; Item :\n+                                                    UST.Long_Long_Unsigned);\n+   procedure W_LU  (Stream : not null access RST; Item : UST.Long_Unsigned);\n+   procedure W_SF  (Stream : not null access RST; Item : Short_Float);\n+   procedure W_SI  (Stream : not null access RST; Item : Short_Integer);\n+   procedure W_SSI (Stream : not null access RST; Item : Short_Short_Integer);\n+   procedure W_SSU (Stream : not null access RST; Item :\n+                                                    UST.Short_Short_Unsigned);\n+   procedure W_SU  (Stream : not null access RST; Item : UST.Short_Unsigned);\n+   procedure W_U   (Stream : not null access RST; Item : UST.Unsigned);\n+   procedure W_U24 (Stream : not null access RST; Item : Unsigned_24);\n+   procedure W_WC  (Stream : not null access RST; Item : Wide_Character);\n+   procedure W_WWC (Stream : not null access RST; Item : Wide_Wide_Character);\n+\n+end System.Stream_Attributes.XDR;"}, {"sha": "366dabdc7b6ac677e73b7a43bde8afc43e3e8bf6", "filename": "gcc/ada/libgnat/s-stratt.adb", "status": "modified", "additions": 240, "deletions": 46, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stratt.adb?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -32,9 +32,20 @@\n with Ada.IO_Exceptions;\n with Ada.Streams; use Ada.Streams;\n with Ada.Unchecked_Conversion;\n+with System.Stream_Attributes.XDR;\n \n package body System.Stream_Attributes is\n \n+   XDR_Flag : Integer;\n+   pragma Import (C, XDR_Flag, \"__gl_xdr_stream\");\n+   --  This imported value is used to determine whether the build had the\n+   --  binder switch \"-xdr\" present which enables XDR streaming and sets this\n+   --  flag to 1.\n+\n+   function XDR_Support return Boolean;\n+   pragma Inline (XDR_Support);\n+   --  Return True if XDR streaming should be used\n+\n    Err : exception renames Ada.IO_Exceptions.End_Error;\n    --  Exception raised if insufficient data read (note that the RM implies\n    --  that Data_Error might be the appropriate choice, but AI95-00132\n@@ -122,13 +133,22 @@ package body System.Stream_Attributes is\n    function To_WC  is new UC (S_WC,  Wide_Character);\n    function To_WWC is new UC (S_WWC, Wide_Wide_Character);\n \n+   -----------------\n+   -- XDR_Support --\n+   -----------------\n+\n+   function XDR_Support return Boolean is\n+   begin\n+      return XDR_Flag = 1;\n+   end XDR_Support;\n+\n    -----------------\n    -- Block_IO_OK --\n    -----------------\n \n    function Block_IO_OK return Boolean is\n    begin\n-      return True;\n+      return not XDR_Support;\n    end Block_IO_OK;\n \n    ----------\n@@ -140,6 +160,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_AD (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -158,6 +182,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_AS (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -176,6 +204,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_B (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -194,6 +226,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_C (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -212,6 +248,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_F (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -230,6 +270,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_I (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -248,6 +292,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_I24 (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -266,6 +314,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LF (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -284,6 +336,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LI (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -302,6 +358,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LLF (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -320,6 +380,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LLI (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -340,6 +404,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LLU (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -358,6 +426,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_LU (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -376,6 +448,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_SF (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -394,6 +470,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_SI (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -412,6 +492,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_SSI (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -432,6 +516,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_SSU (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -450,6 +538,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_SU (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -468,6 +560,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_U (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -486,6 +582,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_U24 (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -504,6 +604,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_WC (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -522,6 +626,10 @@ package body System.Stream_Attributes is\n       L : SEO;\n \n    begin\n+      if XDR_Support then\n+         return XDR.I_WWC (Stream);\n+      end if;\n+\n       Ada.Streams.Read (Stream.all, T, L);\n \n       if L < T'Last then\n@@ -538,6 +646,11 @@ package body System.Stream_Attributes is\n    procedure W_AD (Stream : not null access RST; Item : Fat_Pointer) is\n       T : constant S_AD := From_AD (Item);\n    begin\n+      if XDR_Support then\n+         XDR.W_AD (Stream, Item);\n+         return;\n+      end if;\n+\n       Ada.Streams.Write (Stream.all, T);\n    end W_AD;\n \n@@ -548,6 +661,11 @@ package body System.Stream_Attributes is\n    procedure W_AS (Stream : not null access RST; Item : Thin_Pointer) is\n       T : constant S_AS := From_AS (Item);\n    begin\n+      if XDR_Support then\n+         XDR.W_AS (Stream, Item);\n+         return;\n+      end if;\n+\n       Ada.Streams.Write (Stream.all, T);\n    end W_AS;\n \n@@ -558,6 +676,11 @@ package body System.Stream_Attributes is\n    procedure W_B (Stream : not null access RST; Item : Boolean) is\n       T : S_B;\n    begin\n+      if XDR_Support then\n+         XDR.W_B (Stream, Item);\n+         return;\n+      end if;\n+\n       T (1) := Boolean'Pos (Item);\n       Ada.Streams.Write (Stream.all, T);\n    end W_B;\n@@ -569,6 +692,11 @@ package body System.Stream_Attributes is\n    procedure W_C (Stream : not null access RST; Item : Character) is\n       T : S_C;\n    begin\n+      if XDR_Support then\n+         XDR.W_C (Stream, Item);\n+         return;\n+      end if;\n+\n       T (1) := Character'Pos (Item);\n       Ada.Streams.Write (Stream.all, T);\n    end W_C;\n@@ -578,71 +706,97 @@ package body System.Stream_Attributes is\n    ---------\n \n    procedure W_F (Stream : not null access RST; Item : Float) is\n-      T : constant S_F := From_F (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_F (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_F (Item));\n    end W_F;\n \n    ---------\n    -- W_I --\n    ---------\n \n    procedure W_I (Stream : not null access RST; Item : Integer) is\n-      T : constant S_I := From_I (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_I (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_I (Item));\n    end W_I;\n \n    -----------\n    -- W_I24 --\n    -----------\n \n    procedure W_I24 (Stream : not null access RST; Item : Integer_24) is\n-      T : constant S_I24 := From_I24 (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_I24 (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_I24 (Item));\n    end W_I24;\n \n    ----------\n    -- W_LF --\n    ----------\n \n    procedure W_LF (Stream : not null access RST; Item : Long_Float) is\n-      T : constant S_LF := From_LF (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LF (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LF (Item));\n    end W_LF;\n \n    ----------\n    -- W_LI --\n    ----------\n \n    procedure W_LI (Stream : not null access RST; Item : Long_Integer) is\n-      T : constant S_LI := From_LI (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LI (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LI (Item));\n    end W_LI;\n \n    -----------\n    -- W_LLF --\n    -----------\n \n    procedure W_LLF (Stream : not null access RST; Item : Long_Long_Float) is\n-      T : constant S_LLF := From_LLF (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LLF (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LLF (Item));\n    end W_LLF;\n \n    -----------\n    -- W_LLI --\n    -----------\n \n-   procedure W_LLI\n-     (Stream : not null access RST; Item : Long_Long_Integer)\n-   is\n-      T : constant S_LLI := From_LLI (Item);\n+   procedure W_LLI (Stream : not null access RST; Item : Long_Long_Integer) is\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LLI (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LLI (Item));\n    end W_LLI;\n \n    -----------\n@@ -652,41 +806,55 @@ package body System.Stream_Attributes is\n    procedure W_LLU\n      (Stream : not null access RST; Item : UST.Long_Long_Unsigned)\n    is\n-      T : constant S_LLU := From_LLU (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LLU (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LLU (Item));\n    end W_LLU;\n \n    ----------\n    -- W_LU --\n    ----------\n \n-   procedure W_LU\n-     (Stream : not null access RST; Item : UST.Long_Unsigned)\n-   is\n-      T : constant S_LU := From_LU (Item);\n+   procedure W_LU (Stream : not null access RST; Item : UST.Long_Unsigned) is\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_LU (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LU (Item));\n    end W_LU;\n \n    ----------\n    -- W_SF --\n    ----------\n \n    procedure W_SF (Stream : not null access RST; Item : Short_Float) is\n-      T : constant S_SF := From_SF (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_SF (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_SF (Item));\n    end W_SF;\n \n    ----------\n    -- W_SI --\n    ----------\n \n    procedure W_SI (Stream : not null access RST; Item : Short_Integer) is\n-      T : constant S_SI := From_SI (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_SI (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_SI (Item));\n    end W_SI;\n \n    -----------\n@@ -696,9 +864,13 @@ package body System.Stream_Attributes is\n    procedure W_SSI\n      (Stream : not null access RST; Item : Short_Short_Integer)\n    is\n-      T : constant S_SSI := From_SSI (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_SSI (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_SSI (Item));\n    end W_SSI;\n \n    -----------\n@@ -708,51 +880,69 @@ package body System.Stream_Attributes is\n    procedure W_SSU\n      (Stream : not null access RST; Item : UST.Short_Short_Unsigned)\n    is\n-      T : constant S_SSU := From_SSU (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_SSU (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_SSU (Item));\n    end W_SSU;\n \n    ----------\n    -- W_SU --\n    ----------\n \n-   procedure W_SU\n-     (Stream : not null access RST; Item : UST.Short_Unsigned)\n-   is\n-      T : constant S_SU := From_SU (Item);\n+   procedure W_SU (Stream : not null access RST; Item : UST.Short_Unsigned) is\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_SU (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_SU (Item));\n    end W_SU;\n \n    ---------\n    -- W_U --\n    ---------\n \n    procedure W_U (Stream : not null access RST; Item : UST.Unsigned) is\n-      T : constant S_U := From_U (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_U (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_U (Item));\n    end W_U;\n \n    -----------\n    -- W_U24 --\n    -----------\n \n    procedure W_U24 (Stream : not null access RST; Item : Unsigned_24) is\n-      T : constant S_U24 := From_U24 (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_U24 (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_U24 (Item));\n    end W_U24;\n \n    ----------\n    -- W_WC --\n    ----------\n \n    procedure W_WC (Stream : not null access RST; Item : Wide_Character) is\n-      T : constant S_WC := From_WC (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_WC (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_WC (Item));\n    end W_WC;\n \n    -----------\n@@ -762,9 +952,13 @@ package body System.Stream_Attributes is\n    procedure W_WWC\n      (Stream : not null access RST; Item : Wide_Wide_Character)\n    is\n-      T : constant S_WWC := From_WWC (Item);\n    begin\n-      Ada.Streams.Write (Stream.all, T);\n+      if XDR_Support then\n+         XDR.W_WWC (Stream, Item);\n+         return;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_WWC (Item));\n    end W_WWC;\n \n end System.Stream_Attributes;"}, {"sha": "c8c453aad2a2d8951b3c44c510bd4fb78903dcc5", "filename": "gcc/ada/libgnat/s-stratt.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-stratt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-stratt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stratt.ads?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -163,11 +163,8 @@ package System.Stream_Attributes is\n    procedure W_WWC (Stream : not null access RST; Item : Wide_Wide_Character);\n \n    function Block_IO_OK return Boolean;\n-   --  Package System.Stream_Attributes has several bodies - the default one\n-   --  distributed with GNAT, and s-stratt__xdr.adb, which is based on the XDR\n-   --  standard. Both bodies share the same spec. The role of this function is\n-   --  to indicate whether the current version of System.Stream_Attributes\n-   --  supports block IO. See System.Strings.Stream_Ops (s-ststop) for details.\n+   --  Indicate whether the current setting supports block IO. See\n+   --  System.Strings.Stream_Ops (s-ststop) for details on block IO.\n \n private\n    pragma Inline (I_AD);"}, {"sha": "321460b89d870e8c87d787bd43486314801d9625", "filename": "gcc/ada/libgnat/s-ststop.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-ststop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Flibgnat%2Fs-ststop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-ststop.ads?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -60,8 +60,8 @@\n --  Note that if System.Stream_Attributes.Block_IO_OK is False, then the BLK_IO\n --  form is treated as equivalent to the normal case, so that the optimization\n --  is inhibited anyway, regardless of the setting of the restriction. This\n---  handles versions of System.Stream_Attributes (in particular the XDR version\n---  found in s-stratt-xdr) which do not permit block io optimization.\n+--  handles the XDR implementation of System.Stream_Attributes in particular\n+--  which does not permit block io optimization.\n \n pragma Compiler_Unit_Warning;\n "}, {"sha": "37f3d030e3f22465a574d7b0db3ff8fa216ccf8a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=8cd7aec26f11d3d317e0e59e3dbe04b96b7052e4", "patch": "@@ -915,7 +915,7 @@ package Opt is\n    Leap_Seconds_Support : Boolean := False;\n    --  GNATBIND\n    --  Set to True to enable leap seconds support in Ada.Calendar and its\n-   --  children.\n+   --  children. Set by -y.\n \n    Legacy_Elaboration_Checks : Boolean := False;\n    --  GNAT\n@@ -1007,6 +1007,10 @@ package Opt is\n    --  before preprocessing occurs. Set to True by switch -s of gnatprep or\n    --  -s in preprocessing data file for the compiler.\n \n+   XDR_Stream : Boolean := False;\n+   --  GNATBIND\n+   --  Set to True to enable XDR in s-stratt.adb. Set by -xdr.\n+\n    type Create_Repinfo_File_Proc is access procedure (Src  : String);\n    type Write_Repinfo_Line_Proc  is access procedure (Info : String);\n    type Close_Repinfo_File_Proc  is access procedure;"}]}